|| __DATA.__common _SBOmnibusAlertItemTestCases
|| __DATA.__common _SBTestableAlertItemTestCases
|| __DATA.__common ___PPTUserSpecifiedEnvironment
|| __DATA.__common ___ScrollTestCurrentPageIndex
|| __DATA.__common ___extendedModeActive
|| __DATA.__common __hasFinishedScrolling
|| __DATA.__data _SBActionHandlerErrorDomain
|| __DATA.__data _SBApplicationDropSessionErrorDomain
|| __DATA.__data _SBBluetoothBatteryAvailabilityChangedNotification
|| __DATA.__data _SBBluetoothBatteryLevelChangedNotification
|| __DATA.__data _SBBluetoothConnectionChangedNotification
|| __DATA.__data _SBButtonLoggingSubsystem
|| __DATA.__data _SBCoverSheetIconFlyInDefaultCenter
|| __DATA.__data _SBHUDControllerDidDismissHUDWindowNotification
|| __DATA.__data _SBIconControllerIconModelDidChangeNotification
|| __DATA.__data _SBIconControllerOverlayVisibilityDidChangeNotification
|| __DATA.__data _SBIconControllerSidebarVisibilityDidChangeNotification
|| __DATA.__data _SBMainDisplaySceneManagerErrorDomain
|| __DATA.__data _SBMainSwitcherViewControllerErrorDomain
|| __DATA.__data _SBMainWorkspaceErrorDomain
|| __DATA.__data _SBWorkspaceErrorDomain
|| __DATA.__data _SBZStackAuditorErrorDomain
|| __DATA.__data ___QuitTestKey
|| __DATA.__data ___ScrollTestPageDelay
|| __DATA.__data ___ScrollTestPageIncrement
|| __DATA.__data ___ScrollTestTargetPageIndex
|| __DATA.__objc_data _OBJC_CLASS_$_BezierCurve
|| __DATA.__objc_data _OBJC_CLASS_$_CSConcreteUnlockRequest
|| __DATA.__objc_data _OBJC_CLASS_$_NCRevealWalletPassActionRunner
|| __DATA.__objc_data _OBJC_CLASS_$_PathPoint
|| __DATA.__objc_data _OBJC_CLASS_$_SBAWDQueryableMetric
|| __DATA.__objc_data _OBJC_CLASS_$_SBAccessoryController
|| __DATA.__objc_data _OBJC_CLASS_$_SBActivateAppClipFromPlaceholderWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBActivateAppUnderLockScreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBActivationFailedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBActivationInfoViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBActiveAppLayoutFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAddModifierSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnalyticsAggdInterface
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnalyticsAggdSimpleEventHandler
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnalyticsCoreAnalyticsEventHandler
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnimatablePropertyChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnimationCompletionDodgingModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnimationStepper
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppBrightnessChangeLogger
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppBrightnessMetric
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppBrightnessMetricData
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppClipOverlayView
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppClipPlaceholderLayoutElementViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppDeniedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppDragAndDropGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppExposeGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppExposeToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppExposeToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppFreeDevProfileNotTrustedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppPlatterDragPreviewDelayCleanupAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppProfileExpiredAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppProfileNeedsValidationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppProfileNotTrustedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppRepairTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppStatusBarTransitionInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppSwitcherPageServiceRemoteViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppSwitcherService
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppSwitcherServicePageContentView
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppSwitcherServiceSet
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppSwitcherTransientOverlayPageContentView
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppUnderFloatingSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppUnderFloatingSwitcherTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplication32BitDeprecationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationBlurContentView
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationBlurContentViewBackdropSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationBlurSnapshotGenerationContainerView
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationDropSession
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationLaunchNotifyAirplaneModeAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationLaunchNotifyAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationLaunchNotifyInCallAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationLaunchNotifyInCallWithoutDataSwitchingAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationSceneRemovalAnimationDomain
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationSignatureVersionRepairAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationSignatureVersionUnsupportedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationWakeScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationWakeSchedulerFactory
|| __DATA.__objc_data _OBJC_CLASS_$_SBArcSwipeFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAuthenticationFeedback
|| __DATA.__objc_data _OBJC_CLASS_$_SBAutoPurgingImageView
|| __DATA.__objc_data _OBJC_CLASS_$_SBBannerSourceListenerPresentableViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBBannerUnfurlSourceContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBBannerUnfurlToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBBaseStatusBarChangeAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBBatteryDeviceChargeTestRecipe
|| __DATA.__objc_data _OBJC_CLASS_$_SBBatteryDeviceCountTestRecipe
|| __DATA.__objc_data _OBJC_CLASS_$_SBBatteryLogger
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricKitDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorPearlDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorTestRecipeDummyDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorUI
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorView
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBBluetoothAccessoryLowPowerAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBBlurItemContainerSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBBlurProgressSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBBlurViewCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_SBBookmark
|| __DATA.__objc_data _OBJC_CLASS_$_SBBuddyLockScreenDismissOnlyAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBCAAnimationBlockDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_SBCancelableBlockOperation
|| __DATA.__objc_data _OBJC_CLASS_$_SBCardDragAndDropGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCardDropSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCardDropSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterAppIconZoomAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterWindowActivationAnimationContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterWindowCommitSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterWindowDeclineSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterWindowDeleteSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterWindowPagePresentationSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterWindowToExistingSplitViewSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterWindowToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterWindowToNewSplitViewSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterWindowToSlideOverSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBChainableModifierTitledEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBClawGestureMetric
|| __DATA.__objc_data _OBJC_CLASS_$_SBClawGestureMetricData
|| __DATA.__objc_data _OBJC_CLASS_$_SBClippedZoomView
|| __DATA.__objc_data _OBJC_CLASS_$_SBCollectionViewCell
|| __DATA.__objc_data _OBJC_CLASS_$_SBCommandTabIconView
|| __DATA.__objc_data _OBJC_CLASS_$_SBCommandTabWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBCompleteGestureSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBContinuityDisplayItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBControlCenterModuleTransientOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBCornerFingerGestureClassifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCornerFingerPanGestureRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBCornerFingerPanGestureSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBCornerPencilPanGestureRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBCornerPencilPanGestureSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBCoverSheetAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBCoverSheetSecureAppEnvironmentViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBCrossblurDosidoSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBCursiveTextPath
|| __DATA.__objc_data _OBJC_CLASS_$_SBCustomEventDodgingModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardEmergencyDialerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardHomeAffordanceControllerClientBridge
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardPluginView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardPluginViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardSpotlightViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardVibrantWallpaperChevronView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanAccountAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanActivationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanCompletionAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanDisableAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanExpirationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanFailureAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanUsageAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeactivationSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeckContinuityToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeckFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeckSwitcherForcePressGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBDefaultAutomaticIconModelStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeveloperBuildExpirationAlert
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeviceApplicationRemoteTransientOverlayContainerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeviceApplicationRemoteTransientOverlayPresentationContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBDiagnosticRequestAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDisableAppStatusBarAlphaChangesAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBDisableAppStatusBarUserInteractionChangesAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBDisableSystemGestureAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBDismissForEmptySwitcherSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBDismissOnlyAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDistanceFieldView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDockSuggestionsIconListView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDodgingItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDodgingItemPreference
|| __DATA.__objc_data _OBJC_CLASS_$_SBDodgingModel
|| __DATA.__objc_data _OBJC_CLASS_$_SBDodgingModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDodgingModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBDodgingModifierEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBDodgingResolverViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBDodgingTester
|| __DATA.__objc_data _OBJC_CLASS_$_SBDodgingTesterView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDragAndDropGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDragAndDropToAppTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDropApplicationFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEDUTemporarySessionLogoutWarningAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBElasticBrightnessViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBElasticRouteDisplayContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBElasticValueViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBElasticValueViewControllerFactory
|| __DATA.__objc_data _OBJC_CLASS_$_SBElasticVolumeSliderView
|| __DATA.__objc_data _OBJC_CLASS_$_SBEmitStudyLogSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalCommitFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalCrossblurSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalDeclineFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalDeleteFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalSlideOffscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBExampleUserNotificationCenter
|| __DATA.__objc_data _OBJC_CLASS_$_SBExitSlideOverPeekSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDemoDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDisplayApplicationSceneEntity
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDisplayController
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDisplayPresenter
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDuetDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalHomeGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalPhoneDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalSettingsDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalSetupDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBFairPlayFamilyLeaveAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDockRootViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDockSuggestionsModel
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDockSuggestionsViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDockWindowLevelAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDragAndDropGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingFluidSwitcherRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingLowEndHardwareModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloorDodgingLayerModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherAppClipLiveContentOverlay
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherDragAndDropManager
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherItemContainerFooterView
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherModifierTimelineController
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherModifierTimelineTouchPassThroughScrollView
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherModifierTimelineViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherMultipleWindowsIndicatorView
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherSheetMetricsCache
|| __DATA.__objc_data _OBJC_CLASS_$_SBFocusedAppLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressGestureStateTrackingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressToFullScreenAppLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressToSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForceTouchAppIconInfoProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBFullScreenToPeekSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBFullScreenToSplitViewSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGenerateLaunchSnapshotsAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGradientView
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwipeUpGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwipeUpToSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwitcherSwipeUpGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwitcherViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridToActiveAppLayoutsSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHBTriplePressDownGestureRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBHIDValueModifyingButtonSetArbiter
|| __DATA.__objc_data _OBJC_CLASS_$_SBHideFolderContentsAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBHideSharePlayContentFromSharedScreenController
|| __DATA.__objc_data _OBJC_CLASS_$_SBHighlightSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHighlightSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeButtonPressSpeedMesaUnlockTrigger
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureDismissableCoverSheetViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureDockSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureRootFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureToMixedGridSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureToStashedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureToSwitcherFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGrabberSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeHardwareButtonLongPressDurationAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeScreenNagAlert
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeScreenZoomSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeToGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBIPhotoLaunchDeniedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBIconBlurryBackgroundView
|| __DATA.__objc_data _OBJC_CLASS_$_SBIconProfileModelMemoryStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBIconViewSnapshotProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBIconsOccludedAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBIdleBehavior
|| __DATA.__objc_data _OBJC_CLASS_$_SBIdleTimerTimeoutPrecedenceSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBIdleTimerTimeoutRange
|| __DATA.__objc_data _OBJC_CLASS_$_SBInCallTransientOverlayManager
|| __DATA.__objc_data _OBJC_CLASS_$_SBInProcessSecureAppAction
|| __DATA.__objc_data _OBJC_CLASS_$_SBIndirectPanGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBIndirectTouchLifecycleMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_SBInsecureDrawingAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBInsertionDodgingModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInsertionDodgingModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBInsertionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractivePreferenceChangeDodgingModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotCommitWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotDomain
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureCropsView
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureHostRootViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureHostWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureManager
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureMultiPartAnimation
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureRootViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureRootWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBInvalidateItemContainerBackdropEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBInvalidateReopenButtonTextSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBInvalidateSnapshotCacheSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBInvalidationDodgingModifierEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBIsolatedSceneOrientationFollowingContainerView
|| __DATA.__objc_data _OBJC_CLASS_$_SBIsolatedSceneOrientationFollowingSecureWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBKeyboardHomeAffordanceAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBLaunchImageOverridesContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBLaunchSnapshotWaitingAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBLegacyLockScreenEnvironment
|| __DATA.__objc_data _OBJC_CLASS_$_SBLegacyTVRemoteAppLaunchDeniedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBLegacyVOIPRefreshWakeTracker
|| __DATA.__objc_data _OBJC_CLASS_$_SBLineFragment
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockOverlayContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockOverlayView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenBatteryChargingViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenEmergencyCallViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenEmergencyDialerController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenNowPlayingController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenPlugin
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenPluginOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenTemperatureWarningView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenTemperatureWarningViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockToAppStatusBarAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBLogWindowController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppClientSettingObserverContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerOverlayWrapperView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerPluginWrapperView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerPluginWrapperViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppSceneHoster
|| __DATA.__objc_data _OBJC_CLASS_$_SBLogoutDebugBlockingViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLogoutProgressTransientOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLongPressDisambiguationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBMainSwitcherRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMainSwitcherRoutingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMedusaBannerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBMedusaSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBMicroPIPTetheringMirrorContentPlaceholderContainerView
|| __DATA.__objc_data _OBJC_CLASS_$_SBMicroPIPTetheringMirrorContentPlaceholderView
|| __DATA.__objc_data _OBJC_CLASS_$_SBMicroPIPTetheringMirrorView
|| __DATA.__objc_data _OBJC_CLASS_$_SBMinimumViableSwitcherTableViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBMixedGridHomeGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMixedGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMixedGridToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMixedGridToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBModelessSyncStubs
|| __DATA.__objc_data _OBJC_CLASS_$_SBMoveFloatingConfigurationFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMoveFloatingOverFullScreenGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMoveGestureRootFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMutableBannerUnfurlSourceContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBMutableDodgingModel
|| __DATA.__objc_data _OBJC_CLASS_$_SBNewWindowRequestSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBNotificationBannerDestinationTestActionRunner
|| __DATA.__objc_data _OBJC_CLASS_$_SBNotificationKeyboardHomeAffordanceAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBOverrideAppLayoutsSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBOverridePresentationValueSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBOverrideScrollViewContentOffsetSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPBackdropView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPHitTestExtendableView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPMenuButton
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPSceneContentAdapter
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPSceneContentContainerAdapter
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPSceneContentPlaceholderView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPSceneContentSceneUpdateWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPStashTabSuppressionPolicyProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPStashView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPStashableWrapperViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPStashedMaskView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPWindowLevelOverrideAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBPPTBlockOperation
|| __DATA.__objc_data _OBJC_CLASS_$_SBPPTFakeAppSuggestion
|| __DATA.__objc_data _OBJC_CLASS_$_SBPPTOperation
|| __DATA.__objc_data _OBJC_CLASS_$_SBPPTRecapPerformanceTestingOperation
|| __DATA.__objc_data _OBJC_CLASS_$_SBPPTRunner
|| __DATA.__objc_data _OBJC_CLASS_$_SBPPTSearchGestureObserver
|| __DATA.__objc_data _OBJC_CLASS_$_SBPasscodeAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBPasscodeComplianceAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBPearlInterlockAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBPeekSplitViewRoutingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBPeekToOffscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBPieChartSlice
|| __DATA.__objc_data _OBJC_CLASS_$_SBPieChartView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPlusSwitcherPageContentView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPowerDownView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPreferenceChangeDodgingModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBPreferenceChangeDodgingModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBPresentDockSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBPreviewFloatingDockViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBPulseTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBReachabilityBackgroundView
|| __DATA.__objc_data _OBJC_CLASS_$_SBReachabilityBackgroundViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBReachabilityWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBRebootContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBRecentDisplayItemsController
|| __DATA.__objc_data _OBJC_CLASS_$_SBRecentDisplayItemsDataStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionDeckSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionForcePressGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionHomeGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRelocateFloatingAppLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRemovalDodgingModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRemovalDodgingModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBRemovalSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRemovalSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBRemoveWidgetAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBRenderImage
|| __DATA.__objc_data _OBJC_CLASS_$_SBReorderInfoAlert
|| __DATA.__objc_data _OBJC_CLASS_$_SBResizeProgressSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBRestartTransitionRequest
|| __DATA.__objc_data _OBJC_CLASS_$_SBRestoreFailureAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBReturnToLockscreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBRootDodgingLayerModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotateHomeScreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotateScenesWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotationDodgingModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotationDodgingModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotationLockHUDController
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotationLockHUDViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotationSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRoundedRectBorderView
|| __DATA.__objc_data _OBJC_CLASS_$_SBRouteToAppExposeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRouteToMixedGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRoutingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSaturatedIconView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneClientRotationView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneOrientationFollowingWindowRootViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneResizeFluidGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneResizeGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneResizeGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneResizeTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneRotationTransitionAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneViewAppIconView
|| __DATA.__objc_data _OBJC_CLASS_$_SBScheduleEventDodgingModifierEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBScrunchGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBSecureAppPolicy
|| __DATA.__objc_data _OBJC_CLASS_$_SBSecureAppViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSecureAppWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBSecureMainDisplaySceneManager
|| __DATA.__objc_data _OBJC_CLASS_$_SBSeparatorNubView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSetupRegulatoryInfoViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSetupWiFiScanner
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfBackgroundView
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfCarouselSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfExpansionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfFocusedDisplayItemsChangedEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfIconBounceTransitionModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfLiveContentOverlay
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfLiveContentOverlayCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBShelfZoomTransitionModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBShutdownContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBSlideFloatingAppFromBottomSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSlideOverAppsInFullScreenSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSlideOverEdgeProtectTongueSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBSlideOverPeekSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSlideOverToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSlideUpAppGrabberView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSnapshotSlotIdWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_SBSplitAllDisplayItemsSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSplitDisplayItemCrossblurSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSplitDisplayItemPulseTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSplitDisplayItemSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSplitRemovalSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSplitViewRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSplitViewToCenterWindowSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSplitViewToSlideOverSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightCrossblurToFullscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightDomain
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightTransientOverlayInteractiveGestureTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightTransientOverlaySpotlightViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightTransitionAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightTransitionInteractor
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpringBoardApplicationIcon
|| __DATA.__objc_data _OBJC_CLASS_$_SBStackedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBStartupTransitionToApp
|| __DATA.__objc_data _OBJC_CLASS_$_SBStartupTransitionToHome
|| __DATA.__objc_data _OBJC_CLASS_$_SBStartupTransitionToLoginWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBStartupTransitionToSetup
|| __DATA.__objc_data _OBJC_CLASS_$_SBStashedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBStringMetrics
|| __DATA.__objc_data _OBJC_CLASS_$_SBStylusPriorityGestureRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwapFullScreenAppSidesSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwipeToKillSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwipeToKillSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwipeUpFloatingApplicationGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwipeUpFloatingSwitcherGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherDropRegionContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierEventResponseSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierEventSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierQuerySnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierStackSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierTimelineEntry
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherShelf
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherSwipeUpGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherSwipeUpToSwitcherFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherToActiveFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherToAppExposeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemGestureSwitchMetric
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesAppearanceSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesBackgroundView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesContentPresentationContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesContentViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesInteractionSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesLaunchSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesPlaceholderContentProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesPositionConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesPositionHyperregionComposer
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesSettingsDomain
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemNotesSwipeMetricSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBTapOutsideToDismissSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBTapSlideOverTongueSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBTemplateAndMorph
|| __DATA.__objc_data _OBJC_CLASS_$_SBTestAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBTestTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBTodayWidgetXCodeDebuggingUtility
|| __DATA.__objc_data _OBJC_CLASS_$_SBTopAffordanceDotView
|| __DATA.__objc_data _OBJC_CLASS_$_SBTransientOverlayBackgroundWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBTransientOverlayWallpaperEffectView
|| __DATA.__objc_data _OBJC_CLASS_$_SBTransientlyVisibleSlideOverTongueSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBTripleClickSOSMigrationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIAnimationControllerSteppedAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIFullscreenAnimationView
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIMainScreenAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIPasscodeViewWithLockScreenStyle
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIStartupFromBlackAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIStartupFromOverlayAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIStartupToHomescreenAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIStartupToLoginWindowAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIStartupToUserSetupAppZoomInAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUnlockedDodgingResolver
|| __DATA.__objc_data _OBJC_CLASS_$_SBUnsupportedURLAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBUpdateDragPlatterBlurSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBUpdateFocusedAppLayoutSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBVPPAppRequiresHealingAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBVoiceControlPresentationSource
|| __DATA.__objc_data _OBJC_CLASS_$_SBVoiceControlTransientOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBVoiceControlViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBVolumeControlState
|| __DATA.__objc_data _OBJC_CLASS_$_SBWaitForSceneContentAvailableTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBWaitForSceneLayoutTransitionTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBWakeDestination
|| __DATA.__objc_data _OBJC_CLASS_$_SBWalletPrearmRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBWallpaperLegibilitySettingsProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBWeatherApplicationIcon
|| __DATA.__objc_data _OBJC_CLASS_$_SBWidgetDebuggingTestRecipe
|| __DATA.__objc_data _OBJC_CLASS_$_SBWidgetOnboardingLayoutBuilder
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowDragGestureDestinationModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowDragGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowDragGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowDragGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowDragInteraction
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowDragTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowHideRequest
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowLevelAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowedAccessoryView
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowedAccessoryViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowedAccessoryWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBWorkItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBWorkStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBZoomableView
|| __DATA.__objc_data _OBJC_CLASS_$__SBAccessibilityWindowHostingControllerServerTarget
|| __DATA.__objc_data _OBJC_CLASS_$__SBActiveAppFloorFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$__SBAggregateCameraLaunchCondition
|| __DATA.__objc_data _OBJC_CLASS_$__SBBatteryLogContext
|| __DATA.__objc_data _OBJC_CLASS_$__SBCameraLaunchCondition
|| __DATA.__objc_data _OBJC_CLASS_$__SBDMPolicyTestAppInfo
|| __DATA.__objc_data _OBJC_CLASS_$__SBDashBoardSpotlightViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBDefaultScreenshotProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SBDeviceApplicationSceneClassicHostPositioningView
|| __DATA.__objc_data _OBJC_CLASS_$__SBDeviceApplicationSceneClassicHostWrapperView
|| __DATA.__objc_data _OBJC_CLASS_$__SBElasticHUDViewControllerNullAnimator
|| __DATA.__objc_data _OBJC_CLASS_$__SBExpertLocationAppSuggestion
|| __DATA.__objc_data _OBJC_CLASS_$__SBFluidSwitcherGestureExclusionCompositeShapeDebugView
|| __DATA.__objc_data _OBJC_CLASS_$__SBFluidSwitcherGestureExclusionTrapezoidDebugView
|| __DATA.__objc_data _OBJC_CLASS_$__SBFluidSwitcherModifierTimelineEntryView
|| __DATA.__objc_data _OBJC_CLASS_$__SBFluidSwitcherSheetMetricsCacheKey
|| __DATA.__objc_data _OBJC_CLASS_$__SBFluidSwitcherSheetMetricsView
|| __DATA.__objc_data _OBJC_CLASS_$__SBGridFloorSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$__SBIdleTimerConfigurationInfo
|| __DATA.__objc_data _OBJC_CLASS_$__SBInteractiveScreenshotGestureBackdropView
|| __DATA.__objc_data _OBJC_CLASS_$__SBInteractiveScreenshotGestureReplicatorView
|| __DATA.__objc_data _OBJC_CLASS_$__SBInteractiveScreenshotGestureSession
|| __DATA.__objc_data _OBJC_CLASS_$__SBKeyboardFocusRedirection
|| __DATA.__objc_data _OBJC_CLASS_$__SBLegacyRemoteAlertContentHostViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBMainScreenScreenshotProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SBModifierTimelineDetailViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBModifierTimelineModifierDetailViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBModifierTimelineTextViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBPIPEndStashTabSuppressionGestureManager
|| __DATA.__objc_data _OBJC_CLASS_$__SBPendingMesaUnlockBehaviorUnlockRequest
|| __DATA.__objc_data _OBJC_CLASS_$__SBPowerAssertionContext
|| __DATA.__objc_data _OBJC_CLASS_$__SBSceneLayoutViewControllerAnimator
|| __DATA.__objc_data _OBJC_CLASS_$__SBSynchronizeOperation
|| __DATA.__objc_data _OBJC_CLASS_$__SBTodayViewControllerIconImageViewControllerKeepStaticAssertion
|| __DATA.__objc_data _OBJC_CLASS_$__SBTopAffordanceView
|| __DATA.__objc_data _OBJC_CLASS_$__SBUABestAppSuggestion
|| __DATA.__objc_data _OBJC_CLASS_$__SBUnlockedDodgingRootViewcontroller
|| __DATA.__objc_data _OBJC_CLASS_$__SBUnlockedDodgingWindow
|| __DATA.__objc_data _OBJC_CLASS_$__SBUserNotificationImageDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$__SBWindowReplacementResult
|| __DATA.__objc_data _OBJC_METACLASS_$_BezierCurve
|| __DATA.__objc_data _OBJC_METACLASS_$_CSConcreteUnlockRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_NCRevealWalletPassActionRunner
|| __DATA.__objc_data _OBJC_METACLASS_$_PathPoint
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAWDQueryableMetric
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAccessoryController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActivateAppClipFromPlaceholderWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActivateAppUnderLockScreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActivationFailedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActivationInfoViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActiveAppLayoutFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAddModifierSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnalyticsAggdInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnalyticsAggdSimpleEventHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnalyticsCoreAnalyticsEventHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnimatablePropertyChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnimationCompletionDodgingModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnimationStepper
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppBrightnessChangeLogger
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppBrightnessMetric
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppBrightnessMetricData
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppClipOverlayView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppClipPlaceholderLayoutElementViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppDeniedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppDragAndDropGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppExposeGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppExposeToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppExposeToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppFreeDevProfileNotTrustedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppPlatterDragPreviewDelayCleanupAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppProfileExpiredAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppProfileNeedsValidationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppProfileNotTrustedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppRepairTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppStatusBarTransitionInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppSwitcherPageServiceRemoteViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppSwitcherService
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppSwitcherServicePageContentView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppSwitcherServiceSet
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppSwitcherTransientOverlayPageContentView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppUnderFloatingSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppUnderFloatingSwitcherTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplication32BitDeprecationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationBlurContentView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationBlurContentViewBackdropSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationBlurSnapshotGenerationContainerView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationDropSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchNotifyAirplaneModeAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchNotifyAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchNotifyInCallAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchNotifyInCallWithoutDataSwitchingAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationSceneRemovalAnimationDomain
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationSignatureVersionRepairAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationSignatureVersionUnsupportedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationWakeScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationWakeSchedulerFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_SBArcSwipeFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAuthenticationFeedback
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAutoPurgingImageView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBannerSourceListenerPresentableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBannerUnfurlSourceContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBannerUnfurlToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBaseStatusBarChangeAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBatteryDeviceChargeTestRecipe
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBatteryDeviceCountTestRecipe
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBatteryLogger
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricKitDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorPearlDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorTestRecipeDummyDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorUI
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBluetoothAccessoryLowPowerAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBlurItemContainerSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBlurProgressSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBlurViewCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBookmark
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBuddyLockScreenDismissOnlyAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCAAnimationBlockDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCancelableBlockOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCardDragAndDropGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCardDropSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCardDropSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterAppIconZoomAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterWindowActivationAnimationContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterWindowCommitSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterWindowDeclineSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterWindowDeleteSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterWindowPagePresentationSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterWindowToExistingSplitViewSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterWindowToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterWindowToNewSplitViewSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterWindowToSlideOverSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBChainableModifierTitledEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBClawGestureMetric
|| __DATA.__objc_data _OBJC_METACLASS_$_SBClawGestureMetricData
|| __DATA.__objc_data _OBJC_METACLASS_$_SBClippedZoomView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCollectionViewCell
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCommandTabIconView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCommandTabWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCompleteGestureSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBContinuityDisplayItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBControlCenterModuleTransientOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCornerFingerGestureClassifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCornerFingerPanGestureRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCornerFingerPanGestureSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCornerPencilPanGestureRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCornerPencilPanGestureSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCoverSheetAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCoverSheetSecureAppEnvironmentViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCrossblurDosidoSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCursiveTextPath
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCustomEventDodgingModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardEmergencyDialerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardHomeAffordanceControllerClientBridge
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardPluginView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardPluginViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardSpotlightViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardVibrantWallpaperChevronView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanAccountAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanActivationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanCompletionAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanDisableAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanExpirationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanFailureAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanUsageAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeactivationSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeckContinuityToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeckFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeckSwitcherForcePressGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDefaultAutomaticIconModelStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeveloperBuildExpirationAlert
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationRemoteTransientOverlayContainerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationRemoteTransientOverlayPresentationContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDiagnosticRequestAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDisableAppStatusBarAlphaChangesAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDisableAppStatusBarUserInteractionChangesAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDisableSystemGestureAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDismissForEmptySwitcherSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDismissOnlyAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDistanceFieldView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDockSuggestionsIconListView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDodgingItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDodgingItemPreference
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDodgingModel
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDodgingModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDodgingModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDodgingModifierEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDodgingResolverViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDodgingTester
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDodgingTesterView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDragAndDropGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDragAndDropToAppTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDropApplicationFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEDUTemporarySessionLogoutWarningAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBElasticBrightnessViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBElasticRouteDisplayContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBElasticValueViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBElasticValueViewControllerFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_SBElasticVolumeSliderView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEmitStudyLogSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalCommitFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalCrossblurSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDeclineFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDeleteFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalSlideOffscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExampleUserNotificationCenter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExitSlideOverPeekSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDemoDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDisplayApplicationSceneEntity
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDisplayController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDisplayPresenter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDuetDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalHomeGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalPhoneDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalSettingsDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalSetupDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFairPlayFamilyLeaveAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDockRootViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDockSuggestionsModel
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDockSuggestionsViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDockWindowLevelAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDragAndDropGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingFluidSwitcherRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingLowEndHardwareModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloorDodgingLayerModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherAppClipLiveContentOverlay
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherDragAndDropManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherItemContainerFooterView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherModifierTimelineController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherModifierTimelineTouchPassThroughScrollView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherModifierTimelineViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherMultipleWindowsIndicatorView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherSheetMetricsCache
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFocusedAppLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressGestureStateTrackingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressToFullScreenAppLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressToSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForceTouchAppIconInfoProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFullScreenToPeekSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFullScreenToSplitViewSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGenerateLaunchSnapshotsAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGradientView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwipeUpGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwipeUpToSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwitcherSwipeUpGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwitcherViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridToActiveAppLayoutsSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHBTriplePressDownGestureRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHIDValueModifyingButtonSetArbiter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHideFolderContentsAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHideSharePlayContentFromSharedScreenController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHighlightSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHighlightSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeButtonPressSpeedMesaUnlockTrigger
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureDismissableCoverSheetViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureDockSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureRootFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureToMixedGridSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureToStashedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureToSwitcherFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGrabberSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeHardwareButtonLongPressDurationAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeScreenNagAlert
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeScreenZoomSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeToGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIPhotoLaunchDeniedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIconBlurryBackgroundView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIconProfileModelMemoryStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIconViewSnapshotProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIconsOccludedAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIdleBehavior
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIdleTimerTimeoutPrecedenceSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIdleTimerTimeoutRange
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInCallTransientOverlayManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInProcessSecureAppAction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIndirectPanGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIndirectTouchLifecycleMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInsecureDrawingAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInsertionDodgingModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInsertionDodgingModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInsertionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractivePreferenceChangeDodgingModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotCommitWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotDomain
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureCropsView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureHostRootViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureHostWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureMultiPartAnimation
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureRootViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureRootWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInvalidateItemContainerBackdropEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInvalidateReopenButtonTextSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInvalidateSnapshotCacheSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInvalidationDodgingModifierEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIsolatedSceneOrientationFollowingContainerView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIsolatedSceneOrientationFollowingSecureWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLaunchImageOverridesContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLaunchSnapshotWaitingAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLegacyLockScreenEnvironment
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLegacyTVRemoteAppLaunchDeniedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLegacyVOIPRefreshWakeTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLineFragment
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockOverlayContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockOverlayView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenBatteryChargingViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenEmergencyCallViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenEmergencyDialerController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenNowPlayingController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenPlugin
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenPluginOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenTemperatureWarningView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenTemperatureWarningViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockToAppStatusBarAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLogWindowController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppClientSettingObserverContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerOverlayWrapperView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerPluginWrapperView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerPluginWrapperViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppSceneHoster
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLogoutDebugBlockingViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLogoutProgressTransientOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLongPressDisambiguationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMainSwitcherRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMainSwitcherRoutingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMedusaBannerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMedusaSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMicroPIPTetheringMirrorContentPlaceholderContainerView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMicroPIPTetheringMirrorContentPlaceholderView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMicroPIPTetheringMirrorView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMinimumViableSwitcherTableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMixedGridHomeGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMixedGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMixedGridToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMixedGridToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBModelessSyncStubs
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMoveFloatingConfigurationFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMoveFloatingOverFullScreenGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMoveGestureRootFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMutableBannerUnfurlSourceContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMutableDodgingModel
|| __DATA.__objc_data _OBJC_METACLASS_$_SBNewWindowRequestSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBNotificationBannerDestinationTestActionRunner
|| __DATA.__objc_data _OBJC_METACLASS_$_SBNotificationKeyboardHomeAffordanceAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBOverrideAppLayoutsSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBOverridePresentationValueSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBOverrideScrollViewContentOffsetSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPBackdropView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPHitTestExtendableView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPMenuButton
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPSceneContentAdapter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPSceneContentContainerAdapter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPSceneContentPlaceholderView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPSceneContentSceneUpdateWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPStashTabSuppressionPolicyProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPStashView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPStashableWrapperViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPStashedMaskView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPWindowLevelOverrideAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPPTBlockOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPPTFakeAppSuggestion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPPTOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPPTRecapPerformanceTestingOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPPTRunner
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPPTSearchGestureObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPasscodeAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPasscodeComplianceAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPearlInterlockAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPeekSplitViewRoutingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPeekToOffscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPieChartSlice
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPieChartView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPlusSwitcherPageContentView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPowerDownView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPreferenceChangeDodgingModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPreferenceChangeDodgingModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPresentDockSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPreviewFloatingDockViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPulseTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReachabilityBackgroundView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReachabilityBackgroundViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReachabilityWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRebootContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRecentDisplayItemsController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRecentDisplayItemsDataStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionDeckSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionForcePressGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionHomeGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRelocateFloatingAppLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRemovalDodgingModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRemovalDodgingModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRemovalSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRemovalSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRemoveWidgetAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRenderImage
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReorderInfoAlert
|| __DATA.__objc_data _OBJC_METACLASS_$_SBResizeProgressSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRestartTransitionRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRestoreFailureAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReturnToLockscreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRootDodgingLayerModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotateHomeScreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotateScenesWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotationDodgingModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotationDodgingModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotationLockHUDController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotationLockHUDViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotationSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRoundedRectBorderView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRouteToAppExposeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRouteToMixedGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRoutingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSaturatedIconView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneClientRotationView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneOrientationFollowingWindowRootViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneResizeFluidGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneResizeGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneResizeGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneResizeTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneRotationTransitionAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneViewAppIconView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBScheduleEventDodgingModifierEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBScrunchGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSecureAppPolicy
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSecureAppViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSecureAppWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSecureMainDisplaySceneManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSeparatorNubView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSetupRegulatoryInfoViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSetupWiFiScanner
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfBackgroundView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfCarouselSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfExpansionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfFocusedDisplayItemsChangedEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfIconBounceTransitionModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfLiveContentOverlay
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfLiveContentOverlayCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShelfZoomTransitionModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShutdownContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSlideFloatingAppFromBottomSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSlideOverAppsInFullScreenSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSlideOverEdgeProtectTongueSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSlideOverPeekSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSlideOverToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSlideUpAppGrabberView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSnapshotSlotIdWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSplitAllDisplayItemsSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSplitDisplayItemCrossblurSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSplitDisplayItemPulseTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSplitDisplayItemSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSplitRemovalSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSplitViewRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSplitViewToCenterWindowSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSplitViewToSlideOverSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightCrossblurToFullscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightDomain
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightTransientOverlayInteractiveGestureTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightTransientOverlaySpotlightViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightTransitionAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightTransitionInteractor
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpringBoardApplicationIcon
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStackedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToApp
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToHome
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToLoginWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToSetup
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStashedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStringMetrics
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStylusPriorityGestureRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwapFullScreenAppSidesSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwipeToKillSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwipeToKillSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwipeUpFloatingApplicationGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwipeUpFloatingSwitcherGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherDropRegionContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierEventResponseSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierEventSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierQuerySnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierStackSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierTimelineEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherShelf
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherSwipeUpGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherSwipeUpToSwitcherFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherToActiveFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherToAppExposeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemGestureSwitchMetric
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesAppearanceSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesBackgroundView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesContentPresentationContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesContentViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesInteractionSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesLaunchSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesPlaceholderContentProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesPositionConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesPositionHyperregionComposer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesSettingsDomain
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemNotesSwipeMetricSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTapOutsideToDismissSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTapSlideOverTongueSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTemplateAndMorph
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTestAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTestTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTodayWidgetXCodeDebuggingUtility
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTopAffordanceDotView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTransientOverlayBackgroundWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTransientOverlayWallpaperEffectView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTransientlyVisibleSlideOverTongueSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTripleClickSOSMigrationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIAnimationControllerSteppedAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIFullscreenAnimationView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIMainScreenAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIPasscodeViewWithLockScreenStyle
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIStartupFromBlackAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIStartupFromOverlayAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIStartupToHomescreenAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIStartupToLoginWindowAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIStartupToUserSetupAppZoomInAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUnlockedDodgingResolver
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUnsupportedURLAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUpdateDragPlatterBlurSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUpdateFocusedAppLayoutSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVPPAppRequiresHealingAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVoiceControlPresentationSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVoiceControlTransientOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVoiceControlViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVolumeControlState
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWaitForSceneContentAvailableTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWaitForSceneLayoutTransitionTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWakeDestination
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWalletPrearmRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWallpaperLegibilitySettingsProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWeatherApplicationIcon
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWidgetDebuggingTestRecipe
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWidgetOnboardingLayoutBuilder
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowDragGestureDestinationModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowDragGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowDragGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowDragGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowDragInteraction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowDragTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowHideRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowLevelAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowedAccessoryView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowedAccessoryViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowedAccessoryWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWorkItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWorkStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBZoomableView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBAccessibilityWindowHostingControllerServerTarget
|| __DATA.__objc_data _OBJC_METACLASS_$__SBActiveAppFloorFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$__SBAggregateCameraLaunchCondition
|| __DATA.__objc_data _OBJC_METACLASS_$__SBBatteryLogContext
|| __DATA.__objc_data _OBJC_METACLASS_$__SBCameraLaunchCondition
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDMPolicyTestAppInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDashBoardSpotlightViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDefaultScreenshotProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDeviceApplicationSceneClassicHostPositioningView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDeviceApplicationSceneClassicHostWrapperView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBElasticHUDViewControllerNullAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$__SBExpertLocationAppSuggestion
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFluidSwitcherGestureExclusionCompositeShapeDebugView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFluidSwitcherGestureExclusionTrapezoidDebugView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFluidSwitcherModifierTimelineEntryView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFluidSwitcherSheetMetricsCacheKey
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFluidSwitcherSheetMetricsView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBGridFloorSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$__SBIdleTimerConfigurationInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__SBInteractiveScreenshotGestureBackdropView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBInteractiveScreenshotGestureReplicatorView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBInteractiveScreenshotGestureSession
|| __DATA.__objc_data _OBJC_METACLASS_$__SBKeyboardFocusRedirection
|| __DATA.__objc_data _OBJC_METACLASS_$__SBLegacyRemoteAlertContentHostViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBMainScreenScreenshotProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SBModifierTimelineDetailViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBModifierTimelineModifierDetailViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBModifierTimelineTextViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBPIPEndStashTabSuppressionGestureManager
|| __DATA.__objc_data _OBJC_METACLASS_$__SBPendingMesaUnlockBehaviorUnlockRequest
|| __DATA.__objc_data _OBJC_METACLASS_$__SBPowerAssertionContext
|| __DATA.__objc_data _OBJC_METACLASS_$__SBSceneLayoutViewControllerAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$__SBSynchronizeOperation
|| __DATA.__objc_data _OBJC_METACLASS_$__SBTodayViewControllerIconImageViewControllerKeepStaticAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$__SBTopAffordanceView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBUABestAppSuggestion
|| __DATA.__objc_data _OBJC_METACLASS_$__SBUnlockedDodgingRootViewcontroller
|| __DATA.__objc_data _OBJC_METACLASS_$__SBUnlockedDodgingWindow
|| __DATA.__objc_data _OBJC_METACLASS_$__SBUserNotificationImageDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$__SBWindowReplacementResult
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBActivateAppUnderLockScreenWorkspaceTransaction._disableActiveOrientationChangeAssertion
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBActivateAppUnderLockScreenWorkspaceTransaction._lockScreenEnvironment
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppFreeDevProfileNotTrustedAlertItem._app
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppProfileExpiredAlertItem._app
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppProfileNotTrustedAlertItem._app
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppStatusBarSettings._settings
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._appInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._appSnapshotSequenceID
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._bundleIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._calculatedSupportedTypes
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._currentClassicMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._defaultClassicModeOverride
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._supportedTypes
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationLibraryObserver._applicationObservers
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationLibraryObserver._mainQueueProxy
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationLibraryObserver._placeholderObservers
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationLibraryObserver._placeholdersByBundleID
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationSupportServiceDelegate._service
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBannerUnfurlSourceContext._cornerRadius
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBannerUnfurlSourceContext._referenceCoordinateSpaceBounds
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBannerUnfurlSourceContext._referenceFrame
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBannerUnfurlSourceContext._referenceVelocity
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBiometricMonitorTestRecipeDummyDataSource._observers
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBiometricMonitorTestRecipeDummyDataSource._state
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBluetoothController._devices
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBluetoothController._tetheringConnected
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBCancelableBlockOperation._blocks
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._cacheCoordinator
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._dispatchCache
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._genCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._imps
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._modifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._nextFunc
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._selectorCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._selectors
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBClippedZoomView._clippingView
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBClippedZoomView._fullscreenZoomViewToClip
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonContext._daemonRequests
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonContext._dispatchSource
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonContext._pid
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonRequest._disabler
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonRequest._enabler
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanAccountAlertItem._accountURL
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanActivationAlertItem._newAccount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanActivationAlertItem._promptToDisable
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanCompletionAlertItem._carrierName
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanCompletionAlertItem._newAccount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanExpirationAlertItem._expirationDate
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanFailureAlertItem._carrierName
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanFailureAlertItem._newAccount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanUsageAlertItem._remainingPortion
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationRemoteTransientOverlayContainerViewController._viewProvider
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._hasOrientationMismatchForClassicApp
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._layoutEnvironment
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._preferredContentType
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._prefersLiveXIB
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._requestedLaunchIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._settings
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._url
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDismissOnlyAlertItem._body
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDismissOnlyAlertItem._title
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._cachedImage
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._context
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._processedSurface
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._scaleFactor
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._snapshot
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFullscreenZoomView._hasImage
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBIconViewSnapshotProvider._invalidationBlock
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLineFragment._index
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLineFragment._lineWidth
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLineFragment._range
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLockdownManager._activatingAlertItem
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLockdownManager._settingUpActivationState
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLockdownManager._state
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLockdownManager._unqiueDeviceIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLoginAppContainerPluginWrapperView._overlayWrapperView
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLoginAppContainerPluginWrapperView._pluginView
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._airTrafficConnection
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._iCloudRestoreToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._isAppSyncing
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._isAutoSyncing
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._isSyncing
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._isWirelessSyncing
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._restoringFromICloud
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._syncRegistrationToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModifierCacheSelectorList.selCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModifierCacheSelectorList.sels
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._centerConfiguration
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._environment
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._hidden
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._layoutConfiguration
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._primaryDisplayItem
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._secondaryDisplayItem
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._secondaryDisplayItemRole
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._tertiaryDisplayItem
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._tertiaryDisplayItemRole
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayoutList._applayouts
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBDisplayItem._bundleIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBDisplayItem._sceneIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBDisplayItem._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBDisplayItem._webClipIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPIPSceneContentPlaceholderView._imageView
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBRenderImage._image
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBRotationLockHUDViewController._locked
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBSnapshotWindow._orientation
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBStringMetrics._fragments
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBSystemGestureMetric._beganLocation
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBSystemGestureMetric._goalTracker
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayDismissalRequest._animated
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayDismissalRequest._completionHandler
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayPresentationRequest._animated
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayPresentationRequest._completionHandler
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayPresentationRequest._originatingProcess
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayPresentationRequest._shouldDismissSiri
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayPresentationRequest._viewController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBUIAnimationController._transitionContainer
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBUIAnimationController._transitionWindow
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBVoiceControlController._delayedAssistantActivationPending
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBVoiceControlController._headsetDownDelayedActionPerformed
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBWorkspaceTransaction._layoutController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBWorkspaceTransaction._transitionRequest
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBWorkspaceTransitionContext._request
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._activeInterfaceOrientation
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._activeInterfaceOrientationObservers
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._activeInterfaceOrientationOverrideStack
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._appsRegisteredForLockButtonEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._appsRegisteredForVolumeEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._authenticationController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._blocksAwaitingAvailableMemory
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._cardItemsController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._decimalFormatter
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._didPlayLockSound
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._expectsFaceContact
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._expectsFaceContactInLandscape
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._hardwareKeyboardAttached
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetButtonClickCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetButtonDownTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetClickCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetDownDelayedActionPerformed
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetDownEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._ignoringCurrentLockButtonPress
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._inCallApp
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._isSeekingInMedia
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._keybagRefetchTransactionIsActive
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._lastLockButtonEventRecipient
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._lockOutController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._mediaSeekDirection
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._memoryPressureSource
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._memoryPressureStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._menuButtonClickCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._menuButtonDown
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._menuButtonInterceptApp
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._menuButtonInterceptAppEnabledForever
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._midnightFireDate
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._midnightTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._notificationDispatcher
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._notifyDontAllowMediaHUDToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._notifyDontAnimateREOToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._nowRecordingApp
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._percentFormatter
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._restrictionDisabledApplications
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._ringerSwitchState
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._screenWasDimOnMenuDown
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._screenshotWasTaken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._shouldDelaySleepForHeadsetClick
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._smartCoverClosed
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._springBoardRequestsAccelerometerEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._uiController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._userSessionController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._wantsOrientationEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBActiveAppFloorFloatingSwitcherModifier._activeAppLayout
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBActiveAppFloorFloatingSwitcherModifier._environmentMode
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBActiveAppFloorFloatingSwitcherModifier._floatingConfiguration
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBAppSwitcherSnapshotCacheKey._hash
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBExpertAppSuggestion._appSuggestion
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBExpertAppSuggestion._result
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFluidSwitcherModifierTimelineEntryView._actionsLabel
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFluidSwitcherModifierTimelineEntryView._nameLabel
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFluidSwitcherModifierTimelineEntryView._postStackLabel
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFluidSwitcherModifierTimelineEntryView._tapRecognizer
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFullScreenAppFloorSwitcherModifier._activeAppLayout
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFullScreenAppFloorSwitcherModifier._homeAffordanceReuseIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineDetailViewController._modifierDetailViewController
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineDetailViewController._tableView
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineDetailViewController._textDetailViewController
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineModifierDetailViewController._tableView
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineModifierDetailViewController._textViewController
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineTextViewController._textView
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBUABestAppSuggestion._appSuggestion
|| __DATA_CONST.__const _SBAccessibilityWindowHostingEntitlement
|| __DATA_CONST.__const _SBAccountStoreManagerPrimaryAppleAccountDidChangeNotification
|| __DATA_CONST.__const _SBActivateAssistantEntitlement
|| __DATA_CONST.__const _SBActivateAwayViewPluginsEntitlement
|| __DATA_CONST.__const _SBActivateRemoteAlertEntitlement
|| __DATA_CONST.__const _SBAddApplicationIconEntitlement
|| __DATA_CONST.__const _SBAddWebClipToHomeScreenEntitlement
|| __DATA_CONST.__const _SBAddWidgetToTodayViewEntitlement
|| __DATA_CONST.__const _SBAddsNewIconsToHomeScreenEntitlement
|| __DATA_CONST.__const _SBAggregateLockStateDidChangeNotification
|| __DATA_CONST.__const _SBAggregateLockStateKey
|| __DATA_CONST.__const _SBAirPlayScreenSharingStatusChangedNotificationName
|| __DATA_CONST.__const _SBAlertDidActivateNotification
|| __DATA_CONST.__const _SBAlertItemsSuppressionEntitlement
|| __DATA_CONST.__const _SBAlertSuppressionSectionIdentifierEntitlement
|| __DATA_CONST.__const _SBAllHomeScreenApplicationsEntitlement
|| __DATA_CONST.__const _SBAppClassicEnvironment
|| __DATA_CONST.__const _SBAppClassicOverrideEnvironment
|| __DATA_CONST.__const _SBAppClassicSuffixEnvironment
|| __DATA_CONST.__const _SBAppIconVisibilityPreferencesChangedNotification
|| __DATA_CONST.__const _SBAppLibraryOpenPodEntitlement
|| __DATA_CONST.__const _SBAppLibraryRequestUpdateEntitlement
|| __DATA_CONST.__const _SBAppStoreBundleIdentifier
|| __DATA_CONST.__const _SBAppSwitcherModelDidChangeNotification
|| __DATA_CONST.__const _SBAppSwitcherNonInteractiveActivateEventName
|| __DATA_CONST.__const _SBAppSwitcherNonInteractiveDismissEventName
|| __DATA_CONST.__const _SBAppSwitcherNonInteractiveToggleEventName
|| __DATA_CONST.__const _SBAppSwitcherQuitAppBundleIdentifierKey
|| __DATA_CONST.__const _SBAppSwitcherQuitAppNotification
|| __DATA_CONST.__const _SBAppSwitcherServiceAddedNotification
|| __DATA_CONST.__const _SBAppSwitcherServiceNotificationService
|| __DATA_CONST.__const _SBAppSwitcherServiceRegistrarEntitlement
|| __DATA_CONST.__const _SBAppSwitcherServiceRemovedNotification
|| __DATA_CONST.__const _SBAppSwitcherSnapshotImageCacheUpdate
|| __DATA_CONST.__const _SBApplicationDataStoreSceneStorageKey
|| __DATA_CONST.__const _SBApplicationDragEntitlement
|| __DATA_CONST.__const _SBApplicationPlaceholdersAddedKey
|| __DATA_CONST.__const _SBApplicationPlaceholdersDidChangeNotification
|| __DATA_CONST.__const _SBApplicationPlaceholdersModifiedKey
|| __DATA_CONST.__const _SBApplicationPlaceholdersNetworkUsageDidChangeNotification
|| __DATA_CONST.__const _SBApplicationPlaceholdersRemovedKey
|| __DATA_CONST.__const _SBApplicationProcessDidExitNotification
|| __DATA_CONST.__const _SBApplicationProcessDisableFailedLaunchCounterEnvVar
|| __DATA_CONST.__const _SBApplicationProcessStateDidChangeNotification
|| __DATA_CONST.__const _SBApplicationProcessStateDidChangeNotificationKeyPreviousProcessState
|| __DATA_CONST.__const _SBApplicationRequestedDeviceUnlockRequester
|| __DATA_CONST.__const _SBApplicationSceneHandleProgressNotification
|| __DATA_CONST.__const _SBApplicationSceneHandleProgressNotificationSceneIdentifierKey
|| __DATA_CONST.__const _SBApplicationShortcutStoreApplicationShortcutItemsKey
|| __DATA_CONST.__const _SBApplicationShowsProgressChangedNotification
|| __DATA_CONST.__const _SBApplicationSnapshotChangedNotification
|| __DATA_CONST.__const _SBApplicationSnapshotChangedSceneIdentifierUserInfoKey
|| __DATA_CONST.__const _SBApplicationSnapshotChangedSequenceUserInfoKey
|| __DATA_CONST.__const _SBApplicationSnapshotDownscaledAppSwitcherVariant
|| __DATA_CONST.__const _SBApplicationTestingPIPIsActiveNotificationName
|| __DATA_CONST.__const _SBApplicationTestingPIPIsNoLongerActiveNotificationName
|| __DATA_CONST.__const _SBApplicationTestingPIPIsNoLongerStashedNotificationName
|| __DATA_CONST.__const _SBApplicationTestingPIPIsStashedNotificationName
|| __DATA_CONST.__const _SBApplicationUserQuitMonitorEntitlement
|| __DATA_CONST.__const _SBApplicationsRegisteredForLockButtonEventsChangedNotification
|| __DATA_CONST.__const _SBApplicationsRegisteredForVolumeButtonEventsChangedNotification
|| __DATA_CONST.__const _SBAssistantBioAuthenticationReason
|| __DATA_CONST.__const _SBAssistantCanRepositionOrbIfNecessary
|| __DATA_CONST.__const _SBAssistantVisibilityDidChangeNotification
|| __DATA_CONST.__const _SBAudioRoutesChangedNotification
|| __DATA_CONST.__const _SBAutomaticCurrentIconStatePathSymbolized
|| __DATA_CONST.__const _SBAutomaticDesiredIconStatePathSymbolized
|| __DATA_CONST.__const _SBBacklightPreFadeBacklightActivationCompleteNotification
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonAssistantWillAppear
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonDismissOverlays
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonLock
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonMainScreenAnimationController
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonPerformSleep
|| __DATA_CONST.__const _SBBarcodeScannerBundleIdentifier
|| __DATA_CONST.__const _SBBatterySaverModeDidChangeNotification
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationCoversheetSwipedForDismissal
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationFingerOn
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationKeybagUnlock
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationPasscodeCancelled
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationPrearmMatch
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationTryAgain
|| __DATA_CONST.__const _SBBlankScreenStateChangeNotification
|| __DATA_CONST.__const _SBBootCompleteNotification
|| __DATA_CONST.__const _SBBuddyBundleIdentifier
|| __DATA_CONST.__const _SBCFUserNotificationEntitlement
|| __DATA_CONST.__const _SBCalculatorBundleIdentifier
|| __DATA_CONST.__const _SBCalendarBundleIdentifier
|| __DATA_CONST.__const _SBCallCountChangedNotification
|| __DATA_CONST.__const _SBCameraBundleIdentifier
|| __DATA_CONST.__const _SBClockBundleIdentifier
|| __DATA_CONST.__const _SBCommandTabMaterialRecipeDark
|| __DATA_CONST.__const _SBCommandTabMaterialRecipeLight
|| __DATA_CONST.__const _SBCommunicationPolicyDidChangeNotification
|| __DATA_CONST.__const _SBControlCenterControllerDidDismissNotification
|| __DATA_CONST.__const _SBControlCenterControllerDidPresentNotification
|| __DATA_CONST.__const _SBControlCenterControllerWillDismissNotification
|| __DATA_CONST.__const _SBControlCenterControllerWillPresentNotification
|| __DATA_CONST.__const _SBCoverSheetDidDismissNotification
|| __DATA_CONST.__const _SBCoverSheetDidPresentNotification
|| __DATA_CONST.__const _SBCoverSheetWillAnimateDeactivation
|| __DATA_CONST.__const _SBCoverSheetWillDismissNotification
|| __DATA_CONST.__const _SBCoverSheetWillPresentNotification
|| __DATA_CONST.__const _SBCurrentIconStatePathSymbolized
|| __DATA_CONST.__const _SBCurrentLocaleDidChangeNotification
|| __DATA_CONST.__const _SBDataActivationBundleIdentifier
|| __DATA_CONST.__const _SBDefaultSceneIdentifierSuffix
|| __DATA_CONST.__const _SBDeferredScreenUnblankCompletedNotification
|| __DATA_CONST.__const _SBDesiredIconStatePathSymbolized
|| __DATA_CONST.__const _SBDeviceWipeEntitlement
|| __DATA_CONST.__const _SBDiagnosticsBundleIdentifier
|| __DATA_CONST.__const _SBDimSumServiceEntitlement
|| __DATA_CONST.__const _SBDismissReasonMainScreen
|| __DATA_CONST.__const _SBElasticValueViewControllerDidDismissNotificationName
|| __DATA_CONST.__const _SBElasticValueViewControllerDidPresentNotificationName
|| __DATA_CONST.__const _SBElasticValueViewControllerWillDismissNotificationName
|| __DATA_CONST.__const _SBElasticValueViewControllerWillPresentNotificationName
|| __DATA_CONST.__const _SBEmitStudyLogSwitcherEventResponseHomeGestureBeginKey
|| __DATA_CONST.__const _SBEmitStudyLogSwitcherEventResponseHomeGestureEndKey
|| __DATA_CONST.__const _SBExpanseBannerDefaultBannerRequesterIdentifier
|| __DATA_CONST.__const _SBExpanseBannerRequesterIdentifierPrefix
|| __DATA_CONST.__const _SBExpansePresentableRequestIdentifierHUDPrefix
|| __DATA_CONST.__const _SBExpansePresentableRequestIdentifierPrefix
|| __DATA_CONST.__const _SBExpansePresentableRequesterIdentifier
|| __DATA_CONST.__const _SBExpanseSessionPresentableRequestIdentifierPrefix
|| __DATA_CONST.__const _SBFaceTimeStateChangedNotification
|| __DATA_CONST.__const _SBFacetimeBundleIdentifier
|| __DATA_CONST.__const _SBFilesBundleIdentifier
|| __DATA_CONST.__const _SBFindMyFriendsBundleIdentifier
|| __DATA_CONST.__const _SBFloatingDockControllerFrameDidChangeNotification
|| __DATA_CONST.__const _SBFloatingDockControllerFrameKey
|| __DATA_CONST.__const _SBFloatingDockControllerHeightChangeInteractiveKey
|| __DATA_CONST.__const _SBFloatingDockControllerHeightKey
|| __DATA_CONST.__const _SBFloatingDockControllerHeightWillChangeNotification
|| __DATA_CONST.__const _SBFloatingDockSuggestionsDeletedNotification
|| __DATA_CONST.__const _SBFloatingDockSuggestionsDeletedNotificationBundleIdentifierKey
|| __DATA_CONST.__const _SBFloatingDockSuggestionsDeletedNotificationWebAppIdentifierKey
|| __DATA_CONST.__const _SBFocusModesHomeScreenSettingsEntitlement
|| __DATA_CONST.__const _SBFrontmostDisplayChangedNotification
|| __DATA_CONST.__const _SBGetIconStateEntitlement
|| __DATA_CONST.__const _SBGuidedAccessActivationChangedNotification
|| __DATA_CONST.__const _SBHUDControllerDidDismissHUDNotificationName
|| __DATA_CONST.__const _SBHUDControllerDidPresentHUDNotificationName
|| __DATA_CONST.__const _SBHUDControllerWillDismissHUDNotificationName
|| __DATA_CONST.__const _SBHUDControllerWillPresentHUDNotificationName
|| __DATA_CONST.__const _SBHandleMenuButtonEventName
|| __DATA_CONST.__const _SBHardwareKeyboardAvailabilityChangedNotification
|| __DATA_CONST.__const _SBHeartbeatMetricPersistenceFeatureNameCenterWindowSession
|| __DATA_CONST.__const _SBHeartbeatMetricPersistenceFeatureNameSlideOverSession
|| __DATA_CONST.__const _SBHeartbeatMetricPersistenceFeatureNameSplitViewSession
|| __DATA_CONST.__const _SBHeartbeatMetricPersistenceKeyCounts
|| __DATA_CONST.__const _SBHeartbeatMetricPersistenceKeyDurations
|| __DATA_CONST.__const _SBHomescreenDisplayChangedNotification
|| __DATA_CONST.__const _SBIAPExtendedModeChangedNotification
|| __DATA_CONST.__const _SBICloudRestoreDidBeginNotification
|| __DATA_CONST.__const _SBICloudRestoreDidEndNotification
|| __DATA_CONST.__const _SBITunesRestoreStateDidChangeNotification
|| __DATA_CONST.__const _SBIconControllerPPTFolderTestRequestID
|| __DATA_CONST.__const _SBIconFolderPathLookupEntitlement
|| __DATA_CONST.__const _SBIconLocationAppSwitcher
|| __DATA_CONST.__const _SBIconLocationCommandTab
|| __DATA_CONST.__const _SBIconLocationFloatingDockSuggestions
|| __DATA_CONST.__const _SBInCallPresentationEntitlement
|| __DATA_CONST.__const _SBInCallPresentationManagerErrorDomain
|| __DATA_CONST.__const _SBInCallServiceBundleIdentifier
|| __DATA_CONST.__const _SBInSetupModeDidChangeNotification
|| __DATA_CONST.__const _SBInstalledApplicationsDidChangeNotification
|| __DATA_CONST.__const _SBInternalAppTag
|| __DATA_CONST.__const _SBKeyboardDockedChangedNotification
|| __DATA_CONST.__const _SBKeyboardDockedKey
|| __DATA_CONST.__const _SBLaunchAppAfterSetupEntitlement
|| __DATA_CONST.__const _SBLayoutRoleCenterIdentifier
|| __DATA_CONST.__const _SBLayoutRoleFloatingIdentifier
|| __DATA_CONST.__const _SBLayoutRolePrimaryIdentifier
|| __DATA_CONST.__const _SBLayoutRoleSideIdentifier
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeApp
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeContinuityApp
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeHomeScreen
|| __DATA_CONST.__const _SBLegacyDisplayItemTypePlusControl
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeRemoteAlert
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeSwitcherService
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeWebApp
|| __DATA_CONST.__const _SBLegacyTVRemoteAppBundleIdentifier
|| __DATA_CONST.__const _SBLiquidDetectionManagerStateDidChangeNotification
|| __DATA_CONST.__const _SBLockScreenBaseScreenOffReason
|| __DATA_CONST.__const _SBLockScreenDimmedNotification
|| __DATA_CONST.__const _SBLockScreenExternalPartyWantsUILockNotification
|| __DATA_CONST.__const _SBLockScreenFacetimeCallUINeedsUpdateNotification
|| __DATA_CONST.__const _SBLockScreenFindMyDevicePluginName
|| __DATA_CONST.__const _SBLockScreenManagerUnlockAnimationDidFinish
|| __DATA_CONST.__const _SBLockScreenMapsPluginName
|| __DATA_CONST.__const _SBLockScreenNowPlayingPluginName
|| __DATA_CONST.__const _SBLockScreenPictureInPictureHiddenReason
|| __DATA_CONST.__const _SBLockScreenPluginWasDisabledNotification
|| __DATA_CONST.__const _SBLockScreenTelephoneCallUINeedsUpdateNotification
|| __DATA_CONST.__const _SBLockScreenTransientActiveInterfaceOrientationForUndimReason
|| __DATA_CONST.__const _SBLockScreenUIDidLockNotification
|| __DATA_CONST.__const _SBLockScreenUIRelockedNotification
|| __DATA_CONST.__const _SBLockScreenUIWillLockNotification
|| __DATA_CONST.__const _SBLockScreenUIWillLockNotificationAnimatedKey
|| __DATA_CONST.__const _SBLockScreenUndimmedNotification
|| __DATA_CONST.__const _SBLockdownDeviceActivatedChangedNotification
|| __DATA_CONST.__const _SBLoginAppBundleIdentifier
|| __DATA_CONST.__const _SBLoginAppWorkspaceIdentifier
|| __DATA_CONST.__const _SBLowDensityIconLayoutEntitlement
|| __DATA_CONST.__const _SBMagnifierBundleIdentifier
|| __DATA_CONST.__const _SBMailBundleIdentifier
|| __DATA_CONST.__const _SBMainDisplayPolicyAggregatorCapabilitiesChangedNotification
|| __DATA_CONST.__const _SBMainSwitcherSwitcherSharedInstanceCreatedNotification
|| __DATA_CONST.__const _SBMapsBundleIdentifier
|| __DATA_CONST.__const _SBMediaApplicationActivityDidBeginNotification
|| __DATA_CONST.__const _SBMediaApplicationActivityDidEndNotification
|| __DATA_CONST.__const _SBMediaNowPlayingAppChangedNotification
|| __DATA_CONST.__const _SBMediaNowPlayingChangedNotification
|| __DATA_CONST.__const _SBMediaNowPlayingTrackElapsedTimeChangedNotification
|| __DATA_CONST.__const _SBMediaserverdBundleIdentifier
|| __DATA_CONST.__const _SBMedusaEnabledStateChangedNotification
|| __DATA_CONST.__const _SBMemoryPressureReturnedToNormalNotification
|| __DATA_CONST.__const _SBMemoryPressureUnderPressureNotification
|| __DATA_CONST.__const _SBMessagesBundleIdentifier
|| __DATA_CONST.__const _SBMobilePhoneBundleIdentifier
|| __DATA_CONST.__const _SBMultitaskingPreferencesEntitlement
|| __DATA_CONST.__const _SBMusicBundleIdentifier
|| __DATA_CONST.__const _SBNewSuggestedAppKey
|| __DATA_CONST.__const _SBNewsstandProcessAssertionsEntitlement
|| __DATA_CONST.__const _SBNonDefaultSystemAppTag
|| __DATA_CONST.__const _SBNotesBundleIdentifier
|| __DATA_CONST.__const _SBNotificationCarPlayDestinationAvailabilityDidChangeNotification
|| __DATA_CONST.__const _SBOpenURLInBackgroundEntitlement
|| __DATA_CONST.__const _SBOpenURLWhenLockedEntitlement
|| __DATA_CONST.__const _SBOrientationLockedForDeviceSetup
|| __DATA_CONST.__const _SBOverrideDisplayedDateEntitlement
|| __DATA_CONST.__const _SBPIPPPTTestAppBundleIdentifier
|| __DATA_CONST.__const _SBPIPSceneContentPresentationErrorDomain
|| __DATA_CONST.__const _SBPPTCoverSheetDismissTestName
|| __DATA_CONST.__const _SBPPTCoverSheetDismissToSafariTestName
|| __DATA_CONST.__const _SBPPTCoverSheetPresentOverSafariTestName
|| __DATA_CONST.__const _SBPPTCoverSheetPresentTestName
|| __DATA_CONST.__const _SBPPTCoverSheetTestPrefix
|| __DATA_CONST.__const _SBPPTRunnerSiriBringupTestPrefix
|| __DATA_CONST.__const _SBPPTRunnerSiriTestPrefix
|| __DATA_CONST.__const _SBPaperBoardBundleIdentifier
|| __DATA_CONST.__const _SBPassbookBundleIdentifier
|| __DATA_CONST.__const _SBPassbookUIServiceBundleIdentifier
|| __DATA_CONST.__const _SBPasscodePolicyChangedNotification
|| __DATA_CONST.__const _SBPersistentOverlayLoginKey
|| __DATA_CONST.__const _SBPersistentOverlayLogoutKey
|| __DATA_CONST.__const _SBPhotosBundleIdentifier
|| __DATA_CONST.__const _SBPresentPowerDownUIEntitlement
|| __DATA_CONST.__const _SBPreventDeviceLockEntitlement
|| __DATA_CONST.__const _SBPreventSpuriousScreenUndimEntitlement
|| __DATA_CONST.__const _SBPrintCenterBundleIdentifier
|| __DATA_CONST.__const _SBReachabilityActivatedAggdKey
|| __DATA_CONST.__const _SBReachabilityActivatedInAppKeyFormat
|| __DATA_CONST.__const _SBReachabilityActivatedInSpringBoardKeyFormat
|| __DATA_CONST.__const _SBReachabilityDismissedByFingerAggdKey
|| __DATA_CONST.__const _SBReachabilityDismissedByHomeAggdKey
|| __DATA_CONST.__const _SBReachabilityDismissedByTouchAggdKey
|| __DATA_CONST.__const _SBReachabilityDismissedTimeoutAfterInteractionAggdKey
|| __DATA_CONST.__const _SBReachabilityDismissedTimeoutAggdKey
|| __DATA_CONST.__const _SBReachabilityEnabledAggdKey
|| __DATA_CONST.__const _SBRecentAppLayoutsDidChangeNotification
|| __DATA_CONST.__const _SBRecentAppLayoutsDidInsertAtIndexesKey
|| __DATA_CONST.__const _SBRecentAppLayoutsDidModifyAtIndexesKey
|| __DATA_CONST.__const _SBRecentAppLayoutsDidRemoveAtIndexesKey
|| __DATA_CONST.__const _SBRecentLocalePreferenceKey
|| __DATA_CONST.__const _SBRemoteAlertTesterViewServiceBundleIdentifier
|| __DATA_CONST.__const _SBRemoteTransientOverlayViewControllerErrorDomain
|| __DATA_CONST.__const _SBRemoveWebClipFromHomeScreenEntitlement
|| __DATA_CONST.__const _SBRequestDeviceUnlockUIEntitlement
|| __DATA_CONST.__const _SBRequestSceneForDaemonEntitlement
|| __DATA_CONST.__const _SBRequestSuggestedAppEntitlement
|| __DATA_CONST.__const _SBResetHomeScreenLayoutEntitlement
|| __DATA_CONST.__const _SBResetOrRestoreStateDidChangeNotification
|| __DATA_CONST.__const _SBRestartManagerWillRebootNotification
|| __DATA_CONST.__const _SBRestrictedWidgetsIconLayoutEntitlement
|| __DATA_CONST.__const _SBRingerChangedNotification
|| __DATA_CONST.__const _SBRingerHUDIdentifier
|| __DATA_CONST.__const _SBSafariBundleIdentifier
|| __DATA_CONST.__const _SBSceneDataKeyActivationConditions
|| __DATA_CONST.__const _SBSceneDataKeyAppClipIdentifier
|| __DATA_CONST.__const _SBSceneDataKeyCanvasTitle
|| __DATA_CONST.__const _SBSceneDataKeyClassicAppZoomedIn
|| __DATA_CONST.__const _SBSceneDataKeyClassicPhoneAppPrefersLandscape
|| __DATA_CONST.__const _SBSceneDataKeyDefaultPNGExpirationAbsoluteTime
|| __DATA_CONST.__const _SBSceneDataKeyDefaultPNGName
|| __DATA_CONST.__const _SBSceneDataKeyDefaultStatusBarHidden
|| __DATA_CONST.__const _SBSceneDataKeyDefaultStatusBarStyle
|| __DATA_CONST.__const _SBSceneDataKeyOriginatedInCenterWindow
|| __DATA_CONST.__const _SBSceneDataKeyPersistenceIdentifier
|| __DATA_CONST.__const _SBSceneDataKeyRequestedFullScreenCenterWindow
|| __DATA_CONST.__const _SBSceneDataKeySceneSessionRole
|| __DATA_CONST.__const _SBSceneIdentifierPrefix
|| __DATA_CONST.__const _SBSceneIdentifierPrefixFormat
|| __DATA_CONST.__const _SBScreenIsOnKey
|| __DATA_CONST.__const _SBScreenshotServicesServiceBundleIdentifier
|| __DATA_CONST.__const _SBSetAppBadgeStringEntitlement
|| __DATA_CONST.__const _SBSetAppUsingExternalAccessoryEntitlement
|| __DATA_CONST.__const _SBSetIconStateEntitlement
|| __DATA_CONST.__const _SBSetIdleTextEntitlement
|| __DATA_CONST.__const _SBSetTypingActiveEntitlement
|| __DATA_CONST.__const _SBSetVoiceControlEnabledEntitlement
|| __DATA_CONST.__const _SBSetWallpaperVariantEntitlement
|| __DATA_CONST.__const _SBSetWantsLockButtonEventsEntitlement
|| __DATA_CONST.__const _SBSettingsBundleIdentifier
|| __DATA_CONST.__const _SBSetupBuddyCompletedNotification
|| __DATA_CONST.__const _SBShowsBadgesInAppLibraryEntitlement
|| __DATA_CONST.__const _SBSidecarBundleIdentifier
|| __DATA_CONST.__const _SBSignificantAnimationDidEndNotification
|| __DATA_CONST.__const _SBSignificantAnimationWillBeginNotification
|| __DATA_CONST.__const _SBSignificantTimeChangeWasMidnightKey
|| __DATA_CONST.__const _SBSignificantTimeChangedNotification
|| __DATA_CONST.__const _SBSiriBundleIdentifier
|| __DATA_CONST.__const _SBSiriContinuityIdentifier
|| __DATA_CONST.__const _SBSpotlightBundleIdentifier
|| __DATA_CONST.__const _SBSpotlightTransientOverlayInteractiveGestureEventLabel
|| __DATA_CONST.__const _SBSpotlightVisibilityDidChangeNotification
|| __DATA_CONST.__const _SBSpringBoardDNDClientIdentifier
|| __DATA_CONST.__const _SBSpringBoardKeyboardFocusLockReasonCommandTab
|| __DATA_CONST.__const _SBSpringBoardKeyboardFocusLockReasonControlCenter
|| __DATA_CONST.__const _SBSpringBoardKeyboardFocusLockReasonCoverSheet
|| __DATA_CONST.__const _SBSpringBoardWillRestartReason
|| __DATA_CONST.__const _SBStartupTransitionContextKeyAppLaunchURL
|| __DATA_CONST.__const _SBStartupTransitionContextKeyFromAppBundleID
|| __DATA_CONST.__const _SBStartupTransitionContextKeyFromLocked
|| __DATA_CONST.__const _SBStartupTransitionContextKeyFromUserPowerDown
|| __DATA_CONST.__const _SBStartupTransitionContextKeyReason
|| __DATA_CONST.__const _SBStatusBarOverridesDidChangeNotification
|| __DATA_CONST.__const _SBStatusBarStyleOverridesAssertionEntitlement
|| __DATA_CONST.__const _SBStatusBarStyleOverridesCoordinatorEntitlement
|| __DATA_CONST.__const _SBStatusBarTappedNotification
|| __DATA_CONST.__const _SBSuggestedAppChangedNotification
|| __DATA_CONST.__const _SBSuppressKeyboardForUILock
|| __DATA_CONST.__const _SBSuspendSnapshotName
|| __DATA_CONST.__const _SBSwitcherDemoCommandsEntitlement
|| __DATA_CONST.__const _SBSwitcherShelfHeightDidChangeNotification
|| __DATA_CONST.__const _SBSwitcherShelfHeightKey
|| __DATA_CONST.__const _SBSystemGestureTrackingMilestone
|| __DATA_CONST.__const _SBSystemNotesPresentationEntitlement
|| __DATA_CONST.__const _SBTTYChangedNotification
|| __DATA_CONST.__const _SBTVRemoteUIServiceBundleIdentifier
|| __DATA_CONST.__const _SBTestFlightBundleIdentifier
|| __DATA_CONST.__const _SBThermalControllerStateDidChange
|| __DATA_CONST.__const _SBTransactionErrorAppRepairFailed
|| __DATA_CONST.__const _SBTransactionErrorAppRepairRequiresDataConnection
|| __DATA_CONST.__const _SBTransactionErrorAutoPIPFailed
|| __DATA_CONST.__const _SBUIACStatusChangedNotification
|| __DATA_CONST.__const _SBUIAccessoryAnimationStatusChangedNotification
|| __DATA_CONST.__const _SBUIAccessoryAttachedNotification
|| __DATA_CONST.__const _SBUIAccessoryDetachedNotification
|| __DATA_CONST.__const _SBUIAppSwitcherObscuredNotification
|| __DATA_CONST.__const _SBUIAppSwitcherRevealedNotification
|| __DATA_CONST.__const _SBUIAppSwitcherWillRevealNotification
|| __DATA_CONST.__const _SBUIApplicationIconLaunchEventLabel
|| __DATA_CONST.__const _SBUIBatteryNotChargingStatusChangedNotification
|| __DATA_CONST.__const _SBUIControllerWallpaperOrientationSourceReason
|| __DATA_CONST.__const _SBUIExternalChargeAccessoryConnectedStatusChangedNotification
|| __DATA_CONST.__const _SBUIHeadsetDockStatusChangedNotification
|| __DATA_CONST.__const _SBUIHomeScreenActiveContentRequirementReason
|| __DATA_CONST.__const _SBUILaunchOptionKeyActivationSettings
|| __DATA_CONST.__const _SBUILockOptionsAnimateLockScreenActivationKey
|| __DATA_CONST.__const _SBUILockOptionsAnimationTransactionProviderKey
|| __DATA_CONST.__const _SBUILockOptionsForceBioLockoutKey
|| __DATA_CONST.__const _SBUILockOptionsForceLockKey
|| __DATA_CONST.__const _SBUILockOptionsIgnoreCallKey
|| __DATA_CONST.__const _SBUILockOptionsLockAutomaticallyKey
|| __DATA_CONST.__const _SBUILockOptionsPreserveTransientOverlaysKey
|| __DATA_CONST.__const _SBUILockOptionsUseScreenOffModeKey
|| __DATA_CONST.__const _SBUIUnlockOptionsBypassPasscodeKey
|| __DATA_CONST.__const _SBUIUnlockOptionsNoPasscodeAnimationKey
|| __DATA_CONST.__const _SBUIUnlockOptionsRequestedOrientationKey
|| __DATA_CONST.__const _SBUIUnlockOptionsStartFadeInAnimation
|| __DATA_CONST.__const _SBUIUnlockOptionsSuppressingWakeToKey
|| __DATA_CONST.__const _SBUIUnlockOptionsTurnOnScreenFirstKey
|| __DATA_CONST.__const _SBUIUnsupportedChargingAccessoryStatusChangedNotification
|| __DATA_CONST.__const _SBUIWindowedAccessoryAttachedKey
|| __DATA_CONST.__const _SBUIWindowedAccessoryDidAttachOrDetachNotification
|| __DATA_CONST.__const _SBUniversalControlEntitlement
|| __DATA_CONST.__const _SBUnlimitedProcessAssertionsEntitlement
|| __DATA_CONST.__const _SBUseModernUILockScreenPreferenceKey
|| __DATA_CONST.__const _SBUserNotificationDoneNotification
|| __DATA_CONST.__const _SBUserSessionControllerDomain
|| __DATA_CONST.__const _SBVPNConnectionChangedNotification
|| __DATA_CONST.__const _SBViewServicesEntitlement
|| __DATA_CONST.__const _SBVirtualDisplayTestAppBundleIdentifier
|| __DATA_CONST.__const _SBVoiceMemosBundleIdentifier
|| __DATA_CONST.__const _SBWTErrorDomain
|| __DATA_CONST.__const _SBWTInterruptReasonHome
|| __DATA_CONST.__const _SBWTInterruptReasonLock
|| __DATA_CONST.__const _SBWTMilestoneAnimationFinished
|| __DATA_CONST.__const _SBWTMilestoneAnimationKeepAlive
|| __DATA_CONST.__const _SBWalletPreArmControllerPreArmSuppressionDidChange
|| __DATA_CONST.__const _SBWallpaperAccessEntitlement
|| __DATA_CONST.__const _SBWallpaperAnimationSuspensionAssertionEntitlement
|| __DATA_CONST.__const _SBWallpaperControllerDefaultCachingIdentifier
|| __DATA_CONST.__const _SBWallpaperIdentifierHomescreenWallpaperAggdKey
|| __DATA_CONST.__const _SBWallpaperIdentifierLockscreenWallpaperAggdKey
|| __DATA_CONST.__const _SBWallpaperIrisEnabledAggdKey
|| __DATA_CONST.__const _SBWallpaperIrisPlayCountAggdKey
|| __DATA_CONST.__const _SBWallpaperSharedWallpaperBetweenHomeAndLockScreen
|| __DATA_CONST.__const _SBWallpaperTypeHomescreenWallpaperAggdKey
|| __DATA_CONST.__const _SBWallpaperTypeLockscreenWallpaperAggdKey
|| __DATA_CONST.__const _SBWallpaperViewBatterySaverReason
|| __DATA_CONST.__const _SBWebAppBundleIdentifier
|| __DATA_CONST.__const _SBWebClipServiceEntitlement
|| __DATA_CONST.__const _SBWebClipServiceWillLaunchWebClipBundleIdentifierKey
|| __DATA_CONST.__const _SBWebClipServiceWillLaunchWebClipNotificationName
|| __DATA_CONST.__const _SBWidgetMetricsServiceEntitlement
|| __DATA_CONST.__const _SBWifiManagerLinkDidChangeNotification
|| __DATA_CONST.__const _SBWifiManagerLinkHotSpotnessDidChangeNotification
|| __DATA_CONST.__const _SBWifiManagerLinkWillChangeNotification
|| __DATA_CONST.__const _SBWifiManagerPrimaryInterfaceMayHaveChangedNotification
|| __DATA_CONST.__const _SBWifiSignalStrengthChangedNotification
|| __DATA_CONST.__const _SBWindowDragPrivateTypeIdentifier
|| __DATA_CONST.__const _SBWorkspaceDidWakeFromSleepNotification
|| __DATA_CONST.__const _SBWorkspaceDisplayKey
|| __DATA_CONST.__const _SBiCloudDriveBundleIdentifier
|| __DATA_CONST.__const _SBiPhotoBundleIdentifier
|| __DATA_CONST.__const _SBiPodOutBundleIdentifier
|| __DATA_CONST.__const _UseEmergencyServicesTestNumber
|| __DATA_CONST.__const ___PPTAppCloseCenterZoomTestname
|| __DATA_CONST.__const ___PPTAppCloseInFolderTestname
|| __DATA_CONST.__const ___PPTAppCloseTestname
|| __DATA_CONST.__const ___PPTAppCloseWithScreenTimeOverlayTestname
|| __DATA_CONST.__const ___PPTAppIconForceTouchDismissInDockTestname
|| __DATA_CONST.__const ___PPTAppIconForceTouchDismissTestname
|| __DATA_CONST.__const ___PPTAppIconForceTouchPresentInDockTestname
|| __DATA_CONST.__const ___PPTAppIconForceTouchPresentTestname
|| __DATA_CONST.__const ___PPTAppLibraryPadPresentTestName
|| __DATA_CONST.__const ___PPTAppOpenCenterZoomTestname
|| __DATA_CONST.__const ___PPTAppOpenInFolderTestname
|| __DATA_CONST.__const ___PPTAppOpenTestname
|| __DATA_CONST.__const ___PPTAppOpenWithScreenTimeOverlayTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupOverAppInScreenTimeRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupOverAppInScreenTimeTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupOverAppRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupOverAppTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissOverAppInScreenTimeRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissOverAppInScreenTimeTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissOverAppRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissOverAppTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissTestname
|| __DATA_CONST.__const ___PPTAppSwitcherTapContinuityBannerTestname
|| __DATA_CONST.__const ___PPTDashBoardPasscodeDismissSubTestname
|| __DATA_CONST.__const ___PPTDashBoardPasscodePresentSubTestname
|| __DATA_CONST.__const ___PPTDashBoardPasscodeTestname
|| __DATA_CONST.__const ___PPTDeweyCollapsePodSubTestname
|| __DATA_CONST.__const ___PPTDeweyExpandPodSubTestname
|| __DATA_CONST.__const ___PPTDeweyPullToLibrarySearchDismissSubTestname
|| __DATA_CONST.__const ___PPTDeweyPullToLibrarySearchPresentSubTestname
|| __DATA_CONST.__const ___PPTDeweyPullToLibrarySearchTestname
|| __DATA_CONST.__const ___PPTFolderCloseTestname
|| __DATA_CONST.__const ___PPTFolderOpenTestname
|| __DATA_CONST.__const ___PPTFolderRotationTestname
|| __DATA_CONST.__const ___PPTHomeScreenEnterPageHidingTestname
|| __DATA_CONST.__const ___PPTHomeScreenExitPageHidingTestname
|| __DATA_CONST.__const ___PPTHomeScreenIconPullToSpotlightColdTestname
|| __DATA_CONST.__const ___PPTHomeScreenIconPullToSpotlightDismissTestname
|| __DATA_CONST.__const ___PPTHomeScreenIconPullToSpotlightTestname
|| __DATA_CONST.__const ___PPTHomeScreenRotationTestname
|| __DATA_CONST.__const ___PPTHomeScreenSwipeLeftToTodayViewTestname
|| __DATA_CONST.__const ___PPTHomeScreenSwipeRightFromTodayViewTestname
|| __DATA_CONST.__const ___PPTPageManagementPresentTestName
|| __DATA_CONST.__const ___PPTScrollDeweyLibrarySearchTestname
|| __DATA_CONST.__const ___PPTScrollDeweyTestname
|| __DATA_CONST.__const ___PPTScrollDeweyWithinExpandedPodSubtestname
|| __DATA_CONST.__const ___PPTScrollDeweyWithinExpandedPodTestname
|| __DATA_CONST.__const ___PPTScrollFolderTestname
|| __DATA_CONST.__const ___PPTScrollIconListForWidgetPerfTestname
|| __DATA_CONST.__const ___PPTScrollIconListTestname
|| __DATA_CONST.__const ___PPTScrollIconListWithFoldersTestname
|| __DATA_CONST.__const ___PPTScrollIconListWithWidgetsTestname
|| __DATA_CONST.__const ___PPTScrollJigglyIconListTestname
|| __DATA_CONST.__const ___PPTScrollJigglyIconListWithWidgetsTestname
|| __DATA_CONST.__const ___PPTScrunchHomeToAutoPIPTestname
|| __DATA_CONST.__const ___PPTScrunchHomeToAutoPiPTestname
|| __DATA_CONST.__const ___PPTSpotlightDismissSubTestname
|| __DATA_CONST.__const ___PPTSpotlightKeyboardHidingSubTestname
|| __DATA_CONST.__const ___PPTSpotlightKeyboardShowingSubTestname
|| __DATA_CONST.__const ___PPTSpotlightPresentSubTestname
|| __DATA_CONST.__const ___PPTStackConfigurationDismissalSubTestname
|| __DATA_CONST.__const ___PPTStackConfigurationPresentationSubTestname
|| __DATA_CONST.__const ___PPTStackConfigurationTestname
|| __DATA_CONST.__const ___PPTSwipeFromDeweyTestname
|| __DATA_CONST.__const ___PPTSwipeToDeweyTestname
|| __DATA_CONST.__const ___PPTSwipeUpHomeToAutoPIPTestname
|| __DATA_CONST.__const ___PPTSwipeUpHomeToAutoPiPTestname
|| __DATA_CONST.__const ___PPTVolumeHUDDismissalSubTestname
|| __DATA_CONST.__const ___PPTVolumeHUDPresentationSubTestname
|| __DATA_CONST.__const ___PPTVolumeHUDTestname
|| __DATA_CONST.__const ___PPTVolumeHUDTimeBetweenPressAndPresentOfHUDSubTestname
|| __DATA_CONST.__const ___PPTWidgetConfigurationEditingDismissalSubTestname
|| __DATA_CONST.__const ___PPTWidgetConfigurationEditingPresentationSubTestname
|| __DATA_CONST.__const ___PPTWidgetConfigurationEditingTestname
|| __DATA_CONST.__const ___PPTWidgetConfigurationOrbDismissalSubTestname
|| __DATA_CONST.__const ___PPTWidgetConfigurationOrbPresentationSubTestname
|| __DATA_CONST.__const ___PPTWidgetConfigurationOrbTestname
|| __DATA_CONST.__const _kDisplayItemBundleIDKey
|| __DATA_CONST.__const _kDisplayItemTypeKey
|| __DATA_CONST.__const _kDisplayItemUniqueIDKey
|| __DATA_CONST.__const _kSBAssistantHidingOtherWindowsReason
|| __DATA_CONST.__const _kSBCommunicationPolicyChangedBundleIdentifiersKey
|| __DATA_CONST.__const _kSBInstalledApplicationsAddedBundleIDsKey
|| __DATA_CONST.__const _kSBInstalledApplicationsRemovedBundleIDsKey
|| __DATA_CONST.__const _kSBInstalledApplicationsReplacedBundleIDsKey
|| __DATA_CONST.__const _kSBInstalledApplicationsUpdatedBundleIDsKey
|| __DATA_CONST.__const _kSBSyncSessionBegan
|| __DATA_CONST.__const _kSBSyncSessionEnded
|| __DATA_CONST.__const _kSBWirelessAppSyncBegan
|| __DATA_CONST.__const _kSBWirelessAppSyncEnded
|| __DATA_DIRTY.__common _SBApp
|| __DATA_DIRTY.__common ___CheckForLeaks
|| __DATA_DIRTY.__common ___PPTResetStateWhenDone
|| __DATA_DIRTY.__common ___PPTTestInProgress
|| __DATA_DIRTY.__common ___SkipScrollBeforeLaunch
|| __DATA_DIRTY.__common ___extendedModeNotifyToken
|| __DATA_DIRTY.__common ___extendedModeNotifyTokenIsValid
|| __DATA_DIRTY.__common ___extraBacklightLogging
|| __DATA_DIRTY.__common _kSBAssistantBottomEdgeAngleWindow
|| __DATA_DIRTY.__common _kSBAssistantBottomEdgeDismissTranslationThreshold
|| __DATA_DIRTY.__common _kSBAssistantBottomEdgeDismissVelocityThreshold
|| __DATA_DIRTY.__data _kSBAssistantDefaultAnimationDuration
|| __DATA_DIRTY.__data _kSBAssistantDefaultDismissAnimationDurationOverApp
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NCUserAlertActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NCUserAlertDefaultActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NCUserAlertDismissActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAVSystemControllerCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAWDMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAWDMetricData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAccessibilityHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAccessibilityMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAccessibilityWindowHostingControllerServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAccountStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActionHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivateApplicationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivateHomeButtonSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivateReachabilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivityAttribution
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAdvanceDateOverrideTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAirplaneModeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemPresentation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemsController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemsObjectQueue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertLayoutPresentationVerifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnalyticsStateMachineEdge
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnalyticsStateMachineEventHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnimationUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnimationWrapperHostRequester
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnyTopAffordanceInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppClipOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppClipOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppClipPlaceholderWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppExitedWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppLayout
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppLibraryMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppPlatterDragPreview
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppStatusBarAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppStatusBarContentAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppStatusBarSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppStatusBarSettingsAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSuggestionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherOrbGestureAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherOrbGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherPageShadowView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherPageView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherReusableSnapshotView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherScrollView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherServiceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSnapshotCacheEntry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSnapshotImageCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSnapshotLockoutViewControllerProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSnapshotViewState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSystemService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppToAppWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppVisibilityPreferences
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplication
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationAutoLaunchService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationHarmonyService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLaunchAlertEvaluatorFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLaunchAlertService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLaunchImageParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLayoutGestureMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLibraryObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationMultiwindowService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationPlaceholder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationPlaceholderController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationPlaceholderProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationProcessState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationRestrictionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneEntityDestructionIntent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneHandleRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneSpecification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneUpdateTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneViewStatusBarDescriptor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutPolluterRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutReportRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationStateServiceDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationStateServiceSingleton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSupportServiceDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSupportServiceRequestContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSupportServiceSingleton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationTestingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationUserQuitMonitorServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBArcSwipeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAsymmetricalCornerRadiusWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAsynchronousRenderingAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAttentionAwarenessClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAttentionAwarenessSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAutoPIPWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAutoUnlockComposableRule
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAvocadoDebuggingController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBackBoardServicesInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBackgroundFetchExternalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBackgroundFetchTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBackgroundMultitaskingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBacklightController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBacklightIdleTimer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBacklightStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBadgeCountRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBannerGestureRecognizerPriorityAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBannerManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBannerWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBarSwipeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBarSwipeAffordanceView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBarSwipeAffordanceViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBaseStartupTransition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBestAppSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBiometricAuthenticationPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBiometricEventLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBiometricMonitorTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBiometricsService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBlockWorkspaceQueueTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBluetoothAccessoryBatteryMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBluetoothController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBookmarkIcon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBreadcrumbActionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBreadcrumbMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBrightnessControl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBulletinLocalObserverGateway
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBulletinSpokenObserverGateway
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBButtonConsumerClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBButtonConsumerRegistration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCalendarApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraApplication
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraHardwareButtonDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraHardwareButtonSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraHardwareButtonStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCarDoNotDisturbController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCarDoNotDisturbExitConfirmationAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCardItemsController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCenterWindowSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChainableModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChainableModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChainableModifierEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChainableModifierMethodCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChronoApplicationProcessStateObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChronoHomeScreenUsageObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClawGestureLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClickGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClockApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClockApplicationIconImageView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCombinationHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCombinationHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCommandTabController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCommandTabViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCommunicationPolicyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBConferenceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterRingerSwitchController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterSystemAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoplanarSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetBiometricResourceObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetBlurView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetIconFlyInAnimator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetPanelBackgroundContainerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetParallaxContainerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetPositionView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetPrimarySlidingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetSceneManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetSlidingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetSpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetSystemGesturesDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCrossfadeDosidoSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCursiveTextView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDaemonContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDaemonHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDaemonRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardAnalyticsEmitter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardApplicationInformer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardApplicationLauncher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardBiometricUnlockController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardCameraPageViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardEmergencyDialerController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardHostedAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardIdleTimerController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardIdleTimerProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardLegibilityProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardLockScreenEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardMesaUnlockBehavior
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardMesaUnlockBehaviorConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardModalHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardModalHomeAffordanceControllerClientBridge
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardNotificationPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardOrientationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardPearlUnlockBehavior
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardPlatterHomeGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardPluginController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardPolicyBasedBehaviorProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardSetupController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardSetupView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardSetupViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardStatusBarController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardThermalStatusProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardViewExternalControllerBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardWallpaperViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDataRecoveryController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeckSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeckSwitcherPanGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeckSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeckToFullScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultAuthenticationPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultCoverSheetContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultIconModelStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultImplementationsSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultLaunchSnapshotTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultProximityBacklightPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultTraitsParticipantDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDelayedPressInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeleteNonAppIconAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDesiredIconStateMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeveloperBuildExpirationTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationAppClipOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationRemoteTransientOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneClassicAccessoryView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationScenePlaceholderContentContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneStatusBarBreadcrumbProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneStatusBarStateProvider_Base
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneViewPlaceholderContentViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationScreenTimeLockoutViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceOrientationUpdateDeferralAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceOrientationUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceUnlockAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDirectToAirPlayController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDirectToAirPlayTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDisableActiveInterfaceOrientationChangeAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDisabledIdleTimer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDismissEmergencyCallRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDismissOverlaysAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDismissSiriSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDismissSiriSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDisplayBrightnessController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDisplayItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDoNotDisturbMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDockInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDockSuggestionsMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDosidoScaleAnimationSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDosidoSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDoubleClickSleepWakeHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDragAndDropGestureSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDragAndDropWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDraggingSystemManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDropShadowSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBElasticHUDDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBElasticHUDSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBElasticHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBElasticSliderMaterialWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBElasticSliderView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBElasticVolumeViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEmitSBEventSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEmptyWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalDosidoDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalDosidoSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalDosidoSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalDosidoSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalFloatingDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalFloatingSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalFloatingSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalFloatingSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalMedusaDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalMedusaSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalMedusaSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalMedusaSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEventObserverRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExpanseBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalDisplayManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalGlobalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalNotesDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalSoundsDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalWifiDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMotionAlarmController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMotionGestureController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFaceContactExpectationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFaceIDCoachingConditionRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFailingSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFailureNotifyingTapGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFakeiTunesRestoreTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFallbackSnapshotDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFixedLayoutModeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingApplicationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingDockBehaviorAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingDockController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingDockWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingSwitcherSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidDismissalState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidScrunchGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGesture
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGestureExclusionCompositeShape
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGestureExclusionTrapezoid
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherIconImageContainerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherIconOverlayView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherItemContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherItemContainerHeaderView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherItemContainerLayer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherLayoutContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherPageContentViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherPanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherSpaceOverlayAccessoryView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherSpaceTitleItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherSpaceTitleItemController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherSpaceUnderlayAccessoryView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherTitledButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherTouchPassThroughScrollView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFocusModesHomeScreenSettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFocusModesHomeScreenSettingsServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFolderStatsQueryableMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenAlwaysLiveLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenAppLayoutSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenFluidSwitcherRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenLiveContentOverlayContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenOcclusionTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenSwitcherLiveContentOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenSwitcherSceneLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenToHomeCenterZoomDownSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenToHomeIconZoomSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenToHomePIPSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenToHomeSlideOverSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullscreenZoomView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGestureRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGestureSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGestureSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGrabberTongue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGreenController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGuidedAccessListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBAcceleratedSinglePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBDoublePressDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBDoublePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBDoubleTapUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBInitialPressDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBInitialPressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBLongPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBSinglePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBTriplePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHIDButtonStateArbiter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHIDInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHIDUILockAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHapticSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareButtonActionList
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareButtonGestureParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareButtonGestureParametersProviderBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareButtonService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareButtonZStackClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHarmonyController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHarmonySettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHeartbeatMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHeartbeatMetricPersistence
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHideAppIconAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHistorianSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHitTestExtendedView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeButtonPressMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeConfigurationMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureArbiter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureArbiterRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureExclusionTrapezoidSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureFinalDestinationSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGesturePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureParticipant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureToHomeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureToSwitcherSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureToZoomDownSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGrabberRevealGesturesManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGrabberRotationView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGrabberView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeHardwareButtonGestureRecognizerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenBackdropDarkTintView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenBackdropView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenBackdropViewBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenOverlayController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenPreviewView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenSpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeToDeckSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeToSwitcherSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconDeleteMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconDragPlatterWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconFlockingMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconLaunchContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconLaunchMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconListScrollingRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconOverlayVisibilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconPageManagementMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconRelayoutRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconStateArchiver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconViewVisibilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconVisibilityService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerAggregateClientConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerBehavior
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerConfigurationDisablesTimerSetting
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerCoordinatorHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerDescriptor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerDescriptorFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerGlobalCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerGlobalStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIgnoredForAutorotationSecureWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInAppStatusBarHiddenAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallBannerPresentableViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallBannerSceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallPresentationRequestServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallPresentationSceneUpdateContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallPresentationScreenSharingIcon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallPresentationSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallSceneUpdateWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallTransientOverlayPresentationContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallTransientOverlayPresentationWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIndirectPanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInitialRestartState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInitialSetupSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInjectVelocitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInsecureDrawingAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInsertionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInteractionAfterWakeMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInternalClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInvalidateAdjustedAppLayoutsSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIsolatedSceneOrientationFollowingWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIsolatedSceneOrientationFollowingWrapperViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKeyboardBrightnessController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKeyboardDismissalManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKeyboardHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKeyboardSuppressionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutElement
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutElementViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutStateTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutStateTransitionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLibraryViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLiftToWakeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLiftToWakeManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLiftToWakeStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLiquidDetectionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenActionContextFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenActionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenAutoUnlockAggregateRule
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenBiometricAuthenticationCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenContentAssertionTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenDisableAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenDisabledAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenOrientationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenPluginManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenPreviewView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenUnlockRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenViewControllerBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockStateAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockdownManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockedModalAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockedPointerManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLogWindowTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLogoutProgressTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLogoutProgressView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLongPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLowBatteryLogTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLowEndHardwareSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLowPowerAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLowPowerFindMyAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayInterfaceOrientationAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayLayoutState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayLayoutStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayRootWindowScenePresentationBinder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneLayoutStatusBarView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneLayoutViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneLayoutWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySystemGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayWindowLayoutStrategy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayWorkspaceAppInteractionEventSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainScreenActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainStatusBarContentAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainSwitcherTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainSwitcherWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspaceApplicationSceneLayoutElementViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspaceLayoutStateContingencyPlan
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspaceTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMatchMoveToIconViewSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMediaController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusa1oSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaApplicationShortcutService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaAppsTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaConfigurationUsageMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaDecoratedDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaDragAndDropMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaHostedKeyboardWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaHostedKeyboardWindowLevelAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaOrientationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModalAlertPresentationCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModalAlertPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModalUIFluidDismissGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModalUIFluidDismissGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModalViewControllerStack
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModelessSyncController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModifierCacheCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModifierCacheSelectorList
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMorphToPIPChangedSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMousePointerManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMoveFloatingApplicationGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMoveGestureFloatingSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableAppStatusBarSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableDeviceApplicationScenePlaceholderContentContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableHardwareButtonGestureParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableInitialRestartState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableSwitcherAnimationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableSwitcherScrollViewAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableSwitcherTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCAlertingController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCNotificationDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCNotificationDispatcherDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCScreenController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCSoundController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNetworkReselectionAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNetworkReselectionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNewsstandMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotchedStatusBarProximityBacklightPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotchedStatusBarProximityBacklightPolicyEnablementCondition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationBannerDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationCarPlayDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationLongLookBannerPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationPresentableViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotifyIconWillZoomDownSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNubView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBOmnibusAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBOrientationAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBOrientationLockManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBOverrideInterfaceOrientationSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPBAppLayout
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPBAppLayoutList
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPBDisplayItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPAnalyticsAssistant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPAnalyticsSessionSummaryAssistant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPAnalyticsSourceSummaryAssistant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPBehaviorOverrideAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPContainerViewControllerRootView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPContentViewLayoutContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPContentViewLayoutMetrics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPContentViewLayoutMetricsSizePolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPContentViewLayoutSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPContentViewLayoutSizePreferences
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPControllerCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPCoordinatorAssertionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPDefaultPositionHyperregionComposer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPEnvironmentDependentOverrideAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPFadeInOutSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPFluidTransitionsSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPInteractionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPInteractionSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPInterruptionAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPInterruptionDebouncingTimer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPMorphAnimatorController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPMorphAnimatorDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPPegasusAdapter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPPegasusContainerAdapter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPPinchGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPPositionHyperregionLibrary
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPRestoreToFullScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPRotationGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPSettingsDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPShadowSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPSizingSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPStashAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPStashMaterialSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPStashVisualSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPWindowRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPanSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPasscodeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPasscodeEntryTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPearlInterlockObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPearlUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPerformTransitionSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPhoneAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPlatformController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPlatterHomeGestureContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPlatterHomeGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPocketStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPolygon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPortalView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPowerDownViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPowerLogMetricsAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPreemptAnimationSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPresentFloatingDockTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPresentSessionUIRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressCollector
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressGestureStateInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressPrecedenceArbiter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceMetricData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceValidator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressTuple
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPreviousWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPriorityDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProactiveHomeScreenSuggestionProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProactiveHomeScreenUsageObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProactiveLibraryCategoryMapProviderSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProcessSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPrototypeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPrototypeDumpingGround
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProximityBacklightPolicyFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProximitySensorManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProximitySettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilitySettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRebootRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecalibrateProximitySensorHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecentAppLayouts
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecentAppLayoutsPersister
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecycledViewsContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReloadWallpaperTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteAlertHandleLocalClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteAlertHandleServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlayHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlaySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlaySessionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRenderOverlayRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRequestFolderSnapshotsSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRestartManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRestartManagerWorkspaceDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReusableSnapshotItemContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReverseCountedSemaphore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRingerControl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRingerHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRingerPillView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRingerVolumeSliderView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRootSceneWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRootSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRunWallpaperMigrationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSOSClawGestureObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSOSEventHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSOSLockGestureObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneBackgroundedStatusAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneDataStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneDisconnectionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutAnimationWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutElementAnimationWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutFrameCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutOrientationCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutSynchronizeTransitionTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutTransitionAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutWhitePointAdaptationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneManagerCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneManagerReference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneReadySwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneSnapshotDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneStatusBarManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneViewStatusBarAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneWatchdogProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScheduledAlarmObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenFlash
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenTimeTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenWakeAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenshotManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenshotManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScrollSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScrollToAppLayoutSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScrollToTopSceneProxyView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScrollingSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureAppManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureMainScreenActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSensorActivityAttribution
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSensorActivityDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSeparatorView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSetupManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSetupPIPMorphingSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSharedModalAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSimScrollToIconTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSiriHardwareButtonEventsOnlyButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSiriHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSleepWakeHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSlideOverSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSlideOverTongueView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSnapshotDataProviderContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSnapshotTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSnapshotWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoftLockoutController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoftwareUpdatePasscodePolicyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoftwareUpdateService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoundController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoundPreferences
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSplashBoardController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSplashBoardLaunchRequestProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSplitViewSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpotlightDelegateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpotlightLegibilityProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpotlightMultiplexingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpotlightTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpringloadingMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpuriousScreenUndimmingAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionContextPersistence
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionToLockOut
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStateDumpService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarForcedHiddenTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarStateAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarStyleOverridesAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarStyleOverridesCoordinatorClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarTapManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSuspendedUnderLockManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSuspendedWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwipeMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAccessoryLayoutElement
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAnimationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAppSuggestionBannerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAppSuggestionContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAppSuggestionViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherCardUpdateTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDemoCommandsServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDemoFilteringController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDisplayItemRemovalResolutionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDisplayItemRemovalResolutionResultAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDisplayItemRemovalResolutionResults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDragMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherForcePressSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherKeyboardSuppressionMode
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModelRemovalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModelRemovalRequestAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModelRemovalResults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModifierEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherPresentationInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherResizeGrabberLayoutAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherScrollViewAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherShelfView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherShelfViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherSnapshotImageView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherToAppTransitionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherWallpaperPageContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSyncController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSynchronizeCloudCriticalDataOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemAnimationDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemGestureMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemGestureUsageMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemHapticsPreferencesMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemNotesInteractionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemNotesManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemNotesPresentationRequestServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemPointerInteractionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemServiceServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemStatusBatteryDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemStatusWifiDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTapAppLayoutSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTapToWakeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTelephonyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTestAutomationService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTestRecipeRegistrar
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTestableAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBThermalController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTimerEventSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTimerSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTodayIconListLayoutDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTodayKeepOnHomeScreenPlatterView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTodayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTodayViewSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBToggleClassroomPluginTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTopAffordanceButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTopAffordanceDotsView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTopAffordanceMenuInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTopAffordanceViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTouchHistory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTouchRegionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTouchTemplate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTouchTemplateGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTraitsArbitrationPipelineManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTraitsDockFollowsHomePolicySpecifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTraitsHomeFollowsSwitcherPolicySpecifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientActiveInterfaceOrientationRequester
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayBlockTransitionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDefaultTransitionContextProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissAllToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissAllWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayPresentWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientUIInteractionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransitionSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransitionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransitionSwitcherModifierRemovalContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIAnimationControllerAnimator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIAnimationPropertyAnimator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIBlockAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIImageDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUISettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUISwitcherAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIWorkspaceAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUniversalControlServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUnlockedAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUpdateLayoutSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserAlertNotificationSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserNotificationAlert
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserNotificationCenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserSessionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVODController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBViewMorphAnimator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBViewMorphAnimatorContentBlackCurtainView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBViewMorphAnimatorContentClippingView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBViewSnapshotProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVoiceCommandButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVoiceControlController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVoiceDisabledBundles
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeButtonEventMapper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeControl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWakeToInCallWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWalletNotificationSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWalletPreArmController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperPreviewSnapshotCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperStyleRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWebApplication
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWebClipService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWiFiManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWidgetController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWidgetLaunchStatsTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWidgetMetricsServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowDragMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowHideState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowHidingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowScene
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowSceneDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowSelfHostWrapper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWipeSnapshotManifestTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceApplicationSceneTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceEntityRemovalContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceKeyboardFocusController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransientOverlay
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransientOverlayTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBZStackAuditor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBZStackAuditorParticipantRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBZStackResolverTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBZionUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBZoomView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBiCloudPasscodeRequirementLockoutController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SpringBoard
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_UIGestureRecognizerTransformAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_UIGestureRecognizerTransformAnalyzerInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBAppContainerStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBAppSwitcherSnapshotCacheKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBAppSwitcherSnapshotImageCacheRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBApplicationLaunchAlertInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBCoverSheetSpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBDashBoardHostedAppStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBDeviceApplicationSceneStatusBarStateProviderObserverRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBDeviceApplicationSceneViewPlaceholderContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBDirectToAirPlayPolicyState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBExpertAppSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBFullScreenAppFloorSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHUDHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHUDModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHomeScreenFloorSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHomeScreenFolderDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHostedKeyboardViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBIdleTimerGlobalBoolSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBIdleTimerGlobalNumericSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBIdleTimerGlobalSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBInCallPresentationRequestServerTarget
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBInCallProxySceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBKeyboardFocusPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBLoadApplicationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBMainScreenActiveInterfaceOrientationWindowRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBModalViewControllerStackTransition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBMutableDirectToAirPlayPolicyState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBMutableKeyboardFocusPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBProximityTouchHandlingView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBProximityTouchHandlingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBProximityTouchHandlingWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBRecentlyUsedSceneIdentityCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBRemoteAlertHandleServerTarget
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBSUICFUserNotificationContentHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBScreenshotPersistenceCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBStatusBarChanges
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBStatusBarLocalDataOverridesWrapper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBStatusBarTapApplicationDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBStatusBarTapHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBTestRecipeDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBTestRecipeSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBTodaySpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBTransientOverlayPresentedEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBUIAnimationControllerCoordinatingChildRelationship
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBWallpaperWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NCUserAlertActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NCUserAlertDefaultActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NCUserAlertDismissActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAVSystemControllerCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAWDMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAWDMetricData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAccessibilityHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAccessibilityMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAccessibilityWindowHostingControllerServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAccountStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActionHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivateApplicationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivateHomeButtonSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivateReachabilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivityAttribution
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAdvanceDateOverrideTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAirplaneModeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemPresentation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemsController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemsObjectQueue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertLayoutPresentationVerifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnalyticsStateMachineEdge
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnalyticsStateMachineEventHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnimationUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnimationWrapperHostRequester
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnyTopAffordanceInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppClipOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppClipOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppClipPlaceholderWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppExitedWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppLayout
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppLibraryMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppPlatterDragPreview
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppStatusBarAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppStatusBarContentAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppStatusBarSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppStatusBarSettingsAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSuggestionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherOrbGestureAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherOrbGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherPageShadowView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherPageView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherReusableSnapshotView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherScrollView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherServiceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSnapshotCacheEntry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSnapshotImageCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSnapshotLockoutViewControllerProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSnapshotViewState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSystemService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppToAppWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppVisibilityPreferences
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplication
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationAutoLaunchService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationHarmonyService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchAlertEvaluatorFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchAlertService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchImageParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLayoutGestureMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLibraryObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationMultiwindowService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationPlaceholder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationPlaceholderController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationPlaceholderProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationProcessState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationRestrictionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneEntityDestructionIntent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneHandleRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneSpecification
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneUpdateTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneViewStatusBarDescriptor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutPolluterRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutReportRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationStateServiceDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationStateServiceSingleton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSupportServiceDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSupportServiceRequestContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSupportServiceSingleton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationTestingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationUserQuitMonitorServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBArcSwipeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAsymmetricalCornerRadiusWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAsynchronousRenderingAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAttentionAwarenessClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAttentionAwarenessSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAutoPIPWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAutoUnlockComposableRule
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAvocadoDebuggingController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBackBoardServicesInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBackgroundFetchExternalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBackgroundFetchTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBackgroundMultitaskingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBacklightController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBacklightIdleTimer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBacklightStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBadgeCountRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBannerGestureRecognizerPriorityAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBannerManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBannerWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBarSwipeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBarSwipeAffordanceView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBarSwipeAffordanceViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBaseStartupTransition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBestAppSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBiometricAuthenticationPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBiometricEventLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBiometricsService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBlockWorkspaceQueueTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBluetoothAccessoryBatteryMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBluetoothController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBookmarkIcon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBreadcrumbActionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBreadcrumbMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBrightnessControl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBulletinLocalObserverGateway
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBulletinSpokenObserverGateway
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBButtonConsumerClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBButtonConsumerRegistration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCalendarApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraApplication
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraHardwareButtonDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraHardwareButtonSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraHardwareButtonStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCarDoNotDisturbController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCarDoNotDisturbExitConfirmationAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCardItemsController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCenterWindowSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChainableModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChainableModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChainableModifierEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChainableModifierMethodCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChronoApplicationProcessStateObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChronoHomeScreenUsageObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClawGestureLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClickGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClockApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClockApplicationIconImageView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCombinationHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCombinationHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCommandTabController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCommandTabViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCommunicationPolicyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBConferenceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterRingerSwitchController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterSystemAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoplanarSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetBiometricResourceObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetBlurView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetIconFlyInAnimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetPanelBackgroundContainerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetParallaxContainerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetPositionView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetPrimarySlidingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetSceneManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetSlidingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetSpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetSystemGesturesDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCrossfadeDosidoSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCursiveTextView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDaemonContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDaemonHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDaemonRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardAnalyticsEmitter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardApplicationInformer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardApplicationLauncher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardBiometricUnlockController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardCameraPageViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardEmergencyDialerController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardHostedAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardIdleTimerController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardIdleTimerProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardLegibilityProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardLockScreenEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardMesaUnlockBehavior
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardMesaUnlockBehaviorConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardModalHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardModalHomeAffordanceControllerClientBridge
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardNotificationPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardOrientationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardPearlUnlockBehavior
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardPlatterHomeGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardPluginController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardPolicyBasedBehaviorProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardSetupController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardSetupView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardSetupViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardStatusBarController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardThermalStatusProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardViewExternalControllerBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardWallpaperViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDataRecoveryController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeckSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeckSwitcherPanGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeckSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeckToFullScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultAuthenticationPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultCoverSheetContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultIconModelStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultImplementationsSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultLaunchSnapshotTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultProximityBacklightPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultTraitsParticipantDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDelayedPressInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeleteNonAppIconAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDesiredIconStateMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeveloperBuildExpirationTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationAppClipOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationRemoteTransientOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneClassicAccessoryView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationScenePlaceholderContentContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneStatusBarBreadcrumbProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneStatusBarStateProvider_Base
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneViewPlaceholderContentViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationScreenTimeLockoutViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceOrientationUpdateDeferralAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceOrientationUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceUnlockAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDirectToAirPlayController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDirectToAirPlayTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDisableActiveInterfaceOrientationChangeAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDisabledIdleTimer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDismissEmergencyCallRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDismissOverlaysAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDismissSiriSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDismissSiriSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDisplayBrightnessController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDisplayItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDoNotDisturbMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDockInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDockSuggestionsMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDosidoScaleAnimationSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDosidoSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDoubleClickSleepWakeHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDragAndDropGestureSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDragAndDropWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDraggingSystemManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDropShadowSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBElasticHUDDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBElasticHUDSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBElasticHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBElasticSliderMaterialWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBElasticSliderView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBElasticVolumeViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEmitSBEventSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEmptyWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDosidoDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDosidoSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDosidoSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDosidoSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalFloatingDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalFloatingSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalFloatingSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalFloatingSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalMedusaDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalMedusaSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalMedusaSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalMedusaSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEventObserverRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExpanseBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalDisplayManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalGlobalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalNotesDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalSoundsDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalWifiDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMotionAlarmController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMotionGestureController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFaceContactExpectationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFaceIDCoachingConditionRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFailingSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFailureNotifyingTapGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFakeiTunesRestoreTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFallbackSnapshotDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFixedLayoutModeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingApplicationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingDockBehaviorAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingDockController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingDockWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingSwitcherSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidDismissalState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidScrunchGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGesture
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGestureExclusionCompositeShape
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGestureExclusionTrapezoid
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherIconImageContainerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherIconOverlayView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherItemContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherItemContainerHeaderView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherItemContainerLayer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherLayoutContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherPageContentViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherPanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherSpaceOverlayAccessoryView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherSpaceTitleItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherSpaceTitleItemController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherSpaceUnderlayAccessoryView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherTitledButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherTouchPassThroughScrollView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFocusModesHomeScreenSettingsManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFocusModesHomeScreenSettingsServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFolderStatsQueryableMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenAlwaysLiveLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenAppLayoutSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenFluidSwitcherRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenLiveContentOverlayContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenOcclusionTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenSwitcherLiveContentOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenSwitcherSceneLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenToHomeCenterZoomDownSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenToHomeIconZoomSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenToHomePIPSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenToHomeSlideOverSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullscreenZoomView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGestureRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGestureSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGestureSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGrabberTongue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGreenController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGuidedAccessListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBAcceleratedSinglePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBDoublePressDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBDoublePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBDoubleTapUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBInitialPressDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBInitialPressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBLongPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBSinglePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBTriplePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHIDButtonStateArbiter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHIDInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHIDUILockAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHapticSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareButtonActionList
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareButtonGestureParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareButtonGestureParametersProviderBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareButtonService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareButtonZStackClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHarmonyController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHarmonySettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHeartbeatMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHeartbeatMetricPersistence
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHideAppIconAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHistorianSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHitTestExtendedView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeButtonPressMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeConfigurationMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureArbiter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureArbiterRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureExclusionTrapezoidSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureFinalDestinationSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGesturePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureParticipant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureToHomeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureToSwitcherSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureToZoomDownSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGrabberRevealGesturesManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGrabberRotationView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGrabberView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeHardwareButtonGestureRecognizerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenBackdropDarkTintView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenBackdropView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenBackdropViewBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenOverlayController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenPreviewView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenSpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeToDeckSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeToSwitcherSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconDeleteMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconDragPlatterWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconFlockingMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconLaunchContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconLaunchMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconListScrollingRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconOverlayVisibilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconPageManagementMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconRelayoutRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconStateArchiver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconViewVisibilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconVisibilityService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerAggregateClientConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerBehavior
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerConfigurationDisablesTimerSetting
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerCoordinatorHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerDescriptor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerDescriptorFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerGlobalCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerGlobalStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIgnoredForAutorotationSecureWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInAppStatusBarHiddenAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallBannerPresentableViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallBannerSceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallPresentationRequestServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallPresentationSceneUpdateContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallPresentationScreenSharingIcon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallPresentationSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallSceneUpdateWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallTransientOverlayPresentationContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallTransientOverlayPresentationWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIndirectPanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInitialRestartState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInitialSetupSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInjectVelocitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInsecureDrawingAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInsertionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInteractionAfterWakeMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInternalClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInvalidateAdjustedAppLayoutsSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIsolatedSceneOrientationFollowingWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIsolatedSceneOrientationFollowingWrapperViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKeyboardBrightnessController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKeyboardDismissalManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKeyboardHomeAffordanceAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKeyboardHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKeyboardSuppressionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutElement
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutElementViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutStateTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutStateTransitionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLibraryViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLiftToWakeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLiftToWakeManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLiftToWakeStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLiquidDetectionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenActionContextFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenActionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenAutoUnlockAggregateRule
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenBiometricAuthenticationCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenContentAssertionTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenDisableAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenDisabledAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenOrientationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenPluginManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenPreviewView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenUnlockRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenViewControllerBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockStateAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockdownManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockedModalAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockedPointerManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLogWindowTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLogoutProgressTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLogoutProgressView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLongPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLowBatteryLogTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLowEndHardwareSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLowPowerAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLowPowerFindMyAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayInterfaceOrientationAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayLayoutState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayLayoutStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayRootWindowScenePresentationBinder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneLayoutStatusBarView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneLayoutViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneLayoutWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySystemGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayWindowLayoutStrategy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayWorkspaceAppInteractionEventSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainScreenActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainStatusBarContentAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainSwitcherTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainSwitcherWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspaceApplicationSceneLayoutElementViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspaceLayoutStateContingencyPlan
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspaceTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMatchMoveToIconViewSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMediaController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusa1oSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaApplicationShortcutService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaAppsTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaConfigurationUsageMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaDecoratedDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaDragAndDropMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaHostedKeyboardWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaHostedKeyboardWindowLevelAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaOrientationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModalAlertPresentationCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModalAlertPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModalUIFluidDismissGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModalUIFluidDismissGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModalViewControllerStack
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModelessSyncController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModifierCacheCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModifierCacheSelectorList
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMorphToPIPChangedSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMousePointerManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMoveFloatingApplicationGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMoveGestureFloatingSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableAppStatusBarSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableDeviceApplicationScenePlaceholderContentContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableHardwareButtonGestureParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableInitialRestartState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableSwitcherAnimationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableSwitcherScrollViewAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableSwitcherTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCAlertingController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCNotificationDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCNotificationDispatcherDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCScreenController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCSoundController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNetworkReselectionAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNetworkReselectionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNewsstandMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotchedStatusBarProximityBacklightPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotchedStatusBarProximityBacklightPolicyEnablementCondition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationBannerDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationCarPlayDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationLongLookBannerPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationPresentableViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotifyIconWillZoomDownSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNubView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBOmnibusAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBOrientationAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBOrientationLockManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBOverrideInterfaceOrientationSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPBAppLayout
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPBAppLayoutList
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPBDisplayItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPAnalyticsAssistant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPAnalyticsSessionSummaryAssistant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPAnalyticsSourceSummaryAssistant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPBehaviorOverrideAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPContainerViewControllerRootView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPContentViewLayoutContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPContentViewLayoutMetrics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPContentViewLayoutMetricsSizePolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPContentViewLayoutSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPContentViewLayoutSizePreferences
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPControllerCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPCoordinatorAssertionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPDefaultPositionHyperregionComposer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPEnvironmentDependentOverrideAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPFadeInOutSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPFluidTransitionsSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPInteractionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPInteractionSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPInterruptionAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPInterruptionDebouncingTimer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPMorphAnimatorController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPMorphAnimatorDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPPegasusAdapter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPPegasusContainerAdapter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPPinchGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPPositionHyperregionLibrary
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPRestoreToFullScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPRotationGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPSettingsDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPShadowSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPSizingSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPStashAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPStashMaterialSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPStashVisualSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPWindowRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPanSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPasscodeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPasscodeEntryTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPearlInterlockObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPearlUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPerformTransitionSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPhoneAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPlatformController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPlatterHomeGestureContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPlatterHomeGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPocketStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPolygon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPortalView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPowerDownViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPowerLogMetricsAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPreemptAnimationSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPresentFloatingDockTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPresentSessionUIRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressCollector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressGestureStateInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressPrecedenceArbiter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceMetricData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceValidator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressTuple
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPreviousWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPriorityDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProactiveHomeScreenSuggestionProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProactiveHomeScreenUsageObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProactiveLibraryCategoryMapProviderSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProcessSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPrototypeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPrototypeDumpingGround
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProximityBacklightPolicyFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProximitySensorManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProximitySettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilitySettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRebootRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecalibrateProximitySensorHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecentAppLayouts
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecentAppLayoutsPersister
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecycledViewsContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReloadWallpaperTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteAlertHandleLocalClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteAlertHandleServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlayHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlaySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlaySessionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRenderOverlayRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRequestFolderSnapshotsSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRestartManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRestartManagerWorkspaceDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReusableSnapshotItemContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReverseCountedSemaphore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRingerControl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRingerHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRingerPillView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRingerVolumeSliderView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRootSceneWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRootSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRunWallpaperMigrationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSOSClawGestureObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSOSEventHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSOSLockGestureObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneBackgroundedStatusAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneDataStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneDisconnectionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutAnimationWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutElementAnimationWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutFrameCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutOrientationCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutSynchronizeTransitionTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutTransitionAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutWhitePointAdaptationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneManagerCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneManagerReference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneReadySwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneSnapshotDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneStatusBarManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneViewStatusBarAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneWatchdogProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScheduledAlarmObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenFlash
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenTimeTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenWakeAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenshotManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenshotManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScrollSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScrollToAppLayoutSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScrollToTopSceneProxyView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScrollingSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureAppManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureMainScreenActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSensorActivityAttribution
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSensorActivityDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSeparatorView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSetupManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSetupPIPMorphingSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSharedModalAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSimScrollToIconTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSiriHardwareButtonEventsOnlyButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSiriHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSleepWakeHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSlideOverSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSlideOverTongueView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSnapshotDataProviderContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSnapshotTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSnapshotWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoftLockoutController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoftwareUpdatePasscodePolicyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoftwareUpdateService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoundController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoundPreferences
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSplashBoardController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSplashBoardLaunchRequestProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSplitViewSessionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpotlightDelegateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpotlightLegibilityProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpotlightMultiplexingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpotlightTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpringloadingMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpuriousScreenUndimmingAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionContextPersistence
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToLockOut
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStateDumpService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarForcedHiddenTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarStateAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarStyleOverridesAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarStyleOverridesCoordinatorClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarTapManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSuspendedUnderLockManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSuspendedWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwipeMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAccessoryLayoutElement
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAnimationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAppSuggestionBannerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAppSuggestionContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAppSuggestionViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherCardUpdateTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDemoCommandsServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDemoFilteringController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDisplayItemRemovalResolutionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDisplayItemRemovalResolutionResultAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDisplayItemRemovalResolutionResults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDragMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherForcePressSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherKeyboardSuppressionMode
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModelRemovalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModelRemovalRequestAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModelRemovalResults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherPresentationInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherResizeGrabberLayoutAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherScrollViewAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherShelfView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherShelfViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherSnapshotImageView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherToAppTransitionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherWallpaperPageContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSyncController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSynchronizeCloudCriticalDataOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemAnimationDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemGestureMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemGestureUsageMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemHapticsPreferencesMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemNotesInteractionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemNotesManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemNotesPresentationRequestServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemPointerInteractionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemServiceServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemStatusBatteryDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemStatusWifiDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTapAppLayoutSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTapToWakeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTelephonyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTestAutomationService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTestRecipeRegistrar
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTestableAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBThermalController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTimerEventSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTimerSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTodayIconListLayoutDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTodayKeepOnHomeScreenPlatterView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTodayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTodayViewSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBToggleClassroomPluginTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTopAffordanceButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTopAffordanceDotsView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTopAffordanceMenuInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTopAffordanceViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTouchHistory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTouchRegionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTouchTemplate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTouchTemplateGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTraitsArbitrationPipelineManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTraitsDockFollowsHomePolicySpecifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTraitsHomeFollowsSwitcherPolicySpecifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientActiveInterfaceOrientationRequester
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayBlockTransitionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDefaultTransitionContextProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissAllToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissAllWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayPresentWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientUIInteractionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransitionSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransitionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransitionSwitcherModifierRemovalContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIAnimationControllerAnimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIAnimationPropertyAnimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIBlockAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIImageDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUISettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUISwitcherAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIWorkspaceAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUniversalControlServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUnlockedAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUpdateLayoutSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserAlertNotificationSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserNotificationAlert
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserNotificationCenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserSessionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVODController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBViewMorphAnimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBViewMorphAnimatorContentBlackCurtainView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBViewMorphAnimatorContentClippingView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBViewSnapshotProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVoiceCommandButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVoiceControlController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVoiceDisabledBundles
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeButtonEventMapper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeControl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWakeToInCallWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWalletNotificationSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWalletPreArmController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperPreviewSnapshotCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperStyleRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWebApplication
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWebClipService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWiFiManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWidgetController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWidgetLaunchStatsTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWidgetMetricsServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowDragMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowHideState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowHidingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowScene
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowSceneDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowSelfHostWrapper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWipeSnapshotManifestTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceApplicationSceneTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceEntityRemovalContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceKeyboardFocusController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransientOverlay
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransientOverlayTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBZStackAuditor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBZStackAuditorParticipantRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBZStackResolverTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBZionUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBZoomView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBiCloudPasscodeRequirementLockoutController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SpringBoard
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_UIGestureRecognizerTransformAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_UIGestureRecognizerTransformAnalyzerInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBAppContainerStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBAppSwitcherSnapshotCacheKey
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBAppSwitcherSnapshotImageCacheRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBApplicationLaunchAlertInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBCoverSheetSpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBDashBoardHostedAppStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBDeviceApplicationSceneStatusBarStateProviderObserverRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBDeviceApplicationSceneViewPlaceholderContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBDirectToAirPlayPolicyState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBExpertAppSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBFullScreenAppFloorSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHUDHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHUDModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHomeScreenFloorSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHomeScreenFolderDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHostedKeyboardViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBIdleTimerGlobalBoolSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBIdleTimerGlobalNumericSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBIdleTimerGlobalSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBInCallPresentationRequestServerTarget
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBInCallProxySceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBKeyboardFocusPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBLoadApplicationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBMainScreenActiveInterfaceOrientationWindowRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBModalViewControllerStackTransition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBMutableDirectToAirPlayPolicyState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBMutableKeyboardFocusPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBProximityTouchHandlingView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBProximityTouchHandlingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBProximityTouchHandlingWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBRecentlyUsedSceneIdentityCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBRemoteAlertHandleServerTarget
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBSUICFUserNotificationContentHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBScreenshotPersistenceCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBStatusBarChanges
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBStatusBarLocalDataOverridesWrapper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBStatusBarTapApplicationDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBStatusBarTapHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBTestRecipeDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBTestRecipeSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBTodaySpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBTransientOverlayPresentedEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBUIAnimationControllerCoordinatingChildRelationship
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBWallpaperWindow
|| __TEXT.__const _SBAppPlatterDragPreviewCancelScale
|| __TEXT.__const _SBAppPlatterDragPreviewLiftScale
|| __TEXT.__const _SBApplicationShortcutStoreMaxShortcuts
|| __TEXT.__const _SBClassicUtilitiesJailedAppCornerRadius
|| __TEXT.__const _SBClassicUtilitiesRotationButtonDistanceFromZoomButton
|| __TEXT.__const _SBClassicUtilitiesZoomButtonDistanceFromEdge
|| __TEXT.__const _SBClassicUtilitiesZoomButtonMinimumAppContentPadding
|| __TEXT.__const _SBClassicUtilitiesZoomButtonSize
|| __TEXT.__const _SBHUDAutoDismissDelayForever
|| __TEXT.__const _SBHUDAutoDismissDelayLong
|| __TEXT.__const _SBHUDAutoDismissDelayNormal
|| __TEXT.__const _SBInvalidPoint
|| __TEXT.__const _SBInvalidSize
|| __TEXT.__const _SBLegacyListPlatterViewCornerRadius
|| __TEXT.__const _SBLockScreenOverlayPluginPriority
|| __TEXT.__const _SBNowPlayingPluginTimeoutInterval
|| __TEXT.__const _SBPIPFadeInOutParametersNone
|| __TEXT.__const _SBPressGestureStateUnlimitedDurationValue
|| __TEXT.__const _SBSlideOverTongueHeight
|| __TEXT.__const _SBTodayFavoriteInstructionLabelInset
|| __TEXT.__const _SBTodayHeaderPlatterMargin
|| __TEXT.__const _SBTopAffordanceButtonDiameterCollapsed
|| __TEXT.__const _SBTopAffordanceButtonDiameterExpanded
|| __TEXT.__const _SBTopAffordanceDotsViewSpacingCollapsed
|| __TEXT.__const _SBTopAffordanceDotsViewSpacingExpanded
|| __TEXT.__const _SBTopAffordanceTransientMessagePresentationDuration
|| __TEXT.__const _SBWhitePointAdaptivityStyleUnknown
|| __TEXT.__const _SpringBoardVersionNumber
|| __TEXT.__const _SpringBoardVersionString
|| __TEXT.__const _kHomeGestureVelocityAveragingDuration
|| __TEXT.__const _kSBDataPlanActivationPromptForDisableLimit
|| __TEXT.__const _kSBHUDControllerDefaultTransitionMultiplier
|| __TEXT.__const _kVelocityAveragingDuration
|| __TEXT.__text _CCUICAPackageDescriptionForSBBrightnessRouteType
|| __TEXT.__text _CSCoverSheetTransitionSettingsForTransitionType
|| __TEXT.__text _NSLocalizedStringFromSBBrightnessRouteType
|| __TEXT.__text _NSStringFromAnalyticsLayoutLocation
|| __TEXT.__text _NSStringFromDodgingModifierEventResponseType
|| __TEXT.__text _NSStringFromSBAppLibraryLogStep
|| __TEXT.__text _NSStringFromSBAppViewControllerMode
|| __TEXT.__text _NSStringFromSBBlurViewCoordinatorState
|| __TEXT.__text _NSStringFromSBBrightnessRouteType
|| __TEXT.__text _NSStringFromSBElasticVolumeState
|| __TEXT.__text _NSStringFromSBExtensionType
|| __TEXT.__text _NSStringFromSBHomeGestureFinalDestination
|| __TEXT.__text _NSStringFromSBKeyboardFocusAdviceAcceptancePolicy
|| __TEXT.__text _NSStringFromSBLiftToWakeTransition
|| __TEXT.__text _NSStringFromSBMediaEventSource
|| __TEXT.__text _NSStringFromSBReachabilityActivationContext
|| __TEXT.__text _NSStringFromSBRestartType
|| __TEXT.__text _NSStringFromSBSwitcherModifierEventResponseType
|| __TEXT.__text _NSStringFromSBSwitcherModifierEventType
|| __TEXT.__text _NSStringFromSBUIControllerRequireContentOptions
|| __TEXT.__text _NSStringFromSBVolumeMode
|| __TEXT.__text _NSStringFromSBWindowLevelRange
|| __TEXT.__text _NSStringFromSBWorkspaceSceneLayoutTransitionOptions
|| __TEXT.__text _NSStringFromStartupTransitionDestination
|| __TEXT.__text _NSStringFromWalletPrearmFailureRecognitionReason
|| __TEXT.__text _PETEventPropertyForBoolValues
|| __TEXT.__text _PETEventPropertyForIconLocation
|| __TEXT.__text _PETEventPropertyForLayoutLocations
|| __TEXT.__text _PETStringValueForIconLocation
|| __TEXT.__text _SBAdaptationModeForWhitePointAdaptivityStyle
|| __TEXT.__text _SBAddStatusBarStyleOverridesAssertionByStyleOverride
|| __TEXT.__text _SBAnalyticsLayoutLocationForDisplayLayoutElements
|| __TEXT.__text _SBAnalyticsLayoutLocationFromString
|| __TEXT.__text _SBAnalyticsNameForSystemGestureType
|| __TEXT.__text _SBAnimateBacklightToFactor
|| __TEXT.__text _SBAppLayoutCenterConfigurationFromMainDisplayLayoutStateCenterConfiguration
|| __TEXT.__text _SBAppLayoutConfigurationFromMainDisplayLayoutStateSpaceConfiguration
|| __TEXT.__text _SBAppPlatterDragPreviewModeDescription
|| __TEXT.__text _SBAppStatusBarLayoutLayerDescription
|| __TEXT.__text _SBAppStatusBarSettingsLevelDescription
|| __TEXT.__text _SBAppendChainableModifierResponse
|| __TEXT.__text _SBAppendSwitcherModifierResponse
|| __TEXT.__text _SBApplicationClassicModeDescription
|| __TEXT.__text _SBApplicationClassicModeExpectsRoundedCorners
|| __TEXT.__text _SBApplicationClassicModeForString
|| __TEXT.__text _SBApplicationClassicModeRepresentsPad
|| __TEXT.__text _SBApplicationClassicModeRepresentsPhone
|| __TEXT.__text _SBApplicationClassicModeWantsSafeAreaInsets
|| __TEXT.__text _SBApplicationDropSessionErrorCreate
|| __TEXT.__text _SBApplicationDropSessionGetDragItem
|| __TEXT.__text _SBApplicationSceneEntityDestructionMakeIntent
|| __TEXT.__text _SBApplicationSceneEntityDestructionMakeIntentFromServicesRequest
|| __TEXT.__text _SBBaseCachesPathForApplication
|| __TEXT.__text _SBBaselineScreenDPIForCurrentIdiom
|| __TEXT.__text _SBBaselineScreenDPIForIdiom
|| __TEXT.__text _SBBlankScreen
|| __TEXT.__text _SBBrightnessRouteTypeIsValid
|| __TEXT.__text _SBCallStateInCall
|| __TEXT.__text _SBCenterConfigurationIsValid
|| __TEXT.__text _SBChainableModifierMethodCacheContextTrampolineForMethod
|| __TEXT.__text _SBChainableModifierMethodCacheQueryTrampolineForMethod
|| __TEXT.__text _SBClassicUtilitiesInsetAndTranslateLayerForPresentationWithHomeAffordance
|| __TEXT.__text _SBClassicUtilitiesScaleFactorForPhoneAppZoomedIn
|| __TEXT.__text _SBClassicUtilitiesScaleFactorForPresentationWithHomeAffordance
|| __TEXT.__text _SBClassicUtilitiesStatusBarInsetsForPadOnRoundedPad
|| __TEXT.__text _SBCommonInitialize
|| __TEXT.__text _SBCornerFingerGestureUpdateFailureRequirements
|| __TEXT.__text _SBCornerMaskForElementInLayoutState
|| __TEXT.__text _SBCoverSheetTransitionTypeForCurrentState
|| __TEXT.__text _SBCreateMainScreenSnapshot
|| __TEXT.__text _SBCreateMainScreenSnapshotBelowWindow
|| __TEXT.__text _SBCreateMainScreenSnapshotBelowWindowWithOrientation
|| __TEXT.__text _SBCreateResourceImageWithoutCaching
|| __TEXT.__text _SBCreateScaledIOSurface
|| __TEXT.__text _SBCreateUIImageFromIOSurfaceResizingIfNecessary
|| __TEXT.__text _SBDashBoardSceneHandleEqualToSceneHandle
|| __TEXT.__text _SBDefaultBackgroundColorForAppScene
|| __TEXT.__text _SBDefaultCornerRadiusConfigurationForElementInLayoutState
|| __TEXT.__text _SBDefaultStatusBarStyle
|| __TEXT.__text _SBDeviceHasRoundedScreenCorners
|| __TEXT.__text _SBDeviceUnlockAggdKeyForPrefixAndOrientation
|| __TEXT.__text _SBDeviceUnlockKeyboardAggdKeyForPrefix
|| __TEXT.__text _SBDeviceUnlockSmartCoverAggdKeyForPrefix
|| __TEXT.__text _SBDismissSpotlight
|| __TEXT.__text _SBDisplayItemTypeFromLegacyType
|| __TEXT.__text _SBDodgingAxisMaskContainsAxis
|| __TEXT.__text _SBDodgingAxisMaskForAxis
|| __TEXT.__text _SBDragPreviewShadowParametersEqualToShadowParameters
|| __TEXT.__text _SBEarlierDate
|| __TEXT.__text _SBEffectiveAppLayoutConfigurationForInterfaceOrientation
|| __TEXT.__text _SBEffectiveSpaceConfigurationForInterfaceOrientation
|| __TEXT.__text _SBEnsureDirectoryExistsAtPath
|| __TEXT.__text _SBEntityRemovalDefaultFluidAnimationSettings
|| __TEXT.__text _SBEnumerateAndCullDeviceApplicationSceneStatusBarStateObservers
|| __TEXT.__text _SBEqualBools
|| __TEXT.__text _SBEqualObjects
|| __TEXT.__text _SBEqualStrings
|| __TEXT.__text _SBFloatingConfigurationForMovingFloatingApplication
|| __TEXT.__text _SBFloatingConfigurationIsValid
|| __TEXT.__text _SBFloatingDockBehaviorLevelDescription
|| __TEXT.__text _SBFloatingDockWindowLevelPriorityDescription
|| __TEXT.__text _SBGestureModifierPhaseForGestureState
|| __TEXT.__text _SBGetBacklightFactor
|| __TEXT.__text _SBGetLastBacklightFactor
|| __TEXT.__text _SBGlyphStateValueTransformerForBrightnessRouteType
|| __TEXT.__text _SBGraphicsQuality
|| __TEXT.__text _SBGuidedAccessIsActive
|| __TEXT.__text _SBGuidedAccessPrepare
|| __TEXT.__text _SBHBundle
|| __TEXT.__text _SBHHomeScreenMaterialViewBackdropScaleAdjustmentHandlerForCurrentDevice
|| __TEXT.__text _SBHIDIsAccessibilitySenderID
|| __TEXT.__text _SBHRunLoopPerformAfterCACommit
|| __TEXT.__text _SBHScreenBounds
|| __TEXT.__text _SBHasOngoingSignificantAnimation
|| __TEXT.__text _SBHomeAffordanceSuppressionToUse
|| __TEXT.__text _SBHomeDirectory
|| __TEXT.__text _SBHomeGestureEnabled
|| __TEXT.__text _SBHomeGestureOwnershipToUse
|| __TEXT.__text _SBHomeGestureParticipantIdentifierFromSBFZStackParticipantIdentifier
|| __TEXT.__text _SBIdleTimerIntervalToNSString
|| __TEXT.__text _SBImageTagForOrientation
|| __TEXT.__text _SBInteractiveScreenshotCreateImageFromInterfaceOrientedView
|| __TEXT.__text _SBInterfaceOrientationOfTouchedEdgeForHomeGestureRecognizer
|| __TEXT.__text _SBInvalidationDodgingOptionsContainsOption
|| __TEXT.__text _SBInvertEdgeInsets
|| __TEXT.__text _SBIsBeingDebugged
|| __TEXT.__text _SBIsHomeGestureEnabledByDefault
|| __TEXT.__text _SBIsMainDisplaySystemGestureAllowed
|| __TEXT.__text _SBIsSymbolicLinkAtPath
|| __TEXT.__text _SBIsSystemNotesEnabled
|| __TEXT.__text _SBIsSystemNotesSupported
|| __TEXT.__text _SBKeyDoubleValueLog
|| __TEXT.__text _SBKeyValueLog
|| __TEXT.__text _SBLaterDate
|| __TEXT.__text _SBLayoutAttributesDescription
|| __TEXT.__text _SBLayoutRoleDescription
|| __TEXT.__text _SBLayoutRoleEnumerateAppLayoutRoles
|| __TEXT.__text _SBLayoutRoleEnumerateValidRoles
|| __TEXT.__text _SBLayoutRoleForIdentifier
|| __TEXT.__text _SBLayoutRoleIdentifierForRole
|| __TEXT.__text _SBLayoutRoleIsValid
|| __TEXT.__text _SBLayoutRoleMaskContainsRole
|| __TEXT.__text _SBLayoutRoleMaskDescription
|| __TEXT.__text _SBLayoutRoleMaskForRole
|| __TEXT.__text _SBLegacyDisplayItemTypeFromType
|| __TEXT.__text _SBLibraryIsVisible
|| __TEXT.__text _SBLockScreenChargePercentageLabelForBattery
|| __TEXT.__text _SBLockScreenSimpleChargePercentageLabelForBattery
|| __TEXT.__text _SBLogAVSystemControllerCache
|| __TEXT.__text _SBLogAccessory
|| __TEXT.__text _SBLogAirPlay
|| __TEXT.__text _SBLogAlarm
|| __TEXT.__text _SBLogAlertItemStack
|| __TEXT.__text _SBLogAlertItems
|| __TEXT.__text _SBLogAppLibrary
|| __TEXT.__text _SBLogAppPlaceholder
|| __TEXT.__text _SBLogAppResize
|| __TEXT.__text _SBLogAppStatusBars
|| __TEXT.__text _SBLogAppSwitcher
|| __TEXT.__text _SBLogAppSwitcherDrag
|| __TEXT.__text _SBLogAudioControl
|| __TEXT.__text _SBLogBacklight
|| __TEXT.__text _SBLogBanner
|| __TEXT.__text _SBLogBrightnessHUD
|| __TEXT.__text _SBLogButtonsCamera
|| __TEXT.__text _SBLogButtonsCombo
|| __TEXT.__text _SBLogButtonsHome
|| __TEXT.__text _SBLogButtonsInteraction
|| __TEXT.__text _SBLogButtonsLock
|| __TEXT.__text _SBLogButtonsVolume
|| __TEXT.__text _SBLogCharging
|| __TEXT.__text _SBLogChrono
|| __TEXT.__text _SBLogClassicMode
|| __TEXT.__text _SBLogContinuity
|| __TEXT.__text _SBLogDataReset
|| __TEXT.__text _SBLogDock
|| __TEXT.__text _SBLogDodging
|| __TEXT.__text _SBLogElasticHUD
|| __TEXT.__text _SBLogGreen
|| __TEXT.__text _SBLogHIDKeyboardEvents
|| __TEXT.__text _SBLogHUD
|| __TEXT.__text _SBLogHomeAffordance
|| __TEXT.__text _SBLogIcon
|| __TEXT.__text _SBLogIconController
|| __TEXT.__text _SBLogInteractiveScreenshot
|| __TEXT.__text _SBLogLiftToWake
|| __TEXT.__text _SBLogLockScreenHint
|| __TEXT.__text _SBLogPPT
|| __TEXT.__text _SBLogPointer
|| __TEXT.__text _SBLogProactiveAppLibrary
|| __TEXT.__text _SBLogProactiveHome
|| __TEXT.__text _SBLogProximitySensor
|| __TEXT.__text _SBLogRemoteAlert
|| __TEXT.__text _SBLogRingerHUD
|| __TEXT.__text _SBLogSceneResize
|| __TEXT.__text _SBLogScreenTime
|| __TEXT.__text _SBLogShelfLiveContent
|| __TEXT.__text _SBLogSmartCover
|| __TEXT.__text _SBLogSound
|| __TEXT.__text _SBLogSwitcherSnapshotCache
|| __TEXT.__text _SBLogSystemGesture
|| __TEXT.__text _SBLogSystemGestureAppSwitcher
|| __TEXT.__text _SBLogSystemGestureBannerDismiss
|| __TEXT.__text _SBLogSystemGestureControlCenter
|| __TEXT.__text _SBLogSystemGestureCoverSheet
|| __TEXT.__text _SBLogSystemGestureDetail
|| __TEXT.__text _SBLogSystemGestureHome
|| __TEXT.__text _SBLogSystemGestureScrunch
|| __TEXT.__text _SBLogSystemGestureSwitchApp
|| __TEXT.__text _SBLogTelemetrySignposts
|| __TEXT.__text _SBLogThermal
|| __TEXT.__text _SBLogTopAffordance
|| __TEXT.__text _SBLogUIController
|| __TEXT.__text _SBLogUserSession
|| __TEXT.__text _SBLogVolumeHUD
|| __TEXT.__text _SBLogWebClip
|| __TEXT.__text _SBLogWidgetDiscoverability
|| __TEXT.__text _SBLogWidgetIntent
|| __TEXT.__text _SBMTCenterWindowIsEnabled
|| __TEXT.__text _SBMTGlobeKeyboardShortcutsAreEnabled
|| __TEXT.__text _SBMTHijackSideSceneRequestToCenter
|| __TEXT.__text _SBMTKeyboardFocusIsEnabled
|| __TEXT.__text _SBMTSystemShellManagesKeyboardFocus
|| __TEXT.__text _SBMagicHysteresisValue
|| __TEXT.__text _SBMainDisplayLayoutStateCenterConfigurationFromAppLayoutCenterConfiguration
|| __TEXT.__text _SBMainDisplayLayoutStateFloatingConfigurationFromString
|| __TEXT.__text _SBMainDisplayLayoutStateFloatingConfigurationIsStashed
|| __TEXT.__text _SBMainDisplayLayoutStateFloatingConfigurationOnLeft
|| __TEXT.__text _SBMainDisplayLayoutStateFloatingConfigurationOnRight
|| __TEXT.__text _SBMainDisplayLayoutStateSpaceConfigurationFromAppLayoutConfiguration
|| __TEXT.__text _SBMainDisplayLayoutStateSpaceConfigurationFromString
|| __TEXT.__text _SBMainScreenDPI
|| __TEXT.__text _SBMainScreenPointsPerMillimeter
|| __TEXT.__text _SBMainScreenSnapshotViewWithRect
|| __TEXT.__text _SBMainWorkspaceMapInternalTransitionSourceToExternalTransitionSource
|| __TEXT.__text _SBMainWorkspaceTransitionSourceDescription
|| __TEXT.__text _SBMainWorkspaceTransitionSourceIsUserEventDriven
|| __TEXT.__text _SBMediaEventSourceFromBKSHIDEventSource
|| __TEXT.__text _SBMedusaCapabilitiesSupportsFloatingApplication
|| __TEXT.__text _SBMedusaCapabilitiesSupportsSplitView
|| __TEXT.__text _SBModificationDateForPath
|| __TEXT.__text _SBModifierCacheCoordinatorResponseDescription
|| __TEXT.__text _SBNoteSignificantAnimationDidEnd
|| __TEXT.__text _SBNoteSignificantAnimationWillBegin
|| __TEXT.__text _SBOrientationAppUsageTimeAggdKey
|| __TEXT.__text _SBOrientationKeyboardUsageTimeAggdKey
|| __TEXT.__text _SBOrientationSpringBoardUsageTimeAggdKey
|| __TEXT.__text _SBOuterCornerRadiusForLayoutState
|| __TEXT.__text _SBPBAppLayoutListReadFrom
|| __TEXT.__text _SBPBAppLayoutReadFrom
|| __TEXT.__text _SBPBDisplayItemReadFrom
|| __TEXT.__text _SBPIPContentTypeIsValid
|| __TEXT.__text _SBPIPPositionGeometryContextIsEqualToContext
|| __TEXT.__text _SBPIPPositionInteractionStateContextIsEqualToContext
|| __TEXT.__text _SBPIPStashStateOverrideReasonForString
|| __TEXT.__text _SBPPTEventActionsToArcSwipeBetweenApps
|| __TEXT.__text _SBPPTEventActionsToBottomEdgeSwipeBetweenApps
|| __TEXT.__text _SBPPTEventActionsToFiveFingerScrunchAndSwipeBetweenApps
|| __TEXT.__text _SBPPTEventActionsToFiveFingerScrunchToAppSwitcher
|| __TEXT.__text _SBPPTEventActionsToFiveFingerScrunchToHomeScreen
|| __TEXT.__text _SBPPTEventActionsToFourFingerSwipeBetweenApps
|| __TEXT.__text _SBPPTEventActionsToPeekAndPopAtPoint
|| __TEXT.__text _SBPPTEventActionsToSwipeAndPauseToAppSwitcher
|| __TEXT.__text _SBPPTEventActionsToSwipeDownFromTopOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeDownInMiddleOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeLeftFromRightOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeLeftInMiddleOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeRightFromLeftOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeRightInMiddleOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeToHomeScreen
|| __TEXT.__text _SBPPTEventActionsToSwipeUpFromBottomOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeUpInMiddleOfInterface
|| __TEXT.__text _SBPPTEventActionsToTapAtPoint
|| __TEXT.__text _SBPPTEventActionsToTouchAndHoldAtPoint
|| __TEXT.__text _SBPPTLockInterfaceOrientation
|| __TEXT.__text _SBPPTObserveNotification
|| __TEXT.__text _SBPPTSynthesizeEventsForCommandString
|| __TEXT.__text _SBPPTSynthesizeEventsForEventActions
|| __TEXT.__text _SBPPTSynthesizeEventsForEventStream
|| __TEXT.__text _SBPPTUnlockInterfaceOrientation
|| __TEXT.__text _SBPeekConfigurationIsValid
|| __TEXT.__text _SBPocketStateIsInPocketOrObscuredScreen
|| __TEXT.__text _SBPointerEventAcceleratedRelativePositionForOrientation
|| __TEXT.__text _SBPointerEventHasMovementOnAxis
|| __TEXT.__text _SBPointerEventIsTrackpadEvent
|| __TEXT.__text _SBPointerEventRepresentsTrackpadTouchUp
|| __TEXT.__text _SBPointerHIDSubEventFromEvent
|| __TEXT.__text _SBPointerOrientation
|| __TEXT.__text _SBPrepareForSetupIfNecessary
|| __TEXT.__text _SBPrepareLaunchSentinelIfNecessary
|| __TEXT.__text _SBPresentationObservationTokenStateDismissedOrDismissing
|| __TEXT.__text _SBPresentationObservationTokenStatePresentedOrPresenting
|| __TEXT.__text _SBReachabilityActivatedInAppAggdKeyForBundleID
|| __TEXT.__text _SBReachabilityActivatedInSpringBoardAggdKeyForClass
|| __TEXT.__text _SBReachabilityGestureShouldActivate
|| __TEXT.__text _SBRecognizedEdgeForHomeGestureRecognizer
|| __TEXT.__text _SBRecordBootToNowTime
|| __TEXT.__text _SBReduceMotion
|| __TEXT.__text _SBReduceTransparency
|| __TEXT.__text _SBRemoveStatusBarStyleOverridesAssertionByStyleOverride
|| __TEXT.__text _SBResizableImageByTilingCenterPixel
|| __TEXT.__text _SBRoutingSwitcherModifierKeyForModifier
|| __TEXT.__text _SBRunningApplicationForAuditToken
|| __TEXT.__text _SBSBacklightChangeSourceDescription
|| __TEXT.__text _SBSDisplayLayoutRoleForLayoutRole
|| __TEXT.__text _SBSafeCast
|| __TEXT.__text _SBSampleValueWithWhitePointAdaptationInteractiveUpdateTimingFunction
|| __TEXT.__text _SBScaleForImagePath
|| __TEXT.__text _SBScaleSuffixForScale
|| __TEXT.__text _SBScaledPoint
|| __TEXT.__text _SBScaledRect
|| __TEXT.__text _SBScaledSize
|| __TEXT.__text _SBScreenBounds
|| __TEXT.__text _SBScreenDisplayCornerRadius
|| __TEXT.__text _SBScreenIsBlanked
|| __TEXT.__text _SBScreenMaximumFramesPerSecond
|| __TEXT.__text _SBScreenOrientedEdgeForHomeGestureRecognizer
|| __TEXT.__text _SBScreenScale
|| __TEXT.__text _SBSecureAppBundleIdentifierForSecureAppType
|| __TEXT.__text _SBSecureAppTypeForApplication
|| __TEXT.__text _SBSendFakeButtonPressEventToApplication
|| __TEXT.__text _SBSendFakeHomeButtonTapEventToApplication
|| __TEXT.__text _SBSeparatorViewBezierPathWithInnerCorners
|| __TEXT.__text _SBSetBacklightFactor
|| __TEXT.__text _SBSetBacklightFactorPending
|| __TEXT.__text _SBSetDeviceInterfaceOrientation
|| __TEXT.__text _SBSetMinimumBrightnessLevel
|| __TEXT.__text _SBSetShouldRasterizeLayer
|| __TEXT.__text _SBSizeTagForOrientation
|| __TEXT.__text _SBSpaceConfigurationIsSplitView
|| __TEXT.__text _SBSpaceConfigurationIsValid
|| __TEXT.__text _SBSpotlightIsVisible
|| __TEXT.__text _SBSpotlightLastPresentationSource
|| __TEXT.__text _SBStatusBarBatteryStateDebugName
|| __TEXT.__text _SBStatusBarDataNetworkDebugName
|| __TEXT.__text _SBStatusBarItemDebugName
|| __TEXT.__text _SBStringForAppLayoutCenterConfiguration
|| __TEXT.__text _SBStringForAppLayoutEnvironment
|| __TEXT.__text _SBStringForCenterConfiguration
|| __TEXT.__text _SBStringForChainableModifierState
|| __TEXT.__text _SBStringForFloatingConfiguration
|| __TEXT.__text _SBStringForFluidSwitcherGestureType
|| __TEXT.__text _SBStringForPIPBehaviorOverrideReason
|| __TEXT.__text _SBStringForPeekConfiguration
|| __TEXT.__text _SBStringForShelfDisplayMode
|| __TEXT.__text _SBStringForSpaceConfiguration
|| __TEXT.__text _SBStringForSwitcherHomeScreenBackdropBlurType
|| __TEXT.__text _SBStringForSwitcherSnapshotPreferredInterfaceOrientation
|| __TEXT.__text _SBStringForSwitcherWallpaperStyle
|| __TEXT.__text _SBStringForUnlockedEnvironmentMode
|| __TEXT.__text _SBStringForWindowDragGestureDestination
|| __TEXT.__text _SBStringFromApplicationSceneEntityDestructionIntent
|| __TEXT.__text _SBStringFromDodgingModifierEventType
|| __TEXT.__text _SBStringFromGesturePhase
|| __TEXT.__text _SBStringFromInsertionSwitcherModifierPhase
|| __TEXT.__text _SBStringFromInvalidationEventResponseOptions
|| __TEXT.__text _SBStringFromMedusaHostedKeyboardWindowLevelPriority
|| __TEXT.__text _SBStringFromPGPlaybackStateContentType
|| __TEXT.__text _SBStringFromPIPLayoutReason
|| __TEXT.__text _SBStringFromPIPLayoutTrait
|| __TEXT.__text _SBStringFromPictureInPictureInsetsSource
|| __TEXT.__text _SBStringFromRemovalSwitcherModifierPhase
|| __TEXT.__text _SBStringFromSBPIPContentType
|| __TEXT.__text _SBStringFromScrollSwitcherModifierEventPhase
|| __TEXT.__text _SBStringFromSwitcherDropModifierEventPhase
|| __TEXT.__text _SBStringFromSwitcherMutationReason
|| __TEXT.__text _SBStringFromSwitcherScrollAxis
|| __TEXT.__text _SBStringFromTransitionPhase
|| __TEXT.__text _SBSwitcherAsyncRenderingAttributesMake
|| __TEXT.__text _SBSwitcherDropActionDescription
|| __TEXT.__text _SBSwitcherDropRegionDescription
|| __TEXT.__text _SBSwitcherDropRegionWarrantsModelUpdate
|| __TEXT.__text _SBSwitcherShelfPresentationAttributesMake
|| __TEXT.__text _SBSystemAppMain
|| __TEXT.__text _SBSystemGestureLocationForTouchInView
|| __TEXT.__text _SBSystemGestureOrientation
|| __TEXT.__text _SBSystemGesturePreviousLocationForTouchInView
|| __TEXT.__text _SBSystemGestureRecognizerStateDescription
|| __TEXT.__text _SBSystemGestureTypeDebugName
|| __TEXT.__text _SBSystemNotesDefaultWindowSize
|| __TEXT.__text _SBSystemNotesMaximumWindowSize
|| __TEXT.__text _SBSystemNotesMinimumWindowSize
|| __TEXT.__text _SBSystemNotesThumbnailCornerRadius
|| __TEXT.__text _SBSystemNotesThumbnailSize
|| __TEXT.__text _SBSystemNotesWindowCornerRadius
|| __TEXT.__text _SBTMCachedBooleanDebugName
|| __TEXT.__text _SBTimeZoneQueue
|| __TEXT.__text _SBTodayViewIsVisible
|| __TEXT.__text _SBTotalMovementForMovedTouches
|| __TEXT.__text _SBTraitsArbiterEnabled
|| __TEXT.__text _SBTraitsArbiterOrientationActuationEnabledForRole
|| __TEXT.__text _SBTraitsParticipantRoleShortDescription
|| __TEXT.__text _SBUICScaledRectWithOffsets
|| __TEXT.__text _SBUnlockedEnvironmentModeEnumerateValidModes
|| __TEXT.__text _SBUpdateCallState
|| __TEXT.__text _SBUseZStackResolverResults
|| __TEXT.__text _SBValidateTimeZone
|| __TEXT.__text _SBWTErrorCreate
|| __TEXT.__text _SBWTErrorCreateForTransaction
|| __TEXT.__text _SBWallpaperLightLegibilitySettingsForVariant
|| __TEXT.__text _SBWallpaperOrientationSourceDescription
|| __TEXT.__text _SBWallpaperResetToDefaults
|| __TEXT.__text _SBWhitePointAdaptivityStyleForAdaptationMode
|| __TEXT.__text _SBWhitePointAdaptivityStyleValid
|| __TEXT.__text _SBWindowLevelInExclusiveRange
|| __TEXT.__text _SBWindowLevelRangeInvalid
|| __TEXT.__text _SBWindowLevelRangeIsValid
|| __TEXT.__text _SBWindowLevelRangeMake
|| __TEXT.__text _SBWindowLevelUnionRange
|| __TEXT.__text _SBWorkspaceActivateApplication
|| __TEXT.__text _SBWorkspaceActivateApplicationFromURL
|| __TEXT.__text _SBWorkspaceActivateApplicationIdempotent
|| __TEXT.__text _SBWorkspaceActivateApplicationSuspended
|| __TEXT.__text _SBWorkspaceActivateApplicationWithActionsAndResult
|| __TEXT.__text _SBWorkspaceApplicationCanActivateWhilePasscodeLocked
|| __TEXT.__text _SBWorkspaceApplicationCanLaunchWhilePasscodeLocked
|| __TEXT.__text _SBWorkspaceApplicationCanLaunchWhilePasscodeLockedIfSecureLaunchRequested
|| __TEXT.__text _SBWorkspaceApplicationCanResumeWhilePasscodeLocked
|| __TEXT.__text _SBWorkspaceApplicationForIdentifier
|| __TEXT.__text _SBWorkspaceApplicationForURLWithError
|| __TEXT.__text _SBWorkspaceApplicationSceneHandlesInLockedOrUnlockedEnvironmentLayoutState
|| __TEXT.__text _SBWorkspaceDestroyApplicationEntity
|| __TEXT.__text _SBWorkspaceDestroyApplicationSceneHandlesWithIntent
|| __TEXT.__text _SBWorkspaceDialRequestForURL
|| __TEXT.__text _SBWorkspaceDoesApplicationURLPresentLockApplicationLaunchVulnerability
|| __TEXT.__text _SBWorkspaceEntitiesAreAnalagous
|| __TEXT.__text _SBWorkspaceEntityRemovalActionTypeDescription
|| __TEXT.__text _SBWorkspaceEntityRemovalAnimationStyleDescription
|| __TEXT.__text _SBWorkspaceForceToSpringBoard
|| __TEXT.__text _SBWorkspaceGetWhyBusy
|| __TEXT.__text _SBWorkspaceGetWhyCannotLock
|| __TEXT.__text _SBWorkspaceHandleStatusBarReturnActionFromApp
|| __TEXT.__text _SBWorkspaceHasApplicationSceneInLockedOrUnlockedEnvironmentLayoutState
|| __TEXT.__text _SBWorkspaceHasApplicationSceneInLockedOrUnlockedEnvironmentLayoutStateMatchingApplication
|| __TEXT.__text _SBWorkspaceInterruptBusynessIfPossible
|| __TEXT.__text _SBWorkspaceIsBusy
|| __TEXT.__text _SBWorkspaceIsSystemBootComplete
|| __TEXT.__text _SBWorkspaceKillApplication
|| __TEXT.__text _SBWorkspaceLaunchMusicSuspended
|| __TEXT.__text _SBWorkspaceLauncherIsActive
|| __TEXT.__text _SBWorkspaceLoadUsageTimes
|| __TEXT.__text _SBWorkspaceLogUsage
|| __TEXT.__text _SBWorkspaceNoteApplicationEntityWasRemovedFromAppSwitcher
|| __TEXT.__text _SBWorkspaceNoteSystemBootComplete
|| __TEXT.__text _SBWorkspaceOpenURLIsHandledBySpringBoard
|| __TEXT.__text _SBWorkspaceRegisterHandlerForExtensionPoint
|| __TEXT.__text _SBWorkspaceSetPreventIdleSleepForReason
|| __TEXT.__text _SBWorkspaceSpringBoardIsActive
|| __TEXT.__text _SBWorkspaceSuspendAllDisplays
|| __TEXT.__text _SBWorkspaceSuspendAllDisplaysWithSource
|| __TEXT.__text _SBWorkspaceSuspendApplicationScene
|| __TEXT.__text _SBWorkspaceTerminateAllApps
|| __TEXT.__text _SBWorkspaceTerminateApplication
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentIsAppSwitcher
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentIsApplication
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentIsHomeScreen
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentIsShowingPeek
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentLayoutStateApplicationSceneHandles
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentLayoutStateHasMatchingApplication
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentLayoutStatePrimaryApplicationSceneHandle
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentLayoutStateSideApplicationSceneHandle
|| __TEXT.__text _SBWorkspaceUnregisterHandlerForExtensionPoint
|| __TEXT.__text _SBWorkspaceUpdateFrontMostApplicationEventPort
|| __TEXT.__text _SetDisplayShowsProgress
|| __TEXT.__text _UIImageSymbolForSBBrightnessRouteType
|| __TEXT.__text _XBGetCustomSafeAreaInsetsForSceneSnapshot
|| __TEXT.__text _XBGetUIUserInterfaceStyleForSceneSnapshot
|| __TEXT.__text __CentroidOfTouches
|| __TEXT.__text __NSStringFromHapticType
|| __TEXT.__text __NSStringFromPhase
|| __TEXT.__text __SBAdditionalScaleFactorForClassicPresentationWithHomeAffordance
|| __TEXT.__text __SBApp
|| __TEXT.__text __SBAppendDescrptionForStatusBarDescribingToBuilder
|| __TEXT.__text __SBApplicationClassicModeIsClassic
|| __TEXT.__text __SBApplicationPerformAfterPrewarmingAllowedListCache
|| __TEXT.__text __SBAxisDescription
|| __TEXT.__text __SBDeviceApplicationSceneStatusBarStateObserverFlagsForObserver
|| __TEXT.__text __SBDeviceOrientationAggdSuffix
|| __TEXT.__text __SBFindFirstView
|| __TEXT.__text __SBFindFirstViewController
|| __TEXT.__text __SBFluidSwitcherTitledButtonContentImageWithTitle
|| __TEXT.__text __SBHNativeScaleForScreenType
|| __TEXT.__text __SBLayoutStateMixHashes
|| __TEXT.__text __SBOrientedPointerLocation
|| __TEXT.__text __SBPostModernRotationEnabled
|| __TEXT.__text __SBPressSequenceValidatorBoundsMake
|| __TEXT.__text __SBRoutingSwitcherModifierRouteToModifier
|| __TEXT.__text __SBRoutingSwitcherModifierRouteToModifierContainingAppLayout
|| __TEXT.__text __SBRoutingSwitcherModifierRouteToModifierContainingIndex
|| __TEXT.__text __SBRoutingSwitcherModifierSubIndexFromIndexForModifier
|| __TEXT.__text __SBSampleValueWithTimingFunction
|| __TEXT.__text __SBStatusBarLegacyStyleFromStyle
|| __TEXT.__text __SBStatusBarStyleForPartWithIdentifier
|| __TEXT.__text __SBStatusBarStyleFromLegacyStyle
|| __TEXT.__text __SBStringFromStatusBarLegacyStyle
|| __TEXT.__text __SBStringFromStatusBarStyle
|| __TEXT.__text __SBUIAnimationStateDescription
|| __TEXT.__text __SBUpdateTouchHistoryWithCoalescedTouches
|| __TEXT.__text __SBWhitePointAdaptationInteractiveUpdateTimingFunction
|| __TEXT.__text __SBWindowFrameDescription
|| __TEXT.__text __SBWorkspaceAreUsageTimesTrusted
|| __TEXT.__text __SBWorkspaceCanLaunchApplication
|| __TEXT.__text __SBWorkspaceCopyRecentSleepsAndWakes
|| __TEXT.__text __SBWorkspaceCopyScheduledPowerEvents
|| __TEXT.__text __SBWorkspaceGetBatteryAwakeTime
|| __TEXT.__text __SBWorkspaceGetBatteryStandbyTimeInSeconds
|| __TEXT.__text __SBWorkspaceGetBatteryUsageTimeInSeconds
|| __TEXT.__text __SBWorkspaceHaveChargedPartially
|| __TEXT.__text __SBWorkspaceIsBusyForTransaction
|| __TEXT.__text __SBWorkspaceResetBatteryUsageTimes
|| __TEXT.__text __SBWorkspaceSaveUsageTimes
|| __TEXT.__text __SBWorkspaceSetHavePartiallyCharged
|| __TEXT.__text __SBWorkspaceStartUsageTimesIfNecessary
|| __TEXT.__text __SBWorkspaceTerminateApps
|| __TEXT.__text __SBWorkspaceTrackPowerEvents
|| __TEXT.__text __SBXXActivateAssistantWithContext
|| __TEXT.__text __SBXXAddAlertItemsSuppressionAssertion
|| __TEXT.__text __SBXXAddBiometricAssertion
|| __TEXT.__text __SBXXAddWallpaperAnimationSuspensionAssertion
|| __TEXT.__text __SBXXAddWebClipToHomeScreen
|| __TEXT.__text __SBXXAppSwitcherServiceRegister
|| __TEXT.__text __SBXXApplicationDisplayIdentifiers
|| __TEXT.__text __SBXXBundlePathForDisplayIdentifier
|| __TEXT.__text __SBXXClearWallpaperAsset
|| __TEXT.__text __SBXXDeactivateReachability
|| __TEXT.__text __SBXXDimScreen
|| __TEXT.__text __SBXXDisplayIdentifierForPID
|| __TEXT.__text __SBXXDisplayIdentifiersForPID
|| __TEXT.__text __SBXXEnableLockScreenBundle
|| __TEXT.__text __SBXXFlashColor
|| __TEXT.__text __SBXXFrontmostApplicationDisplayIdentifier
|| __TEXT.__text __SBXXGetApplicationNetworkFlags
|| __TEXT.__text __SBXXGetBatteryAwakeTime
|| __TEXT.__text __SBXXGetBatteryUsageTimesInSeconds
|| __TEXT.__text __SBXXGetCurrentBacklightFactor
|| __TEXT.__text __SBXXGetDisplayIdentifiers
|| __TEXT.__text __SBXXGetDisplayIdentifiersForExternalAccessoryProtocols
|| __TEXT.__text __SBXXGetFlattenedIconState
|| __TEXT.__text __SBXXGetHomeScreenIconMetrics
|| __TEXT.__text __SBXXGetIconPNGData
|| __TEXT.__text __SBXXGetIconState
|| __TEXT.__text __SBXXGetInterfaceOrientation
|| __TEXT.__text __SBXXGetMediaVolume
|| __TEXT.__text __SBXXGetNowPlayingAppBundleIdentifier
|| __TEXT.__text __SBXXGetPendingIconState
|| __TEXT.__text __SBXXGetRecentSleepsWakes
|| __TEXT.__text __SBXXGetScheduledPowerEvents
|| __TEXT.__text __SBXXGetScreenLockStatus
|| __TEXT.__text __SBXXGetWallpaperLegibilitySettings
|| __TEXT.__text __SBXXGetWallpaperOptions
|| __TEXT.__text __SBXXGetWallpaperPreview
|| __TEXT.__text __SBXXGetWallpaperPreviewSurface
|| __TEXT.__text __SBXXInterruptKeybagRefetch
|| __TEXT.__text __SBXXIsReachabilityEnabled
|| __TEXT.__text __SBXXIsSystemApplication
|| __TEXT.__text __SBXXLocalizedApplicationNameForDisplayIdentifier
|| __TEXT.__text __SBXXLockDeviceAndFeatures
|| __TEXT.__text __SBXXOverrideDisplayedDate
|| __TEXT.__text __SBXXPresentPowerDownUI
|| __TEXT.__text __SBXXProgrammaticSwitchAppGestureMoveToLeft
|| __TEXT.__text __SBXXProgrammaticSwitchAppGestureMoveToRight
|| __TEXT.__text __SBXXReboot
|| __TEXT.__text __SBXXReloadIconForIdentifier
|| __TEXT.__text __SBXXRemoveWebClipFromHomeScreen
|| __TEXT.__text __SBXXSetAlertSuppressionContexts
|| __TEXT.__text __SBXXSetAlertSuppressionContextsBySectionIdentifier
|| __TEXT.__text __SBXXSetAllApplicationsShowProgress
|| __TEXT.__text __SBXXSetAllApplicationsShowSyncIndicator
|| __TEXT.__text __SBXXSetAppIsConnectedToEA
|| __TEXT.__text __SBXXSetApplicationBadgeNumber
|| __TEXT.__text __SBXXSetApplicationBadgeString
|| __TEXT.__text __SBXXSetApplicationNetworkFlags
|| __TEXT.__text __SBXXSetApplicationShowsProgress
|| __TEXT.__text __SBXXSetAssistantRecognitionStrings
|| __TEXT.__text __SBXXSetIconState
|| __TEXT.__text __SBXXSetIdleText
|| __TEXT.__text __SBXXSetInterceptsMenuButton
|| __TEXT.__text __SBXXSetMediaVolume
|| __TEXT.__text __SBXXSetProceduralWallpaper
|| __TEXT.__text __SBXXSetReachabilityEnabled
|| __TEXT.__text __SBXXSetShowsOverridesForRecording
|| __TEXT.__text __SBXXSetShowsProgress
|| __TEXT.__text __SBXXSetTypingActive
|| __TEXT.__text __SBXXSetVoiceControlEnabled
|| __TEXT.__text __SBXXSetVoiceRecognitionAudioInputPaths
|| __TEXT.__text __SBXXSetWallpaperImageForLocations
|| __TEXT.__text __SBXXSetWallpaperImageSurfaceForLocations
|| __TEXT.__text __SBXXSetWallpaperOptionsForLocations
|| __TEXT.__text __SBXXSetWallpaperVariant
|| __TEXT.__text __SBXXSetWantsLockButtonEvents
|| __TEXT.__text __SBXXSetWantsVolumeButtonEvents
|| __TEXT.__text __SBXXShowNetworkPromptsIfNecessary
|| __TEXT.__text __SBXXShutDown
|| __TEXT.__text __SBXXSuspendFrontmostApp
|| __TEXT.__text __SBXXTagTouchForTypingMenu
|| __TEXT.__text __SB_NSStringFromUIRectEdge
|| __TEXT.__text __UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection
|| __TEXT.__text __UIInterfaceOrientationFromCATransform3D
|| __TEXT.__text __UIInterfaceOrientationRotationDirectionForRotationFromInterfaceOrientationToInterfaceOrientation
|| __TEXT.__text __UIMakeBasicTransformAnimationUnambiguous
|| __TEXT.__text ___EventProviderCallback
|| __TEXT.__text ___PPTExpectedFinalUnlockedEnvironmentModeForCurrentTest
|| __TEXT.__text ___PPTIsRunningSwitcherGestureTest
|| __TEXT.__text ___PPTIsRunningSwitcherGestureToAutoPIPTest
|| __TEXT.__text __arrayByCombiningArrays
|| __TEXT.__text __dictionaryByCombingDictionaryOfSetOfAppLayouts
|| __TEXT.__text __objectByChoosingNonNilObject
|| __TEXT.__text __setByCombiningSets
|| __TEXT.__text __switcherKeyboardSuppressionModeByCombiningSuppressionModes
|| __TEXT.__text __timezoneQueue_setTimeZone
|| __TEXT.__text _centerConfigurationFromProtobufCenterConfiguration
|| __TEXT.__text _clamp
|| __TEXT.__text _configurationFromProtobufConfiguration
|| __TEXT.__text _environmentFromProtobufEnvironment
|| __TEXT.__text _generateOrRetrieveMappedWallpaperPreview
|| __TEXT.__text _getCategoryIdentifier
|| __TEXT.__text _getRecentsCategoryIdentifier
|| __TEXT.__text _getSuggestedCategoryIdentifier
|| __TEXT.__text _indexingAscendingLUT
|| __TEXT.__text _protobufCenterConfigurationFromCenterConfiguration
|| __TEXT.__text _protobufConfigurationFromConfiguration
|| __TEXT.__text _protobufDisplayItemTypeFromType
|| __TEXT.__text _protobufEnvironmentFromEnvironment
|| __TEXT.__text _protobufRoleFromRole
|| __TEXT.__text _resampleLinearInterpolation
|| __TEXT.__text _roleFromProtobufRole
|| __TEXT.__text _rubberband
|| __TEXT.__text _smoothDecelerationAnimation
|| __TEXT.__text _stringForSBTouchTemplateMatchResult
|| __TEXT.__text _typeFromProtobufDisplayItemType
__ AVFAudio: _OBJC_CLASS_$_AVAudioPlayer
__ AVFoundation: _AVCaptureCancelPrewarm
__ AVFoundation: _AVCapturePrewarmReasonCameraLaunchHomeScreen
__ AVFoundation: _AVCapturePrewarmReasonCameraLaunchLockScreen
__ AVFoundation: _AVCapturePrewarmReasonKey
__ AVFoundation: _AVCapturePrewarmUserInteractionAbsoluteTimeKey
__ AVFoundation: _AVCapturePrewarmUserInteractionContinuousTimeKey
__ AVFoundation: _AVCapturePrewarmWithOptions
__ AVFoundation: _AVExternalPlaybackMonitorAirPlayVideoActiveDidChangeNotification
__ AVFoundation: _AVExternalPlaybackMonitorAirPlayVideoPlayingDidChangeNotification
__ AVFoundation: _AVOutputContextOutputDeviceDidChangeNotification
__ AVFoundation: _AVOutputContextOutputDevicesDidChangeNotification
__ AVFoundation: _AVRoutingSessionManagerCurrentSessionDidChangeNotification
__ AVFoundation: _AVRoutingSessionManagerLikelyExternalDestinationsDidChangeNotification
__ AVFoundation: _OBJC_CLASS_$_AVExternalPlaybackMonitor
__ AVFoundation: _OBJC_CLASS_$_AVOutputContext
__ AVFoundation: _OBJC_CLASS_$_AVRoutingSessionManager
__ Accounts: _ACAccountStoreDidChangeNotification
__ Accounts: _ACAccountTypeIdentifierIMAP
__ Accounts: _ACDAccountStoreDidChangeNotification
__ Accounts: _ACEmailAliasKeyEmailAddresses
__ Accounts: _OBJC_CLASS_$_ACAccountStore
__ AggregateDictionary: _ADClientAddValueForScalarKey
__ AggregateDictionary: _ADClientPushValueForDistributionKey
__ AggregateDictionary: _ADClientSetValueForDistributionKey
__ AggregateDictionary: _ADClientSetValueForScalarKey
__ AggregateDictionary: _ADMonotonicTimeGetCurrent
__ AggregateDictionary: _ADPushTimeIntervalForDistributionKeySinceStartTime
__ AirTraffic: _OBJC_CLASS_$_ATConnection
__ AppPredictionClient: _ATXAppPredictionPanelBundleIdentifier
__ AppPredictionClient: _ATXDefaultWidgetSuggestionDidChangeDarwinNotificationName
__ AppPredictionClient: _OBJC_CLASS_$_ATXAppDirectoryClient
__ AppPredictionClient: _OBJC_CLASS_$_ATXDefaultHomeScreenItemManager
__ AppPredictionClient: _OBJC_CLASS_$_ATXDefaultWidgetStack
__ AppPredictionClient: _OBJC_CLASS_$_ATXDefaultWidgetSuggesterClient
__ AppPredictionClient: _OBJC_CLASS_$_ATXHomeScreenPage
__ AppPredictionClient: _OBJC_CLASS_$_ATXHomeScreenStackConfig
__ AppPredictionClient: _OBJC_CLASS_$_ATXHomeScreenSuggestionClient
__ AppPredictionClient: _OBJC_CLASS_$_ATXHomeScreenWidgetIdentifiable
__ AppPredictionClient: _kATXAppDirectoryCategoriesUpdatedDistributedNotification
__ AppPredictionInternal: _ATXPredictionReasonLocationTransportType
__ AppPredictionInternal: _ATXPredictionReasonLocationTransportTypeAutomobile
__ AppPredictionInternal: _ATXPredictionReasonLocationTransportTypeRide
__ AppPredictionInternal: _ATXPredictionReasonLocationTransportTypeTransit
__ AppPredictionUIWidget: _APUIAppPredictionLaunchOrigin
__ AppPredictionUIWidget: _APUIIconLocationAppPredictions
__ AppPredictionUIWidget: _OBJC_CLASS_$_APUIAppPredictionViewController
__ AppPredictionUIWidget: _OBJC_CLASS_$_APUISuggestionsWidgetViewController
__ AppStoreDaemon: _OBJC_CLASS_$_ASDRepairOptions
__ AppStoreDaemon: _OBJC_CLASS_$_ASDRepairService
__ AppStoreDaemon: _OBJC_CLASS_$_ASDStoreKitExternalNotificationSheet
__ AppSupport: _CPDateFormatStringForFormatType
__ AppSupport: _CPNoAMPMTimeFormat
__ AppSupport: _CPPhoneNumberCopyActiveCountryCode
__ AppSupport: _CPPhoneNumberCopyActiveCountryCodeNoDefault
__ AppSupport: _CPPhoneNumberSetActiveCountryCode
__ AppSupport: _CPPhoneNumberSetHomeCountryCode
__ AppSupport: _CPPhoneNumberSetNetworkCountryCode
__ AppSupport: _CPSharedResourcesDirectory
__ AppSupport: _CPSqliteSetDefaultPageCacheSize
__ AppSupport: _CPSqliteSetDefaultSharedCacheModeEnabledState
__ AppSupport: _OBJC_CLASS_$_RadiosPreferences
__ AssistantServices: _AFSiriAnnouncementPlatformGetName
__ AssistantServices: _AFSiriDeactivationReasonGetIsValidAndSpecified
__ AssistantServices: _AFSiriDeactivationReasonGetName
__ AssistantServices: _AFSiriUserNotificationAnnouncementSpeakingStateGetName
__ AssistantServices: _OBJC_CLASS_$_AFSiriAnnouncementRequestCapabilityManager
__ AssistantServices: _OBJC_CLASS_$_AFSiriUserNotificationRequest
__ AssistantServices: _OBJC_CLASS_$_AFUserNotificationAnnouncementSpeakingStateObserver
__ AttentionAwareness: _OBJC_CLASS_$_AWAttentionAwarenessClient
__ AttentionAwareness: _OBJC_CLASS_$_AWAttentionAwarenessConfiguration
__ AudioToolbox: _AudioServicesAddSystemSoundCompletion
__ AudioToolbox: _AudioServicesCreateSystemSoundIDWithPath
__ AudioToolbox: _AudioServicesPlaySystemSoundWithCompletion
__ AudioToolbox: _AudioServicesPlaySystemSoundWithVibration
__ AudioToolbox: _AudioServicesRemoveSystemSoundCompletion
__ AudioToolbox: _AudioServicesStopSystemSound
__ BackBoardServices: _BKHIDServicesGetCurrentDeviceOrientation
__ BackBoardServices: _BKHIDServicesGetNonFlatDeviceOrientation
__ BackBoardServices: _BKLogDisplay
__ BackBoardServices: _BKLogOrientationClient
__ BackBoardServices: _BKLogOrientationDevice
__ BackBoardServices: _BKLogOrientationGlobal
__ BackBoardServices: _BKSActivateForEventOptionTypeBackgroundContentFetching
__ BackBoardServices: _BKSApplicationStateRunningReasonAssertionReasonKey
__ BackBoardServices: _BKSApplicationStateRunningReasonsKey
__ BackBoardServices: _BKSDebugOptionKeyArguments
__ BackBoardServices: _BKSDebugOptionKeyCancelDebugOnNextLaunch
__ BackBoardServices: _BKSDebugOptionKeyDebugOnNextLaunch
__ BackBoardServices: _BKSDebugOptionKeyDisableASLR
__ BackBoardServices: _BKSDebugOptionKeyEnvironment
__ BackBoardServices: _BKSDebugOptionKeyStandardErrorPath
__ BackBoardServices: _BKSDebugOptionKeyStandardOutPath
__ BackBoardServices: _BKSDebugOptionKeyWaitForDebugger
__ BackBoardServices: _BKSDisplayBrightnessGetCurrent
__ BackBoardServices: _BKSDisplayBrightnessRestoreSystemBrightness
__ BackBoardServices: _BKSDisplayBrightnessSet
__ BackBoardServices: _BKSDisplayBrightnessSetWithImplicitTransaction
__ BackBoardServices: _BKSDisplayBrightnessTransactionCreate
__ BackBoardServices: _BKSDisplayServicesArchiveWithOptionsAndCompletion
__ BackBoardServices: _BKSDisplayServicesDisplayIsTethered
__ BackBoardServices: _BKSDisplayServicesSetScreenBlanked
__ BackBoardServices: _BKSDisplayServicesTetherPrefsNeedImmediateUpdate
__ BackBoardServices: _BKSDisplayServicesUpdateMirroredDisplayOrientationWithInterfaceOrientation
__ BackBoardServices: _BKSDisplayServicesUpdateTetheredDisplayOrientationIfNecessaryWithInterfaceOrientation
__ BackBoardServices: _BKSDisplayServicesWillUnblank
__ BackBoardServices: _BKSHIDEventGetBaseAttributes
__ BackBoardServices: _BKSHIDEventGetConciseDescription
__ BackBoardServices: _BKSHIDEventGetDigitizerAttributes
__ BackBoardServices: _BKSHIDEventGetPointerAttributes
__ BackBoardServices: _BKSHIDEventGetSmartCoverStateFromEvent
__ BackBoardServices: _BKSHIDEventGetSourceFromKeyboardEvent
__ BackBoardServices: _BKSHIDEventSendToProcess
__ BackBoardServices: _BKSHIDEventSendToProcessAndFollowDeferringRules
__ BackBoardServices: _BKSHIDServicesAmbientLightSensorDisableAutoBrightness
__ BackBoardServices: _BKSHIDServicesAmbientLightSensorEnableAutoBrightness
__ BackBoardServices: _BKSHIDServicesCancelTouchesOnMainDisplay
__ BackBoardServices: _BKSHIDServicesGetBacklightFactor
__ BackBoardServices: _BKSHIDServicesGetRingerState
__ BackBoardServices: _BKSHIDServicesIsOrientationLockedWithOrientation
__ BackBoardServices: _BKSHIDServicesIsSmartCoverClosed
__ BackBoardServices: _BKSHIDServicesLastUserEventTime
__ BackBoardServices: _BKSHIDServicesLockOrientation
__ BackBoardServices: _BKSHIDServicesNotifyOnNextUserEvent
__ BackBoardServices: _BKSHIDServicesProximityDetectionActive
__ BackBoardServices: _BKSHIDServicesRequestProximityDetectionMode
__ BackBoardServices: _BKSHIDServicesResetProximityCalibration
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorPending
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorWithFadeDuration
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorWithFadeDurationAsync
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorWithFadeDurationSilently
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorWithFadeDurationSilentlyAsync
__ BackBoardServices: _BKSHIDServicesSetDeviceInterfaceOrientation
__ BackBoardServices: _BKSHIDServicesSetHIDUILockedStateWithSource
__ BackBoardServices: _BKSHIDServicesSetHitTestRegionsForDisplay
__ BackBoardServices: _BKSHIDServicesSetMinimumBrightnessLevelWithFadeDuration
__ BackBoardServices: _BKSHIDServicesSetObjectInProximityIgnoresTouches
__ BackBoardServices: _BKSHIDServicesSetOrientationClient
__ BackBoardServices: _BKSHIDServicesUnlockOrientation
__ BackBoardServices: _NSStringFromBKSHIDEventSource
__ BackBoardServices: _NSStringFromBKSHIDUILockSource
__ BackBoardServices: _NSStringFromBKSHIDUILockState
__ BackBoardServices: _NSStringFromBKSKeyModifierFlags
__ BackBoardServices: _OBJC_CLASS_$_BKSButtonHapticsController
__ BackBoardServices: _OBJC_CLASS_$_BKSButtonHapticsDefinition
__ BackBoardServices: _OBJC_CLASS_$_BKSDisplayProgressIndicatorProperties
__ BackBoardServices: _OBJC_CLASS_$_BKSDisplayRenderOverlay
__ BackBoardServices: _OBJC_CLASS_$_BKSDisplayRenderOverlayDescriptor
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDeferringEnvironment
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDeferringToken
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDeliveryManager
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDescriptor
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDiscreteDispatchingRule
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDispatchingTarget
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDisplay
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventKeyCommandsDispatchingRule
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventKeyboardDescriptor
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventSenderDescriptor
__ BackBoardServices: _OBJC_CLASS_$_BKSHitTestRegion
__ BackBoardServices: _OBJC_CLASS_$_BKSInsecureDrawingAction
__ BackBoardServices: _OBJC_CLASS_$_BKSMousePointerService
__ BackBoardServices: _OBJC_CLASS_$_BKSMutableHIDEventDeferringPredicate
__ BackBoardServices: _OBJC_CLASS_$_BKSMutableHIDEventDeferringTarget
__ BackBoardServices: _OBJC_CLASS_$_BKSMutableHIDEventDiscreteDispatchingPredicate
__ BackBoardServices: _OBJC_CLASS_$_BKSMutableHIDEventKeyCommandsDispatchingPredicate
__ BackBoardServices: _OBJC_CLASS_$_BKSProcessAssertion
__ BackBoardServices: _OBJC_CLASS_$_BKSRestartAction
__ BackBoardServices: _OBJC_CLASS_$_BKSTouchDeliveryObservationService
__ BackBoardServices: _kBKSHIDServicesUserEventOccurred
__ BannerKit: _BNBannerKitWorkspaceIdentifier
__ BannerKit: _OBJC_CLASS_$_BNBannerController
__ BannerKit: _OBJC_CLASS_$_BNBannerHostMonitorListener
__ BannerKit: _OBJC_CLASS_$_BNBannerSource
__ BannerKit: _OBJC_CLASS_$_BNBannerSourceLayoutDescription
__ BannerKit: _OBJC_CLASS_$_BNBannerSourceListener
__ BannerKit: _OBJC_CLASS_$_BNBannerSourceListenerPresentableViewController
__ BannerKit: _OBJC_CLASS_$_BNContentViewController
__ BannerKit: _OBJC_CLASS_$_BNPresentableIdentification
__ BannerKit: _OBJC_METACLASS_$_BNBannerSourceListenerPresentableViewController
__ BaseBoardUI: _BSUIConstrainValueToIntervalWithRubberBand
__ BaseBoardUI: _BSUIConstrainValueWithRubberBand
__ BaseBoardUI: _BSUISurfaceWithColorSpaceAndDrawBlock
__ BaseBoardUI: _OBJC_CLASS_$_BSUIAnimationFactory
__ BaseBoardUI: _OBJC_CLASS_$_BSUICAPackageView
__ BaseBoardUI: _OBJC_CLASS_$_BSUIEmojiLabelView
__ BaseBoardUI: _OBJC_CLASS_$_BSUIFontProvider
__ BaseBoardUI: _OBJC_CLASS_$_BSUIScrollView
__ BaseBoardUI: _OBJC_METACLASS_$_BSUIScrollView
__ BatteryCenter: _OBJC_CLASS_$_BCBatteryDevice
__ BatteryCenter: _OBJC_CLASS_$_BCBatteryDeviceController
__ BatteryCenter: _kBCBatteryDeviceA149ProductIdentifier
__ BatteryCenter: _kBCBatteryDeviceB222ProductIdentifier
__ BatteryCenterUI: _OBJC_CLASS_$_BCUIBatteryAvocadoViewController
__ BiomeStreams: _OBJC_CLASS_$_BMBiomeScheduler
__ BiomeStreams: _OBJC_CLASS_$_BMDiscoverabilitySignalEvent
__ BiomeStreams: _OBJC_CLASS_$_BMStreams
__ BluetoothManager: _BluetoothAccessoryInEarStatusNotification
__ BluetoothManager: _BluetoothAvailabilityChangedNotification
__ BluetoothManager: _BluetoothConnectionStatusChangedNotification
__ BluetoothManager: _BluetoothDeviceBatteryChangedNotification
__ BluetoothManager: _BluetoothDeviceConnectSuccessNotification
__ BluetoothManager: _BluetoothDeviceDisconnectSuccessNotification
__ BluetoothManager: _BluetoothHandsfreeEndedVoiceCommand
__ BluetoothManager: _BluetoothHandsfreeInitiatedVoiceCommand
__ BluetoothManager: _OBJC_CLASS_$_BluetoothDevice
__ BluetoothManager: _OBJC_CLASS_$_BluetoothManager
__ BulletinBoard: _BBObserverGatewayLocalName
__ BulletinBoard: _BBServerRun
__ BulletinBoard: _BBServerSetAllowsPublication
__ BulletinBoard: _BBServerSetDefaultExpirationComponents
__ BulletinBoard: _OBJC_CLASS_$_BBBulletinRequest
__ BulletinBoard: _OBJC_CLASS_$_BBObserver
__ BulletinBoard: _OBJC_CLASS_$_BBSectionInfo
__ CPMS: _OBJC_CLASS_$_CPMSAgent
__ CPMS: _OBJC_CLASS_$_CPMSStateReader
__ CarKit: _OBJC_CLASS_$_CARAutomaticDNDStatus
__ CarKit: _OBJC_CLASS_$_CRCarPlayAppDeclaration
__ CarKit: _OBJC_CLASS_$_CRCarPlayAppPolicyEvaluator
__ CarPlayUIServices: _CRSUIBannerRevocationReasonHomeButton
__ CarPlayUIServices: _CRSUIBannerRevocationReasonTouchOutsideDismiss
__ Celestial: _AVSystemController_ActiveAudioRouteAttribute
__ Celestial: _AVSystemController_ActiveAudioRouteDidChangeNotification
__ Celestial: _AVSystemController_AudioFullMutedNotificationParameter
__ Celestial: _AVSystemController_CarPlayIsPlayingLongerDurationSession
__ Celestial: _AVSystemController_CurrentExternalScreenAttribute
__ Celestial: _AVSystemController_CurrentVideoStreamsAttribute
__ Celestial: _AVSystemController_CurrentVideoStreams_BundleID
__ Celestial: _AVSystemController_CurrentVideoStreams_VideoRoutes
__ Celestial: _AVSystemController_EffectiveVolumeDidChangeNotification
__ Celestial: _AVSystemController_EffectiveVolumeNotificationParameter_Category
__ Celestial: _AVSystemController_EffectiveVolumeNotificationParameter_Volume
__ Celestial: _AVSystemController_EffectiveVolumeNotificationParameter_VolumeChangeReason
__ Celestial: _AVSystemController_ExternalScreenDidChangeNotification
__ Celestial: _AVSystemController_ExternalScreenType_AirPlay
__ Celestial: _AVSystemController_FullMuteAttribute
__ Celestial: _AVSystemController_FullMuteDidChangeNotification
__ Celestial: _AVSystemController_HeadphoneJackHasInputAttribute
__ Celestial: _AVSystemController_HeadphoneJackIsConnectedAttribute
__ Celestial: _AVSystemController_HeadphoneJackIsConnectedDidChangeNotification
__ Celestial: _AVSystemController_LongFormVideoAppsAttribute
__ Celestial: _AVSystemController_PickableRouteType_Wireless
__ Celestial: _AVSystemController_PickableRoutesAttribute
__ Celestial: _AVSystemController_PickableRoutesDidChangeNotification
__ Celestial: _AVSystemController_PickedRouteAttribute
__ Celestial: _AVSystemController_PlayingSessionsDescriptionAttribute
__ Celestial: _AVSystemController_RouteDescriptionKey_AVAudioRouteName
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_IsBTManaged
__ Celestial: _AVSystemController_RouteDescriptionKey_IsCurrentlyPickedOnPairedDevice
__ Celestial: _AVSystemController_RouteDescriptionKey_RouteCurrentlyPicked
__ Celestial: _AVSystemController_RouteDescriptionKey_RouteType
__ Celestial: _AVSystemController_RouteDescriptionKey_RouteUID
__ Celestial: _AVSystemController_ServerConnectionDiedNotification
__ Celestial: _AVSystemController_SomeSessionIsPlayingDidChangeNotification
__ Celestial: _AVSystemController_SomeSessionIsPlayingDidChangeNotificationParameter_Sessions
__ Celestial: _AVSystemController_SubscribeToNotificationsAttribute
__ Celestial: _AVSystemController_SystemHasAudioInputDeviceAttribute
__ Celestial: _AVSystemController_VideoStreamsDidChangeNotification
__ Celestial: _AVSystemController_VideoStreamsDidChangeNotificationParameter_BundleID
__ Celestial: _AVSystemController_VideoStreamsDidChangeNotificationParameter_RouteNames
__ Celestial: _AVSystemController_VoicePromptStyleAttribute
__ Celestial: _AVSystemController_VoicePromptStyleDidChangeNotification
__ Celestial: _AVSystemController_VoicePromptStyleDidChangeNotificationParameter
__ Celestial: _AVSystemController_VoicePromptStyle_Normal
__ Celestial: _FigCreateCGImageFromJPEG
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ ChronoServices: _CHSFlushPowerlog
__ ChronoServices: _CHSIsWidgetExtensionPoint
__ ChronoServices: _CHSWidgetFamilyDescription
__ ChronoServices: _CHSWidgetFamilyFromString
__ ChronoServices: _CHSWidgetFamilyMaskContainsFamily
__ ChronoServices: _OBJC_CLASS_$_CHSApplicationProcessStateChangeConsumer
__ ChronoServices: _OBJC_CLASS_$_CHSAvocadoDescriptorProvider
__ ChronoServices: _OBJC_CLASS_$_CHSConfiguredWidgetContainerDescriptor
__ ChronoServices: _OBJC_CLASS_$_CHSConfiguredWidgetDescriptor
__ ChronoServices: _OBJC_CLASS_$_CHSMutableWidgetMetricsSpecification
__ ChronoServices: _OBJC_CLASS_$_CHSToolSupportService
__ ChronoServices: _OBJC_CLASS_$_CHSWidget
__ ChronoServices: _OBJC_CLASS_$_CHSWidgetConfiguration
__ ChronoServices: _OBJC_CLASS_$_CHSWidgetHost
__ ChronoUIServices: _CHUISAvocadoWorkspaceIdentifier
__ ClipUIServices: _OBJC_CLASS_$_CPSClipOverlayViewController
__ CloudServices: _OBJC_CLASS_$_SecureBackup
__ CloudServices: _kSecureBackupPassphraseKey
__ Contacts: _OBJC_CLASS_$_CNContact
__ Contacts: _OBJC_CLASS_$_CNContactFormatter
__ Contacts: _OBJC_CLASS_$_CNContactStore
__ ContactsUI: _OBJC_CLASS_$_CNMonogrammer
__ ControlCenterServices: _OBJC_CLASS_$_CCSModulePresentationOptions
__ ControlCenterServices: _OBJC_CLASS_$_CCSRemoteServiceProvider
__ ControlCenterUI: _OBJC_CLASS_$_CCUIControlCenterDefaults
__ ControlCenterUI: _OBJC_CLASS_$_CCUIModularControlCenterOverlayViewController
__ ControlCenterUI: _OBJC_CLASS_$_CCUIModuleAlertViewController
__ ControlCenterUI: _OBJC_CLASS_$_CCUISensorActivityDataProvider
__ ControlCenterUI: _OBJC_CLASS_$_CCUIStatusBarStyleSnapshot
__ ControlCenterUIKit: _CCUIAppLaunchOriginControlCenter
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUICAPackageDescription
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUIContinuousSliderView
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUISensorActivityData
__ ControlCenterUIKit: _OBJC_METACLASS_$_CCUIContinuousSliderView
__ CoreAccessories: _OBJC_CLASS_$_ACCConnectionInfo
__ CoreAnalytics: _AnalyticsSendEvent
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreBluetooth: _CBCentralManagerOptionReceiveSystemEvents
__ CoreBluetooth: _CBManagerNeedsRestrictedStateOperation
__ CoreBluetooth: _OBJC_CLASS_$_CBCentralManager
__ CoreBrightness: _OBJC_CLASS_$_CBAdaptationClient
__ CoreBrightness: _OBJC_CLASS_$_CBBlueLightClient
__ CoreBrightness: _OBJC_CLASS_$_CBClient
__ CoreBrightness: _OBJC_CLASS_$_KeyboardBrightnessClient
__ CoreBrightness: _kKBIDDefault
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayApplyFunction
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFPreferencesSetValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFPropertyListCreateData
__ CoreFoundation: _CFPropertyListCreateWithData
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddObserver
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopAddTimer
__ CoreFoundation: _CFRunLoopCopyCurrentMode
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopObserverCreateWithHandler
__ CoreFoundation: _CFRunLoopObserverInvalidate
__ CoreFoundation: _CFRunLoopPerformBlock
__ CoreFoundation: _CFRunLoopRemoveObserver
__ CoreFoundation: _CFRunLoopRunInMode
__ CoreFoundation: _CFRunLoopTimerCreate
__ CoreFoundation: _CFRunLoopTimerInvalidate
__ CoreFoundation: _CFRunLoopWakeUp
__ CoreFoundation: _CFSetContainsValue
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFTimeZoneCopySystem
__ CoreFoundation: _CFTimeZoneCreateWithName
__ CoreFoundation: _CFTimeZoneGetName
__ CoreFoundation: _CFUUIDCreate
__ CoreFoundation: _CFUUIDCreateString
__ CoreFoundation: _NSCalendarIdentifierGregorian
__ CoreFoundation: _NSCurrentLocaleDidChangeNotification
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _NSURLIsDirectoryKey
__ CoreFoundation: _NSURLIsExcludedFromBackupKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInvocation
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: __CFCopyServerVersionDictionary
__ CoreFoundation: __CFCopySystemVersionDictionary
__ CoreFoundation: __CFCopySystemVersionDictionaryValue
__ CoreFoundation: __CFPreferencesAppFullCloudSynchronize
__ CoreFoundation: __CFPreferencesFlushCachesForIdentifier
__ CoreFoundation: __CFPreferencesGetAppBooleanValueWithContainer
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: __kCFBundleURLSchemesKey
__ CoreFoundation: __kCFBundleURLTypesKey
__ CoreFoundation: __kCFSystemVersionBuildVersionKey
__ CoreFoundation: __kCFSystemVersionProductNameKey
__ CoreFoundation: __kCFSystemVersionProductVersionKey
__ CoreFoundation: _kCFAbsoluteTimeIntervalSince1970
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFPreferencesAnyApplication
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationAlertSourceKey
__ CoreFoundation: _kCFUserNotificationAlertTopMostKey
__ CoreFoundation: _kCFUserNotificationAlternateButtonTitleKey
__ CoreFoundation: _kCFUserNotificationDefaultButtonTitleKey
__ CoreFoundation: _kCFUserNotificationKeyboardTypesKey
__ CoreFoundation: _kCFUserNotificationLocalizationPathKey
__ CoreFoundation: _kCFUserNotificationOtherButtonTitleKey
__ CoreFoundation: _kCFUserNotificationSoundPathKey
__ CoreFoundation: _kCFUserNotificationTextFieldTitlesKey
__ CoreFoundation: _kCFUserNotificationTextFieldValuesKey
__ CoreFoundation: _kCFUserNotificationTimeoutKey
__ CoreFoundation: _kCFUserNotificationTokenKey
__ CoreGraphics: _CGAffineTransformConcat
__ CoreGraphics: _CGAffineTransformEqualToTransform
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformInvert
__ CoreGraphics: _CGAffineTransformIsIdentity
__ CoreGraphics: _CGAffineTransformMakeRotation
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformRotate
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGAffineTransformTranslate
__ CoreGraphics: _CGContextFillRect
__ CoreGraphics: _CGContextRotateCTM
__ CoreGraphics: _CGContextTranslateCTM
__ CoreGraphics: _CGDataProviderCreateWithFilename
__ CoreGraphics: _CGDataProviderRelease
__ CoreGraphics: _CGFloatIsValid
__ CoreGraphics: _CGImageBlockSetRelease
__ CoreGraphics: _CGImageCreateWithJPEGDataProvider
__ CoreGraphics: _CGImageCreateWithPNGDataProvider
__ CoreGraphics: _CGImageGetAlphaInfo
__ CoreGraphics: _CGImageGetDataProvider
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetTypeID
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGPathAddArc
__ CoreGraphics: _CGPathAddLineToPoint
__ CoreGraphics: _CGPathAddPath
__ CoreGraphics: _CGPathCreateCopyByTransformingPath
__ CoreGraphics: _CGPathCreateMutable
__ CoreGraphics: _CGPathGetPathBoundingBox
__ CoreGraphics: _CGPathRelease
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectContainsRect
__ CoreGraphics: _CGRectDivide
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntegral
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIntersectsRect
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectIsInfinite
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectOffset
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreLocation: _CLGetStatusBarIconState
__ CoreLocation: _CLShouldDisplayStatusBarIconChangedNotification
__ CoreMotion: _CMPersistOrientationCallbackModeKey
__ CoreMotion: _CMSetDeviceOrientationNotification
__ CoreMotion: _CMSetDeviceOrientationTypeKey
__ CoreMotion: _OBJC_CLASS_$_CMDeviceOrientationManager
__ CoreMotion: _OBJC_CLASS_$_CMGestureManager
__ CoreMotion: _OBJC_CLASS_$_CMMotionAlarmManager
__ CoreMotion: _OBJC_CLASS_$_CMPocketStateManager
__ CoreMotion: _OBJC_CLASS_$_CMWakeGestureManager
__ CoreServices: _LSDefaultApplicationManagementDomain
__ CoreServices: _LSFileProviderStringKey
__ CoreServices: _LSRequireOpenInPlaceKey
__ CoreServices: _LSUserApplicationType
__ CoreServices: _OBJC_CLASS_$_LSAppLink
__ CoreServices: _OBJC_CLASS_$_LSApplicationExtensionRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _OBJC_CLASS_$_LSDocumentProxy
__ CoreServices: _OBJC_CLASS_$_LSPlugInKitProxy
__ CoreServices: _OBJC_CLASS_$__LSOpenConfiguration
__ CoreServices: __LSCopyAdvertisementStringForTeamIdentifierAndActivityType
__ CoreServices: __LSHandlerRankOwner
__ CoreTelephony: _CTStartOTASP
__ CoreTelephony: _CTTelephonyCenterAddObserver
__ CoreTelephony: _CTTelephonyCenterGetDefault
__ CoreTelephony: _CTTelephonyCenterSetDefaultRunloop
__ CoreTelephony: _OBJC_CLASS_$_CoreTelephonyClient
__ CoreTelephony: __CTServerConnectionCopyMobileCountryCode
__ CoreTelephony: __CTServerConnectionCopyMobileSubscriberHomeCountryList
__ CoreTelephony: __CTServerConnectionCopyOperatorName
__ CoreTelephony: __CTServerConnectionCreateWithIdentifier
__ CoreTelephony: __CTServerConnectionDisableRegistration
__ CoreTelephony: __CTServerConnectionDormancySuspendAssertionCreate
__ CoreTelephony: __CTServerConnectionDumpBasebandState
__ CoreTelephony: __CTServerConnectionEnableRegistration
__ CoreTelephony: __CTServerConnectionGetEmergencyCallBackMode
__ CoreTelephony: __CTServerConnectionSetTargetQueue
__ CoreTelephony: _kCTCellularDataPlanActivationStatus
__ CoreTelephony: _kCTCellularDataPlanActivationSuccessKey
__ CoreTelephony: _kCTCellularDataPlanAutorenewEnabledKey
__ CoreTelephony: _kCTCellularDataPlanBucketPlanSizeKey
__ CoreTelephony: _kCTCellularDataPlanStatusNotification
__ CoreTelephony: _kCTCellularDataPlanStatusTypeKey
__ CoreTelephony: _kCTCellularDataPlanTimedPlanPeriodEndDateKey
__ CoreTelephony: _kCTCellularDataPlanTimedPlanUsageCapKey
__ CoreTelephony: _kCTCellularDataPlanUsageKey
__ CoreTelephony: _kCTCellularDataPlanUsageStatus
__ CoreTelephony: _kCTEmergencyCallBackMode
__ CoreTelephony: _kCTEmergencyCallBackModeStatusNotification
__ CoreTelephony: _kCTRegistrationCellularDataPlanAccountURL
__ CoreTelephony: _kCTRegistrationCellularDataPlanActivateFailedNotification
__ CoreTelephony: _kCTRegistrationCellularDataPlanNewAccount
__ CoreTelephony: _kCTSIMSupportSIMStatusReady
__ CoreTelephony: _kCTServiceProvisioningFailedNotification
__ CoreTelephony: _kCTServiceProvisioningStartedNotification
__ CoreTelephony: _kCTServiceProvisioningSuccessfulNotification
__ CoreTelephony: _kCTTelephonyCenterDaemonRestartNotification
__ CoreText: _CTFontGetLanguageAwareOutsets
__ CoreTime: _TMIsAutomaticTimeZoneEnabled
__ CoreVideo: _CVPixelBufferCreateWithIOSurface
__ CoreVideo: _CVPixelBufferGetIOSurface
__ CoreVideo: _CVPixelBufferRelease
__ CoverSheet: _CSBoundsWidth
__ CoverSheet: _CSEventShouldBeLogged
__ CoverSheet: _CSMagSafeAccessoryTypeForSBSAccessoryType
__ CoverSheet: _CSPageViewControllerRoleCamera
__ CoverSheet: _CSSessionManagerAddSessionNotification
__ CoverSheet: _CSSessionManagerRemoveSessionNotification
__ CoverSheet: _NSStringFromCoverSheetEventType
__ CoverSheet: _OBJC_CLASS_$_CSAction
__ CoverSheet: _OBJC_CLASS_$_CSAppearance
__ CoverSheet: _OBJC_CLASS_$_CSBatteryChargingView
__ CoverSheet: _OBJC_CLASS_$_CSBehavior
__ CoverSheet: _OBJC_CLASS_$_CSComponent
__ CoverSheet: _OBJC_CLASS_$_CSContentCutoutBoundsCalculator
__ CoverSheet: _OBJC_CLASS_$_CSCoverSheetViewBase
__ CoverSheet: _OBJC_CLASS_$_CSCoverSheetViewController
__ CoverSheet: _OBJC_CLASS_$_CSCoverSheetViewControllerBase
__ CoverSheet: _OBJC_CLASS_$_CSEvent
__ CoverSheet: _OBJC_CLASS_$_CSHomeAffordanceView
__ CoverSheet: _OBJC_CLASS_$_CSLockScreenDomain
__ CoverSheet: _OBJC_CLASS_$_CSMagSafeAccessory
__ CoverSheet: _OBJC_CLASS_$_CSMainPageContentViewController
__ CoverSheet: _OBJC_CLASS_$_CSModalView
__ CoverSheet: _OBJC_CLASS_$_CSPageControl
__ CoverSheet: _OBJC_CLASS_$_CSPageViewController
__ CoverSheet: _OBJC_CLASS_$_CSPoseidonViewController
__ CoverSheet: _OBJC_CLASS_$_CSPreciseDateProvider
__ CoverSheet: _OBJC_CLASS_$_CSQuickActionsViewController
__ CoverSheet: _OBJC_CLASS_$_CSRegion
__ CoverSheet: _OBJC_CLASS_$_CSSimpleLockScreenActionProvider
__ CoverSheet: _OBJC_CLASS_$_CSTodayPageViewController
__ CoverSheet: _OBJC_CLASS_$_CSVibrancyUtility
__ CoverSheet: _OBJC_METACLASS_$_CSCoverSheetViewBase
__ CoverSheet: _OBJC_METACLASS_$_CSCoverSheetViewControllerBase
__ CoverSheet: _OBJC_METACLASS_$_CSPageViewController
__ CrashReporterSupport: _GetThermalState
__ CrashReporterSupport: _OSAWriteLogForSubmission
__ CrashReporterSupport: _kOSAProblemTypeLowBattery
__ CrashReporterSupport: _logEventForAppleCare
__ DataAccessExpress: _OBJC_CLASS_$_DADConnection
__ DataMigration: _DMPerformMigration
__ DeviceManagement: _OBJC_CLASS_$_DMFCommunicationPolicyMonitor
__ DoNotDisturb: _OBJC_CLASS_$_DNDEventBehaviorResolutionService
__ DoNotDisturb: _OBJC_CLASS_$_DNDModeConfigurationService
__ DoNotDisturb: _OBJC_CLASS_$_DNDStateService
__ DoNotDisturbKit: _OBJC_CLASS_$_DNDAWDMetricsService
__ DoNotDisturbKit: _OBJC_CLASS_$_DNDNotificationsService
__ DoNotDisturbKit: _OBJC_CLASS_$_DNDToggleManager
__ DocumentManagerUICore: _DOCCreateDefaultHomeScreenWidgetIntent
__ DuetExpertCenter: _OBJC_CLASS_$__DECConsumer
__ DuetExpertCenter: _OBJC_CLASS_$__DECFeedbackProvider
__ DuetExpertCenter: _OBJC_CLASS_$__DECLocationAppItem
__ DuetExpertCenter: __DECPredictionReasonDeviceName
__ DuetExpertCenter: __DECPredictionReasonLocationOfInterestType
__ DuetExpertCenter: __kDECFeedbackMetadataLaunchSource
__ EmbeddedDataReset: _OBJC_CLASS_$_DDRResetOptions
__ EmbeddedDataReset: _OBJC_CLASS_$_DDRResetRequest
__ EmbeddedDataReset: _OBJC_CLASS_$_DDRResetService
__ FTClientServices: _OBJC_CLASS_$_FTCServiceAvailabilityCenter
__ FileProvider: _FPExtendBookmarkForDocumentURL
__ FindMyDevice: _OBJC_CLASS_$_FMDFMIPManager
__ FindMyDevice: _kLostModeChangedNotification
__ FocusUI: _OBJC_CLASS_$_FCUIBannerManager
__ Foundation: _NSAllMapTableKeys
__ Foundation: _NSAllMapTableValues
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSHomeDirectory
__ Foundation: _NSIntersectionRange
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLog
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSRequestConcreteImplementation
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromBOOL
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromPoint
__ Foundation: _NSStringFromProtocol
__ Foundation: _NSStringFromRange
__ Foundation: _NSStringFromRect
__ Foundation: _NSStringFromSelector
__ Foundation: _NSStringFromSize
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _NSUserDefaultsDidChangeNotification
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSCondition
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExtension
__ Foundation: _OBJC_CLASS_$_NSExtensionItem
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSISO8601DateFormatter
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSItemProvider
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMachPort
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSPointerFunctions
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRecursiveLock
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUbiquitousKeyValueStore
__ Foundation: _OBJC_CLASS_$_NSUserActivity
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ FrontBoard: _BSAbsoluteTimeFromMachTime
__ FrontBoard: _BSBundleIDForAuditToken
__ FrontBoard: _BSBundleIDForExecutablePath
__ FrontBoard: _BSBundlePathForExecutablePath
__ FrontBoard: _BSCGFloatEpsilon
__ FrontBoard: _BSCreateDeserializedArrayFromXPCDictionaryWithKey
__ FrontBoard: _BSCurrentUserDirectory
__ FrontBoard: _BSDegreesToRadians
__ FrontBoard: _BSDeserializeArrayOfBSXPCEncodableObjectsFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeBSXPCEncodableObjectFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeCFValueFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeCGRectFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeNSSecureEncodableObjectOfClassFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeStringFromXPCDictionaryWithKey
__ FrontBoard: _BSDeviceOrientationDescription
__ FrontBoard: _BSDispatchBlockCreateWithQualityOfService
__ FrontBoard: _BSDispatchMain
__ FrontBoard: _BSDispatchQueueAssert
__ FrontBoard: _BSDispatchQueueAssertMain
__ FrontBoard: _BSDispatchQueueAssertNotMain
__ FrontBoard: _BSDispatchQueueCreate
__ FrontBoard: _BSDispatchQueueCreateSerial
__ FrontBoard: _BSDispatchQueueCreateSerialWithQoS
__ FrontBoard: _BSDispatchQueueCreateWithAttributes
__ FrontBoard: _BSDispatchQueueCreateWithQualityOfService
__ FrontBoard: _BSDispatchTimeFromTimeInterval
__ FrontBoard: _BSEqualArrays
__ FrontBoard: _BSEqualBools
__ FrontBoard: _BSEqualDictionaries
__ FrontBoard: _BSEqualObjects
__ FrontBoard: _BSEqualSets
__ FrontBoard: _BSEqualStrings
__ FrontBoard: _BSErrorCodeDescriptionKey
__ FrontBoard: _BSExecutablePathForAuditToken
__ FrontBoard: _BSExecutablePathForPID
__ FrontBoard: _BSFloatApproximatelyEqualToFloat
__ FrontBoard: _BSFloatByLinearlyInterpolatingFloats
__ FrontBoard: _BSFloatEqualToFloat
__ FrontBoard: _BSFloatGreaterThanFloat
__ FrontBoard: _BSFloatGreaterThanOrEqualToFloat
__ FrontBoard: _BSFloatIsOne
__ FrontBoard: _BSFloatIsZero
__ FrontBoard: _BSFloatLessThanFloat
__ FrontBoard: _BSFloatLessThanOrEqualToFloat
__ FrontBoard: _BSFloatRoundForScale
__ FrontBoard: _BSFormattedTimeFromSeconds
__ FrontBoard: _BSInterfaceOrientationDescription
__ FrontBoard: _BSInterfaceOrientationIsLandscape
__ FrontBoard: _BSInterfaceOrientationIsValid
__ FrontBoard: _BSInterfaceOrientationMaskDescription
__ FrontBoard: _BSIntervalMap
__ FrontBoard: _BSIntervalSubIntervalValueForValue
__ FrontBoard: _BSIntervalUnit
__ FrontBoard: _BSIsBeingDebugged
__ FrontBoard: _BSLogAddStateCaptureBlockWithTitle
__ FrontBoard: _BSLogGetAllRegisteredStateCaptureBlocks
__ FrontBoard: _BSLogStateCaptureCheckPlistSizeIsPermitted
__ FrontBoard: _BSMachSendRightRelease
__ FrontBoard: _BSNSStringFromCGRect
__ FrontBoard: _BSPIDExists
__ FrontBoard: _BSPIDForAuditToken
__ FrontBoard: _BSPathExistsOnSystemPartition
__ FrontBoard: _BSPointEqualToPoint
__ FrontBoard: _BSPointRoundForScale
__ FrontBoard: _BSPrettyFunctionName
__ FrontBoard: _BSProcessDescriptionForPID
__ FrontBoard: _BSProcessNameForPID
__ FrontBoard: _BSPthreadCurrentEffectiveQualityOfService
__ FrontBoard: _BSRectByLinearlyInterpolatingRects
__ FrontBoard: _BSRectEqualToRect
__ FrontBoard: _BSRectRoundForScale
__ FrontBoard: _BSRectWithSize
__ FrontBoard: _BSRunLoopPerformAfterCACommit
__ FrontBoard: _BSSerializeArrayOfBSXPCEncodableObjectsToXPCDictionaryWithKey
__ FrontBoard: _BSSerializeBSXPCEncodableObjectToXPCDictionaryWithKey
__ FrontBoard: _BSSerializeCFValueToXPCDictionaryWithKey
__ FrontBoard: _BSSerializeCGRectToXPCDictionaryWithKey
__ FrontBoard: _BSSerializeDataToXPCDictionaryWithKey
__ FrontBoard: _BSSetMainThreadPriorityFixedForUI
__ FrontBoard: _BSSettingFlagDescription
__ FrontBoard: _BSSettingFlagForBool
__ FrontBoard: _BSSettingFlagIfYes
__ FrontBoard: _BSSettingFlagIsExplicitNo
__ FrontBoard: _BSSettingFlagIsYes
__ FrontBoard: _BSSizeEqualToSize
__ FrontBoard: _BSSizeGreaterThanOrEqualToSize
__ FrontBoard: _BSSizeLessThanSize
__ FrontBoard: _BSSizeRoundForScale
__ FrontBoard: _BSStringFromBOOL
__ FrontBoard: _BSSystemHasCapability
__ FrontBoard: _BSTemporaryFileAtPath
__ FrontBoard: _BSTimeUntilNextClockMinute
__ FrontBoard: _BSTimerIntervalMin
__ FrontBoard: _BSTransactionErrorDomain
__ FrontBoard: _BSTransactionErrorReasonKey
__ FrontBoard: _FBSActivateForEventOptionTypeBackgroundContentFetching
__ FrontBoard: _FBSApplicationLibraryErrorDomain
__ FrontBoard: _FBSApplicationLibraryLoggingSubsystem
__ FrontBoard: _FBSApplicationTerminationReasonDescription
__ FrontBoard: _FBSApplicationTerminationReasonIsGraceful
__ FrontBoard: _FBSDebugOptionKeyExtensionBundleID
__ FrontBoard: _FBSDebugOptionKeyExtensionPointID
__ FrontBoard: _FBSDisplayHDRModeToCADisplayHDRMode
__ FrontBoard: _FBSDisplayLayoutElementControlCenterIdentifier
__ FrontBoard: _FBSDisplayLayoutElementLockScreenIdentifier
__ FrontBoard: _FBSDisplayLayoutElementSiriIdentifier
__ FrontBoard: _FBSDisplayOverscanCompensationDescription
__ FrontBoard: _FBSDisplayOverscanCompensationIsValid
__ FrontBoard: _FBSDisplayOverscanCompensationToCADisplayOverscanAdjustment
__ FrontBoard: _FBSInstallTypeIsCloudDemoted
__ FrontBoard: _FBSOpenApplicationErrorCreate
__ FrontBoard: _FBSOpenApplicationOptionKeyActions
__ FrontBoard: _FBSOpenApplicationOptionKeyActivateAsClassic
__ FrontBoard: _FBSOpenApplicationOptionKeyActivateForEvent
__ FrontBoard: _FBSOpenApplicationOptionKeyActivateSuspended
__ FrontBoard: _FBSOpenApplicationOptionKeyAppLink4LS
__ FrontBoard: _FBSOpenApplicationOptionKeyBrowserAppLinkState4LS
__ FrontBoard: _FBSOpenApplicationOptionKeyDebuggingOptions
__ FrontBoard: _FBSOpenApplicationOptionKeyLaunchImageName
__ FrontBoard: _FBSOpenApplicationOptionKeyLaunchIntent
__ FrontBoard: _FBSOpenApplicationOptionKeyLaunchOrigin
__ FrontBoard: _FBSOpenApplicationOptionKeyPayloadAnnotation
__ FrontBoard: _FBSOpenApplicationOptionKeyPayloadOptions
__ FrontBoard: _FBSOpenApplicationOptionKeyPayloadURL
__ FrontBoard: _FBSOpenApplicationOptionKeyPromptUnlockDevice
__ FrontBoard: _FBSOpenApplicationOptionKeyUnlockDevice
__ FrontBoard: _FBSOpenApplicationWithNewScene
__ FrontBoard: _FBSProcessPrettyDescription
__ FrontBoard: _FBSProcessResourceAllowanceScale
__ FrontBoard: _FBSSceneLevelMaximum
__ FrontBoard: _FBSSceneSnapshotActionResponseForErrorCode
__ FrontBoard: _FBSSceneVisibilityEndowmentNamespace
__ FrontBoard: _FBServiceClientAuthenticatorErrorDomain
__ FrontBoard: _FBSystemAppBundleID
__ FrontBoard: _FBSystemShellInitialize
__ FrontBoard: _FBTMilestoneSynchronizedCommit
__ FrontBoard: _FBWorkspaceLogCommon
__ FrontBoard: _FBWorkspaceLogSceneLayout
__ FrontBoard: _FBWorkspaceLogTransaction
__ FrontBoard: _FBWorkspaceLogTransactionVerbose
__ FrontBoard: _NSStringFromFBProcessTaskState
__ FrontBoard: _NSStringFromFBProcessVisibility
__ FrontBoard: _OBJC_CLASS_$_BSAbsoluteMachTimer
__ FrontBoard: _OBJC_CLASS_$_BSAbstractDefaultDomain
__ FrontBoard: _OBJC_CLASS_$_BSAction
__ FrontBoard: _OBJC_CLASS_$_BSActionResponder
__ FrontBoard: _OBJC_CLASS_$_BSActionResponse
__ FrontBoard: _OBJC_CLASS_$_BSAnimationSettings
__ FrontBoard: _OBJC_CLASS_$_BSAtomicSignal
__ FrontBoard: _OBJC_CLASS_$_BSAuditToken
__ FrontBoard: _OBJC_CLASS_$_BSBlockSentinel
__ FrontBoard: _OBJC_CLASS_$_BSBlockTransaction
__ FrontBoard: _OBJC_CLASS_$_BSCFBundle
__ FrontBoard: _OBJC_CLASS_$_BSCompoundAssertion
__ FrontBoard: _OBJC_CLASS_$_BSCopyingCacheSet
__ FrontBoard: _OBJC_CLASS_$_BSCornerRadiusConfiguration
__ FrontBoard: _OBJC_CLASS_$_BSDateFormatterCache
__ FrontBoard: _OBJC_CLASS_$_BSDateTimeCache
__ FrontBoard: _OBJC_CLASS_$_BSDescriptionBuilder
__ FrontBoard: _OBJC_CLASS_$_BSDescriptionStream
__ FrontBoard: _OBJC_CLASS_$_BSDispatchQueueAttributes
__ FrontBoard: _OBJC_CLASS_$_BSEqualsBuilder
__ FrontBoard: _OBJC_CLASS_$_BSEventQueue
__ FrontBoard: _OBJC_CLASS_$_BSEventQueueEvent
__ FrontBoard: _OBJC_CLASS_$_BSEventQueueLock
__ FrontBoard: _OBJC_CLASS_$_BSHashBuilder
__ FrontBoard: _OBJC_CLASS_$_BSMachPortSendRight
__ FrontBoard: _OBJC_CLASS_$_BSMonotonicReferenceTime
__ FrontBoard: _OBJC_CLASS_$_BSMutableIntegerMap
__ FrontBoard: _OBJC_CLASS_$_BSMutableSettings
__ FrontBoard: _OBJC_CLASS_$_BSPathProviderFactory
__ FrontBoard: _OBJC_CLASS_$_BSPlatform
__ FrontBoard: _OBJC_CLASS_$_BSPluginManager
__ FrontBoard: _OBJC_CLASS_$_BSPortDeathSentinel
__ FrontBoard: _OBJC_CLASS_$_BSPowerMonitor
__ FrontBoard: _OBJC_CLASS_$_BSProcessDeathWatcher
__ FrontBoard: _OBJC_CLASS_$_BSProcessHandle
__ FrontBoard: _OBJC_CLASS_$_BSServiceConnection
__ FrontBoard: _OBJC_CLASS_$_BSServiceConnectionListener
__ FrontBoard: _OBJC_CLASS_$_BSServiceQuality
__ FrontBoard: _OBJC_CLASS_$_BSSettings
__ FrontBoard: _OBJC_CLASS_$_BSSimpleAssertion
__ FrontBoard: _OBJC_CLASS_$_BSSpringAnimationSettings
__ FrontBoard: _OBJC_CLASS_$_BSTimer
__ FrontBoard: _OBJC_CLASS_$_BSTransaction
__ FrontBoard: _OBJC_CLASS_$_BSWatchdog
__ FrontBoard: _OBJC_CLASS_$_FBApplicationProcess
__ FrontBoard: _OBJC_CLASS_$_FBApplicationProcessLaunchTransaction
__ FrontBoard: _OBJC_CLASS_$_FBApplicationProcessWatchdogPolicy
__ FrontBoard: _OBJC_CLASS_$_FBApplicationUpdateScenesTransaction
__ FrontBoard: _OBJC_CLASS_$_FBDisplayLayoutElement
__ FrontBoard: _OBJC_CLASS_$_FBDisplayLayoutTransition
__ FrontBoard: _OBJC_CLASS_$_FBDisplayManager
__ FrontBoard: _OBJC_CLASS_$_FBExtensionProcess
__ FrontBoard: _OBJC_CLASS_$_FBLocalSynchronousSceneClientProvider
__ FrontBoard: _OBJC_CLASS_$_FBMainDisplayLayoutPublisher
__ FrontBoard: _OBJC_CLASS_$_FBMutableProcessExecutionContext
__ FrontBoard: _OBJC_CLASS_$_FBProcess
__ FrontBoard: _OBJC_CLASS_$_FBProcessManager
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationDataStore
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationInfo
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationLibrary
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationLibraryConfiguration
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationPlaceholder
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationUninstallOptions
__ FrontBoard: _OBJC_CLASS_$_FBSCAContextSceneLayer
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayConfiguration
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayIdentity
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayLayoutMonitor
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayLayoutMonitorConfiguration
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayLayoutPublisher
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayLayoutPublisherConfiguration
__ FrontBoard: _OBJC_CLASS_$_FBSExtensionInfo
__ FrontBoard: _OBJC_CLASS_$_FBSMutableDisplayConfigurationRequest
__ FrontBoard: _OBJC_CLASS_$_FBSMutableSceneDefinition
__ FrontBoard: _OBJC_CLASS_$_FBSMutableSceneParameters
__ FrontBoard: _OBJC_CLASS_$_FBSMutableSceneSettings
__ FrontBoard: _OBJC_CLASS_$_FBSOpenApplicationService
__ FrontBoard: _OBJC_CLASS_$_FBSProcessResourceProvision
__ FrontBoard: _OBJC_CLASS_$_FBSProcessWatchdogPolicy
__ FrontBoard: _OBJC_CLASS_$_FBSSceneClientIdentity
__ FrontBoard: _OBJC_CLASS_$_FBSSceneClientSettings
__ FrontBoard: _OBJC_CLASS_$_FBSSceneClientSettingsDiffInspector
__ FrontBoard: _OBJC_CLASS_$_FBSSceneIdentity
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSettings
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSnapshotContext
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSnapshotRequest
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSnapshotRequestAction
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSpecification
__ FrontBoard: _OBJC_CLASS_$_FBSSceneTransitionContext
__ FrontBoard: _OBJC_CLASS_$_FBSSerialQueue
__ FrontBoard: _OBJC_CLASS_$_FBSServiceFacility
__ FrontBoard: _OBJC_CLASS_$_FBSSystemService
__ FrontBoard: _OBJC_CLASS_$_FBSXPCMessage
__ FrontBoard: _OBJC_CLASS_$_FBSceneManager
__ FrontBoard: _OBJC_CLASS_$_FBSceneSnapshotAction
__ FrontBoard: _OBJC_CLASS_$_FBSceneSnapshotContext
__ FrontBoard: _OBJC_CLASS_$_FBServiceClientAuthenticator
__ FrontBoard: _OBJC_CLASS_$_FBSynchronizedTransactionGroup
__ FrontBoard: _OBJC_CLASS_$_FBSystemService
__ FrontBoard: _OBJC_CLASS_$_FBSystemShell
__ FrontBoard: _OBJC_CLASS_$_FBUpdateSceneTransaction
__ FrontBoard: _OBJC_CLASS_$_FBWorkspaceEvent
__ FrontBoard: _OBJC_CLASS_$_FBWorkspaceEventQueue
__ FrontBoard: _OBJC_CLASS_$_FBWorkspaceEventQueueLock
__ FrontBoard: _OBJC_METACLASS_$_BSAbstractDefaultDomain
__ FrontBoard: _OBJC_METACLASS_$_BSSimpleAssertion
__ FrontBoard: _OBJC_METACLASS_$_BSTimer
__ FrontBoard: _OBJC_METACLASS_$_BSTransaction
__ FrontBoard: _OBJC_METACLASS_$_FBApplicationUpdateScenesTransaction
__ FrontBoard: _OBJC_METACLASS_$_FBSApplicationPlaceholder
__ FrontBoard: _OBJC_METACLASS_$_FBSServiceFacility
__ FrontBoard: __BSHasInternalSettings
__ FrontBoard: __BSIsInternalInstall
__ FrontBoard: __BSSafeCast
__ FrontBoard: __bs_set_crash_log_message
__ GeoServices: _OBJC_CLASS_$_GEOCountryConfiguration
__ GraphicsServices: _GSEventDeviceOrientation
__ GraphicsServices: _GSEventIsHardwareKeyboardAttached
__ GraphicsServices: _GSMainScreenOrientation
__ GraphicsServices: _GSMainScreenPixelSize
__ GraphicsServices: _GSSendAppPreferencesChanged
__ GraphicsServices: _kGSEventHardwareKeyboardAvailabilityChangedNotification
__ IAP: _kIAPServerDiedNotification
__ IOKit: _IOHIDEventCreateKeyboardEvent
__ IOKit: _IOHIDEventCreateProximtyEvent
__ IOKit: _IOHIDEventGetChildren
__ IOKit: _IOHIDEventGetFloatValue
__ IOKit: _IOHIDEventGetIntegerValue
__ IOKit: _IOHIDEventGetPhase
__ IOKit: _IOHIDEventGetSenderID
__ IOKit: _IOHIDEventGetTimeStamp
__ IOKit: _IOHIDEventGetType
__ IOKit: _IOHIDEventSetIntegerValue
__ IOKit: _IOIteratorNext
__ IOKit: _IONotificationPortCreate
__ IOKit: _IONotificationPortDestroy
__ IOKit: _IONotificationPortGetRunLoopSource
__ IOKit: _IOObjectRelease
__ IOKit: _IOPMAssertionCreateWithProperties
__ IOKit: _IOPMAssertionRelease
__ IOKit: _IOPMAssertionSetProperty
__ IOKit: _IOPMCopyAssertionsByProcess
__ IOKit: _IOPMCopyScheduledPowerEvents
__ IOKit: _IOPSCopyPowerSourcesByType
__ IOKit: _IOPSCopyPowerSourcesList
__ IOKit: _IOPSGetPowerSourceDescription
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IOServiceAddInterestNotification
__ IOKit: _IOServiceAddMatchingNotification
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceMatching
__ IOKit: _IOServiceOpen
__ IOKit: ___IOAVClassMatching
__ IOKit: _kIOMainPortDefault
__ IOSurface: _IOSurfaceCreateMachPort
__ IOSurface: _IOSurfaceGetPixelFormat
__ IOSurface: _IOSurfaceGetTypeID
__ IOSurface: _OBJC_CLASS_$_IOSurface
__ IconServices: _OBJC_CLASS_$_IFImage
__ IconServices: _OBJC_CLASS_$_ISIcon
__ IconServices: _OBJC_CLASS_$_ISImageDescriptor
__ IconServices: _kISImageDescriptorNotification
__ IconServices: _kISImageDescriptorSpotlight
__ IconServices: _kISImageDescriptorTableUIName
__ IdleTimerHosting: _OBJC_CLASS_$_ITAttentionAwareIdleTimer
__ IdleTimerHosting: _OBJC_CLASS_$_ITIdleTimeout
__ IdleTimerHosting: _OBJC_CLASS_$_ITIdleTimerDescriptor
__ IdleTimerServices: _OBJC_CLASS_$_ITIdleTimerState
__ IdleTimerServices: _OBJC_CLASS_$_ITIdleTimerStateService
__ ImageIO: _CGImageCreateFromIOSurface
__ ImageIO: _CGImageSourceCreateImageAtIndex
__ ImageIO: _CGImageSourceCreateThumbnailAtIndex
__ ImageIO: _CGImageSourceCreateWithDataProvider
__ ImageIO: _CGImageSourceGetCount
__ ImageIO: _kCGImageComponentTypeRequest
__ ImageIO: _kCGImagePreferredColorConversionMode
__ ImageIO: _kCGImageSkipCIF10SRGBCheck
__ ImageIO: _kCGImageSourceCreateThumbnailFromImageAlways
__ ImageIO: _kCGImageSourceShouldCacheImmediately
__ ImageIO: _kCGImageSourceThumbnailMaxPixelSize
__ Intents: _OBJC_CLASS_$_INIntent
__ IntlPreferences: _OBJC_CLASS_$_IntlUtility
__ KeyboardArbiter: _OBJC_CLASS_$__UIKeyboardArbiter_ForSpringBoard
__ KeyboardArbiter: __UIKeyboardArbiter_SceneIdentifier
__ LocalAuthentication: _OBJC_CLASS_$_LAContext
__ LoginKit: _OBJC_CLASS_$_LKLogoutSupport
__ LoginKit: _OBJC_CLASS_$_LKStartupSupport
__ LowPowerMode: _OBJC_CLASS_$__PMLowPowerMode
__ LowPowerMode: _kPMLPMSourceSpringBoardAlert
__ MallocStackLogging: _msl_turn_on_stack_logging
__ ManagedConfiguration: _MCEffectiveSettingsChangedNotification
__ ManagedConfiguration: _MCFeatureAllowVoiceDialing
__ ManagedConfiguration: _MCFeatureAppRemovalAllowed
__ ManagedConfiguration: _MCFeatureAttentionAwareAutoLockAllowed
__ ManagedConfiguration: _MCFeatureAutoLockTime
__ ManagedConfiguration: _MCFeatureCardsWhileLockedAllowed
__ ManagedConfiguration: _MCFeatureFindMyFriendsModificationAllowed
__ ManagedConfiguration: _MCFeatureLockScreenNotificationsViewAllowed
__ ManagedConfiguration: _MCFeatureLockScreenTodayViewAllowed
__ ManagedConfiguration: _MCFeatureMaximumAppsRating
__ ManagedConfiguration: _MCFeatureNewsTodayAllowed
__ ManagedConfiguration: _MCFeatureScreenShotAllowed
__ ManagedConfiguration: _MCFeatureTodayViewAllowed
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MaterialKit: _NSStringFromMTLumaDodgePillBackgroundLuminance
__ MaterialKit: _NSStringFromMTLumaDodgePillStyle
__ MaterialKit: _OBJC_CLASS_$_MTLumaDodgePillSettings
__ MaterialKit: _OBJC_CLASS_$_MTLumaDodgePillView
__ MaterialKit: _OBJC_CLASS_$_MTMaterialShadowView
__ MaterialKit: _OBJC_CLASS_$_MTMaterialView
__ MaterialKit: _OBJC_CLASS_$_MTVisualStylingProvider
__ MaterialKit: __MTCoreMaterialRecipeNameForMaterialRecipeAndUserInterfaceStyle
__ MediaControls: _OBJC_CLASS_$_MRUVolumeHUDRouteDescriptionProvider
__ MediaControls: _OBJC_CLASS_$_MediaControlsVolumeSliderView
__ MediaControls: _OBJC_METACLASS_$_MediaControlsVolumeSliderView
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingController
__ MediaPlayer: _OBJC_CLASS_$_MPMediaControlsStatusBarStyleOverridesCoordinator
__ MediaRemote: _MRApplicationActivityGetStatus
__ MediaRemote: _MRContentItemCopyNowPlayingInfo
__ MediaRemote: _MRMediaRemoteGetLocalOrigin
__ MediaRemote: _MRMediaRemoteGetNowPlayingClientForOrigin
__ MediaRemote: _MRMediaRemoteRegisterForNowPlayingNotifications
__ MediaRemote: _MRMediaRemoteRequestNowPlayingPlaybackQueueSync
__ MediaRemote: _MRMediaRemoteSendCommand
__ MediaRemote: _MRMediaRemoteUnregisterForNowPlayingNotifications
__ MediaRemote: _MRNowPlayingClientGetProcessIdentifier
__ MediaRemote: _MRPlaybackQueueGetContentItemAtOffset
__ MediaRemote: _MRPlaybackQueueRequestCreateDefault
__ MediaRemote: _kMRApplicationActivityStatusDidChangeNotification
__ MediaRemote: _kMRApplicationActivityUserInfoKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesRepeatModeKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesShuffleModeKey
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationPIDUserInfoKey
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoQueueIndex
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRepeatMode
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTotalQueueCount
__ MediaRemote: _kMRMediaRemoteOptionPredefinedPlaybackRate
__ MediaRemote: _kMRMediaRemoteOptionRemoteControlInterfaceIdentifier
__ MobileActivation: _MAEGetActivationStateWithError
__ MobileActivation: _kMAActivationStateActivated
__ MobileActivation: _kMAActivationStateFactoryActivated
__ MobileActivation: _kMAActivationStateUnactivated
__ MobileActivation: _kNotificationActivationStateChanged
__ MobileBackup: _kMBManagerRestoreCompleteAlertStateChangedNotification
__ MobileBackup: _kMBManagerRestoreStateChangedNotification
__ MobileInstallation: _OBJC_CLASS_$_AITransactionLog
__ MobileStoreDemoKit: _OBJC_CLASS_$_MSDKManagedDevice
__ MobileStoreDemoKit: _kMMSDPropertyClaimBodyKey
__ MobileStoreDemoKit: _kMMSDPropertyClaimLinkKey
__ MobileStoreDemoKit: _kMMSDPropertyClaimTitleKey
__ MobileTimer: _MTAlarmManagerNextAlarmChanged
__ MobileTimer: _MTAlarmManagerNextAlarmKey
__ MobileTimer: _MTAlarmManagerStateReset
__ MobileTimer: _OBJC_CLASS_$_MTAlarm
__ MobileTimer: _OBJC_CLASS_$_MTAlarmManager
__ MobileWiFi: _MobileWiFiContainsRadio
__ MobileWiFi: _WiFiDeviceClientCopyCurrentNetwork
__ MobileWiFi: _WiFiDeviceClientCopyProperty
__ MobileWiFi: _WiFiDeviceClientGetInterfaceName
__ MobileWiFi: _WiFiDeviceClientGetPower
__ MobileWiFi: _WiFiDeviceClientGetTypeID
__ MobileWiFi: _WiFiDeviceClientRegisterExtendedLinkCallback
__ MobileWiFi: _WiFiDeviceClientRegisterLQMCallback
__ MobileWiFi: _WiFiDeviceClientRegisterPowerCallback
__ MobileWiFi: _WiFiDeviceClientScanAsync
__ MobileWiFi: _WiFiDeviceClientScanCancel
__ MobileWiFi: _WiFiManagerClientCopyDevices
__ MobileWiFi: _WiFiManagerClientCopyProperty
__ MobileWiFi: _WiFiManagerClientCreate
__ MobileWiFi: _WiFiManagerClientRegisterDeviceAttachmentCallback
__ MobileWiFi: _WiFiManagerClientRegisterServerRestartCallback
__ MobileWiFi: _WiFiManagerClientScheduleWithRunLoop
__ MobileWiFi: _WiFiManagerClientSetPower
__ MobileWiFi: _WiFiManagerClientSetProperty
__ MobileWiFi: _WiFiManagerClientUnscheduleFromRunLoop
__ MobileWiFi: _WiFiNetworkGet11dCountryCodeFromIe
__ MobileWiFi: _WiFiNetworkGetSSID
__ MobileWiFi: _WiFiNetworkIsApplePersonalHotspot
__ MobileWiFi: _kWiFiScaledRSSIKey
__ Netrb: __NETRBClientCreate
__ Netrb: __NETRBClientDestroy
__ Netrb: __NETRBClientGetDynamicStoreKey
__ Network: _OBJC_CLASS_$_NWSystemPathMonitor
__ NewsServicesInternal: _OBJC_CLASS_$_NSSNewsTodayWidgetPlacementPolicyProvider
__ NotesPreviewKit: _NPNotePreviewKeyChrome
__ NotesPreviewKit: _NPNotePreviewKeyPreview
__ NotesPreviewKit: _OBJC_CLASS_$_NPNotePreviewProvider
__ NotificationCenter: _NCAppLaunchOriginWidget
__ PassKitCore: _OBJC_CLASS_$_PKPassLibrary
__ PassKitCore: _PKLegacyStockholmLog
__ PassKitUI: _OBJC_CLASS_$_PKPassSnapshotter
__ Pegasus: _OBJC_CLASS_$_PGPictureInPictureController
__ Pegasus: _OBJC_CLASS_$_PGPictureInPictureViewController
__ Pegasus: _PGPictureInPictureViewControllerPrefersIdleTimerDisabledDidChangeNotification
__ PersistentConnection: _OBJC_CLASS_$_PCPersistentInterfaceManager
__ PersistentConnection: _OBJC_CLASS_$_PCPersistentTimer
__ PhotoLibrary: _OBJC_CLASS_$_PLiPhotoMigrationSupport
__ PhotoLibrary: _PLCleanupForStoreDemoMode
__ PlatterKit: _OBJC_CLASS_$_PLPillContentItem
__ PlatterKit: _OBJC_CLASS_$_PLPillView
__ PlatterKit: _OBJC_CLASS_$_PLPlatterView
__ PlatterKit: _OBJC_METACLASS_$_PLPlatterView
__ PointerUIServices: _OBJC_CLASS_$_PSPointerClientController
__ PowerLog: _PLLogRegisteredEvent
__ Preferences: _OBJC_CLASS_$_PSSpecifier
__ Preferences: _PSCityForSpecifier
__ Preferences: _PSDefaultsKey
__ Preferences: _PSKeyNameKey
__ Preferences: _PSLocalizedStringFromTableInBundleForLanguage
__ Preferences: _PSMigrateSoundsDefaults_10_0
__ ProactiveEventTracker: _OBJC_CLASS_$_PETDistributionEventTracker
__ ProactiveEventTracker: _OBJC_CLASS_$_PETEventProperty
__ ProactiveEventTracker: _OBJC_CLASS_$_PETGoalConversionEventTracker
__ ProactiveEventTracker: _OBJC_CLASS_$_PETScalarEventTracker
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_CLASS_$_PBDataReader
__ ProtocolBuffer: _OBJC_CLASS_$_PBDataWriter
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ PrototypeTools: _OBJC_CLASS_$_PTButtonRow
__ PrototypeTools: _OBJC_CLASS_$_PTChoiceRow
__ PrototypeTools: _OBJC_CLASS_$_PTDefaults
__ PrototypeTools: _OBJC_CLASS_$_PTDomain
__ PrototypeTools: _OBJC_CLASS_$_PTDoubleTestRecipe
__ PrototypeTools: _OBJC_CLASS_$_PTDrillDownRow
__ PrototypeTools: _OBJC_CLASS_$_PTEditFloatRow
__ PrototypeTools: _OBJC_CLASS_$_PTEditStringRow
__ PrototypeTools: _OBJC_CLASS_$_PTModule
__ PrototypeTools: _OBJC_CLASS_$_PTRestoreDefaultSettingsRowAction
__ PrototypeTools: _OBJC_CLASS_$_PTSSliderRow
__ PrototypeTools: _OBJC_CLASS_$_PTSettings
__ PrototypeTools: _OBJC_CLASS_$_PTSingleTestRecipe
__ PrototypeTools: _OBJC_CLASS_$_PTSliderRow
__ PrototypeTools: _OBJC_CLASS_$_PTSwitchRow
__ PrototypeTools: _OBJC_CLASS_$_PTToggleTestRecipe
__ PrototypeTools: _OBJC_METACLASS_$_PTDomain
__ PrototypeTools: _OBJC_METACLASS_$_PTSettings
__ PrototypeToolsUI: _PTUIClientInterface
__ PrototypeToolsUI: _PTUIMachService
__ PrototypeToolsUI: _PTUIServerInterface
__ QuartzCore: _CACurrentMediaTime
__ QuartzCore: _CAFrameRateRangeDefault
__ QuartzCore: _CAFrameRateRangeMake
__ QuartzCore: _CALayerGetRenderId
__ QuartzCore: _CARenderRelease
__ QuartzCore: _CARenderRetain
__ QuartzCore: _CARenderServerCaptureLayerWithTransform
__ QuartzCore: _CARenderServerSetCacheAsynchronousSurfaces
__ QuartzCore: _CARenderServerSnapshot
__ QuartzCore: _CATransform3DConcat
__ QuartzCore: _CATransform3DEqualToTransform
__ QuartzCore: _CATransform3DGetAffineTransform
__ QuartzCore: _CATransform3DIdentity
__ QuartzCore: _CATransform3DIsAffine
__ QuartzCore: _CATransform3DMakeAffineTransform
__ QuartzCore: _CATransform3DMakeRotation
__ QuartzCore: _CATransform3DMakeScale
__ QuartzCore: _CATransform3DMakeTranslation
__ QuartzCore: _CATransform3DRotate
__ QuartzCore: _CATransform3DScale
__ QuartzCore: _CATransform3DTranslate
__ QuartzCore: _CATransform3DTranslateRight
__ QuartzCore: _CA_CGRectApplyTransform
__ QuartzCore: _OBJC_CLASS_$_CAAnimation
__ QuartzCore: _OBJC_CLASS_$_CABackdropLayer
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CACloningTerminatorLayer
__ QuartzCore: _OBJC_CLASS_$_CAContext
__ QuartzCore: _OBJC_CLASS_$_CADisplay
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CADisplayModeCriteria
__ QuartzCore: _OBJC_CLASS_$_CADisplayProperties
__ QuartzCore: _OBJC_CLASS_$_CADistanceFieldLayer
__ QuartzCore: _OBJC_CLASS_$_CAFilter
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CAKeyframeAnimation
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAMatchMoveAnimation
__ QuartzCore: _OBJC_CLASS_$_CAMatchPropertyAnimation
__ QuartzCore: _OBJC_CLASS_$_CAMediaTimingFunction
__ QuartzCore: _OBJC_CLASS_$_CAPortalLayer
__ QuartzCore: _OBJC_CLASS_$_CAReplicatorLayer
__ QuartzCore: _OBJC_CLASS_$_CAShapeLayer
__ QuartzCore: _OBJC_CLASS_$_CASpringAnimation
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _OBJC_CLASS_$_CATransition
__ QuartzCore: _OBJC_CLASS_$_CAValueFunction
__ QuartzCore: _OBJC_METACLASS_$_CALayer
__ QuartzCore: _kCAContextDisplayable
__ QuartzCore: _kCAContextEnablePixelDoubling
__ QuartzCore: _kCAContextEnablePixelQuadrupling
__ QuartzCore: _kCAContextSecure
__ QuartzCore: _kCACornerCurveCircular
__ QuartzCore: _kCACornerCurveContinuous
__ QuartzCore: _kCAFillModeBackwards
__ QuartzCore: _kCAFillModeBoth
__ QuartzCore: _kCAFilterAverageColor
__ QuartzCore: _kCAFilterBox
__ QuartzCore: _kCAFilterColorMatrix
__ QuartzCore: _kCAFilterColorMonochrome
__ QuartzCore: _kCAFilterColorSaturate
__ QuartzCore: _kCAFilterDestOut
__ QuartzCore: _kCAFilterGaussianBlur
__ QuartzCore: _kCAFilterInputAmount
__ QuartzCore: _kCAFilterInputColorMatrix
__ QuartzCore: _kCAFilterInputIntermediateBitDepth
__ QuartzCore: _kCAFilterInputQuality
__ QuartzCore: _kCAFilterInputRadius
__ QuartzCore: _kCAFilterInputValues
__ QuartzCore: _kCAFilterLuminanceCurveMap
__ QuartzCore: _kCAFilterNearest
__ QuartzCore: _kCAFilterOverlayBlendMode
__ QuartzCore: _kCAFilterPlusD
__ QuartzCore: _kCAFilterPlusL
__ QuartzCore: _kCAFilterSourceAtop
__ QuartzCore: _kCAFilterTrilinear
__ QuartzCore: _kCAFilterVibrantColorMatrix
__ QuartzCore: _kCALineCapRound
__ QuartzCore: _kCALineJoinRound
__ QuartzCore: _kCAMediaTimingFunctionDefault
__ QuartzCore: _kCAMediaTimingFunctionEaseIn
__ QuartzCore: _kCAMediaTimingFunctionEaseInEaseOut
__ QuartzCore: _kCAMediaTimingFunctionEaseOut
__ QuartzCore: _kCAMediaTimingFunctionLinear
__ QuartzCore: _kCASnapshotContextId
__ QuartzCore: _kCASnapshotDestination
__ QuartzCore: _kCASnapshotDisplayName
__ QuartzCore: _kCASnapshotEnforceSecureMode
__ QuartzCore: _kCASnapshotLayerId
__ QuartzCore: _kCASnapshotMode
__ QuartzCore: _kCASnapshotModeLayer
__ QuartzCore: _kCASnapshotTransform
__ QuartzCore: _kCATransactionCommitTime
__ QuartzCore: _kCATransitionFade
__ QuartzCore: _kCAValueFunctionRotateZ
__ RecapPerformanceTesting: _OBJC_CLASS_$_RPTScrollViewTestParameters
__ RecapPerformanceTesting: _OBJC_CLASS_$_RPTTestRunner
__ RecapPerformanceTesting: _RPTAmplitudeFromPagesOfView
__ RemoteStateDumpKit: _OBJC_CLASS_$_RSPeerToPeerServerController
__ RemoteStateDumpKit: _OBJC_CLASS_$_RSStateInfo
__ RunningBoardServices: _OBJC_CLASS_$_RBSAcquisitionCompletionAttribute
__ RunningBoardServices: _OBJC_CLASS_$_RBSAssertion
__ RunningBoardServices: _OBJC_CLASS_$_RBSCPUAccessGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSDefineRelativeStartTimeGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSDurationAttribute
__ RunningBoardServices: _OBJC_CLASS_$_RBSGPUAccessGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSJetsamPriorityGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSPreventIdleSleepGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessHandle
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessIdentifier
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessIdentity
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessMonitor
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessPredicate
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessStateDescriptor
__ RunningBoardServices: _OBJC_CLASS_$_RBSResistTerminationGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSRunningReasonAttribute
__ RunningBoardServices: _OBJC_CLASS_$_RBSTarget
__ RunningBoardServices: _OBJC_CLASS_$_RBSTerminateContext
__ RunningBoardServices: _OBJC_CLASS_$_RBSTerminateRequest
__ SOS: _OBJC_CLASS_$_SOSManager
__ SOS: _OBJC_CLASS_$_SOSUtilities
__ SPOwner: _OBJC_CLASS_$_SPBeaconManager
__ ScreenTimeUI: _OBJC_CLASS_$_STBlockingViewController
__ ScreenshotServices: _OBJC_CLASS_$_SSChromePlaceholderViewController
__ ScreenshotServices: _OBJC_CLASS_$_SSFlashView
__ ScreenshotServices: _OBJC_CLASS_$_SSScreenCaptureAbilityCheck
__ ScreenshotServices: _OBJC_CLASS_$_SSScreenCapturer
__ ScreenshotServices: _OBJC_CLASS_$_SSScreenCapturerPresentationOptions
__ ScreenshotServices: _OBJC_CLASS_$_SSScreenCapturerScreenshotOptions
__ ScreenshotServices: _OBJC_CLASS_$_SSScreenCapturerScreenshotOptionsCollection
__ Security: _SecTaskCreateFromSelf
__ Security: _SecTaskGetCodeSignStatus
__ SettingsFoundation: _SFRegulatoryImage
__ SetupAssistant: _BYSetupAssistantCreateAuthContext
__ SetupAssistant: _BYSetupAssistantEnsureShortLivedTokenUpgrade
__ SetupAssistant: _BYSetupAssistantHasCompletedInitialRun
__ SetupAssistant: _BYSetupAssistantLaunchMigrationSourceUINotification
__ SetupAssistant: _BYSetupAssistantLaunchMigrationSourceUIURL
__ SetupAssistant: _BYSetupAssistantNeedsToRun
__ SetupAssistant: _BYSetupAssistantPrepareLaunchSentinel
__ SetupAssistant: _BYSetupAssistantUISessionNoLongerExclusiveNotification
__ SiriActivation: _OBJC_CLASS_$_SASPresentationConnectionListener
__ SiriActivation: _OBJC_CLASS_$_SASSignalConnectionListener
__ SiriActivation: _OBJC_CLASS_$_SiriBluetoothDeviceSource
__ SiriActivation: _OBJC_CLASS_$_SiriBreadcrumbSource
__ SiriActivation: _OBJC_CLASS_$_SiriContinuityContext
__ SiriActivation: _OBJC_CLASS_$_SiriContinuitySource
__ SiriActivation: _OBJC_CLASS_$_SiriDirectActionContext
__ SiriActivation: _OBJC_CLASS_$_SiriDirectActionSource
__ SiriActivation: _OBJC_CLASS_$_SiriDismissalOptions
__ SiriActivation: _OBJC_CLASS_$_SiriLongPressButtonSource
__ SiriActivation: _OBJC_CLASS_$_SiriSimpleActivationSource
__ SiriActivation: _OBJC_CLASS_$_SiriTestingContext
__ SiriActivation: _OBJC_CLASS_$_SiriTestingSource
__ SiriUI: _OBJC_CLASS_$_SiriUICarDNDUseSiriHeaderViewController
__ SiriUI: _OBJC_CLASS_$_SiriUISuggestionsView
__ SiriUI: _SiriUICarDNDUseSiriExitFrictionAnalyticsContext
__ SiriUIActivation: _OBJC_CLASS_$_SiriPresentationSpringBoardMainScreenViewController
__ SiriUICore: _OBJC_CLASS_$_SUICFlamesView
__ SoftwareUpdateServices: _OBJC_CLASS_$_SUDescriptor
__ SoftwareUpdateServicesUI: _SUSUICreateInstallationKeybagWithSecret
__ SoftwareUpdateServicesUI: _SUSUIRequiresAlertPresentationAfterUpdate
__ SplashBoard: _OBJC_CLASS_$_XBApplicationController
__ SplashBoard: _OBJC_CLASS_$_XBApplicationLaunchCompatibilityInfo
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshot
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotFetchRequest
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotGenerationContext
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotManifest
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotPredicate
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotSortDescriptor
__ SplashBoard: _OBJC_CLASS_$_XBDisplayEdgeInsetsWrapper
__ SplashBoard: _OBJC_CLASS_$_XBLaunchImageProvider
__ SplashBoard: _OBJC_CLASS_$_XBLaunchStateRequest
__ SplashBoard: _OBJC_CLASS_$_XBMutableStatusBarSettings
__ SplashBoard: _OBJC_CLASS_$_XBSnapshotDataProviderContext
__ SplashBoard: _OBJC_METACLASS_$_XBApplicationController
__ SplashBoard: _OBJC_METACLASS_$_XBSnapshotDataProviderContext
__ SplashBoard: _XBApplicationLaunchCompatibilityInfoPersistenceKey
__ SplashBoard: _XBApplicationSnapshotContentTypeMaskForContentType
__ SplashBoard: _XBCachesPathForApplicationInfo
__ SplashBoard: _XBInterfaceOrientationForString
__ SplashBoard: _XBInterfaceOrientationMaskForInterfaceOrientation
__ SplashBoard: _XBInterfaceOrientationMaskForInterfaceOrientationPair
__ SplashBoard: _XBInterfaceOrientationStringLandscape
__ SplashBoard: _XBInterfaceOrientationStringLandscapeLeft
__ SplashBoard: _XBInterfaceOrientationStringLandscapeRight
__ SplashBoard: _XBInterfaceOrientationStringPortrait
__ SplashBoard: _XBInterfaceOrientationStringPortraitUpsideDown
__ SplashBoard: _XBInterfaceOrientationsAreOrthogonal
__ SplashBoard: _XBLaunchConfigurationNameKey
__ SplashBoard: _XBLaunchConfigurationsKey
__ SplashBoard: _XBLaunchStoryboardNameKey
__ SplashBoard: _XBLaunchStoryboardsKey
__ SplashBoard: _XBLogCapture
__ SplashBoard: _XBLogFileManifest
__ SplashBoard: _XBNextClockwiseInterfaceOrientation
__ SplashBoard: _XBOppositeInterfaceOrientation
__ SplashBoard: _XBRotationDegreesForInterfaceOrientationRotation
__ SplashBoard: _XBStatusBarStateMaskMatchesSettings
__ SplashBoard: _XBStringForInterfaceOrientation
__ SpotlightUI: _OBJC_CLASS_$_SPUIAppService
__ SpotlightUI: _OBJC_CLASS_$_SPUIDefaults
__ SpotlightUI: _OBJC_CLASS_$_SPUIRemoteSearchViewController
__ SpotlightUI: _OBJC_CLASS_$_SPUISearchBarController
__ SpringBoardFoundation: _NSStringFromIdleTimerDuration
__ SpringBoardFoundation: _NSStringFromIdleWarnMode
__ SpringBoardFoundation: _NSStringFromSBFIdleTimerMode
__ SpringBoardFoundation: _OBJC_CLASS_$_SBAbstractDefaults
__ SpringBoardFoundation: _OBJC_CLASS_$_SBC2GroupCompletion
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAnalyticsBackend
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAnalyticsClient
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAnimationSettings
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAnimationUtilities
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAuthenticationAssertionManager
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAuthenticationRequest
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFBackdropLegibilitySettingsProvider
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFBarSwipeBehavior
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFBuildVersion
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFCARenderer
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFCredentialSet
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFDashBoardViewMetrics
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFDateTimeController
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFDeviceLockOutController
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFFeatherBlurView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFFluidBehaviorSettings
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFFocusIsolationView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFFrameRateAssertion
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFGradient
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFHomeGrabberDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLegibilityDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLockScreenDateSubtitleView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLockScreenDateView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLockScreenMetrics
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLockScreenWakeAnimator
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFMappedImageCache
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFMobileKeyBag
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFMouseButtonDownGestureRecognizer
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFMutableLockScreenActionContext
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFOverridableDateProvider
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFSpringLoadedInteractionBehavior
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFSpringLoadedInteractionEffect
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFStatusBarLegibilityView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTapToWakeGestureRecognizer
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTapticEngine
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTodayGestureDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTouchPassThroughClippingView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTouchPassThroughView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTouchPassThroughViewController
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTouchPassThroughWindow
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTraitsArbiter
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTraitsArbiterAdoptionSettings
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTraitsArbiterAdoptionSettingsDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFUserAuthenticationController
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFUserAuthenticationModelEducationalMode
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFUserAuthenticationResponder
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWakeAnimationDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperCache
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperConfigurationManager
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperCoreAnalyticsLogger
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperOptions
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWebClipUtilities
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWindow
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFZStackResolver
__ SpringBoardFoundation: _OBJC_CLASS_$_SBLocalDefaults
__ SpringBoardFoundation: _OBJC_CLASS_$_SBLockScreenDefaults
__ SpringBoardFoundation: _OBJC_CLASS_$_SBPIPDefaults
__ SpringBoardFoundation: _OBJC_CLASS_$_SBReusableViewMap
__ SpringBoardFoundation: _OBJC_CLASS_$_SBTraitsRoleAFollowsRoleBPolicySpecifier
__ SpringBoardFoundation: _OBJC_CLASS_$_SBWakeLogger
__ SpringBoardFoundation: _OBJC_CLASS_$_SBWallpaperDefaults
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBAbstractDefaults
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFTouchPassThroughClippingView
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFTouchPassThroughView
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFTouchPassThroughViewController
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFTouchPassThroughWindow
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFView
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFWindow
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBTraitsRoleAFollowsRoleBPolicySpecifier
__ SpringBoardFoundation: _SBDeviceDidDisableDisplaySecureModeNotification
__ SpringBoardFoundation: _SBDeviceWillEnableDisplaySecureModeNotification
__ SpringBoardFoundation: _SBFAngleForRotationFromInterfaceOrientationToInterfaceOrientation
__ SpringBoardFoundation: _SBFBoolEquals
__ SpringBoardFoundation: _SBFCachesPathForSandboxPath
__ SpringBoardFoundation: _SBFCreateIOSurfaceForImage
__ SpringBoardFoundation: _SBFDescriptionForSensorType
__ SpringBoardFoundation: _SBFDeviceBlockStateDidChangeNotification
__ SpringBoardFoundation: _SBFEdgeInsetsRotateToInterfaceOrientation
__ SpringBoardFoundation: _SBFEffectiveArtworkSubtype
__ SpringBoardFoundation: _SBFEffectiveDeviceClass
__ SpringBoardFoundation: _SBFEffectiveHomeButtonType
__ SpringBoardFoundation: _SBFEnsureDirectoryExistsAtPath
__ SpringBoardFoundation: _SBFFirstInterfaceOrientationInInterfaceOrientationMask
__ SpringBoardFoundation: _SBFInterfaceOrientationMaskContainsInterfaceOrientation
__ SpringBoardFoundation: _SBFIsSymbolicLinkAtPath
__ SpringBoardFoundation: _SBFMKBErrorDomain
__ SpringBoardFoundation: _SBFModificationDateForPath
__ SpringBoardFoundation: _SBFModifiedImageNameForName
__ SpringBoardFoundation: _SBFSafeProtocolCast
__ SpringBoardFoundation: _SBFStringForAppearState
__ SpringBoardFoundation: _SBFStringForInterfaceOrientation
__ SpringBoardFoundation: _SBFStringForWallpaperVariant
__ SpringBoardFoundation: _SBFTraitsParticipantRoleAlert
__ SpringBoardFoundation: _SBFTraitsParticipantRoleAssistant
__ SpringBoardFoundation: _SBFTraitsParticipantRoleBanner
__ SpringBoardFoundation: _SBFTraitsParticipantRoleBiometricMonitorUI
__ SpringBoardFoundation: _SBFTraitsParticipantRoleCommandTab
__ SpringBoardFoundation: _SBFTraitsParticipantRoleControlCenter
__ SpringBoardFoundation: _SBFTraitsParticipantRoleCoverSheet
__ SpringBoardFoundation: _SBFTraitsParticipantRoleCoverSheetHomeScreenOverlay
__ SpringBoardFoundation: _SBFTraitsParticipantRoleFloatingDock
__ SpringBoardFoundation: _SBFTraitsParticipantRoleFloatingKeyboard
__ SpringBoardFoundation: _SBFTraitsParticipantRoleFullscreenOcclusionTestRecipe
__ SpringBoardFoundation: _SBFTraitsParticipantRoleHUD
__ SpringBoardFoundation: _SBFTraitsParticipantRoleHomeScreen
__ SpringBoardFoundation: _SBFTraitsParticipantRoleHomeScreenDimming
__ SpringBoardFoundation: _SBFTraitsParticipantRoleInteractiveScreenshotGesture
__ SpringBoardFoundation: _SBFTraitsParticipantRoleLoginBootToSetupAppZoomInAnimation
__ SpringBoardFoundation: _SBFTraitsParticipantRoleLoginWindowRecipe
__ SpringBoardFoundation: _SBFTraitsParticipantRoleMedusaDrag
__ SpringBoardFoundation: _SBFTraitsParticipantRoleModifierTimeline
__ SpringBoardFoundation: _SBFTraitsParticipantRolePictureInPicture
__ SpringBoardFoundation: _SBFTraitsParticipantRoleReachability
__ SpringBoardFoundation: _SBFTraitsParticipantRoleRecordingIndicator
__ SpringBoardFoundation: _SBFTraitsParticipantRoleRenderOverlayRecipe
__ SpringBoardFoundation: _SBFTraitsParticipantRoleScreenFlash
__ SpringBoardFoundation: _SBFTraitsParticipantRoleSecureApp
__ SpringBoardFoundation: _SBFTraitsParticipantRoleStartupFadeAnimation
__ SpringBoardFoundation: _SBFTraitsParticipantRoleSwitcher
__ SpringBoardFoundation: _SBFTraitsParticipantRoleTransientOverlay
__ SpringBoardFoundation: _SBFTraitsParticipantRoleTransientOverlayBackground
__ SpringBoardFoundation: _SBFTraitsParticipantRoleUnlockedDodgingLayer
__ SpringBoardFoundation: _SBFTraitsParticipantRoleWallpaper
__ SpringBoardFoundation: _SBFTraitsParticipantRoleWindowedAccessory
__ SpringBoardFoundation: _SBFUserAuthenticatedForFirstTimeNotification
__ SpringBoardFoundation: _SBFUserAuthenticationRequestCompletedAuthenticationTypeKey
__ SpringBoardFoundation: _SBFUserAuthenticationRequestCompletedNotification
__ SpringBoardFoundation: _SBFUserAuthenticationRequestCompletedResultKey
__ SpringBoardFoundation: _SBFUserAuthenticationRequestCompletedResultSuccess
__ SpringBoardFoundation: _SBFUserAuthenticationStateDidChangeNotification
__ SpringBoardFoundation: _SBFUserAuthenticationStateWasAuthenticatedKey
__ SpringBoardFoundation: _SBFWallpaperEnumerateVariantsForLocations
__ SpringBoardFoundation: _SBFWallpaperLocationForVariant
__ SpringBoardFoundation: _SBFWindowForViewControllerTransition
__ SpringBoardFoundation: _SBLogWallpaper
__ SpringBoardFoundation: _SBStringFromAnimationUpdateMode
__ SpringBoardFoundation: _SBWakeLoggerSourceFromBacklightChangeSource
__ SpringBoardFoundation: _SB_NSStringFromUIPressType
__ SpringBoardFoundation: __SBFLoggingMethodProem
__ SpringBoardFoundation: __SBFWallpaperPostExternalChangeNotificationBecauseIAmSpringBoard
__ SpringBoardFoundation: __SBF_Private_IsD16
__ SpringBoardFoundation: __SBF_Private_IsD17
__ SpringBoardFoundation: __SBF_Private_IsD63
__ SpringBoardFoundation: __SBF_Private_IsD64
__ SpringBoardFoundation: _convertDampingRatioAndResponseToTensionAndFriction
__ SpringBoardFoundation: _kBaseiPadSize
__ SpringBoardFoundation: _kBaseiPhoneSize
__ SpringBoardFoundation: _kSBFBarSwipeHomeAffordanceTranslationY
__ SpringBoardFoundation: _kSBSOSTriggerMechanismChangedNotification
__ SpringBoardHome: _BCUIAvocadoSizeFromSBHIconGridSizeClass
__ SpringBoardHome: _CHSWidgetFamilyForSBHIconGridSizeClass
__ SpringBoardHome: _OBJC_CLASS_$_SBCalendarIconImageProvider
__ SpringBoardHome: _OBJC_CLASS_$_SBCenterIconZoomAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBCrossfadeIconZoomAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBFloatingDockIconListView
__ SpringBoardHome: _OBJC_CLASS_$_SBFloatingDockViewController
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderBackgroundView
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderController
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderControllerAnimationContext
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderIconZoomAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderTitleTextField
__ SpringBoardHome: _OBJC_CLASS_$_SBHAddWidgetSheetViewController
__ SpringBoardHome: _OBJC_CLASS_$_SBHAppPredictionsElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHApplicationIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBHBatteriesElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHBookmark
__ SpringBoardHome: _OBJC_CLASS_$_SBHBookmarkIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBHCalendarApplicationIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBHClockApplicationIconImageView
__ SpringBoardHome: _OBJC_CLASS_$_SBHCustomIconElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHCustomIconListLayoutProvider
__ SpringBoardHome: _OBJC_CLASS_$_SBHDateHeaderViewController
__ SpringBoardHome: _OBJC_CLASS_$_SBHDefaultIconListLayoutProvider
__ SpringBoardHome: _OBJC_CLASS_$_SBHEditingDoneButton
__ SpringBoardHome: _OBJC_CLASS_$_SBHEditingWidgetButton
__ SpringBoardHome: _OBJC_CLASS_$_SBHFileWidgetExtensionProvider
__ SpringBoardHome: _OBJC_CLASS_$_SBHFilesElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHFloatingDockStyleConfiguration
__ SpringBoardHome: _OBJC_CLASS_$_SBHFocusMode
__ SpringBoardHome: _OBJC_CLASS_$_SBHHomeScreenDomain
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconApplicationShortcutListComposer
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconImageCache
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconManager
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconModel
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconStateArchiver
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconStateBuilder
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconStateUnarchiver
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconViewContextMenuStateController
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryCategoryIdentifier
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryCategoryMapProvider
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryMutableCategoryMap
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryPodFadeAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryPodIconZoomAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryViewController
__ SpringBoardHome: _OBJC_CLASS_$_SBHProxiedApplicationPlaceholder
__ SpringBoardHome: _OBJC_CLASS_$_SBHRootFolderVisualConfiguration
__ SpringBoardHome: _OBJC_CLASS_$_SBHRootSidebarController
__ SpringBoardHome: _OBJC_CLASS_$_SBHScrollableZoomingIconViewInteraction
__ SpringBoardHome: _OBJC_CLASS_$_SBHShortcutsFolderElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHShortcutsSingleElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHSidebarVisualConfiguration
__ SpringBoardHome: _OBJC_CLASS_$_SBHSidebarWidgetBootstrappingAdvisor
__ SpringBoardHome: _OBJC_CLASS_$_SBHSiriSuggestionsElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHSpecialAvocadoDescriptor
__ SpringBoardHome: _OBJC_CLASS_$_SBHTestAppIconDescriptor
__ SpringBoardHome: _OBJC_CLASS_$_SBHTestFakeWidgetIconDescriptor
__ SpringBoardHome: _OBJC_CLASS_$_SBHTestWidgetIconDescriptor
__ SpringBoardHome: _OBJC_CLASS_$_SBHTestWidgetStackIconDescriptor
__ SpringBoardHome: _OBJC_CLASS_$_SBHWidget
__ SpringBoardHome: _OBJC_CLASS_$_SBHomeScreenIconTransitionAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBIconBadgeView
__ SpringBoardHome: _OBJC_CLASS_$_SBIconFadeAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBIconImageView
__ SpringBoardHome: _OBJC_CLASS_$_SBIconListGridLayout
__ SpringBoardHome: _OBJC_CLASS_$_SBIconListGridLayoutConfiguration
__ SpringBoardHome: _OBJC_CLASS_$_SBIconListModel
__ SpringBoardHome: _OBJC_CLASS_$_SBIconListPageControl
__ SpringBoardHome: _OBJC_CLASS_$_SBIconListView
__ SpringBoardHome: _OBJC_CLASS_$_SBIconModelMemoryStore
__ SpringBoardHome: _OBJC_CLASS_$_SBIconModelPropertyListFileStore
__ SpringBoardHome: _OBJC_CLASS_$_SBIconModelReadOnlyMemoryStore
__ SpringBoardHome: _OBJC_CLASS_$_SBIconView
__ SpringBoardHome: _OBJC_CLASS_$_SBLeafIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBModalWidgetIntroductionHomeScreenPreview
__ SpringBoardHome: _OBJC_CLASS_$_SBReversibleLayerPropertyAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBRootFolderController
__ SpringBoardHome: _OBJC_CLASS_$_SBRootFolderControllerConfiguration
__ SpringBoardHome: _OBJC_CLASS_$_SBRootFolderView
__ SpringBoardHome: _OBJC_CLASS_$_SBSearchBackdropView
__ SpringBoardHome: _OBJC_CLASS_$_SBSearchGesture
__ SpringBoardHome: _OBJC_CLASS_$_SBViewControllerTransitionContext
__ SpringBoardHome: _OBJC_CLASS_$_SBWidgetIcon
__ SpringBoardHome: _OBJC_METACLASS_$_SBCenterIconZoomAnimator
__ SpringBoardHome: _OBJC_METACLASS_$_SBFloatingDockIconListView
__ SpringBoardHome: _OBJC_METACLASS_$_SBFloatingDockViewController
__ SpringBoardHome: _OBJC_METACLASS_$_SBHApplicationIcon
__ SpringBoardHome: _OBJC_METACLASS_$_SBHBookmark
__ SpringBoardHome: _OBJC_METACLASS_$_SBHBookmarkIcon
__ SpringBoardHome: _OBJC_METACLASS_$_SBHCalendarApplicationIcon
__ SpringBoardHome: _OBJC_METACLASS_$_SBHClockApplicationIconImageView
__ SpringBoardHome: _OBJC_METACLASS_$_SBHIconModel
__ SpringBoardHome: _OBJC_METACLASS_$_SBHIconStateArchiver
__ SpringBoardHome: _OBJC_METACLASS_$_SBHLibraryViewController
__ SpringBoardHome: _OBJC_METACLASS_$_SBHProxiedApplicationPlaceholder
__ SpringBoardHome: _OBJC_METACLASS_$_SBIcon
__ SpringBoardHome: _OBJC_METACLASS_$_SBIconModelPropertyListFileStore
__ SpringBoardHome: _OBJC_METACLASS_$_SBIconView
__ SpringBoardHome: _OBJC_METACLASS_$_SBLeafIcon
__ SpringBoardHome: _SBFolderControllerDidEndScrollingNotification
__ SpringBoardHome: _SBHDefaultIconImageContinuousCornerRadiusForIconSize
__ SpringBoardHome: _SBHDisplayCornerRadiusForScreenType
__ SpringBoardHome: _SBHEnumerateScreenTypes
__ SpringBoardHome: _SBHGetApplicationIconImage
__ SpringBoardHome: _SBHGetScreenSpecification
__ SpringBoardHome: _SBHIconGridSizeClassForString
__ SpringBoardHome: _SBHIconGridSizeClassMaskForCHSFamilyMask
__ SpringBoardHome: _SBHIconListLayoutIconImageInfoForGridSizeClass
__ SpringBoardHome: _SBHIconListLayoutListIconSpacing
__ SpringBoardHome: _SBHIconListLayoutSupportsIconGridSizeClass
__ SpringBoardHome: _SBHIconManagerIconModelDidChangeNotification
__ SpringBoardHome: _SBHIconManagerListLayoutProviderDidChangeNotification
__ SpringBoardHome: _SBHIconViewContextMenuStateControllerDidDismissAllIconForceTouchControllersNotification
__ SpringBoardHome: _SBHLibraryCategoryMapErrorNotificationKey
__ SpringBoardHome: _SBHLibraryCategoryMapNotificationKey
__ SpringBoardHome: _SBHLibraryCategoryMapProviderCategoryMapRefreshCompletedNotification
__ SpringBoardHome: _SBHLibraryPresentationErrorDomain
__ SpringBoardHome: _SBHLibraryPresentationErrorForCode
__ SpringBoardHome: _SBHLibrarySearchControllerDidDismissSearchPPTNotification
__ SpringBoardHome: _SBHLibrarySearchControllerDidPresentSearchPPTNotification
__ SpringBoardHome: _SBHLibrarySearchControllerWillDismissSearchPPTNotification
__ SpringBoardHome: _SBHLibrarySearchControllerWillPresentSearchPPTNotification
__ SpringBoardHome: _SBHPinViewWithinView
__ SpringBoardHome: _SBHScreenTypeForCurrentDevice
__ SpringBoardHome: _SBHScreenTypeHasHomeButton
__ SpringBoardHome: _SBHScrollableContainerDidScrollHiddenIconViewOutsideClippingBoundsNotification
__ SpringBoardHome: _SBHStackConfigurationDidDismissNotification
__ SpringBoardHome: _SBHStackConfigurationDidPresentNotification
__ SpringBoardHome: _SBHStackConfigurationWillDismissNotification
__ SpringBoardHome: _SBHStackConfigurationWillPresentNotification
__ SpringBoardHome: _SBHStringFromContentVisibility
__ SpringBoardHome: _SBHWidgetConfigurationDidDismissNotification
__ SpringBoardHome: _SBHWidgetConfigurationDidPresentNotification
__ SpringBoardHome: _SBHWidgetConfigurationWillDismissNotification
__ SpringBoardHome: _SBHWidgetConfigurationWillPresentNotification
__ SpringBoardHome: _SBHZPositionForScale
__ SpringBoardHome: _SBIconCoordinateMakeWithGridCellIndex
__ SpringBoardHome: _SBIconImageInfoMake
__ SpringBoardHome: _SBIconListPredictedVisibleRowDefault
__ SpringBoardHome: _SBIconLocationAppLibrary
__ SpringBoardHome: _SBIconLocationAppLibraryCategoryPod
__ SpringBoardHome: _SBIconLocationAppLibraryCategoryPodExpanded
__ SpringBoardHome: _SBIconLocationAppLibraryCategoryPodRecents
__ SpringBoardHome: _SBIconLocationAppLibraryCategoryPodSuggestions
__ SpringBoardHome: _SBIconLocationAppLibrarySearch
__ SpringBoardHome: _SBIconLocationDock
__ SpringBoardHome: _SBIconLocationFavoriteTodayView
__ SpringBoardHome: _SBIconLocationFloatingDock
__ SpringBoardHome: _SBIconLocationFolder
__ SpringBoardHome: _SBIconLocationGroupAddLocation
__ SpringBoardHome: _SBIconLocationGroupAppLibrary
__ SpringBoardHome: _SBIconLocationGroupContainsLocation
__ SpringBoardHome: _SBIconLocationGroupDock
__ SpringBoardHome: _SBIconLocationGroupFloatingDock
__ SpringBoardHome: _SBIconLocationGroupRoot
__ SpringBoardHome: _SBIconLocationGroupTodayView
__ SpringBoardHome: _SBIconLocationNone
__ SpringBoardHome: _SBIconLocationRoot
__ SpringBoardHome: _SBIconLocationTodayView
__ SpringBoardHome: _SBIconModelDidAddIconNotification
__ SpringBoardHome: _SBIconModelDidLayoutIconStateNotification
__ SpringBoardHome: _SBIconModelVisibilityDidChangeNotification
__ SpringBoardHome: _SBIconModelWillLayoutIconStateNotification
__ SpringBoardHome: _SBIconModelWillRemoveIconNotification
__ SpringBoardHome: _SBIconViewDefaultContextMenuAnimationInterval
__ SpringBoardHome: _SBIconViewDidDismissContextMenuNotification
__ SpringBoardHome: _SBIconViewQueryingBestIconViewForIcon
__ SpringBoardHome: _SBIconViewQueryingDisplayingIconView
__ SpringBoardHome: _SBIconViewWillDismissContextMenuNotification
__ SpringBoardHome: _SBIconViewWillPresentContextMenuNotification
__ SpringBoardHome: _SBIconZoomExpansionAnimationWillBeginNotification
__ SpringBoardHome: _SBLeafIconDataSourceDidChangeNotification
__ SpringBoardHome: _SBLeafIconDataSourceDidInvalidateNotification
__ SpringBoardHome: _SBRootFolderPageStateIsOnIconPage
__ SpringBoardHome: _SBRootFolderPageStateIsOnLeadingCustomPage
__ SpringBoardHome: _SBRootFolderPageStateIsSearch
__ SpringBoardHome: _SBSLibraryPodPresentationErrorCodeForErrorCode
__ SpringBoardHome: _SBTodayListIndex
__ SpringBoardHome: _SBWebBookmarkWasUninstalledNotification
__ SpringBoardHome: _SHBLibraryCategoryMapProactiveResponseKey
__ SpringBoardHome: _SHBLibraryCategoryMapProactiveSessionIdKey
__ SpringBoardHome: _kSBHIconAddToHomeScreenShortcutItemType
__ SpringBoardHome: _kSBHIconAddToStackApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconAppStoreShortcutItemType
__ SpringBoardHome: _kSBHIconAppStoreURLUserInfoKey
__ SpringBoardHome: _kSBHIconCancelDownloadApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconChangeWidgetSizeToExtraLargeApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconChangeWidgetSizeToLargeApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconChangeWidgetSizeToMediumApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconChangeWidgetSizeToNewsLargeTallApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconChangeWidgetSizeToSmallApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconConfigureStackApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconConfigureWidgetApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconDebugFeedbackStackApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconHideSiriSuggestionsItemApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconHideStackSuggestionApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconPauseDownloadApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconPrioritizeDownloadApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconRenameFolderApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconResumeDownloadApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconShareApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerDeleteAppApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerHideAppSuggestionApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerHideFolderContentsShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerRearrangeAppsForApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerRemoveAppApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerRemoveWidgetApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerShowAllWindowsForApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconUnreadNotificationsApplicationShortcutItemType
__ SpringBoardHome: _kSBIconModelIconKey
__ SpringBoardHome: _kSBIconModelLeafIconsToHideKey
__ SpringBoardHome: _kSBIconModelLeafIconsToShowKey
__ SpringBoardHome: _kSBIconStateDock
__ SpringBoardHome: _kSBIconStateFavoriteTodayPageList
__ SpringBoardHome: _kSBIconStateIconBundleIdentifier
__ SpringBoardHome: _kSBIconStateIconBundleVersion
__ SpringBoardHome: _kSBIconStateIconDefaultDisplayName
__ SpringBoardHome: _kSBIconStateIconDisplayName
__ SpringBoardHome: _kSBIconStateIconLastModifiedDate
__ SpringBoardHome: _kSBIconStateIconListMetadata
__ SpringBoardHome: _kSBIconStateIconListUniqueIdentifiers
__ SpringBoardHome: _kSBIconStateIconLists
__ SpringBoardHome: _kSBIconStateIconMatrix
__ SpringBoardHome: _kSBIconStateIconTypeApp
__ SpringBoardHome: _kSBIconStateIconTypeCustom
__ SpringBoardHome: _kSBIconStateIconTypeKey
__ SpringBoardHome: _kSBIconStateIconWebClipURL
__ SpringBoardHome: _kSBIconStateIgnoredList
__ SpringBoardHome: _kSBIconStateLeafIdentifier
__ SpringBoardHome: _kSBIconStateMetadataKey
__ SpringBoardHome: _kSBIconStateTodayPageList
__ SpringBoardHome: _kSBIconStateUniqueIdentifier
__ SpringBoardHome: _kSBIconStateWidgetVersion
__ SpringBoardServices: _NSStringFromAnalyticsEventType
__ SpringBoardServices: _NSStringFromSBIdleTimerConfigSettingPrecedence
__ SpringBoardServices: _NSStringFromSBSAccessoryType
__ SpringBoardServices: _NSStringFromSBSHardwareButtonKind
__ SpringBoardServices: _NSStringFromSBSLibraryPodPresentationErrorCode
__ SpringBoardServices: _OBJC_CLASS_$_SBIdleTimerRequestConfiguration
__ SpringBoardServices: _OBJC_CLASS_$_SBLegacyServices
__ SpringBoardServices: _OBJC_CLASS_$_SBSAccessibilityWindowHostingSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSAppDragLocalContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationShortcutContactIcon
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationShortcutCustomImageIcon
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationShortcutItem
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationShortcutServiceFetchResult
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationUserQuitMonitorSessionSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSDisplayLayoutElement
__ SpringBoardServices: _OBJC_CLASS_$_SBSExternalDisplayLayoutElement
__ SpringBoardServices: _OBJC_CLASS_$_SBSFocusModesHomeScreenSettingsResponse
__ SpringBoardServices: _OBJC_CLASS_$_SBSFocusModesHomeScreenSettingsServiceInterfaceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSFocusModesHomeScreenSnapshot
__ SpringBoardServices: _OBJC_CLASS_$_SBSHomeScreenServiceArrayOfNumbers
__ SpringBoardServices: _OBJC_CLASS_$_SBSHomeScreenServiceArrayOfStrings
__ SpringBoardServices: _OBJC_CLASS_$_SBSHomeScreenServiceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSInCallPresentationConfiguration
__ SpringBoardServices: _OBJC_CLASS_$_SBSInCallPresentationRequest
__ SpringBoardServices: _OBJC_CLASS_$_SBSInCallPresentationServiceInterfaceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSLockScreenContentAction
__ SpringBoardServices: _OBJC_CLASS_$_SBSLockScreenRemoteContentAssertion
__ SpringBoardServices: _OBJC_CLASS_$_SBSLockScreenServiceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSMutableUserNotificationButtonDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSMutableUserNotificationTextFieldDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSRelaunchAction
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertActivationContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertConfigurationContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertHandle
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertHandleContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertHandleServiceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteContentDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSStatusBarStyleOverridesAssertion
__ SpringBoardServices: _OBJC_CLASS_$_SBSStatusBarTapContextImpl
__ SpringBoardServices: _OBJC_CLASS_$_SBSSwitcherDemoCommandsSessionSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSSystemNotesConnectAction
__ SpringBoardServices: _OBJC_CLASS_$_SBSSystemNotesCreateAction
__ SpringBoardServices: _OBJC_CLASS_$_SBSSystemNotesPresentationConfiguration
__ SpringBoardServices: _OBJC_CLASS_$_SBSSystemNotesPresentationServiceInterfaceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSUniversalControlInterfaceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSWebClipServiceSessionSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSWidgetMetricsServiceInterfaceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBScreenTimeTrackingController
__ SpringBoardServices: _OBJC_METACLASS_$_SBSLockScreenContentAction
__ SpringBoardServices: _SBCardItemsControllerClientInterface
__ SpringBoardServices: _SBCardItemsControllerServerInterface
__ SpringBoardServices: _SBDisplayLayoutBacklightTransitionReasonCameraButton
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAccessibility
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibraryCategory
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibraryCategoryExpanded
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibraryCategoryRecents
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibraryCategorySuggested
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibrarySearch
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppSwitcher
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonBannerUnfurl
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonBreadcrumb
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonCommandTab
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonControlCenter
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonDestroySceneAction
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonExternalRequest
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonFloatingApplication
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonFloatingDock
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonFloatingDockRecents
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonHomeScreen
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonLockScreen
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonNotification
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonNotificationCenter
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonRequestSceneAction
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonSiri
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonSpotlight
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonSystemGesture
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonWidget
__ SpringBoardServices: _SBDisplayMetrics
__ SpringBoardServices: _SBLogAccessibilityWindowHosting
__ SpringBoardServices: _SBLogAnalytics
__ SpringBoardServices: _SBLogAppQuitMonitor
__ SpringBoardServices: _SBLogAppShortcuts
__ SpringBoardServices: _SBLogAutoLaunching
__ SpringBoardServices: _SBLogBanners
__ SpringBoardServices: _SBLogBiometricResource
__ SpringBoardServices: _SBLogCFUserNotifications
__ SpringBoardServices: _SBLogCommon
__ SpringBoardServices: _SBLogCoverSheet
__ SpringBoardServices: _SBLogDashBoard
__ SpringBoardServices: _SBLogDashBoardHostedAppViewController
__ SpringBoardServices: _SBLogDoNotDisturbWhileDriving
__ SpringBoardServices: _SBLogDockRecents
__ SpringBoardServices: _SBLogFocusModesHomeScreenSettings
__ SpringBoardServices: _SBLogIconDragging
__ SpringBoardServices: _SBLogIdleTimer
__ SpringBoardServices: _SBLogInCallPresentation
__ SpringBoardServices: _SBLogKeyboardDismissal
__ SpringBoardServices: _SBLogKeyboardFocus
__ SpringBoardServices: _SBLogLiquidDetection
__ SpringBoardServices: _SBLogLockScreenBiometricCoordinator
__ SpringBoardServices: _SBLogLockScreenMesaUnlockBehaviors
__ SpringBoardServices: _SBLogLockScreenMesaWalletPreArm
__ SpringBoardServices: _SBLogLockScreenNowPlaying
__ SpringBoardServices: _SBLogMedusaDropDestination
__ SpringBoardServices: _SBLogMedusaKeyboard
__ SpringBoardServices: _SBLogMotionAlarm
__ SpringBoardServices: _SBLogMotionGesture
__ SpringBoardServices: _SBLogPIP
__ SpringBoardServices: _SBLogRootController
__ SpringBoardServices: _SBLogScreenWake
__ SpringBoardServices: _SBLogStatusBarish
__ SpringBoardServices: _SBLogSystemNotes
__ SpringBoardServices: _SBLogTraitsArbiter
__ SpringBoardServices: _SBLogTransientOverlay
__ SpringBoardServices: _SBLogWallet
__ SpringBoardServices: _SBLogWidgets
__ SpringBoardServices: _SBLogZStack
__ SpringBoardServices: _SBLoggingSubsystem
__ SpringBoardServices: _SBSAppDragPrivateTypeIdentifier
__ SpringBoardServices: _SBSAppLaunchOriginSpotlight
__ SpringBoardServices: _SBSAppSwitcherServiceMessageKeyBundleIdentifier
__ SpringBoardServices: _SBSAppSwitcherServiceMessageKeyPort
__ SpringBoardServices: _SBSAppSwitcherServiceMessageKeySuccessResult
__ SpringBoardServices: _SBSApplicationLaunchOptionAppLinkOpenStrategyChangedKey
__ SpringBoardServices: _SBSApplicationLaunchOptionBreadcrumbBundleIdKey
__ SpringBoardServices: _SBSApplicationLaunchOptionBrowserActivationWithNoURLKey
__ SpringBoardServices: _SBSApplicationLaunchOptionBrowserReuseTabKey
__ SpringBoardServices: _SBSApplicationLaunchOptionRevealIconKey
__ SpringBoardServices: _SBSApplicationLaunchOptionUpdateAppLinkOpenStrategyKey
__ SpringBoardServices: _SBSApplicationMultiwindowServiceRequestShelfPresentationEntitlement
__ SpringBoardServices: _SBSApplicationMultiwindowServiceTriggerShowAllWindowsEntitlement
__ SpringBoardServices: _SBSApplicationServiceIdentifier
__ SpringBoardServices: _SBSApplicationShortcutServiceCustomImageEntitlement
__ SpringBoardServices: _SBSApplicationShortcutServiceFullAccessEntitlement
__ SpringBoardServices: _SBSAssistantActivationContextBundleIDKey
__ SpringBoardServices: _SBSBiometricsServiceUnlockSuppressionAssertionEntitlement
__ SpringBoardServices: _SBSConvertOpenApplicationSBSKeysToFBSKeysIfNecessary
__ SpringBoardServices: _SBSCreateOpenApplicationServiceEndpoint
__ SpringBoardServices: _SBSDiffSystemNotesPresentationConfigurations
__ SpringBoardServices: _SBSDisplayLayoutBacklightTransitionReasonForBacklightChangeSource
__ SpringBoardServices: _SBSDisplayLayoutElementAppLibraryIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementAppLibraryOpenPodIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementAppSwitcherIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementFloatingDockIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementHomeScreenIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementHomeScreenOpenFolderIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementLockScreenNavigationIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementLoginIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementPasscodeIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementSpotlightFullscreenOverlayIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementSpotlightIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementTodayViewIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementWidgetEditingIdentifier
__ SpringBoardServices: _SBSDisplayLayoutTransitionReasonForSourceApplication
__ SpringBoardServices: _SBSEventObserverEventContinuityUIBecameVisible
__ SpringBoardServices: _SBSEventObserverEventContinuityUIWasObscured
__ SpringBoardServices: _SBSEventObserverEventDimmed
__ SpringBoardServices: _SBSEventObserverEventUndimmed
__ SpringBoardServices: _SBSEventObserverEventUnlocked
__ SpringBoardServices: _SBSEventObserverStateContinuityUIIsVisible
__ SpringBoardServices: _SBSEventObserverStateDimmedForLock
__ SpringBoardServices: _SBSExternalDisplayLayoutServiceInstanceIdentifier
__ SpringBoardServices: _SBSGetSideSwitchPreference
__ SpringBoardServices: _SBSHardwareButtonServiceBackgroundEventConsumerEntitlement
__ SpringBoardServices: _SBSHardwareButtonServiceEventConsumerEntitlement
__ SpringBoardServices: _SBSHardwareButtonServiceHomeHardwareButtonHintSuppressionEntitlement
__ SpringBoardServices: _SBSIdentifierForSecureAppType
__ SpringBoardServices: _SBSInCallOpenApplicationOptionKeyPromptUnlockUI
__ SpringBoardServices: _SBSInCallPresentationModeDescription
__ SpringBoardServices: _SBSLibraryPodPresentationErrorDomain
__ SpringBoardServices: _SBSLockScreenContentActionConfigurationKeySupportedOrientations
__ SpringBoardServices: _SBSLockScreenContentAssertionErrorDomain
__ SpringBoardServices: _SBSLockScreenContentAssertionSlotApp
__ SpringBoardServices: _SBSLockScreenContentAssertionSlotEmbedded
__ SpringBoardServices: _SBSLockScreenContentAssertionSlotPlatter
__ SpringBoardServices: _SBSLockScreenContentAssertionSlotRemoteAlert
__ SpringBoardServices: _SBSMedusaApplicationShortcutServicePerformActionEntitlement
__ SpringBoardServices: _SBSMinimalBrightnessControlHUDIdentifier
__ SpringBoardServices: _SBSMinimalVolumeControlHUDIdentifier
__ SpringBoardServices: _SBSOpenApplicationDebugOptionKeyWidgetFamily
__ SpringBoardServices: _SBSOpenApplicationDebugOptionKeyWidgetKind
__ SpringBoardServices: _SBSOpenApplicationDebugOptionKeyWidgetSize
__ SpringBoardServices: _SBSOpenApplicationEnvironmentSecureOnLockScreen
__ SpringBoardServices: _SBSOpenApplicationLaunchOriginShortcutItem
__ SpringBoardServices: _SBSOpenApplicationLayoutRoleCenter
__ SpringBoardServices: _SBSOpenApplicationLayoutRolePrimary
__ SpringBoardServices: _SBSOpenApplicationLayoutRoleSideLarge
__ SpringBoardServices: _SBSOpenApplicationLayoutRoleSideNarrow
__ SpringBoardServices: _SBSOpenApplicationLayoutRoleSideNarrowOverlay
__ SpringBoardServices: _SBSOpenApplicationOptionKeyAdditionalApplications
__ SpringBoardServices: _SBSOpenApplicationOptionKeyConfirmedNotInPocket
__ SpringBoardServices: _SBSOpenApplicationOptionKeyDisableWatchdog
__ SpringBoardServices: _SBSOpenApplicationOptionKeyLaunchApplicationAfterSetup
__ SpringBoardServices: _SBSOpenApplicationOptionKeyLaunchEnvironment
__ SpringBoardServices: _SBSOpenApplicationOptionKeyLaunchSceneless
__ SpringBoardServices: _SBSOpenApplicationOptionKeyLaunchWithoutAnimation
__ SpringBoardServices: _SBSOpenApplicationOptionKeyLayoutRole
__ SpringBoardServices: _SBSOpenApplicationOptionKeyMigrateContentToScene
__ SpringBoardServices: _SBSOpenApplicationOptionKeySceneIdentifier
__ SpringBoardServices: _SBSOpenURLOptionKeyUseLiveContentDuringTransition
__ SpringBoardServices: _SBSRemoteAlertActivationReasonWakeTo
__ SpringBoardServices: _SBSRemoteAlertHandleInvalidationErrorCodeForInvalidationReason
__ SpringBoardServices: _SBSRemoteAlertHandleInvalidationErrorDescription
__ SpringBoardServices: _SBSRemoteAlertHandleInvalidationErrorDomain
__ SpringBoardServices: _SBSSecureAppAssertionErrorDomain
__ SpringBoardServices: _SBSSecureAppTypeForIdentifier
__ SpringBoardServices: _SBSSetRequiredContextIdsForMedusaDragAndDropForSpotlightOnly
__ SpringBoardServices: _SBSSetSideSwitchPreference
__ SpringBoardServices: _SBSSoftwareUpdateServicePasscodePolicyEntitlement
__ SpringBoardServices: _SBSStatusBarStyleOverridesAssertionClientInterface
__ SpringBoardServices: _SBSStatusBarStyleOverridesCoordinatorErrorDomain
__ SpringBoardServices: _SBSStatusBarStyleOverridesCoordinatorErrorFailedEntitlementCheckDescription
__ SpringBoardServices: _SBSStatusBarStyleOverridesCoordinatorErrorProcessAlreadyRegisteredCoordinatorDescription
__ SpringBoardServices: _SBSStatusBarStyleOverridesCoordinatorErrorStyleOverrideKey
__ SpringBoardServices: _SBSStringFromWebClipServiceLaunchOrigin
__ SpringBoardServices: _SBSSystemNotesPresentationModeDescription
__ SpringBoardServices: _SBSSystemServiceIdentifier
__ SpringBoardServices: _SBSUIRemoteAlertOptionActivateForAssistant
__ SpringBoardServices: _SBSUIRemoteAlertOptionAllowCFUserNotificationsOnTop
__ SpringBoardServices: _SBSUIRemoteAlertOptionCarDisplay
__ SpringBoardServices: _SBSUIRemoteAlertOptionCustomActivationReason
__ SpringBoardServices: _SBSUIRemoteAlertOptionDisableFadeInAnimation
__ SpringBoardServices: _SBSUIRemoteAlertOptionDismissWithHomeButton
__ SpringBoardServices: _SBSUIRemoteAlertOptionDismissalAnimationStyle
__ SpringBoardServices: _SBSUIRemoteAlertOptionHasTranslucentBackground
__ SpringBoardServices: _SBSUIRemoteAlertOptionInitialBackgroundStyle
__ SpringBoardServices: _SBSUIRemoteAlertOptionLaunchingInterfaceOrientation
__ SpringBoardServices: _SBSUIRemoteAlertOptionStatusBarStyle
__ SpringBoardServices: _SBSUIRemoteAlertOptionSuppressSiri
__ SpringBoardServices: _SBSUIRemoteAlertOptionSwipeDismissalStyle
__ SpringBoardServices: _SBSUIRemoteAlertOptionUserInfo
__ SpringBoardServices: _SBSUIRemoteAlertOptionViewControllerClass
__ SpringBoardServices: _SBSUIRemoteAlertOptionWantsWallpaperTunnel
__ SpringBoardServices: _SBSUserNotificationButtonDefinitionResponseIndexKey
__ SpringBoardServices: _SBSUserNotificationButtonDefinitionsKey
__ SpringBoardServices: _SBSUserNotificationTextFieldDefinitionsKey
__ SpringBoardServices: _SBSWallpaperFetchServiceEntitlement
__ SpringBoardServices: _SBSWallpaperServiceIdentifier
__ SpringBoardServices: _SBStatusBarStyleOverridesAssertionServerInterface
__ SpringBoardServices: _SBUserNotificationAlertMessageDelimiterKey
__ SpringBoardServices: _SBUserNotificationAllowInCarKey
__ SpringBoardServices: _SBUserNotificationAllowInLoginWindow
__ SpringBoardServices: _SBUserNotificationAllowInSetupKey
__ SpringBoardServices: _SBUserNotificationAllowLockscreenDismissalKey
__ SpringBoardServices: _SBUserNotificationAllowMenuButtonDismissal
__ SpringBoardServices: _SBUserNotificationAllowedApplicationsKey
__ SpringBoardServices: _SBUserNotificationAlternateButtonPresentationStyleKey
__ SpringBoardServices: _SBUserNotificationAttachmentImageAssetCatalogImageKey
__ SpringBoardServices: _SBUserNotificationAttachmentImageAssetCatalogPathKey
__ SpringBoardServices: _SBUserNotificationAttachmentImagePath
__ SpringBoardServices: _SBUserNotificationBehavesSuperModally
__ SpringBoardServices: _SBUserNotificationButtonLayoutDirectionKey
__ SpringBoardServices: _SBUserNotificationButtonTagForUnlockActionKey
__ SpringBoardServices: _SBUserNotificationContactIdentifierKey
__ SpringBoardServices: _SBUserNotificationContentTypeKey
__ SpringBoardServices: _SBUserNotificationDefaultButtonPresentationStyleKey
__ SpringBoardServices: _SBUserNotificationDefaultButtonTag
__ SpringBoardServices: _SBUserNotificationDefaultResponseLaunchBundleID
__ SpringBoardServices: _SBUserNotificationDefaultResponseLaunchURL
__ SpringBoardServices: _SBUserNotificationDisableIdleSleepWhileVisible
__ SpringBoardServices: _SBUserNotificationDismissOnLock
__ SpringBoardServices: _SBUserNotificationDismissesOverlaysInLockScreen
__ SpringBoardServices: _SBUserNotificationDisplayActionButtonOnLockScreen
__ SpringBoardServices: _SBUserNotificationDontDismissOnUnlock
__ SpringBoardServices: _SBUserNotificationExtensionIdentifierKey
__ SpringBoardServices: _SBUserNotificationExtensionItemsKey
__ SpringBoardServices: _SBUserNotificationForcesModalAlertAppearance
__ SpringBoardServices: _SBUserNotificationHeaderImageAssetCatalogImageKey
__ SpringBoardServices: _SBUserNotificationHeaderImageAssetCatalogPathKey
__ SpringBoardServices: _SBUserNotificationHeaderImagePath
__ SpringBoardServices: _SBUserNotificationHideOnClonedDisplay
__ SpringBoardServices: _SBUserNotificationIconDoNotMaskKey
__ SpringBoardServices: _SBUserNotificationIconImageAssetCatalogImageKey
__ SpringBoardServices: _SBUserNotificationIconImageAssetCatalogPathKey
__ SpringBoardServices: _SBUserNotificationIconImagePath
__ SpringBoardServices: _SBUserNotificationIgnoresQuietMode
__ SpringBoardServices: _SBUserNotificationLockScreenAlertHeaderKey
__ SpringBoardServices: _SBUserNotificationLockScreenAlertMessageDelimiterKey
__ SpringBoardServices: _SBUserNotificationLockScreenAlertMessageKey
__ SpringBoardServices: _SBUserNotificationOtherButtonPresentationStyleKey
__ SpringBoardServices: _SBUserNotificationPendInSetupIfNotAllowedKey
__ SpringBoardServices: _SBUserNotificationPendWhileKeyBagLockedKey
__ SpringBoardServices: _SBUserNotificationRemoteServiceBundleIdentifierKey
__ SpringBoardServices: _SBUserNotificationRemoteViewControllerClassNameKey
__ SpringBoardServices: _SBUserNotificationSoundAlertTopicKey
__ SpringBoardServices: _SBUserNotificationSoundAlertTypeKey
__ SpringBoardServices: _SBUserNotificationSoundRepeatDurationKey
__ SpringBoardServices: _SBUserNotificationSoundVibrationPatternKey
__ SpringBoardServices: _SBUserNotificationSystemSoundBehaviorKey
__ SpringBoardServices: _SBUserNotificationSystemSoundIDKey
__ SpringBoardServices: _SBUserNotificationTextAutocapitalizationType
__ SpringBoardServices: _SBUserNotificationTextAutocorrectionType
__ SpringBoardServices: _SBUserNotificationUndimsScreen
__ SpringBoardServices: _SBUserNotificationWakeDisplay
__ SpringBoardServices: __SBApplicationStateGetMonitor
__ SpringBoardServices: __SBSAutolockTimerPostExternalChangeNotification
__ SpringBoardServices: ___SBSEventObserverGetDarwinNotificationFromEvent
__ SpringBoardServices: ___sb__mainScreenReferenceBounds
__ SpringBoardServices: ___sb__runningInSpringBoard
__ SpringBoardServices: _kSBSAnalyticsBreadcrumbTappedKey
__ SpringBoardServices: _kSBSAnalyticsDeleteIconLocationKey
__ SpringBoardServices: _kSBSAnalyticsDeleteIconOptionsKey
__ SpringBoardServices: _kSBSAnalyticsDeleteIconSelectedOptionKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementBundleIdKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementIdentifierKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementLevelKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementUIApplicationKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementsKey
__ SpringBoardServices: _kSBSAnalyticsDoNotDisturbActiveKey
__ SpringBoardServices: _kSBSAnalyticsDoNotDisturbReasonKey
__ SpringBoardServices: _kSBSAnalyticsDockSuggestionIndexKey
__ SpringBoardServices: _kSBSAnalyticsDockSuggestionTypeKey
__ SpringBoardServices: _kSBSAnalyticsDockSuggestionsEnabledKey
__ SpringBoardServices: _kSBSAnalyticsDockSwipeGestureStateKey
__ SpringBoardServices: _kSBSAnalyticsEventTypeDashBoardCameraSwipeFailedLargestPresentExtent
__ SpringBoardServices: _kSBSAnalyticsEventTypeLibraryPresentationSourceKey
__ SpringBoardServices: _kSBSAnalyticsEventTypeSpringloadedLocationKey
__ SpringBoardServices: _kSBSAnalyticsFloatingApplicationMoveGestureInitialConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsFloatingApplicationMoveGestureResultConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsFloatingApplicationPinGestureDidSwipeDownKey
__ SpringBoardServices: _kSBSAnalyticsFloatingApplicationPinGesturePinActionTypeKey
__ SpringBoardServices: _kSBSAnalyticsFolderStatsNumberOfFoldersInDockKey
__ SpringBoardServices: _kSBSAnalyticsFolderStatsNumberOfFoldersKey
__ SpringBoardServices: _kSBSAnalyticsFolderStatsNumberOfItemsInDockKey
__ SpringBoardServices: _kSBSAnalyticsFolderStatsNumberOfPagesKey
__ SpringBoardServices: _kSBSAnalyticsHasEverHiddenAPageKey
__ SpringBoardServices: _kSBSAnalyticsHomeScreenConfigLowDensityModeHasBeenAlteredKey
__ SpringBoardServices: _kSBSAnalyticsHomeScreenConfigLowDensityModeIsEnabledKey
__ SpringBoardServices: _kSBSAnalyticsHomeScreenConfigRestrictedWidgetsModeIsEnabledKey
__ SpringBoardServices: _kSBSAnalyticsIconDragSessionDroppedToMedusaDragStartLocationKey
__ SpringBoardServices: _kSBSAnalyticsIconDragSessionDroppedToMedusaDropActionKey
__ SpringBoardServices: _kSBSAnalyticsIconDragSessionIdentifierKey
__ SpringBoardServices: _kSBSAnalyticsIconDragSessionItemCountKey
__ SpringBoardServices: _kSBSAnalyticsIconIndexKey
__ SpringBoardServices: _kSBSAnalyticsIconIsFolderKey
__ SpringBoardServices: _kSBSAnalyticsIconLocationKey
__ SpringBoardServices: _kSBSAnalyticsIconModelWithDesiredIconStateLoadedMissingDesiredIconIdentifiersKey
__ SpringBoardServices: _kSBSAnalyticsIconPageHidingNumberOfPagesHidden
__ SpringBoardServices: _kSBSAnalyticsIconPageHidingNumberOfPagesVisible
__ SpringBoardServices: _kSBSAnalyticsIsLibraryPodIconInDockHiddenKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateElementBundleIdKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateElementIdentifiersKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateElementInterfaceOrientationKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateElementLayoutRoleKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateElementsKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateFloatingConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateInterfaceOrientationKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateSpaceConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateTransitionSourceKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateUnlockedEnvironmentKey
__ SpringBoardServices: _kSBSAnalyticsLeftBreadcrumbTypeKey
__ SpringBoardServices: _kSBSAnalyticsLockStateKey
__ SpringBoardServices: _kSBSAnalyticsNewAppDownloadLocationHasBeenSetKey
__ SpringBoardServices: _kSBSAnalyticsNewAppDownloadLocationKey
__ SpringBoardServices: _kSBSAnalyticsPIPVideoDidActivateKey
__ SpringBoardServices: _kSBSAnalyticsReachabilityCancelGestureTypeKey
__ SpringBoardServices: _kSBSAnalyticsRightBreadcrumbTypeKey
__ SpringBoardServices: _kSBSAnalyticsScreenOnKey
__ SpringBoardServices: _kSBSAnalyticsSideApplicationMoveGestureInitialConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsSideApplicationMoveGestureResultConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpFinalActionKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpLiftOffVelocityAngleKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpLiftOffVelocityXKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpLiftOffVelocityYKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpOrientationKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpPeakVelocityKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpTimestampDeltaKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpXCoordKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpYCoordKey
__ SpringBoardServices: _kSBSAnalyticsSwitcherCardDropActionKey
__ SpringBoardServices: _kSBSAnalyticsSwitcherCardDropDraggingLeafAppLayoutBundleIdentifierKey
__ SpringBoardServices: _kSBSAnalyticsSwitcherCardDropIntersectingLeafAppLayoutBundleIdentifierKey
__ SpringBoardServices: _kSBSAnalyticsSwitcherCardDropRegionKey
__ SpringBoardServices: _kSBSAnalyticsSwitcherIndexKey
__ SpringBoardServices: _kSBSAnalyticsSwitcherTypeKey
__ SpringBoardServices: _kSBSAnalyticsSystemGestureStateKey
__ SpringBoardServices: _kSBSAnalyticsSystemGestureTypeKey
__ SpringBoardServices: _kSBSAnalyticsTopAffordanceMenuInteractionBundleIdentifierKey
__ SpringBoardServices: _kSBSAnalyticsTopAffordanceMenuInteractionValueKey
__ SpringBoardServices: _kSBSAnalyticsWindowDropBundleIdentifierKey
__ SpringBoardServices: _kSBSAnalyticsWindowDropDestinationKey
__ SpringBoardServices: _kSBSAnalyticsWindowDropPeekConfigurationKey
__ SpringBoardServices: _kSBSApplicationHarmonyServiceClientMessageKeyDisplayId
__ SpringBoardServices: _kSBSApplicationHarmonyServiceServerMessageKeyWhitePointAdaptivityStyle
__ SpringBoardServices: _kSBSApplicationMultiwindowServiceClientMessageKeySceneIdentifier
__ SpringBoardServices: _kSBSApplicationServiceMessageKeyBundleIdentifier
__ SpringBoardServices: _kSBSApplicationShortcutServiceClientMessageKeyDynamicApplicationShortcutItems
__ SpringBoardServices: _kSBSApplicationShortcutServiceClientMessageKeyItemTypes
__ SpringBoardServices: _kSBSApplicationShortcutServiceServerMessageKeyResult
__ SpringBoardServices: _kSBSDashBoardEventTypeKey
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyButtonKind
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyDeferringToken
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyEventMask
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyEventType
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyHIDEventsEnabled
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyHapticType
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyPriority
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyToggleButtonState
__ SpringBoardServices: _kSBSLockStateNotifyKey
__ SpringBoardServices: _kSBSMedusaApplicationShortcutServiceClientMessageKeyShortcutAction
__ SpringBoardServices: _kSBSMedusaApplicationShortcutServiceServerMessageSupportedShortcutActions
__ SpringBoardServices: _kSBSSoftwareUpdateServiceMessageKeyPasscodePolicy
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeyRemoteStateDumpTimeout
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeyStateString
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeyStateType
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeySuccess
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeySuccessDescription
__ SpringBoardServices: _kSBSSystemBiometricsServiceMessageKeyCredentialSet
__ SpringBoardServices: _kSBSSystemHardwareButtonServiceClientMessageKeyAssertionReason
__ SpringBoardServices: _kSBSSystemHardwareButtonServiceClientMessageKeyAssertionType
__ SpringBoardServices: _kSBSSystemHardwareButtonServiceServerMessageKeyAction
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyAccessoryType
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyAnimateTransitions
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyBlockForScreenTime
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyBundleIdentifier
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyBundleIdentifiers
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyEnabledState
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyHUDIdentifier
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyPageInteger
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyPortSendRight
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeySceneCount
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeySizeInteger
__ SpringBoardServices: _kSBSTestAutomationServiceServiceMessageKeyPath
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyAction
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyImageData
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyOrientation
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyRect
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyVariant
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyVideoURL
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyWallpaperMode
__ SpringBoardServices: _kSBUserDoneWithRequestedPasscodeUINotification
__ SpringBoardServices: _secureAppTypeName
__ SpringBoardUI: _NSStringFromLockSource
__ SpringBoardUI: _NSStringFromSBSceneViewDisplayMode
__ SpringBoardUI: _NSStringFromUnlockIntent
__ SpringBoardUI: _NSStringFromUnlockSource
__ SpringBoardUI: _OBJC_CLASS_$_SBAlertControllerVisualStyle
__ SpringBoardUI: _OBJC_CLASS_$_SBAlertItem
__ SpringBoardUI: _OBJC_CLASS_$_SBCrossfadeView
__ SpringBoardUI: _OBJC_CLASS_$_SBLockScreenLegibilitySettings
__ SpringBoardUI: _OBJC_CLASS_$_SBLockScreenPluginAppearanceContext
__ SpringBoardUI: _OBJC_CLASS_$_SBLockScreenPluginContext
__ SpringBoardUI: _OBJC_CLASS_$_SBMutableLockScreenPluginPresentation
__ SpringBoardUI: _OBJC_CLASS_$_SBOrientationTransformWrapperView
__ SpringBoardUI: _OBJC_CLASS_$_SBOrientationTransformWrapperViewController
__ SpringBoardUI: _OBJC_CLASS_$_SBSceneHandle
__ SpringBoardUI: _OBJC_CLASS_$_SBSceneHandleBlockObserver
__ SpringBoardUI: _OBJC_CLASS_$_SBSceneView
__ SpringBoardUI: _OBJC_CLASS_$_SBUIBackgroundView
__ SpringBoardUI: _OBJC_CLASS_$_SBUIChevronView
__ SpringBoardUI: _OBJC_CLASS_$_SBUICoronaAnimationController
__ SpringBoardUI: _OBJC_CLASS_$_SBUIExpandedNotificationContainerViewProvider
__ SpringBoardUI: _OBJC_CLASS_$_SBUILockScreenDisableAssertion
__ SpringBoardUI: _OBJC_CLASS_$_SBUISound
__ SpringBoardUI: _OBJC_CLASS_$_SBUIViewFloatSpringProperty
__ SpringBoardUI: _OBJC_METACLASS_$_SBAlertItem
__ SpringBoardUI: _OBJC_METACLASS_$_SBOrientationTransformWrapperView
__ SpringBoardUI: _OBJC_METACLASS_$_SBOrientationTransformWrapperViewController
__ SpringBoardUI: _OBJC_METACLASS_$_SBSceneHandle
__ SpringBoardUI: _OBJC_METACLASS_$_SBSceneView
__ SpringBoardUI: _OBJC_METACLASS_$_SBUIChevronView
__ SpringBoardUI: _OBJC_METACLASS_$_SBUILockScreenDisableAssertion
__ SpringBoardUI: _SBActiveCallStateChangedNotification
__ SpringBoardUI: _SBAirplaneModeControllerAirplaneModeDidChangeNotification
__ SpringBoardUI: _SBAirplaneModeControllerDidProcessAirplaneModeChangeNotification
__ SpringBoardUI: _SBAirplaneModeControllerWillProcessAirplaneModeChangeNotification
__ SpringBoardUI: _SBAlertItemIsUserDeactivate
__ SpringBoardUI: _SBApplicationNetworkFlagsChangedNotification
__ SpringBoardUI: _SBBacklightAboutToUndimNotification
__ SpringBoardUI: _SBBacklightChangeSourceKey
__ SpringBoardUI: _SBBacklightFadeFinishedNotification
__ SpringBoardUI: _SBBacklightLevelChangedNotification
__ SpringBoardUI: _SBBacklightNewFactorKey
__ SpringBoardUI: _SBBacklightOldFactorKey
__ SpringBoardUI: _SBBacklightWillTurnOnWhileUILockedNotification
__ SpringBoardUI: _SBDeviceLockStateChangedNotification
__ SpringBoardUI: _SBFeaturesShouldBeLockedForRemoteLockNotification
__ SpringBoardUI: _SBHeadsetButtonUpNotification
__ SpringBoardUI: _SBHomescreenIconsDidAppearNotification
__ SpringBoardUI: _SBHomescreenIconsWillAppearNotification
__ SpringBoardUI: _SBIncomingCallPendingNotification
__ SpringBoardUI: _SBLiftToWakeGestureDetectedNotification
__ SpringBoardUI: _SBLockButtonPressedNotification
__ SpringBoardUI: _SBMenuButtonPressedNotification
__ SpringBoardUI: _SBNetworkTetheringStateChangedNotification
__ SpringBoardUI: _SBOrientationLockChangedNotification
__ SpringBoardUI: _SBProximityDidChangeNotification
__ SpringBoardUI: _SBStringFromAlertItemDeactivateReason
__ SpringBoardUI: _SBTelephonyDaemonRestartNotification
__ SpringBoardUI: _SBTelephonyManagerAirplaneModeDidChangeNotification
__ SpringBoardUI: _SBTelephonyManagerDidProcessAirplaneModeChangeNotification
__ SpringBoardUI: _SBTelephonyManagerWillProcessAirplaneModeChangeNotification
__ SpringBoardUI: _SBTestingConfigureNextAssistantRecognitionStrings
__ SpringBoardUI: _SBTestingConfigureNextVoiceRecognitionAudioInputPathsNotification
__ SpringBoardUI: _SBUIConvertLockSourceToBacklightChangeSource
__ SpringBoardUI: _SBUIConvertUnlockSourceToBacklightChangeSource
__ SpringBoardUI: _SBUIHasHIDRingerSwitch
__ SpringBoardUI: _SBUILaunchOptionKeyAllowUnlock
__ SpringBoardUI: _SBUILaunchOptionKeyPNGLess
__ SpringBoardUI: _SBUIPluginContextOptionBundleId
__ SpringBoardUI: _SBUIPluginContextOptionSupportsCarFullScreen
__ SpringBoardUI: _SBUIPrewarmKeyboard
__ SpringBoardUI: _SBUIRingerSwitchBehaviorDidChangeNotification
__ SpringBoardUI: _SBUIUseHIDRingerAsOrientationLock
__ SpringBoardUI: _SBUserEventOccurredNotification
__ SpringBoardUI: _SBVolumeChangedNotification
__ SpringBoardUI: _SBWifiManagerCurrentDeviceDidChangeNotification
__ SpringBoardUI: _SBWifiManagerDevicePresenceDidChangeNotification
__ SpringBoardUI: _SBWifiManagerPowerStateDidChangeNotification
__ SpringBoardUI: _kSBNotificationKeyDeviceLockState
__ SpringBoardUI: _kSBNotificationKeyDisplayIdentifier
__ SpringBoardUI: _kSBNotificationKeyHeadsetButtonLongPress
__ SpringBoardUI: _kSBNotificationKeyState
__ SpringBoardUIServices: _NSStringFromSBUIBiometricEvent
__ SpringBoardUIServices: _NSStringFromSBUIBiometricMatchMode
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIHandleDeviceLockSceneAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIHardwareButtonEventSceneAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallDestroySceneAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallRequestPresentationModeAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallSceneClientSettings
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallSceneClientSettingsDiffInspector
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallSceneSettings
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallSceneSpecification
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallShowNoticeForSystemControlsAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUILoginUISceneClientSettings
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUILoginUISceneClientSettingsDiffInspector
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUILoginUISceneSpecification
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUISystemNotesSceneSpecification
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIBannerClientContainerViewController
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIBannerSourceApplicationSceneSpecification
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIBiometricResource
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUICallToActionLabel
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIEmergencyCallHostViewController
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUILegibilityLabel
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUILegibilityView
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUILockOverlayView
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIPasscodeBiometricResource
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIPasscodeLockViewFactory
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIPowerDownView
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIPresentableHomeAffordanceThresholdAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIProudLockIconView
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIRemoteAlertButtonAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUISizeObservingView
__ SpringBoardUIServices: _OBJC_CLASS_$__SBUIBiometricKitInterface
__ SpringBoardUIServices: _OBJC_CLASS_$__SBUIBiometricMatchingAssertion
__ SpringBoardUIServices: _OBJC_METACLASS_$_SBUIEmergencyCallHostViewController
__ SpringBoardUIServices: _OBJC_METACLASS_$_SBUILockOverlayView
__ SpringBoardUIServices: _OBJC_METACLASS_$_SBUIPowerDownView
__ SpringBoardUIServices: _SBBiometricEventMonitorHasAuthenticated
__ SpringBoardUIServices: _SBFloatEqualsFloat
__ SpringBoardUIServices: _SBFloatFloorForScale
__ SpringBoardUIServices: _SBFloatGreaterThanFloat
__ SpringBoardUIServices: _SBFloatRoundForMainScreenScale
__ SpringBoardUIServices: _SBFloatRoundForScale
__ SpringBoardUIServices: _SBLaunchImageIngestionInfoKey
__ SpringBoardUIServices: _SBLaunchImageIngestionInfo_cacheGUIDKey
__ SpringBoardUIServices: _SBLaunchImageIngestionInfo_ingestorVersionKey
__ SpringBoardUIServices: _SBLaunchImageIngestionInfo_installInstanceIDKey
__ SpringBoardUIServices: _SBLayoutDefaultSideLayoutElementWidth
__ SpringBoardUIServices: _SBLayoutSupportsSideLayoutRole
__ SpringBoardUIServices: _SBOffsetPointInReferenceSpaceAlongSceneSpaceDirectionForOrientation
__ SpringBoardUIServices: _SBPhoneOnPadFallbackLaunchSize
__ SpringBoardUIServices: _SBRectContainsPoint
__ SpringBoardUIServices: _SBRectCornerRadiiForRadius
__ SpringBoardUIServices: _SBRectWithSize
__ SpringBoardUIServices: _SBSUIHardwareButtonEventTypeDescription
__ SpringBoardUIServices: _SBSUIHardwareButtonEventTypeIsValid
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceBannerDismissal
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceBannerSwipeToUnfurl
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceBannerTap
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceClientVisibilityPreference
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceDeviceLock
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceDisplayWake
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceFullscreenOverlayDismissal
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceHomeButton
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceInitialPresentation
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceRotation
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceSceneDestroyed
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceSceneResize
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceSwitcherDismissal
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceSystemGesture
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceTestRecipe
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceWindowedAccessoryAttach
__ SpringBoardUIServices: _SBSUIInCallWindowSceneSessionDestructionReasonDescription
__ SpringBoardUIServices: _SBSizeEqualsSize
__ SpringBoardUIServices: _SBStringFromRectCornerRadii
__ SpringBoardUIServices: _SBTransformFromOrientationToOrientation
__ SpringBoardUIServices: _SBTransformedRectWithScale
__ SpringBoardUIServices: _SBTransformedSizeWithScale
__ SpringBoardUIServices: _SBUIApplicationDragUserActivityUserInfoKeyBundleIdentifier
__ SpringBoardUIServices: _SBUICommonInitialize
__ SpringBoardUIServices: _SBUICurrentPasscodeStyleForUser
__ SpringBoardUIServices: _SBUIDragItemProviderApplicationTypeIdentifier
__ SpringBoardUIServices: _SBUIGraphicsQuality
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscode
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonBioLockout
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonKey
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonMatchFailure
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonTimerExpired
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonUserRequested
__ SpringBoardUIServices: _SBUIRemoteAlertActivationReasonActivatingForUILock
__ SpringBoardUIServices: _SBUnintegralizedRectCenteredAboutPoint
__ SpringBoardUIServices: _UIContentSizeCategoryClip
__ SpringBoardUIServices: _kSBUIBannerDismissalPreventionContextUserInfoWantsContextKey
__ SpringBoardUIServices: _kSBUIPresentableHandlesButtonEventsUserInfoKey
__ SpringBoardUIServices: _kSBUIPresentableShouldBypassScreenSharingUserInfoKey
__ SpringBoardUIServices: _kSBUIPresentableWantsDismissalPreventionContextUserInfoKey
__ SpringBoardUIServices: _kSBUIPresentableWantsGestureRecognizerPriorityContextUserInfoKey
__ SpringBoardUIServices: _kSBUIPresentableWantsHomeGestureContextUserInfoKey
__ SpringBoardWallpaper: _OBJC_CLASS_$_SBWWallpaperEffectViewBase
__ SpringBoardWallpaper: _OBJC_CLASS_$_SBWWallpaperRemoteViewController
__ SpringBoardWallpaper: _OBJC_CLASS_$_SBWWallpaperViewController
__ SpringBoardWallpaper: _OBJC_METACLASS_$_SBWWallpaperEffectViewBase
__ SpringBoardWallpaper: _SBWallpaperStyleDescription
__ SpringBoardWallpaper: _SBWallpaperStyleForBackgroundStyle
__ SpringBoardWallpaper: _SBWallpaperStyleTransitionStateMake
__ SpringBoardWallpaper: __WallpaperBackdropParametersForStyleAndAverageColor
__ SpringBoardWallpaper: __WallpaperStyleByRemovingTintFromStyle
__ StoreServices: _OBJC_CLASS_$_SSDownloadManager
__ StoreServices: _OBJC_CLASS_$_SSSoftwareUpdatesRequest
__ StudyLog: _OBJC_CLASS_$_SLGActivatableLogger
__ StudyLog: _OBJC_CLASS_$_SLGLog
__ StudyLog: _OBJC_CLASS_$_SLGNotificationActivatedLogger
__ Synapse: _OBJC_CLASS_$_SYBacklinkIndicatorUsage
__ Synapse: _OBJC_CLASS_$_SYFeatureEligibility
__ Synapse: _OBJC_CLASS_$_SYSystemPaperAnalytics
__ Synapse: _SYSystemPaperActivationMethodBacklink
__ Synapse: _SYSystemPaperActivationMethodKeyboard
__ Synapse: _SYSystemPaperActivationMethodSwipeFinger
__ Synapse: _SYSystemPaperActivationMethodSwipePencil
__ Synapse: _SYSystemPaperActivationMethodSwipeWithPIPFinger
__ Synapse: _SYSystemPaperActivationMethodSwipeWithPIPPencil
__ Synapse: _SYSystemPaperDismissMethodKeyboard
__ Synapse: _SYSystemPaperDismissMethodSwipe
__ Synapse: _SYSystemPaperDismissMethodTimeout
__ SystemConfiguration: _SCDynamicStoreCopyValue
__ SystemConfiguration: _SCDynamicStoreCreate
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkInterfaceEntity
__ SystemConfiguration: _SCDynamicStoreSetDispatchQueue
__ SystemConfiguration: _SCDynamicStoreSetNotificationKeys
__ SystemConfiguration: _kSCDynamicStoreDomainState
__ SystemConfiguration: _kSCEntNetIPv4
__ SystemConfiguration: _kSCEntNetIPv6
__ SystemStatus: _OBJC_CLASS_$_STBatteryStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STBatteryStatusDomainPublisher
__ SystemStatus: _OBJC_CLASS_$_STCallingStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STCallingStatusDomainUserInteraction
__ SystemStatus: _OBJC_CLASS_$_STDynamicActivityAttributionManager
__ SystemStatus: _OBJC_CLASS_$_STFocusStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STLocationStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STMediaStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STPlaygroundsStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STTelephonyStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STVoiceControlStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STWifiStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STWifiStatusDomainPublisher
__ SystemStatusServer: _OBJC_CLASS_$_STStatusServer
__ SystemStatusServer: _OBJC_CLASS_$_STTelephonyStateProvider
__ SystemStatusServer: _OBJC_CLASS_$_STTelephonyStatusDomainDataProvider
__ SystemWake: _OBJC_CLASS_$_SWWakingTimer
__ TelephonyUtilities: _OBJC_CLASS_$_TUCallCapabilities
__ TelephonyUtilities: _OBJC_CLASS_$_TUCallCenter
__ TelephonyUtilities: _OBJC_CLASS_$_TUDialRequest
__ TelephonyUtilities: _TUAudioSystemAudioPickableRoutesChanged
__ TelephonyUtilities: _TUCallCapabilitiesEmergencyCallbackModeChangedNotification
__ TelephonyUtilities: _TUCallCenterCallContinuityStateChangedNotification
__ TelephonyUtilities: _TUCallCenterCallStatusChangedNotification
__ TelephonyUtilities: _TUCallCenterControlFailureNotification
__ TelephonyUtilities: _TUCallCenterIsEmergencyChangedNotification
__ TelephonyUtilities: _TUCallCenterVideoCallStatusChangedNotification
__ TelephonyUtilities: _TUCallModelChangedNotification
__ TelephonyUtilities: _TUISOCountryCodeForMCC
__ TelephonyUtilities: _TUInCallRemoteAlertViewControllerClassName
__ TelephonyUtilities: _TUIsCallHandoffActivityType
__ TelephonyUtilities: _TUShouldShowCallHandoff
__ TestFlightCore: _OBJC_CLASS_$_TFBetaLaunchHandle
__ TextInput: _OBJC_CLASS_$_TIPreferencesController
__ TextInput: _TIHardwareKeyboardLastSeenPreference
__ ToneLibrary: _OBJC_CLASS_$_TLAlert
__ ToneLibrary: _OBJC_CLASS_$_TLAlertConfiguration
__ ToneLibrary: _OBJC_CLASS_$_TLToneManager
__ ToneLibrary: _TLAlertTopicSystemNotificationGeneric
__ ToneLibrary: _TLVibrationIdentifierNone
__ UIKit: _CGSizeFromString
__ UIKit: _NSDirectionalEdgeInsetsZero
__ UIKit: _NSFontAttributeName
__ UIKit: _NSForegroundColorAttributeName
__ UIKit: _NSParagraphStyleAttributeName
__ UIKit: _NSStringFromCGAffineTransform
__ UIKit: _NSStringFromCGPoint
__ UIKit: _NSStringFromCGRect
__ UIKit: _NSStringFromCGSize
__ UIKit: _NSStringFromUIEdgeInsets
__ UIKit: _OBJC_CLASS_$_NSMutableParagraphStyle
__ UIKit: _OBJC_CLASS_$_UIAction
__ UIKit: _OBJC_CLASS_$_UIActivityContinuationAction
__ UIKit: _OBJC_CLASS_$_UIActivityIndicatorView
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIApplicationCoverSheetSceneSpecification
__ UIKit: _OBJC_CLASS_$_UIApplicationExternalScreenSceneSpecification
__ UIKit: _OBJC_CLASS_$_UIApplicationLegacyVOIPKeepAliveAction
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneClientSettings
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneClientSettingsDiffInspector
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneDeactivationManager
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneSettings
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneSettingsDiffInspector
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneSpecification
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneTransitionContext
__ UIKit: _OBJC_CLASS_$_UIBannerAction
__ UIKit: _OBJC_CLASS_$_UIBarButtonItem
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIBlurEffect
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UICollectionViewCell
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UICommandAlternate
__ UIKit: _OBJC_CLASS_$_UIControl
__ UIKit: _OBJC_CLASS_$_UIDestroySceneAction
__ UIKit: _OBJC_CLASS_$_UIDestroySceneActionResponse
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIDidTakeScreenshotAction
__ UIKit: _OBJC_CLASS_$_UIDismissSceneAction
__ UIKit: _OBJC_CLASS_$_UIDragInteraction
__ UIKit: _OBJC_CLASS_$_UIDragItem
__ UIKit: _OBJC_CLASS_$_UIDragPreview
__ UIKit: _OBJC_CLASS_$_UIDragPreviewTarget
__ UIKit: _OBJC_CLASS_$_UIDraggingSystemMonitor
__ UIKit: _OBJC_CLASS_$_UIDraggingSystemTouchRoutingPolicy
__ UIKit: _OBJC_CLASS_$_UIDropInteraction
__ UIKit: _OBJC_CLASS_$_UIDropProposal
__ UIKit: _OBJC_CLASS_$_UIFetchContentInBackgroundAction
__ UIKit: _OBJC_CLASS_$_UIFocusSystem
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIFontDescriptor
__ UIKit: _OBJC_CLASS_$_UIForceStageInteractionProgress
__ UIKit: _OBJC_CLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRenderer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRendererFormat
__ UIKit: _OBJC_CLASS_$_UIHBClickGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIHBLongClickGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIHandleBackgroundURLSessionAction
__ UIKit: _OBJC_CLASS_$_UIHoverGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIImpactFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UIKeyCommand
__ UIKit: _OBJC_CLASS_$_UIKeyShortcutHUDService
__ UIKit: _OBJC_CLASS_$_UIKeyboard
__ UIKit: _OBJC_CLASS_$_UIKeyboardImpl
__ UIKit: _OBJC_CLASS_$_UIKeyboardInputModeController
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UILongPressGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIMenu
__ UIKit: _OBJC_CLASS_$_UIMenuSystem
__ UIKit: _OBJC_CLASS_$_UIMutableApplicationSceneClientSettings
__ UIKit: _OBJC_CLASS_$_UIMutableApplicationSceneSettings
__ UIKit: _OBJC_CLASS_$_UIMutableTransformer
__ UIKit: _OBJC_CLASS_$_UINavigationController
__ UIKit: _OBJC_CLASS_$_UINib
__ UIKit: _OBJC_CLASS_$_UINotificationFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UIOpenURLAction
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPeripheralHost
__ UIKit: _OBJC_CLASS_$_UIPinchGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPointerEffect
__ UIKit: _OBJC_CLASS_$_UIPointerHighlightEffect
__ UIKit: _OBJC_CLASS_$_UIPointerInteraction
__ UIKit: _OBJC_CLASS_$_UIPointerLiftEffect
__ UIKit: _OBJC_CLASS_$_UIPointerRegion
__ UIKit: _OBJC_CLASS_$_UIPointerShape
__ UIKit: _OBJC_CLASS_$_UIPointerStyle
__ UIKit: _OBJC_CLASS_$_UIPreviewForceInteractionProgress
__ UIKit: _OBJC_CLASS_$_UIPreviewParameters
__ UIKit: _OBJC_CLASS_$_UIQuickLookInternalSceneSpecification
__ UIKit: _OBJC_CLASS_$_UIRootSceneWindow
__ UIKit: _OBJC_CLASS_$_UIRootWindowScenePresentationBinder
__ UIKit: _OBJC_CLASS_$_UIRotationGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UISceneActivationConditions
__ UIKit: _OBJC_CLASS_$_UISceneLayerTargetFactory
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScreenEdgePanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UISegmentedControl
__ UIKit: _OBJC_CLASS_$_UISlider
__ UIKit: _OBJC_CLASS_$_UISpringLoadedInteraction
__ UIKit: _OBJC_CLASS_$_UIStackView
__ UIKit: _OBJC_CLASS_$_UIStatusBar
__ UIKit: _OBJC_CLASS_$_UIStatusBarHideAnimationParameters
__ UIKit: _OBJC_CLASS_$_UIStatusBarHoverRegionAction
__ UIKit: _OBJC_CLASS_$_UIStatusBarManager
__ UIKit: _OBJC_CLASS_$_UIStatusBarServer
__ UIKit: _OBJC_CLASS_$_UIStatusBarStyleAnimationParameters
__ UIKit: _OBJC_CLASS_$_UIStatusBarStyleRequest
__ UIKit: _OBJC_CLASS_$_UIStatusBarTapAction
__ UIKit: _OBJC_CLASS_$_UIStatusBarWindow
__ UIKit: _OBJC_CLASS_$_UIStatusBar_Base
__ UIKit: _OBJC_CLASS_$_UIStatusBar_Modern
__ UIKit: _OBJC_CLASS_$_UISwipeGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UISwitch
__ UIKit: _OBJC_CLASS_$_UISystemNavigationAction
__ UIKit: _OBJC_CLASS_$_UISystemNavigationActionDestinationContext
__ UIKit: _OBJC_CLASS_$_UISystemShellApplication
__ UIKit: _OBJC_CLASS_$_UITableView
__ UIKit: _OBJC_CLASS_$_UITableViewCell
__ UIKit: _OBJC_CLASS_$_UITableViewController
__ UIKit: _OBJC_CLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITargetedDragPreview
__ UIKit: _OBJC_CLASS_$_UITargetedPreview
__ UIKit: _OBJC_CLASS_$_UITextEffectsWindow
__ UIKit: _OBJC_CLASS_$_UITextField
__ UIKit: _OBJC_CLASS_$_UITextView
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _OBJC_CLASS_$_UITransform
__ UIKit: _OBJC_CLASS_$_UIUserInterfaceStyleArbiter
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIViewFloatAnimatableProperty
__ UIKit: _OBJC_CLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_CLASS_$_UIVisualEffectView
__ UIKit: _OBJC_CLASS_$_UIWebClip
__ UIKit: _OBJC_CLASS_$_UIWindow
__ UIKit: _OBJC_CLASS_$_UIWindowScene
__ UIKit: _OBJC_CLASS_$_UIWindowSceneSpecification
__ UIKit: _OBJC_CLASS_$__UIApplicationInfo
__ UIKit: _OBJC_CLASS_$__UIAssetManager
__ UIKit: _OBJC_CLASS_$__UIBackdropView
__ UIKit: _OBJC_CLASS_$__UIBackdropViewSettings
__ UIKit: _OBJC_CLASS_$__UIBannerContent
__ UIKit: _OBJC_CLASS_$__UIDirectionalRotationView
__ UIKit: _OBJC_CLASS_$__UIDiscreteFeedback
__ UIKit: _OBJC_CLASS_$__UIEdgeFeedbackGenerator
__ UIKit: _OBJC_CLASS_$__UIEdgeFeedbackGeneratorConfiguration
__ UIKit: _OBJC_CLASS_$__UIEventDeferringManager
__ UIKit: _OBJC_CLASS_$__UIFeedbackEngine
__ UIKit: _OBJC_CLASS_$__UIFeedbackPattern
__ UIKit: _OBJC_CLASS_$__UIHyperConstantExtender
__ UIKit: _OBJC_CLASS_$__UIHyperInteractor
__ UIKit: _OBJC_CLASS_$__UIHyperpoint
__ UIKit: _OBJC_CLASS_$__UIHyperrectangle
__ UIKit: _OBJC_CLASS_$__UIHyperregionUnion
__ UIKit: _OBJC_CLASS_$__UIImpactFeedbackGeneratorConfiguration
__ UIKit: _OBJC_CLASS_$__UILayerHostView
__ UIKit: _OBJC_CLASS_$__UILegibilityLabel
__ UIKit: _OBJC_CLASS_$__UILegibilitySettings
__ UIKit: _OBJC_CLASS_$__UINotificationFeedbackGeneratorConfiguration
__ UIKit: _OBJC_CLASS_$__UIPortalView
__ UIKit: _OBJC_CLASS_$__UIRemoteKeyboards
__ UIKit: _OBJC_CLASS_$__UIRemoteViewController
__ UIKit: _OBJC_CLASS_$__UIRootWindow
__ UIKit: _OBJC_CLASS_$__UISettings
__ UIKit: _OBJC_CLASS_$__UIStatusBarAction
__ UIKit: _OBJC_CLASS_$__UIStatusBarData
__ UIKit: _OBJC_CLASS_$__UIStatusBarDataStringEntry
__ UIKit: _OBJC_CLASS_$__UISystemGestureManager
__ UIKit: _OBJC_CLASS_$__UIVibrantSettings
__ UIKit: _OBJC_CLASS_$__UIViewControllerTransitionContext
__ UIKit: _OBJC_CLASS_$__UIWindowSceneActivationCleanupAction
__ UIKit: _OBJC_CLASS_$__UIWindowSceneActivationPrewarmAction
__ UIKit: _OBJC_CLASS_$__UIWindowSceneActivationPrewarmActionResponse
__ UIKit: _OBJC_METACLASS_$_UIApplicationSceneSpecification
__ UIKit: _OBJC_METACLASS_$_UIButton
__ UIKit: _OBJC_METACLASS_$_UICollectionViewCell
__ UIKit: _OBJC_METACLASS_$_UIControl
__ UIKit: _OBJC_METACLASS_$_UIDragInteraction
__ UIKit: _OBJC_METACLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIHBClickGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIHBLongClickGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIImageView
__ UIKit: _OBJC_METACLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIPinchGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIRootSceneWindow
__ UIKit: _OBJC_METACLASS_$_UIRootWindowScenePresentationBinder
__ UIKit: _OBJC_METACLASS_$_UIRotationGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIScreenEdgePanGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIScrollView
__ UIKit: _OBJC_METACLASS_$_UIStatusBarManager
__ UIKit: _OBJC_METACLASS_$_UISystemShellApplication
__ UIKit: _OBJC_METACLASS_$_UITableViewController
__ UIKit: _OBJC_METACLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIWindow
__ UIKit: _OBJC_METACLASS_$_UIWindowScene
__ UIKit: _OBJC_METACLASS_$__UIApplicationInfo
__ UIKit: _OBJC_METACLASS_$__UIBackdropViewSettings
__ UIKit: _OBJC_METACLASS_$__UIRemoteViewController
__ UIKit: _OBJC_METACLASS_$__UIRootWindow
__ UIKit: _OBJC_METACLASS_$__UISettings
__ UIKit: _UIAccessibilityForceTouchStatusChangedNotification
__ UIKit: _UIAccessibilityIsReduceMotionEnabled
__ UIKit: _UIAccessibilityIsReduceTransparencyEnabled
__ UIKit: _UIAccessibilityIsSwitchControlRunning
__ UIKit: _UIAccessibilityIsVoiceOverRunning
__ UIKit: _UIAccessibilityReduceMotionStatusDidChangeNotification
__ UIKit: _UIAccessibilityReduceTransparencyStatusDidChangeNotification
__ UIKit: _UIAccessibilityShouldDifferentiateWithoutColor
__ UIKit: _UIAccessibilityShouldDifferentiateWithoutColorDidChangeNotification
__ UIKit: _UIAccessibilityTraitButton
__ UIKit: _UIAnimationDragCoefficient
__ UIKit: _UIApp
__ UIKit: _UIApplicationCapabilitiesInfoKey
__ UIKit: _UIApplicationDidFinishLaunchingNotification
__ UIKit: _UIApplicationDidReceiveMemoryWarningNotification
__ UIKit: _UIApplicationLaunchOptionsAnnotationKey
__ UIKit: _UIApplicationLaunchOptionsAppLinkOpenStrategyChangedKey
__ UIKit: _UIApplicationLaunchOptionsBrowserReuseTabKey
__ UIKit: _UIApplicationLaunchOptionsSourceApplicationKey
__ UIKit: _UIApplicationLaunchOptionsURLKey
__ UIKit: _UIApplicationLaunchOptionsURLSessionKey
__ UIKit: _UIApplicationMain
__ UIKit: _UIApplicationPreferredUserInterfaceStyleKey
__ UIKit: _UIApplicationSceneDeactivationReasonDescription
__ UIKit: _UIApplicationSceneDeactivationReasonMaskContainsReason
__ UIKit: _UIApplicationStatusBarHeightChangedDurationKey
__ UIKit: _UIApplicationStatusBarHeightChangedNotification
__ UIKit: _UIApplicationTestingNotificationBundleIdKey
__ UIKit: _UIBackgroundModeAudio
__ UIKit: _UIBackgroundModeFetch
__ UIKit: _UIBackgroundModeRemoteNotification
__ UIKit: _UIBackgroundModeVoIP
__ UIKit: _UIContentSizeCategoryAccessibilityMedium
__ UIKit: _UIContentSizeCategoryCompareToCategory
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIContentSizeCategoryExtraExtraExtraLarge
__ UIKit: _UIContentSizeCategoryExtraSmall
__ UIKit: _UIDeviceOrientationDidChangeNotification
__ UIKit: _UIDeviceProximityStateDidChangeNotification
__ UIKit: _UIDistanceBetweenPoints
__ UIKit: _UIDraggingSystemSceneUTI
__ UIKit: _UIEdgeInsetsFromApplicationSupportDisplayEdgeInsetsWrapper
__ UIKit: _UIEdgeInsetsMakeWithEdges
__ UIKit: _UIEdgeInsetsMax
__ UIKit: _UIEdgeInsetsMin
__ UIKit: _UIEdgeInsetsSubtract
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFontDescriptorTraitsAttribute
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIFontTextStyleCallout
__ UIKit: _UIFontTextStyleCaption1
__ UIKit: _UIFontTextStyleCaption2
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UIFontTextStyleHeadline
__ UIKit: _UIFontTextStyleLargeTitle
__ UIKit: _UIFontTextStyleSubhead
__ UIKit: _UIFontTextStyleSubheadline
__ UIKit: _UIFontTextStyleTitle1
__ UIKit: _UIFontTextStyleTitle3
__ UIKit: _UIFontWeightBold
__ UIKit: _UIFontWeightMedium
__ UIKit: _UIFontWeightRegular
__ UIKit: _UIFontWeightSemibold
__ UIKit: _UIFontWeightTrait
__ UIKit: _UIFormattedPhoneNumberFromString
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetCurrentContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ UIKit: _UIHUDWindowLevel
__ UIKit: _UIImageJPEGRepresentation
__ UIKit: _UIImagePNGRepresentation
__ UIKit: _UIIntegralTransform
__ UIKit: _UIKeyInputDelete
__ UIKit: _UIKeyInputDownArrow
__ UIKit: _UIKeyInputEmpty
__ UIKit: _UIKeyInputEnd
__ UIKit: _UIKeyInputEscape
__ UIKit: _UIKeyInputF1
__ UIKit: _UIKeyInputF10
__ UIKit: _UIKeyInputF11
__ UIKit: _UIKeyInputF12
__ UIKit: _UIKeyInputF2
__ UIKit: _UIKeyInputF3
__ UIKit: _UIKeyInputF4
__ UIKit: _UIKeyInputF5
__ UIKit: _UIKeyInputF6
__ UIKit: _UIKeyInputF7
__ UIKit: _UIKeyInputF8
__ UIKit: _UIKeyInputF9
__ UIKit: _UIKeyInputHome
__ UIKit: _UIKeyInputLeftArrow
__ UIKit: _UIKeyInputPageDown
__ UIKit: _UIKeyInputPageUp
__ UIKit: _UIKeyInputRightArrow
__ UIKit: _UIKeyInputUpArrow
__ UIKit: _UIKeyShortcutHUDDidDismissNotification
__ UIKit: _UIKeyShortcutHUDDidPresentNotification
__ UIKit: _UIKeyboardAnimationCurveUserInfoKey
__ UIKit: _UIKeyboardAnimationDurationUserInfoKey
__ UIKit: _UIKeyboardAutomaticFinishRotation
__ UIKit: _UIKeyboardAutomaticIsOnScreen
__ UIKit: _UIKeyboardAutomaticRotateToOrientation
__ UIKit: _UIKeyboardDictationInfoOnScreenNotifyKey
__ UIKit: _UIKeyboardDidHideNotification
__ UIKit: _UIKeyboardDidShowNotification
__ UIKit: _UIKeyboardEndIntersectionHeightIncludingAccessory
__ UIKit: _UIKeyboardForceOrderOutAutomaticAnimated
__ UIKit: _UIKeyboardFrameEndUserInfoKey
__ UIKit: _UIKeyboardOrderOutAutomaticSkippingAnimation
__ UIKit: _UIKeyboardOriginatedFromRotationUserInfoKey
__ UIKit: _UIKeyboardPrivateWillChangeFrameNotification
__ UIKit: _UIKeyboardPrivateWillHideNotification
__ UIKit: _UIKeyboardPrivateWillShowNotification
__ UIKit: _UIKeyboardWillChangeFrameNotification
__ UIKit: _UIKeyboardWillHideNotification
__ UIKit: _UIKeyboardWillShowNotification
__ UIKit: _UILayoutFittingCompressedSize
__ UIKit: _UIMenuRoot
__ UIKit: _UIPointRoundToScale
__ UIKit: _UIRectCenteredAboutPoint
__ UIKit: _UIRectCenteredAboutPointScale
__ UIKit: _UIRectCenteredIntegralRect
__ UIKit: _UIRectCenteredIntegralRectScale
__ UIKit: _UIRectCenteredRect
__ UIKit: _UIRectCenteredXInRect
__ UIKit: _UIRectCenteredXInRectScale
__ UIKit: _UIRectCenteredYInRectScale
__ UIKit: _UIRectCornerRadiiZero
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRectInset
__ UIKit: _UIRectIntegralWithScale
__ UIKit: _UIRectIsDiscrete
__ UIKit: _UIRoundToScale
__ UIKit: _UIRoundToViewScale
__ UIKit: _UISceneSessionRoleQuickLook
__ UIKit: _UIScreenshotServicesWindowLevel
__ UIKit: _UIScrollViewDecelerationRateFast
__ UIKit: _UIScrollViewDecelerationRateNormal
__ UIKit: _UISizeRoundToScale
__ UIKit: _UISpringBoardLockScreenWindowLevel
__ UIKit: _UISpringBoardStatusBarWindowLevel
__ UIKit: _UIStatusBarHeight
__ UIKit: _UIStatusBarLocalizedNotChargingString
__ UIKit: _UIStatusBarLocalizedRecordingStringForAppName
__ UIKit: _UIStatusBarStyleIgnoredOverridesKey
__ UIKit: _UIStatusBarStyleIsDoubleHeight
__ UIKit: _UISystemRootDirectory
__ UIKit: _UITableViewAutomaticDimension
__ UIKit: _UITransitionContextFromViewControllerKey
__ UIKit: _UITransitionContextFromViewKey
__ UIKit: _UITransitionContextToViewControllerKey
__ UIKit: _UITransitionContextToViewKey
__ UIKit: _UIUserInterfaceStyleArbiterStyleChangedNotification
__ UIKit: _UIViewNoIntrinsicMetric
__ UIKit: _UIWhitePointAdaptivityStyleKey
__ UIKit: _UIWindowDidBecomeHiddenNotification
__ UIKit: _UIWindowDidBecomeKeyNotification
__ UIKit: _UIWindowDidBecomeVisibleNotification
__ UIKit: _UIWindowDidMoveToScreenNotification
__ UIKit: _UIWindowDidRotateNotification
__ UIKit: _UIWindowLevelAlert
__ UIKit: _UIWindowLevelNormal
__ UIKit: _UIWindowLevelStatusBar
__ UIKit: _UIWindowNewScreenUserInfoKey
__ UIKit: _UIWindowSceneSessionRoleApplication
__ UIKit: __UIAccessibilityForceTouchEnabled
__ UIKit: __UIAppActiveInterfaceOrientationDidChangeNotification
__ UIKit: __UIAppActiveInterfaceOrientationRotateAnimatedUserInfoKey
__ UIKit: __UIBackdropViewSettingsStackingLevelHigh
__ UIKit: __UICreateCGImageFromIOSurfaceWithOptions
__ UIKit: __UICreateScreenUIImageWithRotation
__ UIKit: __UIDragInteractionDefaultLiftDelay
__ UIKit: __UIInitializeDraggingSystem
__ UIKit: __UIKeyboardInternalWillRotateNotification
__ UIKit: __UILegibilityStrengthMedium
__ UIKit: __UILegibilityStyleFromStatusBarStyle
__ UIKit: __UIMotionEffectsEnabledDidChangeNotification
__ UIKit: __UIRenderingBufferCreate
__ UIKit: __UISceneConnectionOptionsOpenAsDownloadKey
__ UIKit: __UISheetFormSize
__ UIKit: __UISheetMinimumTopInset
__ UIKit: __UISheetPageSize
__ UIKit: __UISheetTransform
__ UIKit: __UIStatusBarHostedInSpringBoard
__ UIKit: __UIStatusBarManagerWindowSceneComponentKey
__ UIKit: __UIStatusBarPartIdentifierBackNavigation
__ UIKit: __UIStatusBarPartIdentifierCenter
__ UIKit: __UIStatusBarPartIdentifierFittingTrailing
__ UIKit: __UIStatusBarPartIdentifierLeading
__ UIKit: __UIStatusBarPartIdentifierTrailing
__ UIKit: __UIStatusBarStyleFromLegibilityStyle
__ UIKit: __UIStringFromWhitePointAdaptivityStyle
__ UIKit: __UISystemGestureLocationForScrollEventInView
__ UIKit: __UISystemGestureLocationForTouchInView
__ UIKit: __UISystemGestureLocationInView
__ UIKit: __UISystemGesturePreviousLocationForTouchInView
__ UIKit: __UISystemGestureTranslationInView
__ UIKit: __UISystemGestureVelocityInView
__ UIKit: __UIUpdatedVisualStyleAllowed
__ UIKit: __UIUserInterfaceSizeClassForHeight
__ UIKit: __UIUserInterfaceSizeClassForWidth
__ UIKit: __UIWhitePointAdaptivityStyleFromString
__ UIKit: __UIWhitePointAdaptivityStyleKey
__ UIKit: __UIWindowConvertPointFromOrientationToOrientation
__ UIKit: __UIWindowConvertRectFromOrientationToOrientation
__ UIKit: __checkApplicationRestorationState
__ UIKit: __deleteStateRestorationArchiveForApplication
__ UIKit: __interfaceOrientedRegionGivenScreenRegion
__ UIKit: __screenRegionGivenInterfaceOrientedRegion
__ UIKit: _kUIRenderingDestinationGamut
__ UIKitServices: _OBJC_CLASS_$_UISApplicationInitializationContext
__ UIKitServices: _OBJC_CLASS_$_UISApplicationStateService
__ UIKitServices: _OBJC_CLASS_$_UISApplicationSupportDisplayEdgeInfo
__ UIKitServices: _OBJC_CLASS_$_UISApplicationSupportDisplayEdgeInsetsWrapper
__ UIKitServices: _OBJC_CLASS_$_UISApplicationSupportService
__ UIKitServices: _OBJC_CLASS_$_UISDeviceContext
__ UIKitServices: _OBJC_CLASS_$_UISDisplayContext
__ UIKitServices: _OBJC_CLASS_$_UISDisplaySingleRectShape
__ UIKitServices: _OBJC_CLASS_$_UISFetchContentInBackgroundActionResponse
__ UIKitServices: _OBJC_CLASS_$_UISMutableApplicationInitializationContext
__ UIKitServices: _OBJC_CLASS_$_UISMutableDeviceContext
__ UIKitServices: _OBJC_CLASS_$_UISMutableDisplayContext
__ UIKitServices: _UISDeviceContextDeviceClassKey
__ UIKitServices: _UISDeviceContextDeviceCornerRadiusKey
__ UIKitServices: _UISDeviceContextHomeButtonTypeKey
__ UIKitServices: _UISOpenApplicationOptionAppBasedViewService
__ UIKitServices: _UISOpenApplicationOptionClickAttribution
__ UIKitServices: _UISOpenApplicationOptionKeySceneSessionPersistentIdentifier
__ UIKitServices: _UISOpenApplicationOptionKeyTargetContentIdentifier
__ UserActivity: _OBJC_CLASS_$_UABestAppSuggestionManager
__ UserActivity: _OBJC_CLASS_$_UAUserActivity
__ UserActivity: _UAUserActivityIsNotificationOptionKey
__ UserManagement: _OBJC_CLASS_$_UMUserManager
__ UserManagement: _OBJC_CLASS_$_UMUserSwitchBlockingTask
__ UserNotifications: _OBJC_CLASS_$_UNMutableNotificationContent
__ UserNotifications: _OBJC_CLASS_$_UNNotification
__ UserNotifications: _OBJC_CLASS_$_UNNotificationRequest
__ UserNotifications: _OBJC_CLASS_$_UNUserNotificationCenter
__ UserNotifications: _OBJC_CLASS_$__UNMutableNotificationCommunicationContext
__ UserNotifications: _OBJC_CLASS_$__UNMutableNotificationContact
__ UserNotificationsKit: _NCNotificationActionEnvironmentDefault
__ UserNotificationsKit: _NCRegisterUserNotificationsUILogging
__ UserNotificationsKit: _NCUILogClient
__ UserNotificationsKit: _NCUILogDispatch
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationAction
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationContent
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationOptions
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationRequest
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationSound
__ UserNotificationsKit: _OBJC_CLASS_$_NCNotificationAction
__ UserNotificationsKit: _OBJC_CLASS_$_NCNotificationDispatcher
__ UserNotificationsKit: _OBJC_CLASS_$_NCNotificationRequest
__ UserNotificationsServer: _UNSUserNotificationServerRun
__ UserNotificationsUI: _UNAppLaunchOriginContentExtension
__ UserNotificationsUIKit: _NCBulletinDestinationBanner
__ UserNotificationsUIKit: _NCBulletinDestinationCar
__ UserNotificationsUIKit: _NCBulletinDestinationCoverSheet
__ UserNotificationsUIKit: _NCBulletinDestinationLockScreen
__ UserNotificationsUIKit: _NCBulletinDestinationNotificationCenter
__ UserNotificationsUIKit: _NCCarPlayBannerRevocationReasonAutomaticDismissal
__ UserNotificationsUIKit: _NCCarPlayBannerRevocationReasonBackGesture
__ UserNotificationsUIKit: _NCCarPlayBannerRevocationReasonTouchPadSwipeGesture
__ UserNotificationsUIKit: _NCCarPlayBannerRevocationReasonWheelEvent
__ UserNotificationsUIKit: _NCNotificationDestinationIdentifier
__ UserNotificationsUIKit: _NCUserNotificationDragPrivateTypeIdentifier
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCBulletinNotificationSource
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCCarPlayBannerPresentableViewController
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCCarPlayBannerSource
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationBannerAuthority
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationBannerEventTracker
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationManagementLongLookContentProvider
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationManagementViewPresenter
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationPresentableViewController
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationRequestHiddenPreviewContentProvider
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationViewController
__ UserNotificationsUIKit: _OBJC_METACLASS_$_NCNotificationPresentableViewController
__ VideoToolbox: _FigCreateIOSurfaceBackedCVPixelBufferWithAttributes
__ VideoToolbox: _VTPixelTransferSessionCreate
__ VideoToolbox: _VTPixelTransferSessionInvalidate
__ VideoToolbox: _VTPixelTransferSessionTransferImage
__ VideoToolbox: _VTSessionSetProperty
__ VideoToolbox: _kVTPixelTransferPropertyKey_AllowLowQualityScaling
__ VoiceServices: _OBJC_CLASS_$_VSCacheUpdateListener
__ VoiceServices: _OBJC_CLASS_$_VSRecognitionSession
__ VoiceServices: _VSPreferencesCopyAvailableLanguageIdentifiers
__ VoiceServices: _VSPreferencesCopySpokenLanguageIdentifier
__ VoiceServices: _VSRecognitionModelCopyResourceURL
__ VoiceServices: _kVSErrorDomain
__ VoiceServices: _kVSPreferencesSpokenLanguageChangedNotification
__ VoiceServices: _kVSRecognitionSessionKeywordsDidChangeNotification
__ WallpaperKit: _OBJC_CLASS_$_WKWallpaperMigrator
__ Widgets: _OBJC_CLASS_$_WGCarouselListViewController
__ Widgets: _OBJC_CLASS_$_WGMajorListViewController
__ Widgets: _OBJC_CLASS_$_WGWidgetDiscoveryController
__ Widgets: _OBJC_CLASS_$_WGWidgetGroupViewController
__ Widgets: _OBJC_CLASS_$_WGWidgetListHeaderView
__ Widgets: _WGWidgetListEditViewControllerDidDisappearNotification
__ Widgets: _WGWidgetListEditViewControllerWillAppearNotification
__ Widgets: _WGWidgetListSettingsFullCarousel
__ Widgets: _WGWidgetListSettingsTopCarousel
__ Widgets: _WGWidgetViewControllerAddRequestBundleIdentifierKey
__ Widgets: _WGWidgetViewControllerAddRequestNotification
__ WirelessDiagnostics: _AWDPostMetric
__ WirelessDiagnostics: _OBJC_CLASS_$_AWDServerConnection
__ WorkflowUIServices: _OBJC_CLASS_$_WFWidgetOptions
__ WorkflowUIServices: _OBJC_CLASS_$_WFWidgetViewController
__ WorkflowUIServices: _WFCreateShortcutsSmallWidgetConfigurationIntent
__ WorkflowUIServices: _WFCreateShortcutsWidgetConfigurationIntent
__ iOSScreenSharing: _SS_SendStatusBarTapToScreenSharingServer
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDSpringBoardAppBrightness
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDSpringBoardBiometricUnlock
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDSpringBoardClawGesture
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDSpringBoardPressSequence
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDTuple
__ libAccessibility.dylib: __AXSAssistiveTouchEnabled
__ libAccessibility.dylib: __AXSHandleHomeButtonPressSwallowedForGuidedAccess
__ libAccessibility.dylib: __AXSHandleTripleClickHomeButtonPress
__ libAccessibility.dylib: __AXSHomeButtonAssistant
__ libAccessibility.dylib: __AXSHomeButtonRestingUnlock
__ libAccessibility.dylib: __AXSHomeClickSpeed
__ libAccessibility.dylib: __AXSLockClickDownPressDurationScaleFactor
__ libAccessibility.dylib: __AXSLockClickVarianceScaleFactor
__ libAccessibility.dylib: __AXSPearlAuthenticationHapticsEnabled
__ libAccessibility.dylib: __AXSSideButtonClickSpeed
__ libAccessibility.dylib: __AXSTripleClickCopyOptions
__ libAccessibility.dylib: _kAXSAssistiveTouchEnabledNotification
__ libAccessibility.dylib: _kAXSGuidedAccessStartBlockingEventsInSpringBoard
__ libAccessibility.dylib: _kAXSGuidedAccessStopBlockingEventsInSpringBoard
__ libAccessibility.dylib: _kAXSHomeClickSpeedChangedNotification
__ libAccessibility.dylib: _kAXSRestingHomeButtonUnlockEnabledNotification
__ libAccessibility.dylib: _kAXSSideButtonClickSpeedChangedNotification
__ libAccessibility.dylib: _kAXSTripleHomeEnabledNotification
__ libIOAccessoryManager.dylib: _IOAccessoryManagerConfigurePower
__ libIOReport.dylib: _IOReportChannelGetChannelName
__ libIOReport.dylib: _IOReportCopyChannelsInCategories
__ libIOReport.dylib: _IOReportCreateSamples
__ libIOReport.dylib: _IOReportCreateSubscription
__ libIOReport.dylib: _IOReportIterate
__ libIOReport.dylib: _IOReportStateGetCount
__ libIOReport.dylib: _IOReportStateGetInTransitions
__ libIOReport.dylib: _IOReportStateGetNameForIndex
__ libIOReport.dylib: _IOReportStateGetResidency
__ libMobileGestalt.dylib: _MGCancelNotifications
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGCopyAnswerWithError
__ libMobileGestalt.dylib: _MGCopyMultipleAnswers
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libMobileGestalt.dylib: _MGIsDeviceOfType
__ libMobileGestalt.dylib: _MGIsDeviceOneOfType
__ libMobileGestalt.dylib: _MGIsQuestionValid
__ libMobileGestalt.dylib: _MGRegisterForUpdates
__ libSystem.B.dylib: _NDR_record
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___sincosf_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_mach_send
__ libSystem.B.dylib: __dispatch_source_type_memorypressure
__ libSystem.B.dylib: __dispatch_source_type_proc
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_activity_create
__ libSystem.B.dylib: __os_activity_current
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: __xpc_event_key_name
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_string
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _atan2f
__ libSystem.B.dylib: _bootstrap_check_in2
__ libSystem.B.dylib: _bootstrap_look_up
__ libSystem.B.dylib: _bootstrap_port
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _clock_gettime_nsec_np
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _copyfile
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_async_and_wait
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_block_cancel
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_mach_connect
__ libSystem.B.dylib: _dispatch_mach_create
__ libSystem.B.dylib: _dispatch_mach_msg_get_msg
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_get_data
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_walltime
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_program_sdk_at_least
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _freeaddrinfo
__ libSystem.B.dylib: _getaddrinfo
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _hypot
__ libSystem.B.dylib: _kOSThermalNotificationPressureLevelName
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _kill
__ libSystem.B.dylib: _log
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_continuous_time
__ libSystem.B.dylib: _mach_error_string
__ libSystem.B.dylib: _mach_msg
__ libSystem.B.dylib: _mach_msg_destroy
__ libSystem.B.dylib: _mach_port_deallocate
__ libSystem.B.dylib: _mach_port_mod_refs
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _mig_dealloc_reply_port
__ libSystem.B.dylib: _mig_get_reply_port
__ libSystem.B.dylib: _mig_put_reply_port
__ libSystem.B.dylib: _mkdtemp
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_check
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _os_activity_scope_enter
__ libSystem.B.dylib: _os_activity_scope_leave
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_make_with_pointer
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_assert_not_owner
__ libSystem.B.dylib: _os_unfair_lock_assert_owner
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libSystem.B.dylib: _os_variant_has_internal_diagnostics
__ libSystem.B.dylib: _pid_hibernate
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _powf
__ libSystem.B.dylib: _pthread_getspecific
__ libSystem.B.dylib: _pthread_key_create
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_once
__ libSystem.B.dylib: _pthread_rwlock_destroy
__ libSystem.B.dylib: _pthread_rwlock_init
__ libSystem.B.dylib: _pthread_rwlock_rdlock
__ libSystem.B.dylib: _pthread_rwlock_unlock
__ libSystem.B.dylib: _pthread_rwlock_wrlock
__ libSystem.B.dylib: _pthread_setspecific
__ libSystem.B.dylib: _realloc
__ libSystem.B.dylib: _setiopolicy_np
__ libSystem.B.dylib: _sin
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strncmp
__ libSystem.B.dylib: _strncpy
__ libSystem.B.dylib: _strnlen
__ libSystem.B.dylib: _strstr
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _tanh
__ libSystem.B.dylib: _usleep
__ libSystem.B.dylib: _vm_allocate
__ libSystem.B.dylib: _vm_deallocate
__ libSystem.B.dylib: _voucher_mach_msg_set
__ libSystem.B.dylib: _warnc
__ libSystem.B.dylib: _xpc_data_create
__ libSystem.B.dylib: _xpc_data_create_with_dispatch_data
__ libSystem.B.dylib: _xpc_data_get_length
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_null_create
__ libSystem.B.dylib: _xpc_string_get_string_ptr
__ libSystem.B.dylib: _xpc_transactions_enable
__ libapp_launch_measurement.dylib: _alm_app_will_activate_with_details
__ libapp_launch_measurement.dylib: _alm_app_will_activate_with_signpost_id
__ libapp_launch_measurement.dylib: _alm_app_will_launch_with_details
__ libnetwork.dylib: _tcp_connection_fallback_watcher_create
__ libnetwork.dylib: _tcp_connection_fallback_watcher_destroy
__ libnetwork.dylib: _tcp_fallback_watcher_fallback_inuse
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_addMethod
__ libobjc.A.dylib: _class_copyMethodList
__ libobjc.A.dylib: _class_getInstanceMethod
__ libobjc.A.dylib: _class_getMethodImplementation
__ libobjc.A.dylib: _imp_implementationWithBlock
__ libobjc.A.dylib: _method_exchangeImplementations
__ libobjc.A.dylib: _method_getDescription
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_allocateClassPair
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_moveWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_registerClassPair
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _object_getClass
__ libobjc.A.dylib: _protocol_copyMethodDescriptionList
__ libobjc.A.dylib: _protocol_copyProtocolList
__ libobjc.A.dylib: _protocol_getMethodDescription
__ libobjc.A.dylib: _protocol_isEqual
__ libobjc.A.dylib: _sel_isEqual
__ libsp.dylib: _spd_client_session_create
__ libsp.dylib: _spd_client_session_set_callbacks
__ libsp.dylib: _spd_client_session_set_dispatch_queue
__ libsqlite3.dylib: _sqlite3_config
__ libutil.dylib: _tzlink
SBAppDeniedAlertItem : SBAlertItem
  // instance methods
  -[SBAppDeniedAlertItem .cxx_destruct]
  -[SBAppDeniedAlertItem shouldShowInLockScreen]
  -[SBAppDeniedAlertItem dismissOnLock]
  -[SBAppDeniedAlertItem configure:requirePasscodeForActions:]
  -[SBAppDeniedAlertItem forcesModalAlertAppearance]
  -[SBAppDeniedAlertItem initWithApp:]


SBInsertionDodgingModifier : SBDodgingModifier
 @property  NSString *identifier
 @property  {CGPoint=dd} initialCenter
 @property  {CGSize=dd} initialSize
 @property  unsigned long phase

  // instance methods
  -[SBInsertionDodgingModifier phase]
  -[SBInsertionDodgingModifier setInitialSize:]
  -[SBInsertionDodgingModifier setPhase:]
  -[SBInsertionDodgingModifier .cxx_destruct]
  -[SBInsertionDodgingModifier identifier]
  -[SBInsertionDodgingModifier initialSize]
  -[SBInsertionDodgingModifier setIdentifier:]
  -[SBInsertionDodgingModifier handleInsertionEvent:]
  -[SBInsertionDodgingModifier _modelDidUpdateEventName]
  -[SBInsertionDodgingModifier handleCustomEvent:]
  -[SBInsertionDodgingModifier _animationDidCompleteEventName]
  -[SBInsertionDodgingModifier handleAnimationCompletionEvent:]
  -[SBInsertionDodgingModifier modelForInvalidatedModel:]
  -[SBInsertionDodgingModifier framesForIdentifiers]
  -[SBInsertionDodgingModifier initWithIdentifier:initialCenter:initialSize:]
  -[SBInsertionDodgingModifier animationBehaviorModeForIdentifier:]
  -[SBInsertionDodgingModifier initialCenter]
  -[SBInsertionDodgingModifier setInitialCenter:]


SBRingerVolumeSliderView : UIView
 @property  UIView *backgroundView
 @property  UIView *fillView
 @property  double value

  // instance methods
  -[SBRingerVolumeSliderView .cxx_destruct]
  -[SBRingerVolumeSliderView layoutSubviews]
  -[SBRingerVolumeSliderView fillView]
  -[SBRingerVolumeSliderView setValue:]
  -[SBRingerVolumeSliderView initWithFrame:]
  -[SBRingerVolumeSliderView value]
  -[SBRingerVolumeSliderView setBackgroundView:]
  -[SBRingerVolumeSliderView setFillView:]
  -[SBRingerVolumeSliderView backgroundView]


SBSplitViewToSlideOverSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSplitViewToSlideOverSwitcherModifier transitionWillBegin]
  -[SBSplitViewToSlideOverSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSplitViewToSlideOverSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBSplitViewToSlideOverSwitcherModifier frameForIndex:]
  -[SBSplitViewToSlideOverSwitcherModifier visibleAppLayouts]
  -[SBSplitViewToSlideOverSwitcherModifier .cxx_destruct]
  -[SBSplitViewToSlideOverSwitcherModifier topMostLayoutRolesForAppLayout:]
  -[SBSplitViewToSlideOverSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBSplitViewToSlideOverSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBSplitViewToSlideOverSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBSplitViewToSlideOverSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBSplitViewToSlideOverSwitcherModifier handleSceneReadyEvent:]
  -[SBSplitViewToSlideOverSwitcherModifier initWithTransitionID:transitioningLayoutRole:splitViewAppLayout:slideOverAppLayout:direction:]


SBDeviceUnlockAggdLogger : NSObject <CSExternalEventHandling>
 @property  BOOL observeDashBoardEvents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDeviceUnlockAggdLogger logIdleTimerScreenDimWarning]
  -[SBDeviceUnlockAggdLogger coverSheetIdentifier]
  -[SBDeviceUnlockAggdLogger _setObserveDashBoardEvents:]
  -[SBDeviceUnlockAggdLogger wouldHandleButtonEvent:]
  -[SBDeviceUnlockAggdLogger participantState]
  -[SBDeviceUnlockAggdLogger init]
  -[SBDeviceUnlockAggdLogger _observeDashBoardEvents]
  -[SBDeviceUnlockAggdLogger handleEvent:]
  -[SBDeviceUnlockAggdLogger logDeviceWake]
  -[SBDeviceUnlockAggdLogger logUserResetIdleTimer]
  -[SBDeviceUnlockAggdLogger dealloc]
  -[SBDeviceUnlockAggdLogger logDeviceUnlock]
  -[SBDeviceUnlockAggdLogger conformsToCSEventHandling]
  -[SBDeviceUnlockAggdLogger logOrientationAndAccessoryStateForPrefix:]


SBPearlInterlockObserver : NSObject <SBUIBiometricResourceObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPearlInterlockObserver .cxx_destruct]
  -[SBPearlInterlockObserver activate]
  -[SBPearlInterlockObserver deactivate]
  -[SBPearlInterlockObserver initWithBiometricResource:]
  -[SBPearlInterlockObserver _fire]
  -[SBPearlInterlockObserver biometricResource:observeEvent:]
  -[SBPearlInterlockObserver biometricResource:matchingEnabledDidChange:]
  -[SBPearlInterlockObserver _checkForLockout]


SBIconDeleteMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBIconDeleteMetric .cxx_destruct]
  -[SBIconDeleteMetric init]
  -[SBIconDeleteMetric _propertyValuesForTracker]


SBTransientOverlayPresentWorkspaceTransaction : SBMainWorkspaceTransaction <SBUIAnimationControllerObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTransientOverlayPresentWorkspaceTransaction _willInterruptWithReason:]
  -[SBTransientOverlayPresentWorkspaceTransaction _didComplete]
  -[SBTransientOverlayPresentWorkspaceTransaction _begin]
  -[SBTransientOverlayPresentWorkspaceTransaction _canBeInterrupted]
  -[SBTransientOverlayPresentWorkspaceTransaction _logForInterruptAttemptReason:]
  -[SBTransientOverlayPresentWorkspaceTransaction .cxx_destruct]
  -[SBTransientOverlayPresentWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBTransientOverlayPresentWorkspaceTransaction initWithTransitionRequest:]
  -[SBTransientOverlayPresentWorkspaceTransaction animationControllerDidFinishAnimation:]
  -[SBTransientOverlayPresentWorkspaceTransaction _willBegin]
  -[SBTransientOverlayPresentWorkspaceTransaction _performStandardPresentationAnimated:]


SBSystemGestureSwitchMetric : NSObject
  // instance methods
  -[SBSystemGestureSwitchMetric init]
  -[SBSystemGestureSwitchMetric postWithDataBuilder:]


SBLoginAppSceneHoster : NSObject <FBSceneObserver, SBLoginAppSceneHoster>
 @property  <SBLoginAppSceneHosterDelegate> *delegate
 @property  UIView *contentView
 @property  NSString *hostedAppBundleID
 @property  NSString *hostedSceneIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBApplication *hostedApp
 @property  BOOL deferHIDEvents

  // instance methods
  -[SBLoginAppSceneHoster .cxx_destruct]
  -[SBLoginAppSceneHoster scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBLoginAppSceneHoster contentView]
  -[SBLoginAppSceneHoster setDelegate:]
  -[SBLoginAppSceneHoster sceneDidInvalidate:]
  -[SBLoginAppSceneHoster init]
  -[SBLoginAppSceneHoster delegate]
  -[SBLoginAppSceneHoster _appClientSettingsDiffInspector]
  -[SBLoginAppSceneHoster updateSettingsWithTransitionBlock:]
  -[SBLoginAppSceneHoster hostedApp]
  -[SBLoginAppSceneHoster _updateHIDEventDeferralsIfNecessary]
  -[SBLoginAppSceneHoster hostedAppBundleID]
  -[SBLoginAppSceneHoster launchLoginAppWithCompletion:]
  -[SBLoginAppSceneHoster killLoginApp]
  -[SBLoginAppSceneHoster hostedSceneIdentifier]
  -[SBLoginAppSceneHoster deferHIDEvents]
  -[SBLoginAppSceneHoster setDeferHIDEvents:]


SBLoginAppClientSettingObserverContext : NSObject
 @property  UIApplicationSceneSettings *settings
 @property  SBSUILoginUISceneClientSettings *updatedClientSettings

  // instance methods
  -[SBLoginAppClientSettingObserverContext .cxx_destruct]
  -[SBLoginAppClientSettingObserverContext setSettings:]
  -[SBLoginAppClientSettingObserverContext setUpdatedClientSettings:]
  -[SBLoginAppClientSettingObserverContext updatedClientSettings]
  -[SBLoginAppClientSettingObserverContext settings]


SBAccessibilityMesaUnlockTrigger : SBMesaUnlockTrigger <SBMesaUnlockTriggerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAccessibilityMesaUnlockTrigger screenOff]
  -[SBAccessibilityMesaUnlockTrigger mesaUnlockTriggerFired:]
  -[SBAccessibilityMesaUnlockTrigger bioUnlock]
  -[SBAccessibilityMesaUnlockTrigger .cxx_destruct]
  -[SBAccessibilityMesaUnlockTrigger menuButtonDown]
  -[SBAccessibilityMesaUnlockTrigger fingerOn]
  -[SBAccessibilityMesaUnlockTrigger menuButtonUp]
  -[SBAccessibilityMesaUnlockTrigger significantUserInteractionOccurred]
  -[SBAccessibilityMesaUnlockTrigger fingerOff]
  -[SBAccessibilityMesaUnlockTrigger initWithUnlockBehaviorConfigurationDelegate:baseTrigger:]


SBWindowDragGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction
  // instance methods
  -[SBWindowDragGestureWorkspaceTransaction _gestureType]
  -[SBWindowDragGestureWorkspaceTransaction _beginWithGesture:]


SBReachabilityManager : NSObject <SBSystemGestureRecognizerDelegate, SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate>
 @property  BOOL reachabilityModeActive
 @property  BOOL reachabilityEnabled
 @property  SBReachabilityGestureRecognizer *reachabilityGestureRecognizer
 @property  SBScreenEdgePanGestureRecognizer *dismissEdgeGestureRecognizer
 @property  UIPanGestureRecognizer *dismissPanGestureRecognizer
 @property  double reachabilityYOffset
 @property  double effectiveReachabilityYOffset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBReachabilityManager sharedInstance]
  +[SBReachabilityManager reachabilitySupported]

  // instance methods
  -[SBReachabilityManager reachabilityEnabled]
  -[SBReachabilityManager setReachabilityEnabled:]
  -[SBReachabilityManager dismissPanGestureRecognizer]
  -[SBReachabilityManager gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBReachabilityManager zStackParticipant:updatePreferences:]
  -[SBReachabilityManager zStackParticipantDidChange:]
  -[SBReachabilityManager .cxx_destruct]
  -[SBReachabilityManager homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBReachabilityManager init]
  -[SBReachabilityManager viewForSystemGestureRecognizer:]
  -[SBReachabilityManager _setupGestureRecognizers]
  -[SBReachabilityManager _screenDidDim]
  -[SBReachabilityManager gestureRecognizerShouldBegin:]
  -[SBReachabilityManager addObserver:]
  -[SBReachabilityManager gestureRecognizer:shouldReceiveTouch:]
  -[SBReachabilityManager effectiveReachabilityYOffset]
  -[SBReachabilityManager dealloc]
  -[SBReachabilityManager toggleReachability]
  -[SBReachabilityManager deactivateReachability]
  -[SBReachabilityManager removeObserver:]
  -[SBReachabilityManager _handleSignificantTimeChanged]
  -[SBReachabilityManager canActivateReachability]
  -[SBReachabilityManager _toggleReachabilityMode]
  -[SBReachabilityManager _updateReachabilityModeActive:]
  -[SBReachabilityManager _modifyDefaultPresentationContextHostTransformForWindow:fromTransform:toTransform:]
  -[SBReachabilityManager _updateReachabilityModeActive:animated:]
  -[SBReachabilityManager _setKeepAliveTimer]
  -[SBReachabilityManager _setupReachabilityWindowIfNecessary]
  -[SBReachabilityManager reachabilityYOffset]
  -[SBReachabilityManager _tearDownReachabilityWindow]
  -[SBReachabilityManager _updateReachabilityWindowForYOffset:mode:completion:]
  -[SBReachabilityManager _notifyObserversReachabilityModeActive:]
  -[SBReachabilityManager _pingKeepAliveWithDuration:interactedBeforePing:initialKeepAliveTime:]
  -[SBReachabilityManager _activateReachability:]
  -[SBReachabilityManager _panToDeactivateReachability:]
  -[SBReachabilityManager _tapToDeactivateReachability:]
  -[SBReachabilityManager _sceneForWindow:]
  -[SBReachabilityManager _transitionWithTransformer:fromTransform:toTransform:]
  -[SBReachabilityManager _notifyObserversWillBeginReachabilityAnimation]
  -[SBReachabilityManager ignoredWindows]
  -[SBReachabilityManager _notifyObserversReachabilityYOffsetDidChange]
  -[SBReachabilityManager _notifyObserversDidEndReachabilityAnimation]
  -[SBReachabilityManager setReachabilityTemporarilyDisabled:forReason:]
  -[SBReachabilityManager setReachabilityTemporarilyEnabled:forReason:]
  -[SBReachabilityManager ignoreWindowForReachability:]
  -[SBReachabilityManager reachabilityGestureRecognizer]
  -[SBReachabilityManager reachabilityModeActive]
  -[SBReachabilityManager dismissEdgeGestureRecognizer]


SBApplicationStateServiceDelegate : NSObject <UISApplicationStateServiceDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationStateServiceDelegate dataSourceForApplicationBundleIdentifier:]


SBApplicationStateServiceSingleton : NSObject
  // class methods
  +[SBApplicationStateServiceSingleton startService]


SBPowerDownViewController : SBTransientOverlayViewController <SBPowerDownViewDelegate, SBPasscodeEntryTransientOverlayViewControllerDelegate>
 @property  SPBeaconManager *beaconManager
 @property  SBPasscodeEntryTransientOverlayViewController *passcodeEntryTransientOverlayViewController
 @property  SBFUserAuthenticationController *userAuthController
 @property  BOOL userWantsFindMySuppressed
 @property  <SBFLockOutStatusProvider> *lockOutController
 @property  <SBPowerDownViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPowerDownViewController setBeaconManager:]
  -[SBPowerDownViewController lockOutController]
  -[SBPowerDownViewController idleTimerMode]
  -[SBPowerDownViewController handleLockButtonPress]
  -[SBPowerDownViewController .cxx_destruct]
  -[SBPowerDownViewController passcodeEntryTransientOverlayViewController:authenticatePasscode:]
  -[SBPowerDownViewController viewDidLoad]
  -[SBPowerDownViewController passcodeEntryTransientOverlayViewControllerStatusText]
  -[SBPowerDownViewController _setPasscodeVisible:animated:]
  -[SBPowerDownViewController shouldDisableSiri]
  -[SBPowerDownViewController setDelegate:]
  -[SBPowerDownViewController setLockOutController:]
  -[SBPowerDownViewController beaconManager]
  -[SBPowerDownViewController viewWillDisappear:]
  -[SBPowerDownViewController viewDidLayoutSubviews]
  -[SBPowerDownViewController shouldDisableControlCenter]
  -[SBPowerDownViewController viewWillAppear:]
  -[SBPowerDownViewController passcodeEntryTransientOverlayViewControllerRequestsDismissal:]
  -[SBPowerDownViewController delegate]
  -[SBPowerDownViewController _preferredStatusBarVisibility]
  -[SBPowerDownViewController passcodeEntryTransientOverlayViewControllerStatusSubtitleText]
  -[SBPowerDownViewController viewDidDisappear:]
  -[SBPowerDownViewController _canShowWhileLocked]
  -[SBPowerDownViewController powerDownViewAnimateOutCompleted:]
  -[SBPowerDownViewController powerDownViewWillAnimateIn:]
  -[SBPowerDownViewController powerDownViewWillAnimateOut:]
  -[SBPowerDownViewController powerDownViewRequestPowerDown:]
  -[SBPowerDownViewController powerDownViewRequestCancel:]
  -[SBPowerDownViewController showPowerDownFindMyAlert]
  -[SBPowerDownViewController showPowerDownFindMyAlertWithProceed:cancelCompletion:]
  -[SBPowerDownViewController _beginTimeTracking]
  -[SBPowerDownViewController _incrementCountForKey:]
  -[SBPowerDownViewController _endTimeTrackingIncludingReportWithKey:]
  -[SBPowerDownViewController _resetScreenBrightness]
  -[SBPowerDownViewController userWantsFindMySuppressed]
  -[SBPowerDownViewController userAcknowledgedFindMyInfo]
  -[SBPowerDownViewController didTapTemporarilyDisableFindMy]
  -[SBPowerDownViewController userAuthController]
  -[SBPowerDownViewController setPasscodeEntryTransientOverlayViewController:]
  -[SBPowerDownViewController setUserWantsFindMySuppressed:]
  -[SBPowerDownViewController powerDownViewDidBeginSlide:]
  -[SBPowerDownViewController powerDownView:didUpdateSlideWithValue:]
  -[SBPowerDownViewController powerDownViewDidCompleteSlide:]
  -[SBPowerDownViewController powerDownViewDidCancelSlide:]
  -[SBPowerDownViewController powerDownViewDidReceiveCancelButtonAction:]
  -[SBPowerDownViewController powerDownViewDidFireIdleTimer:]
  -[SBPowerDownViewController allowsStackingOverlayContentAbove]
  -[SBPowerDownViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBPowerDownViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBPowerDownViewController shouldDisableBanners]
  -[SBPowerDownViewController shouldPendAlertItems]
  -[SBPowerDownViewController passcodeEntryTransientOverlayViewController]
  -[SBPowerDownViewController setUserAuthController:]


SBAccountStoreManager : NSObject
 @property  ACAccount *primaryAppleAccount
 @property  ACAccountStore *accountStore

  // instance methods
  -[SBAccountStoreManager accountStore]
  -[SBAccountStoreManager _accountStoreDidChange:]
  -[SBAccountStoreManager .cxx_destruct]
  -[SBAccountStoreManager init]
  -[SBAccountStoreManager _queue_updatePrimaryAppleAccount]
  -[SBAccountStoreManager _updatePrimaryAppleAccount]
  -[SBAccountStoreManager setPrimaryAppleAccount:]
  -[SBAccountStoreManager primaryAppleAccount]


SBDashBoardPlatterHomeGestureManager : NSObject <SBPlatterHomeGestureManagerDelegate, CSPlatterHomeGestureManaging>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardPlatterHomeGestureManager platterHomeGestureManager:windowForParticipant:]
  -[SBDashBoardPlatterHomeGestureManager platterHomeGestureManager:zStackParticipantIdentifierForParticipant:]
  -[SBDashBoardPlatterHomeGestureManager .cxx_destruct]
  -[SBDashBoardPlatterHomeGestureManager _platterHomeGestureManager]
  -[SBDashBoardPlatterHomeGestureManager _isViewControllerPlatterHomeGestureParticipant:]
  -[SBDashBoardPlatterHomeGestureManager homeGestureContextForViewController:]
  -[SBDashBoardPlatterHomeGestureManager unregisterHomeGestureContextForViewController:]


SBHomeGestureDomain : PTDomain
  // class methods
  +[SBHomeGestureDomain domainGroupName]
  +[SBHomeGestureDomain rootSettings]
  +[SBHomeGestureDomain domainName]
  +[SBHomeGestureDomain rootSettingsClass]


SBHomeToSwitcherSwitcherModifier : SBTransitionSwitcherModifier
 @property  long long direction
 @property  SBSwitcherModifier *multitaskingModifier

  // instance methods
  -[SBHomeToSwitcherSwitcherModifier direction]
  -[SBHomeToSwitcherSwitcherModifier transitionWillBegin]
  -[SBHomeToSwitcherSwitcherModifier containerStatusBarAnimationDuration]
  -[SBHomeToSwitcherSwitcherModifier .cxx_destruct]
  -[SBHomeToSwitcherSwitcherModifier handleTimerEvent:]
  -[SBHomeToSwitcherSwitcherModifier transitionWillUpdate]
  -[SBHomeToSwitcherSwitcherModifier appLayoutToScrollToDuringTransition]
  -[SBHomeToSwitcherSwitcherModifier _dismissForEmptySwitcherResponseName]
  -[SBHomeToSwitcherSwitcherModifier initWithTransitionID:direction:multitaskingModifier:]
  -[SBHomeToSwitcherSwitcherModifier isEffectivelyHome]
  -[SBHomeToSwitcherSwitcherModifier multitaskingModifier]


SBSpotlightCrossblurToFullscreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier homeScreenBackdropBlurType]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier transitionWillBegin]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier homeScreenScale]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier homeScreenAlpha]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier isHomeScreenContentRequired]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier scaleForIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier frameForIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier visibleAppLayouts]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier .cxx_destruct]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier isSwitcherWindowVisible]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier _layoutSettings]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier wallpaperStyle]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier cornerRadiiForIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier topMostLayoutElements]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier _isToAppLayoutAtIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier _opacitySettings]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier initWithTransitionID:toAppLayout:]


SBAppSwitcherPageShadowView : SBFView <PTSettingsKeyObserver>
 @property  UIView *_diffuseShadowView
 @property  UIView *_rimShadowView
 @property  double switcherCardScale
 @property  long long style
 @property  unsigned long highlightType
 @property  UIBezierPath *shadowPath
 @property  double shadowOffset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherPageShadowView traitCollectionDidChange:]
  -[SBAppSwitcherPageShadowView _updateShadowViews]
  -[SBAppSwitcherPageShadowView shadowPath]
  -[SBAppSwitcherPageShadowView setHighlightType:]
  -[SBAppSwitcherPageShadowView _setContinuousCornerRadius:]
  -[SBAppSwitcherPageShadowView _diffuseShadowView]
  -[SBAppSwitcherPageShadowView .cxx_destruct]
  -[SBAppSwitcherPageShadowView initWithFrame:style:]
  -[SBAppSwitcherPageShadowView setStyle:]
  -[SBAppSwitcherPageShadowView highlightType]
  -[SBAppSwitcherPageShadowView setShadowOffset:]
  -[SBAppSwitcherPageShadowView _applyPrototypeSettingsToConstants]
  -[SBAppSwitcherPageShadowView switcherCardScale]
  -[SBAppSwitcherPageShadowView setShadowPath:]
  -[SBAppSwitcherPageShadowView settings:changedValueForKey:]
  -[SBAppSwitcherPageShadowView _updateShadowParameters]
  -[SBAppSwitcherPageShadowView setSwitcherCardScale:]
  -[SBAppSwitcherPageShadowView shadowOffset]
  -[SBAppSwitcherPageShadowView style]
  -[SBAppSwitcherPageShadowView _rimShadowView]


SBDashBoardPluginViewController : CSCoverSheetViewControllerBase <SBLockScreenPluginDelegate>
 @property  SBLockScreenPlugin *plugin
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDashBoardPluginViewController viewClass]

  // instance methods
  -[SBDashBoardPluginViewController presentationPriority]
  -[SBDashBoardPluginViewController presentationType]
  -[SBDashBoardPluginViewController coverSheetIdentifier]
  -[SBDashBoardPluginViewController presentationStyle]
  -[SBDashBoardPluginViewController .cxx_destruct]
  -[SBDashBoardPluginViewController viewDidLoad]
  -[SBDashBoardPluginViewController succinctDescriptionBuilder]
  -[SBDashBoardPluginViewController updateForPresentation:]
  -[SBDashBoardPluginViewController view]
  -[SBDashBoardPluginViewController aggregateBehavior:]
  -[SBDashBoardPluginViewController viewWillAppear:]
  -[SBDashBoardPluginViewController handleEvent:]
  -[SBDashBoardPluginViewController _updateLegibility]
  -[SBDashBoardPluginViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBDashBoardPluginViewController plugin]
  -[SBDashBoardPluginViewController displayLayoutElementIdentifier]
  -[SBDashBoardPluginViewController performCustomTransitionToVisible:withAnimationSettings:completion:]
  -[SBDashBoardPluginViewController presentationTransition]
  -[SBDashBoardPluginViewController aggregateAppearance:]
  -[SBDashBoardPluginViewController viewDidDisappear:]
  -[SBDashBoardPluginViewController willTransitionToPresented:]
  -[SBDashBoardPluginViewController _presentationPriority]
  -[SBDashBoardPluginViewController pluginAppearanceDidChange:]
  -[SBDashBoardPluginViewController initWithLockScreenPlugin:]


SBShelfFocusedDisplayItemsChangedEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBShelfFocusedDisplayItemsChangedEvent type]


SpringBoard : UISystemShellApplication <MCProfileConnectionObserver, RSPeerToPeerConnectionControllerDataSource, SBRestartManagerDelegate, SBModalAlertPresentationCoordinatorDelegate, UIStatusBarStyleDelegate_SpringBoardOnly, SSScreenCapturerDelegate, SBBacklightControllerObserver, SBInteractiveScreenshotGestureManagerDelegate, SBRemoteTransientOverlaySessionManagerDelegate, SBSpotlightTransientOverlayViewControllerDelegate, _UIApplicationInitializationContextFactory, SBAVSystemControllerCacheObserver, UIApplicationDelegate, SBIdleTimerProviding>
 @property  NSMutableArray *nowLocatingApps
 @property  <SBIdleTimer> *idleTimer
 @property  NSTimer *daylightSavingsTimer
 @property  int nowPlayingProcessPID
 @property  BOOL batterySaverModeActive
 @property  SBCombinationHardwareButton *combinationHardwareButton
 @property  SBVolumeButtonEventMapper *volumeButtonEventMapper
 @property  RSPeerToPeerServerController *stateDumpServerController
 @property  BOOL hasFinishedLaunching
 @property  double bottomEdgeAmbiguousActivationMargin
 @property  <SBUIUserAgent> *pluginUserAgent
 @property  SBApplication *leastRecentlyForegroundLocatingApp
 @property  SBUserSessionController *userSessionController
 @property  SBHomeHardwareButton *homeHardwareButton
 @property  SBLockHardwareButton *lockHardwareButton
 @property  SBVolumeHardwareButton *volumeHardwareButton
 @property  SBCameraHardwareButton *cameraHardwareButton
 @property  SBVoiceCommandButton *voiceCommandButton
 @property  <SBFLockOutStatusProvider> *lockOutController
 @property  SBFUserAuthenticationController *authenticationController
 @property  SBScreenshotManager *screenshotManager
 @property  SBNCNotificationDispatcher *notificationDispatcher
 @property  SBBannerManager *bannerManager
 @property  FCUIBannerManager *focusBannerManager
 @property  SBWidgetController *widgetController
 @property  SBAvocadoDebuggingController *avocadoController
 @property  SBRestartManager *restartManager
 @property  SBModalAlertPresentationCoordinator *modalAlertPresentationCoordinator
 @property  SBAccountStoreManager *accountStoreController
 @property  NSArray *appsRegisteredForVolumeEvents
 @property  NSArray *appsRegisteredForLockButtonEvents
 @property  SBLockScreenService *lockScreenService
 @property  SBApplicationAutoLaunchService *applicationAutoLaunchService
 @property  SBApplicationLaunchAlertService *applicationLaunchAlertService
 @property  SBIdleTimerPolicyAggregator *idleTimerPolicyAggregator
 @property  SBInteractiveScreenshotGestureManager *interactiveScreenshotGestureManager
 @property  SBProximitySensorManager *proximitySensorManager
 @property  SBMainDisplayInterfaceOrientationAggregator *orientationAggregator
 @property  SBSoftwareUpdatePasscodePolicyManager *softwareUpdatePasscodePolicyManager
 @property  STStatusServer *systemStatusServer
 @property  STDynamicActivityAttributionManager *dynamicAttributionManager
 @property  STTelephonyStateProvider *telephonyStateProvider
 @property  SBSensorActivityDataProvider *sensorActivityDataProvider
 @property  SBRecordingIndicatorManager *recordingIndicatorManager
 @property  SBSystemPointerInteractionManager *systemPointerInteractionManager
 @property  SBMousePointerManager *mousePointerManager
 @property  SBTransientUIInteractionManager *systemTransientUIInteractionManager
 @property  SBLockedPointerManager *lockedPointerManager
 @property  SBWebClipService *webClipService
 @property  SBAppClipOverlayCoordinator *appClipOverlayCoordinator
 @property  SBDodgingResolverViewController *unlockedDodgingResolverViewController
 @property  int ringerSwitchState
 @property  SBRemoteTransientOverlaySessionManager *remoteTransientOverlaySessionManager
 @property  BOOL wantsOrientationEvents
 @property  BOOL typingActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIWindow *window

  // class methods
  +[SpringBoard _newApplicationInitializationContext]
  +[SpringBoard initializeSystemServicesBeforeApplicationDidFinishLaunching]
  +[SpringBoard _defaultSceneIdentity]

  // instance methods
  -[SpringBoard orientationAggregator]
  -[SpringBoard nowPlayingProcessPID]
  -[SpringBoard stateDumpServerController]
  -[SpringBoard restartManager]
  -[SpringBoard underMemoryPressure]
  -[SpringBoard lockScreenService]
  -[SpringBoard lockHardwareButton]
  -[SpringBoard handleKeyHIDEvent:]
  -[SpringBoard scrollView:contentSizeForZoomScale:withProposedSize:]
  -[SpringBoard startedTest:]
  -[SpringBoard telephonyStateProvider]
  -[SpringBoard volumeHardwareButton]
  -[SpringBoard runTest:options:]
  -[SpringBoard _toggleSearch]
  -[SpringBoard removeNowLocatingApp:]
  -[SpringBoard _accessibilityTopDisplay]
  -[SpringBoard validateCommand:]
  -[SpringBoard _setTypingActive:]
  -[SpringBoard _runScrunchAndSwipeTest]
  -[SpringBoard launchedForUserTransition]
  -[SpringBoard setExpectsFaceContact:inLandscape:]
  -[SpringBoard _handleDeviceOrientationChangedEvent:]
  -[SpringBoard _takeScreenshotWithOptionsCollection:presentationOptions:]
  -[SpringBoard _unscatterWillBegin:]
  -[SpringBoard homeHardwareButton]
  -[SpringBoard _resetToHomeScreen]
  -[SpringBoard _startSeekWithDirection:]
  -[SpringBoard inCallApp]
  -[SpringBoard spotlightTransientOverlayViewControllerDidPresent:]
  -[SpringBoard _runMedusaMoveFloatingApplicationTest:withOptions:]
  -[SpringBoard _hasForegroundAppWithPID:]
  -[SpringBoard _runAppSearchDismiss]
  -[SpringBoard startupInterfaceOrientation]
  -[SpringBoard _combinedListViewController]
  -[SpringBoard addNowLocatingApp:]
  -[SpringBoard _runDashBoardRotateTodayViewPage]
  -[SpringBoard lockedPointerManager]
  -[SpringBoard _createInitialAppScene]
  -[SpringBoard menuButtonInterceptApp]
  -[SpringBoard noteBacklightLevelChanged]
  -[SpringBoard setHasFinishedLaunching:]
  -[SpringBoard pluginUserAgent]
  -[SpringBoard _setIdleTimer:]
  -[SpringBoard lockOutController]
  -[SpringBoard noteInstalledWebClipsDidChange]
  -[SpringBoard noteCaseHardwarePresent]
  -[SpringBoard leastRecentlyForegroundLocatingApp]
  -[SpringBoard _runScrollAppSwitcherLandscapeTest:overApp:completion:]
  -[SpringBoard beginIgnoringInteractionEvents]
  -[SpringBoard _toggleFloatingDockVisibility:]
  -[SpringBoard takeScreenshot]
  -[SpringBoard _performAfterDelay:block:]
  -[SpringBoard _defaultExpirationComponents]
  -[SpringBoard noteSubstantialTransitionOccured]
  -[SpringBoard _runFourFingerSwipeMultipleAppsTest]
  -[SpringBoard _rotateFromPortrait:toLandscape:andFromLandscape:andBackToPortrait:]
  -[SpringBoard _handleActivateControlCenterKeyShortcut:]
  -[SpringBoard runFolderRotationTest:]
  -[SpringBoard frontDisplayDidChange:]
  -[SpringBoard _updateOrientationDetectionSettings]
  -[SpringBoard systemStatusServer]
  -[SpringBoard addDisableActiveInterfaceOrientationChangeAssertion:]
  -[SpringBoard hasFinishedLaunching]
  -[SpringBoard _runDashBoardPresentDismissPasscode]
  -[SpringBoard setSuspensionAnimationDelay:]
  -[SpringBoard _frontMostAppOrientation]
  -[SpringBoard _doubleHomeButtonPressEventStream]
  -[SpringBoard _significantTimeDidChange:]
  -[SpringBoard interactiveScreenshotGestureManagerShouldPreventGestureRecognition:]
  -[SpringBoard restartManagerWillShutdown:]
  -[SpringBoard _runDashBoardRotationTestWithCompletion:]
  -[SpringBoard addInCallApp:]
  -[SpringBoard buildMenuWithBuilder:]
  -[SpringBoard _runScrunchHomeToAutoPIPTest]
  -[SpringBoard _lockdownActivationChanged:]
  -[SpringBoard restartManagerWillReboot:]
  -[SpringBoard finishedTest:extraResults:waitForNotification:withTeardownBlock:]
  -[SpringBoard _setupNotificationListTest]
  -[SpringBoard screenCapturer:didCaptureScreenshotsOfScreens:]
  -[SpringBoard setupMidnightTimer]
  -[SpringBoard spotlightTransientOverlayViewControllerWillDismiss:]
  -[SpringBoard noteInterfaceOrientationChanged:logMessage:]
  -[SpringBoard _smartCoverDidOpen:]
  -[SpringBoard lockScreenCameraSupported]
  -[SpringBoard voiceCommandButton]
  -[SpringBoard widgetController]
  -[SpringBoard _handleGotoHomeScreenShortcut:]
  -[SpringBoard _turnScreenOnOnDashBoardWithCompletion:]
  -[SpringBoard interactiveScreenshotGestureManager]
  -[SpringBoard failedTest:withResults:]
  -[SpringBoard _adjustMidnightTimerAfterSleep]
  -[SpringBoard coordinatorRequestedIdleTimerBehavior:]
  -[SpringBoard canOpenURL:]
  -[SpringBoard _midnightPassed]
  -[SpringBoard _pullDownToSpotlightForView:offset:duration:completion:]
  -[SpringBoard _runArcSwipeMultipleAppsTest]
  -[SpringBoard _prepareButtonEvent:type:phase:timestamp:force:clickCount:longClick:contextID:]
  -[SpringBoard deviceOrientationUpdateDeferralAssertionWithReason:]
  -[SpringBoard activeInterfaceOrientation]
  -[SpringBoard bannerManager]
  -[SpringBoard beginInteractiveSpotlightTransientOverlayPresentationWithValidator:beginHandler:]
  -[SpringBoard removeInCallApp]
  -[SpringBoard _runHomeScreenSwipeLeftToTodayView]
  -[SpringBoard iconScrollView:shouldSetAutoscrollContentOffset:]
  -[SpringBoard iconScrollView:shouldSetContentOffset:animated:]
  -[SpringBoard _runAutoPIPWithGestureTest:]
  -[SpringBoard _setStatusBarShowsProgress:]
  -[SpringBoard _handleMakeFullscreenKeyShortcut:]
  -[SpringBoard applicationDidFinishLaunching:]
  -[SpringBoard focusBannerManager]
  -[SpringBoard _batterySaverModeChanged:]
  -[SpringBoard __handleHIDEvent:withUIEvent:]
  -[SpringBoard _handleShutDownAndReboot]
  -[SpringBoard _handleKeyUIEvent:]
  -[SpringBoard _runCoverSheetNotificationListHistoryRevealTest]
  -[SpringBoard popTransientActiveInterfaceOrientationForReason:]
  -[SpringBoard remoteTransientOverlaySessionManager:performPresentationRequest:forSession:]
  -[SpringBoard scrollViewDidEndScrolling:]
  -[SpringBoard _accessibilityFrontMostApplication]
  -[SpringBoard _accessibilitySystemGesturesDisabledByAccessibility]
  -[SpringBoard _continueRunningScrollAppSwitcherTest:runColdTest:completion:]
  -[SpringBoard _keyboardAvailabilityChanged]
  -[SpringBoard _prepareToRunSwitcherGestureTestsWithForegroundApp:shouldStartTest:withCompletion:]
  -[SpringBoard _handleActivateAppExposeKeyShortcut:]
  -[SpringBoard _runArcSwipeTestFromHomeScreen:]
  -[SpringBoard _runSpotlightTodayViewRotation]
  -[SpringBoard _runSwipeAndPauseForSwitcherOverFolderTest]
  -[SpringBoard _runSwipeToHomeTestWithCompletion:]
  -[SpringBoard avocadoController]
  -[SpringBoard isSpringBoardStatusBarHidden]
  -[SpringBoard launchMusicPlayerSuspended]
  -[SpringBoard _removeTransientActiveInterfaceOrientationOverrideForReason:]
  -[SpringBoard handleStatusBarHoverActionForRegion:]
  -[SpringBoard _runDashboardTodayViewScrollWidgetsTestWithOptions:]
  -[SpringBoard _dismissSpotlightWithHomeButtonEvent]
  -[SpringBoard screenshotManager]
  -[SpringBoard runHomeScreenRotationTest:]
  -[SpringBoard applicationOpenURL:]
  -[SpringBoard iconScrollViewWillCancelTouchTracking:]
  -[SpringBoard rotateIfNeeded:completion:]
  -[SpringBoard _accessibilityDeactivationAnimationStartDelay]
  -[SpringBoard _activateSafariWithCompletion:]
  -[SpringBoard _dashBoardControllerForTesting]
  -[SpringBoard _installSwitcherModelForSwitcherTests]
  -[SpringBoard _runDashBoardDismissFromTodayViewWhileAuthenticatedTest]
  -[SpringBoard _runDashBoardRotateCameraPage]
  -[SpringBoard _runHomeScreenIconPullToSpotlightWithTestName:cold:]
  -[SpringBoard _runTodayViewEditingScrollWidgetsTestWithOptions:]
  -[SpringBoard _setAmbiguousControlCenterActivationMargin:]
  -[SpringBoard _setStatusBarOrientation:logMessage:]
  -[SpringBoard _smartCoverMightHaveOpened:]
  -[SpringBoard endLaunchTest]
  -[SpringBoard homeScreenRotationStyle]
  -[SpringBoard iconScrollViewDidCancelTouchTracking:]
  -[SpringBoard sensorActivityDataProvider]
  -[SpringBoard updateMirroredDisplayOrientationWithLogMessage:]
  -[SpringBoard _runAppSearchPresent]
  -[SpringBoard _initializeDeferredItems]
  -[SpringBoard _performMultiFingerDragWithComposer:startLocations:endLocations:touchCount:duration:timingFunction:startWithTouchDown:intermediateTransformer:completion:]
  -[SpringBoard _postActiveInterfaceOrientationChangedNotificationAnimated:]
  -[SpringBoard statusBar:effectiveStyleOverridesForRequestedStyle:overrides:]
  -[SpringBoard _smartCoverDidClose:]
  -[SpringBoard _uninstallModelForTestsAndRestoreAppLayouts:]
  -[SpringBoard appsRegisteredForLockButtonEvents]
  -[SpringBoard setAppRegisteredForLockButtonEvents:isActive:]
  -[SpringBoard _runMedusaUnpinFloatingApplicationTest:withOptions:]
  -[SpringBoard rawDeviceOrientationIgnoringOrientationLocks]
  -[SpringBoard _deviceOrientationChanged:]
  -[SpringBoard _handleNextSwitcherSpaceKeyShortcut:]
  -[SpringBoard _performBackAndForthPanOnScreenWithIterations:duration:completion:]
  -[SpringBoard _handleGameControllerEventHIDEvent:]
  -[SpringBoard _runExitPageHiding]
  -[SpringBoard _statusBarOrientationFollowsWindow:]
  -[SpringBoard _performTapAtPoint:fromView:withCompletion:]
  -[SpringBoard _dashBoardTodayControllerForTestingIfExists]
  -[SpringBoard _returnToHomeScreenWithCompletion:]
  -[SpringBoard _startScrollAppSwitcherTest:overApp:runColdTest:completion:]
  -[SpringBoard _turnScreenOnAndAuthenticateWithCompletion:]
  -[SpringBoard isBatterySaverModeActive]
  -[SpringBoard authenticationController]
  -[SpringBoard _runScrollIconListTestForTestName:testOptions:]
  -[SpringBoard updateNativeOrientationAndMirroredDisplays:logMessage:]
  -[SpringBoard _handleEndOfScrollingTest]
  -[SpringBoard interfaceOrientationForCurrentDeviceOrientation:]
  -[SpringBoard restartManager:willRestartWithTransitionRequest:]
  -[SpringBoard handleDoubleHeightStatusBarTapWithStyleOverride:]
  -[SpringBoard showAlertForUnhandledURL:error:]
  -[SpringBoard modalAlertPresentationCoordinator]
  -[SpringBoard _removeRecordingStatusBarStyleOverrideAssertion]
  -[SpringBoard profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:]
  -[SpringBoard shouldNeverLock]
  -[SpringBoard _dumpLoggingStateCaptureWithCompletion:]
  -[SpringBoard _performRestackingExpandedBundleForNotificationRequest:withCompletion:]
  -[SpringBoard .cxx_destruct]
  -[SpringBoard _basicRotationTestForCurrentConfigurationWithTeardown:]
  -[SpringBoard setBatterySaverModeActive:]
  -[SpringBoard requestDeviceUnlock]
  -[SpringBoard setExpectsFaceContact:]
  -[SpringBoard unregisterRemoteAlertSceneViewProvider:]
  -[SpringBoard scrollViewDidEndScrollingAnimation:]
  -[SpringBoard _continueRunningDismissAppSwitcherTestWithCompletion:]
  -[SpringBoard _handleBrightnessKeyCommandUpShortcut:]
  -[SpringBoard _runTodayViewPullDownToSpotlight]
  -[SpringBoard _runTodayViewScrollWidgetsTestWithOptions:]
  -[SpringBoard _setDeviceOrientation:animated:logMessage:]
  -[SpringBoard beginIgnoringInteractionEventsForReason:]
  -[SpringBoard _handleMakeSplitLeftKeyShortcut:]
  -[SpringBoard _deactivateReachability]
  -[SpringBoard removeActiveOrientationObserver:]
  -[SpringBoard _handleMakeSplitRightKeyShortcut:]
  -[SpringBoard _application:statusBarTouchesEnded:]
  -[SpringBoard _testOrientation:options:]
  -[SpringBoard _applicationOpenURL:withApplication:animating:activationSettings:origin:withResult:]
  -[SpringBoard isCurrentlyDeferringOrientationUpdates]
  -[SpringBoard _handleKeyDownEvent_DoNotDisturb:modifiers:]
  -[SpringBoard setNowLocatingApps:]
  -[SpringBoard runFieldTestScript]
  -[SpringBoard _adjustSignificantTimersAfterSleep]
  -[SpringBoard _handleApplicationExit:]
  -[SpringBoard _runBottomEdgeSwipeTestFromHomeScreen:]
  -[SpringBoard resetIdleTimerAndUndim]
  -[SpringBoard _runTodayViewFocusSearchFieldToSpotlight]
  -[SpringBoard _handleStandardFunctionKeyActionWithPreferencesURLString:modifiers:block:]
  -[SpringBoard _resetForceRotate]
  -[SpringBoard _rotateView:toOrientation:]
  -[SpringBoard supportsPortraitUpsideDownOrientation]
  -[SpringBoard expectsFaceContact]
  -[SpringBoard wipeDeviceNowWithReason:]
  -[SpringBoard _handleBrightnessKeyCommand:keyDown:]
  -[SpringBoard _initializeAndStartObservingDefaultsIfNecessary]
  -[SpringBoard modalAlertPresentationCoordinator:didChangeShowingSystemModalAlert:]
  -[SpringBoard noteSceneLayoutDidUpdateOnDisplayWithIdentity:]
  -[SpringBoard remoteTransientOverlaySessionManager:requestsHandlingForButtonEvents:forSession:viewController:]
  -[SpringBoard _runDismissContinuityBannerInSwitcherTestWithCompletion:]
  -[SpringBoard _updateHardwareKeyboardAttached]
  -[SpringBoard endIgnoringInteractionEvents]
  -[SpringBoard pushTransientActiveInterfaceOrientation:forReason:]
  -[SpringBoard applicationLaunchAlertService]
  -[SpringBoard volumeButtonEventMapper]
  -[SpringBoard _handleSplitHomeScreenShortcut:]
  -[SpringBoard _beginRequiringSpotlightTransientOverlayForReason:]
  -[SpringBoard _cleanUpLaunchTestState]
  -[SpringBoard _takeScreenshotAndEdit:]
  -[SpringBoard daylightSavingsTimer]
  -[SpringBoard _accessibilityObjectWithinProximity]
  -[SpringBoard _performScrunchAndSwipeWithComposer:]
  -[SpringBoard _simulateHomeButtonPressWithCompletion:]
  -[SpringBoard _simulateLockButtonPress]
  -[SpringBoard _startBulletinBoardServer]
  -[SpringBoard allowCaseLatchLockAndUnlock]
  -[SpringBoard _localeChanged]
  -[SpringBoard dynamicAttributionManager]
  -[SpringBoard _significantTimeChangeNotificationReceived]
  -[SpringBoard _headsetButtonUp:]
  -[SpringBoard _runSwipeUpHomeToAutoPIPTest]
  -[SpringBoard handleDeferredUILockForInCallPresentationAnimateIfNeeded:inCallPresentationActive:]
  -[SpringBoard _performLeftToRightPanGestureOnScreenWithDuration:completion:]
  -[SpringBoard noteInterfaceOrientationChanged:duration:updateMirroredDisplays:force:logMessage:]
  -[SpringBoard registerAnalyticsEventHandlers]
  -[SpringBoard remoteTransientOverlaySessionManager:shouldActivateOverlayWithContext:forSession:]
  -[SpringBoard spotlightTransientOverlayViewControllerRequestsDismissal:]
  -[SpringBoard recordingIndicatorManager]
  -[SpringBoard _flickTimingFunction]
  -[SpringBoard _handleActivateNotificationCenterKeyShortcut:]
  -[SpringBoard _handleHomeScreenNavigateOut:]
  -[SpringBoard _handleNavigateWindowInSpaceKeyShortcut:]
  -[SpringBoard scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[SpringBoard _broadcastStateCaptureToConnectedRemotePeers:]
  -[SpringBoard _runTestWithVariableFinish:options:completion:]
  -[SpringBoard _accessibilityShouldAllowIconLaunch]
  -[SpringBoard interactiveScreenshotGestureManager:requestsScreenshotWithOptionsCollection:presentationOptions:]
  -[SpringBoard _keyboardOrCaseLatchWantsToAttemptUnlock:]
  -[SpringBoard _performNotificationPublishingWithCount:uniqueThreadCount:withCompletion:]
  -[SpringBoard _runHomeScreenSearchPresent]
  -[SpringBoard _prepareToRunAutoPIPTestWithCompletion:]
  -[SpringBoard _runWidgetConfigurationTransitionFromEditingMode:]
  -[SpringBoard combinationHardwareButton]
  -[SpringBoard webClipService]
  -[SpringBoard _caseLatchWantsToAttemptLock]
  -[SpringBoard _handleHomeScreenNavigateLeft:]
  -[SpringBoard _runDashBoardDismissFromPasscodeViewAfterAuthenticationTest]
  -[SpringBoard _runFourFingerSwipeTest]
  -[SpringBoard _runMedusaSplitViewSuspendTest:withOptions:]
  -[SpringBoard _runLockScreenScrollNotificationsTestWithOptions:]
  -[SpringBoard remoteTransientOverlaySessionManager]
  -[SpringBoard _handleKeyDownEvent_DisplayBrightnessChange:modifiers:]
  -[SpringBoard updateNativeOrientationAnimated:logMessage:]
  -[SpringBoard init]
  -[SpringBoard _applicationToUseForScrollTesting]
  -[SpringBoard _handleHIDEvent:]
  -[SpringBoard _unlockAnimationDidFinish:]
  -[SpringBoard shouldShowAlertForUnhandledURL:error:]
  -[SpringBoard _runHomeScreenSwipeRightFromTodayView]
  -[SpringBoard unlockedDodgingResolverViewController]
  -[SpringBoard localeChanged]
  -[SpringBoard _enqueueWorkspaceEvent:withName:ifSatisfiesCondition:cancelingEventsWithNames:failureBlock:]
  -[SpringBoard _runPresentContinuityBannerInSwitcherTestWithCompletion:]
  -[SpringBoard scrollViewDidEndDragging:willDecelerate:]
  -[SpringBoard _keyWindowForScreen:]
  -[SpringBoard _headsetButtonDown:]
  -[SpringBoard _accessibilityIsSystemGestureActive]
  -[SpringBoard setTypingActive:auditToken:]
  -[SpringBoard isLocked]
  -[SpringBoard _accessibilityRunningApplications]
  -[SpringBoard _performRightToLeftPanGestureOnScreenWithDuration:completion:]
  -[SpringBoard _runVolumeChangeWithCompletion:]
  -[SpringBoard _simulateUserScrollForNotificationListWithCount:completion:]
  -[SpringBoard _windowForSystemAppButtonEventsForScreen:]
  -[SpringBoard isKeybagRefetchTransactionActive]
  -[SpringBoard notificationDispatcher]
  -[SpringBoard transactionForDismissingSearchTransientOverlay]
  -[SpringBoard _accessibilityDeactivationAnimationWillBegin]
  -[SpringBoard _performArcSwipeWithComposer:]
  -[SpringBoard scrollViewDidScroll:]
  -[SpringBoard _handleCommandQ:]
  -[SpringBoard noteKeybagRefetchTransactionIsActive:]
  -[SpringBoard _registerForAVSystemControllerNotifications]
  -[SpringBoard stateForStateType:withCompletionHandler:]
  -[SpringBoard _runLeftRightTodayViewScrollWidgetsTestWithOptions:]
  -[SpringBoard _handleScreenShotShortcut:]
  -[SpringBoard _handleToggleFloatingAppVisibilityKeyShortcut:]
  -[SpringBoard _leadingNotificationRequest]
  -[SpringBoard cameraHardwareButton]
  -[SpringBoard _runStackConfigurationTransition]
  -[SpringBoard remoteTransientOverlaySessionManager:activeWallpaperVariantForSession:]
  -[SpringBoard setNowPlayingProcessPID:]
  -[SpringBoard _accessibilityActivationAnimationWillBegin]
  -[SpringBoard bottomEdgeAmbiguousActivationMargin]
  -[SpringBoard canShowLockScreenCameraGrabber]
  -[SpringBoard isBundleIdentifierRestrictionDisabled:]
  -[SpringBoard userSessionController]
  -[SpringBoard _forceRotateToOrientation:withCompletion:]
  -[SpringBoard _screenshotWindowWasDismissed]
  -[SpringBoard _handleActivateAsFloatingAppKeyShortcut:]
  -[SpringBoard _endRequiringSpotlightTransientOverlayForReason:]
  -[SpringBoard _runNotificationCoalescingRestackingFromBottomTestWithOptions:]
  -[SpringBoard registerRemoteAlertSceneViewProvider:]
  -[SpringBoard _runMedusaSplitViewResizeTest:withOptions:]
  -[SpringBoard _runHomeScreenIconPullToSpotlightDismiss]
  -[SpringBoard formattedPercentStringForNumber:]
  -[SpringBoard keyCommands]
  -[SpringBoard _dumpStateCaptureData]
  -[SpringBoard _runSwipeAndPauseForSwitcherTestFromHomeScreen:completion:]
  -[SpringBoard noteBacklightFadeFinished]
  -[SpringBoard startLaunchTestNamed:options:withCompletionBlock:]
  -[SpringBoard isShowingHomescreen]
  -[SpringBoard _iapExtendedModeReset]
  -[SpringBoard _cleanupMainWorkspaceForMedusaTestWithCompletion:]
  -[SpringBoard _handleHomeScreenNavigateRight:]
  -[SpringBoard _performFourFingerSwipeWithComposer:vertically:duration:]
  -[SpringBoard _handleKeyDownEvent_KeyboardBrightnessChange:modifiers:]
  -[SpringBoard _setReachabilitySupported:]
  -[SpringBoard _waitForCloudCriticalData]
  -[SpringBoard startResumeTestNamed:options:]
  -[SpringBoard _rotationCompletion:]
  -[SpringBoard _handleShiftCommandTab:]
  -[SpringBoard _runScrunchToHomeTest]
  -[SpringBoard alertInterfaceOrientation]
  -[SpringBoard isDeterminingBootTransition]
  -[SpringBoard noteMainTransientOverlayPresentationManagerWillChangeToInterfaceOrientation:]
  -[SpringBoard endIgnoringInteractionEventsForReason:]
  -[SpringBoard appClipOverlayCoordinator]
  -[SpringBoard idleTimer]
  -[SpringBoard _handlePreviousSwitcherSpaceKeyShortcut:]
  -[SpringBoard _isDim]
  -[SpringBoard nowLocatingAppDidEnterForeground:]
  -[SpringBoard setDaylightSavingsTimer:]
  -[SpringBoard _handleCommandTab:]
  -[SpringBoard canPerformAction:withSender:]
  -[SpringBoard nowRecordingApp]
  -[SpringBoard _runAppSwitcherBringupTestOverApp:rotated:completion:]
  -[SpringBoard setUpDaylightSavingsTimer]
  -[SpringBoard _runScrollTestWithScrollView:options:completion:]
  -[SpringBoard scrollViewWillBeginDragging:]
  -[SpringBoard _performSwipeWithComposer:startLocation:endLocation:duration:timingFunction:intermediateTransformer:completion:]
  -[SpringBoard _runScrunchToAppSwitcherTest]
  -[SpringBoard _updateRecordingPIDFromActivities:]
  -[SpringBoard appsRegisteredForVolumeEvents]
  -[SpringBoard formattedDecimalStringForNumber:]
  -[SpringBoard _runDashBoardScrollFromLeftToRightPageTestWithBlur:]
  -[SpringBoard _removeAllFakeNotifications]
  -[SpringBoard _runDashBoardScrollToLeftPageTestWithBlur:]
  -[SpringBoard handleLockButtonPressFromTransientOverlayViewController:]
  -[SpringBoard backlightController:willAnimateBacklightToFactor:source:]
  -[SpringBoard _performDeferredLaunchWork]
  -[SpringBoard _accessibilityActivationAnimationStartDelay]
  -[SpringBoard _accessibilityShouldAllowAppLaunch]
  -[SpringBoard _prepareToRunSwitcherGestureTestsWithCompletion:]
  -[SpringBoard _handlePhysicalButtonEvent:]
  -[SpringBoard setAppRegisteredForVolumeEvents:isActive:]
  -[SpringBoard _screenshotWindowWillBeDisplayed]
  -[SpringBoard _handleNavigateAppWindowInSpaceKeyShortcut:]
  -[SpringBoard _findView:passingTest:]
  -[SpringBoard addActiveOrientationObserver:]
  -[SpringBoard _currentNonFlatDeviceOrientation]
  -[SpringBoard _runEnterPageHiding]
  -[SpringBoard smartCoverIsClosed]
  -[SpringBoard _daylightSavingsTimeChanged]
  -[SpringBoard _isStatusBarEffectivelyHiddenForContentOverlayInsetsForWindow:]
  -[SpringBoard _nowPlayingAppDidChangeNotification:]
  -[SpringBoard _openURLCore:display:animating:activationSettings:origin:withResult:]
  -[SpringBoard _performPanGestureTowardsUserInterfaceLayoutDirectionOnScreenWithDuration:completion:]
  -[SpringBoard _performSwipeHomeWithComposer:]
  -[SpringBoard _runSpotlightCoverSheetTodayViewRotation]
  -[SpringBoard expectsFaceContactInLandscape]
  -[SpringBoard homeScreenRotationStyleWantsUIKitRotation]
  -[SpringBoard isTypingActive]
  -[SpringBoard launchApplicationWithIdentifier:suspended:]
  -[SpringBoard _runAppOpen:withCompletion:]
  -[SpringBoard systemPointerInteractionManager]
  -[SpringBoard _handleActivateSiriKeyShortcut:]
  -[SpringBoard _runMedusaTest:withMainWorkspaceTransition:options:]
  -[SpringBoard _handleSystemNotesPIPKeyShortcut:]
  -[SpringBoard _preheatScreenshotsWithPresentationOptions:]
  -[SpringBoard _updateHomeScreenPresenceNotification:]
  -[SpringBoard _adjustDaylightSavingsTimerAfterSleep]
  -[SpringBoard softwareUpdatePasscodePolicyManager]
  -[SpringBoard updateNativeOrientationWithLogMessage:]
  -[SpringBoard _runToggleSearchTest]
  -[SpringBoard _runNotificationCoalescingRestackingTestWithOptions:]
  -[SpringBoard remoteTransientOverlaySessionManager:performDismissalRequest:forSession:]
  -[SpringBoard runHomeScreenRotationIterationWithRemainingIterations:completionHandler:]
  -[SpringBoard systemTransientUIInteractionManager]
  -[SpringBoard wantsOrientationEvents]
  -[SpringBoard _performOrbAtPoint:fromView:withCompletion:]
  -[SpringBoard _runDashBoardScrollToRightPageTestWithBlur:]
  -[SpringBoard _settingLanguageStringForNewLanguage]
  -[SpringBoard setSystemVolumeHUDEnabled:forAudioCategory:]
  -[SpringBoard activeInterfaceOrientationWithoutConsideringTransientOverlays]
  -[SpringBoard updateNativeOrientationWithOrientation:logMessage:]
  -[SpringBoard _accessibilitySetSystemGesturesDisabledByAccessibility:]
  -[SpringBoard _appIconsToPutInFolderForTest]
  -[SpringBoard _performPanWithComposer:startLocation:endLocation:duration:]
  -[SpringBoard _publishFakeThreadedLockScreenNotificationsWithCount:uniqueThreadCount:completion:]
  -[SpringBoard _runHomeScreenSearchDismiss]
  -[SpringBoard _retryLaunchTestWithOptions:]
  -[SpringBoard _runScrollAppSwitcherTest:overApp:completion:]
  -[SpringBoard _iapServerConnectionDiedNotification:]
  -[SpringBoard disablesFrontBoardImplicitWindowScenes]
  -[SpringBoard remoteTransientOverlaySessionManager:prefersStatusBarActivityItemVisibleForServiceBundleIdentifier:forSession:]
  -[SpringBoard _ringerChanged:]
  -[SpringBoard willDisplayMiniAlert]
  -[SpringBoard _performFiveFingerScrunchWithComposer:scrunchProgress:duration:withContinuationBlock:]
  -[SpringBoard _handleHomeScreenNavigateIn:]
  -[SpringBoard _enableRemoteStateDumpWithTimeout:withCompletion:]
  -[SpringBoard _handleBrightnessKeyCommandDownShortcut:]
  -[SpringBoard caseIsEnabledAndLatched]
  -[SpringBoard updateNativeOrientationWithOrientation:updateMirroredDisplays:animated:logMessage:]
  -[SpringBoard _runAddWidgetSheetTest]
  -[SpringBoard _runNotificationCoalescingExpandingTestWithOptions:]
  -[SpringBoard _handleOpenAppSwitcherShortcut:]
  -[SpringBoard _singleHomeButtonPressEventStream]
  -[SpringBoard applicationAutoLaunchService]
  -[SpringBoard isNowPlayingAppPlaying]
  -[SpringBoard nowLocatingApps]
  -[SpringBoard removeDisableActiveInterfaceOrientationChangeAssertion:nudgeOrientationIfRemovingLast:]
  -[SpringBoard ringerSwitchState]
  -[SpringBoard significantTimeChange]
  -[SpringBoard windowRotationDuration]
  -[SpringBoard _isGlobeKeyShortcutHUDEnabled]
  -[SpringBoard _postSpringBoardSignificantTimeChangedNotificationWithLogMessage:]
  -[SpringBoard _runBottomEdgeSwipeMultipleAppsTest]
  -[SpringBoard _updateRingerState:withVisuals:updatePreferenceRegister:]
  -[SpringBoard setNextVoiceRecognitionAudioInputPaths:]
  -[SpringBoard setStateDumpServerController:]
  -[SpringBoard _prepareToRunSwitcherGestureTestsFromHomeScreen:withCompletion:]
  -[SpringBoard _toggleAppLibraryVisibility:]
  -[SpringBoard setWantsOrientationEvents:logMessage:]
  -[SpringBoard _interfaceOrientationForRawOrientation:validOrientation:ignoringHomeScreenRotationStyle:]
  -[SpringBoard _runDashBoardDismissTestFromPageIndex:showPasscodeView:]
  -[SpringBoard _runNotificationCoalescingExpandingScrollingTestWithOptions:]
  -[SpringBoard _runSpotlightPulldownRotation]
  -[SpringBoard allowedRemotePeerDisplayNames]
  -[SpringBoard menuButtonInterceptAppEnabledForever]
  -[SpringBoard cache:didUpdateActiveAudioRoute:]
  -[SpringBoard _runDashBoardRotateMainPage]
  -[SpringBoard _setupMainWorkspaceForMedusaTestWithOptions:completion:]
  -[SpringBoard interactiveScreenshotGestureManager:requestsScreenshotPreheatWithPresentationOptions:]
  -[SpringBoard noteInterfaceOrientationChanged:force:logMessage:]
  -[SpringBoard _applicationToUseForOpenAndCloseTesting]
  -[SpringBoard batteryStatusDidChange:]
  -[SpringBoard iapIsInExtendedMode]
  -[SpringBoard _logReliabilityInfoForEvent:source:]
  -[SpringBoard _handleDeviceOrientationChangedHIDEvent:]
  -[SpringBoard _runDashBoardDismissWhileAuthenticatedTest]
  -[SpringBoard _turnScreenOnAndUnlockWithCompletion:]
  -[SpringBoard _disableRemoteStateDumpWithCompletion:]
  -[SpringBoard localPeerDisplayName]
  -[SpringBoard homeScreenSupportsRotation]
  -[SpringBoard setMenuButtonInterceptApp:forever:]
  -[SpringBoard setNextAssistantRecognitionStrings:]
  -[SpringBoard setBottomEdgeAmbiguousActivationMargin:]
  -[SpringBoard supportedStateTypes]
  -[SpringBoard _medusaTestWithName:testOptions:]
  -[SpringBoard _performMainWorkspaceTransitionWithPrimaryWorkspaceEntity:sideWorkspaceEntity:floatingWorkspaceEntity:spaceConfiguration:floatingConfiguration:animated:completion:]
  -[SpringBoard _handleStatusBarHoverActionForRegion:]
  -[SpringBoard isHardwareKeyboardAttached]
  -[SpringBoard _setDeferredHeadsetButtonDownEvent:]
  -[SpringBoard _startAutoPIPWithGesture:setupCompletion:finalCompletion:]
  -[SpringBoard interfaceOrientationForRawOrientation:validOrientation:ignoringHomeScreenRotationStyle:]
  -[SpringBoard noteInterfaceOrientationChanged:duration:updateMirroredDisplays:logMessage:]
  -[SpringBoard proximitySensorManager]
  -[SpringBoard _handleApplicationProcessStateDidChangeNotification:]
  -[SpringBoard _handleNavigateFloatingAppKeyShortcut:]
  -[SpringBoard _homeScreenTodayViewEventStreamWithDismissal:]
  -[SpringBoard _pauseWithComposer:locations:touchCount:]
  -[SpringBoard _performSwipeWithComposer:startLocation:endLocation:duration:]
  -[SpringBoard _runTapContinuityBannerInSwitcherTestWithCompletion:]
  -[SpringBoard _shouldSwallowHIDEvent:]
  -[SpringBoard modalAlertPresentationCoordinatorRequestedForegroundScenes:]
  -[SpringBoard hasDisableActiveInterfaceOrientationChangeAssertions]
  -[SpringBoard noteInterfaceOrientationChanged:duration:logMessage:]
  -[SpringBoard accountStoreController]
  -[SpringBoard handleDeferredUILockForInCallPresentation]
  -[SpringBoard setNowPlayingInfo:forProcessWithPID:]
  -[SpringBoard _runAppSwitcherDismissTestOverApp:rotated:completion:]
  -[SpringBoard _launchFullscreenApplication:withLaunchResult:transactionCompletion:]
  -[SpringBoard _preWarmAllIconPagesWithCompletion:]
  -[SpringBoard _runMedusaPinFloatingApplicationTest:withOptions:]
  -[SpringBoard _setStatusBarOrientation:animated:logMessage:]
  -[SpringBoard applicationOpenURL:withApplication:animating:activationSettings:origin:notifyLSOnFailure:withResult:]
  -[SpringBoard didDismissMiniAlert]
  -[SpringBoard scrollViewDidEndDecelerating:]
  -[SpringBoard toggleSearchFromBreadcrumbSource:withWillBeginHandler:completionHandler:]
  -[SpringBoard _handleLockShortcut:]
  -[SpringBoard _runScrunchAndSwipeMultipleAppsTest]
  -[SpringBoard _performDelayedHeadsetClickTimeout]
  -[SpringBoard _shouldPendAlertsForTest:]
  -[SpringBoard deviceOrientationForDeferredUpdateIfAny]
  -[SpringBoard _runDoSiDoTest]
  -[SpringBoard _areKeyboardHUDsEnabled]
  -[SpringBoard _handleShowShortcutHUD:]
  -[SpringBoard _performDragFromPoint:andDragTo:duration:fromView:withCompletion:]
  -[SpringBoard _frontBoardWantsKeyboardSceneLayerOrderedIntoScene]
  -[SpringBoard _runSwipeToHomeOverFolderTest]
  -[SpringBoard didReceiveMemoryWarning]
  -[SpringBoard languageChanged]
  -[SpringBoard idleTimerPolicyAggregator]
  -[SpringBoard mousePointerManager]
  -[SpringBoard _dashBoardCombinedListViewController]
  -[SpringBoard setWantsVolumeButtonEvents:]
  -[SpringBoard _handleSnapshotButtonHIDEvent:buttonIsDown:fromSource:]
  -[SpringBoard _performExpandingCoalescedBundleForNotificationRequest:withCompletion:]
  -[SpringBoard application:handleOpenURL:]
  -[SpringBoard _isRemoteStateDumpEnabled]
  -[SpringBoard restartManagerExitImminent:]
  -[SpringBoard startLaunchTestNamed:options:]


SBTransientActiveInterfaceOrientationRequester : NSObject
 @property  NSString *reason
 @property  long long orientation

  // instance methods
  -[SBTransientActiveInterfaceOrientationRequester .cxx_destruct]
  -[SBTransientActiveInterfaceOrientationRequester reason]
  -[SBTransientActiveInterfaceOrientationRequester orientation]
  -[SBTransientActiveInterfaceOrientationRequester initWithOrientation:andReason:]


SBUIController : NSObject <SBWallpaperObserver, PTSettingsKeyObserver, UIInteractionProgressObserver, SBWallpaperOrientationProvider, SBReachabilityObserver, SBHomeScreenBackdropViewBaseDelegate, BCBatteryDeviceObserving, ACCConnectionInfoDelegateProtocol, SBFMotionAlarmDelegate, SBFZStackParticipantDelegate, UIWindowDelegate, CSPowerStatusProviding, CSMagSafeAccessoryStatusProviding>
 @property  SBIconController *iconController
 @property  BOOL chargingChimeEnabled
 @property  BOOL homeScreenAutorotatesEvenWhenIconIsDragging
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL onAC
 @property  BOOL connectedToExternalChargingSource
 @property  BOOL connectedToWirelessInternalCharger
 @property  BOOL connectedToWirelessInternalChargingAccessory
 @property  BOOL connectedToQiPower
 @property  CSMagSafeAccessory *lastAttachedAccessory
 @property  CSMagSafeAccessory *lastDetachedAccessory
 @property  BOOL isAccessoryAnimationAllowed

  // class methods
  +[SBUIController sharedInstance]
  +[SBUIController sharedInstanceIfExists]
  +[SBUIController zoomViewForDeviceApplicationSceneHandle:displayConfiguration:interfaceOrientation:snapshot:snapshotSize:statusBarDescriptor:decodeImage:hasOrientationMismatchForClassicApp:]
  +[SBUIController _transformAndFrame:forLaunchImageHostViewWithOrientation:statusBarHeight:inJailRect:]
  +[SBUIController statusBarFrameForSnapshotFrame:orientation:statusBarStyleRequest:hidden:]
  +[SBUIController _transformForStatusBarWithOrientation:scaleFactor:]
  +[SBUIController _effectiveStatusBarSettingsForSnapshot:sceneHandle:]
  +[SBUIController statusBarFrameForDeviceApplicationSceneHandle:displayConfiguration:interfaceOrientation:statusBarStyleRequest:withinBounds:inReferenceSpace:]
  +[SBUIController statusBarFrameForSnapshotFrame:remainderFrame:orientation:statusBarStyleRequest:hidden:]

  // instance methods
  -[SBUIController wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBUIController _reduceMotionStatusDidChange:]
  -[SBUIController cancelInProcessAnimations]
  -[SBUIController getRotationContentSettings:forWindow:]
  -[SBUIController scalingView]
  -[SBUIController interfaceOrientationForWallpaperController:]
  -[SBUIController homeScreenBackdropView:opaquenessDidChange:]
  -[SBUIController wallpaperDidChangeForVariant:]
  -[SBUIController setHomeScreenScale:behaviorMode:completion:]
  -[SBUIController _closeOpenFolderIfNecessary]
  -[SBUIController setHomeScreenBlurProgress:behaviorMode:completion:]
  -[SBUIController isHeadsetBatteryCharging]
  -[SBUIController _backgroundContrastDidChange:]
  -[SBUIController _accessibilityWillBeginAppSwitcherRevealAnimation]
  -[SBUIController beginRequiringContentForReason:options:]
  -[SBUIController updateStatusBarLegibility]
  -[SBUIController _hideKeyboard]
  -[SBUIController batteryCapacityAsPercentage]
  -[SBUIController _isConnectedToWirelessCharging]
  -[SBUIController handleDidEndReachabilityAnimation]
  -[SBUIController setHomeScreenAlpha:behaviorMode:completion:]
  -[SBUIController isConnectedToWirelessInternalChargingAccessory]
  -[SBUIController setIsConnectedToUnsupportedChargingAccessory:]
  -[SBUIController isConnectedToWindowedAccessory]
  -[SBUIController setIsAccessoryAnimationAllowed:]
  -[SBUIController _shouldInitiateAnimationForAccessory:]
  -[SBUIController zStackParticipant:updatePreferences:]
  -[SBUIController nudgeIconInterfaceOrientation:duration:]
  -[SBUIController zStackParticipantDidChange:]
  -[SBUIController endRequiringLiveBackdropViewForReason:]
  -[SBUIController .cxx_destruct]
  -[SBUIController isConnectedToExternalChargingSource]
  -[SBUIController lastAttachedAccessory]
  -[SBUIController _activateWorkspaceEntity:fromIcon:location:validator:]
  -[SBUIController _blocksAnimationForAccessoryType:]
  -[SBUIController isConnectedToQiPower]
  -[SBUIController beginRequiringLiveBackdropViewForReason:]
  -[SBUIController removeDetachedAccessory:]
  -[SBUIController isHeadsetDocked]
  -[SBUIController isAccessoryAnimationAllowed]
  -[SBUIController _willRevealOrHideContentView]
  -[SBUIController storeAttachedAccessory:]
  -[SBUIController ACPowerChanged]
  -[SBUIController contentView]
  -[SBUIController succinctDescriptionBuilder]
  -[SBUIController _setConnectedToWindowedAccessory:]
  -[SBUIController playChargingChimeIfAppropriate]
  -[SBUIController _setupHomeScreenContentBackdropView]
  -[SBUIController homeScreenAutorotatesEvenWhenIconIsDragging]
  -[SBUIController setAllowIconRotation:forReason:]
  -[SBUIController isBatteryCharging]
  -[SBUIController _enumeratePowerSourcesWithBlock:]
  -[SBUIController _removeReachabilityEffectViewIfNecessary]
  -[SBUIController _powerSourceWantsToPlayChime]
  -[SBUIController isBackdropVisible]
  -[SBUIController descriptionBuilderWithMultilinePrefix:]
  -[SBUIController init]
  -[SBUIController _resetWirelessChargingState]
  -[SBUIController suppressChimeForConnectedPowerSources]
  -[SBUIController _setDebounceWirelessChargingTimerWithDuration:]
  -[SBUIController supportsDetailedBatteryCapacity]
  -[SBUIController _playAccessoryChimeIfAppropriateForAccessory:attaching:withDelay:]
  -[SBUIController didDetectDeviceMotion]
  -[SBUIController restoreContent]
  -[SBUIController descriptionWithMultilinePrefix:]
  -[SBUIController isConnectedToWirelessInternalCharger]
  -[SBUIController restoreContentWithOptions:]
  -[SBUIController isFullyCharged]
  -[SBUIController succinctDescription]
  -[SBUIController handleHomeButtonDoublePressDown]
  -[SBUIController updateBatteryState:]
  -[SBUIController activateApplication:fromIcon:location:activationSettings:actions:]
  -[SBUIController windowedAccessoryDismissed]
  -[SBUIController windowedAccessoryPresented]
  -[SBUIController _currentHomeScreenLegibilitySettings]
  -[SBUIController tearDownIconListAndBar]
  -[SBUIController _deviceUILocked]
  -[SBUIController disableAppSwitchForcePressDueToHomeButtonForce]
  -[SBUIController setChargingChimeEnabled:]
  -[SBUIController interactionProgressDidUpdate:]
  -[SBUIController setHomeScreenAutorotatesEvenWhenIconIsDragging:]
  -[SBUIController endRequiringBackdropViewForReason:]
  -[SBUIController dissmissAlertItemsAndSheetsIfPossible]
  -[SBUIController handleHomeButtonSinglePressUp]
  -[SBUIController isOnAC]
  -[SBUIController handleHomeButtonSinglePressUpWithSourceType:]
  -[SBUIController isConnectedToWirelessInternalAccessory]
  -[SBUIController isIconListViewTornDown]
  -[SBUIController accessoryEndpointDetached:forConnection:]
  -[SBUIController _debounceWirelessChargingTimerFired]
  -[SBUIController _setAccessoryAttachmentAnimationBlockingTimerWithDuration:]
  -[SBUIController transitionSourceForIcon:iconLocation:]
  -[SBUIController setLastAttachedAccessory:]
  -[SBUIController handleVolumeButtonWithType:down:]
  -[SBUIController _updateLegibility]
  -[SBUIController noteStatusBarHeightChanged:]
  -[SBUIController isConnectedToUnsupportedChargingAccessory]
  -[SBUIController restoreContentAndUnscatterIconsAnimated:]
  -[SBUIController workflowClientFromWebClip:appToLaunch:]
  -[SBUIController hasVisibleAlertItemOrSheet:]
  -[SBUIController _activateApplicationFromAccessibility:]
  -[SBUIController setPointerInteractionsEnabled:]
  -[SBUIController interactionProgress:didEnd:]
  -[SBUIController _shouldShowAnimationForAccessory:]
  -[SBUIController _cancelDebounceWirelessChargingTimer]
  -[SBUIController settings:changedValueForKey:]
  -[SBUIController _disableWirelessChargingChimeAndScreenWakeForDuration:withMotionAlarm:]
  -[SBUIController chargingChimeEnabled]
  -[SBUIController _switchToHomeScreenWallpaperAnimated:]
  -[SBUIController visibleScreenCoordinatesForWindowedAccessory]
  -[SBUIController batteryCapacity]
  -[SBUIController statusBarOverridesDidChange:]
  -[SBUIController headsetBatteryCapacity]
  -[SBUIController dealloc]
  -[SBUIController window]
  -[SBUIController beginRequiringContentForReason:]
  -[SBUIController setHomeScreenDimmingAlpha:behaviorMode:completion:]
  -[SBUIController accessoryEndpointAttached:transportType:protocol:properties:forConnection:]
  -[SBUIController _animationBlockingTimerFired]
  -[SBUIController _legibilitySettings]
  -[SBUIController cancelVolumeEvent]
  -[SBUIController _dismissAccessory:playChime:]
  -[SBUIController _accessoryEndpointAttached:]
  -[SBUIController iconController]
  -[SBUIController handleWillBeginReachabilityAnimation]
  -[SBUIController restoreContentAndUnscatterIconsAnimated:afterDelay:withCompletion:]
  -[SBUIController setLockScreenScale:behaviorMode:completion:]
  -[SBUIController _disableWirelessChargingChimeAndScreenWakeForDuration:]
  -[SBUIController endRequiringContentForReason:]
  -[SBUIController setLastDetachedAccessory:]
  -[SBUIController isConnectedToChargeIncapablePowerSource]
  -[SBUIController lastDetachedAccessory]
  -[SBUIController _setupHomeScreenDimmingWindow]
  -[SBUIController disableAnimationForNextIconRotation]
  -[SBUIController restoreContentAndUnscatterIconsAnimated:withCompletion:]
  -[SBUIController connectedDevicesDidChange:]
  -[SBUIController beginRequiringBackdropViewForReason:]
  -[SBUIController _accessoryEndpointDetached:]
  -[SBUIController possiblyWakeForPowerStatusChangeWithUnlockSource:]


SBPIPSceneContentPlaceholderView : UIView <SBScenePlaceholderContentView>
 @property  long long containerOrientation
 @property  long long statusBarStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPSceneContentPlaceholderView initWithImage:]
  -[SBPIPSceneContentPlaceholderView .cxx_destruct]
  -[SBPIPSceneContentPlaceholderView layoutSubviews]


SBSystemNotesPlaceholderContentProvider : NSObject <SBScenePlaceholderContentViewProvider>
 @property  UIImage *snapshot
 @property  <SBScenePlaceholderContentViewProviderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemNotesPlaceholderContentProvider setSnapshot:]
  -[SBSystemNotesPlaceholderContentProvider .cxx_destruct]
  -[SBSystemNotesPlaceholderContentProvider setDelegate:]
  -[SBSystemNotesPlaceholderContentProvider sceneView:requestsPlaceholderContentViewWithContext:]
  -[SBSystemNotesPlaceholderContentProvider initWithSnapshot:]
  -[SBSystemNotesPlaceholderContentProvider snapshot]
  -[SBSystemNotesPlaceholderContentProvider delegate]


SBSceneStatusBarManager : UIStatusBarManager
  // instance methods
  -[SBSceneStatusBarManager statusBarFrame]
  -[SBSceneStatusBarManager sb_statusBarFrameForStatusBarHeight:]


SBApplicationLaunchNotifyInCallWithoutDataSwitchingAlertItem : SBApplicationLaunchNotifyInCallAlertItem
  // instance methods
  -[SBApplicationLaunchNotifyInCallWithoutDataSwitchingAlertItem configure:requirePasscodeForActions:]


SBApplicationIcon : SBHApplicationIcon
  // instance methods
  -[SBApplicationIcon applicationPlaceholder]
  -[SBApplicationIcon application]


SBAppSwitcherServiceManager : NSObject
  // class methods
  +[SBAppSwitcherServiceManager sharedInstance]

  // instance methods
  -[SBAppSwitcherServiceManager .cxx_destruct]
  -[SBAppSwitcherServiceManager registerService:]
  -[SBAppSwitcherServiceManager unregisterService:]
  -[SBAppSwitcherServiceManager registeredServicesSnapshot]


SBWorkspace : NSObject <SBIdleTimerProviding, SBIdleTimerCoordinating>
 @property  FBWorkspaceEventQueue *eventQueue
 @property  SBWorkspaceTransaction *currentTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWorkspace mainWorkspace]

  // instance methods
  -[SBWorkspace createRequestForApplicationActivation:options:]
  -[SBWorkspace executeTransitionRequest:withValidator:]
  -[SBWorkspace executeTransitionRequest:]
  -[SBWorkspace coordinatorRequestedIdleTimerBehavior:]
  -[SBWorkspace eventQueue]
  -[SBWorkspace requestTransitionWithOptions:builder:validator:]
  -[SBWorkspace requestTransitionWithBuilder:]
  -[SBWorkspace _executeTransitionRequest:options:validator:]
  -[SBWorkspace createRequestWithOptions:]
  -[SBWorkspace initWithEventQueue:]
  -[SBWorkspace idleTimerProvider:didProposeBehavior:forReason:]
  -[SBWorkspace transactionForTransitionRequest:]
  -[SBWorkspace currentTransaction]
  -[SBWorkspace .cxx_destruct]
  -[SBWorkspace init]


SBMainWorkspace : SBWorkspace <BSTransactionObserver, SBBacklightControllerObserver, FBSystemServiceDelegate, FBProcessManagerObserver, FBApplicationProcessObserver, BSWatchdogDelegate, FBSceneManagerObserver, MCProfileConnectionObserver, BSPowerMonitorObserver, SBPowerDownViewControllerDelegate, SBTransientOverlayPresentationManagerDelegate, CCSModulePresentationEndpoint, SBControlCenterModuleTransientOverlayViewControllerDelegate, SBInCallPresentationManagerDelegate, SBFZStackParticipantDelegate>
 @property  SBWorkspaceTransaction *currentTransaction
 @property  FBSceneManager *sceneManager
 @property  <SBIdleTimerProviding> *activeIdleTimerProvider
 @property  BOOL medusaEnabled
 @property  SBHUDController *HUDController
 @property  SBVolumeControl *volumeControl
 @property  SBRingerControl *ringerControl
 @property  SBBrightnessControl *brightnessControl
 @property  SBHomeGestureArbiter *homeGestureArbiter
 @property  SBFZStackResolver *zStackResolver
 @property  SBHardwareButtonZStackClient *zStackHardwareButtonClient
 @property  SBInCallTransientOverlayManager *inCallTransientOverlayManager
 @property  SBTransientOverlayPresentationManager *transientOverlayPresentationManager
 @property  SBWorkspaceKeyboardFocusController *keyboardFocusController
 @property  SBUniversalControlServer *universalControlServer
 @property  SBKeyboardDismissalManager *keyboardDismissalManager
 @property  SBInCallPresentationManager *inCallPresentationManager
 @property  SBSystemNotesManager *systemNotesManager
 @property  BOOL springBoardActive
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  BOOL powerDownTransientOverlayFrontmost
 @property  SBPIPControllerCoordinator *pipCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainWorkspace sharedInstance]
  +[SBMainWorkspace sharedInstanceIfExists]
  +[SBMainWorkspace start]
  +[SBMainWorkspace _instanceIfExists]
  +[SBMainWorkspace _sharedInstanceWithNilCheckPolicy:]

  // instance methods
  -[SBMainWorkspace _resume]
  -[SBMainWorkspace processManager:didAddProcess:]
  -[SBMainWorkspace createRequestForApplicationActivation:options:]
  -[SBMainWorkspace applicationProcessDidExit:withContext:]
  -[SBMainWorkspace executeTransitionRequest:withValidator:]
  -[SBMainWorkspace processDidExit:]
  -[SBMainWorkspace executeTransitionRequest:]
  -[SBMainWorkspace idleTimerCoordinator]
  -[SBMainWorkspace coordinatorRequestedIdleTimerBehavior:]
  -[SBMainWorkspace sceneManager]
  -[SBMainWorkspace _alertItemForPreventingLaunchOfApp:fromTrustState:]
  -[SBMainWorkspace requestTransitionWithOptions:builder:validator:]
  -[SBMainWorkspace applicationProcessDebuggingStateDidChange:]
  -[SBMainWorkspace requestTransitionWithBuilder:]
  -[SBMainWorkspace processManager:didRemoveProcess:]
  -[SBMainWorkspace _executeTransitionRequest:options:validator:]
  -[SBMainWorkspace transientOverlayPresentationManager]
  -[SBMainWorkspace _noteDidWakeFromSleep]
  -[SBMainWorkspace createRequestWithOptions:]
  -[SBMainWorkspace transactionDidComplete:]
  -[SBMainWorkspace initWithEventQueue:]
  -[SBMainWorkspace idleTimerProvider:didProposeBehavior:forReason:]
  -[SBMainWorkspace _selectTransactionForReturningToTheLockScreenFromApp:animated:forceToBuddy:withResult:]
  -[SBMainWorkspace transactionForTransitionRequest:]
  -[SBMainWorkspace currentTransaction]
  -[SBMainWorkspace _broadcastCurrentTransaction]
  -[SBMainWorkspace currentStatusBarSettingsForTransientOverlayPresentationManager:]
  -[SBMainWorkspace zStackResolver]
  -[SBMainWorkspace inCallPresentationManager:createPresentationSessionWithSceneHandle:]
  -[SBMainWorkspace setIdleTimerCoordinator:]
  -[SBMainWorkspace watchdogStarted:]
  -[SBMainWorkspace presentPowerDownTransientOverlay]
  -[SBMainWorkspace _validateRequestToOpenApplication:options:origin:error:]
  -[SBMainWorkspace _addRequestCompletionBlock:toTransaction:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireControlCenterWindowLevelAssertionWithReason:windowLevel:]
  -[SBMainWorkspace transientOverlayPresentationManager:willPresentViewController:]
  -[SBMainWorkspace _handleUntrustedOpenRequestForApplication:options:activationSettings:origin:withResult:]
  -[SBMainWorkspace _removeApplicationEntitiesFromWorkspace:error:]
  -[SBMainWorkspace keyboardFocusController]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireInteractiveScreenshotGestureDisabledAssertionWithReason:]
  -[SBMainWorkspace transientOverlayPresentationManagerRequestsSiriDismissal:animated:]
  -[SBMainWorkspace process:stateDidChangeFromState:toState:]
  -[SBMainWorkspace systemService:handleActions:origin:withResult:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireSiriWindowLevelAssertionWithReason:windowLevel:]
  -[SBMainWorkspace bannerLongLookPresentationObservationTokenForTransientOverlayPresentationManager:]
  -[SBMainWorkspace presentModuleWithIdentifier:options:completion:]
  -[SBMainWorkspace zStackParticipant:updatePreferences:]
  -[SBMainWorkspace _destroyApplicationSceneEntity:]
  -[SBMainWorkspace inCallPresentationManager]
  -[SBMainWorkspace zStackParticipantDidChange:]
  -[SBMainWorkspace pipControllerForType:]
  -[SBMainWorkspace .cxx_destruct]
  -[SBMainWorkspace transientOverlayPresentationManager:shouldRestoreFirstResponderForKeyWindow:]
  -[SBMainWorkspace inCallPresentationManagerRequestsHandlingOfDeferredUILock:]
  -[SBMainWorkspace dismissPowerDownTransientOverlayWithCompletion:]
  -[SBMainWorkspace transientOverlayPresentationManager:unregisterCoverSheetExternalBehaviorProvider:]
  -[SBMainWorkspace _proposeIdleTimerBehaviorForReason:]
  -[SBMainWorkspace powerDownViewControllerDidDisappear:]
  -[SBMainWorkspace systemService:canActivateApplication:withResult:]
  -[SBMainWorkspace _coversheetDidPresent]
  -[SBMainWorkspace _setCurrentTransactionForRequest:fallbackProvider:]
  -[SBMainWorkspace _setActiveIdleTimerProvider:]
  -[SBMainWorkspace isKeyboardVisibleForSpringBoardForTransientOverlayPresentationManager:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireDeviceOrientationUpdateDeferralAssertionWithReason:]
  -[SBMainWorkspace _applicationForIdentifier:]
  -[SBMainWorkspace _coversheetDidDismiss]
  -[SBMainWorkspace dismissTransientOverlayViewController:animated:completion:]
  -[SBMainWorkspace systemServicePrepareForShutdown:withOptions:]
  -[SBMainWorkspace presentTransientOverlayViewController:animated:completion:]
  -[SBMainWorkspace _canImplicitlyUnlockAtLockScreenWhileAuthenticatedFromOrigin:givenOrigin:trustedRequest:outReason:]
  -[SBMainWorkspace isPowerDownTransientOverlayTopmost]
  -[SBMainWorkspace systemService:isPasscodeLockedOrBlockedWithResult:]
  -[SBMainWorkspace HUDController]
  -[SBMainWorkspace _handleKeyShortcutHUDVisibilityDidDismiss]
  -[SBMainWorkspace _isLaunchingApplicationAfterSetupForRequestWithBundleIdentifier:options:origin:]
  -[SBMainWorkspace homeGestureArbiter]
  -[SBMainWorkspace _initializeAndObserveDefaults]
  -[SBMainWorkspace init]
  -[SBMainWorkspace _updateFrontMostApplicationEventPort]
  -[SBMainWorkspace systemServiceApplicationInfoProvider:]
  -[SBMainWorkspace powerMonitorSystemWillSleep:]
  -[SBMainWorkspace _addStateCaptureHandlers]
  -[SBMainWorkspace transientOverlayPresentationManager:preferredWhitePointAdaptivityStyleDidChangeWithAnimationSettings:]
  -[SBMainWorkspace profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[SBMainWorkspace inCallPresentationManagerInterfaceOrientationForTransientOverlayPresentation:]
  -[SBMainWorkspace _applicationProcessExited:withContext:]
  -[SBMainWorkspace powerDownViewControllerRequestsPowerDown:]
  -[SBMainWorkspace _canExecuteTransitionRequest:forExecution:]
  -[SBMainWorkspace _selectTransactionForAppActivationRequest:]
  -[SBMainWorkspace systemNotesManager]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireHideAppStatusBarAssertionWithReason:animated:]
  -[SBMainWorkspace keyboardDismissalManager]
  -[SBMainWorkspace _handleUserActionRequest:options:activationSettings:origin:withResult:]
  -[SBMainWorkspace controlCenterPresentationObservationTokenForTransientOverlayPresentationManager:]
  -[SBMainWorkspace dismissAllTransientOverlayPresentationsAnimated:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireDisableAutoUnlockAssertionWithReason:]
  -[SBMainWorkspace transientOverlayPresentationManager:willChangeTopmostViewControllerInterfaceOrientationToOrientation:]
  -[SBMainWorkspace isSpringBoardActive]
  -[SBMainWorkspace transientOverlayPresentationManager:newSceneDeactivationAssertionWithReason:]
  -[SBMainWorkspace _suspend]
  -[SBMainWorkspace _executeTransientOverlayTransitionRequest:]
  -[SBMainWorkspace _selectTransactionForTransientOverlayPresentationRequest:]
  -[SBMainWorkspace _handleKeyShortcutHUDVisibilityDidPresent]
  -[SBMainWorkspace controlCenterModuleTransientOverlayViewControllerNeedsDismissal:]
  -[SBMainWorkspace volumeControl]
  -[SBMainWorkspace _applicationEntityWasRemovedFromAppSwitcher:]
  -[SBMainWorkspace transientOverlayPresentationManagerRequestsAppIconForceTouchDismissal:animated:]
  -[SBMainWorkspace _attemptUnlockToApplication:showPasscode:origin:givenOrigin:options:completion:]
  -[SBMainWorkspace powerMonitorSystemSleepRequestAborted:]
  -[SBMainWorkspace siriPresentationObservationTokenForTransientOverlayPresentationManager:]
  -[SBMainWorkspace _cleanupAppRepairRequest:]
  -[SBMainWorkspace _selectTransactionForAppEntityRemoved:]
  -[SBMainWorkspace isApplicationRunningAsViewService:]
  -[SBMainWorkspace _executeSuspendedTransactionForRequest:]
  -[SBMainWorkspace _generateIdleTimerBehaviorForReason:]
  -[SBMainWorkspace inCallTransientOverlayManager]
  -[SBMainWorkspace watchdogFired:]
  -[SBMainWorkspace applicationProcessDidLaunch:]
  -[SBMainWorkspace _preflightTransitionRequest:forExecution:]
  -[SBMainWorkspace zStackHardwareButtonClient]
  -[SBMainWorkspace _handleSetupExited:]
  -[SBMainWorkspace _dismissPresentedControlCenterModule:]
  -[SBMainWorkspace powerMonitorSystemDidWakeFromSleep:]
  -[SBMainWorkspace _registerHandler:forExtensionPoint:]
  -[SBMainWorkspace ringerControl]
  -[SBMainWorkspace powerMonitorSystemWillWakeFromSleep:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireWallpaperAnimationSuspensionAssertionWithReason:]
  -[SBMainWorkspace setCurrentTransaction:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireBannerLongLookWindowLevelAssertionWithReason:windowLevel:]
  -[SBMainWorkspace _handleTrustedOpenRequestForApplication:options:activationSettings:origin:withResult:]
  -[SBMainWorkspace _setupPIPCoordinator]
  -[SBMainWorkspace _handlerForExtensionPoint:]
  -[SBMainWorkspace defaultShouldAutorotateForTransientOverlayPresentationManager:]
  -[SBMainWorkspace backlightController:didAnimateBacklightToFactor:source:]
  -[SBMainWorkspace powerDownViewControllerRequestsDismissal:]
  -[SBMainWorkspace _handleBuddyLaunchFinished]
  -[SBMainWorkspace pipCoordinator]
  -[SBMainWorkspace _executeApplicationTransitionRequest:]
  -[SBMainWorkspace _removeApplicationEntities:withDestructionIntent:completion:]
  -[SBMainWorkspace _activeIdleTimerProvider]
  -[SBMainWorkspace dealloc]
  -[SBMainWorkspace systemService:handleOpenApplicationRequest:withCompletion:]
  -[SBMainWorkspace transientOverlayPresentationManagerRequestsControlCenterDismissal:animated:]
  -[SBMainWorkspace _transactionForTransitionRequest:]
  -[SBMainWorkspace systemServicePrepareForExit:andRelaunch:]
  -[SBMainWorkspace _unregisterHandler:forExtensionPoint:]
  -[SBMainWorkspace brightnessControl]
  -[SBMainWorkspace canExecuteTransitionRequest:]
  -[SBMainWorkspace transientOverlayPresentationManager:registerCoverSheetExternalBehaviorProvider:]
  -[SBMainWorkspace universalControlServer]
  -[SBMainWorkspace applicationProcessWillLaunch:]
  -[SBMainWorkspace _updateMedusaEnablementAndNotify:]
  -[SBMainWorkspace _selectTransactionForReturningToTheLockScreenWithRequest:fromApp:]
  -[SBMainWorkspace _handleOpenApplicationRequest:options:activationSettings:origin:withResult:]
  -[SBMainWorkspace _applyCommonActivationSettings:forRequestWithOptions:clientProcess:application:]
  -[SBMainWorkspace transientOverlayPresentationManager:didDismissViewController:wasTopmostPresentation:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireProximitySensorEnabledAssertionWithReason:]
  -[SBMainWorkspace _finishInitialization]
  -[SBMainWorkspace defaultSupportedInterfaceOrientationsForTransientOverlayPresentationManager:]
  -[SBMainWorkspace defaultPreferredInterfaceOrientationForPresentationForTransientOverlayPresentationManager:]
  -[SBMainWorkspace _determineSourceForTransitionRequest:]
  -[SBMainWorkspace isMedusaEnabled]
  -[SBMainWorkspace _selectTransactionForAppActivationUnderMainScreenLock:withResult:]
  -[SBMainWorkspace updateFrontMostApplicationEventPort]
  -[SBMainWorkspace _selectTransactionForAppActivationUnderMainScreenLockRequest:]
  -[SBMainWorkspace transientOverlayPresentationManager:shouldResignFirstResponderForKeyWindow:]
  -[SBMainWorkspace _selectTransactionForAppRelaunch:]
  -[SBMainWorkspace inCallPresentationManagerInterfaceOrientationForBannerPresentation:]
  -[SBMainWorkspace _canAppWithBundleIdentifier:requestMovingContentToSceneOpenApplicationOptions:]


SBPIPRotationGestureRecognizer : UIRotationGestureRecognizer
 @property  unsigned long maximumNumberOfTouches
 @property  BOOL failsPastHysteresis
 @property  <SBPIPSystemGestureRecognizerDelegate> *delegate

  // instance methods
  -[SBPIPRotationGestureRecognizer .cxx_destruct]
  -[SBPIPRotationGestureRecognizer initWithTarget:action:]
  -[SBPIPRotationGestureRecognizer touchesBegan:withEvent:]
  -[SBPIPRotationGestureRecognizer setDelegate:]
  -[SBPIPRotationGestureRecognizer touchesMoved:withEvent:]
  -[SBPIPRotationGestureRecognizer reset]
  -[SBPIPRotationGestureRecognizer touchesCancelled:withEvent:]
  -[SBPIPRotationGestureRecognizer delegate]
  -[SBPIPRotationGestureRecognizer maximumNumberOfTouches]
  -[SBPIPRotationGestureRecognizer setMaximumNumberOfTouches:]
  -[SBPIPRotationGestureRecognizer touchesEnded:withEvent:]
  -[SBPIPRotationGestureRecognizer failsPastHysteresis]
  -[SBPIPRotationGestureRecognizer setFailsPastHysteresis:]


SBFluidSwitcherAnimationSettings : PTSettings
 @property  SBFFluidBehaviorSettings *layoutSettings
 @property  SBFFluidBehaviorSettings *zoomUpSettings
 @property  SBFFluidBehaviorSettings *iconZoomDownSettings
 @property  SBFFluidBehaviorSettings *floatingDockIconFadeSettings
 @property  SBFFluidBehaviorSettings *switcherZoomDownIconFadeOutSettings
 @property  SBFFluidBehaviorSettings *iconFadeInSettings
 @property  SBFFluidBehaviorSettings *switcherFadeOutSettings
 @property  SBFFluidBehaviorSettings *centerZoomSettings
 @property  SBFFluidBehaviorSettings *slideOverSettings
 @property  SBFFluidBehaviorSettings *switcherToHomeSettings
 @property  SBFFluidBehaviorSettings *switcherToHomeOpacitySettings
 @property  SBFFluidBehaviorSettings *toggleAppSwitcherSettings
 @property  SBFFluidBehaviorSettings *launchAppFromSwitcherSettings
 @property  SBFFluidBehaviorSettings *continuityBannerSlideUpSettings
 @property  SBFFluidBehaviorSettings *stackedSwitcherTrackingSettings
 @property  BOOL performTwoPhaseFullScreenToPeekTransition
 @property  SBFFluidBehaviorSettings *fullScreenToPeekFirstPhaseAnimationSettings
 @property  SBFFluidBehaviorSettings *fullScreenToPeekSecondPhaseAnimationSettings
 @property  double fullScreenToPeekSecondPhaseAnimationDelay
 @property  SBFFluidBehaviorSettings *splitViewToSlideOverSettings
 @property  SBFFluidBehaviorSettings *slideOverToFullScreenAnimationSettings
 @property  double slideOverToFullScreenOutgoingAppScaleBack
 @property  double slideOverToFullScreenOutgoingFinalOpacity
 @property  SBFFluidBehaviorSettings *centerToSlideOverAnimationSettings
 @property  SBFFluidBehaviorSettings *swapAppSidesLayoutAnimationSettings
 @property  SBFFluidBehaviorSettings *swapAppSidesOpacityAnimationSettings
 @property  double swapAppSidesShadowFadeOutDelay
 @property  SBFFluidBehaviorSettings *homeGestureCenterRowZoomUpSettings
 @property  SBFFluidBehaviorSettings *homeGestureEdgeRowZoomUpSettings
 @property  SBFFluidBehaviorSettings *homeGestureTopRowZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureTopRowZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureTopRowZoomDownScaleSettings
 @property  SBFFluidBehaviorSettings *homeGestureBottomRowZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureBottomRowZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureBottomRowZoomDownScaleSettings
 @property  SBFFluidBehaviorSettings *homeGestureSmallWidgetZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureSmallWidgetZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureSmallWidgetZoomDownScaleSettings
 @property  SBFFluidBehaviorSettings *homeGestureMediumWidgetZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureMediumWidgetZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureMediumWidgetZoomDownScaleSettings
 @property  SBFFluidBehaviorSettings *homeGestureLargeWidgetZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureLargeWidgetZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureLargeWidgetZoomDownScaleSettings
 @property  double zoomDownWidgetScaleVelocityYMinimum
 @property  double zoomDownWidgetScaleVelocityYMaximum
 @property  double zoomDownWidgetScaleOvershootMinimumMultiplier
 @property  double zoomDownWidgetScaleOvershootMaximumMultiplier
 @property  double zoomDownWidgetScaleOvershootDuration
 @property  SBFFluidBehaviorSettings *arcSwipeSettings
 @property  SBFFluidBehaviorSettings *appToSwitcherCornerRadiusSettings
 @property  SBFFluidBehaviorSettings *gestureInitiatedAppToSwitcherSettings
 @property  SBFFluidBehaviorSettings *cardFlyInSettings
 @property  double cardFlyInAccelerationDipThreshold
 @property  long long minimumTouchSamplesForAccelerationDip
 @property  SBFFluidBehaviorSettings *reduceMotionArcSwipeSettings
 @property  SBFFluidBehaviorSettings *reduceMotionAppToSwitcherSettings
 @property  double reduceMotionTriggerDelay
 @property  double zoomDownVelocityYMinimum
 @property  double zoomDownVelocityYMaximum
 @property  double zoomDownVelocityYLayoutResponseMultiplier
 @property  double zoomDownVelocityXMinimum
 @property  double zoomDownVelocityXMaximum
 @property  double zoomDownVelocityXPositionResponseMultiplier
 @property  double appToSwitcherTransitionMinCardScaleFactor
 @property  BOOL allowIconZoomFromMediumWidgets
 @property  BOOL allowIconZoomFromLargeWidgets
 @property  SBFFluidBehaviorSettings *dosidoSettings
 @property  SBFFluidBehaviorSettings *dosidoScaleDownSettings
 @property  SBFFluidBehaviorSettings *dosidoScaleUpSettings
 @property  double dosidoScale
 @property  double dosidoScaleUpDelay
 @property  SBFFluidBehaviorSettings *crossblurDosidoSettings
 @property  double crossblurDosidoSmallScale
 @property  double crossblurDosidoLargeScale
 @property  double crossblurDosidoBlurRadius
 @property  double crossblurRasterizationScale
 @property  SBFFluidBehaviorSettings *crossfadeDosidoSettings
 @property  SBFFluidBehaviorSettings *slideUpSettings
 @property  SBFFluidBehaviorSettings *backdropBlurSettings
 @property  SBFFluidBehaviorSettings *homeScreenOpacitySettings
 @property  SBFFluidBehaviorSettings *homeScreenScaleSettings
 @property  SBFFluidBehaviorSettings *opacitySettings
 @property  SBFFluidBehaviorSettings *centerZoomOpacitySettings
 @property  SBFFluidBehaviorSettings *swipeToKillOpacitySettings
 @property  SBFFluidBehaviorSettings *wallpaperScaleSettings
 @property  SBFFluidBehaviorSettings *appSelectionSquishSettings
 @property  SBFFluidBehaviorSettings *statusBarFadeInSettings
 @property  SBFFluidBehaviorSettings *statusBarFadeOutSettings
 @property  double statusBarToApexBounceAnimationDuration
 @property  double statusBarFromApexBounceAnimationDuration
 @property  SBFFluidBehaviorSettings *alertCardifiedDismissalSettings
 @property  double alertCardifiedDismissHapticDelay
 @property  double alertCardifiedDismissZoomOutDelay
 @property  double alertCardifiedDismissClientAnimationsDelay
 @property  SBFFluidBehaviorSettings *alertBarSwipeDismissalSettings
 @property  double alertBarSwipeDismissHapticDelay
 @property  double alertBarSwipeDismissZoomOutDelay
 @property  double alertBarSwipeDismissClientAnimationsDelay
 @property  SBFFluidBehaviorSettings *siriSwipeDismissalSettings
 @property  double siriSwipeDismissHapticDelay
 @property  double siriSwipeDismissZoomOutDelay
 @property  double siriSwipeDismissClientAnimationsDelay
 @property  SBFFluidBehaviorSettings *reopenButtonScaleSettings
 @property  double reopenButtonInitialScale
 @property  double reopenButtonFadeInDelay
 @property  SBFFluidBehaviorSettings *bannerUnfurlSettings
 @property  SBFFluidBehaviorSettings *bannerUnfurlWallpaperAlphaSettings
 @property  double bannerUnfurlWallpaperAlphaDelay
 @property  SBFFluidBehaviorSettings *pulseScaleSettings
 @property  double pulseScale
 @property  double pulseSecondStageDelay
 @property  double disableAsyncRenderingTransitionPercentage
 @property  double disallowAcceleratedHomeButtonPressTransitionPercentage
 @property  double centerZoomScale
 @property  double homeScreenBlurInSwitcher
 @property  double homeScreenBlurInSwitcherReduceMotionEnabled
 @property  double homeScreenBlurInApplication
 @property  double homeScreenOpacityInSwitcher
 @property  double homeScreenOpacityInApplication
 @property  double homeScreenScaleInSwitcher
 @property  double homeScreenScaleInApplication
 @property  double wallpaperScaleInSwitcher
 @property  double wallpaperScaleInApplication
 @property  double dimmingAlphaInSwitcher
 @property  double dimmingAlphaInApplication
 @property  double dockHurdlingIconZoomInitialVelocity
 @property  double dockHurdlingIconZoomDockToBackTiming
 @property  double reduceMotionCrossfadeDuration
 @property  double iconZoomFloatingDockFadeDelay
 @property  double emptySwitcherDismissDelay
 @property  double resizeBlurDelay
 @property  double appSwitcherTitleAndIconFadeInSlowDownFactor

  // class methods
  +[SBFluidSwitcherAnimationSettings settingsControllerModule]

  // instance methods
  -[SBFluidSwitcherAnimationSettings setPulseScale:]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleOvershootDuration]
  -[SBFluidSwitcherAnimationSettings setCenterZoomSettings:]
  -[SBFluidSwitcherAnimationSettings homeScreenBlurInSwitcher]
  -[SBFluidSwitcherAnimationSettings slideOverToFullScreenOutgoingAppScaleBack]
  -[SBFluidSwitcherAnimationSettings setHomeGestureBottomRowZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureTopRowZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenScaleInApplication]
  -[SBFluidSwitcherAnimationSettings splitViewToSlideOverSettings]
  -[SBFluidSwitcherAnimationSettings wallpaperScaleInSwitcher]
  -[SBFluidSwitcherAnimationSettings pulseScaleSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureEdgeRowZoomUpSettings:]
  -[SBFluidSwitcherAnimationSettings setHomeScreenScaleInSwitcher:]
  -[SBFluidSwitcherAnimationSettings statusBarFromApexBounceAnimationDuration]
  -[SBFluidSwitcherAnimationSettings setReopenButtonScaleSettings:]
  -[SBFluidSwitcherAnimationSettings centerZoomSettings]
  -[SBFluidSwitcherAnimationSettings setCrossfadeDosidoSettings:]
  -[SBFluidSwitcherAnimationSettings appToSwitcherCornerRadiusSettings]
  -[SBFluidSwitcherAnimationSettings homeGestureMediumWidgetZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings setStatusBarFadeInSettings:]
  -[SBFluidSwitcherAnimationSettings setSwipeToKillOpacitySettings:]
  -[SBFluidSwitcherAnimationSettings centerToSlideOverAnimationSettings]
  -[SBFluidSwitcherAnimationSettings setCenterToSlideOverAnimationSettings:]
  -[SBFluidSwitcherAnimationSettings setReopenButtonInitialScale:]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleOvershootDuration:]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityXMinimum]
  -[SBFluidSwitcherAnimationSettings slideOverToFullScreenAnimationSettings]
  -[SBFluidSwitcherAnimationSettings alertCardifiedDismissZoomOutDelay]
  -[SBFluidSwitcherAnimationSettings reduceMotionCrossfadeDuration]
  -[SBFluidSwitcherAnimationSettings homeGestureBottomRowZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings _setKeyboardShortcutDefaultValues]
  -[SBFluidSwitcherAnimationSettings switcherToHomeOpacitySettings]
  -[SBFluidSwitcherAnimationSettings setBannerUnfurlWallpaperAlphaSettings:]
  -[SBFluidSwitcherAnimationSettings bannerUnfurlWallpaperAlphaSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureLargeWidgetZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings setCenterZoomOpacitySettings:]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityXMaximum]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleVelocityYMaximum]
  -[SBFluidSwitcherAnimationSettings setSiriSwipeDismissClientAnimationsDelay:]
  -[SBFluidSwitcherAnimationSettings homeGestureBottomRowZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureCenterRowZoomUpSettings:]
  -[SBFluidSwitcherAnimationSettings setHomeScreenBlurInSwitcher:]
  -[SBFluidSwitcherAnimationSettings setWallpaperScaleSettings:]
  -[SBFluidSwitcherAnimationSettings alertBarSwipeDismissClientAnimationsDelay]
  -[SBFluidSwitcherAnimationSettings setPulseSecondStageDelay:]
  -[SBFluidSwitcherAnimationSettings alertBarSwipeDismissalSettings]
  -[SBFluidSwitcherAnimationSettings setIconFadeInSettings:]
  -[SBFluidSwitcherAnimationSettings homeScreenScaleSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureLargeWidgetZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureSmallWidgetZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings setCrossblurRasterizationScale:]
  -[SBFluidSwitcherAnimationSettings setHomeScreenBlurInApplication:]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleOvershootMinimumMultiplier:]
  -[SBFluidSwitcherAnimationSettings slideOverSettings]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityXPositionResponseMultiplier:]
  -[SBFluidSwitcherAnimationSettings setIconZoomFloatingDockFadeDelay:]
  -[SBFluidSwitcherAnimationSettings setBannerUnfurlSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureTopRowZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings homeGestureSmallWidgetZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenOpacityInSwitcher]
  -[SBFluidSwitcherAnimationSettings reduceMotionAppToSwitcherSettings]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleVelocityYMinimum:]
  -[SBFluidSwitcherAnimationSettings stackedSwitcherTrackingSettings]
  -[SBFluidSwitcherAnimationSettings setFullScreenToPeekSecondPhaseAnimationSettings:]
  -[SBFluidSwitcherAnimationSettings setSplitViewToSlideOverSettings:]
  -[SBFluidSwitcherAnimationSettings dockHurdlingIconZoomDockToBackTiming]
  -[SBFluidSwitcherAnimationSettings reopenButtonInitialScale]
  -[SBFluidSwitcherAnimationSettings .cxx_destruct]
  -[SBFluidSwitcherAnimationSettings arcSwipeSettings]
  -[SBFluidSwitcherAnimationSettings iconFadeInSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenBlurInApplication]
  -[SBFluidSwitcherAnimationSettings setAppToSwitcherCornerRadiusSettings:]
  -[SBFluidSwitcherAnimationSettings appToSwitcherTransitionMinCardScaleFactor]
  -[SBFluidSwitcherAnimationSettings crossblurDosidoSettings]
  -[SBFluidSwitcherAnimationSettings setDefaultValues]
  -[SBFluidSwitcherAnimationSettings setGestureInitiatedAppToSwitcherSettings:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureSmallWidgetZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings _setHomeGestureAnimationDefaultValues]
  -[SBFluidSwitcherAnimationSettings setReduceMotionCrossfadeDuration:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureMediumWidgetZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityYMinimum]
  -[SBFluidSwitcherAnimationSettings setHomeGestureMediumWidgetZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings fullScreenToPeekFirstPhaseAnimationSettings]
  -[SBFluidSwitcherAnimationSettings setSwapAppSidesOpacityAnimationSettings:]
  -[SBFluidSwitcherAnimationSettings reopenButtonFadeInDelay]
  -[SBFluidSwitcherAnimationSettings swipeToKillOpacitySettings]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityYMaximum:]
  -[SBFluidSwitcherAnimationSettings setLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings zoomUpSettings]
  -[SBFluidSwitcherAnimationSettings setDosidoScaleUpSettings:]
  -[SBFluidSwitcherAnimationSettings fullScreenToPeekSecondPhaseAnimationDelay]
  -[SBFluidSwitcherAnimationSettings allowIconZoomFromLargeWidgets]
  -[SBFluidSwitcherAnimationSettings minimumTouchSamplesForAccelerationDip]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityYLayoutResponseMultiplier]
  -[SBFluidSwitcherAnimationSettings setToggleAppSwitcherSettings:]
  -[SBFluidSwitcherAnimationSettings crossblurRasterizationScale]
  -[SBFluidSwitcherAnimationSettings alertCardifiedDismissHapticDelay]
  -[SBFluidSwitcherAnimationSettings setResizeBlurDelay:]
  -[SBFluidSwitcherAnimationSettings setZoomUpSettings:]
  -[SBFluidSwitcherAnimationSettings setAllowIconZoomFromLargeWidgets:]
  -[SBFluidSwitcherAnimationSettings setDimmingAlphaInApplication:]
  -[SBFluidSwitcherAnimationSettings siriSwipeDismissHapticDelay]
  -[SBFluidSwitcherAnimationSettings setAppSwitcherTitleAndIconFadeInSlowDownFactor:]
  -[SBFluidSwitcherAnimationSettings homeGestureMediumWidgetZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings setAllowIconZoomFromMediumWidgets:]
  -[SBFluidSwitcherAnimationSettings slideOverToFullScreenOutgoingFinalOpacity]
  -[SBFluidSwitcherAnimationSettings allowIconZoomFromMediumWidgets]
  -[SBFluidSwitcherAnimationSettings dimmingAlphaInSwitcher]
  -[SBFluidSwitcherAnimationSettings backdropBlurSettings]
  -[SBFluidSwitcherAnimationSettings iconZoomDownSettings]
  -[SBFluidSwitcherAnimationSettings setStatusBarFromApexBounceAnimationDuration:]
  -[SBFluidSwitcherAnimationSettings homeScreenDimmingAlphaForMode:]
  -[SBFluidSwitcherAnimationSettings setCrossblurDosidoSettings:]
  -[SBFluidSwitcherAnimationSettings crossblurDosidoBlurRadius]
  -[SBFluidSwitcherAnimationSettings setSlideOverToFullScreenAnimationSettings:]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleVelocityYMinimum]
  -[SBFluidSwitcherAnimationSettings setReduceMotionArcSwipeSettings:]
  -[SBFluidSwitcherAnimationSettings setLaunchAppFromSwitcherSettings:]
  -[SBFluidSwitcherAnimationSettings pulseSecondStageDelay]
  -[SBFluidSwitcherAnimationSettings floatingDockIconFadeSettings]
  -[SBFluidSwitcherAnimationSettings launchAppFromSwitcherSettings]
  -[SBFluidSwitcherAnimationSettings slideUpSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureTopRowZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings homeScreenScaleForMode:]
  -[SBFluidSwitcherAnimationSettings switcherFadeOutSettings]
  -[SBFluidSwitcherAnimationSettings reduceMotionArcSwipeSettings]
  -[SBFluidSwitcherAnimationSettings pulseScale]
  -[SBFluidSwitcherAnimationSettings setSiriSwipeDismissZoomOutDelay:]
  -[SBFluidSwitcherAnimationSettings setAlertBarSwipeDismissZoomOutDelay:]
  -[SBFluidSwitcherAnimationSettings homeScreenBlurInSwitcherReduceMotionEnabled]
  -[SBFluidSwitcherAnimationSettings setFullScreenToPeekSecondPhaseAnimationDelay:]
  -[SBFluidSwitcherAnimationSettings setPerformTwoPhaseFullScreenToPeekTransition:]
  -[SBFluidSwitcherAnimationSettings continuityBannerSlideUpSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenOpacityInApplication]
  -[SBFluidSwitcherAnimationSettings setDosidoScale:]
  -[SBFluidSwitcherAnimationSettings setDosidoSettings:]
  -[SBFluidSwitcherAnimationSettings setContinuityBannerSlideUpSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureMediumWidgetZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings bannerUnfurlWallpaperAlphaDelay]
  -[SBFluidSwitcherAnimationSettings layoutSettings]
  -[SBFluidSwitcherAnimationSettings setBackdropBlurSettings:]
  -[SBFluidSwitcherAnimationSettings setCardFlyInAccelerationDipThreshold:]
  -[SBFluidSwitcherAnimationSettings reopenButtonScaleSettings]
  -[SBFluidSwitcherAnimationSettings setSwitcherZoomDownIconFadeOutSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureTopRowZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings setHomeScreenScaleInApplication:]
  -[SBFluidSwitcherAnimationSettings homeScreenScaleInSwitcher]
  -[SBFluidSwitcherAnimationSettings setHomeScreenOpacityInSwitcher:]
  -[SBFluidSwitcherAnimationSettings setReduceMotionAppToSwitcherSettings:]
  -[SBFluidSwitcherAnimationSettings setArcSwipeSettings:]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleVelocityYMaximum:]
  -[SBFluidSwitcherAnimationSettings cardFlyInSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureTopRowZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings appSwitcherTitleAndIconFadeInSlowDownFactor]
  -[SBFluidSwitcherAnimationSettings siriSwipeDismissClientAnimationsDelay]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityXPositionResponseMultiplier]
  -[SBFluidSwitcherAnimationSettings dosidoScale]
  -[SBFluidSwitcherAnimationSettings centerZoomScale]
  -[SBFluidSwitcherAnimationSettings setDockHurdlingIconZoomInitialVelocity:]
  -[SBFluidSwitcherAnimationSettings alertBarSwipeDismissZoomOutDelay]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleOvershootMinimumMultiplier]
  -[SBFluidSwitcherAnimationSettings setSiriSwipeDismissHapticDelay:]
  -[SBFluidSwitcherAnimationSettings homeGestureCenterRowZoomUpSettings]
  -[SBFluidSwitcherAnimationSettings resizeBlurDelay]
  -[SBFluidSwitcherAnimationSettings dosidoScaleDownSettings]
  -[SBFluidSwitcherAnimationSettings setReopenButtonFadeInDelay:]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityXMaximum:]
  -[SBFluidSwitcherAnimationSettings _setEntityPresentationDefaultValues]
  -[SBFluidSwitcherAnimationSettings disallowAcceleratedHomeButtonPressTransitionPercentage]
  -[SBFluidSwitcherAnimationSettings appSelectionSquishSettings]
  -[SBFluidSwitcherAnimationSettings setStatusBarToApexBounceAnimationDuration:]
  -[SBFluidSwitcherAnimationSettings setAlertCardifiedDismissalSettings:]
  -[SBFluidSwitcherAnimationSettings wallpaperScaleInApplication]
  -[SBFluidSwitcherAnimationSettings setSwitcherToHomeSettings:]
  -[SBFluidSwitcherAnimationSettings alertCardifiedDismissalSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureLargeWidgetZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings setEmptySwitcherDismissDelay:]
  -[SBFluidSwitcherAnimationSettings dosidoScaleUpSettings]
  -[SBFluidSwitcherAnimationSettings siriSwipeDismissalSettings]
  -[SBFluidSwitcherAnimationSettings alertBarSwipeDismissHapticDelay]
  -[SBFluidSwitcherAnimationSettings siriSwipeDismissZoomOutDelay]
  -[SBFluidSwitcherAnimationSettings setCardFlyInSettings:]
  -[SBFluidSwitcherAnimationSettings wallpaperScaleSettings]
  -[SBFluidSwitcherAnimationSettings centerZoomOpacitySettings]
  -[SBFluidSwitcherAnimationSettings fullScreenToPeekSecondPhaseAnimationSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureSmallWidgetZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings setWallpaperScaleInSwitcher:]
  -[SBFluidSwitcherAnimationSettings homeGestureLargeWidgetZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings setDimmingAlphaInSwitcher:]
  -[SBFluidSwitcherAnimationSettings setAppToSwitcherTransitionMinCardScaleFactor:]
  -[SBFluidSwitcherAnimationSettings dimmingAlphaInApplication]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityYMaximum]
  -[SBFluidSwitcherAnimationSettings bannerUnfurlSettings]
  -[SBFluidSwitcherAnimationSettings setHomeScreenOpacityInApplication:]
  -[SBFluidSwitcherAnimationSettings homeGestureBottomRowZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenOpacitySettings]
  -[SBFluidSwitcherAnimationSettings setDockHurdlingIconZoomDockToBackTiming:]
  -[SBFluidSwitcherAnimationSettings setSwitcherFadeOutSettings:]
  -[SBFluidSwitcherAnimationSettings setCrossblurDosidoLargeScale:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureMediumWidgetZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings setSiriSwipeDismissalSettings:]
  -[SBFluidSwitcherAnimationSettings setOpacitySettings:]
  -[SBFluidSwitcherAnimationSettings statusBarFadeInSettings]
  -[SBFluidSwitcherAnimationSettings setFullScreenToPeekFirstPhaseAnimationSettings:]
  -[SBFluidSwitcherAnimationSettings setHomeScreenScaleSettings:]
  -[SBFluidSwitcherAnimationSettings swapAppSidesShadowFadeOutDelay]
  -[SBFluidSwitcherAnimationSettings setBannerUnfurlWallpaperAlphaDelay:]
  -[SBFluidSwitcherAnimationSettings reduceMotionTriggerDelay]
  -[SBFluidSwitcherAnimationSettings emptySwitcherDismissDelay]
  -[SBFluidSwitcherAnimationSettings dosidoSettings]
  -[SBFluidSwitcherAnimationSettings setPulseScaleSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureEdgeRowZoomUpSettings]
  -[SBFluidSwitcherAnimationSettings cardFlyInAccelerationDipThreshold]
  -[SBFluidSwitcherAnimationSettings setMinimumTouchSamplesForAccelerationDip:]
  -[SBFluidSwitcherAnimationSettings homeScreenBlurProgressForMode:]
  -[SBFluidSwitcherAnimationSettings crossblurDosidoSmallScale]
  -[SBFluidSwitcherAnimationSettings setHomeScreenBlurInSwitcherReduceMotionEnabled:]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityYLayoutResponseMultiplier:]
  -[SBFluidSwitcherAnimationSettings homeScreenAlphaForMode:]
  -[SBFluidSwitcherAnimationSettings _setTopAffordanceTransitionDefaultValues]
  -[SBFluidSwitcherAnimationSettings setSlideOverToFullScreenOutgoingAppScaleBack:]
  -[SBFluidSwitcherAnimationSettings iconZoomFloatingDockFadeDelay]
  -[SBFluidSwitcherAnimationSettings setReduceMotionTriggerDelay:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureBottomRowZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings setCrossblurDosidoBlurRadius:]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityYMinimum:]
  -[SBFluidSwitcherAnimationSettings performTwoPhaseFullScreenToPeekTransition]
  -[SBFluidSwitcherAnimationSettings setHomeGestureBottomRowZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureTopRowZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleOvershootMaximumMultiplier]
  -[SBFluidSwitcherAnimationSettings swapAppSidesLayoutAnimationSettings]
  -[SBFluidSwitcherAnimationSettings setHomeScreenOpacitySettings:]
  -[SBFluidSwitcherAnimationSettings setCenterZoomScale:]
  -[SBFluidSwitcherAnimationSettings setSwapAppSidesShadowFadeOutDelay:]
  -[SBFluidSwitcherAnimationSettings setWallpaperScaleInApplication:]
  -[SBFluidSwitcherAnimationSettings switcherToHomeSettings]
  -[SBFluidSwitcherAnimationSettings crossblurDosidoLargeScale]
  -[SBFluidSwitcherAnimationSettings dosidoScaleUpDelay]
  -[SBFluidSwitcherAnimationSettings setFloatingDockIconFadeSettings:]
  -[SBFluidSwitcherAnimationSettings setAlertBarSwipeDismissalSettings:]
  -[SBFluidSwitcherAnimationSettings opacitySettings]
  -[SBFluidSwitcherAnimationSettings statusBarToApexBounceAnimationDuration]
  -[SBFluidSwitcherAnimationSettings setSwitcherToHomeOpacitySettings:]
  -[SBFluidSwitcherAnimationSettings setAlertCardifiedDismissClientAnimationsDelay:]
  -[SBFluidSwitcherAnimationSettings dockHurdlingIconZoomInitialVelocity]
  -[SBFluidSwitcherAnimationSettings setAlertBarSwipeDismissClientAnimationsDelay:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureSmallWidgetZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings wallpaperScaleForMode:]
  -[SBFluidSwitcherAnimationSettings setAlertCardifiedDismissHapticDelay:]
  -[SBFluidSwitcherAnimationSettings setCrossblurDosidoSmallScale:]
  -[SBFluidSwitcherAnimationSettings homeGestureLargeWidgetZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings alertCardifiedDismissClientAnimationsDelay]
  -[SBFluidSwitcherAnimationSettings setStatusBarFadeOutSettings:]
  -[SBFluidSwitcherAnimationSettings setIconZoomDownSettings:]
  -[SBFluidSwitcherAnimationSettings disableAsyncRenderingTransitionPercentage]
  -[SBFluidSwitcherAnimationSettings homeGestureLargeWidgetZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings homeGestureSmallWidgetZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings setDisableAsyncRenderingTransitionPercentage:]
  -[SBFluidSwitcherAnimationSettings setDisallowAcceleratedHomeButtonPressTransitionPercentage:]
  -[SBFluidSwitcherAnimationSettings setDosidoScaleUpDelay:]
  -[SBFluidSwitcherAnimationSettings setDosidoScaleDownSettings:]
  -[SBFluidSwitcherAnimationSettings switcherZoomDownIconFadeOutSettings]
  -[SBFluidSwitcherAnimationSettings crossfadeDosidoSettings]
  -[SBFluidSwitcherAnimationSettings gestureInitiatedAppToSwitcherSettings]
  -[SBFluidSwitcherAnimationSettings setSwapAppSidesLayoutAnimationSettings:]
  -[SBFluidSwitcherAnimationSettings setAlertBarSwipeDismissHapticDelay:]
  -[SBFluidSwitcherAnimationSettings statusBarFadeOutSettings]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityXMinimum:]
  -[SBFluidSwitcherAnimationSettings setSlideOverToFullScreenOutgoingFinalOpacity:]
  -[SBFluidSwitcherAnimationSettings setAppSelectionSquishSettings:]
  -[SBFluidSwitcherAnimationSettings setSlideUpSettings:]
  -[SBFluidSwitcherAnimationSettings setAlertCardifiedDismissZoomOutDelay:]
  -[SBFluidSwitcherAnimationSettings setStackedSwitcherTrackingSettings:]
  -[SBFluidSwitcherAnimationSettings setSlideOverSettings:]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleOvershootMaximumMultiplier:]
  -[SBFluidSwitcherAnimationSettings swapAppSidesOpacityAnimationSettings]
  -[SBFluidSwitcherAnimationSettings toggleAppSwitcherSettings]


SBDashBoardWallpaperViewProvider : NSObject <CSWallpaperViewProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardWallpaperViewProvider suspendWallpaperAnimationForReason:]
  -[SBDashBoardWallpaperViewProvider createCoverSheetWallpaperViewWithTransformOptions:]
  -[SBDashBoardWallpaperViewProvider createCoverSheetWallpaperView]
  -[SBDashBoardWallpaperViewProvider wallpaperClientWillRotateToInterfaceOrientation:duration:]
  -[SBDashBoardWallpaperViewProvider wallpaperClientWillAnimateRotationToInterfaceOrientation:duration:]
  -[SBDashBoardWallpaperViewProvider wallpaperClientDidRotateFromInterfaceOrientation:]


SBBiometricMonitorUI : NSObject <SBBiometricMonitorObserver>
 @property  <SBBiometricMonitorDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBiometricMonitorUI disable]
  -[SBBiometricMonitorUI setDataSource:]
  -[SBBiometricMonitorUI .cxx_destruct]
  -[SBBiometricMonitorUI dataSource]
  -[SBBiometricMonitorUI init]
  -[SBBiometricMonitorUI enable]
  -[SBBiometricMonitorUI _updateMatchState]
  -[SBBiometricMonitorUI _updatePresenceDetectState]
  -[SBBiometricMonitorUI _cancelDeferredUpdateMatchState]
  -[SBBiometricMonitorUI _doDeferredMatchStateUpdate]
  -[SBBiometricMonitorUI _doDeferredPresenceDetectUpdate]
  -[SBBiometricMonitorUI _deferredUpdateMatchState]
  -[SBBiometricMonitorUI _isDeferredMatchStateUpdatePending]
  -[SBBiometricMonitorUI _isDeferredPresenceDetectStateUpdatePending]
  -[SBBiometricMonitorUI _cancelDeferredUpdatePresenceDetectState]
  -[SBBiometricMonitorUI _deferredUpdatePresenceDetectState]
  -[SBBiometricMonitorUI biometricMonitorDataSourceMatchingStarted:]
  -[SBBiometricMonitorUI biometricMonitorDataSourceMatchingFailed:]
  -[SBBiometricMonitorUI biometricMonitorDataSourceMatchingSucceeded:]
  -[SBBiometricMonitorUI biometricMonitorDataSourceMatchingEnded:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePresenceDetectionStarted:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePresenceDetectionFailed:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePresenceDetectionSucceeded:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePresenceDetectionEnded:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePoseUpdated:]


SBHUDViewController : SBFTouchPassThroughViewController <UIViewControllerTransitioningDelegate, SBHUDViewControlling>
 @property  UIView *hudView
 @property  UIView *blockView
 @property  _UIBackdropView *backdropView
 @property  UIImageView *backdropMaskImageView
 @property  UIImage *image
 @property  BOOL showsProgress
 @property  double progress
 @property  double visibilityProgress
 @property  NSString *title
 @property  NSString *subtitle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHUDViewController progressIndicatorStep]

  // instance methods
  -[SBHUDViewController backdropView]
  -[SBHUDViewController viewWillLayoutSubviews]
  -[SBHUDViewController setTitle:]
  -[SBHUDViewController image]
  -[SBHUDViewController .cxx_destruct]
  -[SBHUDViewController viewDidLoad]
  -[SBHUDViewController setSubtitle:]
  -[SBHUDViewController progress]
  -[SBHUDViewController hudView]
  -[SBHUDViewController subtitle]
  -[SBHUDViewController title]
  -[SBHUDViewController showsProgress]
  -[SBHUDViewController setImage:]
  -[SBHUDViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBHUDViewController setShowsProgress:]
  -[SBHUDViewController setProgress:]
  -[SBHUDViewController _rotateToInterfaceOrientation:]
  -[SBHUDViewController _updateBlockView]
  -[SBHUDViewController _updateBackdropMask]
  -[SBHUDViewController displaysLabel]
  -[SBHUDViewController backdropMaskImageView]
  -[SBHUDViewController blockView]
  -[SBHUDViewController _blockColorForValue:]
  -[SBHUDViewController definesAnimatedDismissal]
  -[SBHUDViewController dismissAnimatedWithCompletion:]
  -[SBHUDViewController visibilityProgress]
  -[SBHUDViewController setVisibilityProgress:]


SBSceneResizeTransitionSwitcherModifier : SBTransitionSwitcherModifier
 @property  SBAppLayout *selectedAppLayout

  // instance methods
  -[SBSceneResizeTransitionSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSceneResizeTransitionSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBSceneResizeTransitionSwitcherModifier frameForIndex:]
  -[SBSceneResizeTransitionSwitcherModifier .cxx_destruct]
  -[SBSceneResizeTransitionSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBSceneResizeTransitionSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBSceneResizeTransitionSwitcherModifier cornerRadiiForIndex:]
  -[SBSceneResizeTransitionSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBSceneResizeTransitionSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBSceneResizeTransitionSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBSceneResizeTransitionSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBSceneResizeTransitionSwitcherModifier resizeGrabberLayoutAttributesForAppLayout:]
  -[SBSceneResizeTransitionSwitcherModifier handleSceneReadyEvent:]
  -[SBSceneResizeTransitionSwitcherModifier setSelectedAppLayout:]
  -[SBSceneResizeTransitionSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:minimumCardWithForDismissal:]
  -[SBSceneResizeTransitionSwitcherModifier selectedAppLayout]


SBAppSwitcherPageView : SBHitTestExtendedView <PTSettingsKeyObserver>
 @property  UIView *_overlayClippingView
 @property  SBAppSwitcherPageShadowView *_shadowView
 @property  UIView<SBAppSwitcherPageContentView> *view
 @property  UIView *overlay
 @property  long long shadowStyle
 @property  double shadowAlpha
 @property  double shadowOffset
 @property  double overlayAlpha
 @property  double contentAlpha
 @property  double dimmingAlpha
 @property  BOOL needsBackgroundWallpaperTreatment
 @property  double wallpaperOverlayAlpha
 @property  double lighteningAlpha
 @property  {UIRectCornerRadii=dddd} cornerRadii
 @property  unsigned long maskedCorners
 @property  long long orientation
 @property  unsigned long highlightType
 @property  BOOL shouldClipContentView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentClippingFrame
 @property  {CGSize=dd} overlayViewSize
 @property  {CGSize=dd} fullyPresentedSize
 @property  double switcherCardScale
 @property  BOOL shouldScaleOverlayToFillBounds
 @property  BOOL blocksTouches
 @property  BOOL active
 @property  BOOL visible
 @property  long long tintStyle
 @property  <SBAppSwitcherPageViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherPageView overlay]
  -[SBAppSwitcherPageView setOrientation:]
  -[SBAppSwitcherPageView contentAlpha]
  -[SBAppSwitcherPageView setLighteningAlpha:]
  -[SBAppSwitcherPageView wallpaperOverlayAlpha]
  -[SBAppSwitcherPageView setContentAlpha:]
  -[SBAppSwitcherPageView setShadowStyle:]
  -[SBAppSwitcherPageView _updateCornerRadius]
  -[SBAppSwitcherPageView _orderSubviews]
  -[SBAppSwitcherPageView _addContentView:]
  -[SBAppSwitcherPageView _updateTintViewAlpha]
  -[SBAppSwitcherPageView _updateWallpaperOverlayAlpha]
  -[SBAppSwitcherPageView dimmingAlpha]
  -[SBAppSwitcherPageView fullyPresentedSize]
  -[SBAppSwitcherPageView needsBackgroundWallpaperTreatment]
  -[SBAppSwitcherPageView traitCollectionDidChange:]
  -[SBAppSwitcherPageView setVisible:]
  -[SBAppSwitcherPageView lighteningAlpha]
  -[SBAppSwitcherPageView setShouldScaleOverlayToFillBounds:]
  -[SBAppSwitcherPageView shouldScaleOverlayToFillBounds]
  -[SBAppSwitcherPageView setDimmingAlpha:]
  -[SBAppSwitcherPageView isActive]
  -[SBAppSwitcherPageView setShadowAlpha:]
  -[SBAppSwitcherPageView setHighlightType:]
  -[SBAppSwitcherPageView setTintStyle:]
  -[SBAppSwitcherPageView .cxx_destruct]
  -[SBAppSwitcherPageView setOverlayAlpha:]
  -[SBAppSwitcherPageView _updateDimmingViewAlpha]
  -[SBAppSwitcherPageView tintStyle]
  -[SBAppSwitcherPageView setContentClippingFrame:]
  -[SBAppSwitcherPageView _overlayClippingView]
  -[SBAppSwitcherPageView highlightType]
  -[SBAppSwitcherPageView setNeedsBackgroundWallpaperTreatment:]
  -[SBAppSwitcherPageView shadowStyle]
  -[SBAppSwitcherPageView setOverlay:animated:]
  -[SBAppSwitcherPageView layoutSubviews]
  -[SBAppSwitcherPageView setDelegate:]
  -[SBAppSwitcherPageView setShadowOffset:]
  -[SBAppSwitcherPageView _updateShadowPresence]
  -[SBAppSwitcherPageView contentClippingFrame]
  -[SBAppSwitcherPageView cornerRadii]
  -[SBAppSwitcherPageView view]
  -[SBAppSwitcherPageView shadowAlpha]
  -[SBAppSwitcherPageView isVisible]
  -[SBAppSwitcherPageView setView:]
  -[SBAppSwitcherPageView setCornerRadii:]
  -[SBAppSwitcherPageView shouldClipContentView]
  -[SBAppSwitcherPageView setMaskedCorners:]
  -[SBAppSwitcherPageView switcherCardScale]
  -[SBAppSwitcherPageView orientation]
  -[SBAppSwitcherPageView setShouldClipContentView:]
  -[SBAppSwitcherPageView initWithFrame:]
  -[SBAppSwitcherPageView setWallpaperOverlayAlpha:]
  -[SBAppSwitcherPageView overlayAlpha]
  -[SBAppSwitcherPageView setActive:]
  -[SBAppSwitcherPageView delegate]
  -[SBAppSwitcherPageView _supportsAsymmetricalCornerRadii]
  -[SBAppSwitcherPageView settings:changedValueForKey:]
  -[SBAppSwitcherPageView overlayViewSize]
  -[SBAppSwitcherPageView blocksTouches]
  -[SBAppSwitcherPageView _shadowView]
  -[SBAppSwitcherPageView setSwitcherCardScale:]
  -[SBAppSwitcherPageView shadowOffset]
  -[SBAppSwitcherPageView invalidate]
  -[SBAppSwitcherPageView setBlocksTouches:]
  -[SBAppSwitcherPageView setFullyPresentedSize:]
  -[SBAppSwitcherPageView setView:animated:]
  -[SBAppSwitcherPageView maskedCorners]
  -[SBAppSwitcherPageView _layoutOverlayView]
  -[SBAppSwitcherPageView _updateEffectOverlayViews]
  -[SBAppSwitcherPageView setOverlay:]
  -[SBAppSwitcherPageView setOverlayViewSize:]


SBIconViewVisibilitySwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  SBFFluidBehaviorSettings *animationSettings
 @property  NSSet *excludedIconLocations
 @property  BOOL visible

  // instance methods
  -[SBIconViewVisibilitySwitcherEventResponse appLayout]
  -[SBIconViewVisibilitySwitcherEventResponse animationSettings]
  -[SBIconViewVisibilitySwitcherEventResponse excludedIconLocations]
  -[SBIconViewVisibilitySwitcherEventResponse .cxx_destruct]
  -[SBIconViewVisibilitySwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBIconViewVisibilitySwitcherEventResponse isVisible]
  -[SBIconViewVisibilitySwitcherEventResponse initWithAppLayout:visible:animationSettings:excludedIconLocations:]
  -[SBIconViewVisibilitySwitcherEventResponse type]


SBAlertItemTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAlertItemTestRecipe load]

  // instance methods
  -[SBAlertItemTestRecipe title]
  -[SBAlertItemTestRecipe handleVolumeIncrease]
  -[SBAlertItemTestRecipe handleVolumeDecrease]


SBPPTSearchGestureObserver : NSObject <SBSearchGestureObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPPTSearchGestureObserver searchGesture:changedPercentComplete:]
  -[SBPPTSearchGestureObserver searchGesture:startedShowing:]
  -[SBPPTSearchGestureObserver searchGesture:completedShowing:]


SBPPTFakeAppSuggestion : SBBestAppSuggestion
  // instance methods
  -[SBPPTFakeAppSuggestion uniqueIdentifier]
  -[SBPPTFakeAppSuggestion bundleIdentifier]
  -[SBPPTFakeAppSuggestion .cxx_destruct]
  -[SBPPTFakeAppSuggestion activityType]
  -[SBPPTFakeAppSuggestion originatingDeviceType]
  -[SBPPTFakeAppSuggestion originatingDeviceName]
  -[SBPPTFakeAppSuggestion isEqual:]
  -[SBPPTFakeAppSuggestion initWithBundleIdentifier:]
  -[SBPPTFakeAppSuggestion suggestedLocationName]


SBWorkspaceTransitionRequest : NSObject <SBUIAnimationControllerTransitionContextProvider, SBWorkspaceApplicationSceneTransitionContextDelegate, BSDescriptionProviding>
 @property  BOOL isMainWorkspaceTransitionRequest
 @property  NSSet *toApplicationSceneEntities
 @property  NSSet *fromApplicationSceneEntities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBWorkspace *workspace
 @property  FBSDisplayIdentity *displayIdentity
 @property  FBSDisplayConfiguration *displayConfiguration
 @property  BSProcessHandle *originatingProcess
 @property  NSString *eventLabel
 @property  NSUUID *uniqueID
 @property  BOOL finalized
 @property  SBWorkspaceApplicationSceneTransitionContext *applicationContext
 @property  SBWorkspaceTransientOverlayTransitionContext *transientOverlayContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWorkspaceTransitionRequest compactDescriptionBuilder]
  -[SBWorkspaceTransitionRequest fromApplicationSceneEntities]
  -[SBWorkspaceTransitionRequest applicationContext]
  -[SBWorkspaceTransitionRequest layoutStateForApplicationTransitionContext:]
  -[SBWorkspaceTransitionRequest applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBWorkspaceTransitionRequest setApplicationContext:]
  -[SBWorkspaceTransitionRequest toApplicationSceneEntities]
  -[SBWorkspaceTransitionRequest displayConfiguration]
  -[SBWorkspaceTransitionRequest modifyApplicationContext:]
  -[SBWorkspaceTransitionRequest uniqueID]
  -[SBWorkspaceTransitionRequest isFinalized]
  -[SBWorkspaceTransitionRequest finalize]
  -[SBWorkspaceTransitionRequest displayIdentity]
  -[SBWorkspaceTransitionRequest .cxx_destruct]
  -[SBWorkspaceTransitionRequest setEventLabel:]
  -[SBWorkspaceTransitionRequest workspace]
  -[SBWorkspaceTransitionRequest _initWithWorkspace:displayConfiguration:]
  -[SBWorkspaceTransitionRequest succinctDescriptionBuilder]
  -[SBWorkspaceTransitionRequest descriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceTransitionRequest modifyTransientOverlayContext:]
  -[SBWorkspaceTransitionRequest setEventLabelWithFormat:]
  -[SBWorkspaceTransitionRequest init]
  -[SBWorkspaceTransitionRequest eventLabel]
  -[SBWorkspaceTransitionRequest setOriginatingProcess:]
  -[SBWorkspaceTransitionRequest descriptionWithMultilinePrefix:]
  -[SBWorkspaceTransitionRequest succinctDescription]
  -[SBWorkspaceTransitionRequest setTransientOverlayContext:]
  -[SBWorkspaceTransitionRequest previousLayoutStateForApplicationTransitionContext:]
  -[SBWorkspaceTransitionRequest originatingProcess]
  -[SBWorkspaceTransitionRequest transientOverlayContext]
  -[SBWorkspaceTransitionRequest declineWithReason:]
  -[SBWorkspaceTransitionRequest isMainWorkspaceTransitionRequest]


SBHomeConfigurationMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeConfigurationMetric handleEvent:withContext:]
  -[SBHomeConfigurationMetric .cxx_destruct]
  -[SBHomeConfigurationMetric init]


SBLockHardwareButtonActions : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonGestureParametersObserver>
 @property  SBSiriHardwareButtonInteraction *siriButtonInteraction
 @property  SBAccessibilityHardwareButtonInteraction *accessibilityButtonInteraction
 @property  SBSleepWakeHardwareButtonInteraction *sleepWakeButtonInteraction
 @property  <SBHardwareButtonInteraction><SBHardwareButtonGestureParametersProvider> *proximitySensorButtonInteraction
 @property  BOOL isButtonDown
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockHardwareButtonActions performLongPressCancelledActions]
  -[SBLockHardwareButtonActions _usesLockButtonForSecureIntent]
  -[SBLockHardwareButtonActions isButtonDown]
  -[SBLockHardwareButtonActions performSecondButtonDownActions]
  -[SBLockHardwareButtonActions accessibilityButtonInteraction]
  -[SBLockHardwareButtonActions performSOSGestureEndedActions]
  -[SBLockHardwareButtonActions proximitySensorButtonInteraction]
  -[SBLockHardwareButtonActions disallowsSinglePressForReason:]
  -[SBLockHardwareButtonActions performFinalButtonUpActions]
  -[SBLockHardwareButtonActions performKeyboardShortcut]
  -[SBLockHardwareButtonActions performSinglePressAction]
  -[SBLockHardwareButtonActions performTriplePressActions]
  -[SBLockHardwareButtonActions _performSOSDidTriggerActions]
  -[SBLockHardwareButtonActions _registeredLockButtonAppsDidChange:]
  -[SBLockHardwareButtonActions .cxx_destruct]
  -[SBLockHardwareButtonActions setProximitySensorButtonInteraction:]
  -[SBLockHardwareButtonActions performDoublePressActions]
  -[SBLockHardwareButtonActions provider:didUpdateButtonGestureParameters:]
  -[SBLockHardwareButtonActions performButtonUpPreActions]
  -[SBLockHardwareButtonActions shouldBeginDoublePressGestureWhileObjectWithinProximity]
  -[SBLockHardwareButtonActions performInitialButtonDownActions]
  -[SBLockHardwareButtonActions initWithHomeButtonType:proximitySensorManager:]
  -[SBLockHardwareButtonActions _foregroundAppRegisteredForLockButtonEvents]
  -[SBLockHardwareButtonActions _usesLockButtonForSiri]
  -[SBLockHardwareButtonActions setSleepWakeButtonInteraction:]
  -[SBLockHardwareButtonActions disallowsLongPressForReason:]
  -[SBLockHardwareButtonActions sleepWakeButtonInteraction]
  -[SBLockHardwareButtonActions setAccessibilityButtonInteraction:]
  -[SBLockHardwareButtonActions _sendButtonUpToRegisteredApp]
  -[SBLockHardwareButtonActions _sendButtonEventToApp:down:]
  -[SBLockHardwareButtonActions performSOSActionsWithUUID:triggerMechanism:completion:]
  -[SBLockHardwareButtonActions _showPowerDownTransientOverlayOnForceReset]
  -[SBLockHardwareButtonActions disallowsTriplePressForReason:]
  -[SBLockHardwareButtonActions hardwareButtonGestureParameters]
  -[SBLockHardwareButtonActions reverseFadeOutIfNeeded]
  -[SBLockHardwareButtonActions performForceResetSequenceBeganActions]
  -[SBLockHardwareButtonActions disallowsDoublePressForReason:]
  -[SBLockHardwareButtonActions performSinglePressDidFailActions]
  -[SBLockHardwareButtonActions _isSOSActive]
  -[SBLockHardwareButtonActions setSiriButtonInteraction:]
  -[SBLockHardwareButtonActions performLongPressActions]
  -[SBLockHardwareButtonActions performSOSGestureBeganActions]
  -[SBLockHardwareButtonActions siriButtonInteraction]
  -[SBLockHardwareButtonActions performInitialButtonUpActions]
  -[SBLockHardwareButtonActions _shouldWaitForDoublePress]
  -[SBLockHardwareButtonActions _sendButtonDownToRegisteredApp]


SBUIPasscodeViewWithLockScreenStyle : UIView
 @property  UIView<SBUIPasscodeLockView> *passcodeView

  // instance methods
  -[SBUIPasscodeViewWithLockScreenStyle setBlurEnabled:]
  -[SBUIPasscodeViewWithLockScreenStyle .cxx_destruct]
  -[SBUIPasscodeViewWithLockScreenStyle layoutSubviews]
  -[SBUIPasscodeViewWithLockScreenStyle passcodeView]
  -[SBUIPasscodeViewWithLockScreenStyle initWithFrame:includeBlur:passcodeViewGenerator:]


SBVolumeHardwareButton : NSObject <UIGestureRecognizerDelegate, SBPressPrecedenceArbiter>
 @property  SBPressSequenceObserver *volumeIncreaseSequenceObserver
 @property  SBPressSequenceObserver *volumeDecreaseSequenceObserver
 @property  SBVolumeHardwareButtonActions *buttonActions
 @property  NSHashTable *volumePressBandits
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBVolumeHardwareButton _aggdLogVolumeIncreaseButtonDown:]
  -[SBVolumeHardwareButton volumePressBandits]
  -[SBVolumeHardwareButton gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBVolumeHardwareButton volumeDecreaseSequenceObserver]
  -[SBVolumeHardwareButton gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBVolumeHardwareButton volumeDecreasePress:]
  -[SBVolumeHardwareButton .cxx_destruct]
  -[SBVolumeHardwareButton cancelVolumePress]
  -[SBVolumeHardwareButton _logVolumeButtonWithObserver:down:]
  -[SBVolumeHardwareButton _aggdLogVolumeDecreaseButtonDown:]
  -[SBVolumeHardwareButton preemptablePressGestureRecognizers]
  -[SBVolumeHardwareButton _createGestureRecognizers]
  -[SBVolumeHardwareButton gestureRecognizerShouldBegin:]
  -[SBVolumeHardwareButton initWithScreenshotGestureRecognizer:shutdownGestureRecognizer:homeButtonType:]
  -[SBVolumeHardwareButton addVolumePressBandit:]
  -[SBVolumeHardwareButton setVolumePressBandits:]
  -[SBVolumeHardwareButton buttonActions]
  -[SBVolumeHardwareButton removeVolumePressBandit:]
  -[SBVolumeHardwareButton volumeIncreaseSequenceObserver]
  -[SBVolumeHardwareButton volumeIncreasePress:]


SBHomeGestureToHomeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBHomeGestureToHomeSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeGestureToHomeSwitcherModifier transactionCompletionOptions]
  -[SBHomeGestureToHomeSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeGestureToHomeSwitcherModifier scaleForIndex:]
  -[SBHomeGestureToHomeSwitcherModifier frameForIndex:]
  -[SBHomeGestureToHomeSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeGestureToHomeSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureToHomeSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeGestureToHomeSwitcherModifier wallpaperStyle]
  -[SBHomeGestureToHomeSwitcherModifier cornerRadiiForIndex:]
  -[SBHomeGestureToHomeSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureToHomeSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeGestureToHomeSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBHomeGestureToHomeSwitcherModifier initWithTransitionID:showingOrAnimatingCardsForFlyIn:]


SBRingerPillView : UIView
 @property  MTMaterialShadowView *materialView
 @property  MTVisualStylingProvider *stylingProvider
 @property  BSUICAPackageView *glyphView
 @property  UILabel *silentModeLabel
 @property  UILabel *ringerLabel
 @property  UILabel *onLabel
 @property  UILabel *offLabel
 @property  SBRingerVolumeSliderView *slider
 @property  UIColor *glyphTintColor
 @property  NSArray *glyphTintBackgroundLayers
 @property  NSArray *glyphTintShapeLayers
 @property  unsigned long state
 @property  float sliderValue

  // instance methods
  -[SBRingerPillView stylingProvider]
  -[SBRingerPillView slider]
  -[SBRingerPillView glyphTintColor]
  -[SBRingerPillView setGlyphTintColor:]
  -[SBRingerPillView setMaterialView:]
  -[SBRingerPillView traitCollectionDidChange:]
  -[SBRingerPillView setStylingProvider:]
  -[SBRingerPillView .cxx_destruct]
  -[SBRingerPillView layoutSubviews]
  -[SBRingerPillView glyphView]
  -[SBRingerPillView setGlyphView:]
  -[SBRingerPillView materialView]
  -[SBRingerPillView setSlider:]
  -[SBRingerPillView setState:]
  -[SBRingerPillView init]
  -[SBRingerPillView sizeThatFits:]
  -[SBRingerPillView state]
  -[SBRingerPillView onLabel]
  -[SBRingerPillView sliderValue]
  -[SBRingerPillView setSliderValue:]
  -[SBRingerPillView _setGlyphTintColor:animationDuration:]
  -[SBRingerPillView _visibleViewsForState:]
  -[SBRingerPillView _updateGlyphWithStaticColor:animationSettings:]
  -[SBRingerPillView silentModeLabel]
  -[SBRingerPillView setSilentModeLabel:]
  -[SBRingerPillView ringerLabel]
  -[SBRingerPillView setRingerLabel:]
  -[SBRingerPillView setOnLabel:]
  -[SBRingerPillView offLabel]
  -[SBRingerPillView setOffLabel:]
  -[SBRingerPillView glyphTintBackgroundLayers]
  -[SBRingerPillView setGlyphTintBackgroundLayers:]
  -[SBRingerPillView glyphTintShapeLayers]
  -[SBRingerPillView setGlyphTintShapeLayers:]


SBPearlUnlockTrigger : SBMesaUnlockTrigger
  // instance methods
  -[SBPearlUnlockTrigger bioUnlock]


SBInCallBannerSceneBackgroundView : UIView <SBApplicationSceneBackgroundView>
 @property  double wallpaperAlpha
 @property  long long wallpaperStyle
 @property  BOOL fullscreen
 @property  BOOL needsClassicModeBackground
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallBannerSceneBackgroundView isFullscreen]
  -[SBInCallBannerSceneBackgroundView setWallpaperStyle:]
  -[SBInCallBannerSceneBackgroundView setFullscreen:]
  -[SBInCallBannerSceneBackgroundView .cxx_destruct]
  -[SBInCallBannerSceneBackgroundView layoutSubviews]
  -[SBInCallBannerSceneBackgroundView wallpaperStyle]
  -[SBInCallBannerSceneBackgroundView initWithFrame:]
  -[SBInCallBannerSceneBackgroundView _updateBackdropView]
  -[SBInCallBannerSceneBackgroundView initWithFrame:wallpaperVariant:transformOptions:]
  -[SBInCallBannerSceneBackgroundView setWallpaperAlpha:]
  -[SBInCallBannerSceneBackgroundView wallpaperAlpha]


SBPressCollector : NSObject
 @property  <SBPressCollectorDelegate> *delegate
 @property  double maxPressDownDuration
 @property  double maxPressUpDuration

  // class methods
  +[SBPressCollector currentTimeStamp]

  // instance methods
  -[SBPressCollector _reset]
  -[SBPressCollector .cxx_destruct]
  -[SBPressCollector setDelegate:]
  -[SBPressCollector init]
  -[SBPressCollector delegate]
  -[SBPressCollector _end]
  -[SBPressCollector registerPressDownWithTimeStamp:]
  -[SBPressCollector registerPressUpWithTimeStamp:]
  -[SBPressCollector _resetTimersIfNecessary]
  -[SBPressCollector _handlePressUpWithTimeStamp:]
  -[SBPressCollector _handlePressDownWithTimeStamp:]
  -[SBPressCollector maxPressUpDuration]
  -[SBPressCollector maxPressDownDuration]
  -[SBPressCollector _fireEndTimerWithDelay:isButtonDown:]
  -[SBPressCollector endCurrentSequence]
  -[SBPressCollector setMaxPressDownDuration:]
  -[SBPressCollector setMaxPressUpDuration:]


SBApplication : NSObject <XBApplicationSnapshotManifestDelegate, SBHApplication, UISApplicationStateServiceDataSource, BSDescriptionProviding>
 @property  BOOL wantsLegacyFullscreenInterfaceOrientationBehaviors
 @property  BOOL isMedusaCapable
 @property  BOOL isClassic
 @property  BOOL classicAppZoomedIn
 @property  BOOL classicAppRequiresHiDPI
 @property  BOOL classicAppZoomedInOrRequiresHiDPI
 @property  BOOL classicAppPhoneOnPadPrefersLandscape
 @property  BOOL classicAppScaled
 @property  BOOL classicAppFullScreen
 @property  BOOL classicAppWithOwnSafeArea
 @property  BOOL classicAppPhoneAppRunningOnPad
 @property  BOOL classicAppNonFullScreenWithHomeAffordance
 @property  BOOL ignoreScalingOfJailedStatusBar
 @property  BOOL classicAppScaledWithAspectRatioCloseEnoughToBeTreatedAsFullScreen
 @property  BOOL classicAppWithRoundedCorners
 @property  BOOL insetForHomeAffordance
 @property  long long classicMode
 @property  long long defaultClassicMode
 @property  BOOL classicAppZoomedIn
 @property  BOOL classicAppPhoneOnPadPrefersLandscape
 @property  BOOL isSpringBoard
 @property  BOOL isSetup
 @property  BOOL isMobilePhone
 @property  BOOL isFaceTime
 @property  BOOL isPaperBoard
 @property  BOOL isSpotlight
 @property  SBApplicationProcessState *internalProcessState
 @property  SBApplicationInfo *info
 @property  SBApplicationProcessState *processState
 @property  FBProcessExitContext *lastExitContext
 @property  unsigned long failedLaunchCount
 @property  NSString *bundleIdentifier
 @property  NSString *iconIdentifier
 @property  NSString *displayName
 @property  BOOL internalApplication
 @property  BOOL systemApplication
 @property  SBApplicationWakeScheduler *legacyVOIPPeriodicWakeScheduler
 @property  BOOL terminationAssertionHeld
 @property  BOOL terminationAssertionInEffect
 @property  BOOL uninstallSupported
 @property  BOOL uninstalled
 @property  NSArray *dynamicApplicationShortcutItems
 @property  BOOL restoringIcon
 @property  BOOL showsProgress
 @property  BOOL hasShownDataPlanAlertSinceLock
 @property  BOOL wantsAutoLaunchForVOIP
 @property  unsigned long failedAutoLaunchCountForVOIP
 @property  BOOL playingAudio
 @property  BOOL nowRecordingApplication
 @property  BOOL connectedToExternalAccessory
 @property  BOOL usesEdgeNetwork
 @property  BOOL usesWiFiNetwork
 @property  int dataUsage
 @property  BOOL suppressesControlCenter
 @property  BOOL suppressesCoverSheetGesture
 @property  BOOL supportsMultitaskingShelf
 @property  NSURL *bundleURL
 @property  NSString *vendorName
 @property  NSArray *tags
 @property  BOOL hasHiddenTag
 @property  BOOL appleApplication
 @property  BOOL appClip
 @property  id badgeValue
 @property  NSString *uniqueIdentifier
 @property  NSString *configurationStorageIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL usesBackgroundNetwork
 @property  NSDate *nextWakeDate

  // class methods
  +[SBApplication _defaultLaunchingSizeForDisplayConfiguration:classicMode:]
  +[SBApplication restrictedClassicModeDisplayConfigurationForDisplayConfiguration:classicMode:]
  +[SBApplication _canonicalScreenTypeForClassicMode:]
  +[SBApplication _niceScreenTypeForClassicType:matchingAValidDisplayZoomModeOnScreenType:]
  +[SBApplication _classicModeForLaunchingSize:]
  +[SBApplication _appStateKeysToPrefetch]
  +[SBApplication _deviceSafeAreaInsets]
  +[SBApplication snapshotSortDescriptorForNames:]
  +[SBApplication snapshotSortDescriptorForScheme:]
  +[SBApplication snapshotSortDescriptorForInterfaceOrientationMask:]
  +[SBApplication snapshotSortDescriptorForStatusBarStateMask:]
  +[SBApplication snapshotSortDescriptorForImageScale:]
  +[SBApplication snapshotSortDescriptorForContentTypeMask]
  +[SBApplication snapshotSortDescriptorForRequiredOSVersion:]
  +[SBApplication snapshotSortDescriptorPreferringProtectedContent]
  +[SBApplication snapshotSortDescriptorForCreationDate]
  +[SBApplication snapshotSortDescriptorForUIUserInterfaceStyle:]
  +[SBApplication snapshotSortDescriptorsForNames:scheme:imageScale:userInterfaceStyle:statusBarStateMask:interfaceOrientationMask:requiredOSVersion:]
  +[SBApplication snapshotSortDescriptorForLaunchInterfaceIdentifier:]
  +[SBApplication snapshotSortDescriptorForCustomSafeAreaInsets:]
  +[SBApplication _markAllManifestsForReingestion]
  +[SBApplication _reingestStaticDefaultImagesForAllApps]

  // instance methods
  -[SBApplication isInternalApplication]
  -[SBApplication possibleUserTapDidCancel]
  -[SBApplication isSetup]
  -[SBApplication _lockStateDidChange:]
  -[SBApplication isInsetForHomeAffordance]
  -[SBApplication initWithApplicationInfo:]
  -[SBApplication uninstall]
  -[SBApplication iconCompleteUninstall:]
  -[SBApplication isSystemApplication]
  -[SBApplication supportedGridSizeClassesForIcon:]
  -[SBApplication dynamicApplicationShortcutItems]
  -[SBApplication canGenerateIconsInBackgroundForIcon:]
  -[SBApplication lastExitContext]
  -[SBApplication _internalProcessState]
  -[SBApplication _snapshotManifest]
  -[SBApplication vendorName]
  -[SBApplication icon:launchFromLocation:context:]
  -[SBApplication _isNewlyInstalled]
  -[SBApplication displayName]
  -[SBApplication setNowRecordingApplication:]
  -[SBApplication icon:displayNameForLocation:]
  -[SBApplication possibleUserTapBeganWithAbsoluteTime:andContinuousTime:]
  -[SBApplication _didExitWithContext:]
  -[SBApplication setBadgeValue:]
  -[SBApplication _snapshotsWithImageName:sceneHandle:launchingSize:launchingScale:contentTypeMask:statusBarStateMask:launchingOrientation:contentOverridesContext:userInterfaceStyle:displayEdgeInfo:]
  -[SBApplication statusBarStyleOverridesAssertionsByStyleOverride]
  -[SBApplication classicAppWithOwnSafeArea]
  -[SBApplication uniqueIdentifier]
  -[SBApplication hasShownDataPlanAlertSinceLock]
  -[SBApplication classicAppScaledWithAspectRatioCloseEnoughToBeTreatedAsFullScreen]
  -[SBApplication icon:unmaskedImageWithInfo:]
  -[SBApplication _setClassicAppPhoneOnPadPrefersLandscape:]
  -[SBApplication usesWiFiNetwork]
  -[SBApplication isConnectedToExternalAccessory]
  -[SBApplication bundleIdentifier]
  -[SBApplication hasHiddenTag]
  -[SBApplication badgeValue]
  -[SBApplication purgeCaches]
  -[SBApplication processState]
  -[SBApplication icon:imageWithInfo:]
  -[SBApplication _defaultClassicMode]
  -[SBApplication _setInternalProcessState:]
  -[SBApplication priorityForIcon:]
  -[SBApplication createDownscaledVariantForSnapshot:sceneHandle:scaleFactor:didSaveImage:]
  -[SBApplication _cancelPreheatForUserLaunchIfNecessary]
  -[SBApplication includesStatusBarInClassicJailForInterfaceOrientation:]
  -[SBApplication isAppClip]
  -[SBApplication releaseStatusBarStyleOverridesAssertion:]
  -[SBApplication suppressesControlCenter]
  -[SBApplication _screenTypeForClassicMode:]
  -[SBApplication snapshotSizeAdjustedForLegacyStatusBarBasedOnSize:interfaceOrientation:contentFrame:]
  -[SBApplication _isRecentlyUpdated]
  -[SBApplication setInfo:]
  -[SBApplication _isNewEnoughToKnowAbout2020Phones]
  -[SBApplication classicAppZoomedIn]
  -[SBApplication isAnyTerminationAssertionHeld]
  -[SBApplication _noteIconDataSourceDidChange]
  -[SBApplication snapshotFrameForClassicInsideBounds:forOrientation:scaleFactor:inReferenceSpace:]
  -[SBApplication isMobilePhone]
  -[SBApplication isTimedOutForIcon:]
  -[SBApplication usesEdgeNetwork]
  -[SBApplication _processDidLaunch:]
  -[SBApplication .cxx_destruct]
  -[SBApplication _setCurrentClassicMode:]
  -[SBApplication isSpringBoard]
  -[SBApplication setUsesEdgeNetwork:]
  -[SBApplication classicAppPhoneOnPadPrefersLandscape]
  -[SBApplication _isNewEnoughToKnowAboutRoundPads]
  -[SBApplication isSpotlight]
  -[SBApplication dataUsage]
  -[SBApplication isSameExecutableAsApplication:]
  -[SBApplication labelAccessoryTypeForIcon:]
  -[SBApplication supportsMultitaskingShelf]
  -[SBApplication classicAppZoomedInOrRequiresHiDPI]
  -[SBApplication _initializationContext]
  -[SBApplication setNextWakeDate:]
  -[SBApplication flushSnapshotsForSceneID:]
  -[SBApplication iconCanTruncateLabel:]
  -[SBApplication classicAppNonFullScreenWithHomeAffordance]
  -[SBApplication info]
  -[SBApplication succinctDescriptionBuilder]
  -[SBApplication failedLaunchCount]
  -[SBApplication _purgeStaticDefaultImagesInSnapshotManifest]
  -[SBApplication deleteSnapshotForContext:]
  -[SBApplication _classicModeFromSupportedTypes]
  -[SBApplication isFaceTime]
  -[SBApplication iconSupportsUninstall:]
  -[SBApplication setUninstalled:]
  -[SBApplication _updateProcess:withState:]
  -[SBApplication bundleURL]
  -[SBApplication bestSnapshotWithImageName:sceneHandle:variantID:scale:size:contentTypeMask:statusBarStateMask:launchingOrientation:contentOverridesContext:userInterfaceStyle:displayEdgeInfo:]
  -[SBApplication isWebApplication]
  -[SBApplication _purgeAndResetStaticDefaultImagesInSnapshotManifest]
  -[SBApplication _defaultPNGNameFromSuspensionSettingsWithExpiration:sceneID:]
  -[SBApplication descriptionBuilderWithMultilinePrefix:]
  -[SBApplication wantsLegacyFullscreenInterfaceOrientationBehaviors]
  -[SBApplication _clearSceneTitles]
  -[SBApplication setHasShownDataPlanAlertSinceLock:]
  -[SBApplication _classicModeForHostingExtensionContainedInApplication:]
  -[SBApplication _useSupportedTypesForSplashBoard]
  -[SBApplication _isClassicViaOverride]
  -[SBApplication restrictedClassicModeDisplayConfigurationForDisplayConfiguration:]
  -[SBApplication hasDisplayedLaunchAlertForType:]
  -[SBApplication isAppleApplication]
  -[SBApplication _setApplicationRestorationCheckState:]
  -[SBApplication defaultLaunchingSizeForDisplayConfiguration:]
  -[SBApplication descriptionWithMultilinePrefix:]
  -[SBApplication iconIdentifier]
  -[SBApplication _invalidateStatusBarStyleOverridesAssertions]
  -[SBApplication _dataStore]
  -[SBApplication _setDefaultClassicModeOverride:]
  -[SBApplication _processWillLaunch:]
  -[SBApplication formattedAccessoryStringForIcon:]
  -[SBApplication isAnyTerminationAssertionInEffect]
  -[SBApplication _bypassesClassicMode]
  -[SBApplication setRestoringIcon:]
  -[SBApplication supportsModernRotation]
  -[SBApplication isClassic]
  -[SBApplication flushSnapshotsForAllScenesIncludingAllLegacyImages]
  -[SBApplication deleteAllSnapshots]
  -[SBApplication succinctDescription]
  -[SBApplication _setClassicAppZoomedIn:]
  -[SBApplication classicAppFullScreen]
  -[SBApplication classicAppPhoneAppRunningOnPad]
  -[SBApplication classicAppRequiresHiDPI]
  -[SBApplication _calculateSupportedTypesForSplashBoard]
  -[SBApplication setHasDisplayedLaunchAlert:forType:]
  -[SBApplication accessoryTypeForIcon:]
  -[SBApplication _classicAppScaledPadOnPad]
  -[SBApplication isLaunchDisallowedForObscuredReason]
  -[SBApplication isPlayingAudio]
  -[SBApplication _normalizeSnapshotName:]
  -[SBApplication nextWakeDate]
  -[SBApplication _ingestDefaultPNGsInManifest:withLaunchImageBaseName:]
  -[SBApplication isUninstalled]
  -[SBApplication _exposeRealDisplayCornerRadii]
  -[SBApplication takeStatusBarStyleOverridesAssertion:]
  -[SBApplication isMedusaCapable]
  -[SBApplication saveSuspendSnapshot:forSceneHandle:]
  -[SBApplication _resetDataUsage]
  -[SBApplication _canLaunchInClassicMode:]
  -[SBApplication setConnectedToExternalAccessory:]
  -[SBApplication badgeNumberOrStringForIcon:]
  -[SBApplication failedAutoLaunchCountForVOIP]
  -[SBApplication saveSnapshotForSceneHandle:context:completion:]
  -[SBApplication _setNewlyInstalled:]
  -[SBApplication iconAllowsLaunch:]
  -[SBApplication _recalculateApplicationSupportedTypes]
  -[SBApplication _setDataUsage:]
  -[SBApplication canShowSystemVolumeHUDForCategory:forSceneIdentifier:]
  -[SBApplication wantsAutoLaunchForVOIP]
  -[SBApplication setUsesBackgroundNetwork:]
  -[SBApplication classicAppScaled]
  -[SBApplication showsProgress]
  -[SBApplication imageForSnapshot:interfaceOrientation:]
  -[SBApplication _classicMode]
  -[SBApplication __noteSnapshotDidUpdate:forSceneIdentifier:]
  -[SBApplication suppressesCoverSheetGesture]
  -[SBApplication _preferredImagePathInBundle:baseResourceName:ofType:forMainScene:size:scale:outScale:]
  -[SBApplication tagsForIcon:]
  -[SBApplication isUninstallSupported]
  -[SBApplication _reingestStaticDefaultImagesInSnapshotManifest]
  -[SBApplication markNewlyInstalled]
  -[SBApplication setAudioCategoriesThatDisableSystemVolumeHUD:forSceneIdentifier:]
  -[SBApplication _preferredImagePathByScaleInBundle:resourceName:ofType:scale:outScale:]
  -[SBApplication _setLaunchPrevented:]
  -[SBApplication _updateRecentlyUpdatedTimer]
  -[SBApplication _didSuspend]
  -[SBApplication setDynamicApplicationShortcutItems:]
  -[SBApplication _xbactivity_saveSnapshotForSceneHandle:context:completion:]
  -[SBApplication setShowsProgress:]
  -[SBApplication _defaultPNGNameUsingFallbacksWithSceneID:contentOverridesContext:]
  -[SBApplication markRecentlyUpdated]
  -[SBApplication ignoreScalingOfJailedStatusBar]
  -[SBApplication manifest:didPurgeProtectedContentSnapshotsWithGroupIdentifiers:]
  -[SBApplication setWantsAutoLaunchForVOIP:]
  -[SBApplication _classicAppScaledPhoneOnPad]
  -[SBApplication setUsesWiFiNetwork:]
  -[SBApplication _noteSnapshotDidUpdateForSceneIdentifier:]
  -[SBApplication _applicationRestorationCheckState]
  -[SBApplication _defaultLaunchImageBaseName]
  -[SBApplication dealloc]
  -[SBApplication usesBackgroundNetwork]
  -[SBApplication iconDisallowsLaunchForObscuredReason:]
  -[SBApplication refreshLaunchImagesInSnapshotManifestIfNeeded]
  -[SBApplication legacyVOIPPeriodicWakeScheduler]
  -[SBApplication _resetLaunchImageIngestionStatus]
  -[SBApplication _classicModeForHostingExtensionContainedInThisApplicationInUnknownHostingHierarchy]
  -[SBApplication isRestoringIcon]
  -[SBApplication _noteSnapshotDidUpdateForSceneIdentifiers:]
  -[SBApplication mostRecentSceneSnapshotsForSceneHandle:scale:launchingOrientation:]
  -[SBApplication _baseSceneIdentifier]
  -[SBApplication copyWithZone:]
  -[SBApplication shouldReceiveSourceApplicationContextFromOriginatingApplication:]
  -[SBApplication classicAppWithRoundedCorners]
  -[SBApplication _supportedTypeForClassicModeNone]
  -[SBApplication _classicAppScaledOnPhone]
  -[SBApplication isNowRecordingApplication]
  -[SBApplication _sceneIdentifierForStoredPersistenceIdentifier:]
  -[SBApplication preHeatForUserLaunchIfNecessaryWithAbsoluteTime:andContinuousTime:]
  -[SBApplication _ingestInfoPlistImagesInManifest:]
  -[SBApplication _setRecentlyUpdated:]
  -[SBApplication setPlayingAudio:]
  -[SBApplication _calculateSupportedTypesLazilyIfNecessary]
  -[SBApplication _noteProcess:didChangeToState:]
  -[SBApplication _supportsApplicationType:]
  -[SBApplication isCacheCleaningTerminationAssertionHeld]
  -[SBApplication iTunesCategoriesOrderedByRelevancyForIcon:]
  -[SBApplication cachedImageForSnapshot:interfaceOrientation:]
  -[SBApplication flushSnapshotsForAllScenes]
  -[SBApplication setFailedAutoLaunchCountForVOIP:]
  -[SBApplication folderFallbackTitleForIcon:]
  -[SBApplication icon:displayNameForObscuredDisabledLaunchForLocation:]
  -[SBApplication tags]
  -[SBApplication iconCanTightenLabel:]
  -[SBApplication launchFromIcon:location:context:]
  -[SBApplication folderTitleOptionsForIcon:]
  -[SBApplication isPaperBoard]


SBTelephonyManager : NSObject <STTelephonyStateObserver>
 @property  TUCall *incomingCall
 @property  TUCall *activeCall
 @property  TUCall *heldCall
 @property  TUCall *outgoingCall
 @property  CoreTelephonyClient *coreTelephonyClient
 @property  STTelephonyStateProvider *telephonyStateProvider
 @property  STWifiStatusDomain *wifiDomain
 @property  SBBluetoothController *bluetoothController
 @property  NSString *cachedSlot1CountryCode
 @property  NSString *cachedSlot2CountryCode
 @property  NSString *cachedSlot1SIMStatus
 @property  NSString *cachedSlot2SIMStatus
 @property  unsigned long dataConnectionAvailabilityWithCurrentCalls
 @property  BOOL cellDataSwitchingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTelephonyManager sharedTelephonyManagerCreatingIfNecessary:]
  +[SBTelephonyManager sharedTelephonyManager]
  +[SBTelephonyManager defaultTelephonyCenter]

  // instance methods
  -[SBTelephonyManager coreTelephonyClient]
  -[SBTelephonyManager telephonyStateProvider]
  -[SBTelephonyManager inCallDuration]
  -[SBTelephonyManager setCoreTelephonyClient:]
  -[SBTelephonyManager _callCountForService:]
  -[SBTelephonyManager swapCalls]
  -[SBTelephonyManager _primarySubscriptionSlot]
  -[SBTelephonyManager carrierBundleInfoDidChangeForStateProvider:slot:]
  -[SBTelephonyManager activeCallExists]
  -[SBTelephonyManager bluetoothController]
  -[SBTelephonyManager setCachedSlot1CountryCode:]
  -[SBTelephonyManager incomingCall]
  -[SBTelephonyManager displayedCall]
  -[SBTelephonyManager initWithStateProvider:wifiDomain:bluetoothController:]
  -[SBTelephonyManager inCallUsingSpeakerOrReceiver]
  -[SBTelephonyManager _performQueryInBackground:withMainQueueResultHandler:]
  -[SBTelephonyManager _backgroundQueryQueue]
  -[SBTelephonyManager telephonyCallCount]
  -[SBTelephonyManager _primaryMobileEquipmentInfo]
  -[SBTelephonyManager _updateState]
  -[SBTelephonyManager _phoneApp]
  -[SBTelephonyManager setCachedSlot2SIMStatus:]
  -[SBTelephonyManager isUsingVPNConnection]
  -[SBTelephonyManager .cxx_destruct]
  -[SBTelephonyManager cachedSlot2CountryCode]
  -[SBTelephonyManager cachedSlot2SIMStatus]
  -[SBTelephonyManager heldCall]
  -[SBTelephonyManager _serverConnection]
  -[SBTelephonyManager _avSystemControllerDidError:]
  -[SBTelephonyManager _serverConnectionDidError:]
  -[SBTelephonyManager outgoingCall]
  -[SBTelephonyManager numberOfNetworkTetheredDevices]
  -[SBTelephonyManager setFastDormancySuspended:]
  -[SBTelephonyManager _setIsInEmergencyCallbackMode:]
  -[SBTelephonyManager carrierDisabledApplicationIDs]
  -[SBTelephonyManager _secondarySubscriptionSlot]
  -[SBTelephonyManager disconnectAllCalls]
  -[SBTelephonyManager inCall]
  -[SBTelephonyManager _dataConnectedSubscriptionSlot]
  -[SBTelephonyManager setIncomingCall:]
  -[SBTelephonyManager setHeldCall:]
  -[SBTelephonyManager preHeatDataLinkForDomains:]
  -[SBTelephonyManager init]
  -[SBTelephonyManager hasCellularData]
  -[SBTelephonyManager isNetworkRegistrationEnabled]
  -[SBTelephonyManager _primarySubscriptionInfo]
  -[SBTelephonyManager updateCalls]
  -[SBTelephonyManager dataConnectionAvailabilityWithCurrentCalls]
  -[SBTelephonyManager handleCallControlFailure:]
  -[SBTelephonyManager _subscriptionInfoForCall:]
  -[SBTelephonyManager disconnectCallAndActivateHeld]
  -[SBTelephonyManager incomingCallExists]
  -[SBTelephonyManager _updateNetworkLocale]
  -[SBTelephonyManager setCellDataSwitchingEnabled:]
  -[SBTelephonyManager setOutgoingCall:]
  -[SBTelephonyManager disconnectDisplayedCall]
  -[SBTelephonyManager _otherSubscriptionSlotIfSIMPresent:]
  -[SBTelephonyManager _secondaryCarrierBundleInfo]
  -[SBTelephonyManager isUsingSlowDataConnection]
  -[SBTelephonyManager setActiveCall:]
  -[SBTelephonyManager cachedSlot1CountryCode]
  -[SBTelephonyManager _queue_noteWirelessModemDynamicStoreChanged]
  -[SBTelephonyManager _dataPreferredSubscriptionSlotIfSIMPresent]
  -[SBTelephonyManager _subscriptionSlotIfSIMPresent:]
  -[SBTelephonyManager isEmergencyCallActive]
  -[SBTelephonyManager _provisioningUpdateWithStatus:slot:]
  -[SBTelephonyManager telephonyAudioChangeHandler]
  -[SBTelephonyManager emergencyCallSupported]
  -[SBTelephonyManager isInEmergencyCallbackMode]
  -[SBTelephonyManager _setIsNetworkTethering:withNumberOfDevices:]
  -[SBTelephonyManager setCachedSlot1SIMStatus:]
  -[SBTelephonyManager _anySubscriptionSlotWithSIMPresent]
  -[SBTelephonyManager _secondarySubscriptionInfo]
  -[SBTelephonyManager isEndpointOnCurrentDevice]
  -[SBTelephonyManager setNetworkRegistrationEnabled:]
  -[SBTelephonyManager hasNonCellularNetworkConnection]
  -[SBTelephonyManager faceTimeAudioCallCount]
  -[SBTelephonyManager activeCall]
  -[SBTelephonyManager disconnectIncomingCall]
  -[SBTelephonyManager updateSpringBoard]
  -[SBTelephonyManager outgoingCallExists]
  -[SBTelephonyManager _primaryCarrierBundleInfo]
  -[SBTelephonyManager isTTYEnabled]
  -[SBTelephonyManager callEventHandler:]
  -[SBTelephonyManager callCount]
  -[SBTelephonyManager subscriptionInfoDidChangeForStateProvider:slot:]
  -[SBTelephonyManager _setCurrentActivationAlertItem:]
  -[SBTelephonyManager _secondaryMobileEquipmentInfo]
  -[SBTelephonyManager setCachedSlot2CountryCode:]
  -[SBTelephonyManager _callsForService:]
  -[SBTelephonyManager hasCellularTelephony]
  -[SBTelephonyManager cachedSlot1SIMStatus]
  -[SBTelephonyManager updateLocale]
  -[SBTelephonyManager containsCellularRadio]
  -[SBTelephonyManager isCellDataSwitchingEnabled]
  -[SBTelephonyManager dumpBasebandState:]
  -[SBTelephonyManager observeValueForKeyPath:ofObject:change:context:]
  -[SBTelephonyManager _handleTelephonyDaemonRestart]
  -[SBTelephonyManager heldCallExists]
  -[SBTelephonyManager wifiDomain]
  -[SBTelephonyManager queue_setFastDormancySuspended:withConnection:]
  -[SBTelephonyManager isNetworkTethering]
  -[SBTelephonyManager multipleCallsExist]


SBInteractivePreferenceChangeDodgingModifier : SBDodgingModifier
  // instance methods
  -[SBInteractivePreferenceChangeDodgingModifier initWithIdentifier:]
  -[SBInteractivePreferenceChangeDodgingModifier .cxx_destruct]
  -[SBInteractivePreferenceChangeDodgingModifier framesForIdentifiers]
  -[SBInteractivePreferenceChangeDodgingModifier animationBehaviorModeForIdentifier:]
  -[SBInteractivePreferenceChangeDodgingModifier handlePreferenceChangeEvent:]
  -[SBInteractivePreferenceChangeDodgingModifier zOrderedIdentifiers]
  -[SBInteractivePreferenceChangeDodgingModifier completesWhenChildrenComplete]


SBZoomView : UIView
 @property  UIStatusBar *statusBar
 @property  UIView *contentView

  // class methods
  +[SBZoomView _chromeStatusBarImageForInterfaceOrientation:]

  // instance methods
  -[SBZoomView _initWithFrame:]
  -[SBZoomView .cxx_destruct]
  -[SBZoomView contentView]
  -[SBZoomView _shouldAnimatePropertyWithKey:]
  -[SBZoomView statusBar]
  -[SBZoomView initWithFrame:]
  -[SBZoomView dealloc]
  -[SBZoomView setStatusBar:]


SBFullscreenZoomView : SBZoomView
 @property  id surface

  // instance methods
  -[SBFullscreenZoomView surface]
  -[SBFullscreenZoomView _initWithFrame:]
  -[SBFullscreenZoomView _addBlackBackground]
  -[SBFullscreenZoomView .cxx_destruct]
  -[SBFullscreenZoomView _initWithView:displayConfiguration:]
  -[SBFullscreenZoomView initWithView:containingSceneSnapshot:forDisplayConfiguration:]
  -[SBFullscreenZoomView initWithContainingBounds:contentFrame:statusBarFrame:snapshot:snapshotOrientation:interfaceOrientation:doubleHeightStatusBar:allowStatusBarToOverlap:useLargerCornerRadii:preventSplit:needsZoomFilter:asyncDecodeImage:forJail:hasOrientationMismatchForClassicApp:]


SBClippedZoomView : SBZoomView
  // instance methods
  -[SBClippedZoomView .cxx_destruct]
  -[SBClippedZoomView initWithClippingFrame:fullscreenZoomView:]


SBAppSwitcherOrbGestureAnimationSettings : PTSettings
 @property  SBFFluidBehaviorSettings *popToSwitcherSettings
 @property  SBFFluidBehaviorSettings *peekingAndPanningSettings
 @property  SBFFluidBehaviorSettings *breathingSettings
 @property  double response

  // class methods
  +[SBAppSwitcherOrbGestureAnimationSettings settingsControllerModule]

  // instance methods
  -[SBAppSwitcherOrbGestureAnimationSettings .cxx_destruct]
  -[SBAppSwitcherOrbGestureAnimationSettings setDefaultValues]
  -[SBAppSwitcherOrbGestureAnimationSettings response]
  -[SBAppSwitcherOrbGestureAnimationSettings setResponse:]
  -[SBAppSwitcherOrbGestureAnimationSettings popToSwitcherSettings]
  -[SBAppSwitcherOrbGestureAnimationSettings peekingAndPanningSettings]
  -[SBAppSwitcherOrbGestureAnimationSettings breathingSettings]
  -[SBAppSwitcherOrbGestureAnimationSettings setPopToSwitcherSettings:]
  -[SBAppSwitcherOrbGestureAnimationSettings setPeekingAndPanningSettings:]
  -[SBAppSwitcherOrbGestureAnimationSettings setBreathingSettings:]


BezierCurve : NSObject
 @property  void p0
 @property  void p1
 @property  void p2
 @property  void p3

  // instance methods
  -[BezierCurve p1]
  -[BezierCurve p2]
  -[BezierCurve p3]
  -[BezierCurve p0]
  -[BezierCurve setP0:]
  -[BezierCurve setP1:]
  -[BezierCurve setP2:]
  -[BezierCurve setP3:]
  -[BezierCurve pointAt:]
  -[BezierCurve scaleBy:]
  -[BezierCurve initWithDictionary:]
  -[BezierCurve _float4FromArray:]
  -[BezierCurve derivativeAt:]


PathPoint : NSObject
 @property  void p
 @property  void n
 @property  float r
 @property  float l

  // instance methods
  -[PathPoint p]
  -[PathPoint n]
  -[PathPoint r]
  -[PathPoint l]
  -[PathPoint setN:]
  -[PathPoint setL:]
  -[PathPoint setR:]
  -[PathPoint setP:]
  -[PathPoint initWithP:n:r:l:]


SBCursiveTextPath : NSObject
  // instance methods
  -[SBCursiveTextPath .cxx_destruct]
  -[SBCursiveTextPath duration]
  -[SBCursiveTextPath initWithURL:]
  -[SBCursiveTextPath _float4FromArray:]
  -[SBCursiveTextPath initWithURL:resolution:]
  -[SBCursiveTextPath pathForFraction:calculateLength:]
  -[SBCursiveTextPath transformForRect:pointSize:flipped:]
  -[SBCursiveTextPath pathForTime:]


SBGuidedAccessListener : NSObject
 @property  BOOL isGuidedAccessActive

  // class methods
  +[SBGuidedAccessListener sharedGuidedAccessListener]

  // instance methods
  -[SBGuidedAccessListener isGuidedAccessActive]
  -[SBGuidedAccessListener setIsGuidedAccessActive:]
  -[SBGuidedAccessListener guidedAccessWasActivated]
  -[SBGuidedAccessListener guidedAccessWasDeactivated]
  -[SBGuidedAccessListener init]


SBFluidSwitcherDragAndDropManager : NSObject <BSTransactionObserver, SBApplicationDropSessionSceneProviding, UIDropInteractionDelegate_Private, UIDragInteractionDelegate_Private, SBDragAndDropWorkspaceTransactionDelegate>
 @property  SBFluidSwitcherViewController *switcherContentController
 @property  SBMainDisplaySceneManager *sceneManager
 @property  <SBFluidSwitcherDragAndDropManagerDelegate> *delegate
 @property  UIDropInteraction *dropInteraction
 @property  SBDragAndDropWorkspaceTransaction *activeTransaction
 @property  NSMapTable *activeDropSessions
 @property  SBWindowDragInteraction *windowDragInteraction
 @property  <UIDragSession> *windowDragSession
 @property  @? windowDragSessionPrepareCompletionBlock
 @property  NSString *windowDragSceneIdentifier
 @property  BOOL windowDragHandledByDruid
 @property  BOOL hasAddedSwitcherWindowAsDragTarget
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherDragAndDropManager dropInteraction:item:willAnimateDropWithAnimator:]
  -[SBFluidSwitcherDragAndDropManager _requiredContextIDsForDragSessionInView:]
  -[SBFluidSwitcherDragAndDropManager sceneManager]
  -[SBFluidSwitcherDragAndDropManager _dropInteraction:customSpringAnimationBehaviorForDroppingItem:]
  -[SBFluidSwitcherDragAndDropManager transactionDidComplete:]
  -[SBFluidSwitcherDragAndDropManager _dragInteraction:prepareForSession:completion:]
  -[SBFluidSwitcherDragAndDropManager _dragInteraction:customSpringAnimationBehaviorForCancellingItem:]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:sessionIsRestrictedToDraggingApplication:]
  -[SBFluidSwitcherDragAndDropManager .cxx_destruct]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:previewForLiftingItem:session:]
  -[SBFluidSwitcherDragAndDropManager dropInteraction:sessionDidExit:]
  -[SBFluidSwitcherDragAndDropManager dropInteraction:canHandleSession:]
  -[SBFluidSwitcherDragAndDropManager setActiveTransaction:]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:willAnimateLiftWithAnimator:session:]
  -[SBFluidSwitcherDragAndDropManager newSceneIdentityForApplication:]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:itemsForBeginningSession:]
  -[SBFluidSwitcherDragAndDropManager dropInteraction:sessionDidUpdate:]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:previewForCancellingItem:withDefault:]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:sessionDidMove:]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:session:willEndWithOperation:]
  -[SBFluidSwitcherDragAndDropManager setDropInteraction:]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:sessionWillBegin:]
  -[SBFluidSwitcherDragAndDropManager switcherContentController]
  -[SBFluidSwitcherDragAndDropManager activeTransaction]
  -[SBFluidSwitcherDragAndDropManager delegate]
  -[SBFluidSwitcherDragAndDropManager dropInteraction:sessionDidEnter:]
  -[SBFluidSwitcherDragAndDropManager _dragInteractionDidCancelLiftWithoutDragging:]
  -[SBFluidSwitcherDragAndDropManager dropInteraction:performDrop:]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:item:willAnimateCancelWithAnimator:]
  -[SBFluidSwitcherDragAndDropManager dealloc]
  -[SBFluidSwitcherDragAndDropManager dropInteraction:sessionDidEnd:]
  -[SBFluidSwitcherDragAndDropManager dropInteraction:concludeDrop:]
  -[SBFluidSwitcherDragAndDropManager dropInteraction:previewForDroppingItem:withDefault:]
  -[SBFluidSwitcherDragAndDropManager dragInteraction:session:didEndWithOperation:]
  -[SBFluidSwitcherDragAndDropManager dropInteraction]
  -[SBFluidSwitcherDragAndDropManager isDragAndDropTransactionRunning]
  -[SBFluidSwitcherDragAndDropManager _beginTrackingDropSessionIfNeeded:]
  -[SBFluidSwitcherDragAndDropManager _windowDragSessionDidEnd]
  -[SBFluidSwitcherDragAndDropManager _anyActiveAndVisibleSceneEntityMatches:]
  -[SBFluidSwitcherDragAndDropManager activeDropSessions]
  -[SBFluidSwitcherDragAndDropManager _workspaceWouldAllowTransitionToApplication:]
  -[SBFluidSwitcherDragAndDropManager isApplicationActiveAndVisible:]
  -[SBFluidSwitcherDragAndDropManager preferredSceneIdentityForApplication:targetContentIdentifier:preferNewScene:]
  -[SBFluidSwitcherDragAndDropManager mostRecentSceneIdentityExcludingLiveScenesForApplication:]
  -[SBFluidSwitcherDragAndDropManager dragAndDropTransaction:didBeginGesture:]
  -[SBFluidSwitcherDragAndDropManager dragAndDropTransaction:didUpdateGesture:]
  -[SBFluidSwitcherDragAndDropManager dragAndDropTransaction:didEndGesture:]
  -[SBFluidSwitcherDragAndDropManager dragAndDropTransaction:didPlatterizeWindowDragWithSceneIdentifier:]
  -[SBFluidSwitcherDragAndDropManager initWithSwitcherContentController:sceneManager:delegate:]
  -[SBFluidSwitcherDragAndDropManager shouldBeginWindowDragGesture]
  -[SBFluidSwitcherDragAndDropManager handleWindowDragGestureRecognizer:]
  -[SBFluidSwitcherDragAndDropManager setActiveDropSessions:]
  -[SBFluidSwitcherDragAndDropManager windowDragInteraction]
  -[SBFluidSwitcherDragAndDropManager setWindowDragInteraction:]
  -[SBFluidSwitcherDragAndDropManager windowDragSession]
  -[SBFluidSwitcherDragAndDropManager setWindowDragSession:]
  -[SBFluidSwitcherDragAndDropManager windowDragSessionPrepareCompletionBlock]
  -[SBFluidSwitcherDragAndDropManager setWindowDragSessionPrepareCompletionBlock:]
  -[SBFluidSwitcherDragAndDropManager windowDragSceneIdentifier]
  -[SBFluidSwitcherDragAndDropManager setWindowDragSceneIdentifier:]
  -[SBFluidSwitcherDragAndDropManager windowDragHandledByDruid]
  -[SBFluidSwitcherDragAndDropManager setWindowDragHandledByDruid:]
  -[SBFluidSwitcherDragAndDropManager hasAddedSwitcherWindowAsDragTarget]
  -[SBFluidSwitcherDragAndDropManager setHasAddedSwitcherWindowAsDragTarget:]


SBVolumeControl : NSObject <SBElasticHUDViewControllerDelegate, SBElasticVolumeDataSource, PTSettingsKeyObserver>
 @property  NSString *lastDisplayedCategory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBVolumeControl _isVolumeManagedForCategory:]
  +[SBVolumeControl _isVolumeChangeAllowedForState:error:]

  // instance methods
  -[SBVolumeControl _controlCenterWillPresent:]
  -[SBVolumeControl increaseVolume]
  -[SBVolumeControl _effectiveVolumeChanged:]
  -[SBVolumeControl _dispatchAVSystemControllerSync:]
  -[SBVolumeControl elasticHUDViewControllerRequestsDismissal:]
  -[SBVolumeControl existingVolumeHUDViewController]
  -[SBVolumeControl _HUDIsDisplayableForLastEventCategory]
  -[SBVolumeControl _calcButtonRepeatDelay]
  -[SBVolumeControl _dispatchAVSystemControllerAsync:]
  -[SBVolumeControl lastDisplayedCategory]
  -[SBVolumeControl .cxx_destruct]
  -[SBVolumeControl elasticVolumeViewControllerActiveAudioCategory:]
  -[SBVolumeControl _isCategoryAlwaysHidden:]
  -[SBVolumeControl decreaseVolume]
  -[SBVolumeControl _effectiveVolume]
  -[SBVolumeControl _presentVolumeHUDWithVolume:]
  -[SBVolumeControl _resetMediaServerConnection]
  -[SBVolumeControl _getMediaVolumeForIAP]
  -[SBVolumeControl elasticValueViewControllerCurrentValue:]
  -[SBVolumeControl hideVolumeHUDIfVisible]
  -[SBVolumeControl _setMediaVolumeForIAP:]
  -[SBVolumeControl elasticValueViewController:updateCurrentValue:]
  -[SBVolumeControl setActiveCategoryVolume:]
  -[SBVolumeControl _isVolumeHUDVisible]
  -[SBVolumeControl _isHUDDisplayable]
  -[SBVolumeControl acquireVolumeHUDHiddenAssertionForReason:]
  -[SBVolumeControl initWithHUDController:ringerControl:telephonyManager:conferenceManager:]
  -[SBVolumeControl volumeStepUp]
  -[SBVolumeControl handleVolumeButtonWithType:down:]
  -[SBVolumeControl settings:changedValueForKey:]
  -[SBVolumeControl volumeStepDown]
  -[SBVolumeControl _updateEffectiveVolume:]
  -[SBVolumeControl setVolume:forCategory:]
  -[SBVolumeControl avSystemControllerDispatchQueue]
  -[SBVolumeControl addAlwaysHiddenCategory:]
  -[SBVolumeControl _controlCenterDidDismiss:]
  -[SBVolumeControl cancelVolumeEvent]
  -[SBVolumeControl changeVolumeByDelta:]
  -[SBVolumeControl _serverConnectionDied:]
  -[SBVolumeControl toggleMute]
  -[SBVolumeControl _HUDIsDisplayableForCategory:]
  -[SBVolumeControl _configureVolumeHUDViewControllerWithVolume:]
  -[SBVolumeControl presentedVolumeHUDViewController]
  -[SBVolumeControl clearAlwaysHiddenCategories]
  -[SBVolumeControl removeAlwaysHiddenCategory:]
  -[SBVolumeControl _HUDIsDisplayableInCurrentSpringBoardContext]


SBUIStartupFromOverlayAnimationController : SBUIMainScreenAnimationController
 @property  BSAnimationSettings *animationSettings
 @property  BOOL waitsForAppActivation

  // instance methods
  -[SBUIStartupFromOverlayAnimationController _cleanupAnimation]
  -[SBUIStartupFromOverlayAnimationController setAnimationSettings:]
  -[SBUIStartupFromOverlayAnimationController animationSettings]
  -[SBUIStartupFromOverlayAnimationController _startAnimation]
  -[SBUIStartupFromOverlayAnimationController .cxx_destruct]
  -[SBUIStartupFromOverlayAnimationController _prepareAnimation]
  -[SBUIStartupFromOverlayAnimationController initWithTransitionContextProvider:overlay:]
  -[SBUIStartupFromOverlayAnimationController initWithTransitionContextProvider:]
  -[SBUIStartupFromOverlayAnimationController _waitsForActivatingSceneContentAvailableIfNecessary]
  -[SBUIStartupFromOverlayAnimationController _shouldDismissBanner]
  -[SBUIStartupFromOverlayAnimationController waitsForAppActivation]
  -[SBUIStartupFromOverlayAnimationController setWaitsForAppActivation:]


SBHUDDomain : PTDomain
  // class methods
  +[SBHUDDomain domainGroupName]
  +[SBHUDDomain rootSettings]
  +[SBHUDDomain domainName]
  +[SBHUDDomain rootSettingsClass]


SBHomeToGridSwitcherModifier : SBHomeToSwitcherSwitcherModifier
  // instance methods
  -[SBHomeToGridSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeToGridSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBHomeToGridSwitcherModifier titleOpacityForIndex:]
  -[SBHomeToGridSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBHomeToGridSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeToGridSwitcherModifier headerStyleForIndex:]
  -[SBHomeToGridSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeToGridSwitcherModifier scaleForIndex:]
  -[SBHomeToGridSwitcherModifier frameForIndex:]
  -[SBHomeToGridSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeToGridSwitcherModifier visibleAppLayouts]
  -[SBHomeToGridSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeToGridSwitcherModifier wallpaperStyle]
  -[SBHomeToGridSwitcherModifier cornerRadiiForIndex:]
  -[SBHomeToGridSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeToGridSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeToGridSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBHomeToGridSwitcherModifier topMostLayoutElements]
  -[SBHomeToGridSwitcherModifier appLayoutToScrollToDuringTransition]


SBContinuityDisplayItem : SBDisplayItem
 @property  SBBestAppSuggestion *appSuggestion

  // class methods
  +[SBContinuityDisplayItem continuityAppDisplayItemWithBundleIdentifier:appSuggestion:]

  // instance methods
  -[SBContinuityDisplayItem .cxx_destruct]
  -[SBContinuityDisplayItem initWithType:displayIdentifier:appSuggestion:]
  -[SBContinuityDisplayItem isEqual:]
  -[SBContinuityDisplayItem appSuggestion]


SBDeviceApplicationSceneStatusBarStateProvider : SBDeviceApplicationSceneStatusBarStateProvider_Base <SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneStatusBarStateProviderBaseSubclassesMustOverride, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneStatusBarStateProvider sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationSceneStatusBarStateProvider statusBarAvoidanceFrame]
  -[SBDeviceApplicationSceneStatusBarStateProvider _suppressInheritedPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider .cxx_destruct]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarAppearsOutsideOfAJailedApp]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarStyleForPartWithIdentifier:suppressingInherited:]
  -[SBDeviceApplicationSceneStatusBarStateProvider _anyObserverWants:]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarStyle]
  -[SBDeviceApplicationSceneStatusBarStateProvider sceneToHandleStatusBarTapIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProvider invalidateStatusBarSettings]
  -[SBDeviceApplicationSceneStatusBarStateProvider statusBarSceneIdentifier]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarAppearsOutsideOfAJailedAppCanChange]
  -[SBDeviceApplicationSceneStatusBarStateProvider _performUpdateWith:actions:]
  -[SBDeviceApplicationSceneStatusBarStateProvider sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDeviceApplicationSceneStatusBarStateProvider _initWithSceneHandle:]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarAppearsOutsideOfAJailedAppInOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProvider _fallbackInterfaceOrientation]
  -[SBDeviceApplicationSceneStatusBarStateProvider overlayStatusBarData]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarAlpha]
  -[SBDeviceApplicationSceneStatusBarStateProvider statusBarStyleOverridesToSuppress]
  -[SBDeviceApplicationSceneStatusBarStateProvider classicApplicationSceneHandleIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProvider dealloc]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarHiddenGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProvider sceneWantsDeviceOrientationEventsEnabled]
  -[SBDeviceApplicationSceneStatusBarStateProvider invalidate]
  -[SBDeviceApplicationSceneStatusBarStateProvider _handleStatusBarStyleOverridesToSuppressUpdate]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarOrientationGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProvider breadcrumbProvider]


SBHIDInterface : NSObject <SBProximitySensorControlling>
 @property  BOOL proximityDetectionEnabled
 @property  BOOL pocketTouchesExpected
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHIDInterface sharedInstance]

  // instance methods
  -[SBHIDInterface addStartupHIDLockAssertion]
  -[SBHIDInterface setProximityDetectionEnabled:]
  -[SBHIDInterface setPocketTouchesExpected:]
  -[SBHIDInterface removeHIDLockAssertion:source:]
  -[SBHIDInterface _suspendProximity:suspendMultitouch:disableTapToWake:source:reason:]
  -[SBHIDInterface resetProximityCalibration]
  -[SBHIDInterface .cxx_destruct]
  -[SBHIDInterface _reevaluateLockStateForSource:]
  -[SBHIDInterface pocketTouchesExpected]
  -[SBHIDInterface suspendMultitouchForSource:reason:]
  -[SBHIDInterface suspendProximityDetectionForSource:reason:]
  -[SBHIDInterface init]
  -[SBHIDInterface _setLockState:source:]
  -[SBHIDInterface isProximityDetectionEnabled]
  -[SBHIDInterface suspendProximityDetectionAndMultitouchForSource:disableTapToWake:reason:]
  -[SBHIDInterface reevaluateHIDLockAssertionsForSource:]


SBUIStartupToUserSetupAppZoomInAnimationController : SBUIMainScreenAnimationController
  // instance methods
  -[SBUIStartupToUserSetupAppZoomInAnimationController _cleanupAnimation]
  -[SBUIStartupToUserSetupAppZoomInAnimationController animationSettings]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _startAnimation]
  -[SBUIStartupToUserSetupAppZoomInAnimationController .cxx_destruct]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _setHidden:]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _prepareAnimation]
  -[SBUIStartupToUserSetupAppZoomInAnimationController initWithTransitionContextProvider:overlay:]
  -[SBUIStartupToUserSetupAppZoomInAnimationController initWithTransitionContextProvider:]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _getTransitionWindow]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _waitsForActivatingSceneContentAvailableIfNecessary]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _shouldDismissBanner]


SBGenerateLaunchSnapshotsAlertItem : SBAlertItem
 @property  @? handler

  // instance methods
  -[SBGenerateLaunchSnapshotsAlertItem .cxx_destruct]
  -[SBGenerateLaunchSnapshotsAlertItem behavesSuperModally]
  -[SBGenerateLaunchSnapshotsAlertItem shouldShowInLockScreen]
  -[SBGenerateLaunchSnapshotsAlertItem setHandler:]
  -[SBGenerateLaunchSnapshotsAlertItem initWithHandler:]
  -[SBGenerateLaunchSnapshotsAlertItem configure:requirePasscodeForActions:]
  -[SBGenerateLaunchSnapshotsAlertItem forcesModalAlertAppearance]
  -[SBGenerateLaunchSnapshotsAlertItem handler]
  -[SBGenerateLaunchSnapshotsAlertItem regenerateApplications:]


SBLaunchSnapshotWaitingAlertItem : SBAlertItem
  // instance methods
  -[SBLaunchSnapshotWaitingAlertItem reappearsAfterLock]
  -[SBLaunchSnapshotWaitingAlertItem behavesSuperModally]
  -[SBLaunchSnapshotWaitingAlertItem allowMenuButtonDismissal]
  -[SBLaunchSnapshotWaitingAlertItem shouldShowInLockScreen]
  -[SBLaunchSnapshotWaitingAlertItem reappearsAfterUnlock]
  -[SBLaunchSnapshotWaitingAlertItem allowLockScreenDismissal]
  -[SBLaunchSnapshotWaitingAlertItem configure:requirePasscodeForActions:]
  -[SBLaunchSnapshotWaitingAlertItem forcesModalAlertAppearance]


SBDefaultLaunchSnapshotTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDefaultLaunchSnapshotTestRecipe load]

  // instance methods
  -[SBDefaultLaunchSnapshotTestRecipe .cxx_destruct]
  -[SBDefaultLaunchSnapshotTestRecipe title]
  -[SBDefaultLaunchSnapshotTestRecipe handleVolumeIncrease]
  -[SBDefaultLaunchSnapshotTestRecipe handleVolumeDecrease]


SBHardwareButtonGestureParametersProviderBase : NSObject <SBHardwareButtonGestureParametersProvider, BSDescriptionProviding>
 @property  NSMapTable *observers
 @property  SBHardwareButtonGestureParameters *hardwareButtonGestureParameters
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHardwareButtonGestureParametersProviderBase .cxx_destruct]
  -[SBHardwareButtonGestureParametersProviderBase succinctDescriptionBuilder]
  -[SBHardwareButtonGestureParametersProviderBase setObservers:]
  -[SBHardwareButtonGestureParametersProviderBase descriptionBuilderWithMultilinePrefix:]
  -[SBHardwareButtonGestureParametersProviderBase descriptionWithMultilinePrefix:]
  -[SBHardwareButtonGestureParametersProviderBase succinctDescription]
  -[SBHardwareButtonGestureParametersProviderBase hardwareButtonGestureParameters]
  -[SBHardwareButtonGestureParametersProviderBase observers]
  -[SBHardwareButtonGestureParametersProviderBase addHardwareButtonGestureParametersObserver:]
  -[SBHardwareButtonGestureParametersProviderBase publishUpdatedParameters:]
  -[SBHardwareButtonGestureParametersProviderBase removeHardwareButtonGestureParametersObserver:]


SBRemoteTransientOverlayPresentationRequest : NSObject <NSCopying>
 @property  SBTransientOverlayViewController *viewController
 @property  BOOL animated
 @property  SBSRemoteAlertPresentationTarget *presentationTarget
 @property  BOOL isScreenshotMarkup
 @property  BOOL shouldDismissSiri
 @property  BOOL shouldDismissPresentedBanners

  // instance methods
  -[SBRemoteTransientOverlayPresentationRequest setAnimated:]
  -[SBRemoteTransientOverlayPresentationRequest viewController]
  -[SBRemoteTransientOverlayPresentationRequest isAnimated]
  -[SBRemoteTransientOverlayPresentationRequest initWithViewController:]
  -[SBRemoteTransientOverlayPresentationRequest .cxx_destruct]
  -[SBRemoteTransientOverlayPresentationRequest shouldDismissPresentedBanners]
  -[SBRemoteTransientOverlayPresentationRequest setShouldDismissPresentedBanners:]
  -[SBRemoteTransientOverlayPresentationRequest presentationTarget]
  -[SBRemoteTransientOverlayPresentationRequest copyWithZone:]
  -[SBRemoteTransientOverlayPresentationRequest setPresentationTarget:]
  -[SBRemoteTransientOverlayPresentationRequest setShouldDismissSiri:]
  -[SBRemoteTransientOverlayPresentationRequest shouldDismissSiri]
  -[SBRemoteTransientOverlayPresentationRequest isScreenshotMarkup]
  -[SBRemoteTransientOverlayPresentationRequest setIsScreenshotMarkup:]


SBBiometricMonitorPearlDataSource : NSObject <BKDevicePearlDelegate, SBUIBiometricResourceObserver, SBBiometricMonitorDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL presenceDetectRunning
 @property  BOOL matchRunning
 @property  BOOL poseIsMarginal

  // instance methods
  -[SBBiometricMonitorPearlDataSource .cxx_destruct]
  -[SBBiometricMonitorPearlDataSource init]
  -[SBBiometricMonitorPearlDataSource addObserver:]
  -[SBBiometricMonitorPearlDataSource biometricResource:observeEvent:]
  -[SBBiometricMonitorPearlDataSource dealloc]
  -[SBBiometricMonitorPearlDataSource removeObserver:]
  -[SBBiometricMonitorPearlDataSource _forEachObserver:]
  -[SBBiometricMonitorPearlDataSource device:pearlEventOccurred:]
  -[SBBiometricMonitorPearlDataSource device:pearlStateChanged:]
  -[SBBiometricMonitorPearlDataSource matchRunning]
  -[SBBiometricMonitorPearlDataSource presenceDetectRunning]
  -[SBBiometricMonitorPearlDataSource poseIsMarginal]
  -[SBBiometricMonitorPearlDataSource initWithPearlDevice:]
  -[SBBiometricMonitorPearlDataSource _setMatching:]
  -[SBBiometricMonitorPearlDataSource _setFaceDetecting:]
  -[SBBiometricMonitorPearlDataSource _setPoseIsMarginal:]
  -[SBBiometricMonitorPearlDataSource _updateFaceDetecting]
  -[SBBiometricMonitorPearlDataSource _updateMatching]


SBElasticHUDViewController : SBFTouchPassThroughViewController <UIViewControllerTransitioningDelegate, SBElasticValueViewControllerDelegate, SBHUDViewControlling>
 @property  SBElasticValueViewController *elasticValueViewController
 @property  <SBElasticHUDViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBElasticHUDViewController animationControllerForPresentedController:presentingController:sourceController:]
  -[SBElasticHUDViewController animationControllerForDismissedController:]
  -[SBElasticHUDViewController .cxx_destruct]
  -[SBElasticHUDViewController viewDidLoad]
  -[SBElasticHUDViewController _dismiss]
  -[SBElasticHUDViewController setDelegate:]
  -[SBElasticHUDViewController isEqual:]
  -[SBElasticHUDViewController viewDidLayoutSubviews]
  -[SBElasticHUDViewController delegate]
  -[SBElasticHUDViewController reloadData]
  -[SBElasticHUDViewController supportedInterfaceOrientations]
  -[SBElasticHUDViewController _canShowWhileLocked]
  -[SBElasticHUDViewController definesAnimatedDismissal]
  -[SBElasticHUDViewController dismissAnimatedWithCompletion:]
  -[SBElasticHUDViewController noteButtonUpWasHit:]
  -[SBElasticHUDViewController noteButtonDownWasHit:]
  -[SBElasticHUDViewController noteValueWillDeltaStepToValue:]
  -[SBElasticHUDViewController initWithFactory:]
  -[SBElasticHUDViewController noteValueDidChange:]
  -[SBElasticHUDViewController elasticValueViewController]
  -[SBElasticHUDViewController initWithElasticValueContentViewController:]
  -[SBElasticHUDViewController elasticValueViewControllerNeedsDismissal:]


_SBElasticHUDViewControllerNullAnimator : SBUIAnimationPropertyAnimator
  // instance methods
  -[_SBElasticHUDViewControllerNullAnimator init]


SBPlatterHomeGestureManager : NSObject <SBPlatterHomeGestureContextDelegate>
 @property  <SBPlatterHomeGestureManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPlatterHomeGestureManager .cxx_destruct]
  -[SBPlatterHomeGestureManager _allParticipants]
  -[SBPlatterHomeGestureManager initWithDelegate:]
  -[SBPlatterHomeGestureManager delegate]
  -[SBPlatterHomeGestureManager registerParticipant:]
  -[SBPlatterHomeGestureManager unregisterParticipant:]
  -[SBPlatterHomeGestureManager _homeGestureContextForParticipant:creatingIfNecessary:]
  -[SBPlatterHomeGestureManager _removeHomeGestureContextForParticipant:]
  -[SBPlatterHomeGestureManager _participantForHomeGestureContext:]
  -[SBPlatterHomeGestureManager wantsHomeGestureDidChangeForBannerManagerHomeGestureContext:]
  -[SBPlatterHomeGestureManager bannerManagerHomeGestureContext:homeGestureOwnershipDidChange:]
  -[SBPlatterHomeGestureManager keyboardHomeAffordanceAssertionForBannerManagerHomeGestureContext:]
  -[SBPlatterHomeGestureManager gestureRecognizerPriorityAssertionForBannerManagerHomeGestureContext:]


SBSystemPointerInteractionManager : NSObject <UIPointerInteractionDelegate>
 @property  UIWindow *window
 @property  UIView *activePointerRegionView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemPointerInteractionManager pointerInteraction:styleForRegion:]
  -[SBSystemPointerInteractionManager pointerInteraction:willEnterRegion:animator:]
  -[SBSystemPointerInteractionManager initWithPointerInteractionWindow:]
  -[SBSystemPointerInteractionManager unregisterView:]
  -[SBSystemPointerInteractionManager pointerInteraction:willExitRegion:animator:]
  -[SBSystemPointerInteractionManager .cxx_destruct]
  -[SBSystemPointerInteractionManager registerView:delegate:]
  -[SBSystemPointerInteractionManager window]
  -[SBSystemPointerInteractionManager activePointerRegionView]
  -[SBSystemPointerInteractionManager pointerInteraction:regionForRequest:defaultRegion:]


SBSceneManager : NSObject <SBSceneLayoutViewControllerDelegate, FBSceneManagerObserver, FBSceneDelegate, FBSceneManagerDelegate_Private, BSDescriptionProviding, BSInvalidatable, SBApplicationSceneHandleProviding, SBSceneLayoutSlaveTransactionProviding>
 @property  SBLayoutState *currentLayoutState
 @property  SBLayoutStateManager *_layoutStateManager
 @property  SBLayoutStateTransitionCoordinator *_layoutStateTransitionCoordinator
 @property  BOOL hidden
 @property  BOOL valid
 @property  FBSDisplayIdentity *displayIdentity
 @property  SBSceneLayoutWindow *window
 @property  SBSceneLayoutViewController *sceneLayoutViewController
 @property  SBPolicyAggregator *policyAggregator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSceneManager _layoutStateManagerClass]
  +[SBSceneManager _sceneLayoutWindowClass]
  +[SBSceneManager _applicationSceneHandleClass]

  // instance methods
  -[SBSceneManager _shouldTrackScenesForDeactivation]
  -[SBSceneManager scene:didPrepareUpdateWithContext:]
  -[SBSceneManager transientApplicationSceneHandlesForApplication:]
  -[SBSceneManager slaveTransactionsForTransitionRequest:]
  -[SBSceneManager existingSceneHandleForScene:]
  -[SBSceneManager _scene:interceptUpdateWithNewSettings:]
  -[SBSceneManager initWithReference:]
  -[SBSceneManager _createRootWindowScenePresentationBinder]
  -[SBSceneManager isValid]
  -[SBSceneManager assertBackgroundedStatusForScenes:]
  -[SBSceneManager displayIdentity]
  -[SBSceneManager .cxx_destruct]
  -[SBSceneManager sceneIdentityForApplication:uniqueIdentifier:]
  -[SBSceneManager scene:didCompleteUpdateWithContext:error:]
  -[SBSceneManager scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBSceneManager isHidden]
  -[SBSceneManager allScenes]
  -[SBSceneManager _windowShouldBeHidden]
  -[SBSceneManager succinctDescriptionBuilder]
  -[SBSceneManager sceneManager:didCreateScene:]
  -[SBSceneManager scene:didReceiveActions:]
  -[SBSceneManager _addReportedForegroundExternalApplicationSceneHandle:]
  -[SBSceneManager _setupLayoutStateTransitionCoordinator:]
  -[SBSceneManager _shouldAutoHostScene:]
  -[SBSceneManager sceneLayoutController:noteHasVisibleElements:]
  -[SBSceneManager removeSlaveTransactionProvider:]
  -[SBSceneManager setCurrentLayoutState:]
  -[SBSceneManager descriptionBuilderWithMultilinePrefix:]
  -[SBSceneManager init]
  -[SBSceneManager sceneLayoutViewController]
  -[SBSceneManager newSceneIdentityForApplication:]
  -[SBSceneManager _sceneIdentifierForBundleIdentifier:]
  -[SBSceneManager _sceneWindowLayoutStrategy]
  -[SBSceneManager _noteObserversDidInvalidate]
  -[SBSceneManager _newSceneLayoutViewController]
  -[SBSceneManager _snapshotRequestsForSceneHandle:settings:]
  -[SBSceneManager descriptionWithMultilinePrefix:]
  -[SBSceneManager scene:didApplyUpdateWithContext:]
  -[SBSceneManager sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:sceneSessionRole:]
  -[SBSceneManager scenesForWorkspaceWithID:]
  -[SBSceneManager succinctDescription]
  -[SBSceneManager existingSceneHandleForPersistenceIdentifier:]
  -[SBSceneManager sceneIdentityForApplication:excludingIdentifiers:]
  -[SBSceneManager sceneIdentityForApplication:]
  -[SBSceneManager addObserver:]
  -[SBSceneManager _doObserverCalloutWithBlock:]
  -[SBSceneManager _removeReportedForegroundExternalApplicationSceneHandle:]
  -[SBSceneManager _reconnectSceneRemnant:forProcess:sceneManager:]
  -[SBSceneManager sceneIdentityForApplication:targetContentIdentifier:]
  -[SBSceneManager _updateStateForScene:withSettings:]
  -[SBSceneManager sceneManager:didDestroyScene:]
  -[SBSceneManager sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:]
  -[SBSceneManager existingSceneHandleForSceneIdentity:]
  -[SBSceneManager _layoutStateManager]
  -[SBSceneManager _shouldFenceTransitionForScene:updatedClientSettingsDiff:oldClientSettings:transitionContext:]
  -[SBSceneManager _scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBSceneManager currentLayoutState]
  -[SBSceneManager policyAggregator]
  -[SBSceneManager sceneManager:createDefaultTransitionContextForScene:]
  -[SBSceneManager _noteDidCommitUpdateForScene:]
  -[SBSceneManager fetchOrCreateApplicationSceneHandleForRequest:]
  -[SBSceneManager dealloc]
  -[SBSceneManager window]
  -[SBSceneManager invalidate]
  -[SBSceneManager externalApplicationSceneHandles]
  -[SBSceneManager _shouldRequestSnapshotActionsForScene:]
  -[SBSceneManager sceneManager:willDestroyScene:]
  -[SBSceneManager removeObserver:]
  -[SBSceneManager externalForegroundApplicationSceneHandles]
  -[SBSceneManager _scene:willUpdateWithSettings:transitionContext:]
  -[SBSceneManager _layoutStateTransitionCoordinator]
  -[SBSceneManager daemonScenes]
  -[SBSceneManager sceneManager:interceptUpdateForScene:withNewSettings:]
  -[SBSceneManager addSlaveTransactionProvider:]
  -[SBSceneManager setHidden:]
  -[SBSceneManager _noteDidChangeToVisibility:previouslyExisted:forScene:]
  -[SBSceneManager _handleAction:forScene:]


SBSlideOverSessionMetric : SBAnalyticsStateMachineEventHandler
 @property  double startTimestamp
 @property  NSString *startReason
 @property  NSString *floatingBundleIdentifier

  // instance methods
  -[SBSlideOverSessionMetric _sendCoreAnalyticsEventWithStartReason:endReason:duration:floatingBundleIdentifier:doNotDisturbActive:hardwareKeyboardAttached:]
  -[SBSlideOverSessionMetric _bundleIdentifierForElementWithLayoutRole:fromContext:]
  -[SBSlideOverSessionMetric floatingBundleIdentifier]
  -[SBSlideOverSessionMetric .cxx_destruct]
  -[SBSlideOverSessionMetric initWithHeartbeatMetricPersistence:]
  -[SBSlideOverSessionMetric setStartReason:]
  -[SBSlideOverSessionMetric setFloatingBundleIdentifier:]
  -[SBSlideOverSessionMetric startReason]
  -[SBSlideOverSessionMetric sendCoreAnalyticsEventWithName:payload:]
  -[SBSlideOverSessionMetric startTimestamp]
  -[SBSlideOverSessionMetric setStartTimestamp:]


SBAppSwitcherPageServiceRemoteViewController : _UIRemoteViewController <_SBUISwitcherPageHostInterface>
  // class methods
  +[SBAppSwitcherPageServiceRemoteViewController exportedInterface]
  +[SBAppSwitcherPageServiceRemoteViewController serviceViewControllerInterface]

  // instance methods
  -[SBAppSwitcherPageServiceRemoteViewController __shouldRemoteViewControllerFenceOperations]


SBRequestFolderSnapshotsSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  BOOL snapshotRequested

  // instance methods
  -[SBRequestFolderSnapshotsSwitcherEventResponse isSnapshotRequested]
  -[SBRequestFolderSnapshotsSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBRequestFolderSnapshotsSwitcherEventResponse type]
  -[SBRequestFolderSnapshotsSwitcherEventResponse initWithSnapshotRequest:]
  -[SBRequestFolderSnapshotsSwitcherEventResponse setSnapshotRequested:]


SBRemovalSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  long long layoutRole
 @property  SBAppLayout *appLayout
 @property  long long reason
 @property  unsigned long phase

  // instance methods
  -[SBRemovalSwitcherModifierEvent appLayout]
  -[SBRemovalSwitcherModifierEvent phase]
  -[SBRemovalSwitcherModifierEvent layoutRole]
  -[SBRemovalSwitcherModifierEvent .cxx_destruct]
  -[SBRemovalSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBRemovalSwitcherModifierEvent reason]
  -[SBRemovalSwitcherModifierEvent type]
  -[SBRemovalSwitcherModifierEvent copyWithZone:]
  -[SBRemovalSwitcherModifierEvent initWithLayoutRole:inAppLayout:reason:phase:]


SBDashBoardSetupViewController : CSCoverSheetViewControllerBase <STTelephonyStateObserver, CSEventHandling, UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardSetupViewController presentationPriority]
  -[SBDashBoardSetupViewController presentationType]
  -[SBDashBoardSetupViewController .cxx_destruct]
  -[SBDashBoardSetupViewController setupView]
  -[SBDashBoardSetupViewController viewDidLoad]
  -[SBDashBoardSetupViewController _infoButtonTapped:]
  -[SBDashBoardSetupViewController viewDidAppear:]
  -[SBDashBoardSetupViewController aggregateBehavior:]
  -[SBDashBoardSetupViewController viewWillDisappear:]
  -[SBDashBoardSetupViewController gestureRecognizer:shouldReceiveTouch:]
  -[SBDashBoardSetupViewController viewWillAppear:]
  -[SBDashBoardSetupViewController handleEvent:]
  -[SBDashBoardSetupViewController dealloc]
  -[SBDashBoardSetupViewController _isSecurityResearchDevice]
  -[SBDashBoardSetupViewController loadView]
  -[SBDashBoardSetupViewController subscriptionInfoDidChangeForStateProvider:slot:]
  -[SBDashBoardSetupViewController initWithCoverSheetViewController:]
  -[SBDashBoardSetupViewController aggregateAppearance:]
  -[SBDashBoardSetupViewController viewDidDisappear:]
  -[SBDashBoardSetupViewController _startWifiScan]
  -[SBDashBoardSetupViewController _updateStringOrderingForLanguageChange]
  -[SBDashBoardSetupViewController _checkIfActivationLocked]
  -[SBDashBoardSetupViewController _didClickHomeAffordance:]
  -[SBDashBoardSetupViewController _handleHoverEvent:]
  -[SBDashBoardSetupViewController _updateLanguageFromTelephony]
  -[SBDashBoardSetupViewController _componentsRelevantToPointerSuppression]
  -[SBDashBoardSetupViewController isCyclingComponents:]
  -[SBDashBoardSetupViewController _stopCyclingComponents:]
  -[SBDashBoardSetupViewController _startCyclingComponents:withDelay:]
  -[SBDashBoardSetupViewController _componentsToStartCycling]
  -[SBDashBoardSetupViewController _cancelWifiScan]
  -[SBDashBoardSetupViewController _resetDisplayedLocalizedStringsImmediately:]
  -[SBDashBoardSetupViewController _animateComponentsForNewCycle]
  -[SBDashBoardSetupViewController _updateDisplayedStrings]
  -[SBDashBoardSetupViewController _incrementLocalizedStringsForNewCycle]
  -[SBDashBoardSetupViewController _importantLanguageIdentifiers]
  -[SBDashBoardSetupViewController _currentLanguageIdentifier]
  -[SBDashBoardSetupViewController _applicableIdentifierForDictionary:identifier:]
  -[SBDashBoardSetupViewController _displayStringForLocalizedString:fallbackString:]
  -[SBDashBoardSetupViewController _alignedMarketingOrdering]
  -[SBDashBoardSetupViewController _subscriptionInfoForSubscriptionDataSource:]
  -[SBDashBoardSetupViewController firstSupportedLanguageIdentifierInRegionalLanguageIdentifiers:countryCode:]
  -[SBDashBoardSetupViewController _subcriptionDataSourceDescription:]
  -[SBDashBoardSetupViewController _updateLanguageFromSubscriptionDataSource:]
  -[SBDashBoardSetupViewController _supportedLanguageIdentifierFromRegionalLanguageIdentifier:countryCode:]
  -[SBDashBoardSetupViewController _updateForLockInfo:]
  -[SBDashBoardSetupViewController _regulatoryInfoButtonTapped:]
  -[SBDashBoardSetupViewController _updateWifiPrimaryLanguageFromDiscoveredCountryCodes:]
  -[SBDashBoardSetupViewController _currentStringsDictionary]
  -[SBDashBoardSetupViewController _currentStoreRestrictedStringsDictionary]
  -[SBDashBoardSetupViewController _currentActivationLockStringsDictionary]


SBSwitcherSwipeUpToSwitcherFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSwitcherSwipeUpToSwitcherFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]


SBHomeGestureDismissableCoverSheetViewController : CSCoverSheetViewControllerBase <SBHomeGestureParticipantDelegate, SBSystemGestureRecognizerDelegate, SBFZStackParticipantDelegate>
 @property  SBHomeGesturePanGestureRecognizer *bottomEdgeRecognizer
 @property  BOOL wantsHomeGestureOwnership
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  SBFZStackParticipant *zStackParticipant
 @property  long long homeGestureParticipantIdentifier
 @property  long long zStackParticipantIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureDismissableCoverSheetViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBHomeGestureDismissableCoverSheetViewController _relinquishHomeGestureOwnership]
  -[SBHomeGestureDismissableCoverSheetViewController setHomeGestureParticipant:]
  -[SBHomeGestureDismissableCoverSheetViewController homeGestureParticipant]
  -[SBHomeGestureDismissableCoverSheetViewController zStackParticipant:updatePreferences:]
  -[SBHomeGestureDismissableCoverSheetViewController zStackParticipantDidChange:]
  -[SBHomeGestureDismissableCoverSheetViewController .cxx_destruct]
  -[SBHomeGestureDismissableCoverSheetViewController _requestHomeGestureOwnership]
  -[SBHomeGestureDismissableCoverSheetViewController _handleBottomEdgeGestureChanged:]
  -[SBHomeGestureDismissableCoverSheetViewController _handleBottomEdgeGestureEnded:]
  -[SBHomeGestureDismissableCoverSheetViewController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBHomeGestureDismissableCoverSheetViewController viewDidAppear:]
  -[SBHomeGestureDismissableCoverSheetViewController viewForSystemGestureRecognizer:]
  -[SBHomeGestureDismissableCoverSheetViewController _addOrRemoveGestureForCurrentSettings]
  -[SBHomeGestureDismissableCoverSheetViewController setWantsHomeGestureOwnership:]
  -[SBHomeGestureDismissableCoverSheetViewController zStackParticipant]
  -[SBHomeGestureDismissableCoverSheetViewController setZStackParticipant:]
  -[SBHomeGestureDismissableCoverSheetViewController gestureRecognizerShouldBegin:]
  -[SBHomeGestureDismissableCoverSheetViewController wantsHomeGestureOwnership]
  -[SBHomeGestureDismissableCoverSheetViewController viewWillDisappear:]
  -[SBHomeGestureDismissableCoverSheetViewController gestureRecognizer:shouldReceiveTouch:]
  -[SBHomeGestureDismissableCoverSheetViewController _handleBottomEdgeGestureBegan:]
  -[SBHomeGestureDismissableCoverSheetViewController homeGestureParticipantIdentifier]
  -[SBHomeGestureDismissableCoverSheetViewController zStackParticipantIdentifier]
  -[SBHomeGestureDismissableCoverSheetViewController _handleBottomEdgeGesture:]
  -[SBHomeGestureDismissableCoverSheetViewController shouldDismissForHomeGestureRecognizer:]
  -[SBHomeGestureDismissableCoverSheetViewController bottomEdgeRecognizer]
  -[SBHomeGestureDismissableCoverSheetViewController setBottomEdgeRecognizer:]


SBFloatingSwitcherSettings : PTSettings
 @property  BOOL showFloats
 @property  double switcherCardScale
 @property  double cardSpacing
 @property  double dimmingAlpha
 @property  double leadingEdgeRubberbandingRange
 @property  double perCardAdditionalScaleCoefficient
 @property  double scaleCurveExponent
 @property  double opacityMinimumDistanceThreshold
 @property  double opacityFadeDistance
 @property  double darkeningMinimumDistanceThreshold
 @property  double darkeningFadeDistance
 @property  double maximumDarkening
 @property  double titleAndIconOpacityMinimumDistanceThreshold
 @property  double titleAndIconOpacityFadeDistance
 @property  double titleOpacityMinimumDistanceThreshold
 @property  double titleOpacityFadeDistance
 @property  double overshootPullbackDelayOffscreen
 @property  double overshootPullbackDelayOnscreen
 @property  double rightEdgePeekDelay
 @property  double rightEdgePeekTimeout
 @property  SBFFluidBehaviorSettings *tongueContainerPositionAnimationSettings
 @property  SBFFluidBehaviorSettings *tongueContainerTransformAnimationSettings
 @property  SBFFluidBehaviorSettings *tongueCollapsedToExpandedAnimationSettings
 @property  SBFFluidBehaviorSettings *tongueExpandedToCollapsedAnimationSettings
 @property  MTLumaDodgePillSettings *homeAffordanceSettings

  // class methods
  +[SBFloatingSwitcherSettings settingsControllerModule]

  // instance methods
  -[SBFloatingSwitcherSettings showFloats]
  -[SBFloatingSwitcherSettings archiveValueForKey:]
  -[SBFloatingSwitcherSettings dimmingAlpha]
  -[SBFloatingSwitcherSettings setDimmingAlpha:]
  -[SBFloatingSwitcherSettings .cxx_destruct]
  -[SBFloatingSwitcherSettings setDefaultValues]
  -[SBFloatingSwitcherSettings switcherCardScale]
  -[SBFloatingSwitcherSettings setSwitcherCardScale:]
  -[SBFloatingSwitcherSettings setShowFloats:]
  -[SBFloatingSwitcherSettings setCardSpacing:]
  -[SBFloatingSwitcherSettings setLeadingEdgeRubberbandingRange:]
  -[SBFloatingSwitcherSettings setPerCardAdditionalScaleCoefficient:]
  -[SBFloatingSwitcherSettings setScaleCurveExponent:]
  -[SBFloatingSwitcherSettings setOpacityMinimumDistanceThreshold:]
  -[SBFloatingSwitcherSettings setOpacityFadeDistance:]
  -[SBFloatingSwitcherSettings setDarkeningMinimumDistanceThreshold:]
  -[SBFloatingSwitcherSettings setDarkeningFadeDistance:]
  -[SBFloatingSwitcherSettings setMaximumDarkening:]
  -[SBFloatingSwitcherSettings setTitleAndIconOpacityMinimumDistanceThreshold:]
  -[SBFloatingSwitcherSettings setTitleAndIconOpacityFadeDistance:]
  -[SBFloatingSwitcherSettings setTitleOpacityMinimumDistanceThreshold:]
  -[SBFloatingSwitcherSettings setTitleOpacityFadeDistance:]
  -[SBFloatingSwitcherSettings setOvershootPullbackDelayOffscreen:]
  -[SBFloatingSwitcherSettings setOvershootPullbackDelayOnscreen:]
  -[SBFloatingSwitcherSettings setRightEdgePeekDelay:]
  -[SBFloatingSwitcherSettings setRightEdgePeekTimeout:]
  -[SBFloatingSwitcherSettings tongueContainerPositionAnimationSettings]
  -[SBFloatingSwitcherSettings tongueContainerTransformAnimationSettings]
  -[SBFloatingSwitcherSettings tongueCollapsedToExpandedAnimationSettings]
  -[SBFloatingSwitcherSettings tongueExpandedToCollapsedAnimationSettings]
  -[SBFloatingSwitcherSettings homeAffordanceSettings]
  -[SBFloatingSwitcherSettings cardSpacing]
  -[SBFloatingSwitcherSettings leadingEdgeRubberbandingRange]
  -[SBFloatingSwitcherSettings perCardAdditionalScaleCoefficient]
  -[SBFloatingSwitcherSettings scaleCurveExponent]
  -[SBFloatingSwitcherSettings opacityMinimumDistanceThreshold]
  -[SBFloatingSwitcherSettings opacityFadeDistance]
  -[SBFloatingSwitcherSettings darkeningMinimumDistanceThreshold]
  -[SBFloatingSwitcherSettings darkeningFadeDistance]
  -[SBFloatingSwitcherSettings maximumDarkening]
  -[SBFloatingSwitcherSettings titleAndIconOpacityMinimumDistanceThreshold]
  -[SBFloatingSwitcherSettings titleAndIconOpacityFadeDistance]
  -[SBFloatingSwitcherSettings titleOpacityMinimumDistanceThreshold]
  -[SBFloatingSwitcherSettings titleOpacityFadeDistance]
  -[SBFloatingSwitcherSettings overshootPullbackDelayOffscreen]
  -[SBFloatingSwitcherSettings overshootPullbackDelayOnscreen]
  -[SBFloatingSwitcherSettings rightEdgePeekDelay]
  -[SBFloatingSwitcherSettings rightEdgePeekTimeout]
  -[SBFloatingSwitcherSettings setTongueContainerPositionAnimationSettings:]
  -[SBFloatingSwitcherSettings setTongueContainerTransformAnimationSettings:]
  -[SBFloatingSwitcherSettings setTongueCollapsedToExpandedAnimationSettings:]
  -[SBFloatingSwitcherSettings setTongueExpandedToCollapsedAnimationSettings:]
  -[SBFloatingSwitcherSettings setHomeAffordanceSettings:]


SBSwitcherDisplayItemRemovalResolutionRequest : NSObject
 @property  NSArray *displayItems

  // instance methods
  -[SBSwitcherDisplayItemRemovalResolutionRequest .cxx_destruct]
  -[SBSwitcherDisplayItemRemovalResolutionRequest displayItems]
  -[SBSwitcherDisplayItemRemovalResolutionRequest removalIntentTypeForDisplayItem:]
  -[SBSwitcherDisplayItemRemovalResolutionRequest setRemovalIntentType:forDisplayItem:]


SBOrientationAggdLogger : NSObject <FBSDisplayLayoutObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBOrientationAggdLogger _noteSignificantTimeChanged:]
  -[SBOrientationAggdLogger _keyboardWillHide:]
  -[SBOrientationAggdLogger .cxx_destruct]
  -[SBOrientationAggdLogger _bucketedElapsedTimeWithStartTime:]
  -[SBOrientationAggdLogger init]
  -[SBOrientationAggdLogger _keyboardDidShow:]
  -[SBOrientationAggdLogger layoutMonitor:didUpdateDisplayLayout:withContext:]
  -[SBOrientationAggdLogger _saveOrientationLockAggdValues]
  -[SBOrientationAggdLogger dealloc]
  -[SBOrientationAggdLogger _orientationLockChanged:]


SBWalletPrearmRecognizer : NSObject
  // instance methods
  -[SBWalletPrearmRecognizer .cxx_destruct]
  -[SBWalletPrearmRecognizer initWithDelegate:]
  -[SBWalletPrearmRecognizer _invalidate]
  -[SBWalletPrearmRecognizer dealloc]
  -[SBWalletPrearmRecognizer invalidate]
  -[SBWalletPrearmRecognizer _computeDoubleTapTimeout]
  -[SBWalletPrearmRecognizer _invalidateForFailureReason:]
  -[SBWalletPrearmRecognizer _invalidateForSuccess]
  -[SBWalletPrearmRecognizer startRecognizing]
  -[SBWalletPrearmRecognizer menuButtonSinglePress]
  -[SBWalletPrearmRecognizer menuButtonDoublePress]


SBReduceMotionGridSwitcherModifier : SBGridSwitcherModifier
  // instance methods
  -[SBReduceMotionGridSwitcherModifier wallpaperScale]
  -[SBReduceMotionGridSwitcherModifier homeScreenScale]


_SBCameraLaunchCondition : NSObject
 @property  BOOL met

  // class methods
  +[_SBCameraLaunchCondition conditionWithConditions:]
  +[_SBCameraLaunchCondition conditionWithValue:]

  // instance methods
  -[_SBCameraLaunchCondition isMet]
  -[_SBCameraLaunchCondition setMet:]


_SBAggregateCameraLaunchCondition : _SBCameraLaunchCondition
 @property  NSArray *conditions

  // instance methods
  -[_SBAggregateCameraLaunchCondition conditions]
  -[_SBAggregateCameraLaunchCondition .cxx_destruct]
  -[_SBAggregateCameraLaunchCondition isMet]
  -[_SBAggregateCameraLaunchCondition setConditions:]


SBCameraHardwareButton : NSObject <SBHIDButtonStateDelegate, PTSettingsKeyObserver, SBSceneManagerObserver>
 @property  BOOL disableDeferringToApplications
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCameraHardwareButton _deferCameraPressesToSpringBoard]
  -[SBCameraHardwareButton _shouldDeferToCoverSheetCamera]
  -[SBCameraHardwareButton performActionsForButtonLongPress:]
  -[SBCameraHardwareButton _reconfigureProcessMonitorForPredicates:]
  -[SBCameraHardwareButton .cxx_destruct]
  -[SBCameraHardwareButton _launchToCoverSheetCameraAfterWakingScreen:]
  -[SBCameraHardwareButton _startWaitingForLongPressCancellation]
  -[SBCameraHardwareButton _deferCameraPressesToPID:]
  -[SBCameraHardwareButton init]
  -[SBCameraHardwareButton _deferCameraPressesToApplication:]
  -[SBCameraHardwareButton sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBCameraHardwareButton _shouldDeferToNonSpringBoardProcess]
  -[SBCameraHardwareButton addProcessRequestingCameraButton:token:]
  -[SBCameraHardwareButton setDisableDeferringToApplications:]
  -[SBCameraHardwareButton disableDeferringToApplications]
  -[SBCameraHardwareButton _process:stateDidUpdate:]
  -[SBCameraHardwareButton _updateSettingsForReason:]
  -[SBCameraHardwareButton settings:changedValueForKey:]
  -[SBCameraHardwareButton performActionsForButtonUp:]
  -[SBCameraHardwareButton handleButtonEvent:]
  -[SBCameraHardwareButton _notifyCoreAnalyticsCameraDidLaunchToLockScreen:screenWasOff:]
  -[SBCameraHardwareButton _longPressDidCancel]
  -[SBCameraHardwareButton dealloc]
  -[SBCameraHardwareButton removeProcessRequestingCameraButton:]
  -[SBCameraHardwareButton _launchToUnlockedCameraAfterWakingScreen:]
  -[SBCameraHardwareButton _launchCameraIfReady]
  -[SBCameraHardwareButton performActionsForButtonDown:]
  -[SBCameraHardwareButton sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBCameraHardwareButton _deferCameraPressesToCameraApplication]
  -[SBCameraHardwareButton _reconfigureProcessMonitor]
  -[SBCameraHardwareButton _isCoverSheetCameraVisible]
  -[SBCameraHardwareButton _updateCameraDeferringRule]
  -[SBCameraHardwareButton _stopWaitingForLongPressCancellation]


SBCalendarApplicationIcon : SBHCalendarApplicationIcon

SBSplitRemovalSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSplitRemovalSwitcherModifier transitionWillBegin]
  -[SBSplitRemovalSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSplitRemovalSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBSplitRemovalSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBSplitRemovalSwitcherModifier frameForIndex:]
  -[SBSplitRemovalSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBSplitRemovalSwitcherModifier visibleAppLayouts]
  -[SBSplitRemovalSwitcherModifier scaleForLayoutRole:inAppLayout:]
  -[SBSplitRemovalSwitcherModifier .cxx_destruct]
  -[SBSplitRemovalSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBSplitRemovalSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBSplitRemovalSwitcherModifier handleTimerEvent:]
  -[SBSplitRemovalSwitcherModifier wallpaperStyle]
  -[SBSplitRemovalSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBSplitRemovalSwitcherModifier cornerRadiiForIndex:]
  -[SBSplitRemovalSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBSplitRemovalSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBSplitRemovalSwitcherModifier topMostLayoutElements]
  -[SBSplitRemovalSwitcherModifier transitionWillUpdate]
  -[SBSplitRemovalSwitcherModifier handleSceneReadyEvent:]
  -[SBSplitRemovalSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:layoutRoleToRemove:animationStyle:]


SBDodgingModifierEventResponse : SBChainableModifierEventResponse
 @property  unsigned long type

  // class methods
  +[SBDodgingModifierEventResponse newEventResponse]

  // instance methods
  -[SBDodgingModifierEventResponse setType:]
  -[SBDodgingModifierEventResponse type]


SBIdleTimerProxy : SBIdleTimerBase <SBIdleTimerObserving>
 @property  <SBIdleTimer> *sourceTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerProxy disabledIdleTimerProxy]

  // instance methods
  -[SBIdleTimerProxy _logExpirationTimeout:]
  -[SBIdleTimerProxy idleTimerDidRefresh:]
  -[SBIdleTimerProxy idleTimerDidWarn:]
  -[SBIdleTimerProxy .cxx_destruct]
  -[SBIdleTimerProxy idleTimerDidExpire:]
  -[SBIdleTimerProxy setActivated:]
  -[SBIdleTimerProxy idleTimerDidResetForUserAttention:]
  -[SBIdleTimerProxy reset]
  -[SBIdleTimerProxy isActivated]
  -[SBIdleTimerProxy initWithIdleTimerSource:]
  -[SBIdleTimerProxy sourceTimer]
  -[SBIdleTimerProxy isDisabled]
  -[SBIdleTimerProxy setSourceTimer:]


SBHighlightSwitcherModifier : SBSwitcherModifier
 @property  BOOL stylesCornerRadii

  // instance methods
  -[SBHighlightSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[SBHighlightSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHighlightSwitcherModifier .cxx_destruct]
  -[SBHighlightSwitcherModifier topMostLayoutRolesForAppLayout:]
  -[SBHighlightSwitcherModifier cornerRadiiForLayoutRole:inAppLayout:withCornerRadii:]
  -[SBHighlightSwitcherModifier topMostLayoutElements]
  -[SBHighlightSwitcherModifier handleHighlightEvent:]
  -[SBHighlightSwitcherModifier initWithLayoutRole:inAppLayout:listensForHighlightEvents:]
  -[SBHighlightSwitcherModifier stylesCornerRadii]
  -[SBHighlightSwitcherModifier setStylesCornerRadii:]


SBIconLaunchContext : NSObject
 @property  SBActivationSettings *activationSettings
 @property  NSSet *actions

  // instance methods
  -[SBIconLaunchContext setActions:]
  -[SBIconLaunchContext activationSettings]
  -[SBIconLaunchContext .cxx_destruct]
  -[SBIconLaunchContext actions]
  -[SBIconLaunchContext setActivationSettings:]


SBLockScreenAutoUnlockAggregateRule : SBAutoUnlockComposableRule
 @property  SBSyncController *syncController
 @property  SBFUserAuthenticationController *userAuthenticationController

  // instance methods
  -[SBLockScreenAutoUnlockAggregateRule userAuthenticationController]
  -[SBLockScreenAutoUnlockAggregateRule .cxx_destruct]
  -[SBLockScreenAutoUnlockAggregateRule _initWithUserAuthenticationController:syncController:]
  -[SBLockScreenAutoUnlockAggregateRule initWithUserAuthenticationController:]
  -[SBLockScreenAutoUnlockAggregateRule _setSyncController:]
  -[SBLockScreenAutoUnlockAggregateRule shouldAutoUnlockForSource:]
  -[SBLockScreenAutoUnlockAggregateRule _syncController]


SBCardDropSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  SBSwitcherDropRegionContext *context
 @property  unsigned long phase

  // instance methods
  -[SBCardDropSwitcherModifierEvent phase]
  -[SBCardDropSwitcherModifierEvent .cxx_destruct]
  -[SBCardDropSwitcherModifierEvent type]
  -[SBCardDropSwitcherModifierEvent copyWithZone:]
  -[SBCardDropSwitcherModifierEvent context]
  -[SBCardDropSwitcherModifierEvent initWithPhase:context:]


SBSplitDisplayItemCrossblurSwitcherModifier : SBSwitcherModifier
 @property  SBAppLayout *fromAppLayout
 @property  SBAppLayout *toAppLayout
 @property  long long layoutRole

  // instance methods
  -[SBSplitDisplayItemCrossblurSwitcherModifier frameForShelf:]
  -[SBSplitDisplayItemCrossblurSwitcherModifier containerLeafAppLayoutForShelf:]
  -[SBSplitDisplayItemCrossblurSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBSplitDisplayItemCrossblurSwitcherModifier handleTransitionEvent:]
  -[SBSplitDisplayItemCrossblurSwitcherModifier layoutRole]
  -[SBSplitDisplayItemCrossblurSwitcherModifier .cxx_destruct]
  -[SBSplitDisplayItemCrossblurSwitcherModifier homeAffordanceLayoutElementToPortalIntoShelf:]
  -[SBSplitDisplayItemCrossblurSwitcherModifier topMostLayoutElements]
  -[SBSplitDisplayItemCrossblurSwitcherModifier appLayoutContainingAppLayout:]
  -[SBSplitDisplayItemCrossblurSwitcherModifier handleEvent:]
  -[SBSplitDisplayItemCrossblurSwitcherModifier _previousHomeAffordanceAppLayout]
  -[SBSplitDisplayItemCrossblurSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:layoutRole:]
  -[SBSplitDisplayItemCrossblurSwitcherModifier fromAppLayout]
  -[SBSplitDisplayItemCrossblurSwitcherModifier toAppLayout]


SBExitSlideOverPeekSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBExitSlideOverPeekSwitcherModifier frameForIndex:]
  -[SBExitSlideOverPeekSwitcherModifier .cxx_destruct]
  -[SBExitSlideOverPeekSwitcherModifier initWithTransitionID:floatingAppLayout:floatingConfiguration:]


SBElasticSliderMaterialWrapperView : UIView
 @property  CCUIContinuousSliderView<SBElasticGlyphView> *sliderView
 @property  MTMaterialShadowView *baseMaterialView
 @property  UIView *maskView
 @property  long long shadowMode

  // instance methods
  -[SBElasticSliderMaterialWrapperView initWithCoder:]
  -[SBElasticSliderMaterialWrapperView _setContinuousCornerRadius:]
  -[SBElasticSliderMaterialWrapperView .cxx_destruct]
  -[SBElasticSliderMaterialWrapperView layoutSubviews]
  -[SBElasticSliderMaterialWrapperView maskView]
  -[SBElasticSliderMaterialWrapperView initWithFrame:]
  -[SBElasticSliderMaterialWrapperView sliderView]
  -[SBElasticSliderMaterialWrapperView _updateShadowMode]
  -[SBElasticSliderMaterialWrapperView initWithSliderView:]
  -[SBElasticSliderMaterialWrapperView baseMaterialView]
  -[SBElasticSliderMaterialWrapperView setShadowMode:]
  -[SBElasticSliderMaterialWrapperView shadowMode]


SBSoundPreferences : NSObject
  // class methods
  +[SBSoundPreferences calendarAlarmPath]
  +[SBSoundPreferences vibrateWhenRinging]
  +[SBSoundPreferences vibrateWhenSilent]
  +[SBSoundPreferences _soundDefaults]
  +[SBSoundPreferences ringtoneIdentifier]
  +[SBSoundPreferences ringtonePath]


SBHomeHardwareButtonLongPressDurationAssertion : NSObject <BSDescriptionProviding>
 @property  double duration
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeHardwareButtonLongPressDurationAssertion .cxx_destruct]
  -[SBHomeHardwareButtonLongPressDurationAssertion succinctDescriptionBuilder]
  -[SBHomeHardwareButtonLongPressDurationAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBHomeHardwareButtonLongPressDurationAssertion descriptionWithMultilinePrefix:]
  -[SBHomeHardwareButtonLongPressDurationAssertion succinctDescription]
  -[SBHomeHardwareButtonLongPressDurationAssertion reason]
  -[SBHomeHardwareButtonLongPressDurationAssertion duration]
  -[SBHomeHardwareButtonLongPressDurationAssertion initWithReason:duration:]


SBBatteryDeviceCountTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBatteryDeviceCountTestRecipe title]
  -[SBBatteryDeviceCountTestRecipe handleVolumeIncrease]
  -[SBBatteryDeviceCountTestRecipe handleVolumeDecrease]


SBGreenController : NSObject
  // instance methods
  -[SBGreenController .cxx_destruct]
  -[SBGreenController init]
  -[SBGreenController performPreBuddyWork]
  -[SBGreenController _readFileStateFromDisk]
  -[SBGreenController _defaultValuesDictionaryAndState:]
  -[SBGreenController _writeGreenValuesToDisk:withState:]
  -[SBGreenController _effectivePlaceIsAmbiguous:]
  -[SBGreenController _deviceRegionCode]


SBTapToWakeController : NSObject <UIGestureRecognizerDelegate>
 @property  SBFTapToWakeGestureRecognizer *tapToWakeGestureRecognizer
 @property  SBFTapToWakeGestureRecognizer *pencilToWakeGestureRecognizer
 @property  SBIdleTimerDefaults *idleTimerDefaults
 @property  <SBTapToWakeDelegate> *delegate
 @property  BOOL screenOff
 @property  BOOL shouldTapToWake
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTapToWakeController isTapToWakeSupported]

  // instance methods
  -[SBTapToWakeController setScreenOff:]
  -[SBTapToWakeController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBTapToWakeController shouldTapToWake]
  -[SBTapToWakeController .cxx_destruct]
  -[SBTapToWakeController _evaluateEnablement]
  -[SBTapToWakeController setDelegate:]
  -[SBTapToWakeController idleTimerDefaults]
  -[SBTapToWakeController init]
  -[SBTapToWakeController delegate]
  -[SBTapToWakeController tapToWakeDidRecognize:]
  -[SBTapToWakeController pencilToWakeDidRecognize:]
  -[SBTapToWakeController isScreenOff]
  -[SBTapToWakeController tapToWakeGestureRecognizer]
  -[SBTapToWakeController setTapToWakeGestureRecognizer:]
  -[SBTapToWakeController pencilToWakeGestureRecognizer]
  -[SBTapToWakeController setPencilToWakeGestureRecognizer:]
  -[SBTapToWakeController setIdleTimerDefaults:]


SBCommandTabIconView : SBIconView
  // class methods
  +[SBCommandTabIconView supportsCursorInteraction]


SBRenderOverlayRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBRenderOverlayRecipe load]

  // instance methods
  -[SBRenderOverlayRecipe .cxx_destruct]
  -[SBRenderOverlayRecipe title]
  -[SBRenderOverlayRecipe handleVolumeIncrease]
  -[SBRenderOverlayRecipe handleVolumeDecrease]


SBRemovalDodgingModifier : SBDodgingModifier
 @property  NSString *identifier
 @property  NSUUID *completionIdentifier

  // instance methods
  -[SBRemovalDodgingModifier initWithIdentifier:]
  -[SBRemovalDodgingModifier .cxx_destruct]
  -[SBRemovalDodgingModifier identifier]
  -[SBRemovalDodgingModifier handleRemovalEvent:]
  -[SBRemovalDodgingModifier setIdentifier:]
  -[SBRemovalDodgingModifier setCompletionIdentifier:]
  -[SBRemovalDodgingModifier handleAnimationCompletionEvent:]
  -[SBRemovalDodgingModifier modelForInvalidatedModel:]
  -[SBRemovalDodgingModifier animationBehaviorModeForIdentifier:]
  -[SBRemovalDodgingModifier completionIdentifier]


SBDistanceFieldView : UIView
 @property  NSString *renderMode
 @property  BOOL invertsShape
 @property  ^{CGColor=} foregroundColor
 @property  double offset
 @property  double sharpness
 @property  double lineWidth

  // class methods
  +[SBDistanceFieldView layerClass]

  // instance methods
  -[SBDistanceFieldView setLineWidth:]
  -[SBDistanceFieldView foregroundColor]
  -[SBDistanceFieldView offset]
  -[SBDistanceFieldView setForegroundColor:]
  -[SBDistanceFieldView lineWidth]
  -[SBDistanceFieldView _shouldAnimatePropertyWithKey:]
  -[SBDistanceFieldView sharpness]
  -[SBDistanceFieldView setRenderMode:]
  -[SBDistanceFieldView renderMode]
  -[SBDistanceFieldView setOffset:]
  -[SBDistanceFieldView setSharpness:]
  -[SBDistanceFieldView setInvertsShape:]
  -[SBDistanceFieldView invertsShape]


SBSwitcherTransitionRequest : NSObject <BSDescriptionProviding, NSMutableCopying>
 @property  SBAppLayout *appLayout
 @property  long long appLayoutEnvironment
 @property  long long unlockedEnvironmentMode
 @property  long long preferredInterfaceOrientation
 @property  long long floatingConfiguration
 @property  long long floatingSwitcherVisible
 @property  long long animationDisabled
 @property  long long autoPIPDisabled
 @property  long long source
 @property  long long peekConfiguration
 @property  NSString *bundleIdentifierForAppExpose
 @property  BOOL sceneUpdatesOnly
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSwitcherTransitionRequest requestForActivatingAppLayout:]
  +[SBSwitcherTransitionRequest requestForActivatingHomeScreen]
  +[SBSwitcherTransitionRequest requestForActivatingAppSwitcher]
  +[SBSwitcherTransitionRequest requestForActivatingFloatingSwitcher]
  +[SBSwitcherTransitionRequest requestForDeactivatingFloatingSwitcher]
  +[SBSwitcherTransitionRequest requestForStashingFloatingApplicationWithFloatingConfiguration:]

  // instance methods
  -[SBSwitcherTransitionRequest animationDisabled]
  -[SBSwitcherTransitionRequest appLayout]
  -[SBSwitcherTransitionRequest setAnimationDisabled:]
  -[SBSwitcherTransitionRequest setPreferredInterfaceOrientation:]
  -[SBSwitcherTransitionRequest setAppLayout:]
  -[SBSwitcherTransitionRequest .cxx_destruct]
  -[SBSwitcherTransitionRequest succinctDescriptionBuilder]
  -[SBSwitcherTransitionRequest preferredInterfaceOrientation]
  -[SBSwitcherTransitionRequest floatingConfiguration]
  -[SBSwitcherTransitionRequest descriptionBuilderWithMultilinePrefix:]
  -[SBSwitcherTransitionRequest init]
  -[SBSwitcherTransitionRequest descriptionWithMultilinePrefix:]
  -[SBSwitcherTransitionRequest succinctDescription]
  -[SBSwitcherTransitionRequest setSource:]
  -[SBSwitcherTransitionRequest peekConfiguration]
  -[SBSwitcherTransitionRequest mutableCopyWithZone:]
  -[SBSwitcherTransitionRequest source]
  -[SBSwitcherTransitionRequest unlockedEnvironmentMode]
  -[SBSwitcherTransitionRequest setUnlockedEnvironmentMode:]
  -[SBSwitcherTransitionRequest setFloatingSwitcherVisible:]
  -[SBSwitcherTransitionRequest setFloatingConfiguration:]
  -[SBSwitcherTransitionRequest appLayoutEnvironment]
  -[SBSwitcherTransitionRequest setAppLayoutEnvironment:]
  -[SBSwitcherTransitionRequest floatingSwitcherVisible]
  -[SBSwitcherTransitionRequest autoPIPDisabled]
  -[SBSwitcherTransitionRequest setAutoPIPDisabled:]
  -[SBSwitcherTransitionRequest setPeekConfiguration:]
  -[SBSwitcherTransitionRequest bundleIdentifierForAppExpose]
  -[SBSwitcherTransitionRequest setBundleIdentifierForAppExpose:]
  -[SBSwitcherTransitionRequest sceneUpdatesOnly]
  -[SBSwitcherTransitionRequest setSceneUpdatesOnly:]


SBMutableSwitcherTransitionRequest : SBSwitcherTransitionRequest
 @property  SBAppLayout *appLayout
 @property  long long appLayoutEnvironment
 @property  long long unlockedEnvironmentMode
 @property  long long preferredInterfaceOrientation
 @property  long long floatingConfiguration
 @property  long long floatingSwitcherVisible
 @property  long long animationDisabled
 @property  long long autoPIPDisabled
 @property  long long source
 @property  long long peekConfiguration
 @property  NSString *bundleIdentifierForAppExpose
 @property  BOOL sceneUpdatesOnly


SBPlusSwitcherPageContentView : UIView <SBAppSwitcherPageContentView>
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  long long orientation
 @property  BOOL contentRequiresGroupOpacity
 @property  BOOL active
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPlusSwitcherPageContentView setOrientation:]
  -[SBPlusSwitcherPageContentView setVisible:]
  -[SBPlusSwitcherPageContentView isActive]
  -[SBPlusSwitcherPageContentView .cxx_destruct]
  -[SBPlusSwitcherPageContentView layoutSubviews]
  -[SBPlusSwitcherPageContentView contentRequiresGroupOpacity]
  -[SBPlusSwitcherPageContentView isVisible]
  -[SBPlusSwitcherPageContentView setCornerRadius:]
  -[SBPlusSwitcherPageContentView setMaskedCorners:]
  -[SBPlusSwitcherPageContentView orientation]
  -[SBPlusSwitcherPageContentView initWithFrame:]
  -[SBPlusSwitcherPageContentView cornerRadius]
  -[SBPlusSwitcherPageContentView setActive:]
  -[SBPlusSwitcherPageContentView invalidate]
  -[SBPlusSwitcherPageContentView maskedCorners]


SBDashBoardCameraPageViewController : CSPageViewController <SBDashBoardHostedAppViewControllerDelegate, SBSceneHandleObserver, SBSystemGestureRecognizerDelegate, SBHomeGesturePanGestureRecognizerInterfaceDelegate, SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBHomeGestureInteractionDelegate, CSApplicationHosting>
 @property  BOOL wantsHomeGestureOwnership
 @property  SBHomeGestureInteraction *homeGestureInteraction
 @property  UIViewFloatAnimatableProperty *scaleProperty
 @property  UIViewFloatAnimatableProperty *alphaProperty
 @property  SBFFluidBehaviorSettings *scaleSettings
 @property  SBFFluidBehaviorSettings *alphaSettings
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  SBFZStackParticipant *zStackParticipant
 @property  NSSet *actionsToDeliver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDashBoardCameraPageViewController isAvailableForConfiguration]
  +[SBDashBoardCameraPageViewController requiredCapabilities]

  // instance methods
  -[SBDashBoardCameraPageViewController touchInterfaceOrientationForGestureRecognizer:]
  -[SBDashBoardCameraPageViewController setActionsToDeliver:]
  -[SBDashBoardCameraPageViewController homeGestureInteraction]
  -[SBDashBoardCameraPageViewController homeGestureInteraction:systemGestureTypeForType:]
  -[SBDashBoardCameraPageViewController handlesRotationIndependentOfCoverSheet]
  -[SBDashBoardCameraPageViewController actionsToDeliver]
  -[SBDashBoardCameraPageViewController _relinquishHomeGestureOwnership]
  -[SBDashBoardCameraPageViewController setHomeGestureParticipant:]
  -[SBDashBoardCameraPageViewController homeGestureParticipant]
  -[SBDashBoardCameraPageViewController presentationAltitude]
  -[SBDashBoardCameraPageViewController zStackParticipant:updatePreferences:]
  -[SBDashBoardCameraPageViewController _createProperties]
  -[SBDashBoardCameraPageViewController homeGestureInteraction:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBDashBoardCameraPageViewController zStackParticipantDidChange:]
  -[SBDashBoardCameraPageViewController .cxx_destruct]
  -[SBDashBoardCameraPageViewController canHostAnApp]
  -[SBDashBoardCameraPageViewController homeGestureInteractionEnded:]
  -[SBDashBoardCameraPageViewController _requestHomeGestureOwnership]
  -[SBDashBoardCameraPageViewController requestedDismissalType]
  -[SBDashBoardCameraPageViewController homeGestureInteractionBegan:]
  -[SBDashBoardCameraPageViewController wouldHandleButtonEvent:]
  -[SBDashBoardCameraPageViewController setAlphaSettings:]
  -[SBDashBoardCameraPageViewController hostedAppSceneHandles]
  -[SBDashBoardCameraPageViewController conformsToSBApplicationHosting]
  -[SBDashBoardCameraPageViewController _prewarmThreshold]
  -[SBDashBoardCameraPageViewController setScaleSettings:]
  -[SBDashBoardCameraPageViewController homeGestureInteractionCancelled:]
  -[SBDashBoardCameraPageViewController _setSceneGrabberHidden:]
  -[SBDashBoardCameraPageViewController setHomeGestureInteraction:]
  -[SBDashBoardCameraPageViewController _updateForPropertyChanged]
  -[SBDashBoardCameraPageViewController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBDashBoardCameraPageViewController viewDidAppear:]
  -[SBDashBoardCameraPageViewController _noteUserLaunchEventTime]
  -[SBDashBoardCameraPageViewController _prewarmCamera]
  -[SBDashBoardCameraPageViewController _convertTranslationFromContainerOrientationToContentOrientation:]
  -[SBDashBoardCameraPageViewController _endPrewarmBackoffPeriod]
  -[SBDashBoardCameraPageViewController isHostingAnApp]
  -[SBDashBoardCameraPageViewController alphaProperty]
  -[SBDashBoardCameraPageViewController _coolCameraIfNecessary]
  -[SBDashBoardCameraPageViewController _transitionAppViewWithProgress:]
  -[SBDashBoardCameraPageViewController _shouldPrelaunchOnSwipe]
  -[SBDashBoardCameraPageViewController _shouldPrewarmOnSwipe]
  -[SBDashBoardCameraPageViewController _makeApplicationStatic]
  -[SBDashBoardCameraPageViewController _takeHiddenAssertionForHomeGrabber:]
  -[SBDashBoardCameraPageViewController _updateCameraScale:dimmingAlpha:]
  -[SBDashBoardCameraPageViewController viewForSystemGestureRecognizer:]
  -[SBDashBoardCameraPageViewController _updateCameraScale:dimmingAlpha:interactive:]
  -[SBDashBoardCameraPageViewController _addOrRemoveGestureForCurrentSettings]
  -[SBDashBoardCameraPageViewController hostedAppWillRotateToInterfaceOrientation:]
  -[SBDashBoardCameraPageViewController setWantsHomeGestureOwnership:]
  -[SBDashBoardCameraPageViewController scaleProperty]
  -[SBDashBoardCameraPageViewController _updateCameraScale:interactive:]
  -[SBDashBoardCameraPageViewController alphaSettings]
  -[SBDashBoardCameraPageViewController aggregateBehavior:]
  -[SBDashBoardCameraPageViewController _resetAfterInteractiveGestureToCameraVisible:]
  -[SBDashBoardCameraPageViewController homeGestureInteraction:shouldReceiveTouch:]
  -[SBDashBoardCameraPageViewController viewWillMoveToWindow:]
  -[SBDashBoardCameraPageViewController zStackParticipant]
  -[SBDashBoardCameraPageViewController setZStackParticipant:]
  -[SBDashBoardCameraPageViewController hostedAppSceneHandle]
  -[SBDashBoardCameraPageViewController conformsToCSApplicationHosting]
  -[SBDashBoardCameraPageViewController homeGrabberViewDidReceiveClick:]
  -[SBDashBoardCameraPageViewController customScreenEdgePanGestureRecognizerForHomeGestureInteraction:]
  -[SBDashBoardCameraPageViewController homeGestureInteraction:shouldBeginGestureRecognizerOfType:]
  -[SBDashBoardCameraPageViewController wantsHomeGestureOwnership]
  -[SBDashBoardCameraPageViewController setAlphaProperty:]
  -[SBDashBoardCameraPageViewController homeGestureInteractionChanged:]
  -[SBDashBoardCameraPageViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDashBoardCameraPageViewController viewWillDisappear:]
  -[SBDashBoardCameraPageViewController didTransitionToVisible:]
  -[SBDashBoardCameraPageViewController viewWillAppear:]
  -[SBDashBoardCameraPageViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[SBDashBoardCameraPageViewController handleEvent:]
  -[SBDashBoardCameraPageViewController updateTransitionToVisible:progress:mode:]
  -[SBDashBoardCameraPageViewController willTransitionToVisible:]
  -[SBDashBoardCameraPageViewController _bailIfFaceTimeCallComesIn]
  -[SBDashBoardCameraPageViewController _prelaunchThreshold]
  -[SBDashBoardCameraPageViewController _prepareForInteractiveGestureToCameraVisible:]
  -[SBDashBoardCameraPageViewController _shouldCancelInteractiveDismissGesture]
  -[SBDashBoardCameraPageViewController loadView]
  -[SBDashBoardCameraPageViewController pageRole]
  -[SBDashBoardCameraPageViewController _updateDimmingAlpha:interactive:]
  -[SBDashBoardCameraPageViewController _relinquishHiddenAssertionForHomeGrabber:]
  -[SBDashBoardCameraPageViewController aggregateAppearance:]
  -[SBDashBoardCameraPageViewController viewDidDisappear:]
  -[SBDashBoardCameraPageViewController dashBoardHostedAppViewController:shouldTransitionToMode:]
  -[SBDashBoardCameraPageViewController scaleSettings]
  -[SBDashBoardCameraPageViewController requestedDismissalSettings]
  -[SBDashBoardCameraPageViewController setScaleProperty:]


SBPBAppLayoutList : PBCodable <NSCopying>
  // instance methods
  -[SBPBAppLayoutList .cxx_destruct]
  -[SBPBAppLayoutList dictionaryRepresentation]
  -[SBPBAppLayoutList writeTo:]
  -[SBPBAppLayoutList isEqual:]
  -[SBPBAppLayoutList readFrom:]
  -[SBPBAppLayoutList copyWithZone:]


SBRecordingIndicatorSettings : PTSettings
 @property  long long sensorType

  // class methods
  +[SBRecordingIndicatorSettings settingsControllerModule]

  // instance methods
  -[SBRecordingIndicatorSettings setDefaultValues]
  -[SBRecordingIndicatorSettings setSensorType:]
  -[SBRecordingIndicatorSettings sensorType]


SBFolderStatsQueryableMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFolderStatsQueryableMetric handleEvent:withContext:]
  -[SBFolderStatsQueryableMetric .cxx_destruct]
  -[SBFolderStatsQueryableMetric init]


SBPeekToOffscreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBPeekToOffscreenSwitcherModifier frameForIndex:]
  -[SBPeekToOffscreenSwitcherModifier .cxx_destruct]
  -[SBPeekToOffscreenSwitcherModifier isSwitcherWindowVisible]
  -[SBPeekToOffscreenSwitcherModifier setState:]
  -[SBPeekToOffscreenSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBPeekToOffscreenSwitcherModifier initWithTransitionID:peekingAppLayout:peekConfiguration:spaceConfiguration:]


SBOverrideAppLayoutsSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBOverrideAppLayoutsSwitcherModifier .cxx_destruct]
  -[SBOverrideAppLayoutsSwitcherModifier setState:]
  -[SBOverrideAppLayoutsSwitcherModifier appLayoutsGenerationCount]
  -[SBOverrideAppLayoutsSwitcherModifier didMoveToParentModifier:]
  -[SBOverrideAppLayoutsSwitcherModifier appLayouts]
  -[SBOverrideAppLayoutsSwitcherModifier initWithAppLayouts:]


SBLoginAppContainerOverlayWrapperView : UIView
 @property  SBLockOverlayView *overlayView

  // instance methods
  -[SBLoginAppContainerOverlayWrapperView overlayView]
  -[SBLoginAppContainerOverlayWrapperView .cxx_destruct]
  -[SBLoginAppContainerOverlayWrapperView layoutSubviews]
  -[SBLoginAppContainerOverlayWrapperView initWithFrame:overlayView:]


SBEntityRemovalSlideOffscreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalSlideOffscreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier frameForIndex:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier _layoutSettings]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier handleTimerEvent:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier didMoveToParentModifier:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier transitionWillUpdate]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier initWithTransitionID:appLayout:direction:animationSettings:multitaskingModifier:]


SBUserNotificationCenter : NSObject
  // class methods
  +[SBUserNotificationCenter dispatchUserNotification:flags:replyPort:auditToken:]
  +[SBUserNotificationCenter startUserNotificationCenter]
  +[SBUserNotificationCenter _userNotificationDone:]


SBBulletinSpokenObserverGateway : NSObject <BBObserverDelegate, AFSiriAnnouncementRequestCapabilityObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBulletinSpokenObserverGateway sharedInstance]

  // instance methods
  -[SBBulletinSpokenObserverGateway .cxx_destruct]
  -[SBBulletinSpokenObserverGateway eligibleAnnouncementRequestTypesChanged:onPlatform:]
  -[SBBulletinSpokenObserverGateway init]
  -[SBBulletinSpokenObserverGateway availableAnnouncementRequestTypesChanged:onPlatform:]
  -[SBBulletinSpokenObserverGateway observer:addBulletin:forFeed:playLightsAndSirens:withReply:]


SBMainDisplaySceneLayoutWindow : SBSceneLayoutWindow
  // instance methods
  -[SBMainDisplaySceneLayoutWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBMainDisplaySceneLayoutWindow _usesWindowServerHitTesting]


SBSensorActivityAttribution : SBActivityAttribution <SBFSensorActivityAttribution>
 @property  long long sensor
 @property  NSString *displayName
 @property  NSString *bundleIdentifier
 @property  NSString *attributionGroup
 @property  NSString *bundleIdentifierMatchingDisplayName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSensorActivityAttribution initWithSBActivityAttribution:sensor:]
  -[SBSensorActivityAttribution succinctDescriptionBuilder]
  -[SBSensorActivityAttribution descriptionBuilderWithMultilinePrefix:]
  -[SBSensorActivityAttribution isEqual:]
  -[SBSensorActivityAttribution descriptionWithMultilinePrefix:]
  -[SBSensorActivityAttribution succinctDescription]
  -[SBSensorActivityAttribution initWithSTActivityAttribution:sensor:]
  -[SBSensorActivityAttribution sensor]


SBPIPBackdropView : UIView
 @property  NSString *groupName
 @property  double gaussianBlurRadius
 @property  double backdropScale

  // class methods
  +[SBPIPBackdropView layerClass]

  // instance methods
  -[SBPIPBackdropView setGroupName:]
  -[SBPIPBackdropView .cxx_destruct]
  -[SBPIPBackdropView _shouldAnimatePropertyWithKey:]
  -[SBPIPBackdropView _updateFilters]
  -[SBPIPBackdropView groupName]
  -[SBPIPBackdropView initWithFrame:]
  -[SBPIPBackdropView backdropScale]
  -[SBPIPBackdropView dealloc]
  -[SBPIPBackdropView setGaussianBlurRadius:]
  -[SBPIPBackdropView setBackdropScale:]
  -[SBPIPBackdropView gaussianBlurRadius]


SBIdleTimerDescriptorFactory : NSObject
 @property  SpringBoard *springBoard
 @property  SBAlertItemsController *alertItemsController
 @property  SBBacklightController *backlightController
 @property  SBPrototypeController *prototypeController
 @property  SBIdleTimerSettings *idleTimerPrototypeSettings
 @property  SBLockScreenManager *lockScreenManager
 @property  SBMainWorkspace *mainWorkspace
 @property  SBUIBiometricResource *biometricResource
 @property  SBTelephonyManager *telephonyManager
 @property  SBConferenceManager *conferenceManager

  // class methods
  +[SBIdleTimerDescriptorFactory disabledIdleTimerDescriptor]

  // instance methods
  -[SBIdleTimerDescriptorFactory _backlightController]
  -[SBIdleTimerDescriptorFactory _setBacklightController:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForFaceDown:]
  -[SBIdleTimerDescriptorFactory _setLockScreenManager:]
  -[SBIdleTimerDescriptorFactory idleTimerDescriptorForBehavior:]
  -[SBIdleTimerDescriptorFactory _lockScreenManager]
  -[SBIdleTimerDescriptorFactory initWithGlobalStateMonitor:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForDuration:descriptor:]
  -[SBIdleTimerDescriptorFactory _isIdleDurationForever:]
  -[SBIdleTimerDescriptorFactory .cxx_destruct]
  -[SBIdleTimerDescriptorFactory sanitizeDescriptorForLockscreenDefaults:]
  -[SBIdleTimerDescriptorFactory _shouldUseAttentionSensor]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForBatterySaverMode:]
  -[SBIdleTimerDescriptorFactory _biometricResource]
  -[SBIdleTimerDescriptorFactory sanitizeSettingsAfterInitialSetup:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForWarnInterval:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForPowerDefaults:]
  -[SBIdleTimerDescriptorFactory _updateIdleTimerSettingsWarnInterval:totalInterval:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForSecurityDefaults:]
  -[SBIdleTimerDescriptorFactory _idleTimerPrototypeSettings]
  -[SBIdleTimerDescriptorFactory _prototypeController]
  -[SBIdleTimerDescriptorFactory _setPrototypeController:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForAutoLockTimeout:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForPrototypeSettings:]
  -[SBIdleTimerDescriptorFactory sanitizeWarnInterval:]
  -[SBIdleTimerDescriptorFactory sanitizeTotalDuration:]
  -[SBIdleTimerDescriptorFactory _conferenceManager]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForUnlockedWithMesa:]
  -[SBIdleTimerDescriptorFactory _telephonyManager]
  -[SBIdleTimerDescriptorFactory sanitizeSettingsAfterSetup:duration:]
  -[SBIdleTimerDescriptorFactory _setBiometricResource:]
  -[SBIdleTimerDescriptorFactory _setConferenceManager:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForThermalBlockedMode:]
  -[SBIdleTimerDescriptorFactory _setTelephonyManager:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForActiveClientConfiguration:]
  -[SBIdleTimerDescriptorFactory _springBoard]
  -[SBIdleTimerDescriptorFactory _setMainWorkspace:]
  -[SBIdleTimerDescriptorFactory _setIdleTimerPrototypeSettings:]
  -[SBIdleTimerDescriptorFactory _alertItemsController]
  -[SBIdleTimerDescriptorFactory _mainWorkspace]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForDefaultWarnInterval:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsWithCustomTimeouts:fromBehavior:]
  -[SBIdleTimerDescriptorFactory _setAlertItemsController:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForTelephony:]
  -[SBIdleTimerDescriptorFactory _setSpringBoard:]


SBIdleBehavior : NSObject <SBFIdleTimerBehaviorProviding>
 @property  long long duration
 @property  long long warnMode
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleBehavior idleTimerMode]
  -[SBIdleBehavior idleWarnMode]
  -[SBIdleBehavior idleTimerDuration]
  -[SBIdleBehavior duration]
  -[SBIdleBehavior warnMode]
  -[SBIdleBehavior initWithDuration:warnMode:]


SBRemoteTransientOverlayDismissalRequest : NSObject
 @property  BOOL animated
 @property  @? completionHandler
 @property  BOOL shouldInvalidatePresentation
 @property  SBTransientOverlayViewController *viewController

  // instance methods
  -[SBRemoteTransientOverlayDismissalRequest setAnimated:]
  -[SBRemoteTransientOverlayDismissalRequest viewController]
  -[SBRemoteTransientOverlayDismissalRequest isAnimated]
  -[SBRemoteTransientOverlayDismissalRequest initWithViewController:]
  -[SBRemoteTransientOverlayDismissalRequest .cxx_destruct]
  -[SBRemoteTransientOverlayDismissalRequest setCompletionHandler:]
  -[SBRemoteTransientOverlayDismissalRequest completionHandler]
  -[SBRemoteTransientOverlayDismissalRequest copyWithZone:]
  -[SBRemoteTransientOverlayDismissalRequest shouldInvalidatePresentation]
  -[SBRemoteTransientOverlayDismissalRequest setShouldInvalidatePresentation:]


SBLegacyVOIPRefreshWakeTracker : NSObject <SBApplicationWakeLifecycleHandling>
 @property  RBSAssertion *appKeepAliveAssertion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLegacyVOIPRefreshWakeTracker .cxx_destruct]
  -[SBLegacyVOIPRefreshWakeTracker endWake]
  -[SBLegacyVOIPRefreshWakeTracker dealloc]
  -[SBLegacyVOIPRefreshWakeTracker wakeDuration]
  -[SBLegacyVOIPRefreshWakeTracker setAppKeepAliveAssertion:]
  -[SBLegacyVOIPRefreshWakeTracker _createAssertionForBundleID:]
  -[SBLegacyVOIPRefreshWakeTracker beginWakeForApplication:]
  -[SBLegacyVOIPRefreshWakeTracker appKeepAliveAssertion]


SBInteractiveScreenshotGestureMultiPartAnimation : NSObject
  // instance methods
  -[SBInteractiveScreenshotGestureMultiPartAnimation .cxx_destruct]
  -[SBInteractiveScreenshotGestureMultiPartAnimation initWithCompletionHandler:]
  -[SBInteractiveScreenshotGestureMultiPartAnimation beginAnimationWithIdentifier:]
  -[SBInteractiveScreenshotGestureMultiPartAnimation completeAnimationWithIdentifier:finished:retargeted:]


SBHeartbeatMetricPersistence : NSObject
 @property  NSURL *persistenceURL
 @property  double persistenceDelay
 @property  double persistenceLeeway
 @property  NSDictionary *metricsByDatestamp

  // class methods
  +[SBHeartbeatMetricPersistence defaultPersistenceURL]

  // instance methods
  -[SBHeartbeatMetricPersistence persistenceURL]
  -[SBHeartbeatMetricPersistence .cxx_destruct]
  -[SBHeartbeatMetricPersistence init]
  -[SBHeartbeatMetricPersistence migrateDataFromDefaultsIfNeeded:]
  -[SBHeartbeatMetricPersistence trackInteractionWithFeatureNamed:duration:]
  -[SBHeartbeatMetricPersistence initWithPersistenceURL:persistenceDelay:persistenceLeeway:]
  -[SBHeartbeatMetricPersistence _queue_initializeIfNeeded]
  -[SBHeartbeatMetricPersistence _queue_scheduleWriteIfNeeded]
  -[SBHeartbeatMetricPersistence _queue_writeToPersistenceURL]
  -[SBHeartbeatMetricPersistence metricsByDatestamp]
  -[SBHeartbeatMetricPersistence trackInteractionWithFeatureNamed:]
  -[SBHeartbeatMetricPersistence persistenceDelay]
  -[SBHeartbeatMetricPersistence persistenceLeeway]


_SBLegacyRemoteAlertContentHostViewController : _UIRemoteViewController <SBSUIRemoteAlertItemContentHostInterface>
 @property  id delegate
 @property  NSString *serviceClassName

  // class methods
  +[_SBLegacyRemoteAlertContentHostViewController exportedInterface]
  +[_SBLegacyRemoteAlertContentHostViewController serviceViewControllerInterface]

  // instance methods
  -[_SBLegacyRemoteAlertContentHostViewController serviceClassName]
  -[_SBLegacyRemoteAlertContentHostViewController viewServiceDidTerminateWithError:]
  -[_SBLegacyRemoteAlertContentHostViewController .cxx_destruct]
  -[_SBLegacyRemoteAlertContentHostViewController setDelegate:]
  -[_SBLegacyRemoteAlertContentHostViewController delegate]
  -[_SBLegacyRemoteAlertContentHostViewController setServiceClassName:]
  -[_SBLegacyRemoteAlertContentHostViewController _canShowWhileLocked]
  -[_SBLegacyRemoteAlertContentHostViewController _getPreferredContentSizeWithReplyBlock:]


SBUserNotificationAlert : SBAlertItem <UITextFieldDelegate>
 @property  id keyboardTypes
 @property  id autocapitalizationTypes
 @property  id autocorrectionTypes
 @property  id textFieldTitles
 @property  id textFieldValues
 @property  NSString *soundPath
 @property  unsigned int soundID
 @property  unsigned int soundIDBehavior
 @property  NSDictionary *vibrationPattern
 @property  long long soundAlertType
 @property  NSString *soundAlertTopic
 @property  NSString *alertHeader
 @property  NSString *alertMessage
 @property  NSString *alertMessageDelimiter
 @property  NSString *lockScreenAlertHeader
 @property  NSString *lockScreenAlertMessage
 @property  NSString *lockScreenAlertMessageDelimiter
 @property  NSString *defaultButtonTitle
 @property  NSString *alternateButtonTitle
 @property  NSString *otherButtonTitle
 @property  NSString *defaultResponseLaunchBundleID
 @property  NSURL *defaultResponseLaunchURL
 @property  NSString *remoteViewControllerClassName
 @property  NSString *remoteServiceBundleIdentifier
 @property  NSString *extensionIdentifier
 @property  UIViewController *contentViewControllerForAlertController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUserNotificationAlert _cleanup]
  -[SBUserNotificationAlert iconImage]
  -[SBUserNotificationAlert setVibrationPattern:]
  -[SBUserNotificationAlert soundIDBehavior]
  -[SBUserNotificationAlert setSoundAlertTopic:]
  -[SBUserNotificationAlert setAlertHeader:]
  -[SBUserNotificationAlert allowInLoginWindow]
  -[SBUserNotificationAlert setDefaultResponseLaunchBundleID:]
  -[SBUserNotificationAlert dismissesOverlaysOnLockScreen]
  -[SBUserNotificationAlert sound]
  -[SBUserNotificationAlert updateWithMessage:requestFlags:]
  -[SBUserNotificationAlert remoteViewControllerClassName]
  -[SBUserNotificationAlert _uiAlertActionLayoutDirectionFromSBUserNotificationButtonLayoutDirection:]
  -[SBUserNotificationAlert soundID]
  -[SBUserNotificationAlert remoteServiceBundleIdentifier]
  -[SBUserNotificationAlert didFailToActivate]
  -[SBUserNotificationAlert _noteVolumeOrLockPressed]
  -[SBUserNotificationAlert setLockScreenAlertHeader:]
  -[SBUserNotificationAlert parseVisualStyleForMessage:]
  -[SBUserNotificationAlert willActivate]
  -[SBUserNotificationAlert .cxx_destruct]
  -[SBUserNotificationAlert doCleanupAfterDeactivationAnimation]
  -[SBUserNotificationAlert _setActivated:]
  -[SBUserNotificationAlert setTextFieldValues:]
  -[SBUserNotificationAlert reappearsAfterLock]
  -[SBUserNotificationAlert willDeactivateForReason:]
  -[SBUserNotificationAlert setRemoteServiceBundleIdentifier:]
  -[SBUserNotificationAlert setSoundID:]
  -[SBUserNotificationAlert setLockScreenAlertMessageDelimiter:]
  -[SBUserNotificationAlert setAlternateButtonTitle:]
  -[SBUserNotificationAlert lockScreenAlertHeader]
  -[SBUserNotificationAlert autocorrectionTypes]
  -[SBUserNotificationAlert _attachmentImage]
  -[SBUserNotificationAlert vibrationPattern]
  -[SBUserNotificationAlert textField:shouldChangeCharactersInRange:replacementString:]
  -[SBUserNotificationAlert _sendResponseAndCleanUp:]
  -[SBUserNotificationAlert setAutocorrectionTypes:]
  -[SBUserNotificationAlert _parseCustomButtonDefinitions:locBundle:]
  -[SBUserNotificationAlert lockScreenAlertMessage]
  -[SBUserNotificationAlert setRemoteViewControllerClassName:]
  -[SBUserNotificationAlert setSoundPath:]
  -[SBUserNotificationAlert otherButtonTitle]
  -[SBUserNotificationAlert _imageDescriptorForPath:catalogPath:catalogImageKey:]
  -[SBUserNotificationAlert setDefaultButtonTitle:]
  -[SBUserNotificationAlert setTextFieldTitles:]
  -[SBUserNotificationAlert _cleanupCustomContentViewControllers]
  -[SBUserNotificationAlert behavesSuperModally]
  -[SBUserNotificationAlert _activateApplication:withURL:]
  -[SBUserNotificationAlert _parseLegacyTextFieldDefinitions:locBundle:]
  -[SBUserNotificationAlert setExtensionIdentifier:]
  -[SBUserNotificationAlert _uiAlertActionStyleFromSBUserNotificationButtonPresentationStyle:]
  -[SBUserNotificationAlert soundPath]
  -[SBUserNotificationAlert setAlertMessage:]
  -[SBUserNotificationAlert setOtherButtonTitle:]
  -[SBUserNotificationAlert alternateButtonTitle]
  -[SBUserNotificationAlert defaultResponseLaunchURL]
  -[SBUserNotificationAlert alertMessage]
  -[SBUserNotificationAlert dismissIfNecessaryWithResponse:]
  -[SBUserNotificationAlert hideOnClonedDisplay]
  -[SBUserNotificationAlert didDeactivateForReason:]
  -[SBUserNotificationAlert allowMenuButtonDismissal]
  -[SBUserNotificationAlert _clearRemoteViewControllerIfPresent]
  -[SBUserNotificationAlert shouldShowInLockScreen]
  -[SBUserNotificationAlert _parseTextFieldDefinitions:locBundle:]
  -[SBUserNotificationAlert token]
  -[SBUserNotificationAlert defaultResponseLaunchBundleID]
  -[SBUserNotificationAlert alertHeader]
  -[SBUserNotificationAlert cancel]
  -[SBUserNotificationAlert reappearsAfterUnlock]
  -[SBUserNotificationAlert performUnlockAction]
  -[SBUserNotificationAlert _headerImage]
  -[SBUserNotificationAlert setKeyboardTypes:]
  -[SBUserNotificationAlert dismissIfNecessaryWithResponse:customButtonResponse:]
  -[SBUserNotificationAlert dismissOnLock]
  -[SBUserNotificationAlert setAlertMessageDelimiter:]
  -[SBUserNotificationAlert _safeLocalizedValue:withBundle:]
  -[SBUserNotificationAlert _publicDescription]
  -[SBUserNotificationAlert setSoundIDBehavior:]
  -[SBUserNotificationAlert setDefaultResponseLaunchURL:]
  -[SBUserNotificationAlert defaultButtonTitle]
  -[SBUserNotificationAlert _sendResponseAndCleanUp:customButtonResponse:]
  -[SBUserNotificationAlert dealloc]
  -[SBUserNotificationAlert soundAlertType]
  -[SBUserNotificationAlert setLockScreenAlertMessage:]
  -[SBUserNotificationAlert setAutocapitalizationTypes:]
  -[SBUserNotificationAlert allowLockScreenDismissal]
  -[SBUserNotificationAlert textFieldValues]
  -[SBUserNotificationAlert wakeDisplay]
  -[SBUserNotificationAlert contentViewControllerForAlertController]
  -[SBUserNotificationAlert textFieldTitles]
  -[SBUserNotificationAlert configure:requirePasscodeForActions:]
  -[SBUserNotificationAlert autocapitalizationTypes]
  -[SBUserNotificationAlert keyboardTypes]
  -[SBUserNotificationAlert presentationStateDidChangeFromState:toState:]
  -[SBUserNotificationAlert _displayActionButtonOnLockScreen]
  -[SBUserNotificationAlert _prepareNewAlertControllerWithLockedState:requirePasscodeForActions:]
  -[SBUserNotificationAlert forcesModalAlertAppearance]
  -[SBUserNotificationAlert setSoundAlertType:]
  -[SBUserNotificationAlert setContentViewControllerForAlertController:]
  -[SBUserNotificationAlert initWithMessage:replyPort:requestFlags:auditToken:]
  -[SBUserNotificationAlert extensionIdentifier]
  -[SBUserNotificationAlert alertMessageDelimiter]
  -[SBUserNotificationAlert soundAlertTopic]
  -[SBUserNotificationAlert lockScreenAlertMessageDelimiter]
  -[SBUserNotificationAlert visualStyleForAlertControllerStyle:traitCollection:descriptor:]


_SBUserNotificationImageDescriptor : NSObject
 @property  UIImage *image

  // instance methods
  -[_SBUserNotificationImageDescriptor image]
  -[_SBUserNotificationImageDescriptor .cxx_destruct]
  -[_SBUserNotificationImageDescriptor initWithImagePath:]
  -[_SBUserNotificationImageDescriptor initWithImageCatalogPath:catalogKey:]


SBGradientView : UIView
 @property  NSArray *colors
 @property  NSArray *locations
 @property  {CGPoint=dd} startPoint
 @property  {CGPoint=dd} endPoint

  // class methods
  +[SBGradientView layerClass]

  // instance methods
  -[SBGradientView setLocations:]
  -[SBGradientView startPoint]
  -[SBGradientView setStartPoint:]
  -[SBGradientView colors]
  -[SBGradientView setEndPoint:]
  -[SBGradientView setColors:]
  -[SBGradientView endPoint]
  -[SBGradientView color]
  -[SBGradientView .cxx_destruct]
  -[SBGradientView locations]


SBHighlightSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  long long layoutRole
 @property  SBAppLayout *appLayout
 @property  unsigned long phase

  // instance methods
  -[SBHighlightSwitcherModifierEvent appLayout]
  -[SBHighlightSwitcherModifierEvent phase]
  -[SBHighlightSwitcherModifierEvent layoutRole]
  -[SBHighlightSwitcherModifierEvent .cxx_destruct]
  -[SBHighlightSwitcherModifierEvent type]
  -[SBHighlightSwitcherModifierEvent copyWithZone:]
  -[SBHighlightSwitcherModifierEvent initWithLayoutRole:inAppLayout:phase:]


SBInCallPresentationRequestServer : NSObject <BSServiceConnectionListenerDelegate, SBSInCallPresentationClientToServerInterface, BSInvalidatable>
 @property  <SBInCallPresentationRequestServerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallPresentationRequestServer presentWithConfiguration:completion:]
  -[SBInCallPresentationRequestServer listener:didReceiveConnection:withContext:]
  -[SBInCallPresentationRequestServer .cxx_destruct]
  -[SBInCallPresentationRequestServer setDelegate:]
  -[SBInCallPresentationRequestServer init]
  -[SBInCallPresentationRequestServer activate]
  -[SBInCallPresentationRequestServer delegate]
  -[SBInCallPresentationRequestServer invalidate]


_SBInCallPresentationRequestServerTarget : NSObject <SBSInCallPresentationClientToServerInterface>
 @property  BSServiceConnection *connection
 @property  <SBSInCallPresentationClientToServerInterface> *proxyInterface
 @property  NSUUID *clientIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SBInCallPresentationRequestServerTarget currentTarget]

  // instance methods
  -[_SBInCallPresentationRequestServerTarget _performBlock:]
  -[_SBInCallPresentationRequestServerTarget presentWithConfiguration:completion:]
  -[_SBInCallPresentationRequestServerTarget proxyInterface]
  -[_SBInCallPresentationRequestServerTarget setProxyInterface:]
  -[_SBInCallPresentationRequestServerTarget .cxx_destruct]
  -[_SBInCallPresentationRequestServerTarget connection]
  -[_SBInCallPresentationRequestServerTarget clientIdentifier]
  -[_SBInCallPresentationRequestServerTarget initWithConnection:proxyInterface:]


SBBluetoothAccessoryBatteryMonitor : NSObject <BCBatteryDeviceObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBluetoothAccessoryBatteryMonitor .cxx_destruct]
  -[SBBluetoothAccessoryBatteryMonitor init]
  -[SBBluetoothAccessoryBatteryMonitor descriptionBuilder]
  -[SBBluetoothAccessoryBatteryMonitor _popLowPowerAlertForAccessoryIfNecessary:]
  -[SBBluetoothAccessoryBatteryMonitor connectedDevicesDidChange:]


SBWindowedAccessoryViewController : UIViewController <SBWindowedAccessoryViewDelegate>
 @property  SBWindowedAccessoryView *windowedAccessoryView
 @property  <SBWindowedAccessoryViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWindowedAccessoryViewController .cxx_destruct]
  -[SBWindowedAccessoryViewController viewDidLoad]
  -[SBWindowedAccessoryViewController setDelegate:]
  -[SBWindowedAccessoryViewController delegate]
  -[SBWindowedAccessoryViewController loadView]
  -[SBWindowedAccessoryViewController _canShowWhileLocked]
  -[SBWindowedAccessoryViewController forceDetachWindowedAcessoryButtonTapped:]
  -[SBWindowedAccessoryViewController windowedAccessoryView]
  -[SBWindowedAccessoryViewController setWindowedAccessoryView:]


SBAppVisibilityPreferences : NSObject
 @property  BOOL defaultVisible
 @property  BOOL currentlyVisible

  // instance methods
  -[SBAppVisibilityPreferences isCurrentlyVisible]
  -[SBAppVisibilityPreferences .cxx_destruct]
  -[SBAppVisibilityPreferences update]
  -[SBAppVisibilityPreferences initWithDefaultVisible:bundleID:containerPath:]
  -[SBAppVisibilityPreferences isDefaultVisible]


SBModalAlertPresentationCoordinator : NSObject <BSDescriptionProviding>
 @property  SBModalAlertPresenter *springBoardPresenter
 @property  <SBModalAlertPresentationCoordinatorDelegate> *delegate
 @property  BOOL showingModalAlert
 @property  BOOL showingSystemModalAlert
 @property  BOOL canShowApplicationModalAlerts
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBModalAlertPresentationCoordinator .cxx_destruct]
  -[SBModalAlertPresentationCoordinator _noteSpringBoardModalAlertStateChanged:]
  -[SBModalAlertPresentationCoordinator isShowingModalAlert]
  -[SBModalAlertPresentationCoordinator _removeModalAlertPresenter:]
  -[SBModalAlertPresentationCoordinator initWithSceneDeactivationManager:]
  -[SBModalAlertPresentationCoordinator succinctDescriptionBuilder]
  -[SBModalAlertPresentationCoordinator setDelegate:]
  -[SBModalAlertPresentationCoordinator _addModalAlertPresenterIfNecessary:]
  -[SBModalAlertPresentationCoordinator descriptionBuilderWithMultilinePrefix:]
  -[SBModalAlertPresentationCoordinator descriptionWithMultilinePrefix:]
  -[SBModalAlertPresentationCoordinator succinctDescription]
  -[SBModalAlertPresentationCoordinator _fencingTransitionContext:]
  -[SBModalAlertPresentationCoordinator _adjustApplicationSceneSettingsForModalAlertsAndFence:]
  -[SBModalAlertPresentationCoordinator delegate]
  -[SBModalAlertPresentationCoordinator hideApplicationModalAlertsForReason:]
  -[SBModalAlertPresentationCoordinator _getSpringBoardPresenter]
  -[SBModalAlertPresentationCoordinator _setSpringBoardPresenter:]
  -[SBModalAlertPresentationCoordinator canShowApplicationModalAlerts]
  -[SBModalAlertPresentationCoordinator isShowingSystemModalAlert]


SBInCallSettings : PTSettings
 @property  SBFFluidBehaviorSettings *transientOverlayFadeInSettings
 @property  SBFFluidBehaviorSettings *transientOverlayFadeOutSettings

  // class methods
  +[SBInCallSettings settingsControllerModule]

  // instance methods
  -[SBInCallSettings .cxx_destruct]
  -[SBInCallSettings setDefaultValues]
  -[SBInCallSettings transientOverlayFadeInSettings]
  -[SBInCallSettings setTransientOverlayFadeInSettings:]
  -[SBInCallSettings transientOverlayFadeOutSettings]
  -[SBInCallSettings setTransientOverlayFadeOutSettings:]


SBIconPageManagementMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIconPageManagementMetric handleEvent:withContext:]
  -[SBIconPageManagementMetric .cxx_destruct]
  -[SBIconPageManagementMetric init]


SBDodgingModel : NSObject <NSMutableCopying>
 @property  NSMutableArray *identifiers
 @property  NSMutableDictionary *centersForIdentifiers
 @property  NSMutableDictionary *sizesForIdentifiers
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceBounds

  // instance methods
  -[SBDodgingModel referenceBounds]
  -[SBDodgingModel .cxx_destruct]
  -[SBDodgingModel identifiers]
  -[SBDodgingModel mutableCopyWithZone:]
  -[SBDodgingModel setIdentifiers:]
  -[SBDodgingModel setReferenceBounds:]
  -[SBDodgingModel modelByModifyingModelWithBlock:]
  -[SBDodgingModel initWithReferenceBounds:]
  -[SBDodgingModel setCentersForIdentifiers:]
  -[SBDodgingModel setSizesForIdentifiers:]
  -[SBDodgingModel sizeForIdentifier:]
  -[SBDodgingModel centerForIdentifier:]
  -[SBDodgingModel centersForIdentifiers]
  -[SBDodgingModel sizesForIdentifiers]


SBMutableDodgingModel : SBDodgingModel
 @property  NSMutableArray *identifiers

  // instance methods
  -[SBMutableDodgingModel removeIdentifier:]
  -[SBMutableDodgingModel setReferenceBounds:]
  -[SBMutableDodgingModel addIdentifier:atIndex:center:size:]
  -[SBMutableDodgingModel setIndex:forIdentifier:]
  -[SBMutableDodgingModel setCenter:forIdentifier:]
  -[SBMutableDodgingModel setSize:forIdentifier:]
  -[SBMutableDodgingModel bringIdentifierToFront:]


SBDisabledIdleTimer : SBIdleTimerBase
  // instance methods
  -[SBDisabledIdleTimer setActivated:]
  -[SBDisabledIdleTimer isEqual:]
  -[SBDisabledIdleTimer reset]
  -[SBDisabledIdleTimer isActivated]
  -[SBDisabledIdleTimer copyWithZone:]
  -[SBDisabledIdleTimer isDisabled]


SBSpotlightTransientOverlayInteractiveGestureTransaction : SBMainWorkspaceTransaction <BSTransactionObserver>
 @property  SBSpotlightSettings *settings
 @property  SBSpotlightTransientOverlayViewController *spotlightTransientOverlayViewController
 @property  SBMainWorkspaceTransaction *presentTransientOverlayTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _didComplete]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction transactionDidComplete:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _begin]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _logForInterruptAttemptReason:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction .cxx_destruct]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction setSettings:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction canInterruptForTransitionRequest:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction settings]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction initWithTransitionRequest:spotlightTransientOverlayViewController:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _presentTransientOverlayViewController:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _dismissSpotlightTransientOverlayViewController]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction updatePresentationWithProgress:translation:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction endPresentation:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction noteGestureFinishedBeforeTransactionBegan]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction spotlightTransientOverlayViewController]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction setSpotlightTransientOverlayViewController:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction presentTransientOverlayTransaction]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction setPresentTransientOverlayTransaction:]


SBUISettings : _UISettings
  // instance methods
  -[SBUISettings addKeyObserverIfPrototyping:]
  -[SBUISettings addKeyPathObserverIfPrototyping:]


SBHomeScreenBackdropViewBase : UIView
 @property  <SBHomeScreenBackdropViewBaseDelegate> *delegate

  // instance methods
  -[SBHomeScreenBackdropViewBase cancelInProcessAnimations]
  -[SBHomeScreenBackdropViewBase endRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropViewBase .cxx_destruct]
  -[SBHomeScreenBackdropViewBase beginRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropViewBase setDelegate:]
  -[SBHomeScreenBackdropViewBase backdropBlurSettings]
  -[SBHomeScreenBackdropViewBase isOpaque]
  -[SBHomeScreenBackdropViewBase endRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropViewBase initWithFrame:]
  -[SBHomeScreenBackdropViewBase delegate]
  -[SBHomeScreenBackdropViewBase setBlurProgress:behaviorMode:completion:]
  -[SBHomeScreenBackdropViewBase beginRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropViewBase requiresBackdropView]
  -[SBHomeScreenBackdropViewBase requiresLiveBackdropView]


SBAlertItemsController : NSObject <BSDescriptionProviding>
 @property  SBModalAlertPresenter *systemModalAlertPresenter
 @property  <SBAlertItemPresenter><SBLockScreenActionProvider> *lockScreenModalAlertItemPresenter
 @property  <SBAlertItemPresenter> *lockScreenNotificationsAlertItemPresenter
 @property  <SBAlertItemPresenter> *unlockedAlertItemPresenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAlertItemsController sharedInstance]

  // instance methods
  -[SBAlertItemsController hasVisibleSuperModalAlert]
  -[SBAlertItemsController _clearAllQueuedAlertItems]
  -[SBAlertItemsController deactivateAlertItem:]
  -[SBAlertItemsController captureSuppressionAssertion:reason:]
  -[SBAlertItemsController _setSystemModalAlertPresenter:]
  -[SBAlertItemsController _processAlertItemQueuesAnimated:]
  -[SBAlertItemsController _deactivateAlertItem:reason:animated:]
  -[SBAlertItemsController hasAlerts]
  -[SBAlertItemsController lockScreenModalAlertItemPresenter]
  -[SBAlertItemsController _shouldPendAlertItem:outReasonsPended:]
  -[SBAlertItemsController deactivateAlertItemsOfClass:reason:]
  -[SBAlertItemsController setLockScreenNotificationsAlertItemPresenter:]
  -[SBAlertItemsController _updateActiveDestinations]
  -[SBAlertItemsController _hasVisibleModalAlertOfType:]
  -[SBAlertItemsController .cxx_destruct]
  -[SBAlertItemsController _deactivateAlertItem:reason:animated:alertDismissCompletion:]
  -[SBAlertItemsController _hasPresentationForPresenter:]
  -[SBAlertItemsController _presentationForAlertItem:]
  -[SBAlertItemsController setUnlockedAlertItemPresenter:]
  -[SBAlertItemsController succinctDescriptionBuilder]
  -[SBAlertItemsController _notifyObservers:]
  -[SBAlertItemsController alertItemsOfClass:]
  -[SBAlertItemsController _presentedAlertItemForPresenter:]
  -[SBAlertItemsController setForceAlertsToPend:forReason:]
  -[SBAlertItemsController activateAlertItem:animated:]
  -[SBAlertItemsController convertLockedAlertsToUnlockedAlerts]
  -[SBAlertItemsController visibleAlertItem]
  -[SBAlertItemsController lockScreenNotificationsAlertItemPresenter]
  -[SBAlertItemsController setInUILockedMode:]
  -[SBAlertItemsController descriptionBuilderWithMultilinePrefix:]
  -[SBAlertItemsController init]
  -[SBAlertItemsController _processAlertItemsFromQueue:animated:]
  -[SBAlertItemsController _hasActivePresentationsThatPresentModally]
  -[SBAlertItemsController descriptionWithMultilinePrefix:]
  -[SBAlertItemsController succinctDescription]
  -[SBAlertItemsController deactivateAlertItem:reason:animated:]
  -[SBAlertItemsController addObserver:]
  -[SBAlertItemsController _performBatchActions:animated:processQueue:]
  -[SBAlertItemsController setLockScreenModalAlertItemPresenter:]
  -[SBAlertItemsController activateAlertItem:]
  -[SBAlertItemsController _isAlertItemPresentable:outReasonsNotPresentable:]
  -[SBAlertItemsController moveActiveUnlockedAlertsToPendingWithAnimation:completion:]
  -[SBAlertItemsController hasVisibleAlert]
  -[SBAlertItemsController noteVolumeOrLockPressedOverLockedAlerts]
  -[SBAlertItemsController _presentAlertItem:withPresenter:animated:]
  -[SBAlertItemsController deactivateAlertItemsOfClass:]
  -[SBAlertItemsController _buddyDidExit]
  -[SBAlertItemsController _initWithUserSessionController:]
  -[SBAlertItemsController hasVisibleModalAlert]
  -[SBAlertItemsController dealloc]
  -[SBAlertItemsController hasLockScreenModalAlert]
  -[SBAlertItemsController _systemModalAlertPresenter]
  -[SBAlertItemsController activatePendedAlertsIfNecessary]
  -[SBAlertItemsController _enumeratePresentationsWithType:usingBlock:]
  -[SBAlertItemsController deactivateAlertItemsOfClass:reason:animated:]
  -[SBAlertItemsController _enumerateWithDirection:presentationsWithType:usingBlock:]
  -[SBAlertItemsController _reallyDeactivateAlertItem:forReason:deactivateBlock:]
  -[SBAlertItemsController _dismissAlertItem:fromPresenter:forReason:animated:completion:]
  -[SBAlertItemsController convertUnlockedAlertsToLockedAlerts]
  -[SBAlertItemsController removeObserver:]
  -[SBAlertItemsController hasAlertOfClass:]
  -[SBAlertItemsController _activeCallStateDidChange:]
  -[SBAlertItemsController canDeactivateAlertForMenuClickOrSystemGesture]
  -[SBAlertItemsController deactivateAlertItem:reason:]
  -[SBAlertItemsController _activePresenterForAlertItem:]
  -[SBAlertItemsController deactivateAlertForMenuClickOrSystemGestureWithAnimation:]
  -[SBAlertItemsController _presenterForAlertItem:]
  -[SBAlertItemsController unlockedAlertItemPresenter]


SBApplicationInfo : _UIApplicationInfo
 @property  BOOL supportsDirectToAirplayOrIsAllowListed
 @property  BOOL systemApplication
 @property  BOOL internalApplication
 @property  BOOL appleApplication
 @property  BOOL arcadeApplication
 @property  BOOL appClip
 @property  NSString *displayName
 @property  BOOL monarchLinked
 @property  BOOL tigrisLinked
 @property  BOOL peaceLinked
 @property  BOOL peaceBLinked
 @property  BOOL yukonLinked
 @property  BOOL yukonELinked
 @property  BOOL azulLinked
 @property  BOOL azulHWLinked
 @property  BOOL azulBLinked
 @property  BOOL skyLinked
 @property  unsigned long supportedTypes
 @property  NSSet *urlSchemes
 @property  NSURL *restorationArchiveContainerURL
 @property  NSString *installInstanceID
 @property  BOOL representsWebApplication
 @property  BOOL supports64Bit
 @property  BOOL supportsMultiwindow
 @property  BOOL newsstand
 @property  unsigned long applicationSizeInBytes
 @property  NSArray *iTunesCategoriesOrderedByRelevancy
 @property  unsigned long visibilityOverride
 @property  BOOL hasHiddenTag
 @property  BOOL usesRLNDataProvider
 @property  BOOL systemAppSupportsLocalNotifications
 @property  BOOL suppressUserNotificationPermissionAlert
 @property  unsigned long allowedNKNotificationsPerDay
 @property  BOOL statusBarIsLegacy
 @property  long long defaultStatusBarStyle
 @property  unsigned long ignoredStatusBarStyleOverrides
 @property  BOOL shouldLaunchSuspendedAlways
 @property  NSArray *domainsToPreheat
 @property  BOOL launchableDuringSetup
 @property  BOOL shouldLaunchWithLiveContentASAP
 @property  XBSnapshotContainerIdentity *manifestContainerIdentity
 @property  BOOL usesSplashBoard
 @property  BOOL wantsLaunchWithoutPNG
 @property  BOOL wantsFullScreen
 @property  BOOL prefersSavedSnapshots
 @property  BOOL preventsLaunchInterfaceSplitting
 @property  BOOL disablesClassicMode
 @property  NSString *launchInterfaceFileName
 @property  NSArray *launchImageInfo
 @property  long long whitePointAdaptivityStyle
 @property  BOOL requiresHiDPI
 @property  BOOL disallowsNotificationCenter
 @property  BOOL disallowsControlCenter
 @property  NSString *applicationShortcutWidgetBundleIdentifier
 @property  NSArray *staticApplicationShortcutItems
 @property  unsigned long dynamicApplicationShortcutItemsVersion
 @property  unsigned long uninstallCapability
 @property  int networkUsageTypes
 @property  unsigned long voipClass
 @property  BOOL supportsLegacyVOIPBackgroundMode
 @property  BOOL supportsAudioBackgroundMode
 @property  BOOL supportsFetchBackgroundMode
 @property  BOOL supportsRemoteNotificationBackgroundMode
 @property  BOOL supportsNewsstandContentBackgroundMode
 @property  CRCarPlayAppDeclaration *carPlayDeclaration
 @property  BOOL gameCenterEnabled
 @property  BOOL wasGameCenterEverEnabled
 @property  BOOL cloudDemoted
 @property  BOOL wantsExclusiveForeground
 @property  BOOL shouldSkipCrossfadeToLive
 @property  NSURL *documentInboxURL
 @property  NSUserDefaults *userDefaults
 @property  BOOL supportsDirectToAirplay
 @property  BOOL alwaysReceivesOpenURLSource
 @property  BOOL alwaysDeliversOpenURLActionsUsingWorkspace
 @property  NSString *vendorName
 @property  BOOL licensedToDevice
 @property  BOOL triggersStoreKitMessaging

  // class methods
  +[SBApplicationInfo _directToAirPlayBundleIDs]

  // instance methods
  -[SBApplicationInfo isInternalApplication]
  -[SBApplicationInfo isSystemApplication]
  -[SBApplicationInfo dataContainerURL]
  -[SBApplicationInfo vendorName]
  -[SBApplicationInfo isYukonELinked]
  -[SBApplicationInfo displayName]
  -[SBApplicationInfo shouldSkipCrossfadeToLive]
  -[SBApplicationInfo canChangeBackgroundStyle]
  -[SBApplicationInfo usesSplashBoard]
  -[SBApplicationInfo isSkyLinked]
  -[SBApplicationInfo isLaunchableDuringSetup]
  -[SBApplicationInfo hasHiddenTag]
  -[SBApplicationInfo shouldLaunchSuspendedAlways]
  -[SBApplicationInfo dynamicApplicationShortcutItemsVersion]
  -[SBApplicationInfo supportsMultiwindow]
  -[SBApplicationInfo systemAppSupportsLocalNotifications]
  -[SBApplicationInfo isAppClip]
  -[SBApplicationInfo isAzulLinked]
  -[SBApplicationInfo backgroundStyle]
  -[SBApplicationInfo disablesClassicMode]
  -[SBApplicationInfo supportsFetchBackgroundMode]
  -[SBApplicationInfo .cxx_destruct]
  -[SBApplicationInfo isYukonLinked]
  -[SBApplicationInfo supportedTypes]
  -[SBApplicationInfo wantsExclusiveForeground]
  -[SBApplicationInfo isAzulHWLinked]
  -[SBApplicationInfo isLicensedToDevice]
  -[SBApplicationInfo isGameCenterEnabled]
  -[SBApplicationInfo disallowsNotificationCenter]
  -[SBApplicationInfo allowedNKNotificationsPerDay]
  -[SBApplicationInfo restorationArchiveContainerURL]
  -[SBApplicationInfo applicationSizeInBytes]
  -[SBApplicationInfo installInstanceID]
  -[SBApplicationInfo requiresHiDPI]
  -[SBApplicationInfo supportsAudioBackgroundMode]
  -[SBApplicationInfo documentInboxURL]
  -[SBApplicationInfo supportsNewsstandContentBackgroundMode]
  -[SBApplicationInfo usesRLNDataProvider]
  -[SBApplicationInfo isAppleApplication]
  -[SBApplicationInfo isMonarchLinked]
  -[SBApplicationInfo defaultStatusBarStyle]
  -[SBApplicationInfo visibilityOverride]
  -[SBApplicationInfo disallowsControlCenter]
  -[SBApplicationInfo supports64Bit]
  -[SBApplicationInfo iTunesCategoriesOrderedByRelevancy]
  -[SBApplicationInfo supportsDirectToAirplay]
  -[SBApplicationInfo launchInterfaceFileName]
  -[SBApplicationInfo urlSchemes]
  -[SBApplicationInfo isPeaceBLinked]
  -[SBApplicationInfo statusBarHiddenWhenVerticallyCompact]
  -[SBApplicationInfo supportsRemoteNotificationBackgroundMode]
  -[SBApplicationInfo representsWebApplication]
  -[SBApplicationInfo preventsLaunchInterfaceSplitting]
  -[SBApplicationInfo carPlayDeclaration]
  -[SBApplicationInfo networkUsageTypes]
  -[SBApplicationInfo userDefaults]
  -[SBApplicationInfo alwaysDeliversOpenURLActionsUsingWorkspace]
  -[SBApplicationInfo domainsToPreheat]
  -[SBApplicationInfo prefersSavedSnapshots]
  -[SBApplicationInfo triggersStoreKitMessaging]
  -[SBApplicationInfo uninstallCapability]
  -[SBApplicationInfo wantsLaunchWithoutPNG]
  -[SBApplicationInfo isPeaceLinked]
  -[SBApplicationInfo isTigrisLinked]
  -[SBApplicationInfo whitePointAdaptivityStyle]
  -[SBApplicationInfo isStatusBarLegacy]
  -[SBApplicationInfo backgroundStyleForRequestedBackgroundStyle:]
  -[SBApplicationInfo voipClass]
  -[SBApplicationInfo staticApplicationShortcutItems]
  -[SBApplicationInfo ignoredStatusBarStyleOverrides]
  -[SBApplicationInfo manifestContainerIdentity]
  -[SBApplicationInfo launchImageInfo]
  -[SBApplicationInfo wantsFullScreen]
  -[SBApplicationInfo applicationShortcutWidgetBundleIdentifier]
  -[SBApplicationInfo isCloudDemoted]
  -[SBApplicationInfo isNewsstand]
  -[SBApplicationInfo suppressUserNotificationPermissionAlert]
  -[SBApplicationInfo supportsLegacyVOIPBackgroundMode]
  -[SBApplicationInfo alwaysReceivesOpenURLSource]
  -[SBApplicationInfo _loadFromProxy:]
  -[SBApplicationInfo wasGameCenterEverEnabled]
  -[SBApplicationInfo isAzulBLinked]
  -[SBApplicationInfo shouldLaunchWithLiveContentASAP]
  -[SBApplicationInfo isArcadeApplication]
  -[SBApplicationInfo supportsDirectToAirplayOrIsAllowListed]


SBSwitcherSettingsChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBSwitcherSettingsChangedSwitcherModifierEvent type]


SBLaunchImageOverridesContext : NSObject
 @property  NSString *sceneID
 @property  SBActivationSettings *activationSettings
 @property  BOOL ignoreSnapshots
 @property  NSString *launchImageName
 @property  NSURL *url

  // instance methods
  -[SBLaunchImageOverridesContext activationSettings]
  -[SBLaunchImageOverridesContext url]
  -[SBLaunchImageOverridesContext .cxx_destruct]
  -[SBLaunchImageOverridesContext sceneID]
  -[SBLaunchImageOverridesContext launchImageName]
  -[SBLaunchImageOverridesContext initWithSceneID:activationSettings:]
  -[SBLaunchImageOverridesContext ignoreSnapshots]


SBDisplayItem : NSObject <NSCopying, BSDescriptionProviding>
 @property  long long type
 @property  NSString *bundleIdentifier
 @property  NSString *uniqueIdentifier
 @property  NSString *webClipIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDisplayItem displayItemWithType:bundleIdentifier:uniqueIdentifier:]
  +[SBDisplayItem homeScreenDisplayItem]
  +[SBDisplayItem remoteAlertDisplayItemWithServiceBundleIdentifier:]
  +[SBDisplayItem switcherServiceDisplayItemWithServiceIdentifier:]
  +[SBDisplayItem webAppDisplayItemWithWebAppIdentifier:]
  +[SBDisplayItem applicationDisplayItemWithBundleIdentifier:sceneIdentifier:]
  +[SBDisplayItem displayItemWithProtobufRepresentation:]

  // instance methods
  -[SBDisplayItem initWithType:bundleIdentifier:uniqueIdentifier:]
  -[SBDisplayItem _calculateUniqueStringRepresentation]
  -[SBDisplayItem uniqueIdentifier]
  -[SBDisplayItem isHomeScreenDisplayItem]
  -[SBDisplayItem bundleIdentifier]
  -[SBDisplayItem _initWithArrayPlistRepresentation:]
  -[SBDisplayItem .cxx_destruct]
  -[SBDisplayItem isEqualToDisplayItemForFloatingDockSuggestions:]
  -[SBDisplayItem _newSceneIdentifierForBundleIdentifier:]
  -[SBDisplayItem succinctDescriptionBuilder]
  -[SBDisplayItem descriptionBuilderWithMultilinePrefix:]
  -[SBDisplayItem init]
  -[SBDisplayItem plistRepresentation]
  -[SBDisplayItem displayItemForFloatingDockSuggestionsComparison]
  -[SBDisplayItem isEqual:]
  -[SBDisplayItem descriptionWithMultilinePrefix:]
  -[SBDisplayItem succinctDescription]
  -[SBDisplayItem protobufRepresentation]
  -[SBDisplayItem compare:]
  -[SBDisplayItem type]
  -[SBDisplayItem _initWithDictionaryPlistRepresentation:]
  -[SBDisplayItem copyWithZone:]
  -[SBDisplayItem uniqueStringRepresentation]
  -[SBDisplayItem initWithLegacyPlistRepresentation:]
  -[SBDisplayItem _initWithPlistRepresentation:sceneIdentifierFromBundleIdentifierGenerator:]
  -[SBDisplayItem webClipIdentifier]
  -[SBDisplayItem initWithPlistRepresentation:]
  -[SBDisplayItem _initWithLegacyPlistRepresentation:sceneIdentifierFromBundleIdentifierGenerator:]


SBTransitionSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  BOOL fromAppLayoutWantsExclusiveForeground
 @property  BOOL toAppLayoutWantsExclusiveForeground
 @property  SBAppLayout *fromFloatingAppLayout
 @property  long long fromFloatingConfiguration
 @property  BOOL fromFloatingSwitcherVisible
 @property  SBAppLayout *toFloatingAppLayout
 @property  long long toFloatingConfiguration
 @property  BOOL toFloatingSwitcherVisible
 @property  NSString *fromAppExposeBundleID
 @property  NSString *toAppExposeBundleID
 @property  long long fromPeekConfiguration
 @property  long long toPeekConfiguration
 @property  long long fromSpaceConfiguration
 @property  long long toSpaceConfiguration
 @property  SBBannerUnfurlSourceContext *bannerUnfurlSourceContext
 @property  BOOL prefersCrossfadeTransition
 @property  NSSet *fromDisplayItemsPendingTermination
 @property  SBAppLayout *activatingAppLayout
 @property  BOOL gestureInitiated
 @property  BOOL dragAndDropTransition
 @property  BOOL breadcrumbTransition
 @property  BOOL morphToPIPTransition
 @property  BOOL morphFromPIPTransition
 @property  BOOL continuityTransition
 @property  BOOL bannerUnfurlTransition
 @property  BOOL iconZoomDisabled
 @property  BOOL spotlightTransition
 @property  BOOL shelfTransition
 @property  long long dosidoTransitionDirection
 @property  BOOL shelfRequestTransition
 @property  BOOL morphFromInAppView
 @property  BOOL quickActionTransition
 @property  BOOL newSceneTransition
 @property  unsigned long phase
 @property  BOOL animated
 @property  SBAppLayout *fromAppLayout
 @property  long long fromEnvironmentMode
 @property  SBAppLayout *toAppLayout
 @property  long long toEnvironmentMode
 @property  long long fromInterfaceOrientation
 @property  long long toInterfaceOrientation
 @property  long long fromWindowPickerRole
 @property  long long toWindowPickerRole
 @property  NSUUID *transitionID
 @property  NSArray *appLayoutsWithRemovalContexts
 @property  SBSwitcherShelf *fromShelf
 @property  SBSwitcherShelf *toShelf

  // instance methods
  -[SBTransitionSwitcherModifierEvent setAnimated:]
  -[SBTransitionSwitcherModifierEvent isAnimated]
  -[SBTransitionSwitcherModifierEvent phase]
  -[SBTransitionSwitcherModifierEvent setPhase:]
  -[SBTransitionSwitcherModifierEvent .cxx_destruct]
  -[SBTransitionSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBTransitionSwitcherModifierEvent setPrefersCrossfadeTransition:]
  -[SBTransitionSwitcherModifierEvent toShelf]
  -[SBTransitionSwitcherModifierEvent type]
  -[SBTransitionSwitcherModifierEvent copyWithZone:]
  -[SBTransitionSwitcherModifierEvent prefersCrossfadeTransition]
  -[SBTransitionSwitcherModifierEvent toFloatingConfiguration]
  -[SBTransitionSwitcherModifierEvent fromAppLayout]
  -[SBTransitionSwitcherModifierEvent toAppLayout]
  -[SBTransitionSwitcherModifierEvent fromEnvironmentMode]
  -[SBTransitionSwitcherModifierEvent fromWindowPickerRole]
  -[SBTransitionSwitcherModifierEvent fromFloatingAppLayout]
  -[SBTransitionSwitcherModifierEvent toEnvironmentMode]
  -[SBTransitionSwitcherModifierEvent toWindowPickerRole]
  -[SBTransitionSwitcherModifierEvent fromPeekConfiguration]
  -[SBTransitionSwitcherModifierEvent toPeekConfiguration]
  -[SBTransitionSwitcherModifierEvent isEnteringAnyPeekEvent]
  -[SBTransitionSwitcherModifierEvent isExitingAnyPeekEvent]
  -[SBTransitionSwitcherModifierEvent isExitingSplitViewPeekEvent]
  -[SBTransitionSwitcherModifierEvent toFloatingAppLayout]
  -[SBTransitionSwitcherModifierEvent isExitingSlideOverPeekEvent]
  -[SBTransitionSwitcherModifierEvent isExitingCenterWindowEvent]
  -[SBTransitionSwitcherModifierEvent isExitingCenterWindowToOtherRoleEvent]
  -[SBTransitionSwitcherModifierEvent _isEnteringPageCenterWindowEvent]
  -[SBTransitionSwitcherModifierEvent isShelfTransition]
  -[SBTransitionSwitcherModifierEvent isMainPulseEvent]
  -[SBTransitionSwitcherModifierEvent isFloatingPulseEvent]
  -[SBTransitionSwitcherModifierEvent activatingAppLayout]
  -[SBTransitionSwitcherModifierEvent fromAppExposeBundleID]
  -[SBTransitionSwitcherModifierEvent toAppExposeBundleID]
  -[SBTransitionSwitcherModifierEvent fromInterfaceOrientation]
  -[SBTransitionSwitcherModifierEvent toInterfaceOrientation]
  -[SBTransitionSwitcherModifierEvent fromFloatingConfiguration]
  -[SBTransitionSwitcherModifierEvent fromFloatingSwitcherVisible]
  -[SBTransitionSwitcherModifierEvent toFloatingSwitcherVisible]
  -[SBTransitionSwitcherModifierEvent isGestureInitiated]
  -[SBTransitionSwitcherModifierEvent initWithTransitionID:phase:animated:]
  -[SBTransitionSwitcherModifierEvent isTransitionEvent]
  -[SBTransitionSwitcherModifierEvent appLayoutsWithRemovalContexts]
  -[SBTransitionSwitcherModifierEvent removalContextForAppLayout:]
  -[SBTransitionSwitcherModifierEvent setRemovalContext:forAppLayout:]
  -[SBTransitionSwitcherModifierEvent fromShelf]
  -[SBTransitionSwitcherModifierEvent isEnteringSplitViewPeekEvent]
  -[SBTransitionSwitcherModifierEvent isExitingSplitViewPeekToAppEvent]
  -[SBTransitionSwitcherModifierEvent isExitingSplitViewPeekToHomeScreenEvent]
  -[SBTransitionSwitcherModifierEvent isEnteringSlideOverPeekEvent]
  -[SBTransitionSwitcherModifierEvent isExitingSlideOverPeekToAppEvent]
  -[SBTransitionSwitcherModifierEvent isExitingSlideOverPeekToHomeScreenEvent]
  -[SBTransitionSwitcherModifierEvent isCenterWindowRemovalEvent]
  -[SBTransitionSwitcherModifierEvent isCenterWindowToFullScreenEvent]
  -[SBTransitionSwitcherModifierEvent isCenterWindowToSlideOverEvent]
  -[SBTransitionSwitcherModifierEvent isCenterWindowToNewSplitViewEvent]
  -[SBTransitionSwitcherModifierEvent isCenterWindowToExistingSplitViewEvent]
  -[SBTransitionSwitcherModifierEvent isPresentingPageCenterWindowEvent]
  -[SBTransitionSwitcherModifierEvent isReplaceCenterWindowWithNewCenterWindowEvent]
  -[SBTransitionSwitcherModifierEvent isSplitViewToCenterWindowEvent]
  -[SBTransitionSwitcherModifierEvent isSlideOverToCenterWindowEvent]
  -[SBTransitionSwitcherModifierEvent isFullScreenToCenterWindowEvent]
  -[SBTransitionSwitcherModifierEvent isSwappingFullScreenAppSidesEvent]
  -[SBTransitionSwitcherModifierEvent isCenterWindowZoomingUpFromShelfEvent]
  -[SBTransitionSwitcherModifierEvent isAnyPulseEvent]
  -[SBTransitionSwitcherModifierEvent isFullScreenToSplitViewEvent]
  -[SBTransitionSwitcherModifierEvent isSplitViewCrossfadeEvent]
  -[SBTransitionSwitcherModifierEvent isAnySplitViewToOrFromSlideOverEvent]
  -[SBTransitionSwitcherModifierEvent isPrimaryToSlideOverEvent]
  -[SBTransitionSwitcherModifierEvent isSideToSlideOverEvent]
  -[SBTransitionSwitcherModifierEvent isSlideOverToPrimaryEvent]
  -[SBTransitionSwitcherModifierEvent isSlideOverToSideEvent]
  -[SBTransitionSwitcherModifierEvent isSlideOverToFullScreenEvent]
  -[SBTransitionSwitcherModifierEvent transitionID]
  -[SBTransitionSwitcherModifierEvent setFromAppLayout:]
  -[SBTransitionSwitcherModifierEvent setFromEnvironmentMode:]
  -[SBTransitionSwitcherModifierEvent setToAppLayout:]
  -[SBTransitionSwitcherModifierEvent setToEnvironmentMode:]
  -[SBTransitionSwitcherModifierEvent setFromInterfaceOrientation:]
  -[SBTransitionSwitcherModifierEvent setToInterfaceOrientation:]
  -[SBTransitionSwitcherModifierEvent setFromWindowPickerRole:]
  -[SBTransitionSwitcherModifierEvent setToWindowPickerRole:]
  -[SBTransitionSwitcherModifierEvent fromAppLayoutWantsExclusiveForeground]
  -[SBTransitionSwitcherModifierEvent setFromAppLayoutWantsExclusiveForeground:]
  -[SBTransitionSwitcherModifierEvent toAppLayoutWantsExclusiveForeground]
  -[SBTransitionSwitcherModifierEvent setToAppLayoutWantsExclusiveForeground:]
  -[SBTransitionSwitcherModifierEvent setFromFloatingAppLayout:]
  -[SBTransitionSwitcherModifierEvent setFromFloatingConfiguration:]
  -[SBTransitionSwitcherModifierEvent setFromFloatingSwitcherVisible:]
  -[SBTransitionSwitcherModifierEvent setToFloatingAppLayout:]
  -[SBTransitionSwitcherModifierEvent setToFloatingConfiguration:]
  -[SBTransitionSwitcherModifierEvent setToFloatingSwitcherVisible:]
  -[SBTransitionSwitcherModifierEvent setFromAppExposeBundleID:]
  -[SBTransitionSwitcherModifierEvent setToAppExposeBundleID:]
  -[SBTransitionSwitcherModifierEvent setFromPeekConfiguration:]
  -[SBTransitionSwitcherModifierEvent setToPeekConfiguration:]
  -[SBTransitionSwitcherModifierEvent fromSpaceConfiguration]
  -[SBTransitionSwitcherModifierEvent setFromSpaceConfiguration:]
  -[SBTransitionSwitcherModifierEvent toSpaceConfiguration]
  -[SBTransitionSwitcherModifierEvent setToSpaceConfiguration:]
  -[SBTransitionSwitcherModifierEvent bannerUnfurlSourceContext]
  -[SBTransitionSwitcherModifierEvent setBannerUnfurlSourceContext:]
  -[SBTransitionSwitcherModifierEvent fromDisplayItemsPendingTermination]
  -[SBTransitionSwitcherModifierEvent setFromDisplayItemsPendingTermination:]
  -[SBTransitionSwitcherModifierEvent setActivatingAppLayout:]
  -[SBTransitionSwitcherModifierEvent setGestureInitiated:]
  -[SBTransitionSwitcherModifierEvent isDragAndDropTransition]
  -[SBTransitionSwitcherModifierEvent setDragAndDropTransition:]
  -[SBTransitionSwitcherModifierEvent isBreadcrumbTransition]
  -[SBTransitionSwitcherModifierEvent setBreadcrumbTransition:]
  -[SBTransitionSwitcherModifierEvent isMorphToPIPTransition]
  -[SBTransitionSwitcherModifierEvent setMorphToPIPTransition:]
  -[SBTransitionSwitcherModifierEvent isMorphFromPIPTransition]
  -[SBTransitionSwitcherModifierEvent setMorphFromPIPTransition:]
  -[SBTransitionSwitcherModifierEvent isContinuityTransition]
  -[SBTransitionSwitcherModifierEvent setContinuityTransition:]
  -[SBTransitionSwitcherModifierEvent isBannerUnfurlTransition]
  -[SBTransitionSwitcherModifierEvent setBannerUnfurlTransition:]
  -[SBTransitionSwitcherModifierEvent isIconZoomDisabled]
  -[SBTransitionSwitcherModifierEvent setIconZoomDisabled:]
  -[SBTransitionSwitcherModifierEvent isSpotlightTransition]
  -[SBTransitionSwitcherModifierEvent setSpotlightTransition:]
  -[SBTransitionSwitcherModifierEvent setShelfTransition:]
  -[SBTransitionSwitcherModifierEvent dosidoTransitionDirection]
  -[SBTransitionSwitcherModifierEvent setDosidoTransitionDirection:]
  -[SBTransitionSwitcherModifierEvent isShelfRequestTransition]
  -[SBTransitionSwitcherModifierEvent setShelfRequestTransition:]
  -[SBTransitionSwitcherModifierEvent isMorphFromInAppView]
  -[SBTransitionSwitcherModifierEvent setMorphFromInAppView:]
  -[SBTransitionSwitcherModifierEvent isQuickActionTransition]
  -[SBTransitionSwitcherModifierEvent setQuickActionTransition:]
  -[SBTransitionSwitcherModifierEvent isNewSceneTransition]
  -[SBTransitionSwitcherModifierEvent setNewSceneTransition:]
  -[SBTransitionSwitcherModifierEvent debugPredicateSummary]


SBBacklightStudyLogger : NSObject <SBBacklightControllerObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBacklightStudyLogger .cxx_destruct]
  -[SBBacklightStudyLogger initWithController:]
  -[SBBacklightStudyLogger backlightController:didAnimateBacklightToFactor:source:]
  -[SBBacklightStudyLogger dealloc]


SBFluidSwitcherViewController : UIViewController <SBFluidSwitcherPageContentViewProviderDelegate, SBChainableModifierDelegate, SBAppSwitcherSnapshotImageCacheDelegate, BSUIScrollViewDelegate, SBFluidSwitcherItemContainerDelegate, SBIconViewObserver, BSDescriptionProviding, UIGestureRecognizerDelegate, SBSearchGestureObserver, SBChainableModifierDelegate, PTSettingsKeyObserver, PTSettingsKeyPathObserver, SBHistorianSwitcherModifierDelegate, SBSwitcherLiveContentOverlayCoordinatorDelegate, SBAppSwitcherReusableSnapshotViewDelegate, SBC2GroupCompletionDelegate, SBSwitcherLiveContentOverlayDelegate, SBFluidSwitcherContentViewDelegate, SBViewMorphAnimatorObserver, SBViewMorphAnimatorDelegate, SBFluidSwitcherSpaceUnderlayAccessoryViewDelegate, SBFluidSwitcherSpaceOverlayAccessoryViewDelegate, SBSlideOverTongueViewDelegate, SBSwitcherShelfViewControllerDelegate, SBSwitcherContentViewControlling>
 @property  NSMutableDictionary *visibleItemContainers
 @property  NSMutableDictionary *visibleOverlayAccessoryViews
 @property  NSMutableDictionary *visibleUnderlayAccessoryViews
 @property  NSMutableDictionary *visibleItemContainerBackdropViews
 @property  NSMutableSet *focusedItemBackdropsBeingRemoved
 @property  NSMutableDictionary *liveContentOverlays
 @property  NSMutableArray *hiddenRecycledItemContainers
 @property  NSMutableDictionary *visibleShelves
 @property  NSMutableSet *visibleShelvesHostedInContentView
 @property  NSMutableDictionary *hiddenAppLayoutAssertionsForShelves
 @property  SBAppSwitcherScrollView *scrollView
 @property  SBScrollSwitcherModifierEvent *currentScrollEvent
 @property  SBFluidSwitcherContentView *contentView
 @property  SBFluidSwitcherButton *plusButton
 @property  SBFluidSwitcherTitledButton *reopenClosedWindowsButton
 @property  SBFluidSwitcherLayoutContext *layoutContext
 @property  SBSwitcherModifier *rootModifier
 @property  SBSwitcherModifier *reduceMotionModifier
 @property  NSMutableDictionary *hiddenIconViews
 @property  NSMutableDictionary *hiddenIconViewContainers
 @property  SBFloatingDockBehaviorAssertion *inAppFloatingDockBehaviorAssertion
 @property  SBFloatingDockBehaviorAssertion *transientOverlayFloatingDockBehaviorAssertion
 @property  SBFloatingDockBehaviorAssertion *switcherFloatingDockBehaviorAssertion
 @property  SBFloatingDockWindowLevelAssertion *switcherFloatingDockWindowLevelAssertion
 @property  SBFloatingDockWindowLevelAssertion *transientOverlayFloatingDockWindowLevelAssertion
 @property  SBFHomeGrabberSettings *homeGrabberSettings
 @property  SBViewMorphAnimator *pipViewMorphAnimator
 @property  UILabel *modifierStackDebugLabel
 @property  <BSInvalidatable> *wallpaperRequireAssertion
 @property  NSMutableDictionary *animatableProperties
 @property  SBIconView *bounceIconView
 @property  unsigned long bounceIconGenerationCount
 @property  NSArray *appLayouts
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIScrollView *switcherScrollView
 @property  <SBSwitcherContentViewControllerDelegate> *delegate
 @property  <SBSwitcherContentViewControllerDataSource> *dataSource
 @property  SBBestAppSuggestion *bestAppSuggestion
 @property  BOOL showModifierTimeline
 @property  long long contentOrientation
 @property  BOOL asyncRenderingDisabled
 @property  BOOL canInterruptActiveTransition
 @property  BSAnimationSettings *defaultTransitionAnimationSettings

  // instance methods
  -[SBFluidSwitcherViewController switcherSupportedInterfaceOrientations]
  -[SBFluidSwitcherViewController iconViewWasDiscarded:]
  -[SBFluidSwitcherViewController setAnimatableProperties:]
  -[SBFluidSwitcherViewController settings:changedValueForKeyPath:]
  -[SBFluidSwitcherViewController iconViewWasRecycled:]
  -[SBFluidSwitcherViewController _reduceMotionStatusDidChange:]
  -[SBFluidSwitcherViewController medusaSettings]
  -[SBFluidSwitcherViewController animatableProperties]
  -[SBFluidSwitcherViewController liveContentOverlays]
  -[SBFluidSwitcherViewController applicationSceneSettingsFrameForInterfaceOrientation:centerConfiguration:]
  -[SBFluidSwitcherViewController homeScreenInterfaceOrientation]
  -[SBFluidSwitcherViewController visibleShelves]
  -[SBFluidSwitcherViewController homeGrabberSettings]
  -[SBFluidSwitcherViewController searchGesture:changedPercentComplete:]
  -[SBFluidSwitcherViewController searchGesture:startedShowing:]
  -[SBFluidSwitcherViewController setPlusButton:]
  -[SBFluidSwitcherViewController setHomeGrabberSettings:]
  -[SBFluidSwitcherViewController splitViewInnerCornerRadius]
  -[SBFluidSwitcherViewController _performModifierHapticResponse:]
  -[SBFluidSwitcherViewController setScrollView:]
  -[SBFluidSwitcherViewController canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[SBFluidSwitcherViewController _effectiveStartOrientation:andEndOrientation:forTransitionContext:]
  -[SBFluidSwitcherViewController _updateSuppressingHomeAffordanceBounce]
  -[SBFluidSwitcherViewController _noteItemContainerDidUpdateContentClippingWithMode:]
  -[SBFluidSwitcherViewController setSwitcherFloatingDockWindowLevelAssertion:]
  -[SBFluidSwitcherViewController _updateStyleWithCompletion:]
  -[SBFluidSwitcherViewController _scrollView:adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBFluidSwitcherViewController _updateStatusBarAndHomeGrabberVisibilityForAppLayout:animated:]
  -[SBFluidSwitcherViewController handleGestureDidUpdate:]
  -[SBFluidSwitcherViewController underlayAccessoryViewShouldBeginPointerInteraction:]
  -[SBFluidSwitcherViewController switcherPreferredInterfaceOrientation]
  -[SBFluidSwitcherViewController _performModifierInjectVelocityResponse:]
  -[SBFluidSwitcherViewController _dequeueOverlayAccessoryViewFromReusePool]
  -[SBFluidSwitcherViewController shouldRubberbandFullScreenHomeGrabberView]
  -[SBFluidSwitcherViewController visibleItemContainerBackdropViews]
  -[SBFluidSwitcherViewController _handleEventResponse:]
  -[SBFluidSwitcherViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBFluidSwitcherViewController iconViewSizeDidChange:]
  -[SBFluidSwitcherViewController noteModelDidMutateForInsertionOfAppLayouts:atIndexes:willAnimate:]
  -[SBFluidSwitcherViewController shouldAcceleratedHomeButtonPressBegin]
  -[SBFluidSwitcherViewController homeScreenWindowLevel]
  -[SBFluidSwitcherViewController _handleKeyboardFrameWillChange:]
  -[SBFluidSwitcherViewController _updateVisibleOverlayAndUnderlayViews]
  -[SBFluidSwitcherViewController _updateResignActiveAssertions]
  -[SBFluidSwitcherViewController setReopenClosedWindowsButton:]
  -[SBFluidSwitcherViewController visibleItemContainers]
  -[SBFluidSwitcherViewController scrollViewDidEndScrolling:]
  -[SBFluidSwitcherViewController switcherBackdropLayoutElement]
  -[SBFluidSwitcherViewController slideOverTongueLayoutElement]
  -[SBFluidSwitcherViewController defaultTransitionAnimationSettings]
  -[SBFluidSwitcherViewController contentOrientation]
  -[SBFluidSwitcherViewController _unadjustedLeafAppLayouts]
  -[SBFluidSwitcherViewController setContentOrientation:]
  -[SBFluidSwitcherViewController _backgroundContrastDidChange:]
  -[SBFluidSwitcherViewController handleVolumeUpButtonPress]
  -[SBFluidSwitcherViewController _updateVisibleShelves]
  -[SBFluidSwitcherViewController initWithCoder:]
  -[SBFluidSwitcherViewController cornerRadiusForAppLayout:]
  -[SBFluidSwitcherViewController viewWillLayoutSubviews]
  -[SBFluidSwitcherViewController _appLayoutForCenterWindowCornerRadiiCalculation]
  -[SBFluidSwitcherViewController _performFolderSnapshotRequestResponse:]
  -[SBFluidSwitcherViewController _performModifierCompletionResponse:]
  -[SBFluidSwitcherViewController homeGestureSettings]
  -[SBFluidSwitcherViewController _temporarilyHideMatchMovedZoomDownAnimationViewAnimated:]
  -[SBFluidSwitcherViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFluidSwitcherViewController _updateTitleItemsLabelColor]
  -[SBFluidSwitcherViewController _keyboardFocusableLiveAppLayoutsMatchingFocusedApp:foundAtIndex:]
  -[SBFluidSwitcherViewController handleHomeButtonDoublePress]
  -[SBFluidSwitcherViewController _firstZOrderedSubviewViewAtLocation:]
  -[SBFluidSwitcherViewController homeScreenIconFrameForAppLayout:]
  -[SBFluidSwitcherViewController _itemContainerAtLocation:environment:]
  -[SBFluidSwitcherViewController animationControllerForTransitionRequest:]
  -[SBFluidSwitcherViewController traitCollectionDidChange:]
  -[SBFluidSwitcherViewController _updateLayoutWithCompletion:]
  -[SBFluidSwitcherViewController _updateSwitcherDimmingViewPresence]
  -[SBFluidSwitcherViewController layoutFrameForItemWithRole:inAppLayout:interfaceOrientation:forSnapshotView:]
  -[SBFluidSwitcherViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFluidSwitcherViewController _keyboardWillHide:]
  -[SBFluidSwitcherViewController overlayAccessoryViewHomeScreenInterfaceOrientation:]
  -[SBFluidSwitcherViewController scrollView]
  -[SBFluidSwitcherViewController _keyboardWillShow:]
  -[SBFluidSwitcherViewController _updateAsynchronousSurfaceRetentionAssertion]
  -[SBFluidSwitcherViewController _stopRequiringItemContainerShadowPathDisplayLinkForReason:]
  -[SBFluidSwitcherViewController wallpaperRequireAssertion]
  -[SBFluidSwitcherViewController handleHomeButtonPress]
  -[SBFluidSwitcherViewController _rebuildCachedAdjustedAppLayouts]
  -[SBFluidSwitcherViewController _performModifierNotifyIconWillZoomDownResponse:]
  -[SBFluidSwitcherViewController _updateContentViewPassesTouchesThrough]
  -[SBFluidSwitcherViewController setVisibleItemContainerBackdropViews:]
  -[SBFluidSwitcherViewController scaleForDownscaledSnapshotsOfAppLayout:inImageCache:]
  -[SBFluidSwitcherViewController cornerRadiiForLayoutRole:inAppLayout:]
  -[SBFluidSwitcherViewController bestAppSuggestion]
  -[SBFluidSwitcherViewController _performUpdateDragPlatterBlurResponse:]
  -[SBFluidSwitcherViewController gestureHandlingModifier:averageVelocityOverDuration:]
  -[SBFluidSwitcherViewController _performCrossfadeIfNeededWithCompletion:]
  -[SBFluidSwitcherViewController handleLockButtonPress]
  -[SBFluidSwitcherViewController parentViewControllerForContentOverlay]
  -[SBFluidSwitcherViewController isFloatingDockSupported]
  -[SBFluidSwitcherViewController _updateModifierStackDebugLabelPresence]
  -[SBFluidSwitcherViewController slideOverTongueViewTapped:]
  -[SBFluidSwitcherViewController shelfItemScaleForAppLayout:inShelf:]
  -[SBFluidSwitcherViewController setDataSource:]
  -[SBFluidSwitcherViewController handleVolumeDownButtonPress]
  -[SBFluidSwitcherViewController bounceIconView]
  -[SBFluidSwitcherViewController _layoutVisibleItemsWithCompletion:]
  -[SBFluidSwitcherViewController handleHeadsetButtonPress:]
  -[SBFluidSwitcherViewController shouldMorphToPIPForTransitionContext:]
  -[SBFluidSwitcherViewController _unblurItemContainer:]
  -[SBFluidSwitcherViewController delegateForForSnapshotPageViewFromProvider:]
  -[SBFluidSwitcherViewController snapshotScaleForSceneHandle:]
  -[SBFluidSwitcherViewController floatingApplicationFrameInInterfaceOrientation:floatingConfiguration:]
  -[SBFluidSwitcherViewController _isPerformingMatchMoveToIconView]
  -[SBFluidSwitcherViewController currentVelocityValueForVisibleAppLayout:key:]
  -[SBFluidSwitcherViewController leadingStatusBarStyleRequest]
  -[SBFluidSwitcherViewController _updateHomeScreenPointerInteractions]
  -[SBFluidSwitcherViewController handleEventResponse:]
  -[SBFluidSwitcherViewController _updateLayoutFromInterfaceOrientation:toInterfaceOrientation:]
  -[SBFluidSwitcherViewController _iconControllerOverlayVisibilityDidChange:]
  -[SBFluidSwitcherViewController handleHomeButtonLongPress]
  -[SBFluidSwitcherViewController switcherShelfViewController:hitTestedToTopAffordance:window:]
  -[SBFluidSwitcherViewController itemContainerForAppLayoutOverlapsFloatingDock:]
  -[SBFluidSwitcherViewController iconViewForAppLayout:]
  -[SBFluidSwitcherViewController _updateScrollViewSizeAndSpacing]
  -[SBFluidSwitcherViewController _applyStyleToVisibleItemContainersWithCompletion:]
  -[SBFluidSwitcherViewController associateCenterWindowInteractionIdentifier:withSceneIdentifier:]
  -[SBFluidSwitcherViewController acquiredViewController:forTransientOverlayAppLayout:]
  -[SBFluidSwitcherViewController _updateBounceIcon]
  -[SBFluidSwitcherViewController _handleDismissTapGesture:]
  -[SBFluidSwitcherViewController _performNewWindowSwitcherResponse:]
  -[SBFluidSwitcherViewController handleVoiceCommandButtonPress]
  -[SBFluidSwitcherViewController canSelectContainer:numberOfTaps:]
  -[SBFluidSwitcherViewController isShowingSpotlightOrTodayView]
  -[SBFluidSwitcherViewController .cxx_destruct]
  -[SBFluidSwitcherViewController isAppLayoutMostRecentRepresentationOfDisplayItems:]
  -[SBFluidSwitcherViewController _adjustedAppLayoutForItemContainerAtLocation:environment:]
  -[SBFluidSwitcherViewController minimumHomeScreenScale]
  -[SBFluidSwitcherViewController _performEventResponse:]
  -[SBFluidSwitcherViewController canInterruptActiveTransition]
  -[SBFluidSwitcherViewController _applicationForDisplayItem:]
  -[SBFluidSwitcherViewController _prepareForCrossfadeIfNeeded]
  -[SBFluidSwitcherViewController _frameForCenterItemInInterfaceOrientation:centerConfiguration:]
  -[SBFluidSwitcherViewController _blurItemContainerWithAnimation:]
  -[SBFluidSwitcherViewController snapshotCache]
  -[SBFluidSwitcherViewController _updateShadowPathDisplayLink]
  -[SBFluidSwitcherViewController _performContentViewScaleAnimationForDosido]
  -[SBFluidSwitcherViewController _removeCenterWindowAnimationContextWithKey:]
  -[SBFluidSwitcherViewController defaultFocusItem]
  -[SBFluidSwitcherViewController _shouldItemContainersUseDarkLabels]
  -[SBFluidSwitcherViewController currentStatusBarHeightOfContainer:]
  -[SBFluidSwitcherViewController viewDidLoad]
  -[SBFluidSwitcherViewController sizeForAppLayout:fromProvider:]
  -[SBFluidSwitcherViewController displayItemSupportsMultipleWindowsIndicator:]
  -[SBFluidSwitcherViewController setTransientOverlayFloatingDockWindowLevelAssertion:]
  -[SBFluidSwitcherViewController userInterfaceStyle]
  -[SBFluidSwitcherViewController defaultHomeScreenIconSize]
  -[SBFluidSwitcherViewController SBC2GroupCompletionAnimationDidComplete:finished:retargeted:]
  -[SBFluidSwitcherViewController killContainer:forReason:]
  -[SBFluidSwitcherViewController switcherSettings]
  -[SBFluidSwitcherViewController setBounceIconGenerationCount:]
  -[SBFluidSwitcherViewController scrollableQueryModifier:contentOffsetVelocityConsideringNextContentOffset:]
  -[SBFluidSwitcherViewController clickReceivedForHomeGrabberView:]
  -[SBFluidSwitcherViewController homeAffordanceOrientationIfMismatchedFromCurrentLayoutState]
  -[SBFluidSwitcherViewController _webClipIdentifierForAppClipBundleIdentifier:sceneIdentifier:]
  -[SBFluidSwitcherViewController visibleShelvesHostedInContentView]
  -[SBFluidSwitcherViewController didSelectContainer:]
  -[SBFluidSwitcherViewController _updateVisibleAccessoryViews]
  -[SBFluidSwitcherViewController separatorViewWidth]
  -[SBFluidSwitcherViewController iconImageFrameForAppLayout:]
  -[SBFluidSwitcherViewController contentView]
  -[SBFluidSwitcherViewController succinctDescriptionBuilder]
  -[SBFluidSwitcherViewController displayCornerRadius]
  -[SBFluidSwitcherViewController _performModifierReachabilityResponse:]
  -[SBFluidSwitcherViewController areLiveContentOverlayUpdatesSuspended]
  -[SBFluidSwitcherViewController _performModifierEmitSBEventResponse:]
  -[SBFluidSwitcherViewController _leafAppLayoutsInAppLayout:intersectingHomeGrabber:]
  -[SBFluidSwitcherViewController underlayAccessoryView:didSelectHeaderForRole:]
  -[SBFluidSwitcherViewController iconViewDidBecomeWindowless:]
  -[SBFluidSwitcherViewController isFloatingDockGesturePossible]
  -[SBFluidSwitcherViewController _addVisibleItemContainerForAppLayout:reusingItemContainerIfExists:]
  -[SBFluidSwitcherViewController shelfItemCornerRadiusForAppLayout:inShelf:]
  -[SBFluidSwitcherViewController numberOfVisibleAppLayoutsForBundleIdentifier:]
  -[SBFluidSwitcherViewController _unadjustedAppLayouts]
  -[SBFluidSwitcherViewController overlayAccessoryViewFrameForIconOverlayView:fullPresented:]
  -[SBFluidSwitcherViewController _centerWindowActivationAnimationContextForKey:]
  -[SBFluidSwitcherViewController setDelegate:]
  -[SBFluidSwitcherViewController _floatingDockIconLocationForTransitionSource:]
  -[SBFluidSwitcherViewController _ensureSubviewOrdering]
  -[SBFluidSwitcherViewController displayItemSupportsCenterRole:]
  -[SBFluidSwitcherViewController frameForPageViewOfContainer:fullyPresented:]
  -[SBFluidSwitcherViewController contentPageViewScaleForAppLayout:]
  -[SBFluidSwitcherViewController homeScreenHasWidgetCenterOrLibraryOpen]
  -[SBFluidSwitcherViewController appLayoutsContainedWithinAppLayout:]
  -[SBFluidSwitcherViewController initWithNibName:bundle:]
  -[SBFluidSwitcherViewController _updateVisibleItemsAccessoryViewsLayoutAndStyleWithCompletion:]
  -[SBFluidSwitcherViewController _updateSnapshotCacheReloadingForActiveInterfaceOrientationChange]
  -[SBFluidSwitcherViewController _updateVisibleAdjustedAppLayouts]
  -[SBFluidSwitcherViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBFluidSwitcherViewController defaultFrameForLayoutRole:inAppLayout:interfaceOrientation:]
  -[SBFluidSwitcherViewController appLayoutsGenerationCount]
  -[SBFluidSwitcherViewController transientOverlayFloatingDockBehaviorAssertion]
  -[SBFluidSwitcherViewController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[SBFluidSwitcherViewController snapshotView:isInsetForHomeAffordanceForAppLayout:]
  -[SBFluidSwitcherViewController moveExistingLiveContentOverlay:forAppLayout:toAppLayout:]
  -[SBFluidSwitcherViewController keyboardFocusedAppLayout]
  -[SBFluidSwitcherViewController setVisibleOverlayAccessoryViews:]
  -[SBFluidSwitcherViewController setShelfFocusedDisplayItems:]
  -[SBFluidSwitcherViewController dataSource]
  -[SBFluidSwitcherViewController _updateReopenClosedWindowsButtonWithMode:completion:]
  -[SBFluidSwitcherViewController currentScrollEvent]
  -[SBFluidSwitcherViewController keyboardHeight]
  -[SBFluidSwitcherViewController _performModifierEmitStudyLogResponse:]
  -[SBFluidSwitcherViewController homeScreenHasOpenFolder]
  -[SBFluidSwitcherViewController switcherWindowLevel]
  -[SBFluidSwitcherViewController isWindowVisible]
  -[SBFluidSwitcherViewController isEdgeProtectedForHomeGestureAtEdgeLocation:]
  -[SBFluidSwitcherViewController _toggleFloatingAppVisibility]
  -[SBFluidSwitcherViewController overlayAccessoryViewSwitcherInterfaceOrientation:]
  -[SBFluidSwitcherViewController _resetItemContainerShadowPathDisplayLink]
  -[SBFluidSwitcherViewController activatingDisplayItemForAppLayout:]
  -[SBFluidSwitcherViewController hasHomeButton]
  -[SBFluidSwitcherViewController performTransitionWithContext:animated:completion:]
  -[SBFluidSwitcherViewController descriptionBuilderWithMultilinePrefix:]
  -[SBFluidSwitcherViewController _performModifierUpdateLayoutResponse:]
  -[SBFluidSwitcherViewController _updateSpringBoardStatusBarVisibility]
  -[SBFluidSwitcherViewController switcherShelfViewController:didFinishPresentation:]
  -[SBFluidSwitcherViewController _updateHiddenAppLayoutsInShelves]
  -[SBFluidSwitcherViewController transientOverlayFloatingDockWindowLevelAssertion]
  -[SBFluidSwitcherViewController setSwitcherFloatingDockBehaviorAssertion:]
  -[SBFluidSwitcherViewController init]
  -[SBFluidSwitcherViewController noteAppLayoutsDidChange]
  -[SBFluidSwitcherViewController _updateWallpaperStyle]
  -[SBFluidSwitcherViewController snapshotSizeForItemWithRole:inAppLayout:interfaceOrientation:inImageCache:]
  -[SBFluidSwitcherViewController _setupContentAndTransientViews]
  -[SBFluidSwitcherViewController _performModifierIconViewVisibilityUpdateResponse:]
  -[SBFluidSwitcherViewController scrollViewDidEndDragging:willDecelerate:]
  -[SBFluidSwitcherViewController _performBlurItemContainerResponse:]
  -[SBFluidSwitcherViewController _folderExpansionAnimationWillBegin:]
  -[SBFluidSwitcherViewController homeScreenIconGridSizeClassForAppLayout:]
  -[SBFluidSwitcherViewController prepareAnimatedInsertionOfAppLayouts:atIndexes:]
  -[SBFluidSwitcherViewController _coolDownEmptyAppSwitcherHaptic]
  -[SBFluidSwitcherViewController _appLayoutWantsToBeKeptInViewHierarchy:]
  -[SBFluidSwitcherViewController morphToPIPSourceAlpha]
  -[SBFluidSwitcherViewController setAsyncRenderingDisabled:]
  -[SBFluidSwitcherViewController _switcherDropRegionContextForDraggingLayoutRole:inAppLayout:atLocation:]
  -[SBFluidSwitcherViewController scrollViewKillingProgressUpdated:translation:isDragging:decelerationTargetProgress:forContainer:]
  -[SBFluidSwitcherViewController SBC2GroupCompletionAnimationDidBegin:]
  -[SBFluidSwitcherViewController viewControllerForTransientOverlayAppLayout:fromProvider:]
  -[SBFluidSwitcherViewController hideSourceViewForAnimator:]
  -[SBFluidSwitcherViewController shelfFocusedDisplayItems]
  -[SBFluidSwitcherViewController descriptionWithMultilinePrefix:]
  -[SBFluidSwitcherViewController _updateVisibleHomeAffordanceViews]
  -[SBFluidSwitcherViewController _performSwitcherDropWithContext:mutationBlock:]
  -[SBFluidSwitcherViewController historianModifier:didRecordEntry:]
  -[SBFluidSwitcherViewController _animatablePropertyWithNotifications:]
  -[SBFluidSwitcherViewController _updateAppStatusBarAndHomeGrabberVisibilityAnimated:]
  -[SBFluidSwitcherViewController isShowingModifierTimeline]
  -[SBFluidSwitcherViewController hiddenIconViews]
  -[SBFluidSwitcherViewController performKeyboardShortcutAction:]
  -[SBFluidSwitcherViewController setBestAppSuggestion:]
  -[SBFluidSwitcherViewController _updatePlusButtonPresence]
  -[SBFluidSwitcherViewController _performModifierTimerEventResponse:]
  -[SBFluidSwitcherViewController _beginRequiringItemContainerShadowPathDisplayLinkForReason:]
  -[SBFluidSwitcherViewController isStatusBarHiddenForAppLayout:]
  -[SBFluidSwitcherViewController switcherScrollView]
  -[SBFluidSwitcherViewController _iconLocationsForActivationSource:]
  -[SBFluidSwitcherViewController succinctDescription]
  -[SBFluidSwitcherViewController layoutContext]
  -[SBFluidSwitcherViewController _frameForFloatingAppLayoutInInterfaceOrientation:floatingConfiguration:]
  -[SBFluidSwitcherViewController trailingStatusBarStyleRequest]
  -[SBFluidSwitcherViewController setInAppFloatingDockBehaviorAssertion:]
  -[SBFluidSwitcherViewController leafAppLayoutForKeyboardFocusedScene]
  -[SBFluidSwitcherViewController _allowsTitleItemsForAppLayout:]
  -[SBFluidSwitcherViewController _updatePlusButtonStyleWithMode:completion:]
  -[SBFluidSwitcherViewController _updateSwitcherBackdropViewPresence]
  -[SBFluidSwitcherViewController _updateHomeScreenContentRequirement]
  -[SBFluidSwitcherViewController _updateTitlePresenceForAdjustedAppLayout:]
  -[SBFluidSwitcherViewController _updateKeyboardSuppressionAssertion]
  -[SBFluidSwitcherViewController setFocusedItemBackdropsBeingRemoved:]
  -[SBFluidSwitcherViewController appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBFluidSwitcherViewController scrollViewContentOffset]
  -[SBFluidSwitcherViewController _activeTransientOverlayPresentedAppLayout]
  -[SBFluidSwitcherViewController _itemContainerForAppLayoutIfExists:]
  -[SBFluidSwitcherViewController _configureTransitionRequestForGestureBegin:]
  -[SBFluidSwitcherViewController _layoutSlideoverTonguesWithCompletion:]
  -[SBFluidSwitcherViewController presentSlideOverEdgeProtectTongueOnEdge:]
  -[SBFluidSwitcherViewController homeScreenHasOpenFolderInLocation:]
  -[SBFluidSwitcherViewController initWithRootModifier:liveContentOverlayCoordinator:delegate:dataSource:debugName:]
  -[SBFluidSwitcherViewController hiddenAppLayoutAssertionsForShelves]
  -[SBFluidSwitcherViewController _warmupEmptyAppSwitcherHaptic]
  -[SBFluidSwitcherViewController _delayForTransitionWithContext:animated:]
  -[SBFluidSwitcherViewController transformForCardUnderSheetForBoundsSize:]
  -[SBFluidSwitcherViewController _setupMorphAnimatorIfNeededForEntity:pipCoordinator:appLayout:uniqueID:direction:gestureInitiated:]
  -[SBFluidSwitcherViewController _updateAsyncRendering]
  -[SBFluidSwitcherViewController snapshotView:shouldShowAppClipOverlayForLayout:]
  -[SBFluidSwitcherViewController _layoutVisibleShelvesWithCompletion:]
  -[SBFluidSwitcherViewController displayItemSupportsMedusa:]
  -[SBFluidSwitcherViewController shelfItemFrameForAppLayout:inShelf:]
  -[SBFluidSwitcherViewController containerWillBeginAnimatingHighlight:scale:isTracking:]
  -[SBFluidSwitcherViewController _iconImageFrameForIconView:]
  -[SBFluidSwitcherViewController homeScreenIconCornerRadiusForAppLayout:]
  -[SBFluidSwitcherViewController appLayoutContainingAppLayout:]
  -[SBFluidSwitcherViewController isUserInteractionEnabled]
  -[SBFluidSwitcherViewController tapReceivedForGrabberTongueAtEdge:]
  -[SBFluidSwitcherViewController isDevicePad]
  -[SBFluidSwitcherViewController _removeVisibleItemContainerForAppLayout:]
  -[SBFluidSwitcherViewController _shadowPathDisplayLinkDidUpdate:]
  -[SBFluidSwitcherViewController switcherViewBounds]
  -[SBFluidSwitcherViewController setBounceIconView:]
  -[SBFluidSwitcherViewController overlayAccessoryView:didSelectHeaderForRole:]
  -[SBFluidSwitcherViewController gestureRecognizer:shouldReceiveTouch:]
  -[SBFluidSwitcherViewController _spaceContainingAppLayout:]
  -[SBFluidSwitcherViewController scaleForAppLayout:]
  -[SBFluidSwitcherViewController isLayoutRoleContentReady:inAppLayout:]
  -[SBFluidSwitcherViewController floatingDockHeight]
  -[SBFluidSwitcherViewController homeScreenHasModalLibraryOpenInForeground]
  -[SBFluidSwitcherViewController _updateModifierTimelinePresence]
  -[SBFluidSwitcherViewController floatingDockViewTopMargin]
  -[SBFluidSwitcherViewController _updateShadowPathForAppLayout:]
  -[SBFluidSwitcherViewController setHiddenIconViews:]
  -[SBFluidSwitcherViewController containerDidEndSwipingToKill:]
  -[SBFluidSwitcherViewController _acquireKeyboardSuppressionAssertionForMode:]
  -[SBFluidSwitcherViewController _navigateFromFocusedAppWindowSceneToNextScene:matchFocusedApp:]
  -[SBFluidSwitcherViewController _appLayoutForWorkspaceTransientOverlay:]
  -[SBFluidSwitcherViewController pipViewMorphAnimator]
  -[SBFluidSwitcherViewController _updateVisibleItems]
  -[SBFluidSwitcherViewController removeLayoutRole:inSpace:mutationBlock:reason:]
  -[SBFluidSwitcherViewController performAnimatedInsertionOfAppLayouts:atIndexes:completion:]
  -[SBFluidSwitcherViewController respondToInAppStatusBarRequestedHiddenUpdateAnimated:]
  -[SBFluidSwitcherViewController _debugSwitcherPostModernRotationSupportedSupportedInterfaceOrientations]
  -[SBFluidSwitcherViewController isStudyLogEnabled]
  -[SBFluidSwitcherViewController _updateHomeScreenBackdropType]
  -[SBFluidSwitcherViewController _setupMorphToPIPIfNeededForTransitionContext:]
  -[SBFluidSwitcherViewController appLayoutRequiresLegacyRotationSupport:]
  -[SBFluidSwitcherViewController cleanUpAfterCompletingCenterWindowAnimationWithAction:]
  -[SBFluidSwitcherViewController orientationForPageViewFromProvider:]
  -[SBFluidSwitcherViewController _updateEdgeProtectAndAutoHideForHomeAffordancesInAppLayout:withResetDelay:unhideDelay:]
  -[SBFluidSwitcherViewController noteKeyboardFocusDidChangeToSceneID:]
  -[SBFluidSwitcherViewController _performModifierIconOverlayVisibilityUpdateResponse:]
  -[SBFluidSwitcherViewController _leafAppLayoutForItemContainerAtLocation:environment:]
  -[SBFluidSwitcherViewController _ensureSubviewOrderingInsideSpace:]
  -[SBFluidSwitcherViewController scrollViewDidScroll:withContext:]
  -[SBFluidSwitcherViewController _updateItemContainerBackdropPresenceForIndex:scale:rotation:cornerRadius:animationAttributes:completion:]
  -[SBFluidSwitcherViewController isReduceMotionEnabled]
  -[SBFluidSwitcherViewController completedTransitionFrameForAppLayout:]
  -[SBFluidSwitcherViewController _iconForWorkspaceEntity:]
  -[SBFluidSwitcherViewController homeGrabberViewForAppLayout:]
  -[SBFluidSwitcherViewController _sceneDeactivationPredicateMatchingAppLayouts:]
  -[SBFluidSwitcherViewController _appLayoutRequiresLegacyRotationSupport:]
  -[SBFluidSwitcherViewController genericSwitcherAccessoryLayoutElement]
  -[SBFluidSwitcherViewController rootModifier]
  -[SBFluidSwitcherViewController _isAppLayoutBlurred:]
  -[SBFluidSwitcherViewController isAppLayoutVisibleInSwitcherBounds:]
  -[SBFluidSwitcherViewController _cancelInProcessAnimationsWithOptions:]
  -[SBFluidSwitcherViewController defaultBoundsForAppLayout:interfaceOrientation:]
  -[SBFluidSwitcherViewController delegate]
  -[SBFluidSwitcherViewController _updateSlideOverTonguePresence]
  -[SBFluidSwitcherViewController homeScreenIconScaleForAppLayout:]
  -[SBFluidSwitcherViewController reopenClosedWindowsButton]
  -[SBFluidSwitcherViewController hiddenIconViewContainers]
  -[SBFluidSwitcherViewController setTransientOverlayFloatingDockBehaviorAssertion:]
  -[SBFluidSwitcherViewController _enqueueOverlayAccessoryViewInReusePool:]
  -[SBFluidSwitcherViewController setVisibleItemContainers:]
  -[SBFluidSwitcherViewController settings:changedValueForKey:]
  -[SBFluidSwitcherViewController setShowModifierTimeline:]
  -[SBFluidSwitcherViewController isInMedusaCapableSpace]
  -[SBFluidSwitcherViewController willBeginGestureWithType:identifier:]
  -[SBFluidSwitcherViewController containerDidEndAnimatingHighlight:scale:]
  -[SBFluidSwitcherViewController _rotationAnimationSettingsForTransitionContext:]
  -[SBFluidSwitcherViewController _setupLiveContentOverlayForAppLayout:itemContainer:overlay:]
  -[SBFluidSwitcherViewController removeLiveContentOverlayForAppLayout:animated:]
  -[SBFluidSwitcherViewController dismissSlideOverEdgeProtectTongueOnEdge:]
  -[SBFluidSwitcherViewController _updateAppExposeAccessoryButtonsExtendedTouchRegions]
  -[SBFluidSwitcherViewController _updateFloatingDockBehaviorAssertion]
  -[SBFluidSwitcherViewController _applyStyleToLiveContentOverlay:forItemContainer:atIndex:]
  -[SBFluidSwitcherViewController inAppFloatingDockBehaviorAssertion]
  -[SBFluidSwitcherViewController plusButton]
  -[SBFluidSwitcherViewController liveContentOverlayDidUpdateHomeAffordanceSupportedOrientations:]
  -[SBFluidSwitcherViewController _supportsKillingForAppLayout:]
  -[SBFluidSwitcherViewController containerWillBeginSwipingToKill:]
  -[SBFluidSwitcherViewController _configureApplicationAndTransientOverlayDockBehaviorAssertionsForContext:]
  -[SBFluidSwitcherViewController setLayoutContext:]
  -[SBFluidSwitcherViewController _noteSwitcherDropAnimationCompletedWithContext:]
  -[SBFluidSwitcherViewController _updateFloatingDockWindowLevelAssertion]
  -[SBFluidSwitcherViewController setLiveContentOverlayUpdatesSuspended:]
  -[SBFluidSwitcherViewController _updateScrollViewScrollEnabled]
  -[SBFluidSwitcherViewController switcherFloatingDockBehaviorAssertion]
  -[SBFluidSwitcherViewController setVisibleShelves:]
  -[SBFluidSwitcherViewController visibleOverlayAccessoryViews]
  -[SBFluidSwitcherViewController morphToPIPTargetScale]
  -[SBFluidSwitcherViewController hiddenRecycledItemContainers]
  -[SBFluidSwitcherViewController focusedItemBackdropsBeingRemoved]
  -[SBFluidSwitcherViewController displayScaleForContentOverlay]
  -[SBFluidSwitcherViewController _makeAppLayoutVisibleForTransitionWithContext:animated:completion:]
  -[SBFluidSwitcherViewController numberOfVisibleCards]
  -[SBFluidSwitcherViewController _performInvalidateItemContainerBackdropResponse:]
  -[SBFluidSwitcherViewController _performModifierPerformTransitionResponse:]
  -[SBFluidSwitcherViewController _performModifierMatchMoveToIconViewResponse:]
  -[SBFluidSwitcherViewController presentationValueForAnimatableProperty:]
  -[SBFluidSwitcherViewController dealloc]
  -[SBFluidSwitcherViewController containerViewBounds]
  -[SBFluidSwitcherViewController handleReopenClosedWindowsButtonTapped:]
  -[SBFluidSwitcherViewController _performInvalidateSnapshotCacheResponse:]
  -[SBFluidSwitcherViewController setRootModifier:]
  -[SBFluidSwitcherViewController _updateReopenClosedWindowsButtonPresence]
  -[SBFluidSwitcherViewController _createWorkspaceTransientOverlayForAppLayout:]
  -[SBFluidSwitcherViewController containerViewControllerForPageViewFromProvider:]
  -[SBFluidSwitcherViewController morphToPIPClippingFrame]
  -[SBFluidSwitcherViewController morphToPIPTargetCenter]
  -[SBFluidSwitcherViewController handleGestureDidEnd:]
  -[SBFluidSwitcherViewController gestureHandlingModifierRequestsUpdate:]
  -[SBFluidSwitcherViewController setContentView:]
  -[SBFluidSwitcherViewController _transitionEventForTransitionToLayoutState:identifier:phase:animated:]
  -[SBFluidSwitcherViewController iconForDisplayItem:]
  -[SBFluidSwitcherViewController displayItemIsClassic:]
  -[SBFluidSwitcherViewController switcherDimmingViewLayoutElement]
  -[SBFluidSwitcherViewController reduceMotionModifier]
  -[SBFluidSwitcherViewController _containerScrolledEnoughToClipSwitcherIconView:]
  -[SBFluidSwitcherViewController _dequeueUnderlayAccessoryViewFromReusePool]
  -[SBFluidSwitcherViewController switcherFloatingDockWindowLevelAssertion]
  -[SBFluidSwitcherViewController relinquishTransientOverlayViewController:]
  -[SBFluidSwitcherViewController bounceIconGenerationCount]
  -[SBFluidSwitcherViewController switcherWindow]
  -[SBFluidSwitcherViewController containerViewBoundsForHomeGrabberView:]
  -[SBFluidSwitcherViewController container:didBecomeFocused:]
  -[SBFluidSwitcherViewController setHiddenIconViewContainers:]
  -[SBFluidSwitcherViewController _iconViewForDisplayItem:isVisible:]
  -[SBFluidSwitcherViewController centerWindowFrameInInterfaceOrientation:centerConfiguration:]
  -[SBFluidSwitcherViewController numberOfHiddenAppLayoutsForBundleIdentifier:]
  -[SBFluidSwitcherViewController _leafAppLayoutInLiveContentOverlaysWithLayoutRole:]
  -[SBFluidSwitcherViewController modifierStackDebugLabel]
  -[SBFluidSwitcherViewController _enqueueUnderlayAccessoryViewInReusePool:]
  -[SBFluidSwitcherViewController _handlePlusButtonTapped:]
  -[SBFluidSwitcherViewController _bestSupportedHomeAffordanceOrientationForOrientation:inAppLayout:]
  -[SBFluidSwitcherViewController newAppLayoutsGenCount]
  -[SBFluidSwitcherViewController _spacesWithVisibleHomeAffordances]
  -[SBFluidSwitcherViewController addLiveContentOverlay:forAppLayout:animated:]
  -[SBFluidSwitcherViewController setModifierStackDebugLabel:]
  -[SBFluidSwitcherViewController _isLayoutStateSwitcher:allowTransitions:]
  -[SBFluidSwitcherViewController floatingDockWindowLevel]
  -[SBFluidSwitcherViewController switcherShelfViewController:liveViewForAppLayout:]
  -[SBFluidSwitcherViewController beginHidingAppLayout:forReason:]
  -[SBFluidSwitcherViewController appLayouts]
  -[SBFluidSwitcherViewController homeScreenIconLocationForAppLayout:]
  -[SBFluidSwitcherViewController loadView]
  -[SBFluidSwitcherViewController setVisibleShelvesHostedInContentView:]
  -[SBFluidSwitcherViewController setHiddenAppLayoutAssertionsForShelves:]
  -[SBFluidSwitcherViewController isRTLEnabled]
  -[SBFluidSwitcherViewController _updateSnapshotCache]
  -[SBFluidSwitcherViewController _performWithFixedUpdateMode:usingBlock:]
  -[SBFluidSwitcherViewController overlayAccessoryView:didUpdateShowingIconOverlay:]
  -[SBFluidSwitcherViewController entityRemovalSettings]
  -[SBFluidSwitcherViewController _sceneUpdateDidChange:]
  -[SBFluidSwitcherViewController _transitionEventForTransitionWithContext:identifier:phase:animated:]
  -[SBFluidSwitcherViewController _appLayoutFromLayoutElement:]
  -[SBFluidSwitcherViewController isSplitViewSupported]
  -[SBFluidSwitcherViewController liveContentOverlayDidUpdateHomeAffordanceEdgeProtectOrAutoHide:]
  -[SBFluidSwitcherViewController _updateModifierStackDebugLabel]
  -[SBFluidSwitcherViewController setPipViewMorphAnimator:]
  -[SBFluidSwitcherViewController _updateSwitcherBackdropType]
  -[SBFluidSwitcherViewController _actuateEmptyAppSwitcherHaptic]
  -[SBFluidSwitcherViewController _applyStyleToAppLayout:roleMask:completion:]
  -[SBFluidSwitcherViewController _workspaceEntityForBundleIdentifier:inTransitionContext:]
  -[SBFluidSwitcherViewController _shouldInterruptPresentationAndDismiss]
  -[SBFluidSwitcherViewController shouldAddAppLayoutToFront:forTransitionWithContext:transitionCompleted:]
  -[SBFluidSwitcherViewController setCurrentScrollEvent:]
  -[SBFluidSwitcherViewController setWallpaperRequireAssertion:]
  -[SBFluidSwitcherViewController setVisibleUnderlayAccessoryViews:]
  -[SBFluidSwitcherViewController isMedusaEnabled]
  -[SBFluidSwitcherViewController _performModifierInvalidateAdjustedAppLayoutsResponse:]
  -[SBFluidSwitcherViewController isHomeScreenSidebarVisible]
  -[SBFluidSwitcherViewController _rotateHomeAffordancesFromInterfaceOrientation:toInterfaceOrientation:]
  -[SBFluidSwitcherViewController _performModifierScrollToAppLayoutResponse:]
  -[SBFluidSwitcherViewController switcherInterfaceOrientation]
  -[SBFluidSwitcherViewController _performModifierInvalidateReopenButtonTextResponse:]
  -[SBFluidSwitcherViewController iconForAppLayout:]
  -[SBFluidSwitcherViewController _dispatchEventAndHandleAction:]
  -[SBFluidSwitcherViewController isFloatingDockFullyPresented]
  -[SBFluidSwitcherViewController _updateReopenClosedWindowsButtonText]
  -[SBFluidSwitcherViewController _performModifierDosidoScaleAnimationResponse:]
  -[SBFluidSwitcherViewController containerSelectionStateChanged:toState:]
  -[SBFluidSwitcherViewController _scrollToAppLayout:animated:alignment:completion:]
  -[SBFluidSwitcherViewController _layoutAppLayout:roleMask:completion:]
  -[SBFluidSwitcherViewController visibleUnderlayAccessoryViews]
  -[SBFluidSwitcherViewController scaledFrameForLayoutRole:inAppLayout:]
  -[SBFluidSwitcherViewController handleGestureDidBegin:]
  -[SBFluidSwitcherViewController prepareForIncomingCenterWindowAnimationWithAction:]
  -[SBFluidSwitcherViewController isAsyncRenderingDisabled]
  -[SBFluidSwitcherViewController setReduceMotionModifier:]
  -[SBFluidSwitcherViewController animatorWasCanceled:]
  -[SBFluidSwitcherViewController shouldAnimateInsertionOfAppLayouts:atIndexes:]
  -[SBFluidSwitcherViewController setHiddenRecycledItemContainers:]
  -[SBFluidSwitcherViewController _setCenterWindowActivationContext:forKey:]
  -[SBFluidSwitcherViewController _updateAnimatableProperties]
  -[SBFluidSwitcherViewController scrollableQueryModifier:convertScrollViewPointToContainerViewCoordinateSpace:]
  -[SBFluidSwitcherViewController morphToPIPClippingCornerRadius]
  -[SBFluidSwitcherViewController _orderedViewsForLayoutElement:excludeSwitcherHostedShelves:]
  -[SBFluidSwitcherViewController orientationForSnapshotOfAppLayout:inImageCache:]
  -[SBFluidSwitcherViewController _liveContentOverlayForHandlingHardwareButtonEvents]


SBInCallTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBInCallTestRecipe load]

  // instance methods
  -[SBInCallTestRecipe title]
  -[SBInCallTestRecipe handleVolumeIncrease]
  -[SBInCallTestRecipe handleVolumeDecrease]


SBRecordingIndicatorWindow : SBIgnoredForAutorotationSecureWindow
  // instance methods
  -[SBRecordingIndicatorWindow isActive]
  -[SBRecordingIndicatorWindow initWithDebugName:]


SBRecordingIndicatorManager : NSObject <SBAppStatusBarAssertionManagerObserver, SBSensorActivityObserver, SBUIActiveOrientationObserver, PTSettingsKeyObserver>
 @property  BOOL isIndicatorVisible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecordingIndicatorManager activeInterfaceOrientationWillChangeToOrientation:]
  -[SBRecordingIndicatorManager statusBarAssertionManager:removeStatusBarSettingsAssertion:]
  -[SBRecordingIndicatorManager activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBRecordingIndicatorManager statusBarAssertionManager:addStatusBarSettingsAssertion:]
  -[SBRecordingIndicatorManager initWithSensorActivityDataProvider:]
  -[SBRecordingIndicatorManager activityDidChangeForSensorActivityDataProvider:]
  -[SBRecordingIndicatorManager indicatorColorForSensorType:]
  -[SBRecordingIndicatorManager indicatorShapeForSensorType:]
  -[SBRecordingIndicatorManager .cxx_destruct]
  -[SBRecordingIndicatorManager indicatorIdentifierForSensorType:]
  -[SBRecordingIndicatorManager isIndicatorVisible]
  -[SBRecordingIndicatorManager _allowStatusBarDelayForCameraApp:]
  -[SBRecordingIndicatorManager _updateIndicatorStyleForSensorActivityAttributions:]
  -[SBRecordingIndicatorManager updateRecordingIndicatorForStatusBarChanges]
  -[SBRecordingIndicatorManager controlCenterWillPresent:]
  -[SBRecordingIndicatorManager controlCenterDidDismiss:]
  -[SBRecordingIndicatorManager _updateIndicatorViewForSensorType:]
  -[SBRecordingIndicatorManager setIndicatorVisible:]
  -[SBRecordingIndicatorManager dataProviderDidUpdate:]
  -[SBRecordingIndicatorManager settings:changedValueForKey:]
  -[SBRecordingIndicatorManager setIndicatorVisible:allowStatusBarDelayForCameraApp:]
  -[SBRecordingIndicatorManager differentiateWithoutColorDidChange:]


SBDraggingSystemManager : NSObject <UIDraggingSystemMonitorDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDraggingSystemManager sharedInstance]

  // instance methods
  -[SBDraggingSystemManager .cxx_destruct]
  -[SBDraggingSystemManager dragSessionDidEnd:]
  -[SBDraggingSystemManager touchRoutingPolicyForBeginningDragSessionWithInfo:]
  -[SBDraggingSystemManager dragSessionDidBegin:]
  -[SBDraggingSystemManager addObserver:]
  -[SBDraggingSystemManager removeObserver:]
  -[SBDraggingSystemManager setCommandeered:forDraggingSystemSession:forReason:]
  -[SBDraggingSystemManager setCommandeered:forDropSession:forReason:]


SBLowPowerAlertItem : SBAlertItem
 @property  BOOL showFindMyAlert
 @property  SPBeaconManager *beaconManager

  // class methods
  +[SBLowPowerAlertItem initialize]
  +[SBLowPowerAlertItem setBatteryLevel:]
  +[SBLowPowerAlertItem _thresholdForLevel:]
  +[SBLowPowerAlertItem _shouldIgnoreChangeToBatteryLevel:]

  // instance methods
  -[SBLowPowerAlertItem setBeaconManager:]
  -[SBLowPowerAlertItem .cxx_destruct]
  -[SBLowPowerAlertItem beaconManager]
  -[SBLowPowerAlertItem init]
  -[SBLowPowerAlertItem initWithLevel:]
  -[SBLowPowerAlertItem shouldShowInLockScreen]
  -[SBLowPowerAlertItem wakeDisplay]
  -[SBLowPowerAlertItem configure:requirePasscodeForActions:]
  -[SBLowPowerAlertItem shouldShowInEmergencyCall]
  -[SBLowPowerAlertItem setShowFindMyAlert:]
  -[SBLowPowerAlertItem _enableLowPowerMode]
  -[SBLowPowerAlertItem showFindMyAlert]


SBBlurProgressSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  double progress

  // instance methods
  -[SBBlurProgressSwitcherModifierEvent progress]
  -[SBBlurProgressSwitcherModifierEvent type]
  -[SBBlurProgressSwitcherModifierEvent copyWithZone:]
  -[SBBlurProgressSwitcherModifierEvent initWithProgress:]


SBPresentationObservationToken : NSObject <BSInvalidatable>
 @property  long long state
 @property  @? willPresentHandler
 @property  @? didPresentHandler
 @property  @? willDismissHandler
 @property  @? didDismissHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPresentationObservationToken didPresent]
  -[SBPresentationObservationToken .cxx_destruct]
  -[SBPresentationObservationToken didDismiss]
  -[SBPresentationObservationToken state]
  -[SBPresentationObservationToken didDismissHandler]
  -[SBPresentationObservationToken setDidDismissHandler:]
  -[SBPresentationObservationToken willPresent]
  -[SBPresentationObservationToken invalidate]
  -[SBPresentationObservationToken willDismiss]
  -[SBPresentationObservationToken willPresentHandler]
  -[SBPresentationObservationToken setWillPresentHandler:]
  -[SBPresentationObservationToken didPresentHandler]
  -[SBPresentationObservationToken setDidPresentHandler:]
  -[SBPresentationObservationToken willDismissHandler]
  -[SBPresentationObservationToken setWillDismissHandler:]


SBFixedLayoutModeSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBFixedLayoutModeSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFixedLayoutModeSwitcherModifier initWithUpdateMode:]


SBInteractiveScreenshotGestureRootWindow : _UIRootWindow
  // class methods
  +[SBInteractiveScreenshotGestureRootWindow _isSecure]

  // instance methods
  -[SBInteractiveScreenshotGestureRootWindow _canBecomeKeyWindow]
  -[SBInteractiveScreenshotGestureRootWindow hitTest:withEvent:]
  -[SBInteractiveScreenshotGestureRootWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBInteractiveScreenshotGestureRootWindow _shouldPrepareScreenForWindow]
  -[SBInteractiveScreenshotGestureRootWindow _appearsInLoupe]
  -[SBInteractiveScreenshotGestureRootWindow _usesWindowServerHitTesting]


SBHomeToDeckSwitcherModifier : SBHomeToSwitcherSwitcherModifier
  // instance methods
  -[SBHomeToDeckSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBHomeToDeckSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeToDeckSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBHomeToDeckSwitcherModifier titleOpacityForIndex:]
  -[SBHomeToDeckSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBHomeToDeckSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeToDeckSwitcherModifier headerStyleForIndex:]
  -[SBHomeToDeckSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeToDeckSwitcherModifier scaleForIndex:]
  -[SBHomeToDeckSwitcherModifier frameForIndex:]
  -[SBHomeToDeckSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeToDeckSwitcherModifier visibleAppLayouts]
  -[SBHomeToDeckSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeToDeckSwitcherModifier _layoutSettings]
  -[SBHomeToDeckSwitcherModifier wallpaperStyle]
  -[SBHomeToDeckSwitcherModifier cornerRadiiForIndex:]
  -[SBHomeToDeckSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeToDeckSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeToDeckSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBHomeToDeckSwitcherModifier appLayoutToScrollToDuringTransition]
  -[SBHomeToDeckSwitcherModifier _opacitySettings]


SBIconListScrollingRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIconListScrollingRecipe load]

  // instance methods
  -[SBIconListScrollingRecipe title]
  -[SBIconListScrollingRecipe handleVolumeIncrease]
  -[SBIconListScrollingRecipe handleVolumeDecrease]


SBTransientOverlayDismissAllWorkspaceTransaction : SBMainWorkspaceTransaction
 @property  long long animatedOverride

  // class methods
  +[SBTransientOverlayDismissAllWorkspaceTransaction isValidForTransitionRequest:]

  // instance methods
  -[SBTransientOverlayDismissAllWorkspaceTransaction _begin]
  -[SBTransientOverlayDismissAllWorkspaceTransaction _canBeInterrupted]
  -[SBTransientOverlayDismissAllWorkspaceTransaction initWithTransitionRequest:]
  -[SBTransientOverlayDismissAllWorkspaceTransaction isAnimatedOverride]
  -[SBTransientOverlayDismissAllWorkspaceTransaction setAnimatedOverride:]


SBUISwitcherAnimationController : SBUIWorkspaceAnimationController <SBUIAnimationControllerObserver>
 @property  SBMainSwitcherViewController *switcherViewController
 @property  @? animationBlock
 @property  BOOL _interruptible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUISwitcherAnimationController isInterruptible]
  -[SBUISwitcherAnimationController _isInterruptible]
  -[SBUISwitcherAnimationController _didComplete]
  -[SBUISwitcherAnimationController animationBlock]
  -[SBUISwitcherAnimationController animationSettings]
  -[SBUISwitcherAnimationController setAnimationBlock:]
  -[SBUISwitcherAnimationController _startAnimation]
  -[SBUISwitcherAnimationController _updatePPTsForAnimationStart]
  -[SBUISwitcherAnimationController _updatePPTsForAnimationEnd]
  -[SBUISwitcherAnimationController .cxx_destruct]
  -[SBUISwitcherAnimationController _addSignpostsForAnimationEnd]
  -[SBUISwitcherAnimationController _previousLayoutState]
  -[SBUISwitcherAnimationController shouldResignActiveForAnimation]
  -[SBUISwitcherAnimationController isReasonableMomentToInterrupt]
  -[SBUISwitcherAnimationController setSwitcherViewController:]
  -[SBUISwitcherAnimationController _layoutState]
  -[SBUISwitcherAnimationController switcherViewController]
  -[SBUISwitcherAnimationController _addSignpostsForAnimationStart]
  -[SBUISwitcherAnimationController animationControllerDidFinishAnimation:]
  -[SBUISwitcherAnimationController initWithWorkspaceTransitionRequest:switcherViewController:childAnimationControllers:animationBlock:]
  -[SBUISwitcherAnimationController _setInterruptible:]


SBPhoneAlertItem : SBAlertItem
 @property  long long slot

  // instance methods
  -[SBPhoneAlertItem slot]
  -[SBPhoneAlertItem .cxx_destruct]
  -[SBPhoneAlertItem configure:requirePasscodeForActions:]
  -[SBPhoneAlertItem initWithTitle:bodyText:slot:]


SBNetworkReselectionAlertItem : SBPhoneAlertItem
  // instance methods
  -[SBNetworkReselectionAlertItem initWithSlot:]
  -[SBNetworkReselectionAlertItem performUnlockAction]
  -[SBNetworkReselectionAlertItem configure:requirePasscodeForActions:]
  -[SBNetworkReselectionAlertItem lockLabel]
  -[SBNetworkReselectionAlertItem shortLockLabel]
  -[SBNetworkReselectionAlertItem _showPrefs]


SBIndirectTouchLifecycleMonitor : NSObject <UIGestureRecognizerDelegate>
 @property  UIHoverGestureRecognizer *hoverGestureRecognizer
 @property  NSHashTable *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIndirectTouchLifecycleMonitor .cxx_destruct]
  -[SBIndirectTouchLifecycleMonitor setObservers:]
  -[SBIndirectTouchLifecycleMonitor hoverGestureRecognizer]
  -[SBIndirectTouchLifecycleMonitor addObserver:]
  -[SBIndirectTouchLifecycleMonitor setHoverGestureRecognizer:]
  -[SBIndirectTouchLifecycleMonitor observers]
  -[SBIndirectTouchLifecycleMonitor removeObserver:]
  -[SBIndirectTouchLifecycleMonitor handleHoverEvent:]
  -[SBIndirectTouchLifecycleMonitor initWithSystemGestureManager:]
  -[SBIndirectTouchLifecycleMonitor systemGestureHoverLocationInView:]


SBTransitionSwitcherModifier : SBSwitcherModifier
 @property  unsigned long transitionPhase
 @property  NSUUID *transitionID

  // instance methods
  -[SBTransitionSwitcherModifier appLayoutsToResignActive]
  -[SBTransitionSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBTransitionSwitcherModifier transitionWillBegin]
  -[SBTransitionSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBTransitionSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBTransitionSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBTransitionSwitcherModifier keyboardSuppressionMode]
  -[SBTransitionSwitcherModifier transitionDidEnd]
  -[SBTransitionSwitcherModifier animationAttributesForLayoutElement:]
  -[SBTransitionSwitcherModifier handleTransitionEvent:]
  -[SBTransitionSwitcherModifier .cxx_destruct]
  -[SBTransitionSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBTransitionSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBTransitionSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBTransitionSwitcherModifier handleTimerEvent:]
  -[SBTransitionSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBTransitionSwitcherModifier maskedCornersForIndex:]
  -[SBTransitionSwitcherModifier transitionWillUpdate]
  -[SBTransitionSwitcherModifier handleRemovalEvent:]
  -[SBTransitionSwitcherModifier handleScrollEvent:]
  -[SBTransitionSwitcherModifier transitionPhase]
  -[SBTransitionSwitcherModifier initWithTransitionID:]
  -[SBTransitionSwitcherModifier isPreparingLayout]
  -[SBTransitionSwitcherModifier isUpdatingLayout]
  -[SBTransitionSwitcherModifier transitionID]
  -[SBTransitionSwitcherModifier handleGestureEvent:]
  -[SBTransitionSwitcherModifier shouldInterruptForRemovalEvent:]
  -[SBTransitionSwitcherModifier _setTransitionPhase:]


SBExampleUserNotificationCenter : NSObject
 @property  NSString *latestNotificationRequestIdentifier
 @property  NSString *sectionIdentifier

  // class methods
  +[SBExampleUserNotificationCenter sharedInstance]

  // instance methods
  -[SBExampleUserNotificationCenter sectionIdentifier]
  -[SBExampleUserNotificationCenter removeAllNotifications]
  -[SBExampleUserNotificationCenter publish]
  -[SBExampleUserNotificationCenter _existingNotificationRequestForIdentifier:]
  -[SBExampleUserNotificationCenter publish:completion:]
  -[SBExampleUserNotificationCenter publish:numberOfUniqueThreads:completion:]
  -[SBExampleUserNotificationCenter .cxx_destruct]
  -[SBExampleUserNotificationCenter update]
  -[SBExampleUserNotificationCenter _userNotificationCenter]
  -[SBExampleUserNotificationCenter publishWithNumberOfUniqueThreads:]
  -[SBExampleUserNotificationCenter latestNotificationRequestIdentifier]
  -[SBExampleUserNotificationCenter _newNotificationRequest:threadIdentifier:]
  -[SBExampleUserNotificationCenter _postNotificationWithID:threadIdentifier:]


SBInvalidateReopenButtonTextSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBInvalidateReopenButtonTextSwitcherEventResponse type]


SBSceneViewStatusBarAssertion : NSObject <BSInvalidatable>
 @property  BOOL statusBarHidden
 @property  long long nubViewHidden
 @property  SBAppStatusBarSettings *settings
 @property  unsigned long level
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneViewStatusBarAssertion initWithStatusBarHidden:nubViewHidden:atLevel:]
  -[SBSceneViewStatusBarAssertion level]
  -[SBSceneViewStatusBarAssertion .cxx_destruct]
  -[SBSceneViewStatusBarAssertion initWithStatusBarSettings:nubViewHidden:atLevel:]
  -[SBSceneViewStatusBarAssertion setSettings:]
  -[SBSceneViewStatusBarAssertion setStatusBarHidden:]
  -[SBSceneViewStatusBarAssertion isStatusBarHidden]
  -[SBSceneViewStatusBarAssertion addObserver:]
  -[SBSceneViewStatusBarAssertion setNubViewHidden:]
  -[SBSceneViewStatusBarAssertion _notifyObserversDidUpdate]
  -[SBSceneViewStatusBarAssertion _notifyObserversDidInvalidate]
  -[SBSceneViewStatusBarAssertion dealloc]
  -[SBSceneViewStatusBarAssertion invalidate]
  -[SBSceneViewStatusBarAssertion nubViewHidden]
  -[SBSceneViewStatusBarAssertion removeObserver:]
  -[SBSceneViewStatusBarAssertion settings]


SBRemoteTransientOverlaySessionManager : NSObject <SBRemoteTransientOverlaySessionHostDelegate>
 @property  <SBRemoteTransientOverlaySessionManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRemoteTransientOverlaySessionManager createSessionWithDefinition:]
  -[SBRemoteTransientOverlaySessionManager existingSessionsWithDefinition:options:]
  -[SBRemoteTransientOverlaySessionManager .cxx_destruct]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:prefersStatusBarActivityItemVisibleForServiceBundleIdentifier:]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:didInvalidateWithReason:error:]
  -[SBRemoteTransientOverlaySessionManager setDelegate:]
  -[SBRemoteTransientOverlaySessionManager _createSessionWithDefinition:]
  -[SBRemoteTransientOverlaySessionManager init]
  -[SBRemoteTransientOverlaySessionManager sessionWithDefinition:options:]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:requestsHandlingForButtonEvents:viewController:]
  -[SBRemoteTransientOverlaySessionManager _existingSessionsWithDefinition:options:]
  -[SBRemoteTransientOverlaySessionManager existingSessionWithSessionID:options:]
  -[SBRemoteTransientOverlaySessionManager activeWallpaperVariantForRemoteTransientOverlaySession:]
  -[SBRemoteTransientOverlaySessionManager hasSessionWithPendingButtonEvents:options:]
  -[SBRemoteTransientOverlaySessionManager delegate]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:shouldActivateWithContext:]
  -[SBRemoteTransientOverlaySessionManager sessionsWithDefinition:options:]
  -[SBRemoteTransientOverlaySessionManager hasSessionWithServiceProcessIdentifier:options:]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:performDismissalRequest:]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:performPresentationRequest:]


SBRecentDisplayItemsController : NSObject <SBMainDisplayWorkspaceAppInteractionEventSourceObserving>
 @property  NSOrderedSet *recentDisplayItems
 @property  <SBRecentDisplayItemsControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecentDisplayItemsController .cxx_destruct]
  -[SBRecentDisplayItemsController eventSource:didBeginTransitionToMode:withLayoutState:activatingElement:triggeredBy:]
  -[SBRecentDisplayItemsController setDelegate:]
  -[SBRecentDisplayItemsController eventSource:userTouchedApplication:]
  -[SBRecentDisplayItemsController init]
  -[SBRecentDisplayItemsController reset]
  -[SBRecentDisplayItemsController delegate]
  -[SBRecentDisplayItemsController eventSource:userDeletedWebBookmark:]
  -[SBRecentDisplayItemsController dealloc]
  -[SBRecentDisplayItemsController _addStateCaptureHandler]
  -[SBRecentDisplayItemsController initWithRemovalPersonality:movePersonality:transitionFromSources:maxDisplayItems:eventSource:applicationController:]
  -[SBRecentDisplayItemsController _removeDisplayItem:]
  -[SBRecentDisplayItemsController _allDisplayItemsPassingTest:]
  -[SBRecentDisplayItemsController _allDisplayItemsForBundleID:]
  -[SBRecentDisplayItemsController _applicationsBecameHidden:]
  -[SBRecentDisplayItemsController _clearDelayAfterTransitionTimer]
  -[SBRecentDisplayItemsController _firstDisplayItemForBundleID:]
  -[SBRecentDisplayItemsController _moveDisplayItemToFront:]
  -[SBRecentDisplayItemsController _displayItemForLayoutElement:]
  -[SBRecentDisplayItemsController _addOrMoveDisplayItemToFront:]
  -[SBRecentDisplayItemsController _setupDelayAfterTransitionTimerForActivatingElement:]
  -[SBRecentDisplayItemsController _allDisplayItemsForWebClipID:]
  -[SBRecentDisplayItemsController _displayItemRepresentsAppClip:]
  -[SBRecentDisplayItemsController _webClipForIdentifier:]
  -[SBRecentDisplayItemsController _displayItem:matchesBundleID:]
  -[SBRecentDisplayItemsController _associatedWebClipIdentifierForAppClipIdentifier:sceneIdentifier:]
  -[SBRecentDisplayItemsController _addDisplayItemToFront:]
  -[SBRecentDisplayItemsController _displayItemIsExecutableOnCurrentPlatform:]
  -[SBRecentDisplayItemsController _isDisallowedDisplayItem:]
  -[SBRecentDisplayItemsController eventSource:userRemovedSuggestions:]
  -[SBRecentDisplayItemsController eventSource:userDeletedApplications:]
  -[SBRecentDisplayItemsController eventSource:userQuitApplicationInSwitcher:]
  -[SBRecentDisplayItemsController eventSource:applicationsBecameHidden:]
  -[SBRecentDisplayItemsController eventSource:applicationsBecameVisible:]
  -[SBRecentDisplayItemsController eventSource:keyboardFocusChangedToApplication:]
  -[SBRecentDisplayItemsController eventSource:didFinishTransitionToMode:withLayoutState:activatingElement:triggeredBy:]
  -[SBRecentDisplayItemsController setRecentDisplayItems:]
  -[SBRecentDisplayItemsController recentDisplayItems]
  -[SBRecentDisplayItemsController removeDisplayItem:]
  -[SBRecentDisplayItemsController _firstDisplayItemForUniqueID:]
  -[SBRecentDisplayItemsController _allDisplayItemsForUniqueID:]
  -[SBRecentDisplayItemsController _allowAppToAppearWhileHidden:]
  -[SBRecentDisplayItemsController _disallowAppFromAppearingWhileHidden:]


SBWiFiManager : NSObject
  // class methods
  +[SBWiFiManager sharedInstance]

  // instance methods
  -[SBWiFiManager wiFiEnabled]
  -[SBWiFiManager wifiRunLoopRef]
  -[SBWiFiManager isAssociatedToIOSHotspot]
  -[SBWiFiManager signalStrengthBars]
  -[SBWiFiManager _updateSignalStrength]
  -[SBWiFiManager .cxx_destruct]
  -[SBWiFiManager _updateDevicePresence]
  -[SBWiFiManager _lock_spawnManagerCallbackThread]
  -[SBWiFiManager _updateWiFiDevice]
  -[SBWiFiManager _updateCurrentNetwork]
  -[SBWiFiManager setPowered:]
  -[SBWiFiManager signalStrengthRSSI]
  -[SBWiFiManager _powerStateDidChange]
  -[SBWiFiManager init]
  -[SBWiFiManager _lock_setWiFiDevice:]
  -[SBWiFiManager setWiFiEnabled:]
  -[SBWiFiManager isPowered]
  -[SBWiFiManager _wifiInterface]
  -[SBWiFiManager _lock_manager]
  -[SBWiFiManager isPrimaryInterface]
  -[SBWiFiManager _runManagerCallbackThread]
  -[SBWiFiManager _linkDidChange]
  -[SBWiFiManager isAssociated]
  -[SBWiFiManager _primaryInterfaceChanged:]
  -[SBWiFiManager _updateWiFiState]
  -[SBWiFiManager currentNetworkName]
  -[SBWiFiManager _updateSignalStrengthFromRawRSSI:andScaledRSSI:]
  -[SBWiFiManager _cachedIsAssociated]
  -[SBWiFiManager observeValueForKeyPath:ofObject:change:context:]


SBLockdownManager : NSObject
  // class methods
  +[SBLockdownManager sharedInstance]

  // instance methods
  -[SBLockdownManager .cxx_destruct]
  -[SBLockdownManager _resetActivationState]
  -[SBLockdownManager init]
  -[SBLockdownManager _setupActivationState]
  -[SBLockdownManager lockdownState]
  -[SBLockdownManager brickedDevice]


SBSyncController : NSObject <DDRResetObserver, SBIdleTimerProviding>
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSyncController sharedInstance]

  // instance methods
  -[SBSyncController resetState]
  -[SBSyncController restoreState]
  -[SBSyncController coordinatorRequestedIdleTimerBehavior:]
  -[SBSyncController _setIdleTimerCoordinator:]
  -[SBSyncController _invalidateRestoreTimer]
  -[SBSyncController resetService:willBeginDataResetWithMode:]
  -[SBSyncController isResetting]
  -[SBSyncController startObserving]
  -[SBSyncController _idleTimerCoordinator]
  -[SBSyncController isRestoring]
  -[SBSyncController _isBackupAgentRunning]
  -[SBSyncController cancelRestoring]
  -[SBSyncController _setRestoreState:]
  -[SBSyncController .cxx_destruct]
  -[SBSyncController _delayedQuitApplications]
  -[SBSyncController _wirelessSyncEnded:]
  -[SBSyncController finishedTerminatingApplications]
  -[SBSyncController _notifyRestoreCanProceed]
  -[SBSyncController stopObserving]
  -[SBSyncController _wirelessSyncBegan:]
  -[SBSyncController resetService:didCompleteDataResetMode:withError:completion:]
  -[SBSyncController _setupRestoreTimer]
  -[SBSyncController _appInstallationNotification]
  -[SBSyncController _syncSessionDidBegin]
  -[SBSyncController _idleTimerBehavior]
  -[SBSyncController isInUse]
  -[SBSyncController _killApplicationsIfNecessary]
  -[SBSyncController _syncSessionDidEnd]
  -[SBSyncController beginRestoring]
  -[SBSyncController _rebootNow]
  -[SBSyncController dealloc]
  -[SBSyncController _restoreTimerFired:]
  -[SBSyncController resetService:didBeginDataResetWithMode:]
  -[SBSyncController _didEndRestoring:]


SBMainSwitcherRootSwitcherModifier : SBFluidSwitcherRootSwitcherModifier
  // instance methods
  -[SBMainSwitcherRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBMainSwitcherRootSwitcherModifier reduceMotionModifierForReduceMotionChangedEvent:]
  -[SBMainSwitcherRootSwitcherModifier handleTransitionEvent:]
  -[SBMainSwitcherRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBMainSwitcherRootSwitcherModifier .cxx_destruct]
  -[SBMainSwitcherRootSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBMainSwitcherRootSwitcherModifier init]
  -[SBMainSwitcherRootSwitcherModifier gestureModifierForGestureEvent:]
  -[SBMainSwitcherRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBMainSwitcherRootSwitcherModifier floorModifierForGestureEvent:]
  -[SBMainSwitcherRootSwitcherModifier transitionModifierForMainTransitionEvent:]
  -[SBMainSwitcherRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBMainSwitcherRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBMainSwitcherRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBMainSwitcherRootSwitcherModifier preferredAppLayoutToReuseAccessoryForAppLayout:fromAppLayouts:]
  -[SBMainSwitcherRootSwitcherModifier shelfModifierForTransitionEvent:]
  -[SBMainSwitcherRootSwitcherModifier handleGestureEvent:]
  -[SBMainSwitcherRootSwitcherModifier _correctFloorModifierToHandleEvent]
  -[SBMainSwitcherRootSwitcherModifier _setCardSizesWithEvent:]
  -[SBMainSwitcherRootSwitcherModifier responseForProposedChildResponse:childModifier:event:]
  -[SBMainSwitcherRootSwitcherModifier _ensureModifier:startsInFinalStateOfEvent:]
  -[SBMainSwitcherRootSwitcherModifier _newMultitaskingModifierForEnvironmentMode:]
  -[SBMainSwitcherRootSwitcherModifier _createNewDefaultFloorModifier]
  -[SBMainSwitcherRootSwitcherModifier highlightModifierForHighlightEvent:]
  -[SBMainSwitcherRootSwitcherModifier focusedAppModifierForUpdateFocusedAppLayoutEvent:]


SBApplicationService : NSObject <SBApplicationServerMiscDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationService sharedInstance]

  // instance methods
  -[SBApplicationService .cxx_destruct]
  -[SBApplicationService _initWithApplicationController:]
  -[SBApplicationService applicationServer:client:deleteSnapshotsForApplicationIdentifier:]


SBSOSClawGestureObserver : NSObject <SOSManagerClientObserver, SBVolumePressBandit>
 @property  NSMutableSet *activePressTypes
 @property  BOOL sosActivated
 @property  SBSOSDefaults *sosDefaults
 @property  BSTimer *sosTriggerTimer
 @property  SBClawGestureLogger *clawGestureLogger
 @property  BOOL wasSOSTiggeredByClaw
 @property  BOOL clawGestureActive
 @property  BOOL autoCallCountdownEnabled
 @property  BOOL gestureLoggingEnabled
 @property  BOOL sosEnabled
 @property  <SBSOSClawGestureObserverDelegate> *delegate
 @property  BOOL clawActivated
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSOSClawGestureObserver .cxx_destruct]
  -[SBSOSClawGestureObserver didUpdateCurrentSOSInitiationState:]
  -[SBSOSClawGestureObserver setDelegate:]
  -[SBSOSClawGestureObserver init]
  -[SBSOSClawGestureObserver sosDefaults]
  -[SBSOSClawGestureObserver delegate]
  -[SBSOSClawGestureObserver dealloc]
  -[SBSOSClawGestureObserver handleVolumeIncrease]
  -[SBSOSClawGestureObserver handleVolumeDecrease]
  -[SBSOSClawGestureObserver _initWithSOSManager:workspace:]
  -[SBSOSClawGestureObserver isSOSEnabled]
  -[SBSOSClawGestureObserver _presentSOSInterface]
  -[SBSOSClawGestureObserver _isClawGestureActive]
  -[SBSOSClawGestureObserver activePressTypes]
  -[SBSOSClawGestureObserver isGestureLoggingEnabled]
  -[SBSOSClawGestureObserver clawGestureLogger]
  -[SBSOSClawGestureObserver _cancelSOSActivity]
  -[SBSOSClawGestureObserver _isSOSActivated]
  -[SBSOSClawGestureObserver _isAutomaticCallCountdownEnabled]
  -[SBSOSClawGestureObserver _wasSOSTriggeredByClaw]
  -[SBSOSClawGestureObserver sosTriggerTimer]
  -[SBSOSClawGestureObserver _setWasSOSTriggeredByClaw:]
  -[SBSOSClawGestureObserver isClawActivated]
  -[SBSOSClawGestureObserver noteButtonPress:isDown:]
  -[SBSOSClawGestureObserver noteGestureReset]
  -[SBSOSClawGestureObserver setGestureLoggingEnabled:]
  -[SBSOSClawGestureObserver setSOSEnabled:]
  -[SBSOSClawGestureObserver setActivePressTypes:]
  -[SBSOSClawGestureObserver setClawGestureLogger:]
  -[SBSOSClawGestureObserver _setSOSDefaults:]
  -[SBSOSClawGestureObserver setSosTriggerTimer:]


SBSceneResizeFluidGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction <SBSceneLayoutWorkspaceTransactionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneResizeFluidGestureWorkspaceTransaction layoutState]
  -[SBSceneResizeFluidGestureWorkspaceTransaction _gestureType]
  -[SBSceneResizeFluidGestureWorkspaceTransaction _willAddChildTransaction:]
  -[SBSceneResizeFluidGestureWorkspaceTransaction selectedAppLayout]


SBInjectVelocitySwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  NSString *key
 @property  id velocity

  // instance methods
  -[SBInjectVelocitySwitcherEventResponse appLayout]
  -[SBInjectVelocitySwitcherEventResponse .cxx_destruct]
  -[SBInjectVelocitySwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBInjectVelocitySwitcherEventResponse type]
  -[SBInjectVelocitySwitcherEventResponse key]
  -[SBInjectVelocitySwitcherEventResponse velocity]
  -[SBInjectVelocitySwitcherEventResponse initWithVelocity:forKey:appLayout:]


SBBreadcrumbActionContext : NSObject
  // instance methods
  -[SBBreadcrumbActionContext .cxx_destruct]
  -[SBBreadcrumbActionContext dealloc]


SBDeviceApplicationSceneStatusBarBreadcrumbProvider : NSObject <SBDeviceApplicationSceneHandleObserver>
 @property  BOOL hasBreadcrumb
 @property  NSString *breadcrumbTitle
 @property  NSString *breadcrumbSecondaryTitle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _breadcrumbBundleIdForActivatingSceneEntity:withTransitionContext:]
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _shouldAddBreadcrumbToActivatingSceneEntity:sceneHandle:withTransitionContext:]
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _breadcrumbPrimaryTitleForAppWithBundleID:sceneHandle:activatingSceneEntity:]
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _destinationContextsForActivatingSceneEntity:withTransitionContext:]
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _breadcrumbSceneIdForForAppWithBundleID:activatingSceneEntity:withTransitionContext:]

  // instance methods
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _setCurrentBreadcrumbActionContext:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider initWithSceneHandle:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider sceneHandle:didChangeEffectiveForegroundness:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider hasBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _presentAssistantFromBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider activateSecondaryBreadcrumbIfPossible]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider .cxx_destruct]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider succinctDescriptionBuilder]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _openStrategyForAppLinkState:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _handleBreadcrumbAction:analyticsSide:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider noteDidUpdateDisplayProperties]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider descriptionBuilderWithMultilinePrefix:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider breadcrumbTitle]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider descriptionWithMultilinePrefix:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider succinctDescription]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider prepareForReuse]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider captureContextForActivatingSceneEntity:withTransitionContext:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider addObserver:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _breadcrumbNavigationActionContextForActivatingSceneEntity:withTransitionContext:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider activateBreadcrumbIfPossible]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _showTransientOvelayInPlace]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _hasPrimaryBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider breadcrumbSecondaryTitle]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider removeObserver:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _activateBreadcrumbApplication:withSceneIdentifier:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _activateAppLink:withAppLinkState:wasFromSpotlight:previousSideBundleID:previousBreadcrumb:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _hasSecondaryBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider breadcrumbActionsForActivatingSceneEntity:withTransitionContext:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _presentSpotlightFromBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _installedApplicationsDidChange:]


SBNubView : SBFTouchPassThroughView <SBDeviceApplicationSceneHandleObserver>
 @property  SBDeviceApplicationSceneHandle *deviceApplicationSceneHandle
 @property  BOOL highlighted
 @property  UIView *contentView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBNubView contentHeight]
  +[SBNubView hitTestPadding]
  +[SBNubView height]
  +[SBNubView hitTestWidth]

  // instance methods
  -[SBNubView setHighlighted:]
  -[SBNubView sceneHandle:didCreateScene:]
  -[SBNubView initWithCoder:]
  -[SBNubView traitCollectionDidChange:]
  -[SBNubView .cxx_destruct]
  -[SBNubView contentView]
  -[SBNubView initWithNibName:bundle:]
  -[SBNubView isHighlighted]
  -[SBNubView sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBNubView dealloc]
  -[SBNubView intrinsicContentSize]
  -[SBNubView _updateNubViewOverrideUserInterfaceStyleAndBackgroundColor]
  -[SBNubView initWithDeviceApplicationSceneHandle:]
  -[SBNubView _updateNubViewBackgroundColor]
  -[SBNubView deviceApplicationSceneHandle]


SBDropShadowSettings : PTSettings
 @property  double radius
 @property  double opacity
 @property  double offsetX
 @property  double offsetY
 @property  double continuousCornerRadius

  // class methods
  +[SBDropShadowSettings settingsControllerModule]
  +[SBDropShadowSettings moduleWithSectionTitle:]

  // instance methods
  -[SBDropShadowSettings setOpacity:]
  -[SBDropShadowSettings opacity]
  -[SBDropShadowSettings continuousCornerRadius]
  -[SBDropShadowSettings setDefaultValues]
  -[SBDropShadowSettings setContinuousCornerRadius:]
  -[SBDropShadowSettings radius]
  -[SBDropShadowSettings setRadius:]
  -[SBDropShadowSettings offsetX]
  -[SBDropShadowSettings offsetY]
  -[SBDropShadowSettings setOffsetX:]
  -[SBDropShadowSettings setOffsetY:]


SBDashBoardIdleTimerProvider : NSObject <SBIdleTimerObserving, BSDescriptionProviding>
 @property  <SBDashBoardIdleTimerProviderDelegate> *delegate
 @property  <SBIdleTimer> *idleTimer
 @property  BOOL idleTimerEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardIdleTimerProvider idleTimerDidRefresh:]
  -[SBDashBoardIdleTimerProvider _proposeEffectiveIdleTimerBehaviorForReason:]
  -[SBDashBoardIdleTimerProvider idleTimerDidWarn:]
  -[SBDashBoardIdleTimerProvider removeDisabledIdleTimerAssertionReason:]
  -[SBDashBoardIdleTimerProvider _proposeIdleTimerBehavior:forReason:]
  -[SBDashBoardIdleTimerProvider resetIdleTimer]
  -[SBDashBoardIdleTimerProvider updateIdleTimerWithIdleDimProvider:reason:]
  -[SBDashBoardIdleTimerProvider .cxx_destruct]
  -[SBDashBoardIdleTimerProvider setIdleTimer:]
  -[SBDashBoardIdleTimerProvider idleTimerDidExpire:]
  -[SBDashBoardIdleTimerProvider succinctDescriptionBuilder]
  -[SBDashBoardIdleTimerProvider _copyIdleTimerBehaviorForBehaviorProvider:]
  -[SBDashBoardIdleTimerProvider setDelegate:]
  -[SBDashBoardIdleTimerProvider descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardIdleTimerProvider addDisabledIdleTimerAssertionReason:]
  -[SBDashBoardIdleTimerProvider isIdleTimerEnabled]
  -[SBDashBoardIdleTimerProvider descriptionWithMultilinePrefix:]
  -[SBDashBoardIdleTimerProvider succinctDescription]
  -[SBDashBoardIdleTimerProvider idleTimer]
  -[SBDashBoardIdleTimerProvider isDisabledAssertionActiveForReason:]
  -[SBDashBoardIdleTimerProvider initWithDelegate:]
  -[SBDashBoardIdleTimerProvider delegate]
  -[SBDashBoardIdleTimerProvider dealloc]
  -[SBDashBoardIdleTimerProvider effectiveIdleTimerBehavior]


SBMixedGridHomeGestureRootSwitcherModifier : SBGestureRootSwitcherModifier <SBChainableModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMixedGridHomeGestureRootSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBMixedGridHomeGestureRootSwitcherModifier .cxx_destruct]
  -[SBMixedGridHomeGestureRootSwitcherModifier _newMultitaskingModifier]
  -[SBMixedGridHomeGestureRootSwitcherModifier handleEvent:]
  -[SBMixedGridHomeGestureRootSwitcherModifier gestureType]
  -[SBMixedGridHomeGestureRootSwitcherModifier completesWhenChildrenComplete]
  -[SBMixedGridHomeGestureRootSwitcherModifier handleGestureEvent:]
  -[SBMixedGridHomeGestureRootSwitcherModifier initWithStartingEnvironmentMode:mixedGridModifier:]
  -[SBMixedGridHomeGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBMixedGridHomeGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBMixedGridHomeGestureRootSwitcherModifier canTransitionWithoutGestureModifier]


SBScreenFlash : NSObject
  // class methods
  +[SBScreenFlash mainScreenFlasher]

  // instance methods
  -[SBScreenFlash _tearDown]
  -[SBScreenFlash initWithScreen:]
  -[SBScreenFlash .cxx_destruct]
  -[SBScreenFlash flashColor:withCompletion:]
  -[SBScreenFlash _orderWindowFrontAndThenOut:withColor:]
  -[SBScreenFlash _orderWindowOut:]
  -[SBScreenFlash _createUIWithColor:]
  -[SBScreenFlash flashWhiteWithCompletion:]


SBAppProfileNeedsValidationAlertItem : SBAlertItem
  // instance methods
  -[SBAppProfileNeedsValidationAlertItem .cxx_destruct]
  -[SBAppProfileNeedsValidationAlertItem shouldShowInLockScreen]
  -[SBAppProfileNeedsValidationAlertItem dismissOnLock]
  -[SBAppProfileNeedsValidationAlertItem configure:requirePasscodeForActions:]
  -[SBAppProfileNeedsValidationAlertItem forcesModalAlertAppearance]
  -[SBAppProfileNeedsValidationAlertItem initWithApp:]


SBAddModifierSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBSwitcherModifier *modifier

  // instance methods
  -[SBAddModifierSwitcherEventResponse .cxx_destruct]
  -[SBAddModifierSwitcherEventResponse type]
  -[SBAddModifierSwitcherEventResponse modifier]
  -[SBAddModifierSwitcherEventResponse initWithModifier:]


SBLockScreenPluginOverlayViewController : SBLockOverlayViewController
  // class methods
  +[SBLockScreenPluginOverlayViewController _pluginNeedsOverlay:]

  // instance methods
  -[SBLockScreenPluginOverlayViewController .cxx_destruct]
  -[SBLockScreenPluginOverlayViewController initWithPlugin:]
  -[SBLockScreenPluginOverlayViewController loadView]
  -[SBLockScreenPluginOverlayViewController _newOverlayView]


SBUIWorkspaceAnimationController : SBUIAnimationController
 @property  SBWorkspaceTransitionRequest *workspaceTransitionRequest

  // instance methods
  -[SBUIWorkspaceAnimationController initWithTransitionContextProvider:]
  -[SBUIWorkspaceAnimationController initWithWorkspaceTransitionRequest:]
  -[SBUIWorkspaceAnimationController workspaceTransitionRequest]


SBModalUIFluidDismissGestureWorkspaceTransaction : SBSystemGestureWorkspaceTransaction
 @property  SBAssistantController *assistantController
 @property  long long dismissalType
 @property  SBMainWorkspaceTransaction *currentTransaction
 @property  double dismissalThreshold
 @property  BOOL animateGestureCancelationOrFailure

  // instance methods
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _didComplete]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _begin]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _canBeInterrupted]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction currentTransaction]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _didInterruptWithReason:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction .cxx_destruct]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction setAssistantController:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _layoutSettings]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction setCurrentTransaction:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction assistantController]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _dismissalFeedbackGenerator]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _beginWithGesture:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _viewForGesture]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _updateWithGesture:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _finishWithGesture:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _finishWithCompletionType:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _updateDismissingViewLayoutAndStyleForGesture]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _shouldDismissImmmediatelyAtFullGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _swipeUpGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _finishInteractionAndDismiss:animated:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _dismissClientAnimated:completion:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction dismissalType]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _zoomOutDelay]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _backgroundWeightingForDismissal:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _scaleForDismissal]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _scaleForGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _setFluidDismissalState:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _cleanupHierarchyForDismissal:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _yOffsetForGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _swipeUpGestureTranslation]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _backgroundWeightingForGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _clientAnimationsDelay]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _hapticDelay]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _notificationFeedbackType]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction initWithTransitionRequest:assistantController:dismissalType:initiatedFromBottomEdge:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction systemGestureStateChanged:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction dismissalThreshold]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction setDismissalThreshold:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction animateGestureCancelationOrFailure]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction setAnimateGestureCancelationOrFailure:]


SBSpringloadingMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpringloadingMetric handleEvent:withContext:]
  -[SBSpringloadingMetric .cxx_destruct]
  -[SBSpringloadingMetric init]


SBFluidSwitcherSheetMetricsCache : NSObject
  // instance methods
  -[SBFluidSwitcherSheetMetricsCache .cxx_destruct]
  -[SBFluidSwitcherSheetMetricsCache transformForCardUnderSheetForBoundsSize:]
  -[SBFluidSwitcherSheetMetricsCache pageSheetMetricsForBoundsSize:interfaceOrientation:configuration:userInterfaceIdiom:displayScale:displayEdgeInfo:]
  -[SBFluidSwitcherSheetMetricsCache pageSheetMetricsForBoundsSize:interfaceOrientation:configuration:]


_SBFluidSwitcherSheetMetricsCacheKey : NSObject <NSCopying>
  // instance methods
  -[_SBFluidSwitcherSheetMetricsCacheKey .cxx_destruct]
  -[_SBFluidSwitcherSheetMetricsCacheKey isEqual:]
  -[_SBFluidSwitcherSheetMetricsCacheKey copyWithZone:]
  -[_SBFluidSwitcherSheetMetricsCacheKey initWithBoundsSize:interfaceOrientation:configuration:userInterfaceIdiom:displayScale:displayEdgeInfo:]


_SBFluidSwitcherSheetMetricsView : UIView
 @property  {UIEdgeInsets=dddd} overrideSafeAreaInsets

  // instance methods
  -[_SBFluidSwitcherSheetMetricsView _safeAreaInsetsForFrame:inSuperview:]
  -[_SBFluidSwitcherSheetMetricsView setOverrideSafeAreaInsets:]
  -[_SBFluidSwitcherSheetMetricsView overrideSafeAreaInsets]


SBEntityRemovalDeclineFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalDeclineFloatingSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier transitionWillBegin]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier frameForIndex:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier _layoutSettings]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier topMostLayoutElements]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier containerViewBounds]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier _isIndexFromAppLayout:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier _isIndexToAppLayout:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:floatingConfiguration:]


SBIconFlockingMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBIconFlockingMetric .cxx_destruct]
  -[SBIconFlockingMetric init]


SBDropApplicationFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBDropApplicationFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBDropApplicationFloatingSwitcherModifier transitionWillBegin]
  -[SBDropApplicationFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBDropApplicationFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBDropApplicationFloatingSwitcherModifier visibleAppLayouts]
  -[SBDropApplicationFloatingSwitcherModifier .cxx_destruct]
  -[SBDropApplicationFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBDropApplicationFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBDropApplicationFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]


SBInCallTransientOverlayManager : NSObject
  // instance methods
  -[SBInCallTransientOverlayManager _remoteTransientOverlaySessionManager]
  -[SBInCallTransientOverlayManager _newAlertDefinition]
  -[SBInCallTransientOverlayManager presentTransientOverlay]
  -[SBInCallTransientOverlayManager presentTransientOverlayForActivityContinuationWithActivityIdentifier:]
  -[SBInCallTransientOverlayManager presentTransientOverlayForUILock]


SBAppClipPlaceholderWorkspaceEntity : SBWorkspaceEntity
 @property  NSString *bundleIdentifier
 @property  NSString *futureSceneIdentifier
 @property  BOOL needsUpdate

  // class methods
  +[SBAppClipPlaceholderWorkspaceEntity isAppClipUpdateAvailableForBundleIdentifier:]

  // instance methods
  -[SBAppClipPlaceholderWorkspaceEntity appClipPlaceholderEntity]
  -[SBAppClipPlaceholderWorkspaceEntity bundleIdentifier]
  -[SBAppClipPlaceholderWorkspaceEntity isAppClipPlaceholderEntity]
  -[SBAppClipPlaceholderWorkspaceEntity supportsPresentationAtAnySize]
  -[SBAppClipPlaceholderWorkspaceEntity .cxx_destruct]
  -[SBAppClipPlaceholderWorkspaceEntity entityGenerator]
  -[SBAppClipPlaceholderWorkspaceEntity wantsExclusiveForeground]
  -[SBAppClipPlaceholderWorkspaceEntity viewControllerClass]
  -[SBAppClipPlaceholderWorkspaceEntity _supportsLayoutRole:]
  -[SBAppClipPlaceholderWorkspaceEntity isEqual:]
  -[SBAppClipPlaceholderWorkspaceEntity futureSceneIdentifier]
  -[SBAppClipPlaceholderWorkspaceEntity initWithBundleIdentifier:futureSceneIdentifier:needsUpdate:]
  -[SBAppClipPlaceholderWorkspaceEntity needsUpdate]
  -[SBAppClipPlaceholderWorkspaceEntity copyWithZone:]


_SBSceneLayoutViewControllerAnimator : NSObject <UIViewControllerAnimatedTransitioning>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBSceneLayoutViewControllerAnimator transitionDuration:]
  -[_SBSceneLayoutViewControllerAnimator animateTransition:]


SBStatusBarStyleOverridesAssertionManager : NSObject <NSXPCListenerDelegate, SBAppStatusBarAssertionManagerObserver, SBStatusBarStyleOverridesAssertionServer, BSDescriptionProviding>
 @property  SBAppStatusBarAssertionManager *appStatusBarAssertionManager
 @property  NSXPCListener *xpcListener
 @property  NSMapTable *assertionsByIdentifierByClientConnection
 @property  NSMapTable *assertionsByStyleOverride
 @property  NSMutableArray *coordinatorConnectionsByStyleOverride
 @property  NSObject<OS_dispatch_queue> *internalQueue
 @property  NSObject<OS_dispatch_source> *assertionTimerSource
 @property  FBWorkspaceEventQueue *eventQueue
 @property  unsigned long statusBarStyleOverrides
 @property  unsigned long exclusiveStatusBarStyleOverrides
 @property  SBStatusBarTapManager *statusBarTapManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBStatusBarStyleOverridesAssertionManager sharedInstance]

  // instance methods
  -[SBStatusBarStyleOverridesAssertionManager xpcListener]
  -[SBStatusBarStyleOverridesAssertionManager setAssertionsByIdentifierByClientConnection:]
  -[SBStatusBarStyleOverridesAssertionManager eventQueue]
  -[SBStatusBarStyleOverridesAssertionManager statusBarStyleOverrides]
  -[SBStatusBarStyleOverridesAssertionManager setInternalQueue:]
  -[SBStatusBarStyleOverridesAssertionManager setAppStatusBarAssertionManager:]
  -[SBStatusBarStyleOverridesAssertionManager setEventQueue:]
  -[SBStatusBarStyleOverridesAssertionManager unregisterCoordinatorRegistrationForStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager _postStatusStringsByStyle:]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_coordinatorClientForConnection:]
  -[SBStatusBarStyleOverridesAssertionManager statusBarAssertionManager:statusBarSettingsDidChange:]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_removeAssertionByStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager .cxx_destruct]
  -[SBStatusBarStyleOverridesAssertionManager _verifyCoordinatorEntitlementForStyleOverride:onConnection:]
  -[SBStatusBarStyleOverridesAssertionManager _invalidateAssertionsWithIdentifiers:forClientConnection:]
  -[SBStatusBarStyleOverridesAssertionManager setAssertionsByStyleOverride:]
  -[SBStatusBarStyleOverridesAssertionManager succinctDescriptionBuilder]
  -[SBStatusBarStyleOverridesAssertionManager setStatusString:forAssertionWithIdentifier:]
  -[SBStatusBarStyleOverridesAssertionManager descriptionBuilderWithMultilinePrefix:]
  -[SBStatusBarStyleOverridesAssertionManager init]
  -[SBStatusBarStyleOverridesAssertionManager deactivateStatusBarStyleOverridesAssertionsWithIdentifiers:]
  -[SBStatusBarStyleOverridesAssertionManager setAssertionTimerSource:]
  -[SBStatusBarStyleOverridesAssertionManager descriptionWithMultilinePrefix:]
  -[SBStatusBarStyleOverridesAssertionManager succinctDescription]
  -[SBStatusBarStyleOverridesAssertionManager activateStatusBarStyleOverridesAssertions:reply:]
  -[SBStatusBarStyleOverridesAssertionManager setExclusiveStatusBarStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager exclusiveStatusBarStyleOverrides]
  -[SBStatusBarStyleOverridesAssertionManager setCoordinatorConnectionsByStyleOverride:]
  -[SBStatusBarStyleOverridesAssertionManager coordinatorConnectionsByStyleOverride]
  -[SBStatusBarStyleOverridesAssertionManager handleTapForStatusBarStyleOverride:]
  -[SBStatusBarStyleOverridesAssertionManager internalQueue]
  -[SBStatusBarStyleOverridesAssertionManager _updateAppSceneSettingsForForegroundAppsAndPostAddedStyleOverrides:removedStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager assertionsByIdentifierByClientConnection]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_addAssertionByStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager updateForegroundApplicationSceneHandles:withOptions:completion:]
  -[SBStatusBarStyleOverridesAssertionManager invalidateStatusBarStyleOverridesAssertions:]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_coordinatorClientForStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager assertionTimerSource]
  -[SBStatusBarStyleOverridesAssertionManager setXpcListener:]
  -[SBStatusBarStyleOverridesAssertionManager listener:shouldAcceptNewConnection:]
  -[SBStatusBarStyleOverridesAssertionManager _mainQueue_getStatusBarStyleOverridesToSuppressAndStatusStringsByStyleForForegroundApplicationSceneHandles:withHandler:]
  -[SBStatusBarStyleOverridesAssertionManager _statusStringsByStyleForActiveAssertionsByStyleOverride:inactiveAssertionsByStyleOverride:]
  -[SBStatusBarStyleOverridesAssertionManager setStatusBarStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager assertionsByStyleOverride]
  -[SBStatusBarStyleOverridesAssertionManager appStatusBarAssertionManager]
  -[SBStatusBarStyleOverridesAssertionManager setRegisteredOverrides:reply:]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_deactivateStatusBarStyleOverridesAssertionsWithIdentifiers:forClientConnection:]
  -[SBStatusBarStyleOverridesAssertionManager statusBarTapManager]


SBApplicationLayoutGestureMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationLayoutGestureMetric _moveActionForInitialFloatingConfig:finalConfig:]
  -[SBApplicationLayoutGestureMetric handleEvent:withContext:]
  -[SBApplicationLayoutGestureMetric .cxx_destruct]
  -[SBApplicationLayoutGestureMetric init]
  -[SBApplicationLayoutGestureMetric _moveActionForInitialSpaceConfig:finalConfig:]


SBFluidSwitcherLayoutContext : NSObject <BSDescriptionProviding, SBMainDisplayWorkspaceAppInteractionEventSourceObserving>
 @property  SBMainDisplayLayoutState *currentLayoutState
 @property  SBMainDisplayLayoutState *previousLayoutState
 @property  long long previousInterfaceOrientation
 @property  SBAppLayout *currentAppLayout
 @property  SBAppLayout *transitioningFromAppLayout
 @property  SBAppLayout *transitioningToAppLayout
 @property  NSDate *lastTransitionCompletionDate
 @property  BOOL hasUserInteractedWithActiveApplication
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  SBMainDisplayLayoutState *layoutState
 @property  SBFluidSwitcherGesture *activeGesture
 @property  SBWorkspaceApplicationSceneTransitionContext *activeTransitionContext
 @property  SBMainDisplayLayoutState *transitioningFromLayoutState
 @property  SBMainDisplayLayoutState *transitioningToLayoutState
 @property  double secondsSinceLastTransitionCompletion
 @property  unsigned long supportedOrientationsForGesture
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherLayoutContext layoutState]
  -[SBFluidSwitcherLayoutContext homeGestureSettings]
  -[SBFluidSwitcherLayoutContext transitioningToLayoutState]
  -[SBFluidSwitcherLayoutContext secondsSinceLastTransitionCompletion]
  -[SBFluidSwitcherLayoutContext .cxx_destruct]
  -[SBFluidSwitcherLayoutContext setCurrentAppLayout:]
  -[SBFluidSwitcherLayoutContext succinctDescriptionBuilder]
  -[SBFluidSwitcherLayoutContext transitioningFromAppLayout]
  -[SBFluidSwitcherLayoutContext eventSource:userTouchedApplication:]
  -[SBFluidSwitcherLayoutContext activeGesture]
  -[SBFluidSwitcherLayoutContext setCurrentLayoutState:]
  -[SBFluidSwitcherLayoutContext setLastTransitionCompletionDate:]
  -[SBFluidSwitcherLayoutContext descriptionBuilderWithMultilinePrefix:]
  -[SBFluidSwitcherLayoutContext initWithLayoutState:]
  -[SBFluidSwitcherLayoutContext descriptionWithMultilinePrefix:]
  -[SBFluidSwitcherLayoutContext transitioningToAppLayout]
  -[SBFluidSwitcherLayoutContext setPreviousInterfaceOrientation:]
  -[SBFluidSwitcherLayoutContext succinctDescription]
  -[SBFluidSwitcherLayoutContext setPreviousLayoutState:]
  -[SBFluidSwitcherLayoutContext setHomeGestureSettings:]
  -[SBFluidSwitcherLayoutContext shouldAddAppLayoutToFront:whenBeginningGestureOfType:layoutContext:]
  -[SBFluidSwitcherLayoutContext currentAppLayout]
  -[SBFluidSwitcherLayoutContext setHasUserInteractedWithActiveApplication:]
  -[SBFluidSwitcherLayoutContext transitioningFromLayoutState]
  -[SBFluidSwitcherLayoutContext setTransitioningFromAppLayout:]
  -[SBFluidSwitcherLayoutContext currentLayoutState]
  -[SBFluidSwitcherLayoutContext _shouldUpdateSwitcherModelBasedOnTimeOrUserInteraction]
  -[SBFluidSwitcherLayoutContext willBeginTransitioningToLayoutStateWithContext:]
  -[SBFluidSwitcherLayoutContext previousLayoutState]
  -[SBFluidSwitcherLayoutContext setTransitioningToAppLayout:]
  -[SBFluidSwitcherLayoutContext shouldAddAppLayoutToFront:whenEndingGestureOfType:layoutContext:]
  -[SBFluidSwitcherLayoutContext shouldAddAppLayoutToFront:forTransitionWithContext:currentAppLayouts:transitionCompleted:]
  -[SBFluidSwitcherLayoutContext supportedOrientationsForGesture]
  -[SBFluidSwitcherLayoutContext hasUserInteractedWithActiveApplication]
  -[SBFluidSwitcherLayoutContext activeTransitionContext]
  -[SBFluidSwitcherLayoutContext didEndTransitioningToLayoutStateWithContext:]
  -[SBFluidSwitcherLayoutContext previousInterfaceOrientation]
  -[SBFluidSwitcherLayoutContext setActiveGesture:]
  -[SBFluidSwitcherLayoutContext lastTransitionCompletionDate]


SBPressPrecedenceArbiter : NSObject <SBAVSystemControllerCacheObserver>
 @property  NSArray *hardwareButtons
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPressPrecedenceArbiter _shouldArbitrateLockAndVolumeHardwareButtonPriorities]
  -[SBPressPrecedenceArbiter .cxx_destruct]
  -[SBPressPrecedenceArbiter _updateButtonPrioritiesForNotification:]
  -[SBPressPrecedenceArbiter hardwareButtons]
  -[SBPressPrecedenceArbiter _currentButtonPriority]
  -[SBPressPrecedenceArbiter initWithHomeButtonType:]
  -[SBPressPrecedenceArbiter setHardwareButtons:]
  -[SBPressPrecedenceArbiter cache:didUpdateAudioSessionPlaying:]
  -[SBPressPrecedenceArbiter _applyButtonPriority:]
  -[SBPressPrecedenceArbiter _updateButtonPriority]


SBWindowSceneDelegate : NSObject <SBFTraitsArbiterScreenStateProviding, UISceneDelegate, UIWindowSceneDelegate_ForSpringBoardOnly>
 @property  BOOL screenIsDim
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIWindow *window

  // class methods
  +[SBWindowSceneDelegate _individuallyManagedRoles]
  +[SBWindowSceneDelegate _windowWillBecomeHiddenExemptRoles]

  // instance methods
  -[SBWindowSceneDelegate _isWindowContentVisible:]
  -[SBWindowSceneDelegate _participantForWindow:]
  -[SBWindowSceneDelegate _setParticipant:forWindow:]
  -[SBWindowSceneDelegate _windowScene:windowWillAttach:]
  -[SBWindowSceneDelegate .cxx_destruct]
  -[SBWindowSceneDelegate _windowScene:windowWillBecomeVisible:]
  -[SBWindowSceneDelegate _windowScene:windowWillDetach:]
  -[SBWindowSceneDelegate _shouldNotifyWindowWillBecomeHiddenForRole:]
  -[SBWindowSceneDelegate _windowScene:window:didUpdateSupportedInterfaceOrientations:]
  -[SBWindowSceneDelegate _windowScene:levelForWindow:preferredLevel:]
  -[SBWindowSceneDelegate screenIsDim]
  -[SBWindowSceneDelegate _acquireParticipantForWindow:reason:]
  -[SBWindowSceneDelegate init]
  -[SBWindowSceneDelegate _shouldManageParticipantWithRole:]
  -[SBWindowSceneDelegate traitsArbitrationPipelineManager]
  -[SBWindowSceneDelegate _windowScene:windowWillBecomeHidden:]
  -[SBWindowSceneDelegate traitsArbiter]
  -[SBWindowSceneDelegate _windowScene:windowDidBecomeVisible:]


SBMainSwitcherRoutingSwitcherModifier : SBSwitcherModifier <SBChainableModifierDelegate, SBRoutingSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMainSwitcherRoutingSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[SBMainSwitcherRoutingSwitcherModifier handleTransitionEvent:]
  -[SBMainSwitcherRoutingSwitcherModifier .cxx_destruct]
  -[SBMainSwitcherRoutingSwitcherModifier copyWithZone:]
  -[SBMainSwitcherRoutingSwitcherModifier handleGestureEvent:]
  -[SBMainSwitcherRoutingSwitcherModifier initWithMainModifierSubtree:floatingModifierSubtree:]
  -[SBMainSwitcherRoutingSwitcherModifier _modifierToHandleLayoutElement:]
  -[SBMainSwitcherRoutingSwitcherModifier routingModifier:event:forModifier:]
  -[SBMainSwitcherRoutingSwitcherModifier routingModifier:filteredAppLayouts:forModifier:]
  -[SBMainSwitcherRoutingSwitcherModifier routingModifier:modifierForAppLayout:]
  -[SBMainSwitcherRoutingSwitcherModifier routingModifier:containerViewBoundsForModifier:]
  -[SBMainSwitcherRoutingSwitcherModifier routingModifier:switcherViewBoundsForModifier:]
  -[SBMainSwitcherRoutingSwitcherModifier scrollModifierForRoutingModifier:]
  -[SBMainSwitcherRoutingSwitcherModifier homeScreenModifierForRoutingModifier:]
  -[SBMainSwitcherRoutingSwitcherModifier transactionCompletionOptionsModifierForRoutingModifier:]
  -[SBMainSwitcherRoutingSwitcherModifier routingModifier:animationAttributesModifierForLayoutElement:]
  -[SBMainSwitcherRoutingSwitcherModifier debugPotentialChildModifiers]


SBMixedGridSwitcherModifier : SBSwitcherModifier
 @property  BOOL disableFullScreenCardScaleRounding
 @property  {CGSize=dd} fullScreenCardSize
 @property  {CGSize=dd} floatingCardSize
 @property  BOOL reversesFloatingCardDirection
 @property  unsigned long lowDensityGridLayoutAlignment
 @property  unsigned long maximumNumberOfFullScreenCardsForSingleRow

  // instance methods
  -[SBMixedGridSwitcherModifier backgroundOpacityForIndex:]
  -[SBMixedGridSwitcherModifier splitViewInnerCornerRadius]
  -[SBMixedGridSwitcherModifier slideOverTongueDirection]
  -[SBMixedGridSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBMixedGridSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBMixedGridSwitcherModifier titleOpacityForIndex:]
  -[SBMixedGridSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBMixedGridSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[SBMixedGridSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBMixedGridSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBMixedGridSwitcherModifier shadowOffsetForIndex:]
  -[SBMixedGridSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBMixedGridSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[SBMixedGridSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBMixedGridSwitcherModifier headerStyleForIndex:]
  -[SBMixedGridSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[SBMixedGridSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBMixedGridSwitcherModifier neighboringAppLayoutsForFocusedAppLayout:]
  -[SBMixedGridSwitcherModifier animationAttributesForLayoutElement:]
  -[SBMixedGridSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[SBMixedGridSwitcherModifier scaleForIndex:]
  -[SBMixedGridSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBMixedGridSwitcherModifier handleTransitionEvent:]
  -[SBMixedGridSwitcherModifier isIndexRubberbandableForSwipeToKill:]
  -[SBMixedGridSwitcherModifier frameForIndex:]
  -[SBMixedGridSwitcherModifier blurViewIconScaleForIndex:]
  -[SBMixedGridSwitcherModifier visibleAppLayouts]
  -[SBMixedGridSwitcherModifier .cxx_destruct]
  -[SBMixedGridSwitcherModifier scrollViewAttributes]
  -[SBMixedGridSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBMixedGridSwitcherModifier minimumTranslationToKillIndex:]
  -[SBMixedGridSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBMixedGridSwitcherModifier contentViewScale]
  -[SBMixedGridSwitcherModifier cornerRadiiForIndex:]
  -[SBMixedGridSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBMixedGridSwitcherModifier _cardCornerRadiusInSwitcher]
  -[SBMixedGridSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBMixedGridSwitcherModifier canFocusableAppLayoutBeEffectivelyObscured:]
  -[SBMixedGridSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBMixedGridSwitcherModifier _verticalSpacing]
  -[SBMixedGridSwitcherModifier didMoveToParentModifier:]
  -[SBMixedGridSwitcherModifier topMostLayoutElements]
  -[SBMixedGridSwitcherModifier _contentSize]
  -[SBMixedGridSwitcherModifier shouldTetherItemsAndAccessoriesInAppLayout:]
  -[SBMixedGridSwitcherModifier resetAdjustedScrollingState]
  -[SBMixedGridSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBMixedGridSwitcherModifier switcherDropRegionContextForDraggingLayoutRole:inAppLayout:atLocation:]
  -[SBMixedGridSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBMixedGridSwitcherModifier shouldSuppressHighlightEffectForLayoutRole:inAppLayout:]
  -[SBMixedGridSwitcherModifier canLayoutRoleParticipateInSwitcherDragAndDrop:appLayout:]
  -[SBMixedGridSwitcherModifier snapshotScaleForAppLayout:]
  -[SBMixedGridSwitcherModifier copyWithZone:]
  -[SBMixedGridSwitcherModifier handleScrollEvent:]
  -[SBMixedGridSwitcherModifier _visibleAppLayoutRangeForContentOffset:]
  -[SBMixedGridSwitcherModifier _horizontalSpacing]
  -[SBMixedGridSwitcherModifier initWithFullScreenCardSize:floatingCardSize:]
  -[SBMixedGridSwitcherModifier responseForProposedChildResponse:childModifier:event:]
  -[SBMixedGridSwitcherModifier _numberOfFullScreenAppLayouts]
  -[SBMixedGridSwitcherModifier numberOfFloatingAppLayouts]
  -[SBMixedGridSwitcherModifier reversesFloatingCardDirection]
  -[SBMixedGridSwitcherModifier _frameForIndex:applyScrollViewContentOffset:]
  -[SBMixedGridSwitcherModifier _isIndexFullScreen:]
  -[SBMixedGridSwitcherModifier _adjustedFrame:forFloatingAppIndex:]
  -[SBMixedGridSwitcherModifier _floatingAppsStackRange]
  -[SBMixedGridSwitcherModifier floatingCardSize]
  -[SBMixedGridSwitcherModifier unadjustedScaleForIndex:]
  -[SBMixedGridSwitcherModifier _indexOfFirstFloatingLayoutFromAppLayouts:]
  -[SBMixedGridSwitcherModifier indexOfFirstMainAppLayoutFromAppLayouts:]
  -[SBMixedGridSwitcherModifier _fullScreenCardScale]
  -[SBMixedGridSwitcherModifier _floatingCardScale]
  -[SBMixedGridSwitcherModifier _cachedFullScreenCardScale]
  -[SBMixedGridSwitcherModifier _isDoubleStackingFullScreenCards]
  -[SBMixedGridSwitcherModifier maximumNumberOfFullScreenCardsForSingleRow]
  -[SBMixedGridSwitcherModifier isIndexVisible:]
  -[SBMixedGridSwitcherModifier _indexOfLeadingCard]
  -[SBMixedGridSwitcherModifier _invalidateCachesIfNeeded]
  -[SBMixedGridSwitcherModifier _fittedContentSize]
  -[SBMixedGridSwitcherModifier _fittedFullScreenContentSize]
  -[SBMixedGridSwitcherModifier _fittedFloatingContentSize]
  -[SBMixedGridSwitcherModifier _minimumFullScreenContentSize]
  -[SBMixedGridSwitcherModifier _numberOfFullScreenColumns]
  -[SBMixedGridSwitcherModifier _numberOfFloatingColumns]
  -[SBMixedGridSwitcherModifier firstFloatingCardPeekingWidth]
  -[SBMixedGridSwitcherModifier _scaledCardSizeForIndex:]
  -[SBMixedGridSwitcherModifier _numberOfOffScreenTrailingFloatingCardsForContentOffset:]
  -[SBMixedGridSwitcherModifier _numberOfOffScreenTrailingFullScreenCardsForContentOffset:]
  -[SBMixedGridSwitcherModifier _visibleAppLayoutRangeForContentOffset:lastVisibleIndex:]
  -[SBMixedGridSwitcherModifier _subtreeIndexForIndex:indexOfFirstMainAppLayout:]
  -[SBMixedGridSwitcherModifier _appLayoutWithPrimaryLeafAppLayout:sideLeafAppLayout:configuration:]
  -[SBMixedGridSwitcherModifier disableFullScreenCardScaleRounding]
  -[SBMixedGridSwitcherModifier _unpaddedCoplanarFrameForIndex:doubleStack:count:cardSize:scale:contentWidth:]
  -[SBMixedGridSwitcherModifier _cardHeaderHeight]
  -[SBMixedGridSwitcherModifier rangeOfVisibleAppLayouts]
  -[SBMixedGridSwitcherModifier isIndexFullyVisible:]
  -[SBMixedGridSwitcherModifier _cacheKeyForLayoutRole:inAppLayout:]
  -[SBMixedGridSwitcherModifier _numberOfFullScreenRows]
  -[SBMixedGridSwitcherModifier fullScreenCardSize]
  -[SBMixedGridSwitcherModifier setReversesFloatingCardDirection:]
  -[SBMixedGridSwitcherModifier lowDensityGridLayoutAlignment]
  -[SBMixedGridSwitcherModifier setLowDensityGridLayoutAlignment:]
  -[SBMixedGridSwitcherModifier setMaximumNumberOfFullScreenCardsForSingleRow:]
  -[SBMixedGridSwitcherModifier setDisableFullScreenCardScaleRounding:]


SBRestoreFailureAlertItem : SBAlertItem
  // instance methods
  -[SBRestoreFailureAlertItem allowMenuButtonDismissal]
  -[SBRestoreFailureAlertItem shouldShowInLockScreen]
  -[SBRestoreFailureAlertItem performUnlockAction]
  -[SBRestoreFailureAlertItem _rebootNow]
  -[SBRestoreFailureAlertItem configure:requirePasscodeForActions:]
  -[SBRestoreFailureAlertItem forcesModalAlertAppearance]
  -[SBRestoreFailureAlertItem suppressForKeynote]
  -[SBRestoreFailureAlertItem allowInSetup]
  -[SBRestoreFailureAlertItem restartSystemEvent]


SBDashBoardThermalStatusProvider : NSObject <CSThermalStatusProviding>
 @property  long long thermalStatus
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardThermalStatusProvider .cxx_destruct]
  -[SBDashBoardThermalStatusProvider init]
  -[SBDashBoardThermalStatusProvider initWithThermalController:]
  -[SBDashBoardThermalStatusProvider thermalStatus]


SBPlatformController : NSObject
  // class methods
  +[SBPlatformController sharedInstance]

  // instance methods
  -[SBPlatformController isCarrierInstall]
  -[SBPlatformController isHomeGestureEnabled]
  -[SBPlatformController isInternalInstall]
  -[SBPlatformController uniqueDeviceIdentifier]
  -[SBPlatformController defaultIconState]
  -[SBPlatformController isiPadMini]
  -[SBPlatformController hardwareModel]
  -[SBPlatformController isRoundCornerPad]
  -[SBPlatformController isRoundCornerPhone]
  -[SBPlatformController .cxx_destruct]
  -[SBPlatformController deviceClass]
  -[SBPlatformController systemBuildVersion]
  -[SBPlatformController prefersAlwaysOnOrientation]
  -[SBPlatformController init]
  -[SBPlatformController productType]
  -[SBPlatformController _loadDefaultIconInfo]
  -[SBPlatformController medusaCapabilities]
  -[SBPlatformController defaultIconStateDisplayIdentifiers]
  -[SBPlatformController localizedPlatformName]


SBTapAppLayoutSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  SBAppLayout *appLayout

  // instance methods
  -[SBTapAppLayoutSwitcherModifierEvent appLayout]
  -[SBTapAppLayoutSwitcherModifierEvent .cxx_destruct]
  -[SBTapAppLayoutSwitcherModifierEvent initWithAppLayout:]
  -[SBTapAppLayoutSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBTapAppLayoutSwitcherModifierEvent type]
  -[SBTapAppLayoutSwitcherModifierEvent copyWithZone:]


SBIconController : UIViewController <BBObserverDelegate, MCProfileConnectionObserver, SBApplicationRestrictionObserver, UIGestureRecognizerDelegate, SBSearchGestureObserver, FBSDisplayLayoutPublisherObserving, SBRootFolderPageStateObserver, SBAlertItemsControllerObserver, SBAssistantObserver, SBHIconManagerDelegate, SBRootFolderControllerAccessoryViewControllerDelegate, SBHomeScreenSpotlightDismissalDelegate, SBTodayViewControllerDelegate, SBFloatingDockControllerDelegate, SPUIRemoteSearchViewDelegate, PTSettingsKeyObserver, WGWidgetGroupViewControllerDelegate, SBHSidebarProviderDelegate, SBLayoutStateTransitionObserver, SPUISearchBarDelegate, SBProactiveHomeScreenSuggestionProviderObserver, SBFOverlayObserving, SBProactiveHomeScreenUsageObserverDelegate, SBHLibraryViewControllerObserver, PTSettingsKeyObserver, SBHomeScreenOverlayControllerDelegate, APUIAppPredictionViewControllerDelegate, SBBarSwipeAffordanceObserver, SBBarSwipeAffordanceDelegate, DNDStateUpdateListener, DNDModeConfigurationServiceListener, SBIconModelApplicationDataSource, SBHomeScreenIconTransitionAnimatorDelegate, SBIconAnimationContaining>
 @property  BOOL hasRestrictedEnforcedLayout
 @property  BOOL uninstallingSystemAppsRestricted
 @property  NSTimer *delayedLaunchRequestTimer
 @property  NSTimer *popoverDelayTimer
 @property  unsigned long iconOcclusionReasons
 @property  SBTodayViewController *todayViewController
 @property  SBTodayViewController *coverSheetTodayViewController
 @property  SBTodayViewController *homeScreenTodayViewController
 @property  SBHomeScreenSpotlightViewController *spotlightViewController
 @property  SBHLibraryViewController *libraryViewController
 @property  SBBarSwipeAffordanceViewController *libraryAffordanceViewController
 @property  <SBRootFolderPageTransition> *interactivePullToTodaySearchTransition
 @property  <BSInvalidatable> *displayLayoutTransition
 @property  PTSingleTestRecipe *relayoutTestRecipe
 @property  PTSingleTestRecipe *toggleSearchTestRecipe
 @property  PTSingleTestRecipe *runDownloadingIconTestRecipe
 @property  PTSingleTestRecipe *runRemoveAndRestoreIconTestRecipe
 @property  PTSingleTestRecipe *organizeInFoldersTestRecipe
 @property  PTDoubleTestRecipe *shuffleStackTestRecipe
 @property  PTSingleTestRecipe *runWidgetDiscoverabilityTestRecipe
 @property  SBHRootFolderSettings *rootFolderSettings
 @property  BOOL dismissingMenuForFolderPresentation
 @property  <BSInvalidatable> *keepTodayViewIconImagesStaticAssertion
 @property  <BSInvalidatable> *sidebarAppearanceStateOverrideAssertion
 @property  <BSInvalidatable> *significantAnimationColorSamplingAssertion
 @property  <BSInvalidatable> *suspendWallpaperAnimationForSpotlightAssertion
 @property  <BSInvalidatable> *suspendWallpaperAnimationForOverlayViewAssertion
 @property  SBProactiveHomeScreenUsageObserver *proactiveUsageObserver
 @property  SBProactiveHomeScreenSuggestionProvider *proactiveSuggestionProvider
 @property  NSObject<OS_dispatch_queue> *accountStoreQueue
 @property  SBWidgetMetricsServer *widgetMetricsServer
 @property  SBBarSwipeAffordanceViewController *widgetAddSheetAffordanceViewController
 @property  DNDStateService *dndStateService
 @property  DNDModeConfigurationService *dndModeConfigurationService
 @property  BOOL activeFocusModeHidesApplicationBadges
 @property  NSSet *activeFocusModeAllowedApplicationIdentifiers
 @property  NSArray *suggestedOnboardingStack
 @property  long long userIconStateFileStatus
 @property  BOOL isAddingWidgetDiscoverabilityDefaultWidgets
 @property  SBApplicationController *applicationController
 @property  SBApplicationPlaceholderController *applicationPlaceholderController
 @property  SBUIController *userInterfaceController
 @property  SBMainDisplayPolicyAggregator *policyAggregator
 @property  SBAlertItemsController *alertItemsController
 @property  SBAssistantController *assistantController
 @property  WGWidgetGroupViewController *widgetGroupViewController
 @property  SBIconModel *model
 @property  SBHomeScreenOverlayController *homeScreenOverlayController
 @property  SBRootFolderController *rootFolderController
 @property  SBFolderController *openFolderController
 @property  SBFolderController *currentFolderController
 @property  BOOL _ignoreMutatingIconListsOnApplicationInstall
 @property  long long currentIconListIndex
 @property  BOOL areAnyIconViewContextMenusShowing
 @property  BOOL isAnySearchVisibleOrTransitioning
 @property  NSSet *appIconForceTouchWindows
 @property  SBHIconManager *iconManager
 @property  SBHIconImageCache *appSwitcherHeaderIconImageCache
 @property  SBHIconImageCache *appSwitcherUnmaskedIconImageCache
 @property  SBHIconImageCache *tableUIIconImageCache
 @property  SBHIconImageCache *notificationIconImageCache
 @property  SBIconContentView *contentView
 @property  SBRootFolder *rootFolder
 @property  NSSet *visibleIconStateDisplayIdentifiers
 @property  unsigned long allowedInterfaceOrientations
 @property  _UILegibilitySettings *legibilitySettings
 @property  BOOL appLibrarySupported
 @property  SBIconDragManager *iconDragManager
 @property  SBFloatingDockController *floatingDockController
 @property  <SBIconAnimationContaining> *currentAnimationContainer
 @property  BOOL showingHomeScreenOverlay
 @property  BOOL todayOverlaySpotlightVisible
 @property  BOOL showingSidebar
 @property  BOOL sidebarPinned
 @property  SBHLibraryCategoryMap *libraryCategoryMap
 @property  SBAppStatusBarContentAssertion *statusBarContentAssertion
 @property  BOOL shouldAddNewIconsToRootFolder
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double currentDockHeight
 @property  UIView *containerView
 @property  UIWindow *animationWindow
 @property  UIView *fallbackIconContainerView

  // class methods
  +[SBIconController sharedInstance]
  +[SBIconController sharedInstanceIfExists]
  +[SBIconController _getApplicationDataStore:configurationKey:forDataSource:]

  // instance methods
  -[SBIconController popLibraryOverlay]
  -[SBIconController setHomeScreenTodayViewController:]
  -[SBIconController presentLibraryAnimated:completion:]
  -[SBIconController iconManager:configurationDataForDataSource:ofIcon:]
  -[SBIconController significantAnimationColorSamplingAssertion]
  -[SBIconController applicationController]
  -[SBIconController userIconStateFileStatus]
  -[SBIconController runWidgetDiscoverabilityTest]
  -[SBIconController suspendWallpaperAnimationForSpotlightAssertion]
  -[SBIconController searchBarDidFocus]
  -[SBIconController dismissSearchView]
  -[SBIconController noteFloatingDockWillChangeHeight]
  -[SBIconController noteViewCovered]
  -[SBIconController runWidgetDiscoverabilityTestRecipe]
  -[SBIconController setTodayViewController:]
  -[SBIconController _installedAppsDidChange:]
  -[SBIconController iconManager:willBeginIconDragWithUniqueIdentifier:numberOfDraggedItems:]
  -[SBIconController isEditingAllowedForIconManager:]
  -[SBIconController _endAppearanceTransitionForChildViewControllersToVisible:]
  -[SBIconController _controlCenterWillPresent:]
  -[SBIconController isSidebarPinned]
  -[SBIconController _iconModelDidLayout:]
  -[SBIconController iconManager:canAddIconToIgnoredList:]
  -[SBIconController dismissHomeScreenOverlay]
  -[SBIconController iconManager:launchActionsForIconView:]
  -[SBIconController importIconState:]
  -[SBIconController iconManagerDidDismissWidgetEditing:]
  -[SBIconController widgetGroupViewController]
  -[SBIconController launchActionsForIconView:]
  -[SBIconController _suggestedTodayViewSizeForBounds:]
  -[SBIconController setPopoverDelayTimer:]
  -[SBIconController searchGesture:changedPercentComplete:]
  -[SBIconController suggestedOnboardingStack]
  -[SBIconController allowedInterfaceOrientations]
  -[SBIconController testSetupForIconManagerAddWidgetsToEachPage:]
  -[SBIconController handleHomeButtonTap]
  -[SBIconController noteViewUncovered]
  -[SBIconController searchGesture:startedShowing:]
  -[SBIconController supportedMedusaShortcutActionsForBundleIdentifier:]
  -[SBIconController rootFolderPageStateProvider:willEndTransitionToState:successfully:]
  -[SBIconController rootFolderPageStateProvider:willBeginTransitionToState:animated:interactive:]
  -[SBIconController unforbidApplicationBundleIdentifierFromLibrary:]
  -[SBIconController isTodayOverlayPresented]
  -[SBIconController assistantWillAppear:]
  -[SBIconController iconManager:isWidgetValid:]
  -[SBIconController setStatusBarContentAssertion:]
  -[SBIconController isShowingHomeScreenOverlay]
  -[SBIconController iconManager:didCreateRootViewController:]
  -[SBIconController modeConfigurationService:didReceiveAvailableModesUpdate:]
  -[SBIconController floatingDockController]
  -[SBIconController noteFloatingDockWillAnimateChangeInHeight]
  -[SBIconController overlayControllerDidBeginChangingPresentationProgress:]
  -[SBIconController areAnyIconViewContextMenusAnimating]
  -[SBIconController _handleEditingGesture:]
  -[SBIconController appIconForceTouchWindows]
  -[SBIconController _enqueueTransitionName:withHandler:]
  -[SBIconController stateService:didReceiveDoNotDisturbStateUpdate:]
  -[SBIconController defaultSearchViewPresentationSourceForViewController:]
  -[SBIconController animator:animationSettingsForOperation:childViewController:]
  -[SBIconController overlayController:visibilityDidChange:]
  -[SBIconController iconManager:iconClassForApplicationWithBundleIdentifier:proposedClass:]
  -[SBIconController popToCurrentRootIconListWhenPossible]
  -[SBIconController localizedFolderNameForDefaultDisplayName:]
  -[SBIconController _addSmartStackToTodayList:completionHandler:]
  -[SBIconController currentIconListIndex]
  -[SBIconController testSetupForIconManagerWidgetScrollTest:]
  -[SBIconController dismissAppIconForceTouchControllers:]
  -[SBIconController rootFolderPageStateProvider:didContinueTransitionToState:progress:]
  -[SBIconController performAfterContextMenuAnimationsHaveCompleted:]
  -[SBIconController iconManager:folderControllerWillBeginScrolling:]
  -[SBIconController dndStateService]
  -[SBIconController presentLibraryCategoryPodForCategoryIdentifier:animated:completion:]
  -[SBIconController _currentFolderController]
  -[SBIconController _ensureRootFolderController]
  -[SBIconController libraryViewController:willDismissSearchController:]
  -[SBIconController containerViewForPresentingContextMenuForIconView:]
  -[SBIconController earlyTerminateAnyContextMenuAnimations]
  -[SBIconController rootFolderPageStateProvider:didEndTransitionFromState:toState:successfully:]
  -[SBIconController isShowingSidebar]
  -[SBIconController iconManager:isPartialEditingAllowedForIconLocation:]
  -[SBIconController launchURLForIconView:]
  -[SBIconController areAnyIconViewContextMenusShowing]
  -[SBIconController setDndStateService:]
  -[SBIconController rootFolderSettings]
  -[SBIconController showsDoneButtonWhileEditingForHomeScreenOverlayController:]
  -[SBIconController iconManagerCanUseSeparateWindowForRotation:]
  -[SBIconController _addStateCaptureHandlerForRestrictions]
  -[SBIconController barSwipeAffordanceView:systemGestureTypeForType:]
  -[SBIconController iconManager:canAddDragItemsToSession:fromIconView:]
  -[SBIconController iconManager:contentBoundingRectForConfigurationOfIconView:]
  -[SBIconController preferredFocusEnvironments]
  -[SBIconController isTodayOverlaySpotlightVisible]
  -[SBIconController homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBIconController transitionContextToShowSpotlight:fromTodayView:animated:interactive:]
  -[SBIconController iconManager:focusEffectTypeForIconView:]
  -[SBIconController isHideSuggestionSupportedForIconView:inLocation:]
  -[SBIconController _tryToPrepareDynamicDefaultTodayLayout]
  -[SBIconController iconManager:iconViewDisplaysLabel:]
  -[SBIconController _effectiveOrientation]
  -[SBIconController _runTest:afterMovingIconsIntoFolder:withFolderOpen:]
  -[SBIconController iconManager:screenSnapshotProviderForComponentsOfIconView:]
  -[SBIconController iconManager:wantsLaunchForWidgetURL:]
  -[SBIconController fallbackIconContainerView]
  -[SBIconController iconManager:containerViewControllerForConfigurationOfIconView:]
  -[SBIconController libraryViewController:willPresentFolderController:]
  -[SBIconController _rebuildTodayViewControllers]
  -[SBIconController shouldAddNewIconsToRootFolder]
  -[SBIconController viewWillLayoutSubviews]
  -[SBIconController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBIconController traitCollectionDidChange:]
  -[SBIconController _iconVisibilityChanged:]
  -[SBIconController iconManager:isCustomElementValid:]
  -[SBIconController presentLibraryOverlayForIconManager:]
  -[SBIconController libraryViewController:didPresentSearchController:]
  -[SBIconController _policyAggregator]
  -[SBIconController _controlCenterWillDismiss:]
  -[SBIconController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBIconController iconManager:canAddIcon:toIconList:inFolder:]
  -[SBIconController setInteractivePullToTodaySearchTransition:]
  -[SBIconController _updateRootFolderWithCurrentDoNotDisturbState]
  -[SBIconController _ppt_popHomeScreenState]
  -[SBIconController _obtainSmartStackForWidgetDiscoverabilityWithCompletionHandler:]
  -[SBIconController _createWidgetIconWithDescriptors:gridSize:]
  -[SBIconController iconManager:folderController:canChangeCurrentPageIndexToIndex:]
  -[SBIconController markIconsOccludedForReason:]
  -[SBIconController isFloatingDockVisibleForIconManager:]
  -[SBIconController _updateRootFolderWithDoNotDisturbState:]
  -[SBIconController addIconOcclusionReason:updateVisibleIcons:]
  -[SBIconController localizedDefaultFolderNameForIconManager:]
  -[SBIconController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBIconController _prepareDefaultTodayLayoutIfNecessary]
  -[SBIconController iconManagerShouldShowWidgetIntroductionPopoverForDefaultWidgets:]
  -[SBIconController overrideShouldAddDefaultWidgetsToHomeScreenWhenNeeded]
  -[SBIconController resetCategories]
  -[SBIconController _isHostedByCoverSheet]
  -[SBIconController setKeepTodayViewIconImagesStaticAssertion:]
  -[SBIconController widgetAddSheetAffordanceViewController]
  -[SBIconController distanceToTopOfSpotlightIconsForIconManager:]
  -[SBIconController activeFocusModeHidesApplicationBadges]
  -[SBIconController dismissTodayOverlayForIconManager:]
  -[SBIconController iconManager:contentOverlayInsetsFromParentIfAvailableForFolderController:]
  -[SBIconController userInterfaceControllerIfExists]
  -[SBIconController iconManagerCanSaveIconState:]
  -[SBIconController isNewsTodayWidgetAvailableForCurrentLocale]
  -[SBIconController setDndModeConfigurationService:]
  -[SBIconController iconModel:applicationWithBundleIdentifier:]
  -[SBIconController libraryCategoryMap]
  -[SBIconController delayedLaunchRequestTimer]
  -[SBIconController dismissHomeScreenOverlayUsingTransitionCoordinator:]
  -[SBIconController _teardownDeweyTestConfigurations]
  -[SBIconController dismissTodayOverlaySpotlightAnimated:]
  -[SBIconController iconManager:iconViewDisplaysCloseBox:]
  -[SBIconController containerView]
  -[SBIconController setActiveFocusModeHidesApplicationBadges:]
  -[SBIconController setDelayedLaunchRequestTimer:]
  -[SBIconController _relinquishStatusBarContentAssertionAnimated:]
  -[SBIconController _coverSheetDidPresent:]
  -[SBIconController animateModalWidgetDiscoverabilityIntroductionWhenNeeded]
  -[SBIconController iconManager:didRemoveConfigurableDataSource:ofIcon:]
  -[SBIconController iconManager:prepareForPageHidingEducationWithCompletionHandler:]
  -[SBIconController setIsAddingWidgetDiscoverabilityDefaultWidgets:]
  -[SBIconController dismissTodayOverlay]
  -[SBIconController _mutateIconListsForInstalledAppsDidChangeWithController:added:modified:removed:]
  -[SBIconController _performWidgetMigrationIfNecessary]
  -[SBIconController setHasRestrictedEnforcedLayout:]
  -[SBIconController .cxx_destruct]
  -[SBIconController iconManager:canCustomElementAlignWithGrid:]
  -[SBIconController iconManager:didSpringLoadIconView:]
  -[SBIconController iconManagerWillPresentWidgetEditing:]
  -[SBIconController minimumHomeScreenScale]
  -[SBIconController _showsBadgesInAppLibraryDidChange]
  -[SBIconController iconManager:viewControllerForCustomIcon:element:]
  -[SBIconController presentTodayOverlayForIconManager:]
  -[SBIconController iconManager:didCloseFolder:]
  -[SBIconController _dismissPageManagementIfPresented:]
  -[SBIconController _updateUninstallingSystemAppsRestricted]
  -[SBIconController _runScrollFolderTest:]
  -[SBIconController iconManager:folderControllerDidEndScrolling:]
  -[SBIconController libraryViewControllerWillDismiss:]
  -[SBIconController _runAppIconForceTouchTest:withOptions:]
  -[SBIconController iconManager:containerViewControllerForModalInteractionFromIconView:]
  -[SBIconController rootFolderController:transitionDidFinish:]
  -[SBIconController searchGesture:endedGesture:]
  -[SBIconController _launchWidgetIcon:fromLocation:withContext:]
  -[SBIconController allApplicationsForIconModel:]
  -[SBIconController iconManager:backgroundViewForComponentsOfIconView:]
  -[SBIconController iconManager:dragPreviewForIconView:]
  -[SBIconController popoverDelayTimer]
  -[SBIconController organizeInFoldersTestRecipe]
  -[SBIconController setSuspendWallpaperAnimationForOverlayViewAssertion:]
  -[SBIconController hasRestrictedEnforcedLayout]
  -[SBIconController _failCurrentTestWithMessage:]
  -[SBIconController iconManager:rootFolderController:didOverscrollOnFirstPageByAmount:]
  -[SBIconController iconManager]
  -[SBIconController shuffleStackTestRecipe]
  -[SBIconController removeIconsOccludedAssertion:]
  -[SBIconController homeScreenOverlayWantsWidgetEditingViewControllerPresented:]
  -[SBIconController iconManager:willDismissPageManagementUsingAnimator:context:]
  -[SBIconController iconManagerDidNoteIconStateChangedExternally:]
  -[SBIconController contentView]
  -[SBIconController succinctDescriptionBuilder]
  -[SBIconController interactivePullToTodaySearchTransition]
  -[SBIconController isUninstallOrHideSupportedForIcon:inLocation:]
  -[SBIconController proactiveSuggestionProvider]
  -[SBIconController setLegibilitySettings:]
  -[SBIconController _foldersInList:]
  -[SBIconController _updateIconModelStore]
  -[SBIconController allowsBadgingForIcon:]
  -[SBIconController iconManager:willOpenFolderController:]
  -[SBIconController _backupRestoringDidChange:]
  -[SBIconController homeScreenOverlayWantsToEndEditing:]
  -[SBIconController iconManager:possibleUserIconTapBeganAfterInformingIcon:]
  -[SBIconController listsAllowRotatedLayoutForIconManager:]
  -[SBIconController iconManagerWillAnimateWidgetInsertion:]
  -[SBIconController appPredictionViewController:badgeValueForApplicationWithBundleIdentifier:]
  -[SBIconController completeSidebarAnimationsIfNeeded]
  -[SBIconController contentOverlayInsetsFromParentIfAvailableForFolderController:]
  -[SBIconController viewDidAppear:]
  -[SBIconController iconManagerIconDraggingDidChange:]
  -[SBIconController minimumHomeScreenScaleForFloatingDockController:]
  -[SBIconController _createTestFolderWithOverrideIconList:]
  -[SBIconController iconManager:willOpenFolder:]
  -[SBIconController iconManager:willRemoveFakeStatusBar:forFolderController:]
  -[SBIconController isHideSupportedForIcon:inLocation:]
  -[SBIconController displayLayoutTransition]
  -[SBIconController initWithNibName:bundle:]
  -[SBIconController shouldUseLiveBlurForBackgroundViewForComponentsOfIconView:]
  -[SBIconController userInterfaceController]
  -[SBIconController presentLibraryOverlayForIconManager:animated:completion:]
  -[SBIconController tableUIIconImageCache]
  -[SBIconController _ppt_prepareTransientIconModelStoreWithError:]
  -[SBIconController shouldAutomaticallyForwardAppearanceMethods]
  -[SBIconController iconManager:allowsBadgingForIcon:]
  -[SBIconController iconManager:statusBarEdgeInsetsForFolderController:]
  -[SBIconController iconManager:supportedMedusaShortcutActionsForIconView:]
  -[SBIconController todayViewWantsToEndEditing:]
  -[SBIconController shouldAutorotate]
  -[SBIconController allowsUninstall]
  -[SBIconController iconManager:launchIconForIconView:withActions:]
  -[SBIconController areHomeScreenIconsOccluded]
  -[SBIconController coverSheetTodayViewController]
  -[SBIconController iconManager:launchURLForIconView:]
  -[SBIconController resetHomeScreenLayout]
  -[SBIconController setSidebarAppearanceStateOverrideAssertion:]
  -[SBIconController iconManagerEditingDidChange:]
  -[SBIconController isAppLibrarySupported]
  -[SBIconController isLibraryOverlayPresented]
  -[SBIconController descriptionBuilderWithMultilinePrefix:]
  -[SBIconController setLibraryAffordanceViewController:]
  -[SBIconController _rootFolderController]
  -[SBIconController defaultIconStateForIconManager:]
  -[SBIconController iconManagerDidSaveIconState:]
  -[SBIconController proactiveHomeScreenSuggestionProvider:willUseTemporaryIntent:forIconWithIdentifier:widgetUniqueIdentifier:]
  -[SBIconController setDismissingMenuForFolderPresentation:]
  -[SBIconController setWallpaperAnimationDisabled:forReason:]
  -[SBIconController _updateStatusBarContentAssertionAnimated:]
  -[SBIconController animationWindow]
  -[SBIconController iconManager:willUseRootFolderControllerConfiguration:]
  -[SBIconController _openFolderController]
  -[SBIconController _containerViewControllerForPresentingFromTodayViewControllerAllowingCoverSheet:]
  -[SBIconController _setUpLibraryViewController]
  -[SBIconController dismissLibraryOverlay]
  -[SBIconController iconManager:rootFolderController:willUseTransitionContext:toTransitionToState:]
  -[SBIconController removeIconOcclusionReason:updateVisibleIcons:]
  -[SBIconController _ppt_pushHomeScreenStateWithError:]
  -[SBIconController setWidgetAddSheetAffordanceViewController:]
  -[SBIconController toggleSearchTestRecipe]
  -[SBIconController _presentPageManagement:]
  -[SBIconController iconManager:willAddDefaultFirstPageWidgetsBasedOnPinnedWidgets:suggestionWidgets:]
  -[SBIconController profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[SBIconController _iconForceTouchControllerWillPresent:]
  -[SBIconController setSpotlightViewController:]
  -[SBIconController iconManager:didEndIconDragWithUniqueIdentifier:numberOfDraggedItems:]
  -[SBIconController isUninstallSupportedForIcon:]
  -[SBIconController _setIgnoreMutatingIconListsOnApplicationInstall:]
  -[SBIconController setProactiveSuggestionProvider:]
  -[SBIconController testSetupHomeScreenForWidgetScrollPerformanceTest:]
  -[SBIconController applicationRestrictionController:didUpdateVisibleTags:hiddenTags:]
  -[SBIconController descriptionWithMultilinePrefix:]
  -[SBIconController iconManager:allowsBadgingForIconLocation:]
  -[SBIconController iconManager:closeBoxTypeForIconView:proposedType:]
  -[SBIconController runRemoveAndRestoreIconTestRecipe]
  -[SBIconController libraryViewController:willPresentSearchController:]
  -[SBIconController iconManager:defaultAutomaticFavoriteIconIdentifiersWithMaximumCount:]
  -[SBIconController handleSpotlightPresentationFromViewController:]
  -[SBIconController iconManager:isIconVisibleForBundleIdentifier:]
  -[SBIconController folderNameForDisplayID:]
  -[SBIconController _newTodayViewControllerWithIconManager:iconListModel:rootFolder:location:]
  -[SBIconController addNewIconToDesignatedLocationWithExplicitAnimatedInsertion:]
  -[SBIconController libraryViewController:didDismissSearchController:]
  -[SBIconController _invalidateAssertionsForFolderController:]
  -[SBIconController lockScreenAnimationDidFinishHandler]
  -[SBIconController folderController:iconListView:springLoadedInteractionForIconDragDidCompleteOnIconView:]
  -[SBIconController _setFolderDisplayLayoutElementActive:]
  -[SBIconController publisher:didUpdateLayout:withTransition:]
  -[SBIconController iconManagerFolderAnimatingDidChange:]
  -[SBIconController rootFolderController:transitionWillBegin:]
  -[SBIconController viewControllerForPresentingViewControllersForIconManager:]
  -[SBIconController _addStateCaptureHandlerForInterestingAppIconLocations]
  -[SBIconController fallbackDefaultFirstPageWidgetsForIconManager:]
  -[SBIconController iconManager:applicationShortcutItemsForIconView:]
  -[SBIconController iconManager:minimumHomeScreenScaleForFolderController:]
  -[SBIconController _shouldHideAppIconForceTouchInfoForApplication:]
  -[SBIconController iconManagerListLayoutProviderDidChange:]
  -[SBIconController _makeTodayViewControllers]
  -[SBIconController iconManager:rootFolderController:didOverscrollOnLastPageByAmount:]
  -[SBIconController succinctDescription]
  -[SBIconController _coverSheetWillPresent:]
  -[SBIconController observer:updateSectionInfo:]
  -[SBIconController iconManager:dataSource:ofIcon:didUpdateConfigurationData:]
  -[SBIconController iconManager:shouldActivateApplicationShortcutItem:atIndex:forIconView:]
  -[SBIconController isAddingWidgetDiscoverabilityDefaultWidgets]
  -[SBIconController _launchFromIconView:withActions:]
  -[SBIconController _configureEditingGestureRecognizers]
  -[SBIconController _showInfoAlertIfNeeded:]
  -[SBIconController iconManager:shouldPlaceIconOnIgnoredList:]
  -[SBIconController _endDisablingAllOrientationChangesForReason:]
  -[SBIconController _setWidgetEditingDisplayLayoutElementActive:]
  -[SBIconController libraryViewControllerRequestsDismissal:]
  -[SBIconController noteTransientOverlayPresented]
  -[SBIconController setLibraryViewController:]
  -[SBIconController _beginAppearanceTransitionForChildViewControllersToVisible:animated:]
  -[SBIconController dismissTodayOverlayAnimated:]
  -[SBIconController rootFolder]
  -[SBIconController updateContentViewOrientationAndLayoutIfNeeded]
  -[SBIconController _aggregateLoggingAppKeyForIcon:]
  -[SBIconController _bookmarkDidUninstall:]
  -[SBIconController allowedInterfaceOrientationsForIconManager:]
  -[SBIconController dndModeConfigurationService]
  -[SBIconController alertItemsController:didDeactivateAlertItem:forReason:]
  -[SBIconController launchActivationSettingsForIconView:]
  -[SBIconController _setPodDisplayLayoutElementActive:]
  -[SBIconController canAppPredictionsWidgetAlignWithGrid]
  -[SBIconController dismissOverlaysForIconManager:]
  -[SBIconController iconManager:rootFolderController:didEndOverscrollOnFirstPageWithVelocity:translation:]
  -[SBIconController _beginDisablingAllOrientationChangesForReason:]
  -[SBIconController _updateVisibleIconsAfterOcclusionChange]
  -[SBIconController recycledViewsContainerProviderForIconManager:]
  -[SBIconController windowForIconDragPreviewsForIconManager:]
  -[SBIconController addSmartStacksForWidgetDiscoverabilityAndPrepareWidgetIntroduction]
  -[SBIconController _configureLibraryWithCategoryLimit:]
  -[SBIconController _performInitialLayoutWithOrientation:]
  -[SBIconController spotlightViewController]
  -[SBIconController widgetIntroductionPreviewViewForIconManager:]
  -[SBIconController _acquireUseSnapshotAsLibraryBackgroundViewAssertionIfNecessary]
  -[SBIconController viewWillDisappear:]
  -[SBIconController isFocusAllowedForIconManager:]
  -[SBIconController proactiveHomeScreenSuggestionProviderDidUpdatePrediction:]
  -[SBIconController accountStoreQueue]
  -[SBIconController _forceTouchControllerWillPresent:]
  -[SBIconController _updateRootFolderWithActiveFocusMode:]
  -[SBIconController forbidApplicationBundleIdentifierFromLibrary:]
  -[SBIconController isTodayViewRotating:]
  -[SBIconController rootFolderController:transitionContextForTransitioningToState:animated:interactive:]
  -[SBIconController iconManagerCanBeginIconDrags:]
  -[SBIconController iconOcclusionReasons]
  -[SBIconController isAnySearchVisibleOrTransitioning]
  -[SBIconController proactiveOnboardingDefaultStacks]
  -[SBIconController _evaluateLibraryOverlayAffordanceActivation]
  -[SBIconController iconManager:additionalDragLiftScaleForIconView:]
  -[SBIconController iconManager:testRecipe_setupIntent:forWidget:iconWithIdentifier:]
  -[SBIconController iconManager:statusBarStyleRequestForFolderController:]
  -[SBIconController rootFolderController:transitionWillReverse:]
  -[SBIconController setHomeScreenOverlayController:]
  -[SBIconController _tryToPrepareNonDynamicDefaultTodayLayout]
  -[SBIconController iconManager:didCreateRootFolderController:]
  -[SBIconController libraryAffordanceViewController]
  -[SBIconController libraryViewControllerWillPresent:]
  -[SBIconController todayViewControllerWillPresentSpotlight:]
  -[SBIconController orientation]
  -[SBIconController gestureRecognizer:shouldReceiveTouch:]
  -[SBIconController currentAnimationContainer]
  -[SBIconController alertItemsController:willActivateAlertItem:]
  -[SBIconController _ignoreMutatingIconListsOnApplicationInstall]
  -[SBIconController model]
  -[SBIconController _createWidgetIconWithKind:extensionBundleIdentifier:gridSize:]
  -[SBIconController dismissLibraryAnimated:completion:]
  -[SBIconController viewWillAppear:]
  -[SBIconController iconManager:touchesEndedForIconView:]
  -[SBIconController iconPathForIconWithDisplayID:]
  -[SBIconController appPredictionViewController:shouldDisplayBadgeWithBundleIdentifier:]
  -[SBIconController iconManager:containerViewForPresentingContextMenuForIconView:]
  -[SBIconController _mainSwitcherCreated:]
  -[SBIconController iconManager:homeScreenContentViewForModalInteractionFromIconView:]
  -[SBIconController allowsHomeScreenOverlay]
  -[SBIconController iconManager:rootFolderController:didEndOverscrollOnLastPageWithVelocity:translation:]
  -[SBIconController iconManager:shouldCacheRecentViewController:forIdentifier:]
  -[SBIconController _setModalAppLibraryDisplayLayoutElementActive:]
  -[SBIconController relayoutTestRecipe]
  -[SBIconController iconDragManager]
  -[SBIconController dismissHomeScreenOverlayAnimated:]
  -[SBIconController testSetupForIconManagerWidgetScrollPerformanceTest:]
  -[SBIconController _configureDeweyOneCategoryWithAllApps]
  -[SBIconController homeScreenOverlayController]
  -[SBIconController iconManager:possibleUserIconTapBegan:]
  -[SBIconController iconManager:willRemoveViewControllerForIdentifier:]
  -[SBIconController overlayController:didChangePresentationProgress:newPresentationProgress:fromLeading:]
  -[SBIconController _primaryAppleAccountDidChange:]
  -[SBIconController iconManager:accessibilityTintColorForIconView:]
  -[SBIconController interfaceOrientationForIconManager:]
  -[SBIconController iconManager:configureIconView:forIcon:]
  -[SBIconController alertItemsController]
  -[SBIconController appSwitcherHeaderIconImageCache]
  -[SBIconController iconManager:prepareAddSheetViewController:]
  -[SBIconController iconManager:statusBarInsetsDidChange:]
  -[SBIconController dismissHomeScreenOverlayAnimated:completion:]
  -[SBIconController _addStateCaptureHandlerForHomeScreenDefaults]
  -[SBIconController setActiveFocusModeAllowedApplicationIdentifiers:]
  -[SBIconController setDisplayLayoutTransition:]
  -[SBIconController statusBarContentAssertion]
  -[SBIconController sidebarAppearanceStateOverrideAssertion]
  -[SBIconController iconManager:willPrepareIconViewForLaunch:]
  -[SBIconController isIconContentPossiblyVisibleOverApplicationForIconManager:]
  -[SBIconController keepTodayViewIconImagesStaticAssertion]
  -[SBIconController proactiveUsageObserver]
  -[SBIconController setUserIconStateFileStatus:]
  -[SBIconController _shouldTodayViewController:receiveTouch:]
  -[SBIconController bestListLayoutProviderLayoutOptions]
  -[SBIconController configureLibraryViewController:withIconManager:]
  -[SBIconController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBIconController _configureDeweyEachAppHasItsOwnCategory:]
  -[SBIconController showsAddWidgetButtonWhileEditingForHomeScreenOverlayController:]
  -[SBIconController _updateEnabledBadgesSetWithSections:]
  -[SBIconController iconManager:backgroundViewForDockForRootFolderController:]
  -[SBIconController iconManager:canBeginDragForIconView:]
  -[SBIconController _iconForceTouchControllerDidDismiss:]
  -[SBIconController iconManager:iconView:configurationWillBeginWithInteraction:]
  -[SBIconController iconManager:willUseIconImageCache:]
  -[SBIconController settings:changedValueForKey:]
  -[SBIconController visibleIconStateDisplayIdentifiers]
  -[SBIconController isOnlyHideSuggestionSupportedForIcon:inLocation:]
  -[SBIconController todayViewDidAppear:]
  -[SBIconController setModel:]
  -[SBIconController activeFocusModeAllowedApplicationIdentifiers]
  -[SBIconController policyAggregator]
  -[SBIconController iconManager:reasonToDisallowInteractionOnIconView:]
  -[SBIconController isEnterpriseMultiUser]
  -[SBIconController libraryViewController:willDismissFolderController:]
  -[SBIconController updateNumberOfRowsWithDuration:]
  -[SBIconController _startSpotlightInteractiveGestureTransactionForGesture:]
  -[SBIconController alertItemsController:didActivateAlertItem:]
  -[SBIconController backgroundViewForEditingDoneButtonForHomeScreenOverlayController:]
  -[SBIconController _runFolderCloseTest]
  -[SBIconController iconManager:didReceiveTapOnLaunchDisabledIconView:]
  -[SBIconController iconManager:iconView:willUseContextMenuStyle:]
  -[SBIconController iconManager:wantsUninstallForIcon:location:]
  -[SBIconController setSignificantAnimationColorSamplingAssertion:]
  -[SBIconController _allowsBadgingForApplicationBundleIdentifier:]
  -[SBIconController homeScreenOverlayController:setSuppressesEditingStateForListView:]
  -[SBIconController widgetGroupViewControllerDidChangeHeaderVisibility:]
  -[SBIconController _isWidgetWithContainerBundleIdentifierValid:]
  -[SBIconController iconManager:draggingStartLocationForIconView:proposedStartLocation:]
  -[SBIconController _addStateCaptureHandlerForKeyDisplayIDsWithBadgingEnabled]
  -[SBIconController _dragSessionContainsAppClipWebClipIcon:]
  -[SBIconController todayViewController]
  -[SBIconController _runFolderTestWithName:actions:]
  -[SBIconController iconManager:wantsToHideStatusBarForFolderController:animated:]
  -[SBIconController temporaryIntentDataForIconWithIdentifier:widgetUniqueIdentifier:]
  -[SBIconController iconManager:fakeStatusBarForFolderController:]
  -[SBIconController dealloc]
  -[SBIconController appPredictionViewController:launchAppFromIcon:]
  -[SBIconController iconManager:canAcceptDropInSession:inIconListView:]
  -[SBIconController proactiveHomeScreenUsageObserver:intentForWidget:ofIcon:]
  -[SBIconController setSuspendWallpaperAnimationForSpotlightAssertion:]
  -[SBIconController runDownloadingIconTestRecipe]
  -[SBIconController _enableWidgetSuggestionsForIconsInModel:withRootFolder:]
  -[SBIconController iconManager:didOpenFolder:]
  -[SBIconController maximumListCountForFoldersForIconManager:]
  -[SBIconController isAppLibraryAllowed]
  -[SBIconController _runFolderOpenTest]
  -[SBIconController appSwitcherUnmaskedIconImageCache]
  -[SBIconController homeScreenTodayViewController]
  -[SBIconController iconManager:accessibilityTintColorForScreenRect:]
  -[SBIconController iconManager:localizedFolderNameForDefaultDisplayName:]
  -[SBIconController profileConnectionDidReceiveProfileListChangedNotification:userInfo:]
  -[SBIconController iconManager:willDestroyRootFolderController:]
  -[SBIconController iconManager:willPresentPageManagementWithLayoutManager:animator:context:]
  -[SBIconController appPredictionViewController:iconForApplicationWithBundleIdentifier:]
  -[SBIconController currentDockHeight]
  -[SBIconController iconManager:iconDropSessionDidEnter:]
  -[SBIconController iconManager:nestingViewController:willPerformOperation:onViewController:withTransitionCoordinator:]
  -[SBIconController unregisterToSBLockScreenManagerUnlockAnimationDidFinishNotification]
  -[SBIconController handleNavigationCommand:withDirection:]
  -[SBIconController iconManager:rootFolderController:didChangeSidebarVisibilityProgress:]
  -[SBIconController _badgesAreEnabledForSectionInfo:]
  -[SBIconController iconManagerDidFinishInstallForIcon:]
  -[SBIconController suspendWallpaperAnimationForOverlayViewAssertion]
  -[SBIconController iconManager:willDestroyRootViewController:]
  -[SBIconController setCoverSheetTodayViewController:]
  -[SBIconController setProactiveUsageObserver:]
  -[SBIconController iconManager:launchIcon:location:animated:completionHandler:]
  -[SBIconController iconManager:willCloseFolderController:]
  -[SBIconController observer:noteServerConnectionStateChanged:]
  -[SBIconController loadView]
  -[SBIconController firstPageLeafIdentifiersForIconManager:]
  -[SBIconController obtainProactiveSecondPageWidgetSuggestion]
  -[SBIconController assistantController]
  -[SBIconController supportedInterfaceOrientations]
  -[SBIconController applicationPlaceholderController]
  -[SBIconController libraryViewControllerDidDismiss:]
  -[SBIconController _performWidgetMigrationIfNecessaryForApplication:]
  -[SBIconController setUninstallingSystemAppsRestricted:]
  -[SBIconController iconManager:didDismissPageManagementWithLayoutManager:context:]
  -[SBIconController setIconOcclusionReasons:]
  -[SBIconController libraryViewControllerDidPresent:]
  -[SBIconController registerToSBLockScreenManagerUnlockAnimationDidFinishNotification]
  -[SBIconController dismissingMenuForFolderPresentation]
  -[SBIconController isEditingForHomeScreenOverlayController:]
  -[SBIconController _configureCategoryMapProviderToUseCategoryMapAtURL:]
  -[SBIconController _lockScreenUIWillLock:]
  -[SBIconController _createWidgetIconWithDataSource:gridSize:]
  -[SBIconController iconManager:homeScreenContentViewForConfigurationOfIconView:]
  -[SBIconController isUpgradeRestore]
  -[SBIconController todayViewControllerDidChangeHeaderVisibility:]
  -[SBIconController _acquireAssertionsForFolderController:]
  -[SBIconController _rootFolderDidChange]
  -[SBIconController viewDidDisappear:]
  -[SBIconController prepareForImminentExit]
  -[SBIconController iconManager:shouldContinueToUseBackgroundView:forComponentsOfIconView:]
  -[SBIconController isUninstallingSystemAppsRestricted]
  -[SBIconController _homeScreenOverlayControllerIfNeeded]
  -[SBIconController widgetMetricsServer]
  -[SBIconController initWithApplicationController:applicationPlaceholderController:userInterfaceController:policyAggregator:alertItemsController:assistantController:powerLogAggregator:]
  -[SBIconController _createTestFolder]
  -[SBIconController iconManager:didAddItemsToIconDragWithUniqueIdentifier:numberOfDraggedItems:]
  -[SBIconController iconManager:iconView:configurationDidEndWithInteraction:]
  -[SBIconController isRootFolderContentVisibleForIconManager:]
  -[SBIconController legibilitySettings]
  -[SBIconController handleSpotlightDismissalFromViewController:]
  -[SBIconController homeScreenOverlayController:displayLayoutIdentifierForSidebarViewController:]
  -[SBIconController notificationIconImageCache]
  -[SBIconController rootFolderController:transitionWillFinish:]
  -[SBIconController dismissLibraryOverlayForIconManager:]
  -[SBIconController iconManager:rootFolderController:didChangeEffectiveSidebarVisibilityProgress:]
  -[SBIconController allApplicationPlaceholdersForIconModel:]
  -[SBIconController _storeAccountDidChange:]
  -[SBIconController activateTodayViewWithCompletion:]
  -[SBIconController iconManager:animator:animationSettingsForOperation:childViewController:]
  -[SBIconController dismissLibraryOverlayAnimated:]
  -[SBIconController iconManager:willCloseFolder:]
  -[SBIconController libraryViewController]
  -[SBIconController setTemporaryIntent:forIconWithIdentifier:widgetUniqueIdentifier:]
  -[SBIconController widgetGroupViewController:sizeForInterfaceOrientation:]


SBForceTouchAppIconInfoProvider : NSObject <SBIconAccessoryInfoProvider>
 @property  NSString *location
 @property  BOOL highlighted
 @property  long long continuityBadgeType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBForceTouchAppIconInfoProvider continuityBadgeType]
  -[SBForceTouchAppIconInfoProvider isHighlighted]
  -[SBForceTouchAppIconInfoProvider location]


SBIconDragPlatterWindow : SBSecureMainScreenActiveInterfaceOrientationWindow <SBIconDragPreviewContaining>
 @property  UIView *iconDragPreviewContainerView

  // instance methods
  -[SBIconDragPlatterWindow iconDragPreviewContainerView]


SBIconViewSnapshotProvider : NSObject <SBIconViewSnapshotProviding>
 @property  UIView *snapshotView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIconViewSnapshotProvider snapshotView]
  -[SBIconViewSnapshotProvider .cxx_destruct]
  -[SBIconViewSnapshotProvider invalidate]
  -[SBIconViewSnapshotProvider initWithSnapshotView:invalidation:]


SBIconsOccludedAssertion : NSObject <BSInvalidatable, BSDescriptionProviding>
 @property  SBIconController *iconController
 @property  NSString *reason
 @property  BOOL invalidated
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIconsOccludedAssertion isInvalidated]
  -[SBIconsOccludedAssertion .cxx_destruct]
  -[SBIconsOccludedAssertion succinctDescriptionBuilder]
  -[SBIconsOccludedAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBIconsOccludedAssertion setInvalidated:]
  -[SBIconsOccludedAssertion descriptionWithMultilinePrefix:]
  -[SBIconsOccludedAssertion succinctDescription]
  -[SBIconsOccludedAssertion reason]
  -[SBIconsOccludedAssertion dealloc]
  -[SBIconsOccludedAssertion invalidate]
  -[SBIconsOccludedAssertion iconController]
  -[SBIconsOccludedAssertion initWithIconController:reason:]


SBHardwareButtonGestureParameters : NSObject <BSDescriptionProviding, NSCopying, NSMutableCopying>
 @property  long long maximumPressCount
 @property  double longPressTimeInterval
 @property  double multiplePressTimeInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHardwareButtonGestureParameters succinctDescriptionBuilder]
  -[SBHardwareButtonGestureParameters descriptionBuilderWithMultilinePrefix:]
  -[SBHardwareButtonGestureParameters descriptionWithMultilinePrefix:]
  -[SBHardwareButtonGestureParameters succinctDescription]
  -[SBHardwareButtonGestureParameters multiplePressTimeInterval]
  -[SBHardwareButtonGestureParameters longPressTimeInterval]
  -[SBHardwareButtonGestureParameters maximumPressCount]
  -[SBHardwareButtonGestureParameters mutableCopyWithZone:]
  -[SBHardwareButtonGestureParameters copyWithZone:]


SBMutableHardwareButtonGestureParameters : SBHardwareButtonGestureParameters
 @property  long long maximumPressCount
 @property  double longPressTimeInterval
 @property  double multiplePressTimeInterval

  // instance methods
  -[SBMutableHardwareButtonGestureParameters setMaximumPressCount:]
  -[SBMutableHardwareButtonGestureParameters multiplePressTimeInterval]
  -[SBMutableHardwareButtonGestureParameters longPressTimeInterval]
  -[SBMutableHardwareButtonGestureParameters maximumPressCount]
  -[SBMutableHardwareButtonGestureParameters setLongPressTimeInterval:]
  -[SBMutableHardwareButtonGestureParameters setMultiplePressTimeInterval:]


SBFluidSwitcherGestureWorkspaceTransaction : SBSystemGestureWorkspaceTransaction <SBUIAnimationControllerObserver, SBSceneLayoutWorkspaceTransactionDelegate, SBWorkspaceApplicationSceneTransitionContextDelegate, SBViewMorphAnimatorObserver>
 @property  SBFluidSwitcherViewController *switcherViewController
 @property  <SBFluidSwitcherGestureWorkspaceTransactionDelegate> *delegate
 @property  UIApplicationSceneDeactivationAssertion *backgroundingScenesDeactivationAssertion
 @property  SBMainDisplayLayoutState *originalLayoutState
 @property  SBMainDisplayLayoutState *activeLayoutState
 @property  SBMainWorkspaceTransaction *finalRootTransaction
 @property  SBSceneLayoutWorkspaceTransaction *sceneLayoutTransaction
 @property  @? layoutCompletion
 @property  SBAutoPIPWorkspaceTransaction *autoPIPWorkspaceTransaction
 @property  NSTimer *activateScenesTimer
 @property  SBTransientOverlayViewController *switcherTransitioningTransientOverlayViewController
 @property  BOOL hasCompletedAtLeastOneGesture
 @property  NSUUID *gestureID
 @property  SBAppLayout *selectedAppLayout
 @property  SBUISwitcherAnimationController *animationController
 @property  BOOL shouldCancelGestureUponInterruption
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherGestureWorkspaceTransaction animationController]
  -[SBFluidSwitcherGestureWorkspaceTransaction _willInterruptWithReason:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _didComplete]
  -[SBFluidSwitcherGestureWorkspaceTransaction layoutStateForApplicationTransitionContext:]
  -[SBFluidSwitcherGestureWorkspaceTransaction applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBFluidSwitcherGestureWorkspaceTransaction transactionDidComplete:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _begin]
  -[SBFluidSwitcherGestureWorkspaceTransaction _canBeInterrupted]
  -[SBFluidSwitcherGestureWorkspaceTransaction _didInterruptWithReason:]
  -[SBFluidSwitcherGestureWorkspaceTransaction transaction:performTransitionWithCompletion:]
  -[SBFluidSwitcherGestureWorkspaceTransaction updateGestureWithTransitionRequest:]
  -[SBFluidSwitcherGestureWorkspaceTransaction .cxx_destruct]
  -[SBFluidSwitcherGestureWorkspaceTransaction setDelegate:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _gestureType]
  -[SBFluidSwitcherGestureWorkspaceTransaction createSceneEntityForHandle:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setSwitcherViewController:]
  -[SBFluidSwitcherGestureWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setAnimationController:]
  -[SBFluidSwitcherGestureWorkspaceTransaction completeGestureWithTransitionRequest:]
  -[SBFluidSwitcherGestureWorkspaceTransaction switcherViewController]
  -[SBFluidSwitcherGestureWorkspaceTransaction previousLayoutStateForApplicationTransitionContext:]
  -[SBFluidSwitcherGestureWorkspaceTransaction delegate]
  -[SBFluidSwitcherGestureWorkspaceTransaction dealloc]
  -[SBFluidSwitcherGestureWorkspaceTransaction transaction:didEndLayoutTransitionWithContinuation:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _createWorkspaceTransientOverlayForAppLayout:]
  -[SBFluidSwitcherGestureWorkspaceTransaction transactionWillBeginLayoutTransition:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setSelectedAppLayout:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _beginWithGesture:]
  -[SBFluidSwitcherGestureWorkspaceTransaction selectedAppLayout]
  -[SBFluidSwitcherGestureWorkspaceTransaction didEndAllAnimations]
  -[SBFluidSwitcherGestureWorkspaceTransaction gestureID]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updateWithGesture:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _finishWithGesture:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _finishWithCompletionType:]
  -[SBFluidSwitcherGestureWorkspaceTransaction systemGestureStateChanged:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _failRunningLayoutStateTransition]
  -[SBFluidSwitcherGestureWorkspaceTransaction finalRootTransaction]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updatePPTsForGestureTransactionBegan]
  -[SBFluidSwitcherGestureWorkspaceTransaction backgroundingScenesDeactivationAssertion]
  -[SBFluidSwitcherGestureWorkspaceTransaction _switcherGestureDidUpdate:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _willBeginWithGesture:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _transitionRequestForApplicationTransitionContext:eventLabel:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updateDigitizerSurfaceDimensions]
  -[SBFluidSwitcherGestureWorkspaceTransaction _currentGestureEventForGesture:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updatePPTsForGestureEnded]
  -[SBFluidSwitcherGestureWorkspaceTransaction _copiedTransitionRequestFromTransitionRequest:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updatePPTsForAnimationEndedWithFinalLayoutState:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setFinalRootTransaction:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _addChildWorkspaceTransaction:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _transitionRequestForSwitcherTransitionRequest:eventLabel:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _acquireBackgroundingScenesDeactivationAssertionForTransitionRequest:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _runSceneLayoutTransactionForTransitionRequest:updateScenes:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _addWaitForSceneLayoutTransitionTransaction:forLeafAnimationControllers:]
  -[SBFluidSwitcherGestureWorkspaceTransaction initWithTransitionRequest:fluidSwitcherViewController:delegate:]
  -[SBFluidSwitcherGestureWorkspaceTransaction shouldSuppressMedusaKeyboardDuringGesture]
  -[SBFluidSwitcherGestureWorkspaceTransaction shouldCancelGestureUponInterruption]
  -[SBFluidSwitcherGestureWorkspaceTransaction setShouldCancelGestureUponInterruption:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setBackgroundingScenesDeactivationAssertion:]
  -[SBFluidSwitcherGestureWorkspaceTransaction originalLayoutState]
  -[SBFluidSwitcherGestureWorkspaceTransaction setOriginalLayoutState:]
  -[SBFluidSwitcherGestureWorkspaceTransaction activeLayoutState]
  -[SBFluidSwitcherGestureWorkspaceTransaction setActiveLayoutState:]
  -[SBFluidSwitcherGestureWorkspaceTransaction sceneLayoutTransaction]
  -[SBFluidSwitcherGestureWorkspaceTransaction setSceneLayoutTransaction:]
  -[SBFluidSwitcherGestureWorkspaceTransaction layoutCompletion]
  -[SBFluidSwitcherGestureWorkspaceTransaction setLayoutCompletion:]
  -[SBFluidSwitcherGestureWorkspaceTransaction autoPIPWorkspaceTransaction]
  -[SBFluidSwitcherGestureWorkspaceTransaction setAutoPIPWorkspaceTransaction:]
  -[SBFluidSwitcherGestureWorkspaceTransaction activateScenesTimer]
  -[SBFluidSwitcherGestureWorkspaceTransaction setActivateScenesTimer:]
  -[SBFluidSwitcherGestureWorkspaceTransaction switcherTransitioningTransientOverlayViewController]
  -[SBFluidSwitcherGestureWorkspaceTransaction setSwitcherTransitioningTransientOverlayViewController:]
  -[SBFluidSwitcherGestureWorkspaceTransaction hasCompletedAtLeastOneGesture]


SBCornerPencilPanGestureSettings : PTSettings
 @property  double cornerHorizontalEdgeLength
 @property  double cornerVerticalEdgeLength

  // class methods
  +[SBCornerPencilPanGestureSettings settingsControllerModule]
  +[SBCornerPencilPanGestureSettings ignoresKey:]

  // instance methods
  -[SBCornerPencilPanGestureSettings setDefaultValues]
  -[SBCornerPencilPanGestureSettings setCornerHorizontalEdgeLength:]
  -[SBCornerPencilPanGestureSettings setCornerVerticalEdgeLength:]
  -[SBCornerPencilPanGestureSettings cornerHorizontalEdgeLength]
  -[SBCornerPencilPanGestureSettings cornerVerticalEdgeLength]


SBDismissSiriSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBDismissSiriSwitcherEventResponse type]


SBMainDisplayInterfaceOrientationAggregator : NSObject
 @property  long long activeInterfaceOrientation
 @property  NSArray *interfaceOrientationSources

  // instance methods
  -[SBMainDisplayInterfaceOrientationAggregator activeInterfaceOrientation]
  -[SBMainDisplayInterfaceOrientationAggregator _sortSources:]
  -[SBMainDisplayInterfaceOrientationAggregator highestActiveInterfaceOrientationSourceBelow:]
  -[SBMainDisplayInterfaceOrientationAggregator .cxx_destruct]
  -[SBMainDisplayInterfaceOrientationAggregator _layoutOrientation]
  -[SBMainDisplayInterfaceOrientationAggregator activeInterfaceOrientationAtOrBelow:]
  -[SBMainDisplayInterfaceOrientationAggregator interfaceOrientationSources]
  -[SBMainDisplayInterfaceOrientationAggregator succinctDescriptionBuilder]
  -[SBMainDisplayInterfaceOrientationAggregator _highestSourceAtOrBelow:amongSources:]
  -[SBMainDisplayInterfaceOrientationAggregator descriptionBuilderWithMultilinePrefix:]
  -[SBMainDisplayInterfaceOrientationAggregator init]
  -[SBMainDisplayInterfaceOrientationAggregator descriptionWithMultilinePrefix:]
  -[SBMainDisplayInterfaceOrientationAggregator succinctDescription]
  -[SBMainDisplayInterfaceOrientationAggregator highestActiveInterfaceOrientationSource]
  -[SBMainDisplayInterfaceOrientationAggregator dealloc]
  -[SBMainDisplayInterfaceOrientationAggregator activeInterfaceOrientationBelow:]
  -[SBMainDisplayInterfaceOrientationAggregator highestActiveInterfaceOrientationSourceIgnoringSourcesAbove:]


SBHomeGestureSwitcherModifier : SBGestureSwitcherModifier <SBHomeGestureDockSwitcherModifierDelegate, SBHomeGestureFinalDestinationSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureSwitcherModifier appLayoutsToResignActive]
  -[SBHomeGestureSwitcherModifier isContainerStatusBarVisible]
  -[SBHomeGestureSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBHomeGestureSwitcherModifier homeScreenDimmingAlpha]
  -[SBHomeGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeGestureSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBHomeGestureSwitcherModifier titleOpacityForIndex:]
  -[SBHomeGestureSwitcherModifier wallpaperScale]
  -[SBHomeGestureSwitcherModifier homeScreenScale]
  -[SBHomeGestureSwitcherModifier homeScreenAlpha]
  -[SBHomeGestureSwitcherModifier keyboardSuppressionMode]
  -[SBHomeGestureSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBHomeGestureSwitcherModifier lighteningAlphaForIndex:]
  -[SBHomeGestureSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBHomeGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeGestureSwitcherModifier headerStyleForIndex:]
  -[SBHomeGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeGestureSwitcherModifier scaleForIndex:]
  -[SBHomeGestureSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBHomeGestureSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBHomeGestureSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBHomeGestureSwitcherModifier handleTransitionEvent:]
  -[SBHomeGestureSwitcherModifier frameForIndex:]
  -[SBHomeGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeGestureSwitcherModifier _displayLinkFired:]
  -[SBHomeGestureSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureSwitcherModifier .cxx_destruct]
  -[SBHomeGestureSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBHomeGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeGestureSwitcherModifier _switcherCardScale]
  -[SBHomeGestureSwitcherModifier wallpaperStyle]
  -[SBHomeGestureSwitcherModifier cornerRadiiForIndex:]
  -[SBHomeGestureSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeGestureSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBHomeGestureSwitcherModifier didMoveToParentModifier:]
  -[SBHomeGestureSwitcherModifier handleRemovalEvent:]
  -[SBHomeGestureSwitcherModifier _applyPrototypeSettings]
  -[SBHomeGestureSwitcherModifier dealloc]
  -[SBHomeGestureSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBHomeGestureSwitcherModifier selectedAppLayout]
  -[SBHomeGestureSwitcherModifier handleGestureEvent:]
  -[SBHomeGestureSwitcherModifier isShowingOrAnimatingCardsForFlyIn]
  -[SBHomeGestureSwitcherModifier liftOffVelocityForGestureEnd]
  -[SBHomeGestureSwitcherModifier liftOffTranslationForGestureEnd]
  -[SBHomeGestureSwitcherModifier initWithGestureID:selectedAppLayout:startingEnvironmentMode:multitaskingModifier:scrunchInitiated:continuingGesture:lastGestureWasAnArcSwipe:]
  -[SBHomeGestureSwitcherModifier _newDockModifierRequiringVerticalSwipeToTrackDock:startingEnvironmentMode:]
  -[SBHomeGestureSwitcherModifier _distanceYToInSwitcherCardScale]
  -[SBHomeGestureSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBHomeGestureSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateGestureTranslationVelocityAndProgressWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateShouldResignActiveWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateStackedProgress]
  -[SBHomeGestureSwitcherModifier _responseForUpdatingLayoutForGestureBegan]
  -[SBHomeGestureSwitcherModifier _responseForUpdatingIconViewVisibility:]
  -[SBHomeGestureSwitcherModifier _responseForStudyLogDidBeginGesture]
  -[SBHomeGestureSwitcherModifier _responseForSBEventGestureBeganWithTimeDelta:]
  -[SBHomeGestureSwitcherModifier _unadjustedGestureTranslation]
  -[SBHomeGestureSwitcherModifier _isTranslationPastDistanceThresholdToUnconditionallyGoHome:]
  -[SBHomeGestureSwitcherModifier _updateInMultitaskingIfNeededWithLocation:]
  -[SBHomeGestureSwitcherModifier _scaleForAdjacentCards]
  -[SBHomeGestureSwitcherModifier _updateFrameOffsetForXRubberbandingForTranslation:]
  -[SBHomeGestureSwitcherModifier currentFinalDestination]
  -[SBHomeGestureSwitcherModifier _responseForActivatingFinalDestination:]
  -[SBHomeGestureSwitcherModifier _responseForActivatingReachabilityIfNeededWithFinalDestination:]
  -[SBHomeGestureSwitcherModifier _responseForStudyLogDidEndGestureWithEvent:finalDestination:destinationReason:]
  -[SBHomeGestureSwitcherModifier _responseForSBEventGestureEndWithEvent:finalDestination:]
  -[SBHomeGestureSwitcherModifier _updateTranslationAdjustmentForGestureFromHomeScreenIfNeededWithEvent:]
  -[SBHomeGestureSwitcherModifier _gestureProgressToMaxTranslationForTranslation:]
  -[SBHomeGestureSwitcherModifier _isSelectedAppLayoutAtIndex:]
  -[SBHomeGestureSwitcherModifier _frameOffsetForTranslation:]
  -[SBHomeGestureSwitcherModifier _shouldPositionAdjacentCardsOffscreenForFlyIn]
  -[SBHomeGestureSwitcherModifier _rubberbandedTranslationForAdjacentCards]
  -[SBHomeGestureSwitcherModifier _scaleForTranslation:]
  -[SBHomeGestureSwitcherModifier _selectedAppLayoutIndex]
  -[SBHomeGestureSwitcherModifier _coplanarSpacing]
  -[SBHomeGestureSwitcherModifier _layoutSettingsForAppLayout:layoutSettings:]
  -[SBHomeGestureSwitcherModifier _cornerRadiusSettings]
  -[SBHomeGestureSwitcherModifier _inSwitcherCenterYOffsetWhenPresented]
  -[SBHomeGestureSwitcherModifier _centerYOffsetDuringGesture]
  -[SBHomeGestureSwitcherModifier _scaleForOffscreenAdjacentCardsForFlyIn]
  -[SBHomeGestureSwitcherModifier unconditionalDistanceThresholdForHome]
  -[SBHomeGestureSwitcherModifier _shouldResignActiveBasedOnCardScale]
  -[SBHomeGestureSwitcherModifier _hasPausedEnoughForFlyIn]
  -[SBHomeGestureSwitcherModifier _inMultitaskingForLocation:translation:]
  -[SBHomeGestureSwitcherModifier _preventPositioningCardsOffscreenForFlatBottomEdgeSwipe]
  -[SBHomeGestureSwitcherModifier _beginAnimatingMultitaskingPropertyWithMode:settings:]
  -[SBHomeGestureSwitcherModifier _hasTraveledSufficientDistanceForHomeOrAppSwitcher]
  -[SBHomeGestureSwitcherModifier _distanceYToMaxTranslation]


SBScrollToTopSceneProxyView : UIView <_UIScrollToTopView>
 @property  SBSceneHandle *sceneHandle
 @property  <SBScrollToTopSceneProxyViewDelegate> *delegate

  // instance methods
  -[SBScrollToTopSceneProxyView setSceneHandle:]
  -[SBScrollToTopSceneProxyView isScrollEnabled]
  -[SBScrollToTopSceneProxyView sceneHandle]
  -[SBScrollToTopSceneProxyView willMoveToWindow:]
  -[SBScrollToTopSceneProxyView .cxx_destruct]
  -[SBScrollToTopSceneProxyView setDelegate:]
  -[SBScrollToTopSceneProxyView delegate]
  -[SBScrollToTopSceneProxyView didMoveToWindow]
  -[SBScrollToTopSceneProxyView _scrollToTopFromTouchAtScreenLocation:resultHandler:]


SBWidgetDebuggingTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWidgetDebuggingTestRecipe __systemService]

  // instance methods
  -[SBWidgetDebuggingTestRecipe title]
  -[SBWidgetDebuggingTestRecipe handleVolumeIncrease]
  -[SBWidgetDebuggingTestRecipe handleVolumeDecrease]
  -[SBWidgetDebuggingTestRecipe _openNotificationCenter]


SBKeyboardBrightnessController : NSObject <SBHIDValueModifyingButtonSetArbiterDelegate, SBBrightnessRouteControlling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  float brightnessLevel

  // class methods
  +[SBKeyboardBrightnessController handlesKeyCommands]

  // instance methods
  -[SBKeyboardBrightnessController initWithCoordinator:]
  -[SBKeyboardBrightnessController .cxx_destruct]
  -[SBKeyboardBrightnessController brightnessLevel]
  -[SBKeyboardBrightnessController _setBrightnessLevel:animated:]
  -[SBKeyboardBrightnessController _currentBrightness]
  -[SBKeyboardBrightnessController buttonSetArbiter:performActionForButtonPage:usage:]
  -[SBKeyboardBrightnessController buttonSetArbiterDidReset:]
  -[SBKeyboardBrightnessController brightnessRouteType]
  -[SBKeyboardBrightnessController handleBrightnessKeyPressEvent:]
  -[SBKeyboardBrightnessController cancelBrightnessKeyPressEvent]
  -[SBKeyboardBrightnessController setBrightnessLevel:animated:]
  -[SBKeyboardBrightnessController noteValueUpdatesWillBegin]
  -[SBKeyboardBrightnessController noteValueUpdatesDidEnd]


SBSwitcherWallpaperPageContentView : UIView <SBAppSwitcherPageContentView>
 @property  long long desiredWallpaperOrientation
 @property  long long wallpaperStyle
 @property  SBWallpaperEffectView *wallpaperEffectView
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  long long orientation
 @property  BOOL contentRequiresGroupOpacity
 @property  BOOL active
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherWallpaperPageContentView setOrientation:]
  -[SBSwitcherWallpaperPageContentView setWallpaperStyle:]
  -[SBSwitcherWallpaperPageContentView _updateCornerRadius]
  -[SBSwitcherWallpaperPageContentView setVisible:]
  -[SBSwitcherWallpaperPageContentView isActive]
  -[SBSwitcherWallpaperPageContentView .cxx_destruct]
  -[SBSwitcherWallpaperPageContentView _wallpaperFrame]
  -[SBSwitcherWallpaperPageContentView wallpaperEffectView]
  -[SBSwitcherWallpaperPageContentView layoutSubviews]
  -[SBSwitcherWallpaperPageContentView _viewForWallpaperWrapper]
  -[SBSwitcherWallpaperPageContentView contentRequiresGroupOpacity]
  -[SBSwitcherWallpaperPageContentView setDesiredWallpaperOrientation:]
  -[SBSwitcherWallpaperPageContentView wallpaperStyle]
  -[SBSwitcherWallpaperPageContentView _updateWallpaperOrientation]
  -[SBSwitcherWallpaperPageContentView isVisible]
  -[SBSwitcherWallpaperPageContentView setCornerRadius:]
  -[SBSwitcherWallpaperPageContentView desiredWallpaperOrientation]
  -[SBSwitcherWallpaperPageContentView setMaskedCorners:]
  -[SBSwitcherWallpaperPageContentView orientation]
  -[SBSwitcherWallpaperPageContentView initWithFrame:]
  -[SBSwitcherWallpaperPageContentView cornerRadius]
  -[SBSwitcherWallpaperPageContentView setActive:]
  -[SBSwitcherWallpaperPageContentView invalidate]
  -[SBSwitcherWallpaperPageContentView maskedCorners]


SBMorphToPIPChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBMorphToPIPChangedSwitcherModifierEvent type]


SBBarSwipeAffordanceView : UIView <UIGestureRecognizerDelegate, SBHomeGrabberDelegate, SBSystemGestureRecognizerDelegate, SBHomeGestureInteractionDelegate, SBHomeGesturePanGestureRecognizerInterfaceDelegate, SBFBarSwipeBehaviorDelegate>
 @property  SBHomeGrabberView *grabberView
 @property  long long feedbackType
 @property  <SBBarSwipeAffordanceDelegate> *delegate
 @property  <SBHomeGrabberPointerClickDelegate> *pointerClickDelegate
 @property  BOOL active
 @property  long long colorBias
 @property  BOOL homeAffordanceHidden
 @property  SBKeyboardHomeAffordanceAssertion *keyboardHomeAffordanceAssertion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBarSwipeAffordanceView touchInterfaceOrientationForGestureRecognizer:]
  -[SBBarSwipeAffordanceView _activate]
  -[SBBarSwipeAffordanceView didAddSubview:]
  -[SBBarSwipeAffordanceView homeGestureInteraction:systemGestureTypeForType:]
  -[SBBarSwipeAffordanceView isHomeAffordanceHidden]
  -[SBBarSwipeAffordanceView _runBlockOnObservers:]
  -[SBBarSwipeAffordanceView setHomeAffordanceHidden:]
  -[SBBarSwipeAffordanceView _updateHomeAffordanceVisibility]
  -[SBBarSwipeAffordanceView isActive]
  -[SBBarSwipeAffordanceView setColorBias:]
  -[SBBarSwipeAffordanceView shouldAllowAutoHideForHomeGrabberView:]
  -[SBBarSwipeAffordanceView .cxx_destruct]
  -[SBBarSwipeAffordanceView setKeyboardHomeAffordanceAssertion:]
  -[SBBarSwipeAffordanceView homeGestureInteractionEnded:]
  -[SBBarSwipeAffordanceView homeGestureInteractionBegan:]
  -[SBBarSwipeAffordanceView layoutSubviews]
  -[SBBarSwipeAffordanceView homeGestureInteractionCancelled:]
  -[SBBarSwipeAffordanceView setDelegate:]
  -[SBBarSwipeAffordanceView _deactivate]
  -[SBBarSwipeAffordanceView viewForSystemGestureRecognizer:]
  -[SBBarSwipeAffordanceView setFeedbackType:]
  -[SBBarSwipeAffordanceView pointerClickDelegate]
  -[SBBarSwipeAffordanceView keyboardHomeAffordanceAssertion]
  -[SBBarSwipeAffordanceView sizeThatFits:]
  -[SBBarSwipeAffordanceView customScreenEdgePanGestureRecognizerForHomeGestureInteraction:]
  -[SBBarSwipeAffordanceView homeGestureInteractionChanged:]
  -[SBBarSwipeAffordanceView addObserver:]
  -[SBBarSwipeAffordanceView setPointerClickDelegate:]
  -[SBBarSwipeAffordanceView shouldAllowThinStyleForHomeGrabberView:]
  -[SBBarSwipeAffordanceView initWithFrame:]
  -[SBBarSwipeAffordanceView _hideHomeAffordanceAnimationSettings]
  -[SBBarSwipeAffordanceView setActive:]
  -[SBBarSwipeAffordanceView delegate]
  -[SBBarSwipeAffordanceView _unhideHomeAffordanceAnimationSettings]
  -[SBBarSwipeAffordanceView _effectiveOrientationAccountingForTransforms]
  -[SBBarSwipeAffordanceView barSwipeBehaviorActionPerformed:]
  -[SBBarSwipeAffordanceView initWithFrame:systemGestureManager:enableGestures:]
  -[SBBarSwipeAffordanceView colorBias]
  -[SBBarSwipeAffordanceView removeObserver:]
  -[SBBarSwipeAffordanceView grabberView]
  -[SBBarSwipeAffordanceView barSwipeBehavior:didUpdateAdditionalEdgeSpacing:]
  -[SBBarSwipeAffordanceView feedbackType]
  -[SBBarSwipeAffordanceView additionalEdgeSpacingForHomeGrabberView:]


SBLegacyTVRemoteAppLaunchDeniedAlertItem : SBAlertItem
  // instance methods
  -[SBLegacyTVRemoteAppLaunchDeniedAlertItem dismissOnLock]
  -[SBLegacyTVRemoteAppLaunchDeniedAlertItem configure:requirePasscodeForActions:]
  -[SBLegacyTVRemoteAppLaunchDeniedAlertItem _supportURLString]
  -[SBLegacyTVRemoteAppLaunchDeniedAlertItem ignoreIfAlreadyDisplaying]


SBMixedGridToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBMixedGridToFullScreenSwitcherModifier transitionWillBegin]
  -[SBMixedGridToFullScreenSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[SBMixedGridToFullScreenSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBMixedGridToFullScreenSwitcherModifier transitionDidEnd]
  -[SBMixedGridToFullScreenSwitcherModifier scaleForIndex:]
  -[SBMixedGridToFullScreenSwitcherModifier frameForIndex:]
  -[SBMixedGridToFullScreenSwitcherModifier blurViewIconScaleForIndex:]
  -[SBMixedGridToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBMixedGridToFullScreenSwitcherModifier .cxx_destruct]
  -[SBMixedGridToFullScreenSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBMixedGridToFullScreenSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBMixedGridToFullScreenSwitcherModifier topMostLayoutElements]
  -[SBMixedGridToFullScreenSwitcherModifier initWithTransitionID:direction:fullScreenAppLayout:floatingAppLayout:floatingConfiguration:gridModifier:fullScreenModifier:]
  -[SBMixedGridToFullScreenSwitcherModifier _newMixedGridModifier]
  -[SBMixedGridToFullScreenSwitcherModifier _appLayoutToScrollTo]
  -[SBMixedGridToFullScreenSwitcherModifier _firstFloatingAppLayout:]
  -[SBMixedGridToFullScreenSwitcherModifier _performBlockWhileSimulatingPostPresentationScrollViewContentOffset:]
  -[SBMixedGridToFullScreenSwitcherModifier _isEffectivelyFullScreen]
  -[SBMixedGridToFullScreenSwitcherModifier _isIndexActive:]


SBIconModel : SBHIconModel
 @property  NSOrderedSet *cachedFlattenedForecastedDesiredIconState

  // class methods
  +[SBIconModel bookmarkIconClass]
  +[SBIconModel currentLocaleDidChangeNotificationName]
  +[SBIconModel bookmarkClass]
  +[SBIconModel migratedIdentifierForLeafIdentifier:]
  +[SBIconModel applicationIconClass]

  // instance methods
  -[SBIconModel applicationWithBundleIdentifier:]
  -[SBIconModel willLayout]
  -[SBIconModel forecastedLayoutForIconState:includeMissingIcons:]
  -[SBIconModel .cxx_destruct]
  -[SBIconModel exportFlattenedState:includeMissingIcons:]
  -[SBIconModel modernizeRootArchive:]
  -[SBIconModel exportState:]
  -[SBIconModel cachedFlattenedForecastedDesiredIconState]
  -[SBIconModel applicationIconForBundleIdentifier:]
  -[SBIconModel clearDesiredIconStateWithOptions:]
  -[SBIconModel bookmarkIconForWebClipIdentifier:]
  -[SBIconModel importState:]
  -[SBIconModel indexPathForIconInPlatformState:]
  -[SBIconModel shouldAvoidPlacingIconOnFirstPage:]
  -[SBIconModel loadAllIcons]
  -[SBIconModel addBookmarkIconForWebClip:]
  -[SBIconModel isIconVisible:]
  -[SBIconModel addApplication:]
  -[SBIconModel setCachedFlattenedForecastedDesiredIconState:]
  -[SBIconModel adjustIconsToShow:iconsToHide:afterChangeToVisibleIconTags:hiddenIconTags:]
  -[SBIconModel _replaceAppIconsWithDownloadingIcons:]
  -[SBIconModel shouldAvoidCreatingIconForApplication:]
  -[SBIconModel _replaceAppIconsWithDownloadingIcons]
  -[SBIconModel exportPendingState:includeMissingIcons:]


SBNetworkReselectionController : NSObject <STTelephonyStateObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBNetworkReselectionController sharedController]

  // instance methods
  -[SBNetworkReselectionController _test]
  -[SBNetworkReselectionController init]
  -[SBNetworkReselectionController _handleNetworkReselectionNeeded:forSlot:]
  -[SBNetworkReselectionController dealloc]
  -[SBNetworkReselectionController subscriptionInfoDidChangeForStateProvider:slot:]


SBDodgingModifierEvent : SBChainableModifierEvent
 @property  unsigned long type

  // instance methods
  -[SBDodgingModifierEvent type]


SBCombinationHardwareButton : NSObject <UIGestureRecognizerDelegate, SBHardwareButtonGestureParametersObserver, SBSOSLockGestureObserverDelegate, SBSOSClawGestureObserverDelegate, SBPressPrecedenceArbiter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCombinationHardwareButton sosClawAutoCallInteractiveStateChanged:interacting:]
  -[SBCombinationHardwareButton screenshotGesture:]
  -[SBCombinationHardwareButton gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBCombinationHardwareButton initWithScreenshotGestureRecognizer:shutdownGestureRecognizer:homeHardwareButton:lockHardwareButton:volumeHardwareButton:proximitySensorManager:backlightController:]
  -[SBCombinationHardwareButton gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBCombinationHardwareButton sosLockTriggerDidBecomeActive:]
  -[SBCombinationHardwareButton .cxx_destruct]
  -[SBCombinationHardwareButton provider:didUpdateButtonGestureParameters:]
  -[SBCombinationHardwareButton _sosTriggerMechanismDidChange]
  -[SBCombinationHardwareButton _setScreenshotDisabled:forReason:]
  -[SBCombinationHardwareButton preemptablePressGestureRecognizers]
  -[SBCombinationHardwareButton sosClawDidTriggerSOS:completion:]
  -[SBCombinationHardwareButton gestureRecognizerShouldBegin:]
  -[SBCombinationHardwareButton sosClawDidBecomeInactive:]
  -[SBCombinationHardwareButton _configureGestureRecognizers]
  -[SBCombinationHardwareButton sosLockTriggerDidBecomeInactive:]
  -[SBCombinationHardwareButton sosLockDidTriggerSOS:completion:]
  -[SBCombinationHardwareButton shutdownGesture:]
  -[SBCombinationHardwareButton sosClawDidBecomeActive:]
  -[SBCombinationHardwareButton _backlightChanged:]
  -[SBCombinationHardwareButton dealloc]
  -[SBCombinationHardwareButton sosGesture:]
  -[SBCombinationHardwareButton _configureSOSGestureBehaviors]


SBEntityRemovalMedusaDefaultAnimationSettings : PTSettings
 @property  double toBeRemovedFinalScale
 @property  double toBeRemovedFinalAlpha
 @property  double toBeRemovedFinalBlurRadius
 @property  double toBeMadeFullscreenFrameAnimationDelay
 @property  SBFFluidBehaviorSettings *toBeMadeFullscreenFrameAnimationSettings
 @property  SBFFluidBehaviorSettings *toBeRemovedScaleAnimationSettings
 @property  SBFFluidBehaviorSettings *toBeRemovedAlphaAnimationSettings

  // class methods
  +[SBEntityRemovalMedusaDefaultAnimationSettings settingsControllerModule]
  +[SBEntityRemovalMedusaDefaultAnimationSettings _settingsModule]

  // instance methods
  -[SBEntityRemovalMedusaDefaultAnimationSettings .cxx_destruct]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setDefaultValues]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeMadeFullscreenFrameAnimationDelay]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeMadeFullscreenFrameAnimationSettings]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedScaleAnimationSettings]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedAlphaAnimationSettings]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedFinalAlpha]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedFinalScale]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedFinalBlurRadius]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedFinalScale:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedFinalAlpha:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedFinalBlurRadius:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeMadeFullscreenFrameAnimationDelay:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedScaleAnimationSettings:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedAlphaAnimationSettings:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeMadeFullscreenFrameAnimationSettings:]


SBEntityRemovalMedusaSlideOutAnimationSettings : PTSettings
 @property  double toBeMadeFullScreenPushInScale
 @property  double toBeMadeFullScreenScaleResetAnimationDelay
 @property  double toBeRemovedSlideOutAnimationDelay
 @property  double toBeRemovedSlideOutHeightOffsetMultiplier
 @property  SBFFluidBehaviorSettings *toBeMadeFullscreenPushInScaleAnimationSettings
 @property  SBFFluidBehaviorSettings *toBeMadeFullscreenScaleResetAnimationSettings
 @property  SBFFluidBehaviorSettings *toBeRemovedSlideOutAnimationSettings
 @property  SBEntityRemovalMedusaDefaultAnimationSettings *defaultAnimationSettings

  // class methods
  +[SBEntityRemovalMedusaSlideOutAnimationSettings settingsControllerModule]

  // instance methods
  -[SBEntityRemovalMedusaSlideOutAnimationSettings .cxx_destruct]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setDefaultValues]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeRemovedSlideOutAnimationDelay]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeRemovedSlideOutAnimationSettings]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeRemovedSlideOutHeightOffsetMultiplier]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings defaultAnimationSettings]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeMadeFullScreenScaleResetAnimationDelay]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeMadeFullScreenPushInScale]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeMadeFullscreenPushInScaleAnimationSettings]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeMadeFullscreenScaleResetAnimationSettings]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeMadeFullScreenPushInScale:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeMadeFullScreenScaleResetAnimationDelay:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeMadeFullscreenPushInScaleAnimationSettings:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeMadeFullscreenScaleResetAnimationSettings:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeRemovedSlideOutAnimationSettings:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeRemovedSlideOutAnimationDelay:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeRemovedSlideOutHeightOffsetMultiplier:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setDefaultAnimationSettings:]


SBEntityRemovalMedusaSlideOutUpwardAnimationSettings : SBEntityRemovalMedusaSlideOutAnimationSettings

SBEntityRemovalMedusaSlideOutDownwardAnimationSettings : SBEntityRemovalMedusaSlideOutAnimationSettings
  // instance methods
  -[SBEntityRemovalMedusaSlideOutDownwardAnimationSettings setDefaultValues]


SBEntityRemovalFloatingDefaultAnimationSettings : SBEntityRemovalMedusaDefaultAnimationSettings
  // instance methods
  -[SBEntityRemovalFloatingDefaultAnimationSettings setDefaultValues]


SBEntityRemovalFloatingSlideOutAnimationSettings : SBEntityRemovalMedusaSlideOutAnimationSettings
  // instance methods
  -[SBEntityRemovalFloatingSlideOutAnimationSettings setDefaultValues]


SBEntityRemovalFloatingSlideOutUpwardAnimationSettings : SBEntityRemovalFloatingSlideOutAnimationSettings

SBEntityRemovalFloatingSlideOutDownwardAnimationSettings : SBEntityRemovalFloatingSlideOutAnimationSettings
  // instance methods
  -[SBEntityRemovalFloatingSlideOutDownwardAnimationSettings setDefaultValues]


SBEntityRemovalDosidoDefaultAnimationSettings : PTSettings
 @property  double fromViewFinalScale
 @property  double fromViewFinalAlpha
 @property  double fromViewFinalBlurRadius
 @property  double fromViewAlphaAnimationDelay
 @property  SBFFluidBehaviorSettings *fromViewScaleAnimationSettings
 @property  SBFFluidBehaviorSettings *fromViewAlphaAnimationSettings
 @property  double toViewInitialPushInScale
 @property  double toViewScreenInitialAlpha
 @property  double toViewInitialDimmingAlpha
 @property  double toViewInitialBlurProgress
 @property  double toViewScaleAndAlphaResetAnimationDelay
 @property  double toViewDimmingViewFadeOutDelay
 @property  SBFFluidBehaviorSettings *toViewScaleAndAlphaResetAnimationSettings
 @property  SBFFluidBehaviorSettings *toViewWallpaperScaleAnimationSettings
 @property  SBFFluidBehaviorSettings *toViewDimmingViewAlphaAnimationSettings

  // class methods
  +[SBEntityRemovalDosidoDefaultAnimationSettings settingsControllerModule]
  +[SBEntityRemovalDosidoDefaultAnimationSettings _settingsModule]

  // instance methods
  -[SBEntityRemovalDosidoDefaultAnimationSettings .cxx_destruct]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setDefaultValues]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewScaleAndAlphaResetAnimationDelay]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewFinalScale]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewScaleAnimationSettings]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewAlphaAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewAlphaAnimationDelay:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewFinalScale:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewFinalAlpha:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewFinalBlurRadius:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewInitialPushInScale:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewScreenInitialAlpha:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewInitialDimmingAlpha:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewInitialBlurProgress:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewScaleAndAlphaResetAnimationDelay:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewDimmingViewFadeOutDelay:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewScaleAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewScaleAndAlphaResetAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewScaleAndAlphaResetAnimationSettings]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewWallpaperScaleAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewDimmingViewAlphaAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewFinalAlpha]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewFinalBlurRadius]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewAlphaAnimationDelay]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewAlphaAnimationSettings]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewInitialPushInScale]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewScreenInitialAlpha]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewInitialDimmingAlpha]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewInitialBlurProgress]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewDimmingViewFadeOutDelay]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewWallpaperScaleAnimationSettings]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewDimmingViewAlphaAnimationSettings]


SBEntityRemovalDosidoSlideOutAnimationSettings : PTSettings
 @property  double fromViewSlideOutAnimationDelay
 @property  double fromViewSlideOutHeightOffsetMultiplier
 @property  SBFFluidBehaviorSettings *fromViewSlideOutAnimationSettings
 @property  SBEntityRemovalDosidoDefaultAnimationSettings *defaultAnimationSettings

  // class methods
  +[SBEntityRemovalDosidoSlideOutAnimationSettings settingsControllerModule]

  // instance methods
  -[SBEntityRemovalDosidoSlideOutAnimationSettings .cxx_destruct]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setDefaultValues]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings fromViewSlideOutAnimationDelay]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings defaultAnimationSettings]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings fromViewSlideOutHeightOffsetMultiplier]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings fromViewSlideOutAnimationSettings]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setDefaultAnimationSettings:]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setFromViewSlideOutHeightOffsetMultiplier:]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setFromViewSlideOutAnimationDelay:]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setFromViewSlideOutAnimationSettings:]


SBEntityRemovalDosidoSlideOutUpwardAnimationSettings : SBEntityRemovalDosidoSlideOutAnimationSettings

SBEntityRemovalDosidoSlideOutDownwardAnimationSettings : SBEntityRemovalDosidoSlideOutAnimationSettings
  // instance methods
  -[SBEntityRemovalDosidoSlideOutDownwardAnimationSettings setDefaultValues]


SBEntityRemovalAnimationSettings : PTSettings
 @property  SBEntityRemovalMedusaDefaultAnimationSettings *medusaDeleteIntentAnimationSettings
 @property  SBEntityRemovalMedusaSlideOutUpwardAnimationSettings *medusaCommitIntentAnimationSettings
 @property  SBEntityRemovalMedusaSlideOutDownwardAnimationSettings *medusaDeclineIntentAnimationSettings
 @property  SBEntityRemovalFloatingDefaultAnimationSettings *floatingDeleteIntentAnimationSettings
 @property  SBEntityRemovalFloatingSlideOutUpwardAnimationSettings *floatingCommitIntentAnimationSettings
 @property  SBEntityRemovalFloatingSlideOutDownwardAnimationSettings *floatingDeclineIntentAnimationSettings
 @property  SBEntityRemovalDosidoDefaultAnimationSettings *dosidoDeleteIntentAnimationSettings
 @property  SBEntityRemovalDosidoSlideOutUpwardAnimationSettings *dosidoCommitIntentAnimationSettings
 @property  SBEntityRemovalDosidoSlideOutDownwardAnimationSettings *dosidoDeclineIntentAnimationSettings

  // class methods
  +[SBEntityRemovalAnimationSettings settingsControllerModule]

  // instance methods
  -[SBEntityRemovalAnimationSettings .cxx_destruct]
  -[SBEntityRemovalAnimationSettings medusaCommitIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings medusaDeleteIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings floatingDeclineIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings medusaDeclineIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setMedusaDeleteIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings setMedusaCommitIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings setMedusaDeclineIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings floatingDeleteIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setFloatingDeleteIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings floatingCommitIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setFloatingCommitIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings setFloatingDeclineIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings dosidoDeleteIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setDosidoDeleteIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings dosidoCommitIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setDosidoCommitIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings dosidoDeclineIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setDosidoDeclineIntentAnimationSettings:]


SBAppStatusBarContentAssertion : BSSimpleAssertion
 @property  BOOL statusBarPartLeadingHidden
 @property  BOOL statusBarPartTrailingHidden

  // instance methods
  -[SBAppStatusBarContentAssertion initWithIdentifier:statusBar:forReason:]
  -[SBAppStatusBarContentAssertion isStatusBarPartLeadingHidden]
  -[SBAppStatusBarContentAssertion .cxx_destruct]
  -[SBAppStatusBarContentAssertion setStatusBarPartTrailingHidden:animated:]
  -[SBAppStatusBarContentAssertion setStatusBarPartLeadingHidden:animated:]
  -[SBAppStatusBarContentAssertion isStatusBarPartTrailingHidden]
  -[SBAppStatusBarContentAssertion _setStatusBarPartIdentifier:hidden:animated:]


SBInCallBannerPresentableViewController : UIViewController <SBDeviceApplicationSceneHandleObserver, SBBannerManagerPresentable, SBButtonEventsHandler, BSInvalidatable>
 @property  <SBInCallBannerPresentableViewControllerDelegate> *delegate
 @property  {CGSize=dd} preferredBannerContentSize
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  BOOL callConnected
 @property  BOOL presented
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIViewController *viewController
 @property  long long presentableType
 @property  <BNPresentableContext> *presentableContext
 @property  BOOL draggingDismissalEnabled
 @property  BOOL draggingInteractionEnabled
 @property  BOOL touchOutsideDismissalEnabled
 @property  NSString *requesterIdentifier
 @property  NSString *requestIdentifier

  // class methods
  +[SBInCallBannerPresentableViewController requesterIdentifier]
  +[SBInCallBannerPresentableViewController cornerRadius]

  // instance methods
  -[SBInCallBannerPresentableViewController requestIdentifier]
  -[SBInCallBannerPresentableViewController initWithSceneHandle:]
  -[SBInCallBannerPresentableViewController viewController]
  -[SBInCallBannerPresentableViewController handleVolumeUpButtonPress]
  -[SBInCallBannerPresentableViewController handleHomeButtonDoublePress]
  -[SBInCallBannerPresentableViewController sceneHandle]
  -[SBInCallBannerPresentableViewController handleHomeButtonPress]
  -[SBInCallBannerPresentableViewController handleLockButtonPress]
  -[SBInCallBannerPresentableViewController handleVolumeDownButtonPress]
  -[SBInCallBannerPresentableViewController handleHeadsetButtonPress:]
  -[SBInCallBannerPresentableViewController isPresented]
  -[SBInCallBannerPresentableViewController handleHomeButtonLongPress]
  -[SBInCallBannerPresentableViewController handleVoiceCommandButtonPress]
  -[SBInCallBannerPresentableViewController .cxx_destruct]
  -[SBInCallBannerPresentableViewController viewDidLoad]
  -[SBInCallBannerPresentableViewController presentableWillAppearAsBanner:]
  -[SBInCallBannerPresentableViewController setDelegate:]
  -[SBInCallBannerPresentableViewController userInteractionDidEndForBannerForPresentable:]
  -[SBInCallBannerPresentableViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBInCallBannerPresentableViewController userInteractionWillBeginForBannerForPresentable:]
  -[SBInCallBannerPresentableViewController viewDidLayoutSubviews]
  -[SBInCallBannerPresentableViewController requesterIdentifier]
  -[SBInCallBannerPresentableViewController delegate]
  -[SBInCallBannerPresentableViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBInCallBannerPresentableViewController presentableDidDisappearAsBanner:withReason:]
  -[SBInCallBannerPresentableViewController dealloc]
  -[SBInCallBannerPresentableViewController invalidate]
  -[SBInCallBannerPresentableViewController presentableWillDisappearAsBanner:withReason:]
  -[SBInCallBannerPresentableViewController presentableDidAppearAsBanner:]
  -[SBInCallBannerPresentableViewController _canShowWhileLocked]
  -[SBInCallBannerPresentableViewController isCallConnected]
  -[SBInCallBannerPresentableViewController draggingDidBeginWithGestureProxy:]
  -[SBInCallBannerPresentableViewController isDraggingDismissalEnabled]
  -[SBInCallBannerPresentableViewController isDraggingInteractionEnabled]
  -[SBInCallBannerPresentableViewController isTouchOutsideDismissalEnabled]
  -[SBInCallBannerPresentableViewController preferredContentSizeWithPresentationSize:containerSize:]
  -[SBInCallBannerPresentableViewController visualTranslationInCoordinateSpace:]
  -[SBInCallBannerPresentableViewController velocityInCoordinateSpace:]
  -[SBInCallBannerPresentableViewController _inCallSceneClientSettingsDiffInspector]
  -[SBInCallBannerPresentableViewController _handleTapAction:]
  -[SBInCallBannerPresentableViewController preferredBannerContentSize]
  -[SBInCallBannerPresentableViewController _handlePanGestureProxyAction:]
  -[SBInCallBannerPresentableViewController _callConnectedStatusChanged]
  -[SBInCallBannerPresentableViewController translationInCoordinateSpace:]
  -[SBInCallBannerPresentableViewController shouldDismissForReason:]
  -[SBInCallBannerPresentableViewController setPreferredBannerContentSize:]


SBBluetoothController : NSObject
  // class methods
  +[SBBluetoothController sharedInstance]

  // instance methods
  -[SBBluetoothController batteryLevel]
  -[SBBluetoothController iapDeviceChanged:]
  -[SBBluetoothController addDeviceNotification:]
  -[SBBluetoothController firstBTDeviceToReportBatteryLevel]
  -[SBBluetoothController removeDeviceNotification:]
  -[SBBluetoothController updateTetheringConnected]
  -[SBBluetoothController .cxx_destruct]
  -[SBBluetoothController connectionChanged:]
  -[SBBluetoothController canReportBatteryLevel]
  -[SBBluetoothController startWatchingForDevices]
  -[SBBluetoothController bluetoothDeviceInitiatedVoiceControl:]
  -[SBBluetoothController updateBattery]
  -[SBBluetoothController stopWatchingForDevices]
  -[SBBluetoothController bluetoothDeviceEndedVoiceControl:]
  -[SBBluetoothController batteryChanged:]
  -[SBBluetoothController noteDevicesChanged]
  -[SBBluetoothController dealloc]
  -[SBBluetoothController tetheringConnected]
  -[SBBluetoothController deviceForAudioRoute:]


SBSplashBoardLaunchRequestProvider : NSObject <XBApplicationLaunchRequestProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSplashBoardLaunchRequestProvider .cxx_destruct]
  -[SBSplashBoardLaunchRequestProvider launchRequestsForApplication:withCompatibilityInfo:defaultLaunchRequests:]
  -[SBSplashBoardLaunchRequestProvider initWithApplicationController:displayConfiguration:]


SBSceneWatchdogProvider : NSObject <FBProcessWatchdogProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSceneWatchdogProvider defaultSceneWatchdogProvider]
  +[SBSceneWatchdogProvider disabledSceneWatchdogProvider]

  // instance methods
  -[SBSceneWatchdogProvider .cxx_destruct]
  -[SBSceneWatchdogProvider _scaleProvisions:byFactor:]
  -[SBSceneWatchdogProvider initAsDisabled:]
  -[SBSceneWatchdogProvider watchdogPolicyForProcess:eventContext:]


SBApplicationServer : FBSServiceFacility
 @property  <SBApplicationServerMiscDelegate> *miscDelegate
 @property  <SBApplicationServerHarmonyDelegate> *harmonyDelegate
 @property  <SBApplicationServerShortcutDelegate> *shortcutDelegate
 @property  <SBApplicationServerMultiwindowDelegate> *multiwindowDelegate
 @property  <SBApplicationServerMedusaShortcutDelegate> *medusaShortcutDelegate

  // class methods
  +[SBApplicationServer sharedInstance]

  // instance methods
  -[SBApplicationServer shortcutDelegate]
  -[SBApplicationServer setShortcutDelegate:]
  -[SBApplicationServer .cxx_destruct]
  -[SBApplicationServer multiwindowDelegate]
  -[SBApplicationServer setMiscDelegate:]
  -[SBApplicationServer harmonyDelegate]
  -[SBApplicationServer noteDidReceiveMessage:withType:fromClient:]
  -[SBApplicationServer setHarmonyDelegate:]
  -[SBApplicationServer setMedusaShortcutDelegate:]
  -[SBApplicationServer dealloc]
  -[SBApplicationServer miscDelegate]
  -[SBApplicationServer setMultiwindowDelegate:]
  -[SBApplicationServer medusaShortcutDelegate]


_SBPowerAssertionContext : NSObject
 @property  NSString *processName
 @property  @? collectionBlock

  // instance methods
  -[_SBPowerAssertionContext .cxx_destruct]
  -[_SBPowerAssertionContext processName]
  -[_SBPowerAssertionContext setProcessName:]
  -[_SBPowerAssertionContext collectionBlock]
  -[_SBPowerAssertionContext setCollectionBlock:]


_SBBatteryLogContext : NSObject
 @property  NSArray *foregroundApplications
 @property  int capacity
 @property  int voltage
 @property  double usageTimeInSeconds
 @property  double standbyTimeInSeconds
 @property  BOOL hasChargedPartially

  // instance methods
  -[_SBBatteryLogContext setCapacity:]
  -[_SBBatteryLogContext capacity]
  -[_SBBatteryLogContext .cxx_destruct]
  -[_SBBatteryLogContext voltage]
  -[_SBBatteryLogContext hasChargedPartially]
  -[_SBBatteryLogContext setHasChargedPartially:]
  -[_SBBatteryLogContext foregroundApplications]
  -[_SBBatteryLogContext setForegroundApplications:]
  -[_SBBatteryLogContext setVoltage:]
  -[_SBBatteryLogContext usageTimeInSeconds]
  -[_SBBatteryLogContext setUsageTimeInSeconds:]
  -[_SBBatteryLogContext standbyTimeInSeconds]
  -[_SBBatteryLogContext setStandbyTimeInSeconds:]


SBBatteryLogger : NSObject
  // class methods
  +[SBBatteryLogger saveLowBatteryLogWithCapacity:voltage:completion:]


SBFullScreenSwitcherLiveContentOverlayCoordinator : NSObject <SBFullScreenSwitcherSceneLiveContentOverlayDelegate, SBSwitcherLiveContentOverlayCoordinating>
 @property  SBMainDisplaySceneManager *sceneManager
 @property  NSString *keyboardFocusSceneID
 @property  NSString *keyboardFocusBundleID
 @property  NSMutableDictionary *appLayoutToLiveContentOverlayContext
 @property  NSMutableArray *visibleAlwaysLiveAppLayouts
 @property  BOOL liveContentOverlayUpdatesSuspended
 @property  long long containerOrientation
 @property  <SBSwitcherLiveContentOverlayCoordinatorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator didRotateFromInterfaceOrientation:toInterfaceOrientation:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator containerOrientation]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator willRotateFromInterfaceOrientation:toInterfaceOrientation:alongsideContainerView:animated:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator sceneManager]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setContainerOrientation:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setSceneManager:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _removeOverlayForAppLayout:animated:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _newLiveContentOverlayForApplicationContext:layoutRole:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _configureLiveContentOverlayView:forTransitionContext:layoutRole:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _updateAlwaysLiveSceneContentOverlays]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator .cxx_destruct]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator initWithSceneManager:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator liveAppLayoutsMatchingKeyboardFocusedApp:foundAtIndex:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator areLiveContentOverlayUpdatesSuspended]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _layoutStateContainsElementBlockedForScreenTimeExpiration:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setDelegate:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator keyboardFocusSceneID]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setVisibleAlwaysLiveAppLayouts:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setAppLayoutToLiveContentOverlayContext:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator itemContainerForAppLayout:willBeReusedForAppLayout:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator wantsHomeAffordanceAutoHideForAppLayout:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator keyboardFocusBundleID]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator performSwitcherKeyboardShortcutAction:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator appLayoutWillBecomeVisible:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _addOverlay:forAppLayout:animated:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _canTransitionToOverlayType:forAppLayout:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator appLayoutForKeyboardFocusedScene]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator wantsEdgeProtectForHomeGestureForAppLayout:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator noteKeyboardFocusDidChangeToSceneID:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _shouldAnimateAddingLiveContentOverlayForTransitionContext:leafAppLayout:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator delegate]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setKeyboardFocusBundleID:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _updateFullScreenDisplayLayoutElementsForActiveAppLayouts:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator fullScreenSwitcherSceneLiveContentOverlay:tappedStatusBar:tapActionType:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setLiveContentOverlayUpdatesSuspended:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator visibleAlwaysLiveAppLayouts]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setKeyboardFocusSceneID:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator appLayoutToLiveContentOverlayContext]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _existingOverlayTypeForAppLayout:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator appLayoutDidBecomeHidden:]


SBFullScreenSwitcherSceneLiveContentOverlay : NSObject <SBFullScreenSwitcherSceneLiveContentOverlay, SBDeviceApplicationSceneHandleObserver, SBMedusaDecoratedDeviceApplicationSceneViewControllerDelegate, SBDeviceApplicationSceneViewControllerDelegate>
 @property  SBOrientationTransformWrapperView *orientationWrapperView
 @property  UIViewController<SBDeviceApplicationSceneViewControlling> *deviceApplicationSceneViewController
 @property  SBSceneViewStatusBarAssertion *statusBarAssertion
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  BOOL wantsMinificationFilter
 @property  BOOL asyncRenderingDisabled
 @property  BOOL asynchronousRenderingTemporarilyDisabled
 @property  BOOL blurred
 @property  BOOL matchMovedToScene
 @property  long long containerOrientation
 @property  <SBFullScreenSwitcherSceneLiveContentOverlayDelegate> *statusBarActionDelegate
 @property  <SBSwitcherLiveContentOverlayDelegate> *delegate
 @property  UIView *contentOverlayView
 @property  BOOL insetForHomeAffordance
 @property  BOOL asyncRenderingEnabled
 @property  BOOL requiresLegacyRotationSupport
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFullScreenSwitcherSceneLiveContentOverlay sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay isInsetForHomeAffordance]
  -[SBFullScreenSwitcherSceneLiveContentOverlay leadingStatusBarStyle]
  -[SBFullScreenSwitcherSceneLiveContentOverlay trailingStatusBarStyle]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setInsetForHomeAffordance:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay didRotateFromInterfaceOrientation:toInterfaceOrientation:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay containerOrientation]
  -[SBFullScreenSwitcherSceneLiveContentOverlay willRotateFromInterfaceOrientation:toInterfaceOrientation:alongsideContainerView:animated:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay currentStatusBarHeight]
  -[SBFullScreenSwitcherSceneLiveContentOverlay bestHomeAffordanceOrientationForOrientation:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setContentReferenceSize:interfaceOrientation:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setContainerOrientation:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay sceneHandle:didCreateScene:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay _updateOrientationWrapper]
  -[SBFullScreenSwitcherSceneLiveContentOverlay asynchronousRenderingTemporarilyDisabled]
  -[SBFullScreenSwitcherSceneLiveContentOverlay displayLayoutElement]
  -[SBFullScreenSwitcherSceneLiveContentOverlay handleVolumeUpButtonPress]
  -[SBFullScreenSwitcherSceneLiveContentOverlay medusaDecoratedDeviceApplicationSceneViewControllerDidUpdateHomeAffordanceSupportedOrientations:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay orientationWrapperView]
  -[SBFullScreenSwitcherSceneLiveContentOverlay handleHomeButtonDoublePress]
  -[SBFullScreenSwitcherSceneLiveContentOverlay _updateTopAffordanceAutoHide]
  -[SBFullScreenSwitcherSceneLiveContentOverlay handleHomeButtonPress]
  -[SBFullScreenSwitcherSceneLiveContentOverlay handleLockButtonPress]
  -[SBFullScreenSwitcherSceneLiveContentOverlay statusBarActionDelegate]
  -[SBFullScreenSwitcherSceneLiveContentOverlay handleVolumeDownButtonPress]
  -[SBFullScreenSwitcherSceneLiveContentOverlay handleHeadsetButtonPress:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay handleHomeButtonLongPress]
  -[SBFullScreenSwitcherSceneLiveContentOverlay .cxx_destruct]
  -[SBFullScreenSwitcherSceneLiveContentOverlay requiresLegacyRotationSupport]
  -[SBFullScreenSwitcherSceneLiveContentOverlay statusBarAssertion]
  -[SBFullScreenSwitcherSceneLiveContentOverlay isAsyncRenderingEnabled]
  -[SBFullScreenSwitcherSceneLiveContentOverlay applicationSceneViewControllerDidUpdateHomeAffordanceSupportedOrientations:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay isBlurred]
  -[SBFullScreenSwitcherSceneLiveContentOverlay configureWithWorkspaceEntity:referenceFrame:interfaceOrientation:layoutRole:spaceConfiguration:floatingConfiguration:hasClassicAppOrientationMismatch:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay preferredInterfaceOrientation]
  -[SBFullScreenSwitcherSceneLiveContentOverlay applicationSceneViewController:statusBarTapped:tapActionType:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setDelegate:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay deviceApplicationSceneViewController]
  -[SBFullScreenSwitcherSceneLiveContentOverlay overlayType]
  -[SBFullScreenSwitcherSceneLiveContentOverlay _isPhoneAppRunningOnPad]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setUsesBrightSceneViewBackgroundMaterial:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay init]
  -[SBFullScreenSwitcherSceneLiveContentOverlay newPortaledLiveContentOverlayView]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setAsyncRenderingDisabled:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay asyncRenderingDisabled]
  -[SBFullScreenSwitcherSceneLiveContentOverlay contentOverlayView]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setBlurViewIconScale:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay isContentUpdating]
  -[SBFullScreenSwitcherSceneLiveContentOverlay sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay wantsMinificationFilter]
  -[SBFullScreenSwitcherSceneLiveContentOverlay contentViewController]
  -[SBFullScreenSwitcherSceneLiveContentOverlay _updateAsyncRendering]
  -[SBFullScreenSwitcherSceneLiveContentOverlay _medusaDecoratedDeviceApplicationSceneViewController]
  -[SBFullScreenSwitcherSceneLiveContentOverlay medusaDecoratedDeviceApplicationSceneViewController:statusBarTapped:tapActionType:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay isMatchMovedToScene]
  -[SBFullScreenSwitcherSceneLiveContentOverlay noteKeyboardFocusDidChangeToSceneID:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setStatusBarHidden:nubViewHidden:animator:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay delegate]
  -[SBFullScreenSwitcherSceneLiveContentOverlay _debugPostModernRotationSupportedInterfaceOrientations]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setAsyncRenderingEnabled:withMinificationFilterEnabled:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setMatchMovedToScene:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setStatusBarActionDelegate:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay dealloc]
  -[SBFullScreenSwitcherSceneLiveContentOverlay invalidate]
  -[SBFullScreenSwitcherSceneLiveContentOverlay disableAsynchronousRenderingForNextCommit]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setLiveContentBlurEnabled:duration:blurDelay:iconViewScale:began:completion:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay hitTestedToTopAffordance:window:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay setDimmed:]
  -[SBFullScreenSwitcherSceneLiveContentOverlay supportedInterfaceOrientations]
  -[SBFullScreenSwitcherSceneLiveContentOverlay _settingsDidUpdateEdgeProtectOrAutoHideOnHomeGrabberView]
  -[SBFullScreenSwitcherSceneLiveContentOverlay _sceneHandleForHardwareButtonEvents]


SBFullScreenAlwaysLiveLiveContentOverlay : NSObject <BSInvalidatable, SBDeviceApplicationSceneHandleObserver, SBSceneViewPresentationConfiguring, SBFullScreenSwitcherSceneLiveContentOverlay>
 @property  long long containerOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBSwitcherLiveContentOverlayDelegate> *delegate
 @property  UIView *contentOverlayView
 @property  BOOL insetForHomeAffordance
 @property  BOOL asyncRenderingEnabled
 @property  BOOL requiresLegacyRotationSupport

  // instance methods
  -[SBFullScreenAlwaysLiveLiveContentOverlay sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay isInsetForHomeAffordance]
  -[SBFullScreenAlwaysLiveLiveContentOverlay leadingStatusBarStyle]
  -[SBFullScreenAlwaysLiveLiveContentOverlay trailingStatusBarStyle]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setInsetForHomeAffordance:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay containerOrientation]
  -[SBFullScreenAlwaysLiveLiveContentOverlay currentStatusBarHeight]
  -[SBFullScreenAlwaysLiveLiveContentOverlay sceneViewPresentationIdentifier:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setContainerOrientation:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay .cxx_destruct]
  -[SBFullScreenAlwaysLiveLiveContentOverlay requiresLegacyRotationSupport]
  -[SBFullScreenAlwaysLiveLiveContentOverlay isAsyncRenderingEnabled]
  -[SBFullScreenAlwaysLiveLiveContentOverlay sceneViewPresentationPriority:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay configureWithWorkspaceEntity:referenceFrame:interfaceOrientation:layoutRole:spaceConfiguration:floatingConfiguration:hasClassicAppOrientationMismatch:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay preferredInterfaceOrientation]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setDelegate:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay overlayType]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setUsesBrightSceneViewBackgroundMaterial:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay contentOverlayView]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setBlurViewIconScale:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay isContentUpdating]
  -[SBFullScreenAlwaysLiveLiveContentOverlay contentViewController]
  -[SBFullScreenAlwaysLiveLiveContentOverlay noteKeyboardFocusDidChangeToSceneID:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setStatusBarHidden:nubViewHidden:animator:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay delegate]
  -[SBFullScreenAlwaysLiveLiveContentOverlay _debugPostModernRotationSupportedInterfaceOrientations]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setAsyncRenderingEnabled:withMinificationFilterEnabled:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setMatchMovedToScene:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay invalidate]
  -[SBFullScreenAlwaysLiveLiveContentOverlay disableAsynchronousRenderingForNextCommit]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setLiveContentBlurEnabled:duration:blurDelay:iconViewScale:began:completion:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay setDimmed:]
  -[SBFullScreenAlwaysLiveLiveContentOverlay supportedInterfaceOrientations]
  -[SBFullScreenAlwaysLiveLiveContentOverlay initWithSceneHandle:referenceSize:containerOrientation:]


SBFullScreenLiveContentOverlayContext : NSObject
 @property  long long overlayType
 @property  <SBFullScreenSwitcherSceneLiveContentOverlay> *overlay

  // instance methods
  -[SBFullScreenLiveContentOverlayContext overlay]
  -[SBFullScreenLiveContentOverlayContext .cxx_destruct]
  -[SBFullScreenLiveContentOverlayContext initWithOverlay:]
  -[SBFullScreenLiveContentOverlayContext overlayType]


SBSwitcherDemoFilteringController : NSObject
 @property  NSArray *hiddenApplicationBundleIDs

  // instance methods
  -[SBSwitcherDemoFilteringController .cxx_destruct]
  -[SBSwitcherDemoFilteringController addObserver:]
  -[SBSwitcherDemoFilteringController removeObserver:]
  -[SBSwitcherDemoFilteringController setHiddenApplicationBundleIDs:]
  -[SBSwitcherDemoFilteringController hiddenApplicationBundleIDs]


SBGestureRootSwitcherModifier : SBSwitcherModifier
 @property  SBAppLayout *selectedAppLayout
 @property  long long currentEnvironmentMode
 @property  SBSwitcherModifier *transitionModifier
 @property  BOOL canTransitionWithoutGestureModifier

  // instance methods
  -[SBGestureRootSwitcherModifier handleTransitionEvent:]
  -[SBGestureRootSwitcherModifier .cxx_destruct]
  -[SBGestureRootSwitcherModifier handleEvent:]
  -[SBGestureRootSwitcherModifier gestureType]
  -[SBGestureRootSwitcherModifier handleRemovalEvent:]
  -[SBGestureRootSwitcherModifier selectedAppLayout]
  -[SBGestureRootSwitcherModifier completesWhenChildrenComplete]
  -[SBGestureRootSwitcherModifier handleGestureEvent:]
  -[SBGestureRootSwitcherModifier initWithStartingEnvironmentMode:]
  -[SBGestureRootSwitcherModifier currentEnvironmentMode]
  -[SBGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBGestureRootSwitcherModifier canTransitionWithoutGestureModifier]
  -[SBGestureRootSwitcherModifier _gestureModifier]
  -[SBGestureRootSwitcherModifier transitionModifier]


SBPreemptAnimationSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  unsigned long options

  // instance methods
  -[SBPreemptAnimationSwitcherEventResponse options]
  -[SBPreemptAnimationSwitcherEventResponse initWithOptions:]
  -[SBPreemptAnimationSwitcherEventResponse type]


SBCameraHardwareButtonDomain : PTDomain
  // class methods
  +[SBCameraHardwareButtonDomain domainGroupName]
  +[SBCameraHardwareButtonDomain rootSettings]
  +[SBCameraHardwareButtonDomain domainName]
  +[SBCameraHardwareButtonDomain rootSettingsClass]


SBWindowDragGestureRootSwitcherModifier : SBGestureRootSwitcherModifier
  // instance methods
  -[SBWindowDragGestureRootSwitcherModifier handleTransitionEvent:]
  -[SBWindowDragGestureRootSwitcherModifier .cxx_destruct]
  -[SBWindowDragGestureRootSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBWindowDragGestureRootSwitcherModifier gestureType]
  -[SBWindowDragGestureRootSwitcherModifier handleGestureEvent:]
  -[SBWindowDragGestureRootSwitcherModifier initWithSelectedAppLayout:currentAppLayout:currentFloatingAppLayout:currentFloatingConfiguration:]
  -[SBWindowDragGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBWindowDragGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]


SBChronoApplicationProcessStateObserver : NSObject
 @property  SBHIconManager *iconManager
 @property  CHSApplicationProcessStateChangeConsumer *chronoConsumer
 @property  NSObject<OS_dispatch_queue> *queue

  // instance methods
  -[SBChronoApplicationProcessStateObserver chronoConsumer]
  -[SBChronoApplicationProcessStateObserver .cxx_destruct]
  -[SBChronoApplicationProcessStateObserver iconManager]
  -[SBChronoApplicationProcessStateObserver _queue_handleApplicationProcessStateDidChangeIfNecessary:]
  -[SBChronoApplicationProcessStateObserver init]
  -[SBChronoApplicationProcessStateObserver setQueue:]
  -[SBChronoApplicationProcessStateObserver queue]
  -[SBChronoApplicationProcessStateObserver applicationProcessStateDidChange:]
  -[SBChronoApplicationProcessStateObserver initWithIconManager:]


SBAccessibilityHardwareButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonInteraction>
 @property  unsigned long buttonType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAccessibilityHardwareButtonInteraction hardwareButtonInteractionForLockButton]
  +[SBAccessibilityHardwareButtonInteraction hardwareButtonInteractionForHomeButton]

  // instance methods
  -[SBAccessibilityHardwareButtonInteraction buttonType]
  -[SBAccessibilityHardwareButtonInteraction hardwareButtonGestureParameters]
  -[SBAccessibilityHardwareButtonInteraction dealloc]
  -[SBAccessibilityHardwareButtonInteraction consumeTriplePressUp]
  -[SBAccessibilityHardwareButtonInteraction initWithButtonType:]
  -[SBAccessibilityHardwareButtonInteraction _registerAsNotificationObserver]
  -[SBAccessibilityHardwareButtonInteraction _unregisterAsNotificationObserver]
  -[SBAccessibilityHardwareButtonInteraction _supportsTripleClick]
  -[SBAccessibilityHardwareButtonInteraction _downToDownInterval]
  -[SBAccessibilityHardwareButtonInteraction _presentMigrationAlertIfNeeded]
  -[SBAccessibilityHardwareButtonInteraction _speedChangedNotificationName]
  -[SBAccessibilityHardwareButtonInteraction _accessibilityPrefsDidChange]


SBTestAlertItem : SBAlertItem
 @property  NSString *title
 @property  BOOL shouldShowInLockScreen
 @property  BOOL forcesModalAlertAppearance
 @property  BOOL behavesSuperModally
 @property  BOOL allowMenuButtonDismissal
 @property  BOOL allowLockScreenDismissal
 @property  BOOL reappearsAfterUnlock
 @property  BOOL reappearsAfterLock

  // class methods
  +[SBTestAlertItem alertItemWithShowInLockScreen:forcesModal:superModal:]

  // instance methods
  -[SBTestAlertItem setTitle:]
  -[SBTestAlertItem .cxx_destruct]
  -[SBTestAlertItem reappearsAfterLock]
  -[SBTestAlertItem behavesSuperModally]
  -[SBTestAlertItem allowMenuButtonDismissal]
  -[SBTestAlertItem shouldShowInLockScreen]
  -[SBTestAlertItem title]
  -[SBTestAlertItem reappearsAfterUnlock]
  -[SBTestAlertItem allowLockScreenDismissal]
  -[SBTestAlertItem configure:requirePasscodeForActions:]
  -[SBTestAlertItem forcesModalAlertAppearance]
  -[SBTestAlertItem setReappearsAfterLock:]
  -[SBTestAlertItem setReappearsAfterUnlock:]
  -[SBTestAlertItem setShouldShowInLockScreen:]
  -[SBTestAlertItem setForcesModalAlertAppearance:]
  -[SBTestAlertItem setBehavesSuperModally:]
  -[SBTestAlertItem setAllowMenuButtonDismissal:]
  -[SBTestAlertItem setAllowLockScreenDismissal:]


SBHomeGestureExclusionTrapezoidSettings : PTSettings
 @property  BOOL showExclusionTrapezoidDebugView
 @property  BOOL landscapeTrapezoidEnabled
 @property  BOOL allowHorizontalSwipesOutsideLandscapeTrapezoid
 @property  double landscapeTrapezoidHeight
 @property  double landscapeTrapezoidBaseHeight
 @property  double landscapeTrapezoidAdjacentXDistanceFromEdge
 @property  double landscapeTrapezoidOpposingXDistanceFromEdge
 @property  BOOL portraitTrapezoidEnabled
 @property  BOOL portraitTrapezoidEnabledOnlyForKeyboards
 @property  BOOL allowHorizontalSwipesOutsidePortraitTrapezoid
 @property  double portraitTrapezoidHeight
 @property  double portraitTrapezoidBaseHeight
 @property  double portraitTrapezoidAdjacentXDistanceFromEdge
 @property  double portraitTrapezoidOpposingXDistanceFromEdge

  // class methods
  +[SBHomeGestureExclusionTrapezoidSettings settingsControllerModule]

  // instance methods
  -[SBHomeGestureExclusionTrapezoidSettings allowHorizontalSwipesOutsidePortraitTrapezoid]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidAdjacentXDistanceFromEdge:]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidOpposingXDistanceFromEdge]
  -[SBHomeGestureExclusionTrapezoidSettings allowHorizontalSwipesOutsideLandscapeTrapezoid]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidHeight:]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidBaseHeight]
  -[SBHomeGestureExclusionTrapezoidSettings setDefaultValues]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidEnabled]
  -[SBHomeGestureExclusionTrapezoidSettings setShowExclusionTrapezoidDebugView:]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidEnabledOnlyForKeyboards:]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidOpposingXDistanceFromEdge:]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidAdjacentXDistanceFromEdge]
  -[SBHomeGestureExclusionTrapezoidSettings setAllowHorizontalSwipesOutsideLandscapeTrapezoid:]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidBaseHeight:]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidHeight:]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidBaseHeight:]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidEnabledOnlyForKeyboards]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidEnabled:]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidAdjacentXDistanceFromEdge:]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidOpposingXDistanceFromEdge]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidAdjacentXDistanceFromEdge]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidOpposingXDistanceFromEdge:]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidEnabled]
  -[SBHomeGestureExclusionTrapezoidSettings setAllowHorizontalSwipesOutsidePortraitTrapezoid:]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidHeight]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidBaseHeight]
  -[SBHomeGestureExclusionTrapezoidSettings showExclusionTrapezoidDebugView]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidEnabled:]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidHeight]


SBShelfExpansionSwitcherModifier : SBTransitionSwitcherModifier
 @property  <SBShelfExpansionSwitcherModifierDelegate> *animationDelegate

  // instance methods
  -[SBShelfExpansionSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBShelfExpansionSwitcherModifier settingsForAnimatableProperty:]
  -[SBShelfExpansionSwitcherModifier transitionWillBegin]
  -[SBShelfExpansionSwitcherModifier shelfBackgroundBlurOpacity]
  -[SBShelfExpansionSwitcherModifier transactionCompletionOptions]
  -[SBShelfExpansionSwitcherModifier animationAttributesForLayoutElement:]
  -[SBShelfExpansionSwitcherModifier isFocusEnabledForAppLayout:]
  -[SBShelfExpansionSwitcherModifier scaleForIndex:]
  -[SBShelfExpansionSwitcherModifier frameForIndex:]
  -[SBShelfExpansionSwitcherModifier .cxx_destruct]
  -[SBShelfExpansionSwitcherModifier animatablePropertyIdentifiers]
  -[SBShelfExpansionSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBShelfExpansionSwitcherModifier didMoveToParentModifier:]
  -[SBShelfExpansionSwitcherModifier topMostLayoutElements]
  -[SBShelfExpansionSwitcherModifier animationDelegate]
  -[SBShelfExpansionSwitcherModifier shouldUpdateAnimatableProperty:]
  -[SBShelfExpansionSwitcherModifier updateModeForAnimatableProperty:]
  -[SBShelfExpansionSwitcherModifier modelValueForAnimatableProperty:currentValue:creating:]
  -[SBShelfExpansionSwitcherModifier shouldInterruptForRemovalEvent:]
  -[SBShelfExpansionSwitcherModifier _visibleOrderedAppLayouts]
  -[SBShelfExpansionSwitcherModifier _isMovingFromLeadingToTrailing]
  -[SBShelfExpansionSwitcherModifier _isEffectivelyInShelf]
  -[SBShelfExpansionSwitcherModifier _presentationValueForIndex:]
  -[SBShelfExpansionSwitcherModifier _bezierPointFromTime:start:target:]
  -[SBShelfExpansionSwitcherModifier handleAnimatablePropertyChangedEvent:]
  -[SBShelfExpansionSwitcherModifier initWithTransitionID:expand:style:target:animationDelegate:]


SBSwitcherAccessoryLayoutElement : NSObject <SBSwitcherLayoutElementProviding>
 @property  unsigned long type
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherAccessoryLayoutElement initWithType:]
  -[SBSwitcherAccessoryLayoutElement switcherLayoutElementType]
  -[SBSwitcherAccessoryLayoutElement type]


SBMediaController : NSObject <MPAVRoutingControllerDelegate, FBSDisplayObserving, SBAVSystemControllerCacheObserver>
 @property  int nowPlayingProcessPID
 @property  SBApplication *nowPlayingApplication
 @property  NSDate *lastActivityDate
 @property  BOOL suppressHUD
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMediaController sharedInstance]
  +[SBMediaController applicationCanBeConsideredNowPlaying:]
  +[SBMediaController sendResetPlaybackTimeoutCommand]

  // instance methods
  -[SBMediaController nowPlayingProcessPID]
  -[SBMediaController setNowPlayingInfo:]
  -[SBMediaController _registerForNotifications]
  -[SBMediaController stopForEventSource:]
  -[SBMediaController _unregisterForNotifications]
  -[SBMediaController displayMonitor:willDisconnectIdentity:]
  -[SBMediaController displayMonitor:didConnectIdentity:withConfiguration:]
  -[SBMediaController lastActivityDate]
  -[SBMediaController addTrackToWishListForEventSource:]
  -[SBMediaController endSeek:eventSource:]
  -[SBMediaController isPlaying]
  -[SBMediaController _clearScreenSharingStatusBarStyleOverride]
  -[SBMediaController updateScreenSharingStatusBarStyleOverride]
  -[SBMediaController beginSeek:eventSource:]
  -[SBMediaController volumeControlIsAvailable]
  -[SBMediaController routeOtherThanHandsetIsAvailable]
  -[SBMediaController nowPlayingApplication]
  -[SBMediaController cache:didUpdateAirplayDisplayActive:]
  -[SBMediaController isApplicationActivityActive]
  -[SBMediaController .cxx_destruct]
  -[SBMediaController _mediaRemoteNowPlayingApplicationDidChange:]
  -[SBMediaController isFirstTrack]
  -[SBMediaController toggleRepeatForEventSource:]
  -[SBMediaController _updateVideoOutStatusBarStyleOverride]
  -[SBMediaController isLastTrack]
  -[SBMediaController likeTrackForEventSource:]
  -[SBMediaController _mediaRemoteNowPlayingInfoDidChange:]
  -[SBMediaController init]
  -[SBMediaController _sendMediaCommand:options:]
  -[SBMediaController setNowPlayingProcessPID:]
  -[SBMediaController _updateLastRecentActivityDate]
  -[SBMediaController pauseForEventSource:]
  -[SBMediaController _mediaRemoteNowPlayingApplicationIsPlayingDidChange:]
  -[SBMediaController _updateDisplayMonitorState]
  -[SBMediaController cacheDidRebuildAfterServerDeath:]
  -[SBMediaController isScreenSharing]
  -[SBMediaController setPlaybackSpeed:eventSource:]
  -[SBMediaController _clearVideoOutStatusBarStyleOverride]
  -[SBMediaController routingControllerAvailableRoutesDidChange:]
  -[SBMediaController _nowPlayingInfo]
  -[SBMediaController changeTrack:eventSource:]
  -[SBMediaController _authenticationStateChanged:]
  -[SBMediaController _setNowPlayingApplication:]
  -[SBMediaController banTrackForEventSource:]
  -[SBMediaController dealloc]
  -[SBMediaController hasTrack]
  -[SBMediaController _updateScreenSharingStatusBarStyleOverrideSuppressionPreference:]
  -[SBMediaController _displayMonitorHasAConnectedExternalIdentity]
  -[SBMediaController suppressHUD]
  -[SBMediaController cancelVolumeEvent]
  -[SBMediaController playForEventSource:]
  -[SBMediaController handsetRouteIsSelected]
  -[SBMediaController setSuppressHUD:]
  -[SBMediaController toggleShuffleForEventSource:]
  -[SBMediaController _startVideoOutStatusBarStyleOverride]
  -[SBMediaController togglePlayPauseForEventSource:]
  -[SBMediaController wirelessDisplayRouteIsPicked]
  -[SBMediaController _nowPlayingAppDidExit:]
  -[SBMediaController _notifyThatScreenSharingChanged]
  -[SBMediaController _applicationActivityStatusDidChange:]
  -[SBMediaController nameOfPickedRoute]
  -[SBMediaController isPaused]
  -[SBMediaController _updateAVRoutes]


SBDeviceApplicationSceneEntity : SBApplicationSceneEntity
 @property  SBDeviceApplicationSceneHandle *sceneHandle

  // class methods
  +[SBDeviceApplicationSceneEntity defaultEntityWithApplicationForMainDisplay:targetContentIdentifier:]
  +[SBDeviceApplicationSceneEntity entityWithApplicationForMainDisplay:withScenePersistenceIdentifier:]
  +[SBDeviceApplicationSceneEntity defaultEntityWithApplicationForMainDisplay:]
  +[SBDeviceApplicationSceneEntity newEntityWithApplicationForMainDisplay:]

  // instance methods
  -[SBDeviceApplicationSceneEntity _setMainDisplayPreferredInterfaceOrientation:]
  -[SBDeviceApplicationSceneEntity initWithApplication:uniqueIdentifier:targetContentIdentifier:sceneHandleProvider:displayIdentity:]
  -[SBDeviceApplicationSceneEntity supportsPresentationAtAnySize]
  -[SBDeviceApplicationSceneEntity isDeviceApplicationSceneEntity]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainDisplay:uniqueIdentifier:]
  -[SBDeviceApplicationSceneEntity wantsExclusiveForeground]
  -[SBDeviceApplicationSceneEntity viewControllerClass]
  -[SBDeviceApplicationSceneEntity _supportsLayoutRole:]
  -[SBDeviceApplicationSceneEntity deviceApplicationSceneEntity]
  -[SBDeviceApplicationSceneEntity _mainDisplayPreferredInterfaceOrientation]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainDisplay:]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainDisplay:targetContentIdentifier:]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainSecureDisplay:]
  -[SBDeviceApplicationSceneEntity initWithApplicationSceneHandle:]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainDisplay:generatingNewPrimarySceneIfRequired:]


SBNCNotificationDispatcherDelegate : NSObject <NCNotificationDispatcherDelegate>
 @property  SBNotificationBannerDestination *bannerDestination
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNCNotificationDispatcherDelegate .cxx_destruct]
  -[SBNCNotificationDispatcherDelegate dispatcher:didExecuteAction:forNotificationRequest:]
  -[SBNCNotificationDispatcherDelegate bannerDestination]
  -[SBNCNotificationDispatcherDelegate _requestAuthenticationWithCompletion:]
  -[SBNCNotificationDispatcherDelegate dispatcher:requestPermissionToExecuteAction:forDestination:notificationRequest:withParameters:completionBlock:]
  -[SBNCNotificationDispatcherDelegate dispatcher:willExecuteAction:forDestination:notificationRequest:requestAuthentication:withParameters:completionBlock:]
  -[SBNCNotificationDispatcherDelegate dispatcher:launchForegroundApplicationForAction:notificationRequest:fromDestination:withParameters:]
  -[SBNCNotificationDispatcherDelegate dispatcher:launchBackgroundApplicationForAction:notificationRequest:fromDestination:withParameters:]
  -[SBNCNotificationDispatcherDelegate setBannerDestination:]


SBPeekSplitViewRoutingSwitcherModifier : SBSwitcherModifier <SBChainableModifierDelegate, SBRoutingSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPeekSplitViewRoutingSwitcherModifier modifierForEvent:]

  // instance methods
  -[SBPeekSplitViewRoutingSwitcherModifier isContainerStatusBarVisible]
  -[SBPeekSplitViewRoutingSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[SBPeekSplitViewRoutingSwitcherModifier homeScreenDimmingAlpha]
  -[SBPeekSplitViewRoutingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBPeekSplitViewRoutingSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier _handleEvent:]
  -[SBPeekSplitViewRoutingSwitcherModifier transactionCompletionOptions]
  -[SBPeekSplitViewRoutingSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBPeekSplitViewRoutingSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier keyboardSuppressionMode]
  -[SBPeekSplitViewRoutingSwitcherModifier isHomeScreenContentRequired]
  -[SBPeekSplitViewRoutingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBPeekSplitViewRoutingSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBPeekSplitViewRoutingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBPeekSplitViewRoutingSwitcherModifier handleTransitionEvent:]
  -[SBPeekSplitViewRoutingSwitcherModifier handleTapAppLayoutEvent:]
  -[SBPeekSplitViewRoutingSwitcherModifier frameForIndex:]
  -[SBPeekSplitViewRoutingSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBPeekSplitViewRoutingSwitcherModifier .cxx_destruct]
  -[SBPeekSplitViewRoutingSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBPeekSplitViewRoutingSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier wallpaperStyle]
  -[SBPeekSplitViewRoutingSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier cornerRadiiForIndex:]
  -[SBPeekSplitViewRoutingSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBPeekSplitViewRoutingSwitcherModifier cornerRadiiForLayoutRole:inAppLayout:withCornerRadii:]
  -[SBPeekSplitViewRoutingSwitcherModifier maskedCornersForIndex:]
  -[SBPeekSplitViewRoutingSwitcherModifier topMostLayoutElements]
  -[SBPeekSplitViewRoutingSwitcherModifier appLayoutContainingAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBPeekSplitViewRoutingSwitcherModifier handleEvent:]
  -[SBPeekSplitViewRoutingSwitcherModifier hiddenContainerStatusBarParts]
  -[SBPeekSplitViewRoutingSwitcherModifier copyWithZone:]
  -[SBPeekSplitViewRoutingSwitcherModifier multipleWindowsIndicatorLayoutRoleMaskForAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier handleSceneReadyEvent:]
  -[SBPeekSplitViewRoutingSwitcherModifier responseForProposedChildResponse:childModifier:event:]
  -[SBPeekSplitViewRoutingSwitcherModifier routingModifier:event:forModifier:]
  -[SBPeekSplitViewRoutingSwitcherModifier routingModifier:filteredAppLayouts:forModifier:]
  -[SBPeekSplitViewRoutingSwitcherModifier routingModifier:modifierForAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier routingModifier:containerViewBoundsForModifier:]
  -[SBPeekSplitViewRoutingSwitcherModifier routingModifier:switcherViewBoundsForModifier:]
  -[SBPeekSplitViewRoutingSwitcherModifier scrollModifierForRoutingModifier:]
  -[SBPeekSplitViewRoutingSwitcherModifier homeScreenModifierForRoutingModifier:]
  -[SBPeekSplitViewRoutingSwitcherModifier transactionCompletionOptionsModifierForRoutingModifier:]
  -[SBPeekSplitViewRoutingSwitcherModifier routingModifier:animationAttributesModifierForLayoutElement:]
  -[SBPeekSplitViewRoutingSwitcherModifier debugPotentialChildModifiers]
  -[SBPeekSplitViewRoutingSwitcherModifier initWithPeekConfiguration:spaceConfiguration:peekingAppLayout:]
  -[SBPeekSplitViewRoutingSwitcherModifier _temporarilyAllowUnconditionaryAppLayoutContainmentWithBlock:]
  -[SBPeekSplitViewRoutingSwitcherModifier _isAppLayoutBeingResized:]
  -[SBPeekSplitViewRoutingSwitcherModifier _combinedResultingAppLayoutWithAppLayout:]


SBWeatherApplicationIcon : SBApplicationIcon
  // instance methods
  -[SBWeatherApplicationIcon localeChanged]


SBTestAutomationService : NSObject <SBSystemServiceServerTestAutomationDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTestAutomationService .cxx_destruct]
  -[SBTestAutomationService init]
  -[SBTestAutomationService _authenticateClient:]
  -[SBTestAutomationService _iconGridSizeClassFromClientArgument:]
  -[SBTestAutomationService systemServiceServer:suspendAllDisplaysForClient:]
  -[SBTestAutomationService systemServiceServer:clearAllUserNotificationsForClient:]
  -[SBTestAutomationService systemServiceServer:client:setAlertsEnabled:]
  -[SBTestAutomationService systemServiceServer:client:setIdleTimerEnabled:]
  -[SBTestAutomationService systemServiceServer:client:setOrientationLockEnabled:]
  -[SBTestAutomationService systemServiceServer:client:setMallocStackLoggingEnabled:]
  -[SBTestAutomationService systemServiceServer:client:setHiddenFeaturesEnabled:]
  -[SBTestAutomationService systemServiceServer:client:setReachabilityActive:]
  -[SBTestAutomationService systemServiceServer:client:port:acquireAssertionForReachabilityEnabled:]
  -[SBTestAutomationService systemServiceServer:client:resetToHomeScreenAnimated:]
  -[SBTestAutomationService systemServiceServer:client:setAccessoryType:attached:]
  -[SBTestAutomationService systemServiceServer:client:port:acquireHUDHiddenAssertionForIdentifier:]
  -[SBTestAutomationService systemServiceServer:client:setApplicationBundleIdentifier:blockedForScreenTime:]
  -[SBTestAutomationService systemServiceServer:client:setTestRunnerRecoveryApplicationBundleIdentifier:]
  -[SBTestAutomationService systemServiceServer:client:countScenesForBundleIdentifier:withCompletion:]
  -[SBTestAutomationService systemServiceServer:client:stashSwitcherModelToPath:]
  -[SBTestAutomationService systemServiceServer:client:loadStashedSwitcherModelFromPath:]
  -[SBTestAutomationService systemServiceServer:addWidgetsToEachPageForClient:]
  -[SBTestAutomationService systemServiceServer:client:addWidgetWithIdentifier:toPage:withSizing:]
  -[SBTestAutomationService systemServiceServer:client:addWidgetStackWithIdentifiers:toPage:withSizing:]
  -[SBTestAutomationService systemServiceServer:enterLostModeForClient:]
  -[SBTestAutomationService systemServiceServer:exitLostModeForClient:]


SBCenterWindowDeclineSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCenterWindowDeclineSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBCenterWindowDeclineSwitcherModifier transitionWillBegin]
  -[SBCenterWindowDeclineSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCenterWindowDeclineSwitcherModifier scaleForIndex:]
  -[SBCenterWindowDeclineSwitcherModifier frameForIndex:]
  -[SBCenterWindowDeclineSwitcherModifier visibleAppLayouts]
  -[SBCenterWindowDeclineSwitcherModifier .cxx_destruct]
  -[SBCenterWindowDeclineSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBCenterWindowDeclineSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBCenterWindowDeclineSwitcherModifier topMostLayoutElements]
  -[SBCenterWindowDeclineSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBCenterWindowDeclineSwitcherModifier initWithTransitionID:fromAppLayout:]


SBBookmarkIcon : SBHBookmarkIcon
 @property  BOOL displaysShareBookmarkShortcutItem
 @property  BOOL displaysAppStoreURLShortcutItem
 @property  BOOL representsWebApp

  // instance methods
  -[SBBookmarkIcon displaysShareBookmarkShortcutItem]
  -[SBBookmarkIcon displaysAppStoreURLShortcutItem]
  -[SBBookmarkIcon representedSceneIdentifier]
  -[SBBookmarkIcon applicationToLaunch]
  -[SBBookmarkIcon _isSaneURL]
  -[SBBookmarkIcon representsWebApp]


SBMinimumViableSwitcherTableViewController : UITableViewController <SBSwitcherContentViewControlling>
 @property  <SBSwitcherContentViewControllerDelegate> *delegate
 @property  <SBSwitcherContentViewControllerDataSource> *dataSource
 @property  SBBestAppSuggestion *bestAppSuggestion
 @property  BOOL showModifierTimeline
 @property  long long contentOrientation
 @property  BOOL asyncRenderingDisabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL canInterruptActiveTransition
 @property  BSAnimationSettings *defaultTransitionAnimationSettings

  // instance methods
  -[SBMinimumViableSwitcherTableViewController switcherSupportedInterfaceOrientations]
  -[SBMinimumViableSwitcherTableViewController applicationSceneSettingsFrameForInterfaceOrientation:centerConfiguration:]
  -[SBMinimumViableSwitcherTableViewController canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[SBMinimumViableSwitcherTableViewController handleGestureDidUpdate:]
  -[SBMinimumViableSwitcherTableViewController switcherPreferredInterfaceOrientation]
  -[SBMinimumViableSwitcherTableViewController shouldRubberbandFullScreenHomeGrabberView]
  -[SBMinimumViableSwitcherTableViewController noteModelDidMutateForInsertionOfAppLayouts:atIndexes:willAnimate:]
  -[SBMinimumViableSwitcherTableViewController shouldAcceleratedHomeButtonPressBegin]
  -[SBMinimumViableSwitcherTableViewController defaultTransitionAnimationSettings]
  -[SBMinimumViableSwitcherTableViewController contentOrientation]
  -[SBMinimumViableSwitcherTableViewController setContentOrientation:]
  -[SBMinimumViableSwitcherTableViewController handleVolumeUpButtonPress]
  -[SBMinimumViableSwitcherTableViewController tableView:canEditRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController handleHomeButtonDoublePress]
  -[SBMinimumViableSwitcherTableViewController animationControllerForTransitionRequest:]
  -[SBMinimumViableSwitcherTableViewController tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController handleHomeButtonPress]
  -[SBMinimumViableSwitcherTableViewController bestAppSuggestion]
  -[SBMinimumViableSwitcherTableViewController handleLockButtonPress]
  -[SBMinimumViableSwitcherTableViewController numberOfSectionsInTableView:]
  -[SBMinimumViableSwitcherTableViewController setDataSource:]
  -[SBMinimumViableSwitcherTableViewController handleVolumeDownButtonPress]
  -[SBMinimumViableSwitcherTableViewController handleHeadsetButtonPress:]
  -[SBMinimumViableSwitcherTableViewController snapshotScaleForSceneHandle:]
  -[SBMinimumViableSwitcherTableViewController leadingStatusBarStyleRequest]
  -[SBMinimumViableSwitcherTableViewController tableView:numberOfRowsInSection:]
  -[SBMinimumViableSwitcherTableViewController handleHomeButtonLongPress]
  -[SBMinimumViableSwitcherTableViewController acquiredViewController:forTransientOverlayAppLayout:]
  -[SBMinimumViableSwitcherTableViewController handleVoiceCommandButtonPress]
  -[SBMinimumViableSwitcherTableViewController .cxx_destruct]
  -[SBMinimumViableSwitcherTableViewController minimumHomeScreenScale]
  -[SBMinimumViableSwitcherTableViewController canInterruptActiveTransition]
  -[SBMinimumViableSwitcherTableViewController tableView:didSelectRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController viewDidLoad]
  -[SBMinimumViableSwitcherTableViewController tableView:cellForRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController clickReceivedForHomeGrabberView:]
  -[SBMinimumViableSwitcherTableViewController setDelegate:]
  -[SBMinimumViableSwitcherTableViewController tableView:commitEditingStyle:forRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController dataSource]
  -[SBMinimumViableSwitcherTableViewController isWindowVisible]
  -[SBMinimumViableSwitcherTableViewController performTransitionWithContext:animated:completion:]
  -[SBMinimumViableSwitcherTableViewController noteAppLayoutsDidChange]
  -[SBMinimumViableSwitcherTableViewController prepareAnimatedInsertionOfAppLayouts:atIndexes:]
  -[SBMinimumViableSwitcherTableViewController setAsyncRenderingDisabled:]
  -[SBMinimumViableSwitcherTableViewController isShowingModifierTimeline]
  -[SBMinimumViableSwitcherTableViewController performKeyboardShortcutAction:]
  -[SBMinimumViableSwitcherTableViewController setBestAppSuggestion:]
  -[SBMinimumViableSwitcherTableViewController isStatusBarHiddenForAppLayout:]
  -[SBMinimumViableSwitcherTableViewController trailingStatusBarStyleRequest]
  -[SBMinimumViableSwitcherTableViewController switcherCardScale]
  -[SBMinimumViableSwitcherTableViewController isUserInteractionEnabled]
  -[SBMinimumViableSwitcherTableViewController tapReceivedForGrabberTongueAtEdge:]
  -[SBMinimumViableSwitcherTableViewController removeLayoutRole:inSpace:mutationBlock:reason:]
  -[SBMinimumViableSwitcherTableViewController performAnimatedInsertionOfAppLayouts:atIndexes:completion:]
  -[SBMinimumViableSwitcherTableViewController respondToInAppStatusBarRequestedHiddenUpdateAnimated:]
  -[SBMinimumViableSwitcherTableViewController _debugSwitcherPostModernRotationSupportedSupportedInterfaceOrientations]
  -[SBMinimumViableSwitcherTableViewController noteKeyboardFocusDidChangeToSceneID:]
  -[SBMinimumViableSwitcherTableViewController delegate]
  -[SBMinimumViableSwitcherTableViewController setShowModifierTimeline:]
  -[SBMinimumViableSwitcherTableViewController handleGestureDidEnd:]
  -[SBMinimumViableSwitcherTableViewController relinquishTransientOverlayViewController:]
  -[SBMinimumViableSwitcherTableViewController failMultitaskingGesturesForReason:]
  -[SBMinimumViableSwitcherTableViewController shouldAddAppLayoutToFront:forTransitionWithContext:transitionCompleted:]
  -[SBMinimumViableSwitcherTableViewController iconForAppLayout:]
  -[SBMinimumViableSwitcherTableViewController handleGestureDidBegin:]
  -[SBMinimumViableSwitcherTableViewController isAsyncRenderingDisabled]
  -[SBMinimumViableSwitcherTableViewController shouldAnimateInsertionOfAppLayouts:atIndexes:]
  -[SBMinimumViableSwitcherTableViewController _appLayouts]
  -[SBMinimumViableSwitcherTableViewController _statusBarStyleRequestForDefaultStyle]


SBDeviceApplicationSceneStatusBarStateProvider_Base : NSObject <SBApplicationSceneStatusBarDescribingInternal, SBDeviceApplicationSceneStatusBarStateProviderBaseSubclassesMustOverride, SBApplicationSceneStatusBarDescribing>
 @property  long long statusBarStyle
 @property  BOOL statusBarHidden
 @property  double statusBarAlpha
 @property  long long statusBarOrientation
 @property  unsigned long statusBarStyleOverridesToSuppress
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} statusBarAvoidanceFrame
 @property  BOOL sceneWantsDeviceOrientationEventsEnabled
 @property  NSString *statusBarSceneIdentifier
 @property  _UIStatusBarData *overlayStatusBarData
 @property  SBDeviceApplicationSceneStatusBarBreadcrumbProvider *breadcrumbProvider
 @property  SBDeviceApplicationSceneHandle *classicApplicationSceneHandleIfExists
 @property  FBScene *sceneToHandleStatusBarTapIfExists
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base enumerateObserversWithBlock:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarAvoidanceFrame]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarOrientation]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarAlpha]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarStyle]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _suppressInheritedPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _allObservers]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base .cxx_destruct]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarAppearsOutsideOfAJailedApp]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarStyleForPartWithIdentifier:suppressingInherited:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarStyle]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base sceneToHandleStatusBarTapIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base succinctDescriptionBuilder]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarSceneIdentifier]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base descriptionBuilderWithMultilinePrefix:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base init]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base descriptionWithMultilinePrefix:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base succinctDescription]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _fallbackInterfaceOrientation]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base overlayStatusBarData]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarAlpha]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarStyleOverridesToSuppress]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base classicApplicationSceneHandleIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarHidden]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarHiddenGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base sceneWantsDeviceOrientationEventsEnabled]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarOrientationGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base breadcrumbProvider]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _observerRecords]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarStyleForPartWithIdentifier:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base SB_conformsToSBApplicationSceneStatusBarDescribing]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base addStatusBarObserver:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base removeStatusBarObserver:]


SBIconContentView : UIView
 @property  long long orientation
 @property  UIView *contentView

  // instance methods
  -[SBIconContentView setOrientation:]
  -[SBIconContentView preferredFocusEnvironments]
  -[SBIconContentView initWithOrientation:]
  -[SBIconContentView .cxx_destruct]
  -[SBIconContentView layoutSubviews]
  -[SBIconContentView contentView]
  -[SBIconContentView orientation]
  -[SBIconContentView initWithFrame:]
  -[SBIconContentView setContentView:]


SBVODController : NSObject
  // class methods
  +[SBVODController sharedInstance]

  // instance methods
  -[SBVODController init]
  -[SBVODController _launchIPodIfNecessary]
  -[SBVODController dealloc]


SBZStackAuditorParticipantRecord : NSObject <BSDescriptionProviding>
 @property  NSString *name
 @property  long long activationPolicy
 @property  BOOL ownsHomeGesture
 @property  BOOL homeAffordanceSuppressed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBZStackAuditorParticipantRecord setActivationPolicy:]
  -[SBZStackAuditorParticipantRecord ownsHomeGesture]
  -[SBZStackAuditorParticipantRecord name]
  -[SBZStackAuditorParticipantRecord .cxx_destruct]
  -[SBZStackAuditorParticipantRecord succinctDescriptionBuilder]
  -[SBZStackAuditorParticipantRecord homeAffordanceSuppressed]
  -[SBZStackAuditorParticipantRecord setName:]
  -[SBZStackAuditorParticipantRecord descriptionBuilderWithMultilinePrefix:]
  -[SBZStackAuditorParticipantRecord descriptionWithMultilinePrefix:]
  -[SBZStackAuditorParticipantRecord succinctDescription]
  -[SBZStackAuditorParticipantRecord activationPolicy]
  -[SBZStackAuditorParticipantRecord summaryForLogging]
  -[SBZStackAuditorParticipantRecord setHomeAffordanceSuppressed:]
  -[SBZStackAuditorParticipantRecord setOwnsHomeGesture:]


SBZStackAuditor : NSObject <SBHomeGestureArbiterObserver, SBFZStackResolverObserver, BSDescriptionProviding>
 @property  NSArray *latestHomeGestureParticipantRecords
 @property  NSArray *latestZStackParticipantRecords
 @property  NSTimer *participantUpdateRecheckTimer
 @property  BOOL shouldAuditHomeAffordanceSuppression
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBZStackAuditor setParticipantUpdateRecheckTimer:]
  -[SBZStackAuditor .cxx_destruct]
  -[SBZStackAuditor succinctDescriptionBuilder]
  -[SBZStackAuditor descriptionBuilderWithMultilinePrefix:]
  -[SBZStackAuditor descriptionWithMultilinePrefix:]
  -[SBZStackAuditor _shouldShowAlertForErrors]
  -[SBZStackAuditor latestHomeGestureParticipantRecords]
  -[SBZStackAuditor setLatestZStackParticipantRecords:]
  -[SBZStackAuditor succinctDescription]
  -[SBZStackAuditor setLatestHomeGestureParticipantRecords:]
  -[SBZStackAuditor _checkParticipantUpdateRecords]
  -[SBZStackAuditor latestZStackParticipantRecords]
  -[SBZStackAuditor _recheckParticipantsComparingToOriginalError:]
  -[SBZStackAuditor homeGestureArbiterDidUpdateParticipants:]
  -[SBZStackAuditor zStackResolverDidUpdateParticipants:]
  -[SBZStackAuditor initWithHomeGestureArbiter:zStackResolver:]
  -[SBZStackAuditor shouldAuditHomeAffordanceSuppression]
  -[SBZStackAuditor participantUpdateRecheckTimer]
  -[SBZStackAuditor _startAuditingPassForParticipantUpdates]


SBUIBlockAnimationController : SBUIWorkspaceAnimationController
  // instance methods
  -[SBUIBlockAnimationController _didComplete]
  -[SBUIBlockAnimationController animationSettings]
  -[SBUIBlockAnimationController _startAnimation]
  -[SBUIBlockAnimationController .cxx_destruct]
  -[SBUIBlockAnimationController initWithWorkspaceTransitionRequest:animationSettings:animationBlock:]
  -[SBUIBlockAnimationController initWithWorkspaceTransitionRequest:]


SBLockScreenPlugin : NSObject <FBProcessObserver, SBLockScreenPluginAgent, SBLockScreenPluginController>
 @property  <SBLockScreenPluginDelegate> *delegate
 @property  NSString *name
 @property  <SBLockScreenPluginController> *controller
 @property  UIViewController<SBLockScreenPluginViewController> *viewController
 @property  SBLockScreenPluginAppearanceContext *appearance
 @property  SBLockScreenPluginAction *unlockAction
 @property  CSAppearance *coverSheetAppearance
 @property  CSBehavior *coverSheetBehavior
 @property  SBLockOverlayContext *overlay
 @property  @? auxiliaryActivationAnimationBlock
 @property  @? auxiliaryDeactivationAnimationBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBLockScreenPluginAgent> *pluginAgent
 @property  long long pluginPriority
 @property  UIViewController<SBLockScreenPluginViewController> *pluginViewController
 @property  <SBLockScreenPluginAppearance> *pluginAppearance
 @property  SBLockScreenPluginAction *pluginUnlockAction
 @property  _UILegibilitySettings *legibilitySettings

  // class methods
  +[SBLockScreenPlugin _pluginBundleForPluginWithName:]
  +[SBLockScreenPlugin pluginWithName:activationContext:]

  // instance methods
  -[SBLockScreenPlugin overlay]
  -[SBLockScreenPlugin processDidExit:]
  -[SBLockScreenPlugin viewController]
  -[SBLockScreenPlugin name]
  -[SBLockScreenPlugin pluginController:sendAction:]
  -[SBLockScreenPlugin controller]
  -[SBLockScreenPlugin appearance]
  -[SBLockScreenPlugin .cxx_destruct]
  -[SBLockScreenPlugin succinctDescriptionBuilder]
  -[SBLockScreenPlugin setDelegate:]
  -[SBLockScreenPlugin pluginViewController]
  -[SBLockScreenPlugin descriptionBuilderWithMultilinePrefix:]
  -[SBLockScreenPlugin descriptionWithMultilinePrefix:]
  -[SBLockScreenPlugin activatePluginController:]
  -[SBLockScreenPlugin succinctDescription]
  -[SBLockScreenPlugin delegate]
  -[SBLockScreenPlugin dealloc]
  -[SBLockScreenPlugin deactivatePluginController:]
  -[SBLockScreenPlugin pluginController:updateAppearance:]
  -[SBLockScreenPlugin setOverlay:]
  -[SBLockScreenPlugin _updateAppearance:]
  -[SBLockScreenPlugin coverSheetAppearance]
  -[SBLockScreenPlugin coverSheetBehavior]
  -[SBLockScreenPlugin handleDashBoardEvent:]
  -[SBLockScreenPlugin isCapabilityRestricted:]
  -[SBLockScreenPlugin initWithBundle:activationContext:]
  -[SBLockScreenPlugin pluginAgent]
  -[SBLockScreenPlugin setPluginAgent:]
  -[SBLockScreenPlugin pluginPriority]
  -[SBLockScreenPlugin pluginAppearance]
  -[SBLockScreenPlugin pluginWillActivateWithContext:]
  -[SBLockScreenPlugin pluginDidDeactivateWithContext:]
  -[SBLockScreenPlugin pluginHandleEvent:]
  -[SBLockScreenPlugin pluginUnlockAction]
  -[SBLockScreenPlugin overrideForElement:]
  -[SBLockScreenPlugin unlockAction]
  -[SBLockScreenPlugin isElementHidden:]
  -[SBLockScreenPlugin addLifecycleObserver:]
  -[SBLockScreenPlugin removeLifecycleObserver:]
  -[SBLockScreenPlugin enumerateLifecycleObserversUsingBlock:]
  -[SBLockScreenPlugin auxiliaryActivationAnimationBlock]
  -[SBLockScreenPlugin setAuxiliaryActivationAnimationBlock:]
  -[SBLockScreenPlugin auxiliaryDeactivationAnimationBlock]
  -[SBLockScreenPlugin setAuxiliaryDeactivationAnimationBlock:]


SBDashBoardLegibilityProvider : NSObject <SBWallpaperObserver, CSLegibilityProviding>
 @property  SBWallpaperController *wallpaperController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <CSLegibilityProviderDelegate> *legibilityProviderDelegate

  // instance methods
  -[SBDashBoardLegibilityProvider wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBDashBoardLegibilityProvider wallpaperDidChangeForVariant:]
  -[SBDashBoardLegibilityProvider setLegibilityProviderDelegate:]
  -[SBDashBoardLegibilityProvider initWithWallpaperController:]
  -[SBDashBoardLegibilityProvider wallpaperController]
  -[SBDashBoardLegibilityProvider .cxx_destruct]
  -[SBDashBoardLegibilityProvider currentLegibilitySettings]
  -[SBDashBoardLegibilityProvider _notifyDelegate]
  -[SBDashBoardLegibilityProvider legibilityProviderDelegate]
  -[SBDashBoardLegibilityProvider init]
  -[SBDashBoardLegibilityProvider _wallpaperLegibilitySettings]
  -[SBDashBoardLegibilityProvider setWallpaperController:]


SBAppSwitcherSystemService : NSObject <SBSystemServiceServerAppSwitcherDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherSystemService .cxx_destruct]
  -[SBAppSwitcherSystemService initWithRecentAppLayoutsController:commandTabController:]
  -[SBAppSwitcherSystemService requestAppearanceForHiddenAppWithBundleIdentifier:assertionPort:forClient:withCompletion:]
  -[SBAppSwitcherSystemService systemServiceServer:requestAppearanceForHiddenAppWithBundleIdentifier:assertionPort:forClient:withCompletion:]


SBSplitViewRootSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBSplitViewRootSwitcherModifier _handleEvent:]
  -[SBSplitViewRootSwitcherModifier .cxx_destruct]
  -[SBSplitViewRootSwitcherModifier init]
  -[SBSplitViewRootSwitcherModifier responseForProposedChildResponse:childModifier:event:]
  -[SBSplitViewRootSwitcherModifier _routingModifierForEvent:]


SBDashBoardApplicationLauncher : NSObject <CSExternalEventHandling, SBLockScreenApplicationLaunching, CSApplicationLaunching, CSCameraPrewarming>
 @property  CSCoverSheetViewController *coverSheetViewController
 @property  SBSecureAppManager *secureAppManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDashBoardApplicationLauncher coverSheetViewController]
  -[SBDashBoardApplicationLauncher coverSheetIdentifier]
  -[SBDashBoardApplicationLauncher .cxx_destruct]
  -[SBDashBoardApplicationLauncher wouldHandleButtonEvent:]
  -[SBDashBoardApplicationLauncher _reallyActivateAppSceneWithEntity:interactive:withCompletion:]
  -[SBDashBoardApplicationLauncher _prewarmCamera]
  -[SBDashBoardApplicationLauncher handleTransitionRequest:]
  -[SBDashBoardApplicationLauncher participantState]
  -[SBDashBoardApplicationLauncher _coolCameraIfNecessary]
  -[SBDashBoardApplicationLauncher setSecureAppManager:]
  -[SBDashBoardApplicationLauncher secureAppManager]
  -[SBDashBoardApplicationLauncher _canHandleTransitionRequest:outActivatingSceneEntity:]
  -[SBDashBoardApplicationLauncher _activateAppSceneBelowDashBoard:secureAppType:withActions:interactive:completion:]
  -[SBDashBoardApplicationLauncher launchQuickNote]
  -[SBDashBoardApplicationLauncher _presentApplicationSceneEntity:withResult:]
  -[SBDashBoardApplicationLauncher _activateCameraAnimated:actions:completion:]
  -[SBDashBoardApplicationLauncher prewarmCameraHardware:andApplication:]
  -[SBDashBoardApplicationLauncher notePrewarmRequestEnded]
  -[SBDashBoardApplicationLauncher handleEvent:]
  -[SBDashBoardApplicationLauncher _launchQuickNote]
  -[SBDashBoardApplicationLauncher _backgroundLaunchCamera]
  -[SBDashBoardApplicationLauncher dealloc]
  -[SBDashBoardApplicationLauncher _attemptToUnlockToCameraCompletion:]
  -[SBDashBoardApplicationLauncher conformsToCSEventHandling]
  -[SBDashBoardApplicationLauncher notePrewarmRequestWasUseful]
  -[SBDashBoardApplicationLauncher setCoverSheetViewController:]


_SBTestRecipeSettings : PTSettings

_SBTestRecipeDomain : PTDomain
  // class methods
  +[_SBTestRecipeDomain domainGroupName]
  +[_SBTestRecipeDomain domainName]
  +[_SBTestRecipeDomain rootSettingsClass]


SBTestRecipeRegistrar : NSObject
  // class methods
  +[SBTestRecipeRegistrar registerTestRecipeClass:]
  +[SBTestRecipeRegistrar _registerRecipeWithClass:]
  +[SBTestRecipeRegistrar registerAllTestRecipes]


SBTransientUIInteractionManager : NSObject <SBSystemGestureRecognizerDelegate>
 @property  SBFailingSystemGestureRecognizer *dismissGestureRecognizer
 @property  UITapGestureRecognizer *unhideTapRecognizer
 @property  UITapGestureRecognizer *unhideDoubleTapRecognizer
 @property  UIPanGestureRecognizer *indirectPanRecognizer
 @property  NSHashTable *tapToDismissParticipants
 @property  NSHashTable *tapToUnhideParticipants
 @property  NSHashTable *indirectPanToParticipants
 @property  UIWindow *window
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTransientUIInteractionManager initWithWindow:]
  -[SBTransientUIInteractionManager gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBTransientUIInteractionManager .cxx_destruct]
  -[SBTransientUIInteractionManager setDismissGestureRecognizer:]
  -[SBTransientUIInteractionManager viewForSystemGestureRecognizer:]
  -[SBTransientUIInteractionManager dismissGestureRecognizer]
  -[SBTransientUIInteractionManager gestureRecognizer:shouldReceiveTouch:]
  -[SBTransientUIInteractionManager window]
  -[SBTransientUIInteractionManager _screenWasTappedToUnhide:]
  -[SBTransientUIInteractionManager _screenWasIndirectPannedToDismiss:]
  -[SBTransientUIInteractionManager registerParticipantForTapToDismiss:]
  -[SBTransientUIInteractionManager unregisterParticipantForTapToDismiss:]
  -[SBTransientUIInteractionManager registerParticipantForTapToUnhide:]
  -[SBTransientUIInteractionManager unregisterParticipantForTapToUnhide:]
  -[SBTransientUIInteractionManager registerParticipantForIndirectPanToDismiss:]
  -[SBTransientUIInteractionManager unregisterParticipantForIndirectPanToDismiss:]
  -[SBTransientUIInteractionManager unhideTapRecognizer]
  -[SBTransientUIInteractionManager setUnhideTapRecognizer:]
  -[SBTransientUIInteractionManager unhideDoubleTapRecognizer]
  -[SBTransientUIInteractionManager setUnhideDoubleTapRecognizer:]
  -[SBTransientUIInteractionManager indirectPanRecognizer]
  -[SBTransientUIInteractionManager setIndirectPanRecognizer:]
  -[SBTransientUIInteractionManager tapToDismissParticipants]
  -[SBTransientUIInteractionManager setTapToDismissParticipants:]
  -[SBTransientUIInteractionManager tapToUnhideParticipants]
  -[SBTransientUIInteractionManager setTapToUnhideParticipants:]
  -[SBTransientUIInteractionManager indirectPanToParticipants]
  -[SBTransientUIInteractionManager setIndirectPanToParticipants:]


SBReduceMotionSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBReduceMotionSwitcherModifier wallpaperScale]
  -[SBReduceMotionSwitcherModifier homeScreenScale]
  -[SBReduceMotionSwitcherModifier handleReduceMotionChangedEvent:]


SBDeleteNonAppIconAlertItem : SBAlertItem
 @property  SBIcon *icon
 @property  NSString *iconLocation

  // instance methods
  -[SBDeleteNonAppIconAlertItem icon]
  -[SBDeleteNonAppIconAlertItem .cxx_destruct]
  -[SBDeleteNonAppIconAlertItem iconLocation]
  -[SBDeleteNonAppIconAlertItem shouldShowInLockScreen]
  -[SBDeleteNonAppIconAlertItem dismissOnLock]
  -[SBDeleteNonAppIconAlertItem configure:requirePasscodeForActions:]
  -[SBDeleteNonAppIconAlertItem forcesModalAlertAppearance]
  -[SBDeleteNonAppIconAlertItem didActivate]
  -[SBDeleteNonAppIconAlertItem initWithIcon:location:]


SBWindowLevelAssertion : NSObject <BSDescriptionProviding, BSInvalidatable>
 @property  double windowLevel
 @property  long long priority
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWindowLevelAssertion windowLevel]
  -[SBWindowLevelAssertion .cxx_destruct]
  -[SBWindowLevelAssertion succinctDescriptionBuilder]
  -[SBWindowLevelAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBWindowLevelAssertion descriptionWithMultilinePrefix:]
  -[SBWindowLevelAssertion succinctDescription]
  -[SBWindowLevelAssertion reason]
  -[SBWindowLevelAssertion priority]
  -[SBWindowLevelAssertion invalidate]
  -[SBWindowLevelAssertion initWithPriority:windowLevel:reason:invalidationHandler:]


SBDashBoardMesaUnlockBehaviorConfiguration : NSObject <SBLiftToWakeObserver, SBBiometricUnlockBehaviorConfiguration>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorConfigurationDelegate> *delegate

  // instance methods
  -[SBDashBoardMesaUnlockBehaviorConfiguration _liftToWakeController]
  -[SBDashBoardMesaUnlockBehaviorConfiguration .cxx_destruct]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _setLiftToWakeController:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration setDelegate:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration delegate]
  -[SBDashBoardMesaUnlockBehaviorConfiguration dealloc]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _accessibilityOptionsChanged:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _evaluateTriggerClass]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _unlockTriggerWithClass:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _expectedTriggerClassIncludingAccessibility:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _isAccessibilityRestingUnlockPreferenceEnabled]
  -[SBDashBoardMesaUnlockBehaviorConfiguration liftToWakeControllerEnablementDidChange:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration newBehaviorForCurrentConfiguration]
  -[SBDashBoardMesaUnlockBehaviorConfiguration initWithLiftToWakeController:biometricResource:lockScreenPrototypeSettings:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _currentUnlockTriggerClass]


SBFluidDismissalState : NSObject <SiriUIFluidDismissalState>
 @property  double backgroundWeighting
 @property  double contentWeighting
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentRect
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double backgroundWeighting
 @property  double contentWeighting
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentRect
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} homeGrabberContentRect
 @property  long long dismissalType
 @property  long long transitionPhase

  // instance methods
  -[SBFluidDismissalState contentRect]
  -[SBFluidDismissalState setContentRect:]
  -[SBFluidDismissalState setDismissalType:]
  -[SBFluidDismissalState setTransitionPhase:]
  -[SBFluidDismissalState transitionPhase]
  -[SBFluidDismissalState contentWeighting]
  -[SBFluidDismissalState backgroundWeighting]
  -[SBFluidDismissalState dismissalType]
  -[SBFluidDismissalState setBackgroundWeighting:]
  -[SBFluidDismissalState setContentWeighting:]
  -[SBFluidDismissalState setHomeGrabberContentRect:]
  -[SBFluidDismissalState homeGrabberContentRect]


SBReduceMotionChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBReduceMotionChangedSwitcherModifierEvent type]


SBForcePressGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBForcePressGestureSwitcherModifier appLayoutsToResignActive]
  -[SBForcePressGestureSwitcherModifier isContainerStatusBarVisible]
  -[SBForcePressGestureSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBForcePressGestureSwitcherModifier homeScreenDimmingAlpha]
  -[SBForcePressGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBForcePressGestureSwitcherModifier wallpaperScale]
  -[SBForcePressGestureSwitcherModifier homeScreenScale]
  -[SBForcePressGestureSwitcherModifier homeScreenAlpha]
  -[SBForcePressGestureSwitcherModifier keyboardSuppressionMode]
  -[SBForcePressGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBForcePressGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBForcePressGestureSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBForcePressGestureSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBForcePressGestureSwitcherModifier handleTransitionEvent:]
  -[SBForcePressGestureSwitcherModifier frameForIndex:]
  -[SBForcePressGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBForcePressGestureSwitcherModifier visibleAppLayouts]
  -[SBForcePressGestureSwitcherModifier .cxx_destruct]
  -[SBForcePressGestureSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBForcePressGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBForcePressGestureSwitcherModifier _switcherCardScale]
  -[SBForcePressGestureSwitcherModifier _layoutSettings]
  -[SBForcePressGestureSwitcherModifier wallpaperStyle]
  -[SBForcePressGestureSwitcherModifier cornerRadiiForIndex:]
  -[SBForcePressGestureSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBForcePressGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBForcePressGestureSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBForcePressGestureSwitcherModifier didMoveToParentModifier:]
  -[SBForcePressGestureSwitcherModifier _scaleSettings]
  -[SBForcePressGestureSwitcherModifier handleGestureEvent:]
  -[SBForcePressGestureSwitcherModifier _beginAnimatingMultitaskingPropertyWithMode:settings:]
  -[SBForcePressGestureSwitcherModifier _scaleForCoplanarModifier]
  -[SBForcePressGestureSwitcherModifier _effectivePanProgress]
  -[SBForcePressGestureSwitcherModifier _indexOfSelectedAppLayout]
  -[SBForcePressGestureSwitcherModifier _forcePressGestureCanBreathe]
  -[SBForcePressGestureSwitcherModifier initWithGestureID:selectedAppLayout:effectiveStartingEnvironmentMode:multitaskingModifier:]
  -[SBForcePressGestureSwitcherModifier initialPanThreshold]


SBDefaultTraitsParticipantDelegate : NSObject <SBFTraitsParticipantDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDefaultTraitsParticipantDelegate _activeOrientationDeterminingParticipantRoles]

  // instance methods
  -[SBDefaultTraitsParticipantDelegate _isWindowContentVisible:]
  -[SBDefaultTraitsParticipantDelegate participantAssociatedWindows:]
  -[SBDefaultTraitsParticipantDelegate .cxx_destruct]
  -[SBDefaultTraitsParticipantDelegate validateSettingsForParticipant:validator:]
  -[SBDefaultTraitsParticipantDelegate windowWillBecomeVisible:ownedParticipant:]
  -[SBDefaultTraitsParticipantDelegate init]
  -[SBDefaultTraitsParticipantDelegate windowDidUpdateSupportedOrientations:ownedParticipant:]
  -[SBDefaultTraitsParticipantDelegate windowDidUpdatePreferredWindowLevel:ownedParticipant:]
  -[SBDefaultTraitsParticipantDelegate windowWillBecomeHidden:ownedParticipant:]
  -[SBDefaultTraitsParticipantDelegate participantWillInvalidate:]
  -[SBDefaultTraitsParticipantDelegate didChangeSettingsForParticipant:context:]
  -[SBDefaultTraitsParticipantDelegate _validationFailureReasonForWindow:shouldAutorotate:]
  -[SBDefaultTraitsParticipantDelegate updatePreferenceForParticipant:updater:]
  -[SBDefaultTraitsParticipantDelegate setParticipant:ownedByWindow:]
  -[SBDefaultTraitsParticipantDelegate _autorotationPreventionReasons:]
  -[SBDefaultTraitsParticipantDelegate _validatedSupportedInterfaceOrientations:forWindow:]


SBAppExitedWorkspaceTransaction : SBToAppsWorkspaceTransaction
  // instance methods
  -[SBAppExitedWorkspaceTransaction _didComplete]
  -[SBAppExitedWorkspaceTransaction _begin]


SBUserSessionController : NSObject <SBLogoutProgressDataSource, SBLogoutProgressDelegate, UMCriticalUserSwitchStakeholder>
 @property  BOOL loggingOut
 @property  SBMainDisplayPolicyAggregator *policyAggregator
 @property  UMUser *user
 @property  BOOL loginSession
 @property  BOOL isMultiUserSupported
 @property  BOOL canLogout
 @property  long long sessionType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUserSessionController sessionType]
  -[SBUserSessionController logout]
  -[SBUserSessionController isLoginSession]
  -[SBUserSessionController _setPolicyAggregator:]
  -[SBUserSessionController userSwitchBlockingTasksDidUpdate:]
  -[SBUserSessionController _policyAggregator]
  -[SBUserSessionController _readyToSwitchToUser:]
  -[SBUserSessionController logoutWithLogoutSupport:completion:]
  -[SBUserSessionController .cxx_destruct]
  -[SBUserSessionController user]
  -[SBUserSessionController setLoggingOut:]
  -[SBUserSessionController _displayProgressTransientOverlayIfNeeded]
  -[SBUserSessionController succinctDescriptionBuilder]
  -[SBUserSessionController _noteApplicationDidExitFromNotification:]
  -[SBUserSessionController _massageApplicationListForDisplay:]
  -[SBUserSessionController isLoggingOut]
  -[SBUserSessionController isMultiUserSupported]
  -[SBUserSessionController descriptionBuilderWithMultilinePrefix:]
  -[SBUserSessionController init]
  -[SBUserSessionController descriptionWithMultilinePrefix:]
  -[SBUserSessionController disableCurrentUser]
  -[SBUserSessionController _portraitOrientedProgressLocationForOrientation:]
  -[SBUserSessionController succinctDescription]
  -[SBUserSessionController logoutProgressTransientOverlayViewControllerDidDisappear:]
  -[SBUserSessionController debugBlockingTasksForLogoutProgressTransientOverlayViewController:]
  -[SBUserSessionController _initWithUserManager:]
  -[SBUserSessionController policyAggregator]
  -[SBUserSessionController canLogout]
  -[SBUserSessionController readyToSwitchToUser:]
  -[SBUserSessionController dealloc]
  -[SBUserSessionController willSwitchToUser:]
  -[SBUserSessionController readyToSwitchToLoginSession:]
  -[SBUserSessionController _evaluateRunningApplications]
  -[SBUserSessionController _noteApplicationDidExit:]
  -[SBUserSessionController pendingApplicationsForLogoutProgressTransientOverlayViewController:]


SBRestartTransitionRequest : NSObject <BSDescriptionProviding, NSCopying>
 @property  NSString *requester
 @property  NSString *reason
 @property  int restartType
 @property  double delay
 @property  BOOL wantsPersistentSnapshot
 @property  BKSDisplayRenderOverlayDescriptor *customOverlayDescriptor
 @property  NSURL *applicationLaunchURL
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRestartTransitionRequest setRequester:]
  -[SBRestartTransitionRequest delay]
  -[SBRestartTransitionRequest setDelay:]
  -[SBRestartTransitionRequest .cxx_destruct]
  -[SBRestartTransitionRequest succinctDescriptionBuilder]
  -[SBRestartTransitionRequest descriptionBuilderWithMultilinePrefix:]
  -[SBRestartTransitionRequest init]
  -[SBRestartTransitionRequest descriptionWithMultilinePrefix:]
  -[SBRestartTransitionRequest succinctDescription]
  -[SBRestartTransitionRequest reason]
  -[SBRestartTransitionRequest applicationLaunchURL]
  -[SBRestartTransitionRequest setReason:]
  -[SBRestartTransitionRequest copyWithZone:]
  -[SBRestartTransitionRequest requester]
  -[SBRestartTransitionRequest initWithRequester:reason:]
  -[SBRestartTransitionRequest setRestartType:]
  -[SBRestartTransitionRequest setWantsPersistentSnapshot:]
  -[SBRestartTransitionRequest setCustomOverlayDescriptor:]
  -[SBRestartTransitionRequest restartType]
  -[SBRestartTransitionRequest wantsPersistentSnapshot]
  -[SBRestartTransitionRequest customOverlayDescriptor]
  -[SBRestartTransitionRequest setApplicationLaunchURL:]


SBMousePointerManager : NSObject <BKSMousePointerDeviceObserver>
 @property  unsigned int systemCursorInteractionContextID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMousePointerManager setSystemCursorInteractionContextID:]
  -[SBMousePointerManager _handleAssistiveTouchEnabledDidChangeNotification]
  -[SBMousePointerManager .cxx_destruct]
  -[SBMousePointerManager _updateKeepAliveAssertion]
  -[SBMousePointerManager init]
  -[SBMousePointerManager systemCursorInteractionContextID]
  -[SBMousePointerManager addObserver:]
  -[SBMousePointerManager isHardwarePointingDeviceAttached]
  -[SBMousePointerManager _notifyObserversPointingDeviceBecameAvailable:]
  -[SBMousePointerManager _setPointerUIDWithConnectedDeviceCount:]
  -[SBMousePointerManager mousePointerDevicesDidChange:]
  -[SBMousePointerManager dealloc]
  -[SBMousePointerManager removeObserver:]


_SBProximityTouchHandlingWindow : SBFTouchPassThroughWindow

_SBProximityTouchHandlingView : UIView
  // instance methods
  -[_SBProximityTouchHandlingView hitTest:withEvent:]


_SBProximityTouchHandlingViewController : UIViewController
  // instance methods
  -[_SBProximityTouchHandlingViewController preferredInterfaceOrientationForPresentation]
  -[_SBProximityTouchHandlingViewController _view]
  -[_SBProximityTouchHandlingViewController shouldAutorotate]
  -[_SBProximityTouchHandlingViewController loadView]
  -[_SBProximityTouchHandlingViewController supportedInterfaceOrientations]


SBNotchedStatusBarProximityBacklightPolicy : SBDefaultProximityBacklightPolicy <SBNotchedStatusBarProximityBacklightPolicyEnablementConditionDelegate, _SBProximityTouchHandlingDelegate>
 @property  SBProximitySettings *_proximitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNotchedStatusBarProximityBacklightPolicy .cxx_destruct]
  -[SBNotchedStatusBarProximityBacklightPolicy dealloc]
  -[SBNotchedStatusBarProximityBacklightPolicy didHitAllowedRegion:]
  -[SBNotchedStatusBarProximityBacklightPolicy initWithBacklightController:]
  -[SBNotchedStatusBarProximityBacklightPolicy _scheduleBacklightFactorToZeroAfterDebounceDuration:]
  -[SBNotchedStatusBarProximityBacklightPolicy _createNewEnablementCondition]
  -[SBNotchedStatusBarProximityBacklightPolicy _debounceDurationForNumberOfTouchesReceivedWithObjectInProximity:]
  -[SBNotchedStatusBarProximityBacklightPolicy _setHandleTouchesIfNecessary:]
  -[SBNotchedStatusBarProximityBacklightPolicy _proximitySettings]
  -[SBNotchedStatusBarProximityBacklightPolicy condition:enablementDidChange:]
  -[SBNotchedStatusBarProximityBacklightPolicy proximitySensorManager:objectWithinProximityDidChange:]
  -[SBNotchedStatusBarProximityBacklightPolicy _setProximitySettings:]


SBWallpaperAggdLogger : NSObject
  // instance methods
  -[SBWallpaperAggdLogger .cxx_destruct]
  -[SBWallpaperAggdLogger init]
  -[SBWallpaperAggdLogger incrementIrisPlayCount]
  -[SBWallpaperAggdLogger _valueString]
  -[SBWallpaperAggdLogger _clearAggdKeysForLocations:]
  -[SBWallpaperAggdLogger updateWallpaperAggdKeysForLocations:withHasVideo:hasProcedural:name:]
  -[SBWallpaperAggdLogger saveWallpaperAggdCurrentValues]
  -[SBWallpaperAggdLogger _bucketedPlayCount]
  -[SBWallpaperAggdLogger _resetPlayCountDate]


SBSystemAnimationDomain : PTDomain
  // class methods
  +[SBSystemAnimationDomain domainGroupName]
  +[SBSystemAnimationDomain rootSettings]
  +[SBSystemAnimationDomain domainName]
  +[SBSystemAnimationDomain rootSettingsClass]


SBRemoteTransientOverlayViewController : SBTransientOverlayViewController <SBRemoteTransientOverlayHostViewControllerDelegate, SBIdleTimerCoordinating>
 @property  BOOL activatingForSiri
 @property  BOOL isScreenshotMarkup
 @property  BOOL shouldInvalidateWhenDeactivated
 @property  BOOL switcherEligible
 @property  long long preferredDismissalAnimationStyle
 @property  <SBRemoteTransientOverlayViewControllerDelegate> *delegate
 @property  long long wallpaperVariant
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBRemoteTransientOverlayViewController requestViewControllerForAlertDefinition:connectionHandler:]

  // instance methods
  -[SBRemoteTransientOverlayViewController preferredStatusBarStyle]
  -[SBRemoteTransientOverlayViewController preferredWhitePointAdaptivityStyle]
  -[SBRemoteTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBRemoteTransientOverlayViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBRemoteTransientOverlayViewController setContainerOrientation:]
  -[SBRemoteTransientOverlayViewController idleTimerProvider:didProposeBehavior:forReason:]
  -[SBRemoteTransientOverlayViewController setIdleTimerCoordinator:]
  -[SBRemoteTransientOverlayViewController handleVolumeUpButtonPress]
  -[SBRemoteTransientOverlayViewController handleHomeButtonDoublePress]
  -[SBRemoteTransientOverlayViewController didInvalidate]
  -[SBRemoteTransientOverlayViewController handleHomeButtonPress]
  -[SBRemoteTransientOverlayViewController handleLockButtonPress]
  -[SBRemoteTransientOverlayViewController handleVolumeDownButtonPress]
  -[SBRemoteTransientOverlayViewController handleHeadsetButtonPress:]
  -[SBRemoteTransientOverlayViewController handleHomeButtonLongPress]
  -[SBRemoteTransientOverlayViewController .cxx_destruct]
  -[SBRemoteTransientOverlayViewController viewDidLoad]
  -[SBRemoteTransientOverlayViewController canResignFirstResponder]
  -[SBRemoteTransientOverlayViewController shouldDisableSiri]
  -[SBRemoteTransientOverlayViewController succinctDescriptionBuilder]
  -[SBRemoteTransientOverlayViewController canBecomeFirstResponder]
  -[SBRemoteTransientOverlayViewController setDelegate:]
  -[SBRemoteTransientOverlayViewController viewDidAppear:]
  -[SBRemoteTransientOverlayViewController becomeFirstResponder]
  -[SBRemoteTransientOverlayViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBRemoteTransientOverlayViewController shouldAutorotate]
  -[SBRemoteTransientOverlayViewController resignFirstResponder]
  -[SBRemoteTransientOverlayViewController viewWillDisappear:]
  -[SBRemoteTransientOverlayViewController isActivatingForSiri]
  -[SBRemoteTransientOverlayViewController viewDidLayoutSubviews]
  -[SBRemoteTransientOverlayViewController shouldInvalidateWhenDeactivated]
  -[SBRemoteTransientOverlayViewController isSwitcherEligible]
  -[SBRemoteTransientOverlayViewController shouldDisableControlCenter]
  -[SBRemoteTransientOverlayViewController viewWillAppear:]
  -[SBRemoteTransientOverlayViewController isContentOpaque]
  -[SBRemoteTransientOverlayViewController delegate]
  -[SBRemoteTransientOverlayViewController dealloc]
  -[SBRemoteTransientOverlayViewController prefersStatusBarActivityItemVisible]
  -[SBRemoteTransientOverlayViewController serviceProcessIdentifier]
  -[SBRemoteTransientOverlayViewController _preferredStatusBarVisibility]
  -[SBRemoteTransientOverlayViewController childViewControllerForScreenEdgesDeferringSystemGestures]
  -[SBRemoteTransientOverlayViewController supportedInterfaceOrientations]
  -[SBRemoteTransientOverlayViewController handleDoubleHeightStatusBarTap]
  -[SBRemoteTransientOverlayViewController viewDidDisappear:]
  -[SBRemoteTransientOverlayViewController childViewControllerForHomeIndicatorAutoHidden]
  -[SBRemoteTransientOverlayViewController _canShowWhileLocked]
  -[SBRemoteTransientOverlayViewController prepareForActivationWithContext:completion:]
  -[SBRemoteTransientOverlayViewController configureWithContext:completion:]
  -[SBRemoteTransientOverlayViewController didTransitionToAttachedToWindowedAccessory:windowedAccessoryCutoutFrameInScreen:]
  -[SBRemoteTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBRemoteTransientOverlayViewController beginIgnoringAppearanceUpdates]
  -[SBRemoteTransientOverlayViewController beginIgnoringContentOverlayInsetUpdates]
  -[SBRemoteTransientOverlayViewController endIgnoringAppearanceUpdates]
  -[SBRemoteTransientOverlayViewController endIgnoringContentOverlayInsetUpdates]
  -[SBRemoteTransientOverlayViewController setWallpaperVariant:]
  -[SBRemoteTransientOverlayViewController allowsStackingOverlayContentAbove]
  -[SBRemoteTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBRemoteTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBRemoteTransientOverlayViewController shouldDisableBanners]
  -[SBRemoteTransientOverlayViewController shouldPendAlertItems]
  -[SBRemoteTransientOverlayViewController isScreenshotMarkup]
  -[SBRemoteTransientOverlayViewController hasServiceProcessIdentifier:]
  -[SBRemoteTransientOverlayViewController preserveInputViewsAnimated:]
  -[SBRemoteTransientOverlayViewController handleGestureDismissal]
  -[SBRemoteTransientOverlayViewController restoreInputViewsAnimated:]
  -[SBRemoteTransientOverlayViewController handlePictureInPictureDidBegin]
  -[SBRemoteTransientOverlayViewController _initWithContentViewController:]
  -[SBRemoteTransientOverlayViewController _configureWallpaperEffectViewWithAnimationSettings:]
  -[SBRemoteTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBRemoteTransientOverlayViewController preferredSceneDeactivationReasonValue]
  -[SBRemoteTransientOverlayViewController _needsWallpaperEffectView]
  -[SBRemoteTransientOverlayViewController preferredStatusBarStyleOverridesToCancel]
  -[SBRemoteTransientOverlayViewController shouldDisableReachability]
  -[SBRemoteTransientOverlayViewController shouldDisableOrientationUpdates]
  -[SBRemoteTransientOverlayViewController shouldDisableInteractiveScreenshotGesture]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangeContentOpaque:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangeGestureDismissalStyles:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangeFeaturePolicy:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangePreferredSceneDeactivationReasonValue:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangeShouldDisableOrientationUpdates:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerRequestsDeactivation:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerRequestsInvalidation:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewController:didTerminateWithError:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewController:requestsWallpaperEffectUpdateWithAnimationSettings:]
  -[SBRemoteTransientOverlayViewController defaultPreferredInterfaceOrientationForPresentationForRemoteTransientOverlayHostViewController:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewController:requestsActionForHandlingButtonEvents:]
  -[SBRemoteTransientOverlayViewController serviceEventDeferringToken]
  -[SBRemoteTransientOverlayViewController isPresentedByProcess:]
  -[SBRemoteTransientOverlayViewController pictureInPictureProcessIdentifier]
  -[SBRemoteTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBRemoteTransientOverlayViewController representedDisplayItem]
  -[SBRemoteTransientOverlayViewController _setMediaOverridePID:]
  -[SBRemoteTransientOverlayViewController preferredDismissalAnimationStyle]
  -[SBRemoteTransientOverlayViewController wallpaperVariant]


SBSystemNotesManager : NSObject <SBSystemNotesPresentationRequestServerDelegate, SBSystemNotesInteractionManagerDataSource, SBSystemNotesInteractionManagerDelegate, SBSystemNotesContentViewControllerDelegate, PTSettingsKeyPathObserver, SBSSystemNotesPresentationClientToServerInterface, MCProfileConnectionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemNotesManager settings:changedValueForKeyPath:]
  -[SBSystemNotesManager presentWithConfiguration:completion:]
  -[SBSystemNotesManager .cxx_destruct]
  -[SBSystemNotesManager activateConfiguration:]
  -[SBSystemNotesManager profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[SBSystemNotesManager dealloc]
  -[SBSystemNotesManager showOrHideForKeyCommand:]
  -[SBSystemNotesManager initWithControllerCoordinator:workspace:sceneManager:remoteKeyboards:fbSceneManager:sceneDeactivationManager:transientUIInteractionManager:systemPointerInteractionManager:keyboardSuppressionManager:keyboardDismissalManager:applicationController:systemGestureManager:idleTimerCoordinator:managedProfileConnection:]
  -[SBSystemNotesManager _reloadLaunchBundleID]
  -[SBSystemNotesManager _handleCreateNoteRequestWithMode:presentationSource:]
  -[SBSystemNotesManager _setPresentedConnection:]
  -[SBSystemNotesManager _currentPresentationMode]
  -[SBSystemNotesManager _dismissNotesWithReason:]
  -[SBSystemNotesManager _presentedContainerViewController]
  -[SBSystemNotesManager _handleCreateNoteRequestWithPresentationContext:error:]
  -[SBSystemNotesManager _presentedNotesContentViewController]
  -[SBSystemNotesManager _sceneBundleIdentifierForNewConfiguration]
  -[SBSystemNotesManager _createContentViewControllerForPresentationContext:error:]
  -[SBSystemNotesManager _addContentViewControllerToPIPHierarchy:contentViewLayoutSettings:]
  -[SBSystemNotesManager _dismissNotesWithReason:animated:]
  -[SBSystemNotesManager _sceneHandleForApplication:sceneSpecification:]
  -[SBSystemNotesManager _tearDownContainerViewControllerForSceneHandle:]
  -[SBSystemNotesManager server:targetForNewClientConnection:]
  -[SBSystemNotesManager server:connectionDidInvalidate:]
  -[SBSystemNotesManager presentedPIPContentViewControllerForInteractionManager:]
  -[SBSystemNotesManager presentedContainerViewControllerForInteractionManager:]
  -[SBSystemNotesManager currentContentViewLayoutSettingsForInteractionManager:]
  -[SBSystemNotesManager currentPresentationModeForInteractionManager:]
  -[SBSystemNotesManager launchBundleIDForInteractionManager:]
  -[SBSystemNotesManager interactionManager:requestsPresentationWithContext:]
  -[SBSystemNotesManager interactionManager:requestsUpdatePresentationMode:]
  -[SBSystemNotesManager interactionManager:requestsStartSuppressingKeyboardForReason:]
  -[SBSystemNotesManager interactionManager:requestsStopSuppressingKeyboardForReason:]
  -[SBSystemNotesManager interactionManager:requestsNotesDismissalForSource:animated:]
  -[SBSystemNotesManager interactionManager:requestsStashAssertionForReason:]
  -[SBSystemNotesManager contentViewControllerDidReceiveTapToExpand:]
  -[SBSystemNotesManager contentViewController:didChangeToPresentationMode:]
  -[SBSystemNotesManager contentViewControllerWantsDismissal:forReason:animated:]


SBFluidSwitcherSpaceTitleItem : NSObject <NSCopying>
 @property  SBDisplayItem *displayItem
 @property  NSString *titleText
 @property  NSString *subtitleText
 @property  UIImage *image
 @property  UIColor *titleTextColor
 @property  long long subtitleInterfaceStyle
 @property  BOOL showsMultiWindowIndicator

  // instance methods
  -[SBFluidSwitcherSpaceTitleItem displayItem]
  -[SBFluidSwitcherSpaceTitleItem image]
  -[SBFluidSwitcherSpaceTitleItem .cxx_destruct]
  -[SBFluidSwitcherSpaceTitleItem subtitleText]
  -[SBFluidSwitcherSpaceTitleItem setSubtitleInterfaceStyle:]
  -[SBFluidSwitcherSpaceTitleItem titleText]
  -[SBFluidSwitcherSpaceTitleItem isEqual:]
  -[SBFluidSwitcherSpaceTitleItem subtitleInterfaceStyle]
  -[SBFluidSwitcherSpaceTitleItem setSubtitleText:]
  -[SBFluidSwitcherSpaceTitleItem setShowsMultiWindowIndicator:]
  -[SBFluidSwitcherSpaceTitleItem initWithDisplayItem:]
  -[SBFluidSwitcherSpaceTitleItem titleTextColor]
  -[SBFluidSwitcherSpaceTitleItem setImage:]
  -[SBFluidSwitcherSpaceTitleItem setTitleText:]
  -[SBFluidSwitcherSpaceTitleItem copyWithZone:]
  -[SBFluidSwitcherSpaceTitleItem setTitleTextColor:]
  -[SBFluidSwitcherSpaceTitleItem showsMultiWindowIndicator]


SBUnlockedAlertItemPresenter : NSObject <SBAlertItemPresenter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUnlockedAlertItemPresenter presentsAlertItemsModally]
  -[SBUnlockedAlertItemPresenter presentAlertItem:animated:completion:]
  -[SBUnlockedAlertItemPresenter .cxx_destruct]
  -[SBUnlockedAlertItemPresenter canPresentMultipleAlertItemsSimultaneously]
  -[SBUnlockedAlertItemPresenter initWithSharedModalAlertItemPresenter:]
  -[SBUnlockedAlertItemPresenter dismissAlertItem:animated:completion:]


SBHomeScreenSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBHomeScreenSwitcherModifier .cxx_destruct]
  -[SBHomeScreenSwitcherModifier init]


_SBHomeScreenFloorSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[_SBHomeScreenFloorSwitcherModifier appLayoutsToResignActive]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[_SBHomeScreenFloorSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[_SBHomeScreenFloorSwitcherModifier visibleShelves]
  -[_SBHomeScreenFloorSwitcherModifier backgroundOpacityForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isContainerStatusBarVisible]
  -[_SBHomeScreenFloorSwitcherModifier wantsDockWindowLevelAssertion]
  -[_SBHomeScreenFloorSwitcherModifier plusButtonAlpha]
  -[_SBHomeScreenFloorSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[_SBHomeScreenFloorSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[_SBHomeScreenFloorSwitcherModifier homeScreenDimmingAlpha]
  -[_SBHomeScreenFloorSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[_SBHomeScreenFloorSwitcherModifier dockWindowLevel]
  -[_SBHomeScreenFloorSwitcherModifier wantsDockBehaviorAssertion]
  -[_SBHomeScreenFloorSwitcherModifier slideOverTongueDirection]
  -[_SBHomeScreenFloorSwitcherModifier homeScreenBackdropBlurType]
  -[_SBHomeScreenFloorSwitcherModifier frameForShelf:]
  -[_SBHomeScreenFloorSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isHomeAffordanceSupportedForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[_SBHomeScreenFloorSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[_SBHomeScreenFloorSwitcherModifier plusButtonStyle]
  -[_SBHomeScreenFloorSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier titleOpacityForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[_SBHomeScreenFloorSwitcherModifier shouldScrollViewBlockTouches]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[_SBHomeScreenFloorSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[_SBHomeScreenFloorSwitcherModifier wallpaperScale]
  -[_SBHomeScreenFloorSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier wantsSlideOverTongue]
  -[_SBHomeScreenFloorSwitcherModifier rotationAngleForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier slideOverTongueState]
  -[_SBHomeScreenFloorSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[_SBHomeScreenFloorSwitcherModifier homeScreenScale]
  -[_SBHomeScreenFloorSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier homeScreenAlpha]
  -[_SBHomeScreenFloorSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[_SBHomeScreenFloorSwitcherModifier switcherBackdropBlurProgress]
  -[_SBHomeScreenFloorSwitcherModifier shelfBackgroundBlurOpacity]
  -[_SBHomeScreenFloorSwitcherModifier wantsSwitcherBackdropBlur]
  -[_SBHomeScreenFloorSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[_SBHomeScreenFloorSwitcherModifier transactionCompletionOptions]
  -[_SBHomeScreenFloorSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[_SBHomeScreenFloorSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[_SBHomeScreenFloorSwitcherModifier shelfBackgroundBlurFrame]
  -[_SBHomeScreenFloorSwitcherModifier reopenClosedWindowsButtonScale]
  -[_SBHomeScreenFloorSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[_SBHomeScreenFloorSwitcherModifier wantsSwitcherDimmingView]
  -[_SBHomeScreenFloorSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[_SBHomeScreenFloorSwitcherModifier dockProgress]
  -[_SBHomeScreenFloorSwitcherModifier shadowOffsetForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier keyboardSuppressionMode]
  -[_SBHomeScreenFloorSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[_SBHomeScreenFloorSwitcherModifier clippingFrameForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[_SBHomeScreenFloorSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier lighteningAlphaForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier titleAndIconOpacityForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isScrollEnabled]
  -[_SBHomeScreenFloorSwitcherModifier isHomeScreenContentRequired]
  -[_SBHomeScreenFloorSwitcherModifier dockWindowLevelPriority]
  -[_SBHomeScreenFloorSwitcherModifier containerLeafAppLayoutForShelf:]
  -[_SBHomeScreenFloorSwitcherModifier headerStyleForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[_SBHomeScreenFloorSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[_SBHomeScreenFloorSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[_SBHomeScreenFloorSwitcherModifier neighboringAppLayoutsForFocusedAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier containerStatusBarAnimationDuration]
  -[_SBHomeScreenFloorSwitcherModifier animationAttributesForLayoutElement:]
  -[_SBHomeScreenFloorSwitcherModifier isFocusEnabledForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier switcherBackdropBlurType]
  -[_SBHomeScreenFloorSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier switcherDimmingViewBlocksTouches]
  -[_SBHomeScreenFloorSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[_SBHomeScreenFloorSwitcherModifier scaleForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[_SBHomeScreenFloorSwitcherModifier homeScreenBackdropBlurProgress]
  -[_SBHomeScreenFloorSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isIndexRubberbandableForSwipeToKill:]
  -[_SBHomeScreenFloorSwitcherModifier switcherDimmingAlpha]
  -[_SBHomeScreenFloorSwitcherModifier dockUpdateMode]
  -[_SBHomeScreenFloorSwitcherModifier frameForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier tintStyleForLayoutRole:inAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier wantsHomeScreenPointerInteractions]
  -[_SBHomeScreenFloorSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier blurViewIconScaleForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isWallpaperRequiredForSwitcher]
  -[_SBHomeScreenFloorSwitcherModifier visibleAppLayouts]
  -[_SBHomeScreenFloorSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[_SBHomeScreenFloorSwitcherModifier isSwitcherWindowVisible]
  -[_SBHomeScreenFloorSwitcherModifier contentViewScale]
  -[_SBHomeScreenFloorSwitcherModifier wallpaperStyle]
  -[_SBHomeScreenFloorSwitcherModifier cornerRadiiForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutsToCacheSnapshots]
  -[_SBHomeScreenFloorSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[_SBHomeScreenFloorSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[_SBHomeScreenFloorSwitcherModifier topMostLayoutElements]


SBHUDSettings : PTSettings
 @property  float defaultHUDPresentationAnimationDuration

  // class methods
  +[SBHUDSettings settingsControllerModule]

  // instance methods
  -[SBHUDSettings setDefaultHUDPresentationAnimationDuration:]
  -[SBHUDSettings setDefaultValues]
  -[SBHUDSettings defaultHUDPresentationAnimationDuration]


SBEntityRemovalCommitFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalCommitFloatingSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier transitionWillBegin]
  -[SBEntityRemovalCommitFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier frameForIndex:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalCommitFloatingSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalCommitFloatingSwitcherModifier _layoutSettings]
  -[SBEntityRemovalCommitFloatingSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier topMostLayoutElements]
  -[SBEntityRemovalCommitFloatingSwitcherModifier containerViewBounds]
  -[SBEntityRemovalCommitFloatingSwitcherModifier _isIndexFromAppLayout:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier _isIndexToAppLayout:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:floatingConfiguration:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier _toBeRemovedFinalScale]
  -[SBEntityRemovalCommitFloatingSwitcherModifier isContentStatusBarVisible]


SBAccessibilityWindowHostingControllerServer : NSObject <BSServiceConnectionListenerDelegate, SBSAccessibilityWindowHostingClientToServerInterface, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAccessibilityWindowHostingControllerServer listener:didReceiveConnection:withContext:]
  -[SBAccessibilityWindowHostingControllerServer .cxx_destruct]
  -[SBAccessibilityWindowHostingControllerServer registerWindowWithContextID:atLevel:]
  -[SBAccessibilityWindowHostingControllerServer unregisterWindowWithContextID:]
  -[SBAccessibilityWindowHostingControllerServer init]
  -[SBAccessibilityWindowHostingControllerServer activate]
  -[SBAccessibilityWindowHostingControllerServer invalidate]
  -[SBAccessibilityWindowHostingControllerServer _handleDisconnectForServiceConnection:]
  -[SBAccessibilityWindowHostingControllerServer _beginHostingWindowWithContextID:atLevel:]
  -[SBAccessibilityWindowHostingControllerServer _endHostingWindowWithContextID:]


_SBAccessibilityWindowHostingControllerServerTarget : NSObject
 @property  BSServiceConnection *connection
 @property  <SBSAccessibilityWindowHostingClientToServerInterface> *proxyInterface

  // class methods
  +[_SBAccessibilityWindowHostingControllerServerTarget currentTarget]

  // instance methods
  -[_SBAccessibilityWindowHostingControllerServerTarget _performBlock:]
  -[_SBAccessibilityWindowHostingControllerServerTarget proxyInterface]
  -[_SBAccessibilityWindowHostingControllerServerTarget setProxyInterface:]
  -[_SBAccessibilityWindowHostingControllerServerTarget .cxx_destruct]
  -[_SBAccessibilityWindowHostingControllerServerTarget registerWindowWithContextID:atLevel:]
  -[_SBAccessibilityWindowHostingControllerServerTarget unregisterWindowWithContextID:]
  -[_SBAccessibilityWindowHostingControllerServerTarget connection]
  -[_SBAccessibilityWindowHostingControllerServerTarget initWithConnection:proxyInterface:]


SBAppUnderFloatingSwitcherTransitionSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBAppUnderFloatingSwitcherTransitionSwitcherModifier asyncRenderingAttributesForAppLayout:]


_SBLoadApplicationResult : NSObject
  // instance methods
  -[_SBLoadApplicationResult .cxx_destruct]


SBApplicationController : NSObject <SBApplicationRestrictionDataSource, XBApplicationProviding, SBApplicationLifecycleObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationController sharedInstance]
  +[SBApplicationController sharedInstanceIfExists]
  +[SBApplicationController _setClearAllLegacySnapshotsWhenLoaded:]
  +[SBApplicationController _setClearSystemAppSnapshotsWhenLoaded:]
  +[SBApplicationController _sharedInstanceCreateIfNecessary:]

  // instance methods
  -[SBApplicationController allBundleIdentifiers]
  -[SBApplicationController applicationWithBundleIdentifier:]
  -[SBApplicationController _appInfosToBundleIDs:]
  -[SBApplicationController applicationsReplaced:]
  -[SBApplicationController restrictionController]
  -[SBApplicationController waitForUninstallsToComplete:]
  -[SBApplicationController applicationVisibilityMayHaveChanged]
  -[SBApplicationController requestUninstallApplicationWithBundleIdentifier:options:withCompletion:]
  -[SBApplicationController _sendInstalledAppsDidChangeNotification:removed:replaced:updated:]
  -[SBApplicationController cameraApplication]
  -[SBApplicationController requestUninstallApplication:options:withCompletion:]
  -[SBApplicationController mobilePhone]
  -[SBApplicationController dataActivationApplication]
  -[SBApplicationController .cxx_destruct]
  -[SBApplicationController _lock_applicationWithBundleIdentifier:]
  -[SBApplicationController _loadApplicationFromApplicationInfo:]
  -[SBApplicationController uninstallApplication:]
  -[SBApplicationController _updateVisibilityOverridesInBackground]
  -[SBApplicationController inCallServiceApp]
  -[SBApplicationController alwaysAvailableApplicationBundleIdentifiers]
  -[SBApplicationController applicationWithPid:]
  -[SBApplicationController applicationsRemoved:]
  -[SBApplicationController _finishDeferredMajorVersionMigrationTasks_FlushSystemSnapshots]
  -[SBApplicationController init]
  -[SBApplicationController musicApplication]
  -[SBApplicationController applicationRestrictionsMayHaveChanged]
  -[SBApplicationController iPodOutApplication]
  -[SBApplicationController webApplication]
  -[SBApplicationController allSplashBoardApplications]
  -[SBApplicationController bundleIdentifiersWithVisibilityOverrideHidden]
  -[SBApplicationController _loadApplications:remove:]
  -[SBApplicationController recentlyUsedBundleIDs]
  -[SBApplicationController allInstalledApplications]
  -[SBApplicationController applicationsUpdated:]
  -[SBApplicationController _allApplicationsFilteredBySystem:]
  -[SBApplicationController clockApplication]
  -[SBApplicationController _appClassForInfo:]
  -[SBApplicationController applicationsDemoted:]
  -[SBApplicationController _finishDeferredMajorVersionMigrationTasks_FlushLegacySnapshots]
  -[SBApplicationController _updateVisibilityOverrides]
  -[SBApplicationController allApplications]
  -[SBApplicationController _memoryWarningReceived]
  -[SBApplicationController dealloc]
  -[SBApplicationController _appLibrary]
  -[SBApplicationController runningApplications]
  -[SBApplicationController mapsApplication]
  -[SBApplicationController faceTimeApp]
  -[SBApplicationController _appLibraryObserver]
  -[SBApplicationController _removeApplicationsFromModelWithBundleIdentifier:forInstall:withReason:]
  -[SBApplicationController setupApplication]
  -[SBApplicationController splashBoardSystemApplications]
  -[SBApplicationController _preLoadApplications]
  -[SBApplicationController _splashBoardController]
  -[SBApplicationController testFlightApplication]
  -[SBApplicationController loginApplication]
  -[SBApplicationController applicationsAdded:]
  -[SBApplicationController notesApplication]


SBUnsupportedURLAlertItem : SBDismissOnlyAlertItem

SBDefaultAuthenticationPolicy : NSObject <SBFAuthenticationPolicy>
 @property  SecureBackup *secureBackupHelper
 @property  SBiCloudPasscodeRequirementLockoutController *iCloudPasscodeRequirementLockoutController
 @property  SBSoftwareUpdatePasscodePolicyManager *softwareUpdatePasscodePolicyManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDefaultAuthenticationPolicy .cxx_destruct]
  -[SBDefaultAuthenticationPolicy softwareUpdatePasscodePolicyManager]
  -[SBDefaultAuthenticationPolicy usesSecureMode]
  -[SBDefaultAuthenticationPolicy wipeDeviceWithReason:]
  -[SBDefaultAuthenticationPolicy shouldClearBlockStateOnSync]
  -[SBDefaultAuthenticationPolicy cachePasscode:]
  -[SBDefaultAuthenticationPolicy clearPasscodeCache]
  -[SBDefaultAuthenticationPolicy allowAuthenticationRevocation]
  -[SBDefaultAuthenticationPolicy passcodeAuthenticationFailedWithError:]
  -[SBDefaultAuthenticationPolicy setSoftwareUpdatePasscodePolicyManager:]
  -[SBDefaultAuthenticationPolicy setICloudPasscodeRequirementLockoutController:]
  -[SBDefaultAuthenticationPolicy iCloudPasscodeRequirementLockoutController]
  -[SBDefaultAuthenticationPolicy _secureBackupHelper]
  -[SBDefaultAuthenticationPolicy _setSecureBackupHelper:]


SBShelfRootSwitcherModifier : SBFluidSwitcherRootSwitcherModifier <SBShelfExpansionSwitcherModifierDelegate>
 @property  unsigned long displayMode
 @property  unsigned long appearanceState
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} targetFrame
 @property  unsigned long animationStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBShelfRootSwitcherModifier appLayoutsToResignActive]
  -[SBShelfRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBShelfRootSwitcherModifier keyboardSuppressionMode]
  -[SBShelfRootSwitcherModifier displayMode]
  -[SBShelfRootSwitcherModifier headerStyleForIndex:]
  -[SBShelfRootSwitcherModifier setAnimationStyle:]
  -[SBShelfRootSwitcherModifier frameForIndex:]
  -[SBShelfRootSwitcherModifier tintStyleForLayoutRole:inAppLayout:]
  -[SBShelfRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBShelfRootSwitcherModifier setDelegate:]
  -[SBShelfRootSwitcherModifier didMoveToParentModifier:]
  -[SBShelfRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBShelfRootSwitcherModifier floatingDockHeight]
  -[SBShelfRootSwitcherModifier floorModifierForGestureEvent:]
  -[SBShelfRootSwitcherModifier setDisplayMode:]
  -[SBShelfRootSwitcherModifier defaultBoundsForAppLayout:interfaceOrientation:]
  -[SBShelfRootSwitcherModifier targetFrame]
  -[SBShelfRootSwitcherModifier transitionModifierForMainTransitionEvent:]
  -[SBShelfRootSwitcherModifier containerViewBounds]
  -[SBShelfRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBShelfRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBShelfRootSwitcherModifier setTargetFrame:]
  -[SBShelfRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBShelfRootSwitcherModifier animationStyle]
  -[SBShelfRootSwitcherModifier appearanceState]
  -[SBShelfRootSwitcherModifier setAppearanceState:]
  -[SBShelfRootSwitcherModifier focusedAppModifierForUpdateFocusedAppLayoutEvent:]
  -[SBShelfRootSwitcherModifier orderedVisibleAppLayoutsForShelfExpansionModifier:]
  -[SBShelfRootSwitcherModifier _rebuildContainerBounds]


SBRotationSwitcherModifier : SBTransitionSwitcherModifier
 @property  SBAppLayout *appLayout
 @property  long long fromInterfaceOrientation
 @property  long long toInterfaceOrientation

  // instance methods
  -[SBRotationSwitcherModifier appLayoutsToResignActive]
  -[SBRotationSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBRotationSwitcherModifier appLayout]
  -[SBRotationSwitcherModifier transitionWillBegin]
  -[SBRotationSwitcherModifier rotationAngleForIndex:]
  -[SBRotationSwitcherModifier keyboardSuppressionMode]
  -[SBRotationSwitcherModifier animationAttributesForLayoutElement:]
  -[SBRotationSwitcherModifier .cxx_destruct]
  -[SBRotationSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBRotationSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBRotationSwitcherModifier fromInterfaceOrientation]
  -[SBRotationSwitcherModifier toInterfaceOrientation]
  -[SBRotationSwitcherModifier initWithTransitionID:appLayout:fromInterfaceOrientation:toInterfaceOrientation:]


SBAppSwitcherOrbGestureSettings : PTSettings
 @property  BOOL useOrbGesture
 @property  double orbGestureRegionMax
 @property  double maxIconScrollProgressAllowed
 @property  double appToAppCurveMinimum
 @property  double homeToAppCurveMinimum
 @property  double minPanTranslation
 @property  double maxPopPanTranslation
 @property  double additionalThrowDisplacement
 @property  double commitToPreviousAppTranslation
 @property  double commitToNextAppTranslation
 @property  double dimmingValue
 @property  double forcePeekAdjustApex
 @property  double forceAdjustMax
 @property  double maxAverageBreathingVelocity
 @property  double maxBreathingVelocityInterval
 @property  BOOL canPop
 @property  BOOL forceDrivesInitialProgress
 @property  BOOL canPlayInitialHaptic
 @property  BOOL canPlayCommitHaptic
 @property  SBAppSwitcherOrbGestureAnimationSettings *animationSettings

  // class methods
  +[SBAppSwitcherOrbGestureSettings settingsControllerModule]

  // instance methods
  -[SBAppSwitcherOrbGestureSettings setAnimationSettings:]
  -[SBAppSwitcherOrbGestureSettings animationSettings]
  -[SBAppSwitcherOrbGestureSettings .cxx_destruct]
  -[SBAppSwitcherOrbGestureSettings setDefaultValues]
  -[SBAppSwitcherOrbGestureSettings canPop]
  -[SBAppSwitcherOrbGestureSettings commitToNextAppTranslation]
  -[SBAppSwitcherOrbGestureSettings dimmingValue]
  -[SBAppSwitcherOrbGestureSettings appToAppCurveMinimum]
  -[SBAppSwitcherOrbGestureSettings homeToAppCurveMinimum]
  -[SBAppSwitcherOrbGestureSettings valueAlongDefaultForcePressCurveWithMinY:progress:fromHomeScreen:]
  -[SBAppSwitcherOrbGestureSettings maxPopPanTranslation]
  -[SBAppSwitcherOrbGestureSettings forceDrivesInitialProgress]
  -[SBAppSwitcherOrbGestureSettings forcePeekAdjustApex]
  -[SBAppSwitcherOrbGestureSettings forceAdjustMax]
  -[SBAppSwitcherOrbGestureSettings maxAverageBreathingVelocity]
  -[SBAppSwitcherOrbGestureSettings setUseOrbGesture:]
  -[SBAppSwitcherOrbGestureSettings setOrbGestureRegionMax:]
  -[SBAppSwitcherOrbGestureSettings setMaxIconScrollProgressAllowed:]
  -[SBAppSwitcherOrbGestureSettings setAppToAppCurveMinimum:]
  -[SBAppSwitcherOrbGestureSettings setHomeToAppCurveMinimum:]
  -[SBAppSwitcherOrbGestureSettings setMinPanTranslation:]
  -[SBAppSwitcherOrbGestureSettings setMaxPopPanTranslation:]
  -[SBAppSwitcherOrbGestureSettings setAdditionalThrowDisplacement:]
  -[SBAppSwitcherOrbGestureSettings setCommitToPreviousAppTranslation:]
  -[SBAppSwitcherOrbGestureSettings setCommitToNextAppTranslation:]
  -[SBAppSwitcherOrbGestureSettings setDimmingValue:]
  -[SBAppSwitcherOrbGestureSettings setForceAdjustMax:]
  -[SBAppSwitcherOrbGestureSettings setForcePeekAdjustApex:]
  -[SBAppSwitcherOrbGestureSettings setMaxAverageBreathingVelocity:]
  -[SBAppSwitcherOrbGestureSettings setMaxBreathingVelocityInterval:]
  -[SBAppSwitcherOrbGestureSettings setCanPop:]
  -[SBAppSwitcherOrbGestureSettings setForceDrivesInitialProgress:]
  -[SBAppSwitcherOrbGestureSettings setCanPlayInitialHaptic:]
  -[SBAppSwitcherOrbGestureSettings setCanPlayCommitHaptic:]
  -[SBAppSwitcherOrbGestureSettings useOrbGesture]
  -[SBAppSwitcherOrbGestureSettings orbGestureRegionMax]
  -[SBAppSwitcherOrbGestureSettings maxIconScrollProgressAllowed]
  -[SBAppSwitcherOrbGestureSettings minPanTranslation]
  -[SBAppSwitcherOrbGestureSettings additionalThrowDisplacement]
  -[SBAppSwitcherOrbGestureSettings commitToPreviousAppTranslation]
  -[SBAppSwitcherOrbGestureSettings maxBreathingVelocityInterval]
  -[SBAppSwitcherOrbGestureSettings canPlayInitialHaptic]
  -[SBAppSwitcherOrbGestureSettings canPlayCommitHaptic]


SBSwitcherAppSuggestionBannerView : PLPlatterView
 @property  BOOL highlighted
 @property  SBBestAppSuggestion *representedAppSuggestion
 @property  unsigned long style

  // instance methods
  -[SBSwitcherAppSuggestionBannerView setHighlighted:]
  -[SBSwitcherAppSuggestionBannerView _titleFont]
  -[SBSwitcherAppSuggestionBannerView _textStyle]
  -[SBSwitcherAppSuggestionBannerView traitCollectionDidChange:]
  -[SBSwitcherAppSuggestionBannerView .cxx_destruct]
  -[SBSwitcherAppSuggestionBannerView _configureConstraints]
  -[SBSwitcherAppSuggestionBannerView initWithRecipe:]
  -[SBSwitcherAppSuggestionBannerView isHighlighted]
  -[SBSwitcherAppSuggestionBannerView representedAppSuggestion]
  -[SBSwitcherAppSuggestionBannerView _descriptionFont]
  -[SBSwitcherAppSuggestionBannerView _createDescriptionLabelForSuggestion:]
  -[SBSwitcherAppSuggestionBannerView _createDarkeningView]
  -[SBSwitcherAppSuggestionBannerView _createIconViewForSuggestion:]
  -[SBSwitcherAppSuggestionBannerView _updateAppearanceForCurrentUserInterfaceStyle]
  -[SBSwitcherAppSuggestionBannerView initWithFrame:appSuggestion:style:]
  -[SBSwitcherAppSuggestionBannerView _createAppLabelForSuggestion:]
  -[SBSwitcherAppSuggestionBannerView style]
  -[SBSwitcherAppSuggestionBannerView _descriptionStringForSuggestion:]
  -[SBSwitcherAppSuggestionBannerView _firstWakeGreetingString]
  -[SBSwitcherAppSuggestionBannerView _borderView]
  -[SBSwitcherAppSuggestionBannerView _iconImageFromAppWithBundleIdentifier:withIconImageCache:]
  -[SBSwitcherAppSuggestionBannerView _isSingleLine]
  -[SBSwitcherAppSuggestionBannerView _meCardShortName]
  -[SBSwitcherAppSuggestionBannerView _appTitleForSuggestion:]


SBEntityRemovalDeleteFloatingSwitcherModifier : SBTransitionSwitcherModifier
 @property  BOOL blursFromAppLayout

  // instance methods
  -[SBEntityRemovalDeleteFloatingSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier transitionWillBegin]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier transitionDidEnd]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier frameForIndex:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier _layoutSettings]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier topMostLayoutElements]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier transitionWillUpdate]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier containerViewBounds]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier _opacitySettings]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier _isIndexFromAppLayout:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier _isIndexToAppLayout:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:floatingConfiguration:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier blursFromAppLayout]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier setBlursFromAppLayout:]


SBAVSystemControllerCache : NSObject
 @property  BOOL fullyMuted
 @property  BOOL audioSessionPlaying
 @property  NSString *activeAudioRoute
 @property  NSDictionary *activeAudioRouteInfo
 @property  NSArray *pickableRoutes
 @property  NSArray *activeOutputDevices
 @property  BOOL airplayDisplayActive

  // class methods
  +[SBAVSystemControllerCache sharedInstance]

  // instance methods
  -[SBAVSystemControllerCache activeAudioRoute]
  -[SBAVSystemControllerCache _queue_backgroundQueryCancellationSignalForNotificationCreatingIfNecessary:]
  -[SBAVSystemControllerCache fetchPickableRoutesWithCompletion:]
  -[SBAVSystemControllerCache initWithCallOutQueue:notificationCenter:dataProviderInitializer:]
  -[SBAVSystemControllerCache .cxx_destruct]
  -[SBAVSystemControllerCache _queue_updateActiveOutputDevicesFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache isAirplayDisplayActive]
  -[SBAVSystemControllerCache _queue_updatePickableRoutesFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache pickableRoutes]
  -[SBAVSystemControllerCache init]
  -[SBAVSystemControllerCache isFullyMuted]
  -[SBAVSystemControllerCache _serverDied:]
  -[SBAVSystemControllerCache _queue_updateFullyMutedFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache addObserver:]
  -[SBAVSystemControllerCache _queue_notifyObserversWithBlock:]
  -[SBAVSystemControllerCache _queryActiveOutputDevicesFromContext:]
  -[SBAVSystemControllerCache _queue_updateAirplayDisplayActiveFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache activeOutputDevices]
  -[SBAVSystemControllerCache _queue_signalBackgroundQueryCancellationForNotification:]
  -[SBAVSystemControllerCache _receiveUpdatedValueFromNotification:]
  -[SBAVSystemControllerCache activeAudioRouteInfo]
  -[SBAVSystemControllerCache dealloc]
  -[SBAVSystemControllerCache isAudioSessionPlaying]
  -[SBAVSystemControllerCache _queue_updateActiveAudioRouteFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache _queue_rebuildCache]
  -[SBAVSystemControllerCache _queue_updateAudioSessionPlayingFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]


SBScreenshotManager : NSObject
 @property  SBSceneManagerCoordinator *sceneManagerCoordinator
 @property  _SBScreenshotPersistenceCoordinator *persistenceCoordinator
 @property  <SBScreenshotManagerDataSource> *dataSource

  // instance methods
  -[SBScreenshotManager initWithDataSource:]
  -[SBScreenshotManager .cxx_destruct]
  -[SBScreenshotManager dataSource]
  -[SBScreenshotManager saveScreenshots]
  -[SBScreenshotManager _initWithDataSource:persistenceCoordinator:sceneManagerCoordinator:]
  -[SBScreenshotManager saveScreenshotsWithCompletion:]
  -[SBScreenshotManager _fetchEligibleScreenshotProvidersForSnapshotting]
  -[SBScreenshotManager _providerForScreen:]
  -[SBScreenshotManager _sceneManagerCoordinator]
  -[SBScreenshotManager _setSceneManagerCoordinator:]
  -[SBScreenshotManager _persistenceCoordinator]
  -[SBScreenshotManager _setPersistenceCoordinator:]


SBSlideFloatingAppFromBottomSwitcherModifier : SBTransitionSwitcherModifier <BSDescriptionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSlideFloatingAppFromBottomSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBSlideFloatingAppFromBottomSwitcherModifier transitionWillBegin]
  -[SBSlideFloatingAppFromBottomSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSlideFloatingAppFromBottomSwitcherModifier scaleForIndex:]
  -[SBSlideFloatingAppFromBottomSwitcherModifier frameForIndex:]
  -[SBSlideFloatingAppFromBottomSwitcherModifier visibleAppLayouts]
  -[SBSlideFloatingAppFromBottomSwitcherModifier .cxx_destruct]
  -[SBSlideFloatingAppFromBottomSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBSlideFloatingAppFromBottomSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBSlideFloatingAppFromBottomSwitcherModifier initWithTransitionID:fromFloatingAppLayout:toFloatingAppLayout:]


SBPasscodeAlertItem : SBAlertItem <UITextFieldDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPasscodeAlertItem .cxx_destruct]
  -[SBPasscodeAlertItem textField:shouldChangeCharactersInRange:replacementString:]
  -[SBPasscodeAlertItem shouldShowInLockScreen]
  -[SBPasscodeAlertItem dealloc]
  -[SBPasscodeAlertItem configure:requirePasscodeForActions:]
  -[SBPasscodeAlertItem submitPassword]
  -[SBPasscodeAlertItem _clearAlertController]
  -[SBPasscodeAlertItem configureTextField:]
  -[SBPasscodeAlertItem makeEmergencyCall]
  -[SBPasscodeAlertItem initWithPasscodeMode:unlockScreenType:simplePasscodeType:]
  -[SBPasscodeAlertItem _setErrorString:]
  -[SBPasscodeAlertItem didEndCall]


SBPasscodeComplianceAlertItem : SBAlertItem
  // instance methods
  -[SBPasscodeComplianceAlertItem .cxx_destruct]
  -[SBPasscodeComplianceAlertItem shouldShowInLockScreen]
  -[SBPasscodeComplianceAlertItem configure:requirePasscodeForActions:]
  -[SBPasscodeComplianceAlertItem initWithTitle:message:continueButtonTitle:cancelButtonTitle:]


SBPasscodeController : NSObject
  // class methods
  +[SBPasscodeController sharedInstance]

  // instance methods
  -[SBPasscodeController .cxx_destruct]
  -[SBPasscodeController _abort]
  -[SBPasscodeController init]
  -[SBPasscodeController _passwordEntered:]
  -[SBPasscodeController dealloc]
  -[SBPasscodeController _userWantsToComplyNow:]
  -[SBPasscodeController _startListeningToManagedConfigurationNotification]
  -[SBPasscodeController _stopListeningToManagedConfigurationNotification]
  -[SBPasscodeController _fetchAndSetUnlockScreenTypeForNewPasscode:]
  -[SBPasscodeController _presentPasscodeAlertItemWithMode:alertItemErrorString:unlockScreenType:]
  -[SBPasscodeController _stopListeningToRestoreCompletedAlertStateChangedNotifications]
  -[SBPasscodeController checkPasscodeCompliance]
  -[SBPasscodeController forceUserToChangePasscode]
  -[SBPasscodeController _stopListeningToTelephonyNotifications]
  -[SBPasscodeController _didEndCall]
  -[SBPasscodeController _isRestoreCompletedAlertActive]
  -[SBPasscodeController _activateComplianceAlert]
  -[SBPasscodeController _startListeningToTelephonyNotifications]
  -[SBPasscodeController _startListeningToRestoreCompletedAlertStateChangedNotifications]


SBCommunicationPolicyManager : NSObject
  // class methods
  +[SBCommunicationPolicyManager sharedInstance]

  // instance methods
  -[SBCommunicationPolicyManager .cxx_destruct]
  -[SBCommunicationPolicyManager init]
  -[SBCommunicationPolicyManager shouldScreenTimeSuppressNotificationsForBundleIdentifier:]
  -[SBCommunicationPolicyManager dealloc]
  -[SBCommunicationPolicyManager observeValueForKeyPath:ofObject:change:context:]


SBRoutingSwitcherModifier : SBSwitcherModifier <SBChainableModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRoutingSwitcherModifier appLayoutsToResignActive]
  -[SBRoutingSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[SBRoutingSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBRoutingSwitcherModifier visibleShelves]
  -[SBRoutingSwitcherModifier backgroundOpacityForIndex:]
  -[SBRoutingSwitcherModifier isContainerStatusBarVisible]
  -[SBRoutingSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBRoutingSwitcherModifier plusButtonAlpha]
  -[SBRoutingSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[SBRoutingSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBRoutingSwitcherModifier homeScreenDimmingAlpha]
  -[SBRoutingSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[SBRoutingSwitcherModifier dockWindowLevel]
  -[SBRoutingSwitcherModifier wantsDockBehaviorAssertion]
  -[SBRoutingSwitcherModifier slideOverTongueDirection]
  -[SBRoutingSwitcherModifier homeScreenBackdropBlurType]
  -[SBRoutingSwitcherModifier frameForShelf:]
  -[SBRoutingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBRoutingSwitcherModifier isHomeAffordanceSupportedForAppLayout:]
  -[SBRoutingSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBRoutingSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBRoutingSwitcherModifier bounceIconInitialFrame]
  -[SBRoutingSwitcherModifier settingsForAnimatableProperty:]
  -[SBRoutingSwitcherModifier plusButtonStyle]
  -[SBRoutingSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[SBRoutingSwitcherModifier titleOpacityForIndex:]
  -[SBRoutingSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBRoutingSwitcherModifier shouldScrollViewBlockTouches]
  -[SBRoutingSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[SBRoutingSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBRoutingSwitcherModifier wallpaperScale]
  -[SBRoutingSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[SBRoutingSwitcherModifier wantsSlideOverTongue]
  -[SBRoutingSwitcherModifier rotationAngleForIndex:]
  -[SBRoutingSwitcherModifier slideOverTongueState]
  -[SBRoutingSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBRoutingSwitcherModifier homeScreenScale]
  -[SBRoutingSwitcherModifier fullyPresentedFrameForIndex:frame:]
  -[SBRoutingSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[SBRoutingSwitcherModifier homeScreenAlpha]
  -[SBRoutingSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBRoutingSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBRoutingSwitcherModifier switcherBackdropBlurProgress]
  -[SBRoutingSwitcherModifier shelfBackgroundBlurOpacity]
  -[SBRoutingSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBRoutingSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBRoutingSwitcherModifier transactionCompletionOptions]
  -[SBRoutingSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBRoutingSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBRoutingSwitcherModifier shelfBackgroundBlurFrame]
  -[SBRoutingSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBRoutingSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBRoutingSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[SBRoutingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBRoutingSwitcherModifier wantsSwitcherDimmingView]
  -[SBRoutingSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBRoutingSwitcherModifier dockProgress]
  -[SBRoutingSwitcherModifier presentationAttributesForShelf:]
  -[SBRoutingSwitcherModifier shadowOffsetForIndex:]
  -[SBRoutingSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[SBRoutingSwitcherModifier keyboardSuppressionMode]
  -[SBRoutingSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBRoutingSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[SBRoutingSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBRoutingSwitcherModifier lighteningAlphaForIndex:]
  -[SBRoutingSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBRoutingSwitcherModifier isScrollEnabled]
  -[SBRoutingSwitcherModifier isHomeScreenContentRequired]
  -[SBRoutingSwitcherModifier dockWindowLevelPriority]
  -[SBRoutingSwitcherModifier containerLeafAppLayoutForShelf:]
  -[SBRoutingSwitcherModifier headerStyleForIndex:]
  -[SBRoutingSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[SBRoutingSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBRoutingSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[SBRoutingSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBRoutingSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBRoutingSwitcherModifier neighboringAppLayoutsForFocusedAppLayout:]
  -[SBRoutingSwitcherModifier containerStatusBarAnimationDuration]
  -[SBRoutingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBRoutingSwitcherModifier isFocusEnabledForAppLayout:]
  -[SBRoutingSwitcherModifier switcherBackdropBlurType]
  -[SBRoutingSwitcherModifier resizeProgressNotificationsForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBRoutingSwitcherModifier switcherDimmingViewBlocksTouches]
  -[SBRoutingSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBRoutingSwitcherModifier scaleForIndex:]
  -[SBRoutingSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBRoutingSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBRoutingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBRoutingSwitcherModifier isIndexRubberbandableForSwipeToKill:]
  -[SBRoutingSwitcherModifier switcherDimmingAlpha]
  -[SBRoutingSwitcherModifier dockUpdateMode]
  -[SBRoutingSwitcherModifier frameForIndex:]
  -[SBRoutingSwitcherModifier tintStyleForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier wantsHomeScreenPointerInteractions]
  -[SBRoutingSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBRoutingSwitcherModifier blurViewIconScaleForIndex:]
  -[SBRoutingSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBRoutingSwitcherModifier shouldUseNonuniformSnapshotScalingForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier visibleAppLayouts]
  -[SBRoutingSwitcherModifier scaleForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier .cxx_destruct]
  -[SBRoutingSwitcherModifier scrollViewAttributes]
  -[SBRoutingSwitcherModifier shouldShowBackdropViewAtIndex:]
  -[SBRoutingSwitcherModifier topMostLayoutRolesForAppLayout:]
  -[SBRoutingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBRoutingSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBRoutingSwitcherModifier isSwitcherWindowVisible]
  -[SBRoutingSwitcherModifier minimumTranslationToKillIndex:]
  -[SBRoutingSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier animatablePropertyIdentifiers]
  -[SBRoutingSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBRoutingSwitcherModifier contentViewScale]
  -[SBRoutingSwitcherModifier hiddenContentStatusBarPartsForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier wallpaperStyle]
  -[SBRoutingSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBRoutingSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBRoutingSwitcherModifier clipsToBoundsAtIndex:]
  -[SBRoutingSwitcherModifier cornerRadiiForIndex:]
  -[SBRoutingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBRoutingSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBRoutingSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBRoutingSwitcherModifier canFocusableAppLayoutBeEffectivelyObscured:]
  -[SBRoutingSwitcherModifier cornerRadiiForLayoutRole:inAppLayout:withCornerRadii:]
  -[SBRoutingSwitcherModifier maskedCornersForIndex:]
  -[SBRoutingSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBRoutingSwitcherModifier homeAffordanceLayoutElementToPortalIntoShelf:]
  -[SBRoutingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBRoutingSwitcherModifier anchorPointForIndex:]
  -[SBRoutingSwitcherModifier didMoveToParentModifier:]
  -[SBRoutingSwitcherModifier topMostLayoutElements]
  -[SBRoutingSwitcherModifier switcherHitTestsAsOpaque]
  -[SBRoutingSwitcherModifier contentViewOffsetForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier frameForIconOverlayInAppLayout:]
  -[SBRoutingSwitcherModifier hiddenAppLayoutsInShelf:]
  -[SBRoutingSwitcherModifier shouldUpdateAnimatableProperty:]
  -[SBRoutingSwitcherModifier shouldTetherItemsAndAccessoriesInAppLayout:]
  -[SBRoutingSwitcherModifier focusedAppLayoutForShelf:]
  -[SBRoutingSwitcherModifier resetAdjustedScrollingState]
  -[SBRoutingSwitcherModifier updateModeForAnimatableProperty:]
  -[SBRoutingSwitcherModifier modelValueForAnimatableProperty:currentValue:creating:]
  -[SBRoutingSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBRoutingSwitcherModifier switcherViewBounds]
  -[SBRoutingSwitcherModifier switcherDropRegionContextForDraggingLayoutRole:inAppLayout:atLocation:]
  -[SBRoutingSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBRoutingSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBRoutingSwitcherModifier blurTargetPreferenceForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier handleEvent:]
  -[SBRoutingSwitcherModifier bounceIconGenerationCountForCurrentCount:]
  -[SBRoutingSwitcherModifier hiddenContainerStatusBarParts]
  -[SBRoutingSwitcherModifier shouldSuppressHighlightEffectForLayoutRole:inAppLayout:]
  -[SBRoutingSwitcherModifier containerViewBounds]
  -[SBRoutingSwitcherModifier resizeGrabberLayoutAttributesForAppLayout:]
  -[SBRoutingSwitcherModifier maskedCornersForLayoutRole:inAppLayout:withMaskedCorners:]
  -[SBRoutingSwitcherModifier canLayoutRoleParticipateInSwitcherDragAndDrop:appLayout:]
  -[SBRoutingSwitcherModifier snapshotScaleForAppLayout:]
  -[SBRoutingSwitcherModifier copyWithZone:]
  -[SBRoutingSwitcherModifier bounceIconBundleIdentifier]
  -[SBRoutingSwitcherModifier appLayouts]
  -[SBRoutingSwitcherModifier clippingFrameForIndex:withBounds:]
  -[SBRoutingSwitcherModifier contentViewOffsetForAccessoriesOfAppLayout:]
  -[SBRoutingSwitcherModifier ignoredDisplayItemsForShelf:]
  -[SBRoutingSwitcherModifier preferredAppLayoutToReuseAccessoryForAppLayout:fromAppLayouts:]
  -[SBRoutingSwitcherModifier shouldScaleContentToFillBoundsAtIndex:]
  -[SBRoutingSwitcherModifier multipleWindowsIndicatorLayoutRoleMaskForAppLayout:]
  -[SBRoutingSwitcherModifier initWithModifiers:delegate:]
  -[SBRoutingSwitcherModifier stackDescriptionWithPrefix:]
  -[SBRoutingSwitcherModifier _adjustedShelfForShelf:fromModifier:]
  -[SBRoutingSwitcherModifier _adjustedShelfForShelf:forModifier:]
  -[SBRoutingSwitcherModifier _lastIndexForModifier:]


SBInAppStatusBarHiddenAssertion : NSObject <BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInAppStatusBarHiddenAssertion .cxx_destruct]
  -[SBInAppStatusBarHiddenAssertion dealloc]
  -[SBInAppStatusBarHiddenAssertion invalidate]
  -[SBInAppStatusBarHiddenAssertion initWithIdentifier:forReason:invalidationBlock:]
  -[SBInAppStatusBarHiddenAssertion invalidateWithAnimation:]


SBRecentAppLayoutsPersister : NSObject
 @property  NSArray *recents
 @property  BOOL initializedNewStoreOnDisk

  // instance methods
  -[SBRecentAppLayoutsPersister syncToDiskSoonIfDirty]
  -[SBRecentAppLayoutsPersister .cxx_destruct]
  -[SBRecentAppLayoutsPersister _enqueueDiskWrite]
  -[SBRecentAppLayoutsPersister _scheduledPersistTimer]
  -[SBRecentAppLayoutsPersister _persistTimerExpired:]
  -[SBRecentAppLayoutsPersister initializedNewStoreOnDisk]
  -[SBRecentAppLayoutsPersister setRecents:]
  -[SBRecentAppLayoutsPersister syncToDiskSynchronously]
  -[SBRecentAppLayoutsPersister _queue_writeCompressedProtobufRepresentationToDisk:]
  -[SBRecentAppLayoutsPersister recents]
  -[SBRecentAppLayoutsPersister _loadRecents]
  -[SBRecentAppLayoutsPersister initWithPersistenceURL:]


SBFluidSwitcherGesture : NSObject <BSDescriptionProviding>
 @property  long long state
 @property  SBAppLayout *selectedAppLayout
 @property  long long selectedLayoutRole
 @property  UIGestureRecognizer *gestureRecognizerForStudyLog
 @property  long long type
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherGesture _setState:]
  -[SBFluidSwitcherGesture .cxx_destruct]
  -[SBFluidSwitcherGesture succinctDescriptionBuilder]
  -[SBFluidSwitcherGesture descriptionBuilderWithMultilinePrefix:]
  -[SBFluidSwitcherGesture descriptionWithMultilinePrefix:]
  -[SBFluidSwitcherGesture succinctDescription]
  -[SBFluidSwitcherGesture state]
  -[SBFluidSwitcherGesture type]
  -[SBFluidSwitcherGesture selectedAppLayout]
  -[SBFluidSwitcherGesture gestureEvent]
  -[SBFluidSwitcherGesture studyLogData]
  -[SBFluidSwitcherGesture initWithType:eventProvider:]
  -[SBFluidSwitcherGesture _setSelectedAppLayout:]
  -[SBFluidSwitcherGesture _setGestureRecognizerForStudyLog:]
  -[SBFluidSwitcherGesture gestureRecognizerForStudyLog]
  -[SBFluidSwitcherGesture selectedLayoutRole]
  -[SBFluidSwitcherGesture _setSelectedLayoutRole:]


SBKeyboardSuppressionManager : NSObject
  // class methods
  +[SBKeyboardSuppressionManager sharedInstance]

  // instance methods
  -[SBKeyboardSuppressionManager _setKeyboardSuppressed:forReason:withPredicate:]
  -[SBKeyboardSuppressionManager .cxx_destruct]
  -[SBKeyboardSuppressionManager startSuppressingKeyboardWithReason:predicate:]
  -[SBKeyboardSuppressionManager init]
  -[SBKeyboardSuppressionManager stopSuppressingKeyboardWithReason:]
  -[SBKeyboardSuppressionManager acquireKeyboardSuppressionAssertionWithReason:predicate:]


SBOverrideScrollViewContentOffsetSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBOverrideScrollViewContentOffsetSwitcherModifier scrollViewContentOffset]
  -[SBOverrideScrollViewContentOffsetSwitcherModifier initWithScrollViewContentOffset:]


SBAppProfileExpiredAlertItem : SBAlertItem
  // instance methods
  -[SBAppProfileExpiredAlertItem .cxx_destruct]
  -[SBAppProfileExpiredAlertItem shouldShowInLockScreen]
  -[SBAppProfileExpiredAlertItem dismissOnLock]
  -[SBAppProfileExpiredAlertItem configure:requirePasscodeForActions:]
  -[SBAppProfileExpiredAlertItem forcesModalAlertAppearance]
  -[SBAppProfileExpiredAlertItem initWithApp:]


SBDashBoardVibrantWallpaperChevronView : SBUIChevronView <SBUILegibility>
 @property  <CSWallpaperColorProvider> *wallpaperColorProvider
 @property  double strength
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardVibrantWallpaperChevronView _updateVibrancy]
  -[SBDashBoardVibrantWallpaperChevronView setWallpaperColorProvider:]
  -[SBDashBoardVibrantWallpaperChevronView .cxx_destruct]
  -[SBDashBoardVibrantWallpaperChevronView setLegibilitySettings:]
  -[SBDashBoardVibrantWallpaperChevronView init]
  -[SBDashBoardVibrantWallpaperChevronView wallpaperColorProvider]
  -[SBDashBoardVibrantWallpaperChevronView strength]
  -[SBDashBoardVibrantWallpaperChevronView setStrength:]
  -[SBDashBoardVibrantWallpaperChevronView initWithColor:]
  -[SBDashBoardVibrantWallpaperChevronView legibilitySettings]


SBBaseStartupTransition : SBTransaction <SBStartupTransition>
 @property  SBMainWorkspace *mainWorkspace
 @property  SBStartupTransitionContext *context
 @property  unsigned long destination

  // instance methods
  -[SBBaseStartupTransition _begin]
  -[SBBaseStartupTransition .cxx_destruct]
  -[SBBaseStartupTransition destination]
  -[SBBaseStartupTransition mainWorkspace]
  -[SBBaseStartupTransition context]
  -[SBBaseStartupTransition performTransitionWithCompletionBlock:]
  -[SBBaseStartupTransition initWithDestination:context:]


SBPIPPegasusAdapter : NSObject <PGPictureInPictureControllerDelegate, SBPIPContainerViewControllerObserver, SBBannerManagerTransitionObserver, SBPIPControllerAdapter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPIPPegasusAdapter isSupported]
  +[SBPIPPegasusAdapter _isAutoPictureInPictureSupported]

  // instance methods
  -[SBPIPPegasusAdapter bannerManager:willPresentPresentable:withTransitionCoordinator:]
  -[SBPIPPegasusAdapter isStoppingOrCancellingPictureForPIPController:applicationWithBundleIdentifier:scenePersistenceIdentifier:]
  -[SBPIPPegasusAdapter bannerManager:presentable:willTransitionToSize:withTransitionCoordinator:]
  -[SBPIPPegasusAdapter containerViewControllerStopReducingResourcesUsage:]
  -[SBPIPPegasusAdapter pictureInPictureController:didHidePictureInPictureViewController:]
  -[SBPIPPegasusAdapter pipController:willEndPIPInterruptionForAssertion:]
  -[SBPIPPegasusAdapter setPIPController:]
  -[SBPIPPegasusAdapter preventStashAssertionsForPIPController:]
  -[SBPIPPegasusAdapter .cxx_destruct]
  -[SBPIPPegasusAdapter pipController:didStartPictureInPictureForApplicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:animated:completionHandler:]
  -[SBPIPPegasusAdapter pictureInPictureController:didRequestStopForPictureInPictureViewController:sourceSceneSessionIdentifier:animated:]
  -[SBPIPPegasusAdapter _enumerateContainerViewControllersForApplication:scenePersistenceIdentifier:usingBlock:]
  -[SBPIPPegasusAdapter pictureInPictureControllerCanBackgroundStartForFaceTimeVideoCall:]
  -[SBPIPPegasusAdapter contentTypeForPIPController:]
  -[SBPIPPegasusAdapter init]
  -[SBPIPPegasusAdapter tetheringModeForScenePersistenceIdentifier:]
  -[SBPIPPegasusAdapter pipController:didCancelPictureInPictureForApplicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:]
  -[SBPIPPegasusAdapter _updateBannerInsetsForExpanseWithSizeChanging:isFullScreen:]
  -[SBPIPPegasusAdapter isPresentingPictureInPictureForPIPController:applicationBundleIdentifier:]
  -[SBPIPPegasusAdapter pictureInPictureController:didCreatePictureInPictureViewController:]
  -[SBPIPPegasusAdapter pipController:willBeginPIPInterruptionForAssertion:]
  -[SBPIPPegasusAdapter bannerManager:willDismissPresentable:withTransitionCoordinator:]
  -[SBPIPPegasusAdapter _bannerPresentableWillAnimateTransition:isPresentation:isDismissal:isFullScreen:withTransitionCoordinator:]
  -[SBPIPPegasusAdapter isPictureInPictureActiveForPIPController:]
  -[SBPIPPegasusAdapter containerViewControllerStartReducingResourcesUsage:]
  -[SBPIPPegasusAdapter pipController:willStartPictureInPictureTestActionForApplicationWithBundleIdentifier:]
  -[SBPIPPegasusAdapter pipController:willRestorePictureInPictureForTestForApplicationWithBundleIdentifier:]
  -[SBPIPPegasusAdapter pictureInPictureController:shouldAuthorizeBackgroundPIPForAppWithBundleIdentifier:]
  -[SBPIPPegasusAdapter pictureInPictureController:shouldDenyNewConnection:]
  -[SBPIPPegasusAdapter pictureInPictureController:willDestroyPictureInPictureViewController:]
  -[SBPIPPegasusAdapter _updateHideFromClonedDisplaysAssertion]
  -[SBPIPPegasusAdapter containerViewControllerDidUpdatePrefersHiddenFromClonedDisplays:]
  -[SBPIPPegasusAdapter _reasonForAssertion:]
  -[SBPIPPegasusAdapter _layoutStateContainsSceneForSourceSceneSessionIdentifier:bundleIdentifier:]
  -[SBPIPPegasusAdapter pipController:morphAnimatorDataSourceForTargetProcessIdentifier:scenePersistenceIdentifier:gestureInitiated:]
  -[SBPIPPegasusAdapter dealloc]
  -[SBPIPPegasusAdapter _postEnsuredInSwitcher_pictureInPictureController:didRequestStopForPictureInPictureViewController:sourceSceneSessionIdentifier:animated:]
  -[SBPIPPegasusAdapter bannerManager:containerWillTransitionToSize:withTransitionCoordinator:]
  -[SBPIPPegasusAdapter _updateAppStatusBarSettingsAssertion]
  -[SBPIPPegasusAdapter shouldStartPictureInPictureForPIPController:applicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:]
  -[SBPIPPegasusAdapter _presentableIsDodgeableAndStatusBarSuppressing:]
  -[SBPIPPegasusAdapter isStartingStoppingOrCancellingPictureInPictureForPIPController:]
  -[SBPIPPegasusAdapter _updateHasIdleTimerBehaviors]
  -[SBPIPPegasusAdapter _actuallyUpdateBannerInsetsForExpanseWithSizeChanging:isFullScreen:]
  -[SBPIPPegasusAdapter observeValueForKeyPath:ofObject:change:context:]
  -[SBPIPPegasusAdapter pictureInPictureController:willHidePictureInPictureViewController:]


SBPIPMorphAnimatorDataSource : NSObject <SBViewMorphAnimatorDataSource>
 @property  SBPIPController *pipController
 @property  PGPictureInPictureController *pegasusController
 @property  int targetProcessIdentifier
 @property  NSString *scenePersistenceIdentifier
 @property  BOOL gestureInitiated
 @property  SBPIPContentViewLayoutSettings *contentViewLayoutSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPMorphAnimatorDataSource .cxx_destruct]
  -[SBPIPMorphAnimatorDataSource isGestureInitiated]
  -[SBPIPMorphAnimatorDataSource initWithTargetProcessIdentifier:scenePersistenceIdentifier:gestureInitiated:pipController:pegasusController:contentViewLayoutSettings:]
  -[SBPIPMorphAnimatorDataSource scenePersistenceIdentifier]
  -[SBPIPMorphAnimatorDataSource sourceAppLayoutFrameForAnimator:]
  -[SBPIPMorphAnimatorDataSource sourceContentFrameForAnimator:]
  -[SBPIPMorphAnimatorDataSource targetFinalFrameForAnimator:]
  -[SBPIPMorphAnimatorDataSource sourceCornerRadiusForAnimator:]
  -[SBPIPMorphAnimatorDataSource sourceBlackCurtainCornerRadiusForAnimator:]
  -[SBPIPMorphAnimatorDataSource targetFinalCornerRadiusForAnimator:]
  -[SBPIPMorphAnimatorDataSource pipController]
  -[SBPIPMorphAnimatorDataSource setPipController:]
  -[SBPIPMorphAnimatorDataSource pegasusController]
  -[SBPIPMorphAnimatorDataSource setPegasusController:]
  -[SBPIPMorphAnimatorDataSource targetProcessIdentifier]
  -[SBPIPMorphAnimatorDataSource setTargetProcessIdentifier:]
  -[SBPIPMorphAnimatorDataSource setScenePersistenceIdentifier:]
  -[SBPIPMorphAnimatorDataSource contentViewLayoutSettings]
  -[SBPIPMorphAnimatorDataSource setContentViewLayoutSettings:]


SBAppProfileNotTrustedAlertItem : SBAlertItem
  // instance methods
  -[SBAppProfileNotTrustedAlertItem .cxx_destruct]
  -[SBAppProfileNotTrustedAlertItem shouldShowInLockScreen]
  -[SBAppProfileNotTrustedAlertItem dismissOnLock]
  -[SBAppProfileNotTrustedAlertItem configure:requirePasscodeForActions:]
  -[SBAppProfileNotTrustedAlertItem forcesModalAlertAppearance]
  -[SBAppProfileNotTrustedAlertItem initWithApp:]


SBTransientOverlayDismissToAppsWorkspaceTransaction : SBMainWorkspaceTransaction
  // class methods
  +[SBTransientOverlayDismissToAppsWorkspaceTransaction isValidForTransitionRequest:]

  // instance methods
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction _didComplete]
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction _begin]
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction _canBeInterrupted]
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction _sendActivationResultWithError:]


SBSpotlightDomain : PTDomain
  // class methods
  +[SBSpotlightDomain domainGroupName]
  +[SBSpotlightDomain rootSettings]
  +[SBSpotlightDomain domainName]
  +[SBSpotlightDomain rootSettingsClass]


SBSplitDisplayItemSwitcherModifier : SBSwitcherModifier
 @property  BOOL hasInvalidatedAppLayoutsForInsertion
 @property  BOOL hasInvalidatedAppLayoutsForRemoval
 @property  SBAppLayout *overrideAndPromoteChildAppLayout
 @property  SBDisplayItem *displayItem
 @property  SBSwitcherModifier *wrappingModifier

  // instance methods
  -[SBSplitDisplayItemSwitcherModifier displayItem]
  -[SBSplitDisplayItemSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[SBSplitDisplayItemSwitcherModifier frameForIndex:]
  -[SBSplitDisplayItemSwitcherModifier .cxx_destruct]
  -[SBSplitDisplayItemSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBSplitDisplayItemSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBSplitDisplayItemSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBSplitDisplayItemSwitcherModifier appLayoutContainingAppLayout:]
  -[SBSplitDisplayItemSwitcherModifier initWithDisplayItem:]
  -[SBSplitDisplayItemSwitcherModifier handleEvent:]
  -[SBSplitDisplayItemSwitcherModifier resizeGrabberLayoutAttributesForAppLayout:]
  -[SBSplitDisplayItemSwitcherModifier preferredAppLayoutToReuseAccessoryForAppLayout:fromAppLayouts:]
  -[SBSplitDisplayItemSwitcherModifier completesWhenChildrenComplete]
  -[SBSplitDisplayItemSwitcherModifier initWithDisplayItem:wrappingModifier:]
  -[SBSplitDisplayItemSwitcherModifier _performOverrideAndPromoteChildAppLayoutToParent:withBlock:]
  -[SBSplitDisplayItemSwitcherModifier wrappingModifier]
  -[SBSplitDisplayItemSwitcherModifier hasInvalidatedAppLayoutsForInsertion]
  -[SBSplitDisplayItemSwitcherModifier setHasInvalidatedAppLayoutsForInsertion:]
  -[SBSplitDisplayItemSwitcherModifier hasInvalidatedAppLayoutsForRemoval]
  -[SBSplitDisplayItemSwitcherModifier setHasInvalidatedAppLayoutsForRemoval:]
  -[SBSplitDisplayItemSwitcherModifier overrideAndPromoteChildAppLayout]
  -[SBSplitDisplayItemSwitcherModifier setOverrideAndPromoteChildAppLayout:]


SBSnapshotTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSnapshotTestRecipe load]

  // instance methods
  -[SBSnapshotTestRecipe title]
  -[SBSnapshotTestRecipe handleVolumeIncrease]
  -[SBSnapshotTestRecipe handleVolumeDecrease]
  -[SBSnapshotTestRecipe _sendRequestWithType:]


SBUnlockedDodgingResolver : NSObject <SBUIActiveOrientationObserver>
 @property  _SBUnlockedDodgingWindow *window
 @property  _SBUnlockedDodgingRootViewcontroller *rootViewController
 @property  SBDodgingTester *dodgingTester
 @property  SBDodgingResolverViewController *dodgingResolverViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUnlockedDodgingResolver activeInterfaceOrientationWillChangeToOrientation:]
  -[SBUnlockedDodgingResolver setWindow:]
  -[SBUnlockedDodgingResolver activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBUnlockedDodgingResolver rootViewController]
  -[SBUnlockedDodgingResolver .cxx_destruct]
  -[SBUnlockedDodgingResolver setRootViewController:]
  -[SBUnlockedDodgingResolver init]
  -[SBUnlockedDodgingResolver window]
  -[SBUnlockedDodgingResolver dodgingResolverViewController]
  -[SBUnlockedDodgingResolver dodgingTester]
  -[SBUnlockedDodgingResolver setDodgingTester:]


_SBUnlockedDodgingWindow : SBWindow
  // instance methods
  -[_SBUnlockedDodgingWindow hitTest:withEvent:]


_SBUnlockedDodgingRootViewcontroller : SBOrientationTransformWrapperViewController
  // instance methods
  -[_SBUnlockedDodgingRootViewcontroller _overrideWindowActiveInterfaceOrientation]


SBWidgetController : NSObject <WGWidgetDiscoveryControllerDelegate, SBExtensionHandling, SBHSidebarWidgetLearningObserver, CSWidgetGroupViewControllerProviding>
 @property  WGWidgetDiscoveryController *widgetDiscoveryController
 @property  SBHSidebarWidgetBootstrappingAdvisor *sidebarWidgetBootstrappingAdvisor
 @property  BOOL bootstrapFavoriteWidgets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWidgetController shouldShowWidgetsPinningTeachingViewForWidgetDiscoveryController:]
  -[SBWidgetController widgetDiscoveryController:widgetWithBundleIdentifier:didEncounterProblematicSnapshotAtURL:]
  -[SBWidgetController .cxx_destruct]
  -[SBWidgetController setBootstrapFavoriteWidgets:]
  -[SBWidgetController widgetDiscoveryController:updateStatusBarAssertion:withLegibilityStyle:]
  -[SBWidgetController newWidgetListViewControllerWithSettings:]
  -[SBWidgetController _widgetDiscoveryController]
  -[SBWidgetController widgetDiscoveryController:shouldPurgeArchivedSnapshotsForWidgetWithBundleIdentifier:]
  -[SBWidgetController widgetDiscoveryController:didChangeWidgetsPinning:]
  -[SBWidgetController _updateFavoriteWidgetLearning]
  -[SBWidgetController widgetDiscoveryControllerShouldIncludeInternalWidgets:]
  -[SBWidgetController widgetDiscoveryController:requestUnlockWithCompletion:]
  -[SBWidgetController didPurgeNonCAMLSnapshotsForWidgetDiscoveryController:]
  -[SBWidgetController newAvocadoWidgetListViewControllerWithSettings:]
  -[SBWidgetController init]
  -[SBWidgetController widgetDiscoveryControllerShouldRespectFavorites:]
  -[SBWidgetController launchExtensionWithBundleID:options:completion:]
  -[SBWidgetController widgetDiscoveryController:didEndUsingStatusBarAssertion:]
  -[SBWidgetController sidebarWidgetBootstrappingAdvisor]
  -[SBWidgetController areWidgetsPinnedForWidgetDiscoveryController:]
  -[SBWidgetController removeWidgetIdentifiersFromToday:]
  -[SBWidgetController shouldShowWidgetsPinButtonForWidgetDiscoveryController:]
  -[SBWidgetController _homescreenSidebarVisibilityDidChange:]
  -[SBWidgetController didPurgeNonASTCSnapshotsForWidgetDiscoveryController:]
  -[SBWidgetController setWidgetDiscoveryController:]
  -[SBWidgetController newWidgetGroupViewControllerWithSettings:]
  -[SBWidgetController widgetDiscoveryController:preferredViewControllerForPresentingFromViewController:]
  -[SBWidgetController sidebarWidgetLearningAdvisorDidUpdate:]
  -[SBWidgetController bootstrapFavoriteWidgets]
  -[SBWidgetController widgetDiscoveryControllerDidDismissWidgetsPinningTeachingView:]
  -[SBWidgetController todayWidgetIdentifiers]
  -[SBWidgetController _shouldUsePinnedWidgets]
  -[SBWidgetController _reloadWidgetPreferences]
  -[SBWidgetController statusBarAssertionForWidgetDiscoveryController:legibilityStyle:]


SBPulseTransitionSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBPulseTransitionSwitcherModifier animationAttributesForLayoutElement:]
  -[SBPulseTransitionSwitcherModifier scaleForIndex:]
  -[SBPulseTransitionSwitcherModifier .cxx_destruct]
  -[SBPulseTransitionSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBPulseTransitionSwitcherModifier handleTimerEvent:]
  -[SBPulseTransitionSwitcherModifier topMostLayoutElements]
  -[SBPulseTransitionSwitcherModifier transitionWillUpdate]
  -[SBPulseTransitionSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBPulseTransitionSwitcherModifier initWithTransitionID:appLayout:]


SBApplicationLaunchNotifyInCallAlertItem : SBApplicationLaunchNotifyAlertItem
  // instance methods
  -[SBApplicationLaunchNotifyInCallAlertItem initWithApplication:]
  -[SBApplicationLaunchNotifyInCallAlertItem configure:requirePasscodeForActions:]


_SBScreenshotPersistenceCoordinator : NSObject
 @property  BOOL isSaving

  // instance methods
  -[_SBScreenshotPersistenceCoordinator isSaving]
  -[_SBScreenshotPersistenceCoordinator saveScreenshot:withCompletion:]
  -[_SBScreenshotPersistenceCoordinator _isWritingSnapshot]
  -[_SBScreenshotPersistenceCoordinator _incrementWriteCount]
  -[_SBScreenshotPersistenceCoordinator _finishedWritingScreenshot:didFinishSavingWithError:context:]
  -[_SBScreenshotPersistenceCoordinator _decrementWriteCount]


SBMainDisplaySceneLayoutStatusBarView : UIView <PTSettingsKeyObserver, UIStatusBarStyleDelegate_SpringBoardOnly, SBDeviceApplicationSceneStatusBarStateObserver>
 @property  <UIStatusBarStyleDelegate_SpringBoardOnly> *realStyleDelegate
 @property  BOOL requiringStatusBar
 @property  BOOL statusBarEffectivelyHidden
 @property  <SBMainDisplaySceneLayoutStatusBarViewDataSource> *dataSource
 @property  long long containerOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMainDisplaySceneLayoutStatusBarView containerOrientation]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarScrollToTop:]
  -[SBMainDisplaySceneLayoutStatusBarView hitTest:withEvent:]
  -[SBMainDisplaySceneLayoutStatusBarView applyStatusBarStylesForDescriber:]
  -[SBMainDisplaySceneLayoutStatusBarView setContainerOrientation:]
  -[SBMainDisplaySceneLayoutStatusBarView _updateDebugBackgroundColor]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarTapped:type:]
  -[SBMainDisplaySceneLayoutStatusBarView updateStatusBarOrientationForLegacyApp]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:didTriggerButtonType:withAction:context:]
  -[SBMainDisplaySceneLayoutStatusBarView _layoutStatusBarForOrientation:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:effectiveStyleOverridesForRequestedStyle:overrides:]
  -[SBMainDisplaySceneLayoutStatusBarView _updateDebugOffset]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarAvoidanceFrame]
  -[SBMainDisplaySceneLayoutStatusBarView setDataSource:]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarStyle:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarAlphaTo:]
  -[SBMainDisplaySceneLayoutStatusBarView isStatusBarEffectivelyHidden]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:didTriggerButtonType:withAction:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBarStyleRequestForStatusBarPart:]
  -[SBMainDisplaySceneLayoutStatusBarView _anyAppViewControllerOwningInterfaceOrientation]
  -[SBMainDisplaySceneLayoutStatusBarView .cxx_destruct]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarFrameForOrientation:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarStyleOverridesToSuppressTo:]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarShowDebug:]
  -[SBMainDisplaySceneLayoutStatusBarView layoutStatusBarForSpringBoardRotationToOrientation:]
  -[SBMainDisplaySceneLayoutStatusBarView _effectiveStyleForPartIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView realStyleDelegate]
  -[SBMainDisplaySceneLayoutStatusBarView dataSource]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarAvoidanceFrame:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView updateBreadcrumbActionIfNecessary]
  -[SBMainDisplaySceneLayoutStatusBarView _defaultStatusBarStyleRequest]
  -[SBMainDisplaySceneLayoutStatusBarView _hiddenTransformForAnimation:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarHiddenTo:withAnimation:]
  -[SBMainDisplaySceneLayoutStatusBarView _setDebugBackgroundColor:]
  -[SBMainDisplaySceneLayoutStatusBarView setRealStyleDelegate:]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarNeedsSpecialLayoutForClassic]
  -[SBMainDisplaySceneLayoutStatusBarView _validStatusBarPartIdentifiersForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView isRequiringStatusBar]
  -[SBMainDisplaySceneLayoutStatusBarView endRequiringStatusBarForReason:]
  -[SBMainDisplaySceneLayoutStatusBarView _addStatusBarIfNeeded]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarOrientationTo:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBarSystemNavigationAction:]
  -[SBMainDisplaySceneLayoutStatusBarView _setupDebugging]
  -[SBMainDisplaySceneLayoutStatusBarView _allowChangingIndividualStatusBarParts]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarStyleTo:forPartWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarStyleOverridesToSuppress:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView initWithFrame:]
  -[SBMainDisplaySceneLayoutStatusBarView _effectiveStatusBarStyleOverridesToSuppress]
  -[SBMainDisplaySceneLayoutStatusBarView _updateHitTestLayers]
  -[SBMainDisplaySceneLayoutStatusBarView _sceneHandleForClassicApplicationIfAny]
  -[SBMainDisplaySceneLayoutStatusBarView didInvalidateStatusBarDescriptionForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView _hiddenAlphaForAnimation:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarAvoidanceFrameTo:]
  -[SBMainDisplaySceneLayoutStatusBarView settings:changedValueForKey:]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarDescriberForPrimaryApplicationIfAny]
  -[SBMainDisplaySceneLayoutStatusBarView _currentlyValidStatusBarPartIdentifiers]
  -[SBMainDisplaySceneLayoutStatusBarView beginRequiringStatusBarForReason:]
  -[SBMainDisplaySceneLayoutStatusBarView _enumerateValidStatusBarPartIdentifiersForSceneWithIdentifier:withBlock:]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarAlpha:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView dealloc]
  -[SBMainDisplaySceneLayoutStatusBarView createStatusBarWithFrame:interfaceOrientation:reason:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarStyleTo:]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarHidden:withAnimation:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView overriddenRequestedStyleFromStyle:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:didAnimateFromHeight:toHeight:animation:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:willAnimateFromHeight:toHeight:duration:animation:]
  -[SBMainDisplaySceneLayoutStatusBarView _setDebugOffsetIndex:]
  -[SBMainDisplaySceneLayoutStatusBarView _tearDownStatusBar]
  -[SBMainDisplaySceneLayoutStatusBarView allValidStatusBarPartIdentifiers]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:styleForRequestedStyle:overrides:]
  -[SBMainDisplaySceneLayoutStatusBarView _animateHidden:withAnimation:transitionHandler:applyHandler:]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarStyle:toPartIdentifier:ofSceneWithIdentifier:]


SBLockOverlayContext : NSObject
 @property  SBLockOverlayViewController *viewController
 @property  unsigned long priority
 @property  @? activationBlock
 @property  @? deactivationBlock

  // instance methods
  -[SBLockOverlayContext viewController]
  -[SBLockOverlayContext .cxx_destruct]
  -[SBLockOverlayContext priority]
  -[SBLockOverlayContext initWithOverlayViewController:priority:]
  -[SBLockOverlayContext activationBlock]
  -[SBLockOverlayContext setActivationBlock:]
  -[SBLockOverlayContext deactivationBlock]
  -[SBLockOverlayContext setDeactivationBlock:]


SBPPTOperation : NSOperation
 @property  NSString *operationName

  // class methods
  +[SBPPTOperation operationToUnlockInterfaceFinishingUIUnlock:]
  +[SBPPTOperation operationToActivateApplicationWithBundleIdentifier:]
  +[SBPPTOperation operationToTerminateApplicationWithBundleIdentifier:]
  +[SBPPTOperation operationToSynthesizeEventsForEventActions:]
  +[SBPPTOperation enqueueOperations:]
  +[SBPPTOperation operationToUnlockInterface]
  +[SBPPTOperation operationToLockInterface]
  +[SBPPTOperation operationToSetInterfaceOrientation:]
  +[SBPPTOperation operationToPreventSystemIdle]
  +[SBPPTOperation operationToResumeSystemIdle]
  +[SBPPTOperation operationToWaitForTimeInterval:]
  +[SBPPTOperation operationToWaitForNotificationName:object:timeout:]
  +[SBPPTOperation operationToTransitionToHomeScreen]
  +[SBPPTOperation operationToSaveHomeScreenState]
  +[SBPPTOperation operationToRestoreHomeScreenState]
  +[SBPPTOperation operationToCreateFolderWithName:containingIconsForBundleIdentifiers:]
  +[SBPPTOperation operationToOpenFolderWithName:]
  +[SBPPTOperation operationToPresentAppSwitcher]
  +[SBPPTOperation operationToDismissAppSwitcherAndReturnToSource]
  +[SBPPTOperation operationToSaveAppSwitcherState]
  +[SBPPTOperation operationToRestoreAppSwitcherState]
  +[SBPPTOperation operationToLoadPPTAppSwitcherState]
  +[SBPPTOperation operationToPresentCoverSheet]
  +[SBPPTOperation operationToDismissCoverSheet]
  +[SBPPTOperation operationToPresentFloatingDock]
  +[SBPPTOperation operationToDismissFloatingDock]
  +[SBPPTOperation operationToPresentBannerNotification]
  +[SBPPTOperation operationToDismissBannerNotification]
  +[SBPPTOperation operationToPublishExampleNotificationsWithNotificationCount:threadCount:]
  +[SBPPTOperation operationToRemoveExampleNotifications]
  +[SBPPTOperation operationToActivateNullOffscreenApp]
  +[SBPPTOperation operationToTerminateNullOffscreenApp]
  +[SBPPTOperation operationToSetApplicationWithBundleIdentifier:blockedForScreenTime:]
  +[SBPPTOperation operationToSetAllApplicationsBlockedForScreenTime:]
  +[SBPPTOperation operationToSynthesizeEventsForCommandString:]
  +[SBPPTOperation operationToSynthesizeEventsForEventStream:]
  +[SBPPTOperation operationToSwipeUpInMiddleOfInterface]
  +[SBPPTOperation operationToSwipeDownInMiddleOfInterface]
  +[SBPPTOperation operationToSwipeLeftInMiddleOfInterface]
  +[SBPPTOperation operationToSwipeRightInMiddleOfInterface]
  +[SBPPTOperation operationToStartTest:]
  +[SBPPTOperation operationToFinishTest:]
  +[SBPPTOperation operationToPresentPageManagement]
  +[SBPPTOperation operationToDismissPageManagement]
  +[SBPPTOperation dismissOverlaysAndResetHomeScreenToLastIconPageAnimated:]
  +[SBPPTOperation presentAppLibrary:]
  +[SBPPTOperation dismissAppLibraryPad:]
  +[SBPPTOperation resetAndPrepareforNextTest]
  +[SBPPTOperation presentAppLibraryPhone]
  +[SBPPTOperation presentAppLibrary]
  +[SBPPTOperation dismissAppLibraryOverlay]
  +[SBPPTOperation configureAppLibraryForEachAppHavingOwnPod]
  +[SBPPTOperation resetAppLibraryToTop]
  +[SBPPTOperation dismissOverlaysAndResetHomeScreenToPage:animated:completion:]
  +[SBPPTOperation presentAppLibrarySearchByTappingSearchField]
  +[SBPPTOperation dismissAppLibrarySearch]
  +[SBPPTOperation configureAppLibraryForAllAppsInOnePod]
  +[SBPPTOperation appLibraryExpandFirstPod]
  +[SBPPTOperation appLibraryDismissExpandedPod]
  +[SBPPTOperation pullToAppLibrarySearch]
  +[SBPPTOperation _dismissOverlaysAndResetHomeScreenToPage:animated:operation:completion:]
  +[SBPPTOperation _appLibrarySupport_performTapAtPoint:fromView:withCompletion:]
  +[SBPPTOperation _appLibrarySupport_performDragFromPoint:andDragTo:duration:fromView:withCompletion:]
  +[SBPPTOperation _appLibrarySupport_performPanGesturesOnScreenUntilOnDeweyOverlayWithCompletion:]
  +[SBPPTOperation _appLibrarySupport_performPanGestureTowardsUserInterfaceLayoutDirectionOnScreenWithDuration:completion:]
  +[SBPPTOperation _appLibrarySupport_performRightToLeftPanGestureOnScreenWithDuration:completion:]
  +[SBPPTOperation _appLibrarySupport_performLeftToRightPanGestureOnScreenWithDuration:completion:]
  +[SBPPTOperation _appLibrarySupport_performPanWithComposer:startLocation:endLocation:duration:]
  +[SBPPTOperation _appLibrarySupport__performPanGesturesOnScreenFromPage:toPage:completion:]
  +[SBPPTOperation _appLibrarySupport_performPanGestureAwayFromUserInterfaceLayoutDirectionOnScreenWithDuration:completion:]
  +[SBPPTOperation dismissOverlaysAndResetHomeScreenToFirstIconPageAnimated:]
  +[SBPPTOperation performTapAtPointWithBlock:]
  +[SBPPTOperation _appLibrarySupport_performPanGesturesOnScreenUntilOnPage:withCompletion:]
  +[SBPPTOperation _appLibrarySupport_performPanGesturesOnScreenUntilOnDefaultHomeScreenIconPageWithCompletion:]

  // instance methods
  -[SBPPTOperation .cxx_destruct]
  -[SBPPTOperation operationWillStart]
  -[SBPPTOperation init]
  -[SBPPTOperation operationName]
  -[SBPPTOperation setOperationName:]
  -[SBPPTOperation markStartedTest:]
  -[SBPPTOperation markFinishedTest:]
  -[SBPPTOperation markStartSubTest:forTestName:]
  -[SBPPTOperation markFinishedSubTest:forTestName:]
  -[SBPPTOperation operationDidFinish]


SBInCallDomain : PTDomain
  // class methods
  +[SBInCallDomain domainGroupName]
  +[SBInCallDomain rootSettings]
  +[SBInCallDomain domainName]
  +[SBInCallDomain rootSettingsClass]


SBCoverSheetSlidingViewController : UIViewController <SBCoverSheetSystemGestureDelegatePositionProviding, PTSettingsKeyObserver>
 @property  SBCoverSheetPositionView *positionView
 @property  SBScreenEdgePanGestureRecognizer *dismissGestureRecognizer
 @property  SBScreenEdgePanGestureRecognizer *dismissAddendumGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectPresentGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectDismissGestureRecognizer
 @property  SBFluidScrunchGestureRecognizer *scrunchDismissGestureRecognizer
 @property  BOOL indirectPresentGestureCalledBegin
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  CSLockScreenSettings *lockScreenSettings
 @property  long long presentGestureState
 @property  BOOL canBePulledDown
 @property  BOOL canBePulledUp
 @property  UIViewFloatAnimatableProperty *progressProperty
 @property  UIViewFloatAnimatableProperty *catchupProperty
 @property  BOOL performingCatchUpForPresentation
 @property  {CGPoint=dd} lastTouchLocation
 @property  long long groupCount
 @property  @? completionBlock
 @property  NSObject<OS_dispatch_group> *completionGroup
 @property  double initialTouchOffsetFromScreenEdge
 @property  UIViewController<SBCoverSheetSlidingViewControllerContentViewController> *contentViewController
 @property  <SBCoverSheetSlidingViewControllerDelegate> *delegate
 @property  long long dismissalSlidingMode
 @property  long long dismissalTransformMode
 @property  SBCoverSheetSystemGesturesDelegate *systemGesturesDelegate
 @property  BOOL roundsCorners
 @property  CSCoverSheetTransitionSettings *transitionSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetSlidingViewController _handleDismissGesture:]
  -[SBCoverSheetSlidingViewController _studyLogForCompletionOfTransitionToPresented:]
  -[SBCoverSheetSlidingViewController dismissAddendumGestureRecognizer]
  -[SBCoverSheetSlidingViewController _transitionToViewControllerAppearState:ifNeeded:forUserGesture:]
  -[SBCoverSheetSlidingViewController _animationTickedWithProgress:forPresentationValue:]
  -[SBCoverSheetSlidingViewController _transitionToViewControllerAppearState:forUserGesture:]
  -[SBCoverSheetSlidingViewController canTransitionToPresented:]
  -[SBCoverSheetSlidingViewController initWithContentViewController:canBePulledDown:canBePulledUp:dismissalPreemptingGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _dismissGestureChangedWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController wantsFullScreenLayout]
  -[SBCoverSheetSlidingViewController coverSheetIdentifier]
  -[SBCoverSheetSlidingViewController homeGestureSettings]
  -[SBCoverSheetSlidingViewController progressProperty]
  -[SBCoverSheetSlidingViewController completionGroup]
  -[SBCoverSheetSlidingViewController _finishTransitionToPresented:animated:withCompletion:]
  -[SBCoverSheetSlidingViewController setPositionView:]
  -[SBCoverSheetSlidingViewController setGroupCount:]
  -[SBCoverSheetSlidingViewController _presentGestureBeganWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setCanBePulledUp:]
  -[SBCoverSheetSlidingViewController setDismissAddendumGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _updatePositionViewForProgress:forPresentationValue:]
  -[SBCoverSheetSlidingViewController _createProperties]
  -[SBCoverSheetSlidingViewController .cxx_destruct]
  -[SBCoverSheetSlidingViewController _logPresentGestureState:]
  -[SBCoverSheetSlidingViewController setLastTouchLocation:]
  -[SBCoverSheetSlidingViewController setProgressProperty:]
  -[SBCoverSheetSlidingViewController setDismissalTransformMode:]
  -[SBCoverSheetSlidingViewController viewDidLoad]
  -[SBCoverSheetSlidingViewController _handleIndirectPresentGesture:]
  -[SBCoverSheetSlidingViewController setSystemGesturesDelegate:]
  -[SBCoverSheetSlidingViewController _dismissCoverSheetAnimated:withCompletion:]
  -[SBCoverSheetSlidingViewController canBePulledUp]
  -[SBCoverSheetSlidingViewController _addSystemGestureRecognizers]
  -[SBCoverSheetSlidingViewController setDismissGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setScrunchDismissGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setDelegate:]
  -[SBCoverSheetSlidingViewController viewDidAppear:]
  -[SBCoverSheetSlidingViewController _updateForLocation:interactive:]
  -[SBCoverSheetSlidingViewController _averageVelocityForGesture:]
  -[SBCoverSheetSlidingViewController shouldAutorotate]
  -[SBCoverSheetSlidingViewController participantState]
  -[SBCoverSheetSlidingViewController isAnyGestureActivelyRecognized]
  -[SBCoverSheetSlidingViewController activeGestureRecognizer]
  -[SBCoverSheetSlidingViewController _mathForGestureRecognizerPointsDown:position:velocity:instantVelocity:averageVelocity:]
  -[SBCoverSheetSlidingViewController indirectPresentGestureRecognizer]
  -[SBCoverSheetSlidingViewController _startCatchupAnimationWithDuration:completion:]
  -[SBCoverSheetSlidingViewController _updateHomeGestureSettings:]
  -[SBCoverSheetSlidingViewController _isTransitioning]
  -[SBCoverSheetSlidingViewController setIndirectPresentGestureRecognizer:]
  -[SBCoverSheetSlidingViewController lastTouchLocation]
  -[SBCoverSheetSlidingViewController setIndirectPresentGestureCalledBegin:]
  -[SBCoverSheetSlidingViewController dismissGestureRecognizer]
  -[SBCoverSheetSlidingViewController _endTransitionToAppeared:]
  -[SBCoverSheetSlidingViewController catchupProperty]
  -[SBCoverSheetSlidingViewController isDismissGestureActive]
  -[SBCoverSheetSlidingViewController setPerformingCatchUpForPresentation:]
  -[SBCoverSheetSlidingViewController _positionSubviewsForContentFrame:forPresentationValue:]
  -[SBCoverSheetSlidingViewController groupCount]
  -[SBCoverSheetSlidingViewController _setCornerRounded:]
  -[SBCoverSheetSlidingViewController _grabberRecognizer]
  -[SBCoverSheetSlidingViewController dismissalTransformMode]
  -[SBCoverSheetSlidingViewController _logDismissGestureState:forAddendumGesture:]
  -[SBCoverSheetSlidingViewController _shouldRubberBandForGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setHomeGestureSettings:]
  -[SBCoverSheetSlidingViewController _shouldEndPresentedForEndingGestureRecognizer:]
  -[SBCoverSheetSlidingViewController contentViewController]
  -[SBCoverSheetSlidingViewController shouldAutomaticallyForwardRotationMethods]
  -[SBCoverSheetSlidingViewController positionView]
  -[SBCoverSheetSlidingViewController _cancelTransitionForGesture:]
  -[SBCoverSheetSlidingViewController _removeSystemGestureRecognizers]
  -[SBCoverSheetSlidingViewController viewDidLayoutSubviews]
  -[SBCoverSheetSlidingViewController mathForGestureRecognizerPointsDown:]
  -[SBCoverSheetSlidingViewController _locationForGesture:]
  -[SBCoverSheetSlidingViewController _animationTickForPresentationValue:]
  -[SBCoverSheetSlidingViewController viewWillAppear:]
  -[SBCoverSheetSlidingViewController isPresentGestureActive]
  -[SBCoverSheetSlidingViewController scrunchDismissGestureRecognizer]
  -[SBCoverSheetSlidingViewController transitionSettings]
  -[SBCoverSheetSlidingViewController dismissalSlidingMode]
  -[SBCoverSheetSlidingViewController isTransitioning]
  -[SBCoverSheetSlidingViewController setInitialTouchOffsetFromScreenEdge:]
  -[SBCoverSheetSlidingViewController setCanBePulledDown:]
  -[SBCoverSheetSlidingViewController _presentCoverSheetAnimated:forUserGesture:withCompletion:]
  -[SBCoverSheetSlidingViewController delegate]
  -[SBCoverSheetSlidingViewController indirectDismissGestureRecognizer]
  -[SBCoverSheetSlidingViewController roundsCorners]
  -[SBCoverSheetSlidingViewController settings:changedValueForKey:]
  -[SBCoverSheetSlidingViewController setLockScreenSettings:]
  -[SBCoverSheetSlidingViewController canBePulledDown]
  -[SBCoverSheetSlidingViewController _adjustedTouchLocationForCurrentDismissalMode:]
  -[SBCoverSheetSlidingViewController _studyLogForGestureRecognizerState:bounds:position:velocity:]
  -[SBCoverSheetSlidingViewController _handlePresentGesture:]
  -[SBCoverSheetSlidingViewController completionBlock]
  -[SBCoverSheetSlidingViewController _updateCoverSheetDismissSettings:]
  -[SBCoverSheetSlidingViewController isBottomMostSlider]
  -[SBCoverSheetSlidingViewController systemGesturesDelegate]
  -[SBCoverSheetSlidingViewController dealloc]
  -[SBCoverSheetSlidingViewController setRoundsCorners:]
  -[SBCoverSheetSlidingViewController invalidate]
  -[SBCoverSheetSlidingViewController setTransitionSettings:]
  -[SBCoverSheetSlidingViewController _finalLocationForTransitionToPresented:]
  -[SBCoverSheetSlidingViewController setCompletionBlock:]
  -[SBCoverSheetSlidingViewController lockScreenSettings]
  -[SBCoverSheetSlidingViewController setCatchupProperty:]
  -[SBCoverSheetSlidingViewController setDismissalSlidingMode:]
  -[SBCoverSheetSlidingViewController initialTouchOffsetFromScreenEdge]
  -[SBCoverSheetSlidingViewController loadView]
  -[SBCoverSheetSlidingViewController _isPresentingInterstitialForGestureRecognizer:]
  -[SBCoverSheetSlidingViewController supportedInterfaceOrientations]
  -[SBCoverSheetSlidingViewController setPresented:forUserGesture:animated:withCompletion:]
  -[SBCoverSheetSlidingViewController setCompletionGroup:]
  -[SBCoverSheetSlidingViewController performingCatchUpForPresentation]
  -[SBCoverSheetSlidingViewController indirectPresentGestureCalledBegin]
  -[SBCoverSheetSlidingViewController _beginTransitionFromAppeared:]
  -[SBCoverSheetSlidingViewController _presentOrDismissGestureChangedWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _velocityForGesture:]
  -[SBCoverSheetSlidingViewController presentGestureState]
  -[SBCoverSheetSlidingViewController setIndirectDismissGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _presentOrDismissGestureEndedWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _dismissGestureBeganWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setDismissGesturesEnabled:]
  -[SBCoverSheetSlidingViewController _canShowWhileLocked]
  -[SBCoverSheetSlidingViewController _transitionToViewControllerAppearState:]


SBUpdateDragPlatterBlurSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBUpdateDragPlatterBlurSwitcherEventResponse type]


SBWindowDragGestureDestinationModifier : SBSwitcherModifier
 @property  BOOL enteredPlatterZone
 @property  unsigned long currentDestination
 @property  SBAppLayout *currentAppLayout
 @property  SBAppLayout *proposedAppLayout

  // instance methods
  -[SBWindowDragGestureDestinationModifier resizeProgressNotificationsForLayoutRole:inAppLayout:]
  -[SBWindowDragGestureDestinationModifier _displayLinkFired:]
  -[SBWindowDragGestureDestinationModifier .cxx_destruct]
  -[SBWindowDragGestureDestinationModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBWindowDragGestureDestinationModifier didMoveToParentModifier:]
  -[SBWindowDragGestureDestinationModifier currentAppLayout]
  -[SBWindowDragGestureDestinationModifier currentDestination]
  -[SBWindowDragGestureDestinationModifier handleGestureEvent:]
  -[SBWindowDragGestureDestinationModifier _updateForWindowDrag]
  -[SBWindowDragGestureDestinationModifier _updateCurrentDropAction]
  -[SBWindowDragGestureDestinationModifier _transitionResponseForDestination:complete:]
  -[SBWindowDragGestureDestinationModifier handleResizeProgressEvent:]
  -[SBWindowDragGestureDestinationModifier _contentDraggingCommandeerWidth]
  -[SBWindowDragGestureDestinationModifier _draggingFullScreenApp]
  -[SBWindowDragGestureDestinationModifier _isDragOverFullscreenRegionAtLocation:inBounds:]
  -[SBWindowDragGestureDestinationModifier _layoutRoleForDraggedApp]
  -[SBWindowDragGestureDestinationModifier _isDragOverSideGutterRegionsAtLocation:inBounds:totalContentDragGutterWidth:]
  -[SBWindowDragGestureDestinationModifier _draggingSplitViewApp]
  -[SBWindowDragGestureDestinationModifier _draggingCenterWindow]
  -[SBWindowDragGestureDestinationModifier _contentDraggingFloatingActivationWidth]
  -[SBWindowDragGestureDestinationModifier _fullscreenActivationRegionSize]
  -[SBWindowDragGestureDestinationModifier _universalCenterZone]
  -[SBWindowDragGestureDestinationModifier _leftFloatingZoneForCenterWindow]
  -[SBWindowDragGestureDestinationModifier _rightFloatingZoneForCenterWindow]
  -[SBWindowDragGestureDestinationModifier _sideActivationGutterSize]
  -[SBWindowDragGestureDestinationModifier _draggingSlideOverApp]
  -[SBWindowDragGestureDestinationModifier _shouldMinimizeOrEnterSplitHomeScreen]
  -[SBWindowDragGestureDestinationModifier _dismissRightBoundary]
  -[SBWindowDragGestureDestinationModifier _dismissLeftBoundary]
  -[SBWindowDragGestureDestinationModifier _insertSelectedAppLayout:intoAppLayout:inRole:configuration:centerConfiguration:]
  -[SBWindowDragGestureDestinationModifier initWithSelectedAppLayout:initialAppLayout:initialFloatingAppLayout:initialFloatingConfiguration:delegate:]
  -[SBWindowDragGestureDestinationModifier _contentDraggingSideActivationWidth]
  -[SBWindowDragGestureDestinationModifier hasEnteredPlatterZone]
  -[SBWindowDragGestureDestinationModifier proposedAppLayout]


SBAppBrightnessMetric : SBAWDMetric
  // instance methods
  -[SBAppBrightnessMetric dataClass]
  -[SBAppBrightnessMetric postWithDataBuilder:]
  -[SBAppBrightnessMetric metricID]
  -[SBAppBrightnessMetric configureWithData:]


SBAppBrightnessMetricData : SBAWDMetricData
 @property  NSString *appBundleID
 @property  unsigned long brightness
 @property  unsigned long duration

  // instance methods
  -[SBAppBrightnessMetricData appBundleID]
  -[SBAppBrightnessMetricData setBrightness:]
  -[SBAppBrightnessMetricData .cxx_destruct]
  -[SBAppBrightnessMetricData setDuration:]
  -[SBAppBrightnessMetricData brightness]
  -[SBAppBrightnessMetricData setAppBundleID:]
  -[SBAppBrightnessMetricData duration]


SBElasticValueViewController : UIViewController <UIGestureRecognizerDelegate, PTSettingsKeyObserver, SBHUDViewControlling>
 @property  SBElasticHUDSettings *settings
 @property  BOOL isSliderTracking
 @property  BOOL volumeUpButtonIsDown
 @property  BOOL volumeDownButtonIsDown
 @property  CCUIContinuousSliderView<SBElasticGlyphView> *sliderView
 @property  unsigned long axis
 @property  <SBElasticValueDataSource> *dataSource
 @property  <SBElasticValueViewControllerDelegate> *delegate
 @property  {CGPoint=dd} centerForElasticHUDWhenInInteractingState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBElasticValueViewController _reduceMotionStatusDidChange]
  -[SBElasticValueViewController initWithDataSource:]
  -[SBElasticValueViewController initWithCoder:]
  -[SBElasticValueViewController viewWillLayoutSubviews]
  -[SBElasticValueViewController log]
  -[SBElasticValueViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBElasticValueViewController .cxx_destruct]
  -[SBElasticValueViewController _beginTrackingWithGestureRecognizer:]
  -[SBElasticValueViewController viewDidLoad]
  -[SBElasticValueViewController axis]
  -[SBElasticValueViewController setDelegate:]
  -[SBElasticValueViewController viewDidAppear:]
  -[SBElasticValueViewController initWithNibName:bundle:]
  -[SBElasticValueViewController dataSource]
  -[SBElasticValueViewController gestureRecognizerShouldBegin:]
  -[SBElasticValueViewController currentVolume]
  -[SBElasticValueViewController _continueTrackingWithGestureRecognizer:]
  -[SBElasticValueViewController viewWillAppear:]
  -[SBElasticValueViewController sliderView]
  -[SBElasticValueViewController delegate]
  -[SBElasticValueViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBElasticValueViewController settings:changedValueForKey:]
  -[SBElasticValueViewController updateValue:]
  -[SBElasticValueViewController dealloc]
  -[SBElasticValueViewController reloadData]
  -[SBElasticValueViewController loadView]
  -[SBElasticValueViewController _reloadData]
  -[SBElasticValueViewController supportedInterfaceOrientations]
  -[SBElasticValueViewController _endTrackingWithGestureRecognizer:]
  -[SBElasticValueViewController viewDidDisappear:]
  -[SBElasticValueViewController settings]
  -[SBElasticValueViewController _canShowWhileLocked]
  -[SBElasticValueViewController definesAnimatedDismissal]
  -[SBElasticValueViewController dismissAnimatedWithCompletion:]
  -[SBElasticValueViewController centerForElasticHUDWhenInInteractingState]
  -[SBElasticValueViewController noteButtonUpWasHit:]
  -[SBElasticValueViewController noteButtonDownWasHit:]
  -[SBElasticValueViewController noteValueWillDeltaStepToValue:]
  -[SBElasticValueViewController setupFailureRelationshipForGestureRecognizer:]
  -[SBElasticValueViewController _handleSliderViewPanGestureRecognizer:]
  -[SBElasticValueViewController _handleShortLongPressGestureRecognizer:]
  -[SBElasticValueViewController _computeCachedRouteDisplayInformation]
  -[SBElasticValueViewController createSliderView]
  -[SBElasticValueViewController sliderAccessibilityIdentifier]
  -[SBElasticValueViewController _createHapticFeedbackEngines]
  -[SBElasticValueViewController _updateSliderTracking]
  -[SBElasticValueViewController _updateForAxisChange:]
  -[SBElasticValueViewController _createSprings]
  -[SBElasticValueViewController transitionToState:animated:completion:]
  -[SBElasticValueViewController _refreshDebugUI:]
  -[SBElasticValueViewController _updateGlyphStateIfNecessaryForValue:]
  -[SBElasticValueViewController _destroySprings]
  -[SBElasticValueViewController _actuallyDismiss]
  -[SBElasticValueViewController _invalidateDismissalTimerForReason:]
  -[SBElasticValueViewController layoutAxisForInterfaceOrientation:]
  -[SBElasticValueViewController _updateSliderViewMetricsForState:bounds:integralized:useSpringData:]
  -[SBElasticValueViewController _modifySpringsFromState:toState:]
  -[SBElasticValueViewController _forciblyResetMinMaxSprings]
  -[SBElasticValueViewController _clearLastHitDates]
  -[SBElasticValueViewController _updateDimmingVisible:]
  -[SBElasticValueViewController _updateLabelsForAxis:containerViewSize:state:animated:]
  -[SBElasticValueViewController _updateTouchTrackingView]
  -[SBElasticValueViewController isSliderTracking]
  -[SBElasticValueViewController _scheduleDismissal:]
  -[SBElasticValueViewController _setScaleSpringActiveForVolumeButtonUpdateIfNeeded]
  -[SBElasticValueViewController _stretchVolumeSliderForMaximumVolumeUpdateIfNeeded]
  -[SBElasticValueViewController _playMaximumVolumeHaptic]
  -[SBElasticValueViewController _resetInputForMajorAxisSpring]
  -[SBElasticValueViewController _stretchVolumeSliderForMinimumVolumeUpdateIfNeeded]
  -[SBElasticValueViewController _playMinimumVolumeHaptic]
  -[SBElasticValueViewController _updateVolumeLevelSlider:animated:]
  -[SBElasticValueViewController setVolumeUpButtonIsDown:]
  -[SBElasticValueViewController transitionStateContextuallyForVolumeChangeEvent]
  -[SBElasticValueViewController setVolumeDownButtonIsDown:]
  -[SBElasticValueViewController _playTickHapticForSteppedVolume:]
  -[SBElasticValueViewController sizeForState:useSpringData:]
  -[SBElasticValueViewController glyphScaleForState:]
  -[SBElasticValueViewController centerForState:containerViewSize:bounds:useSpringData:]
  -[SBElasticValueViewController _changeVolumeLevel:]
  -[SBElasticValueViewController _updateEdgeFeedbackParametersForMaxVolume:]
  -[SBElasticValueViewController hudPresentationOrientation]
  -[SBElasticValueViewController _isStateChangeAllowedFrom:toState:]
  -[SBElasticValueViewController _updateDebugUIPositions]
  -[SBElasticValueViewController _beginDeflatorDismissalSpringAnimation]
  -[SBElasticValueViewController _animateFromState:toState:animations:completion:]
  -[SBElasticValueViewController _dismissalTimerFired:]
  -[SBElasticValueViewController _noteSliderViewDidBeginTracking]
  -[SBElasticValueViewController _noteSliderViewDidEndTracking]
  -[SBElasticValueViewController noteContinuousValueInteractionWillBegin]
  -[SBElasticValueViewController noteContinuousValueInteractionDidEnd]
  -[SBElasticValueViewController interactiveValueUpdateDiscontinuityInterval]
  -[SBElasticValueViewController changeVolumeLevel:animated:]
  -[SBElasticValueViewController _updateViewsWithSpringData]
  -[SBElasticValueViewController _completeDeflatorDismissalSpringAnimation]
  -[SBElasticValueViewController _updateSliderViewToCenter:size:integralized:continuousCornerRadius:]
  -[SBElasticValueViewController _debugDump:]
  -[SBElasticValueViewController _debugDidTapNextRoute:]
  -[SBElasticValueViewController _debugDidTapResetRoute:]
  -[SBElasticValueViewController _debugChangingStateFromSegmentedControl:]
  -[SBElasticValueViewController _debugAutoDismissalSwitchValueChanged:]
  -[SBElasticValueViewController _debugLockStateSwitchValueChanged:]
  -[SBElasticValueViewController _debugDimensionSliderValueDidChange:]
  -[SBElasticValueViewController _debugHandleNextRoute]
  -[SBElasticValueViewController _debugHandleResetRoute]
  -[SBElasticValueViewController updateActiveRouteDisplay:]
  -[SBElasticValueViewController overrideDisplayNameForRoute:]
  -[SBElasticValueViewController _updateSliderViewMetricsForState:bounds:integralized:useSizeSpringData:useCenterSpringData:]
  -[SBElasticValueViewController cornerRadiusForState:useSpringData:]
  -[SBElasticValueViewController maximumSizeForSlider]
  -[SBElasticValueViewController _markVolumeUpdateInRunningListOfVolumesUpdates:]
  -[SBElasticValueViewController _volumeUpdateIsMaximumOfPotentialVolumeUpdates]
  -[SBElasticValueViewController _volumeUpdateIsMinimumOfPotentialVolumeUpdates]
  -[SBElasticValueViewController _updateDebugString:]
  -[SBElasticValueViewController volumeUpButtonIsDown]
  -[SBElasticValueViewController volumeDownButtonIsDown]


SBApplicationShortcutService : NSObject <SBApplicationServerShortcutDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationShortcutService sharedInstance]

  // instance methods
  -[SBApplicationShortcutService _checkEntitlementsForClient:withCompletionHandler:]
  -[SBApplicationShortcutService .cxx_destruct]
  -[SBApplicationShortcutService _authenticateClient:forBundleIdentifier:withCompletionHandler:]
  -[SBApplicationShortcutService init]
  -[SBApplicationShortcutService applicationServer:client:setDynamicApplicationShortcutItems:forBundleIdentifier:]
  -[SBApplicationShortcutService _sanitizeApplicationShortcutItems:withEntitlements:]
  -[SBApplicationShortcutService applicationServer:client:fetchApplicationShortcutItemsOfTypes:forBundleIdentifier:withCompletion:]


SBPIPMenuButton : UIButton
  // class methods
  +[SBPIPMenuButton pipMenuButton]

  // instance methods
  -[SBPIPMenuButton contextMenuInteraction:willDisplayMenuForConfiguration:animator:]
  -[SBPIPMenuButton contextMenuInteraction:willEndForConfiguration:animator:]


SBDashBoardEmergencyDialerController : NSObject <PTSettingsKeyObserver, CSEmergencyCalling, SBLockScreenCallHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardEmergencyDialerController exitEmergencyDialerAnimated:]
  -[SBDashBoardEmergencyDialerController .cxx_destruct]
  -[SBDashBoardEmergencyDialerController launchEmergencyDialer]
  -[SBDashBoardEmergencyDialerController launchEmergencyDialerAnimated:]
  -[SBDashBoardEmergencyDialerController settings:changedValueForKey:]
  -[SBDashBoardEmergencyDialerController dealloc]
  -[SBDashBoardEmergencyDialerController emergencyDialerExitedWithError:]
  -[SBDashBoardEmergencyDialerController isMakingEmergencyCall]
  -[SBDashBoardEmergencyDialerController initWithCoverSheetViewController:]


SBSystemStatusBatteryDataProvider : NSObject <BCBatteryDeviceObserving, BSInvalidatable>
 @property  STBatteryStatusDomainPublisher *batteryDataPublisher
 @property  BCBatteryDeviceController *batteryDeviceController
 @property  BOOL shouldExposeNotChargingState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemStatusBatteryDataProvider batteryDataPublisher]
  -[SBSystemStatusBatteryDataProvider _registerForNotifications]
  -[SBSystemStatusBatteryDataProvider .cxx_destruct]
  -[SBSystemStatusBatteryDataProvider setShouldExposeNotChargingState:]
  -[SBSystemStatusBatteryDataProvider _updateShouldExposeNotChargingState]
  -[SBSystemStatusBatteryDataProvider init]
  -[SBSystemStatusBatteryDataProvider _noteNotChargingStatusChanged]
  -[SBSystemStatusBatteryDataProvider shouldExposeNotChargingState]
  -[SBSystemStatusBatteryDataProvider _updateData]
  -[SBSystemStatusBatteryDataProvider dealloc]
  -[SBSystemStatusBatteryDataProvider _isInNotChargingState]
  -[SBSystemStatusBatteryDataProvider invalidate]
  -[SBSystemStatusBatteryDataProvider batteryDeviceController]
  -[SBSystemStatusBatteryDataProvider connectedDevicesDidChange:]


SBInteractiveScreenshotGestureHostWindow : SBIgnoredForAutorotationSecureWindow
  // class methods
  +[SBInteractiveScreenshotGestureHostWindow sb_autorotates]

  // instance methods
  -[SBInteractiveScreenshotGestureHostWindow _canBecomeKeyWindow]
  -[SBInteractiveScreenshotGestureHostWindow hitTest:withEvent:]


_SBApplicationLaunchAlertInfo : NSObject
  // instance methods
  -[_SBApplicationLaunchAlertInfo .cxx_destruct]


SBApplicationLaunchAlertService : NSObject <BSDescriptionProviding, SBSceneManagerObserver, FBSceneObserver, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationLaunchAlertService .cxx_destruct]
  -[SBApplicationLaunchAlertService sceneContentStateDidChange:]
  -[SBApplicationLaunchAlertService succinctDescriptionBuilder]
  -[SBApplicationLaunchAlertService descriptionBuilderWithMultilinePrefix:]
  -[SBApplicationLaunchAlertService init]
  -[SBApplicationLaunchAlertService _sceneDidBecomeForeground:]
  -[SBApplicationLaunchAlertService descriptionWithMultilinePrefix:]
  -[SBApplicationLaunchAlertService sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBApplicationLaunchAlertService _sceneWillBecomeForeground:]
  -[SBApplicationLaunchAlertService succinctDescription]
  -[SBApplicationLaunchAlertService _tryShowLaunchAlertsForLaunchAlertInfo:]
  -[SBApplicationLaunchAlertService _reallyShowLaunchAlertOfType:withLaunchAlertInfo:application:]
  -[SBApplicationLaunchAlertService dealloc]
  -[SBApplicationLaunchAlertService _sceneDidResignForeground:]
  -[SBApplicationLaunchAlertService invalidate]
  -[SBApplicationLaunchAlertService initObservingSceneManagers:launchAlertEvaluators:applicationController:alertItemsController:]
  -[SBApplicationLaunchAlertService showLaunchAlertOfType:forApplication:]
  -[SBApplicationLaunchAlertService sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBApplicationLaunchAlertService _invalidateAndDismissLaunchAlertsForLaunchAlertInfo:]


SBHomeScreenService : NSObject <BSServiceConnectionListenerDelegate, SBSHomeScreenServiceClientToServerInterface>
 @property  SBIconController *iconController
 @property  FBServiceClientAuthenticator *resetHomeScreenLayoutAuthenticator
 @property  FBServiceClientAuthenticator *requestSuggestedAppAuthenticator
 @property  FBServiceClientAuthenticator *iconFolderPathLookupAuthenticator
 @property  FBServiceClientAuthenticator *addApplicationIconAuthenticator
 @property  FBServiceClientAuthenticator *addWidgetToTodayViewAuthenticator
 @property  FBServiceClientAuthenticator *lowDensityLayoutAuthenticator
 @property  FBServiceClientAuthenticator *restrictedWidgetsLayoutAuthenticator
 @property  FBServiceClientAuthenticator *largeIconLayoutAuthenticator
 @property  FBServiceClientAuthenticator *addsNewIconsToHomeScreenAuthenticator
 @property  FBServiceClientAuthenticator *showsBadgesInAppLibraryAuthenticator
 @property  FBServiceClientAuthenticator *homeScreenBundleIdentifiersAuthenticator
 @property  FBServiceClientAuthenticator *appLibraryRequestUpdateAuthenticator
 @property  FBServiceClientAuthenticator *displayedDateAuthenticator
 @property  FBServiceClientAuthenticator *configurationAuthenticator
 @property  FBServiceClientAuthenticator *openPodAuthenticator
 @property  FBServiceClientAuthenticator *addDebugIconAuthenticator
 @property  FBServiceClientAuthenticator *observeInstalledWebClipsAuthenticator
 @property  FBServiceClientAuthenticator *activeWidgetInfoAuthenticator
 @property  FBServiceClientAuthenticator *addEmptyPageAuthenticator
 @property  FBServiceClientAuthenticator *homeScreenLayoutAvailabilityAuthenticator
 @property  FBServiceClientAuthenticator *overflowSlotsAuthenticator
 @property  NSMutableSet *activeConnections
 @property  NSMutableSet *webClipObservingConnections
 @property  NSMutableSet *layoutObservingConnections
 @property  BSServiceConnectionListener *connectionListener
 @property  BOOL homeScreenLayoutAvailable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSNumber *lowDensityIconLayoutEnabledValue
 @property  NSNumber *restrictedWidgetsIconLayoutEnabledValue
 @property  NSNumber *largeIconLayoutEnabledValue
 @property  NSNumber *addsNewIconsToHomeScreenValue
 @property  NSNumber *showsBadgesInAppLibraryValue
 @property  SBSHomeScreenServiceArrayOfStrings *allHomeScreenApplicationBundleIdentifiers
 @property  SBSHomeScreenServiceArrayOfStrings *allHomeScreenApplicationPlaceholderBundleIdentifiers
 @property  NSString *allIconLists
 @property  SBSDebugActiveWidgetInfo *debuggingActiveWidgetInfo
 @property  NSNumber *homeScreenLayoutAvailability
 @property  SBSHomeScreenServiceArrayOfNumbers *overflowSlotCounts

  // class methods
  +[SBHomeScreenService isHomeScreenLayoutAvailableForIconController:]

  // instance methods
  -[SBHomeScreenService runWidgetDiscoverabilityTest]
  -[SBHomeScreenService noteInstalledWebClipsDidChange]
  -[SBHomeScreenService organizeAllIconsAcrossPagesWithPageCount:]
  -[SBHomeScreenService runDownloadingIconTest]
  -[SBHomeScreenService organizeAllIconsIntoFoldersWithPageCount:]
  -[SBHomeScreenService randomizeAllIconsAcrossPagesWithPageCount:]
  -[SBHomeScreenService addApplicationIconAuthenticator]
  -[SBHomeScreenService largeIconLayoutAuthenticator]
  -[SBHomeScreenService runRemoveAndRestoreIconTest]
  -[SBHomeScreenService setupHomeScreenForWidgetScrollPerformanceTest]
  -[SBHomeScreenService debuggingActiveWidgetInfo]
  -[SBHomeScreenService iconModelDidLayout:]
  -[SBHomeScreenService requestSuggestedApplicationWithBundleIdentifier:assertionPort:completion:]
  -[SBHomeScreenService lowDensityIconLayoutEnabledValue]
  -[SBHomeScreenService allIconLists]
  -[SBHomeScreenService overflowSlotsAuthenticator]
  -[SBHomeScreenService connectionListener]
  -[SBHomeScreenService resetTodayViewLayout]
  -[SBHomeScreenService configurationAuthenticator]
  -[SBHomeScreenService _requestAppLibraryUpdate:reason:optionalCompletionHandler:]
  -[SBHomeScreenService allHomeScreenApplicationBundleIdentifiers]
  -[SBHomeScreenService initWithIconController:]
  -[SBHomeScreenService listener:didReceiveConnection:withContext:]
  -[SBHomeScreenService isHomeScreenLayoutAvailable]
  -[SBHomeScreenService addWidgetToTodayViewAuthenticator]
  -[SBHomeScreenService layoutObservingConnections]
  -[SBHomeScreenService allHomeScreenApplicationPlaceholderBundleIdentifiers]
  -[SBHomeScreenService .cxx_destruct]
  -[SBHomeScreenService removeWidgetsFromHomeScreen]
  -[SBHomeScreenService setIconListsHidden:]
  -[SBHomeScreenService addApplicationIconToHomeScreenWithBundleIdentifier:]
  -[SBHomeScreenService homeScreenLayoutAvailabilityAuthenticator]
  -[SBHomeScreenService showsBadgesInAppLibraryValue]
  -[SBHomeScreenService setShowsBadgesInAppLibraryValue:]
  -[SBHomeScreenService addsNewIconsToHomeScreenValue]
  -[SBHomeScreenService noteHomeScreenLayoutAvailabilityDidChange]
  -[SBHomeScreenService activeWidgetInfoAuthenticator]
  -[SBHomeScreenService runFloatingDockStressTestWithCompletion:]
  -[SBHomeScreenService webClipObservingConnections]
  -[SBHomeScreenService removeAllWidgets]
  -[SBHomeScreenService requestSuggestedAppAuthenticator]
  -[SBHomeScreenService configureDeweyOneCategoryWithAllApps]
  -[SBHomeScreenService changeDisplayedDateOffsetOverride:]
  -[SBHomeScreenService restrictedWidgetsIconLayoutEnabledValue]
  -[SBHomeScreenService clearTodayViewLayout]
  -[SBHomeScreenService setHomeScreenLayoutAvailable:]
  -[SBHomeScreenService configureDeweyEachAppHasItsOwnCategory]
  -[SBHomeScreenService restrictedWidgetsLayoutAuthenticator]
  -[SBHomeScreenService folderPathToIconWithBundleIdentifier:]
  -[SBHomeScreenService resetCategoriesLayoutWithCompletion:]
  -[SBHomeScreenService addDebugIconWithSizeClassDescription:inPage:atPositionDescription:]
  -[SBHomeScreenService configureCategoryMapProviderToUseCategoryMapAtURL:]
  -[SBHomeScreenService dismissAppLibraryWithCompletion:]
  -[SBHomeScreenService setRestrictedWidgetsIconLayoutEnabledValue:]
  -[SBHomeScreenService addEmptyPageAuthenticator]
  -[SBHomeScreenService requestAppLibraryUpdate:reason:completion:]
  -[SBHomeScreenService addEmptyPage]
  -[SBHomeScreenService addDebugIconAuthenticator]
  -[SBHomeScreenService hasWidgetWithBundleIdentifier:]
  -[SBHomeScreenService observeInstalledWebClipsAuthenticator]
  -[SBHomeScreenService openPodAuthenticator]
  -[SBHomeScreenService resetHomeScreenLayoutWithCompletion:]
  -[SBHomeScreenService activeConnections]
  -[SBHomeScreenService setAddsNewIconsToHomeScreenValue:]
  -[SBHomeScreenService insertEmptyPageAtIndex:]
  -[SBHomeScreenService setLowDensityIconLayoutEnabledValue:]
  -[SBHomeScreenService reloadIcons]
  -[SBHomeScreenService configureLibraryWithCategoryLimit:]
  -[SBHomeScreenService lowDensityLayoutAuthenticator]
  -[SBHomeScreenService iconFolderPathLookupAuthenticator]
  -[SBHomeScreenService _translatedSBSPresentationErrorCompletionForSBHPresentationErrorCompletion:]
  -[SBHomeScreenService changeDisplayedDateOverride:]
  -[SBHomeScreenService displayedDateAuthenticator]
  -[SBHomeScreenService setLargeIconLayoutEnabledValue:]
  -[SBHomeScreenService setObservingInstalledWebClips:]
  -[SBHomeScreenService resetHomeScreenLayoutAuthenticator]
  -[SBHomeScreenService homeScreenLayoutAvailability]
  -[SBHomeScreenService dealloc]
  -[SBHomeScreenService addsNewIconsToHomeScreenAuthenticator]
  -[SBHomeScreenService refreshAppLibrary:reason:]
  -[SBHomeScreenService clearAllOverflowSlotCounts]
  -[SBHomeScreenService presentAppLibraryAnimated:completion:]
  -[SBHomeScreenService ignoreAllApps]
  -[SBHomeScreenService setObservingHomeScreenLayoutAvailability:]
  -[SBHomeScreenService showsBadgesInAppLibraryAuthenticator]
  -[SBHomeScreenService iconController]
  -[SBHomeScreenService homeScreenBundleIdentifiersAuthenticator]
  -[SBHomeScreenService appLibraryRequestUpdateAuthenticator]
  -[SBHomeScreenService addWidgetToTodayViewWithBundleIdentifier:]
  -[SBHomeScreenService largeIconLayoutEnabledValue]
  -[SBHomeScreenService overrideBadgeValue:forBundleIdentifier:]
  -[SBHomeScreenService forbidApplicationBundleIdentifierFromLibrary:withCompletion:]
  -[SBHomeScreenService reloadHomeScreenLayout]
  -[SBHomeScreenService unforbidApplicationBundleIdentifierFromLibrary:withCompletion:]
  -[SBHomeScreenService debugContinuityWithBadgeType:]
  -[SBHomeScreenService overflowSlotCounts]
  -[SBHomeScreenService presentAppLibraryCategoryPodForCategoryIdentifier:completion:]


SBEntityRemovalToHomeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalToHomeSwitcherModifier isContainerStatusBarVisible]
  -[SBEntityRemovalToHomeSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenDimmingAlpha]
  -[SBEntityRemovalToHomeSwitcherModifier wantsDockBehaviorAssertion]
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenBackdropBlurType]
  -[SBEntityRemovalToHomeSwitcherModifier transitionWillBegin]
  -[SBEntityRemovalToHomeSwitcherModifier wallpaperScale]
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenScale]
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenAlpha]
  -[SBEntityRemovalToHomeSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBEntityRemovalToHomeSwitcherModifier dockProgress]
  -[SBEntityRemovalToHomeSwitcherModifier isHomeScreenContentRequired]
  -[SBEntityRemovalToHomeSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBEntityRemovalToHomeSwitcherModifier dockUpdateMode]
  -[SBEntityRemovalToHomeSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBEntityRemovalToHomeSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalToHomeSwitcherModifier isSwitcherWindowVisible]
  -[SBEntityRemovalToHomeSwitcherModifier handleTimerEvent:]
  -[SBEntityRemovalToHomeSwitcherModifier wallpaperStyle]
  -[SBEntityRemovalToHomeSwitcherModifier cornerRadiiForIndex:]
  -[SBEntityRemovalToHomeSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBEntityRemovalToHomeSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBEntityRemovalToHomeSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBEntityRemovalToHomeSwitcherModifier transitionWillUpdate]
  -[SBEntityRemovalToHomeSwitcherModifier initWithTransitionID:homeAnimationDelay:multitaskingModifier:]
  -[SBEntityRemovalToHomeSwitcherModifier _cornerRadiusSettings]
  -[SBEntityRemovalToHomeSwitcherModifier isContentStatusBarVisible]


SBLockScreenDisabledAssertionManager : NSObject <SBAutoUnlockRule>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenDisabledAssertionManager removeLockScreenDisableAssertion:]
  -[SBLockScreenDisabledAssertionManager isLockScreenDisabledForAssertion]
  -[SBLockScreenDisabledAssertionManager addLockScreenDisableAssertion:]
  -[SBLockScreenDisabledAssertionManager .cxx_destruct]
  -[SBLockScreenDisabledAssertionManager init]
  -[SBLockScreenDisabledAssertionManager shouldAutoUnlockForSource:]


SBLoginAppContainerPluginWrapperView : UIView
  // instance methods
  -[SBLoginAppContainerPluginWrapperView .cxx_destruct]
  -[SBLoginAppContainerPluginWrapperView layoutSubviews]
  -[SBLoginAppContainerPluginWrapperView initWithFrame:overlayWrapperView:pluginView:]


SBLoginAppContainerPluginWrapperViewController : UIViewController
 @property  SBLockScreenPlugin *plugin

  // instance methods
  -[SBLoginAppContainerPluginWrapperViewController handleVolumeUpButtonPress]
  -[SBLoginAppContainerPluginWrapperViewController handleVolumeDownButtonPress]
  -[SBLoginAppContainerPluginWrapperViewController .cxx_destruct]
  -[SBLoginAppContainerPluginWrapperViewController initWithPlugin:]
  -[SBLoginAppContainerPluginWrapperViewController plugin]
  -[SBLoginAppContainerPluginWrapperViewController loadView]


SBNCAlertingController : NSObject <NCAlertingController>
 @property  SBNCSoundController *soundController
 @property  SBNCScreenController *screenController
 @property  SBLockScreenManager *lockScreenManager
 @property  SBCommunicationPolicyManager *communicationPolicyManager
 @property  NCNotificationRequest *activeRequestWithRealerts
 @property  NSMutableSet *realertTimers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNCAlertingController _scheduleRealertsForNotificationRequest:]
  -[SBNCAlertingController soundController]
  -[SBNCAlertingController screenController]
  -[SBNCAlertingController setScreenController:]
  -[SBNCAlertingController .cxx_destruct]
  -[SBNCAlertingController _shouldRealert]
  -[SBNCAlertingController setLockScreenManager:]
  -[SBNCAlertingController resetAutomaticLockStateForNotificationRequest:]
  -[SBNCAlertingController _lockStateChanged]
  -[SBNCAlertingController _shouldScreenTimeSuppressNotificationRequest:]
  -[SBNCAlertingController killRealerts]
  -[SBNCAlertingController setSoundController:]
  -[SBNCAlertingController _killRealertsForNotificationRequest:]
  -[SBNCAlertingController _activeAlertDestinationsInRequestDestinations:]
  -[SBNCAlertingController init]
  -[SBNCAlertingController _notificationCenterDidPresent]
  -[SBNCAlertingController setActiveRequestWithRealerts:]
  -[SBNCAlertingController activeRequestWithRealerts]
  -[SBNCAlertingController killAlertsForNotificationRequest:]
  -[SBNCAlertingController _alertNowForNotificationRequest:]
  -[SBNCAlertingController alertOnPostForNotificationRequest:forRequestDestinations:]
  -[SBNCAlertingController alertOnPresentationForNotificationRequest:presentingDestination:]
  -[SBNCAlertingController realertTimers]
  -[SBNCAlertingController _realertTimerFired:]
  -[SBNCAlertingController lockScreenManager]
  -[SBNCAlertingController _alertNowForNotificationRequest:presentingDestination:]
  -[SBNCAlertingController _hardwareButtonPressed:]
  -[SBNCAlertingController initWithSoundController:screenController:lockScreenManager:communicationPolicyManager:]
  -[SBNCAlertingController setRealertTimers:]
  -[SBNCAlertingController _isBundleIdentifierBlockedForScreenTimeExpiration:]
  -[SBNCAlertingController communicationPolicyManager]
  -[SBNCAlertingController _isBundleIdentifierBlockedForCommunicationPolicy:]
  -[SBNCAlertingController _shouldScreenTimeSuppressNotificationsForBundleIdentifier:]
  -[SBNCAlertingController setCommunicationPolicyManager:]


SBControlCenterModuleTransientOverlayViewController : SBTransientOverlayViewController <CCUIModuleAlertViewControllerDelegate>
 @property  <SBControlCenterModuleTransientOverlayViewControllerDelegate> *delegate
 @property  CCSModulePresentationOptions *presentationOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBControlCenterModuleTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBControlCenterModuleTransientOverlayViewController initWithCoder:]
  -[SBControlCenterModuleTransientOverlayViewController handleHomeButtonPress]
  -[SBControlCenterModuleTransientOverlayViewController .cxx_destruct]
  -[SBControlCenterModuleTransientOverlayViewController viewDidLoad]
  -[SBControlCenterModuleTransientOverlayViewController _dismiss]
  -[SBControlCenterModuleTransientOverlayViewController setDelegate:]
  -[SBControlCenterModuleTransientOverlayViewController initWithNibName:bundle:]
  -[SBControlCenterModuleTransientOverlayViewController init]
  -[SBControlCenterModuleTransientOverlayViewController presentationOptions]
  -[SBControlCenterModuleTransientOverlayViewController shouldDisableControlCenter]
  -[SBControlCenterModuleTransientOverlayViewController delegate]
  -[SBControlCenterModuleTransientOverlayViewController supportedInterfaceOrientations]
  -[SBControlCenterModuleTransientOverlayViewController _canShowWhileLocked]
  -[SBControlCenterModuleTransientOverlayViewController _shouldBlurBackground]
  -[SBControlCenterModuleTransientOverlayViewController contentModuleAlertViewControllerNeedsDismissal:]
  -[SBControlCenterModuleTransientOverlayViewController initWithModuleIdentifier:presentationOptions:]
  -[SBControlCenterModuleTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBControlCenterModuleTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBControlCenterModuleTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBControlCenterModuleTransientOverlayViewController handleGestureDismissal]
  -[SBControlCenterModuleTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBControlCenterModuleTransientOverlayViewController shouldDisableOrientationUpdates]
  -[SBControlCenterModuleTransientOverlayViewController _animateTransitionFromViewController:toViewController:containerView:isAnimated:otherAnimations:completion:]


SBFocusModesHomeScreenSettingsManager : NSObject <SBFocusModesHomeScreenSettingsServerDelegate>
 @property  SBFocusModesHomeScreenSettingsServer *settingsServer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFocusModesHomeScreenSettingsManager .cxx_destruct]
  -[SBFocusModesHomeScreenSettingsManager init]
  -[SBFocusModesHomeScreenSettingsManager settingsServer:homeScreenSnapshotsWithRequest:completion:]
  -[SBFocusModesHomeScreenSettingsManager settingsServer:updateFocusModeHomeScreenSettingsWithRequest:]
  -[SBFocusModesHomeScreenSettingsManager settingsServer]
  -[SBFocusModesHomeScreenSettingsManager setSettingsServer:]


SBDockSuggestionsIconListView : SBFloatingDockIconListView

SBFloatingDockSuggestionsViewController : UIViewController <SBFloatingDockSuggestionsModelDelegate, SBLayoutStateTransitionObserver, SBIconViewProviding, SBFloatingDockSuggestionsViewProviding, SBIconViewQuerying>
 @property  SBIconController *iconController
 @property  SBApplicationController *applicationController
 @property  SBRecentDisplayItemsDataStore *recentsDataStore
 @property  SBRecentDisplayItemsDefaults *recentsDefaults
 @property  SBAppSuggestionManager *appSuggestionManager
 @property  SBIconListModel *suggestionsIconListModel
 @property  SBFloatingDockSuggestionsModel *suggestionsModel
 @property  NSMutableArray *deferredIconUpdates
 @property  SBLayoutStateTransitionCoordinator *layoutStateTransitionCoordinator
 @property  long long effectiveEnvironmentMode
 @property  BOOL visible
 @property  <SBIconViewProviding> *iconViewProvider
 @property  SBDockIconListView *listView
 @property  <SBFloatingDockSuggestionsViewControllerDelegate> *delegate
 @property  unsigned long numberOfRecents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBFloatingDockViewController *floatingDockViewController
 @property  NSSet *presentedIconLocations

  // instance methods
  -[SBFloatingDockSuggestionsViewController applicationController]
  -[SBFloatingDockSuggestionsViewController setFloatingDockViewController:]
  -[SBFloatingDockSuggestionsViewController iconViewForIcon:location:]
  -[SBFloatingDockSuggestionsViewController setListView:]
  -[SBFloatingDockSuggestionsViewController firstIconViewForIcon:excludingLocations:]
  -[SBFloatingDockSuggestionsViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFloatingDockSuggestionsViewController configureIconView:forIcon:]
  -[SBFloatingDockSuggestionsViewController setVisible:]
  -[SBFloatingDockSuggestionsViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFloatingDockSuggestionsViewController presentedIconLocations]
  -[SBFloatingDockSuggestionsViewController iconViewProvider]
  -[SBFloatingDockSuggestionsViewController .cxx_destruct]
  -[SBFloatingDockSuggestionsViewController enumerateDisplayedIconViewsForIcon:usingBlock:]
  -[SBFloatingDockSuggestionsViewController setDelegate:]
  -[SBFloatingDockSuggestionsViewController initWithNibName:bundle:]
  -[SBFloatingDockSuggestionsViewController isIconViewRecycled:]
  -[SBFloatingDockSuggestionsViewController isVisible]
  -[SBFloatingDockSuggestionsViewController dequeueReusableIconViewOfClass:]
  -[SBFloatingDockSuggestionsViewController _iconForDisplayItem:]
  -[SBFloatingDockSuggestionsViewController isDisplayingIconView:inLocation:]
  -[SBFloatingDockSuggestionsViewController floatingDockViewController]
  -[SBFloatingDockSuggestionsViewController firstIconViewForIcon:inLocations:]
  -[SBFloatingDockSuggestionsViewController isDisplayingIcon:inLocations:]
  -[SBFloatingDockSuggestionsViewController numberOfRecents]
  -[SBFloatingDockSuggestionsViewController setLayoutStateTransitionCoordinator:]
  -[SBFloatingDockSuggestionsViewController delegate]
  -[SBFloatingDockSuggestionsViewController isDisplayingIconView:]
  -[SBFloatingDockSuggestionsViewController listView]
  -[SBFloatingDockSuggestionsViewController recycleIconView:]
  -[SBFloatingDockSuggestionsViewController firstIconViewForIcon:]
  -[SBFloatingDockSuggestionsViewController layoutStateTransitionCoordinator]
  -[SBFloatingDockSuggestionsViewController dealloc]
  -[SBFloatingDockSuggestionsViewController enumerateDisplayedIconViewsUsingBlock:]
  -[SBFloatingDockSuggestionsViewController iconController]
  -[SBFloatingDockSuggestionsViewController loadView]
  -[SBFloatingDockSuggestionsViewController isDisplayingIcon:inLocation:]
  -[SBFloatingDockSuggestionsViewController isDisplayingIcon:]
  -[SBFloatingDockSuggestionsViewController isPresentingIconLocation:]
  -[SBFloatingDockSuggestionsViewController dockViewWillBecomeVisible]
  -[SBFloatingDockSuggestionsViewController dockViewWillResignVisible]
  -[SBFloatingDockSuggestionsViewController dockViewDidResignVisible]
  -[SBFloatingDockSuggestionsViewController dockViewDidBecomeVisible]
  -[SBFloatingDockSuggestionsViewController dockFolderWillBeginTransitioning]
  -[SBFloatingDockSuggestionsViewController dockFolderDidEndTransitioning]
  -[SBFloatingDockSuggestionsViewController suggestionsModel]
  -[SBFloatingDockSuggestionsViewController _iconModelDidChange:]
  -[SBFloatingDockSuggestionsViewController _listLayoutDidChange:]
  -[SBFloatingDockSuggestionsViewController initWithNumberOfRecents:iconController:applicationController:layoutStateTransitionCoordinator:suggestionsModel:iconViewProvider:]
  -[SBFloatingDockSuggestionsViewController _loadAndPlaceIconsInViewForDisplayItems:]
  -[SBFloatingDockSuggestionsViewController _performDeferredIconUpdates]
  -[SBFloatingDockSuggestionsViewController _onHomescreen]
  -[SBFloatingDockSuggestionsViewController _shouldDeferUpdateInvolvingContinuity:]
  -[SBFloatingDockSuggestionsViewController _emitPresentedEventInvolvingContinuity:fromModel:atIndex:]
  -[SBFloatingDockSuggestionsViewController _fadeInIcon:isReplacing:completion:]
  -[SBFloatingDockSuggestionsViewController _didChangeNumberOfIcons]
  -[SBFloatingDockSuggestionsViewController _performOrDefer:iconUpdate:]
  -[SBFloatingDockSuggestionsViewController _fadeOutIcon:atIndex:isReplacing:completion:]
  -[SBFloatingDockSuggestionsViewController dockSuggestionsModel:didInsertItem:atIndex:involvesContinuity:]
  -[SBFloatingDockSuggestionsViewController dockSuggestionsModel:didRemoveItem:atIndex:involvesContinuity:]
  -[SBFloatingDockSuggestionsViewController dockSuggestionsModel:didReplaceItem:atIndex:withItem:atIndex:involvesContinuity:]
  -[SBFloatingDockSuggestionsViewController dockSuggestionsModel:didReloadItems:withItems:]
  -[SBFloatingDockSuggestionsViewController recentsDataStore]
  -[SBFloatingDockSuggestionsViewController recentsDefaults]
  -[SBFloatingDockSuggestionsViewController appSuggestionManager]
  -[SBFloatingDockSuggestionsViewController suggestionsIconListModel]
  -[SBFloatingDockSuggestionsViewController deferredIconUpdates]
  -[SBFloatingDockSuggestionsViewController setDeferredIconUpdates:]
  -[SBFloatingDockSuggestionsViewController effectiveEnvironmentMode]
  -[SBFloatingDockSuggestionsViewController setEffectiveEnvironmentMode:]


SBDeviceApplicationSceneClassicAccessoryView : UIView <BSInvalidatable>
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  long long buttonOrientation
 @property  <SBDeviceApplicationSceneClassicAccessoryViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneClassicAccessoryView sceneHandle]
  -[SBDeviceApplicationSceneClassicAccessoryView .cxx_destruct]
  -[SBDeviceApplicationSceneClassicAccessoryView _sceneHandleDidUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationSceneClassicAccessoryView layoutSubviews]
  -[SBDeviceApplicationSceneClassicAccessoryView setDelegate:]
  -[SBDeviceApplicationSceneClassicAccessoryView _isZoomed]
  -[SBDeviceApplicationSceneClassicAccessoryView delegate]
  -[SBDeviceApplicationSceneClassicAccessoryView dealloc]
  -[SBDeviceApplicationSceneClassicAccessoryView invalidate]
  -[SBDeviceApplicationSceneClassicAccessoryView _sceneHandleDidUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDeviceApplicationSceneClassicAccessoryView _updateZoomButton]
  -[SBDeviceApplicationSceneClassicAccessoryView _changeZoom:]
  -[SBDeviceApplicationSceneClassicAccessoryView _updateRotationButton]
  -[SBDeviceApplicationSceneClassicAccessoryView _rotateApplicationScene:]
  -[SBDeviceApplicationSceneClassicAccessoryView _setupPositioningAndRotationForInterfaceOrientation:offscreen:]
  -[SBDeviceApplicationSceneClassicAccessoryView _updateButtonVisibilityAnimated:]
  -[SBDeviceApplicationSceneClassicAccessoryView _zoomButtonShouldBeVisible]
  -[SBDeviceApplicationSceneClassicAccessoryView _rotationButtonShouldBeVisible]
  -[SBDeviceApplicationSceneClassicAccessoryView _updateOrientationFrom:toOrientation:animationSettings:]
  -[SBDeviceApplicationSceneClassicAccessoryView _updateRotationButtonWithAnimationSettings:]
  -[SBDeviceApplicationSceneClassicAccessoryView _updateRotationButtonConstraints]
  -[SBDeviceApplicationSceneClassicAccessoryView initWithFrame:sceneHandle:]
  -[SBDeviceApplicationSceneClassicAccessoryView buttonOrientation]
  -[SBDeviceApplicationSceneClassicAccessoryView setButtonOrientation:]


SBCardDropSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBCardDropSwitcherModifier settingsForAnimatableProperty:]
  -[SBCardDropSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[SBCardDropSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBCardDropSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[SBCardDropSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBCardDropSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBCardDropSwitcherModifier isScrollEnabled]
  -[SBCardDropSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCardDropSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBCardDropSwitcherModifier handleTransitionEvent:]
  -[SBCardDropSwitcherModifier .cxx_destruct]
  -[SBCardDropSwitcherModifier shouldShowBackdropViewAtIndex:]
  -[SBCardDropSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBCardDropSwitcherModifier animatablePropertyIdentifiers]
  -[SBCardDropSwitcherModifier handleTimerEvent:]
  -[SBCardDropSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBCardDropSwitcherModifier topMostLayoutElements]
  -[SBCardDropSwitcherModifier updateModeForAnimatableProperty:]
  -[SBCardDropSwitcherModifier modelValueForAnimatableProperty:currentValue:creating:]
  -[SBCardDropSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBCardDropSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBCardDropSwitcherModifier blurTargetPreferenceForLayoutRole:inAppLayout:]
  -[SBCardDropSwitcherModifier shouldScaleContentToFillBoundsAtIndex:]
  -[SBCardDropSwitcherModifier handleSceneReadyEvent:]
  -[SBCardDropSwitcherModifier handleAnimatablePropertyChangedEvent:]
  -[SBCardDropSwitcherModifier handleSwitcherDropEvent:]
  -[SBCardDropSwitcherModifier _completeIfNeeded]
  -[SBCardDropSwitcherModifier _recomputeBlurStateWithCompletion:]
  -[SBCardDropSwitcherModifier handleBlurProgressEvent:]
  -[SBCardDropSwitcherModifier _appLayoutContainsModifiedAppLayout:]
  -[SBCardDropSwitcherModifier initWithDropContext:]


SBFluidSwitcherAppClipLiveContentOverlay : NSObject <SBUISizeObservingViewDelegate, SBFullScreenSwitcherSceneLiveContentOverlay>
 @property  UIViewController *contentViewController
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBSwitcherLiveContentOverlayDelegate> *delegate
 @property  UIView *contentOverlayView
 @property  BOOL insetForHomeAffordance
 @property  BOOL asyncRenderingEnabled
 @property  BOOL requiresLegacyRotationSupport

  // instance methods
  -[SBFluidSwitcherAppClipLiveContentOverlay isInsetForHomeAffordance]
  -[SBFluidSwitcherAppClipLiveContentOverlay leadingStatusBarStyle]
  -[SBFluidSwitcherAppClipLiveContentOverlay trailingStatusBarStyle]
  -[SBFluidSwitcherAppClipLiveContentOverlay setInsetForHomeAffordance:]
  -[SBFluidSwitcherAppClipLiveContentOverlay currentStatusBarHeight]
  -[SBFluidSwitcherAppClipLiveContentOverlay setContentReferenceSize:interfaceOrientation:]
  -[SBFluidSwitcherAppClipLiveContentOverlay displayLayoutElement]
  -[SBFluidSwitcherAppClipLiveContentOverlay .cxx_destruct]
  -[SBFluidSwitcherAppClipLiveContentOverlay requiresLegacyRotationSupport]
  -[SBFluidSwitcherAppClipLiveContentOverlay isAsyncRenderingEnabled]
  -[SBFluidSwitcherAppClipLiveContentOverlay configureWithWorkspaceEntity:referenceFrame:interfaceOrientation:layoutRole:spaceConfiguration:floatingConfiguration:hasClassicAppOrientationMismatch:]
  -[SBFluidSwitcherAppClipLiveContentOverlay preferredInterfaceOrientation]
  -[SBFluidSwitcherAppClipLiveContentOverlay setDelegate:]
  -[SBFluidSwitcherAppClipLiveContentOverlay overlayType]
  -[SBFluidSwitcherAppClipLiveContentOverlay setUsesBrightSceneViewBackgroundMaterial:]
  -[SBFluidSwitcherAppClipLiveContentOverlay contentOverlayView]
  -[SBFluidSwitcherAppClipLiveContentOverlay setBlurViewIconScale:]
  -[SBFluidSwitcherAppClipLiveContentOverlay isContentUpdating]
  -[SBFluidSwitcherAppClipLiveContentOverlay contentViewController]
  -[SBFluidSwitcherAppClipLiveContentOverlay noteKeyboardFocusDidChangeToSceneID:]
  -[SBFluidSwitcherAppClipLiveContentOverlay setStatusBarHidden:nubViewHidden:animator:]
  -[SBFluidSwitcherAppClipLiveContentOverlay delegate]
  -[SBFluidSwitcherAppClipLiveContentOverlay _debugPostModernRotationSupportedInterfaceOrientations]
  -[SBFluidSwitcherAppClipLiveContentOverlay setAsyncRenderingEnabled:withMinificationFilterEnabled:]
  -[SBFluidSwitcherAppClipLiveContentOverlay setMatchMovedToScene:]
  -[SBFluidSwitcherAppClipLiveContentOverlay dealloc]
  -[SBFluidSwitcherAppClipLiveContentOverlay invalidate]
  -[SBFluidSwitcherAppClipLiveContentOverlay disableAsynchronousRenderingForNextCommit]
  -[SBFluidSwitcherAppClipLiveContentOverlay setLiveContentBlurEnabled:duration:blurDelay:iconViewScale:began:completion:]
  -[SBFluidSwitcherAppClipLiveContentOverlay setDimmed:]
  -[SBFluidSwitcherAppClipLiveContentOverlay supportedInterfaceOrientations]
  -[SBFluidSwitcherAppClipLiveContentOverlay _installedApplicationsDidChange:]
  -[SBFluidSwitcherAppClipLiveContentOverlay sizeObservingView:didChangeSize:]
  -[SBFluidSwitcherAppClipLiveContentOverlay initWithPlaceholderEntity:]
  -[SBFluidSwitcherAppClipLiveContentOverlay _createAndConfigureStatusBar]
  -[SBFluidSwitcherAppClipLiveContentOverlay _beginPollingUpdateStillAvailable]
  -[SBFluidSwitcherAppClipLiveContentOverlay _launchApplication:]


SBSoftwareUpdateService : NSObject <SBSystemServiceServerSoftwareUpdateDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSoftwareUpdateService sharedInstance]

  // instance methods
  -[SBSoftwareUpdateService .cxx_destruct]
  -[SBSoftwareUpdateService _init]
  -[SBSoftwareUpdateService systemServiceServer:client:setPasscodePolicy:]
  -[SBSoftwareUpdateService systemServiceServer:client:passcodePolicy:]


SBCommandTabWindow : SBWindow
  // instance methods
  -[SBCommandTabWindow _canBecomeKeyWindow]


SBCommandTabController : NSObject <SBCommandTabViewControllerDelegate, SBRecentDisplayItemsControllerDelegate, SBRecentDisplayItemsPersistenceDelegate>
 @property  SBWindow *window
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBCommandTabController sharedInstance]
  +[SBCommandTabController sharedInstanceIfExists]
  +[SBCommandTabController keyCommands]

  // instance methods
  -[SBCommandTabController previous]
  -[SBCommandTabController next]
  -[SBCommandTabController .cxx_destruct]
  -[SBCommandTabController init]
  -[SBCommandTabController _clearTimer]
  -[SBCommandTabController isVisible]
  -[SBCommandTabController dismiss]
  -[SBCommandTabController dealloc]
  -[SBCommandTabController window]
  -[SBCommandTabController launchCurrentSelectedApplication]
  -[SBCommandTabController removeCurrentSelectedApplication]
  -[SBCommandTabController activateWithKeyCommand:]
  -[SBCommandTabController recentDisplayItemsController:shouldAddItem:]
  -[SBCommandTabController recentDisplayItemsControllerDidUpdateDisplayItems:]
  -[SBCommandTabController recentDisplayItemsController:didRemoveItem:]
  -[SBCommandTabController _allowAppToAppearWhileHidden:]
  -[SBCommandTabController _disallowAppFromAppearingWhileHidden:]
  -[SBCommandTabController _activateWithForwardDirection:]
  -[SBCommandTabController _showWindow:]
  -[SBCommandTabController viewController:selectedApplicationWithDisplayItem:]
  -[SBCommandTabController _emitAnalyticsEventForDisplayItem:]
  -[SBCommandTabController _showCommandTabBarAfterTimer:]
  -[SBCommandTabController viewControllerWantsDismissal:]
  -[SBCommandTabController persistedDisplayItemsForDataStore:]
  -[SBCommandTabController dataStore:persistDisplayItems:]
  -[SBCommandTabController dataStore:shouldRestorePersistedDisplayItem:]


SBInCallPresentationSession : NSObject <SBApplicationSceneHandleUpdateContributing, SBBannerUnfurlSourceContextProviding, SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneStatusBarStateObserver, SBInCallBannerPresentableViewControllerDelegate, SBInCallTransientOverlayViewControllerDelegate, SBSceneHandleActionConsuming, SBWorkspaceApplicationSceneTransitionContextDelegate, SBLayoutStateTransitionObserver, SBUIActiveOrientationObserver, FBSceneObserver, BSInvalidatable, SBApplicationHosting>
 @property  <SBInCallPresentationSessionDelegate> *delegate
 @property  double preferredBannerHeight
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  BOOL supportsHandlingDeviceLock
 @property  BOOL disallowsLockHardwareButtonDoublePress
 @property  BOOL shouldIgnoreHomeIndicatorAutoHiddenClientSettings
 @property  BOOL isFullscreenCallInSwitcher
 @property  {UIEdgeInsets=dddd} preferredPIPDodgingInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallPresentationSession activeInterfaceOrientationWillChangeToOrientation:]
  -[SBInCallPresentationSession layoutStateForApplicationTransitionContext:]
  -[SBInCallPresentationSession applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBInCallPresentationSession activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBInCallPresentationSession sceneHandle:didCreateScene:]
  -[SBInCallPresentationSession supportsBecomingVisibleWhenUnlockingFromSource:wakingDisplay:]
  -[SBInCallPresentationSession layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBInCallPresentationSession sceneHandle]
  -[SBInCallPresentationSession layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBInCallPresentationSession handleHeadsetButtonPress:]
  -[SBInCallPresentationSession _windowedAccessoryDidAttachOrDetach:]
  -[SBInCallPresentationSession .cxx_destruct]
  -[SBInCallPresentationSession canHostAnApp]
  -[SBInCallPresentationSession scene:didCompleteUpdateWithContext:error:]
  -[SBInCallPresentationSession hostedAppSceneHandles]
  -[SBInCallPresentationSession conformsToSBApplicationHosting]
  -[SBInCallPresentationSession succinctDescriptionBuilder]
  -[SBInCallPresentationSession sceneWithIdentifier:didChangeStatusBarStyleOverridesToSuppressTo:]
  -[SBInCallPresentationSession overrideAppSceneEntityForLaunchingApplication:]
  -[SBInCallPresentationSession setDelegate:]
  -[SBInCallPresentationSession isHostingAnApp]
  -[SBInCallPresentationSession descriptionBuilderWithMultilinePrefix:]
  -[SBInCallPresentationSession hostedAppWillRotateToInterfaceOrientation:]
  -[SBInCallPresentationSession descriptionWithMultilinePrefix:]
  -[SBInCallPresentationSession preferredBannerHeight]
  -[SBInCallPresentationSession setPreferredBannerHeight:]
  -[SBInCallPresentationSession hostedAppSceneHandle]
  -[SBInCallPresentationSession succinctDescription]
  -[SBInCallPresentationSession disallowsLockHardwareButtonDoublePress]
  -[SBInCallPresentationSession sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBInCallPresentationSession handleAccessoryAttachWithCompletion:]
  -[SBInCallPresentationSession previousLayoutStateForApplicationTransitionContext:]
  -[SBInCallPresentationSession delegate]
  -[SBInCallPresentationSession sceneHandle:didDestroyScene:]
  -[SBInCallPresentationSession invalidate]
  -[SBInCallPresentationSession supportsHandlingDeviceLock]
  -[SBInCallPresentationSession initWithSceneHandle:screen:sceneManager:workspace:bannerManager:lockScreenManager:deactivationManager:mainSwitcherViewController:backlightController:keyboardFocusController:springBoard:setupManager:uiController:pipCoordinator:]
  -[SBInCallPresentationSession _inCallSceneClientSettingsDiffInspector]
  -[SBInCallPresentationSession inCallBannerPresentableViewController:viewWillTransitionSizeWithAnimationSettings:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerDidAppear:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerWillAppear:]
  -[SBInCallPresentationSession inCallBannerPresentableViewController:willDisappearWithReason:]
  -[SBInCallPresentationSession inCallBannerPresentableViewController:didDisappearWithReason:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerUserInteractionWillBegin:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerUserInteractionDidEnd:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerCallConnectedStatusChanged:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerDidReceiveTap:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerDidCrossDefaultDraggingThreshold:]
  -[SBInCallPresentationSession _uiLockStateDidChange:]
  -[SBInCallPresentationSession _updateAppStatusBarSettingsAssertionForLayoutState:]
  -[SBInCallPresentationSession _updatePIPInsetsForExpanseHUDForUnlockedEnvironmentMode:shouldConsiderPrimary:]
  -[SBInCallPresentationSession setShouldIgnoreHomeIndicatorAutoHiddenClientSettings:]
  -[SBInCallPresentationSession _currentPresentationModeForLayoutState:]
  -[SBInCallPresentationSession _systemControlsShouldPresentAsEmbeddedForLayoutState:]
  -[SBInCallPresentationSession _performBannerToTransientOverlayPresentationTransitionAnimated:analyticsSource:completion:]
  -[SBInCallPresentationSession _performBannerToFullScreenPresentationTransitionAnimated:analyticsSource:completion:]
  -[SBInCallPresentationSession _addSystemAnimationDeactivationReason:]
  -[SBInCallPresentationSession _removeSystemAnimationDeactivationReason:]
  -[SBInCallPresentationSession _setBannerPresentationActive:]
  -[SBInCallPresentationSession _shouldExcludeFromSwitcherWhenDismissed]
  -[SBInCallPresentationSession _performSceneUpdateTransactionWithContext:]
  -[SBInCallPresentationSession _addSystemGestureDeactivationReason:]
  -[SBInCallPresentationSession _removeSystemGestureDeactivationReason:]
  -[SBInCallPresentationSession _setTransientOverlayPresentationActive:]
  -[SBInCallPresentationSession _hasExistingSceneSettingsPresentationModeForLayoutState:]
  -[SBInCallPresentationSession _performBlockUsingMainEventQueueWithReason:handler:]
  -[SBInCallPresentationSession _performTransientOverlayDismissalTransitionAnimated:shouldInsertIntoSwitcherModel:analyticsSource:completion:]
  -[SBInCallPresentationSession _updateKeyboardFocusPreventionAssertionWithLayoutState:]
  -[SBInCallPresentationSession _shouldConsiderScenePrimaryForLayoutState:]
  -[SBInCallPresentationSession _updateSceneHandleToObserveForSendingShowNoticeForSystemControlsAction:]
  -[SBInCallPresentationSession _updateVisibilityInSwitcherForPrefersHiddenWhenDismissedIfNeededForLayoutState:]
  -[SBInCallPresentationSession _isValidForSceneUpdates]
  -[SBInCallPresentationSession _performTransientOverlayPresentationTransitionAnimated:analyticsSource:completion:]
  -[SBInCallPresentationSession _sendShowNoticeForSystemControlsActionIfNeeded]
  -[SBInCallPresentationSession _clientSettingsIfExists]
  -[SBInCallPresentationSession _handleRequestInCallPresentationModeAction:]
  -[SBInCallPresentationSession _performBannerDismissalTransitionAnimated:analyticsSource:completion:]
  -[SBInCallPresentationSession _performPresentationWithRequestedPresentationMode:isUserInitiated:animated:analyticsSource:completion:]
  -[SBInCallPresentationSession _isInSwitcherModel]
  -[SBInCallPresentationSession _isDismissedForLayoutState:]
  -[SBInCallPresentationSession _insertIntoSwitcherAsDismissedWithAnalyticsSource:transitionValidator:completion:]
  -[SBInCallPresentationSession _incrementPresentationModeRevisionIDWithReason:]
  -[SBInCallPresentationSession _acquireAssertionForAnalyticsSource:]
  -[SBInCallPresentationSession _presentedBannerBounds]
  -[SBInCallPresentationSession _allowsBannerPresentation]
  -[SBInCallPresentationSession dismissAnimated:shouldFinalizeSceneDestruction:analyticsSource:completion:]
  -[SBInCallPresentationSession _performBannerPresentationTransitionWithAnalyticsSource:completion:]
  -[SBInCallPresentationSession _shouldUseTransientOverlayForFullScreenPresentation]
  -[SBInCallPresentationSession _performSwitcherPresentationTransitionAnimated:isUserInitiated:analyticsSource:completion:]
  -[SBInCallPresentationSession _updateSceneDeactivationAssertions]
  -[SBInCallPresentationSession _updateSystemControlsShouldPresentAsEmbedded]
  -[SBInCallPresentationSession _presentWithRequestedConfiguration:animated:analyticsSource:completion:]
  -[SBInCallPresentationSession _allowsInitiallyDismissedPresentation]
  -[SBInCallPresentationSession _destroySceneEntityIfExists]
  -[SBInCallPresentationSession _dispatchBlockToMainEventQueueWithReason:block:]
  -[SBInCallPresentationSession _performSwitcherDismissalTransitionAnimated:shouldDestroyScene:analyticsSource:completion:]
  -[SBInCallPresentationSession _sceneSupportsHandlingDeviceLock]
  -[SBInCallPresentationSession _isCallConnectedForScene]
  -[SBInCallPresentationSession _notifySceneOfDeviceLockFromSource:completion:]
  -[SBInCallPresentationSession _isShowingFullScreenForLayoutState:]
  -[SBInCallPresentationSession _createTransientOverlayViewController]
  -[SBInCallPresentationSession _configureTransitionRequest:forPresentingTransientOverlay:animated:]
  -[SBInCallPresentationSession _isShowingInPIP]
  -[SBInCallPresentationSession _removeFromSwitcherForPrefersHiddenWhenDismissedWithValidator:]
  -[SBInCallPresentationSession applicationSceneHandle:appendToSceneSettings:fromRequestContext:entity:]
  -[SBInCallPresentationSession applicationSceneHandle:appendToTransitionContext:fromRequestContext:entity:]
  -[SBInCallPresentationSession bannerUnfurlSourceContextForTransitionRequest:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:willAppearAnimated:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:didAppearAnimated:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:willDisappearAnimated:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:didDisappearAnimated:]
  -[SBInCallPresentationSession inCallTransientOverlayViewControllerRequestsDismissal:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:viewWillTransitionSizeWithAnimationSettings:]
  -[SBInCallPresentationSession sceneHandle:didReceiveAction:]
  -[SBInCallPresentationSession ensureInclusionInSwitcherForRestoreFromPIPWithCompletion:]
  -[SBInCallPresentationSession presentWithRequestedConfiguration:animated:analyticsSource:completion:]
  -[SBInCallPresentationSession dismissAndFinalizeSceneDestructionAnimated:analyticsSource:completion:]
  -[SBInCallPresentationSession canBeRestored]
  -[SBInCallPresentationSession handleDeviceLockFromSource:completion:]
  -[SBInCallPresentationSession isFullscreenCallInSwitcher]
  -[SBInCallPresentationSession _prepareForTransientOverlayPresentationTransactionWithAnimation:analyticsSource:completion:]
  -[SBInCallPresentationSession shouldIgnoreHomeIndicatorAutoHiddenClientSettings]
  -[SBInCallPresentationSession preferredPIPDodgingInsets]


SBInCallTransientOverlayPresentationContext : NSObject
 @property  @? requestBuilder

  // instance methods
  -[SBInCallTransientOverlayPresentationContext .cxx_destruct]
  -[SBInCallTransientOverlayPresentationContext initWithRequestBuilder:]
  -[SBInCallTransientOverlayPresentationContext requestBuilder]


SBApplicationSceneBackgroundView : UIView <SBApplicationSceneBackgroundView>
 @property  BOOL fullscreen
 @property  long long wallpaperStyle
 @property  BOOL needsClassicModeBackground
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationSceneBackgroundView isFullscreen]
  -[SBApplicationSceneBackgroundView setWallpaperStyle:]
  -[SBApplicationSceneBackgroundView setFullscreen:]
  -[SBApplicationSceneBackgroundView setShouldUseBrightMaterial:]
  -[SBApplicationSceneBackgroundView shouldUseBrightMaterial]
  -[SBApplicationSceneBackgroundView .cxx_destruct]
  -[SBApplicationSceneBackgroundView transformOptions]
  -[SBApplicationSceneBackgroundView setTransformOptions:]
  -[SBApplicationSceneBackgroundView wallpaperStyle]
  -[SBApplicationSceneBackgroundView setNeedsClassicModeBackground:]
  -[SBApplicationSceneBackgroundView needsClassicModeBackground]
  -[SBApplicationSceneBackgroundView initWithFrame:]
  -[SBApplicationSceneBackgroundView _setupBackground]


SBExternalDisplayController : NSObject <SBSceneLayoutSlaveTransactionProviding>
 @property  FBSDisplayIdentity *displayIdentity
 @property  BOOL disconnecting
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBExternalDisplayController slaveTransactionsForTransitionRequest:]
  -[SBExternalDisplayController isConnected]
  -[SBExternalDisplayController displayIdentity]
  -[SBExternalDisplayController .cxx_destruct]
  -[SBExternalDisplayController _appProcessStateDidChange:]
  -[SBExternalDisplayController isDisconnecting]
  -[SBExternalDisplayController init]
  -[SBExternalDisplayController updateWithConfiguration:]
  -[SBExternalDisplayController dealloc]
  -[SBExternalDisplayController disconnectWithCompletion:]
  -[SBExternalDisplayController initWithMainWorkspace:userAuthenticationProvider:mainDisplaySceneManager:layoutPublisher:displayConfiguration:]
  -[SBExternalDisplayController _authenicationStateDidChange:]
  -[SBExternalDisplayController _handleDisplayConnectIfPossible]
  -[SBExternalDisplayController _runRootUpdateTransactionWithLabel:completion:]
  -[SBExternalDisplayController _runRootTransaction:withLabel:completion:]
  -[SBExternalDisplayController _createUpdateTransactionWithLabel:]
  -[SBExternalDisplayController _expectedForegroundApp]
  -[SBExternalDisplayController _displayConnectShouldWaitForAppRunning:]
  -[SBExternalDisplayController _application:canAccessDisplay:]
  -[SBExternalDisplayController _shouldConnectDisplayNow:]


SBNCScreenController : NSObject <CMPocketStateDelegate, SBIdleTimerResetSource>
 @property  SBBacklightController *backlightController
 @property  SBLockScreenManager *lockScreenManager
 @property  SBLockStateAggregator *lockStateAggregator
 @property  CMPocketStateManager *pocketStateManager
 @property  BOOL turnOnScreenForOutOfPocketEvent
 @property  NSString *powerAssertionName
 @property  unsigned int powerAssertionID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNCScreenController _turnOnScreenForPocketMode]
  -[SBNCScreenController setPowerAssertionID:]
  -[SBNCScreenController initWithBackLightController:lockScreenManager:lockStateAggregator:]
  -[SBNCScreenController _turnOnScreenForOutOfPocketEventIfNecessary]
  -[SBNCScreenController _releasePowerAssertion]
  -[SBNCScreenController backlightController]
  -[SBNCScreenController .cxx_destruct]
  -[SBNCScreenController setLockScreenManager:]
  -[SBNCScreenController resetAutomaticLockStateForNotificationRequest:]
  -[SBNCScreenController _cancelTurnOnScreenForOutOfPocketEvents]
  -[SBNCScreenController canTurnOnScreenForNotificationRequest:]
  -[SBNCScreenController setBacklightController:]
  -[SBNCScreenController lockStateAggregator]
  -[SBNCScreenController setLockStateAggregator:]
  -[SBNCScreenController init]
  -[SBNCScreenController pocketStateManager:didUpdateState:]
  -[SBNCScreenController turnOnScreenIfPossibleForNotificationRequest:]
  -[SBNCScreenController pocketStateManager]
  -[SBNCScreenController setTurnOnScreenForOutOfPocketEvent:]
  -[SBNCScreenController setPowerAssertionName:]
  -[SBNCScreenController setPocketStateManager:]
  -[SBNCScreenController _turnOnScreenForOutOfPocketEventBeforeTimeInterval:]
  -[SBNCScreenController _isDeviceUILocked]
  -[SBNCScreenController powerAssertionName]
  -[SBNCScreenController lockScreenManager]
  -[SBNCScreenController powerAssertionID]
  -[SBNCScreenController turnOnScreenForNotificationRequest:]
  -[SBNCScreenController turnOnScreenForOutOfPocketEvent]
  -[SBNCScreenController _turnOnScreen]
  -[SBNCScreenController _createOrResetPowerAssertionWithTimeout:]


SBSceneLayoutWindow : SBWindow
  // class methods
  +[SBSceneLayoutWindow sb_autorotates]

  // instance methods
  -[SBSceneLayoutWindow hitTest:withEvent:]
  -[SBSceneLayoutWindow _layoutController]
  -[SBSceneLayoutWindow referenceCoordinateSpace]
  -[SBSceneLayoutWindow layoutCoordinateSpace]


_SBHostedKeyboardViewController : SBFTouchPassThroughViewController
  // instance methods
  -[_SBHostedKeyboardViewController shouldAutorotate]
  -[_SBHostedKeyboardViewController supportedInterfaceOrientations]
  -[_SBHostedKeyboardViewController _canShowWhileLocked]


SBMedusaHostedKeyboardWindow : SBWindow
 @property  NSMutableArray *windowLevelAssertions

  // class methods
  +[SBMedusaHostedKeyboardWindow autorotates]
  +[SBMedusaHostedKeyboardWindow _isSecure]

  // instance methods
  -[SBMedusaHostedKeyboardWindow _updateWindowLevel]
  -[SBMedusaHostedKeyboardWindow hitTest:withEvent:]
  -[SBMedusaHostedKeyboardWindow setWindowLevelAssertions:]
  -[SBMedusaHostedKeyboardWindow windowLevelAssertions]
  -[SBMedusaHostedKeyboardWindow isActive]
  -[SBMedusaHostedKeyboardWindow newWindowLevelAssertionWithPriority:windowLevel:]
  -[SBMedusaHostedKeyboardWindow removeWindowLevelAssertion:]
  -[SBMedusaHostedKeyboardWindow .cxx_destruct]
  -[SBMedusaHostedKeyboardWindow addWindowLevelAssertion:]
  -[SBMedusaHostedKeyboardWindow succinctDescriptionBuilder]
  -[SBMedusaHostedKeyboardWindow descriptionBuilderWithMultilinePrefix:]
  -[SBMedusaHostedKeyboardWindow descriptionWithMultilinePrefix:]
  -[SBMedusaHostedKeyboardWindow succinctDescription]
  -[SBMedusaHostedKeyboardWindow initWithKeyboardScene:]
  -[SBMedusaHostedKeyboardWindow _shouldControlAutorotation]
  -[SBMedusaHostedKeyboardWindow dealloc]
  -[SBMedusaHostedKeyboardWindow setHidden:]


SBMedusaHostedKeyboardWindowLevelAssertion : NSObject <BSInvalidatable>
 @property  unsigned long priority
 @property  double windowLevel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMedusaHostedKeyboardWindowLevelAssertion windowLevel]
  -[SBMedusaHostedKeyboardWindowLevelAssertion initWithMedusaHostedKeyboardWindow:priority:windowLevel:]
  -[SBMedusaHostedKeyboardWindowLevelAssertion .cxx_destruct]
  -[SBMedusaHostedKeyboardWindowLevelAssertion priority]
  -[SBMedusaHostedKeyboardWindowLevelAssertion dealloc]
  -[SBMedusaHostedKeyboardWindowLevelAssertion invalidate]


SBZStackResolverTestRecipe : NSObject <SBFZStackParticipantDelegate, SBTestRecipe>
 @property  SBFZStackParticipant *participant
 @property  BOOL wantsHomeGesture
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBZStackResolverTestRecipe load]

  // instance methods
  -[SBZStackResolverTestRecipe zStackParticipant:updatePreferences:]
  -[SBZStackResolverTestRecipe zStackParticipantDidChange:]
  -[SBZStackResolverTestRecipe .cxx_destruct]
  -[SBZStackResolverTestRecipe participant]
  -[SBZStackResolverTestRecipe title]
  -[SBZStackResolverTestRecipe setParticipant:]
  -[SBZStackResolverTestRecipe setWantsHomeGesture:]
  -[SBZStackResolverTestRecipe wantsHomeGesture]
  -[SBZStackResolverTestRecipe handleVolumeIncrease]
  -[SBZStackResolverTestRecipe handleVolumeDecrease]


SBLockOverlayViewController : UIViewController
 @property  <SBLockOverlayViewControllerDelegate> *delegate
 @property  BOOL shouldBeHidden

  // instance methods
  -[SBLockOverlayViewController overlayView]
  -[SBLockOverlayViewController .cxx_destruct]
  -[SBLockOverlayViewController setDelegate:]
  -[SBLockOverlayViewController delegate]
  -[SBLockOverlayViewController shouldBeHidden]


SBInCallSceneUpdateWorkspaceTransaction : SBMainWorkspaceTransaction
 @property  @? postSceneUpdateHandler

  // instance methods
  -[SBInCallSceneUpdateWorkspaceTransaction _begin]
  -[SBInCallSceneUpdateWorkspaceTransaction .cxx_destruct]
  -[SBInCallSceneUpdateWorkspaceTransaction initWithApplicationSceneEntity:transitionRequest:]
  -[SBInCallSceneUpdateWorkspaceTransaction setPostSceneUpdateHandler:]
  -[SBInCallSceneUpdateWorkspaceTransaction postSceneUpdateHandler]


SBFluidSwitcherItemContainerFooterView : UIView <PTSettingsKeyObserver>
 @property  <SBFluidSwitcherItemContainerFooterViewDelegate> *delegate
 @property  double textAlpha
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFluidSwitcherItemContainerFooterView iconViewHeight]

  // instance methods
  -[SBFluidSwitcherItemContainerFooterView _contentSizeCategoryDidChange:]
  -[SBFluidSwitcherItemContainerFooterView initWithFrame:delegate:]
  -[SBFluidSwitcherItemContainerFooterView .cxx_destruct]
  -[SBFluidSwitcherItemContainerFooterView _updateLabels]
  -[SBFluidSwitcherItemContainerFooterView setTitleItems:animated:]
  -[SBFluidSwitcherItemContainerFooterView layoutSubviews]
  -[SBFluidSwitcherItemContainerFooterView textAlpha]
  -[SBFluidSwitcherItemContainerFooterView setTextAlpha:]
  -[SBFluidSwitcherItemContainerFooterView delegate]
  -[SBFluidSwitcherItemContainerFooterView settings:changedValueForKey:]
  -[SBFluidSwitcherItemContainerFooterView dealloc]
  -[SBFluidSwitcherItemContainerFooterView intrinsicContentSize]
  -[SBFluidSwitcherItemContainerFooterView _handleTapGestureRecognizer:]
  -[SBFluidSwitcherItemContainerFooterView _makeIconView]
  -[SBFluidSwitcherItemContainerFooterView _makeLabel]
  -[SBFluidSwitcherItemContainerFooterView _attributedTextFromText:]


SBHarmonySettings : PTSettings
 @property  float whitePointAdaptationStrengthStandard
 @property  float whitePointAdaptationStrengthReading
 @property  float whitePointAdaptationStrengthPhoto
 @property  float whitePointAdaptationStrengthVideo
 @property  float whitePointAdaptationStrengthGame
 @property  float whitePointAdaptationUpdateDefaultDuration
 @property  BOOL whitePointAdaptationInteractiveUpdateEnabled
 @property  NSString *whitePointAdaptationInteractiveUpdateTimingFunctionName

  // instance methods
  -[SBHarmonySettings .cxx_destruct]
  -[SBHarmonySettings setDefaultValues]
  -[SBHarmonySettings setWhitePointAdaptationStrengthStandard:]
  -[SBHarmonySettings setWhitePointAdaptationStrengthReading:]
  -[SBHarmonySettings setWhitePointAdaptationStrengthPhoto:]
  -[SBHarmonySettings setWhitePointAdaptationStrengthVideo:]
  -[SBHarmonySettings setWhitePointAdaptationStrengthGame:]
  -[SBHarmonySettings setWhitePointAdaptationUpdateDefaultDuration:]
  -[SBHarmonySettings setWhitePointAdaptationInteractiveUpdateEnabled:]
  -[SBHarmonySettings setWhitePointAdaptationInteractiveUpdateTimingFunctionName:]
  -[SBHarmonySettings whitePointAdaptationStrengthStandard]
  -[SBHarmonySettings whitePointAdaptationStrengthReading]
  -[SBHarmonySettings whitePointAdaptationStrengthPhoto]
  -[SBHarmonySettings whitePointAdaptationStrengthVideo]
  -[SBHarmonySettings whitePointAdaptationStrengthGame]
  -[SBHarmonySettings whitePointAdaptationUpdateDefaultDuration]
  -[SBHarmonySettings whitePointAdaptationInteractiveUpdateEnabled]
  -[SBHarmonySettings whitePointAdaptationInteractiveUpdateTimingFunctionName]


SBAnalyticsStateMachineEdge : NSObject <BSDescriptionProviding>
 @property  unsigned long fromState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAnalyticsStateMachineEdge edgeFromState:toState:uponGestureState:]
  +[SBAnalyticsStateMachineEdge edgeFromState:transition:]
  +[SBAnalyticsStateMachineEdge edgeFromState:toState:uponGestureState:andDo:]
  +[SBAnalyticsStateMachineEdge edgeFromState:toState:uponEvent:]

  // instance methods
  -[SBAnalyticsStateMachineEdge initWithFromState:transition:]
  -[SBAnalyticsStateMachineEdge handleEvent:withContext:]
  -[SBAnalyticsStateMachineEdge .cxx_destruct]
  -[SBAnalyticsStateMachineEdge succinctDescriptionBuilder]
  -[SBAnalyticsStateMachineEdge fromState]
  -[SBAnalyticsStateMachineEdge descriptionBuilderWithMultilinePrefix:]
  -[SBAnalyticsStateMachineEdge descriptionWithMultilinePrefix:]
  -[SBAnalyticsStateMachineEdge succinctDescription]


SBSwitcherToAppTransitionMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherToAppTransitionMetric handleEvent:withContext:]
  -[SBSwitcherToAppTransitionMetric .cxx_destruct]
  -[SBSwitcherToAppTransitionMetric init]


SBBannerGestureRecognizerPriorityAssertion : NSObject <BSInvalidatable>
 @property  BOOL enabled
 @property  long long priority
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBannerGestureRecognizerPriorityAssertion isValidBannerGestureRecognizerPriority:]

  // instance methods
  -[SBBannerGestureRecognizerPriorityAssertion .cxx_destruct]
  -[SBBannerGestureRecognizerPriorityAssertion reason]
  -[SBBannerGestureRecognizerPriorityAssertion isEnabled]
  -[SBBannerGestureRecognizerPriorityAssertion priority]
  -[SBBannerGestureRecognizerPriorityAssertion dealloc]
  -[SBBannerGestureRecognizerPriorityAssertion invalidate]
  -[SBBannerGestureRecognizerPriorityAssertion setEnabled:]
  -[SBBannerGestureRecognizerPriorityAssertion initWithPriority:reason:invalidationHandler:enablementChangeHandler:]


SBLogoutDebugBlockingViewController : UIViewController <UITableViewDataSource, UITableViewDelegate>
 @property  NSDictionary *debugBlockingTasks
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLogoutDebugBlockingViewController tableView:canEditRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController numberOfSectionsInTableView:]
  -[SBLogoutDebugBlockingViewController tableView:numberOfRowsInSection:]
  -[SBLogoutDebugBlockingViewController tableView:titleForHeaderInSection:]
  -[SBLogoutDebugBlockingViewController .cxx_destruct]
  -[SBLogoutDebugBlockingViewController tableView:cellForRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController _tableView]
  -[SBLogoutDebugBlockingViewController tableView:indentationLevelForRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController tableView:shouldHighlightRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController viewWillAppear:]
  -[SBLogoutDebugBlockingViewController tableView:canMoveRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController loadView]
  -[SBLogoutDebugBlockingViewController _canShowWhileLocked]
  -[SBLogoutDebugBlockingViewController _configureCell:withBlockingTask:]
  -[SBLogoutDebugBlockingViewController setDebugBlockingTasks:]
  -[SBLogoutDebugBlockingViewController debugBlockingTasks]


SBReloadWallpaperTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBReloadWallpaperTestRecipe load]

  // instance methods
  -[SBReloadWallpaperTestRecipe title]
  -[SBReloadWallpaperTestRecipe handleVolumeIncrease]
  -[SBReloadWallpaperTestRecipe handleVolumeDecrease]


SBFluidSwitcherSpaceOverlayAccessoryView : SBFTouchPassThroughClippingView <SBFluidSwitcherItemContainerFooterViewDelegate>
 @property  <SBFluidSwitcherSpaceOverlayAccessoryViewDelegate> *delegate
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  double contentScale
 @property  SBHomeGrabberRotationView *homeGrabberView
 @property  BOOL drawsFocusIndicator
 @property  BOOL drawsFooter
 @property  double titleAndIconOpacity
 @property  double titleOpacity
 @property  unsigned long multiWindowIndicatorRoleMask
 @property  NSArray *titleItems
 @property  SBSwitcherShelfViewController *shelfViewController
 @property  double contentViewScale
 @property  {CGPoint=dd} contentViewOffset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherSpaceOverlayAccessoryView _inverseContentScale]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setContentViewOffset:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView configureOverlayForIconZoomWithView:crossfadeViews:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setMultiWindowIndicatorRoleMask:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView itemContainerFooterView:didSelectTitleItem:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView removeIconOverlay]
  -[SBFluidSwitcherSpaceOverlayAccessoryView .cxx_destruct]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setTitleItems:animated:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView layoutSubviews]
  -[SBFluidSwitcherSpaceOverlayAccessoryView drawsFooter]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setShelfViewController:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView contentScale]
  -[SBFluidSwitcherSpaceOverlayAccessoryView drawsFocusIndicator]
  -[SBFluidSwitcherSpaceOverlayAccessoryView contentViewScale]
  -[SBFluidSwitcherSpaceOverlayAccessoryView titleItems]
  -[SBFluidSwitcherSpaceOverlayAccessoryView multiWindowIndicatorRoleMask]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setTitleAndIconOpacity:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView _updateFooterVisibility]
  -[SBFluidSwitcherSpaceOverlayAccessoryView shelfViewController]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setContentViewScale:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView homeGrabberView]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setCornerRadius:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setContentScale:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView titleAndIconOpacity]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setTitleItems:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView prepareForReuse]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setMaskedCorners:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setTitleOpacity:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView contentViewOffset]
  -[SBFluidSwitcherSpaceOverlayAccessoryView initWithDelegate:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView _updateContentViewLayout]
  -[SBFluidSwitcherSpaceOverlayAccessoryView _updateFooterAnimated:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView pointInside:withEvent:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView cornerRadius]
  -[SBFluidSwitcherSpaceOverlayAccessoryView delegate]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setDrawsFocusIndicator:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setHomeGrabberView:]
  -[SBFluidSwitcherSpaceOverlayAccessoryView dealloc]
  -[SBFluidSwitcherSpaceOverlayAccessoryView _configureDebugBorder]
  -[SBFluidSwitcherSpaceOverlayAccessoryView _updateFocusIndicator]
  -[SBFluidSwitcherSpaceOverlayAccessoryView titleOpacity]
  -[SBFluidSwitcherSpaceOverlayAccessoryView maskedCorners]
  -[SBFluidSwitcherSpaceOverlayAccessoryView setDrawsFooter:]


SBApplicationSceneEntityDestructionIntent : NSObject
 @property  unsigned long animation
 @property  BOOL shouldRemoveFromHistory

  // instance methods
  -[SBApplicationSceneEntityDestructionIntent animation]
  -[SBApplicationSceneEntityDestructionIntent setAnimation:]
  -[SBApplicationSceneEntityDestructionIntent shouldRemoveFromHistory]
  -[SBApplicationSceneEntityDestructionIntent setShouldRemoveFromHistory:]


SBAssistantPresentationObservationToken : SBPresentationObservationToken <SBAssistantObserver>
 @property  SBAssistantController *assistantController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAssistantPresentationObservationToken assistantWillAppear:]
  -[SBAssistantPresentationObservationToken assistantDidDisappear:]
  -[SBAssistantPresentationObservationToken .cxx_destruct]
  -[SBAssistantPresentationObservationToken state]
  -[SBAssistantPresentationObservationToken dealloc]
  -[SBAssistantPresentationObservationToken assistantController]
  -[SBAssistantPresentationObservationToken assistantDidAppear:]
  -[SBAssistantPresentationObservationToken initWithAssistantController:]
  -[SBAssistantPresentationObservationToken assistantWillDisappear:]


SBHomeGestureArbiterRecipe : NSObject <SBTestRecipe>
 @property  SBHomeGestureParticipant *participant
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHomeGestureArbiterRecipe load]

  // instance methods
  -[SBHomeGestureArbiterRecipe .cxx_destruct]
  -[SBHomeGestureArbiterRecipe participant]
  -[SBHomeGestureArbiterRecipe title]
  -[SBHomeGestureArbiterRecipe setParticipant:]
  -[SBHomeGestureArbiterRecipe handleVolumeIncrease]
  -[SBHomeGestureArbiterRecipe handleVolumeDecrease]


SBAppFreeDevProfileNotTrustedAlertItem : SBAlertItem
  // instance methods
  -[SBAppFreeDevProfileNotTrustedAlertItem .cxx_destruct]
  -[SBAppFreeDevProfileNotTrustedAlertItem shouldShowInLockScreen]
  -[SBAppFreeDevProfileNotTrustedAlertItem dismissOnLock]
  -[SBAppFreeDevProfileNotTrustedAlertItem configure:requirePasscodeForActions:]
  -[SBAppFreeDevProfileNotTrustedAlertItem forcesModalAlertAppearance]
  -[SBAppFreeDevProfileNotTrustedAlertItem initWithApp:]


SBDeviceApplicationScreenTimeLockoutViewProvider : SBDeviceApplicationSceneOverlayViewProvider
  // instance methods
  -[SBDeviceApplicationScreenTimeLockoutViewProvider hideContentWithAnimation:completionHandler:]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _handleInstalledAppsChanged:]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _activateIfPossible]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider .cxx_destruct]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _deactivateIfPossible]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider showContentWithAnimation:completionHandler:]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _realOverlayViewController]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _newBlockingViewControllerWithBundleIdentifier:]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider priority]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider initWithSceneHandle:delegate:]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider dealloc]


SBIdleTimerCoordinatorHelper : NSObject
 @property  <SBIdleTimerProviding> *sourceProvider
 @property  NSMapTable *idleTimerCache
 @property  <SBIdleTimerCoordinating> *targetCoordinator

  // instance methods
  -[SBIdleTimerCoordinatorHelper removeProvider:]
  -[SBIdleTimerCoordinatorHelper hasProvider:]
  -[SBIdleTimerCoordinatorHelper setTargetCoordinator:]
  -[SBIdleTimerCoordinatorHelper proposeIdleTimerBehavior:fromProvider:reason:]
  -[SBIdleTimerCoordinatorHelper setSourceProvider:]
  -[SBIdleTimerCoordinatorHelper .cxx_destruct]
  -[SBIdleTimerCoordinatorHelper idleTimerProxyForProvider:]
  -[SBIdleTimerCoordinatorHelper _updateProvider:behavior:reason:]
  -[SBIdleTimerCoordinatorHelper targetCoordinator]
  -[SBIdleTimerCoordinatorHelper init]
  -[SBIdleTimerCoordinatorHelper proposeProvider:byCoordinator:reason:]
  -[SBIdleTimerCoordinatorHelper updateProvider:behavior:reason:]
  -[SBIdleTimerCoordinatorHelper initWithSourceProvider:]
  -[SBIdleTimerCoordinatorHelper idleTimerCache]
  -[SBIdleTimerCoordinatorHelper sourceProvider]
  -[SBIdleTimerCoordinatorHelper _updateProviderInfo:behavior:reason:]
  -[SBIdleTimerCoordinatorHelper bindProvider:toSourceTimer:behavior:forReason:]


SBIdleTimerInfo : NSObject
 @property  <SBIdleTimerProviding> *provider
 @property  <SBFIdleTimerBehaviorProviding> *behavior
 @property  NSString *reason
 @property  SBIdleTimerProxy *idleTimerProxy

  // instance methods
  -[SBIdleTimerInfo idleTimerProxy]
  -[SBIdleTimerInfo .cxx_destruct]
  -[SBIdleTimerInfo setBehavior:]
  -[SBIdleTimerInfo behavior]
  -[SBIdleTimerInfo initWithProvider:behavior:reason:idleTimerProxy:]
  -[SBIdleTimerInfo reason]
  -[SBIdleTimerInfo setIdleTimerProxy:]
  -[SBIdleTimerInfo setReason:]
  -[SBIdleTimerInfo provider]


SBDeckContinuityToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBDeckContinuityToFullScreenSwitcherModifier titleOpacityForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier transitionWillBegin]
  -[SBDeckContinuityToFullScreenSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDeckContinuityToFullScreenSwitcherModifier scaleForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier frameForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBDeckContinuityToFullScreenSwitcherModifier .cxx_destruct]
  -[SBDeckContinuityToFullScreenSwitcherModifier cornerRadiiForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier _isInsertingIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier _initialFrameForContinuityAppLayout]
  -[SBDeckContinuityToFullScreenSwitcherModifier initWithTransitionID:appLayout:deckModifier:fullscreenModifier:]


SBIconLaunchMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBIconLaunchMetric _processAndReportLaunchedEventPayload:]
  -[SBIconLaunchMetric .cxx_destruct]
  -[SBIconLaunchMetric init]
  -[SBIconLaunchMetric _processAndReportTappedEventPayload:]


SBSetupManager : NSObject <SBMainDisplayWorkspaceAppInteractionEventSourceObserving>
 @property  BOOL inSetupModeReadyToExit
 @property  BOOL inSetupMode
 @property  BOOL deferringDeviceOrientationUpdates
 @property  BOOL inSetupModeForDeviceMigration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSetupManager sharedInstance]

  // instance methods
  -[SBSetupManager _isInSetupMode]
  -[SBSetupManager noteAuthenticationSucceededWithPasscode:]
  -[SBSetupManager isInSetupModeForDeviceMigration]
  -[SBSetupManager setInSetupModeReadyToExit:]
  -[SBSetupManager .cxx_destruct]
  -[SBSetupManager isInSetupMode]
  -[SBSetupManager _setSetupRequiredReason:]
  -[SBSetupManager setupHasFinishedRestoringFromBackup]
  -[SBSetupManager eventSource:didBeginTransitionToMode:withLayoutState:activatingElement:triggeredBy:]
  -[SBSetupManager isInSetupModeReadyToExit]
  -[SBSetupManager isDeferringDeviceOrientationUpdates]
  -[SBSetupManager _toggleSetupForMigrationNeeded:forReason:]
  -[SBSetupManager init]
  -[SBSetupManager _clearFloatingDockAssertion]
  -[SBSetupManager updateInSetupMode]
  -[SBSetupManager dealloc]
  -[SBSetupManager setDeferringDeviceOrientationUpdates:]
  -[SBSetupManager postLaunchCompleteNotificationForSetup]
  -[SBSetupManager _setupProcessChangedNotificationReceived:]


SBMedusaSettingsChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBMedusaSettingsChangedSwitcherModifierEvent type]


SBDosidoSwitcherModifier : SBTransitionSwitcherModifier
 @property  BOOL shouldSuppressScaleAnimation

  // instance methods
  -[SBDosidoSwitcherModifier homeScreenBackdropBlurType]
  -[SBDosidoSwitcherModifier transitionWillBegin]
  -[SBDosidoSwitcherModifier isHomeScreenContentRequired]
  -[SBDosidoSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDosidoSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBDosidoSwitcherModifier visibleAppLayouts]
  -[SBDosidoSwitcherModifier .cxx_destruct]
  -[SBDosidoSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBDosidoSwitcherModifier isSwitcherWindowVisible]
  -[SBDosidoSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBDosidoSwitcherModifier _layoutSettings]
  -[SBDosidoSwitcherModifier wallpaperStyle]
  -[SBDosidoSwitcherModifier cornerRadiiForIndex:]
  -[SBDosidoSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBDosidoSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBDosidoSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBDosidoSwitcherModifier shouldSuppressScaleAnimation]
  -[SBDosidoSwitcherModifier transitionWillUpdate]
  -[SBDosidoSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:direction:]
  -[SBDosidoSwitcherModifier setShouldSuppressScaleAnimation:]


SBIdleTimerFactory : NSObject
  // class methods
  +[SBIdleTimerFactory _attentionAwareTimer]
  +[SBIdleTimerFactory idleTimerForDescriptor:]


SBStatusBarStyleOverridesCoordinatorClient : NSObject
 @property  NSObject<OS_dispatch_queue> *registeredOverridesQueue
 @property  NSXPCConnection *connection
 @property  unsigned long registeredOverrides

  // instance methods
  -[SBStatusBarStyleOverridesCoordinatorClient .cxx_destruct]
  -[SBStatusBarStyleOverridesCoordinatorClient setConnection:]
  -[SBStatusBarStyleOverridesCoordinatorClient connection]
  -[SBStatusBarStyleOverridesCoordinatorClient registeredOverrides]
  -[SBStatusBarStyleOverridesCoordinatorClient acquireAssertionAndDeliverTapContextToClient:]
  -[SBStatusBarStyleOverridesCoordinatorClient setRegisteredOverrides:]
  -[SBStatusBarStyleOverridesCoordinatorClient initWithConnection:andStyleOverrides:]
  -[SBStatusBarStyleOverridesCoordinatorClient registeredOverridesQueue]
  -[SBStatusBarStyleOverridesCoordinatorClient setRegisteredOverridesQueue:]


SBLockScreenActionManager : NSObject
 @property  NSMutableDictionary *actionProviders

  // instance methods
  -[SBLockScreenActionManager runUnlockAction]
  -[SBLockScreenActionManager registerLockScreenActionProvider:forSource:]
  -[SBLockScreenActionManager .cxx_destruct]
  -[SBLockScreenActionManager _clearActionOnAllProviders]
  -[SBLockScreenActionManager currentLockScreenActionContextActionSource:]
  -[SBLockScreenActionManager init]
  -[SBLockScreenActionManager setActionProviders:]
  -[SBLockScreenActionManager currentLockScreenActionContext]
  -[SBLockScreenActionManager actionProviders]


SBHomeButtonPressMesaUnlockTrigger : SBMesaUnlockTrigger
  // instance methods
  -[SBHomeButtonPressMesaUnlockTrigger screenOff]
  -[SBHomeButtonPressMesaUnlockTrigger bioUnlock]
  -[SBHomeButtonPressMesaUnlockTrigger succinctDescriptionBuilder]
  -[SBHomeButtonPressMesaUnlockTrigger menuButtonDown]
  -[SBHomeButtonPressMesaUnlockTrigger menuButtonUp]
  -[SBHomeButtonPressMesaUnlockTrigger significantUserInteractionOccurred]


SBMixedGridToHomeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBMixedGridToHomeSwitcherModifier transitionWillBegin]
  -[SBMixedGridToHomeSwitcherModifier frameForIndex:]
  -[SBMixedGridToHomeSwitcherModifier .cxx_destruct]
  -[SBMixedGridToHomeSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBMixedGridToHomeSwitcherModifier topMostLayoutElements]
  -[SBMixedGridToHomeSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBMixedGridToHomeSwitcherModifier initWithTransitionID:direction:mixedGridModifier:]
  -[SBMixedGridToHomeSwitcherModifier _newMixedGridModifier]


SBSceneLayoutAnimationWrapperView : UIView <SBSceneLayoutReferenceOrientedView>
 @property  long long referenceOrientation
 @property  long long layoutOrientation
 @property  NSArray *elementWrapperViews
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneLayoutAnimationWrapperView layoutOrientation]
  -[SBSceneLayoutAnimationWrapperView setLayoutOrientation:]
  -[SBSceneLayoutAnimationWrapperView crossfadeWithCompletion:]
  -[SBSceneLayoutAnimationWrapperView initWithFrame:]
  -[SBSceneLayoutAnimationWrapperView invalidate]
  -[SBSceneLayoutAnimationWrapperView elementWrapperViews]
  -[SBSceneLayoutAnimationWrapperView elementWrapperViewForLayoutRole:]
  -[SBSceneLayoutAnimationWrapperView referenceOrientation]
  -[SBSceneLayoutAnimationWrapperView setReferenceOrientation:]


SBSceneLayoutElementAnimationWrapperView : UIView
 @property  SBLayoutElement *layoutElement
 @property  UIView<BSInvalidatable> *contentView
 @property  SBApplicationSceneView *applicationSceneViewIfExists

  // instance methods
  -[SBSceneLayoutElementAnimationWrapperView addContentView:]
  -[SBSceneLayoutElementAnimationWrapperView willMoveToSuperview:]
  -[SBSceneLayoutElementAnimationWrapperView .cxx_destruct]
  -[SBSceneLayoutElementAnimationWrapperView layoutSubviews]
  -[SBSceneLayoutElementAnimationWrapperView contentView]
  -[SBSceneLayoutElementAnimationWrapperView _shouldAnimatePropertyWithKey:]
  -[SBSceneLayoutElementAnimationWrapperView initWithFrame:]
  -[SBSceneLayoutElementAnimationWrapperView invalidate]
  -[SBSceneLayoutElementAnimationWrapperView applicationSceneViewIfExists]
  -[SBSceneLayoutElementAnimationWrapperView initWithLayoutElement:contentView:orientation:]
  -[SBSceneLayoutElementAnimationWrapperView layoutElement]


SBTodayViewController : UIViewController <SBUICoronaAnimationControllerParticipant, SBIconListLayoutObserver, SBIconViewObserver, SBHScrollableIconViewContaining, UIScrollViewDelegate, SBIconListModelObserver, SBIconListViewDragDelegate, WGMajorListViewControllerDelegate, WGWidgetIconAnimationExtraViewsProviding, PTSettingsKeyObserver, SBTodayViewSpotlightPresenterDelegate, CSExternalBehaviorProviding, UIGestureRecognizerDelegate, BSDescriptionProviding, SBUISpotlightInitiating, SBHLegibility, SBIconViewQuerying, SBIconLocationPresenting, SBFIdleTimerBehaviorProviding, SBHTodayViewController, SBFOverlayObserving>
 @property  <SBIconListLayoutProvider> *listLayoutProvider
 @property  <SBIconViewProviding> *iconViewProvider
 @property  long long location
 @property  SBHWidgetSettings *widgetSettings
 @property  UIScrollView *scrollView
 @property  NSMutableArray *scrollViewDidEndScrollingHandlers
 @property  double lastRootSideBarContentOffset
 @property  SBHScrollableIconViewInteraction *scrollingInteraction
 @property  UIStackView *stackView
 @property  SBIconListView *listView
 @property  UIView *favoriteListContainerView
 @property  MTMaterialView *favoriteListPlatterView
 @property  UILabel *favoriteListInstructionLabel
 @property  SBIconListView *favoriteListView
 @property  NSLayoutConstraint *scrollViewLeadingConstraint
 @property  NSLayoutConstraint *scrollViewTrailingConstraint
 @property  NSLayoutConstraint *favoriteListWithLargeWidgetMinimumHeightConstraint
 @property  NSLayoutConstraint *favoriteListWithSmallOrMediumWidgetsMinimumHeightConstraint
 @property  NSLayoutConstraint *listViewMinimumHeightConstraint
 @property  NSLayoutConstraint *listViewMinimumWidthConstraint
 @property  SBTodayIconListLayoutDelegate *listLayoutDelegate
 @property  SBTodayIconListLayoutDelegate *favoriteListLayoutDelegate
 @property  UIView *carouselReferenceForLegacyWidgetListView
 @property  UIView *legacyListContainerView
 @property  MTMaterialView *legacyListPlatterView
 @property  UIView *headerContainerView
 @property  SBTodayKeepOnHomeScreenPlatterView *keepOnHomeScreenPlatterView
 @property  WGWidgetListHeaderView *dateHeaderView
 @property  SBHDateHeaderViewController *dateHeaderViewController
 @property  NSMutableDictionary *cancelTouchesAssertionsByLegacyWidgetID
 @property  NSMutableDictionary *cancelTouchesAssertionsByWidgetID
 @property  SBTodayViewSpotlightPresenter *spotlightPresenter
 @property  SBFTouchPassThroughView *spotlightContainerView
 @property  NSLayoutConstraint *stackViewToScrollViewTopConstraint
 @property  NSLayoutConstraint *stackViewToScrollViewBottomConstraint
 @property  NSLayoutConstraint *stackViewToScrollViewLeadingConstraint
 @property  NSLayoutConstraint *stackViewToScrollViewTrailingConstraint
 @property  BOOL visuallyRevealedPriorToEditingIcons
 @property  NSMutableSet *suspendVisibleRowRangeUpdatesReasons
 @property  NSMutableSet *widgetHitTestingDisabledReasons
 @property  double searchBarTopOffset
 @property  double firstWidgetTopOffset
 @property  NSHashTable *viewControllerAppearStateOverrideAssertions
 @property  BOOL enableEditingModeWhenScrollEnds
 @property  {CGPoint=dd} scrollingBeginningOffset
 @property  UITapGestureRecognizer *dismissTapGestureRecognizer
 @property  NSMapTable *onScreenIconIndexRangeByIconListView
 @property  NSHashTable *observers
 @property  BOOL isOverlayViewDisappearing
 @property  SBRootFolder *rootFolder
 @property  SBHIconManager *iconManager
 @property  <SBTodayViewControllerDelegate> *delegate
 @property  <SBFOverlayDismissalDelegate> *dismissalDelegate
 @property  UIViewController *containerViewController
 @property  WGMajorListViewController *legacyWidgetListViewController
 @property  BOOL suppressesEditingStateForListViews
 @property  BOOL headerVisible
 @property  BOOL spotlightVisible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *extraViewsContainers
 @property  NSArray *extraViews
 @property  BOOL shouldAnimateLastTwoViewsAsOne
 @property  BOOL shouldAnimateFirstTwoViewsAsOne
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  SBViewControllerTransitionContext *transitionContext
 @property  _UILegibilitySettings *legibilitySettings
 @property  NSSet *presentedIconLocations
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  unsigned long contentVisibility

  // instance methods
  -[SBTodayViewController containerViewController]
  -[SBTodayViewController _endAppearanceTransitionForChildViewControllersToVisible:]
  -[SBTodayViewController setWidgetSettings:]
  -[SBTodayViewController setDismissalDelegate:]
  -[SBTodayViewController setContainerViewController:]
  -[SBTodayViewController updateViewConstraints]
  -[SBTodayViewController suppressesEditingStateForListViews]
  -[SBTodayViewController setIconManager:]
  -[SBTodayViewController stackView]
  -[SBTodayViewController overlayControllerDidBeginChangingPresentationProgress:]
  -[SBTodayViewController setIconViewProvider:]
  -[SBTodayViewController setRevealed:]
  -[SBTodayViewController firstWidgetTopOffset]
  -[SBTodayViewController iconViewForIcon:location:]
  -[SBTodayViewController _setUpGestureRecognizers]
  -[SBTodayViewController setScrollView:]
  -[SBTodayViewController _setUpIconListViews]
  -[SBTodayViewController _updateScrollViewContentSize]
  -[SBTodayViewController overlayController:visibilityDidChange:]
  -[SBTodayViewController beginOverridingViewControllerAppearanceStateToRemainDisappearedForReason:]
  -[SBTodayViewController widgetSettings]
  -[SBTodayViewController _shouldKeepIconImageViewControllersStatic]
  -[SBTodayViewController iconListView:iconDragItem:willAnimateDropWithAnimator:]
  -[SBTodayViewController iconListViewDidChangeBoundsSize:]
  -[SBTodayViewController setListView:]
  -[SBTodayViewController firstIconViewForIcon:excludingLocations:]
  -[SBTodayViewController layoutIconListViewWithAnimationType:forceRelayout:]
  -[SBTodayViewController noteIconViewWillZoomDown:]
  -[SBTodayViewController scrollViewDidEndScrollingHandlers]
  -[SBTodayViewController setFavoriteListWithLargeWidgetMinimumHeightConstraint:]
  -[SBTodayViewController _updateListViewLayoutAnimated:]
  -[SBTodayViewController _setUpHeaderViews]
  -[SBTodayViewController _setupStateCapture]
  -[SBTodayViewController visibleContainerInsets]
  -[SBTodayViewController legacyWidgetListViewController]
  -[SBTodayViewController setFavoriteListLayoutDelegate:]
  -[SBTodayViewController setRootFolder:]
  -[SBTodayViewController iconListView:iconDropSessionDidUpdate:]
  -[SBTodayViewController scrollIconToVisible:atPosition:animated:completion:]
  -[SBTodayViewController setIsOverlayViewDisappearing:]
  -[SBTodayViewController _cancelTouchesForHitTestedWidgetInScrollView:]
  -[SBTodayViewController iconListView:willUseIconView:forDroppingIconDragItem:]
  -[SBTodayViewController iconListView:iconDropSessionDidExit:]
  -[SBTodayViewController iconListView:customSpringAnimationBehaviorForDroppingItem:]
  -[SBTodayViewController setScrollViewDidEndScrollingHandlers:]
  -[SBTodayViewController isOverlayViewDisappearing]
  -[SBTodayViewController iconListView:previewForDroppingIconDragItem:proposedPreview:]
  -[SBTodayViewController iconListView:iconDropSession:didPauseAtLocation:]
  -[SBTodayViewController listModel]
  -[SBTodayViewController setListViewMinimumHeightConstraint:]
  -[SBTodayViewController dismissSpotlightAnimated:]
  -[SBTodayViewController iconList:didReplaceIcon:withIcon:]
  -[SBTodayViewController dismissTapGestureRecognizer]
  -[SBTodayViewController editButtonTappedFromWidgetListViewController:]
  -[SBTodayViewController coverSheetIdentifier]
  -[SBTodayViewController iconListView:shouldAllowSpringLoadedInteractionForIconDropSession:onIconView:]
  -[SBTodayViewController enumerateScrollableIconViewsUsingBlock:]
  -[SBTodayViewController viewWillLayoutSubviews]
  -[SBTodayViewController iconListView:iconViewForDroppingIconDragItem:proposedIconView:]
  -[SBTodayViewController spotlightPresenterDidDismissSpotlight:]
  -[SBTodayViewController iconListView:canHandleIconDropSession:]
  -[SBTodayViewController _updateEditingStateAnimated:]
  -[SBTodayViewController conformsToCSBehaviorProviding]
  -[SBTodayViewController setScrollViewTrailingConstraint:]
  -[SBTodayViewController _setUpLegacyWidgetListView]
  -[SBTodayViewController setSuspendVisibleRowRangeUpdatesReasons:]
  -[SBTodayViewController iconListView:springLoadedInteractionForIconDragDidCompleteOnIconView:]
  -[SBTodayViewController iconListView:performIconDrop:]
  -[SBTodayViewController favoriteListWithLargeWidgetMinimumHeightConstraint]
  -[SBTodayViewController setSuppressesEditingStateForListViews:]
  -[SBTodayViewController scrollView]
  -[SBTodayViewController presentedIconLocations]
  -[SBTodayViewController idleTimerMode]
  -[SBTodayViewController iconListView:iconDropSessionDidEnter:]
  -[SBTodayViewController setStackViewToScrollViewTrailingConstraint:]
  -[SBTodayViewController favoriteListContainerView]
  -[SBTodayViewController resetForSpotlightDismissalAnimated:]
  -[SBTodayViewController lastRootSideBarContentOffset]
  -[SBTodayViewController _indexForNextWidgetInNonFavoriteListViewAfterContentOffset:]
  -[SBTodayViewController setVisuallyRevealedPriorToEditingIcons:]
  -[SBTodayViewController _enumerateWidgetPlatterViewsUsingBlock:]
  -[SBTodayViewController conformsToCSExternalBehaviorProviding]
  -[SBTodayViewController _isViewVisibleInScrollViewSpace:]
  -[SBTodayViewController extraViewsContainers]
  -[SBTodayViewController idleWarnMode]
  -[SBTodayViewController iconViewProvider]
  -[SBTodayViewController spotlightPresenter]
  -[SBTodayViewController _styleHeaderView:withCellFrameInScrollViewBounds:]
  -[SBTodayViewController _invalidateAllCancelTouchesAssertions]
  -[SBTodayViewController todayViewControllerLocationForSpotlightPresenter:]
  -[SBTodayViewController iconListView:didRemoveIconView:]
  -[SBTodayViewController isSpotlightVisible]
  -[SBTodayViewController scrollViewLeadingConstraint]
  -[SBTodayViewController .cxx_destruct]
  -[SBTodayViewController idleTimerDuration]
  -[SBTodayViewController setHeaderContainerView:]
  -[SBTodayViewController setViewControllerAppearStateOverrideAssertions:]
  -[SBTodayViewController setLegacyListContainerView:]
  -[SBTodayViewController scrollViewDidEndScrollingAnimation:]
  -[SBTodayViewController iconList:didRemoveIcon:]
  -[SBTodayViewController setKeepOnHomeScreenPlatterView:]
  -[SBTodayViewController dismissalDelegate]
  -[SBTodayViewController setStackView:]
  -[SBTodayViewController headerContainerView]
  -[SBTodayViewController keepOnHomeScreenPlatterView]
  -[SBTodayViewController favoriteListLayoutDelegate]
  -[SBTodayViewController _beginDisablingWidgetHitTestingForReason:]
  -[SBTodayViewController iconList:didMoveIcon:]
  -[SBTodayViewController suspendVisibleRowRangeUpdatesReasons]
  -[SBTodayViewController enumerateDisplayedIconViewsForIcon:usingBlock:]
  -[SBTodayViewController _toggleHeaderViewWithEditingState:]
  -[SBTodayViewController iconManager]
  -[SBTodayViewController setLocation:]
  -[SBTodayViewController _updateEditingStateForListView:]
  -[SBTodayViewController succinctDescriptionBuilder]
  -[SBTodayViewController setLegibilitySettings:]
  -[SBTodayViewController _scrollViewDidEndScrolling]
  -[SBTodayViewController shouldAnimateLastTwoViewsAsOne]
  -[SBTodayViewController setDelegate:]
  -[SBTodayViewController setCarouselReferenceForLegacyWidgetListView:]
  -[SBTodayViewController viewDidAppear:]
  -[SBTodayViewController _updateVisibleRowRangeForListViews]
  -[SBTodayViewController scrollingInteraction]
  -[SBTodayViewController legacyListPlatterView]
  -[SBTodayViewController keepIconImageViewControllersStaticForReason:]
  -[SBTodayViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBTodayViewController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[SBTodayViewController _cleanupViews]
  -[SBTodayViewController legacyListContainerView]
  -[SBTodayViewController participantState]
  -[SBTodayViewController setObservers:]
  -[SBTodayViewController _iconSpacingForIconListViews]
  -[SBTodayViewController spotlightPresenterAllowsPullToSearch:]
  -[SBTodayViewController descriptionBuilderWithMultilinePrefix:]
  -[SBTodayViewController _updateVisiblySettledForIconViewsInListView:]
  -[SBTodayViewController _updateSubviewOrderingForListViews]
  -[SBTodayViewController setListViewMinimumWidthConstraint:]
  -[SBTodayViewController widgetListViewController:sizeForInterfaceOrientation:]
  -[SBTodayViewController scrollViewTrailingConstraint]
  -[SBTodayViewController setDismissTapGestureRecognizer:]
  -[SBTodayViewController setDisplayLayoutElementActive:]
  -[SBTodayViewController spotlightPresenterSearchBarDidFocus:]
  -[SBTodayViewController scrollViewDidEndDragging:willDecelerate:]
  -[SBTodayViewController setStackViewToScrollViewLeadingConstraint:]
  -[SBTodayViewController removeFromParentViewController]
  -[SBTodayViewController iconList:didAddIcon:]
  -[SBTodayViewController _effectiveLayoutInsets]
  -[SBTodayViewController contentVisibility]
  -[SBTodayViewController willMoveToParentViewController:]
  -[SBTodayViewController scrollViewDidScroll:]
  -[SBTodayViewController descriptionWithMultilinePrefix:]
  -[SBTodayViewController stackViewToScrollViewBottomConstraint]
  -[SBTodayViewController setVisuallyRevealed:animated:]
  -[SBTodayViewController setScrollingBeginningOffset:]
  -[SBTodayViewController spotlightPresenterDidPresentSpotlight:]
  -[SBTodayViewController _updateSidebarPinnedState]
  -[SBTodayViewController setFavoriteListContainerView:]
  -[SBTodayViewController initWithListLayoutProvider:iconViewProvider:legacyWidgetListViewController:location:]
  -[SBTodayViewController _cellFrameInScrollBoundsForCell:]
  -[SBTodayViewController succinctDescription]
  -[SBTodayViewController scrollViewForWidgetListViewController:]
  -[SBTodayViewController spotlightContainerView]
  -[SBTodayViewController onScreenIconIndexRangeByIconListView]
  -[SBTodayViewController widgetHitTestingDisabledReasons]
  -[SBTodayViewController _suggestedTodayViewFrameForBounds:]
  -[SBTodayViewController _beginAppearanceTransitionForChildViewControllersToVisible:animated:]
  -[SBTodayViewController coronaAnimationController:willAnimateCoronaTransitionWithAnimator:]
  -[SBTodayViewController rootFolder]
  -[SBTodayViewController isWidgetListViewControllerEditable:]
  -[SBTodayViewController setListLayoutProvider:]
  -[SBTodayViewController addObserver:]
  -[SBTodayViewController parentViewControllerForSpotlightPresenter:]
  -[SBTodayViewController isHeaderVisible]
  -[SBTodayViewController setFavoriteListInstructionLabel:]
  -[SBTodayViewController setOnScreenIconIndexRangeByIconListView:]
  -[SBTodayViewController stackViewToScrollViewLeadingConstraint]
  -[SBTodayViewController location]
  -[SBTodayViewController setEditing:]
  -[SBTodayViewController _platterViewAtLocation:]
  -[SBTodayViewController _majorScrollView]
  -[SBTodayViewController listViewMinimumHeightConstraint]
  -[SBTodayViewController setDateHeaderViewController:]
  -[SBTodayViewController _removeIconImageViewControllerKeepStaticAssertion:]
  -[SBTodayViewController _toggleCarouselLayoutWithEditingState:]
  -[SBTodayViewController viewWillDisappear:]
  -[SBTodayViewController isDisplayingIconView:inLocation:]
  -[SBTodayViewController _setUpScrollView]
  -[SBTodayViewController _updateVisiblySettledForIconViews]
  -[SBTodayViewController firstIconViewForIcon:inLocations:]
  -[SBTodayViewController scrollingBeginningOffset]
  -[SBTodayViewController spotlightHeaderAcquiringViewController]
  -[SBTodayViewController setSpotlightPresenter:]
  -[SBTodayViewController viewDidLayoutSubviews]
  -[SBTodayViewController listViewMinimumWidthConstraint]
  -[SBTodayViewController gestureRecognizer:shouldReceiveTouch:]
  -[SBTodayViewController setScrollingInteraction:]
  -[SBTodayViewController _dateHeaderViewSpacing]
  -[SBTodayViewController scrollViewWillBeginDragging:]
  -[SBTodayViewController _enumerateWidgetWrapperViewsUsingBlock:]
  -[SBTodayViewController searchBarTopOffset]
  -[SBTodayViewController viewWillAppear:]
  -[SBTodayViewController cleanupAfterSpotlightDismissal]
  -[SBTodayViewController isDisplayingIcon:inLocations:]
  -[SBTodayViewController scrollViewShouldScrollToTop:]
  -[SBTodayViewController setLastRootSideBarContentOffset:]
  -[SBTodayViewController spotlightPresenterWillPresentSpotlight:]
  -[SBTodayViewController _updateScrollViewContentInset]
  -[SBTodayViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[SBTodayViewController extraViews]
  -[SBTodayViewController _isWidgetHitTestingDisabled]
  -[SBTodayViewController _endSuspendingVisibleRowRangeUpdatesForReason:]
  -[SBTodayViewController favoriteListWithSmallOrMediumWidgetsMinimumHeightConstraint]
  -[SBTodayViewController overlayController:didChangePresentationProgress:newPresentationProgress:fromLeading:]
  -[SBTodayViewController setCancelTouchesAssertionsByLegacyWidgetID:]
  -[SBTodayViewController _updateIconListSpacing]
  -[SBTodayViewController setHeaderVisible:]
  -[SBTodayViewController delegate]
  -[SBTodayViewController isDisplayingIconView:]
  -[SBTodayViewController listView]
  -[SBTodayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBTodayViewController settings:changedValueForKey:]
  -[SBTodayViewController dateHeaderViewController]
  -[SBTodayViewController _cancelTouchesForAllWidgets]
  -[SBTodayViewController transitionContext]
  -[SBTodayViewController restrictedCapabilities]
  -[SBTodayViewController _updateListLayoutAdditionalInsets]
  -[SBTodayViewController setDateHeaderView:]
  -[SBTodayViewController observers]
  -[SBTodayViewController firstIconViewForIcon:]
  -[SBTodayViewController _setUpSearchPresenter]
  -[SBTodayViewController favoriteListModel]
  -[SBTodayViewController _dismissTodayViewOverlay:]
  -[SBTodayViewController editingMaterialViewForWidgetListViewController:]
  -[SBTodayViewController searchBarTopOffsetForSpotlightPresenter:]
  -[SBTodayViewController setSpotlightContainerView:]
  -[SBTodayViewController proximityDetectionMode]
  -[SBTodayViewController _shouldIconViewForbidJiggling:]
  -[SBTodayViewController dealloc]
  -[SBTodayViewController _updateHeaderVisibility]
  -[SBTodayViewController stackViewToScrollViewTrailingConstraint]
  -[SBTodayViewController _isSidebarPinned]
  -[SBTodayViewController setCancelTouchesAssertionsByWidgetID:]
  -[SBTodayViewController _cancelTouchesForWidgetPlatterView:]
  -[SBTodayViewController iconViewWillDismissContextMenu:]
  -[SBTodayViewController iconListView:didAddIconView:]
  -[SBTodayViewController enableEditingModeWhenScrollEnds]
  -[SBTodayViewController enumerateDisplayedIconViewsUsingBlock:]
  -[SBTodayViewController scrollingStrategy]
  -[SBTodayViewController setSpotlightVisible:]
  -[SBTodayViewController presentSpotlightAnimated:]
  -[SBTodayViewController _updateTouchInsets]
  -[SBTodayViewController setFavoriteListWithSmallOrMediumWidgetsMinimumHeightConstraint:]
  -[SBTodayViewController visuallyRevealedPriorToEditingIcons]
  -[SBTodayViewController removeObserver:]
  -[SBTodayViewController listLayoutProvider]
  -[SBTodayViewController listLayoutDelegate]
  -[SBTodayViewController shouldAnimateFirstTwoViewsAsOne]
  -[SBTodayViewController _updateRevealStateAnimated:]
  -[SBTodayViewController viewControllerAppearStateOverrideAssertions]
  -[SBTodayViewController _cancelTouchesForWidgetIconView:]
  -[SBTodayViewController cancelTouchesAssertionsByLegacyWidgetID]
  -[SBTodayViewController loadView]
  -[SBTodayViewController iconViewWillPresentContextMenu:]
  -[SBTodayViewController _setUpIconListViewLayoutDelegates]
  -[SBTodayViewController _updateVisibleRowRangeForListView:]
  -[SBTodayViewController cancelTouchesAssertionsByWidgetID]
  -[SBTodayViewController setLegacyListPlatterView:]
  -[SBTodayViewController _endDisablingWidgetHitTestingForReason:]
  -[SBTodayViewController dateHeaderView]
  -[SBTodayViewController _beginSuspendingVisibleRowRangeUpdatesForReason:]
  -[SBTodayViewController _isOverridingViewControllerAppearanceStateToRemainDisappeared]
  -[SBTodayViewController isDisplayingIcon:inLocation:]
  -[SBTodayViewController _enumerateWidgetIconViewsUsingBlock:]
  -[SBTodayViewController favoriteListView]
  -[SBTodayViewController setWidgetHitTestingDisabledReasons:]
  -[SBTodayViewController setContentVisibility:]
  -[SBTodayViewController setFavoriteListPlatterView:]
  -[SBTodayViewController scrollViewDidEndDecelerating:]
  -[SBTodayViewController viewDidDisappear:]
  -[SBTodayViewController iconView:didChangeCustomImageViewController:]
  -[SBTodayViewController carouselReferenceForLegacyWidgetListView]
  -[SBTodayViewController isDisplayingIcon:]
  -[SBTodayViewController favoriteListInstructionLabel]
  -[SBTodayViewController setEnableEditingModeWhenScrollEnds:]
  -[SBTodayViewController setScrollViewLeadingConstraint:]
  -[SBTodayViewController setTransitionContext:]
  -[SBTodayViewController _updateLegacyListPlatter]
  -[SBTodayViewController _widgetIconViewAtLocation:]
  -[SBTodayViewController isPresentingIconLocation:]
  -[SBTodayViewController legibilitySettings]
  -[SBTodayViewController _interactiveSpotlightDraggingBeginPoint]
  -[SBTodayViewController favoriteListPlatterView]
  -[SBTodayViewController setListLayoutDelegate:]
  -[SBTodayViewController stackViewToScrollViewTopConstraint]
  -[SBTodayViewController _canShowWhileLocked]
  -[SBTodayViewController _toggleNonFavoriteListVisibilityWithSidebarPinned:editing:]
  -[SBTodayViewController _autoFillInFavoriteListViewIfNecessary]
  -[SBTodayViewController notificationBehavior]
  -[SBTodayViewController setFavoriteListView:]
  -[SBTodayViewController _updateFavoriteListPlatterAndSize]
  -[SBTodayViewController _updatePresentationModeForIconViews]


_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion : NSObject <BSInvalidatable, BSDescriptionProviding>
 @property  SBTodayViewController *todayViewController
 @property  BOOL invalidated
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion isInvalidated]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion .cxx_destruct]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion succinctDescriptionBuilder]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion descriptionBuilderWithMultilinePrefix:]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion setInvalidated:]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion descriptionWithMultilinePrefix:]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion succinctDescription]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion reason]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion todayViewController]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion dealloc]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion invalidate]
  -[_SBTodayViewControllerIconImageViewControllerKeepStaticAssertion initWithTodayViewController:reason:]


SBExternalWifiDefaults : BSAbstractDefaultDomain
 @property  BOOL wifiEnabled

  // instance methods
  -[SBExternalWifiDefaults init]
  -[SBExternalWifiDefaults _bindAndRegisterDefaults]


SBRingerControl : NSObject <SBRingerHUDViewControllerDelegate>
 @property  SBHUDController *HUDController
 @property  SBSoundController *soundController
 @property  float volume
 @property  BOOL ringerMuted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRingerControl volume]
  -[SBRingerControl soundController]
  -[SBRingerControl setVolume:]
  -[SBRingerControl setRingerMuted:]
  -[SBRingerControl .cxx_destruct]
  -[SBRingerControl HUDController]
  -[SBRingerControl isRingerMuted]
  -[SBRingerControl lastSavedRingerMutedState]
  -[SBRingerControl activateRingerHUDFromMuteSwitch:]
  -[SBRingerControl initWithHUDController:soundController:]
  -[SBRingerControl buttonReleased]
  -[SBRingerControl nudgeUp:]
  -[SBRingerControl activateRingerHUDForVolumeChangeWithInitialVolume:]
  -[SBRingerControl setVolume:forKeyPress:]
  -[SBRingerControl activateRingerHUD:withInitialVolume:fromSource:]
  -[SBRingerControl existingRingerHUDViewController]
  -[SBRingerControl hideRingerHUDIfVisible]
  -[SBRingerControl ringerHUDViewControllerWantsToBeDismissed:]
  -[SBRingerControl toggleRingerMute]


SBNotifyIconWillZoomDownSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout

  // instance methods
  -[SBNotifyIconWillZoomDownSwitcherEventResponse appLayout]
  -[SBNotifyIconWillZoomDownSwitcherEventResponse .cxx_destruct]
  -[SBNotifyIconWillZoomDownSwitcherEventResponse initWithAppLayout:]
  -[SBNotifyIconWillZoomDownSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBNotifyIconWillZoomDownSwitcherEventResponse type]


SBMedusaAppsTestRecipe : NSObject <SBTestRecipe>
 @property  FBApplicationUpdateScenesTransaction *currentTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMedusaAppsTestRecipe load]

  // instance methods
  -[SBMedusaAppsTestRecipe currentTransaction]
  -[SBMedusaAppsTestRecipe .cxx_destruct]
  -[SBMedusaAppsTestRecipe _toggle]
  -[SBMedusaAppsTestRecipe init]
  -[SBMedusaAppsTestRecipe title]
  -[SBMedusaAppsTestRecipe setCurrentTransaction:]
  -[SBMedusaAppsTestRecipe handleVolumeIncrease]
  -[SBMedusaAppsTestRecipe handleVolumeDecrease]
  -[SBMedusaAppsTestRecipe _updateAppsToBringUpFromPreferences]


SBiCloudPasscodeRequirementLockoutController : NSObject <SBSoftLockoutControllerDelegate>
 @property  BOOL desiresPasscode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBiCloudPasscodeRequirementLockoutController desiresPasscode]
  -[SBiCloudPasscodeRequirementLockoutController noteAuthenticationSucceededWithPasscode:]
  -[SBiCloudPasscodeRequirementLockoutController .cxx_destruct]
  -[SBiCloudPasscodeRequirementLockoutController _deviceHasComplexPasscode]
  -[SBiCloudPasscodeRequirementLockoutController requiresLockout]
  -[SBiCloudPasscodeRequirementLockoutController initWithLockScreenManager:mobileKeyBag:]
  -[SBiCloudPasscodeRequirementLockoutController dealloc]


SBSecureAppPolicy : NSObject
  // class methods
  +[SBSecureAppPolicy shouldAlwaysShowSecureSceneForApp:]


SBHomeGestureToMixedGridSwitcherSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier transitionWillBegin]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier scaleForIndex:]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier frameForIndex:]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier .cxx_destruct]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier _dismissForEmptySwitcherResponseName]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier responseForProposedChildResponse:childModifier:event:]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier initWithTransitionID:mixedGridModifier:selectedAppLayout:startingEnvironmentMode:liftOfVelocity:liftOffTranslation:floatingAppLayout:floatingConfiguration:]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier _newMixedGridModifier]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier _appLayoutToScrollTo]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier _firstFloatingAppLayout:]
  -[SBHomeGestureToMixedGridSwitcherSwitcherModifier _performBlockWhileSimulatingPostPresentationScrollViewContentOffset:]


SBTestableAlertItemTestRecipe : NSObject <SBTestRecipe>
 @property  NSArray *recipesToTest
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTestableAlertItemTestRecipe load]
  +[SBTestableAlertItemTestRecipe testCases]
  +[SBTestableAlertItemTestRecipe testCasesGrouped]
  +[SBTestableAlertItemTestRecipe nameForCase:]

  // instance methods
  -[SBTestableAlertItemTestRecipe .cxx_destruct]
  -[SBTestableAlertItemTestRecipe title]
  -[SBTestableAlertItemTestRecipe handleVolumeIncrease]
  -[SBTestableAlertItemTestRecipe handleVolumeDecrease]
  -[SBTestableAlertItemTestRecipe _nextAlertItemToTest]
  -[SBTestableAlertItemTestRecipe _dismissCurrentItem]
  -[SBTestableAlertItemTestRecipe alertForIndex:]
  -[SBTestableAlertItemTestRecipe _mapsApp]
  -[SBTestableAlertItemTestRecipe dataPlanAlertItemForCase:]
  -[SBTestableAlertItemTestRecipe _anyAppIcon]
  -[SBTestableAlertItemTestRecipe _anyUserInstalledAppIcon]
  -[SBTestableAlertItemTestRecipe _anySUDescriptor]
  -[SBTestableAlertItemTestRecipe recipesToTest]
  -[SBTestableAlertItemTestRecipe setRecipesToTest:]


SBApplicationUserQuitMonitorServer : NSObject <BSServiceConnectionListenerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationUserQuitMonitorServer listener:didReceiveConnection:withContext:]
  -[SBApplicationUserQuitMonitorServer .cxx_destruct]
  -[SBApplicationUserQuitMonitorServer init]
  -[SBApplicationUserQuitMonitorServer userClosedLastSceneOfApplicationWithBundleID:]
  -[SBApplicationUserQuitMonitorServer _queue_removeConnection:]
  -[SBApplicationUserQuitMonitorServer _queue_addConnection:]


SBAsynchronousRenderingAssertion : BSSimpleAssertion
 @property  BOOL wantsMinificationFilter

  // instance methods
  -[SBAsynchronousRenderingAssertion initWithReason:]
  -[SBAsynchronousRenderingAssertion initWithReason:wantsMinificationFilter:]
  -[SBAsynchronousRenderingAssertion wantsMinificationFilter]
  -[SBAsynchronousRenderingAssertion setWantsMinificationFilter:]


SBTransientOverlayDismissWorkspaceTransaction : SBMainWorkspaceTransaction
  // class methods
  +[SBTransientOverlayDismissWorkspaceTransaction isValidForTransitionRequest:]

  // instance methods
  -[SBTransientOverlayDismissWorkspaceTransaction _didComplete]
  -[SBTransientOverlayDismissWorkspaceTransaction _begin]
  -[SBTransientOverlayDismissWorkspaceTransaction _sendActivationResultWithError:]


SBDisplayBrightnessController : NSObject <SBHIDValueModifyingButtonSetArbiterDelegate, SBBrightnessRouteControlling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  float brightnessLevel

  // class methods
  +[SBDisplayBrightnessController handlesKeyCommands]

  // instance methods
  -[SBDisplayBrightnessController initWithCoordinator:]
  -[SBDisplayBrightnessController .cxx_destruct]
  -[SBDisplayBrightnessController brightnessLevel]
  -[SBDisplayBrightnessController dealloc]
  -[SBDisplayBrightnessController _setBrightnessLevel:animated:]
  -[SBDisplayBrightnessController buttonSetArbiter:performActionForButtonPage:usage:]
  -[SBDisplayBrightnessController buttonSetArbiterDidReset:]
  -[SBDisplayBrightnessController brightnessRouteType]
  -[SBDisplayBrightnessController handleBrightnessKeyPressEvent:]
  -[SBDisplayBrightnessController cancelBrightnessKeyPressEvent]
  -[SBDisplayBrightnessController setBrightnessLevel:animated:]
  -[SBDisplayBrightnessController noteValueUpdatesWillBegin]
  -[SBDisplayBrightnessController noteValueUpdatesDidEnd]
  -[SBDisplayBrightnessController _completeBrightnessTransaction]
  -[SBDisplayBrightnessController _effectiveCurrentTargetBrightness]
  -[SBDisplayBrightnessController _isBrightnessPropertyRunning]
  -[SBDisplayBrightnessController _beginBrightnessTransaction]


SBHUDWindow : SBSecureMainScreenActiveInterfaceOrientationWindow
  // class methods
  +[SBHUDWindow _traitsArbiterOrientationActuationRole]


SBHUDController : NSObject <_SBHUDHostViewControllerDelegate, PTSettingsKeyObserver, BSDescriptionProviding, UIViewControllerTransitioningDelegate>
 @property  SBMainScreenActiveInterfaceOrientationWindow *hudWindow
 @property  _SBHUDHostViewController *hudViewController
 @property  SBHUDSettings *settings
 @property  UIScreen *screen
 @property  BOOL anyHUDsVisible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHUDController _defaultCrossfadeAnimatorForHUDController:]

  // instance methods
  -[SBHUDController animationControllerForPresentedController:presentingController:sourceController:]
  -[SBHUDController _tearDown]
  -[SBHUDController animationControllerForDismissedController:]
  -[SBHUDController screen]
  -[SBHUDController initWithScreen:]
  -[SBHUDController _setupStateCapture]
  -[SBHUDController hudViewController:willPresentHUD:]
  -[SBHUDController hudViewController:didPresentHUD:]
  -[SBHUDController .cxx_destruct]
  -[SBHUDController hudWindow]
  -[SBHUDController _dismissHUD:animated:]
  -[SBHUDController succinctDescriptionBuilder]
  -[SBHUDController dismissHUDs:]
  -[SBHUDController hudViewController:willDismissHUD:]
  -[SBHUDController descriptionBuilderWithMultilinePrefix:]
  -[SBHUDController presentingHUDs]
  -[SBHUDController init]
  -[SBHUDController _notificationWhichWeWantToUseToTearEverythingDown:]
  -[SBHUDController _presentHUD:animated:]
  -[SBHUDController descriptionWithMultilinePrefix:]
  -[SBHUDController _createHUDWindowIfNeeded]
  -[SBHUDController succinctDescription]
  -[SBHUDController knownHUDs]
  -[SBHUDController presentedHUDs]
  -[SBHUDController HUDSessionForViewController:identifier:]
  -[SBHUDController anyHUDsVisible]
  -[SBHUDController hudViewController]
  -[SBHUDController settings:changedValueForKey:]
  -[SBHUDController _finishedTransitionForHUD:intendedState:finalState:]
  -[SBHUDController hudViewController:didDismissHUD:]
  -[SBHUDController presentedHUDControllerForIdentifier:]
  -[SBHUDController dealloc]
  -[SBHUDController knownHUDControllerForIdentifier:]
  -[SBHUDController settings]
  -[SBHUDController acquireHUDHiddenAssertionForIdentifier:withReason:]
  -[SBHUDController _tearDownIfNoHuds]


_SBHUDModel : NSObject <_SBHUDHostViewControllerDelegate, SBHUDControlling>
 @property  BOOL isPresented
 @property  BOOL isPresenting
 @property  BOOL isDismissing
 @property  BOOL isDismissed
 @property  SBHUDController *HUDController
 @property  UIViewController<SBHUDViewControlling> *HUDViewController
 @property  double dismissalInterval
 @property  NSString *identifier
 @property  BOOL dismissalScheduled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isVisible

  // class methods
  +[_SBHUDModel HUDModelForController:viewController:identifier:]

  // instance methods
  -[_SBHUDModel hudViewController:willPresentHUD:]
  -[_SBHUDModel hudViewController:didPresentHUD:]
  -[_SBHUDModel isPresented]
  -[_SBHUDModel .cxx_destruct]
  -[_SBHUDModel dismissalInterval]
  -[_SBHUDModel hudViewController:willDismissHUD:]
  -[_SBHUDModel HUDController]
  -[_SBHUDModel isVisible]
  -[_SBHUDModel isEqual:]
  -[_SBHUDModel setDismissed:]
  -[_SBHUDModel setDismissing:]
  -[_SBHUDModel identifier]
  -[_SBHUDModel dismiss]
  -[_SBHUDModel isDismissing]
  -[_SBHUDModel hudViewController:didDismissHUD:]
  -[_SBHUDModel setPresenting:]
  -[_SBHUDModel isPresenting]
  -[_SBHUDModel dismissAnimated:]
  -[_SBHUDModel isDismissed]
  -[_SBHUDModel setPresented:]
  -[_SBHUDModel HUDViewController]
  -[_SBHUDModel presentWithDismissalInterval:animated:]
  -[_SBHUDModel presentWithDismissalInterval:]
  -[_SBHUDModel rescheduleDismissalTimer]
  -[_SBHUDModel invalidateDismissalTimer]
  -[_SBHUDModel isDismissalScheduled]
  -[_SBHUDModel scheduleDismissalTimer]


_SBHUDHostViewController : SBFTouchPassThroughViewController <SBViewControllerTransitionContextDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBHUDHostViewController .cxx_destruct]
  -[_SBHUDHostViewController transitionDidFinish:]
  -[_SBHUDHostViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[_SBHUDHostViewController supportedInterfaceOrientations]
  -[_SBHUDHostViewController _canShowWhileLocked]
  -[_SBHUDHostViewController _transitionContextMatchingHUD:withinContainer:]
  -[_SBHUDHostViewController _executePresentNewHUD:animated:completion:]
  -[_SBHUDHostViewController _executeDismissHUD:animated:completion:]
  -[_SBHUDHostViewController _buildTransitionContextToPresentHUD:dismissHUD:animated:delegate:containerView:completion:]
  -[_SBHUDHostViewController _executeViewControllerTransitionContext:]


SBFullScreenToHomeIconZoomSwitcherModifier : SBTransitionSwitcherModifier
 @property  BOOL shouldUpdateIconViewVisibility
 @property  BOOL shouldMatchMoveToIconView

  // instance methods
  -[SBFullScreenToHomeIconZoomSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBFullScreenToHomeIconZoomSwitcherModifier dockWindowLevel]
  -[SBFullScreenToHomeIconZoomSwitcherModifier wantsDockBehaviorAssertion]
  -[SBFullScreenToHomeIconZoomSwitcherModifier homeScreenBackdropBlurType]
  -[SBFullScreenToHomeIconZoomSwitcherModifier transitionWillBegin]
  -[SBFullScreenToHomeIconZoomSwitcherModifier setShouldUpdateIconViewVisibility:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBFullScreenToHomeIconZoomSwitcherModifier fullyPresentedFrameForIndex:frame:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier homeScreenAlpha]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier initWithTransitionID:appLayout:direction:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBFullScreenToHomeIconZoomSwitcherModifier dockProgress]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _isIndexZoomAppLayout:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier presentationAttributesForShelf:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier isHomeScreenContentRequired]
  -[SBFullScreenToHomeIconZoomSwitcherModifier dockWindowLevelPriority]
  -[SBFullScreenToHomeIconZoomSwitcherModifier containerLeafAppLayoutForShelf:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier transitionDidEnd]
  -[SBFullScreenToHomeIconZoomSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBFullScreenToHomeIconZoomSwitcherModifier scaleForIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier frameForIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBFullScreenToHomeIconZoomSwitcherModifier layoutSettingsForTargetCenter:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier visibleAppLayouts]
  -[SBFullScreenToHomeIconZoomSwitcherModifier .cxx_destruct]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _isEffectivelyHome]
  -[SBFullScreenToHomeIconZoomSwitcherModifier isSwitcherWindowVisible]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldMatchMoveToIconView]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldUpdateIconViewVisibility]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _layoutSettings]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _normalizedHomeScreenIconZoomPercentBetweenTopAndBottom:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier handleTimerEvent:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier wallpaperStyle]
  -[SBFullScreenToHomeIconZoomSwitcherModifier cornerRadiiForIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _settingsByInterpolatingBetween:and:progress:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBFullScreenToHomeIconZoomSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBFullScreenToHomeIconZoomSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier setShouldMatchMoveToIconView:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier didMoveToParentModifier:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier topMostLayoutElements]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _normalizedHomeScreenTargetZoomPercentBetweenCenterAndEdge:]


SBPreferenceChangeDodgingModifier : SBDodgingModifier
 @property  BOOL resignLifecycleManagement
 @property  BOOL boostUpdatedIdentifier

  // instance methods
  -[SBPreferenceChangeDodgingModifier .cxx_destruct]
  -[SBPreferenceChangeDodgingModifier handleAnimationCompletionEvent:]
  -[SBPreferenceChangeDodgingModifier modelForInvalidatedModel:]
  -[SBPreferenceChangeDodgingModifier animationBehaviorModeForIdentifier:]
  -[SBPreferenceChangeDodgingModifier initWithIdentifier:animated:]
  -[SBPreferenceChangeDodgingModifier setResignLifecycleManagement:]
  -[SBPreferenceChangeDodgingModifier setBoostUpdatedIdentifier:]
  -[SBPreferenceChangeDodgingModifier handlePreferenceChangeEvent:]
  -[SBPreferenceChangeDodgingModifier zOrderedIdentifiers]
  -[SBPreferenceChangeDodgingModifier isResigningLifecycleManagement]
  -[SBPreferenceChangeDodgingModifier isResigningLifecycleManagement]


SBSwitcherAppSuggestionViewController : UIViewController
 @property  BOOL suggestionQueueSuspended
 @property  SBBestAppSuggestion *bestAppSuggestion
 @property  BOOL showSuggestions
 @property  <SBSwitcherAppSuggestionViewControllerDelegate> *delegate

  // instance methods
  -[SBSwitcherAppSuggestionViewController _insertAndAnimateInBottomBannerForSuggestion:completion:]
  -[SBSwitcherAppSuggestionViewController _bannerStyle]
  -[SBSwitcherAppSuggestionViewController viewWillLayoutSubviews]
  -[SBSwitcherAppSuggestionViewController _setSuggestionQueueSuspended:]
  -[SBSwitcherAppSuggestionViewController bestAppSuggestion]
  -[SBSwitcherAppSuggestionViewController showSuggestions]
  -[SBSwitcherAppSuggestionViewController .cxx_destruct]
  -[SBSwitcherAppSuggestionViewController viewDidLoad]
  -[SBSwitcherAppSuggestionViewController setDelegate:]
  -[SBSwitcherAppSuggestionViewController initWithNibName:bundle:]
  -[SBSwitcherAppSuggestionViewController _updateBottomBannerWithCompletion:]
  -[SBSwitcherAppSuggestionViewController _isSuggestionQueueSuspended]
  -[SBSwitcherAppSuggestionViewController _idleOnscreenRectForBottomBanner]
  -[SBSwitcherAppSuggestionViewController _hasSuggestionBannerView]
  -[SBSwitcherAppSuggestionViewController endPausingSuggestionUpdatesForReason:]
  -[SBSwitcherAppSuggestionViewController _setBestAppSuggestion:animationCompletion:]
  -[SBSwitcherAppSuggestionViewController willMoveToParentViewController:]
  -[SBSwitcherAppSuggestionViewController _offscreenRectForBottomBanner]
  -[SBSwitcherAppSuggestionViewController setBestAppSuggestion:]
  -[SBSwitcherAppSuggestionViewController _animateOutAndRemoveCurrentBottomBannerWithCompletion:]
  -[SBSwitcherAppSuggestionViewController _handleBannerTap:]
  -[SBSwitcherAppSuggestionViewController delegate]
  -[SBSwitcherAppSuggestionViewController _activateBestAppSuggestion]
  -[SBSwitcherAppSuggestionViewController dealloc]
  -[SBSwitcherAppSuggestionViewController setShowSuggestions:]
  -[SBSwitcherAppSuggestionViewController _handleLongPress:]
  -[SBSwitcherAppSuggestionViewController beginPausingSuggestionUpdatesForReason:]
  -[SBSwitcherAppSuggestionViewController loadView]
  -[SBSwitcherAppSuggestionViewController _activateCurrentSuggestion]
  -[SBSwitcherAppSuggestionViewController _evaluateSuggestionQueueSuspension]


SBSwitcherAppSuggestionContentView : UIView
  // instance methods
  -[SBSwitcherAppSuggestionContentView accessibilityIdentifier]
  -[SBSwitcherAppSuggestionContentView pointInside:withEvent:]


SBDataPlanAccountAlertItem : SBDataPlanAlertItem <SBDataPlanAlertActions>
 @property  NSURL *accountURL

  // class methods
  +[SBDataPlanAccountAlertItem laterButtonTitle]
  +[SBDataPlanAccountAlertItem nowButtonTitle]

  // instance methods
  -[SBDataPlanAccountAlertItem .cxx_destruct]
  -[SBDataPlanAccountAlertItem notNow]
  -[SBDataPlanAccountAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanAccountAlertItem initWithAccountURL:]
  -[SBDataPlanAccountAlertItem setAccountURL:]
  -[SBDataPlanAccountAlertItem takeAction]
  -[SBDataPlanAccountAlertItem accountURL]


SBDataPlanUsageAlertItem : SBDataPlanAccountAlertItem
 @property  NSNumber *remainingPortion

  // instance methods
  -[SBDataPlanUsageAlertItem .cxx_destruct]
  -[SBDataPlanUsageAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanUsageAlertItem initWithAccountURL:usage:]
  -[SBDataPlanUsageAlertItem setRemainingPortion:]
  -[SBDataPlanUsageAlertItem remainingPortion]


SBWorkspaceEntityRemovalContext : NSObject
 @property  unsigned long animationStyle
 @property  unsigned long removalActionType

  // instance methods
  -[SBWorkspaceEntityRemovalContext animationStyle]
  -[SBWorkspaceEntityRemovalContext initWithAnimationStyle:removalActionType:]
  -[SBWorkspaceEntityRemovalContext removalActionType]


SBDataPlanDisableAlertItem : SBDataPlanAlertItem
  // instance methods
  -[SBDataPlanDisableAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanDisableAlertItem _showSettings]


SBDataPlanActivationAlertItem : SBDataPlanAccountAlertItem
 @property  BOOL newAccount

  // instance methods
  -[SBDataPlanActivationAlertItem notNow]
  -[SBDataPlanActivationAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanActivationAlertItem initWithAccountURL:newAccount:promptToDisable:]
  -[SBDataPlanActivationAlertItem setNewAccount:]
  -[SBDataPlanActivationAlertItem isNewAccount]


SBSceneLayoutWhitePointAdaptationController : NSObject
  // class methods
  +[SBSceneLayoutWhitePointAdaptationController sharedInstance]
  +[SBSceneLayoutWhitePointAdaptationController _defaultAnimationSettings]
  +[SBSceneLayoutWhitePointAdaptationController _isInteractiveUpdateEnabled]
  +[SBSceneLayoutWhitePointAdaptationController _defaultAnimationDuration]
  +[SBSceneLayoutWhitePointAdaptationController _harmonySettings]

  // instance methods
  -[SBSceneLayoutWhitePointAdaptationController _applicationSceneHandleForLayoutElement:]
  -[SBSceneLayoutWhitePointAdaptationController _updateWhitePointAdaptationStrengthWithAnimationSettings:]
  -[SBSceneLayoutWhitePointAdaptationController updateWhitePointAdaptationStrengthWithAnimationSettings:]
  -[SBSceneLayoutWhitePointAdaptationController _updateWhitePointAdaptationStrengthWithWorkspaceTransitionRequest:fromPercentage:toPercentage:animationSettings:cancelled:interactive:]
  -[SBSceneLayoutWhitePointAdaptationController updateWhitePointAdaptationStrengthWithWorkspaceTransitionRequest:animationTransitionContext:]
  -[SBSceneLayoutWhitePointAdaptationController .cxx_destruct]
  -[SBSceneLayoutWhitePointAdaptationController updateWhitePointAdaptationStrength]
  -[SBSceneLayoutWhitePointAdaptationController init]
  -[SBSceneLayoutWhitePointAdaptationController _whitePointAdaptivityStyleForLayoutElement:]
  -[SBSceneLayoutWhitePointAdaptationController updateWhitePointAdaptationStrengthWithFromApplicationSceneEntities:toApplicationSceneEntities:fromPercentage:toPercentage:animationSettings:interactive:]
  -[SBSceneLayoutWhitePointAdaptationController _whitePointAdaptivityStylesForLayoutState]
  -[SBSceneLayoutWhitePointAdaptationController _updateWhitePointAdaptationStrengthWithFromApplicationScenes:toApplicationScenes:fromPercentage:toPercentage:animationSettings:interactive:]
  -[SBSceneLayoutWhitePointAdaptationController _deviceSceneHandlesFromEntities:]


_SBStatusBarChanges : NSObject
 @property  BOOL statusBarStyleChanged
 @property  long long statusBarStyle
 @property  BOOL statusBarPartStyleChanged
 @property  long long statusBarPartStyle
 @property  NSString *statusBarPartIdentifier

  // instance methods
  -[_SBStatusBarChanges statusBarStyle]
  -[_SBStatusBarChanges .cxx_destruct]
  -[_SBStatusBarChanges invalidate]
  -[_SBStatusBarChanges setStatusBarStyle:]
  -[_SBStatusBarChanges setStatusBarPartStyle:forPartWithIdentifier:]
  -[_SBStatusBarChanges statusBarStyleChanged]
  -[_SBStatusBarChanges setStatusBarStyleChanged:]
  -[_SBStatusBarChanges statusBarPartStyleChanged]
  -[_SBStatusBarChanges setStatusBarPartStyleChanged:]
  -[_SBStatusBarChanges statusBarPartStyle]
  -[_SBStatusBarChanges setStatusBarPartStyle:]
  -[_SBStatusBarChanges statusBarPartIdentifier]
  -[_SBStatusBarChanges setStatusBarPartIdentifier:]


SBDeviceApplicationSceneViewController : SBApplicationSceneViewController <SBDeviceApplicationSceneOverlayViewProviderDelegate, SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneStatusBarStateObserver, SBDeviceApplicationSceneStatusBarBreadcrumbProviderObserver, SBSceneViewDelegate, UIStatusBarStyleDelegate_SpringBoardOnly, SBSceneViewStatusBarAssertionObserver, SBDeviceApplicationSceneViewControlling>
 @property  SBDeviceApplicationSceneView *sceneView
 @property  MTLumaDodgePillSettings *homeGrabberPillSettings
 @property  NSHashTable *statusBarAssertions
 @property  BOOL rendersWhileLocked
 @property  BOOL insetForHomeAffordance
 @property  BOOL shouldDrawStatusBarInsideSceneView
 @property  <SBDeviceApplicationSceneViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView<SBApplicationSceneBackgroundView> *backgroundView
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  SBHomeGrabberView *homeGrabberView
 @property  long long homeGrabberDisplayMode
 @property  NSString *sceneMinificationFilter
 @property  BOOL sceneRendersAsynchronously
 @property  UIView *sceneContentView
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBDeviceApplicationSceneViewController isInsetForHomeAffordance]
  -[SBDeviceApplicationSceneViewController leadingStatusBarStyle]
  -[SBDeviceApplicationSceneViewController trailingStatusBarStyle]
  -[SBDeviceApplicationSceneViewController setInsetForHomeAffordance:]
  -[SBDeviceApplicationSceneViewController _didDisableSecureDisplay]
  -[SBDeviceApplicationSceneViewController didRotateFromInterfaceOrientation:toInterfaceOrientation:]
  -[SBDeviceApplicationSceneViewController statusBarBreadcrumbProviderDidUpdateDisplayProperties:]
  -[SBDeviceApplicationSceneViewController willRotateFromInterfaceOrientation:toInterfaceOrientation:alongsideContainerView:animated:]
  -[SBDeviceApplicationSceneViewController _statusBarScrollToTop:]
  -[SBDeviceApplicationSceneViewController _setStatusBarStyle:forPartWithIdentifier:]
  -[SBDeviceApplicationSceneViewController currentStatusBarHeight]
  -[SBDeviceApplicationSceneViewController _isApplicationStatusBarHidden]
  -[SBDeviceApplicationSceneViewController bestHomeAffordanceOrientationForOrientation:]
  -[SBDeviceApplicationSceneViewController setShouldDrawStatusBarInsideSceneView:]
  -[SBDeviceApplicationSceneViewController initWithSceneHandle:]
  -[SBDeviceApplicationSceneViewController sceneHandle:didCreateScene:]
  -[SBDeviceApplicationSceneViewController statusBarAssertionWithStatusBarSettings:atLevel:]
  -[SBDeviceApplicationSceneViewController _configureForSecureDisplay:]
  -[SBDeviceApplicationSceneViewController _statusBarTapped:type:]
  -[SBDeviceApplicationSceneViewController _removeStatusBarMatchMoveAnimation]
  -[SBDeviceApplicationSceneViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBDeviceApplicationSceneViewController homeGrabberPillSettings]
  -[SBDeviceApplicationSceneViewController overlayViewProviderRendersWhileLocked:]
  -[SBDeviceApplicationSceneViewController statusBar:effectiveStyleOverridesForRequestedStyle:overrides:]
  -[SBDeviceApplicationSceneViewController _currentStatusBarStyleForPartWithIdentifier:]
  -[SBDeviceApplicationSceneViewController sceneWithIdentifier:didChangeStatusBarAlphaTo:]
  -[SBDeviceApplicationSceneViewController _setupStatusBarStylesFromSceneHandle:]
  -[SBDeviceApplicationSceneViewController _statusBarAssertions]
  -[SBDeviceApplicationSceneViewController .cxx_destruct]
  -[SBDeviceApplicationSceneViewController _createSceneOverlayViewProvidersIfNecessary]
  -[SBDeviceApplicationSceneViewController didMoveToParentViewController:]
  -[SBDeviceApplicationSceneViewController _setRealStatusBarStyleDelegate:]
  -[SBDeviceApplicationSceneViewController sceneHandle:didChangeStatusBarAvoidanceFrame:]
  -[SBDeviceApplicationSceneViewController viewDidLoad]
  -[SBDeviceApplicationSceneViewController sceneMinificationFilter]
  -[SBDeviceApplicationSceneViewController statusBarAssertionDidUpdate:]
  -[SBDeviceApplicationSceneViewController sceneWithIdentifier:didChangeStatusBarStyleOverridesToSuppressTo:]
  -[SBDeviceApplicationSceneViewController conformsToProtocolSBDeviceApplicationSceneViewControlling]
  -[SBDeviceApplicationSceneViewController _statusBarShowDebug:]
  -[SBDeviceApplicationSceneViewController _configureForCurrentSecureDisplayState]
  -[SBDeviceApplicationSceneViewController deactivateOverlayForViewProvider:]
  -[SBDeviceApplicationSceneViewController setDelegate:]
  -[SBDeviceApplicationSceneViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBDeviceApplicationSceneViewController _effectiveStyleForPartIdentifier:]
  -[SBDeviceApplicationSceneViewController sceneContentView]
  -[SBDeviceApplicationSceneViewController _setStatusBarStyle:]
  -[SBDeviceApplicationSceneViewController _setStatusBarAssertions:]
  -[SBDeviceApplicationSceneViewController statusBarAssertionWithStatusBarHidden:atLevel:]
  -[SBDeviceApplicationSceneViewController _relinquishResignActiveAssertion]
  -[SBDeviceApplicationSceneViewController _deactivateOverlayForViewProvider:]
  -[SBDeviceApplicationSceneViewController _createStatusBar]
  -[SBDeviceApplicationSceneViewController sceneWithIdentifier:didChangeStatusBarHiddenTo:withAnimation:]
  -[SBDeviceApplicationSceneViewController homeGrabberView]
  -[SBDeviceApplicationSceneViewController rendersWhileLocked]
  -[SBDeviceApplicationSceneViewController _currentStatusBarStyle]
  -[SBDeviceApplicationSceneViewController _underlyingStatusBarViewIfAvailable]
  -[SBDeviceApplicationSceneViewController setSceneMinificationFilter:]
  -[SBDeviceApplicationSceneViewController _destroySceneOverlayViewProviders]
  -[SBDeviceApplicationSceneViewController sceneView:changedPreferredStatusBarStyleTo:]
  -[SBDeviceApplicationSceneViewController SB_conformsToSceneLayoutStatusBarAssertionProviding]
  -[SBDeviceApplicationSceneViewController setHomeGrabberPillSettings:]
  -[SBDeviceApplicationSceneViewController setRendersWhileLocked:]
  -[SBDeviceApplicationSceneViewController setHomeGrabberDisplayMode:]
  -[SBDeviceApplicationSceneViewController _configureStatusBarWithCurrentStyleRequest]
  -[SBDeviceApplicationSceneViewController viewDidLayoutSubviews]
  -[SBDeviceApplicationSceneViewController sceneWithIdentifier:didChangeStatusBarStyleTo:forPartWithIdentifier:]
  -[SBDeviceApplicationSceneViewController _applyStatusBarStyleOverridesToSuppress:toSceneWithIdentifier:]
  -[SBDeviceApplicationSceneViewController activateOverlayForViewProvider:]
  -[SBDeviceApplicationSceneViewController _layoutStatusBar]
  -[SBDeviceApplicationSceneViewController _addStatusBarMatchMoveAnimationForView:]
  -[SBDeviceApplicationSceneViewController sceneRendersAsynchronously]
  -[SBDeviceApplicationSceneViewController setBackgroundView:]
  -[SBDeviceApplicationSceneViewController delegate]
  -[SBDeviceApplicationSceneViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBDeviceApplicationSceneViewController definesPresentationContext]
  -[SBDeviceApplicationSceneViewController shouldDrawStatusBarInsideSceneView]
  -[SBDeviceApplicationSceneViewController animationFactoryForImplicitTransitionFromMode:toMode:defaultFactory:]
  -[SBDeviceApplicationSceneViewController dealloc]
  -[SBDeviceApplicationSceneViewController setSceneRendersAsynchronously:]
  -[SBDeviceApplicationSceneViewController invalidate]
  -[SBDeviceApplicationSceneViewController sceneWithIdentifier:didChangeStatusBarStyleTo:]
  -[SBDeviceApplicationSceneViewController _updateStatusBarState]
  -[SBDeviceApplicationSceneViewController overriddenRequestedStyleFromStyle:]
  -[SBDeviceApplicationSceneViewController homeGrabberDisplayMode]
  -[SBDeviceApplicationSceneViewController _removeStatusBar]
  -[SBDeviceApplicationSceneViewController sceneHandle:didChangeStatusBarParts:]
  -[SBDeviceApplicationSceneViewController statusBarAssertionDidInvalidate:]
  -[SBDeviceApplicationSceneViewController statusBar:didAnimateFromHeight:toHeight:animation:]
  -[SBDeviceApplicationSceneViewController statusBar:willAnimateFromHeight:toHeight:duration:animation:]
  -[SBDeviceApplicationSceneViewController _willEnableSecureDisplay]
  -[SBDeviceApplicationSceneViewController _shouldSuppressHomeGrabber]
  -[SBDeviceApplicationSceneViewController _activeOverlaysWantResignActiveAssertion]
  -[SBDeviceApplicationSceneViewController _statusBarHasMatchMoveAnimation]
  -[SBDeviceApplicationSceneViewController _recalculateResignActiveAssertionForActiveOverlays]
  -[SBDeviceApplicationSceneViewController statusBar:styleForRequestedStyle:overrides:]
  -[SBDeviceApplicationSceneViewController backgroundView]
  -[SBDeviceApplicationSceneViewController _canShowWhileLocked]


SBDataPlanCompletionAlertItem : SBDataPlanAlertItem
 @property  NSString *carrierName
 @property  BOOL newAccount

  // instance methods
  -[SBDataPlanCompletionAlertItem carrierName]
  -[SBDataPlanCompletionAlertItem .cxx_destruct]
  -[SBDataPlanCompletionAlertItem setCarrierName:]
  -[SBDataPlanCompletionAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanCompletionAlertItem initWithCarrierName:newAccount:]
  -[SBDataPlanCompletionAlertItem setNewAccount:]
  -[SBDataPlanCompletionAlertItem isNewAccount]


SBHomeGestureInteraction : NSObject <UIGestureRecognizerDelegate, SBSystemGestureRecognizerDelegate, SBTouchTemplateGestureRecognizerDelegate>
 @property  SBHomeGesturePanGestureRecognizer *screenEdgePanGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectPanGestureRecognizer
 @property  SBFluidScrunchGestureRecognizer *scrunchGestureRecognizer
 @property  <SBHomeGestureInteractionDelegate> *delegate
 @property  long long recognizedGestureType
 @property  SBSystemGestureManager *gestureManager
 @property  BOOL enabled
 @property  NSSet *gestureRecognizers
 @property  UIGestureRecognizer *recognizedGestureRecognizer
 @property  double indirectScreenEdgeGestureRecognitionDistance
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureInteraction velocityInView:]
  -[SBHomeGestureInteraction gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBHomeGestureInteraction _handleGestureRecognizer:]
  -[SBHomeGestureInteraction gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBHomeGestureInteraction .cxx_destruct]
  -[SBHomeGestureInteraction translationInView:]
  -[SBHomeGestureInteraction setDelegate:]
  -[SBHomeGestureInteraction gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:]
  -[SBHomeGestureInteraction viewForSystemGestureRecognizer:]
  -[SBHomeGestureInteraction gestureRecognizers]
  -[SBHomeGestureInteraction gestureRecognizerShouldBegin:]
  -[SBHomeGestureInteraction _configureGestureRecognizers]
  -[SBHomeGestureInteraction isEnabled]
  -[SBHomeGestureInteraction gestureRecognizer:shouldReceiveTouch:]
  -[SBHomeGestureInteraction initWithDelegate:]
  -[SBHomeGestureInteraction delegate]
  -[SBHomeGestureInteraction locationInView:]
  -[SBHomeGestureInteraction gestureManager]
  -[SBHomeGestureInteraction setGestureManager:]
  -[SBHomeGestureInteraction dealloc]
  -[SBHomeGestureInteraction screenEdgePanGestureRecognizer]
  -[SBHomeGestureInteraction invalidate]
  -[SBHomeGestureInteraction setEnabled:]
  -[SBHomeGestureInteraction gestureRecognizerForType:]
  -[SBHomeGestureInteraction initWithSystemGestureManager:delegate:]
  -[SBHomeGestureInteraction _configureScreenEdgePanGestureRecognizer]
  -[SBHomeGestureInteraction _configureIndirectPanGestureRecognizer]
  -[SBHomeGestureInteraction _configureScrunchGestureRecognizer]
  -[SBHomeGestureInteraction typeOfGestureRecognizer:]
  -[SBHomeGestureInteraction recognizedGestureRecognizer]
  -[SBHomeGestureInteraction indirectScreenEdgeGestureRecognitionDistance]
  -[SBHomeGestureInteraction _isGestureRunning:]
  -[SBHomeGestureInteraction recognizedGestureType]
  -[SBHomeGestureInteraction setRecognizedGestureType:]
  -[SBHomeGestureInteraction setScreenEdgePanGestureRecognizer:]
  -[SBHomeGestureInteraction indirectPanGestureRecognizer]
  -[SBHomeGestureInteraction setIndirectPanGestureRecognizer:]
  -[SBHomeGestureInteraction scrunchGestureRecognizer]
  -[SBHomeGestureInteraction setScrunchGestureRecognizer:]


SBTopAffordanceDotView : UIView
 @property  BOOL expanded
 @property  BOOL highlighted

  // class methods
  +[SBTopAffordanceDotView layerClass]
  +[SBTopAffordanceDotView darkHighlightedColorMatrix]
  +[SBTopAffordanceDotView darkDefaultColorMatrix]
  +[SBTopAffordanceDotView lightHighlightedColorMatrix]
  +[SBTopAffordanceDotView lightDefaultColorMatrix]

  // instance methods
  -[SBTopAffordanceDotView setHighlighted:]
  -[SBTopAffordanceDotView isExpanded]
  -[SBTopAffordanceDotView traitCollectionDidChange:]
  -[SBTopAffordanceDotView .cxx_destruct]
  -[SBTopAffordanceDotView _shouldAnimatePropertyWithKey:]
  -[SBTopAffordanceDotView isHighlighted]
  -[SBTopAffordanceDotView _backdropLayer]
  -[SBTopAffordanceDotView initWithFrame:]
  -[SBTopAffordanceDotView setExpanded:]
  -[SBTopAffordanceDotView _makeBackdropLayerFilters]
  -[SBTopAffordanceDotView _updateBackdropLayerFilters]
  -[SBTopAffordanceDotView _effectiveColorMatrix]


SBInteractiveScreenshotGestureCropsView : UIView
 @property  double cornerAlpha
 @property  double cornerEdgeLength
 @property  UIColor *cornerColor
 @property  double lineGrabberAlpha
 @property  double lineGrabberEdgeLength
 @property  UIColor *lineGrabberColor
 @property  double grabberLineWidth
 @property  double lineAlpha
 @property  double lineWidth
 @property  UIColor *lineColor
 @property  id cropsCompositingFilter

  // instance methods
  -[SBInteractiveScreenshotGestureCropsView setLineWidth:]
  -[SBInteractiveScreenshotGestureCropsView _setPresentationValue:forKey:]
  -[SBInteractiveScreenshotGestureCropsView traitCollectionDidChange:]
  -[SBInteractiveScreenshotGestureCropsView setLineColor:]
  -[SBInteractiveScreenshotGestureCropsView lineColor]
  -[SBInteractiveScreenshotGestureCropsView .cxx_destruct]
  -[SBInteractiveScreenshotGestureCropsView setFrame:]
  -[SBInteractiveScreenshotGestureCropsView layoutSubviews]
  -[SBInteractiveScreenshotGestureCropsView lineWidth]
  -[SBInteractiveScreenshotGestureCropsView initWithFrame:]
  -[SBInteractiveScreenshotGestureCropsView setBounds:]
  -[SBInteractiveScreenshotGestureCropsView _updateGeometryForBounds:shouldUsePresentationValues:]
  -[SBInteractiveScreenshotGestureCropsView _updateGeometryOrDeferLayoutUsingModelBounds]
  -[SBInteractiveScreenshotGestureCropsView setCornerAlpha:]
  -[SBInteractiveScreenshotGestureCropsView setCornerColor:]
  -[SBInteractiveScreenshotGestureCropsView setCropsCompositingFilter:]
  -[SBInteractiveScreenshotGestureCropsView setCornerEdgeLength:]
  -[SBInteractiveScreenshotGestureCropsView setGrabberLineWidth:]
  -[SBInteractiveScreenshotGestureCropsView setLineAlpha:]
  -[SBInteractiveScreenshotGestureCropsView setLineGrabberAlpha:]
  -[SBInteractiveScreenshotGestureCropsView setLineGrabberColor:]
  -[SBInteractiveScreenshotGestureCropsView setLineGrabberEdgeLength:]
  -[SBInteractiveScreenshotGestureCropsView cornerAlpha]
  -[SBInteractiveScreenshotGestureCropsView cornerEdgeLength]
  -[SBInteractiveScreenshotGestureCropsView cornerColor]
  -[SBInteractiveScreenshotGestureCropsView lineGrabberAlpha]
  -[SBInteractiveScreenshotGestureCropsView lineGrabberEdgeLength]
  -[SBInteractiveScreenshotGestureCropsView lineGrabberColor]
  -[SBInteractiveScreenshotGestureCropsView grabberLineWidth]
  -[SBInteractiveScreenshotGestureCropsView lineAlpha]
  -[SBInteractiveScreenshotGestureCropsView cropsCompositingFilter]


SBWidgetMetricsServer : NSObject <BSServiceConnectionListenerDelegate, SBSWidgetMetricsServiceServerInterface>
 @property  NSMutableArray *connections
 @property  FBServiceClientAuthenticator *authenticator
 @property  BSServiceConnectionListener *listener
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <SBSWidgetMetricsProviding> *systemMetricsProvider
 @property  <SBSWidgetMetricsProviding> *lockScreenMetricsProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWidgetMetricsServer authenticator]
  -[SBWidgetMetricsServer listener:didReceiveConnection:withContext:]
  -[SBWidgetMetricsServer .cxx_destruct]
  -[SBWidgetMetricsServer init]
  -[SBWidgetMetricsServer listener]
  -[SBWidgetMetricsServer connections]
  -[SBWidgetMetricsServer previewMetricsSpecificationForBundleIdentifier:]
  -[SBWidgetMetricsServer previewMetricsSpecificationForDeviceContext:displayContext:bundleIdentifier:]
  -[SBWidgetMetricsServer systemMetricsForWidget:]
  -[SBWidgetMetricsServer queue]
  -[SBWidgetMetricsServer dealloc]
  -[SBWidgetMetricsServer initWithSystemMetricsProvider:lockScreenMetricsProvider:]
  -[SBWidgetMetricsServer lockScreenMetricsProvider]
  -[SBWidgetMetricsServer systemMetricsProvider]
  -[SBWidgetMetricsServer _metricsProviderForWidget:]


SBAnimatablePropertyChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBAnimatablePropertyChangedSwitcherModifierEvent type]


SBFluidSwitcherMultipleWindowsIndicatorView : UIImageView <UIPointerInteractionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherMultipleWindowsIndicatorView pointerInteraction:styleForRegion:]
  -[SBFluidSwitcherMultipleWindowsIndicatorView .cxx_destruct]
  -[SBFluidSwitcherMultipleWindowsIndicatorView initWithFrame:]
  -[SBFluidSwitcherMultipleWindowsIndicatorView pointInside:withEvent:]
  -[SBFluidSwitcherMultipleWindowsIndicatorView pointerInteraction:regionForRequest:defaultRegion:]
  -[SBFluidSwitcherMultipleWindowsIndicatorView _hitTestBounds]


SBFluidSwitcherButton : UIControl <UIPointerInteractionDelegate>
 @property  UIImage *image
 @property  {UIEdgeInsets=dddd} extendedEdgeInsets
 @property  NSString *backdropGroupName
 @property  long long buttonStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherButton setHighlighted:]
  -[SBFluidSwitcherButton setBackdropGroupName:]
  -[SBFluidSwitcherButton pointerInteraction:styleForRegion:]
  -[SBFluidSwitcherButton didMoveToSuperview]
  -[SBFluidSwitcherButton image]
  -[SBFluidSwitcherButton .cxx_destruct]
  -[SBFluidSwitcherButton _backgroundMaterialView]
  -[SBFluidSwitcherButton layoutSubviews]
  -[SBFluidSwitcherButton buttonStyle]
  -[SBFluidSwitcherButton setButtonStyle:]
  -[SBFluidSwitcherButton _addHighlightViewIfNecessary]
  -[SBFluidSwitcherButton gestureRecognizerShouldBegin:]
  -[SBFluidSwitcherButton backdropGroupName]
  -[SBFluidSwitcherButton initWithFrame:]
  -[SBFluidSwitcherButton pointInside:withEvent:]
  -[SBFluidSwitcherButton setImage:]
  -[SBFluidSwitcherButton pointerInteraction:regionForRequest:defaultRegion:]
  -[SBFluidSwitcherButton _invalidateBackgroundView]
  -[SBFluidSwitcherButton setExtendedEdgeInsets:]
  -[SBFluidSwitcherButton _invalidateXPlusDView]
  -[SBFluidSwitcherButton _configureGlyphImageViewIfNecessaryForStyle:]
  -[SBFluidSwitcherButton _configureXPlusDViewIfNecessaryForStyle:]
  -[SBFluidSwitcherButton _configureBackgroundViewIfNecessaryForStyle:]
  -[SBFluidSwitcherButton extendedEdgeInsets]


SBFluidSwitcherTitledButton : SBFluidSwitcherButton
 @property  NSString *title

  // instance methods
  -[SBFluidSwitcherTitledButton setTitle:]
  -[SBFluidSwitcherTitledButton .cxx_destruct]
  -[SBFluidSwitcherTitledButton sizeThatFits:]
  -[SBFluidSwitcherTitledButton title]


SBTransientOverlayDismissAllToAppsWorkspaceTransaction : SBToAppsWorkspaceTransaction
  // instance methods
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _didComplete]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _begin]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _canBeInterrupted]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _logForInterruptAttemptReason:]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _shouldAnimateTransition]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _performDismissal]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction .cxx_destruct]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _handleDismissOverlaysCompletion]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _setupAnimation]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _shouldResignActiveForAnimation]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction initWithTransitionRequest:]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _shouldUseSwitcherDismissalAnimationForTransientOverlayViewController:]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _concurrentOverlayDismissalOptions]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction dealloc]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _serialOverlayPreDismissalOptions]


SBHomeHardwareButtonActions : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonGestureParametersObserver>
 @property  BOOL buttonDown
 @property  double currentLongPressDuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeHardwareButtonActions performLongPressCancelledActions]
  -[SBHomeHardwareButtonActions initWitHomeButtonType:]
  -[SBHomeHardwareButtonActions isButtonDown]
  -[SBHomeHardwareButtonActions performFinalButtonUpActions]
  -[SBHomeHardwareButtonActions .cxx_destruct]
  -[SBHomeHardwareButtonActions provider:didUpdateButtonGestureParameters:]
  -[SBHomeHardwareButtonActions performInitialButtonDownActions]
  -[SBHomeHardwareButtonActions configureForwardingToLockButtonActions:]
  -[SBHomeHardwareButtonActions setButtonDown:]
  -[SBHomeHardwareButtonActions _performButtonPreflightActions]
  -[SBHomeHardwareButtonActions performAfterMenuButtonUpIsHandledUsingBlock:]
  -[SBHomeHardwareButtonActions performSinglePressUpActionsWithSourceType:]
  -[SBHomeHardwareButtonActions hardwareButtonGestureParameters]
  -[SBHomeHardwareButtonActions currentLongPressDuration]
  -[SBHomeHardwareButtonActions performDoublePressDownActions]
  -[SBHomeHardwareButtonActions performDoubleTapUpActions]
  -[SBHomeHardwareButtonActions _shouldIgnorePressesDueToProxOrIdle:]
  -[SBHomeHardwareButtonActions performLongPressActions]
  -[SBHomeHardwareButtonActions performWhenMenuButtonIsUpUsingBlock:]
  -[SBHomeHardwareButtonActions performTriplePressUpActions]
  -[SBHomeHardwareButtonActions performInitialButtonUpActions]
  -[SBHomeHardwareButtonActions _logMenuButtonHoldTime]
  -[SBHomeHardwareButtonActions performSinglePressUpActions]
  -[SBHomeHardwareButtonActions setCurrentLongPressDuration:]


SBHomeGrabberSettingsChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBHomeGrabberSettingsChangedSwitcherModifierEvent type]


SBScrollSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  {CGPoint=dd} contentOffset
 @property  unsigned long phase
 @property  BOOL userInitiated

  // instance methods
  -[SBScrollSwitcherModifierEvent setUserInitiated:]
  -[SBScrollSwitcherModifierEvent setContentOffset:]
  -[SBScrollSwitcherModifierEvent phase]
  -[SBScrollSwitcherModifierEvent contentOffset]
  -[SBScrollSwitcherModifierEvent setPhase:]
  -[SBScrollSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBScrollSwitcherModifierEvent type]
  -[SBScrollSwitcherModifierEvent copyWithZone:]
  -[SBScrollSwitcherModifierEvent initWithContentOffset:phase:userInitiated:]
  -[SBScrollSwitcherModifierEvent isUserInitiated]


SBHitTestExtendedView : UIView
 @property  BOOL hitTestsSubviewsOutsideBounds

  // instance methods
  -[SBHitTestExtendedView initWithFrame:]
  -[SBHitTestExtendedView pointInside:withEvent:]
  -[SBHitTestExtendedView hitTestsSubviewsOutsideBounds]
  -[SBHitTestExtendedView setHitTestsSubviewsOutsideBounds:]


SBPIPSceneContentSceneUpdateWorkspaceTransaction : SBMainWorkspaceTransaction
  // instance methods
  -[SBPIPSceneContentSceneUpdateWorkspaceTransaction _didComplete]
  -[SBPIPSceneContentSceneUpdateWorkspaceTransaction _begin]
  -[SBPIPSceneContentSceneUpdateWorkspaceTransaction .cxx_destruct]
  -[SBPIPSceneContentSceneUpdateWorkspaceTransaction initWithApplicationSceneEntity:transitionRequest:]


SBFullScreenAppLayoutSwitcherModifier : SBSwitcherModifier
 @property  NSUUID *homeAffordanceReuseIdentifier

  // instance methods
  -[SBFullScreenAppLayoutSwitcherModifier .cxx_destruct]
  -[SBFullScreenAppLayoutSwitcherModifier setHomeAffordanceReuseIdentifier:]
  -[SBFullScreenAppLayoutSwitcherModifier initWithActiveAppLayout:]
  -[SBFullScreenAppLayoutSwitcherModifier homeAffordanceReuseIdentifier]
  -[SBFullScreenAppLayoutSwitcherModifier initWithActiveAppLayout:homeAffordanceReuseIdentifier:]


_SBFullScreenAppFloorSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutsToResignActive]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[_SBFullScreenAppFloorSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[_SBFullScreenAppFloorSwitcherModifier visibleShelves]
  -[_SBFullScreenAppFloorSwitcherModifier backgroundOpacityForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isContainerStatusBarVisible]
  -[_SBFullScreenAppFloorSwitcherModifier wantsDockWindowLevelAssertion]
  -[_SBFullScreenAppFloorSwitcherModifier plusButtonAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[_SBFullScreenAppFloorSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenDimmingAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[_SBFullScreenAppFloorSwitcherModifier dockWindowLevel]
  -[_SBFullScreenAppFloorSwitcherModifier wantsDockBehaviorAssertion]
  -[_SBFullScreenAppFloorSwitcherModifier slideOverTongueDirection]
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenBackdropBlurType]
  -[_SBFullScreenAppFloorSwitcherModifier frameForShelf:]
  -[_SBFullScreenAppFloorSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isHomeAffordanceSupportedForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[_SBFullScreenAppFloorSwitcherModifier plusButtonStyle]
  -[_SBFullScreenAppFloorSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier titleOpacityForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier shouldScrollViewBlockTouches]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[_SBFullScreenAppFloorSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[_SBFullScreenAppFloorSwitcherModifier wallpaperScale]
  -[_SBFullScreenAppFloorSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier wantsSlideOverTongue]
  -[_SBFullScreenAppFloorSwitcherModifier rotationAngleForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier slideOverTongueState]
  -[_SBFullScreenAppFloorSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenScale]
  -[_SBFullScreenAppFloorSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[_SBFullScreenAppFloorSwitcherModifier switcherBackdropBlurProgress]
  -[_SBFullScreenAppFloorSwitcherModifier shelfBackgroundBlurOpacity]
  -[_SBFullScreenAppFloorSwitcherModifier wantsSwitcherBackdropBlur]
  -[_SBFullScreenAppFloorSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier transactionCompletionOptions]
  -[_SBFullScreenAppFloorSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[_SBFullScreenAppFloorSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[_SBFullScreenAppFloorSwitcherModifier shelfBackgroundBlurFrame]
  -[_SBFullScreenAppFloorSwitcherModifier reopenClosedWindowsButtonScale]
  -[_SBFullScreenAppFloorSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[_SBFullScreenAppFloorSwitcherModifier wantsSwitcherDimmingView]
  -[_SBFullScreenAppFloorSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier dockProgress]
  -[_SBFullScreenAppFloorSwitcherModifier shadowOffsetForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier keyboardSuppressionMode]
  -[_SBFullScreenAppFloorSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[_SBFullScreenAppFloorSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier lighteningAlphaForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier titleAndIconOpacityForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isScrollEnabled]
  -[_SBFullScreenAppFloorSwitcherModifier isHomeScreenContentRequired]
  -[_SBFullScreenAppFloorSwitcherModifier dockWindowLevelPriority]
  -[_SBFullScreenAppFloorSwitcherModifier containerLeafAppLayoutForShelf:]
  -[_SBFullScreenAppFloorSwitcherModifier headerStyleForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[_SBFullScreenAppFloorSwitcherModifier neighboringAppLayoutsForFocusedAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier containerStatusBarAnimationDuration]
  -[_SBFullScreenAppFloorSwitcherModifier animationAttributesForLayoutElement:]
  -[_SBFullScreenAppFloorSwitcherModifier isFocusEnabledForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier switcherBackdropBlurType]
  -[_SBFullScreenAppFloorSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier switcherDimmingViewBlocksTouches]
  -[_SBFullScreenAppFloorSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[_SBFullScreenAppFloorSwitcherModifier scaleForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenBackdropBlurProgress]
  -[_SBFullScreenAppFloorSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isIndexRubberbandableForSwipeToKill:]
  -[_SBFullScreenAppFloorSwitcherModifier handleTapAppLayoutEvent:]
  -[_SBFullScreenAppFloorSwitcherModifier switcherDimmingAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier dockUpdateMode]
  -[_SBFullScreenAppFloorSwitcherModifier frameForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier tintStyleForLayoutRole:inAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier wantsHomeScreenPointerInteractions]
  -[_SBFullScreenAppFloorSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier blurViewIconScaleForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isWallpaperRequiredForSwitcher]
  -[_SBFullScreenAppFloorSwitcherModifier visibleAppLayouts]
  -[_SBFullScreenAppFloorSwitcherModifier .cxx_destruct]
  -[_SBFullScreenAppFloorSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[_SBFullScreenAppFloorSwitcherModifier isSwitcherWindowVisible]
  -[_SBFullScreenAppFloorSwitcherModifier contentViewScale]
  -[_SBFullScreenAppFloorSwitcherModifier hiddenContentStatusBarPartsForLayoutRole:inAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier wallpaperStyle]
  -[_SBFullScreenAppFloorSwitcherModifier cornerRadiiForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutsToCacheSnapshots]
  -[_SBFullScreenAppFloorSwitcherModifier maskedCornersForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[_SBFullScreenAppFloorSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier topMostLayoutElements]
  -[_SBFullScreenAppFloorSwitcherModifier shouldSuppressHighlightEffectForLayoutRole:inAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier initWithActiveAppLayout:homeAffordanceReuseIdentifier:]
  -[_SBFullScreenAppFloorSwitcherModifier preferredAppLayoutToReuseAccessoryForAppLayout:fromAppLayouts:]
  -[_SBFullScreenAppFloorSwitcherModifier _isLayoutRoleBehindCenterWindow:appLayout:]


SBApplicationMultiwindowService : NSObject <SBApplicationServerMultiwindowDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationMultiwindowService sharedInstance]

  // instance methods
  -[SBApplicationMultiwindowService .cxx_destruct]
  -[SBApplicationMultiwindowService triggerShowAllWindowsForApplicationBundleIdentifier:]
  -[SBApplicationMultiwindowService init]
  -[SBApplicationMultiwindowService applicationServer:client:showAllWindowsForBundleIdentifier:]
  -[SBApplicationMultiwindowService applicationServer:client:requestShelfPresentationForSceneWithIdentifier:]


SBDataPlanFailureAlertItem : SBDataPlanAccountAlertItem
 @property  NSString *carrierName
 @property  BOOL newAccount

  // class methods
  +[SBDataPlanFailureAlertItem laterButtonTitle]
  +[SBDataPlanFailureAlertItem nowButtonTitle]

  // instance methods
  -[SBDataPlanFailureAlertItem carrierName]
  -[SBDataPlanFailureAlertItem .cxx_destruct]
  -[SBDataPlanFailureAlertItem setCarrierName:]
  -[SBDataPlanFailureAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanFailureAlertItem initWithAccountURL:carrierName:newAccount:]
  -[SBDataPlanFailureAlertItem setNewAccount:]
  -[SBDataPlanFailureAlertItem isNewAccount]


SBApplication32BitDeprecationAlertItem : SBAlertItem
 @property  SBApplication *associatedDisplay

  // instance methods
  -[SBApplication32BitDeprecationAlertItem _message]
  -[SBApplication32BitDeprecationAlertItem initWithApplication:]
  -[SBApplication32BitDeprecationAlertItem .cxx_destruct]
  -[SBApplication32BitDeprecationAlertItem associatedDisplay]
  -[SBApplication32BitDeprecationAlertItem _title]
  -[SBApplication32BitDeprecationAlertItem shouldShowInLockScreen]
  -[SBApplication32BitDeprecationAlertItem setAssociatedDisplay:]
  -[SBApplication32BitDeprecationAlertItem dismissOnLock]
  -[SBApplication32BitDeprecationAlertItem configure:requirePasscodeForActions:]
  -[SBApplication32BitDeprecationAlertItem forcesModalAlertAppearance]


SBButtonConsumerClient : NSObject
 @property  <FBSServiceFacilityClientHandle> *systemServiceClient
 @property  BOOL entitledToConsumeButtonsInBackground
 @property  BOOL application
 @property  BOOL runningVisible
 @property  BOOL suspended
 @property  BOOL canReceiveEvents
 @property  NSMutableSet *registrations

  // instance methods
  -[SBButtonConsumerClient setSuspended:]
  -[SBButtonConsumerClient registrations]
  -[SBButtonConsumerClient setRegistrations:]
  -[SBButtonConsumerClient .cxx_destruct]
  -[SBButtonConsumerClient isEqual:]
  -[SBButtonConsumerClient setApplication:]
  -[SBButtonConsumerClient canReceiveEvents]
  -[SBButtonConsumerClient isApplication]
  -[SBButtonConsumerClient isSuspended]
  -[SBButtonConsumerClient systemServiceClient]
  -[SBButtonConsumerClient setSystemServiceClient:]
  -[SBButtonConsumerClient isEntitledToConsumeButtonsInBackground]
  -[SBButtonConsumerClient setEntitledToConsumeButtonsInBackground:]
  -[SBButtonConsumerClient isRunningVisible]
  -[SBButtonConsumerClient setRunningVisible:]


SBButtonConsumerRegistration : NSObject
 @property  SBButtonConsumerClient *client
 @property  long long buttonKind
 @property  unsigned long eventMask
 @property  long long eventPriority

  // instance methods
  -[SBButtonConsumerRegistration setButtonKind:]
  -[SBButtonConsumerRegistration eventPriority]
  -[SBButtonConsumerRegistration setEventPriority:]
  -[SBButtonConsumerRegistration eventMask]
  -[SBButtonConsumerRegistration .cxx_destruct]
  -[SBButtonConsumerRegistration setClient:]
  -[SBButtonConsumerRegistration isEqual:]
  -[SBButtonConsumerRegistration client]
  -[SBButtonConsumerRegistration buttonKind]
  -[SBButtonConsumerRegistration setEventMask:]


SBHardwareButtonService : NSObject <SBSystemServiceServerHardwareButtonDelegate>
 @property  BSMutableIntegerMap *registrationsByButtonKind
 @property  BSMutableIntegerMap *clientsByPID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHardwareButtonService sharedInstance]

  // instance methods
  -[SBHardwareButtonService consumeLockButtonDoublePressUpWithPriority:]
  -[SBHardwareButtonService _mutableRegistrationsForButtonKind:]
  -[SBHardwareButtonService _mutableRegistrationsForButtonKind:createIfNecessary:]
  -[SBHardwareButtonService consumeHeadsetPlayPauseSinglePressUpWithPriority:]
  -[SBHardwareButtonService _registrationsForButtonKind:]
  -[SBHardwareButtonService consumeHomeButtonLongPressWithPriority:]
  -[SBHardwareButtonService _sendEvent:buttonKind:withPriority:]
  -[SBHardwareButtonService systemServiceServer:clientDidDisconnect:]
  -[SBHardwareButtonService systemServiceServer:client:setEventMask:buttonKind:priority:]
  -[SBHardwareButtonService setRegistrationsByButtonKind:]
  -[SBHardwareButtonService _reconfigureProcessMonitorForPredicates:]
  -[SBHardwareButtonService .cxx_destruct]
  -[SBHardwareButtonService _addRegistration:toClient:]
  -[SBHardwareButtonService systemServiceServer:client:acquireAssertionOfType:forReason:withCompletion:]
  -[SBHardwareButtonService hasConsumersForHomeButtonSinglePress]
  -[SBHardwareButtonService clientsByPID]
  -[SBHardwareButtonService consumeLockButtonLongPressWithPriority:]
  -[SBHardwareButtonService consumeHeadsetPlayPauseSinglePressDownWithPriority:continuation:]
  -[SBHardwareButtonService _removeRegistration:fromClient:]
  -[SBHardwareButtonService init]
  -[SBHardwareButtonService hasConsumersForLockButtonPresses]
  -[SBHardwareButtonService hasConsumersForLockButtonDoublePressUp]
  -[SBHardwareButtonService _sendEvent:buttonKind:withPriority:continuation:]
  -[SBHardwareButtonService consumeHomeButtonDoublePressDownWithPriority:]
  -[SBHardwareButtonService consumeRingerSwitchToggleStateOnWithPriority:]
  -[SBHardwareButtonService _performButtonRegistrationChangeAndNotifyObservers:]
  -[SBHardwareButtonService addObserver:]
  -[SBHardwareButtonService systemServiceServer:client:setHapticType:buttonKind:]
  -[SBHardwareButtonService consumeRingerSwitchToggleStateOffWithPriority:]
  -[SBHardwareButtonService _process:stateDidUpdate:]
  -[SBHardwareButtonService consumeHomeButtonSinglePressUpWithPriority:]
  -[SBHardwareButtonService hasConsumersForHomeButtonPresses]
  -[SBHardwareButtonService _sendXPCMessageForEvent:buttonKind:priority:toClient:]
  -[SBHardwareButtonService consumeVolumeDecreaseButtonSinglePressUpWithPriority:]
  -[SBHardwareButtonService _applicationForClientInfo:]
  -[SBHardwareButtonService consumeHomeButtonTriplePressUpWithPriority:]
  -[SBHardwareButtonService registrationsByButtonKind]
  -[SBHardwareButtonService consumeVolumeIncreaseButtonSinglePressDownWithPriority:continuation:]
  -[SBHardwareButtonService _init]
  -[SBHardwareButtonService consumeVolumeIncreaseButtonSinglePressUpWithPriority:]
  -[SBHardwareButtonService _initWithSystemServiceServer:]
  -[SBHardwareButtonService _updateEventMasksForButtonKind:]
  -[SBHardwareButtonService _setSystemServiceClient:buttonKind:eventMask:priority:]
  -[SBHardwareButtonService _updateAllButtonEventMasks]
  -[SBHardwareButtonService setClientsByPID:]
  -[SBHardwareButtonService systemServiceServer:client:requestsHIDEvents:token:forButtonKind:]
  -[SBHardwareButtonService _reconfigureProcessMonitor]
  -[SBHardwareButtonService systemServiceServer:client:fetchHapticTypeForButtonKind:completion:]
  -[SBHardwareButtonService consumeLockButtonSinglePressUpWithPriority:]
  -[SBHardwareButtonService consumeVolumeDecreaseButtonSinglePressDownWithPriority:continuation:]


SBIdleTimerAggregateClientConfiguration : NSObject <BSDescriptionProviding>
 @property  SBIdleTimerConfigurationDisablesTimerSetting *disableTimerSetting
 @property  SBIdleTimerTimeoutPrecedenceSettings *minExpirationTimeoutSettings
 @property  SBIdleTimerTimeoutPrecedenceSettings *maxExpirationTimeoutSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerAggregateClientConfiguration .cxx_destruct]
  -[SBIdleTimerAggregateClientConfiguration succinctDescriptionBuilder]
  -[SBIdleTimerAggregateClientConfiguration descriptionBuilderWithMultilinePrefix:]
  -[SBIdleTimerAggregateClientConfiguration descriptionWithMultilinePrefix:]
  -[SBIdleTimerAggregateClientConfiguration succinctDescription]
  -[SBIdleTimerAggregateClientConfiguration disableTimerSetting]
  -[SBIdleTimerAggregateClientConfiguration maxExpirationTimeoutSettings]
  -[SBIdleTimerAggregateClientConfiguration minExpirationTimeoutSettings]
  -[SBIdleTimerAggregateClientConfiguration resolvedExpirationTimeoutRange]
  -[SBIdleTimerAggregateClientConfiguration setMinExpirationTimeout:withPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration setMaxExpirationTimeout:withPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration expirationTimeoutIntervalRangeForPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration setDisablesTimerWithPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration setMinExpirationTimeout:ifGreatestForPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration setMaxExpirationTimeout:ifLeastForPrecedence:]


SBIdleTimerConfigurationDisablesTimerSetting : NSObject <BSDescriptionProviding>
 @property  unsigned long precedence
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerConfigurationDisablesTimerSetting precedence]
  -[SBIdleTimerConfigurationDisablesTimerSetting succinctDescriptionBuilder]
  -[SBIdleTimerConfigurationDisablesTimerSetting descriptionBuilderWithMultilinePrefix:]
  -[SBIdleTimerConfigurationDisablesTimerSetting descriptionWithMultilinePrefix:]
  -[SBIdleTimerConfigurationDisablesTimerSetting succinctDescription]
  -[SBIdleTimerConfigurationDisablesTimerSetting initWithPrecedence:]


SBIdleTimerTimeoutPrecedenceSettings : NSObject <BSDescriptionProviding>
 @property  double normalTimeout
 @property  double highTimeout
 @property  double criticalTimeout
 @property  unsigned long highestPrecedence
 @property  double leastTimeout
 @property  double greatestTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerTimeoutPrecedenceSettings succinctDescriptionBuilder]
  -[SBIdleTimerTimeoutPrecedenceSettings descriptionBuilderWithMultilinePrefix:]
  -[SBIdleTimerTimeoutPrecedenceSettings descriptionWithMultilinePrefix:]
  -[SBIdleTimerTimeoutPrecedenceSettings succinctDescription]
  -[SBIdleTimerTimeoutPrecedenceSettings highestPrecedence]
  -[SBIdleTimerTimeoutPrecedenceSettings _setTimeout:withPrecedence:]
  -[SBIdleTimerTimeoutPrecedenceSettings _setTimeout:ifGreatestForPrecedence:]
  -[SBIdleTimerTimeoutPrecedenceSettings _setTimeout:ifLeastForPrecedence:]
  -[SBIdleTimerTimeoutPrecedenceSettings _intervalForPrecedence:]
  -[SBIdleTimerTimeoutPrecedenceSettings leastTimeout]
  -[SBIdleTimerTimeoutPrecedenceSettings greatestTimeout]
  -[SBIdleTimerTimeoutPrecedenceSettings normalTimeout]
  -[SBIdleTimerTimeoutPrecedenceSettings highTimeout]
  -[SBIdleTimerTimeoutPrecedenceSettings criticalTimeout]


SBIdleTimerTimeoutRange : NSObject <BSDescriptionProviding>
 @property  double lowerTimeout
 @property  double upperTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerTimeoutRange succinctDescriptionBuilder]
  -[SBIdleTimerTimeoutRange descriptionBuilderWithMultilinePrefix:]
  -[SBIdleTimerTimeoutRange descriptionWithMultilinePrefix:]
  -[SBIdleTimerTimeoutRange succinctDescription]
  -[SBIdleTimerTimeoutRange intersects:]
  -[SBIdleTimerTimeoutRange lowerTimeout]
  -[SBIdleTimerTimeoutRange upperTimeout]
  -[SBIdleTimerTimeoutRange initWithLowerTimeout:upperTimeout:]
  -[SBIdleTimerTimeoutRange clippedRangeWithFavoredRange:]


SBAutoUnlockComposableRule : NSObject <SBAutoUnlockRule>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAutoUnlockComposableRule .cxx_destruct]
  -[SBAutoUnlockComposableRule init]
  -[SBAutoUnlockComposableRule shouldAutoUnlockForSource:]
  -[SBAutoUnlockComposableRule addAutoUnlockRule:]
  -[SBAutoUnlockComposableRule removeAutoUnlockRule:]


SBOverridePresentationValueSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBOverridePresentationValueSwitcherModifier .cxx_destruct]
  -[SBOverridePresentationValueSwitcherModifier presentationValueForAnimatableProperty:]
  -[SBOverridePresentationValueSwitcherModifier initWithAnimatablePropertyKeys:presentationValue:]


SBPBDisplayItem : PBCodable <NSCopying>
  // instance methods
  -[SBPBDisplayItem .cxx_destruct]
  -[SBPBDisplayItem dictionaryRepresentation]
  -[SBPBDisplayItem writeTo:]
  -[SBPBDisplayItem isEqual:]
  -[SBPBDisplayItem readFrom:]
  -[SBPBDisplayItem copyWithZone:]


SBHomeGestureFinalDestinationSwitcherModifier : SBSwitcherModifier
 @property  long long currentFinalDestination
 @property  NSString *finalDestinationReason
 @property  BOOL hasSeenAccelerationDipForAppSwitcher

  // instance methods
  -[SBHomeGestureFinalDestinationSwitcherModifier .cxx_destruct]
  -[SBHomeGestureFinalDestinationSwitcherModifier didMoveToParentModifier:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _applyPrototypeSettings]
  -[SBHomeGestureFinalDestinationSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier studyLogData]
  -[SBHomeGestureFinalDestinationSwitcherModifier handleGestureEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier initWithDelegate:initialTranslationAdjustment:startingEnvironmentMode:continuingGesture:dockModifier:]
  -[SBHomeGestureFinalDestinationSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateGestureTranslationVelocityAndProgressWithEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _isTranslationPastDistanceThresholdToUnconditionallyGoHome:]
  -[SBHomeGestureFinalDestinationSwitcherModifier currentFinalDestination]
  -[SBHomeGestureFinalDestinationSwitcherModifier finalDestinationReason]
  -[SBHomeGestureFinalDestinationSwitcherModifier hasSeenAccelerationDipForAppSwitcher]
  -[SBHomeGestureFinalDestinationSwitcherModifier _hasTraveledSufficientDistanceForHomeOrAppSwitcher]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateAdaptiveThresholdsForCurrentFinalDestination:velocityAverage:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _adjustedFinalDestinationAccountingForEdgeDataDistortion:location:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _unconditionalDistanceThresholdForHome]


SBAnyTopAffordanceInteractionMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  BOOL hasSentEvent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAnyTopAffordanceInteractionMetric handleEvent:withContext:]
  -[SBAnyTopAffordanceInteractionMetric hasSentEvent]
  -[SBAnyTopAffordanceInteractionMetric setHasSentEvent:]


SBInCallTransientOverlayViewController : SBTransientOverlayViewController <SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneStatusBarStateObserver, SBIdleTimerCoordinating, BSInvalidatable>
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  <SBInCallTransientOverlayViewControllerDelegate> *delegate
 @property  BOOL shouldIgnoreHomeIndicatorAutoHiddenClientSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallTransientOverlayViewController preferredStatusBarStyle]
  -[SBInCallTransientOverlayViewController preferredWhitePointAdaptivityStyle]
  -[SBInCallTransientOverlayViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBInCallTransientOverlayViewController prefersHomeIndicatorAutoHidden]
  -[SBInCallTransientOverlayViewController prefersStatusBarHidden]
  -[SBInCallTransientOverlayViewController initWithSceneHandle:]
  -[SBInCallTransientOverlayViewController setContainerOrientation:]
  -[SBInCallTransientOverlayViewController idleTimerProvider:didProposeBehavior:forReason:]
  -[SBInCallTransientOverlayViewController setIdleTimerCoordinator:]
  -[SBInCallTransientOverlayViewController handleVolumeUpButtonPress]
  -[SBInCallTransientOverlayViewController sceneHandle]
  -[SBInCallTransientOverlayViewController handleHomeButtonPress]
  -[SBInCallTransientOverlayViewController handleLockButtonPress]
  -[SBInCallTransientOverlayViewController handleVolumeDownButtonPress]
  -[SBInCallTransientOverlayViewController handleHeadsetButtonPress:]
  -[SBInCallTransientOverlayViewController sceneWithIdentifier:didChangeStatusBarAlphaTo:]
  -[SBInCallTransientOverlayViewController .cxx_destruct]
  -[SBInCallTransientOverlayViewController viewDidLoad]
  -[SBInCallTransientOverlayViewController canResignFirstResponder]
  -[SBInCallTransientOverlayViewController succinctDescriptionBuilder]
  -[SBInCallTransientOverlayViewController canBecomeFirstResponder]
  -[SBInCallTransientOverlayViewController sceneWithIdentifier:didChangeStatusBarStyleOverridesToSuppressTo:]
  -[SBInCallTransientOverlayViewController setDelegate:]
  -[SBInCallTransientOverlayViewController viewDidAppear:]
  -[SBInCallTransientOverlayViewController sceneWithIdentifier:didChangeStatusBarHiddenTo:withAnimation:]
  -[SBInCallTransientOverlayViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBInCallTransientOverlayViewController viewWillDisappear:]
  -[SBInCallTransientOverlayViewController viewDidLayoutSubviews]
  -[SBInCallTransientOverlayViewController viewWillAppear:]
  -[SBInCallTransientOverlayViewController isContentOpaque]
  -[SBInCallTransientOverlayViewController delegate]
  -[SBInCallTransientOverlayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBInCallTransientOverlayViewController dealloc]
  -[SBInCallTransientOverlayViewController invalidate]
  -[SBInCallTransientOverlayViewController sceneWithIdentifier:didChangeStatusBarStyleTo:]
  -[SBInCallTransientOverlayViewController serviceProcessIdentifier]
  -[SBInCallTransientOverlayViewController supportedInterfaceOrientations]
  -[SBInCallTransientOverlayViewController viewDidDisappear:]
  -[SBInCallTransientOverlayViewController _canShowWhileLocked]
  -[SBInCallTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBInCallTransientOverlayViewController allowsStackingOverlayContentAbove]
  -[SBInCallTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBInCallTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBInCallTransientOverlayViewController _inCallSceneClientSettingsDiffInspector]
  -[SBInCallTransientOverlayViewController handleGestureDismissal]
  -[SBInCallTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBInCallTransientOverlayViewController preferredStatusBarStyleOverridesToCancel]
  -[SBInCallTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBInCallTransientOverlayViewController setShouldIgnoreHomeIndicatorAutoHiddenClientSettings:]
  -[SBInCallTransientOverlayViewController shouldIgnoreHomeIndicatorAutoHiddenClientSettings]
  -[SBInCallTransientOverlayViewController sceneDeactivationPredicate]
  -[SBInCallTransientOverlayViewController shouldUseSceneBasedKeyboardFocus]


_SBInCallProxySceneBackgroundView : UIView <SBApplicationSceneBackgroundView>
 @property  <SBApplicationSceneBackgroundView> *proxyTarget
 @property  BOOL fullscreen
 @property  long long wallpaperStyle
 @property  BOOL needsClassicModeBackground
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBInCallProxySceneBackgroundView isFullscreen]
  -[_SBInCallProxySceneBackgroundView setWallpaperStyle:]
  -[_SBInCallProxySceneBackgroundView setFullscreen:]
  -[_SBInCallProxySceneBackgroundView setShouldUseBrightMaterial:]
  -[_SBInCallProxySceneBackgroundView shouldUseBrightMaterial]
  -[_SBInCallProxySceneBackgroundView .cxx_destruct]
  -[_SBInCallProxySceneBackgroundView wallpaperStyle]
  -[_SBInCallProxySceneBackgroundView setNeedsClassicModeBackground:]
  -[_SBInCallProxySceneBackgroundView needsClassicModeBackground]
  -[_SBInCallProxySceneBackgroundView initWithFrame:proxyTarget:]
  -[_SBInCallProxySceneBackgroundView setProxyTarget:]
  -[_SBInCallProxySceneBackgroundView proxyTarget]


SBStartupTransitionController : NSObject <BSTransactionObserver, BSDescriptionProviding, BSTransactionObserver>
 @property  SBStartupTransitionFactory *transitionFactory
 @property  SBStartupTransitionContextPersistence *transitionContextPersistence
 @property  BSTransaction<SBStartupTransition> *startupTransition
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBStartupTransitionController _setTransitionFactory:]
  -[SBStartupTransitionController transactionDidComplete:]
  -[SBStartupTransitionController startupTransition]
  -[SBStartupTransitionController .cxx_destruct]
  -[SBStartupTransitionController succinctDescriptionBuilder]
  -[SBStartupTransitionController initializeAndRunStartupTransition:]
  -[SBStartupTransitionController _transitionContextPersistence]
  -[SBStartupTransitionController transactionDidBegin:]
  -[SBStartupTransitionController initWithInitialRestartState:]
  -[SBStartupTransitionController descriptionBuilderWithMultilinePrefix:]
  -[SBStartupTransitionController _transitionFactory]
  -[SBStartupTransitionController descriptionWithMultilinePrefix:]
  -[SBStartupTransitionController succinctDescription]
  -[SBStartupTransitionController _setTransitionContextPersistence:]
  -[SBStartupTransitionController _saveContextFromTransitionContext:]


SBFairPlayFamilyLeaveAlertItem : SBAlertItem
 @property  FBSApplicationInfo *appInfo

  // instance methods
  -[SBFairPlayFamilyLeaveAlertItem .cxx_destruct]
  -[SBFairPlayFamilyLeaveAlertItem dismissOnLock]
  -[SBFairPlayFamilyLeaveAlertItem appInfo]
  -[SBFairPlayFamilyLeaveAlertItem configure:requirePasscodeForActions:]
  -[SBFairPlayFamilyLeaveAlertItem setAppInfo:]
  -[SBFairPlayFamilyLeaveAlertItem initWithAppInfo:]


SBForcePressGestureStateTrackingSwitcherModifier : SBSwitcherModifier
 @property  {CGPoint=dd} velocity
 @property  {CGPoint=dd} averageVelocity
 @property  double panTranslationThreshold
 @property  double panProgress
 @property  double forceProgress
 @property  BOOL didBeginPanning
 @property  BOOL didPop

  // instance methods
  -[SBForcePressGestureStateTrackingSwitcherModifier averageVelocity]
  -[SBForcePressGestureStateTrackingSwitcherModifier .cxx_destruct]
  -[SBForcePressGestureStateTrackingSwitcherModifier didPop]
  -[SBForcePressGestureStateTrackingSwitcherModifier velocity]
  -[SBForcePressGestureStateTrackingSwitcherModifier handleGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _responseForActivatingFinalDestination:]
  -[SBForcePressGestureStateTrackingSwitcherModifier initWithSelectedAppLayout:]
  -[SBForcePressGestureStateTrackingSwitcherModifier panTranslationThreshold]
  -[SBForcePressGestureStateTrackingSwitcherModifier forceProgress]
  -[SBForcePressGestureStateTrackingSwitcherModifier didBeginPanning]
  -[SBForcePressGestureStateTrackingSwitcherModifier panProgress]
  -[SBForcePressGestureStateTrackingSwitcherModifier _updateForGestureDidBeginWithGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _updateForGestureDidChangeWithGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _updateForGestureDidEndWithGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _currentProgressForGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _updateForcePressTrackingWithGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _canCommitToSwitcherWithPanPercent:forceComplete:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _currentFinalDestination]
  -[SBForcePressGestureStateTrackingSwitcherModifier _projectedTranslationWithVelocity:initialTranslation:]


SBSlideOverPeekSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBSlideOverPeekSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBSlideOverPeekSwitcherModifier homeScreenDimmingAlpha]
  -[SBSlideOverPeekSwitcherModifier dockWindowLevel]
  -[SBSlideOverPeekSwitcherModifier wantsDockBehaviorAssertion]
  -[SBSlideOverPeekSwitcherModifier slideOverTongueDirection]
  -[SBSlideOverPeekSwitcherModifier homeScreenBackdropBlurType]
  -[SBSlideOverPeekSwitcherModifier homeScreenScale]
  -[SBSlideOverPeekSwitcherModifier homeScreenAlpha]
  -[SBSlideOverPeekSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[SBSlideOverPeekSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBSlideOverPeekSwitcherModifier dockProgress]
  -[SBSlideOverPeekSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[SBSlideOverPeekSwitcherModifier keyboardSuppressionMode]
  -[SBSlideOverPeekSwitcherModifier isHomeScreenContentRequired]
  -[SBSlideOverPeekSwitcherModifier dockWindowLevelPriority]
  -[SBSlideOverPeekSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBSlideOverPeekSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBSlideOverPeekSwitcherModifier handleTapAppLayoutEvent:]
  -[SBSlideOverPeekSwitcherModifier dockUpdateMode]
  -[SBSlideOverPeekSwitcherModifier frameForIndex:]
  -[SBSlideOverPeekSwitcherModifier wantsHomeScreenPointerInteractions]
  -[SBSlideOverPeekSwitcherModifier .cxx_destruct]
  -[SBSlideOverPeekSwitcherModifier wallpaperStyle]
  -[SBSlideOverPeekSwitcherModifier copyWithZone:]
  -[SBSlideOverPeekSwitcherModifier initWithAppLayout:peekConfiguration:environmentMode:fromFloatingConfiguration:]


SBWindowDragMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWindowDragMetric handleEvent:withContext:]


SBZoomableView : UIView
  // instance methods
  -[SBZoomableView _shouldAnimatePropertyWithKey:]


SBMedusaOrientationTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMedusaOrientationTestRecipe load]

  // instance methods
  -[SBMedusaOrientationTestRecipe title]
  -[SBMedusaOrientationTestRecipe handleVolumeIncrease]
  -[SBMedusaOrientationTestRecipe handleVolumeDecrease]


SBNewWindowRequestSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  NSString *bundleIdentifier

  // instance methods
  -[SBNewWindowRequestSwitcherEventResponse bundleIdentifier]
  -[SBNewWindowRequestSwitcherEventResponse .cxx_destruct]
  -[SBNewWindowRequestSwitcherEventResponse initWithBundleIdentifier:]
  -[SBNewWindowRequestSwitcherEventResponse type]


SBFluidSwitcherTouchPassThroughScrollView : UIScrollView
 @property  double velocityScaleFactor

  // class methods
  +[SBFluidSwitcherTouchPassThroughScrollView superclassRespondsToSetVelocityScaleFactor]
  +[SBFluidSwitcherTouchPassThroughScrollView superclassRespondsToVelocityScaleFactor]

  // instance methods
  -[SBFluidSwitcherTouchPassThroughScrollView hitTest:withEvent:]
  -[SBFluidSwitcherTouchPassThroughScrollView setVelocityScaleFactor:]
  -[SBFluidSwitcherTouchPassThroughScrollView velocityScaleFactor]


SBFluidSwitcherItemContainer : SBFTouchPassThroughClippingView <UIScrollViewDelegate, UIGestureRecognizerDelegate, SBFailureNotifyingTapGestureRecognizerDelegate, UIDragInteractionDelegate, SBAppSwitcherPageViewDelegate, SBAppPlatterDragSourceViewProviding>
 @property  BOOL highlightedFromDirectTouch
 @property  BOOL highlightedFromCursorHover
 @property  <SBFluidSwitcherItemContainerDelegate> *delegate
 @property  SBAppLayout *appLayout
 @property  UIView<SBAppSwitcherPageContentView> *contentView
 @property  BOOL contentViewHasSceneOverlay
 @property  {UIRectCornerRadii=dddd} contentCornerRadii
 @property  unsigned long maskedCorners
 @property  double contentPageViewScale
 @property  {CGSize=dd} sizeForContainingSpace
 @property  double unobscuredMargin
 @property  BOOL clipsToUnobscuredMargin
 @property  double dimmingAlpha
 @property  double wallpaperOverlayAlpha
 @property  double lighteningAlpha
 @property  BOOL selectable
 @property  unsigned long killAxis
 @property  BOOL killable
 @property  BOOL rubberbandable
 @property  BOOL focusable
 @property  BOOL draggable
 @property  BOOL lifted
 @property  BOOL suppressesHighlightEffect
 @property  BOOL supportsSwitcherDragAndDrop
 @property  double minimumTranslationForKillingContainer
 @property  BOOL shouldScaleOverlayToFillBounds
 @property  BOOL shouldUseBackgroundWallpaperTreatment
 @property  BOOL contentViewBlocksTouches
 @property  UIView *contentOverlay
 @property  double contentAlpha
 @property  double killingProgress
 @property  BOOL isDeceleratingTowardsKillZone
 @property  double effectivePageViewPresentationCornerRadius
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} effectivePageViewPresentationFrame
 @property  double shadowAlpha
 @property  double shadowOffset
 @property  long long shadowStyle
 @property  long long tintStyle
 @property  double blurViewIconScale
 @property  {CGPoint=dd} pageViewAnchorPoint
 @property  {CGPoint=dd} pageViewOffset
 @property  BOOL active
 @property  BOOL visible
 @property  BOOL pointerInteractionEnabled
 @property  BOOL positionAnimationsBeginFromModelState
 @property  BOOL transformAnimationsAreLegacyCounterRotations
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL dragging

  // class methods
  +[SBFluidSwitcherItemContainer layerClass]
  +[SBFluidSwitcherItemContainer preferredRestingVisibleMarginForBounds:]

  // instance methods
  -[SBFluidSwitcherItemContainer _updateShadowVisibility]
  -[SBFluidSwitcherItemContainer layer]
  -[SBFluidSwitcherItemContainer _handleHoverGesture:]
  -[SBFluidSwitcherItemContainer currentStatusBarHeight]
  -[SBFluidSwitcherItemContainer isSelectable]
  -[SBFluidSwitcherItemContainer _pageView]
  -[SBFluidSwitcherItemContainer isLifted]
  -[SBFluidSwitcherItemContainer _addPageView]
  -[SBFluidSwitcherItemContainer appLayout]
  -[SBFluidSwitcherItemContainer setContentCornerRadii:]
  -[SBFluidSwitcherItemContainer contentAlpha]
  -[SBFluidSwitcherItemContainer setSupportsSwitcherDragAndDrop:]
  -[SBFluidSwitcherItemContainer setLighteningAlpha:]
  -[SBFluidSwitcherItemContainer contentViewHasSceneOverlay]
  -[SBFluidSwitcherItemContainer wallpaperOverlayAlpha]
  -[SBFluidSwitcherItemContainer setDragging:]
  -[SBFluidSwitcherItemContainer supportsSwitcherDragAndDrop]
  -[SBFluidSwitcherItemContainer setContentAlpha:]
  -[SBFluidSwitcherItemContainer setShadowStyle:]
  -[SBFluidSwitcherItemContainer positionAnimationsBeginFromModelState]
  -[SBFluidSwitcherItemContainer setAppLayout:]
  -[SBFluidSwitcherItemContainer initWithCoder:]
  -[SBFluidSwitcherItemContainer dimmingAlpha]
  -[SBFluidSwitcherItemContainer setShouldUseBackgroundWallpaperTreatment:]
  -[SBFluidSwitcherItemContainer contentOverlay]
  -[SBFluidSwitcherItemContainer setVisible:]
  -[SBFluidSwitcherItemContainer lighteningAlpha]
  -[SBFluidSwitcherItemContainer setHighlightedFromDirectTouch:]
  -[SBFluidSwitcherItemContainer setShouldScaleOverlayToFillBounds:]
  -[SBFluidSwitcherItemContainer setTransformAnimationsAreLegacyCounterRotations:]
  -[SBFluidSwitcherItemContainer shouldScaleOverlayToFillBounds]
  -[SBFluidSwitcherItemContainer setDimmingAlpha:]
  -[SBFluidSwitcherItemContainer _scrollViewShouldPanGestureTryToBegin:]
  -[SBFluidSwitcherItemContainer isDraggable]
  -[SBFluidSwitcherItemContainer gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBFluidSwitcherItemContainer contentCornerRadii]
  -[SBFluidSwitcherItemContainer isActive]
  -[SBFluidSwitcherItemContainer setContentOverlay:]
  -[SBFluidSwitcherItemContainer _frameForPageView]
  -[SBFluidSwitcherItemContainer _springLoadingEffectTargetView]
  -[SBFluidSwitcherItemContainer setPointerInteractionEnabled:]
  -[SBFluidSwitcherItemContainer setShadowAlpha:]
  -[SBFluidSwitcherItemContainer setTintStyle:]
  -[SBFluidSwitcherItemContainer _notifyDelegateScrollViewDidChange]
  -[SBFluidSwitcherItemContainer .cxx_destruct]
  -[SBFluidSwitcherItemContainer focusEffect]
  -[SBFluidSwitcherItemContainer _dragInteraction:shouldDelayCompetingGestureRecognizer:]
  -[SBFluidSwitcherItemContainer setKillAxis:]
  -[SBFluidSwitcherItemContainer _createScrollView]
  -[SBFluidSwitcherItemContainer setSizeForContainingSpace:]
  -[SBFluidSwitcherItemContainer dragInteraction:previewForLiftingItem:session:]
  -[SBFluidSwitcherItemContainer tintStyle]
  -[SBFluidSwitcherItemContainer sourceView]
  -[SBFluidSwitcherItemContainer shadowStyle]
  -[SBFluidSwitcherItemContainer layoutSubviews]
  -[SBFluidSwitcherItemContainer contentView]
  -[SBFluidSwitcherItemContainer isPointerInteractionEnabled]
  -[SBFluidSwitcherItemContainer _CGSizeFromLengthBasedOnKillAxis:]
  -[SBFluidSwitcherItemContainer initialCornerRadiusConfiguration]
  -[SBFluidSwitcherItemContainer _updatePageViewContentViewClipping]
  -[SBFluidSwitcherItemContainer setDelegate:]
  -[SBFluidSwitcherItemContainer setShadowOffset:]
  -[SBFluidSwitcherItemContainer isDeceleratingTowardsKillZone]
  -[SBFluidSwitcherItemContainer _overlayViewSize]
  -[SBFluidSwitcherItemContainer _handleSelectionHighlightGesture:]
  -[SBFluidSwitcherItemContainer setContentPageViewScale:]
  -[SBFluidSwitcherItemContainer scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[SBFluidSwitcherItemContainer containerViewForBlurContentView]
  -[SBFluidSwitcherItemContainer isDragging]
  -[SBFluidSwitcherItemContainer setRubberbandable:]
  -[SBFluidSwitcherItemContainer dragInteraction:itemsForBeginningSession:]
  -[SBFluidSwitcherItemContainer setSuppressesHighlightEffect:]
  -[SBFluidSwitcherItemContainer initialDiffuseShadowFilters]
  -[SBFluidSwitcherItemContainer _CGSizeWidthOrHeightBasedOnKillAxis:]
  -[SBFluidSwitcherItemContainer isHighlightedFromCursorHover]
  -[SBFluidSwitcherItemContainer scrollViewDidEndDragging:willDecelerate:]
  -[SBFluidSwitcherItemContainer unobscuredMargin]
  -[SBFluidSwitcherItemContainer shadowAlpha]
  -[SBFluidSwitcherItemContainer isVisible]
  -[SBFluidSwitcherItemContainer _shouldAnimatePropertyWithKey:]
  -[SBFluidSwitcherItemContainer setKillable:]
  -[SBFluidSwitcherItemContainer initialRimShadowParameters]
  -[SBFluidSwitcherItemContainer scrollViewDidScroll:]
  -[SBFluidSwitcherItemContainer setPositionAnimationsBeginFromModelState:]
  -[SBFluidSwitcherItemContainer suppressesHighlightEffect]
  -[SBFluidSwitcherItemContainer setHighlightedFromCursorHover:]
  -[SBFluidSwitcherItemContainer effectivePageViewPresentationCornerRadius]
  -[SBFluidSwitcherItemContainer setBlurViewIconScale:]
  -[SBFluidSwitcherItemContainer _updateAccessibilityIdentifier]
  -[SBFluidSwitcherItemContainer gestureRecognizerShouldBegin:]
  -[SBFluidSwitcherItemContainer _CGPointFromScalarBasedOnKillAxis:]
  -[SBFluidSwitcherItemContainer prepareForReuse]
  -[SBFluidSwitcherItemContainer isKillable]
  -[SBFluidSwitcherItemContainer setMaskedCorners:]
  -[SBFluidSwitcherItemContainer setContentOverlay:animated:]
  -[SBFluidSwitcherItemContainer isRubberbandable]
  -[SBFluidSwitcherItemContainer initialRimShadowFilters]
  -[SBFluidSwitcherItemContainer _scaleForHighlightFromCursorHover]
  -[SBFluidSwitcherItemContainer isFocusable]
  -[SBFluidSwitcherItemContainer scrollViewWillBeginDragging:]
  -[SBFluidSwitcherItemContainer _resetKillProgressScrollState]
  -[SBFluidSwitcherItemContainer isHighlightedFromDirectTouch]
  -[SBFluidSwitcherItemContainer initWithFrame:]
  -[SBFluidSwitcherItemContainer clipsToUnobscuredMargin]
  -[SBFluidSwitcherItemContainer _handlePageViewTap:]
  -[SBFluidSwitcherItemContainer initWithFrame:appLayout:delegate:active:]
  -[SBFluidSwitcherItemContainer _returnKeyPressed:]
  -[SBFluidSwitcherItemContainer setWallpaperOverlayAlpha:]
  -[SBFluidSwitcherItemContainer _CGPointXOrYBasedOnKillAxis:]
  -[SBFluidSwitcherItemContainer setDraggable:]
  -[SBFluidSwitcherItemContainer pointInside:withEvent:]
  -[SBFluidSwitcherItemContainer pageViewAnchorPoint]
  -[SBFluidSwitcherItemContainer setActive:]
  -[SBFluidSwitcherItemContainer delegate]
  -[SBFluidSwitcherItemContainer _updatePageViewContentClippingFrame]
  -[SBFluidSwitcherItemContainer contentPageViewScale]
  -[SBFluidSwitcherItemContainer minimumTranslationForKillingContainer]
  -[SBFluidSwitcherItemContainer _scaleForHighlightFromDirectTouch]
  -[SBFluidSwitcherItemContainer canBecomeFocused]
  -[SBFluidSwitcherItemContainer scrollViewWillBeginDecelerating:]
  -[SBFluidSwitcherItemContainer setSelectable:]
  -[SBFluidSwitcherItemContainer _contentOffsetAtRest]
  -[SBFluidSwitcherItemContainer transformAnimationsAreLegacyCounterRotations]
  -[SBFluidSwitcherItemContainer setMinimumTranslationForKillingContainer:]
  -[SBFluidSwitcherItemContainer _frameForScrollView]
  -[SBFluidSwitcherItemContainer effectivePageViewPresentationFrame]
  -[SBFluidSwitcherItemContainer setContentViewBlocksTouches:]
  -[SBFluidSwitcherItemContainer _updateKillScrollViewEnabled]
  -[SBFluidSwitcherItemContainer shadowOffset]
  -[SBFluidSwitcherItemContainer setContentView:]
  -[SBFluidSwitcherItemContainer blurViewIconScale]
  -[SBFluidSwitcherItemContainer _ensureSubviewOrder]
  -[SBFluidSwitcherItemContainer contentViewBlocksTouches]
  -[SBFluidSwitcherItemContainer setBlurred:duration:blurDelay:iconViewScale:began:completion:]
  -[SBFluidSwitcherItemContainer _updateTransformForCurrentHighlight]
  -[SBFluidSwitcherItemContainer _killingProgressForContentOffset:]
  -[SBFluidSwitcherItemContainer maskedCorners]
  -[SBFluidSwitcherItemContainer _contentOffsetForKillingProgress:]
  -[SBFluidSwitcherItemContainer setPageViewOffset:]
  -[SBFluidSwitcherItemContainer setUnobscuredMargin:]
  -[SBFluidSwitcherItemContainer setLifted:]
  -[SBFluidSwitcherItemContainer killingProgress]
  -[SBFluidSwitcherItemContainer killAxis]
  -[SBFluidSwitcherItemContainer initialDiffuseShadowParameters]
  -[SBFluidSwitcherItemContainer scrollViewDidEndDecelerating:]
  -[SBFluidSwitcherItemContainer _handlePageViewPressDown:]
  -[SBFluidSwitcherItemContainer setClipsToUnobscuredMargin:]
  -[SBFluidSwitcherItemContainer _inverseScaleTransformFactor]
  -[SBFluidSwitcherItemContainer sizeForContainingSpace]
  -[SBFluidSwitcherItemContainer shouldUseBackgroundWallpaperTreatment]
  -[SBFluidSwitcherItemContainer _contentSizeForScrollView]
  -[SBFluidSwitcherItemContainer didUpdateFocusInContext:withAnimationCoordinator:]
  -[SBFluidSwitcherItemContainer pageViewOffset]
  -[SBFluidSwitcherItemContainer gestureRecognizerTransitionedToFailed:]
  -[SBFluidSwitcherItemContainer setFocusable:]
  -[SBFluidSwitcherItemContainer setPageViewAnchorPoint:]


SBFluidSwitcherItemContainerLayer : CALayer
 @property  BOOL positionAnimationsBeginFromModelState
 @property  BOOL transformAnimationsAreLegacyCounterRotations

  // instance methods
  -[SBFluidSwitcherItemContainerLayer positionAnimationsBeginFromModelState]
  -[SBFluidSwitcherItemContainerLayer setTransformAnimationsAreLegacyCounterRotations:]
  -[SBFluidSwitcherItemContainerLayer addAnimation:forKey:]
  -[SBFluidSwitcherItemContainerLayer init]
  -[SBFluidSwitcherItemContainerLayer setPositionAnimationsBeginFromModelState:]
  -[SBFluidSwitcherItemContainerLayer setTransform:]
  -[SBFluidSwitcherItemContainerLayer transformAnimationsAreLegacyCounterRotations]
  -[SBFluidSwitcherItemContainerLayer setPosition:]


SBLayoutStateTransitionCoordinator : NSObject <SBWorkspaceApplicationSceneTransitionContextDelegate>
 @property  SBSceneManager *sceneManager
 @property  <SBLayoutStateTransitionSceneEntityFrameProvider> *sceneEntityFrameProvider
 @property  BOOL transitioning
 @property  SBLayoutStateTransitionContext *transitionContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLayoutStateTransitionCoordinator sceneManager]
  -[SBLayoutStateTransitionCoordinator layoutStateForApplicationTransitionContext:]
  -[SBLayoutStateTransitionCoordinator applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBLayoutStateTransitionCoordinator .cxx_destruct]
  -[SBLayoutStateTransitionCoordinator initWithSceneManager:]
  -[SBLayoutStateTransitionCoordinator willEndTransition]
  -[SBLayoutStateTransitionCoordinator init]
  -[SBLayoutStateTransitionCoordinator addObserver:]
  -[SBLayoutStateTransitionCoordinator isTransitioning]
  -[SBLayoutStateTransitionCoordinator previousLayoutStateForApplicationTransitionContext:]
  -[SBLayoutStateTransitionCoordinator beginTransitionForWorkspaceTransaction:]
  -[SBLayoutStateTransitionCoordinator transitionContext]
  -[SBLayoutStateTransitionCoordinator removeObserver:]
  -[SBLayoutStateTransitionCoordinator setSceneEntityFrameProvider:]
  -[SBLayoutStateTransitionCoordinator endTransitionWithError:]
  -[SBLayoutStateTransitionCoordinator sceneEntityFrameProvider]


SBBannerUnfurlToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBBannerUnfurlToFullScreenSwitcherModifier transitionWillBegin]
  -[SBBannerUnfurlToFullScreenSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier isHomeScreenContentRequired]
  -[SBBannerUnfurlToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier frameForIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBBannerUnfurlToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBBannerUnfurlToFullScreenSwitcherModifier .cxx_destruct]
  -[SBBannerUnfurlToFullScreenSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier isSwitcherWindowVisible]
  -[SBBannerUnfurlToFullScreenSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier handleTimerEvent:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier wallpaperStyle]
  -[SBBannerUnfurlToFullScreenSwitcherModifier cornerRadiiForIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier transitionWillUpdate]
  -[SBBannerUnfurlToFullScreenSwitcherModifier _isAppLayout:atIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:bannerUnfurlSourceContext:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier backdropBlurType]


SBFailureNotifyingTapGestureRecognizer : UITapGestureRecognizer
 @property  <SBFailureNotifyingTapGestureRecognizerDelegate> *delegate

  // instance methods
  -[SBFailureNotifyingTapGestureRecognizer setDelegate:]
  -[SBFailureNotifyingTapGestureRecognizer setState:]
  -[SBFailureNotifyingTapGestureRecognizer delegate]


SBSetupRegulatoryInfoViewController : UIViewController
  // instance methods
  -[SBSetupRegulatoryInfoViewController .cxx_destruct]
  -[SBSetupRegulatoryInfoViewController loadView]
  -[SBSetupRegulatoryInfoViewController _canShowWhileLocked]


SBDataPlanAlertItem : SBAlertItem
  // instance methods
  -[SBDataPlanAlertItem didDeactivateForReason:]
  -[SBDataPlanAlertItem suppressForKeynote]


SBCornerFingerGestureClassifier : NSObject
  // instance methods
  -[SBCornerFingerGestureClassifier .cxx_destruct]
  -[SBCornerFingerGestureClassifier initWithSettings:]
  -[SBCornerFingerGestureClassifier classifySwipeWithOffsettedAngle:distanceToCorner:portrait:]


SBDashBoardModalHomeAffordanceControllerClientBridge : NSObject <SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate, SBHomeGrabberDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardModalHomeAffordanceControllerClientBridge zStackParticipant:updatePreferences:]
  -[SBDashBoardModalHomeAffordanceControllerClientBridge zStackParticipantDidChange:]
  -[SBDashBoardModalHomeAffordanceControllerClientBridge .cxx_destruct]
  -[SBDashBoardModalHomeAffordanceControllerClientBridge homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBDashBoardModalHomeAffordanceControllerClientBridge additionalEdgeSpacingForHomeGrabberView:]
  -[SBDashBoardModalHomeAffordanceControllerClientBridge initWithCoverSheetModalHomeGestureParticipant:]


SBDashBoardModalHomeAffordanceController : NSObject <CSModalHomeAffordanceControlling>
 @property  UIScreenEdgePanGestureRecognizer *homeGestureRecognizer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardModalHomeAffordanceController ownsHomeGesture]
  -[SBDashBoardModalHomeAffordanceController .cxx_destruct]
  -[SBDashBoardModalHomeAffordanceController init]
  -[SBDashBoardModalHomeAffordanceController _addGrabberView:clientBridge:]
  -[SBDashBoardModalHomeAffordanceController registerHomeGestureParticipant:]
  -[SBDashBoardModalHomeAffordanceController unregisterHomeGestureParticipant]
  -[SBDashBoardModalHomeAffordanceController homeGestureRecognizer]
  -[SBDashBoardModalHomeAffordanceController setHomeGestureRecognizer:]


SBToggleClassroomPluginTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBToggleClassroomPluginTestRecipe load]

  // instance methods
  -[SBToggleClassroomPluginTestRecipe title]
  -[SBToggleClassroomPluginTestRecipe handleVolumeIncrease]
  -[SBToggleClassroomPluginTestRecipe handleVolumeDecrease]


SBIsolatedSceneOrientationFollowingWindow : SBWindow
  // instance methods
  -[SBIsolatedSceneOrientationFollowingWindow _usesWindowServerHitTesting]
  -[SBIsolatedSceneOrientationFollowingWindow overlayRootViewController]


SBIsolatedSceneOrientationFollowingSecureWindow : SBIsolatedSceneOrientationFollowingWindow
  // class methods
  +[SBIsolatedSceneOrientationFollowingSecureWindow _isSecure]


SBIsolatedSceneOrientationFollowingWrapperViewController : UIViewController <SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneOverlayViewController>
 @property  long long currentInterfaceOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView<SBDeviceApplicationSceneOverlayView> *overlayView

  // instance methods
  -[SBIsolatedSceneOrientationFollowingWrapperViewController sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController overlayView]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController .cxx_destruct]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController viewDidAppear:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController currentInterfaceOrientation]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController viewWillDisappear:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController viewWillAppear:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController dealloc]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController loadView]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController viewDidDisappear:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _canShowWhileLocked]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _orientationBasedOnScene]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _effectiveSceneOrientation]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController initWithContentViewController:sceneHandle:orientationDelegate:rendersWhileLocked:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _containerViewDidSetCenter:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _containerViewDidSetBounds:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _isSceneStatusBarHidden]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _boundsForOverlayRootView]


SBIsolatedSceneOrientationFollowingContainerView : UIView <SBDeviceApplicationSceneOverlayView>
 @property  SBIsolatedSceneOrientationFollowingWrapperViewController *wrapperViewController
 @property  long long hostOrientation
 @property  BOOL shouldLayoutOverlayImmediatelyForContainerGeometryChange

  // instance methods
  -[SBIsolatedSceneOrientationFollowingContainerView setCenter:]
  -[SBIsolatedSceneOrientationFollowingContainerView .cxx_destruct]
  -[SBIsolatedSceneOrientationFollowingContainerView wrapperViewController]
  -[SBIsolatedSceneOrientationFollowingContainerView setBounds:]
  -[SBIsolatedSceneOrientationFollowingContainerView initWithFrame:wrapperViewController:]
  -[SBIsolatedSceneOrientationFollowingContainerView hostOrientation]
  -[SBIsolatedSceneOrientationFollowingContainerView shouldLayoutOverlayImmediatelyForContainerGeometryChange]
  -[SBIsolatedSceneOrientationFollowingContainerView setHostOrientation:]
  -[SBIsolatedSceneOrientationFollowingContainerView setShouldLayoutOverlayImmediatelyForContainerGeometryChange:]


SBSceneOrientationFollowingWindowRootViewController : UIViewController
 @property  SBIsolatedSceneOrientationFollowingWrapperViewController *hostingViewController
 @property  UIView *overlayContentView

  // instance methods
  -[SBSceneOrientationFollowingWindowRootViewController _edgeInsetsForChildViewController:insetsAreAbsolute:]
  -[SBSceneOrientationFollowingWindowRootViewController viewWillLayoutSubviews]
  -[SBSceneOrientationFollowingWindowRootViewController .cxx_destruct]
  -[SBSceneOrientationFollowingWindowRootViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBSceneOrientationFollowingWindowRootViewController setHostingViewController:]
  -[SBSceneOrientationFollowingWindowRootViewController overlayContentView]
  -[SBSceneOrientationFollowingWindowRootViewController hostingViewController]
  -[SBSceneOrientationFollowingWindowRootViewController _canShowWhileLocked]
  -[SBSceneOrientationFollowingWindowRootViewController initWithHostingViewController:]
  -[SBSceneOrientationFollowingWindowRootViewController setOverlayContentView:]


SBSystemNotesPresentationRequestServer : NSObject <BSServiceConnectionListenerDelegate>
 @property  <SBSystemNotesPresentationRequestServerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemNotesPresentationRequestServer listener:didReceiveConnection:withContext:]
  -[SBSystemNotesPresentationRequestServer .cxx_destruct]
  -[SBSystemNotesPresentationRequestServer setDelegate:]
  -[SBSystemNotesPresentationRequestServer init]
  -[SBSystemNotesPresentationRequestServer activate]
  -[SBSystemNotesPresentationRequestServer delegate]
  -[SBSystemNotesPresentationRequestServer invalidate]


SBRestartManagerWorkspaceDataSource : NSObject <SBRestartManagerWorkspaceDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRestartManagerWorkspaceDataSource isUILocked]
  -[SBRestartManagerWorkspaceDataSource terminateAllApplicationsForReason:description:completion:]
  -[SBRestartManagerWorkspaceDataSource activePrimaryApplicationBundleID]


SBCrossblurDosidoSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCrossblurDosidoSwitcherModifier homeScreenBackdropBlurType]
  -[SBCrossblurDosidoSwitcherModifier transitionWillBegin]
  -[SBCrossblurDosidoSwitcherModifier isHomeScreenContentRequired]
  -[SBCrossblurDosidoSwitcherModifier transitionDidEnd]
  -[SBCrossblurDosidoSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCrossblurDosidoSwitcherModifier scaleForIndex:]
  -[SBCrossblurDosidoSwitcherModifier frameForIndex:]
  -[SBCrossblurDosidoSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBCrossblurDosidoSwitcherModifier visibleAppLayouts]
  -[SBCrossblurDosidoSwitcherModifier scaleForLayoutRole:inAppLayout:]
  -[SBCrossblurDosidoSwitcherModifier .cxx_destruct]
  -[SBCrossblurDosidoSwitcherModifier isSwitcherWindowVisible]
  -[SBCrossblurDosidoSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBCrossblurDosidoSwitcherModifier _layoutSettings]
  -[SBCrossblurDosidoSwitcherModifier wallpaperStyle]
  -[SBCrossblurDosidoSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBCrossblurDosidoSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBCrossblurDosidoSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBCrossblurDosidoSwitcherModifier topMostLayoutElements]
  -[SBCrossblurDosidoSwitcherModifier transitionWillUpdate]
  -[SBCrossblurDosidoSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:direction:]
  -[SBCrossblurDosidoSwitcherModifier _opacitySettings]


SBCoverSheetIconFlyInAnimator : SBCenterIconZoomAnimator <PTSettingsKeyObserver>
 @property  UIViewFloatAnimatableProperty *labelAlphaDrivingProgressAnimatableProperty
 @property  CAMediaTimingFunction *timingFunction
 @property  UIPageControl *pageControl
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetIconFlyInAnimator _cleanupAnimation]
  -[SBCoverSheetIconFlyInAnimator _setAnimationFraction:withCenter:]
  -[SBCoverSheetIconFlyInAnimator pageControl]
  -[SBCoverSheetIconFlyInAnimator timingFunction]
  -[SBCoverSheetIconFlyInAnimator _updateLabelAlphaForPresentationValue:]
  -[SBCoverSheetIconFlyInAnimator _updateWithSettings:]
  -[SBCoverSheetIconFlyInAnimator _updateDockForFraction:]
  -[SBCoverSheetIconFlyInAnimator setTimingFunction:]
  -[SBCoverSheetIconFlyInAnimator .cxx_destruct]
  -[SBCoverSheetIconFlyInAnimator _zPositionForView:center:andFraction:]
  -[SBCoverSheetIconFlyInAnimator _prepareAnimation]
  -[SBCoverSheetIconFlyInAnimator initWithFolderController:]
  -[SBCoverSheetIconFlyInAnimator setLabelAlphaDrivingProgressAnimatableProperty:]
  -[SBCoverSheetIconFlyInAnimator labelAlphaDrivingProgressAnimatableProperty]
  -[SBCoverSheetIconFlyInAnimator setPageControl:]
  -[SBCoverSheetIconFlyInAnimator settings:changedValueForKey:]
  -[SBCoverSheetIconFlyInAnimator _createAnimatableProperties]
  -[SBCoverSheetIconFlyInAnimator _functionWithProgress:distance:]
  -[SBCoverSheetIconFlyInAnimator _zPositionForPoint:center:andFraction:]
  -[SBCoverSheetIconFlyInAnimator _labelAlphaForFraction:]


SBCenterWindowToExistingSplitViewSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCenterWindowToExistingSplitViewSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier frameForIndex:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier visibleAppLayouts]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier .cxx_destruct]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier topMostLayoutRolesForAppLayout:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier handleSceneReadyEvent:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]
  -[SBCenterWindowToExistingSplitViewSwitcherModifier _wasPreviousCenterAppLayout:layoutRole:]


_SBDefaultScreenshotProvider : NSObject <_SBScreenshotProvider>
 @property  UIScreen *screen
 @property  SBScreenFlash *flasher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBDefaultScreenshotProvider screen]
  -[_SBDefaultScreenshotProvider initWithScreen:]
  -[_SBDefaultScreenshotProvider .cxx_destruct]
  -[_SBDefaultScreenshotProvider flasher]
  -[_SBDefaultScreenshotProvider captureScreenshot]


SBSystemStatusWifiDataProvider : NSObject <BSInvalidatable>
 @property  STWifiStatusDomainPublisher *wifiDataPublisher
 @property  BOOL wifiActive
 @property  BOOL fallingBackToCellular
 @property  ^v cellularFallbackWatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemStatusWifiDataProvider _registerForNotifications]
  -[SBSystemStatusWifiDataProvider setWifiActive:]
  -[SBSystemStatusWifiDataProvider setFallingBackToCellular:]
  -[SBSystemStatusWifiDataProvider .cxx_destruct]
  -[SBSystemStatusWifiDataProvider init]
  -[SBSystemStatusWifiDataProvider _updateWifiActive]
  -[SBSystemStatusWifiDataProvider wifiDataPublisher]
  -[SBSystemStatusWifiDataProvider isFallingBackToCellular]
  -[SBSystemStatusWifiDataProvider cellularFallbackWatcher]
  -[SBSystemStatusWifiDataProvider _updateData]
  -[SBSystemStatusWifiDataProvider isWifiActive]
  -[SBSystemStatusWifiDataProvider dealloc]
  -[SBSystemStatusWifiDataProvider setCellularFallbackWatcher:]
  -[SBSystemStatusWifiDataProvider invalidate]


SBAppSwitcherService : NSObject
 @property  NSString *bundleIdentifier
 @property  NSString *viewServiceClassName

  // class methods
  +[SBAppSwitcherService switcherServiceWithName:viewServiceClassName:]

  // instance methods
  -[SBAppSwitcherService bundleIdentifier]
  -[SBAppSwitcherService .cxx_destruct]
  -[SBAppSwitcherService setBundleIdentifier:]
  -[SBAppSwitcherService setViewServiceClassName:]
  -[SBAppSwitcherService viewServiceClassName]


SBDashBoardViewExternalControllerBase : CSCoverSheetViewControllerBase <CSExternalAppearanceProviding, CSExternalBehaviorProviding, CSExternalPresentationProviding, CSExternalEventHandling>
 @property  BOOL externalToDashBoard
 @property  NSString *appearanceIdentifier
 @property  NSSet *components
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  <UICoordinateSpace> *presentationCoordinateSpace
 @property  NSArray *presentationRegions

  // instance methods
  -[SBDashBoardViewExternalControllerBase _presenter]
  -[SBDashBoardViewExternalControllerBase _unregisterAsExternalProvider]
  -[SBDashBoardViewExternalControllerBase isExternalToDashBoard]
  -[SBDashBoardViewExternalControllerBase conformsToCSExternalBehaviorProviding]
  -[SBDashBoardViewExternalControllerBase viewDidAppear:]
  -[SBDashBoardViewExternalControllerBase _registerAsExternalProviderIfNeeded]
  -[SBDashBoardViewExternalControllerBase viewWillDisappear:]


SBFailingSystemGestureRecognizer : UIGestureRecognizer
 @property  <SBSystemGestureRecognizerDelegate> *delegate

  // instance methods
  -[SBFailingSystemGestureRecognizer initWithTarget:action:]
  -[SBFailingSystemGestureRecognizer touchesBegan:withEvent:]
  -[SBFailingSystemGestureRecognizer init]


SBLongPressGestureRecognizer : SBClickGestureRecognizer
 @property  unsigned long numberOfClicksRequired
 @property  double minimumPressDuration

  // instance methods
  -[SBLongPressGestureRecognizer gestureStateInfoForUnbalancedPressBeganCount:previousCount:]
  -[SBLongPressGestureRecognizer initWithTarget:action:]
  -[SBLongPressGestureRecognizer setMinimumPressDuration:]
  -[SBLongPressGestureRecognizer reset]
  -[SBLongPressGestureRecognizer minimumPressDuration]


SBFloatingApplicationTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFloatingApplicationTestRecipe load]

  // instance methods
  -[SBFloatingApplicationTestRecipe _perform]
  -[SBFloatingApplicationTestRecipe init]
  -[SBFloatingApplicationTestRecipe title]
  -[SBFloatingApplicationTestRecipe handleVolumeIncrease]
  -[SBFloatingApplicationTestRecipe handleVolumeDecrease]


SBPresentSessionUIRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPresentSessionUIRecipe load]

  // instance methods
  -[SBPresentSessionUIRecipe title]
  -[SBPresentSessionUIRecipe handleVolumeIncrease]
  -[SBPresentSessionUIRecipe handleVolumeDecrease]


SBRecordingIndicatorDomain : PTDomain
  // class methods
  +[SBRecordingIndicatorDomain domainGroupName]
  +[SBRecordingIndicatorDomain rootSettings]
  +[SBRecordingIndicatorDomain domainName]
  +[SBRecordingIndicatorDomain rootSettingsClass]


SBPIPStashView : UIView <PTSettingsKeyObserver>
 @property  double blurProgress
 @property  double stashedTabWidth
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPStashView traitCollectionDidChange:]
  -[SBPIPStashView _setContinuousCornerRadius:]
  -[SBPIPStashView .cxx_destruct]
  -[SBPIPStashView blurProgress]
  -[SBPIPStashView layoutSubviews]
  -[SBPIPStashView initWithFrame:settings:]
  -[SBPIPStashView setBlurProgress:]
  -[SBPIPStashView initWithFrame:]
  -[SBPIPStashView settings:changedValueForKey:]
  -[SBPIPStashView dealloc]
  -[SBPIPStashView setStashedTabWidth:]
  -[SBPIPStashView setChevronHidden:left:]
  -[SBPIPStashView resetChevronState]
  -[SBPIPStashView layoutStashChevrons]
  -[SBPIPStashView stashedTabWidth]
  -[SBPIPStashView _updateSettingsDerivedValues]


SBBannerSourceListenerPresentableViewController : BNBannerSourceListenerPresentableViewController <SBBarSwipeAffordanceObserver, SBBannerManagerPresentable, SBUIPresentableLocalHomeGestureParticipant, SBButtonEventsHandler>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIViewController *viewController
 @property  long long presentableType
 @property  <BNPresentableContext> *presentableContext
 @property  BOOL draggingDismissalEnabled
 @property  BOOL draggingInteractionEnabled
 @property  BOOL touchOutsideDismissalEnabled
 @property  NSString *requesterIdentifier
 @property  NSString *requestIdentifier
 @property  <SBUIPresentableHomeGestureContext> *homeGestureContext

  // instance methods
  -[SBBannerSourceListenerPresentableViewController homeGestureContext]
  -[SBBannerSourceListenerPresentableViewController homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBBannerSourceListenerPresentableViewController handleVolumeUpButtonPress]
  -[SBBannerSourceListenerPresentableViewController handleHomeButtonDoublePress]
  -[SBBannerSourceListenerPresentableViewController handleHomeButtonPress]
  -[SBBannerSourceListenerPresentableViewController handleLockButtonPress]
  -[SBBannerSourceListenerPresentableViewController handleVolumeDownButtonPress]
  -[SBBannerSourceListenerPresentableViewController handleHeadsetButtonPress:]
  -[SBBannerSourceListenerPresentableViewController handleHomeButtonLongPress]
  -[SBBannerSourceListenerPresentableViewController setHomeGestureContext:]
  -[SBBannerSourceListenerPresentableViewController handleVoiceCommandButtonPress]
  -[SBBannerSourceListenerPresentableViewController .cxx_destruct]
  -[SBBannerSourceListenerPresentableViewController scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBBannerSourceListenerPresentableViewController viewDidLoad]
  -[SBBannerSourceListenerPresentableViewController scene:didReceiveActions:]
  -[SBBannerSourceListenerPresentableViewController shouldDismissForReason:outReason:]
  -[SBBannerSourceListenerPresentableViewController dealloc]
  -[SBBannerSourceListenerPresentableViewController presentableWillDisappearAsBanner:withReason:]
  -[SBBannerSourceListenerPresentableViewController homeGestureOwnershipDidChange:]
  -[SBBannerSourceListenerPresentableViewController isDraggingDismissalEnabled]
  -[SBBannerSourceListenerPresentableViewController isDraggingInteractionEnabled]
  -[SBBannerSourceListenerPresentableViewController _invalidateAllButtonEventActions]


SBTransientOverlayPresentationManager : NSObject <SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBIdleTimerCoordinating, SBTransientOverlayViewControllerDelegate, SBIdleTimerProviding, SBButtonEventsHandler>
 @property  SBBannerManager *bannerManager
 @property  SBCoverSheetPresentationManager *coverSheetPresentationManager
 @property  <SBTransientOverlayPresentationManagerDelegate> *delegate
 @property  BOOL hasIdleTimerBehaviors
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  SBTransientOverlayViewController *topmostPresentedViewController
 @property  BOOL hasActivePresentation
 @property  BOOL canActivePresentationBecomeLocalFirstResponder
 @property  long long presentedViewControllerCount
 @property  BOOL shouldUseSceneBasedKeyboardFocusForActivePresentation
 @property  BOOL canHandleButtonEvents
 @property  UIStatusBarStyleRequest *currentStatusBarStyleRequest
 @property  BOOL hasVisibleStatusBar
 @property  BOOL prefersStatusBarActivityItemVisible
 @property  NSNumber *preferredWhitePointAdaptivityStyleValue
 @property  long long topmostViewControllerInterfaceOrientation
 @property  double topmostWindowLevel
 @property  BOOL ownsHomeGesture
 @property  long long preferredGestureDismissalStyle
 @property  SBTransientOverlayViewController *viewControllerForGestureDismissal
 @property  BOOL shouldDisableControlCenter
 @property  BOOL shouldDisableCoverSheetGesture
 @property  BOOL shouldDisableSiri
 @property  BOOL activePresentationPreventsDragAndDrop
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTransientOverlayPresentationManager _buttonEventHandlingViewController]
  -[SBTransientOverlayPresentationManager idleTimerCoordinator]
  -[SBTransientOverlayPresentationManager _applyWallpaperAnimationSuspensionAssertionForEntity:]
  -[SBTransientOverlayPresentationManager coordinatorRequestedIdleTimerBehavior:]
  -[SBTransientOverlayPresentationManager ownsHomeGesture]
  -[SBTransientOverlayPresentationManager bannerManager]
  -[SBTransientOverlayPresentationManager hasIdleTimerBehaviors]
  -[SBTransientOverlayPresentationManager hasActivePresentation]
  -[SBTransientOverlayPresentationManager _invalidateAssertionsForEntity:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsFeaturePolicyUpdate:]
  -[SBTransientOverlayPresentationManager _getContentScale:translation:fromRect:entity:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsSceneDeactivationUpdate:]
  -[SBTransientOverlayPresentationManager _handleCoverSheetWillPresent:]
  -[SBTransientOverlayPresentationManager idleTimerProvider:didProposeBehavior:forReason:]
  -[SBTransientOverlayPresentationManager coverSheetPresentationManager]
  -[SBTransientOverlayPresentationManager isPresentingViewController:]
  -[SBTransientOverlayPresentationManager _updateBackgroundWindowForEntity:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsStatusBarAppearanceUpdate:]
  -[SBTransientOverlayPresentationManager defaultSupportedInterfaceOrientationsForTransientOverlayViewController:]
  -[SBTransientOverlayPresentationManager _preferredStatusBarVisibilityForEntity:]
  -[SBTransientOverlayPresentationManager setIdleTimerCoordinator:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerDidEndRotation:]
  -[SBTransientOverlayPresentationManager handleVolumeUpButtonPress]
  -[SBTransientOverlayPresentationManager newContentStatusBarHiddenAssertionWithReason:]
  -[SBTransientOverlayPresentationManager defaultPreferredInterfaceOrientationForPresentationForTransientOverlayViewController:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsWhitePointAdaptivityStyleUpdate:]
  -[SBTransientOverlayPresentationManager handleHomeButtonDoublePress]
  -[SBTransientOverlayPresentationManager viewControllerForGestureDismissal]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsOrientationUpdatesDisabledUpdate:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsProximityDetectionUpdate:]
  -[SBTransientOverlayPresentationManager handleHomeButtonPress]
  -[SBTransientOverlayPresentationManager handleLockButtonPress]
  -[SBTransientOverlayPresentationManager handleVolumeDownButtonPress]
  -[SBTransientOverlayPresentationManager handleHeadsetButtonPress:]
  -[SBTransientOverlayPresentationManager zStackParticipant:updatePreferences:]
  -[SBTransientOverlayPresentationManager handleHomeButtonLongPress]
  -[SBTransientOverlayPresentationManager preferredGestureDismissalStyle]
  -[SBTransientOverlayPresentationManager _windowedAccessoryDidAttachOrDetach:]
  -[SBTransientOverlayPresentationManager zStackParticipantDidChange:]
  -[SBTransientOverlayPresentationManager handleVoiceCommandButtonPress]
  -[SBTransientOverlayPresentationManager .cxx_destruct]
  -[SBTransientOverlayPresentationManager setFluidDismissalState:forViewController:]
  -[SBTransientOverlayPresentationManager setCoverSheetPresentationManager:]
  -[SBTransientOverlayPresentationManager canActivePresentationBecomeLocalFirstResponder]
  -[SBTransientOverlayPresentationManager _updateHomeGestureStateAnimated:]
  -[SBTransientOverlayPresentationManager canHandleButtonEvents]
  -[SBTransientOverlayPresentationManager shouldDisableSiri]
  -[SBTransientOverlayPresentationManager setDelegate:]
  -[SBTransientOverlayPresentationManager _windowLevelForEntity:]
  -[SBTransientOverlayPresentationManager activePresentationPreventsDragAndDrop]
  -[SBTransientOverlayPresentationManager homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBTransientOverlayPresentationManager _topmostPresentedEntity]
  -[SBTransientOverlayPresentationManager _updatePreferredWhitePointAdaptivityStyle]
  -[SBTransientOverlayPresentationManager currentStatusBarStyleRequest]
  -[SBTransientOverlayPresentationManager homeGestureParticipantResolvedHomeAffordanceSuppressionDidChange:]
  -[SBTransientOverlayPresentationManager topmostWindowLevel]
  -[SBTransientOverlayPresentationManager _dismissEntity:animated:completion:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsContentOpaqueUpdate:]
  -[SBTransientOverlayPresentationManager performPresentationRequest:]
  -[SBTransientOverlayPresentationManager _updateFeaturePolicies]
  -[SBTransientOverlayPresentationManager homeGrabberViewDidReceiveClick:]
  -[SBTransientOverlayPresentationManager shouldDisableCoverSheetGesture]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsGestureDismissalStyleUpdate:]
  -[SBTransientOverlayPresentationManager _applyProximityDetectionModeForEntity:]
  -[SBTransientOverlayPresentationManager _updateZStackStateAnimated:reason:]
  -[SBTransientOverlayPresentationManager defaultShouldAutorotateForTransientOverlayViewController:]
  -[SBTransientOverlayPresentationManager _updateContentStatusBarPresentation]
  -[SBTransientOverlayPresentationManager isTopmostPresentedViewController:]
  -[SBTransientOverlayPresentationManager shouldDisableControlCenter]
  -[SBTransientOverlayPresentationManager setBannerManager:]
  -[SBTransientOverlayPresentationManager hasPresentationAboveWindowLevel:]
  -[SBTransientOverlayPresentationManager _isPresentationStatusBarHiddenForVisibility:currentExternalStatusBarSettings:]
  -[SBTransientOverlayPresentationManager _newSceneDeactivationAssertionWithReason:]
  -[SBTransientOverlayPresentationManager presentedViewControllerCount]
  -[SBTransientOverlayPresentationManager delegate]
  -[SBTransientOverlayPresentationManager topmostPresentedViewController]
  -[SBTransientOverlayPresentationManager hasVisibleStatusBar]
  -[SBTransientOverlayPresentationManager _updateDeactivationAssertions]
  -[SBTransientOverlayPresentationManager shouldUseSceneBasedKeyboardFocusForActivePresentation]
  -[SBTransientOverlayPresentationManager dealloc]
  -[SBTransientOverlayPresentationManager _updateStatusBarWithCurrentExternalStatusBarSettings:animated:]
  -[SBTransientOverlayPresentationManager _updateWindowHitTestingForEntity:]
  -[SBTransientOverlayPresentationManager topmostViewControllerInterfaceOrientation]
  -[SBTransientOverlayPresentationManager prefersStatusBarActivityItemVisible]
  -[SBTransientOverlayPresentationManager performDismissalRequest:]
  -[SBTransientOverlayPresentationManager _statusBarEntity]
  -[SBTransientOverlayPresentationManager isKeyboardVisibleForSpringBoardForTransientOverlayViewController:]
  -[SBTransientOverlayPresentationManager handleDoubleHeightStatusBarTap]
  -[SBTransientOverlayPresentationManager initWithScreen:alertItemsController:lockStateAggregator:homeGestureArbiter:zStackResolver:reachabilityManager:]
  -[SBTransientOverlayPresentationManager _updateCurrentEntityHomeGrabberAnimated:]
  -[SBTransientOverlayPresentationManager _backgroundWindowLevelForEntity:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsWindowHitTestingUpdate:]
  -[SBTransientOverlayPresentationManager preferredWhitePointAdaptivityStyleValue]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerWillBeginRotation:toInterfaceOrientation:]
  -[SBTransientOverlayPresentationManager _currentExternalStatusBarSettings]


_SBTransientOverlayPresentedEntity : NSObject
 @property  double baseWindowLevel
 @property  SBTransientOverlayViewController *viewController
 @property  SBTransientOverlayBackgroundWindow *backgroundWindow
 @property  BOOL rotating
 @property  SBTransientOverlayWindow *window
 @property  BOOL dismissing
 @property  BOOL hasFinishedWindowInitialization
 @property  BOOL hasPreservedInputViews
 @property  <BSInvalidatable> *disableAutoUnlockAssertion
 @property  <BSInvalidatable> *proximityEnabledAssertion
 @property  <BSInvalidatable> *wallpaperAnimationSuspensionAssertion
 @property  SBFluidDismissalState *fluidDismissalState
 @property  SBPresentationObservationToken *bannerLongLookPresentationObservationToken
 @property  <BSInvalidatable> *bannerLongLookWindowLevelAssertion
 @property  SBPresentationObservationToken *controlCenterPresentationObservationToken
 @property  <BSInvalidatable> *controlCenterWindowLevelAssertion
 @property  SBPresentationObservationToken *siriPresentationObservationToken
 @property  <BSInvalidatable> *siriWindowLevelAssertion

  // instance methods
  -[_SBTransientOverlayPresentedEntity viewController]
  -[_SBTransientOverlayPresentedEntity .cxx_destruct]
  -[_SBTransientOverlayPresentedEntity setFluidDismissalState:]
  -[_SBTransientOverlayPresentedEntity isRotating]
  -[_SBTransientOverlayPresentedEntity setRotating:]
  -[_SBTransientOverlayPresentedEntity setDismissing:]
  -[_SBTransientOverlayPresentedEntity hasPreservedInputViews]
  -[_SBTransientOverlayPresentedEntity isDismissing]
  -[_SBTransientOverlayPresentedEntity window]
  -[_SBTransientOverlayPresentedEntity initWithViewController:window:baseWindowLevel:]
  -[_SBTransientOverlayPresentedEntity baseWindowLevel]
  -[_SBTransientOverlayPresentedEntity setHasPreservedInputViews:]
  -[_SBTransientOverlayPresentedEntity setSiriPresentationObservationToken:]
  -[_SBTransientOverlayPresentedEntity setSiriWindowLevelAssertion:]
  -[_SBTransientOverlayPresentedEntity siriWindowLevelAssertion]
  -[_SBTransientOverlayPresentedEntity siriPresentationObservationToken]
  -[_SBTransientOverlayPresentedEntity setControlCenterPresentationObservationToken:]
  -[_SBTransientOverlayPresentedEntity setControlCenterWindowLevelAssertion:]
  -[_SBTransientOverlayPresentedEntity controlCenterWindowLevelAssertion]
  -[_SBTransientOverlayPresentedEntity controlCenterPresentationObservationToken]
  -[_SBTransientOverlayPresentedEntity setBannerLongLookPresentationObservationToken:]
  -[_SBTransientOverlayPresentedEntity setBannerLongLookWindowLevelAssertion:]
  -[_SBTransientOverlayPresentedEntity bannerLongLookWindowLevelAssertion]
  -[_SBTransientOverlayPresentedEntity bannerLongLookPresentationObservationToken]
  -[_SBTransientOverlayPresentedEntity setDisableAutoUnlockAssertion:]
  -[_SBTransientOverlayPresentedEntity setHasFinishedWindowInitialization:]
  -[_SBTransientOverlayPresentedEntity fluidDismissalState]
  -[_SBTransientOverlayPresentedEntity proximityEnabledAssertion]
  -[_SBTransientOverlayPresentedEntity setProximityEnabledAssertion:]
  -[_SBTransientOverlayPresentedEntity wallpaperAnimationSuspensionAssertion]
  -[_SBTransientOverlayPresentedEntity setWallpaperAnimationSuspensionAssertion:]
  -[_SBTransientOverlayPresentedEntity backgroundWindow]
  -[_SBTransientOverlayPresentedEntity disableAutoUnlockAssertion]
  -[_SBTransientOverlayPresentedEntity setBackgroundWindow:]
  -[_SBTransientOverlayPresentedEntity hasFinishedWindowInitialization]


SBConferenceManager : NSObject
  // class methods
  +[SBConferenceManager initialize]
  +[SBConferenceManager sharedInstance]

  // instance methods
  -[SBConferenceManager inFaceTime]
  -[SBConferenceManager currentFaceTimeCall]
  -[SBConferenceManager .cxx_destruct]
  -[SBConferenceManager activeFaceTimeCall]
  -[SBConferenceManager init]
  -[SBConferenceManager incomingFaceTimeCall]
  -[SBConferenceManager inFaceTimeVideo]
  -[SBConferenceManager activeFaceTimeCallExists]
  -[SBConferenceManager _faceTimeStateChanged:]
  -[SBConferenceManager faceTimeInvitationExists]
  -[SBConferenceManager canStartFaceTime]
  -[SBConferenceManager hasFaceTimeCapability]
  -[SBConferenceManager dealloc]
  -[SBConferenceManager endFaceTime]
  -[SBConferenceManager faceTimeIsAvailable]


SBExternalSoundsDefaults : BSAbstractDefaultDomain
 @property  BOOL keyboardPlaysSounds
 @property  BOOL systemHapticsEnabled
 @property  BOOL buttonsCanChangeRingerVolume

  // instance methods
  -[SBExternalSoundsDefaults init]
  -[SBExternalSoundsDefaults _bindAndRegisterDefaults]


SBNotificationPresentableViewController : NCNotificationPresentableViewController <SBBannerManagerPresentable, SBButtonEventsHandler, SBBarSwipeAffordanceObserver, SBUIPresentableLocalHomeGestureParticipant>
 @property  UIViewController *viewController
 @property  long long presentableType
 @property  <BNPresentableContext> *presentableContext
 @property  BOOL draggingDismissalEnabled
 @property  BOOL draggingInteractionEnabled
 @property  BOOL touchOutsideDismissalEnabled
 @property  NSString *requesterIdentifier
 @property  NSString *requestIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBUIPresentableHomeGestureContext> *homeGestureContext

  // instance methods
  -[SBNotificationPresentableViewController homeGestureContext]
  -[SBNotificationPresentableViewController homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBNotificationPresentableViewController handleVolumeUpButtonPress]
  -[SBNotificationPresentableViewController handleHomeButtonDoublePress]
  -[SBNotificationPresentableViewController handleHomeButtonPress]
  -[SBNotificationPresentableViewController handleLockButtonPress]
  -[SBNotificationPresentableViewController handleVolumeDownButtonPress]
  -[SBNotificationPresentableViewController handleHeadsetButtonPress:]
  -[SBNotificationPresentableViewController handleHomeButtonLongPress]
  -[SBNotificationPresentableViewController setHomeGestureContext:]
  -[SBNotificationPresentableViewController longLookWillDismissForNotificationViewController:]
  -[SBNotificationPresentableViewController handleVoiceCommandButtonPress]
  -[SBNotificationPresentableViewController .cxx_destruct]
  -[SBNotificationPresentableViewController longLookDidPresentForNotificationViewController:]
  -[SBNotificationPresentableViewController shouldDismissForReason:outReason:]
  -[SBNotificationPresentableViewController shouldAcquireWindowLevelAssertion]


SBWallpaperController : NSObject <SBFLegibilitySettingsProviderDelegate, SBFWallpaperViewInternalObserver, SBUIActiveOrientationObserver, _UISettingsKeyObserver, SBWWallpaperPresentingDelegate, SBWallpaperReachabilityCoordinating, BSDescriptionProviding, SBWallpaperServerDelegate, SBFWallpaperViewDelegate, UIWindowDelegate, CSWallpaperOverlayHosting, SBWWallpaperPresenting, SBWWallpaperLegibilityProviding>
 @property  SBWallpaperAggdLogger *wallpaperAggdLogger
 @property  SBFWallpaperCoreAnalyticsLogger *wallpaperCoreAnalyticsLogger
 @property  long long _orientation
 @property  UITraitCollection *fakeBlurViewOverrideTraitCollection
 @property  <BSInvalidatable> *batterySaverAnimationAssertion
 @property  <BSInvalidatable> *wallpaperStyleAnimationAssertion
 @property  UIScreen *screen
 @property  NSString *cachingIdentifier
 @property  <SBWWallpaperPresenting> *presenter
 @property  <SBWWallpaperLegibilityProviding> *legibilityProvider
 @property  double windowLevel
 @property  UIGestureRecognizer *wallpaperGestureRecognizer
 @property  long long activeOrientationSource
 @property  SBFWallpaperConfigurationManager *wallpaperConfigurationManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double effectiveReachabilityYOffset
 @property  <SBWWallpaperPresentingDelegate> *wallpaperPresentingDelegate
 @property  long long variant
 @property  double homescreenWallpaperScale
 @property  double minimumHomescreenWallpaperScale
 @property  double lockscreenWallpaperScale
 @property  double minimumLockscreenWallpaperScale
 @property  <SBFIrisWallpaperPlaying> *irisWallpaperPlayer
 @property  {?=qqd} currentHomescreenStyleTransitionState

  // class methods
  +[SBWallpaperController sharedInstance]
  +[SBWallpaperController accessAuthenticator]

  // instance methods
  -[SBWallpaperController wallpaperStyleAnimationAssertion]
  -[SBWallpaperController wallpaperConfigurationManager]
  -[SBWallpaperController activeInterfaceOrientationWillChangeToOrientation:]
  -[SBWallpaperController addObserver:forVariant:]
  -[SBWallpaperController setLockscreenWallpaperScale:]
  -[SBWallpaperController updateWallpaperForLocations:wallpaperMode:withCompletion:]
  -[SBWallpaperController wallpaperView:wallpaperConfigurationIncludingValueTypes:]
  -[SBWallpaperController cancelInProcessAnimations]
  -[SBWallpaperController setWallpaperStyle:forPriority:forVariant:withAnimationFactory:]
  -[SBWallpaperController wallpaperCoreAnalyticsLogger]
  -[SBWallpaperController setWallpaperPresentingDelegate:]
  -[SBWallpaperController variant]
  -[SBWallpaperController endDelayingHomescreenStyleChangesForReason:animationFactory:]
  -[SBWallpaperController removeObserver:forVariant:]
  -[SBWallpaperController preheatWallpaperForVariant:]
  -[SBWallpaperController setDisallowsRasterization:forVariant:withReason:]
  -[SBWallpaperController homescreenWallpaperScale]
  -[SBWallpaperController fakeBlurViewOverrideTraitCollection]
  -[SBWallpaperController wallpaperGestureRecognizer]
  -[SBWallpaperController suspendColorSamplingForReason:]
  -[SBWallpaperController setWallpaperHidden:variant:reason:]
  -[SBWallpaperController beginDelayingHomescreenStyleChangesForReason:]
  -[SBWallpaperController updateIrisWallpaperForStaticMode]
  -[SBWallpaperController cachingIdentifier]
  -[SBWallpaperController _noteSignificantTimeChanged:]
  -[SBWallpaperController wallpaperViewDidChangeWantsRasterization:]
  -[SBWallpaperController screen]
  -[SBWallpaperController setLockscreenWallpaperScale:withAnimationFactory:]
  -[SBWallpaperController setLockscreenWallpaperContentsRect:]
  -[SBWallpaperController averageColorForVariant:]
  -[SBWallpaperController beginRequiringWithReason:]
  -[SBWallpaperController wallpaperPresentingDelegate]
  -[SBWallpaperController updateIrisWallpaperForInteractiveMode]
  -[SBWallpaperController minimumHomescreenWallpaperScale]
  -[SBWallpaperController minimumLockscreenWallpaperScale]
  -[SBWallpaperController averageColorInRect:forVariant:withSmudgeRadius:]
  -[SBWallpaperController setAlpha:forWallpaperVariant:]
  -[SBWallpaperController irisWallpaperPlayer]
  -[SBWallpaperController setFakeBlurViewOverrideTraitCollection:]
  -[SBWallpaperController setVariant:withOutAnimationFactory:inAnimationFactory:completion:]
  -[SBWallpaperController contrastForVariant:]
  -[SBWallpaperController setHomescreenWallpaperScale:withAnimationFactory:]
  -[SBWallpaperController _updateWallpaperForLocations:options:wallpaperMode:withCompletion:]
  -[SBWallpaperController wallpaperView:didChangeZoomFactor:]
  -[SBWallpaperController _applicationDidFinishLaunching:]
  -[SBWallpaperController presenter]
  -[SBWallpaperController lockscreenWallpaperScale]
  -[SBWallpaperController _batterySaverModeChanged:]
  -[SBWallpaperController suspendWallpaperAnimationForReason:]
  -[SBWallpaperController updateWallpaperForLocations:withCompletion:]
  -[SBWallpaperController activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBWallpaperController removeWallpaperStyleForPriority:forVariant:withAnimationFactory:]
  -[SBWallpaperController contrastInRect:forVariant:]
  -[SBWallpaperController newFakeBlurViewForVariant:style:transformOptions:]
  -[SBWallpaperController windowLevel]
  -[SBWallpaperController averageColorInRect:forVariant:]
  -[SBWallpaperController wallpaperViewDidInvalidateBlurs:]
  -[SBWallpaperController setWallpaperStyleTransitionState:forPriority:forVariant:withAnimationFactory:]
  -[SBWallpaperController legibilitySettingsForVariant:]
  -[SBWallpaperController _wallpaperViewForVariant:]
  -[SBWallpaperController wallpaperServer:fetchOriginalVideoURLDataForVariant:completionHandler:]
  -[SBWallpaperController wallpaperServer:setWallpaperColor:darkColor:forVariants:completionHandler:]
  -[SBWallpaperController setLockscreenOnlyWallpaperAlpha:]
  -[SBWallpaperController setWallpaperStyleAnimationAssertion:]
  -[SBWallpaperController setWindowLevel:]
  -[SBWallpaperController providerLegibilitySettingsChanged:]
  -[SBWallpaperController _window]
  -[SBWallpaperController deactivateOrientationSource:]
  -[SBWallpaperController willAnimateRotationToInterfaceOrientation:duration:]
  -[SBWallpaperController setWallpaperCoreAnalyticsLogger:]
  -[SBWallpaperController wallpaperServer:setWallpaperColorName:forVariants:completionHandler:]
  -[SBWallpaperController removeReachabilityObserver:]
  -[SBWallpaperController _reloadWallpaperAndFlushCaches:completionHandler:]
  -[SBWallpaperController .cxx_destruct]
  -[SBWallpaperController _forceUpdateToSpringBoardInterfaceOrientationWithAnimationDuration:]
  -[SBWallpaperController _updateScreenBlanked]
  -[SBWallpaperController succinctDescriptionBuilder]
  -[SBWallpaperController wallpaperPresenterDidCompleteWallpaperChange:]
  -[SBWallpaperController _WallpaperOrientationNotForYou]
  -[SBWallpaperController _saveWallpaperAggdKeysForLocations:withConfiguration:]
  -[SBWallpaperController orientationSource:willRotateToInterfaceOrientation:duration:]
  -[SBWallpaperController wallpaperServer:fetchOriginalImageDataForVariant:completionHandler:]
  -[SBWallpaperController _updateWallpaperForLocations:options:withCompletion:]
  -[SBWallpaperController startHostingWallpaperOverlay:]
  -[SBWallpaperController descriptionBuilderWithMultilinePrefix:]
  -[SBWallpaperController orientationSource:didRotateFromInterfaceOrientation:]
  -[SBWallpaperController wallpaperServer:setWallpaperGradient:forVariants:completionHandler:]
  -[SBWallpaperController wallpaperServer:restoreDefaultWallpaperWithCompletionHandler:]
  -[SBWallpaperController init]
  -[SBWallpaperController activateOrientationSource:]
  -[SBWallpaperController initWithWallpaperConfigurationManager:]
  -[SBWallpaperController setBatterySaverAnimationAssertion:]
  -[SBWallpaperController descriptionWithMultilinePrefix:]
  -[SBWallpaperController orientationSource:willAnimateRotationToInterfaceOrientation:duration:]
  -[SBWallpaperController _saveWallpaperCoreAnalyticsForLocations:withConfiguration:]
  -[SBWallpaperController setVariant:]
  -[SBWallpaperController succinctDescription]
  -[SBWallpaperController wallpaperPresenter:requestsOrientationWithRefresh:]
  -[SBWallpaperController currentHomescreenStyleTransitionState]
  -[SBWallpaperController initWithScreen:orientation:variant:wallpaperConfigurationManager:cachingIdentifier:]
  -[SBWallpaperController relinquishHostingOfWallpaperOverlay]
  -[SBWallpaperController batterySaverAnimationAssertion]
  -[SBWallpaperController wallpaperAggdLogger]
  -[SBWallpaperController wallpaperPresenter:didChangeWallpaperForLocations:withConfiguration:]
  -[SBWallpaperController wallpaperServer:setWallpaperVideoWithWallpaperMode:cropRect:wallpaperMode:completionHandler:]
  -[SBWallpaperController effectiveReachabilityYOffset]
  -[SBWallpaperController settings:changedValueForKey:]
  -[SBWallpaperController initWithWallpaperConfigurationManager:cachingIdentifier:]
  -[SBWallpaperController activeOrientationSource]
  -[SBWallpaperController dealloc]
  -[SBWallpaperController _motionEffectsChanged]
  -[SBWallpaperController defaultInterfaceOrientationForSource:]
  -[SBWallpaperController setWallpaperAggdLogger:]
  -[SBWallpaperController updateOrientationAfterSourceChange]
  -[SBWallpaperController activeInterfaceOrientationSourcesDescriptions]
  -[SBWallpaperController legibilityProvider]
  -[SBWallpaperController wallpaperServer:fetchContentCutoutBoundsForVariant:orientation:completionHandler:]
  -[SBWallpaperController _isAcceptingOrientationChangesFromSource:]
  -[SBWallpaperController isWindowIgnoredForReachability:]
  -[SBWallpaperController wallpaperServer:fetchThumbnailDataForVariant:completionHandler:]
  -[SBWallpaperController wallpaperServer:acquireActiveWallpaperSceneAssertionWithAction:completionHandler:]
  -[SBWallpaperController setOrientationProvider:forSource:]
  -[SBWallpaperController addReachabilityObserver:]


_SBWallpaperWindow : SBSecureWindow
  // instance methods
  -[_SBWallpaperWindow activeInterfaceOrientation]


SBExternalGlobalDefaults : BSAbstractDefaultDomain
 @property  NSString *locale
 @property  NSArray *languages
 @property  NSArray *keyboards

  // class methods
  +[SBExternalGlobalDefaults __useDynamicMethodResolution]

  // instance methods
  -[SBExternalGlobalDefaults setLocale:]
  -[SBExternalGlobalDefaults setKeyboards:]
  -[SBExternalGlobalDefaults languages]
  -[SBExternalGlobalDefaults setLanguages:]
  -[SBExternalGlobalDefaults init]
  -[SBExternalGlobalDefaults locale]
  -[SBExternalGlobalDefaults keyboards]
  -[SBExternalGlobalDefaults removeFormattedPhoneNumberFromGlobalPreferences]
  -[SBExternalGlobalDefaults flushExternalCaches]


SBWalletNotificationSource : NSObject <NCNotificationSource>
 @property  NCNotificationDispatcher *dispatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWalletNotificationSource .cxx_destruct]
  -[SBWalletNotificationSource dispatcher]
  -[SBWalletNotificationSource setDispatcher:]
  -[SBWalletNotificationSource initWithDispatcher:]
  -[SBWalletNotificationSource postNotificationRequestForCardItem:]
  -[SBWalletNotificationSource modifyNotificationRequestForCardItem:]
  -[SBWalletNotificationSource withdrawNotificationRequestForCardItem:]


SBHBInitialPressDownGestureRecognizer : UIHBClickGestureRecognizer

SBHBInitialPressUpGestureRecognizer : UIHBClickGestureRecognizer

SBHBDoublePressDownGestureRecognizer : UIHBClickGestureRecognizer

SBHBDoublePressUpGestureRecognizer : UIHBClickGestureRecognizer

SBHBTriplePressDownGestureRecognizer : UIHBClickGestureRecognizer

SBHBSinglePressUpGestureRecognizer : UIHBClickGestureRecognizer

SBHBAcceleratedSinglePressUpGestureRecognizer : UIHBClickGestureRecognizer

SBHBTriplePressUpGestureRecognizer : UIHBClickGestureRecognizer

SBHBLongPressGestureRecognizer : UIHBLongClickGestureRecognizer

SBHBDoubleTapUpGestureRecognizer : UIHBClickGestureRecognizer

SBHomeHardwareButtonGestureRecognizerConfiguration : NSObject
 @property  SBSystemGestureManager *systemGestureManager
 @property  UIHBClickGestureRecognizer *initialButtonDownGestureRecognizer
 @property  UIHBClickGestureRecognizer *initialButtonUpGestureRecognizer
 @property  UIHBClickGestureRecognizer *singlePressUpGestureRecognizer
 @property  UIHBClickGestureRecognizer *acceleratedSinglePressUpGestureRecognizer
 @property  UIHBLongClickGestureRecognizer *longPressGestureRecognizer
 @property  UIHBClickGestureRecognizer *doublePressDownGestureRecognizer
 @property  UIHBClickGestureRecognizer *doublePressUpGestureRecognizer
 @property  UIHBClickGestureRecognizer *triplePressUpGestureRecognizer
 @property  UIHBClickGestureRecognizer *doubleTapUpGestureRecognizer
 @property  BOOL shouldConfigureDependencies

  // instance methods
  -[SBHomeHardwareButtonGestureRecognizerConfiguration systemGestureManager]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration initialButtonUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration triplePressUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setSystemGestureManager:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration .cxx_destruct]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setTriplePressUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration longPressGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration doubleTapUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration singlePressUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setAcceleratedSinglePressUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setDoublePressDownGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setDoublePressUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration doublePressUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setInitialButtonUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration doublePressDownGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setLongPressGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setInitialButtonDownGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setDoubleTapUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration initialButtonDownGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration acceleratedSinglePressUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setSinglePressUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration shouldConfigureDependencies]


SBHomeHardwareButton : NSObject <UIGestureRecognizerDelegate, SBHardwareButtonGestureParametersObserver>
 @property  SBHomeHardwareButtonActions *buttonActions
 @property  SBHardwareButtonGestureParameters *buttonGestureParameters
 @property  SBHomeHardwareButtonGestureRecognizerConfiguration *gestureRecognizerConfiguration
 @property  UIGestureRecognizer *screenshotGestureRecognizer
 @property  long long homeButtonType
 @property  long long maximumPressCount
 @property  long long maximumTapCount
 @property  BOOL longPressDidOccur
 @property  NSMutableDictionary *emulatedPerSenderDownCount
 @property  BKSButtonHapticsDefinition *buttonDefinition
 @property  BOOL buttonDown
 @property  BOOL supportsAcceleratedAppDismiss
 @property  long long hapticType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeHardwareButton initialButtonUp:]
  -[SBHomeHardwareButton isButtonDown]
  -[SBHomeHardwareButton gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBHomeHardwareButton _reconfigureHomeButton]
  -[SBHomeHardwareButton gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBHomeHardwareButton maximumTapCount]
  -[SBHomeHardwareButton setButtonGestureParameters:]
  -[SBHomeHardwareButton _cancelGestureRecognizer:]
  -[SBHomeHardwareButton .cxx_destruct]
  -[SBHomeHardwareButton provider:didUpdateButtonGestureParameters:]
  -[SBHomeHardwareButton configureForwardingToLockButton:]
  -[SBHomeHardwareButton buttonGestureParameters]
  -[SBHomeHardwareButton screenshotRecognizerDidRecognize:]
  -[SBHomeHardwareButton initialButtonDown:]
  -[SBHomeHardwareButton emulatedPerSenderDownCount]
  -[SBHomeHardwareButton gestureRecognizerConfiguration]
  -[SBHomeHardwareButton _processDoubleDownAndDoubleUpSimultaneously]
  -[SBHomeHardwareButton acceleratedSinglePressUp:]
  -[SBHomeHardwareButton _acceleratedSinglePressRecognizerShouldBegin]
  -[SBHomeHardwareButton setMaximumPressCount:]
  -[SBHomeHardwareButton doublePressDown:]
  -[SBHomeHardwareButton cancelLongPress]
  -[SBHomeHardwareButton gestureRecognizerShouldBegin:]
  -[SBHomeHardwareButton performAfterMenuButtonUpIsHandledUsingBlock:]
  -[SBHomeHardwareButton _startObservingReconfigurationTriggers]
  -[SBHomeHardwareButton setHapticType:]
  -[SBHomeHardwareButton removeHintSuppressionAssertion:]
  -[SBHomeHardwareButton longPress:]
  -[SBHomeHardwareButton _reconfigureGestureRecognizersForNewMaximumTapCount:oldMaximumTapCount:]
  -[SBHomeHardwareButton supportsAcceleratedAppDismiss]
  -[SBHomeHardwareButton doubleTapUp:]
  -[SBHomeHardwareButton setMaximumTapCount:]
  -[SBHomeHardwareButton homeButtonType]
  -[SBHomeHardwareButton _singlePressUp:]
  -[SBHomeHardwareButton _isMenuDoublePressAllowed:]
  -[SBHomeHardwareButton _setFingerDetectionEnabled:]
  -[SBHomeHardwareButton _reconfigureGestureRecognizersForNewMaximumPressCount:oldMaximumPressCount:]
  -[SBHomeHardwareButton setLongPressDidOccur:]
  -[SBHomeHardwareButton addLongPressDurationAssertion:]
  -[SBHomeHardwareButton buttonActions]
  -[SBHomeHardwareButton setScreenshotGestureRecognizer:]
  -[SBHomeHardwareButton maximumPressCount]
  -[SBHomeHardwareButton _longPressGestureRecognizerShouldBegin:]
  -[SBHomeHardwareButton _createGestureRecognizersWithConfiguration:]
  -[SBHomeHardwareButton setHomeButtonType:]
  -[SBHomeHardwareButton triplePressUp:]
  -[SBHomeHardwareButton buttonDefinition]
  -[SBHomeHardwareButton performWhenMenuButtonIsUpUsingBlock:]
  -[SBHomeHardwareButton setEmulatedPerSenderDownCount:]
  -[SBHomeHardwareButton addHintSuppressionAssertion:]
  -[SBHomeHardwareButton doublePressUp:]
  -[SBHomeHardwareButton hapticType]
  -[SBHomeHardwareButton setGestureRecognizerConfiguration:]
  -[SBHomeHardwareButton initWithScreenshotGestureRecognizer:homeButtonType:]
  -[SBHomeHardwareButton setButtonDefinition:]
  -[SBHomeHardwareButton removeLongPressDurationAssertion:]
  -[SBHomeHardwareButton screenshotGestureRecognizer]
  -[SBHomeHardwareButton initWithScreenshotGestureRecognizer:homeButtonType:buttonActions:gestureRecognizerConfiguration:]
  -[SBHomeHardwareButton setButtonActions:]
  -[SBHomeHardwareButton _isMenuDoublePressDisabled]
  -[SBHomeHardwareButton emulateHomeButtonEventsIfNeeded:]
  -[SBHomeHardwareButton _terminateHomeButtonEventAtCount:]
  -[SBHomeHardwareButton singlePressUp:]
  -[SBHomeHardwareButton longPressDidOccur]


SBSplitViewSessionMetric : SBAnalyticsStateMachineEventHandler
 @property  NSUUID *aggregateSessionIdentifier
 @property  double aggregateSessionStartTimestamp
 @property  NSString *aggregateSessionStartReason
 @property  double individualSessionStartTimestamp
 @property  NSString *individualSessionStartReason
 @property  NSString *individualSessionPrimaryBundleIdentifier
 @property  NSString *individualSessionSideBundleIdentifier

  // instance methods
  -[SBSplitViewSessionMetric setAggregateSessionStartReason:]
  -[SBSplitViewSessionMetric individualSessionPrimaryBundleIdentifier]
  -[SBSplitViewSessionMetric _bundleIdentifierForElementWithLayoutRole:fromContext:]
  -[SBSplitViewSessionMetric .cxx_destruct]
  -[SBSplitViewSessionMetric _sendAggregateSessionCoreAnalyticsEventWithIdentifier:startReason:endReason:duration:doNotDisturbActive:hardwareKeyboardAttached:]
  -[SBSplitViewSessionMetric setIndividualSessionStartTimestamp:]
  -[SBSplitViewSessionMetric initWithHeartbeatMetricPersistence:]
  -[SBSplitViewSessionMetric individualSessionStartReason]
  -[SBSplitViewSessionMetric individualSessionSideBundleIdentifier]
  -[SBSplitViewSessionMetric aggregateSessionIdentifier]
  -[SBSplitViewSessionMetric setIndividualSessionPrimaryBundleIdentifier:]
  -[SBSplitViewSessionMetric setAggregateSessionStartTimestamp:]
  -[SBSplitViewSessionMetric setIndividualSessionSideBundleIdentifier:]
  -[SBSplitViewSessionMetric individualSessionStartTimestamp]
  -[SBSplitViewSessionMetric aggregateSessionStartTimestamp]
  -[SBSplitViewSessionMetric sendCoreAnalyticsEventWithName:payload:]
  -[SBSplitViewSessionMetric aggregateSessionStartReason]
  -[SBSplitViewSessionMetric setAggregateSessionIdentifier:]
  -[SBSplitViewSessionMetric setIndividualSessionStartReason:]
  -[SBSplitViewSessionMetric _sendIndividualSessionCoreAnalyticsEventWithAggregateIdentifier:startReason:endReason:duration:primaryBundleIdentifier:sideBundleIdentifier:doNotDisturbActive:hardwareKeyboardAttached:]


SBRotateHomeScreenWorkspaceTransaction : SBMainWorkspaceTransaction <SBUIAnimationControllerObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRotateHomeScreenWorkspaceTransaction begin]
  -[SBRotateHomeScreenWorkspaceTransaction .cxx_destruct]


SBEntityRemovalCrossblurSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalCrossblurSwitcherModifier transitionDidEnd]
  -[SBEntityRemovalCrossblurSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalCrossblurSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalCrossblurSwitcherModifier frameForIndex:]
  -[SBEntityRemovalCrossblurSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalCrossblurSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalCrossblurSwitcherModifier handleTimerEvent:]
  -[SBEntityRemovalCrossblurSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBEntityRemovalCrossblurSwitcherModifier didMoveToParentModifier:]
  -[SBEntityRemovalCrossblurSwitcherModifier transitionWillUpdate]
  -[SBEntityRemovalCrossblurSwitcherModifier initWithTransitionID:appLayout:multitaskingModifier:]


SBAppSwitcherModel : NSObject <SBRecentAppLayoutsDelegate>
 @property  <SBAppSwitcherModelDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAppSwitcherModel appSwitcherHeaderIconImageDescriptorName]

  // instance methods
  -[SBAppSwitcherModel remove:]
  -[SBAppSwitcherModel addAppLayout:atIndex:]
  -[SBAppSwitcherModel addToFront:]
  -[SBAppSwitcherModel .cxx_destruct]
  -[SBAppSwitcherModel _warmUpIconsForAppLayout:]
  -[SBAppSwitcherModel setDelegate:]
  -[SBAppSwitcherModel _adjustedIndexForVisibleAppLayoutAtIndex:]
  -[SBAppSwitcherModel init]
  -[SBAppSwitcherModel recentAppLayouts:didRemoveAppLayoutForFallingOffList:]
  -[SBAppSwitcherModel _warmUpIconsForRecentAppLayouts:]
  -[SBAppSwitcherModel hide:]
  -[SBAppSwitcherModel appLayoutsForBundleIdentifier:includingHiddenAppLayouts:]
  -[SBAppSwitcherModel recentDisplayItemsForBundleIdentifier:includingHiddenAppLayouts:]
  -[SBAppSwitcherModel delegate]
  -[SBAppSwitcherModel addAppLayout:afterAppLayout:]
  -[SBAppSwitcherModel modifyWithDropContext:]
  -[SBAppSwitcherModel appLayoutsIncludingHiddenAppLayouts:]
  -[SBAppSwitcherModel dealloc]
  -[SBAppSwitcherModel indexOfDisplayItem:visible:]
  -[SBAppSwitcherModel replaceAppLayout:withAppLayout:]
  -[SBAppSwitcherModel initWithIconController:applicationController:recents:]
  -[SBAppSwitcherModel _recentAppLayoutsController]
  -[SBAppSwitcherModel removeAppLayouts:]


SBWorkspaceTransitionContext : NSObject <BSDescriptionProviding>
 @property  SBWorkspaceTransitionRequest *request
 @property  NSSet *entities
 @property  NSSet *previousEntities
 @property  BOOL finalized
 @property  BOOL animationDisabled
 @property  BSAnimationSettings *animationSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWorkspaceTransitionContext context]

  // instance methods
  -[SBWorkspaceTransitionContext previousEntityForKey:]
  -[SBWorkspaceTransitionContext setRequest:]
  -[SBWorkspaceTransitionContext compactDescriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceTransitionContext addFinalizeBlock:]
  -[SBWorkspaceTransitionContext animationDisabled]
  -[SBWorkspaceTransitionContext entityForKey:]
  -[SBWorkspaceTransitionContext previousEntityForIdentifier:]
  -[SBWorkspaceTransitionContext setAnimationDisabled:]
  -[SBWorkspaceTransitionContext setPreviousEntity:forKey:]
  -[SBWorkspaceTransitionContext previousEntities]
  -[SBWorkspaceTransitionContext setEntity:forKey:]
  -[SBWorkspaceTransitionContext setAnimationSettings:]
  -[SBWorkspaceTransitionContext animationSettings]
  -[SBWorkspaceTransitionContext entityForIdentifier:]
  -[SBWorkspaceTransitionContext entities]
  -[SBWorkspaceTransitionContext isFinalized]
  -[SBWorkspaceTransitionContext finalize]
  -[SBWorkspaceTransitionContext .cxx_destruct]
  -[SBWorkspaceTransitionContext succinctDescriptionBuilder]
  -[SBWorkspaceTransitionContext descriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceTransitionContext init]
  -[SBWorkspaceTransitionContext descriptionWithMultilinePrefix:]
  -[SBWorkspaceTransitionContext request]
  -[SBWorkspaceTransitionContext succinctDescription]


SBAnimationCompletionDodgingModifierEvent : SBDodgingModifierEvent
 @property  NSString *identifier
 @property  BOOL finished
 @property  BOOL retargeted

  // instance methods
  -[SBAnimationCompletionDodgingModifierEvent finished]
  -[SBAnimationCompletionDodgingModifierEvent .cxx_destruct]
  -[SBAnimationCompletionDodgingModifierEvent identifier]
  -[SBAnimationCompletionDodgingModifierEvent retargeted]
  -[SBAnimationCompletionDodgingModifierEvent type]
  -[SBAnimationCompletionDodgingModifierEvent initWithIdentifier:finished:retargeted:]


SBRotationLockHUDViewController : SBHUDViewController
 @property  BOOL locked

  // instance methods
  -[SBRotationLockHUDViewController init]
  -[SBRotationLockHUDViewController isLocked]
  -[SBRotationLockHUDViewController setLocked:]
  -[SBRotationLockHUDViewController _updateLockedImage]


SBRotationLockHUDController : NSObject
  // class methods
  +[SBRotationLockHUDController activateWithLocked:]


SBDodgingModifier : SBChainableModifier <SBDodgingQueryProviding, SBDodgingContextProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDodgingModifier queryProtocol]
  +[SBDodgingModifier contextProtocol]
  +[SBDodgingModifier newEventResponse]

  // instance methods
  -[SBDodgingModifier loggingCategory]
  -[SBDodgingModifier _handleEvent:]
  -[SBDodgingModifier handleRemovalEvent:]
  -[SBDodgingModifier handleInsertionEvent:]
  -[SBDodgingModifier handleCustomEvent:]
  -[SBDodgingModifier handleAnimationCompletionEvent:]
  -[SBDodgingModifier handlePreferenceChangeEvent:]
  -[SBDodgingModifier handleRotationEvent:]
  -[SBDodgingModifier runsInternalVerificationAfterEventDispatch]


SBSlideOverToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSlideOverToFullScreenSwitcherModifier transitionWillBegin]
  -[SBSlideOverToFullScreenSwitcherModifier wantsSlideOverTongue]
  -[SBSlideOverToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSlideOverToFullScreenSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBSlideOverToFullScreenSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBSlideOverToFullScreenSwitcherModifier scaleForIndex:]
  -[SBSlideOverToFullScreenSwitcherModifier frameForIndex:]
  -[SBSlideOverToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBSlideOverToFullScreenSwitcherModifier .cxx_destruct]
  -[SBSlideOverToFullScreenSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBSlideOverToFullScreenSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBSlideOverToFullScreenSwitcherModifier wallpaperStyle]
  -[SBSlideOverToFullScreenSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBSlideOverToFullScreenSwitcherModifier cornerRadiiForIndex:]
  -[SBSlideOverToFullScreenSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBSlideOverToFullScreenSwitcherModifier preferredAppLayoutToReuseAccessoryForAppLayout:fromAppLayouts:]
  -[SBSlideOverToFullScreenSwitcherModifier handleSceneReadyEvent:]
  -[SBSlideOverToFullScreenSwitcherModifier initWithTransitionID:slideOverAppLayout:fullScreenAppLayout:replacingMainAppLayout:]


SBDataPlanExpirationAlertItem : SBDataPlanAccountAlertItem
 @property  NSDate *expirationDate

  // instance methods
  -[SBDataPlanExpirationAlertItem .cxx_destruct]
  -[SBDataPlanExpirationAlertItem setExpirationDate:]
  -[SBDataPlanExpirationAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanExpirationAlertItem expirationDate]
  -[SBDataPlanExpirationAlertItem initWithAccountURL:expirationDate:]


SBSwitcherCardUpdateTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSwitcherCardUpdateTestRecipe load]

  // instance methods
  -[SBSwitcherCardUpdateTestRecipe title]
  -[SBSwitcherCardUpdateTestRecipe handleVolumeIncrease]
  -[SBSwitcherCardUpdateTestRecipe handleVolumeDecrease]


SBBluetoothAccessoryLowPowerAlertItem : SBAlertItem
  // instance methods
  -[SBBluetoothAccessoryLowPowerAlertItem .cxx_destruct]
  -[SBBluetoothAccessoryLowPowerAlertItem wakeDisplay]
  -[SBBluetoothAccessoryLowPowerAlertItem configure:requirePasscodeForActions:]
  -[SBBluetoothAccessoryLowPowerAlertItem initWithAccessory:batteryLevel:]


SBElasticVolumeViewController : SBElasticValueViewController <MRUVolumeHUDRouteDescriptionProviderDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBElasticVolumeViewController initWithDataSource:]
  -[SBElasticVolumeViewController log]
  -[SBElasticVolumeViewController .cxx_destruct]
  -[SBElasticVolumeViewController dataSource]
  -[SBElasticVolumeViewController createSliderView]
  -[SBElasticVolumeViewController sliderAccessibilityIdentifier]
  -[SBElasticVolumeViewController layoutAxisForInterfaceOrientation:]
  -[SBElasticVolumeViewController interactiveValueUpdateDiscontinuityInterval]
  -[SBElasticVolumeViewController _debugHandleNextRoute]
  -[SBElasticVolumeViewController _debugHandleResetRoute]
  -[SBElasticVolumeViewController updateActiveRouteDisplay:]
  -[SBElasticVolumeViewController volumeHUDRouteDescriptionProvider:didChangeOutputDeviceAsset:]


SBApplicationLaunchNotifyAlertItem : SBAlertItem
 @property  SBApplication *application

  // instance methods
  -[SBApplicationLaunchNotifyAlertItem initWithApplication:]
  -[SBApplicationLaunchNotifyAlertItem application]
  -[SBApplicationLaunchNotifyAlertItem .cxx_destruct]
  -[SBApplicationLaunchNotifyAlertItem dismissOnLock]


SBDismissOverlaysAnimationController : SBUIAnimationController
 @property  unsigned long dismissOptions

  // class methods
  +[SBDismissOverlaysAnimationController willDismissOverlaysForDismissOptions:]
  +[SBDismissOverlaysAnimationController _overlaysToDismissForOptions:]

  // instance methods
  -[SBDismissOverlaysAnimationController animationSettings]
  -[SBDismissOverlaysAnimationController _canBeInterrupted]
  -[SBDismissOverlaysAnimationController _startAnimation]
  -[SBDismissOverlaysAnimationController initWithTransitionContextProvider:]
  -[SBDismissOverlaysAnimationController initWithTransitionContextProvider:options:]
  -[SBDismissOverlaysAnimationController dismissOptions]


SBHomeGrabberView : UIView <PTSettingsKeyPathObserver, SBAttentionAwarenessClientDelegate, MTLumaDodgePillBackgroundLuminanceObserver, SBSystemPointerInteractionDelegate, SBMousePointerHardwareConnectionObserver>
 @property  <SBHomeGrabberDelegate> *delegate
 @property  <SBHomeGrabberPointerClickDelegate> *pointerClickDelegate
 @property  BOOL autoHides
 @property  BOOL edgeProtectEnabled
 @property  long long colorBias
 @property  BOOL suppressesBounce
 @property  double suggestedEdgeSpacing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGrabberView settings:changedValueForKeyPath:]
  -[SBHomeGrabberView hitTest:withEvent:]
  -[SBHomeGrabberView initWithCoder:]
  -[SBHomeGrabberView styleForRegion:forView:]
  -[SBHomeGrabberView _bounce]
  -[SBHomeGrabberView setColorBias:]
  -[SBHomeGrabberView .cxx_destruct]
  -[SBHomeGrabberView shouldBeginPointerInteractionAtLocation:forView:]
  -[SBHomeGrabberView isHidden]
  -[SBHomeGrabberView layoutSubviews]
  -[SBHomeGrabberView setDelegate:]
  -[SBHomeGrabberView pointerClickDelegate]
  -[SBHomeGrabberView client:attentionLostTimeoutDidExpire:forConfigurationGeneration:withAssociatedObject:]
  -[SBHomeGrabberView setPointerClickDelegate:]
  -[SBHomeGrabberView updateStyle]
  -[SBHomeGrabberView initWithFrame:]
  -[SBHomeGrabberView delegate]
  -[SBHomeGrabberView dealloc]
  -[SBHomeGrabberView colorBias]
  -[SBHomeGrabberView clientDidResetForUserAttention:]
  -[SBHomeGrabberView setHidden:]
  -[SBHomeGrabberView lumaDodgePillDidDetectBackgroundLuminanceChange:]
  -[SBHomeGrabberView suggestedEdgeSpacing]
  -[SBHomeGrabberView suggestedSizeForContentWidth:]
  -[SBHomeGrabberView regionAtLocation:forView:]
  -[SBHomeGrabberView setHidden:forReason:withAnimationSettings:]
  -[SBHomeGrabberView setEdgeProtectEnabled:]
  -[SBHomeGrabberView turnOnAutoHideWithInitialDelay:]
  -[SBHomeGrabberView turnOffAutoHideWithDelay:]
  -[SBHomeGrabberView grabberFrameForBounds:]
  -[SBHomeGrabberView setSuppressesBounce:]
  -[SBHomeGrabberView initWithFrame:shouldEnableGestures:]
  -[SBHomeGrabberView mousePointerManager:hardwarePointingDeviceAttachedDidChange:]
  -[SBHomeGrabberView setAutoHides:]
  -[SBHomeGrabberView initWithFrame:settings:shouldEnableGestures:]
  -[SBHomeGrabberView _newPillView]
  -[SBHomeGrabberView _setSystemPointerInteractionEnabled:]
  -[SBHomeGrabberView _updateIdleTouchAwarenessClient]
  -[SBHomeGrabberView _autohideEffectivelyEnabled]
  -[SBHomeGrabberView resetAutoHideWithInitialDelay:]
  -[SBHomeGrabberView resetAutoHide]
  -[SBHomeGrabberView _calculateStyle]
  -[SBHomeGrabberView _calculatePresence]
  -[SBHomeGrabberView _animationSettingsForTransitionFromStyle:toStyle:fromPresence:toPresence:]
  -[SBHomeGrabberView _updatePresence:style:withAnimationSettings:]
  -[SBHomeGrabberView _effectiveLumaDodgePillSettings]
  -[SBHomeGrabberView updateStyleWithAnimationSettings:]
  -[SBHomeGrabberView _edgeProtectEffectivelyEnabled]
  -[SBHomeGrabberView _calculateLumaStyle]
  -[SBHomeGrabberView _animateToStyle:disallowAdditive:withAnimationSettings:]
  -[SBHomeGrabberView _calculatePillFrame]
  -[SBHomeGrabberView _pointerInteractionHitTestRect]
  -[SBHomeGrabberView forgetBackgroundLuminance]
  -[SBHomeGrabberView _bounceHitTest:]
  -[SBHomeGrabberView _invalidateInitialAutoHideTime]
  -[SBHomeGrabberView _noteActiveForTouchThatShouldUnhideImmediately:]
  -[SBHomeGrabberView autoHides]
  -[SBHomeGrabberView isEdgeProtectEnabled]
  -[SBHomeGrabberView suppressesBounce]


SBHomeGrabberRevealGesturesManager : NSObject <UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHomeGrabberRevealGesturesManager sharedInstance]

  // instance methods
  -[SBHomeGrabberRevealGesturesManager gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBHomeGrabberRevealGesturesManager .cxx_destruct]
  -[SBHomeGrabberRevealGesturesManager init]
  -[SBHomeGrabberRevealGesturesManager _tapRecognized:]
  -[SBHomeGrabberRevealGesturesManager gestureRecognizer:shouldReceiveTouch:]
  -[SBHomeGrabberRevealGesturesManager registerGrabber:]
  -[SBHomeGrabberRevealGesturesManager unregisterGrabber:]
  -[SBHomeGrabberRevealGesturesManager _edgePanChanged:]
  -[SBHomeGrabberRevealGesturesManager gestureRecognizerContainsPointerEvent:]


SBLiftToWakeController : NSObject <CMWakeGestureDelegate>
 @property  SBIdleTimerDefaults *idleTimerDefaults
 @property  BOOL enabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLiftToWakeController sharedController]

  // instance methods
  -[SBLiftToWakeController _ignoredTransition:]
  -[SBLiftToWakeController _idleTimerDefaults]
  -[SBLiftToWakeController .cxx_destruct]
  -[SBLiftToWakeController _handleBacklightLevelChanged:]
  -[SBLiftToWakeController _reconsiderEnablement]
  -[SBLiftToWakeController _isObservingWakeGestureManager]
  -[SBLiftToWakeController _setIdleTimerDefaults:]
  -[SBLiftToWakeController _screenTurnedOn]
  -[SBLiftToWakeController init]
  -[SBLiftToWakeController wakeGestureManager:didUpdateWakeGesture:]
  -[SBLiftToWakeController wakeGestureManager:didUpdateWakeGesture:orientation:detectedAt:]
  -[SBLiftToWakeController addObserver:]
  -[SBLiftToWakeController isEnabled]
  -[SBLiftToWakeController _screenTurnedOff]
  -[SBLiftToWakeController wakeGestureManager:didUpdateWakeGesture:orientation:]
  -[SBLiftToWakeController _stopObservingIfNecessary]
  -[SBLiftToWakeController removeObserver:]
  -[SBLiftToWakeController initWithBacklightController:idleTimerDefaults:]
  -[SBLiftToWakeController _sendTransitionToObservers:deviceOrientation:]
  -[SBLiftToWakeController _startObservingIfNecessary]


SBTransientOverlayWallpaperEffectView : UIView
 @property  long long containerOrientation
 @property  long long wallpaperStyle

  // instance methods
  -[SBTransientOverlayWallpaperEffectView setTransitionState:]
  -[SBTransientOverlayWallpaperEffectView containerOrientation]
  -[SBTransientOverlayWallpaperEffectView setContainerOrientation:]
  -[SBTransientOverlayWallpaperEffectView setWallpaperStyle:]
  -[SBTransientOverlayWallpaperEffectView prepareToAnimateToTransitionState:]
  -[SBTransientOverlayWallpaperEffectView .cxx_destruct]
  -[SBTransientOverlayWallpaperEffectView layoutSubviews]
  -[SBTransientOverlayWallpaperEffectView wallpaperStyle]
  -[SBTransientOverlayWallpaperEffectView initWithFrame:wallpaperVariant:]
  -[SBTransientOverlayWallpaperEffectView _updateWallpaperGeometry]
  -[SBTransientOverlayWallpaperEffectView _currentWallpaperTransform]


SBAppSwitcherServicePageContentView : UIView <SBAppSwitcherPageContentView>
 @property  long long orientation
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  BOOL contentRequiresGroupOpacity
 @property  BOOL active
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherServicePageContentView setOrientation:]
  -[SBAppSwitcherServicePageContentView setVisible:]
  -[SBAppSwitcherServicePageContentView isActive]
  -[SBAppSwitcherServicePageContentView contentRequiresGroupOpacity]
  -[SBAppSwitcherServicePageContentView isVisible]
  -[SBAppSwitcherServicePageContentView setCornerRadius:]
  -[SBAppSwitcherServicePageContentView sizeThatFits:]
  -[SBAppSwitcherServicePageContentView setMaskedCorners:]
  -[SBAppSwitcherServicePageContentView orientation]
  -[SBAppSwitcherServicePageContentView initWithFrame:]
  -[SBAppSwitcherServicePageContentView cornerRadius]
  -[SBAppSwitcherServicePageContentView setActive:]
  -[SBAppSwitcherServicePageContentView invalidate]
  -[SBAppSwitcherServicePageContentView maskedCorners]


SBProactiveHomeScreenUsageObserver : NSObject <SBHHomeScreenUsageMonitorObserver>
 @property  SBHIconManager *iconManager
 @property  ATXHomeScreenPrediction *currentPrediction
 @property  <SBProactiveHomeScreenUsageObserverDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProactiveHomeScreenUsageObserver iconModelDidLayout:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteDataSourceDidDisappear:forWidgetIcon:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteTodayViewAtLocation:scrolledWithIconVisibility:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:widgetDiscoverabilityDidAcceptSuggestion:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:widgetDiscoverabilityDidRejectSuggestion:]
  -[SBProactiveHomeScreenUsageObserver .cxx_destruct]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregatorDidStartDiscoveringWidgets:]
  -[SBProactiveHomeScreenUsageObserver iconModel]
  -[SBProactiveHomeScreenUsageObserver iconManager]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteCurrentPageIndexChanged:]
  -[SBProactiveHomeScreenUsageObserver setDelegate:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserDislikedWidgetIconStackSuggestion:]
  -[SBProactiveHomeScreenUsageObserver logHomeScreenPageDidAppearWithPageIndex:]
  -[SBProactiveHomeScreenUsageObserver pushCurrentHomeScreenPagesConfiguration]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteWidgetIconStackChangedActiveWidget:]
  -[SBProactiveHomeScreenUsageObserver widgetIdentifiablesDictionaryForIconListModel:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserAddedWidgetIconStackSuggestion:]
  -[SBProactiveHomeScreenUsageObserver rootFolder]
  -[SBProactiveHomeScreenUsageObserver deviceLockStateDidChange:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteDataSourceDidAppear:forWidgetIcon:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteRootControllerWillAppearWithPageIndex:]
  -[SBProactiveHomeScreenUsageObserver delegate]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregatorWidgetDiscoverabilityDidEnterEditingMode:]
  -[SBProactiveHomeScreenUsageObserver currentPrediction]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregatorDidNoteHomeScreenLayoutChanged:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserTappedWidgetIcon:withURL:]
  -[SBProactiveHomeScreenUsageObserver logTodayViewDidAppear]
  -[SBProactiveHomeScreenUsageObserver proactiveStackForWidgetIcon:atIndex:gridCellInfo:]
  -[SBProactiveHomeScreenUsageObserver proactiveWidgetForIconDataSource:ofIcon:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserDislikedSiriSuggestionOnWidgetIconStackSuggestion:]
  -[SBProactiveHomeScreenUsageObserver pushCurrentDockConfiguration]
  -[SBProactiveHomeScreenUsageObserver pushCurrentHomeScreenConfiguration]
  -[SBProactiveHomeScreenUsageObserver initWithIconManager:]
  -[SBProactiveHomeScreenUsageObserver pushCurrentTodayConfiguration]
  -[SBProactiveHomeScreenUsageObserver proactiveWidgetForWidget:ofIcon:]
  -[SBProactiveHomeScreenUsageObserver setCurrentPrediction:]


SBOrientationLockManager : NSObject
  // class methods
  +[SBOrientationLockManager sharedInstance]

  // instance methods
  -[SBOrientationLockManager unlock]
  -[SBOrientationLockManager enableLockOverrideForReason:forceOrientation:]
  -[SBOrientationLockManager _endShimmingForReason:]
  -[SBOrientationLockManager _removeLockOverrideReason:]
  -[SBOrientationLockManager userLockOrientation]
  -[SBOrientationLockManager _updateLockStateWithOrientation:forceUpdateHID:changes:]
  -[SBOrientationLockManager .cxx_destruct]
  -[SBOrientationLockManager _addLockOverrideReason:orientation:force:]
  -[SBOrientationLockManager succinctDescriptionBuilder]
  -[SBOrientationLockManager lockOverrideEnabled]
  -[SBOrientationLockManager descriptionBuilderWithMultilinePrefix:]
  -[SBOrientationLockManager init]
  -[SBOrientationLockManager descriptionWithMultilinePrefix:]
  -[SBOrientationLockManager restoreStateFromPrefs]
  -[SBOrientationLockManager succinctDescription]
  -[SBOrientationLockManager _updateLockStateWithChanges:]
  -[SBOrientationLockManager effectiveLockedOrientation]
  -[SBOrientationLockManager updateLockOverrideForCurrentDeviceOrientation]
  -[SBOrientationLockManager lock:]
  -[SBOrientationLockManager isUserLocked]
  -[SBOrientationLockManager isEffectivelyLocked]
  -[SBOrientationLockManager setLockOverrideEnabled:forReason:]
  -[SBOrientationLockManager dealloc]
  -[SBOrientationLockManager enableLockOverrideForReason:suggestOrientation:]
  -[SBOrientationLockManager lock]
  -[SBOrientationLockManager _handler_runLoopObserverDispose]
  -[SBOrientationLockManager deviceOrientationAsFarAsAppsAreConcerned]
  -[SBOrientationLockManager _setupRunLoopObserverIfNecessaryForOrientation:andInitialLockState:]
  -[SBOrientationLockManager _beginShimmingForReason:]


SBPIPInteractionController : NSObject <UIGestureRecognizerDelegate, SBPIPSystemGestureRecognizerDelegate, PTSettingsKeyPathObserver, SBPIPPositionHyperregionComposerDelegate>
 @property  UIView *targetView
 @property  {CGSize=dd} containerSize
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} initialFrame
 @property  double preferredScale
 @property  double currentNormalizedScale
 @property  double stashProgress
 @property  long long orientation
 @property  SBPIPContentViewLayoutSettings *layoutSettings
 @property  unsigned long canonicalPosition
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} nonoperationalFrame
 @property  NSString *debugName
 @property  UIView *targetOverlayView
 @property  BOOL enabled
 @property  BOOL stashed
 @property  double preferredNormalizedScale
 @property  {CGSize=dd} preferredContentSize
 @property  {UIEdgeInsets=dddd} edgeInsets
 @property  {UIEdgeInsets=dddd} stashedPadding
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPInteractionController settings:changedValueForKeyPath:]
  -[SBPIPInteractionController preferredScale]
  -[SBPIPInteractionController debugName]
  -[SBPIPInteractionController _setupStateCapture]
  -[SBPIPInteractionController preferredContentSize]
  -[SBPIPInteractionController _isRotating]
  -[SBPIPInteractionController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBPIPInteractionController targetView]
  -[SBPIPInteractionController handlePinchGesture:]
  -[SBPIPInteractionController .cxx_destruct]
  -[SBPIPInteractionController isPinching]
  -[SBPIPInteractionController isRotating]
  -[SBPIPInteractionController _currentScale]
  -[SBPIPInteractionController setEdgeInsets:]
  -[SBPIPInteractionController handlePanGesture:]
  -[SBPIPInteractionController _setupGestureRecognizers]
  -[SBPIPInteractionController edgeInsets]
  -[SBPIPInteractionController gestureRecognizerShouldBegin:]
  -[SBPIPInteractionController layoutSettings]
  -[SBPIPInteractionController _isPanning]
  -[SBPIPInteractionController setPreferredContentSize:]
  -[SBPIPInteractionController _isInteractive]
  -[SBPIPInteractionController orientation]
  -[SBPIPInteractionController isEnabled]
  -[SBPIPInteractionController gestureRecognizer:shouldReceiveTouch:]
  -[SBPIPInteractionController _currentPosition]
  -[SBPIPInteractionController dealloc]
  -[SBPIPInteractionController _updatePreferredContentSize]
  -[SBPIPInteractionController containerSize]
  -[SBPIPInteractionController setEnabled:]
  -[SBPIPInteractionController _removeGestureRecognizers]
  -[SBPIPInteractionController _isPinching]
  -[SBPIPInteractionController initialFrame]
  -[SBPIPInteractionController _currentRotation]
  -[SBPIPInteractionController _setDefaults]
  -[SBPIPInteractionController setStashed:]
  -[SBPIPInteractionController gestureRecognizerShouldFailForMovementPastHysteresis:]
  -[SBPIPInteractionController isStashed]
  -[SBPIPInteractionController _setupDefaultInteractorsAndHyperRegions]
  -[SBPIPInteractionController _updateInteractorsAndCommit:]
  -[SBPIPInteractionController _setupForInitialFrame]
  -[SBPIPInteractionController _currentPositionForLayoutReason:]
  -[SBPIPInteractionController currentNormalizedScale]
  -[SBPIPInteractionController preferredNormalizedScale]
  -[SBPIPInteractionController _currentSizeForLayoutReason:]
  -[SBPIPInteractionController _lastSteadySize]
  -[SBPIPInteractionController stashProgress]
  -[SBPIPInteractionController _hasValidInteractionTargetView]
  -[SBPIPInteractionController handleRotationGesture:]
  -[SBPIPInteractionController _updateSettingsDrivenParameters]
  -[SBPIPInteractionController addPositionRegionComposer:]
  -[SBPIPInteractionController _setNeedsLayoutForTraits:withReason:behavior:]
  -[SBPIPInteractionController _closestToDefaultCornersPosition]
  -[SBPIPInteractionController _performInitialLayoutIfNeeded]
  -[SBPIPInteractionController _isGesturing]
  -[SBPIPInteractionController _canonicalPositionForPoint:]
  -[SBPIPInteractionController setPlatformMetrics:contentSize:animationBehavior:]
  -[SBPIPInteractionController _proratedScaleForNormalizedScale:]
  -[SBPIPInteractionController _setPreferredScale:additionalReasons:animationBehavior:]
  -[SBPIPInteractionController _cancelAllGestures]
  -[SBPIPInteractionController _hasInFlightLayoutAnimations]
  -[SBPIPInteractionController _setNeedsLayoutForTraits:withReason:behavior:layoutCompletion:interactionCompletion:]
  -[SBPIPInteractionController setPreferredNormalizedScale:additionalReasons:animationBehavior:]
  -[SBPIPInteractionController _applyPreferredScale]
  -[SBPIPInteractionController _isPreferredContentSizeDirty]
  -[SBPIPInteractionController _noteStashProgress:withReason:]
  -[SBPIPInteractionController _stashTabCompensationTransformForStashProgress:reason:]
  -[SBPIPInteractionController _roundPosition:forSize:]
  -[SBPIPInteractionController _stashProgressForPosition:]
  -[SBPIPInteractionController _isPositionCloserToStashedLeftRegion:closestPointOut:]
  -[SBPIPInteractionController _isSystemGestureRecognizer:]
  -[SBPIPInteractionController _convertPointToInteractionTargetView:fromSystemGestureRecognizer:]
  -[SBPIPInteractionController __moveToAnchorPoint:reason:]
  -[SBPIPInteractionController _handleGestureBeganState:]
  -[SBPIPInteractionController _handleGestureEndedState:]
  -[SBPIPInteractionController _adjustContentViewAnchorPointForGestureRecognizer:]
  -[SBPIPInteractionController __handleGesturesEndedState:]
  -[SBPIPInteractionController _resetAnchorPoint]
  -[SBPIPInteractionController _inFlightHitTestPadding]
  -[SBPIPInteractionController __traitsForGesturesReasons:]
  -[SBPIPInteractionController _isSizeAffectedByLayoutReasons:]
  -[SBPIPInteractionController _sizeChangeBeganWithBehavior:]
  -[SBPIPInteractionController _sizeChangeEnded]
  -[SBPIPInteractionController _isGestureRecognizerRecognizing:]
  -[SBPIPInteractionController _scaleHyperregion]
  -[SBPIPInteractionController _rotationHyperregion]
  -[SBPIPInteractionController canonicalPosition]
  -[SBPIPInteractionController positionHyperregion]
  -[SBPIPInteractionController _updateHyperregionVisualizationIfNecessary]
  -[SBPIPInteractionController _regionIsStashedOne:]
  -[SBPIPInteractionController _updatePIPSizeGeometryContext]
  -[SBPIPInteractionController _currentPositionInteractionStateContext]
  -[SBPIPInteractionController positionRegionComposerDidInvalidate:]
  -[SBPIPInteractionController positionRegionComposerNeedsUpdate:behavior:]
  -[SBPIPInteractionController initWithInteractionTargetView:preferredContentSize:interactionSettings:dataSource:delegate:]
  -[SBPIPInteractionController setTargetOverlayView:]
  -[SBPIPInteractionController setContentLayoutSettings:animationBehavior:]
  -[SBPIPInteractionController setContainerSize:withOrientation:]
  -[SBPIPInteractionController setStashedPadding:]
  -[SBPIPInteractionController stashedPadding]
  -[SBPIPInteractionController toggleUserPreferredScale]
  -[SBPIPInteractionController setPreferredNormalizedScale:]
  -[SBPIPInteractionController layoutInteractedTraits:withReason:source:]
  -[SBPIPInteractionController layoutWithFrame:reason:source:]
  -[SBPIPInteractionController handleExternalPanGesture:]
  -[SBPIPInteractionController nonoperationalFrame]
  -[SBPIPInteractionController targetOverlayView]


SBLockScreenPreviewView : UIView
  // instance methods
  -[SBLockScreenPreviewView _layoutPageControl]
  -[SBLockScreenPreviewView .cxx_destruct]
  -[SBLockScreenPreviewView layoutSubviews]
  -[SBLockScreenPreviewView _layoutStatusBar]
  -[SBLockScreenPreviewView _layoutDateView]
  -[SBLockScreenPreviewView _layoutQuickActionsView]
  -[SBLockScreenPreviewView _layoutWallpaperView]
  -[SBLockScreenPreviewView _setupWallpaperViewWithImage:]
  -[SBLockScreenPreviewView _setupDateViewWithOptions:]
  -[SBLockScreenPreviewView _setupStatusBar]
  -[SBLockScreenPreviewView _setupPageControl]
  -[SBLockScreenPreviewView _setupCallToActionLabel]
  -[SBLockScreenPreviewView _setupProudLockIconView]
  -[SBLockScreenPreviewView _setupQuickActionView]
  -[SBLockScreenPreviewView _setupHomeGrabberView]
  -[SBLockScreenPreviewView _layoutCallToActionLabel]
  -[SBLockScreenPreviewView _layoutProudLockIconView]
  -[SBLockScreenPreviewView _layoutHomeGrabberView]
  -[SBLockScreenPreviewView initWithFrame:wallpaperController:options:wallpaperImage:]


SBSwitcherToAppExposeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSwitcherToAppExposeSwitcherModifier transitionWillBegin]
  -[SBSwitcherToAppExposeSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSwitcherToAppExposeSwitcherModifier frameForIndex:]
  -[SBSwitcherToAppExposeSwitcherModifier visibleAppLayouts]
  -[SBSwitcherToAppExposeSwitcherModifier .cxx_destruct]
  -[SBSwitcherToAppExposeSwitcherModifier handleTimerEvent:]
  -[SBSwitcherToAppExposeSwitcherModifier transitionWillUpdate]
  -[SBSwitcherToAppExposeSwitcherModifier initWithTransitionID:bundleIdentifier:appExposeModifier:]
  -[SBSwitcherToAppExposeSwitcherModifier _newAppExposeModifier]
  -[SBSwitcherToAppExposeSwitcherModifier _offsetForPushingCardsOffscreenAtIndex:]


SBSceneLayoutViewController : UIViewController <SBSceneViewPresentationConfiguring, SBLayoutStateTransitionObserver, SBLayoutStateTransitionSceneEntityFrameProvider, BSDescriptionProviding, SBDisplayLayoutContext>
 @property  SBSceneManager *sceneManager
 @property  <SBSceneLayoutViewControllerDelegate> *delegate
 @property  BOOL userResizing
 @property  BOOL elementViewControllerUpdatesSuspended
 @property  UIView *sceneContainerView
 @property  SBLayoutState *_transitioningFromLayoutState
 @property  SBLayoutState *_transitioningToLayoutState
 @property  SBWorkspaceApplicationSceneTransitionContext *_transitionContext
 @property  SBWorkspaceApplicationSceneTransitionContext *_previousSuccessfulTransitionContext
 @property  BOOL _currentlyTransitioning
 @property  NSArray *_transitioningLayoutElementControllers
 @property  NSArray *_transitioningAppViewControllers
 @property  long long _layoutOrientation
 @property  long long _transitioningFromLayoutOrientation
 @property  long long _transitioningToLayoutOrientation
 @property  BOOL _currentlyRotating
 @property  NSArray *layoutElementControllers
 @property  NSArray *appViewControllers
 @property  BOOL hasVisibleElements
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  FBSDisplayIdentity *displayIdentity
 @property  SBLayoutState *layoutState

  // class methods
  +[SBSceneLayoutViewController mainDisplaySceneLayoutViewController]
  +[SBSceneLayoutViewController sceneLayoutViewControllerForDisplayIdentity:]

  // instance methods
  -[SBSceneLayoutViewController _transitioningFromLayoutOrientation]
  -[SBSceneLayoutViewController _willEndLayoutStateTransition]
  -[SBSceneLayoutViewController layoutState]
  -[SBSceneLayoutViewController _isLayoutElementViewControllerOccluded:]
  -[SBSceneLayoutViewController _cleanupDisappearedLayoutElementController:]
  -[SBSceneLayoutViewController sceneManager]
  -[SBSceneLayoutViewController _endLayoutStateTransitionWithInterruption:]
  -[SBSceneLayoutViewController convertRectToInterfaceOrientationCoordinateSpace:]
  -[SBSceneLayoutViewController sceneViewPresentationIdentifier:]
  -[SBSceneLayoutViewController _shouldConsiderHomeScreenAsActive]
  -[SBSceneLayoutViewController _endLayoutStateTransitionForFailure]
  -[SBSceneLayoutViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBSceneLayoutViewController _previousLayoutElementControllerWithElementIdentifier:]
  -[SBSceneLayoutViewController _isCurrentlyRotating]
  -[SBSceneLayoutViewController referenceFrameForUniqueIdentifier:inLayoutState:]
  -[SBSceneLayoutViewController convertRectFromInterfaceOrientationCoordinateSpace:]
  -[SBSceneLayoutViewController _transitionContext]
  -[SBSceneLayoutViewController coordinateSpaceForLayoutElement:layoutState:]
  -[SBSceneLayoutViewController coordinateSpace]
  -[SBSceneLayoutViewController initWithCoder:]
  -[SBSceneLayoutViewController animationControllerForRotatingWithTransitionRequest:]
  -[SBSceneLayoutViewController animationWrapperViewForLayoutState:roleMask:interfaceOrientation:]
  -[SBSceneLayoutViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBSceneLayoutViewController layoutElementControllers]
  -[SBSceneLayoutViewController setUserResizing:]
  -[SBSceneLayoutViewController animationControllerForTransitionRequest:]
  -[SBSceneLayoutViewController _transitioningToLayoutOrientation]
  -[SBSceneLayoutViewController sceneContainerView]
  -[SBSceneLayoutViewController _displayConfiguration]
  -[SBSceneLayoutViewController _addLayoutElementViewController:forLayoutElement:entity:]
  -[SBSceneLayoutViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBSceneLayoutViewController hasVisibleElements]
  -[SBSceneLayoutViewController _updateAuxiliaryViews]
  -[SBSceneLayoutViewController _shouldRepositionViewAfterTransition]
  -[SBSceneLayoutViewController _isCurrentlyTransitioning]
  -[SBSceneLayoutViewController _beginLayoutStateTransitionWithTransitionContext:]
  -[SBSceneLayoutViewController _transitioningAppViewControllers]
  -[SBSceneLayoutViewController _layoutElementControllerForLayoutRole:]
  -[SBSceneLayoutViewController _areElementViewControllerUpdatesSuspended]
  -[SBSceneLayoutViewController _transitioningToLayoutState]
  -[SBSceneLayoutViewController coordinateSpaceForLayoutState:]
  -[SBSceneLayoutViewController animationWrapperViewForLayoutState:roleMask:interfaceOrientation:maskDisplayCorners:]
  -[SBSceneLayoutViewController displayIdentity]
  -[SBSceneLayoutViewController _verifyLayoutElementControllersAreValidForCurrentLayoutState]
  -[SBSceneLayoutViewController _previousSuccessfulTransitionContext]
  -[SBSceneLayoutViewController _shouldAdjustViewAffordancesAfterTransition]
  -[SBSceneLayoutViewController _shouldRotateToLayoutOrientation:]
  -[SBSceneLayoutViewController .cxx_destruct]
  -[SBSceneLayoutViewController coordinateSpaceForInterfaceOrientation:]
  -[SBSceneLayoutViewController _overrideWindowActiveInterfaceOrientation]
  -[SBSceneLayoutViewController _enqueueLayoutViewControllerForReuse:]
  -[SBSceneLayoutViewController _doCommonCleanupUponEndingLayoutTransitionWithInterruption:]
  -[SBSceneLayoutViewController _setElementViewControllerUpdatesSuspended:]
  -[SBSceneLayoutViewController isUserResizing]
  -[SBSceneLayoutViewController convertPointToInterfaceOrientationCoordinateSpace:]
  -[SBSceneLayoutViewController _layoutOrientation]
  -[SBSceneLayoutViewController convertPointFromInterfaceOrientationCoordinateSpace:]
  -[SBSceneLayoutViewController _configureVisibilityForCurrentLayoutState]
  -[SBSceneLayoutViewController appViewForWorkspaceEntity:inLayoutRole:withLayoutState:hostRequester:]
  -[SBSceneLayoutViewController _transitioningFromLayoutState]
  -[SBSceneLayoutViewController sceneViewPresentationPriority:]
  -[SBSceneLayoutViewController initWithSceneManager:]
  -[SBSceneLayoutViewController _transitioningFromLayoutElementControllerForLayoutRole:]
  -[SBSceneLayoutViewController _dequeueLayoutElementControllerForReuseOfClass:]
  -[SBSceneLayoutViewController referenceFrameForEntity:inLayoutState:]
  -[SBSceneLayoutViewController succinctDescriptionBuilder]
  -[SBSceneLayoutViewController setDelegate:]
  -[SBSceneLayoutViewController initWithNibName:bundle:]
  -[SBSceneLayoutViewController shouldAutorotate]
  -[SBSceneLayoutViewController descriptionBuilderWithMultilinePrefix:]
  -[SBSceneLayoutViewController init]
  -[SBSceneLayoutViewController appViewControllers]
  -[SBSceneLayoutViewController descriptionWithMultilinePrefix:]
  -[SBSceneLayoutViewController succinctDescription]
  -[SBSceneLayoutViewController appViewForWorkspaceEntity:inLayoutRole:withLayoutState:]
  -[SBSceneLayoutViewController _invalidate]
  -[SBSceneLayoutViewController _transitioningLayoutElementControllers]
  -[SBSceneLayoutViewController sceneEntityFrameForWorkspaceEntity:inLayoutState:]
  -[SBSceneLayoutViewController delegate]
  -[SBSceneLayoutViewController dealloc]
  -[SBSceneLayoutViewController loadView]
  -[SBSceneLayoutViewController _animationWrapperViewForElement:entity:layoutState:]
  -[SBSceneLayoutViewController supportedInterfaceOrientations]


SBActivationFailedAlertItem : SBAlertItem
  // instance methods
  -[SBActivationFailedAlertItem performUnlockAction]
  -[SBActivationFailedAlertItem configure:requirePasscodeForActions:]
  -[SBActivationFailedAlertItem initWithFailureCount:slot:]
  -[SBActivationFailedAlertItem suppressForKeynote]


SBAppExposeToHomeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBAppExposeToHomeSwitcherModifier plusButtonAlpha]
  -[SBAppExposeToHomeSwitcherModifier transitionWillBegin]
  -[SBAppExposeToHomeSwitcherModifier transitionDidEnd]
  -[SBAppExposeToHomeSwitcherModifier .cxx_destruct]
  -[SBAppExposeToHomeSwitcherModifier _isEffectivelyHome]
  -[SBAppExposeToHomeSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBAppExposeToHomeSwitcherModifier initWithTransitionID:direction:bundleIdentifier:appExposeModifier:]
  -[SBAppExposeToHomeSwitcherModifier _newAppExposeModifier]


SBBacklightIdleTimer : SBIdleTimerBase <ITIdleTimerDelegate, BSDescriptionProviding>
 @property  double timeMultiplier
 @property  unsigned long expectation
 @property  BOOL requiresManualReset
 @property  SBIdleTimerDescriptor *descriptor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBacklightIdleTimer _stopIfManual]
  -[SBBacklightIdleTimer setDescriptor:]
  -[SBBacklightIdleTimer .cxx_destruct]
  -[SBBacklightIdleTimer descriptor]
  -[SBBacklightIdleTimer idleTimer:attentionLostTimeoutDidExpire:]
  -[SBBacklightIdleTimer succinctDescriptionBuilder]
  -[SBBacklightIdleTimer setActivated:]
  -[SBBacklightIdleTimer requiresManualReset]
  -[SBBacklightIdleTimer descriptionBuilderWithMultilinePrefix:]
  -[SBBacklightIdleTimer init]
  -[SBBacklightIdleTimer descriptionWithMultilinePrefix:]
  -[SBBacklightIdleTimer _effectiveQuickUnwarnTimeoutDurationForWarnTimeout:]
  -[SBBacklightIdleTimer succinctDescription]
  -[SBBacklightIdleTimer reset]
  -[SBBacklightIdleTimer isActivated]
  -[SBBacklightIdleTimer timeMultiplier]
  -[SBBacklightIdleTimer setRequiresManualReset:]
  -[SBBacklightIdleTimer _reconfigureAttentionClientAndReset:]
  -[SBBacklightIdleTimer idleTimerDidReset:forUserAttention:at:]
  -[SBBacklightIdleTimer _effectiveTimeoutForBaseTimeout:]
  -[SBBacklightIdleTimer _resetExpectation]
  -[SBBacklightIdleTimer initWithConfigurationIdentifier:]
  -[SBBacklightIdleTimer setTimeMultiplier:]
  -[SBBacklightIdleTimer setExpectation:]
  -[SBBacklightIdleTimer _effectiveExpireTimeoutDuration]
  -[SBBacklightIdleTimer _initWithAttentionAwareTimer:]
  -[SBBacklightIdleTimer isDisabled]
  -[SBBacklightIdleTimer _effectiveWarnTimeoutDuration]
  -[SBBacklightIdleTimer expectation]


SBReachabilityDomain : PTDomain
  // class methods
  +[SBReachabilityDomain domainGroupName]
  +[SBReachabilityDomain rootSettings]
  +[SBReachabilityDomain domainName]
  +[SBReachabilityDomain rootSettingsClass]


SBIconVisibilityService : NSObject
  // instance methods
  -[SBIconVisibilityService .cxx_destruct]
  -[SBIconVisibilityService initWithIconModel:]
  -[SBIconVisibilityService iconStateDisplayIdentifiers]
  -[SBIconVisibilityService dealloc]
  -[SBIconVisibilityService _visibleIdentifiersChanged:]


SBIconStateArchiver : SBHIconStateArchiver
  // class methods
  +[SBIconStateArchiver _modernIconCellForCell:allowFolders:]
  +[SBIconStateArchiver modernizeRootArchive:]
  +[SBIconStateArchiver iTunesRepresentationFromRootArchive:preApex:pending:iconSource:]
  +[SBIconStateArchiver _modernIconListForList:allowFolders:]
  +[SBIconStateArchiver _iTunesDictionaryForLeafIdentifier:]
  +[SBIconStateArchiver _migrateLeafIdentifierIfNecessary:]
  +[SBIconStateArchiver _iTunesIconListsForLists:preApex:pending:iconSource:]
  +[SBIconStateArchiver _iTunesIconCellForCell:preApex:pending:iconSource:]
  +[SBIconStateArchiver _iTunesIconListForList:preApex:pending:iconSource:]
  +[SBIconStateArchiver _modernIconListsForLists:allowFolders:]
  +[SBIconStateArchiver rootArchiveFromITunesRepresentation:]
  +[SBIconStateArchiver _iTunesDictionaryForLeafIcon:withIdentifier:]


SBFullScreenFluidSwitcherRootSwitcherModifier : SBFluidSwitcherRootSwitcherModifier
  // instance methods
  -[SBFullScreenFluidSwitcherRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier reduceMotionModifierForReduceMotionChangedEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier _entityRemovalModifierForMainTransitionEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier _newMultitaskingModifier]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier _defaultMultitaskingModifierClass]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier lowEndHardwareModifier]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier gestureModifierForGestureEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier floorModifierForGestureEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier transitionModifierForMainTransitionEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier _effectiveEnvironmentMode]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier shelfModifierForTransitionEvent:]


SBCoverSheetPresentationManager : NSObject <SBCoverSheetSlidingViewControllerDelegate, SBCoverSheetGrabberDelegate, CSExternalAppearanceProviding, CSExternalBehaviorProviding, CSCoverSheetViewControllerObserver, SBFIdleTimerBehaviorProviding, SBSecureAppViewControllerDelegate, SBSecureAppObserver, SBAssistantObserver, PTSettingsKeyObserver, SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate, SBCoverSheetSecureAppEnvironmentViewControllerDelegate, SBWallpaperOrientationProvider, SBPearlMatchingStateProviderDelegate>
 @property  SBWindow *coverSheetWindow
 @property  NSMutableSet *coverSheetWindowVisibleReasons
 @property  SBWindow *secureAppWindow
 @property  NSMutableSet *secureAppWindowVisibleReasons
 @property  SBCoverSheetSlidingViewController *secureAppSlidingViewController
 @property  SBCoverSheetSecureAppEnvironmentViewController *secureAppEnvironmentViewController
 @property  @? secureAppCleanupHandler
 @property  SBCoverSheetSceneManager *sceneManager
 @property  BSEventQueue *lockUnlockQueue
 @property  CSLockScreenSettings *lockScreenSettings
 @property  UIImpactFeedbackGenerator *rubberBandFeedbackGenerator
 @property  long long participantState
 @property  unsigned long transitionType
 @property  CSCoverSheetTransitionSettings *transitionSettings
 @property  unsigned long transitionOverrideOptions
 @property  BOOL shouldDisplayFakeStatusBar
 @property  BOOL needsFakeStatusBarUpdate
 @property  SBAsynchronousRenderingAssertion *asynchronousRenderingAssertion
 @property  SBDisableActiveInterfaceOrientationChangeAssertion *activeInterfaceOrientationChangeAssertion
 @property  <BSInvalidatable> *deferOrientationUpdatesAssertion
 @property  BOOL hasBeenDismissedSinceKeybagLock
 @property  BOOL hasBeenDismissedSinceBoot
 @property  SBCoverSheetIconFlyInAnimator *iconAnimator
 @property  BOOL dismissingCoverSheet
 @property  NSObject<OS_dispatch_group> *iconAnimatorCompletionGroup
 @property  @? iconAnimatorCompletionBlock
 @property  CSCoverSheetFlyInSettings *flyInSettings
 @property  BOOL centerFollowsFinger
 @property  BOOL animateIconsOnPresentationToo
 @property  double iconFlyInInteractiveResponseMin
 @property  double iconFlyInInteractiveResponseMax
 @property  double iconFlyInInteractiveDampingRatioMin
 @property  double iconFlyInInteractiveDampingRatioMax
 @property  double iconFlyInTension
 @property  double iconFlyInFriction
 @property  BOOL iconAnimatorNeedsAnimating
 @property  BOOL wantsHomeGestureOwnership
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  SBFZStackParticipant *zStackParticipant
 @property  <BSInvalidatable> *suspendWallpaperAnimationAssertion
 @property  <BSInvalidatable> *requireWallpaperAssertion
 @property  <BSInvalidatable> *keyboardFocusAssertion
 @property  @? ppt_transitionBeginsCallback
 @property  @? ppt_transitionEndsCallback
 @property  SBCoverSheetSlidingViewController *coverSheetSlidingViewController
 @property  <SBCoverSheetPresentationDelegate> *delegate
 @property  <SBUILockStateProvider> *uiLockStateProvider
 @property  <SBPearlMatchingStateProvider> *pearlMatchingStateProvider
 @property  <SBLockScreenEnvironment> *lockScreenEnvironment
 @property  SBDashBoardHostedAppViewController *secureAppViewController
 @property  BOOL coverSheetHostingAnApp
 @property  BOOL isCoverSheetHostingUnlockedEnvironmentWindows
 @property  SBDeviceApplicationSceneHandle *coverSheetHostedAppSceneHandle
 @property  SBMainWorkspace *mainWorkspace
 @property  BOOL hasBeenDismissedSinceKeybagLockAndAuthenticated
 @property  BOOL activeInterfaceOrientationLocked
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *appearanceIdentifier
 @property  NSSet *components
 @property  _UILegibilitySettings *legibilitySettings
 @property  NSString *coverSheetIdentifier
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout

  // class methods
  +[SBCoverSheetPresentationManager sharedInstance]
  +[SBCoverSheetPresentationManager sharedInstanceIfExists]

  // instance methods
  -[SBCoverSheetPresentationManager screenEdgesDeferringSystemGestures]
  -[SBCoverSheetPresentationManager setSuspendWallpaperAnimationAssertion:]
  -[SBCoverSheetPresentationManager _cleanupRubberBandDismissalTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager interfaceOrientationForWallpaperController:]
  -[SBCoverSheetPresentationManager coverSheetWindowVisibleReasons]
  -[SBCoverSheetPresentationManager _prepareForRubberBandDismissalTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager suspendWallpaperAnimationAssertion]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:dismissGestureChangedWithProgress:]
  -[SBCoverSheetPresentationManager loadViewsIfNeeded]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerShouldAllowDismissal:]
  -[SBCoverSheetPresentationManager setDeferOrientationUpdatesAssertion:]
  -[SBCoverSheetPresentationManager sceneManager]
  -[SBCoverSheetPresentationManager setPpt_transitionBeginsCallback:]
  -[SBCoverSheetPresentationManager uiLockStateProvider]
  -[SBCoverSheetPresentationManager noteScreenDidTurnOff]
  -[SBCoverSheetPresentationManager lockScreenEnvironment]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerCleanupPresentationTransition:]
  -[SBCoverSheetPresentationManager assistantDidDisappear:]
  -[SBCoverSheetPresentationManager _updateVisibilityOfWindow:forReasons:]
  -[SBCoverSheetPresentationManager _prepareForPresentationTransitionForUserGesture:]
  -[SBCoverSheetPresentationManager _tellDashBoardOurAppearanceAndBehaviorChanged]
  -[SBCoverSheetPresentationManager transitionType]
  -[SBCoverSheetPresentationManager setSceneManager:]
  -[SBCoverSheetPresentationManager setSecureAppWindowVisibleReasons:]
  -[SBCoverSheetPresentationManager flyInSettings]
  -[SBCoverSheetPresentationManager _notifyDelegateWillPresent]
  -[SBCoverSheetPresentationManager setTransitionType:]
  -[SBCoverSheetPresentationManager _prepareSecureAppWindowForDisplay]
  -[SBCoverSheetPresentationManager secureAppCleanupHandler]
  -[SBCoverSheetPresentationManager setDismissingCoverSheet:]
  -[SBCoverSheetPresentationManager deferOrientationUpdatesAssertion]
  -[SBCoverSheetPresentationManager coverSheetViewController]
  -[SBCoverSheetPresentationManager setAsynchronousRenderingAssertion:]
  -[SBCoverSheetPresentationManager dismissingCoverSheet]
  -[SBCoverSheetPresentationManager coverSheetIdentifier]
  -[SBCoverSheetPresentationManager setAnimateIconsOnPresentationToo:]
  -[SBCoverSheetPresentationManager _prepareInterstitialTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager setRequireWallpaperAssertion:]
  -[SBCoverSheetPresentationManager conformsToCSBehaviorProviding]
  -[SBCoverSheetPresentationManager asynchronousRenderingAssertion]
  -[SBCoverSheetPresentationManager _animateForProgress:]
  -[SBCoverSheetPresentationManager _cleanupDismissalTransition]
  -[SBCoverSheetPresentationManager setIconFlyInInteractiveResponseMax:]
  -[SBCoverSheetPresentationManager iconFlyInFriction]
  -[SBCoverSheetPresentationManager secureAppWindowVisibleReasons]
  -[SBCoverSheetPresentationManager idleTimerMode]
  -[SBCoverSheetPresentationManager _relinquishHomeGestureOwnership]
  -[SBCoverSheetPresentationManager conformsToCSExternalBehaviorProviding]
  -[SBCoverSheetPresentationManager _prepareSecureAppViewController]
  -[SBCoverSheetPresentationManager setHomeGestureParticipant:]
  -[SBCoverSheetPresentationManager homeGestureParticipant]
  -[SBCoverSheetPresentationManager _setCoverSheetPresented:forcePresented:animated:options:withCompletion:]
  -[SBCoverSheetPresentationManager idleWarnMode]
  -[SBCoverSheetPresentationManager zStackParticipant:updatePreferences:]
  -[SBCoverSheetPresentationManager lockUnlockQueue]
  -[SBCoverSheetPresentationManager isPresented]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerCleanupDismissalTransition:]
  -[SBCoverSheetPresentationManager willUIUnlockWithPendingUnlockRequest:]
  -[SBCoverSheetPresentationManager activeInterfaceOrientationLocked]
  -[SBCoverSheetPresentationManager coverSheetCanTransitionToPresented:]
  -[SBCoverSheetPresentationManager zStackParticipantDidChange:]
  -[SBCoverSheetPresentationManager .cxx_destruct]
  -[SBCoverSheetPresentationManager idleTimerDuration]
  -[SBCoverSheetPresentationManager setKeyboardFocusAssertion:]
  -[SBCoverSheetPresentationManager setLockScreenEnvironment:]
  -[SBCoverSheetPresentationManager iconAnimatorCompletionGroup]
  -[SBCoverSheetPresentationManager setCoverSheetWindow:]
  -[SBCoverSheetPresentationManager _setCoverSheet:windowVisible:forReason:]
  -[SBCoverSheetPresentationManager setCoverSheetPresented:animated:options:withCompletion:]
  -[SBCoverSheetPresentationManager _performAfterSecureAppCleanup:]
  -[SBCoverSheetPresentationManager _requestHomeGestureOwnership]
  -[SBCoverSheetPresentationManager setIconFlyInInteractiveDampingRatioMax:]
  -[SBCoverSheetPresentationManager secureAppOfTypeDidBegin:]
  -[SBCoverSheetPresentationManager secureAppSlidingViewController]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:animationTickedWithProgress:coverSheetFrame:gestureActive:forPresentationValue:]
  -[SBCoverSheetPresentationManager setPearlMatchingStateProvider:]
  -[SBCoverSheetPresentationManager authenticationStateMayHaveChangedFromSource:]
  -[SBCoverSheetPresentationManager setHasBeenDismissedSinceBoot:]
  -[SBCoverSheetPresentationManager pearlMatchingStateProvider]
  -[SBCoverSheetPresentationManager secureAppEnvironmentViewControllerOwnsHomeGestureDidChange]
  -[SBCoverSheetPresentationManager setSecureAppWindow:]
  -[SBCoverSheetPresentationManager setCoverSheetWindowVisibleReasons:]
  -[SBCoverSheetPresentationManager _cleanupATransition]
  -[SBCoverSheetPresentationManager setIconFlyInInteractiveResponseMin:]
  -[SBCoverSheetPresentationManager setCoverSheetSlidingViewController:]
  -[SBCoverSheetPresentationManager _notifyDelegateWillDismiss]
  -[SBCoverSheetPresentationManager iconFlyInInteractiveDampingRatioMin]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController]
  -[SBCoverSheetPresentationManager _cleanupIconAnimator]
  -[SBCoverSheetPresentationManager setDelegate:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerCleanupRubberBandedPresentationTransition:]
  -[SBCoverSheetPresentationManager homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBCoverSheetPresentationManager hasBeenDismissedSinceBoot]
  -[SBCoverSheetPresentationManager ppt_transitionEndsCallback]
  -[SBCoverSheetPresentationManager participantState]
  -[SBCoverSheetPresentationManager setUILockStateProvider:]
  -[SBCoverSheetPresentationManager setParticipantState:]
  -[SBCoverSheetPresentationManager isAnyGestureActivelyRecognized]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:prepareForDismissalTransitionForReversingTransition:forUserGesture:]
  -[SBCoverSheetPresentationManager _notifyDelegateDidDismiss]
  -[SBCoverSheetPresentationManager init]
  -[SBCoverSheetPresentationManager setTransitionOverrideOptions:]
  -[SBCoverSheetPresentationManager shouldDisplayFakeStatusBar]
  -[SBCoverSheetPresentationManager secureAppSlidingViewControllerIfLoaded]
  -[SBCoverSheetPresentationManager setShouldDisplayFakeStatusBar:]
  -[SBCoverSheetPresentationManager setWantsHomeGestureOwnership:]
  -[SBCoverSheetPresentationManager coverSheetWindow]
  -[SBCoverSheetPresentationManager _setSecureAppWindowVisible:forReason:]
  -[SBCoverSheetPresentationManager isVisible]
  -[SBCoverSheetPresentationManager hasContentUnderCoverSheetSlidingViewController:]
  -[SBCoverSheetPresentationManager _cleanupRubberBandPresentationTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager _notifyDelegateRequestsUnlock]
  -[SBCoverSheetPresentationManager centerFollowsFinger]
  -[SBCoverSheetPresentationManager secureAppViewController]
  -[SBCoverSheetPresentationManager setIconFlyInInteractiveDampingRatioMin:]
  -[SBCoverSheetPresentationManager _newRubberBandFeedbackGeneratorForSettings:]
  -[SBCoverSheetPresentationManager _prepareCoverSheetWindowForDisplay]
  -[SBCoverSheetPresentationManager _prepareForRubberBandPresentationTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerCleanupInterstitialTransition:]
  -[SBCoverSheetPresentationManager zStackParticipant]
  -[SBCoverSheetPresentationManager setZStackParticipant:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:animateForGestureActive:withProgress:beginBlock:endBlock:]
  -[SBCoverSheetPresentationManager isDismissGestureActive]
  -[SBCoverSheetPresentationManager rubberBandFeedbackGenerator]
  -[SBCoverSheetPresentationManager setRubberBandFeedbackGenerator:]
  -[SBCoverSheetPresentationManager iconFlyInInteractiveDampingRatioMax]
  -[SBCoverSheetPresentationManager secureAppEnvironmentViewController]
  -[SBCoverSheetPresentationManager wantsHomeGestureOwnership]
  -[SBCoverSheetPresentationManager needsFakeStatusBarUpdate]
  -[SBCoverSheetPresentationManager _tellDashBoardOurBehaviorChanged]
  -[SBCoverSheetPresentationManager iconFlyInTension]
  -[SBCoverSheetPresentationManager components]
  -[SBCoverSheetPresentationManager secureAppWindow]
  -[SBCoverSheetPresentationManager conformsToCSAppearanceProviding]
  -[SBCoverSheetPresentationManager hasFirstSwipeShowGrabberOverride]
  -[SBCoverSheetPresentationManager _impactFeedbackGeneratorConfigurationForStyle:]
  -[SBCoverSheetPresentationManager iconFlyInInteractiveResponseMin]
  -[SBCoverSheetPresentationManager _cleanupInterstitialTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager setActiveInterfaceOrientationLocked:]
  -[SBCoverSheetPresentationManager _setCoverSheetWindowVisible:forReason:]
  -[SBCoverSheetPresentationManager setIconAnimatorCompletionBlock:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerIfLoaded]
  -[SBCoverSheetPresentationManager hasBeenDismissedSinceKeybagLockAndAuthenticated]
  -[SBCoverSheetPresentationManager _authenticationChanged:]
  -[SBCoverSheetPresentationManager secureAppViewControllerDidAuthenticate:]
  -[SBCoverSheetPresentationManager ppt_transitionBeginsCallback]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerDidPassRubberBandThreshold:]
  -[SBCoverSheetPresentationManager appearanceIdentifier]
  -[SBCoverSheetPresentationManager activeInterfaceOrientationChangeAssertion]
  -[SBCoverSheetPresentationManager mainWorkspace]
  -[SBCoverSheetPresentationManager setIconFlyInTension:]
  -[SBCoverSheetPresentationManager transitionSettings]
  -[SBCoverSheetPresentationManager isTransitioning]
  -[SBCoverSheetPresentationManager _prepareForTransitionToSecureApp]
  -[SBCoverSheetPresentationManager isCoverSheetHostingAnApp]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:committingToEndPresented:]
  -[SBCoverSheetPresentationManager setIconFlyInFriction:]
  -[SBCoverSheetPresentationManager delegate]
  -[SBCoverSheetPresentationManager _setOrientationUpdatesDeferred:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerUserPresentGestureBegan:]
  -[SBCoverSheetPresentationManager _noteEffectiveLockStatusMayHaveChangedForUserNotification:canDismiss:]
  -[SBCoverSheetPresentationManager _relinquishAsynchronousRenderingAssertion]
  -[SBCoverSheetPresentationManager settings:changedValueForKey:]
  -[SBCoverSheetPresentationManager isInSecureApp]
  -[SBCoverSheetPresentationManager _notifyDelegateDidPresent]
  -[SBCoverSheetPresentationManager setLockScreenSettings:]
  -[SBCoverSheetPresentationManager restrictedCapabilities]
  -[SBCoverSheetPresentationManager setHasBeenDismissedSinceKeybagLock:]
  -[SBCoverSheetPresentationManager _tellDashBoardOurAppearanceChanged]
  -[SBCoverSheetPresentationManager setIconAnimatorNeedsAnimating:]
  -[SBCoverSheetPresentationManager _prepareIconAnimatorForPresenting:]
  -[SBCoverSheetPresentationManager coverSheetHostedAppSceneHandle]
  -[SBCoverSheetPresentationManager isCoverSheetHostingUnlockedEnvironmentWindows]
  -[SBCoverSheetPresentationManager isVisibleAndNotDisappearing]
  -[SBCoverSheetPresentationManager proximityDetectionMode]
  -[SBCoverSheetPresentationManager setSecureAppSlidingViewController:]
  -[SBCoverSheetPresentationManager iconAnimatorNeedsAnimating]
  -[SBCoverSheetPresentationManager setCenterFollowsFinger:]
  -[SBCoverSheetPresentationManager _clearSecureAppViewControllersIncludingWindow:]
  -[SBCoverSheetPresentationManager _setTransitionProgress:animated:gestureActive:coverSheetProgress:completion:]
  -[SBCoverSheetPresentationManager transitionOverrideOptions]
  -[SBCoverSheetPresentationManager setLockUnlockQueue:]
  -[SBCoverSheetPresentationManager requireWallpaperAssertion]
  -[SBCoverSheetPresentationManager setTransitionSettings:]
  -[SBCoverSheetPresentationManager keyboardFocusAssertion]
  -[SBCoverSheetPresentationManager setFlyInSettings:]
  -[SBCoverSheetPresentationManager iconAnimatorCompletionBlock]
  -[SBCoverSheetPresentationManager isActiveInterfaceOrientationLocked]
  -[SBCoverSheetPresentationManager iconAnimator]
  -[SBCoverSheetPresentationManager scrollingStrategy]
  -[SBCoverSheetPresentationManager _cleanupARubberBandTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager lockScreenSettings]
  -[SBCoverSheetPresentationManager _updateInterstitialTransitionForSlidingViewController:withProgress:]
  -[SBCoverSheetPresentationManager secureAppOfTypeDidEnd:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerPrepareForRubberBandedPresentationTransition:]
  -[SBCoverSheetPresentationManager _enqueueBlock:withName:]
  -[SBCoverSheetPresentationManager _updateProximitySensorState]
  -[SBCoverSheetPresentationManager setSecureAppCleanupHandler:]
  -[SBCoverSheetPresentationManager _prepareForARubberBandTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager _transitionFromSecureAppToFullAppAndDismiss:preservingBanners:]
  -[SBCoverSheetPresentationManager setMainWorkspace:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerContentShouldAutoRotateWhenNotVisible:]
  -[SBCoverSheetPresentationManager coverSheetViewControllerExternalLockProviderStateDidChange:]
  -[SBCoverSheetPresentationManager updateBecauseSecureAppChanged]
  -[SBCoverSheetPresentationManager noteDeviceDidLock]
  -[SBCoverSheetPresentationManager setPpt_transitionEndsCallback:]
  -[SBCoverSheetPresentationManager _setCoverSheetPresented:forcePresented:animated:withCompletion:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:prepareForPresentationTransitionForUserGesture:]
  -[SBCoverSheetPresentationManager _acquireAsynchronousRenderingAssertion]
  -[SBCoverSheetPresentationManager iconFlyInInteractiveResponseMax]
  -[SBCoverSheetPresentationManager _prepareForATransition]
  -[SBCoverSheetPresentationManager _prepareForDismissalTransition]
  -[SBCoverSheetPresentationManager updateVisibilityForGrabberVisible:]
  -[SBCoverSheetPresentationManager setIconAnimatorCompletionGroup:]
  -[SBCoverSheetPresentationManager setActiveInterfaceOrientationChangeAssertion:]
  -[SBCoverSheetPresentationManager setNeedsFakeStatusBarUpdate:]
  -[SBCoverSheetPresentationManager _isEffectivelyLocked]
  -[SBCoverSheetPresentationManager setSecureAppEnvironmentViewController:]
  -[SBCoverSheetPresentationManager hasBeenDismissedSinceKeybagLock]
  -[SBCoverSheetPresentationManager _updateIconsFlyInWithSettings:]
  -[SBCoverSheetPresentationManager updateInterfaceOrientationToMatchOrientation:]
  -[SBCoverSheetPresentationManager setCoverSheetPresented:animated:withCompletion:]
  -[SBCoverSheetPresentationManager legibilitySettings]
  -[SBCoverSheetPresentationManager setIconAnimator:]
  -[SBCoverSheetPresentationManager _cleanupPresentationTransition]
  -[SBCoverSheetPresentationManager pearlMatchingStateProviderStateChangedForMatchFailure:]
  -[SBCoverSheetPresentationManager setSecureAppViewController:]
  -[SBCoverSheetPresentationManager notificationBehavior]
  -[SBCoverSheetPresentationManager animateIconsOnPresentationToo]


SBAppPlatterDragPreview : UIView <SBIconDragPreview, BSDescriptionProviding>
 @property  unsigned long mode
 @property  UIView *sourceView
 @property  double sourceViewScale
 @property  SBApplicationBlurContentView *platterView
 @property  BOOL animatingPlatterViewAlpha
 @property  @? platterViewAlphaAnimationCompletionBlock
 @property  {CGSize=dd} platterSize
 @property  {SBDragPreviewShadowParameters=dd{CGSize=dd}} diffuseShadowParameters
 @property  {SBDragPreviewShadowParameters=dd{CGSize=dd}} rimShadowParameters
 @property  NSArray *diffuseShadowFilters
 @property  NSArray *rimShadowFilters
 @property  BSCornerRadiusConfiguration *cornerRadiusConfiguration
 @property  {CGPoint=dd} anchorPoint
 @property  double rotation
 @property  unsigned long dragState
 @property  BOOL flocked
 @property  BOOL iconAllowsLabelArea
 @property  BOOL iconAllowsAccessory
 @property  BOOL iconCanShowCloseBox
 @property  double iconContentScale
 @property  BOOL iconIsEditing
 @property  SBIcon *icon
 @property  @? cleanUpHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppPlatterDragPreview setRotation:]
  -[SBAppPlatterDragPreview _isDragging]
  -[SBAppPlatterDragPreview setAnchorPoint:]
  -[SBAppPlatterDragPreview icon]
  -[SBAppPlatterDragPreview _effectiveCornerRadius]
  -[SBAppPlatterDragPreview setIconContentScale:]
  -[SBAppPlatterDragPreview iconContentScale]
  -[SBAppPlatterDragPreview .cxx_destruct]
  -[SBAppPlatterDragPreview sourceView]
  -[SBAppPlatterDragPreview platterView]
  -[SBAppPlatterDragPreview layoutSubviews]
  -[SBAppPlatterDragPreview rotation]
  -[SBAppPlatterDragPreview succinctDescriptionBuilder]
  -[SBAppPlatterDragPreview descriptionBuilderWithMultilinePrefix:]
  -[SBAppPlatterDragPreview _updateShadowView]
  -[SBAppPlatterDragPreview descriptionWithMultilinePrefix:]
  -[SBAppPlatterDragPreview succinctDescription]
  -[SBAppPlatterDragPreview setIcon:]
  -[SBAppPlatterDragPreview cornerRadiusConfiguration]
  -[SBAppPlatterDragPreview setIconViewDelegate:]
  -[SBAppPlatterDragPreview setMode:]
  -[SBAppPlatterDragPreview setDragState:]
  -[SBAppPlatterDragPreview setCornerRadiusConfiguration:]
  -[SBAppPlatterDragPreview dragState]
  -[SBAppPlatterDragPreview mode]
  -[SBAppPlatterDragPreview anchorPoint]
  -[SBAppPlatterDragPreview isFlocked]
  -[SBAppPlatterDragPreview _updateSubviewVisibility]
  -[SBAppPlatterDragPreview _configureIconViewWithReferenceIconView:]
  -[SBAppPlatterDragPreview handleCleanup]
  -[SBAppPlatterDragPreview cleanUpHandler]
  -[SBAppPlatterDragPreview setCleanUpHandler:]
  -[SBAppPlatterDragPreview setIconIsEditing:animated:]
  -[SBAppPlatterDragPreview updateDestinationIconLocation:allowsLabelArea:animated:]
  -[SBAppPlatterDragPreview draggingSourceDroppedWithOperation:]
  -[SBAppPlatterDragPreview draggingSourceCancelAnimationCompleted]
  -[SBAppPlatterDragPreview dropDestinationAnimationCompleted]
  -[SBAppPlatterDragPreview delayCleanUpForReason:]
  -[SBAppPlatterDragPreview setFlocked:]
  -[SBAppPlatterDragPreview iconAllowsLabelArea]
  -[SBAppPlatterDragPreview setIconAllowsLabelArea:]
  -[SBAppPlatterDragPreview iconAllowsAccessory]
  -[SBAppPlatterDragPreview setIconAllowsAccessory:]
  -[SBAppPlatterDragPreview iconCanShowCloseBox]
  -[SBAppPlatterDragPreview setIconCanShowCloseBox:]
  -[SBAppPlatterDragPreview iconIsEditing]
  -[SBAppPlatterDragPreview setIconIsEditing:]
  -[SBAppPlatterDragPreview _removeDelayCleanupAssertion:]
  -[SBAppPlatterDragPreview initWithReferenceIconView:sourceView:]
  -[SBAppPlatterDragPreview initWithReferenceIconView:sourceView:sourceViewScale:]
  -[SBAppPlatterDragPreview updateSourceView:]
  -[SBAppPlatterDragPreview _matchMoveView:toContainerView:]
  -[SBAppPlatterDragPreview _updateIconViewComponentVisibility]
  -[SBAppPlatterDragPreview _updateShowDebugIconBorderWithColor:]
  -[SBAppPlatterDragPreview _effectiveIconViewFrame]
  -[SBAppPlatterDragPreview _getIconAlpha:platterAlpha:]
  -[SBAppPlatterDragPreview invalidateSourceView]
  -[SBAppPlatterDragPreview _effectiveIconContentScale]
  -[SBAppPlatterDragPreview _effectiveIconContainerCenter]
  -[SBAppPlatterDragPreview _effectivePlatterFrame]
  -[SBAppPlatterDragPreview _effectiveCornerRadiusConfiguration]
  -[SBAppPlatterDragPreview _updateContainerViewPositionForAnchorPoint]
  -[SBAppPlatterDragPreview _effectiveMode]
  -[SBAppPlatterDragPreview iconDragAlpha]
  -[SBAppPlatterDragPreview _setSourcePortalViewHidden:]
  -[SBAppPlatterDragPreview _blurContentViewIconViewCenterYOffset]
  -[SBAppPlatterDragPreview _effectiveIconAccessoryAlpha]
  -[SBAppPlatterDragPreview _effectiveIconAllowsLabelArea]
  -[SBAppPlatterDragPreview _effectiveIconIsHighlighted]
  -[SBAppPlatterDragPreview _effectiveIconCanShowCloseBox]
  -[SBAppPlatterDragPreview platterSize]
  -[SBAppPlatterDragPreview sourceViewScale]
  -[SBAppPlatterDragPreview isAnimatingPlatterViewAlpha]
  -[SBAppPlatterDragPreview configurePlatterForSceneHandle:withTargetView:completion:]
  -[SBAppPlatterDragPreview setPlatterSize:]
  -[SBAppPlatterDragPreview setDiffuseShadowParameters:]
  -[SBAppPlatterDragPreview setRimShadowParameters:]
  -[SBAppPlatterDragPreview setDiffuseShadowFilters:]
  -[SBAppPlatterDragPreview setRimShadowFilters:]
  -[SBAppPlatterDragPreview setSourceViewScale:]
  -[SBAppPlatterDragPreview platterViewAlphaAnimationCompletionBlock]
  -[SBAppPlatterDragPreview setPlatterViewAlphaAnimationCompletionBlock:]
  -[SBAppPlatterDragPreview diffuseShadowParameters]
  -[SBAppPlatterDragPreview rimShadowParameters]
  -[SBAppPlatterDragPreview diffuseShadowFilters]
  -[SBAppPlatterDragPreview rimShadowFilters]


SBAppPlatterDragPreviewDelayCleanupAssertion : NSObject <BSInvalidatable, BSDescriptionProviding>
 @property  BOOL invalidated
 @property  SBAppPlatterDragPreview *dragPreview
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppPlatterDragPreviewDelayCleanupAssertion isInvalidated]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion .cxx_destruct]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion succinctDescriptionBuilder]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion setInvalidated:]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion descriptionWithMultilinePrefix:]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion succinctDescription]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion reason]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion dealloc]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion invalidate]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion initWithDragPreview:reason:]
  -[SBAppPlatterDragPreviewDelayCleanupAssertion dragPreview]


SBSplashBoardController : XBApplicationController
  // instance methods
  -[SBSplashBoardController dealloc]
  -[SBSplashBoardController configureForLocaleChanges]
  -[SBSplashBoardController _observeLocaleChanges]
  -[SBSplashBoardController _checkForChangedLocale]
  -[SBSplashBoardController _splashBoardApplicationForBundleID:]
  -[SBSplashBoardController _handleLocaleDidChangeNotification]


SBSwipeUpFloatingApplicationGestureWorkspaceTransaction : SBDeckSwitcherPanGestureWorkspaceTransaction
  // instance methods
  -[SBSwipeUpFloatingApplicationGestureWorkspaceTransaction _gestureType]
  -[SBSwipeUpFloatingApplicationGestureWorkspaceTransaction selectedAppLayoutForGestureRecognizer:]


SBScreenshotManagerDataSource : NSObject <SBScreenshotManagerDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBScreenshotManagerDataSource screenshotManagerScreensToScreenshot:]


SBLiftToWakeStudyLogger : NSObject <SBLiftToWakeObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLiftToWakeStudyLogger .cxx_destruct]
  -[SBLiftToWakeStudyLogger initWithController:]
  -[SBLiftToWakeStudyLogger liftToWakeController:didObserveTransition:deviceOrientation:]
  -[SBLiftToWakeStudyLogger dealloc]


SBIconProfileModelMemoryStore : NSObject <SBIconModelStore>
 @property  NSDictionary *currentState
 @property  NSDictionary *desiredState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIconProfileModelMemoryStore .cxx_destruct]
  -[SBIconProfileModelMemoryStore init]
  -[SBIconProfileModelMemoryStore currentState]
  -[SBIconProfileModelMemoryStore deleteDesiredIconStateWithOptions:error:]
  -[SBIconProfileModelMemoryStore loadDesiredIconState:]
  -[SBIconProfileModelMemoryStore loadCurrentIconState:]
  -[SBIconProfileModelMemoryStore setCurrentState:]
  -[SBIconProfileModelMemoryStore saveDesiredIconState:error:]
  -[SBIconProfileModelMemoryStore saveCurrentIconState:error:]
  -[SBIconProfileModelMemoryStore deleteCurrentIconStateWithOptions:error:]
  -[SBIconProfileModelMemoryStore setDesiredState:]
  -[SBIconProfileModelMemoryStore initWithCurrentState:desiredState:]
  -[SBIconProfileModelMemoryStore desiredState]
  -[SBIconProfileModelMemoryStore initWithITunesRepresentation:]


SBCompleteGestureSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBCompleteGestureSwitcherEventResponse type]


_SBUIAnimationControllerCoordinatingChildRelationship : NSObject
 @property  BSTransaction<SBUIAnimationControllerCoordinating> *coordinatingChildTransaction
 @property  unsigned long schedulingPolicy

  // instance methods
  -[_SBUIAnimationControllerCoordinatingChildRelationship schedulingPolicy]
  -[_SBUIAnimationControllerCoordinatingChildRelationship .cxx_destruct]
  -[_SBUIAnimationControllerCoordinatingChildRelationship initWithCoordinatingChildTransaction:schedulingPolicy:]
  -[_SBUIAnimationControllerCoordinatingChildRelationship coordinatingChildTransaction]


SBUIAnimationController : SBTransaction <SBSceneHandleObserver, UIViewControllerInteractiveTransitioning, SBViewControllerTransitionContextDelegate, SBUIAnimationStepping, SBUIAnimationControllerCoordinating>
 @property  SBViewControllerTransitionContext *transition
 @property  <SBUIAnimationControllerTransitionContextProvider> *transitionContextProvider
 @property  @? animationTransactionCompletion
 @property  BSTransaction *animationTransaction
 @property  BSTransaction *notifyObserversTransaction
 @property  BSTransaction *cleanupTransaction
 @property  BOOL needsCATransactionActivate
 @property  UIView *containerView
 @property  NSSet *toApplicationSceneEntities
 @property  SBApplicationSceneEntity *toApplicationSceneEntity
 @property  NSSet *fromApplicationSceneEntities
 @property  SBApplicationSceneEntity *fromApplicationSceneEntity
 @property  BOOL transitionSupportsCancelling
 @property  BOOL transitionSupportsRestarting
 @property  BOOL transitionWasCancelled
 @property  BOOL transitionWasRestarted
 @property  BOOL interactive
 @property  <SBViewControllerTransitionCoordinator> *transitionCoordinator
 @property  BSAnimationSettings *animationSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double completionSpeed
 @property  long long completionCurve
 @property  BOOL wantsInteractiveStart
 @property  BOOL stepped
 @property  double stepPercentage

  // instance methods
  -[SBUIAnimationController transition]
  -[SBUIAnimationController transitionWasCancelled]
  -[SBUIAnimationController sceneHandle:didUpdateContentState:]
  -[SBUIAnimationController _cleanupAnimation]
  -[SBUIAnimationController setTransition:]
  -[SBUIAnimationController cancelTransition]
  -[SBUIAnimationController fromApplicationSceneEntities]
  -[SBUIAnimationController _begin]
  -[SBUIAnimationController animationSettings]
  -[SBUIAnimationController toApplicationSceneEntities]
  -[SBUIAnimationController _canBeInterrupted]
  -[SBUIAnimationController _didInterruptWithReason:]
  -[SBUIAnimationController _animationState]
  -[SBUIAnimationController _willComplete]
  -[SBUIAnimationController _startAnimation]
  -[SBUIAnimationController _setAnimationState:]
  -[SBUIAnimationController isInteractive]
  -[SBUIAnimationController isFluidSwitcherAnimationController]
  -[SBUIAnimationController containerView]
  -[SBUIAnimationController .cxx_destruct]
  -[SBUIAnimationController startInteractiveTransition:]
  -[SBUIAnimationController _setHidden:]
  -[SBUIAnimationController animating]
  -[SBUIAnimationController _prepareAnimation]
  -[SBUIAnimationController init]
  -[SBUIAnimationController shouldResignActiveForAnimation]
  -[SBUIAnimationController isReasonableMomentToInterrupt]
  -[SBUIAnimationController transitionDidFinish:]
  -[SBUIAnimationController addObserver:]
  -[SBUIAnimationController transitionCoordinator]
  -[SBUIAnimationController _addDebugLogCategory:]
  -[SBUIAnimationController restartTransition]
  -[SBUIAnimationController transitionWasRestarted]
  -[SBUIAnimationController dealloc]
  -[SBUIAnimationController _animationIdentifier]
  -[SBUIAnimationController removeObserver:]
  -[SBUIAnimationController _transitionAnimator]
  -[SBUIAnimationController _willAnimate]
  -[SBUIAnimationController _enumerateCoordinatingAnimationsWithBlock:]
  -[SBUIAnimationController initWithTransitionContextProvider:]
  -[SBUIAnimationController _getTransitionWindow]
  -[SBUIAnimationController _noteAnimationDidFinish]
  -[SBUIAnimationController _waitsForActivatingSceneContentAvailableIfNecessary]
  -[SBUIAnimationController _shouldDismissBanner]
  -[SBUIAnimationController addCoordinatingChildTransaction:withSchedulingPolicy:]
  -[SBUIAnimationController transitionContextProvider]
  -[SBUIAnimationController _noteAnimationDidFail]
  -[SBUIAnimationController __animationShouldStart]
  -[SBUIAnimationController setAnimationTransactionCompletion:]
  -[SBUIAnimationController __startAnimation]
  -[SBUIAnimationController __reportAnimationCompletion]
  -[SBUIAnimationController __cleanupAnimation]
  -[SBUIAnimationController _cleanupEntityObservers]
  -[SBUIAnimationController transitionSupportsCancelling]
  -[SBUIAnimationController _enumerateCoordinatingAnimationsWithSchedulingPolicy:block:]
  -[SBUIAnimationController transitionSupportsRestarting]
  -[SBUIAnimationController isStepped]
  -[SBUIAnimationController _abortAnimation]
  -[SBUIAnimationController coordinatingAnimationControllers]
  -[SBUIAnimationController _enumerateCoordinatingChildRelationshipsWithBlock:]
  -[SBUIAnimationController __alertItemsController]
  -[SBUIAnimationController _viewsForAnimationStepping]
  -[SBUIAnimationController _willSetupStartDependencies]
  -[SBUIAnimationController _progressDependencies]
  -[SBUIAnimationController __startTransactionDependencyForEntity:]
  -[SBUIAnimationController __wantsInitialProgressStateChange]
  -[SBUIAnimationController _application:processStateDidChange:]
  -[SBUIAnimationController _sceneHandle:didUpdateContentState:]
  -[SBUIAnimationController _willBeginWaitingForStartDependencies]
  -[SBUIAnimationController animationTransaction]
  -[SBUIAnimationController notifyObserversTransaction]
  -[SBUIAnimationController cleanupTransaction]
  -[SBUIAnimationController _registerEntityObserversIfNecessary]
  -[SBUIAnimationController __abortAnimation]
  -[SBUIAnimationController _notifyObserversOfAnimationCompletion]
  -[SBUIAnimationController _isNullAnimation]
  -[SBUIAnimationController _entityObserverProgressDidChange:waitForSceneContentAvailableTransactionBlock:]
  -[SBUIAnimationController __noteAnimationDidTerminate]
  -[SBUIAnimationController animationTransactionCompletion]
  -[SBUIAnimationController _processStateDidChange:]
  -[SBUIAnimationController stepPercentage]
  -[SBUIAnimationController setStepPercentage:]
  -[SBUIAnimationController finishSteppingForwardToEnd]
  -[SBUIAnimationController finishSteppingBackwardToStart]
  -[SBUIAnimationController toApplicationSceneEntity]
  -[SBUIAnimationController fromApplicationSceneEntity]
  -[SBUIAnimationController addSteppedCoordinatingChildAnimation:]
  -[SBUIAnimationController delayCleanupUntilTransactionFinishes:]
  -[SBUIAnimationController stopDelayingCleanupForTransaction:]
  -[SBUIAnimationController delayAnimationUntilTransactionFinishes:]
  -[SBUIAnimationController stopDelayingAnimationForTransaction:]
  -[SBUIAnimationController waitingToStart]
  -[SBUIAnimationController isFinishedAnimating]
  -[SBUIAnimationController enableSteppingWithAnimationSettings:]
  -[SBUIAnimationController _displayIdentity]
  -[SBUIAnimationController _noteAnimationDidRevealApplication]
  -[SBUIAnimationController setTransitionContextProvider:]
  -[SBUIAnimationController needsCATransactionActivate]
  -[SBUIAnimationController setNeedsCATransactionActivate:]


SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider : NSObject <SBUIAnimationControllerTransitionContextProvider>
 @property  SBApplicationSceneEntity *activatingAppSceneEntity
 @property  SBApplicationSceneEntity *deactivatingAppSceneEntity
 @property  NSSet *toApplicationSceneEntities
 @property  SBApplicationSceneEntity *toApplicationSceneEntity
 @property  NSSet *fromApplicationSceneEntities
 @property  SBApplicationSceneEntity *fromApplicationSceneEntity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider transitionContextProviderWithToApplicationSceneEntity:fromApplicationSceneEntity:]

  // instance methods
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider fromApplicationSceneEntities]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider toApplicationSceneEntities]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider .cxx_destruct]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider toApplicationSceneEntity]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider fromApplicationSceneEntity]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider initWithToApplicationSceneEntity:fromApplicationSceneEntity:]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider activatingAppSceneEntity]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider setActivatingAppSceneEntity:]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider deactivatingAppSceneEntity]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider setDeactivatingAppSceneEntity:]


SBHideSharePlayContentFromSharedScreenController : NSObject <SBBannerManagerTransitionObserver, SBDraggingSystemObserver, SBMousePointerHardwareConnectionObserver, SBPIPControllerObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHideSharePlayContentFromSharedScreenController bannerManager:willPresentPresentable:withTransitionCoordinator:]
  -[SBHideSharePlayContentFromSharedScreenController .cxx_destruct]
  -[SBHideSharePlayContentFromSharedScreenController dragSessionDidEnd:]
  -[SBHideSharePlayContentFromSharedScreenController dragSessionDidBegin:]
  -[SBHideSharePlayContentFromSharedScreenController init]
  -[SBHideSharePlayContentFromSharedScreenController bannerManager:willDismissPresentable:withTransitionCoordinator:]
  -[SBHideSharePlayContentFromSharedScreenController dealloc]
  -[SBHideSharePlayContentFromSharedScreenController _addAssertion:]
  -[SBHideSharePlayContentFromSharedScreenController mousePointerManager:hardwarePointingDeviceAttachedDidChange:]
  -[SBHideSharePlayContentFromSharedScreenController acquireHideSharePlayContentFromClonedDisplaysAssertionForReason:]
  -[SBHideSharePlayContentFromSharedScreenController bannerManagerDidUpdateWindowLevel:]
  -[SBHideSharePlayContentFromSharedScreenController _handleControlCenterDidPresent]
  -[SBHideSharePlayContentFromSharedScreenController _handleControlCenterWillDismiss]
  -[SBHideSharePlayContentFromSharedScreenController _removeAssertion:]
  -[SBHideSharePlayContentFromSharedScreenController _resolveHidingBehavior]
  -[SBHideSharePlayContentFromSharedScreenController _startObservingForActiveHideAssertionIfNeeded]
  -[SBHideSharePlayContentFromSharedScreenController _stopObservingForActiveHideAssertionIfNeeded]
  -[SBHideSharePlayContentFromSharedScreenController _pipViewControllerToHide]
  -[SBHideSharePlayContentFromSharedScreenController _stopHidingViewControllerFromClonedDisplaysIfNeeded:]
  -[SBHideSharePlayContentFromSharedScreenController _isCoverSheetVisible]
  -[SBHideSharePlayContentFromSharedScreenController _bannerWindow]
  -[SBHideSharePlayContentFromSharedScreenController _deviceHasDaemonSceneThatShouldBeShared]
  -[SBHideSharePlayContentFromSharedScreenController _faceTimePIPWindow]
  -[SBHideSharePlayContentFromSharedScreenController _systemNotesWindow]
  -[SBHideSharePlayContentFromSharedScreenController _isCoverSheetFullyPresented]
  -[SBHideSharePlayContentFromSharedScreenController _startHidingViewControllerFromClonedDisplaysIfNeeded:]
  -[SBHideSharePlayContentFromSharedScreenController _stopHidingWindowFromClonedDisplaysIfNeeded:]
  -[SBHideSharePlayContentFromSharedScreenController _startHidingWindowFromClonedDisplaysIfNeeded:]
  -[SBHideSharePlayContentFromSharedScreenController _windowVisibilityDidChange:]
  -[SBHideSharePlayContentFromSharedScreenController _startTrackingPresentable:]
  -[SBHideSharePlayContentFromSharedScreenController _stopTrackingPresentable:]
  -[SBHideSharePlayContentFromSharedScreenController _canShareDaemonScenes]
  -[SBHideSharePlayContentFromSharedScreenController _deviceHasDaemonSceneThatShouldBeSharedIfPossible]


SBSnapshotWindow : UIWindow
  // class methods
  +[SBSnapshotWindow _isSecure]

  // instance methods
  -[SBSnapshotWindow interfaceOrientation]
  -[SBSnapshotWindow initWithFrame:orientation:]


SBViewSnapshotProvider : NSObject
 @property  @? completionBlock

  // instance methods
  -[SBViewSnapshotProvider .cxx_destruct]
  -[SBViewSnapshotProvider snapshot]
  -[SBViewSnapshotProvider completionBlock]
  -[SBViewSnapshotProvider setCompletionBlock:]
  -[SBViewSnapshotProvider initWithView:orientation:]
  -[SBViewSnapshotProvider snapshotAsynchronously:withImageBlock:]
  -[SBViewSnapshotProvider snapshotWithImageBlock:]


SBChainableModifierEvent : NSObject <BSDescriptionProviding, NSCopying>
 @property  BOOL handled
 @property  NSString *handledReason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBChainableModifierEvent loggingCategory]
  -[SBChainableModifierEvent .cxx_destruct]
  -[SBChainableModifierEvent succinctDescriptionBuilder]
  -[SBChainableModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBChainableModifierEvent descriptionWithMultilinePrefix:]
  -[SBChainableModifierEvent succinctDescription]
  -[SBChainableModifierEvent copyWithZone:]
  -[SBChainableModifierEvent handleWithReason:]
  -[SBChainableModifierEvent unhandledCopy]
  -[SBChainableModifierEvent isHandled]
  -[SBChainableModifierEvent handledReason]


SBFluidSwitcherScreenEdgePanGestureRecognizer : SBHomeGesturePanGestureRecognizer
 @property  SBFluidSwitcherViewController *switcherViewController

  // instance methods
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer _touchInterfaceOrientation]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer .cxx_destruct]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer setState:]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer setSwitcherViewController:]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer reset]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer switcherViewController]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer viewForTouchHistory]


SBFluidSwitcherPanGestureRecognizer : SBPanSystemGestureRecognizer <SBGestureRecognizerPanGestureProviding, SBGestureRecognizerTouchHistoryProviding>
 @property  SBTouchHistory *touchHistory
 @property  SBFluidSwitcherViewController *switcherViewController
 @property  BOOL installedAsSystemGesture
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherPanGestureRecognizer setTouchHistory:]
  -[SBFluidSwitcherPanGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBFluidSwitcherPanGestureRecognizer setInstalledAsSystemGesture:]
  -[SBFluidSwitcherPanGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBFluidSwitcherPanGestureRecognizer peakSpeed]
  -[SBFluidSwitcherPanGestureRecognizer .cxx_destruct]
  -[SBFluidSwitcherPanGestureRecognizer touchHistory]
  -[SBFluidSwitcherPanGestureRecognizer initWithTarget:action:]
  -[SBFluidSwitcherPanGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBFluidSwitcherPanGestureRecognizer touchesBegan:withEvent:]
  -[SBFluidSwitcherPanGestureRecognizer installedAsSystemGesture]
  -[SBFluidSwitcherPanGestureRecognizer touchesMoved:withEvent:]
  -[SBFluidSwitcherPanGestureRecognizer setSwitcherViewController:]
  -[SBFluidSwitcherPanGestureRecognizer reset]
  -[SBFluidSwitcherPanGestureRecognizer switcherViewController]
  -[SBFluidSwitcherPanGestureRecognizer touchesEnded:withEvent:]


SBSwitcherToActiveFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSwitcherToActiveFloatingSwitcherModifier transitionWillBegin]
  -[SBSwitcherToActiveFloatingSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBSwitcherToActiveFloatingSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBSwitcherToActiveFloatingSwitcherModifier wantsSwitcherDimmingView]
  -[SBSwitcherToActiveFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSwitcherToActiveFloatingSwitcherModifier switcherBackdropBlurType]
  -[SBSwitcherToActiveFloatingSwitcherModifier visibleAppLayouts]
  -[SBSwitcherToActiveFloatingSwitcherModifier .cxx_destruct]
  -[SBSwitcherToActiveFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBSwitcherToActiveFloatingSwitcherModifier _layoutSettings]
  -[SBSwitcherToActiveFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBSwitcherToActiveFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBSwitcherToActiveFloatingSwitcherModifier initWithTransitionID:direction:fullScreenAppLayout:floatingDeckModifier:]


SBIdleTimerService : NSObject <ITIdleTimerStateServiceDelegate, SBIdleTimerIdleEventHandler>
 @property  <SBIdleTimerServiceDelegate> *delegate
 @property  SBIdleTimerAggregateClientConfiguration *aggregateClientConfiguration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerService sharedInstance]
  +[SBIdleTimerService registerServices]
  +[SBIdleTimerService _sharedIdleTimerStateServiceCreatingIfNeeded:]
  +[SBIdleTimerService _sharedIdleTimerStateServiceIfExists]

  // instance methods
  -[SBIdleTimerService _removeConfigurationInfoForReason:fromArray:]
  -[SBIdleTimerService handleIdleTimerDidWarn]
  -[SBIdleTimerService handleIdleTimerDidExpire]
  -[SBIdleTimerService _stateCaptureDescription]
  -[SBIdleTimerService .cxx_destruct]
  -[SBIdleTimerService setDelegate:]
  -[SBIdleTimerService _aggregateConfigurations]
  -[SBIdleTimerService _acquireIdleTimerDisableAssertionForReason:]
  -[SBIdleTimerService _addStateCaptureHandlers]
  -[SBIdleTimerService handleIdleTimerUserAttentionDidReset]
  -[SBIdleTimerService acquireIdleTimerAssertionWithConfiguration:fromClient:forReason:]
  -[SBIdleTimerService delegate]
  -[SBIdleTimerService _init]
  -[SBIdleTimerService dealloc]
  -[SBIdleTimerService _removeAssertionsForReason:]
  -[SBIdleTimerService _addConfigurationInfo:toSortedArray:]
  -[SBIdleTimerService aggregateClientConfiguration]


_SBIdleTimerConfigurationInfo : NSObject <BSDescriptionProviding>
 @property  SBIdleTimerRequestConfiguration *configuration
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBIdleTimerConfigurationInfo configuration]
  -[_SBIdleTimerConfigurationInfo .cxx_destruct]
  -[_SBIdleTimerConfigurationInfo succinctDescriptionBuilder]
  -[_SBIdleTimerConfigurationInfo descriptionBuilderWithMultilinePrefix:]
  -[_SBIdleTimerConfigurationInfo descriptionWithMultilinePrefix:]
  -[_SBIdleTimerConfigurationInfo succinctDescription]
  -[_SBIdleTimerConfigurationInfo reason]
  -[_SBIdleTimerConfigurationInfo initWithConfiguration:reason:]


SBNotificationBannerDestinationTestActionRunner : NSObject <NCNotificationActionRunner>
 @property  BOOL shouldForwardAction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNotificationBannerDestinationTestActionRunner setShouldForwardAction:]
  -[SBNotificationBannerDestinationTestActionRunner shouldForwardAction]
  -[SBNotificationBannerDestinationTestActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]


SBStashedFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBStashedFloatingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBStashedFloatingSwitcherModifier visibleAppLayouts]
  -[SBStashedFloatingSwitcherModifier .cxx_destruct]
  -[SBStashedFloatingSwitcherModifier isSwitcherWindowVisible]
  -[SBStashedFloatingSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBStashedFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBStashedFloatingSwitcherModifier handleTapSlideOverTongueEvent:]
  -[SBStashedFloatingSwitcherModifier initWithFloatingConfiguration:environmentMode:]


SBShelfZoomTransitionModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBShelfZoomTransitionModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBShelfZoomTransitionModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBShelfZoomTransitionModifier titleOpacityForIndex:]
  -[SBShelfZoomTransitionModifier transitionWillBegin]
  -[SBShelfZoomTransitionModifier presentationAttributesForShelf:]
  -[SBShelfZoomTransitionModifier titleAndIconOpacityForIndex:]
  -[SBShelfZoomTransitionModifier headerStyleForIndex:]
  -[SBShelfZoomTransitionModifier transitionDidEnd]
  -[SBShelfZoomTransitionModifier animationAttributesForLayoutElement:]
  -[SBShelfZoomTransitionModifier shadowStyleForLayoutRole:inAppLayout:]
  -[SBShelfZoomTransitionModifier scaleForIndex:]
  -[SBShelfZoomTransitionModifier frameForIndex:]
  -[SBShelfZoomTransitionModifier visibleAppLayouts]
  -[SBShelfZoomTransitionModifier .cxx_destruct]
  -[SBShelfZoomTransitionModifier asyncRenderingAttributesForAppLayout:]
  -[SBShelfZoomTransitionModifier contentPageViewScaleForAppLayout:]
  -[SBShelfZoomTransitionModifier descriptionBuilderWithMultilinePrefix:]
  -[SBShelfZoomTransitionModifier cornerRadiiForIndex:]
  -[SBShelfZoomTransitionModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBShelfZoomTransitionModifier topMostLayoutElements]
  -[SBShelfZoomTransitionModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBShelfZoomTransitionModifier hiddenAppLayoutsInShelf:]
  -[SBShelfZoomTransitionModifier initWithTransitionID:direction:fromAppLayout:toAppLayout:shelf:]
  -[SBShelfZoomTransitionModifier _isEffectivelyInShelf]
  -[SBShelfZoomTransitionModifier _shouldDimLayoutRole:inAppLayout:forZoomDirection:]


SBActiveAppLayoutFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBActiveAppLayoutFloatingSwitcherModifier .cxx_destruct]
  -[SBActiveAppLayoutFloatingSwitcherModifier initWithActiveAppLayout:floatingConfiguration:environmentMode:]


_SBActiveAppFloorFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutsToResignActive]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[_SBActiveAppFloorFloatingSwitcherModifier visibleShelves]
  -[_SBActiveAppFloorFloatingSwitcherModifier backgroundOpacityForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isContainerStatusBarVisible]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsDockWindowLevelAssertion]
  -[_SBActiveAppFloorFloatingSwitcherModifier plusButtonAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[_SBActiveAppFloorFloatingSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenDimmingAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[_SBActiveAppFloorFloatingSwitcherModifier dockWindowLevel]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsDockBehaviorAssertion]
  -[_SBActiveAppFloorFloatingSwitcherModifier slideOverTongueDirection]
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenBackdropBlurType]
  -[_SBActiveAppFloorFloatingSwitcherModifier frameForShelf:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isHomeAffordanceSupportedForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[_SBActiveAppFloorFloatingSwitcherModifier plusButtonStyle]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier titleOpacityForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldScrollViewBlockTouches]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[_SBActiveAppFloorFloatingSwitcherModifier wallpaperScale]
  -[_SBActiveAppFloorFloatingSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsSlideOverTongue]
  -[_SBActiveAppFloorFloatingSwitcherModifier rotationAngleForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier slideOverTongueState]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenScale]
  -[_SBActiveAppFloorFloatingSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[_SBActiveAppFloorFloatingSwitcherModifier switcherBackdropBlurProgress]
  -[_SBActiveAppFloorFloatingSwitcherModifier shelfBackgroundBlurOpacity]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsSwitcherBackdropBlur]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier transactionCompletionOptions]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[_SBActiveAppFloorFloatingSwitcherModifier shelfBackgroundBlurFrame]
  -[_SBActiveAppFloorFloatingSwitcherModifier reopenClosedWindowsButtonScale]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsSwitcherDimmingView]
  -[_SBActiveAppFloorFloatingSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier dockProgress]
  -[_SBActiveAppFloorFloatingSwitcherModifier shadowOffsetForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier keyboardSuppressionMode]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[_SBActiveAppFloorFloatingSwitcherModifier clippingFrameForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier lighteningAlphaForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier titleAndIconOpacityForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isScrollEnabled]
  -[_SBActiveAppFloorFloatingSwitcherModifier isHomeScreenContentRequired]
  -[_SBActiveAppFloorFloatingSwitcherModifier dockWindowLevelPriority]
  -[_SBActiveAppFloorFloatingSwitcherModifier containerLeafAppLayoutForShelf:]
  -[_SBActiveAppFloorFloatingSwitcherModifier headerStyleForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[_SBActiveAppFloorFloatingSwitcherModifier neighboringAppLayoutsForFocusedAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier containerStatusBarAnimationDuration]
  -[_SBActiveAppFloorFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isFocusEnabledForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier switcherBackdropBlurType]
  -[_SBActiveAppFloorFloatingSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier switcherDimmingViewBlocksTouches]
  -[_SBActiveAppFloorFloatingSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[_SBActiveAppFloorFloatingSwitcherModifier scaleForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenBackdropBlurProgress]
  -[_SBActiveAppFloorFloatingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isIndexRubberbandableForSwipeToKill:]
  -[_SBActiveAppFloorFloatingSwitcherModifier switcherDimmingAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier dockUpdateMode]
  -[_SBActiveAppFloorFloatingSwitcherModifier frameForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier tintStyleForLayoutRole:inAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsHomeScreenPointerInteractions]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier blurViewIconScaleForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isWallpaperRequiredForSwitcher]
  -[_SBActiveAppFloorFloatingSwitcherModifier visibleAppLayouts]
  -[_SBActiveAppFloorFloatingSwitcherModifier .cxx_destruct]
  -[_SBActiveAppFloorFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isSwitcherWindowVisible]
  -[_SBActiveAppFloorFloatingSwitcherModifier contentViewScale]
  -[_SBActiveAppFloorFloatingSwitcherModifier wallpaperStyle]
  -[_SBActiveAppFloorFloatingSwitcherModifier cornerRadiiForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[_SBActiveAppFloorFloatingSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[_SBActiveAppFloorFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier topMostLayoutElements]
  -[_SBActiveAppFloorFloatingSwitcherModifier initWithActiveAppLayout:floatingConfiguration:environmentMode:]
  -[_SBActiveAppFloorFloatingSwitcherModifier _isActiveAppLayoutAtIndex:]


SBHomeGestureRootFloatingSwitcherModifier : SBGestureRootSwitcherModifier
  // instance methods
  -[SBHomeGestureRootFloatingSwitcherModifier .cxx_destruct]
  -[SBHomeGestureRootFloatingSwitcherModifier gestureType]
  -[SBHomeGestureRootFloatingSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBHomeGestureRootFloatingSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBHomeGestureRootFloatingSwitcherModifier _frameWithScaleAppliedForIndex:]
  -[SBHomeGestureRootFloatingSwitcherModifier initWithMultitaskingModifier:floatingConfiguration:]


SBHardwareButtonActionList : NSObject
 @property  NSMutableArray *actionBlocks
 @property  BOOL buttonDown

  // instance methods
  -[SBHardwareButtonActionList isButtonDown]
  -[SBHardwareButtonActionList scheduleButtonUpActionBlock:]
  -[SBHardwareButtonActionList .cxx_destruct]
  -[SBHardwareButtonActionList performQueuedButtonUpActions]
  -[SBHardwareButtonActionList setButtonDown:]
  -[SBHardwareButtonActionList actionBlocks]
  -[SBHardwareButtonActionList setActionBlocks:]


SBLockScreenActionContextFactory : NSObject
  // class methods
  +[SBLockScreenActionContextFactory sharedInstance]

  // instance methods
  -[SBLockScreenActionContextFactory lockScreenActionContextForAction:fromPlugin:]
  -[SBLockScreenActionContextFactory lockScreenActionContextForPlugin:]
  -[SBLockScreenActionContextFactory lockScreenActionContextForAlertItem:]


SBUserAgent : NSObject <SBUIUserAgent_Internal>
 @property  SBIdleTimerPolicyAggregator *_idleTimerPolicyAggregator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUserAgent setIdleText:]
  -[SBUserAgent _idleTimerPolicyAggregator]
  -[SBUserAgent activeInterfaceOrientation]
  -[SBUserAgent isInternalInstall]
  -[SBUserAgent notifyOnNextUserEvent]
  -[SBUserAgent launchFromSource:withURL:bundleID:allowUnlock:]
  -[SBUserAgent wifiRunLoopRef]
  -[SBUserAgent applicationInstalledForDisplayID:]
  -[SBUserAgent networkUsageTypeForAppWithDisplayID:]
  -[SBUserAgent springBoardIsActive]
  -[SBUserAgent topSuspendedEventsOnlyDisplayID]
  -[SBUserAgent deviceIsTethered]
  -[SBUserAgent .cxx_destruct]
  -[SBUserAgent _openApplication:withURL:fromSource:animated:options:]
  -[SBUserAgent foregroundApplicationDisplayID]
  -[SBUserAgent activateModalBulletinAlert:]
  -[SBUserAgent localizedDisplayNameForDisplayID:]
  -[SBUserAgent setBadgeNumberOrString:forApplicationWithID:]
  -[SBUserAgent init]
  -[SBUserAgent addIdleTimerHandler:]
  -[SBUserAgent isScreenOn]
  -[SBUserAgent addActiveInterfaceOrientationObserver:]
  -[SBUserAgent folderNameForDisplayID:]
  -[SBUserAgent activateRemoteAlertService:options:]
  -[SBUserAgent canLaunchFromSource:withURL:bundleID:]
  -[SBUserAgent _launchFromSource:withURL:bundleID:allowUnlock:animate:]
  -[SBUserAgent lockAndDimDevice]
  -[SBUserAgent isIdleTimerDisabledForReason:]
  -[SBUserAgent lockAndDimDeviceDisconnectingCallIfNecessary:]
  -[SBUserAgent deviceIsLocked]
  -[SBUserAgent _safeValue:forKey:ofType:]
  -[SBUserAgent launchApplicationFromSource:withDisplayID:options:]
  -[SBUserAgent _setIdleTimerPolicyAggregator:]
  -[SBUserAgent openURL:allowUnlock:animated:]
  -[SBUserAgent deviceIsPasscodeLockedRemotely]
  -[SBUserAgent _cleanupFromBannerLaunch]
  -[SBUserAgent isApplicationRestrictedOrHidden:]
  -[SBUserAgent deviceIsPasscodeLocked]
  -[SBUserAgent undimScreen]
  -[SBUserAgent lockScreenIsShowing]
  -[SBUserAgent removeIdleTimerHandler:]
  -[SBUserAgent disableLockScreenBundleNamed:deactivationContext:]
  -[SBUserAgent isApplicationForegroundObscured:]
  -[SBUserAgent isNamedRemoteAlertServiceActive:controllerClassName:]
  -[SBUserAgent launchApplicationFromSource:withURL:options:]
  -[SBUserAgent deviceIsBlocked]
  -[SBUserAgent setMinimumBacklightLevel:animated:]
  -[SBUserAgent updateInterfaceOrientationIfNecessary]
  -[SBUserAgent removeActiveInterfaceOrientationObserver:]
  -[SBUserAgent setIdleTimerDisabled:forReason:]
  -[SBUserAgent enableLockScreenBundleNamed:activationContext:]
  -[SBUserAgent lockAndDimDeviceDisconnectingCallIfNecessary:andDimScreen:]


SBPolygon : NSObject
 @property  NSMutableArray *mutablePoints
 @property  {CGPoint=dd} centroid
 @property  double perimeter
 @property  NSMutableArray *weights
 @property  {CGPoint=dd} weightedCentroid
 @property  unsigned long pointCount
 @property  double distanceOfFarthestPointFromCentroid

  // class methods
  +[SBPolygon _sortPoints:]
  +[SBPolygon _pointAtIndex:ofPointArray:]

  // instance methods
  -[SBPolygon _translate:]
  -[SBPolygon _points]
  -[SBPolygon .cxx_destruct]
  -[SBPolygon _centroid]
  -[SBPolygon isEqual:]
  -[SBPolygon _updateProperties]
  -[SBPolygon _weights]
  -[SBPolygon _scale:]
  -[SBPolygon points]
  -[SBPolygon pointCount]
  -[SBPolygon initWithPoints:]
  -[SBPolygon _applyTransform:]
  -[SBPolygon distanceOfFarthestPointFromCentroid]
  -[SBPolygon _pointAtIndex:]
  -[SBPolygon _setPoints:]
  -[SBPolygon _isLeftHanded]
  -[SBPolygon _thumbIndex]
  -[SBPolygon enumeratePointsUsingBlock:]
  -[SBPolygon _updateCentroid]
  -[SBPolygon _updateWeights]
  -[SBPolygon _updateWeightedCentroid]
  -[SBPolygon _setCentroid:]
  -[SBPolygon _setWeights:]
  -[SBPolygon _weightAtIndex:]
  -[SBPolygon _setWeightedCentroid:]
  -[SBPolygon _baseOrientation]
  -[SBPolygon initWithPoints:pointCount:]
  -[SBPolygon _perimeter]
  -[SBPolygon _flipHorizontally]
  -[SBPolygon _rotate:]
  -[SBPolygon _meanFingertipRowAngle]
  -[SBPolygon _meanRadius]
  -[SBPolygon _weightedCentroid]


SBExternalSettingsDefaults : BSAbstractDefaultDomain
 @property  BOOL badgedForSoftwareUpdate

  // class methods
  +[SBExternalSettingsDefaults __useDynamicMethodResolution]

  // instance methods
  -[SBExternalSettingsDefaults init]
  -[SBExternalSettingsDefaults setBadgedForSoftwareUpdate:]
  -[SBExternalSettingsDefaults isBadgedForSoftwareUpdate]


SBHomeGesturePanGestureRecognizer : SBScreenEdgePanGestureRecognizer <PTSettingsKeyObserver, SBGestureRecognizerPanGestureProviding, SBGestureRecognizerTouchHistoryProviding>
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  SBFluidSwitcherGestureExclusionTrapezoid *portraitExclusionTrapezoid
 @property  SBFluidSwitcherGestureExclusionTrapezoid *landscapeExclusionTrapezoid
 @property  SBTouchHistory *touchHistory
 @property  <SBHomeGesturePanGestureRecognizerInterfaceDelegate> *interfaceDelegate
 @property  BOOL preventHorizontalSwipesOutsideTrapezoid
 @property  BOOL installedAsSystemGesture
 @property  UIView *viewForTouchHistory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHomeGesturePanGestureRecognizer homeGesturePanGestureRecognizerWithTarget:action:]

  // instance methods
  -[SBHomeGesturePanGestureRecognizer _shouldBegin]
  -[SBHomeGesturePanGestureRecognizer _touchInterfaceOrientation]
  -[SBHomeGesturePanGestureRecognizer setPreventHorizontalSwipesOutsideTrapezoid:]
  -[SBHomeGesturePanGestureRecognizer setTouchHistory:]
  -[SBHomeGesturePanGestureRecognizer homeGestureSettings]
  -[SBHomeGesturePanGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBHomeGesturePanGestureRecognizer setInstalledAsSystemGesture:]
  -[SBHomeGesturePanGestureRecognizer initWithTarget:action:type:options:]
  -[SBHomeGesturePanGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBHomeGesturePanGestureRecognizer peakSpeed]
  -[SBHomeGesturePanGestureRecognizer .cxx_destruct]
  -[SBHomeGesturePanGestureRecognizer touchHistory]
  -[SBHomeGesturePanGestureRecognizer interfaceDelegate]
  -[SBHomeGesturePanGestureRecognizer sb_commonInitHomeGesturePanGestureRecognizer]
  -[SBHomeGesturePanGestureRecognizer setPortraitExclusionTrapezoid:]
  -[SBHomeGesturePanGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBHomeGesturePanGestureRecognizer touchesBegan:withEvent:]
  -[SBHomeGesturePanGestureRecognizer landscapeExclusionTrapezoid]
  -[SBHomeGesturePanGestureRecognizer _shouldBlockHomeGestureForKeyboardInputMode:]
  -[SBHomeGesturePanGestureRecognizer _currentExclusionShapeForEdge:]
  -[SBHomeGesturePanGestureRecognizer installedAsSystemGesture]
  -[SBHomeGesturePanGestureRecognizer touchesMoved:withEvent:]
  -[SBHomeGesturePanGestureRecognizer _updateHomeGestureParameters]
  -[SBHomeGesturePanGestureRecognizer _currentKeyboardExclusionCompositeShape]
  -[SBHomeGesturePanGestureRecognizer portraitExclusionTrapezoid]
  -[SBHomeGesturePanGestureRecognizer reset]
  -[SBHomeGesturePanGestureRecognizer setLandscapeExclusionTrapezoid:]
  -[SBHomeGesturePanGestureRecognizer setHomeGestureSettings:]
  -[SBHomeGesturePanGestureRecognizer _setUpExclusionTrapezoids]
  -[SBHomeGesturePanGestureRecognizer setInterfaceDelegate:]
  -[SBHomeGesturePanGestureRecognizer _SBLogTouchesWithMethodName:withMethodName:]
  -[SBHomeGesturePanGestureRecognizer settings:changedValueForKey:]
  -[SBHomeGesturePanGestureRecognizer preventHorizontalSwipesOutsideTrapezoid]
  -[SBHomeGesturePanGestureRecognizer _isOutsideOfExclusionTrapezoid]
  -[SBHomeGesturePanGestureRecognizer viewForTouchHistory]
  -[SBHomeGesturePanGestureRecognizer touchesEnded:withEvent:]


SBSystemNotesSettingsDomain : PTDomain
  // class methods
  +[SBSystemNotesSettingsDomain domainGroupName]
  +[SBSystemNotesSettingsDomain rootSettings]
  +[SBSystemNotesSettingsDomain domainName]
  +[SBSystemNotesSettingsDomain rootSettingsClass]


SBSystemNotesSettings : PTSettings
 @property  SBSystemNotesAppearanceSettings *appearanceSettings
 @property  SBSystemNotesLaunchSettings *launchSettings
 @property  SBPIPStashVisualSettings *stashVisualSettings
 @property  SBPIPShadowSettings *shadowSettings
 @property  SBSystemNotesInteractionSettings *interactionSettings
 @property  SBSystemNotesSwipeMetricSettings *cornerSwipeMetricSettings
 @property  SBCornerPencilPanGestureSettings *pencilSwipeGestureTuningSettings
 @property  SBCornerFingerPanGestureSettings *fingerSwipeGestureTuningSettings

  // class methods
  +[SBSystemNotesSettings settingsControllerModule]
  +[SBSystemNotesSettings ignoresKey:]

  // instance methods
  -[SBSystemNotesSettings .cxx_destruct]
  -[SBSystemNotesSettings setDefaultValues]
  -[SBSystemNotesSettings launchSettings]
  -[SBSystemNotesSettings interactionSettings]
  -[SBSystemNotesSettings stashVisualSettings]
  -[SBSystemNotesSettings shadowSettings]
  -[SBSystemNotesSettings setStashVisualSettings:]
  -[SBSystemNotesSettings setShadowSettings:]
  -[SBSystemNotesSettings appearanceSettings]
  -[SBSystemNotesSettings setAppearanceSettings:]
  -[SBSystemNotesSettings setLaunchSettings:]
  -[SBSystemNotesSettings setInteractionSettings:]
  -[SBSystemNotesSettings cornerSwipeMetricSettings]
  -[SBSystemNotesSettings setCornerSwipeMetricSettings:]
  -[SBSystemNotesSettings pencilSwipeGestureTuningSettings]
  -[SBSystemNotesSettings setPencilSwipeGestureTuningSettings:]
  -[SBSystemNotesSettings fingerSwipeGestureTuningSettings]
  -[SBSystemNotesSettings setFingerSwipeGestureTuningSettings:]


SBSystemNotesLaunchSettings : PTSettings
 @property  NSString *applicationBundleID

  // class methods
  +[SBSystemNotesLaunchSettings settingsControllerModule]

  // instance methods
  -[SBSystemNotesLaunchSettings applicationBundleID]
  -[SBSystemNotesLaunchSettings .cxx_destruct]
  -[SBSystemNotesLaunchSettings setDefaultValues]
  -[SBSystemNotesLaunchSettings setApplicationBundleID:]


SBSystemNotesInteractionSettings : SBPIPInteractionSettings
 @property  double delayBeforeUserInteractionDismissesThumbnail

  // class methods
  +[SBSystemNotesInteractionSettings settingsControllerModule]

  // instance methods
  -[SBSystemNotesInteractionSettings setDefaultValues]
  -[SBSystemNotesInteractionSettings delayBeforeUserInteractionDismissesThumbnail]
  -[SBSystemNotesInteractionSettings setDelayBeforeUserInteractionDismissesThumbnail:]


SBSystemNotesSwipeMetricSettings : PTSettings
 @property  double panDistanceBeforeScaling
 @property  double panInitialThumbnailScale
 @property  double panDistancePer1xScaling
 @property  double scaleThresholdBeforeFullSize
 @property  double flickVelocityThreshold
 @property  double cornerDistanceBeforeScalingForDismiss

  // class methods
  +[SBSystemNotesSwipeMetricSettings settingsControllerModule]
  +[SBSystemNotesSwipeMetricSettings ignoresKey:]

  // instance methods
  -[SBSystemNotesSwipeMetricSettings setDefaultValues]
  -[SBSystemNotesSwipeMetricSettings setPanDistanceBeforeScaling:]
  -[SBSystemNotesSwipeMetricSettings setPanInitialThumbnailScale:]
  -[SBSystemNotesSwipeMetricSettings setPanDistancePer1xScaling:]
  -[SBSystemNotesSwipeMetricSettings setScaleThresholdBeforeFullSize:]
  -[SBSystemNotesSwipeMetricSettings setFlickVelocityThreshold:]
  -[SBSystemNotesSwipeMetricSettings setCornerDistanceBeforeScalingForDismiss:]
  -[SBSystemNotesSwipeMetricSettings panDistanceBeforeScaling]
  -[SBSystemNotesSwipeMetricSettings panInitialThumbnailScale]
  -[SBSystemNotesSwipeMetricSettings panDistancePer1xScaling]
  -[SBSystemNotesSwipeMetricSettings scaleThresholdBeforeFullSize]
  -[SBSystemNotesSwipeMetricSettings flickVelocityThreshold]
  -[SBSystemNotesSwipeMetricSettings cornerDistanceBeforeScalingForDismiss]


SBSystemNotesAppearanceSettings : PTSettings
 @property  double platterTintRed
 @property  double platterTintGreen
 @property  double platterTintBlue
 @property  double platterTintAlpha

  // class methods
  +[SBSystemNotesAppearanceSettings settingsControllerModule]

  // instance methods
  -[SBSystemNotesAppearanceSettings setDefaultValues]
  -[SBSystemNotesAppearanceSettings setPlatterTintRed:]
  -[SBSystemNotesAppearanceSettings setPlatterTintGreen:]
  -[SBSystemNotesAppearanceSettings setPlatterTintBlue:]
  -[SBSystemNotesAppearanceSettings setPlatterTintAlpha:]
  -[SBSystemNotesAppearanceSettings platterTintRed]
  -[SBSystemNotesAppearanceSettings platterTintGreen]
  -[SBSystemNotesAppearanceSettings platterTintBlue]
  -[SBSystemNotesAppearanceSettings platterTintAlpha]


SBTouchTemplate : SBPolygon
  // instance methods
  -[SBTouchTemplate matchesPolygon:matchTransformsAllowed:acceptanceFactor:outMorphedCandidate:]


SBDockInteractionMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBDockInteractionMetric .cxx_destruct]
  -[SBDockInteractionMetric init]


SBPIPRestoreToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBPIPRestoreToFullScreenSwitcherModifier transitionWillBegin]
  -[SBPIPRestoreToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBPIPRestoreToFullScreenSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBPIPRestoreToFullScreenSwitcherModifier scaleForIndex:]
  -[SBPIPRestoreToFullScreenSwitcherModifier frameForIndex:]
  -[SBPIPRestoreToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBPIPRestoreToFullScreenSwitcherModifier .cxx_destruct]
  -[SBPIPRestoreToFullScreenSwitcherModifier _layoutSettings]
  -[SBPIPRestoreToFullScreenSwitcherModifier clipsToBoundsAtIndex:]
  -[SBPIPRestoreToFullScreenSwitcherModifier cornerRadiiForIndex:]
  -[SBPIPRestoreToFullScreenSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBPIPRestoreToFullScreenSwitcherModifier clippingFrameForIndex:withBounds:]
  -[SBPIPRestoreToFullScreenSwitcherModifier completesWhenChildrenComplete]
  -[SBPIPRestoreToFullScreenSwitcherModifier initWithTransitionID:zoomModifier:fromAppLayout:toAppLayout:]
  -[SBPIPRestoreToFullScreenSwitcherModifier _isFromAppLayout:]
  -[SBPIPRestoreToFullScreenSwitcherModifier _isToAppLayout:]


SBAnimationUtilities : NSObject
  // class methods
  +[SBAnimationUtilities animationSettingsForRotationFromInterfaceOrientation:toInterfaceOrientation:]
  +[SBAnimationUtilities adjustedRotationAnimationDurationForDuration:fromOrientation:toOrientation:]


SBCAAnimationBlockDelegate : NSObject <CAAnimationDelegate>
 @property  @? animationDidStartHandler
 @property  @? animationDidStopHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCAAnimationBlockDelegate .cxx_destruct]
  -[SBCAAnimationBlockDelegate animationDidStop:finished:]
  -[SBCAAnimationBlockDelegate animationDidStart:]
  -[SBCAAnimationBlockDelegate animationDidStartHandler]
  -[SBCAAnimationBlockDelegate setAnimationDidStartHandler:]
  -[SBCAAnimationBlockDelegate animationDidStopHandler]
  -[SBCAAnimationBlockDelegate setAnimationDidStopHandler:]


SBBannerWindow : SBSecureMainScreenActiveInterfaceOrientationWindow
  // class methods
  +[SBBannerWindow _traitsArbiterOrientationActuationRole]
  +[SBBannerWindow layoutContentViewControllerWithConstraints]

  // instance methods
  -[SBBannerWindow _canBecomeKeyWindow]
  -[SBBannerWindow canResignFirstResponder]
  -[SBBannerWindow becomeFirstResponder]
  -[SBBannerWindow init]
  -[SBBannerWindow resignFirstResponder]
  -[SBBannerWindow setHidden:]


SBBackBoardServicesInterface : NSObject
  // instance methods
  -[SBBackBoardServicesInterface setHitTestRegions:forDisplay:]


SBApplicationSupportServiceDelegate : NSObject <UISApplicationSupportServiceDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationSupportServiceDelegate requestPasscodeUnlockUIForClient:withCompletion:]
  -[SBApplicationSupportServiceDelegate .cxx_destruct]
  -[SBApplicationSupportServiceDelegate _rebuildDefaultContext]
  -[SBApplicationSupportServiceDelegate destroyScenesWithPersistentIdentifiers:animationType:destroySessions:forClient:completion:]
  -[SBApplicationSupportServiceDelegate init]
  -[SBApplicationSupportServiceDelegate requestPasscodeCheckUIForClient:withCompletion:]
  -[SBApplicationSupportServiceDelegate dealloc]
  -[SBApplicationSupportServiceDelegate service:overrideClientInitialization:]
  -[SBApplicationSupportServiceDelegate service:initializeClient:]


SBApplicationSupportServiceSingleton : NSObject
  // class methods
  +[SBApplicationSupportServiceSingleton startService]


SBTouchRegionManager : NSObject <FBSDisplayLayoutObserver, PTSettingsKeyObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTouchRegionManager sharedInstance]

  // instance methods
  -[SBTouchRegionManager touchRegionBuffer]
  -[SBTouchRegionManager setTouchRegionBuffer:]
  -[SBTouchRegionManager .cxx_destruct]
  -[SBTouchRegionManager _initWithBKSInterface:displayLayoutMonitor:]
  -[SBTouchRegionManager _queue_floatingHitTestRegionForLayoutRect:]
  -[SBTouchRegionManager init]
  -[SBTouchRegionManager _queue_calculateHitTestRegionsFromSceneRects:]
  -[SBTouchRegionManager _queue_calculateTouchRegionsFromSceneRects:]
  -[SBTouchRegionManager layoutMonitor:didUpdateDisplayLayout:withContext:]
  -[SBTouchRegionManager setDisplayLayoutMonitor:]
  -[SBTouchRegionManager settings:changedValueForKey:]
  -[SBTouchRegionManager dealloc]
  -[SBTouchRegionManager displayLayoutMonitor]
  -[SBTouchRegionManager _queue_displayLayoutDidUpdate:]


SBBarSwipeAffordanceViewController : UIViewController <SBBarSwipeAffordanceControlling>
 @property  SBBarSwipeAffordanceView *view
 @property  <SBBarSwipeAffordanceControllingDelegate> *delegate
 @property  SBBarSwipeAffordanceView *barSwipeAffordanceView
 @property  BOOL wantsToBeActiveAffordance
 @property  BOOL suppressAffordance
 @property  long long activationPolicyForParticipantsBelow
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  SBFZStackParticipant *zStackParticipant
 @property  <SBHomeGrabberPointerClickDelegate> *pointerClickDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBarSwipeAffordanceViewController homeGestureParticipant]
  -[SBBarSwipeAffordanceViewController zStackParticipant:updatePreferences:]
  -[SBBarSwipeAffordanceViewController zStackParticipantDidChange:]
  -[SBBarSwipeAffordanceViewController .cxx_destruct]
  -[SBBarSwipeAffordanceViewController setDelegate:]
  -[SBBarSwipeAffordanceViewController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBBarSwipeAffordanceViewController pointerClickDelegate]
  -[SBBarSwipeAffordanceViewController zStackParticipant]
  -[SBBarSwipeAffordanceViewController setPointerClickDelegate:]
  -[SBBarSwipeAffordanceViewController setActivationPolicyForParticipantsBelow:]
  -[SBBarSwipeAffordanceViewController delegate]
  -[SBBarSwipeAffordanceViewController activationPolicyForParticipantsBelow]
  -[SBBarSwipeAffordanceViewController loadView]
  -[SBBarSwipeAffordanceViewController _canShowWhileLocked]
  -[SBBarSwipeAffordanceViewController wantsToBeActiveAffordance]
  -[SBBarSwipeAffordanceViewController initWithHomeGestureParticipantIdentifier:zStackParticipantIdentifier:]
  -[SBBarSwipeAffordanceViewController setWantsToBeActiveAffordance:]
  -[SBBarSwipeAffordanceViewController barSwipeAffordanceView]
  -[SBBarSwipeAffordanceViewController suppressAffordance]
  -[SBBarSwipeAffordanceViewController setSuppressAffordance:]
  -[SBBarSwipeAffordanceViewController initWithHomeGestureParticipantIdentifier:]


SBBiometricKitDefaults : BSAbstractDefaultDomain
 @property  BOOL coachingHintsEnabled

  // instance methods
  -[SBBiometricKitDefaults init]
  -[SBBiometricKitDefaults _bindAndRegisterDefaults]


SBSetupWiFiScanner : NSObject
 @property  NSThread *scanningThread
 @property  @? completionHandler
 @property  long long state

  // instance methods
  -[SBSetupWiFiScanner _completionHandler]
  -[SBSetupWiFiScanner _setState:]
  -[SBSetupWiFiScanner _state]
  -[SBSetupWiFiScanner .cxx_destruct]
  -[SBSetupWiFiScanner _setCompletionHandler:]
  -[SBSetupWiFiScanner cancel]
  -[SBSetupWiFiScanner dealloc]
  -[SBSetupWiFiScanner beginScanningWithCompletionHandler:]
  -[SBSetupWiFiScanner _thread_closeWifiConnection]
  -[SBSetupWiFiScanner _wifiScanningThread]
  -[SBSetupWiFiScanner _setScanningThread:]
  -[SBSetupWiFiScanner _thread_callCompletionHandlerWithGuessedCountries:]
  -[SBSetupWiFiScanner _scanningThread]
  -[SBSetupWiFiScanner _thread_cancelScanning]
  -[SBSetupWiFiScanner _thread_wifiScanComplete:error:]


SBTransientOverlayWindow : SBWindow
  // class methods
  +[SBTransientOverlayWindow sb_autorotates]
  +[SBTransientOverlayWindow _isSecure]

  // instance methods
  -[SBTransientOverlayWindow _canBecomeKeyWindow]


SBTransientOverlayBackgroundWindow : SBWindow
  // class methods
  +[SBTransientOverlayBackgroundWindow sb_autorotates]
  +[SBTransientOverlayBackgroundWindow _isSecure]

  // instance methods
  -[SBTransientOverlayBackgroundWindow _canBecomeKeyWindow]


SBHarmonyController : NSObject
 @property  BOOL supportsWhitePointAdaptation
 @property  BOOL whitePointAdaptationEnabled
 @property  long long whitePointAdaptivityStyle
 @property  BOOL supportsBlueLightReduction
 @property  SBHarmonySettings *harmonySettings

  // class methods
  +[SBHarmonyController sharedInstance]

  // instance methods
  -[SBHarmonyController supportsBlueLightReduction]
  -[SBHarmonyController setWhitePointAdaptivityStyle:]
  -[SBHarmonyController .cxx_destruct]
  -[SBHarmonyController init]
  -[SBHarmonyController supportsWhitePointAdaptation]
  -[SBHarmonyController setWhitePointAdaptivityStyle:animationSettings:]
  -[SBHarmonyController setWhitePointAdaptationStrength:forWhitePointAdaptivityStyle:]
  -[SBHarmonyController whitePointAdaptivityStyle]
  -[SBHarmonyController whitePointAdaptationStrengthForWhitePointAdaptivityStyle:]
  -[SBHarmonyController _adaptationClient]
  -[SBHarmonyController setWhitePointAdaptationEnabled:]
  -[SBHarmonyController isWhitePointAdaptationEnabled]
  -[SBHarmonyController harmonySettings]
  -[SBHarmonyController setWhitePointAdaptivityStyleWithStyles:animationSettings:]
  -[SBHarmonyController transitionFromWhitePointAdaptivityStyleWithStyles:toWhitePointAdaptivityStyleWithStyles:fromPercentage:toPercentage:animationSettings:]


SBExternalDuetDefaults : BSAbstractDefaultDomain
 @property  NSArray *duetAllowedApps

  // instance methods
  -[SBExternalDuetDefaults init]
  -[SBExternalDuetDefaults _bindAndRegisterDefaults]


SBBiometricMonitorTestRecipeDummyDataSource : NSObject <SBBiometricMonitorDataSource>
 @property  BOOL presenceDetectRunning
 @property  BOOL matchRunning
 @property  BOOL poseIsMarginal
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBiometricMonitorTestRecipeDummyDataSource .cxx_destruct]
  -[SBBiometricMonitorTestRecipeDummyDataSource addObserver:]
  -[SBBiometricMonitorTestRecipeDummyDataSource removeObserver:]
  -[SBBiometricMonitorTestRecipeDummyDataSource matchRunning]
  -[SBBiometricMonitorTestRecipeDummyDataSource presenceDetectRunning]
  -[SBBiometricMonitorTestRecipeDummyDataSource poseIsMarginal]
  -[SBBiometricMonitorTestRecipeDummyDataSource cycleState]


SBBiometricMonitorTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBiometricMonitorTestRecipe load]

  // instance methods
  -[SBBiometricMonitorTestRecipe .cxx_destruct]
  -[SBBiometricMonitorTestRecipe title]
  -[SBBiometricMonitorTestRecipe handleVolumeIncrease]
  -[SBBiometricMonitorTestRecipe handleVolumeDecrease]


SBInsertionSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  SBAppLayout *appLayout
 @property  unsigned long index
 @property  unsigned long phase

  // instance methods
  -[SBInsertionSwitcherModifierEvent appLayout]
  -[SBInsertionSwitcherModifierEvent phase]
  -[SBInsertionSwitcherModifierEvent .cxx_destruct]
  -[SBInsertionSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBInsertionSwitcherModifierEvent type]
  -[SBInsertionSwitcherModifierEvent index]
  -[SBInsertionSwitcherModifierEvent copyWithZone:]
  -[SBInsertionSwitcherModifierEvent initWithAppLayout:intoIndex:phase:]


SBControlCenterWindow : SBIgnoredForAutorotationSecureWindow
  // class methods
  +[SBControlCenterWindow _traitsArbiterOrientationActuationRole]

  // instance methods
  -[SBControlCenterWindow _canBecomeKeyWindow]
  -[SBControlCenterWindow hitTest:withEvent:]
  -[SBControlCenterWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBControlCenterWindow window]


SBControlCenterController : NSObject <CCUIModularControlCenterOverlayViewControllerDelegate, SBGrabberTongueDelegate, CSExternalBehaviorProviding, CSExternalPresentationProviding, CSExternalAppearanceProviding, UIGestureRecognizerDelegate, SBSystemGestureRecognizerDelegate, SBBarSwipeAffordanceObserver, SBBarSwipeAffordanceDelegate, SBFIdleTimerBehaviorProviding, CCUIHostStatusBarStyleProvider, SBReachabilityObserver, SBFSensorActivityObserver, SBIndirectPanGestureRecognizerOrientationProviding, SBHomeGrabberPointerClickDelegate, SBIdleTimerProviding, CSCoverSheetOverlaying>
 @property  SBControlCenterWindow *window
 @property  CCUIModularControlCenterOverlayViewController *viewController
 @property  SBBarSwipeAffordanceViewController *homeAffordanceViewController
 @property  SBControlCenterSystemAgent *systemAgent
 @property  BSSimpleAssertion *hideStatusBarAssertion
 @property  SBAppStatusBarSettingsAssertion *statusBarAssertion
 @property  SBAsynchronousRenderingAssertion *asynchronousRenderingAssertion
 @property  SBWorkspaceKeyboardFocusController *keyboardFocusController
 @property  SBGrabberTongue *grabberTongue
 @property  UIPanGestureRecognizer *statusBarPullGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectStatusBarPullGestureRecognizer
 @property  BOOL indirectStatusBarPullGestureCalledBegin
 @property  UIApplicationSceneDeactivationAssertion *resignActiveAssertion
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  NSHashTable *observers
 @property  NSMutableArray *windowLevelAssertions
 @property  <BSInvalidatable> *idleTimerDisableAssertion
 @property  <BSInvalidatable> *bannerSuppressionAssertion
 @property  <BSInvalidatable> *deferOrientationUpdatesAssertion
 @property  <BSInvalidatable> *keyboardFocusLockAssertion
 @property  PTSingleTestRecipe *presentModuleTestRecipe
 @property  PTSingleTestRecipe *userInterfaceStyleTestRecipe
 @property  BOOL presented
 @property  BOOL visible
 @property  BOOL allowGestureForContentBelow
 @property  unsigned long presentingEdge
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  <SBFSensorActivityDataProvider> *sensorActivityDataProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  <UICoordinateSpace> *presentationCoordinateSpace
 @property  NSArray *presentationRegions
 @property  NSString *appearanceIdentifier
 @property  NSSet *components
 @property  _UILegibilitySettings *legibilitySettings
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  CCUIStatusBarStyleSnapshot *hostStatusBarStyle

  // class methods
  +[SBControlCenterController sharedInstance]
  +[SBControlCenterController sharedInstanceIfExists]
  +[SBControlCenterController _sharedInstanceCreatingIfNeeded:]

  // instance methods
  -[SBControlCenterController grabberTongue:shouldShowTongueOnFirstSwipeWithEdgeLocation:]
  -[SBControlCenterController _updateWindowLevel]
  -[SBControlCenterController idleTimerCoordinator]
  -[SBControlCenterController grabberTongue:shouldAllowSecondSwipeWithEdgeLocation:]
  -[SBControlCenterController coordinatorRequestedIdleTimerBehavior:]
  -[SBControlCenterController indirectPanEffectiveInterfaceOrientation]
  -[SBControlCenterController setDeferOrientationUpdatesAssertion:]
  -[SBControlCenterController setWindow:]
  -[SBControlCenterController _willDismiss]
  -[SBControlCenterController grabberTongueDidDismiss:]
  -[SBControlCenterController grabberTongue:shouldReceiveTouch:]
  -[SBControlCenterController hostStatusBarStyle]
  -[SBControlCenterController idleTimerDisableAssertion]
  -[SBControlCenterController barSwipeAffordanceView:systemGestureTypeForType:]
  -[SBControlCenterController _shouldShowGrabberOnFirstSwipe]
  -[SBControlCenterController setSensorActivityDataProvider:]
  -[SBControlCenterController grabberTongueCanceledPulling:withDistance:andVelocity:andGesture:]
  -[SBControlCenterController viewController]
  -[SBControlCenterController homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBControlCenterController grabberTongueOrPullEnabled:forGestureRecognizer:]
  -[SBControlCenterController homeAffordanceViewController]
  -[SBControlCenterController handleReachabilityModeActivated]
  -[SBControlCenterController controlCenterViewController:didUpdateHomeGestureDismissalAllowed:]
  -[SBControlCenterController handleReachabilityYOffsetDidChange]
  -[SBControlCenterController systemAgent]
  -[SBControlCenterController resignActiveAssertion]
  -[SBControlCenterController setIdleTimerDisableAssertion:]
  -[SBControlCenterController _requirePresentGestureRecognizerToFailForGestureRecognizer:]
  -[SBControlCenterController setGrabberTongue:]
  -[SBControlCenterController setWindowLevelAssertions:]
  -[SBControlCenterController windowLevelAssertions]
  -[SBControlCenterController displayLayoutElement]
  -[SBControlCenterController handleReachabilityModeDeactivated]
  -[SBControlCenterController _handleStatusBarPullDownGesture:]
  -[SBControlCenterController deferOrientationUpdatesAssertion]
  -[SBControlCenterController reachabilitySpringAnimationBehaviorForControlCenterViewController:]
  -[SBControlCenterController setAsynchronousRenderingAssertion:]
  -[SBControlCenterController setIdleTimerCoordinator:]
  -[SBControlCenterController dismissAnimated:completion:]
  -[SBControlCenterController dismissOverlayForDashBoardAnimated:]
  -[SBControlCenterController coverSheetIdentifier]
  -[SBControlCenterController hideStatusBarAssertion]
  -[SBControlCenterController presentingEdge]
  -[SBControlCenterController grabberTongueBeganPulling:withDistance:andVelocity:andGesture:]
  -[SBControlCenterController _updateWindowVisibility]
  -[SBControlCenterController _enumerateObservers:]
  -[SBControlCenterController _controlCenterWindow]
  -[SBControlCenterController _isLocationXWithinTrailingStatusBarRegion:regionPadding:]
  -[SBControlCenterController conformsToCSBehaviorProviding]
  -[SBControlCenterController grabberTongue]
  -[SBControlCenterController asynchronousRenderingAssertion]
  -[SBControlCenterController grabberTongueUpdatedPulling:withDistance:andVelocity:andGesture:]
  -[SBControlCenterController sensorActivityDataProvider]
  -[SBControlCenterController customGestureRecognizerForGrabberTongue:]
  -[SBControlCenterController handleDidEndReachabilityAnimation]
  -[SBControlCenterController grabberTongueEndedPulling:withDistance:andVelocity:andGesture:]
  -[SBControlCenterController acquireWindowLevelAssertionWithPriority:windowLevel:reason:]
  -[SBControlCenterController presentAnimated:]
  -[SBControlCenterController activityDidChangeForSensorActivityDataProvider:]
  -[SBControlCenterController setResignActiveAssertion:]
  -[SBControlCenterController grabberTongueWillPresent:]
  -[SBControlCenterController setKeyboardFocusLockAssertion:]
  -[SBControlCenterController keyboardFocusController]
  -[SBControlCenterController idleTimerMode]
  -[SBControlCenterController conformsToCSExternalBehaviorProviding]
  -[SBControlCenterController idleWarnMode]
  -[SBControlCenterController setDisplayLayoutElement:]
  -[SBControlCenterController presentationRegions]
  -[SBControlCenterController isPresented]
  -[SBControlCenterController _requireGestureRecognizerToFailForPresentGestureRecognizer:]
  -[SBControlCenterController .cxx_destruct]
  -[SBControlCenterController idleTimerDuration]
  -[SBControlCenterController didCloseExpandedModuleForControlCenterViewController:]
  -[SBControlCenterController statusBarAssertion]
  -[SBControlCenterController _willPresent]
  -[SBControlCenterController setStatusBarAssertion:]
  -[SBControlCenterController allowGestureForContentBelow]
  -[SBControlCenterController bannerSuppressionAssertion]
  -[SBControlCenterController participantState]
  -[SBControlCenterController setObservers:]
  -[SBControlCenterController presentationCoordinateSpace]
  -[SBControlCenterController presentAnimated:completion:]
  -[SBControlCenterController setIndirectStatusBarPullGestureCalledBegin:]
  -[SBControlCenterController init]
  -[SBControlCenterController _isStatusBarHiddenIgnoringControlCenter]
  -[SBControlCenterController viewForSystemGestureRecognizer:]
  -[SBControlCenterController isVisible]
  -[SBControlCenterController _didEndTransition]
  -[SBControlCenterController _presentGestureLocationInView]
  -[SBControlCenterController _screenDidDim]
  -[SBControlCenterController homeGrabberViewDidReceiveClick:]
  -[SBControlCenterController allowShowTransitionSystemGesture]
  -[SBControlCenterController gestureRecognizerShouldBegin:]
  -[SBControlCenterController isPresentedOrDismissing]
  -[SBControlCenterController presentModuleTestRecipe]
  -[SBControlCenterController components]
  -[SBControlCenterController setIndirectStatusBarPullGestureRecognizer:]
  -[SBControlCenterController setStatusBarPullGestureRecognizer:]
  -[SBControlCenterController userInterfaceStyleTestRecipe]
  -[SBControlCenterController conformsToCSAppearanceProviding]
  -[SBControlCenterController addObserver:]
  -[SBControlCenterController _presentGestureTranslationInView:]
  -[SBControlCenterController _uiRelockedNotification:]
  -[SBControlCenterController _willBeginTransition]
  -[SBControlCenterController gestureRecognizer:shouldReceiveTouch:]
  -[SBControlCenterController isDismissedOrDismissing]
  -[SBControlCenterController reachabilityOffsetForControlCenterViewController:]
  -[SBControlCenterController appearanceIdentifier]
  -[SBControlCenterController handleMenuButtonTap]
  -[SBControlCenterController _didDismiss]
  -[SBControlCenterController _sensorActivityDataFromSensorActivityAttribution:]
  -[SBControlCenterController controlCenterViewController:didChangePresentationState:]
  -[SBControlCenterController controlCenterViewController:wantsHostStatusBarHidden:]
  -[SBControlCenterController grabberTongueHonorsAmbiguousActivationMargin:]
  -[SBControlCenterController hideAnimationSettingsForBarSwipeAffordanceView:]
  -[SBControlCenterController indirectStatusBarPullGestureCalledBegin]
  -[SBControlCenterController restrictedCapabilities]
  -[SBControlCenterController _didPresent]
  -[SBControlCenterController observers]
  -[SBControlCenterController setBannerSuppressionAssertion:]
  -[SBControlCenterController setHomeAffordanceViewController:]
  -[SBControlCenterController setKeyboardFocusController:]
  -[SBControlCenterController setSystemAgent:]
  -[SBControlCenterController unhideAnimationSettingsForBarSwipeAffordanceView:]
  -[SBControlCenterController _locationOfTouchInActiveInterfaceOrientation:gestureRecognizer:]
  -[SBControlCenterController _isLocationXWithinExtendedTrailingStatusBarRegion:]
  -[SBControlCenterController proximityDetectionMode]
  -[SBControlCenterController dealloc]
  -[SBControlCenterController window]
  -[SBControlCenterController _disableReachability]
  -[SBControlCenterController _shouldAllowControlCenterGesture]
  -[SBControlCenterController _trailingStatusBarRegionWidth]
  -[SBControlCenterController scrollingStrategy]
  -[SBControlCenterController _isLocationXWithinTrailingStatusBarRegion:]
  -[SBControlCenterController removeObserver:]
  -[SBControlCenterController _presentGestureVelocityInView]
  -[SBControlCenterController keyboardFocusLockAssertion]
  -[SBControlCenterController setHideStatusBarAssertion:]
  -[SBControlCenterController _reachabilityOffset]
  -[SBControlCenterController setViewController:]
  -[SBControlCenterController dismissAnimated:]
  -[SBControlCenterController _setStatusBarHidden:]
  -[SBControlCenterController _updateWindowOrientation]
  -[SBControlCenterController controlCenterViewController:significantPresentationProgressChange:]
  -[SBControlCenterController canBePresented]
  -[SBControlCenterController indirectStatusBarPullGestureRecognizer]
  -[SBControlCenterController legibilitySettings]
  -[SBControlCenterController handleIndirectStatusBarAction]
  -[SBControlCenterController _homeAffordanceAnimationDelay]
  -[SBControlCenterController notificationBehavior]
  -[SBControlCenterController statusBarPullGestureRecognizer]
  -[SBControlCenterController willOpenExpandedModuleForControlCenterViewController:]


SBAnimationStepper : NSObject <CAAnimationDelegate, SBUIAnimationStepping>
 @property  double finishSpeed
 @property  NSArray *views
 @property  double duration
 @property  BOOL adjustsDurationForLongestAnimation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL stepped
 @property  double stepPercentage

  // instance methods
  -[SBAnimationStepper views]
  -[SBAnimationStepper _displayLinkFired:]
  -[SBAnimationStepper .cxx_destruct]
  -[SBAnimationStepper succinctDescriptionBuilder]
  -[SBAnimationStepper animationDidStop:finished:]
  -[SBAnimationStepper descriptionBuilderWithMultilinePrefix:]
  -[SBAnimationStepper init]
  -[SBAnimationStepper descriptionWithMultilinePrefix:]
  -[SBAnimationStepper succinctDescription]
  -[SBAnimationStepper dealloc]
  -[SBAnimationStepper invalidate]
  -[SBAnimationStepper duration]
  -[SBAnimationStepper initWithAnimationSettings:]
  -[SBAnimationStepper isStepped]
  -[SBAnimationStepper startSteppingAnimationsInView:]
  -[SBAnimationStepper stepPercentage]
  -[SBAnimationStepper setStepPercentage:]
  -[SBAnimationStepper finishSteppingForwardToEnd]
  -[SBAnimationStepper finishSteppingBackwardToStart]
  -[SBAnimationStepper _nextCommitTime]
  -[SBAnimationStepper adjustsDurationForLongestAnimation]
  -[SBAnimationStepper _adjustDurationForLongestAnimation]
  -[SBAnimationStepper _makeSubviewTree:fromView:]
  -[SBAnimationStepper _checkForCompletion]
  -[SBAnimationStepper _displayLinkFiredForBackwardToStart:]
  -[SBAnimationStepper _setStepPercentage:]
  -[SBAnimationStepper _updateAnimationSteppingTarget:]
  -[SBAnimationStepper finishSteppingForwardToEndWithCompletion:]
  -[SBAnimationStepper finishSteppingBackwardToStartWithCompletion:]
  -[SBAnimationStepper setAdjustsDurationForLongestAnimation:]
  -[SBAnimationStepper finishSpeed]
  -[SBAnimationStepper setFinishSpeed:]


SBHomeGrabberRotationView : UIView
 @property  SBHomeGrabberView *grabberView
 @property  long long orientation

  // instance methods
  -[SBHomeGrabberRotationView setOrientation:]
  -[SBHomeGrabberRotationView .cxx_destruct]
  -[SBHomeGrabberRotationView layoutSubviews]
  -[SBHomeGrabberRotationView initWithFrame:settings:]
  -[SBHomeGrabberRotationView orientation]
  -[SBHomeGrabberRotationView initWithFrame:]
  -[SBHomeGrabberRotationView grabberView]
  -[SBHomeGrabberRotationView setOrientation:animated:rotationSettings:]
  -[SBHomeGrabberRotationView initWithFrame:settings:useRotationWrapperViews:]
  -[SBHomeGrabberRotationView _addWrapperViewWithOrientation:]


SBWorkspaceApplicationSceneTransitionContext : SBWorkspaceTransitionContext <SBDisplayLayoutContext>
 @property  SBWorkspaceEntity *requestedActivatingWorkspaceEntity
 @property  BOOL _alreadyPopulatedRequestedWorkspaceEntities
 @property  SBMainWorkspaceTransitionRequest *request
 @property  BOOL background
 @property  BOOL fencesAnimations
 @property  BOOL alwaysRunsWatchdog
 @property  BOOL waitsForSceneUpdates
 @property  BOOL prefersCrossfadeTransition
 @property  BOOL disablesAutoPIP
 @property  long long transitioningToLessRecentSpace
 @property  BOOL sceneless
 @property  @? resultBlock
 @property  NSSet *applicationSceneEntities
 @property  NSSet *previousApplicationSceneEntities
 @property  double watchdogScaleFactor
 @property  SBLayoutState *previousLayoutState
 @property  <SBWorkspaceApplicationSceneTransitionContextDelegate> *delegate
 @property  long long interfaceOrientation
 @property  BOOL prefersTouchCancellationDisabled
 @property  long long preferredInterfaceOrientation
 @property  SBWorkspaceEntity *activatingEntity
 @property  SBWorkspaceEntity *deactivatingEntity
 @property  long long requestedSpaceConfiguration
 @property  long long requestedFloatingConfiguration
 @property  long long requestedCenterConfiguration
 @property  long long requestedPeekConfiguration
 @property  long long requestedUnlockedEnvironmentMode
 @property  long long requestedFloatingSwitcherVisible
 @property  long long requestedCenterEntityModal
 @property  NSString *requestedAppExposeBundleID
 @property  long long requestedWindowPickerRole
 @property  NSArray *entitiesWithRemovalContexts
 @property  SBWorkspaceEntity *resolvedActivatingWorkspaceEntity
 @property  FBSDisplayIdentity *displayIdentity
 @property  SBLayoutState *layoutState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWorkspaceApplicationSceneTransitionContext layoutState]
  -[SBWorkspaceApplicationSceneTransitionContext setBackground:]
  -[SBWorkspaceApplicationSceneTransitionContext compactDescriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceApplicationSceneTransitionContext setPreferredInterfaceOrientation:]
  -[SBWorkspaceApplicationSceneTransitionContext previousAppClipPlaceholderEntities]
  -[SBWorkspaceApplicationSceneTransitionContext alwaysRunsWatchdog]
  -[SBWorkspaceApplicationSceneTransitionContext setWaitsForSceneUpdates:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedWindowPickerRole:]
  -[SBWorkspaceApplicationSceneTransitionContext _displayConfiguration]
  -[SBWorkspaceApplicationSceneTransitionContext requestedFloatingSwitcherVisible]
  -[SBWorkspaceApplicationSceneTransitionContext entityForLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedUnlockedEnvironmentMode:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedCenterConfiguration:]
  -[SBWorkspaceApplicationSceneTransitionContext frameForApplicationSceneEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext finalize]
  -[SBWorkspaceApplicationSceneTransitionContext applicationSceneEntityForBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext previousAppClipPlaceholderEntityForBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext displayIdentity]
  -[SBWorkspaceApplicationSceneTransitionContext applicationSceneEntities]
  -[SBWorkspaceApplicationSceneTransitionContext removalContextForEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext previousEntityForLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext .cxx_destruct]
  -[SBWorkspaceApplicationSceneTransitionContext setDeactivatingEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext _alreadyPopulatedRequestedWorkspaceEntities]
  -[SBWorkspaceApplicationSceneTransitionContext fencesAnimations]
  -[SBWorkspaceApplicationSceneTransitionContext setInterfaceOrientation:]
  -[SBWorkspaceApplicationSceneTransitionContext isTransitioningToLessRecentSpace]
  -[SBWorkspaceApplicationSceneTransitionContext succinctDescriptionBuilder]
  -[SBWorkspaceApplicationSceneTransitionContext preferredInterfaceOrientation]
  -[SBWorkspaceApplicationSceneTransitionContext setFencesAnimations:]
  -[SBWorkspaceApplicationSceneTransitionContext setTransitioningToLessRecentSpace:]
  -[SBWorkspaceApplicationSceneTransitionContext setEntity:forLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext setDelegate:]
  -[SBWorkspaceApplicationSceneTransitionContext resultBlock]
  -[SBWorkspaceApplicationSceneTransitionContext previousApplicationSceneEntityForBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedWorkspaceEntityForLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedAppExposeBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext init]
  -[SBWorkspaceApplicationSceneTransitionContext watchdogScaleFactor]
  -[SBWorkspaceApplicationSceneTransitionContext interfaceOrientation]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedFloatingSwitcherVisible:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedFloatingConfiguration:]
  -[SBWorkspaceApplicationSceneTransitionContext isBackground]
  -[SBWorkspaceApplicationSceneTransitionContext prefersTouchCancellationDisabled]
  -[SBWorkspaceApplicationSceneTransitionContext setRemovalContext:forEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext previousApplicationSceneEntities]
  -[SBWorkspaceApplicationSceneTransitionContext entitiesWithRemovalContexts]
  -[SBWorkspaceApplicationSceneTransitionContext requestedCenterConfiguration]
  -[SBWorkspaceApplicationSceneTransitionContext appClipPlaceholderEntities]
  -[SBWorkspaceApplicationSceneTransitionContext needsToSendActivationResult]
  -[SBWorkspaceApplicationSceneTransitionContext activatingEntity]
  -[SBWorkspaceApplicationSceneTransitionContext _setRequestedActivatingWorkspaceEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedAppExposeBundleID]
  -[SBWorkspaceApplicationSceneTransitionContext _setRequestedWorkspaceEntity:forLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext setPrefersCrossfadeTransition:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedPeekConfiguration:]
  -[SBWorkspaceApplicationSceneTransitionContext appClipPlaceholderEntityForBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedActivatingWorkspaceEntity]
  -[SBWorkspaceApplicationSceneTransitionContext _setAlreadyPopulatedRequestedWorkspaceEntities:]
  -[SBWorkspaceApplicationSceneTransitionContext setResultBlock:]
  -[SBWorkspaceApplicationSceneTransitionContext delegate]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedCenterEntityModal:]
  -[SBWorkspaceApplicationSceneTransitionContext disablesAutoPIP]
  -[SBWorkspaceApplicationSceneTransitionContext setActivatingEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext interfaceOrientationOrPreferredOrientation]
  -[SBWorkspaceApplicationSceneTransitionContext requestedFloatingConfiguration]
  -[SBWorkspaceApplicationSceneTransitionContext isSceneless]
  -[SBWorkspaceApplicationSceneTransitionContext requestedCenterEntityModal]
  -[SBWorkspaceApplicationSceneTransitionContext setAlwaysRunsWatchdog:]
  -[SBWorkspaceApplicationSceneTransitionContext dealloc]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedSpaceConfiguration:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedSpaceConfiguration]
  -[SBWorkspaceApplicationSceneTransitionContext setSceneless:]
  -[SBWorkspaceApplicationSceneTransitionContext previousLayoutState]
  -[SBWorkspaceApplicationSceneTransitionContext requestedPeekConfiguration]
  -[SBWorkspaceApplicationSceneTransitionContext _lockedInterfaceOrientation]
  -[SBWorkspaceApplicationSceneTransitionContext setPrefersTouchCancellationDisabled:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedUnlockedEnvironmentMode]
  -[SBWorkspaceApplicationSceneTransitionContext setEntitiesWithRemovalContexts:]
  -[SBWorkspaceApplicationSceneTransitionContext setPreviousEntity:forLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedWindowPickerRole]
  -[SBWorkspaceApplicationSceneTransitionContext waitsForSceneUpdates]
  -[SBWorkspaceApplicationSceneTransitionContext prefersCrossfadeTransition]
  -[SBWorkspaceApplicationSceneTransitionContext deactivatingEntity]
  -[SBWorkspaceApplicationSceneTransitionContext setDisablesAutoPIP:]
  -[SBWorkspaceApplicationSceneTransitionContext previousApplicationSceneEntityForLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext resolvedActivatingWorkspaceEntity]
  -[SBWorkspaceApplicationSceneTransitionContext sendActivationResultError:]
  -[SBWorkspaceApplicationSceneTransitionContext applicationSceneEntityForLayoutRole:]


SBExternalDisplayApplicationSceneEntity : SBApplicationSceneEntity
  // instance methods
  -[SBExternalDisplayApplicationSceneEntity viewControllerClass]
  -[SBExternalDisplayApplicationSceneEntity initWithApplicationSceneHandle:]


SBLockScreenOrientationManager : NSObject <SBAssistantObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenOrientationManager _lockStateChanged:]
  -[SBLockScreenOrientationManager .cxx_destruct]
  -[SBLockScreenOrientationManager init]
  -[SBLockScreenOrientationManager updateInterfaceOrientationWithRequestedOrientation:animated:]
  -[SBLockScreenOrientationManager assistantDidAppear:]
  -[SBLockScreenOrientationManager _updateDeviceOrientationIfNeededForPhoneUnlockToOrientation:]


SBPearlInterlockAlertItem : SBAlertItem
  // instance methods
  -[SBPearlInterlockAlertItem _message]
  -[SBPearlInterlockAlertItem reappearsAfterLock]
  -[SBPearlInterlockAlertItem _title]
  -[SBPearlInterlockAlertItem shouldShowInLockScreen]
  -[SBPearlInterlockAlertItem configure:requirePasscodeForActions:]


SBAppSwitcherDomain : PTDomain
  // class methods
  +[SBAppSwitcherDomain domainGroupName]
  +[SBAppSwitcherDomain rootSettings]
  +[SBAppSwitcherDomain domainName]
  +[SBAppSwitcherDomain rootSettingsClass]


SBBrightnessControl : NSObject <SBBrightnessRouteCoordinating, SBElasticHUDViewControllerDelegate, SBElasticBrightnessDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBrightnessControl handlesKeyCommandsForRoute:]

  // instance methods
  -[SBBrightnessControl _controlCenterWillPresent:]
  -[SBBrightnessControl brightnessController:performCoordinatedBrightnessChangeForIncrementKeyDown:decrementKeyDown:]
  -[SBBrightnessControl elasticHUDViewControllerRequestsDismissal:]
  -[SBBrightnessControl _controlCenterWillDismiss:]
  -[SBBrightnessControl elasticBrightnessViewControllerValueUpdatesDidEnd:]
  -[SBBrightnessControl activeDataSource]
  -[SBBrightnessControl .cxx_destruct]
  -[SBBrightnessControl setBrightnessLevel:forRoute:]
  -[SBBrightnessControl _resetIdleTimerForUserInteractionIfNecessary]
  -[SBBrightnessControl elasticValueViewControllerCurrentValue:]
  -[SBBrightnessControl _handleUpdateBrightnessIncrementKeyIsDown:decrementKeyIsDown:]
  -[SBBrightnessControl elasticValueViewController:updateCurrentValue:]
  -[SBBrightnessControl presentedBrightnessHUDViewController]
  -[SBBrightnessControl elasticBrightnessViewControllerValueUpdatesWillBegin:]
  -[SBBrightnessControl _presentOrUpdateBrightnessHUDAsNecessaryForBrightnessLevel:]
  -[SBBrightnessControl _HUDIsDisplayable]
  -[SBBrightnessControl cancelBrightnessKeyPressEvents]
  -[SBBrightnessControl handleBrightnessKeyPressEvent:forRoute:]
  -[SBBrightnessControl _controllerForRoute:]
  -[SBBrightnessControl setActiveController:]
  -[SBBrightnessControl _configureBrightnessHUDViewControllerWithLevel:]
  -[SBBrightnessControl initWithHUDController:]
  -[SBBrightnessControl acquireBrightnessHUDHiddenAssertionForReason:]
  -[SBBrightnessControl elasticBrightnessViewControllerBrightnessRouteType:]
  -[SBBrightnessControl existingBrightnessHUDViewController]


SBCornerPencilPanGestureRecognizer : SBScreenEdgePanGestureRecognizer <PTSettingsKeyObserver>
 @property  unsigned long corner
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBCornerPencilPanGestureRecognizer _shouldSupportStylusTouches]
  +[SBCornerPencilPanGestureRecognizer _edgesForCorner:]
  +[SBCornerPencilPanGestureRecognizer interactiveCornerPanGestureRecognizerWithSettings:corner:target:action:]

  // instance methods
  -[SBCornerPencilPanGestureRecognizer _touchInterfaceOrientation]
  -[SBCornerPencilPanGestureRecognizer .cxx_destruct]
  -[SBCornerPencilPanGestureRecognizer corner]
  -[SBCornerPencilPanGestureRecognizer touchesBegan:withEvent:]
  -[SBCornerPencilPanGestureRecognizer setState:]
  -[SBCornerPencilPanGestureRecognizer touchesMoved:withEvent:]
  -[SBCornerPencilPanGestureRecognizer reset]
  -[SBCornerPencilPanGestureRecognizer _SBLogTouchesWithMethodName:withMethodName:]
  -[SBCornerPencilPanGestureRecognizer settings:changedValueForKey:]
  -[SBCornerPencilPanGestureRecognizer setEdges:]
  -[SBCornerPencilPanGestureRecognizer touchesEnded:withEvent:]
  -[SBCornerPencilPanGestureRecognizer _initWithSettings:corner:target:action:type:options:]
  -[SBCornerPencilPanGestureRecognizer _updateSettingsDerivedValues:]
  -[SBCornerPencilPanGestureRecognizer _convertReferenceLocation:toOrientedLocation:orientedBounds:]
  -[SBCornerPencilPanGestureRecognizer _edgeOffsets]
  -[SBCornerPencilPanGestureRecognizer _isOrientedLocation:inCorner:forOrientedBounds:withEdgeOffsets:]
  -[SBCornerPencilPanGestureRecognizer shouldReceiveTouch:]


SBDashBoardEmergencyDialerViewController : SBHomeGestureDismissableCoverSheetViewController <SBLockScreenEmergencyDialerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardEmergencyDialerViewController presentationPriority]
  -[SBDashBoardEmergencyDialerViewController presentationType]
  -[SBDashBoardEmergencyDialerViewController .cxx_destruct]
  -[SBDashBoardEmergencyDialerViewController viewDidLoad]
  -[SBDashBoardEmergencyDialerViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBDashBoardEmergencyDialerViewController aggregateBehavior:]
  -[SBDashBoardEmergencyDialerViewController viewWillAppear:]
  -[SBDashBoardEmergencyDialerViewController handleEvent:]
  -[SBDashBoardEmergencyDialerViewController dealloc]
  -[SBDashBoardEmergencyDialerViewController aggregateAppearance:]
  -[SBDashBoardEmergencyDialerViewController viewDidDisappear:]
  -[SBDashBoardEmergencyDialerViewController _deactivateEmergencyDialerController]
  -[SBDashBoardEmergencyDialerViewController _activateEmergencyDialerController]
  -[SBDashBoardEmergencyDialerViewController _updateEmergencyCallMode:]
  -[SBDashBoardEmergencyDialerViewController emergencyDialer:willDeactivateWithError:]


SBSiriHardwareButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonInteraction>
 @property  long long siriButtonIdentifier
 @property  SiriLongPressButtonSource *siriActivationSource
 @property  double activationInterval
 @property  <SiriAssertion> *siriPreheatAssertion
 @property  <SiriAssertion> *siriButtonDownAssertion
 @property  double initialPressDownTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSiriHardwareButtonInteraction hardwareButtonInteractionForLockButton]
  +[SBSiriHardwareButtonInteraction hardwareButtonInteractionForHomeButton]
  +[SBSiriHardwareButtonInteraction dismissSiriTransientOverlayOnSinglePressUp:]
  +[SBSiriHardwareButtonInteraction hardwareButtonInteractionForVoiceCommandButton]

  // instance methods
  -[SBSiriHardwareButtonInteraction _cancelPreheating]
  -[SBSiriHardwareButtonInteraction consumeInitialPressDown]
  -[SBSiriHardwareButtonInteraction .cxx_destruct]
  -[SBSiriHardwareButtonInteraction setInitialPressDownTime:]
  -[SBSiriHardwareButtonInteraction consumeLongPress]
  -[SBSiriHardwareButtonInteraction siriButtonDownAssertion]
  -[SBSiriHardwareButtonInteraction setSiriActivationSource:]
  -[SBSiriHardwareButtonInteraction siriPreheatAssertion]
  -[SBSiriHardwareButtonInteraction initWithSiriButton:]
  -[SBSiriHardwareButtonInteraction observeFinalPressUp]
  -[SBSiriHardwareButtonInteraction initialPressDownTime]
  -[SBSiriHardwareButtonInteraction setActivationInterval:]
  -[SBSiriHardwareButtonInteraction setSiriPreheatAssertion:]
  -[SBSiriHardwareButtonInteraction hardwareButtonGestureParameters]
  -[SBSiriHardwareButtonInteraction siriButtonIdentifier]
  -[SBSiriHardwareButtonInteraction activationInterval]
  -[SBSiriHardwareButtonInteraction siriActivationSource]
  -[SBSiriHardwareButtonInteraction consumeSinglePressUp]
  -[SBSiriHardwareButtonInteraction setSiriButtonDownAssertion:]
  -[SBSiriHardwareButtonInteraction _cancelAllSiriActions]
  -[SBSiriHardwareButtonInteraction _siriHomeButtonPrefsDidChange:]
  -[SBSiriHardwareButtonInteraction _preheatSiriForPresentationAfterInterval:]
  -[SBSiriHardwareButtonInteraction observeLongPressCanceled]
  -[SBSiriHardwareButtonInteraction setSiriButtonIdentifier:]


SBSuspendedWorkspaceTransaction : SBMainWorkspaceTransaction <FBApplicationProcessLaunchTransactionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSuspendedWorkspaceTransaction _didComplete]
  -[SBSuspendedWorkspaceTransaction _begin]
  -[SBSuspendedWorkspaceTransaction _childTransactionDidComplete:]
  -[SBSuspendedWorkspaceTransaction .cxx_destruct]
  -[SBSuspendedWorkspaceTransaction _addSceneEntityToAppRecency:]
  -[SBSuspendedWorkspaceTransaction _sendActivationResultWithError:]
  -[SBSuspendedWorkspaceTransaction transaction:willLaunchProcess:]


SBDosidoScaleAnimationSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout

  // instance methods
  -[SBDosidoScaleAnimationSwitcherEventResponse appLayout]
  -[SBDosidoScaleAnimationSwitcherEventResponse .cxx_destruct]
  -[SBDosidoScaleAnimationSwitcherEventResponse initWithAppLayout:]
  -[SBDosidoScaleAnimationSwitcherEventResponse type]


SBInCallPresentationManager : NSObject <SBInCallPresentationSessionDelegate, SBInCallPresentationRequestServerDelegate, FBSceneManagerObserver, SBMainDisplaySceneManagerObserver, SBApplicationHosting>
 @property  SBInCallPresentationSession *_lastPresentationSession
 @property  <SBInCallPresentationManagerDelegate> *delegate
 @property  SBMainDisplaySceneManager *sceneManager
 @property  SBHideSharePlayContentFromSharedScreenController *hideSharePlayContentFromSharedScreenController
 @property  BOOL supportsHandlingDeviceLock
 @property  BOOL disallowsLockHardwareButtonDoublePress
 @property  BOOL hasFullscreenActiveCallInSwitcher
 @property  BOOL supportsHandlingUILockForWindowedAccessoryAttach
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBInCallPresentationManager isSpecializedAPISupported]

  // instance methods
  -[SBInCallPresentationManager _applicationDidExit:]
  -[SBInCallPresentationManager sceneManager]
  -[SBInCallPresentationManager inCallClientPresentationSessionSceneWasDestroyed:]
  -[SBInCallPresentationManager inCallClientPresentationSessionInterfaceOrientationForTransientOverlayPresentation:]
  -[SBInCallPresentationManager supportsBecomingVisibleWhenUnlockingFromSource:wakingDisplay:]
  -[SBInCallPresentationManager _runZombieChecksForScene:]
  -[SBInCallPresentationManager hasOverrideAppSceneEntityForLaunchingApplication:]
  -[SBInCallPresentationManager canHandleOpenApplicationRequestForApplication:]
  -[SBInCallPresentationManager handleHeadsetButtonPress:]
  -[SBInCallPresentationManager _dismissAllPresentations]
  -[SBInCallPresentationManager ensureSwitcherInclusionForRestoringFromPIPForSceneWithPersistenceIdentifer:completion:]
  -[SBInCallPresentationManager .cxx_destruct]
  -[SBInCallPresentationManager _hasPendingDismissalOfSceneHandleWithPersistenceIdentifier:]
  -[SBInCallPresentationManager canHostAnApp]
  -[SBInCallPresentationManager inCallPresentationRequestServer:clientWithIdentifierDidInvalidate:]
  -[SBInCallPresentationManager sceneManager:didAddScene:]
  -[SBInCallPresentationManager reactivateInCallForReason:]
  -[SBInCallPresentationManager _runZombieChecksForSceneHandle:]
  -[SBInCallPresentationManager hostedAppSceneHandles]
  -[SBInCallPresentationManager conformsToSBApplicationHosting]
  -[SBInCallPresentationManager overrideAppSceneEntityForLaunchingApplication:]
  -[SBInCallPresentationManager setDelegate:]
  -[SBInCallPresentationManager _sessionForSceneWithIdentifier:]
  -[SBInCallPresentationManager inCallClientPresentationSessionResolvedPIPDodgingInsets:]
  -[SBInCallPresentationManager _hostedPresentationSessions]
  -[SBInCallPresentationManager isHostingAnApp]
  -[SBInCallPresentationManager hostedAppWillRotateToInterfaceOrientation:]
  -[SBInCallPresentationManager _dismissAllPresentationsForApplication:]
  -[SBInCallPresentationManager handlePresentationForActivityContinuationIdentifier:]
  -[SBInCallPresentationManager sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBInCallPresentationManager hostedAppSceneHandle]
  -[SBInCallPresentationManager disallowsLockHardwareButtonDoublePress]
  -[SBInCallPresentationManager _dismissClientWithIdentifier:animated:analyticsSource:reason:completion:]
  -[SBInCallPresentationManager _newClientPresentationSessionWithSceneHandle:]
  -[SBInCallPresentationManager inCallClientPresentationSession:acquireHideSharePlayContentFromClonedDisplaysAssertionForReason:]
  -[SBInCallPresentationManager handleAccessoryAttachWithCompletion:]
  -[SBInCallPresentationManager handleDeviceLockFromSource:]
  -[SBInCallPresentationManager hasFullscreenActiveCallInSwitcher]
  -[SBInCallPresentationManager inCallClientPresentationSession:callConnectedStatusChangedForPresentableViewController:]
  -[SBInCallPresentationManager delegate]
  -[SBInCallPresentationManager _isManagingSceneOrSceneHandleWithPersistenceIdentifier:]
  -[SBInCallPresentationManager inCallPresentationRequestServer:clientWithIdentifier:requestsPresentationWithConfiguration:completion:]
  -[SBInCallPresentationManager initWithSceneManager:applicationController:bannerManager:]
  -[SBInCallPresentationManager supportsHandlingUILockForWindowedAccessoryAttach]
  -[SBInCallPresentationManager inCallClientPresentationSessionInterfaceOrientationForBannerPresentation:]
  -[SBInCallPresentationManager inCallClientPresentationSession:handleDestroySceneActionWithReason:analyticsSource:completion:]
  -[SBInCallPresentationManager inCallClientPresentationSession:canRestoreToPreviousEntity:]
  -[SBInCallPresentationManager handleOpenApplicationRequest:clientWorkspace:actions:origin:withResult:]
  -[SBInCallPresentationManager supportsHandlingDeviceLock]
  -[SBInCallPresentationManager hideSharePlayContentFromSharedScreenController]
  -[SBInCallPresentationManager _lastPresentationSession]


SBInCallBannerAuthority : NSObject <BNConsidering>
 @property  <BNConsideringDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallBannerAuthority .cxx_destruct]
  -[SBInCallBannerAuthority setDelegate:]
  -[SBInCallBannerAuthority shouldOverlapPresentable:withPresentable:]
  -[SBInCallBannerAuthority delegate]
  -[SBInCallBannerAuthority shouldPresentPresentable:withPresentedPresentables:responsiblePresentable:]
  -[SBInCallBannerAuthority mayChangeDecisionForResponsiblePresentable:]


SBExpanseBannerAuthority : NSObject <BNConsidering>
 @property  <BNConsideringDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBExpanseBannerAuthority shouldOverlapPresentable:withPresentable:]
  -[SBExpanseBannerAuthority shouldPresentPresentable:withPresentedPresentables:responsiblePresentable:]


SBDeactivationSettings : NSObject <BSSettingDescriptionProvider, SBDeactivationSettings, NSCopying, BSDescriptionProviding>
 @property  BOOL empty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeactivationSettings valueDescriptionForFlag:object:ofSetting:]
  -[SBDeactivationSettings isEmpty]
  -[SBDeactivationSettings applyDeactivationSettings:]
  -[SBDeactivationSettings setFlag:forDeactivationSetting:]
  -[SBDeactivationSettings .cxx_destruct]
  -[SBDeactivationSettings keyDescriptionForSetting:]
  -[SBDeactivationSettings copyDeactivationSettings]
  -[SBDeactivationSettings succinctDescriptionBuilder]
  -[SBDeactivationSettings descriptionBuilderWithMultilinePrefix:]
  -[SBDeactivationSettings init]
  -[SBDeactivationSettings flagForDeactivationSetting:]
  -[SBDeactivationSettings clearDeactivationSettings]
  -[SBDeactivationSettings descriptionWithMultilinePrefix:]
  -[SBDeactivationSettings boolForDeactivationSetting:]
  -[SBDeactivationSettings succinctDescription]
  -[SBDeactivationSettings setObject:forDeactivationSetting:]
  -[SBDeactivationSettings objectForDeactivationSetting:]
  -[SBDeactivationSettings dealloc]
  -[SBDeactivationSettings copyWithZone:]


SBSaturatedIconView : UIImageView
  // instance methods
  -[SBSaturatedIconView initWithImage:]
  -[SBSaturatedIconView sizeThatFits:]


SBSplitViewToCenterWindowSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSplitViewToCenterWindowSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBSplitViewToCenterWindowSwitcherModifier .cxx_destruct]
  -[SBSplitViewToCenterWindowSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBSplitViewToCenterWindowSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBSplitViewToCenterWindowSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBSplitViewToCenterWindowSwitcherModifier cornerRadiiForLayoutRole:inAppLayout:withCornerRadii:]
  -[SBSplitViewToCenterWindowSwitcherModifier handleSceneReadyEvent:]
  -[SBSplitViewToCenterWindowSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]
  -[SBSplitViewToCenterWindowSwitcherModifier _isItemBeingMovedToCenter:]
  -[SBSplitViewToCenterWindowSwitcherModifier _isItemBeingResized:]


SBReachabilityWindow : SBSecureWindow
  // instance methods
  -[SBReachabilityWindow initWithWallpaperVariant:]
  -[SBReachabilityWindow view]
  -[SBReachabilityWindow pointInside:withEvent:]


SBReachabilityBackgroundViewController : UIViewController
  // instance methods
  -[SBReachabilityBackgroundViewController initWithWallpaperVariant:]
  -[SBReachabilityBackgroundViewController shouldAutorotate]
  -[SBReachabilityBackgroundViewController view]
  -[SBReachabilityBackgroundViewController supportedInterfaceOrientations]
  -[SBReachabilityBackgroundViewController _canShowWhileLocked]


SBReachabilityBackgroundView : UIView <SBHomeGrabberDelegate>
 @property  long long wallpaperVariant
 @property  double containerViewYOffset
 @property  double homeGrabberAdditionalOffset
 @property  double homeGrabberAlpha
 @property  double chevronAlpha
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBReachabilityBackgroundView shouldAllowAutoHideForHomeGrabberView:]
  -[SBReachabilityBackgroundView .cxx_destruct]
  -[SBReachabilityBackgroundView layoutSubviews]
  -[SBReachabilityBackgroundView setChevronAlpha:]
  -[SBReachabilityBackgroundView _displayCornerRadius]
  -[SBReachabilityBackgroundView chevronAlpha]
  -[SBReachabilityBackgroundView shouldAllowThinStyleForHomeGrabberView:]
  -[SBReachabilityBackgroundView additionalEdgeSpacingForHomeGrabberView:]
  -[SBReachabilityBackgroundView setWallpaperVariant:]
  -[SBReachabilityBackgroundView setContainerViewYOffset:]
  -[SBReachabilityBackgroundView setHomeGrabberAdditionalOffset:]
  -[SBReachabilityBackgroundView setHomeGrabberAlpha:]
  -[SBReachabilityBackgroundView initWithFrame:wallpaperVariant:]
  -[SBReachabilityBackgroundView wallpaperVariant]
  -[SBReachabilityBackgroundView _setupHomeGrabberView]
  -[SBReachabilityBackgroundView _updateWallpaperEffectViewAnimated:]
  -[SBReachabilityBackgroundView _setupChevron]
  -[SBReachabilityBackgroundView _setupHitTestBlockerView]
  -[SBReachabilityBackgroundView _newWallpaperEffectViewForVariant:]
  -[SBReachabilityBackgroundView _setupCornerContentsImageForWallpaperEffectView:]
  -[SBReachabilityBackgroundView _updateChevronPathForUpFraction:]
  -[SBReachabilityBackgroundView homeGrabberAlpha]
  -[SBReachabilityBackgroundView containerViewYOffset]
  -[SBReachabilityBackgroundView homeGrabberAdditionalOffset]


SBLayoutStateTransitionContext : NSObject
 @property  SBWorkspaceTransaction *workspaceTransaction
 @property  SBWorkspaceApplicationSceneTransitionContext *applicationTransitionContext
 @property  SBLayoutState *fromLayoutState
 @property  SBLayoutState *toLayoutState
 @property  BOOL complete
 @property  NSError *error
 @property  BOOL interrupted
 @property  BOOL animationsDisabled

  // instance methods
  -[SBLayoutStateTransitionContext isInterrupted]
  -[SBLayoutStateTransitionContext applicationTransitionContext]
  -[SBLayoutStateTransitionContext toLayoutState]
  -[SBLayoutStateTransitionContext workspaceTransaction]
  -[SBLayoutStateTransitionContext .cxx_destruct]
  -[SBLayoutStateTransitionContext init]
  -[SBLayoutStateTransitionContext initWithWorkspaceTransaction:]
  -[SBLayoutStateTransitionContext transitionCompletedWithError:]
  -[SBLayoutStateTransitionContext fromLayoutState]
  -[SBLayoutStateTransitionContext animationsDisabled]
  -[SBLayoutStateTransitionContext isComplete]
  -[SBLayoutStateTransitionContext error]


SBTapSlideOverTongueSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBTapSlideOverTongueSwitcherModifierEvent type]


SBEmitStudyLogSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  NSString *name
 @property  NSDictionary *payload

  // instance methods
  -[SBEmitStudyLogSwitcherEventResponse name]
  -[SBEmitStudyLogSwitcherEventResponse payload]
  -[SBEmitStudyLogSwitcherEventResponse .cxx_destruct]
  -[SBEmitStudyLogSwitcherEventResponse type]
  -[SBEmitStudyLogSwitcherEventResponse initWithStudyLogWithName:payload:]


SBOverrideInterfaceOrientationSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBOverrideInterfaceOrientationSwitcherModifier initWithInterfaceOrientation:]
  -[SBOverrideInterfaceOrientationSwitcherModifier switcherInterfaceOrientation]


SBActivateApplicationTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBActivateApplicationTestRecipe load]

  // instance methods
  -[SBActivateApplicationTestRecipe title]
  -[SBActivateApplicationTestRecipe handleVolumeIncrease]
  -[SBActivateApplicationTestRecipe handleVolumeDecrease]


NCRevealWalletPassActionRunner : NSObject <NCNotificationActionRunner, SBLockScreenPluginLifecycleObserver>
 @property  BOOL shouldForwardAction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NCRevealWalletPassActionRunner .cxx_destruct]
  -[NCRevealWalletPassActionRunner setShouldForwardAction:]
  -[NCRevealWalletPassActionRunner shouldForwardAction]
  -[NCRevealWalletPassActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]
  -[NCRevealWalletPassActionRunner willPresentLockScreenPlugin:]
  -[NCRevealWalletPassActionRunner didPresentLockScreenPlugin:]
  -[NCRevealWalletPassActionRunner willDismissLockScreenPlugin:]
  -[NCRevealWalletPassActionRunner didDismissLockScreenPlugin:]


SBLayoutState : NSObject <BSDescriptionProviding>
 @property  NSSet *elements
 @property  long long interfaceOrientation
 @property  long long elementInterfaceOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLayoutState _defaultInterfaceOrientation]

  // instance methods
  -[SBLayoutState appLayout]
  -[SBLayoutState elementInterfaceOrientation]
  -[SBLayoutState layoutContainsRole:]
  -[SBLayoutState _initWithLayoutElements:interfaceOrientation:elementInterfaceOrientation:]
  -[SBLayoutState elements]
  -[SBLayoutState .cxx_destruct]
  -[SBLayoutState displayItemFromLayoutElement:]
  -[SBLayoutState succinctDescriptionBuilder]
  -[SBLayoutState floatingAppLayout]
  -[SBLayoutState isEqual:withRole:]
  -[SBLayoutState descriptionBuilderWithMultilinePrefix:]
  -[SBLayoutState elementWithIdentifier:]
  -[SBLayoutState init]
  -[SBLayoutState elementWithRole:]
  -[SBLayoutState isEqual:]
  -[SBLayoutState interfaceOrientation]
  -[SBLayoutState descriptionWithMultilinePrefix:]
  -[SBLayoutState succinctDescription]


SBPPTRecapPerformanceTestingOperation : SBPPTBlockOperation
  // class methods
  +[SBPPTRecapPerformanceTestingOperation scrollViewRecapPerformanceTestOperationWithBlock:]

  // instance methods
  -[SBPPTRecapPerformanceTestingOperation markStartSubTest:]
  -[SBPPTRecapPerformanceTestingOperation markFinishTestWithExtraResults:]
  -[SBPPTRecapPerformanceTestingOperation markStartTest:]


SBInteractiveScreenshotSettings : PTSettings
 @property  BOOL enabled
 @property  SBCornerPencilPanGestureSettings *pencilGestureSettings
 @property  SBCornerFingerPanGestureSettings *fingerGestureSettings
 @property  BOOL shouldAsynchronouslyRender
 @property  BOOL shouldPreheat
 @property  double applicationTouchDelayHysteresis
 @property  double cornerRadiusVisibleProgressThreshold
 @property  double cropCornersVisibleProgressThreshold
 @property  double cropLinesVisibleProgressThreshold
 @property  double baseCornerTranslationDegrees
 @property  double projectionDecelerationRate
 @property  double rubberbandingRange
 @property  double normalizedDistanceForCommitThreshold
 @property  double horizontalTranslationFactor
 @property  double verticalTranslationFactor
 @property  BOOL shouldInjectVelocity
 @property  double maximumInjectedVelocity
 @property  double disabledGestureCancellationDistance
 @property  double disabledGestureVelocityScale
 @property  SBFFluidBehaviorSettings *contentAnimationSettings
 @property  SBFFluidBehaviorSettings *disabledGestureContentAnimationSettings
 @property  SBFFluidBehaviorSettings *cropsAnimationSettings
 @property  SBFFluidBehaviorSettings *cropLinesAlphaAnimationSettings

  // class methods
  +[SBInteractiveScreenshotSettings settingsControllerModule]

  // instance methods
  -[SBInteractiveScreenshotSettings .cxx_destruct]
  -[SBInteractiveScreenshotSettings setDefaultValues]
  -[SBInteractiveScreenshotSettings isEnabled]
  -[SBInteractiveScreenshotSettings setEnabled:]
  -[SBInteractiveScreenshotSettings setShouldPreheat:]
  -[SBInteractiveScreenshotSettings setShouldAsynchronouslyRender:]
  -[SBInteractiveScreenshotSettings setCornerRadiusVisibleProgressThreshold:]
  -[SBInteractiveScreenshotSettings setApplicationTouchDelayHysteresis:]
  -[SBInteractiveScreenshotSettings setRubberbandingRange:]
  -[SBInteractiveScreenshotSettings setNormalizedDistanceForCommitThreshold:]
  -[SBInteractiveScreenshotSettings setProjectionDecelerationRate:]
  -[SBInteractiveScreenshotSettings setHorizontalTranslationFactor:]
  -[SBInteractiveScreenshotSettings setVerticalTranslationFactor:]
  -[SBInteractiveScreenshotSettings setBaseCornerTranslationDegrees:]
  -[SBInteractiveScreenshotSettings setCropCornersVisibleProgressThreshold:]
  -[SBInteractiveScreenshotSettings setCropLinesVisibleProgressThreshold:]
  -[SBInteractiveScreenshotSettings setDisabledGestureCancellationDistance:]
  -[SBInteractiveScreenshotSettings setShouldInjectVelocity:]
  -[SBInteractiveScreenshotSettings setMaximumInjectedVelocity:]
  -[SBInteractiveScreenshotSettings setDisabledGestureVelocityScale:]
  -[SBInteractiveScreenshotSettings pencilGestureSettings]
  -[SBInteractiveScreenshotSettings setPencilGestureSettings:]
  -[SBInteractiveScreenshotSettings fingerGestureSettings]
  -[SBInteractiveScreenshotSettings setFingerGestureSettings:]
  -[SBInteractiveScreenshotSettings shouldAsynchronouslyRender]
  -[SBInteractiveScreenshotSettings shouldPreheat]
  -[SBInteractiveScreenshotSettings applicationTouchDelayHysteresis]
  -[SBInteractiveScreenshotSettings cornerRadiusVisibleProgressThreshold]
  -[SBInteractiveScreenshotSettings cropCornersVisibleProgressThreshold]
  -[SBInteractiveScreenshotSettings cropLinesVisibleProgressThreshold]
  -[SBInteractiveScreenshotSettings baseCornerTranslationDegrees]
  -[SBInteractiveScreenshotSettings projectionDecelerationRate]
  -[SBInteractiveScreenshotSettings rubberbandingRange]
  -[SBInteractiveScreenshotSettings normalizedDistanceForCommitThreshold]
  -[SBInteractiveScreenshotSettings horizontalTranslationFactor]
  -[SBInteractiveScreenshotSettings verticalTranslationFactor]
  -[SBInteractiveScreenshotSettings shouldInjectVelocity]
  -[SBInteractiveScreenshotSettings maximumInjectedVelocity]
  -[SBInteractiveScreenshotSettings disabledGestureCancellationDistance]
  -[SBInteractiveScreenshotSettings disabledGestureVelocityScale]
  -[SBInteractiveScreenshotSettings contentAnimationSettings]
  -[SBInteractiveScreenshotSettings setContentAnimationSettings:]
  -[SBInteractiveScreenshotSettings disabledGestureContentAnimationSettings]
  -[SBInteractiveScreenshotSettings setDisabledGestureContentAnimationSettings:]
  -[SBInteractiveScreenshotSettings cropsAnimationSettings]
  -[SBInteractiveScreenshotSettings setCropsAnimationSettings:]
  -[SBInteractiveScreenshotSettings cropLinesAlphaAnimationSettings]
  -[SBInteractiveScreenshotSettings setCropLinesAlphaAnimationSettings:]


SBApplicationTestingManager : NSObject
 @property  NSMutableDictionary *idleTimerDisableAssertions
 @property  NSString *currentTestName
 @property  NSString *scrollTestActiveSubtest

  // class methods
  +[SBApplicationTestingManager sharedInstance]

  // instance methods
  -[SBApplicationTestingManager _installTestEndedHandler:]
  -[SBApplicationTestingManager setupKeyboardAnimationSubTestsForTestName:]
  -[SBApplicationTestingManager _prepareForTestStartup:]
  -[SBApplicationTestingManager .cxx_destruct]
  -[SBApplicationTestingManager setCurrentTestName:]
  -[SBApplicationTestingManager _handleTestEnded]
  -[SBApplicationTestingManager installNotificationObserverForNotificationName:forOneNotification:usingBlock:]
  -[SBApplicationTestingManager init]
  -[SBApplicationTestingManager markUserLaunchInitiationTime]
  -[SBApplicationTestingManager installNotificationObserverForNotificationName:notificationCenter:forOneNotification:usingBlock:]
  -[SBApplicationTestingManager scrollTestActiveSubtest]
  -[SBApplicationTestingManager _idleTimerDisableAssertions]
  -[SBApplicationTestingManager setScrollTestActiveSubtest:]
  -[SBApplicationTestingManager currentTestName]


SBApplicationSceneRemovalAnimationDomain : PTDomain
  // class methods
  +[SBApplicationSceneRemovalAnimationDomain domainGroupName]
  +[SBApplicationSceneRemovalAnimationDomain rootSettings]
  +[SBApplicationSceneRemovalAnimationDomain domainName]
  +[SBApplicationSceneRemovalAnimationDomain rootSettingsClass]


SBAdvanceDateOverrideTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAdvanceDateOverrideTestRecipe load]

  // instance methods
  -[SBAdvanceDateOverrideTestRecipe title]
  -[SBAdvanceDateOverrideTestRecipe handleVolumeIncrease]
  -[SBAdvanceDateOverrideTestRecipe handleVolumeDecrease]
  -[SBAdvanceDateOverrideTestRecipe advanceOverrideDateByAmount:]


SBStartupTransitionFactory : NSObject
  // instance methods
  -[SBStartupTransitionFactory .cxx_destruct]
  -[SBStartupTransitionFactory initWithInitialRestartState:]
  -[SBStartupTransitionFactory transitionForContext:outDestination:]
  -[SBStartupTransitionFactory _transactionForDestination:context:]


SBAnalyticsStateMachineEventHandler : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long currentState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAnalyticsStateMachineEventHandler handleEvent:withContext:]
  -[SBAnalyticsStateMachineEventHandler .cxx_destruct]
  -[SBAnalyticsStateMachineEventHandler init]
  -[SBAnalyticsStateMachineEventHandler currentState]
  -[SBAnalyticsStateMachineEventHandler addEdge:]


_SBPendingMesaUnlockBehaviorUnlockRequest : NSObject
 @property  <SBBiometricUnlockBehavior> *behavior
 @property  id request
 @property  SBAuthenticationFeedback *feedback

  // instance methods
  -[_SBPendingMesaUnlockBehaviorUnlockRequest feedback]
  -[_SBPendingMesaUnlockBehaviorUnlockRequest .cxx_destruct]
  -[_SBPendingMesaUnlockBehaviorUnlockRequest behavior]
  -[_SBPendingMesaUnlockBehaviorUnlockRequest request]
  -[_SBPendingMesaUnlockBehaviorUnlockRequest initWithBehavior:request:feedback:]


SBLockScreenBiometricAuthenticationCoordinator : NSObject <BSDescriptionProviding, SBUIBiometricResourceObserver, SBBiometricUnlockBehaviorDelegate, SBWalletPrearmRecognizerDelegate, PKPassLibraryDelegate, SBUIPasscodeBiometricMatchingAssertionFactory>
 @property  SBWalletPrearmRecognizer *walletPrearmRecognizer
 @property  unsigned long state
 @property  PKPassLibrary *passLibrary
 @property  <SBBiometricUnlockBehavior> *autoUnlockBehavior
 @property  <SBLockScreenBiometricAuthenticationCoordinatorDelegate> *delegate
 @property  BOOL bioAuthenticatedWhileMenuButtonDown
 @property  BOOL authenticated
 @property  BOOL enabled
 @property  BOOL walletPreArmDisabled
 @property  BOOL isUnlockingDisabled
 @property  BOOL autoUnlockingDisabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenBiometricAuthenticationCoordinator biometricUnlockBehavior:requestsUnlock:withFeedback:]
  -[SBLockScreenBiometricAuthenticationCoordinator _state]
  -[SBLockScreenBiometricAuthenticationCoordinator walletPrearmRecognizerDidRecognize:]
  -[SBLockScreenBiometricAuthenticationCoordinator _isWalletPreArmAllowed]
  -[SBLockScreenBiometricAuthenticationCoordinator setAuthenticated:]
  -[SBLockScreenBiometricAuthenticationCoordinator isWalletPreArmDisabled]
  -[SBLockScreenBiometricAuthenticationCoordinator _handleIdentityMatchSuccess:]
  -[SBLockScreenBiometricAuthenticationCoordinator isAuthenticated]
  -[SBLockScreenBiometricAuthenticationCoordinator .cxx_destruct]
  -[SBLockScreenBiometricAuthenticationCoordinator isUnlockingDisabled]
  -[SBLockScreenBiometricAuthenticationCoordinator _noteMenuButtonSinglePress]
  -[SBLockScreenBiometricAuthenticationCoordinator _isMatchingEffectivelyDisabled]
  -[SBLockScreenBiometricAuthenticationCoordinator _setAutoUnlockBehavior]
  -[SBLockScreenBiometricAuthenticationCoordinator succinctDescriptionBuilder]
  -[SBLockScreenBiometricAuthenticationCoordinator initWithBiometricResource:walletPreArmController:]
  -[SBLockScreenBiometricAuthenticationCoordinator _setPassLibrary:]
  -[SBLockScreenBiometricAuthenticationCoordinator setDelegate:]
  -[SBLockScreenBiometricAuthenticationCoordinator _handlePassKitDismissalIfNecessaryWithReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireDisableCoordinatorAssertionForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _updateMatchingForState:forReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _pendUnlockRequest:]
  -[SBLockScreenBiometricAuthenticationCoordinator _clearFingerDetectAssertion]
  -[SBLockScreenBiometricAuthenticationCoordinator descriptionBuilderWithMultilinePrefix:]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireDisableUnlockAssertionForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _resetStateForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator descriptionWithMultilinePrefix:]
  -[SBLockScreenBiometricAuthenticationCoordinator walletPrearmRecognizer:didFailToRecognizeForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator biometricUnlockBehavior:requestsFeedback:]
  -[SBLockScreenBiometricAuthenticationCoordinator _setupPreArmRecognizerIfPossibleForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator contactlessInterfaceDidDismissFromSource:]
  -[SBLockScreenBiometricAuthenticationCoordinator bioAuthenticatedWhileMenuButtonDown]
  -[SBLockScreenBiometricAuthenticationCoordinator succinctDescription]
  -[SBLockScreenBiometricAuthenticationCoordinator _removePasscodeMatchingAssertion:]
  -[SBLockScreenBiometricAuthenticationCoordinator _createFingerDetectAssertion]
  -[SBLockScreenBiometricAuthenticationCoordinator _toggleAutoUnlockBehaviorEnabled:]
  -[SBLockScreenBiometricAuthenticationCoordinator _stateChangedFrom:to:]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireDisableWalletPreArmAssertionForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _hasActivePasscodeViews]
  -[SBLockScreenBiometricAuthenticationCoordinator isEnabled]
  -[SBLockScreenBiometricAuthenticationCoordinator _setState:forReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator biometricResource:matchingAllowedDidChange:]
  -[SBLockScreenBiometricAuthenticationCoordinator setBioAuthenticatedWhileMenuButtonDown:]
  -[SBLockScreenBiometricAuthenticationCoordinator delegate]
  -[SBLockScreenBiometricAuthenticationCoordinator _walletPreArmDisabledDidChange:]
  -[SBLockScreenBiometricAuthenticationCoordinator _clearPendingUnlockRequest]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireDisableAutoUnlockAssertionForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _getPassLibrary]
  -[SBLockScreenBiometricAuthenticationCoordinator biometricResource:observeEvent:]
  -[SBLockScreenBiometricAuthenticationCoordinator passLibraryReceivedInterruption]
  -[SBLockScreenBiometricAuthenticationCoordinator _noteMenuButtonDoublePress]
  -[SBLockScreenBiometricAuthenticationCoordinator isAutoUnlockingDisabled]
  -[SBLockScreenBiometricAuthenticationCoordinator _setAutoUnlockBehavior:]
  -[SBLockScreenBiometricAuthenticationCoordinator _invalidateWalletPreArmRecognizer]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireMatchingAssertionWithMode:reason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _walletPrearmRecognizer]
  -[SBLockScreenBiometricAuthenticationCoordinator _stateWantsMatching:outMatchMode:]
  -[SBLockScreenBiometricAuthenticationCoordinator _addPasscodeMatchingAssertion:]


SBLayoutElementViewController : UIViewController <SBAppPlatterDragSourceViewProviding>
 @property  UIView *_contentContainerView
 @property  BOOL _shouldDisplayLayoutElementBecomeActive
 @property  FBSDisplayIdentity *displayIdentity
 @property  SBLayoutElement *layoutElement
 @property  SBLayoutState *layoutState
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceFrame
 @property  unsigned long supportedContentInterfaceOrientations
 @property  long long contentWrapperInterfaceOrientation
 @property  BOOL supportsReuse
 @property  BOOL dragging
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLayoutElementViewController layoutState]
  -[SBLayoutElementViewController referenceFrame]
  -[SBLayoutElementViewController setDragging:]
  -[SBLayoutElementViewController initWithCoder:]
  -[SBLayoutElementViewController animationControllerForTransitionRequest:]
  -[SBLayoutElementViewController displayIdentity]
  -[SBLayoutElementViewController .cxx_destruct]
  -[SBLayoutElementViewController sourceView]
  -[SBLayoutElementViewController initialCornerRadiusConfiguration]
  -[SBLayoutElementViewController initWithNibName:bundle:]
  -[SBLayoutElementViewController containerViewForBlurContentView]
  -[SBLayoutElementViewController isDragging]
  -[SBLayoutElementViewController initialDiffuseShadowFilters]
  -[SBLayoutElementViewController initialRimShadowParameters]
  -[SBLayoutElementViewController prepareForReuse]
  -[SBLayoutElementViewController initialRimShadowFilters]
  -[SBLayoutElementViewController initWithDisplayIdentity:]
  -[SBLayoutElementViewController dealloc]
  -[SBLayoutElementViewController invalidate]
  -[SBLayoutElementViewController loadView]
  -[SBLayoutElementViewController initialDiffuseShadowParameters]
  -[SBLayoutElementViewController _contentContainerView]
  -[SBLayoutElementViewController layoutElement]
  -[SBLayoutElementViewController mainWorkspaceApplicationSceneLayoutElementViewController]
  -[SBLayoutElementViewController configureWithWorkspaceEntity:forLayoutElement:layoutState:referenceFrame:]
  -[SBLayoutElementViewController setContentWrapperInterfaceOrientation:]
  -[SBLayoutElementViewController supportsReuse]
  -[SBLayoutElementViewController willBeginTransitionToVisible:]
  -[SBLayoutElementViewController didEndTransitionToVisible:]
  -[SBLayoutElementViewController contentWrapperInterfaceOrientation]
  -[SBLayoutElementViewController _newDisplayLayoutElementForEntity:]
  -[SBLayoutElementViewController _updateDisplayLayoutElementVisibility]
  -[SBLayoutElementViewController _shouldDisplayLayoutElementBecomeActive]
  -[SBLayoutElementViewController _updateDisplayLayoutElementWithBuilder:]
  -[SBLayoutElementViewController supportedContentInterfaceOrientations]


SBSpotlightSettings : PTSettings
 @property  SBFFluidBehaviorSettings *opacityAnimationSettings
 @property  SBFFluidBehaviorSettings *snappyOpacityAnimationSettings
 @property  SBFFluidBehaviorSettings *scaleAnimationSettings
 @property  SBFFluidBehaviorSettings *snappyScaleAnimationSettings
 @property  double anchorPointY
 @property  double hiddenScale
 @property  double hiddenBlurRadius
 @property  double minTranslationToShowSpotlight
 @property  double maxTranslationForSpotlightScale
 @property  double spotlightScaleRubberbandingMin
 @property  double spotlightScaleRubberbandingMax
 @property  double spotlightScaleRubberbandingRange
 @property  double maxTranslationForHomeScreenScale
 @property  double homeScreenScaleRubberbandingMin
 @property  double homeScreenScaleRubberbandingMax
 @property  double homeScreenScaleRubberbandingRange
 @property  double maxTranslationForDimmingView
 @property  double dimmingViewRubberbandingMin
 @property  double dimmingViewRubberbandingMax
 @property  double dimmingViewRubberbandingRange
 @property  double spotlightTranslationRubberbandingRange

  // class methods
  +[SBSpotlightSettings settingsControllerModule]

  // instance methods
  -[SBSpotlightSettings .cxx_destruct]
  -[SBSpotlightSettings setDefaultValues]
  -[SBSpotlightSettings maxTranslationForHomeScreenScale]
  -[SBSpotlightSettings homeScreenScaleRubberbandingMin]
  -[SBSpotlightSettings homeScreenScaleRubberbandingMax]
  -[SBSpotlightSettings homeScreenScaleRubberbandingRange]
  -[SBSpotlightSettings dimmingViewRubberbandingMax]
  -[SBSpotlightSettings maxTranslationForDimmingView]
  -[SBSpotlightSettings dimmingViewRubberbandingMin]
  -[SBSpotlightSettings dimmingViewRubberbandingRange]
  -[SBSpotlightSettings setAnchorPointY:]
  -[SBSpotlightSettings setHiddenScale:]
  -[SBSpotlightSettings setHiddenBlurRadius:]
  -[SBSpotlightSettings setMinTranslationToShowSpotlight:]
  -[SBSpotlightSettings setMaxTranslationForSpotlightScale:]
  -[SBSpotlightSettings setSpotlightScaleRubberbandingMin:]
  -[SBSpotlightSettings hiddenScale]
  -[SBSpotlightSettings setSpotlightScaleRubberbandingMax:]
  -[SBSpotlightSettings setSpotlightScaleRubberbandingRange:]
  -[SBSpotlightSettings setMaxTranslationForHomeScreenScale:]
  -[SBSpotlightSettings setHomeScreenScaleRubberbandingMin:]
  -[SBSpotlightSettings setHomeScreenScaleRubberbandingMax:]
  -[SBSpotlightSettings setHomeScreenScaleRubberbandingRange:]
  -[SBSpotlightSettings setMaxTranslationForDimmingView:]
  -[SBSpotlightSettings setDimmingViewRubberbandingMin:]
  -[SBSpotlightSettings setDimmingViewRubberbandingMax:]
  -[SBSpotlightSettings setDimmingViewRubberbandingRange:]
  -[SBSpotlightSettings setSpotlightTranslationRubberbandingRange:]
  -[SBSpotlightSettings opacityAnimationSettings]
  -[SBSpotlightSettings setOpacityAnimationSettings:]
  -[SBSpotlightSettings snappyOpacityAnimationSettings]
  -[SBSpotlightSettings setSnappyOpacityAnimationSettings:]
  -[SBSpotlightSettings scaleAnimationSettings]
  -[SBSpotlightSettings setScaleAnimationSettings:]
  -[SBSpotlightSettings snappyScaleAnimationSettings]
  -[SBSpotlightSettings setSnappyScaleAnimationSettings:]
  -[SBSpotlightSettings anchorPointY]
  -[SBSpotlightSettings hiddenBlurRadius]
  -[SBSpotlightSettings minTranslationToShowSpotlight]
  -[SBSpotlightSettings maxTranslationForSpotlightScale]
  -[SBSpotlightSettings spotlightScaleRubberbandingMin]
  -[SBSpotlightSettings spotlightScaleRubberbandingMax]
  -[SBSpotlightSettings spotlightScaleRubberbandingRange]
  -[SBSpotlightSettings spotlightTranslationRubberbandingRange]


SBFluidSwitcherRootSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBFluidSwitcherRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _setup]
  -[SBFluidSwitcherRootSwitcherModifier reduceMotionModifierForReduceMotionChangedEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _handleEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBFluidSwitcherRootSwitcherModifier setDelegate:]
  -[SBFluidSwitcherRootSwitcherModifier lowEndHardwareModifier]
  -[SBFluidSwitcherRootSwitcherModifier didMoveToParentModifier:]
  -[SBFluidSwitcherRootSwitcherModifier gestureModifierForGestureEvent:]
  -[SBFluidSwitcherRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier floorModifierForGestureEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleRemovalEvent:]
  -[SBFluidSwitcherRootSwitcherModifier transitionModifierForMainTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBFluidSwitcherRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBFluidSwitcherRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleScrollEvent:]
  -[SBFluidSwitcherRootSwitcherModifier shelfModifierForTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleInsertionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier multitaskingModifier]
  -[SBFluidSwitcherRootSwitcherModifier handleHighlightEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _reduceMotionModifier]
  -[SBFluidSwitcherRootSwitcherModifier handleGestureEvent:]
  -[SBFluidSwitcherRootSwitcherModifier responseForProposedChildResponse:childModifier:event:]
  -[SBFluidSwitcherRootSwitcherModifier floorModifier]
  -[SBFluidSwitcherRootSwitcherModifier highlightModifierForHighlightEvent:]
  -[SBFluidSwitcherRootSwitcherModifier focusedAppModifierForUpdateFocusedAppLayoutEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleReduceMotionChangedEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateMultitaskingModifierWithEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateFloorModifierWithTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateReduceMotionModifierWithReduceMotionChangedEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateLowEndHardwareModifier]
  -[SBFluidSwitcherRootSwitcherModifier _updateTransientlyVisibleSlideOverTongueModifierWithEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateFloorModifierWithGestureEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleSwipeToKillEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _swipeToKillModifierKeyForAppLayout:]
  -[SBFluidSwitcherRootSwitcherModifier _highlightModifierKeyForAppLayout:]
  -[SBFluidSwitcherRootSwitcherModifier handleUpdateFocusedAppLayoutEvent:]
  -[SBFluidSwitcherRootSwitcherModifier verifyInternalIntegrityAfterHandlingEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateFloorModifierWithProposedFloorModifier:]
  -[SBFluidSwitcherRootSwitcherModifier transientlyVisibleSlideOverTongueModifierForEvent:]
  -[SBFluidSwitcherRootSwitcherModifier transitionModifierForInlineTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier transientlyVisibleSlideOverTongueModifier]


SBClawGestureMetric : SBAWDMetric
  // instance methods
  -[SBClawGestureMetric dataClass]
  -[SBClawGestureMetric postWithDataBuilder:]
  -[SBClawGestureMetric metricID]
  -[SBClawGestureMetric configureWithData:]


SBClawGestureMetricData : SBAWDMetricData
 @property  BOOL didPressLock
 @property  BOOL didPressVolumeUp
 @property  BOOL didPressVolumeDown
 @property  BOOL didTriggerSOS
 @property  unsigned long duration

  // instance methods
  -[SBClawGestureMetricData setDuration:]
  -[SBClawGestureMetricData duration]
  -[SBClawGestureMetricData didPressLock]
  -[SBClawGestureMetricData setDidPressLock:]
  -[SBClawGestureMetricData didPressVolumeUp]
  -[SBClawGestureMetricData setDidPressVolumeUp:]
  -[SBClawGestureMetricData didPressVolumeDown]
  -[SBClawGestureMetricData setDidPressVolumeDown:]
  -[SBClawGestureMetricData didTriggerSOS]
  -[SBClawGestureMetricData setDidTriggerSOS:]


SBSceneManagerReference : NSObject <BSDebugDescriptionProviding>
 @property  FBSDisplayIdentity *displayIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneManagerReference setManager:]
  -[SBSceneManagerReference displayIdentity]
  -[SBSceneManagerReference .cxx_destruct]
  -[SBSceneManagerReference succinctDescriptionBuilder]
  -[SBSceneManagerReference setDelegate:]
  -[SBSceneManagerReference descriptionBuilderWithMultilinePrefix:]
  -[SBSceneManagerReference descriptionWithMultilinePrefix:]
  -[SBSceneManagerReference setDisplayIdentity:]
  -[SBSceneManagerReference succinctDescription]
  -[SBSceneManagerReference _autoreleaseManager:]
  -[SBSceneManagerReference manager]
  -[SBSceneManagerReference initWithDisplayIdentity:]
  -[SBSceneManagerReference delegate]
  -[SBSceneManagerReference isRetaining]
  -[SBSceneManagerReference debugDescriptionWithMultilinePrefix:]
  -[SBSceneManagerReference retainForScene:]
  -[SBSceneManagerReference invalidate]
  -[SBSceneManagerReference releaseForScene:]
  -[SBSceneManagerReference _updateRetainWithBlock:]
  -[SBSceneManagerReference setDisplayIsConnected:]
  -[SBSceneManagerReference isDefunct]


SBSnapshotDataProviderContext : XBSnapshotDataProviderContext
 @property  NSString *sceneID

  // instance methods
  -[SBSnapshotDataProviderContext .cxx_destruct]
  -[SBSnapshotDataProviderContext sceneID]
  -[SBSnapshotDataProviderContext setSceneID:]


SBSceneSnapshotDataProvider : NSObject <XBSnapshotDataProvider>
 @property  XBSnapshotDataProviderContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneSnapshotDataProvider hasProtectedContent]
  -[SBSceneSnapshotDataProvider .cxx_destruct]
  -[SBSceneSnapshotDataProvider fetchImageForFormat:]
  -[SBSceneSnapshotDataProvider fallbackSnapshotDataProvider]
  -[SBSceneSnapshotDataProvider IOSurfaceForFormat:]
  -[SBSceneSnapshotDataProvider initWithSceneSnapshot:scaleFactor:]
  -[SBSceneSnapshotDataProvider _invalidateSnapshotData]
  -[SBSceneSnapshotDataProvider context]


SBUIImageDataProvider : NSObject <XBSnapshotDataProvider>
 @property  XBSnapshotDataProviderContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIImageDataProvider .cxx_destruct]
  -[SBUIImageDataProvider fetchImageForFormat:]
  -[SBUIImageDataProvider initWithImage:context:scaleFactor:]
  -[SBUIImageDataProvider context]


SBFallbackSnapshotDataProvider : NSObject <XBSnapshotDataProvider>
 @property  XBSnapshotDataProviderContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFallbackSnapshotDataProvider .cxx_destruct]
  -[SBFallbackSnapshotDataProvider fetchImageForFormat:]
  -[SBFallbackSnapshotDataProvider IOSurfaceForFormat:]
  -[SBFallbackSnapshotDataProvider initWithSceneSnapshot:scaleFactor:]
  -[SBFallbackSnapshotDataProvider _invalidateSnapshotData]
  -[SBFallbackSnapshotDataProvider context]


SBClickGestureRecognizer : SBPressGestureRecognizer
 @property  unsigned long numberOfClicksRequired
 @property  BOOL allPressesUpRequired
 @property  double maximumClickFormationDuration
 @property  double maximumClickDownDuration
 @property  double maximumBetweenClicksDelay

  // instance methods
  -[SBClickGestureRecognizer addShortcutWithPressTypes:]
  -[SBClickGestureRecognizer setNumberOfClicksRequired:]
  -[SBClickGestureRecognizer gestureStateInfoForUnbalancedPressBeganCount:previousCount:]
  -[SBClickGestureRecognizer setMaximumClickDownDuration:]
  -[SBClickGestureRecognizer .cxx_destruct]
  -[SBClickGestureRecognizer numberOfClicksRequired]
  -[SBClickGestureRecognizer setAllPressesUpRequired:]
  -[SBClickGestureRecognizer initWithTarget:action:]
  -[SBClickGestureRecognizer _areRequiredPressTypesContainedInSet:]
  -[SBClickGestureRecognizer maximumBetweenClicksDelay]
  -[SBClickGestureRecognizer reset]
  -[SBClickGestureRecognizer maximumClickFormationDuration]
  -[SBClickGestureRecognizer didReceiveRequiredPressEndedCount]
  -[SBClickGestureRecognizer resetShortcutsTracking]
  -[SBClickGestureRecognizer setMaximumBetweenClicksDelay:]
  -[SBClickGestureRecognizer _notePressReceivedWithType:phase:]
  -[SBClickGestureRecognizer maximumClickDownDuration]
  -[SBClickGestureRecognizer allPressesUpRequired]
  -[SBClickGestureRecognizer didReceiveRequiredPressBeganCount]
  -[SBClickGestureRecognizer setMaximumClickFormationDuration:]


SBDeveloperBuildExpirationAlert : SBHomeScreenNagAlert
  // instance methods
  -[SBDeveloperBuildExpirationAlert init]
  -[SBDeveloperBuildExpirationAlert dismissButtonText]


SBWebApplication : SBApplication
  // class methods
  +[SBWebApplication _webClipIdentifierFromWebAppIdentifier:]
  +[SBWebApplication _webAppIdentifierFromWebClipIdentifier:]

  // instance methods
  -[SBWebApplication supportsMultitaskingShelf]
  -[SBWebApplication isWebApplication]
  -[SBWebApplication iconIdentifier]


SBModelessSyncController : NSObject
 @property  BOOL isAppSyncing
 @property  BOOL isSyncing
 @property  BOOL isRestoringFromICloud
 @property  BOOL isAutoSyncing
 @property  BOOL isWirelessSyncing

  // class methods
  +[SBModelessSyncController sharedInstance]

  // instance methods
  -[SBModelessSyncController endMonitoring]
  -[SBModelessSyncController isAutoSyncing]
  -[SBModelessSyncController setIsSyncing:]
  -[SBModelessSyncController connectionWasInterrupted:]
  -[SBModelessSyncController _appSyncStateChanged]
  -[SBModelessSyncController isAppSyncing]
  -[SBModelessSyncController .cxx_destruct]
  -[SBModelessSyncController isRestoringFromICloud]
  -[SBModelessSyncController _iCloudStatusChanged]
  -[SBModelessSyncController init]
  -[SBModelessSyncController _endObservingICloudRestoreStatus]
  -[SBModelessSyncController isWirelessSyncing]
  -[SBModelessSyncController _setAppSyncState:]
  -[SBModelessSyncController gotLowBatteryWarning]
  -[SBModelessSyncController _beginObservingICloudRestoreStatus]
  -[SBModelessSyncController _updateIconsForStateChange]
  -[SBModelessSyncController dealloc]
  -[SBModelessSyncController connection:updatedProgress:]
  -[SBModelessSyncController beginMonitoring]
  -[SBModelessSyncController isSyncing]


SBModelessSyncStubs : NSObject
  // class methods
  +[SBModelessSyncStubs iconState]


SBInCallTransientOverlayPresentationWorkspaceTransaction : SBMainWorkspaceTransaction
 @property  NSString *analyticsSource
 @property  SBInCallPresentationSession *sourcePresentationSession

  // instance methods
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction _begin]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction .cxx_destruct]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction analyticsSource]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction initWithTransitionRequest:sourcePresentationSession:analyticsSource:]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction _performInCallPresentationWithCompletion:]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction sourcePresentationSession]


SBAppStatusBarSettingsAssertion : NSObject <BSDescriptionProviding, BSInvalidatable>
 @property  unsigned long level
 @property  SBAppStatusBarSettings *settings
 @property  NSString *reason
 @property  NSDate *timestamp
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppStatusBarSettingsAssertion acquire]
  -[SBAppStatusBarSettingsAssertion level]
  -[SBAppStatusBarSettingsAssertion invalidateWithAnimationParameters:]
  -[SBAppStatusBarSettingsAssertion .cxx_destruct]
  -[SBAppStatusBarSettingsAssertion succinctDescriptionBuilder]
  -[SBAppStatusBarSettingsAssertion modifySettingsWithBlock:]
  -[SBAppStatusBarSettingsAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBAppStatusBarSettingsAssertion init]
  -[SBAppStatusBarSettingsAssertion descriptionWithMultilinePrefix:]
  -[SBAppStatusBarSettingsAssertion succinctDescription]
  -[SBAppStatusBarSettingsAssertion initWithSettings:atLevel:reason:]
  -[SBAppStatusBarSettingsAssertion reason]
  -[SBAppStatusBarSettingsAssertion acquireWithAnimationParameters:]
  -[SBAppStatusBarSettingsAssertion initWithStatusBarHidden:atLevel:reason:]
  -[SBAppStatusBarSettingsAssertion timestamp]
  -[SBAppStatusBarSettingsAssertion dealloc]
  -[SBAppStatusBarSettingsAssertion invalidate]
  -[SBAppStatusBarSettingsAssertion modifySettingsWithBlock:animationParameters:]
  -[SBAppStatusBarSettingsAssertion settings]


SBAppUnderFloatingSwitcherSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBAppUnderFloatingSwitcherSwitcherModifier appLayoutsToResignActive]
  -[SBAppUnderFloatingSwitcherSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBAppUnderFloatingSwitcherSwitcherModifier keyboardSuppressionMode]
  -[SBAppUnderFloatingSwitcherSwitcherModifier .cxx_destruct]
  -[SBAppUnderFloatingSwitcherSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBAppUnderFloatingSwitcherSwitcherModifier initWithActiveAppLayout:]


SBMainWorkspaceTransaction : SBWorkspaceTransaction
 @property  SBMainWorkspaceTransitionRequest *transitionRequest

  // instance methods
  -[SBMainWorkspaceTransaction _didComplete]
  -[SBMainWorkspaceTransaction initWithTransitionRequest:]


SBInteractiveScreenshotGestureRootViewController : UIViewController <BSInvalidatable>
 @property  <SBInteractiveScreenshotGestureRootViewControllerDelegate> *delegate
 @property  unsigned int flashViewLayerContextID
 @property  unsigned long flashViewLayerRenderID
 @property  long long gestureStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInteractiveScreenshotGestureRootViewController _edgeInsetsForChildViewController:insetsAreAbsolute:]
  -[SBInteractiveScreenshotGestureRootViewController .cxx_destruct]
  -[SBInteractiveScreenshotGestureRootViewController viewDidLoad]
  -[SBInteractiveScreenshotGestureRootViewController setDelegate:]
  -[SBInteractiveScreenshotGestureRootViewController viewDidLayoutSubviews]
  -[SBInteractiveScreenshotGestureRootViewController delegate]
  -[SBInteractiveScreenshotGestureRootViewController invalidate]
  -[SBInteractiveScreenshotGestureRootViewController supportedInterfaceOrientations]
  -[SBInteractiveScreenshotGestureRootViewController handlePanGestureRecognizerAction:]
  -[SBInteractiveScreenshotGestureRootViewController _canShowWhileLocked]
  -[SBInteractiveScreenshotGestureRootViewController gestureStyle]
  -[SBInteractiveScreenshotGestureRootViewController setGestureStyle:]
  -[SBInteractiveScreenshotGestureRootViewController _createMaterialViewWithFrame:groupName:isCaptureOnly:]
  -[SBInteractiveScreenshotGestureRootViewController _createFlashViewWithFrame:]
  -[SBInteractiveScreenshotGestureRootViewController _updateContentTransformUsingPresentationValues:]
  -[SBInteractiveScreenshotGestureRootViewController _updateCropLinesMultiPartAnimationForCropsProgress]
  -[SBInteractiveScreenshotGestureRootViewController _currentCommitProgressVelocity]
  -[SBInteractiveScreenshotGestureRootViewController _injectCommitProgressVelocity:]
  -[SBInteractiveScreenshotGestureRootViewController _isGestureStyleReducedMotion:]
  -[SBInteractiveScreenshotGestureRootViewController _updateWithUpdateMode:contentAnimationSettings:commitProgress:additionalContentTranslation:completion:]
  -[SBInteractiveScreenshotGestureRootViewController _prepareViewHierarchyForCommittedScreenshot:gestureStyle:]
  -[SBInteractiveScreenshotGestureRootViewController _gestureCommitProgressUpdateVelocityOverTimeInterval:]
  -[SBInteractiveScreenshotGestureRootViewController _updateWithUpdateMode:commitProgress:additionalContentTranslation:completion:]
  -[SBInteractiveScreenshotGestureRootViewController _getDistanceTraveled:fullDistance:commitProgress:forTranslationFromCorner:bounds:]
  -[SBInteractiveScreenshotGestureRootViewController _addGestureUpdateWithCommitProgress:timestamp:]
  -[SBInteractiveScreenshotGestureRootViewController _isGestureStyleDisabled:]
  -[SBInteractiveScreenshotGestureRootViewController _getContentTranslation:scale:forCommitProgress:contentInsets:additionalContentTranslation:]
  -[SBInteractiveScreenshotGestureRootViewController _cancellationCommitProgressAnimatablePropertyPresentationValueDidChange]
  -[SBInteractiveScreenshotGestureRootViewController _createScreenshotImageViewWithFrame:]
  -[SBInteractiveScreenshotGestureRootViewController _contentTransformForCommitProgress:contentInsets:additionalContentTranslation:]
  -[SBInteractiveScreenshotGestureRootViewController _inverseContentTransformForCommitProgress:contentInsets:additionalContentTranslation:]
  -[SBInteractiveScreenshotGestureRootViewController _anchoredTransformForAnchorPoint:bounds:center:transform:]
  -[SBInteractiveScreenshotGestureRootViewController initWithSourceScene:]
  -[SBInteractiveScreenshotGestureRootViewController flashViewLayerContextID]
  -[SBInteractiveScreenshotGestureRootViewController flashViewLayerRenderID]
  -[SBInteractiveScreenshotGestureRootViewController cancelInteractionWithStyle:settlingCompletionHandler:]
  -[SBInteractiveScreenshotGestureRootViewController captureScreenshotWithInterfaceOrientation:completion:]
  -[SBInteractiveScreenshotGestureRootViewController commitInteractionWithScreenshotImage:screenshotInterfaceOrientation:settlingCompletionHandler:flashCompletionHandler:]
  -[SBInteractiveScreenshotGestureRootViewController removePlaceholderChrome]


_SBInteractiveScreenshotGestureBackdropView : UIView
 @property  CABackdropLayer *backdropLayer

  // class methods
  +[_SBInteractiveScreenshotGestureBackdropView layerClass]

  // instance methods
  -[_SBInteractiveScreenshotGestureBackdropView backdropLayer]


_SBInteractiveScreenshotGestureReplicatorView : UIView
 @property  CAReplicatorLayer *replicatorLayer

  // class methods
  +[_SBInteractiveScreenshotGestureReplicatorView layerClass]

  // instance methods
  -[_SBInteractiveScreenshotGestureReplicatorView replicatorLayer]


SBViewMorphAnimatorContentClippingView : UIView

SBViewMorphAnimatorContentBlackCurtainView : UIView

SBViewMorphAnimator : NSObject <SBViewMorphAnimatorObserver>
 @property  NSHashTable *observers
 @property  unsigned long startedSourceAnimations
 @property  unsigned long startedTargetAnimations
 @property  unsigned long completedSourceAnimations
 @property  unsigned long completedTargetAnimations
 @property  BOOL invalidated
 @property  BOOL sourceAllEnded
 @property  BOOL targetExternalPlaceholderAllEnded
 @property  BOOL sourceContentFrameWasAltered
 @property  @? sourceAllAnimationsCompletionBlock
 @property  BSAbsoluteMachTimer *allAnimationsTimeoutTimer
 @property  BSAbsoluteMachTimer *morphAnimationTimeout
 @property  BSAbsoluteMachTimer *sourceAnimationsCompletionContinueBlockTimeoutTimer
 @property  SBViewMorphAnimatorContentBlackCurtainView *sourceBlackCurtainView
 @property  SBViewMorphAnimatorContentClippingView *targetContentClippingView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} targetContentClippingViewInitialFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} sourceAppLayoutFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} sourceContentFrame
 @property  double sourceCornerRadius
 @property  NSUUID *uuid
 @property  UIView *sourceView
 @property  UIView *targetView
 @property  UIView *targetContentView
 @property  long long fromOrientation
 @property  long long toOrientation
 @property  SBFFluidBehaviorSettings *sourceClipAnimationSettings
 @property  SBFFluidBehaviorSettings *targetClipAnimationSettings
 @property  <SBViewMorphAnimatorDelegate> *delegate
 @property  <SBViewMorphAnimatorDataSource> *targetDataSource
 @property  BOOL automaticallyStartSourceAnimations
 @property  BOOL automaticallyStartTargetAnimations
 @property  long long direction
 @property  {CGPoint=dd} sourceFinalCenter
 @property  double sourceFinalScale
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} sourceClippingFrame
 @property  double sourceClippingCornerRadius
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} targetSourcePinningFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} targetFinalFrame
 @property  double targetCornerRadius
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBViewMorphAnimator direction]
  -[SBViewMorphAnimator _enumerateObserversRespondingToSelector:usingBlock:]
  -[SBViewMorphAnimator setSourceView:]
  -[SBViewMorphAnimator cancel:]
  -[SBViewMorphAnimator _reset]
  -[SBViewMorphAnimator setDirection:]
  -[SBViewMorphAnimator targetView]
  -[SBViewMorphAnimator .cxx_destruct]
  -[SBViewMorphAnimator sourceView]
  -[SBViewMorphAnimator setDelegate:]
  -[SBViewMorphAnimator _isReversed]
  -[SBViewMorphAnimator setObservers:]
  -[SBViewMorphAnimator init]
  -[SBViewMorphAnimator _removeMatchMoveAnimation]
  -[SBViewMorphAnimator setInvalidated:]
  -[SBViewMorphAnimator addObserver:]
  -[SBViewMorphAnimator toOrientation]
  -[SBViewMorphAnimator fromOrientation]
  -[SBViewMorphAnimator uuid]
  -[SBViewMorphAnimator delegate]
  -[SBViewMorphAnimator observers]
  -[SBViewMorphAnimator dealloc]
  -[SBViewMorphAnimator _updateParameters]
  -[SBViewMorphAnimator invalidated]
  -[SBViewMorphAnimator setToOrientation:]
  -[SBViewMorphAnimator setFromOrientation:]
  -[SBViewMorphAnimator setTargetView:]
  -[SBViewMorphAnimator targetContentView]
  -[SBViewMorphAnimator setTargetContentView:]
  -[SBViewMorphAnimator setSourceContentFrame:]
  -[SBViewMorphAnimator sourceContentFrame]
  -[SBViewMorphAnimator interrupt:]
  -[SBViewMorphAnimator sourceClippingFrame]
  -[SBViewMorphAnimator sourceClippingCornerRadius]
  -[SBViewMorphAnimator sourceFinalCenter]
  -[SBViewMorphAnimator sourceFinalScale]
  -[SBViewMorphAnimator noteSourceAnimationsDidEnd:finished:continueBlock:]
  -[SBViewMorphAnimator setAutomaticallyStartSourceAnimations:]
  -[SBViewMorphAnimator startTargetAnimations:]
  -[SBViewMorphAnimator noteSourceAnimationsWillStart:]
  -[SBViewMorphAnimator willStartSourceAnimations:]
  -[SBViewMorphAnimator willStartTargetAnimations:]
  -[SBViewMorphAnimator didEndSourceAnimations:finished:continueBlock:]
  -[SBViewMorphAnimator didEndTargetAnimations:finished:continueBlock:]
  -[SBViewMorphAnimator _resetAllAnimations]
  -[SBViewMorphAnimator _noteAnimatorWasCanceled]
  -[SBViewMorphAnimator _continueSourceAnimationsCompletionPendingBlock]
  -[SBViewMorphAnimator _noteAnimatorWasInterrupted]
  -[SBViewMorphAnimator _removeBlackCurtainView]
  -[SBViewMorphAnimator _removeTargetClippingView]
  -[SBViewMorphAnimator startSourceAnimations:]
  -[SBViewMorphAnimator noteTargetAnimationsDidEnd:finished:continueBlock:]
  -[SBViewMorphAnimator _sourceContentFrameForSourceView:withTargetDataSource:]
  -[SBViewMorphAnimator _sourceFinalScaleWithContentFrame:targetFinalFrame:]
  -[SBViewMorphAnimator _validatedSourceContentFrame:withinSourceView:withSourceFinalScale:]
  -[SBViewMorphAnimator _source:finalCenterWithFinalScale:contentFrame:targetFinalFrame:]
  -[SBViewMorphAnimator _targetSourcePinningFrameWithSourceContentFrame:targetFinalFrame:]
  -[SBViewMorphAnimator _sourceAppLayoutFrameForSourceView:withTargetDataSource:]
  -[SBViewMorphAnimator _startMorphAnimationTimeoutTimer]
  -[SBViewMorphAnimator _isTargetSourcePinningFrameEquivalentToSourceViewFrame]
  -[SBViewMorphAnimator _targetInitialClippingBoundsWithSourceContentFrame:sourceFinalScale:targetViewBounds:]
  -[SBViewMorphAnimator noteTargetAnimationsWillStart:]
  -[SBViewMorphAnimator _checkAnimationsDependencies:]
  -[SBViewMorphAnimator noteWillRemoveTargeMatchMoveAnimationAtFrame:withinSourceFrame:]
  -[SBViewMorphAnimator setSourceAllAnimationsCompletionBlock:]
  -[SBViewMorphAnimator _noteDidEndAllAnimations]
  -[SBViewMorphAnimator _handleHandoffTimeout]
  -[SBViewMorphAnimator initWithUUID:direction:]
  -[SBViewMorphAnimator preflightCheck]
  -[SBViewMorphAnimator setTargetDataSource:]
  -[SBViewMorphAnimator sourceClipAnimationSettings]
  -[SBViewMorphAnimator setSourceClipAnimationSettings:]
  -[SBViewMorphAnimator targetClipAnimationSettings]
  -[SBViewMorphAnimator setTargetClipAnimationSettings:]
  -[SBViewMorphAnimator targetDataSource]
  -[SBViewMorphAnimator automaticallyStartSourceAnimations]
  -[SBViewMorphAnimator automaticallyStartTargetAnimations]
  -[SBViewMorphAnimator setAutomaticallyStartTargetAnimations:]
  -[SBViewMorphAnimator startedSourceAnimations]
  -[SBViewMorphAnimator setStartedSourceAnimations:]
  -[SBViewMorphAnimator startedTargetAnimations]
  -[SBViewMorphAnimator setStartedTargetAnimations:]
  -[SBViewMorphAnimator completedSourceAnimations]
  -[SBViewMorphAnimator setCompletedSourceAnimations:]
  -[SBViewMorphAnimator completedTargetAnimations]
  -[SBViewMorphAnimator setCompletedTargetAnimations:]
  -[SBViewMorphAnimator targetSourcePinningFrame]
  -[SBViewMorphAnimator targetFinalFrame]
  -[SBViewMorphAnimator targetCornerRadius]
  -[SBViewMorphAnimator sourceAllEnded]
  -[SBViewMorphAnimator setSourceAllEnded:]
  -[SBViewMorphAnimator targetExternalPlaceholderAllEnded]
  -[SBViewMorphAnimator setTargetExternalPlaceholderAllEnded:]
  -[SBViewMorphAnimator sourceContentFrameWasAltered]
  -[SBViewMorphAnimator setSourceContentFrameWasAltered:]
  -[SBViewMorphAnimator sourceAllAnimationsCompletionBlock]
  -[SBViewMorphAnimator allAnimationsTimeoutTimer]
  -[SBViewMorphAnimator setAllAnimationsTimeoutTimer:]
  -[SBViewMorphAnimator morphAnimationTimeout]
  -[SBViewMorphAnimator setMorphAnimationTimeout:]
  -[SBViewMorphAnimator sourceAnimationsCompletionContinueBlockTimeoutTimer]
  -[SBViewMorphAnimator setSourceAnimationsCompletionContinueBlockTimeoutTimer:]
  -[SBViewMorphAnimator sourceBlackCurtainView]
  -[SBViewMorphAnimator setSourceBlackCurtainView:]
  -[SBViewMorphAnimator targetContentClippingView]
  -[SBViewMorphAnimator setTargetContentClippingView:]
  -[SBViewMorphAnimator targetContentClippingViewInitialFrame]
  -[SBViewMorphAnimator setTargetContentClippingViewInitialFrame:]
  -[SBViewMorphAnimator sourceAppLayoutFrame]
  -[SBViewMorphAnimator setSourceAppLayoutFrame:]
  -[SBViewMorphAnimator sourceCornerRadius]
  -[SBViewMorphAnimator setSourceCornerRadius:]


SBLogoutProgressView : UIView
 @property  CNContact *userContact
 @property  NSArray *pendingApplications
 @property  _UILegibilitySettings *legibilitySettings
 @property  BOOL progressVisible

  // instance methods
  -[SBLogoutProgressView updateConstraints]
  -[SBLogoutProgressView .cxx_destruct]
  -[SBLogoutProgressView setLegibilitySettings:]
  -[SBLogoutProgressView initWithFrame:]
  -[SBLogoutProgressView _updateLegibility]
  -[SBLogoutProgressView userContact]
  -[SBLogoutProgressView legibilitySettings]
  -[SBLogoutProgressView _goodbyeLabelBaselineOffset]
  -[SBLogoutProgressView _userAvatarVerticalOffsetFromCenter]
  -[SBLogoutProgressView _moreDocumentsLabelBaselineOffset]
  -[SBLogoutProgressView _updateViewData]
  -[SBLogoutProgressView _updateUserAvatar]
  -[SBLogoutProgressView _updateUserAvatarLegibility]
  -[SBLogoutProgressView _updateGoodbye]
  -[SBLogoutProgressView _updateBlame]
  -[SBLogoutProgressView isProgressVisible]
  -[SBLogoutProgressView setProgressVisible:]
  -[SBLogoutProgressView setUserContact:]
  -[SBLogoutProgressView setPendingApplications:]
  -[SBLogoutProgressView pendingApplications]


SBMainSwitcherTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainSwitcherTestRecipe load]

  // instance methods
  -[SBMainSwitcherTestRecipe title]
  -[SBMainSwitcherTestRecipe handleVolumeIncrease]
  -[SBMainSwitcherTestRecipe handleVolumeDecrease]


SBNotificationBannerDestination : NSObject <NCNotificationViewControllerDelegatePrivate, CSExternalBehaviorProviding, SBFIdleTimerBehaviorProviding, SBFMotionGestureObserver, SBAssistantObserver, NCNotificationManagementContentProviderDelegate, NCNotificationManagementViewPresenterDelegate, NCNotificationPresentableViewControllerDelegate, SBUICoronaAnimationControllerParticipant, SBBacklightControllerObserver, NCNotificationAlertDestination, SBNotificationDestinationHomeButtonPressHandler, SBFNotificationExtensionVisibilityProviding, NCNotificationViewControllerDelegate, NCNotificationViewControllerObserving>
 @property  NCNotificationViewController *presentedBanner
 @property  SBNotificationPresentableViewController *presentedPresentableVC
 @property  NCNotificationViewController *notificationViewControllerForActiveDragSession
 @property  BOOL userInteractionInProgress
 @property  NSObject<OS_dispatch_source> *presentTimer
 @property  NSObject<OS_dispatch_source> *replaceTimer
 @property  NSObject<OS_dispatch_source> *dismissTimer
 @property  UIApplicationSceneDeactivationAssertion *resignActiveAssertion
 @property  SBAppStatusBarSettingsAssertion *systemStatusBarAssertion
 @property  SBInAppStatusBarHiddenAssertion *appsStatusBarAssertion
 @property  NSMutableSet *destinationObservers
 @property  <BSInvalidatable> *idleTimerDisableAssertion
 @property  <BSInvalidatable> *starModeDisableAssertion
 @property  <BSInvalidatable> *bannerGestureRecognizerPriorityAssertion
 @property  NCNotificationManagementViewPresenter *notificationManagementPresenter
 @property  SBDashBoardLegibilityProvider *dashBoardLegibilityProvider
 @property  <BNPresentable> *presentablePendingSnapshot
 @property  SBAssistantController *assistantController
 @property  SBLockScreenManager *lockScreenManager
 @property  SBSetupManager *setupManager
 @property  BOOL presentingBanner
 @property  BOOL presentingStickyBanner
 @property  BOOL presentingBannerInLongLook
 @property  BOOL presentingEmergencyNotification
 @property  BOOL preventingAutomaticLock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  <NCNotificationAlertDestinationDelegate> *delegate
 @property  BOOL alertDestination
 @property  NSString *identifier
 @property  BSServiceConnectionEndpoint *endpoint

  // class methods
  +[SBNotificationBannerDestination _test_notificationRequestForBannerWithIcon]

  // instance methods
  -[SBNotificationBannerDestination setupManager]
  -[SBNotificationBannerDestination notificationViewControllerDidEndUserInteraction:]
  -[SBNotificationBannerDestination assistantDidDisappear:]
  -[SBNotificationBannerDestination idleTimerDisableAssertion]
  -[SBNotificationBannerDestination setReplaceTimer:]
  -[SBNotificationBannerDestination resignActiveAssertion]
  -[SBNotificationBannerDestination setIdleTimerDisableAssertion:]
  -[SBNotificationBannerDestination _isInSetupMode]
  -[SBNotificationBannerDestination _test_postNotificationRequest:completion:]
  -[SBNotificationBannerDestination coverSheetIdentifier]
  -[SBNotificationBannerDestination _isDismissingLongLookForBanner]
  -[SBNotificationBannerDestination didReceiveRaiseGesture]
  -[SBNotificationBannerDestination conformsToCSBehaviorProviding]
  -[SBNotificationBannerDestination modifyNotificationRequest:]
  -[SBNotificationBannerDestination _updateMotionGestureObservation]
  -[SBNotificationBannerDestination canReceiveNotificationRequest:]
  -[SBNotificationBannerDestination notificationPresentableViewController:presentationSize:containerSize:]
  -[SBNotificationBannerDestination notificationPresentableViewControllerShouldPresentLongLook:]
  -[SBNotificationBannerDestination setResignActiveAssertion:]
  -[SBNotificationBannerDestination isPresentingStickyBanner]
  -[SBNotificationBannerDestination handleHomeButtonPress]
  -[SBNotificationBannerDestination idleTimerMode]
  -[SBNotificationBannerDestination _dismissPresentedBannerAnimated:reason:forceIfSticky:]
  -[SBNotificationBannerDestination conformsToCSExternalBehaviorProviding]
  -[SBNotificationBannerDestination notificationUsageTrackingStateForNotificationViewController:]
  -[SBNotificationBannerDestination notificationViewController:auxiliaryOptionsContentProviderForNotificationRequest:withLongLook:]
  -[SBNotificationBannerDestination idleWarnMode]
  -[SBNotificationBannerDestination presentedBanner]
  -[SBNotificationBannerDestination bannerGestureRecognizerPriorityAssertion]
  -[SBNotificationBannerDestination presentableWillNotAppearAsBanner:withReason:]
  -[SBNotificationBannerDestination withdrawNotificationRequest:]
  -[SBNotificationBannerDestination notificationManagementPresenter]
  -[SBNotificationBannerDestination notificationViewControllerWillDismissForCancelAction:]
  -[SBNotificationBannerDestination _shouldAllowDragInteraction]
  -[SBNotificationBannerDestination longLookWillDismissForNotificationViewController:]
  -[SBNotificationBannerDestination .cxx_destruct]
  -[SBNotificationBannerDestination idleTimerDuration]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:sectionSettingsForSectionIdentifier:]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:setAllowsCriticalAlerts:forNotificationRequest:withSectionIdentifier:]
  -[SBNotificationBannerDestination _startReplaceTimer]
  -[SBNotificationBannerDestination _notificationViewControllerForActiveDragSession]
  -[SBNotificationBannerDestination _setupTimers]
  -[SBNotificationBannerDestination setLockScreenManager:]
  -[SBNotificationBannerDestination _isPresentingStickyBanner]
  -[SBNotificationBannerDestination _dismissPresentedBannerOnly:reason:animated:]
  -[SBNotificationBannerDestination _shouldForceDismisssIfStickyForReason:]
  -[SBNotificationBannerDestination presentableWillAppearAsBanner:]
  -[SBNotificationBannerDestination _publishDidPresentBannerForNotificationRequest:]
  -[SBNotificationBannerDestination _setupSystemStateChangeNotifications]
  -[SBNotificationBannerDestination _notificationViewControllerForRequest:]
  -[SBNotificationBannerDestination _setNotificationViewControllerForActiveDragSession:]
  -[SBNotificationBannerDestination _dismissBannerCompleted:]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:setMuted:untilDate:forSectionIdentifier:threadIdentifier:]
  -[SBNotificationBannerDestination notificationManagementContentProvider:requestsPresentingNotificationManagementViewType:forNotificationRequest:withPresentingView:]
  -[SBNotificationBannerDestination setDismissTimer:]
  -[SBNotificationBannerDestination setAssistantController:]
  -[SBNotificationBannerDestination setBannerGestureRecognizerPriorityAssertion:]
  -[SBNotificationBannerDestination _setupModeChanged]
  -[SBNotificationBannerDestination _lockStateChanged]
  -[SBNotificationBannerDestination postNotificationRequest:]
  -[SBNotificationBannerDestination notificationViewControllerShouldAllowExpandedPlatterInteraction:]
  -[SBNotificationBannerDestination setPresentTimer:]
  -[SBNotificationBannerDestination isAlertDestination]
  -[SBNotificationBannerDestination setDelegate:]
  -[SBNotificationBannerDestination _shouldScreenTimeSuppressNotificationRequest:]
  -[SBNotificationBannerDestination isNotificationContentExtensionVisible:]
  -[SBNotificationBannerDestination isPresentingBanner]
  -[SBNotificationBannerDestination notificationViewController:shouldFinishLongLookTransitionForTrigger:withCompletionBlock:]
  -[SBNotificationBannerDestination isUserInteractionInProgress]
  -[SBNotificationBannerDestination setDestinationObservers:]
  -[SBNotificationBannerDestination presentTimer]
  -[SBNotificationBannerDestination starModeDisableAssertion]
  -[SBNotificationBannerDestination participantState]
  -[SBNotificationBannerDestination notificationViewController:requestPermissionToExecuteAction:withParameters:completion:]
  -[SBNotificationBannerDestination _setReadyForNotificationRequests]
  -[SBNotificationBannerDestination _setReadyForNotificationRequestsCoalescingWith:]
  -[SBNotificationBannerDestination longLookDidPresentForNotificationViewController:]
  -[SBNotificationBannerDestination _isPresentingBannerPreventingAutomaticLock]
  -[SBNotificationBannerDestination presentModalBannerAndExpandForNotificationRequest:]
  -[SBNotificationBannerDestination init]
  -[SBNotificationBannerDestination notificationViewController:dragInteraction:sessionWillBegin:]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:setDeliverQuietly:forNotificationRequest:withSectionIdentifier:]
  -[SBNotificationBannerDestination longLookWillPresentForNotificationViewController:]
  -[SBNotificationBannerDestination _resetPresentTimer]
  -[SBNotificationBannerDestination notificationViewControllerShouldInterpretTapAsDefaultAction:]
  -[SBNotificationBannerDestination _isShowingShortLookAtRest]
  -[SBNotificationBannerDestination presentedPresentableVC]
  -[SBNotificationBannerDestination _revokeAllPresentablesWithRequesterIdentifier:reason:options:]
  -[SBNotificationBannerDestination _notificationSectionSettingsForSectionIdentifier:]
  -[SBNotificationBannerDestination isPresentingEmergencyNotification]
  -[SBNotificationBannerDestination dashBoardLegibilityProvider]
  -[SBNotificationBannerDestination setDashBoardLegibilityProvider:]
  -[SBNotificationBannerDestination _canReceiveNotificationRequestIfLocked:]
  -[SBNotificationBannerDestination identifier]
  -[SBNotificationBannerDestination setUserInteractionInProgress:]
  -[SBNotificationBannerDestination userInteractionDidEndForBannerForPresentable:]
  -[SBNotificationBannerDestination _test_dismissNotificationRequest:]
  -[SBNotificationBannerDestination coronaAnimationController:willAnimateCoronaTransitionWithAnimator:]
  -[SBNotificationBannerDestination notificationViewControllerShouldAllowDragInteraction:]
  -[SBNotificationBannerDestination notificationViewController:dragInteraction:session:willEndWithOperation:]
  -[SBNotificationBannerDestination shouldDismissForReason:outReason:]
  -[SBNotificationBannerDestination systemStatusBarAssertion]
  -[SBNotificationBannerDestination appsStatusBarAssertion]
  -[SBNotificationBannerDestination _isPresentedBannerBeingDragged]
  -[SBNotificationBannerDestination presentedBannerScreenFrame]
  -[SBNotificationBannerDestination _dismissPresentedBannerOnly:reason:animated:forceIfSticky:]
  -[SBNotificationBannerDestination notificationViewControllerWillBeginUserInteraction:]
  -[SBNotificationBannerDestination userInteractionWillBeginForBannerForPresentable:]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:setAllowsNotifications:forNotificationRequest:withSectionIdentifier:]
  -[SBNotificationBannerDestination dismissTimer]
  -[SBNotificationBannerDestination _isContentSuppressedForNotificationRequest:]
  -[SBNotificationBannerDestination _cancelReplaceAndDismissTimers]
  -[SBNotificationBannerDestination destinationDidBecomeDisabled]
  -[SBNotificationBannerDestination _setPresentedPresentableVC:]
  -[SBNotificationBannerDestination destinationObservers]
  -[SBNotificationBannerDestination setSetupManager:]
  -[SBNotificationBannerDestination isPresentingBannerInLongLook]
  -[SBNotificationBannerDestination setStarModeDisableAssertion:]
  -[SBNotificationBannerDestination _startTimerWithDelay:eventHandler:]
  -[SBNotificationBannerDestination unregisterNotificationBannerDestinationObserver:]
  -[SBNotificationBannerDestination _isPresentingBanner]
  -[SBNotificationBannerDestination notificationViewControllerShouldPan:]
  -[SBNotificationBannerDestination setAppsStatusBarAssertion:]
  -[SBNotificationBannerDestination _cancelReplaceTimer]
  -[SBNotificationBannerDestination _isDeviceAuthenticated]
  -[SBNotificationBannerDestination _shouldDismissPresentedBannerPerformingPreludeForcingIfSticky:outReason:]
  -[SBNotificationBannerDestination notificationViewControllerShouldSupportExpandedPlatterInteraction:]
  -[SBNotificationBannerDestination delegate]
  -[SBNotificationBannerDestination notificationViewController:executeAction:withParameters:completion:]
  -[SBNotificationBannerDestination notificationManagementViewPresenterWillPresentManagementView:]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:setAllowsTimeSensitive:forNotificationRequest:withSectionIdentifier:]
  -[SBNotificationBannerDestination restrictedCapabilities]
  -[SBNotificationBannerDestination _startReplaceAndDismissTimersForRequest:]
  -[SBNotificationBannerDestination _setStatusBarsHidden:withDuration:]
  -[SBNotificationBannerDestination _isPresentingBannerRequestingRaiseGesture]
  -[SBNotificationBannerDestination _isPresentingBannerInLongLook]
  -[SBNotificationBannerDestination lockScreenManager]
  -[SBNotificationBannerDestination backlightController:didAnimateBacklightToFactor:source:]
  -[SBNotificationBannerDestination longLookDidDismissForNotificationViewController:]
  -[SBNotificationBannerDestination proximityDetectionMode]
  -[SBNotificationBannerDestination presentableDidDisappearAsBanner:withReason:]
  -[SBNotificationBannerDestination isPreventingAutomaticLock]
  -[SBNotificationBannerDestination dealloc]
  -[SBNotificationBannerDestination _performCancelAction]
  -[SBNotificationBannerDestination endpoint]
  -[SBNotificationBannerDestination _dashBoardLegibilitySettings]
  -[SBNotificationBannerDestination shouldAcquireWindowLevelAssertion]
  -[SBNotificationBannerDestination _postNotificationRequest:modal:completion:]
  -[SBNotificationBannerDestination scrollingStrategy]
  -[SBNotificationBannerDestination _isPresentingBannerWithHiddenPreview]
  -[SBNotificationBannerDestination presentableWillDisappearAsBanner:withReason:]
  -[SBNotificationBannerDestination presentablePendingSnapshot]
  -[SBNotificationBannerDestination setPresentablePendingSnapshot:]
  -[SBNotificationBannerDestination _presentedBannerMatchesNotificationRequest:]
  -[SBNotificationBannerDestination setNotificationManagementPresenter:]
  -[SBNotificationBannerDestination _isBundleIdentifierBlockedForScreenTimeExpiration:]
  -[SBNotificationBannerDestination presentableDidAppearAsBanner:]
  -[SBNotificationBannerDestination assistantController]
  -[SBNotificationBannerDestination replaceTimer]
  -[SBNotificationBannerDestination registerNotificationBannerDestinationObserver:]
  -[SBNotificationBannerDestination _isUILocked]
  -[SBNotificationBannerDestination notificationViewController:staticContentProviderForNotificationRequest:]
  -[SBNotificationBannerDestination prepareDestinationToReceiveCriticalNotificationRequest:]
  -[SBNotificationBannerDestination _isBundleIdentifierBlockedForCommunicationPolicy:]
  -[SBNotificationBannerDestination setSystemStatusBarAssertion:]
  -[SBNotificationBannerDestination _cancelDismissTimer]
  -[SBNotificationBannerDestination _performSilenceAction]
  -[SBNotificationBannerDestination _shouldScreenTimeSuppressNotificationsForBundleIdentifier:]
  -[SBNotificationBannerDestination notificationViewControllerContainerViewProviderForExpandedContent:]
  -[SBNotificationBannerDestination notificationViewController:dragInteraction:session:didEndWithOperation:]
  -[SBNotificationBannerDestination notificationBehavior]
  -[SBNotificationBannerDestination _startDismissTimer]
  -[SBNotificationBannerDestination _presentNotificationViewController:modal:forRequest:completion:]
  -[SBNotificationBannerDestination _shouldHideStatusBar]
  -[SBNotificationBannerDestination notificationManagementViewPresenterDidDismissManagementView:]


SBAttentionAwarenessSettings : SBUISettings <MCProfileConnectionObserver>
 @property  BOOL shouldUseAttentionSensor
 @property  double sampleInterval
 @property  double dimInterval
 @property  double sleepInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAttentionAwarenessSettings settingsControllerModule]
  +[SBAttentionAwarenessSettings attentionSensorSupported]

  // instance methods
  -[SBAttentionAwarenessSettings sampleInterval]
  -[SBAttentionAwarenessSettings setDefaultValues]
  -[SBAttentionAwarenessSettings sleepInterval]
  -[SBAttentionAwarenessSettings setSleepInterval:]
  -[SBAttentionAwarenessSettings profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[SBAttentionAwarenessSettings shouldUseAttentionSensor]
  -[SBAttentionAwarenessSettings setDimInterval:]
  -[SBAttentionAwarenessSettings dimInterval]
  -[SBAttentionAwarenessSettings dealloc]
  -[SBAttentionAwarenessSettings setShouldUseAttentionSensor:]
  -[SBAttentionAwarenessSettings setSampleInterval:]


SBWindowDragGestureSwitcherModifier : SBGestureSwitcherModifier <SBWindowDragGestureDestinationModifierDelegate>
 @property  SBAppLayout *selectedAppLayout
 @property  SBAppLayout *initialAppLayout
 @property  SBAppLayout *initialFloatingAppLayout
 @property  long long currentFloatingConfiguration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWindowDragGestureSwitcherModifier backgroundOpacityForIndex:]
  -[SBWindowDragGestureSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBWindowDragGestureSwitcherModifier homeScreenDimmingAlpha]
  -[SBWindowDragGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBWindowDragGestureSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBWindowDragGestureSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[SBWindowDragGestureSwitcherModifier homeScreenAlpha]
  -[SBWindowDragGestureSwitcherModifier keyboardSuppressionMode]
  -[SBWindowDragGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBWindowDragGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBWindowDragGestureSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[SBWindowDragGestureSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBWindowDragGestureSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBWindowDragGestureSwitcherModifier scaleForIndex:]
  -[SBWindowDragGestureSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBWindowDragGestureSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBWindowDragGestureSwitcherModifier handleTransitionEvent:]
  -[SBWindowDragGestureSwitcherModifier frameForIndex:]
  -[SBWindowDragGestureSwitcherModifier blurViewIconScaleForIndex:]
  -[SBWindowDragGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBWindowDragGestureSwitcherModifier .cxx_destruct]
  -[SBWindowDragGestureSwitcherModifier topMostLayoutRolesForAppLayout:]
  -[SBWindowDragGestureSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBWindowDragGestureSwitcherModifier wallpaperStyle]
  -[SBWindowDragGestureSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBWindowDragGestureSwitcherModifier cornerRadiiForIndex:]
  -[SBWindowDragGestureSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBWindowDragGestureSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBWindowDragGestureSwitcherModifier anchorPointForIndex:]
  -[SBWindowDragGestureSwitcherModifier didMoveToParentModifier:]
  -[SBWindowDragGestureSwitcherModifier topMostLayoutElements]
  -[SBWindowDragGestureSwitcherModifier appLayoutContainingAppLayout:]
  -[SBWindowDragGestureSwitcherModifier resizeGrabberLayoutAttributesForAppLayout:]
  -[SBWindowDragGestureSwitcherModifier currentDestination]
  -[SBWindowDragGestureSwitcherModifier handleSceneReadyEvent:]
  -[SBWindowDragGestureSwitcherModifier selectedAppLayout]
  -[SBWindowDragGestureSwitcherModifier handleGestureEvent:]
  -[SBWindowDragGestureSwitcherModifier _gestureProgressToMaxTranslationForTranslation:]
  -[SBWindowDragGestureSwitcherModifier _distanceYToMaxTranslation]
  -[SBWindowDragGestureSwitcherModifier initWithGestureID:selectedAppLayout:initialAppLayout:initialFloatingAppLayout:initialFloatingConfiguration:]
  -[SBWindowDragGestureSwitcherModifier platterScaleForWindowDragGestureDestinationModifier:]
  -[SBWindowDragGestureSwitcherModifier _insertSelectedAppLayout:intoAppLayout:inRole:configuration:centerConfiguration:]
  -[SBWindowDragGestureSwitcherModifier _initialTransformedFrameForDraggingAppLayout]
  -[SBWindowDragGestureSwitcherModifier _boundsForDraggingAppLayout]
  -[SBWindowDragGestureSwitcherModifier _scaleForTranslation:location:]
  -[SBWindowDragGestureSwitcherModifier _shouldPushInFullScreenContent]
  -[SBWindowDragGestureSwitcherModifier _platterScale]
  -[SBWindowDragGestureSwitcherModifier _updateHomeScreenStyleInteractively]
  -[SBWindowDragGestureSwitcherModifier _draggingFullScreenAppOrSplitView]
  -[SBWindowDragGestureSwitcherModifier initialAppLayout]
  -[SBWindowDragGestureSwitcherModifier initialFloatingAppLayout]
  -[SBWindowDragGestureSwitcherModifier currentFloatingConfiguration]


SBAnalyticsCoreAnalyticsEventHandler : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAnalyticsCoreAnalyticsEventHandler handleEvent:withContext:]


SBApplicationSignatureVersionUnsupportedAlertItem : SBAlertItem
  // instance methods
  -[SBApplicationSignatureVersionUnsupportedAlertItem initWithApplication:]
  -[SBApplicationSignatureVersionUnsupportedAlertItem .cxx_destruct]
  -[SBApplicationSignatureVersionUnsupportedAlertItem shouldShowInLockScreen]
  -[SBApplicationSignatureVersionUnsupportedAlertItem dismissOnLock]
  -[SBApplicationSignatureVersionUnsupportedAlertItem configure:requirePasscodeForActions:]
  -[SBApplicationSignatureVersionUnsupportedAlertItem forcesModalAlertAppearance]


SBDashBoardHomeAffordanceControllerClientBridge : NSObject <SBNotificationHomeAffordanceControllerClient>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardHomeAffordanceControllerClientBridge zStackParticipant:updatePreferences:]
  -[SBDashBoardHomeAffordanceControllerClientBridge zStackParticipantDidChange:]
  -[SBDashBoardHomeAffordanceControllerClientBridge .cxx_destruct]
  -[SBDashBoardHomeAffordanceControllerClientBridge homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBDashBoardHomeAffordanceControllerClientBridge initWithCoverSheetHomeGestureParticipant:]


SBDashBoardHomeAffordanceController : NSObject <CSHomeAffordanceControlling>
 @property  UIPanGestureRecognizer *screenEdgePanGesture
 @property  BSAnimationSettings *hideHomeAffordanceAnimationSettings
 @property  BSAnimationSettings *unhideHomeAffordanceAnimationSettings
 @property  <UIViewSpringAnimationBehaviorDescribing> *settleHomeAffordanceAnimationBehaviorDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardHomeAffordanceController .cxx_destruct]
  -[SBDashBoardHomeAffordanceController init]
  -[SBDashBoardHomeAffordanceController screenEdgePanGesture]
  -[SBDashBoardHomeAffordanceController hideHomeAffordanceAnimationSettings]
  -[SBDashBoardHomeAffordanceController unhideHomeAffordanceAnimationSettings]
  -[SBDashBoardHomeAffordanceController settleHomeAffordanceAnimationBehaviorDescription]
  -[SBDashBoardHomeAffordanceController registerHomeGestureParticipant:withIdentifier:]
  -[SBDashBoardHomeAffordanceController unregisterHomeGestureParticipant:withIdentifier:]
  -[SBDashBoardHomeAffordanceController keyboardAssertionForGestureWindow:]


SBRecalibrateProximitySensorHardwareButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBProximitySensorManagerObserver, SBHardwareButtonInteraction>
 @property  SBProximitySensorManager *sensorManager
 @property  BOOL didResetProxCalibration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecalibrateProximitySensorHardwareButtonInteraction disallowsSinglePressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction consumeInitialPressDown]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction sensorManager]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction .cxx_destruct]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction didResetProxCalibration]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction setSensorManager:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction setDidResetProxCalibration:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction descriptionBuilderWithMultilinePrefix:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction disallowsLongPressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction _disallowsAnyPressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction initWithProximitySensorManager:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction disallowsTriplePressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction hardwareButtonGestureParameters]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction disallowsDoublePressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction consumeSinglePressUp]


SBRunWallpaperMigrationTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBRunWallpaperMigrationTestRecipe load]

  // instance methods
  -[SBRunWallpaperMigrationTestRecipe title]
  -[SBRunWallpaperMigrationTestRecipe handleVolumeIncrease]
  -[SBRunWallpaperMigrationTestRecipe handleVolumeDecrease]


SBTimerSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  NSString *reason

  // instance methods
  -[SBTimerSwitcherModifierEvent initWithReason:]
  -[SBTimerSwitcherModifierEvent .cxx_destruct]
  -[SBTimerSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBTimerSwitcherModifierEvent reason]
  -[SBTimerSwitcherModifierEvent type]
  -[SBTimerSwitcherModifierEvent copyWithZone:]


SBFloorDodgingLayerModifier : SBDodgingModifier
 @property  SBDodgingModel *overridingModel

  // instance methods
  -[SBFloorDodgingLayerModifier .cxx_destruct]
  -[SBFloorDodgingLayerModifier model]
  -[SBFloorDodgingLayerModifier modelForInvalidatedModel:]
  -[SBFloorDodgingLayerModifier framesForIdentifiers]
  -[SBFloorDodgingLayerModifier animationBehaviorModeForIdentifier:]
  -[SBFloorDodgingLayerModifier zOrderedIdentifiers]
  -[SBFloorDodgingLayerModifier layoutSettingsForIdentifier:]
  -[SBFloorDodgingLayerModifier _modelByPerformingDodgingInModel:]
  -[SBFloorDodgingLayerModifier _modelByClampingOverhangingIdentifiers:]
  -[SBFloorDodgingLayerModifier _modelsByTranslatingOverlappingIdentifiers:allowedEdges:]
  -[SBFloorDodgingLayerModifier _modelsByResizingOverlappingIdentifiers:]
  -[SBFloorDodgingLayerModifier _framesForIdentifiersInModel:]
  -[SBFloorDodgingLayerModifier _identifierIfAnyIllegallyOutsideContentViewBounds:model:]
  -[SBFloorDodgingLayerModifier _identifierIfAnyIllegallyClippingOtherIdentifiers:model:intersectionSize:intersectingFrame:]
  -[SBFloorDodgingLayerModifier overridingModel]
  -[SBFloorDodgingLayerModifier setOverridingModel:]


SBCarDoNotDisturbExitConfirmationAlertItem : SBAlertItem <SiriUICarDNDDelegate>
 @property  @? notDrivingActionHandler
 @property  BOOL showSiriHeaderViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCarDoNotDisturbExitConfirmationAlertItem .cxx_destruct]
  -[SBCarDoNotDisturbExitConfirmationAlertItem shouldShowInLockScreen]
  -[SBCarDoNotDisturbExitConfirmationAlertItem reappearsAfterUnlock]
  -[SBCarDoNotDisturbExitConfirmationAlertItem configure:requirePasscodeForActions:]
  -[SBCarDoNotDisturbExitConfirmationAlertItem forcesModalAlertAppearance]
  -[SBCarDoNotDisturbExitConfirmationAlertItem controllerDidProvideContext:]
  -[SBCarDoNotDisturbExitConfirmationAlertItem notDrivingActionHandler]
  -[SBCarDoNotDisturbExitConfirmationAlertItem showSiriHeaderViewController]
  -[SBCarDoNotDisturbExitConfirmationAlertItem setNotDrivingActionHandler:]
  -[SBCarDoNotDisturbExitConfirmationAlertItem setShowSiriHeaderViewController:]


SBActionHandler : NSObject <SBFActionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBActionHandler sharedInstance]

  // instance methods
  -[SBActionHandler removeActionHandler:]
  -[SBActionHandler .cxx_destruct]
  -[SBActionHandler _reportAndKillInsecureProcesses:]
  -[SBActionHandler addActionHandler:]
  -[SBActionHandler handleActions:origin:withResult:]
  -[SBActionHandler _shouldPromptForSecureDrawViolations]
  -[SBActionHandler _captureRadarAttachmentsWithCompletion:]
  -[SBActionHandler _executeRestartAction:fromProcess:]


SBPIPContainerViewControllerRootView : SBFTouchPassThroughView

SBMicroPIPTetheringMirrorContentPlaceholderView : SBFTouchPassThroughView

SBMicroPIPTetheringMirrorContentPlaceholderContainerView : SBFTouchPassThroughView

SBMicroPIPTetheringMirrorView : SBFTouchPassThroughView
 @property  UIView *contentPlaceholderView

  // instance methods
  -[SBMicroPIPTetheringMirrorView .cxx_destruct]
  -[SBMicroPIPTetheringMirrorView initWithFrame:]
  -[SBMicroPIPTetheringMirrorView contentPlaceholderView]


SBPIPContainerViewController : UIViewController <SBPIPInteractionControllerDelegate, SBPIPContainerViewControllerAdapterContextProviding, BSInvalidatable>
 @property  long long requiredInterfaceOrientation
 @property  SBPIPInteractionController *interactionController
 @property  BOOL stashed
 @property  BOOL activelyTethered
 @property  SBPIPContainerViewController *tetheredContainerViewController
 @property  SBPIPContainerViewController *tetheringContainerViewController
 @property  double displayLayoutElementLevel
 @property  UIViewController *contentViewController
 @property  int processIdentifier
 @property  NSString *bundleIdentifier
 @property  NSString *scenePersistenceIdentifier
 @property  BOOL prefersIdleTimerDisabled
 @property  UIView *morphAnimatorTargetView
 @property  UIView *morphAnimatorTargetContainerView
 @property  double contentScale
 @property  BOOL requiresMedusaKeyboard
 @property  BOOL prefersHiddenFromClonedDisplay
 @property  long long appliedInterfaceOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  unsigned long currentCanonicalPosition
 @property  long long windowPreferredInterfaceOrientation

  // instance methods
  -[SBPIPContainerViewController viewSafeAreaInsetsDidChange]
  -[SBPIPContainerViewController interactionController]
  -[SBPIPContainerViewController displayLayoutElement]
  -[SBPIPContainerViewController initWithCoder:]
  -[SBPIPContainerViewController bundleIdentifier]
  -[SBPIPContainerViewController _setAdapter:]
  -[SBPIPContainerViewController .cxx_destruct]
  -[SBPIPContainerViewController viewDidLoad]
  -[SBPIPContainerViewController viewDidAppear:]
  -[SBPIPContainerViewController contentScale]
  -[SBPIPContainerViewController initWithNibName:bundle:]
  -[SBPIPContainerViewController hostedAppSceneHandle]
  -[SBPIPContainerViewController setContentScale:]
  -[SBPIPContainerViewController addObserver:]
  -[SBPIPContainerViewController contentViewController]
  -[SBPIPContainerViewController viewWillDisappear:]
  -[SBPIPContainerViewController viewDidLayoutSubviews]
  -[SBPIPContainerViewController processIdentifier]
  -[SBPIPContainerViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBPIPContainerViewController dealloc]
  -[SBPIPContainerViewController invalidate]
  -[SBPIPContainerViewController removeObserver:]
  -[SBPIPContainerViewController loadView]
  -[SBPIPContainerViewController updatePreferredContentSize:]
  -[SBPIPContainerViewController prefersIdleTimerDisabled]
  -[SBPIPContainerViewController acquireInterfaceOrientationLock]
  -[SBPIPContainerViewController relinquishInterfaceOrientationLock]
  -[SBPIPContainerViewController setStashed:]
  -[SBPIPContainerViewController prefersHiddenFromClonedDisplay]
  -[SBPIPContainerViewController isStashed]
  -[SBPIPContainerViewController initWithPIPController:interactionSettings:adapter:]
  -[SBPIPContainerViewController startShowingContentWithAnimationSettings:parameters:completion:]
  -[SBPIPContainerViewController animateOutLeftStashTabWithCompletion:]
  -[SBPIPContainerViewController scenePersistenceIdentifier]
  -[SBPIPContainerViewController setNeedsLayoutForInteractionController:traits:withReason:behavior:completion:]
  -[SBPIPContainerViewController interactionControllerDidUpdateEdgeInsets:]
  -[SBPIPContainerViewController interactionController:didUpdateStashProgress:]
  -[SBPIPContainerViewController interactionController:wantsStashTabHidden:left:]
  -[SBPIPContainerViewController interactionControllerDidBeginSizeChange:behavior:]
  -[SBPIPContainerViewController interactionControllerDidEndSizeChange:]
  -[SBPIPContainerViewController interactionControllerDidBeginInteraction:forGestureRecognizer:]
  -[SBPIPContainerViewController interactionControllerPanGestureDidEnd:]
  -[SBPIPContainerViewController interactionControllerDidEndAllInteractions:]
  -[SBPIPContainerViewController interactionController:didSettleOnStashState:]
  -[SBPIPContainerViewController setStashedPadding:]
  -[SBPIPContainerViewController toggleUserPreferredScale]
  -[SBPIPContainerViewController _addBlurFilterToView:]
  -[SBPIPContainerViewController _blurSpringAnimationWithParameters:fromValue:toValue:]
  -[SBPIPContainerViewController _removeBlurFilterFromView:]
  -[SBPIPContainerViewController _setStashTabHidden:left:completion:]
  -[SBPIPContainerViewController _updateContentPadding]
  -[SBPIPContainerViewController _updateContentViewFrame:reason:]
  -[SBPIPContainerViewController setInteractionsEnabled:]
  -[SBPIPContainerViewController _frameInFixedCoordinateSpace:transformedToInterfaceOrientation:]
  -[SBPIPContainerViewController _requireInterfaceOrientation:]
  -[SBPIPContainerViewController windowPreferredInterfaceOrientation]
  -[SBPIPContainerViewController _removeMicroPIPMirrorView]
  -[SBPIPContainerViewController _blackCurtainViewForStopAnimation]
  -[SBPIPContainerViewController _updateDisplayLayoutElementReferenceFrame]
  -[SBPIPContainerViewController currentCanonicalPosition]
  -[SBPIPContainerViewController _contentViewFrameInDisplayReferenceSpace]
  -[SBPIPContainerViewController layoutForTetheringInteractionController:behavior:]
  -[SBPIPContainerViewController _notifyStashStateChanged:]
  -[SBPIPContainerViewController performAfterInFlightAnimationsComplete:]
  -[SBPIPContainerViewController startAnimationWillBeginWithInitialInterfaceOrientation:initialFrame:]
  -[SBPIPContainerViewController startAnimationDidBeginWithInitialInterfaceOrientation:]
  -[SBPIPContainerViewController startAnimationDidCompleteWithInitialInterfaceOrientation:]
  -[SBPIPContainerViewController stopAnimationWillBeginWithFinalInterfaceOrientation:finalFrame:]
  -[SBPIPContainerViewController stopAnimationDidBeginWithFinalInterfaceOrientation:finalFrame:]
  -[SBPIPContainerViewController stopAnimationDidCompleteWithFinalInterfaceOrientation:]
  -[SBPIPContainerViewController rotationAnimationWillBeginToRotation:contentViewFrame:]
  -[SBPIPContainerViewController rotationAnimationDidBeginToRotation:contentViewFrame:]
  -[SBPIPContainerViewController rotationAnimationWillCompleteToRotation:contentViewFrame:]
  -[SBPIPContainerViewController rotationAnimationDidCompleteToRotation:contentViewFrame:]
  -[SBPIPContainerViewController stopShowingContentWithAnimationSettings:parameters:completion:]
  -[SBPIPContainerViewController setInteractionControllerEnabled:stashed:dataSource:]
  -[SBPIPContainerViewController handleStashingForTransitionContext:]
  -[SBPIPContainerViewController setIsActivelyTethered:mode:]
  -[SBPIPContainerViewController setTetheredContainerViewController:]
  -[SBPIPContainerViewController maximumAvailableVerticalPadding]
  -[SBPIPContainerViewController setContentViewPadding:]
  -[SBPIPContainerViewController displayLayoutElementLevel]
  -[SBPIPContainerViewController setDisplayLayoutElementLevel:]
  -[SBPIPContainerViewController startResourcesUsageReductionAfterTimeout:]
  -[SBPIPContainerViewController stopResourcesUsageReduction]
  -[SBPIPContainerViewController forcePictureInPictureToFrame:]
  -[SBPIPContainerViewController morphAnimatorTargetView]
  -[SBPIPContainerViewController morphAnimatorTargetContainerView]
  -[SBPIPContainerViewController transitionAnimationWillBegin]
  -[SBPIPContainerViewController transitionAnimationDidEnd]
  -[SBPIPContainerViewController handleDestructionRequestForSceneHandle:]
  -[SBPIPContainerViewController requiresMedusaKeyboard]
  -[SBPIPContainerViewController setPrefersHiddenFromClonedDisplay:]
  -[SBPIPContainerViewController requiredInterfaceOrientation]
  -[SBPIPContainerViewController isActivelyTethered]
  -[SBPIPContainerViewController tetheredContainerViewController]
  -[SBPIPContainerViewController tetheringContainerViewController]
  -[SBPIPContainerViewController setTetheringContainerViewController:]
  -[SBPIPContainerViewController appliedInterfaceOrientation]
  -[SBPIPContainerViewController setAppliedInterfaceOrientation:]
  -[SBPIPContainerViewController SB_accessibilityContentViewScale]
  -[SBPIPContainerViewController SB_accessibilitySetContentViewScale:]
  -[SBPIPContainerViewController SB_accessibilityToggleStashed]


SBStartupTransitionToHome : SBBaseStartupTransition
  // instance methods
  -[SBStartupTransitionToHome performTransitionWithCompletionBlock:]


SBExternalDefaults : SBAbstractDefaults
 @property  SBExternalGlobalDefaults *globalDefaults
 @property  SBExternalDuetDefaults *duetDefaults
 @property  SBExternalDemoDefaults *demoDefaults
 @property  SBExternalSetupDefaults *setupDefaults
 @property  SBExternalSettingsDefaults *settingsDefaults
 @property  SBExternalPhoneDefaults *phoneDefaults
 @property  SBExternalWifiDefaults *networkDefaults
 @property  SBExternalSoundsDefaults *soundDefaults
 @property  SBExternalNotesDefaults *notesDefaults
 @property  SBBiometricKitDefaults *biometricKitDefaults

  // instance methods
  -[SBExternalDefaults setupDefaults]
  -[SBExternalDefaults phoneDefaults]
  -[SBExternalDefaults .cxx_destruct]
  -[SBExternalDefaults duetDefaults]
  -[SBExternalDefaults soundDefaults]
  -[SBExternalDefaults biometricKitDefaults]
  -[SBExternalDefaults notesDefaults]
  -[SBExternalDefaults globalDefaults]
  -[SBExternalDefaults settingsDefaults]
  -[SBExternalDefaults demoDefaults]
  -[SBExternalDefaults networkDefaults]


SBApplicationSceneViewStatusBarDescriptor : NSObject
 @property  BOOL forceHidden

  // class methods
  +[SBApplicationSceneViewStatusBarDescriptor statusBarDescriptorWithForceHidden:]

  // instance methods
  -[SBApplicationSceneViewStatusBarDescriptor isForcedHidden]
  -[SBApplicationSceneViewStatusBarDescriptor initWithForceHidden:]
  -[SBApplicationSceneViewStatusBarDescriptor setForceHidden:]


SBInvalidateAdjustedAppLayoutsSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBInvalidateAdjustedAppLayoutsSwitcherEventResponse type]


SBDeviceApplicationSceneHandle : SBApplicationSceneHandle <FBApplicationProcessObserver, SBIdleTimerProviding>
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  long long lastActivationSource
 @property  NSString *lastActivationIconLeafIdentifier
 @property  BOOL hasMainSceneBeenForegroundAtLeastOnce
 @property  unsigned long statusBarStyleOverridesToSuppress
 @property  long long whitePointAdaptivityStyle
 @property  long long statusBarParts
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} statusBarAvoidanceFrame
 @property  long long defaultBackgroundStyle
 @property  <SBScenePlaceholderContentViewProvider> *placeholderContentProvider
 @property  BOOL effectivelyForeground
 @property  BOOL reachabilitySupported
 @property  BOOL showingModalAlert
 @property  long long backgroundStyle
 @property  long long wallpaperStyle
 @property  BOOL translucent
 @property  unsigned long screenEdgesDeferringSystemGestures
 @property  SBDeviceApplicationSceneStatusBarBreadcrumbProvider *breadcrumbProvider
 @property  SBDeviceApplicationSceneStatusBarStateProvider *statusBarStateProvider
 @property  _UIStatusBarData *overlayStatusBarData
 @property  NSString *sceneTitle
 @property  NSData *activationConditionsData
 @property  BOOL supportsCenterWindow
 @property  BOOL requestedFullScreenCenterWindow
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDeviceApplicationSceneHandle _homeAffordanceInsetBottom]
  +[SBDeviceApplicationSceneHandle _homeAffordanceInsetTop]

  // instance methods
  -[SBDeviceApplicationSceneHandle screenEdgesDeferringSystemGestures]
  -[SBDeviceApplicationSceneHandle applicationProcessDidExit:withContext:]
  -[SBDeviceApplicationSceneHandle isTranslucent]
  -[SBDeviceApplicationSceneHandle statusBarAvoidanceFrame]
  -[SBDeviceApplicationSceneHandle coordinatorRequestedIdleTimerBehavior:]
  -[SBDeviceApplicationSceneHandle statusBarOrientation]
  -[SBDeviceApplicationSceneHandle statusBarParts]
  -[SBDeviceApplicationSceneHandle _didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDeviceApplicationSceneHandle _setIdleTimerCoordinator:]
  -[SBDeviceApplicationSceneHandle statusBarAlpha]
  -[SBDeviceApplicationSceneHandle isCurrentStatusBarHiddenForOrientation:]
  -[SBDeviceApplicationSceneHandle _updateIdleTimerForReason:]
  -[SBDeviceApplicationSceneHandle _overriddenStatusBarStyleForApp:style:]
  -[SBDeviceApplicationSceneHandle forbidsActivationByBreadcrumbAction]
  -[SBDeviceApplicationSceneHandle _idleTimerCoordinator]
  -[SBDeviceApplicationSceneHandle currentEffectiveStatusBarStyleRequest]
  -[SBDeviceApplicationSceneHandle _modifyApplicationSceneClientSettings:fromRequestContext:entity:initialSceneSettings:]
  -[SBDeviceApplicationSceneHandle _initialMainSceneCompabilityMode:]
  -[SBDeviceApplicationSceneHandle _potentiallyJailedDisplayConfiguration]
  -[SBDeviceApplicationSceneHandle setWhitePointAdaptivityStyle:]
  -[SBDeviceApplicationSceneHandle isStatusBarHiddenForActivation:forOrientation:]
  -[SBDeviceApplicationSceneHandle prefersHeaderHiddenInSwitcher]
  -[SBDeviceApplicationSceneHandle _noteActivationConditionsChanged]
  -[SBDeviceApplicationSceneHandle activationInterfaceOrientationForOrientation:]
  -[SBDeviceApplicationSceneHandle setPlaceholderContentProvider:]
  -[SBDeviceApplicationSceneHandle isReachabilitySupported]
  -[SBDeviceApplicationSceneHandle preferredHardwareButtonEventTypes]
  -[SBDeviceApplicationSceneHandle backgroundStyle]
  -[SBDeviceApplicationSceneHandle activationInterfaceOrientationForCurrentOrientation]
  -[SBDeviceApplicationSceneHandle .cxx_destruct]
  -[SBDeviceApplicationSceneHandle setStatusBarForceHidden:forReason:animationSettings:]
  -[SBDeviceApplicationSceneHandle setLastActivationIconLeafIdentifier:]
  -[SBDeviceApplicationSceneHandle _statusBarStyleWithActivationSettings:]
  -[SBDeviceApplicationSceneHandle isShowingModalAlert]
  -[SBDeviceApplicationSceneHandle shouldAlwaysDisplayLiveContent]
  -[SBDeviceApplicationSceneHandle handleHardwareButtonEventType:]
  -[SBDeviceApplicationSceneHandle prefersKillingInSwitcherDisabled]
  -[SBDeviceApplicationSceneHandle _mainSceneSupportsInterfaceOrientation:]
  -[SBDeviceApplicationSceneHandle _noteMainSceneBackgroundStyleChanged]
  -[SBDeviceApplicationSceneHandle _sceneCornerRadiusConfigurationFromRequestContext:forEntity:]
  -[SBDeviceApplicationSceneHandle activationConditionsData]
  -[SBDeviceApplicationSceneHandle lastActivationIconLeafIdentifier]
  -[SBDeviceApplicationSceneHandle mostRecentSceneSnapshotsForScale:launchingOrientation:]
  -[SBDeviceApplicationSceneHandle wallpaperStyle]
  -[SBDeviceApplicationSceneHandle shouldPrioritizeForSwitcherOrdering]
  -[SBDeviceApplicationSceneHandle descriptionBuilderWithMultilinePrefix:]
  -[SBDeviceApplicationSceneHandle _bestSupportedInterfaceOrientationForOrientation:]
  -[SBDeviceApplicationSceneHandle statusBarStateProvider]
  -[SBDeviceApplicationSceneHandle setStatusBarAvoidanceFrame:]
  -[SBDeviceApplicationSceneHandle setAlertSuppressionContextsBySectionIdentifier:]
  -[SBDeviceApplicationSceneHandle _currentClassicModeAllowsLaunchingToAnySupportedOrientation]
  -[SBDeviceApplicationSceneHandle defaultStatusBarStyle]
  -[SBDeviceApplicationSceneHandle _mainSceneSupportedInterfaceOrientations]
  -[SBDeviceApplicationSceneHandle defaultBackgroundStyle]
  -[SBDeviceApplicationSceneHandle requestedFullScreenCenterWindow]
  -[SBDeviceApplicationSceneHandle _didUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationSceneHandle defaultStatusBarHiddenForOrientation:]
  -[SBDeviceApplicationSceneHandle _launchingInterfaceOrientationForOrientation:]
  -[SBDeviceApplicationSceneHandle isStatusBarForcedHiddenForOrientation:]
  -[SBDeviceApplicationSceneHandle defaultInterfaceOrientation]
  -[SBDeviceApplicationSceneHandle setLastActivationSource:]
  -[SBDeviceApplicationSceneHandle isEffectivelyForeground]
  -[SBDeviceApplicationSceneHandle currentInterfaceOrientation]
  -[SBDeviceApplicationSceneHandle _modifyProcessExecutionContext:fromRequestContext:entity:]
  -[SBDeviceApplicationSceneHandle _defaultStatusBarHeights]
  -[SBDeviceApplicationSceneHandle addObserver:]
  -[SBDeviceApplicationSceneHandle defaultStatusBarAlpha]
  -[SBDeviceApplicationSceneHandle newSceneViewWithReferenceSize:orientation:hostRequester:]
  -[SBDeviceApplicationSceneHandle newScenePlaceholderContentContextWithActivationSettings:]
  -[SBDeviceApplicationSceneHandle isEdgeProtectEnabledForHomeGesture]
  -[SBDeviceApplicationSceneHandle _didDestroyScene:]
  -[SBDeviceApplicationSceneHandle overlayStatusBarData]
  -[SBDeviceApplicationSceneHandle _sceneDataStoreCreatingIfNecessary:]
  -[SBDeviceApplicationSceneHandle hasMainSceneBeenForegroundAtLeastOnce]
  -[SBDeviceApplicationSceneHandle setKeyboardContextMaskStyle:]
  -[SBDeviceApplicationSceneHandle _commonInitWithApplication:sceneIdentifier:displayIdentity:]
  -[SBDeviceApplicationSceneHandle isDeviceApplicationSceneHandle]
  -[SBDeviceApplicationSceneHandle newSceneViewController]
  -[SBDeviceApplicationSceneHandle _didCreateScene:]
  -[SBDeviceApplicationSceneHandle statusBarEffectiveStyleRequestWithStyle:]
  -[SBDeviceApplicationSceneHandle _populateSettingsWithDefaultStatusBarHeight:]
  -[SBDeviceApplicationSceneHandle statusBarStyleOverridesToSuppress]
  -[SBDeviceApplicationSceneHandle isStatusBarForceHidden]
  -[SBDeviceApplicationSceneHandle saveSuspendSnapshot:]
  -[SBDeviceApplicationSceneHandle sceneTitle]
  -[SBDeviceApplicationSceneHandle setStatusBarParts:]
  -[SBDeviceApplicationSceneHandle supportsCenterWindow]
  -[SBDeviceApplicationSceneHandle shouldSuppressAlertForSuppressionContexts:sectionIdentifier:]
  -[SBDeviceApplicationSceneHandle _classicPhoneOnPadActivationOrientationForOrientation:]
  -[SBDeviceApplicationSceneHandle _debugPostModernRotationSupportedInterfaceOrientations]
  -[SBDeviceApplicationSceneHandle currentStatusBarStyle]
  -[SBDeviceApplicationSceneHandle statusBarHeightForOrientation:]
  -[SBDeviceApplicationSceneHandle displayEdgeInfoForForLayoutEnvironment:isInsetForHomeAffordance:]
  -[SBDeviceApplicationSceneHandle _noteSceneTitleChanged]
  -[SBDeviceApplicationSceneHandle _generateIdleTimerBehavior]
  -[SBDeviceApplicationSceneHandle lastActivationSource]
  -[SBDeviceApplicationSceneHandle wantsDeviceOrientationEventsEnabled]
  -[SBDeviceApplicationSceneHandle additionalActionsForActivatingSceneEntity:withTransitionContext:]
  -[SBDeviceApplicationSceneHandle _modifyApplicationSceneSettings:fromRequestContext:entity:]
  -[SBDeviceApplicationSceneHandle placeholderContentProvider]
  -[SBDeviceApplicationSceneHandle whitePointAdaptivityStyle]
  -[SBDeviceApplicationSceneHandle dealloc]
  -[SBDeviceApplicationSceneHandle setDefaultBackgroundStyle:]
  -[SBDeviceApplicationSceneHandle _modifySafeAreaInsetsOnApplicationSceneSettings:isInsetForHomeAffordance:isFloating:]
  -[SBDeviceApplicationSceneHandle defaultStatusBarHeightForOrientation:]
  -[SBDeviceApplicationSceneHandle removeObserver:]
  -[SBDeviceApplicationSceneHandle effectiveStatusBarStyleOverrides]
  -[SBDeviceApplicationSceneHandle isAutoHideEnabledForHomeAffordance]
  -[SBDeviceApplicationSceneHandle supportedInterfaceOrientations]
  -[SBDeviceApplicationSceneHandle _resumingInterfaceOrientationForOrientation:]
  -[SBDeviceApplicationSceneHandle setStatusBarStyleOverridesToSuppress:]
  -[SBDeviceApplicationSceneHandle effectiveStatusBarStyleRequestForActivation:]
  -[SBDeviceApplicationSceneHandle _updateSceneHostingInfoForSnapshottingWithView:]
  -[SBDeviceApplicationSceneHandle _modifyApplicationTransitionContext:fromRequestContext:entity:]
  -[SBDeviceApplicationSceneHandle breadcrumbProvider]
  -[SBDeviceApplicationSceneHandle setHasMainSceneBeenForegroundAtLeastOnce:]


SBLockedPointerManager : NSObject <SBMainDisplaySceneManagerObserver, SBLayoutStateTransitionObserver, SBDeviceApplicationSceneHandleObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockedPointerManager sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBLockedPointerManager layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBLockedPointerManager layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBLockedPointerManager .cxx_destruct]
  -[SBLockedPointerManager initWithSceneManager:]
  -[SBLockedPointerManager _queue_unlockPointer]
  -[SBLockedPointerManager sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBLockedPointerManager _queue_prefersLockForSceneIdentifier:]
  -[SBLockedPointerManager clientWithSceneIdentifier:prefersPointerLockStatus:]
  -[SBLockedPointerManager _queue_lockPointerForSceneIdentifier:]
  -[SBLockedPointerManager _queue_updateLockForLayoutState:]
  -[SBLockedPointerManager sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBLockedPointerManager _possibleSceneHandleForLockingPointerFromLayoutState:]
  -[SBLockedPointerManager _setPointerLockStatus:forSceneWithIdentifier:]
  -[SBLockedPointerManager _shouldAllowPointerLockedForScene:]
  -[SBLockedPointerManager _updateLockForLayoutState:]


SBSpotlightTransientOverlayViewController : SBTransientOverlayViewController <SPUIRemoteSearchViewDelegate>
 @property  SBSpotlightSettings *settings
 @property  UIView *scalingView
 @property  unsigned long animationCount
 @property  SBModalUIFluidDismissGestureManager *modalUIDismissGestureManager
 @property  UIPanGestureRecognizer *panGestureRecognizer
 @property  UITapGestureRecognizer *tapToDismissGestureRecognizer
 @property  <SBSpotlightTransientOverlayViewControllerDelegate> *delegate
 @property  unsigned long presentationSource
 @property  unsigned long dismissalSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpotlightTransientOverlayViewController dismissSearchView]
  -[SBSpotlightTransientOverlayViewController preferredStatusBarStyle]
  -[SBSpotlightTransientOverlayViewController scalingView]
  -[SBSpotlightTransientOverlayViewController presentationSource]
  -[SBSpotlightTransientOverlayViewController _handlePanGestureRecognizer:]
  -[SBSpotlightTransientOverlayViewController handleHomeButtonPress]
  -[SBSpotlightTransientOverlayViewController .cxx_destruct]
  -[SBSpotlightTransientOverlayViewController viewDidLoad]
  -[SBSpotlightTransientOverlayViewController setPanGestureRecognizer:]
  -[SBSpotlightTransientOverlayViewController setDelegate:]
  -[SBSpotlightTransientOverlayViewController setSettings:]
  -[SBSpotlightTransientOverlayViewController viewDidAppear:]
  -[SBSpotlightTransientOverlayViewController setPresentationSource:]
  -[SBSpotlightTransientOverlayViewController tapToDismissGestureRecognizer]
  -[SBSpotlightTransientOverlayViewController shouldAutorotate]
  -[SBSpotlightTransientOverlayViewController panGestureRecognizer]
  -[SBSpotlightTransientOverlayViewController setTapToDismissGestureRecognizer:]
  -[SBSpotlightTransientOverlayViewController viewWillDisappear:]
  -[SBSpotlightTransientOverlayViewController viewDidLayoutSubviews]
  -[SBSpotlightTransientOverlayViewController isContentOpaque]
  -[SBSpotlightTransientOverlayViewController delegate]
  -[SBSpotlightTransientOverlayViewController dealloc]
  -[SBSpotlightTransientOverlayViewController animationCount]
  -[SBSpotlightTransientOverlayViewController _preferredStatusBarVisibility]
  -[SBSpotlightTransientOverlayViewController supportedInterfaceOrientations]
  -[SBSpotlightTransientOverlayViewController settings]
  -[SBSpotlightTransientOverlayViewController _canShowWhileLocked]
  -[SBSpotlightTransientOverlayViewController setAnimationCount:]
  -[SBSpotlightTransientOverlayViewController setScalingView:]
  -[SBSpotlightTransientOverlayViewController dismissalSource]
  -[SBSpotlightTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBSpotlightTransientOverlayViewController allowsStackingOverlayContentAbove]
  -[SBSpotlightTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBSpotlightTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBSpotlightTransientOverlayViewController setDismissalSource:]
  -[SBSpotlightTransientOverlayViewController initWithModalUIFluidDismissGestureManager:]
  -[SBSpotlightTransientOverlayViewController preservesAppSwitcherDuringPresentationAndDismissal]
  -[SBSpotlightTransientOverlayViewController dismissesSiriForPresentation]
  -[SBSpotlightTransientOverlayViewController beginInteractivePresentation]
  -[SBSpotlightTransientOverlayViewController updateInteractivePresentationWithProgress:translation:]
  -[SBSpotlightTransientOverlayViewController endInteractivePresentation:]
  -[SBSpotlightTransientOverlayViewController handleGestureDismissal]
  -[SBSpotlightTransientOverlayViewController homeAffordanceSuppression]
  -[SBSpotlightTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBSpotlightTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBSpotlightTransientOverlayViewController sceneDeactivationPredicate]
  -[SBSpotlightTransientOverlayViewController dismissesForCoverSheetPresentation]
  -[SBSpotlightTransientOverlayViewController shouldPreventDragAndDrop]
  -[SBSpotlightTransientOverlayViewController prefersWindowHitTestingDisabled]
  -[SBSpotlightTransientOverlayViewController _handleTapToDismissGestureRecognizer:]
  -[SBSpotlightTransientOverlayViewController _setSpotlightPresented:withAnimationMode:alongsideAnimationBlock:completion:]
  -[SBSpotlightTransientOverlayViewController _isSpotlightVisible]
  -[SBSpotlightTransientOverlayViewController _isReduceMotionOrTransparency]
  -[SBSpotlightTransientOverlayViewController _setSpotlightAlpha:scale:blurProgress:translation:withAnimationMode:alongsideAnimationBlock:completion:]
  -[SBSpotlightTransientOverlayViewController _configureBlurFilterOnView:]
  -[SBSpotlightTransientOverlayViewController presentationDimmingViewColor]
  -[SBSpotlightTransientOverlayViewController preventsClippingToBounds]
  -[SBSpotlightTransientOverlayViewController modalUIDismissGestureManager]
  -[SBSpotlightTransientOverlayViewController setModalUIDismissGestureManager:]


SBSpotlightTransientOverlaySpotlightViewController : SBSpotlightMultiplexingViewController
 @property  unsigned long presentationSource

  // instance methods
  -[SBSpotlightTransientOverlaySpotlightViewController presentationSource]
  -[SBSpotlightTransientOverlaySpotlightViewController level]
  -[SBSpotlightTransientOverlaySpotlightViewController setPresentationSource:]
  -[SBSpotlightTransientOverlaySpotlightViewController remoteSearchViewPresentationSource]
  -[SBSpotlightTransientOverlaySpotlightViewController _canShowWhileLocked]


SBRenderImage : NSObject
  // instance methods
  -[SBRenderImage CA_copyRenderValue]
  -[SBRenderImage dealloc]
  -[SBRenderImage initWithRenderImage:]


SBWakeToInCallWorkspaceTransaction : SBMainWorkspaceTransaction
  // instance methods
  -[SBWakeToInCallWorkspaceTransaction _begin]


SBAutoPIPWorkspaceTransaction : SBWorkspaceTransaction
 @property  SBApplicationSceneEntity *entityToPIP
 @property  long long transitionStyle

  // class methods
  +[SBAutoPIPWorkspaceTransaction shouldAutoPIPEnteringBackgroundForRequest:foundEntity:]
  +[SBAutoPIPWorkspaceTransaction shouldAutoPIPEnteringBackgroundForRequest:reason:]
  +[SBAutoPIPWorkspaceTransaction shouldAutoPIPEnteringBackgroundForRequest:tetheringMode:reason:]
  +[SBAutoPIPWorkspaceTransaction shouldAutoPIPEnteringBackgroundForRequest:]
  +[SBAutoPIPWorkspaceTransaction shouldAutoPIPEnteringBackgroundForRequest:transitionStyle:]
  +[SBAutoPIPWorkspaceTransaction shouldAutoPIPEnteringBackgroundForRequest:foundEntity:tetheringMode:transitionStyle:reason:]
  +[SBAutoPIPWorkspaceTransaction shouldAutoPIPEnteringBackgroundForRequest:foundEntity:transitionStyle:]

  // instance methods
  -[SBAutoPIPWorkspaceTransaction _customizedDescriptionProperties]
  -[SBAutoPIPWorkspaceTransaction _didComplete]
  -[SBAutoPIPWorkspaceTransaction _begin]
  -[SBAutoPIPWorkspaceTransaction _canBeInterrupted]
  -[SBAutoPIPWorkspaceTransaction .cxx_destruct]
  -[SBAutoPIPWorkspaceTransaction initWithTransitionRequest:]
  -[SBAutoPIPWorkspaceTransaction transitionStyle]
  -[SBAutoPIPWorkspaceTransaction setTransitionStyle:]
  -[SBAutoPIPWorkspaceTransaction entityToPIP]
  -[SBAutoPIPWorkspaceTransaction initWithTransitionRequest:includeActiveAppEntity:reason:]


SBLockScreenService : NSObject <BSServiceConnectionListenerDelegate, SBSLockScreenServiceServerInterface, SBPasscodeEntryTransientOverlayViewControllerDelegate>
 @property  SBPasscodeEntryTransientOverlayViewController *passcodeEntryTransientOverlayViewController
 @property  SBFUserAuthenticationController *userAuthController
 @property  <SBFLockOutStatusProvider> *lockOutController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenService lockOutController]
  -[SBLockScreenService listener:didReceiveConnection:withContext:]
  -[SBLockScreenService setPreventPasscodeLock:]
  -[SBLockScreenService .cxx_destruct]
  -[SBLockScreenService setPreventSpuriousScreenUndim:]
  -[SBLockScreenService launchEmergencyDialerWithCompletion:]
  -[SBLockScreenService requestPasscodeUnlockUIWithOptions:withCompletion:]
  -[SBLockScreenService requestPasscodeCheckUIWithOptions:withCompletion:]
  -[SBLockScreenService passcodeEntryTransientOverlayViewController:authenticatePasscode:]
  -[SBLockScreenService passcodeEntryTransientOverlayViewControllerStatusText]
  -[SBLockScreenService _setPasscodeVisible:animated:]
  -[SBLockScreenService setLockOutController:]
  -[SBLockScreenService passcodeEntryTransientOverlayViewControllerRequestsDismissal:]
  -[SBLockScreenService passcodeEntryTransientOverlayViewControllerStatusSubtitleText]
  -[SBLockScreenService userAuthController]
  -[SBLockScreenService setPasscodeEntryTransientOverlayViewController:]
  -[SBLockScreenService passcodeEntryTransientOverlayViewController]
  -[SBLockScreenService setUserAuthController:]
  -[SBLockScreenService initWithLockScreenManager:workspace:authenticationAssertionProvider:remoteTransientOverlaySessionManager:]
  -[SBLockScreenService requestPasscodeUnlockUIForClient:options:description:withCompletion:]
  -[SBLockScreenService requestPasscodeCheckUIForClient:options:description:withCompletion:]


SBHideFolderContentsAlertItem : SBAlertItem
 @property  SBIcon *icon
 @property  NSString *iconLocation

  // instance methods
  -[SBHideFolderContentsAlertItem icon]
  -[SBHideFolderContentsAlertItem .cxx_destruct]
  -[SBHideFolderContentsAlertItem iconLocation]
  -[SBHideFolderContentsAlertItem shouldShowInLockScreen]
  -[SBHideFolderContentsAlertItem dismissOnLock]
  -[SBHideFolderContentsAlertItem configure:requirePasscodeForActions:]
  -[SBHideFolderContentsAlertItem forcesModalAlertAppearance]
  -[SBHideFolderContentsAlertItem didActivate]
  -[SBHideFolderContentsAlertItem initWithIcon:location:]


SBCornerFingerPanGestureSettings : PTSettings
 @property  unsigned long tuning

  // class methods
  +[SBCornerFingerPanGestureSettings settingsControllerModule]

  // instance methods
  -[SBCornerFingerPanGestureSettings tuning]
  -[SBCornerFingerPanGestureSettings setDefaultValues]
  -[SBCornerFingerPanGestureSettings setTuning:]
  -[SBCornerFingerPanGestureSettings angleDegreesAscendingLUT:]
  -[SBCornerFingerPanGestureSettings distanceMillimetersValues:]
  -[SBCornerFingerPanGestureSettings vectorCount:]
  -[SBCornerFingerPanGestureSettings maximumActiveDistance:]


UIGestureRecognizerTransformAnalyzerInfo : NSObject
 @property  {CGPoint=dd} translation
 @property  double translationMagnitude
 @property  {CGPoint=dd} absoluteTranslation
 @property  double scale
 @property  double rotation

  // instance methods
  -[UIGestureRecognizerTransformAnalyzerInfo absoluteTranslation]
  -[UIGestureRecognizerTransformAnalyzerInfo _reset]
  -[UIGestureRecognizerTransformAnalyzerInfo rotation]
  -[UIGestureRecognizerTransformAnalyzerInfo translation]
  -[UIGestureRecognizerTransformAnalyzerInfo _setScale:]
  -[UIGestureRecognizerTransformAnalyzerInfo scale]
  -[UIGestureRecognizerTransformAnalyzerInfo _setRotation:]
  -[UIGestureRecognizerTransformAnalyzerInfo _setTranslation:]
  -[UIGestureRecognizerTransformAnalyzerInfo _setTranslationMagnitude:]
  -[UIGestureRecognizerTransformAnalyzerInfo _setAbsoluteTranslation:]
  -[UIGestureRecognizerTransformAnalyzerInfo translationMagnitude]


UIGestureRecognizerTransformAnalyzer : NSObject
 @property  int dominantComponent
 @property  double translationWeight
 @property  double pinchingWeight
 @property  double rotationWeight
 @property  UIGestureRecognizerTransformAnalyzerInfo *smoothedInfo

  // instance methods
  -[UIGestureRecognizerTransformAnalyzer analyzeTouches:]
  -[UIGestureRecognizerTransformAnalyzer setTranslationWeight:]
  -[UIGestureRecognizerTransformAnalyzer .cxx_destruct]
  -[UIGestureRecognizerTransformAnalyzer pinchingWeight]
  -[UIGestureRecognizerTransformAnalyzer init]
  -[UIGestureRecognizerTransformAnalyzer reset]
  -[UIGestureRecognizerTransformAnalyzer setRotationWeight:]
  -[UIGestureRecognizerTransformAnalyzer translationWeight]
  -[UIGestureRecognizerTransformAnalyzer rotationWeight]
  -[UIGestureRecognizerTransformAnalyzer dominantComponent]
  -[UIGestureRecognizerTransformAnalyzer setPinchingWeight:]
  -[UIGestureRecognizerTransformAnalyzer smoothedInfo]


SBAppClipPlaceholderLayoutElementViewController : SBLayoutElementViewController <SBSceneViewStatusBarAssertionObserver, SBApplicationSceneStatusBarDescriberProviding, SBApplicationSceneStatusBarDescribing, SBSceneLayoutMedusaStatusBarAssertionProviding, SBMainDisplaySceneLayoutElementViewControlling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBApplicationSceneStatusBarDescribing> *statusBarDescriber
 @property  <SBDeviceApplicationSceneStatusBarStateObserver> *statusBarDelegate
 @property  long long statusBarStyle
 @property  BOOL statusBarHidden
 @property  double statusBarAlpha
 @property  long long statusBarOrientation
 @property  unsigned long statusBarStyleOverridesToSuppress
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} statusBarAvoidanceFrame
 @property  BOOL sceneWantsDeviceOrientationEventsEnabled
 @property  NSString *statusBarSceneIdentifier
 @property  _UIStatusBarData *overlayStatusBarData
 @property  SBDeviceApplicationSceneStatusBarBreadcrumbProvider *breadcrumbProvider
 @property  SBDeviceApplicationSceneHandle *classicApplicationSceneHandleIfExists
 @property  FBScene *sceneToHandleStatusBarTapIfExists

  // instance methods
  -[SBAppClipPlaceholderLayoutElementViewController _cleanup]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAvoidanceFrame]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarOrientation]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAlpha]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarStyle]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarDelegate]
  -[SBAppClipPlaceholderLayoutElementViewController .cxx_destruct]
  -[SBAppClipPlaceholderLayoutElementViewController viewDidLoad]
  -[SBAppClipPlaceholderLayoutElementViewController sceneToHandleStatusBarTapIfExists]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAssertionDidUpdate:]
  -[SBAppClipPlaceholderLayoutElementViewController setShadowOffset:]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarSceneIdentifier]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAssertionWithStatusBarHidden:atLevel:]
  -[SBAppClipPlaceholderLayoutElementViewController SB_conformsToSceneLayoutStatusBarAssertionProviding]
  -[SBAppClipPlaceholderLayoutElementViewController prepareForReuse]
  -[SBAppClipPlaceholderLayoutElementViewController viewWillDisappear:]
  -[SBAppClipPlaceholderLayoutElementViewController overlayStatusBarData]
  -[SBAppClipPlaceholderLayoutElementViewController viewDidLayoutSubviews]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarDescriber]
  -[SBAppClipPlaceholderLayoutElementViewController viewWillAppear:]
  -[SBAppClipPlaceholderLayoutElementViewController setStatusBarDelegate:]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarStyleOverridesToSuppress]
  -[SBAppClipPlaceholderLayoutElementViewController classicApplicationSceneHandleIfExists]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarHidden]
  -[SBAppClipPlaceholderLayoutElementViewController sceneWantsDeviceOrientationEventsEnabled]
  -[SBAppClipPlaceholderLayoutElementViewController invalidate]
  -[SBAppClipPlaceholderLayoutElementViewController setCornerRadiusConfiguration:]
  -[SBAppClipPlaceholderLayoutElementViewController setShadowOpacity:]
  -[SBAppClipPlaceholderLayoutElementViewController _installedApplicationsDidChange:]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAssertionDidInvalidate:]
  -[SBAppClipPlaceholderLayoutElementViewController breadcrumbProvider]
  -[SBAppClipPlaceholderLayoutElementViewController SB_conformsToSceneLayoutMedusaStatusBarAssertionProviding]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarStyleForPartWithIdentifier:]
  -[SBAppClipPlaceholderLayoutElementViewController SB_conformsToMainDisplaySceneLayoutElementViewControlling]
  -[SBAppClipPlaceholderLayoutElementViewController setMaskDisplayCorners:forReason:]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAssertionWithStatusBarHidden:nubViewHidden:atLevel:]
  -[SBAppClipPlaceholderLayoutElementViewController SB_conformsToSBApplicationSceneStatusBarDescribing]
  -[SBAppClipPlaceholderLayoutElementViewController _beginPollingUpdateStillAvailable]
  -[SBAppClipPlaceholderLayoutElementViewController _launchApplication:]
  -[SBAppClipPlaceholderLayoutElementViewController configureWithWorkspaceEntity:forLayoutElement:layoutState:referenceFrame:]
  -[SBAppClipPlaceholderLayoutElementViewController _newDisplayLayoutElementForEntity:]
  -[SBAppClipPlaceholderLayoutElementViewController supportedContentInterfaceOrientations]
  -[SBAppClipPlaceholderLayoutElementViewController _stopObservingApplicationInstalls]
  -[SBAppClipPlaceholderLayoutElementViewController _beginObservingApplicationInstalls]
  -[SBAppClipPlaceholderLayoutElementViewController _statusBarAssertionDidUpdate]
  -[SBAppClipPlaceholderLayoutElementViewController _aggregateStatusBarOverrideSettings]
  -[SBAppClipPlaceholderLayoutElementViewController SB_conformsToSBApplicationSceneStatusBarDescriberProviding]


SBFakeiTunesRestoreTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFakeiTunesRestoreTestRecipe load]

  // instance methods
  -[SBFakeiTunesRestoreTestRecipe title]
  -[SBFakeiTunesRestoreTestRecipe handleVolumeIncrease]
  -[SBFakeiTunesRestoreTestRecipe handleVolumeDecrease]


SBVPPAppRequiresHealingAlertItem : SBAlertItem
  // instance methods
  -[SBVPPAppRequiresHealingAlertItem initWithApplication:]
  -[SBVPPAppRequiresHealingAlertItem .cxx_destruct]
  -[SBVPPAppRequiresHealingAlertItem shouldShowInLockScreen]
  -[SBVPPAppRequiresHealingAlertItem dismissOnLock]
  -[SBVPPAppRequiresHealingAlertItem configure:requirePasscodeForActions:]


SBProactiveHomeScreenSuggestionProvider : NSObject <ATXHomeScreenSuggestionClientObserver>
 @property  SBHIconManager *iconManager
 @property  ATXHomeScreenPrediction *currentPrediction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProactiveHomeScreenSuggestionProvider .cxx_destruct]
  -[SBProactiveHomeScreenSuggestionProvider iconModel]
  -[SBProactiveHomeScreenSuggestionProvider iconManager]
  -[SBProactiveHomeScreenSuggestionProvider rootFolder]
  -[SBProactiveHomeScreenSuggestionProvider addObserver:]
  -[SBProactiveHomeScreenSuggestionProvider _makeDataSourceForAtxWidget:]
  -[SBProactiveHomeScreenSuggestionProvider currentPrediction]
  -[SBProactiveHomeScreenSuggestionProvider _supportedElementClasses]
  -[SBProactiveHomeScreenSuggestionProvider processUpdatedPredictions:]
  -[SBProactiveHomeScreenSuggestionProvider suggestionClientDidRefreshSuggestions:]
  -[SBProactiveHomeScreenSuggestionProvider _iconDataSourceInIcon:withUniqueIdentifier:extensionBundleIdentifier:widgetKind:suggestionSource:]
  -[SBProactiveHomeScreenSuggestionProvider removeObserver:]
  -[SBProactiveHomeScreenSuggestionProvider updatePredictions]
  -[SBProactiveHomeScreenSuggestionProvider initWithIconManager:]
  -[SBProactiveHomeScreenSuggestionProvider setCurrentPrediction:]


SBMainSwitcherViewController : UIViewController <SBSwitcherContentViewControllerDataSource, SBSwitcherContentViewControllerDelegate, SBSwitcherDemoFilteringControllerObserver, PTSettingsKeyObserver, SBLayoutStateTransitionObserver, SBLayoutStateTransitionSceneEntityFrameProvider, SBFluidSwitcherGestureManagerDelegate, SBWorkspaceKeyboardFocusControllerObserver, SBAppSwitcherModelDelegate, SBMainDisplayWorkspaceAppInteractionEventSourceObserving, SBFTraitsParticipantDelegate, SBSceneHandleObserver, SBAttentionAwarenessClientDelegate, SBButtonEventsHandler>
 @property  NSHashTable *_hideStatusBarAssertions
 @property  <BSInvalidatable> *suspendWallpaperAnimationAssertion
 @property  BOOL canInterruptActiveTransition
 @property  BSAnimationSettings *defaultTransitionAnimationSettings
 @property  SBAppLayout *activeTransientOverlayPresentedAppLayout
 @property  BOOL hasTransientOverlayAppLayouts
 @property  UIViewController<SBSwitcherContentViewControlling> *contentViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainSwitcherViewController sharedInstance]
  +[SBMainSwitcherViewController sharedInstanceIfExists]
  +[SBMainSwitcherViewController _layoutElementExistsInRecencyModel:]
  +[SBMainSwitcherViewController _layoutState:hasMeaningfullyChangedFromOldLayoutState:]
  +[SBMainSwitcherViewController _remainingMainElementsAfterRemovingEntities:fromMainElements:]
  +[SBMainSwitcherViewController _applyWindowReplacementPolicyWithRemainingMainElements:layoutStateBeforeRemoval:lastDifferentLayoutState:entitiesWithRemovalContexts:]

  // instance methods
  -[SBMainSwitcherViewController sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBMainSwitcherViewController switcherSupportedInterfaceOrientations]
  -[SBMainSwitcherViewController _leadingStatusBarStyleRequest]
  -[SBMainSwitcherViewController _applicationDidExit:]
  -[SBMainSwitcherViewController applicationSceneSettingsFrameForInterfaceOrientation:centerConfiguration:]
  -[SBMainSwitcherViewController homeScreenInterfaceOrientation]
  -[SBMainSwitcherViewController setSuspendWallpaperAnimationAssertion:]
  -[SBMainSwitcherViewController dismissMedusaEducationBanner]
  -[SBMainSwitcherViewController suspendWallpaperAnimationAssertion]
  -[SBMainSwitcherViewController scaleForDownscaledSnapshotGenerationForSceneHandle:]
  -[SBMainSwitcherViewController _updateKeyboardHomeAffordanceAssertion]
  -[SBMainSwitcherViewController canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[SBMainSwitcherViewController _overrideInterfaceOrientationMechanics]
  -[SBMainSwitcherViewController isAnySwitcherVisible]
  -[SBMainSwitcherViewController _keyboardIsSuppressedForMedusaKeyboardScene]
  -[SBMainSwitcherViewController _shouldTakeKeyboardHomeAffordanceAssertion]
  -[SBMainSwitcherViewController _medusaKeyboardSceneHandle]
  -[SBMainSwitcherViewController _nonHiddenAppLayoutsForDisplayItem:]
  -[SBMainSwitcherViewController _trailingStatusBarStyleRequest]
  -[SBMainSwitcherViewController _lockKeyboardFocus]
  -[SBMainSwitcherViewController _updateDisplayLayoutElementForLayoutState:]
  -[SBMainSwitcherViewController _deviceApplicationSceneHandleForDisplayItem:]
  -[SBMainSwitcherViewController switcherContentControllerIsKeyboardHomeAffordanceAssertionCurrentlyBeingTaken:]
  -[SBMainSwitcherViewController switcherContentController:requestNewWindowForBundleIdentifier:]
  -[SBMainSwitcherViewController shouldAcceleratedHomeButtonPressBegin]
  -[SBMainSwitcherViewController switcherContentController:setContentOrientation:]
  -[SBMainSwitcherViewController activeTransientOverlayPresentedAppLayoutForSwitcherContentController:]
  -[SBMainSwitcherViewController _warmAppInfoForAppsInList]
  -[SBMainSwitcherViewController _continuityAppSuggestionChanged:]
  -[SBMainSwitcherViewController _focusNewOverlayApplicationTransitioningFromLayoutState:toLayoutState:]
  -[SBMainSwitcherViewController _lockOrientationForSwitcherWithLayoutState:]
  -[SBMainSwitcherViewController _evaluateAsynchronousRenderingEnablement]
  -[SBMainSwitcherViewController defaultTransitionAnimationSettings]
  -[SBMainSwitcherViewController _currentFloatingAppLayout]
  -[SBMainSwitcherViewController appSwitcherModel:didRemoveAppLayoutForFallingOffList:]
  -[SBMainSwitcherViewController handleVolumeUpButtonPress]
  -[SBMainSwitcherViewController _hasAppLayoutContainingDisplayItem:]
  -[SBMainSwitcherViewController participantAssociatedWindows:]
  -[SBMainSwitcherViewController _coordinateSpaceForInterfaceOrientation:]
  -[SBMainSwitcherViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMainSwitcherViewController handleHomeButtonDoublePress]
  -[SBMainSwitcherViewController animationControllerForTransitionRequest:]
  -[SBMainSwitcherViewController switcherContentController:transitionEventForLayoutState:identifier:phase:animated:]
  -[SBMainSwitcherViewController switcherContentController:setWallpaperScale:withAnimationMode:completion:]
  -[SBMainSwitcherViewController _appLayoutFromPrimaryLayoutItem:sideLayoutElement:configuration:]
  -[SBMainSwitcherViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMainSwitcherViewController _keyboardWillHide:]
  -[SBMainSwitcherViewController switcherContentController:visibleAppLayoutsForBundleIdentifier:]
  -[SBMainSwitcherViewController _keyboardWillShow:]
  -[SBMainSwitcherViewController addCenterRoleAppLayoutForDisplayItem:completion:]
  -[SBMainSwitcherViewController handleHomeButtonPress]
  -[SBMainSwitcherViewController sbActiveInterfaceOrientation]
  -[SBMainSwitcherViewController handleLockButtonPress]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:clickReceivedForHomeGrabberView:]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenScale:withAnimationMode:completion:]
  -[SBMainSwitcherViewController handleVolumeDownButtonPress]
  -[SBMainSwitcherViewController _supportsFloatingApplication]
  -[SBMainSwitcherViewController toggleMainSwitcherNoninteractivelyWithSource:animated:]
  -[SBMainSwitcherViewController _dismissSwitcherValidatorToAppLayout:dismissFloatingSwitcher:withEventLabel:animated:]
  -[SBMainSwitcherViewController handleHeadsetButtonPress:]
  -[SBMainSwitcherViewController _rebuildAppListCache]
  -[SBMainSwitcherViewController hasAppLayoutForTransientOverlayViewController:]
  -[SBMainSwitcherViewController handleHomeButtonLongPress]
  -[SBMainSwitcherViewController _updateContentViewInterfaceOrientation:]
  -[SBMainSwitcherViewController _activateNeighboringAppLayoutRequiringActiveAppLayout:appLayoutEnvironment:inForwardDirection:eventLabel:]
  -[SBMainSwitcherViewController handleVoiceCommandButtonPress]
  -[SBMainSwitcherViewController _acquireAssertion:]
  -[SBMainSwitcherViewController .cxx_destruct]
  -[SBMainSwitcherViewController isMainSwitcherVisible]
  -[SBMainSwitcherViewController minimumHomeScreenScale]
  -[SBMainSwitcherViewController _removeAcquiredTransientOverlayViewController:]
  -[SBMainSwitcherViewController canInterruptActiveTransition]
  -[SBMainSwitcherViewController _overrideWindowActiveInterfaceOrientation]
  -[SBMainSwitcherViewController _cancelPIPForDisplayItem:]
  -[SBMainSwitcherViewController switcherContentController:shouldMorphToPIPForTransitionContext:]
  -[SBMainSwitcherViewController switcherContentController:shouldMorphFromPIPForTransitionContext:]
  -[SBMainSwitcherViewController requestInAppStatusBarHiddenAssertionForReason:animated:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:didUpdateGesture:]
  -[SBMainSwitcherViewController viewDidLoad]
  -[SBMainSwitcherViewController matchingIconViewForIconView:]
  -[SBMainSwitcherViewController switcherContentController:transformForCardUnderSheetForBoundsSize:]
  -[SBMainSwitcherViewController _shouldMorphToPIPForTransitionContext:]
  -[SBMainSwitcherViewController noteKeyboardIsNotForMedusa]
  -[SBMainSwitcherViewController switcherContentController:layoutStateTransitionDidEndWithTransitionContext:]
  -[SBMainSwitcherViewController _currentUnlockedEnvironmentMode]
  -[SBMainSwitcherViewController switcherContentController:shouldResignActiveForStartOfTransition:]
  -[SBMainSwitcherViewController _performSceneDestructionForModelRemovalResults:]
  -[SBMainSwitcherViewController viewControllerForTransientOverlayAppLayout:]
  -[SBMainSwitcherViewController _performSwitcherDropWithContext:]
  -[SBMainSwitcherViewController _hideStatusBarAssertions]
  -[SBMainSwitcherViewController _shouldMorphFromPIPForTransitionContext:]
  -[SBMainSwitcherViewController _handleFocusedIconSwitcherShortcutAction:bundleIdentifier:]
  -[SBMainSwitcherViewController switcherContentController:setPointerInteractionsEnabled:]
  -[SBMainSwitcherViewController deleteAppLayoutForDisplayItem:]
  -[SBMainSwitcherViewController dismissMainSwitcherNoninteractivelyAnimated:]
  -[SBMainSwitcherViewController switcherContentController:performTransitionWithRequest:gestureInitiated:]
  -[SBMainSwitcherViewController eventSource:userTouchedApplication:]
  -[SBMainSwitcherViewController _updateBestAppSuggestion]
  -[SBMainSwitcherViewController shouldAutorotate]
  -[SBMainSwitcherViewController _switcherServiceRemoved:]
  -[SBMainSwitcherViewController _setHideStatusBarAssertions:]
  -[SBMainSwitcherViewController _removeAppLayout:forReason:]
  -[SBMainSwitcherViewController _configureRequest:forSwitcherTransitionRequest:withEventLabel:]
  -[SBMainSwitcherViewController switcherContentControllerIsFloatingApplicationSupported:]
  -[SBMainSwitcherViewController _addAppLayoutToFront:]
  -[SBMainSwitcherViewController _releaseSwitcherOrientationLock]
  -[SBMainSwitcherViewController _insertCardForDisplayIdentifier:atIndex:]
  -[SBMainSwitcherViewController _centerWindowSheetMetricsCache]
  -[SBMainSwitcherViewController updateWindowVisibilityForSwitcherContentController:]
  -[SBMainSwitcherViewController recentAppLayouts]
  -[SBMainSwitcherViewController isSlideOverSwitcherVisible]
  -[SBMainSwitcherViewController _appLayoutContainingDisplayItem:]
  -[SBMainSwitcherViewController switcherContentController:setCacheAsynchronousRenderingSurfaces:]
  -[SBMainSwitcherViewController _setContainerStatusBarHidden:animationDuration:usingAssertion:reason:]
  -[SBMainSwitcherViewController frameForCenterItemWithConfiguration:interfaceOrientation:]
  -[SBMainSwitcherViewController _releaseKeyboardFocus]
  -[SBMainSwitcherViewController hasTransientOverlayAppLayouts]
  -[SBMainSwitcherViewController _setAsynchronousRenderingEnabled:withMinificationFilter:forLayerTarget:presentationManager:]
  -[SBMainSwitcherViewController appLayoutsForSwitcherContentController:]
  -[SBMainSwitcherViewController _toggleSwitcherTransitionValidatorAnimated:]
  -[SBMainSwitcherViewController switcherContentController:supportsKillingOfAppLayout:]
  -[SBMainSwitcherViewController client:attentionLostTimeoutDidExpire:forConfigurationGeneration:withAssociatedObject:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:didPlatterizeWindowDragWithSceneIdentifier:]
  -[SBMainSwitcherViewController _transientOverlayPesentationManager]
  -[SBMainSwitcherViewController noteKeyboardIsForMedusaWithOwningScene:]
  -[SBMainSwitcherViewController _switcherModelChanged:]
  -[SBMainSwitcherViewController addAppLayoutForTransientOverlayViewController:]
  -[SBMainSwitcherViewController performKeyboardShortcutAction:forBundleIdentifier:]
  -[SBMainSwitcherViewController activeTransientOverlayPresentedAppLayout]
  -[SBMainSwitcherViewController appLayoutForWorkspaceTransientOverlay:]
  -[SBMainSwitcherViewController createWorkspaceTransientOverlayForAppLayout:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:didEndGesture:]
  -[SBMainSwitcherViewController windowsToExcludeForCrossfadeSnapshotForSwitcherContentController:]
  -[SBMainSwitcherViewController updateUserInteractionEnabledForSwitcherContentController:]
  -[SBMainSwitcherViewController applicationSceneSettingsFrameForInterfaceOrientation:floatingConfiguration:]
  -[SBMainSwitcherViewController contentViewController]
  -[SBMainSwitcherViewController hasAppLayoutForDisplayItem:]
  -[SBMainSwitcherViewController dismissAllSwitchersNoninteractivelyAnimated:]
  -[SBMainSwitcherViewController switcherContentController:bringAppLayoutToFront:]
  -[SBMainSwitcherViewController switcherInterfaceOrientationForContentController:]
  -[SBMainSwitcherViewController _currentLayoutState]
  -[SBMainSwitcherViewController handleHomeButtonSinglePressUp]
  -[SBMainSwitcherViewController _persistenceIdentifiersForBundleIdentifier:onlyIncludeLaunchableIdentifiers:]
  -[SBMainSwitcherViewController shouldPerformPreTransitionInsertionOfAppLayout:forTransitionWithContext:]
  -[SBMainSwitcherViewController viewWillAppear:]
  -[SBMainSwitcherViewController isInAnyPeekState]
  -[SBMainSwitcherViewController _reqlinquishAssertion:]
  -[SBMainSwitcherViewController _debugSwitcherPostModernRotationSupportedSupportedInterfaceOrientations]
  -[SBMainSwitcherViewController cancelActiveGestureForSwitcherContentController:]
  -[SBMainSwitcherViewController _isBestAppSuggestionEligibleForSwitcher:]
  -[SBMainSwitcherViewController _setStatusBarPartsHidden:animated:]
  -[SBMainSwitcherViewController _loadContentViewControllerIfNecessary]
  -[SBMainSwitcherViewController _shouldAddAppLayoutToFront:]
  -[SBMainSwitcherViewController _shouldPrioritizeSortOrderForAppLayout:]
  -[SBMainSwitcherViewController _addAppLayoutToFront:removeAppLayout:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManagerSupportsFloatingApplication:]
  -[SBMainSwitcherViewController frameForItemWithRole:inMainAppLayout:interfaceOrientation:]
  -[SBMainSwitcherViewController _activateSwitcherValidatorWithEventLabel:animated:]
  -[SBMainSwitcherViewController sceneEntityFrameForWorkspaceEntity:inLayoutState:]
  -[SBMainSwitcherViewController _displayItemForEntity:]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenAlpha:withAnimationMode:completion:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:tapReceivedForGrabberTongueAtEdge:]
  -[SBMainSwitcherViewController _statusBarAvoidanceFrameForLayoutRole:]
  -[SBMainSwitcherViewController _enumerateTransientOverlayViewControllersUsingBlock:]
  -[SBMainSwitcherViewController _hasAppLayoutBeenUserKilledWithinThresholdToCreateNewScene:]
  -[SBMainSwitcherViewController _insertAppLayouts:atIndexes:modelMutationBlock:completion:]
  -[SBMainSwitcherViewController activateMainSwitcherNoninteractivelyWithSource:animated:]
  -[SBMainSwitcherViewController _switcherServiceAdded:]
  -[SBMainSwitcherViewController switcherContentController:deletedDisplayItem:inAppLayout:forReason:]
  -[SBMainSwitcherViewController eventSource:userDeletedWebBookmark:]
  -[SBMainSwitcherViewController switcherContentController:hiddenAppLayoutsForBundleIdentifier:]
  -[SBMainSwitcherViewController didChangeSettingsForParticipant:context:]
  -[SBMainSwitcherViewController settings:changedValueForKey:]
  -[SBMainSwitcherViewController mainSwitcherWindow]
  -[SBMainSwitcherViewController switcherDemoFilteringControllerDidChangeHiddenApplicationBundleIDs:]
  -[SBMainSwitcherViewController _init]
  -[SBMainSwitcherViewController _addAcquiredTransientOverlayViewController:forAppLayout:]
  -[SBMainSwitcherViewController _removeDisplayItem:forReason:preferredAppLayoutForRemovalAnimationIfAny:]
  -[SBMainSwitcherViewController _noteSwitcherDropAnimationCompletedWithContext:]
  -[SBMainSwitcherViewController _currentAppLayout]
  -[SBMainSwitcherViewController _isPerformingModelTransitionForReplacementAppLayout:]
  -[SBMainSwitcherViewController _deleteAppLayoutsMatchingBundleIdentifier:]
  -[SBMainSwitcherViewController isInAppStatusBarRequestedHiddenForSwitcherContentController:]
  -[SBMainSwitcherViewController _cacheAppList]
  -[SBMainSwitcherViewController _presentMedusaEducationBanner]
  -[SBMainSwitcherViewController switcherContentController:transitionEventForContext:identifier:phase:animated:]
  -[SBMainSwitcherViewController _removeCardForDisplayIdentifier:]
  -[SBMainSwitcherViewController _dismissSwitcherNoninteractivelyToAppLayout:dismissFloatingSwitcher:animated:]
  -[SBMainSwitcherViewController dealloc]
  -[SBMainSwitcherViewController homeGestureBottomEdgeRecognizer]
  -[SBMainSwitcherViewController switcherContentController:setWallpaperStyle:]
  -[SBMainSwitcherViewController switcherContentController:displayItemSupportsCenterRole:]
  -[SBMainSwitcherViewController _removeDisplayItem:forReason:]
  -[SBMainSwitcherViewController removeAppLayoutTransientOverlayViewController:]
  -[SBMainSwitcherViewController _switcherModelRemovalResultsForRequest:forReason:]
  -[SBMainSwitcherViewController programmaticSwitchAppGestureMoveToLeft]
  -[SBMainSwitcherViewController _statusBarEdgeInsets]
  -[SBMainSwitcherViewController _noteUIWillLock]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:willEndDraggingWindowWithSceneIdentifier:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:didBeginGesture:]
  -[SBMainSwitcherViewController _doUglySiriActivationThingsIfNecessary:]
  -[SBMainSwitcherViewController _setContentOrientation:forContentViewController:]
  -[SBMainSwitcherViewController _entityForDisplayItem:]
  -[SBMainSwitcherViewController _destroyAppListCache]
  -[SBMainSwitcherViewController updatePreferenceForParticipant:updater:]
  -[SBMainSwitcherViewController removeAppLayoutForDisplayItem:shouldDestroyScene:]
  -[SBMainSwitcherViewController keyboardFocusController:externalSceneDidAcquireFocus:]
  -[SBMainSwitcherViewController programmaticSwitchAppGestureMoveToRight]
  -[SBMainSwitcherViewController clientDidResetForUserAttention:]
  -[SBMainSwitcherViewController _recentAppLayoutsController]
  -[SBMainSwitcherViewController _isAcquiredTransientOverlayViewController:]
  -[SBMainSwitcherViewController _currentVisibleFloatingItem]
  -[SBMainSwitcherViewController failMultitaskingGesturesForReason:]
  -[SBMainSwitcherViewController supportedInterfaceOrientations]
  -[SBMainSwitcherViewController _appForDisplayItem:]
  -[SBMainSwitcherViewController cancelAnyPeekToHomescreenFromSource:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:didBeginDraggingWindowWithSceneIdentifier:]
  -[SBMainSwitcherViewController transitionEventForLayoutState:identifier:phase:animated:]
  -[SBMainSwitcherViewController _purgeHiddenAppLayoutsForUILock]
  -[SBMainSwitcherViewController addAppLayoutForDisplayItem:completion:]
  -[SBMainSwitcherViewController switcherContentController:activatedBestAppSuggestion:]
  -[SBMainSwitcherViewController switcherContentController:supportsTitleItemsForAppLayout:]
  -[SBMainSwitcherViewController switcherContentController:reopenHiddenAppLayoutsWithBundleIdentifier:]
  -[SBMainSwitcherViewController transitionEventForContext:identifier:phase:animated:]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenBackdropBlurType:]
  -[SBMainSwitcherViewController isInAppStatusBarHidden]
  -[SBMainSwitcherViewController switcherContentController:setContainerStatusBarHidden:partsHidden:animationDuration:]
  -[SBMainSwitcherViewController frameForFloatingAppLayoutInInterfaceOrientation:floatingConfiguration:]
  -[SBMainSwitcherViewController _modelRemovalRequestForDisplayItemResolutionResults:]
  -[SBMainSwitcherViewController _updateAssertion:]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenDimmingAlpha:withAnimationMode:completion:]
  -[SBMainSwitcherViewController _resultsForDisplayItemRemovalResolutionRequest:preferredAppLayoutForRemovalAnimationIfAny:]
  -[SBMainSwitcherViewController switcherContentController:visibleDisplayItemsForBundleIdentifier:]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenBackdropBlurProgress:withAnimationMode:completion:]
  -[SBMainSwitcherViewController _insertAppLayout:atIndex:modelMutationBlock:completion:]
  -[SBMainSwitcherViewController handleApplicationSceneEntityDestructionIntent:forEntities:]
  -[SBMainSwitcherViewController acquireAllowHiddenAppAssertionForBundleIdentifier:reason:]


_SBWindowReplacementResult : NSObject
 @property  SBLayoutElement *primaryElement
 @property  SBLayoutElement *sideElement
 @property  SBWorkspaceEntity *activatingEntity
 @property  long long requestedUnlockedEnvironmentMode

  // instance methods
  -[_SBWindowReplacementResult setRequestedUnlockedEnvironmentMode:]
  -[_SBWindowReplacementResult .cxx_destruct]
  -[_SBWindowReplacementResult activatingEntity]
  -[_SBWindowReplacementResult setActivatingEntity:]
  -[_SBWindowReplacementResult requestedUnlockedEnvironmentMode]
  -[_SBWindowReplacementResult setPrimaryElement:]
  -[_SBWindowReplacementResult setSideElement:]
  -[_SBWindowReplacementResult sideElement]
  -[_SBWindowReplacementResult primaryElement]


SBSwipeToKillSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  long long layoutRole
 @property  SBAppLayout *appLayout
 @property  double progress
 @property  {CGPoint=dd} translation
 @property  BOOL dragging
 @property  double decelerationTargetProgress

  // instance methods
  -[SBSwipeToKillSwitcherModifierEvent appLayout]
  -[SBSwipeToKillSwitcherModifierEvent setDragging:]
  -[SBSwipeToKillSwitcherModifierEvent layoutRole]
  -[SBSwipeToKillSwitcherModifierEvent .cxx_destruct]
  -[SBSwipeToKillSwitcherModifierEvent translation]
  -[SBSwipeToKillSwitcherModifierEvent progress]
  -[SBSwipeToKillSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBSwipeToKillSwitcherModifierEvent isDragging]
  -[SBSwipeToKillSwitcherModifierEvent type]
  -[SBSwipeToKillSwitcherModifierEvent setProgress:]
  -[SBSwipeToKillSwitcherModifierEvent copyWithZone:]
  -[SBSwipeToKillSwitcherModifierEvent initWithLayoutRole:inAppLayout:progress:translation:]
  -[SBSwipeToKillSwitcherModifierEvent setDecelerationTargetProgress:]
  -[SBSwipeToKillSwitcherModifierEvent setTranslation:]
  -[SBSwipeToKillSwitcherModifierEvent decelerationTargetProgress]


SBIconRelayoutRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIconRelayoutRecipe load]

  // instance methods
  -[SBIconRelayoutRecipe title]
  -[SBIconRelayoutRecipe handleVolumeIncrease]
  -[SBIconRelayoutRecipe handleVolumeDecrease]


SBInCallPresentationSceneUpdateContext : NSObject
 @property  NSString *analyticsSource
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceFrame
 @property  long long executionTarget
 @property  @? completionHandler
 @property  @? postSceneUpdateHandler
 @property  @? transitionRequestBuilderBlock
 @property  @? validatorHandler

  // instance methods
  -[SBInCallPresentationSceneUpdateContext referenceFrame]
  -[SBInCallPresentationSceneUpdateContext .cxx_destruct]
  -[SBInCallPresentationSceneUpdateContext setCompletionHandler:]
  -[SBInCallPresentationSceneUpdateContext setReferenceFrame:]
  -[SBInCallPresentationSceneUpdateContext completionHandler]
  -[SBInCallPresentationSceneUpdateContext analyticsSource]
  -[SBInCallPresentationSceneUpdateContext setAnalyticsSource:]
  -[SBInCallPresentationSceneUpdateContext executionTarget]
  -[SBInCallPresentationSceneUpdateContext initWithReferenceFrame:analyticsSource:transitionRequestBuilderBlock:]
  -[SBInCallPresentationSceneUpdateContext setPostSceneUpdateHandler:]
  -[SBInCallPresentationSceneUpdateContext setExecutionTarget:]
  -[SBInCallPresentationSceneUpdateContext setValidatorHandler:]
  -[SBInCallPresentationSceneUpdateContext postSceneUpdateHandler]
  -[SBInCallPresentationSceneUpdateContext transitionRequestBuilderBlock]
  -[SBInCallPresentationSceneUpdateContext validatorHandler]
  -[SBInCallPresentationSceneUpdateContext setTransitionRequestBuilderBlock:]


SBInteractiveScreenshotCommitWorkspaceTransaction : SBMainWorkspaceTransaction <SBTransientOverlayPresentWorkspaceTransactionObserver>
 @property  NSUUID *gestureSessionID
 @property  BOOL hasFinishedFlashAnimation
 @property  BOOL hasFinishedSettlingAnimation
 @property  SBTransientOverlayViewController *screenshotMarkupTransientOverlayViewController
 @property  <SBInteractiveScreenshotCommitWorkspaceTransactionDelegate> *interactiveScreenshotCommitDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInteractiveScreenshotCommitWorkspaceTransaction _begin]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction _updateState]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction .cxx_destruct]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction transientOverlayPresentWorkspaceTransactionDidPerformPresentation:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction _handleWatchdogTimeout]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction initWithTransitionRequest:gestureSessionID:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction setHasFinishedFlashAnimation:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction setHasFinishedSettlingAnimation:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction setScreenshotMarkupTransientOverlayViewController:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction gestureSessionID]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction hasFinishedFlashAnimation]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction hasFinishedSettlingAnimation]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction screenshotMarkupTransientOverlayViewController]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction interactiveScreenshotCommitDelegate]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction setInteractiveScreenshotCommitDelegate:]


SBIdleTimerGlobalCoordinator : NSObject <SBIdleTimerObserving, SBIdleTimerGlobalStateMonitorObserving, SBIdleTimerCoordinating>
 @property  <SBIdleTimer> *idleTimer
 @property  <SBIdleTimerProviding> *idleTimerProvider
 @property  NSMutableDictionary *idleTimerDisableAssertions
 @property  <SBIdleTimerGlobalCoordinatorDelegate> *delegate
 @property  BOOL idleTimerDisabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerGlobalCoordinator sharedInstance]
  +[SBIdleTimerGlobalCoordinator sharedInstanceIfExists]
  +[SBIdleTimerGlobalCoordinator _sharedInstanceCreateIfNeeded:]

  // instance methods
  -[SBIdleTimerGlobalCoordinator isIdleTimerDisabled]
  -[SBIdleTimerGlobalCoordinator _idleTimerPrefsChanged]
  -[SBIdleTimerGlobalCoordinator idleTimerProvider:didProposeBehavior:forReason:]
  -[SBIdleTimerGlobalCoordinator idleTimerDidRefresh:]
  -[SBIdleTimerGlobalCoordinator _updateIdleTimerForReason:]
  -[SBIdleTimerGlobalCoordinator acquireIdleTimerDisableAssertionForReason:]
  -[SBIdleTimerGlobalCoordinator _registerInternalDisableAssertionsTestRecipe]
  -[SBIdleTimerGlobalCoordinator _setIdleTimerDisableAssertions:]
  -[SBIdleTimerGlobalCoordinator resetIdleTimer]
  -[SBIdleTimerGlobalCoordinator _stateCaptureDescription]
  -[SBIdleTimerGlobalCoordinator .cxx_destruct]
  -[SBIdleTimerGlobalCoordinator setDelegate:]
  -[SBIdleTimerGlobalCoordinator _updateGlobalStateDisableAssertions]
  -[SBIdleTimerGlobalCoordinator idleTimerGlobalStateMonitor:changedForReason:]
  -[SBIdleTimerGlobalCoordinator init]
  -[SBIdleTimerGlobalCoordinator idleTimerDidResetForUserAttention:]
  -[SBIdleTimerGlobalCoordinator _addStateCaptureHandlers]
  -[SBIdleTimerGlobalCoordinator _unregisterTestRecipes]
  -[SBIdleTimerGlobalCoordinator _setIdleTimerProvider:]
  -[SBIdleTimerGlobalCoordinator _updateIdleTimerForProvider:behavior:descriptor:forReason:]
  -[SBIdleTimerGlobalCoordinator idleTimer]
  -[SBIdleTimerGlobalCoordinator _registerTestRecipes]
  -[SBIdleTimerGlobalCoordinator _logEffectiveLockTimeout]
  -[SBIdleTimerGlobalCoordinator _areIdleTimerDisableAssertionsPrevented]
  -[SBIdleTimerGlobalCoordinator layoutMonitor:didUpdateDisplayLayout:withContext:]
  -[SBIdleTimerGlobalCoordinator delegate]
  -[SBIdleTimerGlobalCoordinator _idleTimerDisableAssertions]
  -[SBIdleTimerGlobalCoordinator start]
  -[SBIdleTimerGlobalCoordinator resetIdleTimerIfNonConsecutiveSource:forReason:]
  -[SBIdleTimerGlobalCoordinator _applyActiveIdleTimerDescriptorForReason:]
  -[SBIdleTimerGlobalCoordinator _registerClientDisableAssertionsTestRecipe]
  -[SBIdleTimerGlobalCoordinator resetIdleTimerForReason:]
  -[SBIdleTimerGlobalCoordinator _activeIdleTimerProvider]
  -[SBIdleTimerGlobalCoordinator _idleTimerProvider]
  -[SBIdleTimerGlobalCoordinator dealloc]
  -[SBIdleTimerGlobalCoordinator _setIdleTimerSourceEnabled:forReason:]
  -[SBIdleTimerGlobalCoordinator _hasIdleTimerDisableAssertions]
  -[SBIdleTimerGlobalCoordinator _updateIdleTimerForProvider:behavior:forReason:]
  -[SBIdleTimerGlobalCoordinator _setIdleTimerWithDescriptor:forReason:]


SBDaemonHandler : NSObject
  // class methods
  +[SBDaemonHandler initialize]
  +[SBDaemonHandler stateDescription]
  +[SBDaemonHandler addRequest:forKey:forDaemonPid:]
  +[SBDaemonHandler removeRequestForKey:forDaemonPid:]
  +[SBDaemonHandler noteDaemonCanceled:]


SBDaemonRequest : NSObject
 @property  @? enabler
 @property  @? disabler

  // class methods
  +[SBDaemonRequest requestWithEnabler:disabler:]

  // instance methods
  -[SBDaemonRequest disabler]
  -[SBDaemonRequest .cxx_destruct]
  -[SBDaemonRequest dispatchDisablerOnQueue:]
  -[SBDaemonRequest dispatchEnablerOnQueue:]
  -[SBDaemonRequest setDisabler:]
  -[SBDaemonRequest setEnabler:]
  -[SBDaemonRequest enabler]


SBDaemonContext : NSObject
  // instance methods
  -[SBDaemonContext _newDispatchSourceForPid:queue:]
  -[SBDaemonContext initWithPid:queue:]
  -[SBDaemonContext .cxx_destruct]
  -[SBDaemonContext _handleCancelation]
  -[SBDaemonContext removeRequestForKey:]
  -[SBDaemonContext pid]
  -[SBDaemonContext addRequest:forKey:]


SBScreenWakeAnimationController : NSObject <SBFScreenWakeAnimationControlling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBScreenWakeAnimationController sharedInstance]
  +[SBScreenWakeAnimationController _animationSpeedForBacklightChangeSource:isWake:]
  +[SBScreenWakeAnimationController backlightFadeDurationForSource:isWake:]

  // instance methods
  -[SBScreenWakeAnimationController isWakeAnimationInProgressForSource:]
  -[SBScreenWakeAnimationController setScreenWakeTemporarilyDisabled:forReason:]
  -[SBScreenWakeAnimationController .cxx_destruct]
  -[SBScreenWakeAnimationController succinctDescriptionBuilder]
  -[SBScreenWakeAnimationController _startWakeFromUnblankNotification]
  -[SBScreenWakeAnimationController _handleAnimationCompletionIfNecessaryForWaking:]
  -[SBScreenWakeAnimationController descriptionBuilderWithMultilinePrefix:]
  -[SBScreenWakeAnimationController init]
  -[SBScreenWakeAnimationController descriptionWithMultilinePrefix:]
  -[SBScreenWakeAnimationController _animationSettingsForBacklightChangeSource:isWake:]
  -[SBScreenWakeAnimationController succinctDescription]
  -[SBScreenWakeAnimationController _startWakeAnimationsForWaking:animationSettings:]
  -[SBScreenWakeAnimationController _cleanupAnimationWhenInterruptingWaking:]
  -[SBScreenWakeAnimationController _runCompletionHandlerForWake:reason:]
  -[SBScreenWakeAnimationController sleepForSource:target:completion:]
  -[SBScreenWakeAnimationController interruptSleepAnimationIfNeeded]
  -[SBScreenWakeAnimationController isSleepAnimationInProgress]
  -[SBScreenWakeAnimationController prepareToWakeForSource:timeAlpha:statusBarAlpha:target:completion:]
  -[SBScreenWakeAnimationController _startWakeIfNecessary]
  -[SBScreenWakeAnimationController dealloc]
  -[SBScreenWakeAnimationController _setLastBacklightChangeSource:]
  -[SBScreenWakeAnimationController _setRelevantLockScreenViewsHidden:]
  -[SBScreenWakeAnimationController sleepForSource:completion:]
  -[SBScreenWakeAnimationController isWakeAnimationInProgress]
  -[SBScreenWakeAnimationController _setInteractionEventsIgnored:]


SBAlertItemPresentation : NSObject <BSDescriptionProviding>
 @property  SBAlertItem *alertItem
 @property  <SBAlertItemPresenter> *presenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAlertItemPresentation presenter]
  -[SBAlertItemPresentation setAlertItem:]
  -[SBAlertItemPresentation setPresenter:]
  -[SBAlertItemPresentation .cxx_destruct]
  -[SBAlertItemPresentation succinctDescriptionBuilder]
  -[SBAlertItemPresentation descriptionBuilderWithMultilinePrefix:]
  -[SBAlertItemPresentation isEqual:]
  -[SBAlertItemPresentation descriptionWithMultilinePrefix:]
  -[SBAlertItemPresentation succinctDescription]
  -[SBAlertItemPresentation alertItem]
  -[SBAlertItemPresentation initWithAlertItem:presenter:]


SBFloatingDockController : NSObject <SBFloatingDockRootViewControllerDelegate, SBFolderPresentationObserver, SBSystemGestureRecognizerDelegate, SBRootFolderPageStateObserver, SBAssistantObserver, BSDescriptionProviding, SBReusableViewMapDelegate, SBLayoutStateTransitionObserver, SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate, SBIdleTimerProviding, SBIconViewQuerying, SBIconLocationPresenting, SBIconViewProviding>
 @property  SBFailingSystemGestureRecognizer *dismissFloatingDockSystemGestureRecognizer
 @property  SBIconController *iconController
 @property  SBMainScreenActiveInterfaceOrientationWindow *floatingDockWindow
 @property  SBFloatingDockBehaviorAssertion *activeAssertion
 @property  SBLayoutStateTransitionCoordinator *transitionCoordinator
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  SBFZStackParticipant *zStackParticipant
 @property  BOOL presentingLibraryInForeground
 @property  BOOL presentingLibrary
 @property  BOOL presentingFolder
 @property  SBFolderController *presentedFolderController
 @property  SBFloatingDockViewController *floatingDockViewController
 @property  BOOL hasIdleTimerBehaviors
 @property  <SBFloatingDockControllerDelegate> *delegate
 @property  UIViewController *viewController
 @property  BOOL floatingDockPresented
 @property  BOOL floatingDockFullyPresented
 @property  BOOL libraryPodIconEnabled
 @property  BOOL wasFloatingDockPresentedByPointer
 @property  BOOL gesturePossible
 @property  SBIndirectPanGestureRecognizer *presentFloatingDockIndirectPanGestureRecognizer
 @property  UIHoverGestureRecognizer *dismissFloatingDockHoverGestureRecognizer
 @property  double maximumFloatingDockHeight
 @property  double floatingDockHeight
 @property  double effectiveFloatingDockHeight
 @property  double preferredVerticalMargin
 @property  double floatingDockViewTopMargin
 @property  double translationFromFullyPresentedFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} floatingDockScreenFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} floatingDockScreenPresentationFrame
 @property  double maximumDockContinuousCornerRadius
 @property  SBIconListView *userIconListView
 @property  SBIconListView *suggestionsIconListView
 @property  SBApplication *requestedSuggestedApplication
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *presentedIconLocations

  // class methods
  +[SBFloatingDockController initialize]
  +[SBFloatingDockController isFloatingDockSupported]

  // instance methods
  -[SBFloatingDockController rootFolderPageStateProvider:willEndTransitionToState:successfully:]
  -[SBFloatingDockController rootFolderPageStateProvider:willBeginTransitionToState:animated:interactive:]
  -[SBFloatingDockController assistantWillAppear:]
  -[SBFloatingDockController iconViewForIcon:location:]
  -[SBFloatingDockController coordinatorRequestedIdleTimerBehavior:]
  -[SBFloatingDockController viewMap:shouldRecycleView:]
  -[SBFloatingDockController rootFolderPageStateProvider:didContinueTransitionToState:progress:]
  -[SBFloatingDockController firstIconViewForIcon:excludingLocations:]
  -[SBFloatingDockController hasIdleTimerBehaviors]
  -[SBFloatingDockController _setupStateDumper]
  -[SBFloatingDockController rootFolderPageStateProvider:didEndTransitionFromState:toState:successfully:]
  -[SBFloatingDockController iconViewMap]
  -[SBFloatingDockController assistantDidDisappear:]
  -[SBFloatingDockController viewController]
  -[SBFloatingDockController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFloatingDockController configureIconView:forIcon:]
  -[SBFloatingDockController initWithAnalyticsClient:]
  -[SBFloatingDockController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFloatingDockController presentedIconLocations]
  -[SBFloatingDockController setHomeGestureParticipant:]
  -[SBFloatingDockController homeGestureParticipant]
  -[SBFloatingDockController initWithIconController:]
  -[SBFloatingDockController zStackParticipant:updatePreferences:]
  -[SBFloatingDockController zStackParticipantDidChange:]
  -[SBFloatingDockController .cxx_destruct]
  -[SBFloatingDockController enumerateDisplayedIconViewsForIcon:usingBlock:]
  -[SBFloatingDockController succinctDescriptionBuilder]
  -[SBFloatingDockController setLegibilitySettings:]
  -[SBFloatingDockController setTransitionCoordinator:]
  -[SBFloatingDockController setDelegate:]
  -[SBFloatingDockController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBFloatingDockController isIconViewRecycled:]
  -[SBFloatingDockController descriptionBuilderWithMultilinePrefix:]
  -[SBFloatingDockController viewMap:maxRecycledViewsOfClass:]
  -[SBFloatingDockController init]
  -[SBFloatingDockController viewForSystemGestureRecognizer:]
  -[SBFloatingDockController dequeueReusableIconViewOfClass:]
  -[SBFloatingDockController descriptionWithMultilinePrefix:]
  -[SBFloatingDockController zStackParticipant]
  -[SBFloatingDockController setZStackParticipant:]
  -[SBFloatingDockController gestureRecognizerShouldBegin:]
  -[SBFloatingDockController succinctDescription]
  -[SBFloatingDockController _gestureRecognizerFailed:]
  -[SBFloatingDockController isDisplayingIconView:inLocation:]
  -[SBFloatingDockController floatingDockViewController]
  -[SBFloatingDockController firstIconViewForIcon:inLocations:]
  -[SBFloatingDockController gestureRecognizer:shouldReceiveTouch:]
  -[SBFloatingDockController floatingDockHeight]
  -[SBFloatingDockController floatingDockViewTopMargin]
  -[SBFloatingDockController isDisplayingIcon:inLocations:]
  -[SBFloatingDockController transitionCoordinator]
  -[SBFloatingDockController delegate]
  -[SBFloatingDockController isDisplayingIconView:]
  -[SBFloatingDockController recycleIconView:]
  -[SBFloatingDockController firstIconViewForIcon:]
  -[SBFloatingDockController dealloc]
  -[SBFloatingDockController enumerateDisplayedIconViewsUsingBlock:]
  -[SBFloatingDockController iconController]
  -[SBFloatingDockController isDisplayingIcon:inLocation:]
  -[SBFloatingDockController isDisplayingIcon:]
  -[SBFloatingDockController recycledViewsContainerProviderForViewMap:]
  -[SBFloatingDockController isFloatingDockFullyPresented]
  -[SBFloatingDockController isPresentingIconLocation:]
  -[SBFloatingDockController legibilitySettings]
  -[SBFloatingDockController translationFromFullyPresentedFrame]
  -[SBFloatingDockController userIconListView]
  -[SBFloatingDockController isLibraryPodIconEnabled]
  -[SBFloatingDockController maximumDockContinuousCornerRadius]
  -[SBFloatingDockController presentedFolderController]
  -[SBFloatingDockController floatingDockScreenFrame]
  -[SBFloatingDockController isPresentingLibrary]
  -[SBFloatingDockController isPresentingLibraryInForeground]
  -[SBFloatingDockController isPresentingFolder]
  -[SBFloatingDockController dismissPresentedFolderAnimated:completion:]
  -[SBFloatingDockController preferredVerticalMargin]
  -[SBFloatingDockController floatingDockScreenPresentationFrame]
  -[SBFloatingDockController layoutUserControlledIconListsWithAnimationType:forceRelayout:]
  -[SBFloatingDockController presentFolderForIcon:location:animated:completion:]
  -[SBFloatingDockController iconManager:willPerformTransitionWithFolder:presenting:withTransitionCoordinator:]
  -[SBFloatingDockController isFloatingDockPresented]
  -[SBFloatingDockController presentFloatingDockIfDismissedAnimated:completionHandler:]
  -[SBFloatingDockController dismissFloatingDockUsingKeyCommandIfPresentedAnimated:completionHandler:]
  -[SBFloatingDockController isGesturePossible]
  -[SBFloatingDockController floatingDockWindow]
  -[SBFloatingDockController registerAsSharedInstance]
  -[SBFloatingDockController shouldShowHideSuggestionForIconView:proposedValue:]
  -[SBFloatingDockController suggestionsIconListView]
  -[SBFloatingDockController shouldShowCloseBoxForIconView:proposedValue:]
  -[SBFloatingDockController handlePromptingUserToUninstallIcon:location:]
  -[SBFloatingDockController isPresentingLibraryInFloatingDockWindow]
  -[SBFloatingDockController dismissFloatingDockIfPresentedAnimated:completionHandler:]
  -[SBFloatingDockController requestedSuggestedApplication]
  -[SBFloatingDockController setRequestedSuggestedApplication:]
  -[SBFloatingDockController handlePresentFloatingDockHoverGesture:]
  -[SBFloatingDockController _handleDismissFloatingDockHoverGesture:]
  -[SBFloatingDockController initWithIconController:applicationController:recentsController:recentsDataStore:transitionCoordinator:appSuggestionManager:analyticsClient:]
  -[SBFloatingDockController initWithIconController:analyticsClient:]
  -[SBFloatingDockController maximumFloatingDockHeight]
  -[SBFloatingDockController effectiveFloatingDockHeight]
  -[SBFloatingDockController _canPresentFloatingDock]
  -[SBFloatingDockController setWasFloatingDockPresentedByPointer:]
  -[SBFloatingDockController _presentFloatingDockIfDismissedAnimated:completionHandler:]
  -[SBFloatingDockController _dismissFloatingDockIfPresentedAnimated:completionHandler:]
  -[SBFloatingDockController dismissPresentedFolderAnimated:withTransitionContext:completion:]
  -[SBFloatingDockController dismissPresentedLibraryAnimated:withTransitionContext:completion:]
  -[SBFloatingDockController _recalculateWindowLevelForWindowLevelAssertions]
  -[SBFloatingDockController _indexOfPointerArray:ofObject:]
  -[SBFloatingDockController _clearGestureAssertion]
  -[SBFloatingDockController _evaluateAssertions:interactive:withCompletion:]
  -[SBFloatingDockController _updateFocusAssertion]
  -[SBFloatingDockController _deriveActiveAssertion:dockProgress:]
  -[SBFloatingDockController wasFloatingDockPresentedByPointer]
  -[SBFloatingDockController _dockProgressForHoverTranslation:]
  -[SBFloatingDockController floatingDockRootViewController:modifyProgress:interactive:completion:]
  -[SBFloatingDockController dismissFloatingDockSystemGestureRecognizer]
  -[SBFloatingDockController presentFloatingDockIndirectPanGestureRecognizer]
  -[SBFloatingDockController dismissFloatingDockHoverGestureRecognizer]
  -[SBFloatingDockController _allowGestureRecognizers]
  -[SBFloatingDockController _configureFloatingDockBehaviorAssertionForPresentedLibrary:]
  -[SBFloatingDockController _evaluateResignActiveAssertionForLibrary]
  -[SBFloatingDockController _evaluateAsyncRenderingAssertionForLibrary]
  -[SBFloatingDockController _evaluateWindowStatusForLibrary]
  -[SBFloatingDockController _handleTransitionForFolder:atLevel:presenting:withTransitionCoordinator:]
  -[SBFloatingDockController _configureFloatingDockBehaviorAssertionForOpenFolder:atLevel:]
  -[SBFloatingDockController floatingDockRootViewController:willChangeToHeight:interactive:]
  -[SBFloatingDockController floatingDockRootViewController:didChangeToFrame:]
  -[SBFloatingDockController floatingDockRootViewController:floatingDockWantsToBePresented:]
  -[SBFloatingDockController floatingDockRootViewControllerShouldHandlePanGestureRecognizer:]
  -[SBFloatingDockController floatingDockRootViewController:willPerformTransitionWithLibraryToPresented:]
  -[SBFloatingDockController floatingDockRootViewController:didCompleteTransitionWithLibraryToPresented:]
  -[SBFloatingDockController floatingDockRootViewController:willPerformTransitionWithFolder:presenting:withTransitionCoordinator:]
  -[SBFloatingDockController floatingDockRootViewController:didUpdateContentEligibilityForAsynchronousRendering:]
  -[SBFloatingDockController floatingDockRootViewControllerDidEndPresentationTransition:]
  -[SBFloatingDockController minimumHomeScreenScaleForFloatingDockRootViewController:]
  -[SBFloatingDockController libraryContainerViewControllerForFloatingDockRootViewController:]
  -[SBFloatingDockController isDefaultLibraryContainerViewControllerForegroundForFloatingDockRootViewController:]
  -[SBFloatingDockController foregroundLibraryContainerViewControllerForFloatingDockRootViewController:]
  -[SBFloatingDockController floatingDockRootViewController:acquireOrderFloatingDockContainerBeforeLibraryAssertionForReason:]
  -[SBFloatingDockController isPresentingLibraryInHomeScreenWindow]
  -[SBFloatingDockController _addFloatingDockWindowLevelAssertion:]
  -[SBFloatingDockController _removeFloatingDockWindowLevelAssertion:]
  -[SBFloatingDockController _addFloatingDockBehaviorAssertion:withCompletion:]
  -[SBFloatingDockController _removeFloatingDockBehaviorAssertion:withCompletion:]
  -[SBFloatingDockController _updateFloatingDockBehaviorAssertionsInteractive:completion:]
  -[SBFloatingDockController _handleSystemGestureRecognizer:]
  -[SBFloatingDockController activeAssertion]
  -[SBFloatingDockController setActiveAssertion:]


SBPresentDockSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBPresentDockSwitcherEventResponse type]


SBSystemNotesBackgroundView : UIView <PTSettingsKeyObserver, SBApplicationSceneBackgroundView>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL fullscreen
 @property  long long wallpaperStyle
 @property  BOOL needsClassicModeBackground
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long transformOptions

  // instance methods
  -[SBSystemNotesBackgroundView .cxx_destruct]
  -[SBSystemNotesBackgroundView initWithFrame:]
  -[SBSystemNotesBackgroundView settings:changedValueForKey:]
  -[SBSystemNotesBackgroundView dealloc]
  -[SBSystemNotesBackgroundView _updateTintView]
  -[SBSystemNotesBackgroundView _backgroundColorFromSettings:]


SBLiquidDetectionManager : NSObject
 @property  BOOL accessoryPortWet
 @property  BOOL detectionEnabled
 @property  BOOL liquidDetected

  // class methods
  +[SBLiquidDetectionManager sharedInstance]
  +[SBLiquidDetectionManager showStatusBarIcon]

  // instance methods
  -[SBLiquidDetectionManager _stateDidUpdate]
  -[SBLiquidDetectionManager succinctDescriptionBuilder]
  -[SBLiquidDetectionManager isDetectionEnabled]
  -[SBLiquidDetectionManager isLiquidDetected]
  -[SBLiquidDetectionManager descriptionBuilderWithMultilinePrefix:]
  -[SBLiquidDetectionManager init]
  -[SBLiquidDetectionManager descriptionWithMultilinePrefix:]
  -[SBLiquidDetectionManager succinctDescription]
  -[SBLiquidDetectionManager isAccessoryPortWet]
  -[SBLiquidDetectionManager _showStatusBarIcon]
  -[SBLiquidDetectionManager _finishInit]
  -[SBLiquidDetectionManager _updateStatusBar]
  -[SBLiquidDetectionManager dealloc]
  -[SBLiquidDetectionManager _updateWetState]


SBAppRepairTransaction : SBTransaction
 @property  NSSet *appInfos

  // instance methods
  -[SBAppRepairTransaction _didComplete]
  -[SBAppRepairTransaction _begin]
  -[SBAppRepairTransaction _canBeInterrupted]
  -[SBAppRepairTransaction appInfos]
  -[SBAppRepairTransaction .cxx_destruct]
  -[SBAppRepairTransaction _evaluateCompletion]
  -[SBAppRepairTransaction _startAppRepairs]
  -[SBAppRepairTransaction _completeRequest:success:error:]
  -[SBAppRepairTransaction initWithApplicationInfos:]


SBReduceMotionForcePressGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBReduceMotionForcePressGestureSwitcherModifier appLayoutsToResignActive]
  -[SBReduceMotionForcePressGestureSwitcherModifier isContainerStatusBarVisible]
  -[SBReduceMotionForcePressGestureSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBReduceMotionForcePressGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBReduceMotionForcePressGestureSwitcherModifier keyboardSuppressionMode]
  -[SBReduceMotionForcePressGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBReduceMotionForcePressGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBReduceMotionForcePressGestureSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBReduceMotionForcePressGestureSwitcherModifier frameForIndex:]
  -[SBReduceMotionForcePressGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBReduceMotionForcePressGestureSwitcherModifier visibleAppLayouts]
  -[SBReduceMotionForcePressGestureSwitcherModifier .cxx_destruct]
  -[SBReduceMotionForcePressGestureSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBReduceMotionForcePressGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBReduceMotionForcePressGestureSwitcherModifier _layoutSettings]
  -[SBReduceMotionForcePressGestureSwitcherModifier wallpaperStyle]
  -[SBReduceMotionForcePressGestureSwitcherModifier cornerRadiiForIndex:]
  -[SBReduceMotionForcePressGestureSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBReduceMotionForcePressGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBReduceMotionForcePressGestureSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBReduceMotionForcePressGestureSwitcherModifier didMoveToParentModifier:]
  -[SBReduceMotionForcePressGestureSwitcherModifier handleGestureEvent:]
  -[SBReduceMotionForcePressGestureSwitcherModifier _effectivePanProgress]
  -[SBReduceMotionForcePressGestureSwitcherModifier _indexOfSelectedAppLayout]
  -[SBReduceMotionForcePressGestureSwitcherModifier initialPanThreshold]
  -[SBReduceMotionForcePressGestureSwitcherModifier initWithGestureID:selectedAppLayout:effectiveStartingEnvironmentMode:]


SBMainDisplayLayoutStateManager : SBLayoutStateManager
 @property  SBPlatformController *_platformController
 @property  SBMainWorkspace *_mainWorkspace
 @property  SBMainDisplaySceneManager *_mainDisplaySceneManager
 @property  SBRecentAppLayouts *_recentAppLayouts

  // class methods
  +[SBMainDisplayLayoutStateManager _layoutStateClass]

  // instance methods
  -[SBMainDisplayLayoutStateManager primarySceneIdentifierForBundleIdentifier:sceneSessionRole:]
  -[SBMainDisplayLayoutStateManager layoutStateForApplicationTransitionContext:]
  -[SBMainDisplayLayoutStateManager _mostRecentAppLayoutMatchingWorkspaceUniqueIdentifiers:]
  -[SBMainDisplayLayoutStateManager _recentAppLayouts]
  -[SBMainDisplayLayoutStateManager _sceneIDIfAppLayoutContainsPrimarySceneIDForBundleIdentifier:bundleIdentifier:sceneSessionRole:]
  -[SBMainDisplayLayoutStateManager _doesSceneIDSpecifyPrimaryScene:forApplicationIdentifier:sceneSessionRole:]
  -[SBMainDisplayLayoutStateManager _applicationSceneEntityFromApplicationBundleIdentifier:uniqueIdentifier:]
  -[SBMainDisplayLayoutStateManager _mostRecentAppLayoutForBundleIdentifier:ignoringUniqueIdentifiers:]
  -[SBMainDisplayLayoutStateManager _hasAppLayoutBeenUserKilledWithinThresholdToCreateNewScene:]
  -[SBMainDisplayLayoutStateManager _mainDisplaySceneManager]
  -[SBMainDisplayLayoutStateManager _mainWorkspace]
  -[SBMainDisplayLayoutStateManager defaultSceneIdentifierForBundleIdentifier:targetContentIdentifier:allowCanMatches:preferNewScene:visibleSceneIdentifiers:excludingSceneIdentifiers:sceneSessionRole:]
  -[SBMainDisplayLayoutStateManager _layoutStateForApplicationTransitionContext:]
  -[SBMainDisplayLayoutStateManager _platformController]


SBRelocateFloatingAppLayoutSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBRelocateFloatingAppLayoutSwitcherModifier transitionWillBegin]
  -[SBRelocateFloatingAppLayoutSwitcherModifier transitionDidEnd]
  -[SBRelocateFloatingAppLayoutSwitcherModifier scaleForIndex:]
  -[SBRelocateFloatingAppLayoutSwitcherModifier frameForIndex:]
  -[SBRelocateFloatingAppLayoutSwitcherModifier .cxx_destruct]
  -[SBRelocateFloatingAppLayoutSwitcherModifier handleTimerEvent:]
  -[SBRelocateFloatingAppLayoutSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBRelocateFloatingAppLayoutSwitcherModifier transitionWillUpdate]
  -[SBRelocateFloatingAppLayoutSwitcherModifier initWithTransitionID:floatingAppLayout:floatingConfiguration:direction:mixedGridModifier:]
  -[SBRelocateFloatingAppLayoutSwitcherModifier _goingToSwitcherWithLeadingFloatingApp]
  -[SBRelocateFloatingAppLayoutSwitcherModifier _comingFromSwitcherWithLeadingFloatingApp]


SBDashBoardPearlUnlockBehavior : NSObject <SBMesaUnlockTriggerDelegate, SBBiometricUnlockBehavior>
 @property  SBMesaUnlockTrigger *trigger
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate

  // instance methods
  -[SBDashBoardPearlUnlockBehavior mesaUnlockTriggerFired:]
  -[SBDashBoardPearlUnlockBehavior setBiometricUnlockBehaviorDelegate:]
  -[SBDashBoardPearlUnlockBehavior handleBiometricEvent:]
  -[SBDashBoardPearlUnlockBehavior .cxx_destruct]
  -[SBDashBoardPearlUnlockBehavior succinctDescriptionBuilder]
  -[SBDashBoardPearlUnlockBehavior descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardPearlUnlockBehavior descriptionWithMultilinePrefix:]
  -[SBDashBoardPearlUnlockBehavior _setTrigger:]
  -[SBDashBoardPearlUnlockBehavior biometricUnlockBehaviorDelegate]
  -[SBDashBoardPearlUnlockBehavior succinctDescription]
  -[SBDashBoardPearlUnlockBehavior _feedbackForBioUnlockEventThatWasSpontaneous:]
  -[SBDashBoardPearlUnlockBehavior _trigger]
  -[SBDashBoardPearlUnlockBehavior _feedbackForPasscodeEvent]
  -[SBDashBoardPearlUnlockBehavior _feedbackForFailureSettings:]
  -[SBDashBoardPearlUnlockBehavior initWithPearlSettings:andUnlockTrigger:]
  -[SBDashBoardPearlUnlockBehavior _handlePearlFailure]


SBTransientOverlayDismissalRequest : NSObject <NSCopying, NSMutableCopying>
 @property  BOOL animated
 @property  @? completionHandler
 @property  long long requestType
 @property  SBTransientOverlayViewController *viewController

  // class methods
  +[SBTransientOverlayDismissalRequest dismissalRequestForAllViewControllers]
  +[SBTransientOverlayDismissalRequest dismissalRequestForViewController:]

  // instance methods
  -[SBTransientOverlayDismissalRequest viewController]
  -[SBTransientOverlayDismissalRequest isAnimated]
  -[SBTransientOverlayDismissalRequest .cxx_destruct]
  -[SBTransientOverlayDismissalRequest requestType]
  -[SBTransientOverlayDismissalRequest _init]
  -[SBTransientOverlayDismissalRequest mutableCopyWithZone:]
  -[SBTransientOverlayDismissalRequest _copyWithClass:]
  -[SBTransientOverlayDismissalRequest completionHandler]
  -[SBTransientOverlayDismissalRequest copyWithZone:]


SBMutableTransientOverlayDismissalRequest : SBTransientOverlayDismissalRequest
 @property  BOOL animated
 @property  @? completionHandler

  // instance methods
  -[SBMutableTransientOverlayDismissalRequest setAnimated:]
  -[SBMutableTransientOverlayDismissalRequest setCompletionHandler:]
  -[SBMutableTransientOverlayDismissalRequest mutableCopyWithZone:]
  -[SBMutableTransientOverlayDismissalRequest copyWithZone:]


SBFluidSwitcherModifierTimelineTouchPassThroughScrollView : UIScrollView
  // instance methods
  -[SBFluidSwitcherModifierTimelineTouchPassThroughScrollView hitTest:withEvent:]


SBFluidSwitcherModifierTimelineViewController : UIViewController <_SBFluidSwitcherModifierTimelineEntryViewDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherModifierTimelineViewController viewWillLayoutSubviews]
  -[SBFluidSwitcherModifierTimelineViewController .cxx_destruct]
  -[SBFluidSwitcherModifierTimelineViewController addEntry:]
  -[SBFluidSwitcherModifierTimelineViewController _reset:]
  -[SBFluidSwitcherModifierTimelineViewController loadView]
  -[SBFluidSwitcherModifierTimelineViewController _toggleNoiseLevel:]
  -[SBFluidSwitcherModifierTimelineViewController _isNoisyEntry:]
  -[SBFluidSwitcherModifierTimelineViewController didSelectEntryView:]


_SBFluidSwitcherModifierTimelineEntryView : UIView
 @property  SBSwitcherModifierTimelineEntry *entry
 @property  <_SBFluidSwitcherModifierTimelineEntryViewDelegate> *delegate

  // instance methods
  -[_SBFluidSwitcherModifierTimelineEntryView _tap:]
  -[_SBFluidSwitcherModifierTimelineEntryView .cxx_destruct]
  -[_SBFluidSwitcherModifierTimelineEntryView layoutSubviews]
  -[_SBFluidSwitcherModifierTimelineEntryView setDelegate:]
  -[_SBFluidSwitcherModifierTimelineEntryView entry]
  -[_SBFluidSwitcherModifierTimelineEntryView delegate]
  -[_SBFluidSwitcherModifierTimelineEntryView setEntry:]
  -[_SBFluidSwitcherModifierTimelineEntryView initWithFrame:entry:]
  -[_SBFluidSwitcherModifierTimelineEntryView _attributedStringsForStack:]
  -[_SBFluidSwitcherModifierTimelineEntryView _appendRecursiveDescriptionToString:level:snapshot:]
  -[_SBFluidSwitcherModifierTimelineEntryView _randomColorWithSeed:]
  -[_SBFluidSwitcherModifierTimelineEntryView _randomFloatFromSeed:min:max:]


_SBModifierTimelineDetailViewController : UIViewController <UITableViewDelegate, UITableViewDataSource>
 @property  SBSwitcherModifierTimelineEntry *entry
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBModifierTimelineDetailViewController _done]
  -[_SBModifierTimelineDetailViewController viewWillLayoutSubviews]
  -[_SBModifierTimelineDetailViewController numberOfSectionsInTableView:]
  -[_SBModifierTimelineDetailViewController tableView:numberOfRowsInSection:]
  -[_SBModifierTimelineDetailViewController tableView:titleForHeaderInSection:]
  -[_SBModifierTimelineDetailViewController .cxx_destruct]
  -[_SBModifierTimelineDetailViewController tableView:didSelectRowAtIndexPath:]
  -[_SBModifierTimelineDetailViewController viewDidLoad]
  -[_SBModifierTimelineDetailViewController tableView:cellForRowAtIndexPath:]
  -[_SBModifierTimelineDetailViewController entry]
  -[_SBModifierTimelineDetailViewController setEntry:]
  -[_SBModifierTimelineDetailViewController _numberOfModifiersInStackSnapshot:]
  -[_SBModifierTimelineDetailViewController _stackSnapshotAtIndex:]
  -[_SBModifierTimelineDetailViewController _prettyStringForEventPredicateDetails:]


_SBModifierTimelineModifierDetailViewController : UIViewController <UITableViewDelegate, UITableViewDataSource>
 @property  SBSwitcherModifierStackSnapshot *stackSnapshot
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBModifierTimelineModifierDetailViewController viewWillLayoutSubviews]
  -[_SBModifierTimelineModifierDetailViewController numberOfSectionsInTableView:]
  -[_SBModifierTimelineModifierDetailViewController tableView:numberOfRowsInSection:]
  -[_SBModifierTimelineModifierDetailViewController tableView:titleForHeaderInSection:]
  -[_SBModifierTimelineModifierDetailViewController .cxx_destruct]
  -[_SBModifierTimelineModifierDetailViewController tableView:didSelectRowAtIndexPath:]
  -[_SBModifierTimelineModifierDetailViewController viewDidLoad]
  -[_SBModifierTimelineModifierDetailViewController tableView:cellForRowAtIndexPath:]
  -[_SBModifierTimelineModifierDetailViewController setStackSnapshot:]
  -[_SBModifierTimelineModifierDetailViewController stackSnapshot]


_SBModifierTimelineTextViewController : UIViewController
 @property  NSString *text
 @property  NSAttributedString *attributedText

  // instance methods
  -[_SBModifierTimelineTextViewController setAttributedText:]
  -[_SBModifierTimelineTextViewController attributedText]
  -[_SBModifierTimelineTextViewController setText:]
  -[_SBModifierTimelineTextViewController viewWillLayoutSubviews]
  -[_SBModifierTimelineTextViewController .cxx_destruct]
  -[_SBModifierTimelineTextViewController viewDidLoad]
  -[_SBModifierTimelineTextViewController prepareForReuse]
  -[_SBModifierTimelineTextViewController text]


SBLayoutElement : NSObject <BSDescriptionProviding, SBLayoutElementDescriptor, SBWorkspaceEntityGenerating>
 @property  @? entityGenerator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *uniqueIdentifier
 @property  long long layoutRole
 @property  unsigned long supportedLayoutRoles
 @property  unsigned long layoutAttributes
 @property  Class viewControllerClass

  // class methods
  +[SBLayoutElement elementWithDescriptor:layoutRole:]
  +[SBLayoutElement elementWithDescriptor:]

  // instance methods
  -[SBLayoutElement setEntityGenerator:]
  -[SBLayoutElement uniqueIdentifier]
  -[SBLayoutElement workspaceEntity]
  -[SBLayoutElement layoutRole]
  -[SBLayoutElement hasLayoutAttributes:]
  -[SBLayoutElement .cxx_destruct]
  -[SBLayoutElement entityGenerator]
  -[SBLayoutElement supportsLayoutRole:]
  -[SBLayoutElement viewControllerClass]
  -[SBLayoutElement succinctDescriptionBuilder]
  -[SBLayoutElement supportedLayoutRoles]
  -[SBLayoutElement descriptionBuilderWithMultilinePrefix:]
  -[SBLayoutElement isEqual:]
  -[SBLayoutElement initWithIdentifier:layoutRole:supportedLayoutRoles:layoutAttributes:viewControllerClass:entityGenerator:]
  -[SBLayoutElement descriptionWithMultilinePrefix:]
  -[SBLayoutElement succinctDescription]
  -[SBLayoutElement layoutAttributes]


SBStatusBarForcedHiddenTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBStatusBarForcedHiddenTestRecipe load]

  // instance methods
  -[SBStatusBarForcedHiddenTestRecipe title]
  -[SBStatusBarForcedHiddenTestRecipe handleVolumeIncrease]
  -[SBStatusBarForcedHiddenTestRecipe handleVolumeDecrease]
  -[SBStatusBarForcedHiddenTestRecipe _toggleWithAnimationSettings:]


SBDashBoardIdleTimerController : NSObject <CSExternalEventHandling, SBDashBoardIdleTimerProviderDelegate, CSIdleTimerControlling, SBIdleTimerProviding, SBLockScreenIdleTimerControlling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator

  // instance methods
  -[SBDashBoardIdleTimerController idleTimerCoordinator]
  -[SBDashBoardIdleTimerController coordinatorRequestedIdleTimerBehavior:]
  -[SBDashBoardIdleTimerController idleTimerDidChange:]
  -[SBDashBoardIdleTimerController idleTimerDidRefresh:]
  -[SBDashBoardIdleTimerController setIdleTimerCoordinator:]
  -[SBDashBoardIdleTimerController coverSheetIdentifier]
  -[SBDashBoardIdleTimerController idleTimerDidWarn:]
  -[SBDashBoardIdleTimerController idleTimerWillRefresh:]
  -[SBDashBoardIdleTimerController requestIdleTimerBehaviorForReason:]
  -[SBDashBoardIdleTimerController .cxx_destruct]
  -[SBDashBoardIdleTimerController wouldHandleButtonEvent:]
  -[SBDashBoardIdleTimerController idleTimerDidExpire:]
  -[SBDashBoardIdleTimerController participantState]
  -[SBDashBoardIdleTimerController removeIdleTimerDisabledAssertionReason:]
  -[SBDashBoardIdleTimerController dashBoardIdleTimerProvider:didProposeBehavior:reason:]
  -[SBDashBoardIdleTimerController addIdleTimerDisabledAssertionReason:]
  -[SBDashBoardIdleTimerController handleEvent:]
  -[SBDashBoardIdleTimerController resetIdleTimerIfTopMost]
  -[SBDashBoardIdleTimerController dealloc]
  -[SBDashBoardIdleTimerController conformsToCSEventHandling]
  -[SBDashBoardIdleTimerController initWithCoverSheetViewController:]


SBLockScreenUnlockRequest : NSObject <NSCopying>
 @property  NSString *name
 @property  int source
 @property  int intent
 @property  BSProcessHandle *process
 @property  SBApplication *destinationApplication
 @property  BOOL wantsBiometricPresentation
 @property  BOOL forceAlertAuthenticationUI
 @property  BOOL confirmedNotInPocket
 @property  NSString *title
 @property  NSString *subtitle

  // instance methods
  -[SBLockScreenUnlockRequest name]
  -[SBLockScreenUnlockRequest setTitle:]
  -[SBLockScreenUnlockRequest .cxx_destruct]
  -[SBLockScreenUnlockRequest setProcess:]
  -[SBLockScreenUnlockRequest setSubtitle:]
  -[SBLockScreenUnlockRequest setName:]
  -[SBLockScreenUnlockRequest destinationApplication]
  -[SBLockScreenUnlockRequest isEqual:]
  -[SBLockScreenUnlockRequest process]
  -[SBLockScreenUnlockRequest confirmedNotInPocket]
  -[SBLockScreenUnlockRequest subtitle]
  -[SBLockScreenUnlockRequest forceAlertAuthenticationUI]
  -[SBLockScreenUnlockRequest setConfirmedNotInPocket:]
  -[SBLockScreenUnlockRequest title]
  -[SBLockScreenUnlockRequest setSource:]
  -[SBLockScreenUnlockRequest intent]
  -[SBLockScreenUnlockRequest setIntent:]
  -[SBLockScreenUnlockRequest setForceAlertAuthenticationUI:]
  -[SBLockScreenUnlockRequest copyWithZone:]
  -[SBLockScreenUnlockRequest setWantsBiometricPresentation:]
  -[SBLockScreenUnlockRequest setDestinationApplication:]
  -[SBLockScreenUnlockRequest source]
  -[SBLockScreenUnlockRequest wantsBiometricPresentation]


SBPasscodeEntryTransientOverlayViewController : SBTransientOverlayViewController <PTSettingsKeyObserver, SBFAuthenticationResponder, SBUIPasscodeLockViewDelegate>
 @property  <SBPasscodeEntryTransientOverlayViewControllerDelegate> *delegate
 @property  BOOL showEmergencyCallButton
 @property  BOOL useBiometricPresentation
 @property  NSString *unlockDestination
 @property  int intent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPasscodeEntryTransientOverlayViewController preferredStatusBarStyle]
  -[SBPasscodeEntryTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBPasscodeEntryTransientOverlayViewController idleTimerMode]
  -[SBPasscodeEntryTransientOverlayViewController idleWarnMode]
  -[SBPasscodeEntryTransientOverlayViewController .cxx_destruct]
  -[SBPasscodeEntryTransientOverlayViewController idleTimerDuration]
  -[SBPasscodeEntryTransientOverlayViewController viewDidLoad]
  -[SBPasscodeEntryTransientOverlayViewController setDelegate:]
  -[SBPasscodeEntryTransientOverlayViewController initWithAuthenticationController:]
  -[SBPasscodeEntryTransientOverlayViewController viewDidLayoutSubviews]
  -[SBPasscodeEntryTransientOverlayViewController viewWillAppear:]
  -[SBPasscodeEntryTransientOverlayViewController isContentOpaque]
  -[SBPasscodeEntryTransientOverlayViewController delegate]
  -[SBPasscodeEntryTransientOverlayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBPasscodeEntryTransientOverlayViewController intent]
  -[SBPasscodeEntryTransientOverlayViewController settings:changedValueForKey:]
  -[SBPasscodeEntryTransientOverlayViewController setIntent:]
  -[SBPasscodeEntryTransientOverlayViewController _preferredStatusBarVisibility]
  -[SBPasscodeEntryTransientOverlayViewController supportedInterfaceOrientations]
  -[SBPasscodeEntryTransientOverlayViewController viewDidDisappear:]
  -[SBPasscodeEntryTransientOverlayViewController _canShowWhileLocked]
  -[SBPasscodeEntryTransientOverlayViewController handleSuccessfulAuthenticationRequest:]
  -[SBPasscodeEntryTransientOverlayViewController handleFailedAuthenticationRequest:error:]
  -[SBPasscodeEntryTransientOverlayViewController handleInvalidAuthenticationRequest:]
  -[SBPasscodeEntryTransientOverlayViewController unlockDestination]
  -[SBPasscodeEntryTransientOverlayViewController setUnlockDestination:]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewPasscodeEnteredViaMesa:]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewCancelButtonPressed:]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewEmergencyCallButtonPressed:]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewPasscodeEntered:]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewPasscodeDidChange:]
  -[SBPasscodeEntryTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBPasscodeEntryTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBPasscodeEntryTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBPasscodeEntryTransientOverlayViewController canBecomeLocalFirstResponder]
  -[SBPasscodeEntryTransientOverlayViewController _updatePrototypeSettings]
  -[SBPasscodeEntryTransientOverlayViewController _passcodeLockViewPasscodeEntered:authenticationType:]
  -[SBPasscodeEntryTransientOverlayViewController _attemptUnlock:passcode:]
  -[SBPasscodeEntryTransientOverlayViewController handleWillShowKeyboard:]
  -[SBPasscodeEntryTransientOverlayViewController setShowEmergencyCallButton:]
  -[SBPasscodeEntryTransientOverlayViewController setUseBiometricPresentation:]
  -[SBPasscodeEntryTransientOverlayViewController showEmergencyCallButton]
  -[SBPasscodeEntryTransientOverlayViewController useBiometricPresentation]


SBExternalPhoneDefaults : BSAbstractDefaultDomain
 @property  BOOL hideMyPhoneNumber

  // instance methods
  -[SBExternalPhoneDefaults init]
  -[SBExternalPhoneDefaults _bindAndRegisterDefaults]


SBWaitForSceneContentAvailableTransaction : SBTransaction <SBSceneHandleObserver>
 @property  SBSceneHandle *sceneHandle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWaitForSceneContentAvailableTransaction sceneHandle:didUpdateContentState:]
  -[SBWaitForSceneContentAvailableTransaction _didComplete]
  -[SBWaitForSceneContentAvailableTransaction _begin]
  -[SBWaitForSceneContentAvailableTransaction _canBeInterrupted]
  -[SBWaitForSceneContentAvailableTransaction setSceneHandle:]
  -[SBWaitForSceneContentAvailableTransaction sceneHandle]
  -[SBWaitForSceneContentAvailableTransaction .cxx_destruct]
  -[SBWaitForSceneContentAvailableTransaction sceneHandle:didDestroyScene:]
  -[SBWaitForSceneContentAvailableTransaction dealloc]
  -[SBWaitForSceneContentAvailableTransaction initWithSceneHandle:manualListener:]
  -[SBWaitForSceneContentAvailableTransaction noteSceneContentIsReady:]
  -[SBWaitForSceneContentAvailableTransaction _noteSceneContentReadinessDidChange:]


SBInitialRestartState : NSObject <BSDescriptionProviding>
 @property  BOOL authenticated
 @property  BOOL inLostMode
 @property  BOOL blocked
 @property  BOOL hasPasscodeSet
 @property  BOOL requiresSetup
 @property  BOOL shouldNeverLock
 @property  BOOL loginSession
 @property  SBBootDefaults *bootDefaults
 @property  BOOL forSimulator
 @property  long long homeButtonType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInitialRestartState isBlocked]
  -[SBInitialRestartState isLoginSession]
  -[SBInitialRestartState requiresSetup]
  -[SBInitialRestartState setAuthenticated:]
  -[SBInitialRestartState setRequiresSetup:]
  -[SBInitialRestartState shouldNeverLock]
  -[SBInitialRestartState isAuthenticated]
  -[SBInitialRestartState .cxx_destruct]
  -[SBInitialRestartState succinctDescriptionBuilder]
  -[SBInitialRestartState descriptionBuilderWithMultilinePrefix:]
  -[SBInitialRestartState descriptionWithMultilinePrefix:]
  -[SBInitialRestartState succinctDescription]
  -[SBInitialRestartState bootDefaults]
  -[SBInitialRestartState homeButtonType]
  -[SBInitialRestartState isInLostMode]
  -[SBInitialRestartState setHomeButtonType:]
  -[SBInitialRestartState hasPasscodeSet]
  -[SBInitialRestartState setBlocked:]
  -[SBInitialRestartState setHasPasscodeSet:]
  -[SBInitialRestartState setInLostMode:]
  -[SBInitialRestartState setShouldNeverLock:]
  -[SBInitialRestartState setLoginSession:]
  -[SBInitialRestartState setBootDefaults:]
  -[SBInitialRestartState setForSimulator:]
  -[SBInitialRestartState isForSimulator]


SBMutableInitialRestartState : SBInitialRestartState
 @property  BOOL authenticated
 @property  BOOL inLostMode
 @property  BOOL blocked
 @property  BOOL requiresSetup
 @property  BOOL hasPasscodeSet
 @property  BOOL shouldNeverLock
 @property  BOOL loginSession
 @property  SBBootDefaults *bootDefaults
 @property  BOOL forSimulator
 @property  long long homeButtonType


SBInsecureDrawingAlertItemTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBInsecureDrawingAlertItemTestRecipe load]

  // instance methods
  -[SBInsecureDrawingAlertItemTestRecipe .cxx_destruct]
  -[SBInsecureDrawingAlertItemTestRecipe title]
  -[SBInsecureDrawingAlertItemTestRecipe handleVolumeIncrease]
  -[SBInsecureDrawingAlertItemTestRecipe handleVolumeDecrease]


SBAppSwitcherServiceSet : NSObject <NSCopying>
 @property  NSMutableArray *services

  // instance methods
  -[SBAppSwitcherServiceSet services]
  -[SBAppSwitcherServiceSet addService:]
  -[SBAppSwitcherServiceSet .cxx_destruct]
  -[SBAppSwitcherServiceSet count]
  -[SBAppSwitcherServiceSet removeService:]
  -[SBAppSwitcherServiceSet copyWithZone:]
  -[SBAppSwitcherServiceSet appLayouts]
  -[SBAppSwitcherServiceSet serviceBundleIdentifiers]
  -[SBAppSwitcherServiceSet serviceAtIndex:]
  -[SBAppSwitcherServiceSet initWithServices:zone:]
  -[SBAppSwitcherServiceSet serviceForBundleIdentifier:]


CSConcreteUnlockRequest : NSObject <CSUnlockRequest>
 @property  NSString *name
 @property  int source
 @property  int intent
 @property  BOOL wantsBiometricPresentation
 @property  BOOL confirmedNotInPocket
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSConcreteUnlockRequest name]
  -[CSConcreteUnlockRequest .cxx_destruct]
  -[CSConcreteUnlockRequest setName:]
  -[CSConcreteUnlockRequest confirmedNotInPocket]
  -[CSConcreteUnlockRequest setConfirmedNotInPocket:]
  -[CSConcreteUnlockRequest setSource:]
  -[CSConcreteUnlockRequest intent]
  -[CSConcreteUnlockRequest setIntent:]
  -[CSConcreteUnlockRequest setWantsBiometricPresentation:]
  -[CSConcreteUnlockRequest source]
  -[CSConcreteUnlockRequest wantsBiometricPresentation]


SBDefaultCoverSheetContext : NSObject <CSAuthenticationManaging, CSCarPlayStatusProviding, CSMediaControlling, CSReachabilityControlling, CSResetRestoreStatusProviding, CSTelephonyStatusProviding, CSTouchEnvironmentStatusProviding, CSUnlockRequesting, CSUserSessionControlling, CSWallpaperLogging, CSOverlayProviding, CSAppHostConfiguring, CSSystemPointerInteractionManaging, CSProximitySensorProviding, CSDeviceOrientationProviding, SBProximitySensorManagerObserver, SBFOverlayObserving, CSCoverSheetContextProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL carPlayActiveForNotifications
 @property  BOOL restoring
 @property  long long restoreState
 @property  BOOL resetting
 @property  long long resetState
 @property  BOOL expectsPocketTouches
 @property  BOOL logoutSupported
 @property  BOOL wantsHomeScreenOverlay
 @property  BOOL objectInProximity
 @property  long long rawDeviceOrientationIgnoringOrientationLocks
 @property  <SBFAuthenticationAssertionProviding> *authenticationAssertionProvider
 @property  <SBFAuthenticationStatusProvider> *authenticationStatusProvider
 @property  <SBFPasscodeFieldChangeObserver> *passcodeFieldChangeObserver
 @property  <SBFLockOutStatusProvider> *lockOutStatusProvider
 @property  <SBFDateProviding> *dateProvider
 @property  <CSLegibilityProviding> *legibilityProvider
 @property  <CSPowerStatusProviding> *powerStatusProvider
 @property  NSString *powerStatusChangeNotificationName
 @property  NSString *accessoryAttachedNotificationName
 @property  NSString *accessoryDetachedNotificationName
 @property  NSString *accessoryAnimationStatusChangedNotificationName
 @property  <CSMagSafeAccessoryStatusProviding> *accessoryStatusProvider
 @property  <CSResetRestoreStatusProviding> *resetRestoreStatusProvider
 @property  <CSThermalStatusProviding> *thermalStatusProvider
 @property  <SBUIBiometricResource> *biometricResource
 @property  NSArray *dismissableOverlays
 @property  <CSScreenStateProviding> *screenStateProvider
 @property  <SBFScreenWakeAnimationControlling> *screenWakeAnimationController
 @property  <CSWallpaperViewProviding> *wallpaperViewProvider
 @property  <CSTelephonyStatusProviding> *telephonyStatusProvider
 @property  <CSAuthenticationManaging> *authenticationManager
 @property  <CSHomeAffordanceControlling> *homeAffordanceController
 @property  <CSModalHomeAffordanceControlling> *modalHomeAffordanceController
 @property  <CSPlatterHomeGestureManaging> *platterHomeGestureManager
 @property  <CSStatusBarControlling> *statusBarController
 @property  <CSMediaControlling> *mediaController
 @property  <CSUnlockRequesting> *unlockRequester
 @property  <CSWallpaperLogging> *wallpaperLogger
 @property  <SBFActionProviding> *contentActionProvider
 @property  <CSApplicationInforming> *applicationInformer
 @property  <CSNotificationPresenting> *notificationPresenter
 @property  <CSTouchEnvironmentStatusProviding> *touchEnvironmentStatusProvider
 @property  <CSUserSessionControlling> *userSessionController
 @property  <CSReachabilityControlling> *reachabilityController
 @property  <CSCarPlayStatusProviding> *carPlayStatusProvider
 @property  <CSOverlayProviding> *homeScreenOverlayProvider
 @property  <CSAppHostConfiguring> *appHostConfiguring
 @property  <CSSystemPointerInteractionManaging> *systemPointerInteractionManager
 @property  <CSProximitySensorProviding> *proximitySensorProvider
 @property  <CSDeviceOrientationProviding> *deviceOrientationProvider

  // instance methods
  -[SBDefaultCoverSheetContext resetState]
  -[SBDefaultCoverSheetContext overlayControllerDidBeginChangingPresentationProgress:]
  -[SBDefaultCoverSheetContext platterHomeGestureManager]
  -[SBDefaultCoverSheetContext logout]
  -[SBDefaultCoverSheetContext overlayController:visibilityDidChange:]
  -[SBDefaultCoverSheetContext mediaController]
  -[SBDefaultCoverSheetContext dateProvider]
  -[SBDefaultCoverSheetContext authenticationStatusProvider]
  -[SBDefaultCoverSheetContext restoreState]
  -[SBDefaultCoverSheetContext attemptUnlockWithPasscode:finishUIUnlock:completion:]
  -[SBDefaultCoverSheetContext accessoryDetachedNotificationName]
  -[SBDefaultCoverSheetContext appHostConfiguring]
  -[SBDefaultCoverSheetContext isResetting]
  -[SBDefaultCoverSheetContext applicationHosterForBundleIdentifier:]
  -[SBDefaultCoverSheetContext powerStatusProvider]
  -[SBDefaultCoverSheetContext isRestoring]
  -[SBDefaultCoverSheetContext _todayViewControllerIfAvailable]
  -[SBDefaultCoverSheetContext rawDeviceOrientationIgnoringOrientationLocks]
  -[SBDefaultCoverSheetContext authenticationManager]
  -[SBDefaultCoverSheetContext unregisterView:]
  -[SBDefaultCoverSheetContext wallpaperViewProvider]
  -[SBDefaultCoverSheetContext dismissModalContentIfVisibleAnimated:]
  -[SBDefaultCoverSheetContext modalHomeAffordanceController]
  -[SBDefaultCoverSheetContext screenWakeAnimationController]
  -[SBDefaultCoverSheetContext homeScreenOverlayProvider]
  -[SBDefaultCoverSheetContext .cxx_destruct]
  -[SBDefaultCoverSheetContext reachabilityController]
  -[SBDefaultCoverSheetContext accessoryAnimationStatusChangedNotificationName]
  -[SBDefaultCoverSheetContext unlockRequester]
  -[SBDefaultCoverSheetContext applicationInformer]
  -[SBDefaultCoverSheetContext isObjectInProximity]
  -[SBDefaultCoverSheetContext contentActionProvider]
  -[SBDefaultCoverSheetContext removeProximitySensorProviderObserver:]
  -[SBDefaultCoverSheetContext setBiometricAutoUnlockingDisabled:forReason:]
  -[SBDefaultCoverSheetContext touchEnvironmentStatusProvider]
  -[SBDefaultCoverSheetContext createUnlockRequestForActionContext:]
  -[SBDefaultCoverSheetContext powerStatusChangeNotificationName]
  -[SBDefaultCoverSheetContext authenticationAssertionProvider]
  -[SBDefaultCoverSheetContext init]
  -[SBDefaultCoverSheetContext registerView:delegate:]
  -[SBDefaultCoverSheetContext homeAffordanceController]
  -[SBDefaultCoverSheetContext userSessionController]
  -[SBDefaultCoverSheetContext expectsPocketTouches]
  -[SBDefaultCoverSheetContext lockOutStatusProvider]
  -[SBDefaultCoverSheetContext setPasscodeVisible:animated:]
  -[SBDefaultCoverSheetContext wallpaperLogger]
  -[SBDefaultCoverSheetContext proximitySensorProvider]
  -[SBDefaultCoverSheetContext dismissableOverlays]
  -[SBDefaultCoverSheetContext screenStateProvider]
  -[SBDefaultCoverSheetContext biometricResource]
  -[SBDefaultCoverSheetContext createUnlockRequest]
  -[SBDefaultCoverSheetContext newOverlayController]
  -[SBDefaultCoverSheetContext overlayController:didChangePresentationProgress:newPresentationProgress:fromLeading:]
  -[SBDefaultCoverSheetContext deviceOrientationProvider]
  -[SBDefaultCoverSheetContext systemPointerInteractionManager]
  -[SBDefaultCoverSheetContext unlockWithRequest:completion:]
  -[SBDefaultCoverSheetContext isEmergencyCallSupported]
  -[SBDefaultCoverSheetContext carPlayStatusProvider]
  -[SBDefaultCoverSheetContext incrementIrisPlayCount]
  -[SBDefaultCoverSheetContext resetRestoreStatusProvider]
  -[SBDefaultCoverSheetContext accessoryAttachedNotificationName]
  -[SBDefaultCoverSheetContext passcodeFieldChangeObserver]
  -[SBDefaultCoverSheetContext legibilityProvider]
  -[SBDefaultCoverSheetContext thermalStatusProvider]
  -[SBDefaultCoverSheetContext deactivateReachability]
  -[SBDefaultCoverSheetContext isLogoutSupported]
  -[SBDefaultCoverSheetContext statusBarController]
  -[SBDefaultCoverSheetContext proximitySensorManager:crudeProximityDidChange:]
  -[SBDefaultCoverSheetContext stopMediaPlaybackForSource:]
  -[SBDefaultCoverSheetContext isCarPlayActiveForNotifications]
  -[SBDefaultCoverSheetContext addProximitySensorProviderObserver:]
  -[SBDefaultCoverSheetContext notificationPresenter]
  -[SBDefaultCoverSheetContext accessoryStatusProvider]
  -[SBDefaultCoverSheetContext telephonyStatusProvider]
  -[SBDefaultCoverSheetContext wantsHomeScreenOverlay]


SBHIDValueModifyingButtonSetArbiter : NSObject <SBHIDButtonStateDelegate>
 @property  double initialRepeatDelay
 @property  double subsequentRepeatDelay
 @property  <SBHIDValueModifyingButtonSetArbiterDelegate> *delegate

  // instance methods
  -[SBHIDValueModifyingButtonSetArbiter performActionsForButtonLongPress:]
  -[SBHIDValueModifyingButtonSetArbiter .cxx_destruct]
  -[SBHIDValueModifyingButtonSetArbiter setDelegate:]
  -[SBHIDValueModifyingButtonSetArbiter reset]
  -[SBHIDValueModifyingButtonSetArbiter delegate]
  -[SBHIDValueModifyingButtonSetArbiter performActionsForButtonUp:]
  -[SBHIDValueModifyingButtonSetArbiter dealloc]
  -[SBHIDValueModifyingButtonSetArbiter performActionsForButtonDown:]
  -[SBHIDValueModifyingButtonSetArbiter initWithHIDKeyPressEventUsages:initialRepeatDelay:subsequentRepeatDelay:]
  -[SBHIDValueModifyingButtonSetArbiter processKeyboardEvent:]
  -[SBHIDValueModifyingButtonSetArbiter _cancelRepeatingActionTimer]
  -[SBHIDValueModifyingButtonSetArbiter _performActionForButton:]
  -[SBHIDValueModifyingButtonSetArbiter _startRepeatingActionTimer]
  -[SBHIDValueModifyingButtonSetArbiter _fireRepeatingActionTimer]
  -[SBHIDValueModifyingButtonSetArbiter initialRepeatDelay]
  -[SBHIDValueModifyingButtonSetArbiter setInitialRepeatDelay:]
  -[SBHIDValueModifyingButtonSetArbiter subsequentRepeatDelay]
  -[SBHIDValueModifyingButtonSetArbiter setSubsequentRepeatDelay:]


SBAirplaneModeController : NSObject <RadiosPreferencesDelegate>
 @property  BOOL inAirplaneMode
 @property  <SBAirplaneModeDelegate> *delegate

  // class methods
  +[SBAirplaneModeController sharedInstance]

  // instance methods
  -[SBAirplaneModeController setInAirplaneMode:]
  -[SBAirplaneModeController isInAirplaneMode]
  -[SBAirplaneModeController .cxx_destruct]
  -[SBAirplaneModeController setDelegate:]
  -[SBAirplaneModeController init]
  -[SBAirplaneModeController delegate]
  -[SBAirplaneModeController airplaneModeChanged]


SBWindowedAccessoryView : UIView
 @property  UIButton *forceDetachWindowedAcessoryButton
 @property  <SBWindowedAccessoryViewDelegate> *delegate
 @property  UIColor *backgroundColor

  // instance methods
  -[SBWindowedAccessoryView backgroundColor]
  -[SBWindowedAccessoryView .cxx_destruct]
  -[SBWindowedAccessoryView layoutSubviews]
  -[SBWindowedAccessoryView setDelegate:]
  -[SBWindowedAccessoryView setBackgroundColor:]
  -[SBWindowedAccessoryView initWithFrame:]
  -[SBWindowedAccessoryView delegate]
  -[SBWindowedAccessoryView _forceDetachWindowedAcessoryButtonTapped:]
  -[SBWindowedAccessoryView forceDetachWindowedAcessoryButton]
  -[SBWindowedAccessoryView setForceDetachWindowedAcessoryButton:]


SBSwapFullScreenAppSidesSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSwapFullScreenAppSidesSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBSwapFullScreenAppSidesSwitcherModifier transitionWillBegin]
  -[SBSwapFullScreenAppSidesSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSwapFullScreenAppSidesSwitcherModifier .cxx_destruct]
  -[SBSwapFullScreenAppSidesSwitcherModifier topMostLayoutRolesForAppLayout:]
  -[SBSwapFullScreenAppSidesSwitcherModifier handleTimerEvent:]
  -[SBSwapFullScreenAppSidesSwitcherModifier cornerRadiiForIndex:]
  -[SBSwapFullScreenAppSidesSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:layoutRoleToKeepOnTop:]


SBStartupTransitionContext : NSObject <BSDescriptionProviding>
 @property  NSString *reason
 @property  NSURL *applicationLaunchURL
 @property  NSString *fromApplicationBundleID
 @property  BOOL fromLocked
 @property  BOOL fromUserPowerDown
 @property  BOOL dark
 @property  BOOL login
 @property  BOOL logout
 @property  BOOL hasUserSwitchOverlayMismatch
 @property  BKSDisplayRenderOverlay *overlay
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBStartupTransitionContext setLogin:]
  -[SBStartupTransitionContext overlay]
  -[SBStartupTransitionContext isDark]
  -[SBStartupTransitionContext .cxx_destruct]
  -[SBStartupTransitionContext succinctDescriptionBuilder]
  -[SBStartupTransitionContext descriptionBuilderWithMultilinePrefix:]
  -[SBStartupTransitionContext _representation]
  -[SBStartupTransitionContext isEqual:]
  -[SBStartupTransitionContext descriptionWithMultilinePrefix:]
  -[SBStartupTransitionContext succinctDescription]
  -[SBStartupTransitionContext reason]
  -[SBStartupTransitionContext applicationLaunchURL]
  -[SBStartupTransitionContext isLogin]
  -[SBStartupTransitionContext setReason:]
  -[SBStartupTransitionContext setOverlay:]
  -[SBStartupTransitionContext setFromUserPowerDown:]
  -[SBStartupTransitionContext setApplicationLaunchURL:]
  -[SBStartupTransitionContext hasUserSwitchOverlayMismatch]
  -[SBStartupTransitionContext fromUserPowerDown]
  -[SBStartupTransitionContext _reallyInitFromRepresentation:]
  -[SBStartupTransitionContext _parseOverlayInfo]
  -[SBStartupTransitionContext _initWithRepresentation:loginSession:]
  -[SBStartupTransitionContext _initWithRestartRequest:fromLocked:fromApplication:]
  -[SBStartupTransitionContext _initWithRebootContext:]
  -[SBStartupTransitionContext _initWithShutdownContext:]
  -[SBStartupTransitionContext fromApplicationBundleID]
  -[SBStartupTransitionContext setFromApplicationBundleID:]
  -[SBStartupTransitionContext fromLocked]
  -[SBStartupTransitionContext setFromLocked:]
  -[SBStartupTransitionContext isLogout]
  -[SBStartupTransitionContext setLogout:]
  -[SBStartupTransitionContext setDark:]
  -[SBStartupTransitionContext setHasUserSwitchOverlayMismatch:]


SBCenterWindowCommitSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCenterWindowCommitSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBCenterWindowCommitSwitcherModifier transitionWillBegin]
  -[SBCenterWindowCommitSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCenterWindowCommitSwitcherModifier scaleForIndex:]
  -[SBCenterWindowCommitSwitcherModifier frameForIndex:]
  -[SBCenterWindowCommitSwitcherModifier visibleAppLayouts]
  -[SBCenterWindowCommitSwitcherModifier .cxx_destruct]
  -[SBCenterWindowCommitSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBCenterWindowCommitSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBCenterWindowCommitSwitcherModifier topMostLayoutElements]
  -[SBCenterWindowCommitSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBCenterWindowCommitSwitcherModifier initWithTransitionID:fromAppLayout:]


SBLayoutStateManager : NSObject
  // class methods
  +[SBLayoutStateManager _initialLayoutState]
  +[SBLayoutStateManager _layoutStateClass]

  // instance methods
  -[SBLayoutStateManager layoutStateForApplicationTransitionContext:]
  -[SBLayoutStateManager _layoutStateForApplicationTransitionContext:]


SBHardwareButtonZStackClient : NSObject <SBHardwareButtonServiceObserver, SBFZStackParticipantDelegate>
 @property  SBFZStackResolver *zStackResolver
 @property  SBHardwareButtonService *hardwareButtonService
 @property  SBFZStackParticipant *zStackParticipant
 @property  <BSInvalidatable> *hardwareButtonObserverAssertion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHardwareButtonZStackClient zStackResolver]
  -[SBHardwareButtonZStackClient zStackParticipant:updatePreferences:]
  -[SBHardwareButtonZStackClient zStackParticipantDidChange:]
  -[SBHardwareButtonZStackClient .cxx_destruct]
  -[SBHardwareButtonZStackClient zStackParticipant]
  -[SBHardwareButtonZStackClient setZStackParticipant:]
  -[SBHardwareButtonZStackClient dealloc]
  -[SBHardwareButtonZStackClient initWithZStackResolver:hardwareButtonService:]
  -[SBHardwareButtonZStackClient buttonService:buttonKind:eventsConsumedDidChange:]
  -[SBHardwareButtonZStackClient _updateZStackParticipant]
  -[SBHardwareButtonZStackClient hardwareButtonService]
  -[SBHardwareButtonZStackClient hardwareButtonObserverAssertion]
  -[SBHardwareButtonZStackClient setHardwareButtonObserverAssertion:]


SBSceneResizeGestureRootSwitcherModifier : SBGestureRootSwitcherModifier
  // instance methods
  -[SBSceneResizeGestureRootSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBSceneResizeGestureRootSwitcherModifier .cxx_destruct]
  -[SBSceneResizeGestureRootSwitcherModifier isSwitcherWindowVisible]
  -[SBSceneResizeGestureRootSwitcherModifier wallpaperStyle]
  -[SBSceneResizeGestureRootSwitcherModifier gestureType]
  -[SBSceneResizeGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBSceneResizeGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBSceneResizeGestureRootSwitcherModifier initWithAppLayout:spaceConfiguration:]


SBSceneReadySwitcherModifierEvent : SBSwitcherModifierEvent
 @property  SBAppLayout *appLayout

  // instance methods
  -[SBSceneReadySwitcherModifierEvent appLayout]
  -[SBSceneReadySwitcherModifierEvent .cxx_destruct]
  -[SBSceneReadySwitcherModifierEvent initWithAppLayout:]
  -[SBSceneReadySwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBSceneReadySwitcherModifierEvent type]
  -[SBSceneReadySwitcherModifierEvent copyWithZone:]


SBAnimationWrapperHostRequester : NSObject <SBSceneViewPresentationConfiguring>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAnimationWrapperHostRequester sharedRequester]

  // instance methods
  -[SBAnimationWrapperHostRequester sceneViewPresentationIdentifier:]
  -[SBAnimationWrapperHostRequester sceneViewPresentationPriority:]


SBDashBoardSetupController : NSObject <CSExternalBehaviorProviding, CSExternalEventHandling>
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDashBoardSetupController coverSheetIdentifier]
  -[SBDashBoardSetupController conformsToCSBehaviorProviding]
  -[SBDashBoardSetupController conformsToCSExternalBehaviorProviding]
  -[SBDashBoardSetupController _addOrRemoveSetupViewIfNecessaryAnimated:]
  -[SBDashBoardSetupController .cxx_destruct]
  -[SBDashBoardSetupController wouldHandleButtonEvent:]
  -[SBDashBoardSetupController _clearSetupViewIfNecessaryAnimated:]
  -[SBDashBoardSetupController _configureForCurrentSetupMode]
  -[SBDashBoardSetupController participantState]
  -[SBDashBoardSetupController init]
  -[SBDashBoardSetupController _setupModeChanged:]
  -[SBDashBoardSetupController handleEvent:]
  -[SBDashBoardSetupController restrictedCapabilities]
  -[SBDashBoardSetupController proximityDetectionMode]
  -[SBDashBoardSetupController dealloc]
  -[SBDashBoardSetupController scrollingStrategy]
  -[SBDashBoardSetupController conformsToCSEventHandling]
  -[SBDashBoardSetupController initWithCoverSheetViewController:setupManager:]
  -[SBDashBoardSetupController notificationBehavior]


SBIdleTimerBase : NSObject <SBIdleTimerActivation, SBIdleTimer>
 @property  NSHashTable *observers
 @property  BOOL activated
 @property  BOOL disabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerBase _enumerateObserversRespondingToSelector:usingBlock:]
  -[SBIdleTimerBase _logExpirationTimeout:]
  -[SBIdleTimerBase addIdleTimerObserver:]
  -[SBIdleTimerBase _makeObserversPerformSelector:]
  -[SBIdleTimerBase isEqualToTimer:]
  -[SBIdleTimerBase conformsToSBIdleTimerActivation]
  -[SBIdleTimerBase removeAllIdleTimerObservers]
  -[SBIdleTimerBase .cxx_destruct]
  -[SBIdleTimerBase succinctDescriptionBuilder]
  -[SBIdleTimerBase setActivated:]
  -[SBIdleTimerBase descriptionBuilderWithMultilinePrefix:]
  -[SBIdleTimerBase descriptionWithMultilinePrefix:]
  -[SBIdleTimerBase succinctDescription]
  -[SBIdleTimerBase removeIdleTimerObserver:]
  -[SBIdleTimerBase reset]
  -[SBIdleTimerBase isActivated]
  -[SBIdleTimerBase observers]
  -[SBIdleTimerBase copyWithZone:]
  -[SBIdleTimerBase isDisabled]


SBReachabilityTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBReachabilityTestRecipe load]

  // instance methods
  -[SBReachabilityTestRecipe title]
  -[SBReachabilityTestRecipe handleVolumeIncrease]
  -[SBReachabilityTestRecipe handleVolumeDecrease]


SBGridToActiveAppLayoutsSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBGridToActiveAppLayoutsSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBGridToActiveAppLayoutsSwitcherModifier homeScreenBackdropBlurType]
  -[SBGridToActiveAppLayoutsSwitcherModifier titleOpacityForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier transitionWillBegin]
  -[SBGridToActiveAppLayoutsSwitcherModifier wallpaperScale]
  -[SBGridToActiveAppLayoutsSwitcherModifier homeScreenScale]
  -[SBGridToActiveAppLayoutsSwitcherModifier homeScreenAlpha]
  -[SBGridToActiveAppLayoutsSwitcherModifier isHomeScreenContentRequired]
  -[SBGridToActiveAppLayoutsSwitcherModifier animationAttributesForLayoutElement:]
  -[SBGridToActiveAppLayoutsSwitcherModifier scaleForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBGridToActiveAppLayoutsSwitcherModifier handleTransitionEvent:]
  -[SBGridToActiveAppLayoutsSwitcherModifier frameForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBGridToActiveAppLayoutsSwitcherModifier visibleAppLayouts]
  -[SBGridToActiveAppLayoutsSwitcherModifier .cxx_destruct]
  -[SBGridToActiveAppLayoutsSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBGridToActiveAppLayoutsSwitcherModifier isSwitcherWindowVisible]
  -[SBGridToActiveAppLayoutsSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBGridToActiveAppLayoutsSwitcherModifier _layoutSettings]
  -[SBGridToActiveAppLayoutsSwitcherModifier wallpaperStyle]
  -[SBGridToActiveAppLayoutsSwitcherModifier cornerRadiiForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBGridToActiveAppLayoutsSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBGridToActiveAppLayoutsSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier topMostLayoutElements]
  -[SBGridToActiveAppLayoutsSwitcherModifier initWithTransitionID:direction:activeAppLayouts:gridModifier:]
  -[SBGridToActiveAppLayoutsSwitcherModifier _isEffectivelyFullScreen]
  -[SBGridToActiveAppLayoutsSwitcherModifier _isIndexActive:]
  -[SBGridToActiveAppLayoutsSwitcherModifier _unselectedCardScale]


SBDragAndDropWorkspaceTransaction : SBMainWorkspaceTransaction <SBWorkspaceApplicationSceneTransitionContextDelegate, SBSceneLayoutWorkspaceTransactionObserver, UIDragInteractionDelegate_Private, UIDropInteractionDelegate_Private>
 @property  BOOL dragging
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDragAndDropWorkspaceTransaction shouldTrackLocationOfDropSession:inSwitcherContentController:sceneManager:]
  +[SBDragAndDropWorkspaceTransaction _shouldTrackLocationOfDropSession:inSwitcherContentController:sceneManager:isCurrentlyTracking:]
  +[SBDragAndDropWorkspaceTransaction prototypeSettingsContentDraggingCommandeerInsetForUniversalControl]
  +[SBDragAndDropWorkspaceTransaction isDragOverFullscreenRegionAtLocation:inBounds:]
  +[SBDragAndDropWorkspaceTransaction _screenInsetsForUIDragDropSession:]
  +[SBDragAndDropWorkspaceTransaction screenEdgeForDragOverSideGutterRegionsAtLocation:inBounds:totalContentDragGutterWidth:screenInsets:]
  +[SBDragAndDropWorkspaceTransaction prototypeSettingsContentDraggingSideActivationWidth]
  +[SBDragAndDropWorkspaceTransaction prototypeSettingsContentDraggingFloatingActivationWidth]
  +[SBDragAndDropWorkspaceTransaction prototypeSettingsContentDraggingCommandeerWidth]
  +[SBDragAndDropWorkspaceTransaction prototypeSettingsWindowTearOffDraggingSideActivationWidth]
  +[SBDragAndDropWorkspaceTransaction prototypeSettingsWindowTearOffDraggingFloatingActivationWidth]
  +[SBDragAndDropWorkspaceTransaction sourceSceneInterfaceOrientedBoundsForDropSession:sceneManager:]
  +[SBDragAndDropWorkspaceTransaction prototypeSettingsFullscreenActivationRegionSize]
  +[SBDragAndDropWorkspaceTransaction prototypeSettingsSideActivationGutterSize]

  // instance methods
  -[SBDragAndDropWorkspaceTransaction _willInterruptWithReason:]
  -[SBDragAndDropWorkspaceTransaction dropInteraction:item:willAnimateDropWithAnimator:]
  -[SBDragAndDropWorkspaceTransaction _dropInteraction:customSpringAnimationBehaviorForDroppingItem:]
  -[SBDragAndDropWorkspaceTransaction _didComplete]
  -[SBDragAndDropWorkspaceTransaction layoutStateForApplicationTransitionContext:]
  -[SBDragAndDropWorkspaceTransaction applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBDragAndDropWorkspaceTransaction _begin]
  -[SBDragAndDropWorkspaceTransaction _childTransactionDidComplete:]
  -[SBDragAndDropWorkspaceTransaction _canBeInterrupted]
  -[SBDragAndDropWorkspaceTransaction _didInterruptWithReason:]
  -[SBDragAndDropWorkspaceTransaction _dragInteraction:customSpringAnimationBehaviorForCancellingItem:]
  -[SBDragAndDropWorkspaceTransaction .cxx_destruct]
  -[SBDragAndDropWorkspaceTransaction dragInteraction:previewForLiftingItem:session:]
  -[SBDragAndDropWorkspaceTransaction dropInteraction:sessionDidExit:]
  -[SBDragAndDropWorkspaceTransaction dragInteraction:willAnimateLiftWithAnimator:session:]
  -[SBDragAndDropWorkspaceTransaction isDragging]
  -[SBDragAndDropWorkspaceTransaction dragInteraction:itemsForBeginningSession:]
  -[SBDragAndDropWorkspaceTransaction dropInteraction:sessionDidUpdate:]
  -[SBDragAndDropWorkspaceTransaction dragInteraction:previewForCancellingItem:withDefault:]
  -[SBDragAndDropWorkspaceTransaction transaction:didCommitSceneUpdate:]
  -[SBDragAndDropWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBDragAndDropWorkspaceTransaction dragInteraction:sessionDidMove:]
  -[SBDragAndDropWorkspaceTransaction dragInteraction:session:willEndWithOperation:]
  -[SBDragAndDropWorkspaceTransaction dragInteraction:sessionWillBegin:]
  -[SBDragAndDropWorkspaceTransaction previousLayoutStateForApplicationTransitionContext:]
  -[SBDragAndDropWorkspaceTransaction dropInteraction:sessionDidEnter:]
  -[SBDragAndDropWorkspaceTransaction _dragInteractionDidCancelLiftWithoutDragging:]
  -[SBDragAndDropWorkspaceTransaction dropInteraction:performDrop:]
  -[SBDragAndDropWorkspaceTransaction dragInteraction:item:willAnimateCancelWithAnimator:]
  -[SBDragAndDropWorkspaceTransaction _noteSwitcherDropAnimationCompletedWithContext:]
  -[SBDragAndDropWorkspaceTransaction dealloc]
  -[SBDragAndDropWorkspaceTransaction dropInteraction:sessionDidEnd:]
  -[SBDragAndDropWorkspaceTransaction dropInteraction:concludeDrop:]
  -[SBDragAndDropWorkspaceTransaction dropInteraction:previewForDroppingItem:withDefault:]
  -[SBDragAndDropWorkspaceTransaction dragInteraction:session:didEndWithOperation:]
  -[SBDragAndDropWorkspaceTransaction matchesUIDragDropSession:]
  -[SBDragAndDropWorkspaceTransaction matchesApplicationDropSession:]
  -[SBDragAndDropWorkspaceTransaction initWithTransitionRequest:switcherContentController:sceneManager:dropSession:delegate:]
  -[SBDragAndDropWorkspaceTransaction blurReadinessDidChange]
  -[SBDragAndDropWorkspaceTransaction _currentGestureEventForGesture:]
  -[SBDragAndDropWorkspaceTransaction _addChildWorkspaceTransaction:]
  -[SBDragAndDropWorkspaceTransaction _platterScale]
  -[SBDragAndDropWorkspaceTransaction _setupPlatterPreviewForContentDrag]
  -[SBDragAndDropWorkspaceTransaction _createPlatterPreviewForApplication:withSourceView:dropSession:]
  -[SBDragAndDropWorkspaceTransaction _configurePlatterPreview:forSceneHandle:completion:]
  -[SBDragAndDropWorkspaceTransaction _updatePlatterPreviewForSetDown:animated:]
  -[SBDragAndDropWorkspaceTransaction _updateActiveSourceViewProviderWithDragState:]
  -[SBDragAndDropWorkspaceTransaction _updateAnchorPointForPlatterPreview:dragPreview:withSourceViewBounds:location:]
  -[SBDragAndDropWorkspaceTransaction _handleSessionDidUpdate:]
  -[SBDragAndDropWorkspaceTransaction _handleSessionDidPerformDrop:]
  -[SBDragAndDropWorkspaceTransaction _handleSessionDidEnd:]
  -[SBDragAndDropWorkspaceTransaction _layoutRoleForDropAction:]
  -[SBDragAndDropWorkspaceTransaction _dragPreviewForDroppingItem:withDefault:]
  -[SBDragAndDropWorkspaceTransaction _handleWillAnimateDropWithAnimator:]
  -[SBDragAndDropWorkspaceTransaction _updateCurrentDropActionProposedLayoutState]
  -[SBDragAndDropWorkspaceTransaction _cleanUpAndCompleteTransactionIfNecessary]
  -[SBDragAndDropWorkspaceTransaction _interruptForDragExitedDropZoneIfNecessary]
  -[SBDragAndDropWorkspaceTransaction _updateForWindowDragForSession:]
  -[SBDragAndDropWorkspaceTransaction _updateCurrentDropActionForSession:]
  -[SBDragAndDropWorkspaceTransaction _commitRecencyModelUpdateForDropContext:]
  -[SBDragAndDropWorkspaceTransaction _transitionRequestForDropAction:]
  -[SBDragAndDropWorkspaceTransaction _shouldFailLayoutStateTransitionForWindowDrag]
  -[SBDragAndDropWorkspaceTransaction _runFinalLayoutStateTransaction]
  -[SBDragAndDropWorkspaceTransaction _updatePlatterViewBlurForDropCompletion]
  -[SBDragAndDropWorkspaceTransaction _uncommandeerContentDrag]
  -[SBDragAndDropWorkspaceTransaction _displayLinkDidUpdate:]
  -[SBDragAndDropWorkspaceTransaction _platterScaleForSwitcherDropContext:]
  -[SBDragAndDropWorkspaceTransaction _getPrimaryLayoutElementViewFrame:sideLayoutElementViewFrame:forDropAction:proposedDropLayoutState:state:spaceConfiguration:]
  -[SBDragAndDropWorkspaceTransaction _platterSizeForSwitcherDropContext:setDown:]
  -[SBDragAndDropWorkspaceTransaction _platterSourceViewScaleForSetDropAction:setDown:]
  -[SBDragAndDropWorkspaceTransaction _platterSizeForDropAction:proposedDropLayoutState:setDown:]
  -[SBDragAndDropWorkspaceTransaction _cornerRadiusForSwitcherDragContext:setDown:sourceViewScale:]
  -[SBDragAndDropWorkspaceTransaction _cornerRadiusConfigurationForDropAction:proposedDropLayoutState:setDown:mode:]
  -[SBDragAndDropWorkspaceTransaction _getPlatterDiffuseShadowParameters:rimShadowParameters:diffuseFilters:rimFilters:forDropAction:setDown:mode:userInterfaceStyle:]
  -[SBDragAndDropWorkspaceTransaction _endDragAndDropFluidGesture]
  -[SBDragAndDropWorkspaceTransaction _updatePlatterPreviewWithUpdatedSourceView]
  -[SBDragAndDropWorkspaceTransaction _platterFrameInSwitcherView]
  -[SBDragAndDropWorkspaceTransaction _willInterruptForTransitionRequest:]
  -[SBDragAndDropWorkspaceTransaction _sizeForFloatingApplication]
  -[SBDragAndDropWorkspaceTransaction _shouldPushInSceneLayoutViewControllerForDropAction:]
  -[SBDragAndDropWorkspaceTransaction _showResizeUI]
  -[SBDragAndDropWorkspaceTransaction _getPrimaryLayoutElementViewFrame:sideLayoutElementViewFrame:forDropAction:proposedDropLayoutState:state:]
  -[SBDragAndDropWorkspaceTransaction resizeUIAnimationFactory]


SBAssistantController : NSObject <SBFluidGestureDismissable, CSExternalBehaviorProviding, SBFIdleTimerBehaviorProviding, PTSettingsKeyObserver, SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBFAuthenticationResponder, SiriPresentationSpringBoardMainScreenViewControllerDelegate, UIGestureRecognizerDelegate, SBSystemGestureRecognizerDelegate, SBHomeGesturePanGestureRecognizerInterfaceDelegate, SBIdleTimerProviding, CSCoverSheetOverlaying>
 @property  SBFluidDismissalState *fluidDismissalState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <BSInvalidatable> *suspendWallpaperAnimationAssertion
 @property  BOOL enabled
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  BOOL unlockedDevice
 @property  BOOL visible
 @property  BOOL contentObscuresScreen
 @property  BOOL preventsCoverSheetPresentation
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout

  // class methods
  +[SBAssistantController sharedInstance]
  +[SBAssistantController sharedInstanceIfExists]
  +[SBAssistantController isVisible]
  +[SBAssistantController bootstrapServices]
  +[SBAssistantController shouldBreadcrumbLaunchedApplicationWithBundleIdentifier:]
  +[SBAssistantController shouldDismissSiriForGestureTranslation:velocity:]

  // instance methods
  -[SBAssistantController setSuspendWallpaperAnimationAssertion:]
  -[SBAssistantController _updateWindowLevel]
  -[SBAssistantController suspendWallpaperAnimationAssertion]
  -[SBAssistantController coordinatorRequestedIdleTimerBehavior:]
  -[SBAssistantController touchInterfaceOrientationForGestureRecognizer:]
  -[SBAssistantController _setIdleTimerCoordinator:]
  -[SBAssistantController rootViewController]
  -[SBAssistantController dismissOverlayForDashBoardAnimated:]
  -[SBAssistantController coverSheetIdentifier]
  -[SBAssistantController _idleTimerCoordinator]
  -[SBAssistantController activationSettings]
  -[SBAssistantController conformsToCSBehaviorProviding]
  -[SBAssistantController _updateZStackParticipantWithReason:]
  -[SBAssistantController acquireWindowLevelAssertionWithPriority:windowLevel:reason:]
  -[SBAssistantController idleTimerMode]
  -[SBAssistantController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBAssistantController conformsToCSExternalBehaviorProviding]
  -[SBAssistantController idleWarnMode]
  -[SBAssistantController zStackParticipant:updatePreferences:]
  -[SBAssistantController zStackParticipantDidChange:]
  -[SBAssistantController .cxx_destruct]
  -[SBAssistantController idleTimerDuration]
  -[SBAssistantController shouldShowLockStatusBarTime]
  -[SBAssistantController setFluidDismissalState:]
  -[SBAssistantController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBAssistantController requestPasscodeUnlockWithCompletion:]
  -[SBAssistantController participantState]
  -[SBAssistantController homeGestureParticipantResolvedHomeAffordanceSuppressionDidChange:]
  -[SBAssistantController init]
  -[SBAssistantController viewForSystemGestureRecognizer:]
  -[SBAssistantController isVisible]
  -[SBAssistantController homeGrabberViewDidReceiveClick:]
  -[SBAssistantController gestureRecognizerShouldBegin:]
  -[SBAssistantController addObserver:]
  -[SBAssistantController isEnabled]
  -[SBAssistantController _idleTimerBehavior]
  -[SBAssistantController settings:changedValueForKey:]
  -[SBAssistantController restrictedCapabilities]
  -[SBAssistantController _init]
  -[SBAssistantController _updateHomeGestureParticipant]
  -[SBAssistantController proximityDetectionMode]
  -[SBAssistantController dealloc]
  -[SBAssistantController window]
  -[SBAssistantController scrollingStrategy]
  -[SBAssistantController removeObserver:]
  -[SBAssistantController observeValueForKeyPath:ofObject:change:context:]
  -[SBAssistantController notificationBehavior]
  -[SBAssistantController handleSuccessfulAuthenticationRequest:]
  -[SBAssistantController handleFailedAuthenticationRequest:error:]
  -[SBAssistantController handleInvalidAuthenticationRequest:]
  -[SBAssistantController _setVisible:]
  -[SBAssistantController applicationProcessDidChangeState:]
  -[SBAssistantController dismissAssistantViewIfNecessary]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithAnimation:]
  -[SBAssistantController shouldShowSystemVolumeHUDForCategory:]
  -[SBAssistantController dismissAssistantViewIfNecessaryForGestureTranslation:velocity:]
  -[SBAssistantController contentObscuresScreen]
  -[SBAssistantController fluidDismissalState]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithAnimation:completion:]
  -[SBAssistantController _prototypeSettingsChanged]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithAnimation:factory:dismissalOptions:completion:]
  -[SBAssistantController _defaultAnimatedDismissDurationForMainScreen]
  -[SBAssistantController _dismissForMainScreenWithFactory:dismissalOptions:completion:]
  -[SBAssistantController _activationSettingsWithPunchoutStyle:]
  -[SBAssistantController _configureHomeGesture]
  -[SBAssistantController _updateOrientationLock]
  -[SBAssistantController _toggleModalAlertHidingAssertion:]
  -[SBAssistantController _bioAuthenticated:]
  -[SBAssistantController _dockFrameDidChange:]
  -[SBAssistantController _updateOrbLocation:]
  -[SBAssistantController _resetSystemGestures]
  -[SBAssistantController _setShareHomeGesture:]
  -[SBAssistantController _teardownWindowInUse]
  -[SBAssistantController deviceUnlockRequestedWithPassword:]
  -[SBAssistantController _setUnlockedDevice:]
  -[SBAssistantController _updateDockViewFrame:]
  -[SBAssistantController _uiLocked:]
  -[SBAssistantController _deviceBlocked:]
  -[SBAssistantController _remoteLocked:]
  -[SBAssistantController _restoreOrientation]
  -[SBAssistantController _noteDeviceLockedOrBlocked]
  -[SBAssistantController _createTapToDimissSiriGestureRecognizer]
  -[SBAssistantController _createPanToDismissSiriGestureRecognizer]
  -[SBAssistantController _configurePanToDismissGestureDependencies]
  -[SBAssistantController _tearDownSystemGestures]
  -[SBAssistantController _setupSystemGestures]
  -[SBAssistantController _tappedToDismissSiri:]
  -[SBAssistantController _commonHandlerForSiriDismissalGesture:]
  -[SBAssistantController _pannedToDismissSiri:]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithDismissalOptions:]
  -[SBAssistantController _updateSceneClientSettings]
  -[SBAssistantController _createAssistantWindowIfNecessaryForSiriPresentationOptions:]
  -[SBAssistantController _viewWillAppearOnMainScreen:]
  -[SBAssistantController _setStatusBarHidden:animated:]
  -[SBAssistantController _viewDidAppearOnMainScreen:]
  -[SBAssistantController _viewWillDisappearOnMainScreen:]
  -[SBAssistantController _viewDidDisappearOnMainScreen:]
  -[SBAssistantController _removeHomeGesture]
  -[SBAssistantController _handleBottomEdgeDismissGesture:]
  -[SBAssistantController _removeScreenEdgePanGestureRecognizerIfNecessary]
  -[SBAssistantController _updateRootViewControllerOwnsHomeGesture]
  -[SBAssistantController _updateRootViewControllerShowsHomeAffordance:]
  -[SBAssistantController siriPresentation:requestsDeviceUnlockWithPassword:]
  -[SBAssistantController _setTouchesPassThroughToSpringBoard:]
  -[SBAssistantController _presentForMainScreenAnimated:options:completion:]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithAnimation:factory:completion:]
  -[SBAssistantController _turnScreenOffWithCompletion:]
  -[SBAssistantController _siriHomeAffordanceSuppressionAsString:]
  -[SBAssistantController siriPresentation:requestsPresentationWithOptions:withHandler:]
  -[SBAssistantController siriPresentation:requestsDismissalWithOptions:withHandler:]
  -[SBAssistantController siriPresentation:isEnabledDidChange:]
  -[SBAssistantController siriPresentation:setShowsHomeAffordance:]
  -[SBAssistantController siriPresentation:setHomeAffordanceSuppression:]
  -[SBAssistantController siriPresentation:requestsPunchout:withHandler:]
  -[SBAssistantController screenWakeRequested]
  -[SBAssistantController screenWakeIdleTimerResetRequested]
  -[SBAssistantController siriPresentation:didUpdateShouldDismissForTapsOutsideContent:]
  -[SBAssistantController siriPresentation:didUpdateShouldDismissForSwipesOutsideContent:]
  -[SBAssistantController siriPresentation:didUpdateShouldPassTouchesThroughToSpringBoard:]
  -[SBAssistantController siriPresentation:didUpdateHomeGestureSharing:]
  -[SBAssistantController siriPresentation:didUpdateAudioCategoriesDisablingVolumeHUD:]
  -[SBAssistantController overrideInterfaceOrientation:]
  -[SBAssistantController mainScreenView]
  -[SBAssistantController preventsCoverSheetPresentation]
  -[SBAssistantController unlockedDevice]


SBReachabilityMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBReachabilityMetric .cxx_destruct]
  -[SBReachabilityMetric init]


SBAppSwitcherScrollView : BSUIScrollView
  // instance methods
  -[SBAppSwitcherScrollView setContentOffset:]
  -[SBAppSwitcherScrollView contentOffsetVelocityConsideringNextContentOffset:]
  -[SBAppSwitcherScrollView contentOffsetVelocity]


SBDragAndDropToAppTransitionSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBDragAndDropToAppTransitionSwitcherModifier appLayoutsToResignActive]
  -[SBDragAndDropToAppTransitionSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBDragAndDropToAppTransitionSwitcherModifier keyboardSuppressionMode]
  -[SBDragAndDropToAppTransitionSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDragAndDropToAppTransitionSwitcherModifier asyncRenderingAttributesForAppLayout:]


SBCoverSheetAnimator : NSObject
 @property  SBLockToAppStatusBarAnimator *statusBarAnimator
 @property  SBIconZoomAnimator *iconAnimator
 @property  SBWindowSelfHostWrapper *coverSheetWindowHostWrapper
 @property  SBSceneManager *sceneManager
 @property  UIWindow *hostingWindow
 @property  UIWindow *switcherWindow
 @property  SBWallpaperController *wallpaperController
 @property  SBFolderController *folderController
 @property  SBHUnlockSettings *unlockSettings
 @property  BOOL transitioning
 @property  UIWindow *coverSheetWindow

  // instance methods
  -[SBCoverSheetAnimator sceneManager]
  -[SBCoverSheetAnimator setSceneManager:]
  -[SBCoverSheetAnimator wallpaperController]
  -[SBCoverSheetAnimator .cxx_destruct]
  -[SBCoverSheetAnimator setCoverSheetWindow:]
  -[SBCoverSheetAnimator folderController]
  -[SBCoverSheetAnimator coverSheetWindow]
  -[SBCoverSheetAnimator setUnlockSettings:]
  -[SBCoverSheetAnimator setTransitioning:]
  -[SBCoverSheetAnimator isTransitioning]
  -[SBCoverSheetAnimator iconAnimator]
  -[SBCoverSheetAnimator switcherWindow]
  -[SBCoverSheetAnimator unlockSettings]
  -[SBCoverSheetAnimator hostingWindow]
  -[SBCoverSheetAnimator setHostingWindow:]
  -[SBCoverSheetAnimator setIconAnimator:]
  -[SBCoverSheetAnimator setWallpaperController:]
  -[SBCoverSheetAnimator _prepareIconAnimatorIncludingLockScreen:]
  -[SBCoverSheetAnimator _setWallpaperToLocked:duration:]
  -[SBCoverSheetAnimator _updateCoverSheetHosting]
  -[SBCoverSheetAnimator initWithCoverSheetWindow:sceneManager:hostingWindow:switcherWindow:wallpaperController:folderController:unlockSettings:]
  -[SBCoverSheetAnimator animateToCoverSheet:animated:withCompletion:]
  -[SBCoverSheetAnimator statusBarAnimator]
  -[SBCoverSheetAnimator setStatusBarAnimator:]
  -[SBCoverSheetAnimator coverSheetWindowHostWrapper]
  -[SBCoverSheetAnimator setCoverSheetWindowHostWrapper:]
  -[SBCoverSheetAnimator setSwitcherWindow:]
  -[SBCoverSheetAnimator setFolderController:]


SBProximityBacklightPolicyFactory : NSObject
  // class methods
  +[SBProximityBacklightPolicyFactory createNewProximityBacklightPolicyWithBacklightController:]


SBBannerUnfurlSourceContext : NSObject <NSCopying, NSMutableCopying>
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceCoordinateSpaceBounds
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceFrame
 @property  double cornerRadius
 @property  {CGPoint=dd} referenceVelocity

  // instance methods
  -[SBBannerUnfurlSourceContext referenceFrame]
  -[SBBannerUnfurlSourceContext cornerRadius]
  -[SBBannerUnfurlSourceContext mutableCopyWithZone:]
  -[SBBannerUnfurlSourceContext _copyWithClass:]
  -[SBBannerUnfurlSourceContext copyWithZone:]
  -[SBBannerUnfurlSourceContext referenceVelocity]
  -[SBBannerUnfurlSourceContext referenceCoordinateSpaceBounds]


SBMutableBannerUnfurlSourceContext : SBBannerUnfurlSourceContext
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceCoordinateSpaceBounds
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceFrame
 @property  double cornerRadius
 @property  {CGPoint=dd} referenceVelocity

  // instance methods
  -[SBMutableBannerUnfurlSourceContext setCornerRadius:]
  -[SBMutableBannerUnfurlSourceContext setReferenceFrame:]
  -[SBMutableBannerUnfurlSourceContext mutableCopyWithZone:]
  -[SBMutableBannerUnfurlSourceContext copyWithZone:]
  -[SBMutableBannerUnfurlSourceContext setReferenceCoordinateSpaceBounds:]
  -[SBMutableBannerUnfurlSourceContext setReferenceVelocity:]


SBWindowedAccessoryWindow : SBSecureWindow

SBAccessoryController : NSObject <SBWindowedAccessoryViewControllerDelegate>
 @property  SBWindowedAccessoryViewController *windowedAccessoryViewController
 @property  SBWindow *window
 @property  BOOL windowedAccessoryWindowVisiblevisible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAccessoryController sharedInstance]
  +[SBAccessoryController sharedInstanceIfExists]

  // instance methods
  -[SBAccessoryController .cxx_destruct]
  -[SBAccessoryController window]
  -[SBAccessoryController showWindowedAccessoryWindow:]
  -[SBAccessoryController windowedAccessoryViewControllerForceDetachButtonTapped:]
  -[SBAccessoryController _showWindowedAccessoryWindow:]
  -[SBAccessoryController isWindowedAccessoryWindowVisible]
  -[SBAccessoryController windowedAccessoryViewController]
  -[SBAccessoryController setWindowedAccessoryViewController:]


SBChronoHomeScreenUsageObserver : NSObject <SBHHomeScreenUsageMonitorObserver>
 @property  CHSWidgetHost *widgetHost
 @property  SBHIconManager *iconManager
 @property  unsigned long widgetDataGeneration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBChronoHomeScreenUsageObserver _descriptionForArray:name:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteWidgetIconAdded:]
  -[SBChronoHomeScreenUsageObserver .cxx_destruct]
  -[SBChronoHomeScreenUsageObserver widgetDataGeneration]
  -[SBChronoHomeScreenUsageObserver iconManager]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteCurrentPageIndexChanged:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserDislikedWidgetIconStackSuggestion:]
  -[SBChronoHomeScreenUsageObserver init]
  -[SBChronoHomeScreenUsageObserver setWidgetDataGeneration:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteWidgetIconStackChangedActiveWidget:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserAddedWidgetIconStackSuggestion:]
  -[SBChronoHomeScreenUsageObserver _containerDescriptorForWidgetIcon:atLocation:page:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteWidgetIconRemoved:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserTappedWidgetIcon:withURL:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserDislikedSiriSuggestionOnWidgetIconStackSuggestion:]
  -[SBChronoHomeScreenUsageObserver initWithIconManager:]
  -[SBChronoHomeScreenUsageObserver _rebuildAndTransmitConfiguredWidgetData:]
  -[SBChronoHomeScreenUsageObserver widgetHost]


SBModalAlertPresenter : NSObject <BSDescriptionProviding, FBSceneManagerObserver>
 @property  FBScene *scene
 @property  SBModalAlertPresentationCoordinator *modalAlertPresentationCoordinator
 @property  FBSceneManager *sceneManager
 @property  BOOL showingModalAlert
 @property  BOOL foreground
 @property  unsigned long visibleModalAlertCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBModalAlertPresenter sceneManager]
  -[SBModalAlertPresenter setSceneManager:]
  -[SBModalAlertPresenter _setScene:]
  -[SBModalAlertPresenter _addOrRemoveModalAlertPresenterIfNecessaryWithForegroundState:fromOrToTerminalState:]
  -[SBModalAlertPresenter sceneManager:willUpdateScene:withSettings:transitionContext:]
  -[SBModalAlertPresenter isForeground]
  -[SBModalAlertPresenter _addOrRemoveModalAlertPresenterIfNecessary]
  -[SBModalAlertPresenter modalAlertPresentationCoordinator]
  -[SBModalAlertPresenter acquireVisibleModalAlertAssertionWithDescription:]
  -[SBModalAlertPresenter .cxx_destruct]
  -[SBModalAlertPresenter scene]
  -[SBModalAlertPresenter initWithScene:]
  -[SBModalAlertPresenter isShowingModalAlert]
  -[SBModalAlertPresenter succinctDescriptionBuilder]
  -[SBModalAlertPresenter incrementVisibleModalAlertCount]
  -[SBModalAlertPresenter descriptionBuilderWithMultilinePrefix:]
  -[SBModalAlertPresenter visibleModalAlertCount]
  -[SBModalAlertPresenter descriptionWithMultilinePrefix:]
  -[SBModalAlertPresenter setModalAlertPresentationCoordinator:]
  -[SBModalAlertPresenter succinctDescription]
  -[SBModalAlertPresenter _initWithModalAlertPresentationCoordinator:sceneManager:scene:]
  -[SBModalAlertPresenter decrementVisibleModalAlertCount]
  -[SBModalAlertPresenter setVisibleModalAlertCount:]
  -[SBModalAlertPresenter dealloc]
  -[SBModalAlertPresenter invalidate]
  -[SBModalAlertPresenter initForSystemApplication]


SBAlertItemWindow : SBSecureMainScreenActiveInterfaceOrientationWindow
 @property  SBAlertLayoutPresentationVerifier *alertLayoutPresentationVerifier

  // class methods
  +[SBAlertItemWindow _traitsArbiterOrientationActuationRole]

  // instance methods
  -[SBAlertItemWindow _canBecomeKeyWindow]
  -[SBAlertItemWindow actionForLayer:forKey:]
  -[SBAlertItemWindow setCenter:]
  -[SBAlertItemWindow .cxx_destruct]
  -[SBAlertItemWindow setFrame:]
  -[SBAlertItemWindow setTransform:]
  -[SBAlertItemWindow alertLayoutPresentationVerifier]
  -[SBAlertItemWindow initWithRole:debugName:alertLayoutPresentationVerifier:]
  -[SBAlertItemWindow setBounds:]
  -[SBAlertItemWindow setAlertLayoutPresentationVerifier:]


SBSharedModalAlertItemPresenter : NSObject <_SBAlertControllerDelegate, SBModalViewControllerStackDelegate, UIAlertControllerCoordinatedActionPerforming, SBBarSwipeAffordanceObserver, SBBarSwipeAffordanceDelegate, SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBReachabilityObserver>
 @property  SBModalViewControllerStack *modalViewControllerStack
 @property  SBAlertItem *currentlyPresentedAlertItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSharedModalAlertItemPresenter alertControllerDidDisappear:]
  -[SBSharedModalAlertItemPresenter barSwipeAffordanceView:systemGestureTypeForType:]
  -[SBSharedModalAlertItemPresenter homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBSharedModalAlertItemPresenter handleReachabilityYOffsetDidChange]
  -[SBSharedModalAlertItemPresenter zStackParticipant:updatePreferences:]
  -[SBSharedModalAlertItemPresenter zStackParticipantDidChange:]
  -[SBSharedModalAlertItemPresenter .cxx_destruct]
  -[SBSharedModalAlertItemPresenter modalViewControllerStack:willDismissViewController:animated:]
  -[SBSharedModalAlertItemPresenter currentlyPresentedAlertItem]
  -[SBSharedModalAlertItemPresenter homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBSharedModalAlertItemPresenter modalViewControllerStack:didPresentViewController:]
  -[SBSharedModalAlertItemPresenter initWithLockOutProvider:systemGestureManager:homeGestureArbiter:zStackResolver:reachabilityManager:alertLayoutPresentationVerifier:]
  -[SBSharedModalAlertItemPresenter initWithLockOutProvider:systemGestureManager:homeGestureArbiter:zStackResolver:reachabilityManager:alertLayoutPresentationVerifier:enableGestures:]
  -[SBSharedModalAlertItemPresenter modalViewControllerStack:willPresentViewController:]
  -[SBSharedModalAlertItemPresenter homeGrabberViewDidReceiveClick:]
  -[SBSharedModalAlertItemPresenter _setModalViewControllerStack:]
  -[SBSharedModalAlertItemPresenter modalViewControllerStack:didDismissViewController:]
  -[SBSharedModalAlertItemPresenter presentAlertItem:isLocked:animated:completion:]
  -[SBSharedModalAlertItemPresenter _performActionForAlertController:invokeActionBlock:dismissControllerBlock:]
  -[SBSharedModalAlertItemPresenter _updateBarSwipeViewWithAlertController:]
  -[SBSharedModalAlertItemPresenter _updateHomeGestureParticipant]
  -[SBSharedModalAlertItemPresenter dealloc]
  -[SBSharedModalAlertItemPresenter _modalViewControllerStack]
  -[SBSharedModalAlertItemPresenter dismissAlertItem:animated:completion:]


SBPressSequenceSettings : NSObject
 @property  unsigned long numberOfPresses
 @property  double maxDefaultPressDownDuration
 @property  double maxDefaultPressUpDuration
 @property  double maxDownToDownDuration
 @property  unsigned long indexOfPressDownToUseForVarianceAndGrowth
 @property  unsigned long numberOfPressDownGrowthTerms
 @property  unsigned long indexOfPressUpToUseForVarianceAndGrowth
 @property  unsigned long numberOfPressUpGrowthTerms
 @property  double pressDownVariance
 @property  double pressUpVariance

  // instance methods
  -[SBPressSequenceSettings numberOfPresses]
  -[SBPressSequenceSettings setNumberOfPresses:]
  -[SBPressSequenceSettings maxDefaultPressDownDuration]
  -[SBPressSequenceSettings setMaxDefaultPressDownDuration:]
  -[SBPressSequenceSettings maxDefaultPressUpDuration]
  -[SBPressSequenceSettings setMaxDefaultPressUpDuration:]
  -[SBPressSequenceSettings maxDownToDownDuration]
  -[SBPressSequenceSettings setMaxDownToDownDuration:]
  -[SBPressSequenceSettings indexOfPressDownToUseForVarianceAndGrowth]
  -[SBPressSequenceSettings setIndexOfPressDownToUseForVarianceAndGrowth:]
  -[SBPressSequenceSettings numberOfPressDownGrowthTerms]
  -[SBPressSequenceSettings setNumberOfPressDownGrowthTerms:]
  -[SBPressSequenceSettings indexOfPressUpToUseForVarianceAndGrowth]
  -[SBPressSequenceSettings setIndexOfPressUpToUseForVarianceAndGrowth:]
  -[SBPressSequenceSettings numberOfPressUpGrowthTerms]
  -[SBPressSequenceSettings setNumberOfPressUpGrowthTerms:]
  -[SBPressSequenceSettings pressDownVariance]
  -[SBPressSequenceSettings setPressDownVariance:]
  -[SBPressSequenceSettings pressUpVariance]
  -[SBPressSequenceSettings setPressUpVariance:]


SBApplicationSignatureVersionRepairAlertItem : SBAlertItem
  // instance methods
  -[SBApplicationSignatureVersionRepairAlertItem initWithApplication:]
  -[SBApplicationSignatureVersionRepairAlertItem .cxx_destruct]
  -[SBApplicationSignatureVersionRepairAlertItem shouldShowInLockScreen]
  -[SBApplicationSignatureVersionRepairAlertItem dismissOnLock]
  -[SBApplicationSignatureVersionRepairAlertItem configure:requirePasscodeForActions:]
  -[SBApplicationSignatureVersionRepairAlertItem forcesModalAlertAppearance]


SBSwipeUpFloatingSwitcherGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction
  // instance methods
  -[SBSwipeUpFloatingSwitcherGestureWorkspaceTransaction _gestureType]


SBDisableActiveInterfaceOrientationChangeAssertion : NSObject <BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDisableActiveInterfaceOrientationChangeAssertion initWithReason:nudgeOrientationOnInvalidate:]
  -[SBDisableActiveInterfaceOrientationChangeAssertion .cxx_destruct]
  -[SBDisableActiveInterfaceOrientationChangeAssertion dealloc]
  -[SBDisableActiveInterfaceOrientationChangeAssertion invalidate]


SBSeparatorNubView : UIView
  // instance methods
  -[SBSeparatorNubView traitCollection]


SBSeparatorView : UIView
 @property  SBSeparatorNubView *nubView
 @property  unsigned long nubStyle
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} nubRect
 @property  double keyboardHeight

  // class methods
  +[SBSeparatorView nubHitTestSize]

  // instance methods
  -[SBSeparatorView setKeyboardHeight:]
  -[SBSeparatorView .cxx_destruct]
  -[SBSeparatorView setFrame:]
  -[SBSeparatorView layoutSubviews]
  -[SBSeparatorView keyboardHeight]
  -[SBSeparatorView initWithFrame:]
  -[SBSeparatorView nubRect]
  -[SBSeparatorView nubView]
  -[SBSeparatorView setBounds:]
  -[SBSeparatorView _updateNubViewFrame]
  -[SBSeparatorView setNubStyle:]
  -[SBSeparatorView nubStyle]
  -[SBSeparatorView setNubView:]


SBWallpaperLegibilitySettingsProvider : NSObject <SBWallpaperObserver, SBFLegibilitySettingsProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  _UILegibilitySettings *legibilitySettings
 @property  <SBFLegibilitySettingsProviderDelegate> *delegate

  // instance methods
  -[SBWallpaperLegibilitySettingsProvider wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBWallpaperLegibilitySettingsProvider wallpaperDidChangeForVariant:]
  -[SBWallpaperLegibilitySettingsProvider .cxx_destruct]
  -[SBWallpaperLegibilitySettingsProvider setDelegate:]
  -[SBWallpaperLegibilitySettingsProvider delegate]
  -[SBWallpaperLegibilitySettingsProvider dealloc]
  -[SBWallpaperLegibilitySettingsProvider legibilitySettings]
  -[SBWallpaperLegibilitySettingsProvider initWithVariant:]


SBApplicationWakeScheduler : NSObject <BSInvalidatable>
 @property  <BSTimerScheduleQuerying><BSInvalidatable> *wakeTimer
 @property  NSDate *scheduledDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationWakeScheduler unschedule]
  -[SBApplicationWakeScheduler .cxx_destruct]
  -[SBApplicationWakeScheduler init]
  -[SBApplicationWakeScheduler scheduledDate]
  -[SBApplicationWakeScheduler _applicationProcessStateDidChange:]
  -[SBApplicationWakeScheduler dealloc]
  -[SBApplicationWakeScheduler invalidate]
  -[SBApplicationWakeScheduler wakeImmediately]
  -[SBApplicationWakeScheduler scheduleWakeForDate:]
  -[SBApplicationWakeScheduler wakeTimer]
  -[SBApplicationWakeScheduler _expectedFireDateForTimer:]
  -[SBApplicationWakeScheduler setWakeTimer:]
  -[SBApplicationWakeScheduler endResumeIfAwoken]
  -[SBApplicationWakeScheduler _initWithLifecycleTracker:forApplication:]
  -[SBApplicationWakeScheduler _forceInvalidate]


SBCoverSheetScreenEdgePanGestureRecognizer : SBHomeGesturePanGestureRecognizer

NCUserAlertActionRunner : NSObject <NCNotificationActionRunner>
 @property  SBAlertItem *alertItem
 @property  BOOL shouldForwardAction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NCUserAlertActionRunner .cxx_destruct]
  -[NCUserAlertActionRunner setShouldForwardAction:]
  -[NCUserAlertActionRunner shouldForwardAction]
  -[NCUserAlertActionRunner alertItem]
  -[NCUserAlertActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]
  -[NCUserAlertActionRunner initWithSBAlertItem:]


NCUserAlertDefaultActionRunner : NCUserAlertActionRunner
  // instance methods
  -[NCUserAlertDefaultActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]


NCUserAlertDismissActionRunner : NCUserAlertActionRunner
  // instance methods
  -[NCUserAlertDismissActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]


SBCameraHardwareButtonSettings : PTSettings
 @property  double shutterButtonLongPressTimeout
 @property  double shutterButtonLongPressCancellationTimeout
 @property  BOOL shutterButtonShouldUsePocketDetection

  // class methods
  +[SBCameraHardwareButtonSettings settingsControllerModule]

  // instance methods
  -[SBCameraHardwareButtonSettings setDefaultValues]
  -[SBCameraHardwareButtonSettings shutterButtonLongPressTimeout]
  -[SBCameraHardwareButtonSettings shutterButtonLongPressCancellationTimeout]
  -[SBCameraHardwareButtonSettings shutterButtonShouldUsePocketDetection]
  -[SBCameraHardwareButtonSettings setShutterButtonLongPressTimeout:]
  -[SBCameraHardwareButtonSettings setShutterButtonLongPressCancellationTimeout:]
  -[SBCameraHardwareButtonSettings setShutterButtonShouldUsePocketDetection:]


SBCoverSheetSecureAppEnvironmentViewController : UIViewController <SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBSecureAppObserver, CSApplicationHosting, SBCoverSheetSlidingViewControllerContentViewController>
 @property  SBDashBoardHostedAppViewController *secureAppViewController
 @property  <SBCoverSheetSecureAppEnvironmentViewControllerDelegate> *delegate
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  SBFZStackParticipant *zStackParticipant
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL contentOccludesBackground

  // instance methods
  -[SBCoverSheetSecureAppEnvironmentViewController handlesRotationIndependentOfCoverSheet]
  -[SBCoverSheetSecureAppEnvironmentViewController setHomeGestureParticipant:]
  -[SBCoverSheetSecureAppEnvironmentViewController homeGestureParticipant]
  -[SBCoverSheetSecureAppEnvironmentViewController zStackParticipant:updatePreferences:]
  -[SBCoverSheetSecureAppEnvironmentViewController zStackParticipantDidChange:]
  -[SBCoverSheetSecureAppEnvironmentViewController .cxx_destruct]
  -[SBCoverSheetSecureAppEnvironmentViewController canHostAnApp]
  -[SBCoverSheetSecureAppEnvironmentViewController viewDidLoad]
  -[SBCoverSheetSecureAppEnvironmentViewController secureAppOfTypeDidBegin:]
  -[SBCoverSheetSecureAppEnvironmentViewController hostedAppSceneHandles]
  -[SBCoverSheetSecureAppEnvironmentViewController conformsToSBApplicationHosting]
  -[SBCoverSheetSecureAppEnvironmentViewController setDelegate:]
  -[SBCoverSheetSecureAppEnvironmentViewController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBCoverSheetSecureAppEnvironmentViewController viewDidAppear:]
  -[SBCoverSheetSecureAppEnvironmentViewController isHostingAnApp]
  -[SBCoverSheetSecureAppEnvironmentViewController hostedAppWillRotateToInterfaceOrientation:]
  -[SBCoverSheetSecureAppEnvironmentViewController secureAppViewController]
  -[SBCoverSheetSecureAppEnvironmentViewController zStackParticipant]
  -[SBCoverSheetSecureAppEnvironmentViewController setZStackParticipant:]
  -[SBCoverSheetSecureAppEnvironmentViewController hostedAppSceneHandle]
  -[SBCoverSheetSecureAppEnvironmentViewController conformsToCSApplicationHosting]
  -[SBCoverSheetSecureAppEnvironmentViewController homeGrabberViewDidReceiveClick:]
  -[SBCoverSheetSecureAppEnvironmentViewController viewWillDisappear:]
  -[SBCoverSheetSecureAppEnvironmentViewController viewWillAppear:]
  -[SBCoverSheetSecureAppEnvironmentViewController delegate]
  -[SBCoverSheetSecureAppEnvironmentViewController supportedInterfaceOrientations]
  -[SBCoverSheetSecureAppEnvironmentViewController _canShowWhileLocked]
  -[SBCoverSheetSecureAppEnvironmentViewController conformsToSBCoverSheetSlidingViewControllerContentViewController]
  -[SBCoverSheetSecureAppEnvironmentViewController initWithSecureAppViewController:]
  -[SBCoverSheetSecureAppEnvironmentViewController requestHomeGestureOwnership]
  -[SBCoverSheetSecureAppEnvironmentViewController relinquishHomeGesture]
  -[SBCoverSheetSecureAppEnvironmentViewController secureAppOfTypeDidTakeNewAssertion:]
  -[SBCoverSheetSecureAppEnvironmentViewController _updateSupportedOrientationsMaskForSecureAppAction]
  -[SBCoverSheetSecureAppEnvironmentViewController updateHomeGrabberHiddenAssertion:]
  -[SBCoverSheetSecureAppEnvironmentViewController _currentSecureAppAction]
  -[SBCoverSheetSecureAppEnvironmentViewController relinquishHiddenAssertionForHomeGrabber:animated:]
  -[SBCoverSheetSecureAppEnvironmentViewController takeHiddenAssertionForHomeGrabber:animated:]
  -[SBCoverSheetSecureAppEnvironmentViewController contentOccludesBackground]


SBMainDisplayLayoutState : SBLayoutState
 @property  long long spaceConfiguration
 @property  long long floatingConfiguration
 @property  long long centerConfiguration
 @property  long long peekConfiguration
 @property  long long unlockedEnvironmentMode
 @property  NSString *bundleIDShowingAppExpose
 @property  BOOL floatingSwitcherVisible
 @property  BOOL centerEntityModal
 @property  long long windowPickerRole

  // class methods
  +[SBMainDisplayLayoutState _defaultInterfaceOrientation]

  // instance methods
  -[SBMainDisplayLayoutState appLayout]
  -[SBMainDisplayLayoutState floatingItem]
  -[SBMainDisplayLayoutState _initWithLayoutElements:interfaceOrientation:elementInterfaceOrientation:]
  -[SBMainDisplayLayoutState .cxx_destruct]
  -[SBMainDisplayLayoutState windowPickerRole]
  -[SBMainDisplayLayoutState floatingConfiguration]
  -[SBMainDisplayLayoutState floatingAppLayout]
  -[SBMainDisplayLayoutState centerConfiguration]
  -[SBMainDisplayLayoutState _initWithLayoutElements:interfaceOrientation:elementInterfaceOrientation:spaceConfiguration:floatingConfiguration:unlockedEnvironmentMode:floatingSwitcherVisible:centerConfiguration:centerEntityModal:peekConfiguration:bundleIDShowingAppExpose:windowPickerRole:]
  -[SBMainDisplayLayoutState descriptionBuilderWithMultilinePrefix:]
  -[SBMainDisplayLayoutState isFloatingSwitcherVisible]
  -[SBMainDisplayLayoutState isEqual:]
  -[SBMainDisplayLayoutState interfaceOrientation]
  -[SBMainDisplayLayoutState spaceConfiguration]
  -[SBMainDisplayLayoutState peekConfiguration]
  -[SBMainDisplayLayoutState isCenterEntityModal]
  -[SBMainDisplayLayoutState bundleIDShowingAppExpose]
  -[SBMainDisplayLayoutState visibleFloatingItem]
  -[SBMainDisplayLayoutState unlockedEnvironmentMode]


SBSetupPIPMorphingSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBSetupPIPMorphingSwitcherEventResponse type]


SBAppLayout : NSObject <NSCopying, BSDescriptionProviding, SBSwitcherLayoutElementProviding>
 @property  long long configuration
 @property  long long type
 @property  long long environment
 @property  BOOL insetForHomeAffordance
 @property  BOOL hidden
 @property  long long centerConfiguration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAppLayout homeScreenAppLayout]
  +[SBAppLayout appLayoutWithProtobufRepresentation:]

  // instance methods
  -[SBAppLayout isInsetForHomeAffordance]
  -[SBAppLayout enumerate:]
  -[SBAppLayout containsItem:]
  -[SBAppLayout configuration]
  -[SBAppLayout .cxx_destruct]
  -[SBAppLayout containsAnyItemFromSet:]
  -[SBAppLayout isSplitConfiguration]
  -[SBAppLayout isHidden]
  -[SBAppLayout succinctDescriptionBuilder]
  -[SBAppLayout initWithItemsForLayoutRoles:configuration:environment:]
  -[SBAppLayout appLayoutByModifyingConfiguration:]
  -[SBAppLayout centerConfiguration]
  -[SBAppLayout descriptionBuilderWithMultilinePrefix:]
  -[SBAppLayout init]
  -[SBAppLayout plistRepresentation]
  -[SBAppLayout isEqual:]
  -[SBAppLayout containsAllItemsFromAppLayout:]
  -[SBAppLayout leafAppLayouts]
  -[SBAppLayout descriptionWithMultilinePrefix:]
  -[SBAppLayout allItems]
  -[SBAppLayout flippedAppLayout]
  -[SBAppLayout isOrContainsAppLayout:]
  -[SBAppLayout succinctDescription]
  -[SBAppLayout protobufRepresentation]
  -[SBAppLayout leafAppLayoutForRole:]
  -[SBAppLayout containsItemWithUniqueIdentifier:]
  -[SBAppLayout switcherLayoutElementType]
  -[SBAppLayout compare:]
  -[SBAppLayout hasSameItemsInLayoutRoles:asAppLayout:]
  -[SBAppLayout appLayoutByModifyingHiddenState:]
  -[SBAppLayout appLayoutByModifyingEnvironment:]
  -[SBAppLayout isCenterOverSplit]
  -[SBAppLayout type]
  -[SBAppLayout containsItemWithBundleIdentifier:]
  -[SBAppLayout initWithItemsForLayoutRoles:configuration:environment:hidden:]
  -[SBAppLayout appLayoutWithItemsPassingTest:]
  -[SBAppLayout itemForLayoutRole:]
  -[SBAppLayout isCenterOverFull]
  -[SBAppLayout copyWithZone:]
  -[SBAppLayout layoutRoleForItem:]
  -[SBAppLayout environment]
  -[SBAppLayout frameOptions]
  -[SBAppLayout leafAppLayoutForItem:]
  -[SBAppLayout containsAnyItemFromAppLayout:]
  -[SBAppLayout initWithItemsForLayoutRoles:configuration:centerConfiguration:environment:hidden:]
  -[SBAppLayout anyLeafAppLayout]
  -[SBAppLayout initWithPlistRepresentation:]


SBCoverSheetPrimarySlidingViewController : SBCoverSheetSlidingViewController <SBGrabberTongueDelegate, SBReachabilityObserver>
 @property  SBFTouchPassThroughView *unlockedContentOverlayView
 @property  SBCoverSheetPanelBackgroundContainerView *panelBackgroundContainerView
 @property  SBFTouchPassThroughView *parallaxClippingView
 @property  SBCoverSheetParallaxContainerView *parallaxContainerView
 @property  SBGrabberTongue *grabberTongue
 @property  SBCoverSheetBlurView *panelCoverSheetBlurView
 @property  SBWallpaperEffectView *panelWallpaperEffectView
 @property  SBWallpaperEffectView *panelFadeOutWallpaperEffectView
 @property  double defaultPresentGestureEdgeRegionSize
 @property  <SBCoverSheetGrabberDelegate> *grabberDelegate
 @property  UIGestureRecognizer *edgePullGestureRecognizer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetPrimarySlidingViewController grabberTongue:shouldShowTongueOnFirstSwipeWithEdgeLocation:]
  -[SBCoverSheetPrimarySlidingViewController setPanelFadeOutWallpaperEffectView:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueDidDismiss:]
  -[SBCoverSheetPrimarySlidingViewController _animationTickedWithProgress:forPresentationValue:]
  -[SBCoverSheetPrimarySlidingViewController _shouldShowGrabberOnFirstSwipe]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueCanceledPulling:withDistance:andVelocity:andGesture:]
  -[SBCoverSheetPrimarySlidingViewController setPanelBackgroundContainerView:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueOrPullEnabled:forGestureRecognizer:]
  -[SBCoverSheetPrimarySlidingViewController handleReachabilityModeActivated]
  -[SBCoverSheetPrimarySlidingViewController parallaxContainerView]
  -[SBCoverSheetPrimarySlidingViewController setGrabberTongue:]
  -[SBCoverSheetPrimarySlidingViewController handleReachabilityModeDeactivated]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueBeganPulling:withDistance:andVelocity:andGesture:]
  -[SBCoverSheetPrimarySlidingViewController panelFadeOutWallpaperEffectView]
  -[SBCoverSheetPrimarySlidingViewController _updateWindowVisibility]
  -[SBCoverSheetPrimarySlidingViewController grabberTongue]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueUpdatedPulling:withDistance:andVelocity:andGesture:]
  -[SBCoverSheetPrimarySlidingViewController edgePullGestureRecognizer]
  -[SBCoverSheetPrimarySlidingViewController customGestureRecognizerForGrabberTongue:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueEndedPulling:withDistance:andVelocity:andGesture:]
  -[SBCoverSheetPrimarySlidingViewController setUnlockedContentOverlayView:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueWillPresent:]
  -[SBCoverSheetPrimarySlidingViewController .cxx_destruct]
  -[SBCoverSheetPrimarySlidingViewController grabberDelegate]
  -[SBCoverSheetPrimarySlidingViewController setParallaxClippingView:]
  -[SBCoverSheetPrimarySlidingViewController parallaxClippingView]
  -[SBCoverSheetPrimarySlidingViewController unlockedContentOverlayView]
  -[SBCoverSheetPrimarySlidingViewController _updatePanelWallpaperEffectView]
  -[SBCoverSheetPrimarySlidingViewController panelCoverSheetBlurView]
  -[SBCoverSheetPrimarySlidingViewController setPanelCoverSheetBlurView:]
  -[SBCoverSheetPrimarySlidingViewController shouldAutorotate]
  -[SBCoverSheetPrimarySlidingViewController panelBackgroundContainerView]
  -[SBCoverSheetPrimarySlidingViewController _endTransitionToAppeared:]
  -[SBCoverSheetPrimarySlidingViewController _positionSubviewsForContentFrame:forPresentationValue:]
  -[SBCoverSheetPrimarySlidingViewController _setupPanelPartsIfNecessary]
  -[SBCoverSheetPrimarySlidingViewController viewDidLayoutSubviews]
  -[SBCoverSheetPrimarySlidingViewController panelWallpaperEffectView]
  -[SBCoverSheetPrimarySlidingViewController _createPanelWallpaperEffectViewIfNeeded]
  -[SBCoverSheetPrimarySlidingViewController _createFadeOutWallpaperEffectView]
  -[SBCoverSheetPrimarySlidingViewController setPanelWallpaperEffectView:]
  -[SBCoverSheetPrimarySlidingViewController dealloc]
  -[SBCoverSheetPrimarySlidingViewController setTransitionSettings:]
  -[SBCoverSheetPrimarySlidingViewController defaultPresentGestureEdgeRegionSize]
  -[SBCoverSheetPrimarySlidingViewController loadView]
  -[SBCoverSheetPrimarySlidingViewController setDefaultPresentGestureEdgeRegionSize:]
  -[SBCoverSheetPrimarySlidingViewController setGrabberDelegate:]
  -[SBCoverSheetPrimarySlidingViewController _beginTransitionFromAppeared:]
  -[SBCoverSheetPrimarySlidingViewController setParallaxContainerView:]
  -[SBCoverSheetPrimarySlidingViewController _canShowWhileLocked]


SBRotateScenesWorkspaceTransaction : SBAppToAppWorkspaceTransaction
  // instance methods
  -[SBRotateScenesWorkspaceTransaction synchronizedTransactionReadyToCommit:]
  -[SBRotateScenesWorkspaceTransaction _shouldResignActiveForAnimation]
  -[SBRotateScenesWorkspaceTransaction _concurrentOverlayDismissalOptions]
  -[SBRotateScenesWorkspaceTransaction _serialOverlayPreDismissalOptions]


SBInsecureDrawingAlertItem : SBDiagnosticRequestAlertItem
 @property  NSString *processName
 @property  NSSet *layerNames

  // instance methods
  -[SBInsecureDrawingAlertItem .cxx_destruct]
  -[SBInsecureDrawingAlertItem processName]
  -[SBInsecureDrawingAlertItem message]
  -[SBInsecureDrawingAlertItem radarDescription]
  -[SBInsecureDrawingAlertItem shouldShowInLockScreen]
  -[SBInsecureDrawingAlertItem title]
  -[SBInsecureDrawingAlertItem setProcessName:]
  -[SBInsecureDrawingAlertItem _buildVersion]
  -[SBInsecureDrawingAlertItem setLayerNames:]
  -[SBInsecureDrawingAlertItem layerNames]
  -[SBInsecureDrawingAlertItem radarTitle]
  -[SBInsecureDrawingAlertItem radarClassification]
  -[SBInsecureDrawingAlertItem ignoreIfAlreadyDisplaying]
  -[SBInsecureDrawingAlertItem radarReproducibility]


SBDodgingTesterView : UIView <SBDodgingItemDelegate, UITableViewDelegate, UITableViewDataSource>
 @property  SBDodgingItem *item
 @property  SBDodgingResolverViewController *controller
 @property  NSString *name
 @property  UIColor *color
 @property  {CGSize=dd} preferredSize
 @property  {CGPoint=dd} preferredCenter
 @property  NSMutableSet *ignoringItems
 @property  unsigned long corner
 @property  BOOL stashed
 @property  UIPanGestureRecognizer *moveGesture
 @property  {CGPoint=dd} initialMoveCenter
 @property  UIPanGestureRecognizer *resizeGesture
 @property  UILabel *titleLabel
 @property  UILabel *resolvedValuesLabel
 @property  UIView *resizeView
 @property  NSArray *otherIdentifiers
 @property  UITableView *otherItemsTable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDodgingTesterView setItem:]
  -[SBDodgingTesterView setController:]
  -[SBDodgingTesterView titleLabel]
  -[SBDodgingTesterView name]
  -[SBDodgingTesterView controller]
  -[SBDodgingTesterView numberOfSectionsInTableView:]
  -[SBDodgingTesterView tableView:numberOfRowsInSection:]
  -[SBDodgingTesterView color]
  -[SBDodgingTesterView .cxx_destruct]
  -[SBDodgingTesterView corner]
  -[SBDodgingTesterView tableView:didSelectRowAtIndexPath:]
  -[SBDodgingTesterView setTitleLabel:]
  -[SBDodgingTesterView layoutSubviews]
  -[SBDodgingTesterView tableView:cellForRowAtIndexPath:]
  -[SBDodgingTesterView setName:]
  -[SBDodgingTesterView item]
  -[SBDodgingTesterView setColor:]
  -[SBDodgingTesterView preferredSize]
  -[SBDodgingTesterView setPreferredSize:]
  -[SBDodgingTesterView stashed]
  -[SBDodgingTesterView setStashed:]
  -[SBDodgingTesterView preferredCenter]
  -[SBDodgingTesterView _handleMoveGesture:]
  -[SBDodgingTesterView _handleResizeGesture:]
  -[SBDodgingTesterView _handleDeleteGesture:]
  -[SBDodgingTesterView _handleChangeAnchorGesture:]
  -[SBDodgingTesterView _updateResolvedValuesLabel]
  -[SBDodgingTesterView dodgingResolver:preferenceForDodgingItem:]
  -[SBDodgingTesterView dodgingResolver:dodgingItemDidChange:]
  -[SBDodgingTesterView dodgingResolver:dodgingItemDidSettle:]
  -[SBDodgingTesterView initWithName:color:controller:]
  -[SBDodgingTesterView setPreferredCenter:]
  -[SBDodgingTesterView ignoringItems]
  -[SBDodgingTesterView setIgnoringItems:]
  -[SBDodgingTesterView setCorner:]
  -[SBDodgingTesterView moveGesture]
  -[SBDodgingTesterView setMoveGesture:]
  -[SBDodgingTesterView initialMoveCenter]
  -[SBDodgingTesterView setInitialMoveCenter:]
  -[SBDodgingTesterView resizeGesture]
  -[SBDodgingTesterView setResizeGesture:]
  -[SBDodgingTesterView resolvedValuesLabel]
  -[SBDodgingTesterView setResolvedValuesLabel:]
  -[SBDodgingTesterView resizeView]
  -[SBDodgingTesterView setResizeView:]
  -[SBDodgingTesterView otherIdentifiers]
  -[SBDodgingTesterView setOtherIdentifiers:]
  -[SBDodgingTesterView otherItemsTable]
  -[SBDodgingTesterView setOtherItemsTable:]


SBMedusaDomain : PTDomain
  // class methods
  +[SBMedusaDomain domainGroupName]
  +[SBMedusaDomain rootSettings]
  +[SBMedusaDomain domainName]
  +[SBMedusaDomain rootSettingsClass]


SBStartupTransitionToLockOut : SBBaseStartupTransition
 @property  SBLockScreenManager *lockScreenManager

  // instance methods
  -[SBStartupTransitionToLockOut .cxx_destruct]
  -[SBStartupTransitionToLockOut lockScreenManager]
  -[SBStartupTransitionToLockOut performTransitionWithCompletionBlock:]
  -[SBStartupTransitionToLockOut initWithDestination:context:]
  -[SBStartupTransitionToLockOut suggestedLockAnimationForTransitionRequest:]


SBDashBoardAnalyticsEmitter : NSObject <CSExternalEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDashBoardAnalyticsEmitter coverSheetIdentifier]
  -[SBDashBoardAnalyticsEmitter .cxx_destruct]
  -[SBDashBoardAnalyticsEmitter wouldHandleButtonEvent:]
  -[SBDashBoardAnalyticsEmitter participantState]
  -[SBDashBoardAnalyticsEmitter handleEvent:]
  -[SBDashBoardAnalyticsEmitter dealloc]
  -[SBDashBoardAnalyticsEmitter conformsToCSEventHandling]
  -[SBDashBoardAnalyticsEmitter initWithCoverSheetViewController:]


SBInvalidationDodgingModifierEventResponse : SBDodgingModifierEventResponse
 @property  unsigned long options
 @property  BOOL disableCoalescing
 @property  NSString *completionIdentifier
 @property  NSString *identifier

  // class methods
  +[SBInvalidationDodgingModifierEventResponse responseWithOptions:]

  // instance methods
  -[SBInvalidationDodgingModifierEventResponse options]
  -[SBInvalidationDodgingModifierEventResponse .cxx_destruct]
  -[SBInvalidationDodgingModifierEventResponse initWithOptions:]
  -[SBInvalidationDodgingModifierEventResponse identifier]
  -[SBInvalidationDodgingModifierEventResponse type]
  -[SBInvalidationDodgingModifierEventResponse setIdentifier:]
  -[SBInvalidationDodgingModifierEventResponse setDisableCoalescing:]
  -[SBInvalidationDodgingModifierEventResponse setCompletionIdentifier:]
  -[SBInvalidationDodgingModifierEventResponse completionIdentifier]
  -[SBInvalidationDodgingModifierEventResponse disableCoalescing]


SBProcessSettings : NSObject <BSSettingDescriptionProvider, SBProcessSettings, NSCopying, BSDescriptionProviding>
 @property  BOOL empty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProcessSettings valueDescriptionForFlag:object:ofSetting:]
  -[SBProcessSettings setObject:forProcessSetting:]
  -[SBProcessSettings clearProcessSettings]
  -[SBProcessSettings objectForProcessSetting:]
  -[SBProcessSettings applyProcessSettings:]
  -[SBProcessSettings setFlag:forProcessSetting:]
  -[SBProcessSettings boolForProcessSetting:]
  -[SBProcessSettings flagForProcessSetting:]
  -[SBProcessSettings copyProcessSettings]
  -[SBProcessSettings isEmpty]
  -[SBProcessSettings .cxx_destruct]
  -[SBProcessSettings keyDescriptionForSetting:]
  -[SBProcessSettings succinctDescriptionBuilder]
  -[SBProcessSettings descriptionBuilderWithMultilinePrefix:]
  -[SBProcessSettings init]
  -[SBProcessSettings descriptionWithMultilinePrefix:]
  -[SBProcessSettings succinctDescription]
  -[SBProcessSettings dealloc]
  -[SBProcessSettings copyWithZone:]


SBInCallPresentationScreenSharingIcon : SBIcon
  // instance methods
  -[SBInCallPresentationScreenSharingIcon displayNameForLocation:]
  -[SBInCallPresentationScreenSharingIcon generateIconImageWithInfo:]


SBPIPContentViewLayoutMetrics : NSObject
 @property  NSString *contentTypeIdentifier
 @property  double padding
 @property  double paddingWhileStashed
 @property  {CGSize=dd} minimumStashedTabSize
 @property  double defaultCornerRadius
 @property  SBPIPContentViewLayoutMetricsSizePolicy *sizePolicy
 @property  unsigned long defaultPosition

  // class methods
  +[SBPIPContentViewLayoutMetrics videoContentLandscapeSizePreferences:portraitSizePreferences:squareSizePreferences:]
  +[SBPIPContentViewLayoutMetrics videoCallLandscapeSizePreferences:portraitSizePreferences:squareSizePreferences:]
  +[SBPIPContentViewLayoutMetrics screenSharingLandscapeSizePreferences:portraitSizePreferences:squareSizePreferences:]
  +[SBPIPContentViewLayoutMetrics microPIPLandscapeSizePreferences:portraitSizePreferences:squareSizePreferences:]
  +[SBPIPContentViewLayoutMetrics pegasusDefaultMetrics]
  +[SBPIPContentViewLayoutMetrics pegasusVideoCallMetrics]
  +[SBPIPContentViewLayoutMetrics pegasusScreenSharingMetrics]
  +[SBPIPContentViewLayoutMetrics pegasusDefaultMicroPIPMetrics]
  +[SBPIPContentViewLayoutMetrics pegasusMetricsForContentType:]
  +[SBPIPContentViewLayoutMetrics systemNotesMetricsForPresentationMode:]

  // instance methods
  -[SBPIPContentViewLayoutMetrics .cxx_destruct]
  -[SBPIPContentViewLayoutMetrics padding]
  -[SBPIPContentViewLayoutMetrics defaultCornerRadius]
  -[SBPIPContentViewLayoutMetrics initWithContentTypeIdentifier:padding:paddingWhileStashed:minimumStashedTabSize:defaultCornerRadius:sizePolicy:defaultPosition:]
  -[SBPIPContentViewLayoutMetrics minimumStashedTabSize]
  -[SBPIPContentViewLayoutMetrics contentTypeIdentifier]
  -[SBPIPContentViewLayoutMetrics paddingWhileStashed]
  -[SBPIPContentViewLayoutMetrics sizePolicy]
  -[SBPIPContentViewLayoutMetrics defaultPosition]


SBPIPContentViewLayoutSizePreferences : NSObject
 @property  double longSideMinimumSize
 @property  double longSideDefaultSize
 @property  double longSideMaximumSize
 @property  double shortSideMinimumSize

  // instance methods
  -[SBPIPContentViewLayoutSizePreferences initWithLongSideMinimumSize:longSideDefaultSize:longSideMaximumSize:shortSideMinimumSize:]
  -[SBPIPContentViewLayoutSizePreferences longSideMinimumSize]
  -[SBPIPContentViewLayoutSizePreferences setLongSideMinimumSize:]
  -[SBPIPContentViewLayoutSizePreferences longSideDefaultSize]
  -[SBPIPContentViewLayoutSizePreferences setLongSideDefaultSize:]
  -[SBPIPContentViewLayoutSizePreferences longSideMaximumSize]
  -[SBPIPContentViewLayoutSizePreferences setLongSideMaximumSize:]
  -[SBPIPContentViewLayoutSizePreferences shortSideMinimumSize]
  -[SBPIPContentViewLayoutSizePreferences setShortSideMinimumSize:]


SBPIPContentViewLayoutMetricsSizePolicy : NSObject
  // instance methods
  -[SBPIPContentViewLayoutMetricsSizePolicy .cxx_destruct]
  -[SBPIPContentViewLayoutMetricsSizePolicy initWithSizePreferencesForLandscape:portrait:square:]
  -[SBPIPContentViewLayoutMetricsSizePolicy sizePreferencesForAspectRatio:]


SBEmitSBEventSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  unsigned long eventType
 @property  NSDictionary *payload

  // instance methods
  -[SBEmitSBEventSwitcherEventResponse payload]
  -[SBEmitSBEventSwitcherEventResponse .cxx_destruct]
  -[SBEmitSBEventSwitcherEventResponse succinctDescriptionBuilder]
  -[SBEmitSBEventSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBEmitSBEventSwitcherEventResponse type]
  -[SBEmitSBEventSwitcherEventResponse eventType]
  -[SBEmitSBEventSwitcherEventResponse initWithSBEventWithEventType:payload:]


SBCoverSheetWindow : SBSecureWindow
  // class methods
  +[SBCoverSheetWindow sb_autorotates]

  // instance methods
  -[SBCoverSheetWindow _canBecomeKeyWindow]
  -[SBCoverSheetWindow hitTest:withEvent:]
  -[SBCoverSheetWindow becomeFirstResponder]
  -[SBCoverSheetWindow resignFirstResponder]


SBSecureAppWindow : SBCoverSheetWindow

SBHeartbeatMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  SBHeartbeatMetricPersistence *heartbeatMetricPersistence
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHeartbeatMetric dateFormatter]
  -[SBHeartbeatMetric initWithPersistence:]
  -[SBHeartbeatMetric handleEvent:withContext:]
  -[SBHeartbeatMetric .cxx_destruct]
  -[SBHeartbeatMetric calendar]
  -[SBHeartbeatMetric _makePayloadFromMetricsByDatestamp:]
  -[SBHeartbeatMetric sendCoreAnalyticsEventWithName:payload:]
  -[SBHeartbeatMetric heartbeatMetricPersistence]


SBStackedFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBStackedFloatingSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBStackedFloatingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBStackedFloatingSwitcherModifier scaleForIndex:]
  -[SBStackedFloatingSwitcherModifier frameForIndex:]


SBHomeScreenBackdropView : SBHomeScreenBackdropViewBase
  // instance methods
  -[SBHomeScreenBackdropView cancelInProcessAnimations]
  -[SBHomeScreenBackdropView _updateBackdropViewIfNeeded]
  -[SBHomeScreenBackdropView initWithFrame:materialRecipe:scaleAdjustment:]
  -[SBHomeScreenBackdropView endRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropView .cxx_destruct]
  -[SBHomeScreenBackdropView beginRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropView _resetHomeScreenBlurredContentSnapshotImage]
  -[SBHomeScreenBackdropView _setupBackdropViewWithRecipe:scaleAdjustment:]
  -[SBHomeScreenBackdropView isOpaque]
  -[SBHomeScreenBackdropView homeScreenBlurredContentSnapshotImage]
  -[SBHomeScreenBackdropView endRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropView initWithFrame:]
  -[SBHomeScreenBackdropView _updateBackdropViewIfNeededInvalidatingSnapshot:]
  -[SBHomeScreenBackdropView _invalidateBackdropSnapshot]
  -[SBHomeScreenBackdropView _configureBackdropAnimatableProperty]
  -[SBHomeScreenBackdropView setBlurProgress:behaviorMode:completion:]
  -[SBHomeScreenBackdropView beginRequiringBackdropViewForReason:]


SBTapOutsideToDismissSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBTapOutsideToDismissSwitcherModifierEvent type]


SBRemoteTransientOverlayHostViewController : _UIRemoteViewController <SBUIRemoteAlertHostInterface_Internal, BSDescriptionProviding, SBButtonEventsHandler, SBFIdleTimerBehaviorProviding, SBIdleTimerProviding>
 @property  <SBRemoteTransientOverlayHostViewControllerDelegate> *delegate
 @property  BOOL activatingForSiri
 @property  BOOL allowsStackingOverlayContentAbove
 @property  BOOL contentOpaque
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  BOOL shouldEnableFadeInAnimation
 @property  BOOL shouldEnableFadeOutAnimation
 @property  long long preferredLockedGestureDismissalStyle
 @property  long long preferredUnlockedGestureDismissalStyle
 @property  long long preferredBackgroundStyle
 @property  NSNumber *preferredSceneDeactivationReasonValue
 @property  unsigned long preferredStatusBarStyleOverridesToCancel
 @property  _UILegibilitySettings *preferredStatusBarLegibilitySettings
 @property  BOOL shouldDisableOrientationUpdates
 @property  BOOL allowsCustomPresentationDismissalAnimations
 @property  BOOL shouldIgnoreContentOverlayInsetUpdates
 @property  BOOL shouldInvalidateWhenDeactivated
 @property  BOOL isScreenshotMarkup
 @property  BOOL switcherEligible
 @property  BOOL shouldDisableBanners
 @property  BOOL shouldDisableControlCenter
 @property  BOOL shouldDisableReachability
 @property  BOOL shouldDisableInteractiveScreenshotGesture
 @property  BOOL shouldDisableSiri
 @property  BOOL shouldPendAlertItems
 @property  BOOL attachedToWindowedAccessory
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} windowedAccessoryCutoutFrameInScreen
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout

  // class methods
  +[SBRemoteTransientOverlayHostViewController exportedInterface]
  +[SBRemoteTransientOverlayHostViewController serviceViewControllerInterface]

  // instance methods
  -[SBRemoteTransientOverlayHostViewController preferredStatusBarStyle]
  -[SBRemoteTransientOverlayHostViewController preferredWhitePointAdaptivityStyle]
  -[SBRemoteTransientOverlayHostViewController preferredInterfaceOrientationForPresentation]
  -[SBRemoteTransientOverlayHostViewController idleTimerCoordinator]
  -[SBRemoteTransientOverlayHostViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBRemoteTransientOverlayHostViewController setIdleTimerCoordinator:]
  -[SBRemoteTransientOverlayHostViewController handleVolumeUpButtonPress]
  -[SBRemoteTransientOverlayHostViewController customIdleExpirationTimeout]
  -[SBRemoteTransientOverlayHostViewController handleHomeButtonDoublePress]
  -[SBRemoteTransientOverlayHostViewController handleHomeButtonPress]
  -[SBRemoteTransientOverlayHostViewController idleTimerMode]
  -[SBRemoteTransientOverlayHostViewController setWhitePointAdaptivityStyle:]
  -[SBRemoteTransientOverlayHostViewController handleLockButtonPress]
  -[SBRemoteTransientOverlayHostViewController handleVolumeDownButtonPress]
  -[SBRemoteTransientOverlayHostViewController handleHeadsetButtonPress:]
  -[SBRemoteTransientOverlayHostViewController idleWarnMode]
  -[SBRemoteTransientOverlayHostViewController handleHomeButtonLongPress]
  -[SBRemoteTransientOverlayHostViewController viewServiceDidTerminateWithError:]
  -[SBRemoteTransientOverlayHostViewController handleVoiceCommandButtonPress]
  -[SBRemoteTransientOverlayHostViewController .cxx_destruct]
  -[SBRemoteTransientOverlayHostViewController idleTimerDuration]
  -[SBRemoteTransientOverlayHostViewController canResignFirstResponder]
  -[SBRemoteTransientOverlayHostViewController shouldDisableSiri]
  -[SBRemoteTransientOverlayHostViewController succinctDescriptionBuilder]
  -[SBRemoteTransientOverlayHostViewController canBecomeFirstResponder]
  -[SBRemoteTransientOverlayHostViewController setDelegate:]
  -[SBRemoteTransientOverlayHostViewController viewDidAppear:]
  -[SBRemoteTransientOverlayHostViewController initWithNibName:bundle:]
  -[SBRemoteTransientOverlayHostViewController becomeFirstResponder]
  -[SBRemoteTransientOverlayHostViewController _updateContentOverlayInsetsFromParentIfNecessary]
  -[SBRemoteTransientOverlayHostViewController descriptionBuilderWithMultilinePrefix:]
  -[SBRemoteTransientOverlayHostViewController descriptionWithMultilinePrefix:]
  -[SBRemoteTransientOverlayHostViewController resignFirstResponder]
  -[SBRemoteTransientOverlayHostViewController succinctDescription]
  -[SBRemoteTransientOverlayHostViewController viewWillDisappear:]
  -[SBRemoteTransientOverlayHostViewController setActivatingForSiri:]
  -[SBRemoteTransientOverlayHostViewController isActivatingForSiri]
  -[SBRemoteTransientOverlayHostViewController shouldInvalidateWhenDeactivated]
  -[SBRemoteTransientOverlayHostViewController isSwitcherEligible]
  -[SBRemoteTransientOverlayHostViewController setSwitcherEligible:]
  -[SBRemoteTransientOverlayHostViewController shouldDisableControlCenter]
  -[SBRemoteTransientOverlayHostViewController viewWillAppear:]
  -[SBRemoteTransientOverlayHostViewController setShouldDismissOnUILock:]
  -[SBRemoteTransientOverlayHostViewController dismiss]
  -[SBRemoteTransientOverlayHostViewController isContentOpaque]
  -[SBRemoteTransientOverlayHostViewController delegate]
  -[SBRemoteTransientOverlayHostViewController deactivate]
  -[SBRemoteTransientOverlayHostViewController invalidate]
  -[SBRemoteTransientOverlayHostViewController _preferredStatusBarVisibility]
  -[SBRemoteTransientOverlayHostViewController handleDoubleHeightStatusBarTap]
  -[SBRemoteTransientOverlayHostViewController viewDidDisappear:]
  -[SBRemoteTransientOverlayHostViewController setIdleTimerDisabled:forReason:]
  -[SBRemoteTransientOverlayHostViewController _canShowWhileLocked]
  -[SBRemoteTransientOverlayHostViewController isAttachedToWindowedAccessory]
  -[SBRemoteTransientOverlayHostViewController windowedAccessoryCutoutFrameInScreen]
  -[SBRemoteTransientOverlayHostViewController prepareForActivationWithContext:completion:]
  -[SBRemoteTransientOverlayHostViewController _participateInSystemAnimationFence:]
  -[SBRemoteTransientOverlayHostViewController setAllowsBanners:]
  -[SBRemoteTransientOverlayHostViewController setAllowsAlertItems:]
  -[SBRemoteTransientOverlayHostViewController setAllowsControlCenter:]
  -[SBRemoteTransientOverlayHostViewController setAllowsSiri:]
  -[SBRemoteTransientOverlayHostViewController setDesiredHardwareButtonEvents:]
  -[SBRemoteTransientOverlayHostViewController setAllowsMenuButtonDismissal:]
  -[SBRemoteTransientOverlayHostViewController setWallpaperTunnelActive:]
  -[SBRemoteTransientOverlayHostViewController setBackgroundStyle:withDuration:]
  -[SBRemoteTransientOverlayHostViewController setWallpaperStyle:withDuration:]
  -[SBRemoteTransientOverlayHostViewController setAllowsAlertStacking:]
  -[SBRemoteTransientOverlayHostViewController setDismissalAnimationStyle:]
  -[SBRemoteTransientOverlayHostViewController setSwipeDismissalStyle:]
  -[SBRemoteTransientOverlayHostViewController setDesiredStatusBarStyleOverrides:]
  -[SBRemoteTransientOverlayHostViewController setStyleOverridesToCancel:animationSettings:]
  -[SBRemoteTransientOverlayHostViewController setDesiredAutoLockDuration:]
  -[SBRemoteTransientOverlayHostViewController setDesiredIdleTimerSettings:]
  -[SBRemoteTransientOverlayHostViewController setInteractiveScreenshotGestureDisabled:]
  -[SBRemoteTransientOverlayHostViewController setReachabilityDisabled:]
  -[SBRemoteTransientOverlayHostViewController setStatusBarHidden:withDuration:]
  -[SBRemoteTransientOverlayHostViewController setShouldDisableFadeInAnimation:]
  -[SBRemoteTransientOverlayHostViewController setSupportedInterfaceOrientationOverride:]
  -[SBRemoteTransientOverlayHostViewController setLaunchingInterfaceOrientation:]
  -[SBRemoteTransientOverlayHostViewController setOrientationChangedEventsEnabled:]
  -[SBRemoteTransientOverlayHostViewController setSceneDeactivationReason:]
  -[SBRemoteTransientOverlayHostViewController configureWithContext:completion:]
  -[SBRemoteTransientOverlayHostViewController didInvalidateForRemoteAlert]
  -[SBRemoteTransientOverlayHostViewController didTransitionToAttachedToWindowedAccessory:windowedAccessoryCutoutFrameInScreen:]
  -[SBRemoteTransientOverlayHostViewController preferredUnlockedGestureDismissalStyle]
  -[SBRemoteTransientOverlayHostViewController allowsStackingOverlayContentAbove]
  -[SBRemoteTransientOverlayHostViewController shouldDisableBanners]
  -[SBRemoteTransientOverlayHostViewController shouldPendAlertItems]
  -[SBRemoteTransientOverlayHostViewController isScreenshotMarkup]
  -[SBRemoteTransientOverlayHostViewController setIsScreenshotMarkup:]
  -[SBRemoteTransientOverlayHostViewController preserveInputViewsAnimated:]
  -[SBRemoteTransientOverlayHostViewController restoreInputViewsAnimated:]
  -[SBRemoteTransientOverlayHostViewController handlePictureInPictureDidBegin]
  -[SBRemoteTransientOverlayHostViewController setShouldEnableFadeInAnimation:]
  -[SBRemoteTransientOverlayHostViewController setShouldEnableFadeOutAnimation:]
  -[SBRemoteTransientOverlayHostViewController setAllowsCustomPresentationDismissalAnimations:]
  -[SBRemoteTransientOverlayHostViewController shouldEnableFadeInAnimation]
  -[SBRemoteTransientOverlayHostViewController shouldEnableFadeOutAnimation]
  -[SBRemoteTransientOverlayHostViewController setShouldIgnoreContentOverlayInsetUpdates:]
  -[SBRemoteTransientOverlayHostViewController preferredLockedGestureDismissalStyle]
  -[SBRemoteTransientOverlayHostViewController preferredSceneDeactivationReasonValue]
  -[SBRemoteTransientOverlayHostViewController dismissForTransientOverlayAnimated:completion:]
  -[SBRemoteTransientOverlayHostViewController presentForTransientOverlayAnimated:completion:]
  -[SBRemoteTransientOverlayHostViewController preferredStatusBarStyleOverridesToCancel]
  -[SBRemoteTransientOverlayHostViewController shouldDisableReachability]
  -[SBRemoteTransientOverlayHostViewController shouldDisableOrientationUpdates]
  -[SBRemoteTransientOverlayHostViewController shouldDisableInteractiveScreenshotGesture]
  -[SBRemoteTransientOverlayHostViewController preferredBackgroundStyle]
  -[SBRemoteTransientOverlayHostViewController _performButtonEvents:]
  -[SBRemoteTransientOverlayHostViewController _updatePreferredGestureDismissalStyles]
  -[SBRemoteTransientOverlayHostViewController _updatePreferredBackgroundStyleWithAnimationSettings:]
  -[SBRemoteTransientOverlayHostViewController _updateContentOpaqueProperty]
  -[SBRemoteTransientOverlayHostViewController allowsCustomPresentationDismissalAnimations]
  -[SBRemoteTransientOverlayHostViewController preferredStatusBarLegibilitySettings]
  -[SBRemoteTransientOverlayHostViewController shouldIgnoreContentOverlayInsetUpdates]


SBPIPAnalytics : NSObject <PGPictureInPictureAnalyticsDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPAnalytics .cxx_destruct]
  -[SBPIPAnalytics pictureInPictureDidDestroyAnalyticsSourceWithUUID:]
  -[SBPIPAnalytics pictureInPictureDidCreateAnalyticsSourceWithUUID:bundleIdentifier:contentType:]
  -[SBPIPAnalytics pictureInPictureDidChangeStashStateForAnalyticsSessionWithUUID:stashed:]
  -[SBPIPAnalytics pictureInPictureDidDeactivateAnalyticsSessionWithUUID:analyticsSourceUUID:appStoppedSession:restoredFullScreen:]
  -[SBPIPAnalytics pictureInPictureDidDestroyAnalyticsSessionWithUUID:]
  -[SBPIPAnalytics pictureInPictureDidCreateAnalyticsSessionWithUUID:bundleIdentifier:contentType:]
  -[SBPIPAnalytics pictureInPictureDidActivateAnalyticsSessionWithUUID:analyticsSourceUUID:automatically:]
  -[SBPIPAnalytics pictureInPictureAnalyticsSourceWithUUID:didBecomePossible:]
  -[SBPIPAnalytics assistantForUUID:]


SBPIPAnalyticsAssistant : NSObject
 @property  NSString *analyticsIdentifier

  // instance methods
  -[SBPIPAnalyticsAssistant .cxx_destruct]
  -[SBPIPAnalyticsAssistant analyticsIdentifier]
  -[SBPIPAnalyticsAssistant invalidate]
  -[SBPIPAnalyticsAssistant generateAnalyticsPayload]
  -[SBPIPAnalyticsAssistant initWithBundleIdentifier:contentType:isAutoPIPEnabled:invalidationBlock:]
  -[SBPIPAnalyticsAssistant noteBecameInactiveAtTime:]
  -[SBPIPAnalyticsAssistant noteBecameActiveAtTime:]
  -[SBPIPAnalyticsAssistant _generateMutableAnalyticsPayload]


SBPIPAnalyticsSourceSummaryAssistant : SBPIPAnalyticsAssistant
  // instance methods
  -[SBPIPAnalyticsSourceSummaryAssistant analyticsIdentifier]
  -[SBPIPAnalyticsSourceSummaryAssistant invalidate]
  -[SBPIPAnalyticsSourceSummaryAssistant initWithBundleIdentifier:contentType:isAutoPIPEnabled:invalidationBlock:]
  -[SBPIPAnalyticsSourceSummaryAssistant notePIPBecameProhibitedAtTime:]
  -[SBPIPAnalyticsSourceSummaryAssistant notePIPBecamePossibleAtTime:]
  -[SBPIPAnalyticsSourceSummaryAssistant noteBecameActiveAtTime:]
  -[SBPIPAnalyticsSourceSummaryAssistant _generateMutableAnalyticsPayload]


SBPIPAnalyticsSessionSummaryAssistant : SBPIPAnalyticsAssistant
  // instance methods
  -[SBPIPAnalyticsSessionSummaryAssistant analyticsIdentifier]
  -[SBPIPAnalyticsSessionSummaryAssistant invalidate]
  -[SBPIPAnalyticsSessionSummaryAssistant initWithBundleIdentifier:contentType:isAutoPIPEnabled:invalidationBlock:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteStartedAutomatically:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteBecameUnstashedAtTime:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteAppStoppedSession:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteRestoredFullScreen:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteBecameStashedAtTime:]
  -[SBPIPAnalyticsSessionSummaryAssistant _generateMutableAnalyticsPayload]


SBFluidSwitcherIconOverlayView : SBOrientationTransformWrapperView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} crossfadeViewFrame
 @property  SBIconView *iconView
 @property  double cornerRadius

  // instance methods
  -[SBFluidSwitcherIconOverlayView _setUpIconCrossfadeView]
  -[SBFluidSwitcherIconOverlayView .cxx_destruct]
  -[SBFluidSwitcherIconOverlayView _currentFadeValue]
  -[SBFluidSwitcherIconOverlayView layoutSubviews]
  -[SBFluidSwitcherIconOverlayView initWithIconView:crossfadeViews:crossfadeViewFrame:contentOrientation:containerOrientation:]
  -[SBFluidSwitcherIconOverlayView _applyIconOverlayViewOverlayScaleProperties]
  -[SBFluidSwitcherIconOverlayView setCornerRadius:]
  -[SBFluidSwitcherIconOverlayView cornerRadius]
  -[SBFluidSwitcherIconOverlayView _setCrossfadeViewsAlpha:]
  -[SBFluidSwitcherIconOverlayView dealloc]
  -[SBFluidSwitcherIconOverlayView invalidate]
  -[SBFluidSwitcherIconOverlayView _iconOverlayScale]
  -[SBFluidSwitcherIconOverlayView crossfadeViewFrame]
  -[SBFluidSwitcherIconOverlayView iconView]
  -[SBFluidSwitcherIconOverlayView _setUpIconCrossfadeAnimatableProperty]


SBIdleTimerPolicyAggregator : NSObject <SBIdleTimerObserving, SBIdleTimerGlobalCoordinatorDelegate>
 @property  <SBIdleTimer> *idleTimer
 @property  SBBacklightController *backlightController
 @property  SBDeviceUnlockAggdLogger *logger
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerPolicyAggregator _backlightController]
  -[SBIdleTimerPolicyAggregator _setIdleTimer:]
  -[SBIdleTimerPolicyAggregator idleTimerDidRefresh:]
  -[SBIdleTimerPolicyAggregator idleTimerDidWarn:]
  -[SBIdleTimerPolicyAggregator idleTimerGlobalCoordinator:didActivateIdleTimer:]
  -[SBIdleTimerPolicyAggregator .cxx_destruct]
  -[SBIdleTimerPolicyAggregator idleTimerDidExpire:]
  -[SBIdleTimerPolicyAggregator _removeIdleTimerHandler:]
  -[SBIdleTimerPolicyAggregator idleTimerDidResetForUserAttention:]
  -[SBIdleTimerPolicyAggregator idleTimer]
  -[SBIdleTimerPolicyAggregator _logger]
  -[SBIdleTimerPolicyAggregator _addIdleTimerHandler:]
  -[SBIdleTimerPolicyAggregator _initWithBacklightController:proximitySensorManager:idleEventHandler:globalStateMonitor:unlockLogger:]
  -[SBIdleTimerPolicyAggregator initWithBacklightController:proximitySensorManager:idleEventHandler:]


SBTransitionSwitcherModifierRemovalContext : NSObject
 @property  long long animationStyle

  // instance methods
  -[SBTransitionSwitcherModifierRemovalContext animationStyle]
  -[SBTransitionSwitcherModifierRemovalContext initWithAnimationStyle:]


SBVoiceDisabledBundles : NSObject
  // class methods
  +[SBVoiceDisabledBundles setAppDisabledVoiceControl:bundleIdentifier:]
  +[SBVoiceDisabledBundles voiceControlDisabledByCurrentlyRunningApp]


SBPBAppLayout : PBCodable <NSCopying>
  // instance methods
  -[SBPBAppLayout .cxx_destruct]
  -[SBPBAppLayout dictionaryRepresentation]
  -[SBPBAppLayout writeTo:]
  -[SBPBAppLayout isEqual:]
  -[SBPBAppLayout readFrom:]
  -[SBPBAppLayout copyWithZone:]


SBSwitcherModifierEventResponse : SBChainableModifierEventResponse
  // class methods
  +[SBSwitcherModifierEventResponse newEventResponse]

  // instance methods
  -[SBSwitcherModifierEventResponse loggingCategory]
  -[SBSwitcherModifierEventResponse type]


SBInteractiveScreenshotGestureHostRootViewController : SBFTouchPassThroughViewController <BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInteractiveScreenshotGestureHostRootViewController initWithScreen:]
  -[SBInteractiveScreenshotGestureHostRootViewController .cxx_destruct]
  -[SBInteractiveScreenshotGestureHostRootViewController viewDidLoad]
  -[SBInteractiveScreenshotGestureHostRootViewController invalidate]
  -[SBInteractiveScreenshotGestureHostRootViewController supportedInterfaceOrientations]
  -[SBInteractiveScreenshotGestureHostRootViewController _canShowWhileLocked]
  -[SBInteractiveScreenshotGestureHostRootViewController _reloadLayerHostView]
  -[SBInteractiveScreenshotGestureHostRootViewController setHostingContextID:pid:]


SBSceneLayoutSynchronizeTransitionTransaction : BSTransaction
  // instance methods
  -[SBSceneLayoutSynchronizeTransitionTransaction _canBeInterrupted]
  -[SBSceneLayoutSynchronizeTransitionTransaction .cxx_destruct]
  -[SBSceneLayoutSynchronizeTransitionTransaction synchronize]
  -[SBSceneLayoutSynchronizeTransitionTransaction init]
  -[SBSceneLayoutSynchronizeTransitionTransaction initWithDebugName:]
  -[SBSceneLayoutSynchronizeTransitionTransaction _graphNodeDebugName]


SBSceneLayoutWorkspaceTransaction : SBWorkspaceTransaction <FBSynchronizedTransactionGroupDelegate, FBApplicationUpdateScenesTransactionObserver, FBSynchronizedTransaction>
 @property  <SBSceneLayoutWorkspaceTransactionDelegate> *delegate
 @property  unsigned long options
 @property  BOOL transitioning
 @property  SBWorkspaceApplicationSceneTransitionContext *transitionContext
 @property  NSSet *sceneUpdateTransactions
 @property  NSSet *toApplicationSceneEntities
 @property  NSSet *fromApplicationSceneEntities
 @property  NSSet *foregroundingApplicationSceneEntities
 @property  NSSet *backgroundingApplicationSceneEntities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <FBSynchronizedTransactionDelegate> *synchronizationDelegate

  // instance methods
  -[SBSceneLayoutWorkspaceTransaction _willInterruptWithReason:]
  -[SBSceneLayoutWorkspaceTransaction synchronizationDelegate]
  -[SBSceneLayoutWorkspaceTransaction isReadyForSynchronizedCommit]
  -[SBSceneLayoutWorkspaceTransaction sceneManager]
  -[SBSceneLayoutWorkspaceTransaction _completeTransition]
  -[SBSceneLayoutWorkspaceTransaction fromApplicationSceneEntities]
  -[SBSceneLayoutWorkspaceTransaction _didComplete]
  -[SBSceneLayoutWorkspaceTransaction performSynchronizedCommit]
  -[SBSceneLayoutWorkspaceTransaction synchronizedTransactionReadyToCommit:]
  -[SBSceneLayoutWorkspaceTransaction synchronizedTransaction:willCommitSynchronizedTransactions:]
  -[SBSceneLayoutWorkspaceTransaction _updateScenesForTransitionCompletion]
  -[SBSceneLayoutWorkspaceTransaction setSynchronizationDelegate:]
  -[SBSceneLayoutWorkspaceTransaction synchronizedTransaction:didCommitSynchronizedTransactions:]
  -[SBSceneLayoutWorkspaceTransaction _begin]
  -[SBSceneLayoutWorkspaceTransaction _childTransactionDidComplete:]
  -[SBSceneLayoutWorkspaceTransaction _prepareScenesForTransition]
  -[SBSceneLayoutWorkspaceTransaction toApplicationSceneEntities]
  -[SBSceneLayoutWorkspaceTransaction _canBeInterrupted]
  -[SBSceneLayoutWorkspaceTransaction _willFailWithReason:]
  -[SBSceneLayoutWorkspaceTransaction _orientationForFollowOnRotationIfNeeded]
  -[SBSceneLayoutWorkspaceTransaction options]
  -[SBSceneLayoutWorkspaceTransaction setOptions:]
  -[SBSceneLayoutWorkspaceTransaction .cxx_destruct]
  -[SBSceneLayoutWorkspaceTransaction _sceneEntities:hasEntityRepresentingSceneID:]
  -[SBSceneLayoutWorkspaceTransaction setDelegate:]
  -[SBSceneLayoutWorkspaceTransaction backgroundingApplicationSceneEntities]
  -[SBSceneLayoutWorkspaceTransaction transaction:willUpdateScene:]
  -[SBSceneLayoutWorkspaceTransaction _updateAggregateDictionary]
  -[SBSceneLayoutWorkspaceTransaction sceneUpdateTransactions]
  -[SBSceneLayoutWorkspaceTransaction transaction:didCommitSceneUpdate:]
  -[SBSceneLayoutWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBSceneLayoutWorkspaceTransaction initWithTransitionRequest:]
  -[SBSceneLayoutWorkspaceTransaction _evaluateTransitionCompletion]
  -[SBSceneLayoutWorkspaceTransaction transaction:didLaunchProcess:]
  -[SBSceneLayoutWorkspaceTransaction _prepareScenesForSceneUpdates]
  -[SBSceneLayoutWorkspaceTransaction synchronizedTransactionGroup:shouldFailForSynchronizedTransaction:]
  -[SBSceneLayoutWorkspaceTransaction isTransitioning]
  -[SBSceneLayoutWorkspaceTransaction _sendActivationResultWithError:]
  -[SBSceneLayoutWorkspaceTransaction transaction:willCommitSceneUpdate:]
  -[SBSceneLayoutWorkspaceTransaction delegate]
  -[SBSceneLayoutWorkspaceTransaction _captureAppsForTransition]
  -[SBSceneLayoutWorkspaceTransaction transitionContext]
  -[SBSceneLayoutWorkspaceTransaction transaction:didCreateScene:]
  -[SBSceneLayoutWorkspaceTransaction transaction:willLaunchProcess:]
  -[SBSceneLayoutWorkspaceTransaction _mainDisplayUpdateAggregateDictionaryForLayoutRoleWithApplication:]
  -[SBSceneLayoutWorkspaceTransaction dealloc]
  -[SBSceneLayoutWorkspaceTransaction _willBegin]
  -[SBSceneLayoutWorkspaceTransaction _overrideInterfaceOrientationForOrientationMismatch:]
  -[SBSceneLayoutWorkspaceTransaction _updateKeyboardContextMaskStyles:]
  -[SBSceneLayoutWorkspaceTransaction foregroundingApplicationSceneEntities]
  -[SBSceneLayoutWorkspaceTransaction _performTransition]
  -[SBSceneLayoutWorkspaceTransaction _beginLayoutTransition]
  -[SBSceneLayoutWorkspaceTransaction _prepareLayoutTransition]


SBSceneClientRotationView : UIView
 @property  long long rotation

  // instance methods
  -[SBSceneClientRotationView setRotation:]
  -[SBSceneClientRotationView rotation]


_SBDeviceApplicationSceneClassicHostWrapperView : UIView

_SBDeviceApplicationSceneClassicHostPositioningView : UIView

SBDeviceApplicationSceneView : SBApplicationSceneView <SBDeviceApplicationSceneClassicAccessoryViewDelegate, PTSettingsKeyObserver, SBAppSwitcherPageContentView>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL counterRotationViewTransformUpdatesPaused
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  UIView<SBApplicationSceneBackgroundView> *backgroundView
 @property  BOOL forcesStatusBarHidden
 @property  SBApplicationSceneViewStatusBarDescriptor *statusBarDescriptor
 @property  double statusBarAlpha
 @property  BOOL insetForHomeAffordance
 @property  SBHomeGrabberView *homeGrabberView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  long long orientation
 @property  BOOL contentRequiresGroupOpacity
 @property  BOOL active
 @property  BOOL visible

  // instance methods
  -[SBDeviceApplicationSceneView isInsetForHomeAffordance]
  -[SBDeviceApplicationSceneView setInsetForHomeAffordance:]
  -[SBDeviceApplicationSceneView statusBarAlpha]
  -[SBDeviceApplicationSceneView setVisible:]
  -[SBDeviceApplicationSceneView _updateEdgeProtectAndAutoHideOnHomeGrabberView]
  -[SBDeviceApplicationSceneView _createHostCounterRotationViewIfNecessary]
  -[SBDeviceApplicationSceneView addOverlayView:withPriority:]
  -[SBDeviceApplicationSceneView isActive]
  -[SBDeviceApplicationSceneView counterRotationViewTransformUpdatesPaused]
  -[SBDeviceApplicationSceneView .cxx_destruct]
  -[SBDeviceApplicationSceneView _configureSceneLiveSnapshotView:]
  -[SBDeviceApplicationSceneView createHomeGrabberViewIfNecessaryWithSettings:]
  -[SBDeviceApplicationSceneView _sceneHandleDidUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationSceneView setStatusBarDescriptor:]
  -[SBDeviceApplicationSceneView layoutSubviews]
  -[SBDeviceApplicationSceneView _representsTranslucentContent]
  -[SBDeviceApplicationSceneView deviceApplicationSceneView]
  -[SBDeviceApplicationSceneView contentRequiresGroupOpacity]
  -[SBDeviceApplicationSceneView noteApplicationClassicPhoneSceneOrientationPreferenceChangingForUserAction:]
  -[SBDeviceApplicationSceneView setCounterRotationViewTransformUpdatesPaused:]
  -[SBDeviceApplicationSceneView createClassicAccessoryViewIfNecessary]
  -[SBDeviceApplicationSceneView _layoutLiveHostView:]
  -[SBDeviceApplicationSceneView _contentContainerCornerRadius]
  -[SBDeviceApplicationSceneView isVisible]
  -[SBDeviceApplicationSceneView homeGrabberView]
  -[SBDeviceApplicationSceneView setCornerRadius:]
  -[SBDeviceApplicationSceneView _configureSceneSnapshotContext:]
  -[SBDeviceApplicationSceneView _maybeStartTrackingRotationForOverlay]
  -[SBDeviceApplicationSceneView setMaskedCorners:]
  -[SBDeviceApplicationSceneView _updateStatusBarVisibilityForHostView]
  -[SBDeviceApplicationSceneView removeOverlayView:withPriority:]
  -[SBDeviceApplicationSceneView _sceneDrivesOwnRotation]
  -[SBDeviceApplicationSceneView _configureSceneLiveHostView:]
  -[SBDeviceApplicationSceneView _transitionViewForHostView]
  -[SBDeviceApplicationSceneView _createClassicWrapperViewIfNecessaryForHostView:]
  -[SBDeviceApplicationSceneView setBackgroundView:]
  -[SBDeviceApplicationSceneView cornerRadius]
  -[SBDeviceApplicationSceneView _updateReferenceSize:andOrientation:]
  -[SBDeviceApplicationSceneView setActive:]
  -[SBDeviceApplicationSceneView setForcesStatusBarHidden:]
  -[SBDeviceApplicationSceneView teardownClassicAccessoryViewIfNecessary]
  -[SBDeviceApplicationSceneView applicationSceneCompatibilityModeAnimatingChangeTo:]
  -[SBDeviceApplicationSceneView _tearDownHostCounterRotationViewIfNecessary]
  -[SBDeviceApplicationSceneView settings:changedValueForKey:]
  -[SBDeviceApplicationSceneView _effectiveSceneBounds]
  -[SBDeviceApplicationSceneView forcesStatusBarHidden]
  -[SBDeviceApplicationSceneView _layoutLiveSnapshotView:]
  -[SBDeviceApplicationSceneView _contentContainerEdgeInsets]
  -[SBDeviceApplicationSceneView dealloc]
  -[SBDeviceApplicationSceneView _invalidateSceneLiveHostView:]
  -[SBDeviceApplicationSceneView invalidate]
  -[SBDeviceApplicationSceneView _wallpaperStyle]
  -[SBDeviceApplicationSceneView statusBarDescriptor]
  -[SBDeviceApplicationSceneView setBounds:]
  -[SBDeviceApplicationSceneView _refresh]
  -[SBDeviceApplicationSceneView maskedCorners]
  -[SBDeviceApplicationSceneView _wantsBlackBackground]
  -[SBDeviceApplicationSceneView _updateDragAndDropExclusionDebugViewsIfNecessary]
  -[SBDeviceApplicationSceneView _sceneHandleDidUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDeviceApplicationSceneView setStatusBarAlpha:]
  -[SBDeviceApplicationSceneView initWithSceneHandle:referenceSize:orientation:hostRequester:]
  -[SBDeviceApplicationSceneView tearDownHomeGrabberView]


SBSoundController : NSObject
  // class methods
  +[SBSoundController sharedInstance]

  // instance methods
  -[SBSoundController _playFeedback:]
  -[SBSoundController .cxx_destruct]
  -[SBSoundController _playSystemSound:]
  -[SBSoundController stopSound:]
  -[SBSoundController _enqueueCallback:]
  -[SBSoundController isPlaying:]
  -[SBSoundController init]
  -[SBSoundController playSound:environments:completion:]
  -[SBSoundController addObserver:]
  -[SBSoundController _cleanupSystemSound:andKill:]
  -[SBSoundController _ringerStateChanged:]
  -[SBSoundController playSoundWithDefaultEnvironment:]
  -[SBSoundController _playToneAlert:]
  -[SBSoundController _cleanupToneAlertForSound:andKill:]
  -[SBSoundController stopAllSounds]
  -[SBSoundController isPlayingAnySound]
  -[SBSoundController _soundDidFinishPlaying:]
  -[SBSoundController _beginPendingCallbacksBlock]
  -[SBSoundController handleVolumeButtonDownEvent]
  -[SBSoundController removeObserver:]
  -[SBSoundController _soundDidStartPlaying:]
  -[SBSoundController _endPendingCallbacksBlock]


SBApplicationBlurContentView : UIView
 @property  SBSceneViewAppIconView *iconView
 @property  double iconViewScale
 @property  double blurDelay

  // instance methods
  -[SBApplicationBlurContentView _setState:]
  -[SBApplicationBlurContentView initWithCoder:]
  -[SBApplicationBlurContentView .cxx_destruct]
  -[SBApplicationBlurContentView layoutSubviews]
  -[SBApplicationBlurContentView initWithFrame:]
  -[SBApplicationBlurContentView didMoveToWindow]
  -[SBApplicationBlurContentView dealloc]
  -[SBApplicationBlurContentView iconView]
  -[SBApplicationBlurContentView iconViewScale]
  -[SBApplicationBlurContentView setIconViewScale:]
  -[SBApplicationBlurContentView initWithFrame:bundleIdentifier:targetViewToBlur:initialIconScale:]
  -[SBApplicationBlurContentView setBlurDelay:]
  -[SBApplicationBlurContentView generateAndAnimateToBlurredSnapshotWithAnimationFactory:completion:]
  -[SBApplicationBlurContentView initWithFrame:bundleIdentifier:targetViewToBlur:]
  -[SBApplicationBlurContentView generateBlurredSnapshotWithCompletion:]
  -[SBApplicationBlurContentView animateToBlurredSnapshotWithFactory:completion:]
  -[SBApplicationBlurContentView initWithFrame:bundleIdentifier:icon:targetViewToBlur:initialIconScale:]
  -[SBApplicationBlurContentView _fireCompletionBlocksForState:]
  -[SBApplicationBlurContentView _addCompletionBlock:forState:]
  -[SBApplicationBlurContentView _doBlurGenerationWithCompletion:]
  -[SBApplicationBlurContentView _doAnimationToBlurredSnapshotWithFactory:completion:]
  -[SBApplicationBlurContentView blurDelay]


SBApplicationBlurSnapshotGenerationContainerView : UIView
 @property  UIView *wallpaperView
 @property  UIView *realSnapshotView
 @property  UIView *liveBlurView

  // instance methods
  -[SBApplicationBlurSnapshotGenerationContainerView .cxx_destruct]
  -[SBApplicationBlurSnapshotGenerationContainerView layoutSubviews]
  -[SBApplicationBlurSnapshotGenerationContainerView setWallpaperView:]
  -[SBApplicationBlurSnapshotGenerationContainerView wallpaperView]
  -[SBApplicationBlurSnapshotGenerationContainerView setLiveBlurView:]
  -[SBApplicationBlurSnapshotGenerationContainerView setRealSnapshotView:]
  -[SBApplicationBlurSnapshotGenerationContainerView realSnapshotView]
  -[SBApplicationBlurSnapshotGenerationContainerView liveBlurView]


SBApplicationBlurContentViewBackdropSettings : _UIBackdropViewSettings
  // instance methods
  -[SBApplicationBlurContentViewBackdropSettings setDefaultValues]


SBDeviceApplicationAppClipOverlayViewProvider : SBDeviceApplicationSceneOverlayViewProvider <SBDeviceApplicationSceneHandleObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationAppClipOverlayViewProvider sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationAppClipOverlayViewProvider sceneHandle:didCreateScene:]
  -[SBDeviceApplicationAppClipOverlayViewProvider sceneHandle:didChangeEffectiveForegroundness:]
  -[SBDeviceApplicationAppClipOverlayViewProvider _activateIfPossible]
  -[SBDeviceApplicationAppClipOverlayViewProvider wantsResignActiveAssertion]
  -[SBDeviceApplicationAppClipOverlayViewProvider .cxx_destruct]
  -[SBDeviceApplicationAppClipOverlayViewProvider _deactivateIfPossible]
  -[SBDeviceApplicationAppClipOverlayViewProvider _realOverlayViewController]
  -[SBDeviceApplicationAppClipOverlayViewProvider initWithSceneHandle:delegate:]
  -[SBDeviceApplicationAppClipOverlayViewProvider dealloc]
  -[SBDeviceApplicationAppClipOverlayViewProvider _updateOverlaySceneActivationState]


SBCoverSheetSceneManager : NSObject
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  UIApplicationSceneDeactivationAssertion *notificationCenterAssertion
 @property  UIApplicationSceneDeactivationAssertion *systemAnimationAssertion
 @property  NSMutableArray *pendingSceneUpdateBlocks
 @property  BOOL performingSceneUpdate
 @property  <BSInvalidatable> *stateCaptureInvalidatable
 @property  UIWindow *coverSheetWindow

  // instance methods
  -[SBCoverSheetSceneManager systemAnimationAssertion]
  -[SBCoverSheetSceneManager displayLayoutElement]
  -[SBCoverSheetSceneManager initWithCoverSheetWindow:]
  -[SBCoverSheetSceneManager setDisplayLayoutElement:]
  -[SBCoverSheetSceneManager .cxx_destruct]
  -[SBCoverSheetSceneManager setCoverSheetWindow:]
  -[SBCoverSheetSceneManager _setDisplayLayoutElementActive:]
  -[SBCoverSheetSceneManager setNotificationCenterAssertion:]
  -[SBCoverSheetSceneManager stateCaptureInvalidatable]
  -[SBCoverSheetSceneManager setSystemAnimationAssertion:]
  -[SBCoverSheetSceneManager setPerformingSceneUpdate:]
  -[SBCoverSheetSceneManager isPerformingSceneUpdate]
  -[SBCoverSheetSceneManager updateForegroundScenesForCoverSheetAnimationActive:]
  -[SBCoverSheetSceneManager coverSheetWindow]
  -[SBCoverSheetSceneManager _updateForegroundScenesForNotificationCenter:]
  -[SBCoverSheetSceneManager notificationCenterAssertion]
  -[SBCoverSheetSceneManager setPendingSceneUpdateBlocks:]
  -[SBCoverSheetSceneManager _setSceneBackgrounded:suspendUnderLockEnvironment:]
  -[SBCoverSheetSceneManager updateSceneManagerForPresented:suspendUnderLockEnvironment:]
  -[SBCoverSheetSceneManager pendingSceneUpdateBlocks]
  -[SBCoverSheetSceneManager setStateCaptureInvalidatable:]
  -[SBCoverSheetSceneManager _performSceneUpdateBlock:]
  -[SBCoverSheetSceneManager _performNextSceneUpdateBlock]


SBLoginAppContainerView : UIView
 @property  UIView *contentView
 @property  CSBatteryChargingView *batteryChargingView
 @property  SBLoginAppContainerOverlayWrapperView *thermalWarningView
 @property  SBLockScreenDeviceInformationTextView *deviceInformationTextView
 @property  UIView *pluginView
 @property  _UILegibilitySettings *legibilitySettings

  // instance methods
  -[SBLoginAppContainerView .cxx_destruct]
  -[SBLoginAppContainerView layoutSubviews]
  -[SBLoginAppContainerView contentView]
  -[SBLoginAppContainerView setLegibilitySettings:]
  -[SBLoginAppContainerView setPluginView:]
  -[SBLoginAppContainerView pluginView]
  -[SBLoginAppContainerView initWithFrame:]
  -[SBLoginAppContainerView setContentView:]
  -[SBLoginAppContainerView legibilitySettings]
  -[SBLoginAppContainerView _showOrHidePluginViewAppropriately]
  -[SBLoginAppContainerView setBatteryChargingView:]
  -[SBLoginAppContainerView setThermalWarningView:]
  -[SBLoginAppContainerView setContentHidden:forRequester:]
  -[SBLoginAppContainerView batteryChargingView]
  -[SBLoginAppContainerView thermalWarningView]
  -[SBLoginAppContainerView deviceInformationTextView]
  -[SBLoginAppContainerView setDeviceInformationTextView:]


SBSpotlightDelegateManager : NSObject <SPUIRemoteSearchViewDelegate>
 @property  NSMutableDictionary *delegatesForLevel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSpotlightDelegateManager sharedInstance]

  // instance methods
  -[SBSpotlightDelegateManager dismissSearchView]
  -[SBSpotlightDelegateManager .cxx_destruct]
  -[SBSpotlightDelegateManager _modifyDelegatesWithBlock:]
  -[SBSpotlightDelegateManager addSpotlightDelegate:forLevel:]
  -[SBSpotlightDelegateManager delegatesForLevel]
  -[SBSpotlightDelegateManager setDelegatesForLevel:]
  -[SBSpotlightDelegateManager activeDelegate]
  -[SBSpotlightDelegateManager removeSpotlightDelegate:forLevel:]


SBSpotlightMultiplexingViewController : UIViewController <SBMultiplexedSpotlightDelegate, FBSceneManagerObserver, SBScrollToTopSceneProxyViewDelegate, SBDeviceApplicationSceneStatusBarStateObserver>
 @property  BOOL activeDelegate
 @property  SBMedusaHostedKeyboardWindowLevelAssertion *medusaHostedKeyboardWindowLevelAssertion
 @property  BOOL invalidated
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long level
 @property  <SPUIRemoteSearchViewDelegate> *spotlightDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSpotlightMultiplexingViewController sharedRemoteSearchViewController]
  +[SBSpotlightMultiplexingViewController sharedRemoteSearchViewControllerIfExists]

  // instance methods
  -[SBSpotlightMultiplexingViewController dismissSearchView]
  -[SBSpotlightMultiplexingViewController isInvalidated]
  -[SBSpotlightMultiplexingViewController level]
  -[SBSpotlightMultiplexingViewController sceneHandle]
  -[SBSpotlightMultiplexingViewController sceneWithIdentifier:didChangeStatusBarAlphaTo:]
  -[SBSpotlightMultiplexingViewController .cxx_destruct]
  -[SBSpotlightMultiplexingViewController setLegibilitySettings:]
  -[SBSpotlightMultiplexingViewController sceneManager:didCreateScene:]
  -[SBSpotlightMultiplexingViewController viewDidAppear:]
  -[SBSpotlightMultiplexingViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBSpotlightMultiplexingViewController sceneWithIdentifier:didChangeStatusBarHiddenTo:withAnimation:]
  -[SBSpotlightMultiplexingViewController setInvalidated:]
  -[SBSpotlightMultiplexingViewController viewWillDisappear:]
  -[SBSpotlightMultiplexingViewController sceneManager:didDestroyScene:]
  -[SBSpotlightMultiplexingViewController viewWillAppear:]
  -[SBSpotlightMultiplexingViewController dealloc]
  -[SBSpotlightMultiplexingViewController invalidate]
  -[SBSpotlightMultiplexingViewController remoteSearchViewPresentationSource]
  -[SBSpotlightMultiplexingViewController viewDidDisappear:]
  -[SBSpotlightMultiplexingViewController legibilitySettings]
  -[SBSpotlightMultiplexingViewController setSpotlightDelegate:]
  -[SBSpotlightMultiplexingViewController scrollToTopSceneProxyViewWillExitViewHierarchy:rootedAtWindow:]
  -[SBSpotlightMultiplexingViewController scrollToTopSceneProxyViewDidEnterViewHierarchy:rootedAtWindow:]
  -[SBSpotlightMultiplexingViewController didBecomeActiveDelegate]
  -[SBSpotlightMultiplexingViewController didResignActiveDelegate:]
  -[SBSpotlightMultiplexingViewController isActiveDelegate]
  -[SBSpotlightMultiplexingViewController _registerStatusBarScrollToTopView]
  -[SBSpotlightMultiplexingViewController _updateStatusBarAssertion]
  -[SBSpotlightMultiplexingViewController _clearStatusBarAssertion]
  -[SBSpotlightMultiplexingViewController _unregisterStatusBarScrollToTopView]
  -[SBSpotlightMultiplexingViewController spotlightDelegate]
  -[SBSpotlightMultiplexingViewController setActiveDelegate:]
  -[SBSpotlightMultiplexingViewController _configureStatusBarScrollToTopView]
  -[SBSpotlightMultiplexingViewController _spotlightSceneIdentifier]
  -[SBSpotlightMultiplexingViewController _registerStatusBarScrollToTopViewWithWindow:]
  -[SBSpotlightMultiplexingViewController _unregisterStatusBarScrollToTopViewWithWindow:]
  -[SBSpotlightMultiplexingViewController _isStatusBarEffectivelyHidden]
  -[SBSpotlightMultiplexingViewController _appStatusBarSettingsLevelForSpotlightMultiplexingLevel:]
  -[SBSpotlightMultiplexingViewController medusaHostedKeyboardWindowLevelAssertion]
  -[SBSpotlightMultiplexingViewController setMedusaHostedKeyboardWindowLevelAssertion:]


SBModifierCacheSelectorList : NSObject
  // instance methods
  -[SBModifierCacheSelectorList initWithSelectors:count:]


SBModifierCacheCoordinator : NSObject
  // instance methods
  -[SBModifierCacheCoordinator performResponse:]


SBChainableModifierMethodCache : NSObject <NSCopying>
 @property  SBChainableModifier *modifier
 @property  SBModifierCacheCoordinator *cacheCoordinator
 @property  BOOL hasNonTrampolineIMPs

  // instance methods
  -[SBChainableModifierMethodCache setModifier:]
  -[SBChainableModifierMethodCache .cxx_destruct]
  -[SBChainableModifierMethodCache setCacheCoordinator:]
  -[SBChainableModifierMethodCache initWithIMPs:selectorList:subsequentMethodCacheFunc:]
  -[SBChainableModifierMethodCache cacheCoordinator]
  -[SBChainableModifierMethodCache modifier]
  -[SBChainableModifierMethodCache dealloc]
  -[SBChainableModifierMethodCache copyWithZone:]
  -[SBChainableModifierMethodCache hasNonTrampolineIMPs]


SBSOSLockGestureObserver : NSObject <SBPressSequenceRecognizerDelegate>
 @property  SBPressSequenceObserver *sosLockPressSequenceObserver
 @property  <SBSOSLockGestureObserverDelegate> *delegate
 @property  long long configuration
 @property  long long triggerMechanism
 @property  BOOL gestureLoggingEnabled
 @property  BOOL sosEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSOSLockGestureObserver _configure]
  -[SBSOSLockGestureObserver configuration]
  -[SBSOSLockGestureObserver .cxx_destruct]
  -[SBSOSLockGestureObserver setDelegate:]
  -[SBSOSLockGestureObserver _validator]
  -[SBSOSLockGestureObserver init]
  -[SBSOSLockGestureObserver initWithConfiguration:]
  -[SBSOSLockGestureObserver delegate]
  -[SBSOSLockGestureObserver isSOSEnabled]
  -[SBSOSLockGestureObserver isGestureLoggingEnabled]
  -[SBSOSLockGestureObserver setGestureLoggingEnabled:]
  -[SBSOSLockGestureObserver setSOSEnabled:]
  -[SBSOSLockGestureObserver resetWithNewConfiguration:]
  -[SBSOSLockGestureObserver registerPressDownWithTimestamp:]
  -[SBSOSLockGestureObserver registerPressUpWithTimestamp:]
  -[SBSOSLockGestureObserver triggerMechanism]
  -[SBSOSLockGestureObserver noteDidBeginSOSWithUUID:]
  -[SBSOSLockGestureObserver _watchdogInterval]
  -[SBSOSLockGestureObserver _noteTriggerActionRecievedResponse]
  -[SBSOSLockGestureObserver _noteTriggerDidBecomeActive]
  -[SBSOSLockGestureObserver _noteTriggerDidBecomeInactive]
  -[SBSOSLockGestureObserver _configureSettings]
  -[SBSOSLockGestureObserver _intervalThatSucceeds]
  -[SBSOSLockGestureObserver pressSequenceRecognizerDidCompleteSequence:]
  -[SBSOSLockGestureObserver pressSequenceRecognizer:didBeginPressDownAtIndex:]
  -[SBSOSLockGestureObserver pressSequenceRecognizerDidFail:]
  -[SBSOSLockGestureObserver _setRecognizer:]
  -[SBSOSLockGestureObserver _numberOfPressesThatTrigger]
  -[SBSOSLockGestureObserver _numberOfPressesThatActivate]
  -[SBSOSLockGestureObserver sosLockPressSequenceObserver]
  -[SBSOSLockGestureObserver setSosLockPressSequenceObserver:]


SBSensorActivityDataProvider : NSObject <SBFSensorActivityDataProvider>
 @property  NSSet *activeSensorActivityAttributions
 @property  NSMutableArray *recentSensorActivityAttributions
 @property  NSMutableArray *recentAttributionExpirationTimers
 @property  STMediaStatusDomain *mediaDomain
 @property  NSMutableSet *observers
 @property  SBSensorActivityAttribution *mostRecentSensorActivityAttribution
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSensorActivityDataProvider _sensorActivityAttributionsForActivityAttributions:sensor:]
  -[SBSensorActivityDataProvider recentSensorActivityAttributions]
  -[SBSensorActivityDataProvider .cxx_destruct]
  -[SBSensorActivityDataProvider activeSensorActivityAttributions]
  -[SBSensorActivityDataProvider init]
  -[SBSensorActivityDataProvider _notifyObserversOfActivityChange]
  -[SBSensorActivityDataProvider addObserver:]
  -[SBSensorActivityDataProvider recentAttributionExpirationTimers]
  -[SBSensorActivityDataProvider mediaDomain]
  -[SBSensorActivityDataProvider _updateStateForActiveAttributions:]
  -[SBSensorActivityDataProvider observers]
  -[SBSensorActivityDataProvider setActiveSensorActivityAttributions:]
  -[SBSensorActivityDataProvider mostRecentSensorActivityAttribution]
  -[SBSensorActivityDataProvider initWithSystemStatusServer:]
  -[SBSensorActivityDataProvider removeObserver:]
  -[SBSensorActivityDataProvider _handleMediaDomainData:]


SBMoveGestureRootFloatingSwitcherModifier : SBGestureRootSwitcherModifier
 @property  long long currentFloatingConfiguration
 @property  long long interfaceOrientation

  // instance methods
  -[SBMoveGestureRootFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBMoveGestureRootFloatingSwitcherModifier handleTransitionEvent:]
  -[SBMoveGestureRootFloatingSwitcherModifier setInterfaceOrientation:]
  -[SBMoveGestureRootFloatingSwitcherModifier interfaceOrientation]
  -[SBMoveGestureRootFloatingSwitcherModifier gestureType]
  -[SBMoveGestureRootFloatingSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBMoveGestureRootFloatingSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBMoveGestureRootFloatingSwitcherModifier currentFloatingConfiguration]
  -[SBMoveGestureRootFloatingSwitcherModifier initWithInitialFloatingConfiguration:interfaceOrientation:]
  -[SBMoveGestureRootFloatingSwitcherModifier setCurrentFloatingConfiguration:]


SBTouchTemplateGestureRecognizer : UIGestureRecognizer
 @property  NSMutableDictionary *templatesForTouchType
 @property  NSMapTable *initialTouchPointMap
 @property  unsigned long failedRecognitionAttempts
 @property  unsigned long trackingTouchCount
 @property  double cumulativeMotion
 @property  double cumulativeMotionEnvelope
 @property  double smoothedIncrementalMotion
 @property  NSTimer *_noChangeCancellationTimer
 @property  double animationDistance
 @property  long long requiredDirectionality
 @property  UIGestureRecognizerTransformAnalyzer *transformAnalyzer
 @property  SBTouchTemplate *matchedTemplate
 @property  SBPolygon *matchedPolygon
 @property  <SBTouchTemplateGestureRecognizerDelegate> *delegate
 @property  unsigned long sequenceNumber
 @property  double cumulativePercentage

  // instance methods
  -[SBTouchTemplateGestureRecognizer log:]
  -[SBTouchTemplateGestureRecognizer _setMatchedPolygon:]
  -[SBTouchTemplateGestureRecognizer _reset]
  -[SBTouchTemplateGestureRecognizer .cxx_destruct]
  -[SBTouchTemplateGestureRecognizer _log:]
  -[SBTouchTemplateGestureRecognizer initWithTarget:action:]
  -[SBTouchTemplateGestureRecognizer touchesBegan:withEvent:]
  -[SBTouchTemplateGestureRecognizer setState:]
  -[SBTouchTemplateGestureRecognizer animationDistance]
  -[SBTouchTemplateGestureRecognizer touchesMoved:withEvent:]
  -[SBTouchTemplateGestureRecognizer transformAnalyzer]
  -[SBTouchTemplateGestureRecognizer reset]
  -[SBTouchTemplateGestureRecognizer _computeGestureMotionWithTouches:polygon:]
  -[SBTouchTemplateGestureRecognizer touchesCancelled:withEvent:]
  -[SBTouchTemplateGestureRecognizer logCategory]
  -[SBTouchTemplateGestureRecognizer sequenceNumber]
  -[SBTouchTemplateGestureRecognizer incrementalGestureMotionForCandidate:withTransformAnalyzerInfo:]
  -[SBTouchTemplateGestureRecognizer _shouldAddNewTouchesAfterGestureRecognition]
  -[SBTouchTemplateGestureRecognizer touchesEnded:withEvent:]
  -[SBTouchTemplateGestureRecognizer _projectedMotionForInterval:]
  -[SBTouchTemplateGestureRecognizer _directionallyAcceptMotion:]
  -[SBTouchTemplateGestureRecognizer requiredDirectionality]
  -[SBTouchTemplateGestureRecognizer _matchedTemplate]
  -[SBTouchTemplateGestureRecognizer _updateMatchedTemplateForTouchesBeganOrEnded:]
  -[SBTouchTemplateGestureRecognizer _pingNoChangeCancellationTimer]
  -[SBTouchTemplateGestureRecognizer _updateForTouchesBeganOrMoved:]
  -[SBTouchTemplateGestureRecognizer _polygonForTouches:]
  -[SBTouchTemplateGestureRecognizer _updateForTouchesCancelledOrEnded:state:withEvent:]
  -[SBTouchTemplateGestureRecognizer _noChangeCancellationTimerFired:]
  -[SBTouchTemplateGestureRecognizer _failMeForReason:]
  -[SBTouchTemplateGestureRecognizer _attemptTemplateMatchWithTouches:polygon:]
  -[SBTouchTemplateGestureRecognizer templatesForTouchType:]
  -[SBTouchTemplateGestureRecognizer _failedRecognitionAttempts]
  -[SBTouchTemplateGestureRecognizer _touchesByFilteringRestingTrackpadTouches:]
  -[SBTouchTemplateGestureRecognizer _matchedTemplateForTouches:polygon:]
  -[SBTouchTemplateGestureRecognizer _setMatchedTemplate:]
  -[SBTouchTemplateGestureRecognizer _matchedPolygon]
  -[SBTouchTemplateGestureRecognizer hasSignificantMotionToBegin]
  -[SBTouchTemplateGestureRecognizer _invalidateNoChangeCancellationTimer]
  -[SBTouchTemplateGestureRecognizer _resetNoChangeCancellationTimer]
  -[SBTouchTemplateGestureRecognizer cumulativePercentage]
  -[SBTouchTemplateGestureRecognizer projectedCompletionTypeForInterval:]
  -[SBTouchTemplateGestureRecognizer setTemplates:forTouchType:]
  -[SBTouchTemplateGestureRecognizer _noChangeCancellationTimer]
  -[SBTouchTemplateGestureRecognizer _setNoChangeCancellationTimer:]
  -[SBTouchTemplateGestureRecognizer templatesForTouchType]
  -[SBTouchTemplateGestureRecognizer _initialTouchPointMap]
  -[SBTouchTemplateGestureRecognizer _setFailedRecognitionAttempts:]
  -[SBTouchTemplateGestureRecognizer _trackingTouchCount]
  -[SBTouchTemplateGestureRecognizer _setTrackingTouchCount:]
  -[SBTouchTemplateGestureRecognizer _cumulativeMotion]
  -[SBTouchTemplateGestureRecognizer _setCumulativeMotion:]
  -[SBTouchTemplateGestureRecognizer _cumulativeMotionEnvelope]
  -[SBTouchTemplateGestureRecognizer _setCumulativeMotionEnvelope:]
  -[SBTouchTemplateGestureRecognizer _smoothedIncrementalMotion]
  -[SBTouchTemplateGestureRecognizer _setSmoothedIncrementalMotion:]
  -[SBTouchTemplateGestureRecognizer setAnimationDistance:]
  -[SBTouchTemplateGestureRecognizer setRequiredDirectionality:]


SBTemplateAndMorph : NSObject
 @property  SBPolygon *morphedCandidate
 @property  SBTouchTemplate *touchTemplate

  // instance methods
  -[SBTemplateAndMorph .cxx_destruct]
  -[SBTemplateAndMorph initWithTemplate:morph:]
  -[SBTemplateAndMorph morphedCandidate]
  -[SBTemplateAndMorph touchTemplate]


SBUpdateFocusedAppLayoutSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  SBAppLayout *appLayout
 @property  BOOL focused

  // instance methods
  -[SBUpdateFocusedAppLayoutSwitcherModifierEvent isFocused]
  -[SBUpdateFocusedAppLayoutSwitcherModifierEvent appLayout]
  -[SBUpdateFocusedAppLayoutSwitcherModifierEvent .cxx_destruct]
  -[SBUpdateFocusedAppLayoutSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBUpdateFocusedAppLayoutSwitcherModifierEvent type]
  -[SBUpdateFocusedAppLayoutSwitcherModifierEvent copyWithZone:]
  -[SBUpdateFocusedAppLayoutSwitcherModifierEvent initWithAppLayout:focused:]


SBDashBoardNotificationPresenter : NSObject <CSNotificationPresenting>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardNotificationPresenter presentModalBannerAndExpandForNotificationRequest:]


SBSpotlightLegibilityProvider : NSObject <SBWallpaperObserver, SBFLegibilitySettingsProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  _UILegibilitySettings *legibilitySettings
 @property  <SBFLegibilitySettingsProviderDelegate> *delegate

  // instance methods
  -[SBSpotlightLegibilityProvider wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBSpotlightLegibilityProvider wallpaperDidChangeForVariant:]
  -[SBSpotlightLegibilityProvider .cxx_destruct]
  -[SBSpotlightLegibilityProvider setDelegate:]
  -[SBSpotlightLegibilityProvider delegate]
  -[SBSpotlightLegibilityProvider dealloc]
  -[SBSpotlightLegibilityProvider legibilitySettings]
  -[SBSpotlightLegibilityProvider initWithVariant:]
  -[SBSpotlightLegibilityProvider initWithVariant:wallpaperController:]
  -[SBSpotlightLegibilityProvider _calculateLegibilitySettings]
  -[SBSpotlightLegibilityProvider _rectForSpotlightHeader]
  -[SBSpotlightLegibilityProvider wallpaperGeometryDidChangeForVariant:]


SBClockApplicationIcon : SBApplicationIcon

SBPreferenceChangeDodgingModifierEvent : SBDodgingModifierEvent
 @property  NSString *identifier
 @property  unsigned long phase
 @property  unsigned long style

  // instance methods
  -[SBPreferenceChangeDodgingModifierEvent phase]
  -[SBPreferenceChangeDodgingModifierEvent .cxx_destruct]
  -[SBPreferenceChangeDodgingModifierEvent identifier]
  -[SBPreferenceChangeDodgingModifierEvent type]
  -[SBPreferenceChangeDodgingModifierEvent style]
  -[SBPreferenceChangeDodgingModifierEvent initWithIdentifier:phase:style:]


SBAttentionAwarenessClient : NSObject <BSInvalidatable>
 @property  <SBAttentionAwarenessClientDelegate> *delegate
 @property  AWAttentionAwarenessConfiguration *configuration
 @property  BOOL enabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAttentionAwarenessClient _resume]
  -[SBAttentionAwarenessClient _handleAttentionAwarenessEvent:]
  -[SBAttentionAwarenessClient configuration]
  -[SBAttentionAwarenessClient .cxx_destruct]
  -[SBAttentionAwarenessClient setDelegate:]
  -[SBAttentionAwarenessClient init]
  -[SBAttentionAwarenessClient resetAttentionLostTimeout]
  -[SBAttentionAwarenessClient _suspend]
  -[SBAttentionAwarenessClient isEnabled]
  -[SBAttentionAwarenessClient delegate]
  -[SBAttentionAwarenessClient _resetAttentionLostTimeout]
  -[SBAttentionAwarenessClient invalidate]
  -[SBAttentionAwarenessClient setEnabled:]
  -[SBAttentionAwarenessClient setConfiguration:shouldReset:]
  -[SBAttentionAwarenessClient setConfiguration:]


SBElasticHUDSettings : PTSettings
 @property  double minMaxXScaleSpringRetargetImpulse
 @property  double minMaxXScaleSpringDampingRatio
 @property  double minMaxXScaleSpringResponse
 @property  double minMaxXScaleSpringVolumeToMax
 @property  double minMaxXScaleSpringVolumeToMin
 @property  double minMaxYScaleSpringRetargetImpulse
 @property  double minMaxYScaleSpringDampingRatio
 @property  double minMaxYScaleSpringResponse
 @property  double minMaxYScaleSpringVolumeToMax
 @property  double minMaxYScaleSpringVolumeToMin
 @property  double deflatorTargetDownScale
 @property  double deflatorTargetCompleteDownScale
 @property  double deflatorTargetFudgeFactor
 @property  double deflatorTargetCompleteImpulse
 @property  double positionXSpringRetargetImpulse
 @property  double positionXSpringDampingRatio
 @property  double positionXSpringResponse
 @property  double positionXSpringResponseBeginDeflator
 @property  double positionXSpringResponseFinishDeflate
 @property  double positionYSpringRetargetImpulse
 @property  double positionYSpringDampingRatio
 @property  double positionYSpringResponse
 @property  double scaleSpringRetargetImpulse
 @property  double scaleSpringDampingRatio
 @property  double scaleSpringResponse
 @property  double scaleSpringResponseBeginDeflator
 @property  double scaleSpringResponseFinishDeflate
 @property  double scaleSpringBase
 @property  double scaleSpringTracking
 @property  double dimmingAlpha
 @property  double dismissalInterval
 @property  double legibilityStrength
 @property  double labelMargin
 @property  double onscreenTopMargin
 @property  double onscreenLeadingMargin
 @property  double offscreenTopMargin
 @property  double offscreenLeadingMargin
 @property  double landscapeScaleSpringVolumeDownInput
 @property  double landscapeScaleSpringVolumeUpInput
 @property  double portraitScaleSpringVolumeDownInput
 @property  double portraitScaleSpringVolumeUpInput
 @property  double landscapeState1CornerRadius
 @property  double landscapeState2CornerRadius
 @property  double landscapeState3CornerRadius
 @property  double landscapeStateBaseCornerRadius
 @property  double portraitState1CornerRadius
 @property  double portraitState2CornerRadius
 @property  double portraitState3CornerRadius
 @property  double portraitStateBaseCornerRadius
 @property  double landscapeState1Width
 @property  double landscapeState2Width
 @property  double landscapeState3Width
 @property  double landscapeState1Height
 @property  double landscapeState2Height
 @property  double landscapeState3Height
 @property  double portraitState1Width
 @property  double portraitState2Width
 @property  double portraitState3Width
 @property  double portraitState1Height
 @property  double portraitState2Height
 @property  double portraitState3Height
 @property  double volumeButtonsCenterY
 @property  BOOL showDebugUI
 @property  BOOL autoDismiss
 @property  float volumeStepDelta
 @property  BOOL requiresTickHapticMitigations
 @property  BOOL rampTickHapticIntensity
 @property  float minimumTickHapticIntensity
 @property  float maximumTickHapticIntensity
 @property  unsigned long tickHapticSkipInterval
 @property  BOOL displayBrightnessKeyCommandsEnabled
 @property  BOOL keyboardBrightnessKeyCommandsEnabled

  // class methods
  +[SBElasticHUDSettings settingsControllerModule]

  // instance methods
  -[SBElasticHUDSettings minMaxXScaleSpringVolumeToMax]
  -[SBElasticHUDSettings setLandscapeState3Height:]
  -[SBElasticHUDSettings deflatorTargetFudgeFactor]
  -[SBElasticHUDSettings scaleSpringRetargetImpulse]
  -[SBElasticHUDSettings portraitScaleSpringVolumeDownInput]
  -[SBElasticHUDSettings landscapeState1Height]
  -[SBElasticHUDSettings setMinMaxYScaleSpringResponse:]
  -[SBElasticHUDSettings setVolumeButtonsCenterY:]
  -[SBElasticHUDSettings landscapeState2Width]
  -[SBElasticHUDSettings positionYSpringResponse]
  -[SBElasticHUDSettings minMaxXScaleSpringDampingRatio]
  -[SBElasticHUDSettings keyboardBrightnessKeyCommandsEnabled]
  -[SBElasticHUDSettings setPositionYSpringDampingRatio:]
  -[SBElasticHUDSettings setVolumeStepDelta:]
  -[SBElasticHUDSettings minMaxYScaleSpringDampingRatio]
  -[SBElasticHUDSettings portraitState3CornerRadius]
  -[SBElasticHUDSettings scaleSpringTracking]
  -[SBElasticHUDSettings labelMargin]
  -[SBElasticHUDSettings setDeflatorTargetCompleteDownScale:]
  -[SBElasticHUDSettings positionXSpringResponse]
  -[SBElasticHUDSettings legibilityStrength]
  -[SBElasticHUDSettings dimmingAlpha]
  -[SBElasticHUDSettings setPositionXSpringRetargetImpulse:]
  -[SBElasticHUDSettings setDisplayBrightnessKeyCommandsEnabled:]
  -[SBElasticHUDSettings portraitScaleSpringVolumeUpInput]
  -[SBElasticHUDSettings setPortraitStateBaseCornerRadius:]
  -[SBElasticHUDSettings setDimmingAlpha:]
  -[SBElasticHUDSettings setPositionYSpringRetargetImpulse:]
  -[SBElasticHUDSettings deflatorTargetCompleteDownScale]
  -[SBElasticHUDSettings landscapeState2CornerRadius]
  -[SBElasticHUDSettings setMinMaxXScaleSpringVolumeToMax:]
  -[SBElasticHUDSettings setPortraitScaleSpringVolumeDownInput:]
  -[SBElasticHUDSettings minMaxXScaleSpringVolumeToMin]
  -[SBElasticHUDSettings setOnscreenTopMargin:]
  -[SBElasticHUDSettings setDefaultValues]
  -[SBElasticHUDSettings setPortraitScaleSpringVolumeUpInput:]
  -[SBElasticHUDSettings scaleSpringResponseFinishDeflate]
  -[SBElasticHUDSettings scaleSpringDampingRatio]
  -[SBElasticHUDSettings setMaximumTickHapticIntensity:]
  -[SBElasticHUDSettings setPortraitState1CornerRadius:]
  -[SBElasticHUDSettings setPortraitState2Width:]
  -[SBElasticHUDSettings setPortraitState3CornerRadius:]
  -[SBElasticHUDSettings portraitState2CornerRadius]
  -[SBElasticHUDSettings setScaleSpringDampingRatio:]
  -[SBElasticHUDSettings portraitState1Width]
  -[SBElasticHUDSettings positionXSpringDampingRatio]
  -[SBElasticHUDSettings setLandscapeScaleSpringVolumeUpInput:]
  -[SBElasticHUDSettings minMaxYScaleSpringVolumeToMin]
  -[SBElasticHUDSettings autoDismiss]
  -[SBElasticHUDSettings landscapeState2Height]
  -[SBElasticHUDSettings setPositionXSpringResponseFinishDeflate:]
  -[SBElasticHUDSettings landscapeState3Width]
  -[SBElasticHUDSettings setLandscapeState3CornerRadius:]
  -[SBElasticHUDSettings dismissalInterval]
  -[SBElasticHUDSettings minimumTickHapticIntensity]
  -[SBElasticHUDSettings setLandscapeState2CornerRadius:]
  -[SBElasticHUDSettings landscapeStateBaseCornerRadius]
  -[SBElasticHUDSettings setPortraitState2CornerRadius:]
  -[SBElasticHUDSettings setScaleSpringResponseFinishDeflate:]
  -[SBElasticHUDSettings scaleSpringResponseBeginDeflator]
  -[SBElasticHUDSettings setMinMaxYScaleSpringDampingRatio:]
  -[SBElasticHUDSettings setPortraitState3Height:]
  -[SBElasticHUDSettings portraitState1CornerRadius]
  -[SBElasticHUDSettings portraitState1Height]
  -[SBElasticHUDSettings setScaleSpringBase:]
  -[SBElasticHUDSettings minMaxYScaleSpringRetargetImpulse]
  -[SBElasticHUDSettings rampTickHapticIntensity]
  -[SBElasticHUDSettings setAutoDismiss:]
  -[SBElasticHUDSettings setOffscreenTopMargin:]
  -[SBElasticHUDSettings setPortraitState3Width:]
  -[SBElasticHUDSettings positionXSpringResponseFinishDeflate]
  -[SBElasticHUDSettings deflatorTargetCompleteImpulse]
  -[SBElasticHUDSettings onscreenLeadingMargin]
  -[SBElasticHUDSettings scaleSpringBase]
  -[SBElasticHUDSettings portraitState2Width]
  -[SBElasticHUDSettings setLandscapeScaleSpringVolumeDownInput:]
  -[SBElasticHUDSettings setPortraitState1Height:]
  -[SBElasticHUDSettings tickHapticSkipInterval]
  -[SBElasticHUDSettings landscapeScaleSpringVolumeUpInput]
  -[SBElasticHUDSettings portraitStateBaseCornerRadius]
  -[SBElasticHUDSettings positionXSpringResponseBeginDeflator]
  -[SBElasticHUDSettings setLabelMargin:]
  -[SBElasticHUDSettings setLandscapeState1CornerRadius:]
  -[SBElasticHUDSettings setMinMaxXScaleSpringDampingRatio:]
  -[SBElasticHUDSettings setDeflatorTargetCompleteImpulse:]
  -[SBElasticHUDSettings offscreenLeadingMargin]
  -[SBElasticHUDSettings setLandscapeState3Width:]
  -[SBElasticHUDSettings setOffscreenLeadingMargin:]
  -[SBElasticHUDSettings minMaxYScaleSpringVolumeToMax]
  -[SBElasticHUDSettings landscapeState3CornerRadius]
  -[SBElasticHUDSettings minMaxXScaleSpringResponse]
  -[SBElasticHUDSettings maximumTickHapticIntensity]
  -[SBElasticHUDSettings setPositionXSpringResponseBeginDeflator:]
  -[SBElasticHUDSettings landscapeScaleSpringVolumeDownInput]
  -[SBElasticHUDSettings setDismissalInterval:]
  -[SBElasticHUDSettings setKeyboardBrightnessKeyCommandsEnabled:]
  -[SBElasticHUDSettings setPositionXSpringDampingRatio:]
  -[SBElasticHUDSettings setScaleSpringResponse:]
  -[SBElasticHUDSettings scaleSpringResponse]
  -[SBElasticHUDSettings showDebugUI]
  -[SBElasticHUDSettings setShowDebugUI:]
  -[SBElasticHUDSettings portraitState3Height]
  -[SBElasticHUDSettings landscapeState1CornerRadius]
  -[SBElasticHUDSettings setPortraitState1Width:]
  -[SBElasticHUDSettings portraitState2Height]
  -[SBElasticHUDSettings onscreenTopMargin]
  -[SBElasticHUDSettings setMinMaxYScaleSpringVolumeToMax:]
  -[SBElasticHUDSettings setScaleSpringTracking:]
  -[SBElasticHUDSettings deflatorTargetDownScale]
  -[SBElasticHUDSettings landscapeState3Height]
  -[SBElasticHUDSettings setMinMaxYScaleSpringVolumeToMin:]
  -[SBElasticHUDSettings setRampTickHapticIntensity:]
  -[SBElasticHUDSettings landscapeState1Width]
  -[SBElasticHUDSettings portraitState3Width]
  -[SBElasticHUDSettings setMinMaxXScaleSpringVolumeToMin:]
  -[SBElasticHUDSettings setMinMaxYScaleSpringRetargetImpulse:]
  -[SBElasticHUDSettings setPortraitState2Height:]
  -[SBElasticHUDSettings setRequiresTickHapticMitigations:]
  -[SBElasticHUDSettings minMaxYScaleSpringResponse]
  -[SBElasticHUDSettings positionXSpringRetargetImpulse]
  -[SBElasticHUDSettings requiresTickHapticMitigations]
  -[SBElasticHUDSettings setDeflatorTargetFudgeFactor:]
  -[SBElasticHUDSettings setLandscapeState2Height:]
  -[SBElasticHUDSettings setLegibilityStrength:]
  -[SBElasticHUDSettings setMinimumTickHapticIntensity:]
  -[SBElasticHUDSettings setTickHapticSkipInterval:]
  -[SBElasticHUDSettings volumeButtonsCenterY]
  -[SBElasticHUDSettings setLandscapeState1Height:]
  -[SBElasticHUDSettings setMinMaxXScaleSpringRetargetImpulse:]
  -[SBElasticHUDSettings setPositionXSpringResponse:]
  -[SBElasticHUDSettings setScaleSpringResponseBeginDeflator:]
  -[SBElasticHUDSettings setScaleSpringRetargetImpulse:]
  -[SBElasticHUDSettings displayBrightnessKeyCommandsEnabled]
  -[SBElasticHUDSettings setLandscapeState2Width:]
  -[SBElasticHUDSettings setMinMaxXScaleSpringResponse:]
  -[SBElasticHUDSettings setPositionYSpringResponse:]
  -[SBElasticHUDSettings positionYSpringDampingRatio]
  -[SBElasticHUDSettings positionYSpringRetargetImpulse]
  -[SBElasticHUDSettings setDeflatorTargetDownScale:]
  -[SBElasticHUDSettings setLandscapeStateBaseCornerRadius:]
  -[SBElasticHUDSettings offscreenTopMargin]
  -[SBElasticHUDSettings minMaxXScaleSpringRetargetImpulse]
  -[SBElasticHUDSettings setLandscapeState1Width:]
  -[SBElasticHUDSettings setOnscreenLeadingMargin:]
  -[SBElasticHUDSettings volumeStepDelta]


SBTodayViewSpotlightPresenter : NSObject <SPUISearchBarDelegate, SPUIRemoteSearchViewDelegate, PTSettingsKeyObserver>
 @property  UIView *containerView
 @property  UIScrollView *scrollView
 @property  <SBTodayViewSpotlightPresenterDelegate> *delegate
 @property  SBFFluidBehaviorSettings *searchAnimationSettings
 @property  long long searchState
 @property  BOOL scrollViewBeganScrollingFromTop
 @property  SBFFeatherBlurView *featherBlurView
 @property  NSLayoutConstraint *featherBlurHeightConstraint
 @property  NSArray *searchBarGradientMaskLayers
 @property  MTMaterialView *searchBackdropView
 @property  _SBTodaySpotlightViewController *spotlightViewController
 @property  _UIPortalView *searchBarPortalView
 @property  NSLayoutConstraint *searchBarViewTopConstraint
 @property  NSMutableSet *searchBarPortalRequirementReasons
 @property  SPUISearchBarController *searchBarViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTodayViewSpotlightPresenter searchBarDidFocus]
  -[SBTodayViewSpotlightPresenter dismissSearchView]
  -[SBTodayViewSpotlightPresenter searchBackdropView]
  -[SBTodayViewSpotlightPresenter setScrollView:]
  -[SBTodayViewSpotlightPresenter _setUpSearchBackdropMatchMoveAnimation]
  -[SBTodayViewSpotlightPresenter dismissSpotlightAnimated:]
  -[SBTodayViewSpotlightPresenter _setUpSearchBar]
  -[SBTodayViewSpotlightPresenter _rubberbandingOffsetForContentOffset:]
  -[SBTodayViewSpotlightPresenter scrollView]
  -[SBTodayViewSpotlightPresenter _layoutSearchViewsWithMode:withCompletion:]
  -[SBTodayViewSpotlightPresenter _setUpFeatherBackgroundMatchMoveAnimations]
  -[SBTodayViewSpotlightPresenter _beginRequiringSearchBarPortalViewForReason:]
  -[SBTodayViewSpotlightPresenter setScrollViewBeganScrollingFromTop:]
  -[SBTodayViewSpotlightPresenter containerView]
  -[SBTodayViewSpotlightPresenter _setUpSearchAnimationSettings]
  -[SBTodayViewSpotlightPresenter _willPresentSpotlightAnimated:]
  -[SBTodayViewSpotlightPresenter .cxx_destruct]
  -[SBTodayViewSpotlightPresenter _layoutSearchViews]
  -[SBTodayViewSpotlightPresenter scrollViewWillEndDragging:]
  -[SBTodayViewSpotlightPresenter containerViewDidMoveToWindow:]
  -[SBTodayViewSpotlightPresenter initWithSearchBarViewController:containerView:scrollView:delegate:]
  -[SBTodayViewSpotlightPresenter setSearchAnimationSettings:]
  -[SBTodayViewSpotlightPresenter containerViewWillTransitionToSize:withTransitionCoordinator:]
  -[SBTodayViewSpotlightPresenter setDelegate:]
  -[SBTodayViewSpotlightPresenter _didPresentSpotlight]
  -[SBTodayViewSpotlightPresenter setSearchBarGradientMaskLayers:]
  -[SBTodayViewSpotlightPresenter setFeatherBlurView:]
  -[SBTodayViewSpotlightPresenter _didDismissSpotlight]
  -[SBTodayViewSpotlightPresenter featherBlurView]
  -[SBTodayViewSpotlightPresenter _willDismissSpotlightAnimated:]
  -[SBTodayViewSpotlightPresenter setSpotlightViewController:]
  -[SBTodayViewSpotlightPresenter _topOffset]
  -[SBTodayViewSpotlightPresenter scrollViewDidScroll:]
  -[SBTodayViewSpotlightPresenter setContainerView:]
  -[SBTodayViewSpotlightPresenter setSearchBackdropView:]
  -[SBTodayViewSpotlightPresenter updateMaskLayerFrame]
  -[SBTodayViewSpotlightPresenter spotlightViewController]
  -[SBTodayViewSpotlightPresenter searchAnimationSettings]
  -[SBTodayViewSpotlightPresenter setSearchState:]
  -[SBTodayViewSpotlightPresenter scrollViewWillBeginDragging:]
  -[SBTodayViewSpotlightPresenter scrollViewBeganScrollingFromTop]
  -[SBTodayViewSpotlightPresenter searchBarGradientMaskLayers]
  -[SBTodayViewSpotlightPresenter delegate]
  -[SBTodayViewSpotlightPresenter _updateMaskLayers]
  -[SBTodayViewSpotlightPresenter featherBlurHeightConstraint]
  -[SBTodayViewSpotlightPresenter settings:changedValueForKey:]
  -[SBTodayViewSpotlightPresenter searchState]
  -[SBTodayViewSpotlightPresenter _setUpSearchBackdrop]
  -[SBTodayViewSpotlightPresenter setSearchBarPortalView:]
  -[SBTodayViewSpotlightPresenter searchBarViewTopConstraint]
  -[SBTodayViewSpotlightPresenter setSearchBarPortalRequirementReasons:]
  -[SBTodayViewSpotlightPresenter setSearchBarViewTopConstraint:]
  -[SBTodayViewSpotlightPresenter _endRequiringSearchBarPortalViewForReason:]
  -[SBTodayViewSpotlightPresenter sharedRemoteSearchViewController]
  -[SBTodayViewSpotlightPresenter presentSpotlightAnimated:]
  -[SBTodayViewSpotlightPresenter searchBarViewController]
  -[SBTodayViewSpotlightPresenter setFeatherBlurHeightConstraint:]
  -[SBTodayViewSpotlightPresenter isPresenting]
  -[SBTodayViewSpotlightPresenter searchBarPortalRequirementReasons]
  -[SBTodayViewSpotlightPresenter _spotlightPresentationProgressForOffset:]
  -[SBTodayViewSpotlightPresenter layout]
  -[SBTodayViewSpotlightPresenter searchBarPortalView]


_SBTodaySpotlightViewController : SBSpotlightMultiplexingViewController
 @property  long long location

  // instance methods
  -[_SBTodaySpotlightViewController level]
  -[_SBTodaySpotlightViewController setLocation:]
  -[_SBTodaySpotlightViewController location]
  -[_SBTodaySpotlightViewController remoteSearchViewPresentationSource]
  -[_SBTodaySpotlightViewController _canShowWhileLocked]


SBCoverSheetBlurView : UIView <SBWallpaperObserver>
 @property  double blurRadius
 @property  double weighting
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBCoverSheetBlurView layerClass]

  // instance methods
  -[SBCoverSheetBlurView backdropLayer]
  -[SBCoverSheetBlurView setWeighting:]
  -[SBCoverSheetBlurView wallpaperDidChangeForVariant:]
  -[SBCoverSheetBlurView weighting]
  -[SBCoverSheetBlurView _configureForCurrentReduceTransparencySetting]
  -[SBCoverSheetBlurView setBlurRadius:]
  -[SBCoverSheetBlurView .cxx_destruct]
  -[SBCoverSheetBlurView initWithFrame:scaleAdjustment:alphaAdjustment:]
  -[SBCoverSheetBlurView layoutSubviews]
  -[SBCoverSheetBlurView _reduceTransparencyEnabledStateDidChange:]
  -[SBCoverSheetBlurView setWeighting:forPresentationValue:]
  -[SBCoverSheetBlurView blurRadius]
  -[SBCoverSheetBlurView _updateForBlurRadius:weighting:forPresentationValue:]
  -[SBCoverSheetBlurView _removeFilters]
  -[SBCoverSheetBlurView _createFilters]
  -[SBCoverSheetBlurView _averageWallpaperColor]
  -[SBCoverSheetBlurView dealloc]
  -[SBCoverSheetBlurView _createReduceTransparencyView]
  -[SBCoverSheetBlurView _removeReduceTransparencyView]


SBWallpaperEffectView : SBWWallpaperEffectViewBase <SBApplicationSceneBackgroundView>
 @property  SBWallpaperController *wallpaperController
 @property  BOOL fullscreen
 @property  long long wallpaperStyle
 @property  BOOL needsClassicModeBackground
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWallpaperEffectView initWithWallpaperVariant:transformOptions:]
  -[SBWallpaperEffectView initWithWallpaperVariant:]
  -[SBWallpaperEffectView wallpaperController]
  -[SBWallpaperEffectView initWithFrame:]


SBRemovalDodgingModifierEvent : SBDodgingModifierEvent
 @property  NSString *identifier

  // instance methods
  -[SBRemovalDodgingModifierEvent initWithIdentifier:]
  -[SBRemovalDodgingModifierEvent .cxx_destruct]
  -[SBRemovalDodgingModifierEvent identifier]
  -[SBRemovalDodgingModifierEvent type]


SBFluidSwitcherAnimationController : SBUIBlockAnimationController <SBUIAnimationControllerObserver>
 @property  @? animationCompletion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherAnimationController isFluidSwitcherAnimationController]
  -[SBFluidSwitcherAnimationController .cxx_destruct]
  -[SBFluidSwitcherAnimationController setAnimationCompletion:]
  -[SBFluidSwitcherAnimationController initWithWorkspaceTransitionRequest:animationSettings:animationBlock:]
  -[SBFluidSwitcherAnimationController animationControllerDidFinishAnimation:]
  -[SBFluidSwitcherAnimationController animationCompletion]


SBBulletinLocalObserverGateway : NSObject <BBObserverDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBulletinLocalObserverGateway sharedInstance]

  // instance methods
  -[SBBulletinLocalObserverGateway .cxx_destruct]
  -[SBBulletinLocalObserverGateway init]
  -[SBBulletinLocalObserverGateway observer:addBulletin:forFeed:playLightsAndSirens:withReply:]


SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems : NSObject <SBApplicationLaunchAlertEvaluator>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems initWithAirplaneModeController:telephonyManager:]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems .cxx_destruct]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems init]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems shouldShowLaunchAlertForApplication:]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems _telephonyManager]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems _airplaneModeController]


SBMainDisplaySystemGestureManager : SBSystemGestureManager <SBFZStackParticipantDelegate>
 @property  SBHomeGestureParticipant *accessibilityHomeGestureParticipant
 @property  SBFZStackParticipant *accessibilityZStackParticipant
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainDisplaySystemGestureManager sharedInstance]

  // instance methods
  -[SBMainDisplaySystemGestureManager _shouldEnableSystemGestureWithType:]
  -[SBMainDisplaySystemGestureManager setAccessibilityZStackParticipant:]
  -[SBMainDisplaySystemGestureManager zStackParticipant:updatePreferences:]
  -[SBMainDisplaySystemGestureManager _setupSystemGestureEventDeferringIfNeeded]
  -[SBMainDisplaySystemGestureManager zStackParticipantDidChange:]
  -[SBMainDisplaySystemGestureManager .cxx_destruct]
  -[SBMainDisplaySystemGestureManager _evaluateEnablement]
  -[SBMainDisplaySystemGestureManager addGestureRecognizer:withType:]
  -[SBMainDisplaySystemGestureManager descriptionBuilderWithMultilinePrefix:]
  -[SBMainDisplaySystemGestureManager _initWithDisplayIdentity:]
  -[SBMainDisplaySystemGestureManager shouldSystemGestureReceiveTouchWithLocation:]
  -[SBMainDisplaySystemGestureManager accessibilityHomeGestureParticipant]
  -[SBMainDisplaySystemGestureManager _updateUserPreferences]
  -[SBMainDisplaySystemGestureManager _init]
  -[SBMainDisplaySystemGestureManager setAccessibilityHomeGestureParticipant:]
  -[SBMainDisplaySystemGestureManager dealloc]
  -[SBMainDisplaySystemGestureManager _isTouchGestureWithType:]
  -[SBMainDisplaySystemGestureManager setSystemGesturesDisabledForAccessibility:]
  -[SBMainDisplaySystemGestureManager accessibilityZStackParticipant]
  -[SBMainDisplaySystemGestureManager _isGestureWithTypeAllowed:]


SBBiometricMonitorViewController : UIViewController
 @property  SBBiometricMonitorView *monitorView

  // instance methods
  -[SBBiometricMonitorViewController loadView]
  -[SBBiometricMonitorViewController monitorView]


SBMedusaSettings : PTSettings
 @property  double vibrantColorMatrixM11
 @property  double vibrantColorMatrixM12
 @property  double vibrantColorMatrixM13
 @property  double vibrantColorMatrixM14
 @property  double vibrantColorMatrixM15
 @property  double vibrantColorMatrixM21
 @property  double vibrantColorMatrixM22
 @property  double vibrantColorMatrixM23
 @property  double vibrantColorMatrixM24
 @property  double vibrantColorMatrixM25
 @property  double vibrantColorMatrixM31
 @property  double vibrantColorMatrixM32
 @property  double vibrantColorMatrixM33
 @property  double vibrantColorMatrixM34
 @property  double vibrantColorMatrixM35
 @property  double vibrantColorMatrixM41
 @property  double vibrantColorMatrixM42
 @property  double vibrantColorMatrixM43
 @property  double vibrantColorMatrixM44
 @property  double vibrantColorMatrixM45
 @property  double medusaSeparatorCursorTopEdgeInset
 @property  double medusaSeparatorCursorBottomEdgeInset
 @property  double medusaSeparatorCursorLeftEdgeInset
 @property  double medusaSeparatorCursorRightEdgeInset
 @property  double medusaWindowDraggingCursorTopEdgeInset
 @property  double medusaWindowDraggingCursorBottomEdgeInset
 @property  double medusaWindowDraggingCursorLeftEdgeInset
 @property  double medusaWindowDraggingCursorRightEdgeInset
 @property  SBMedusa1oSettings *medusa1oSettings
 @property  BOOL persistentDock
 @property  double numberOfRecents
 @property  double dismissHitTestTopPadding
 @property  SBFFluidBehaviorSettings *dockAnimationSettings
 @property  SBFFluidBehaviorSettings *dockWithPresentedFolderAnimationSettings
 @property  double narrowEdgeSwipeHitTestWidth
 @property  double wideEdgeSwipeHitTestWidth
 @property  double rimShadowOpacity
 @property  double rimShadowRadius
 @property  double floatingAppCardScaleWhileTouched
 @property  double floatingAppCardScaleWhileCursorHovered
 @property  double diffuseShadowRadius
 @property  double diffuseShadowOpacity
 @property  double diffuseShadowOffsetHorizontal
 @property  double diffuseShadowOffsetVertical
 @property  double diffuseShadowRadiusWhileTouched
 @property  double diffuseShadowOpacityWhileTouched
 @property  double diffuseShadowOffsetHorizontalWhileTouched
 @property  double diffuseShadowOffsetVerticalWhileTouched
 @property  double coronaDiffuseShadowOpacity
 @property  double coronaDiffuseShadowOpacityWhileTouched
 @property  double coronaRimShadowOpacity
 @property  double blurFadeAnimationDuration
 @property  double reduceMotionBlurFadeAnimationDuration
 @property  SBFFluidBehaviorSettings *windowDragAnimationSettings
 @property  SBFFluidBehaviorSettings *medusaAnimationSettings
 @property  SBFFluidBehaviorSettings *resizeAnimationSettings
 @property  SBFFluidBehaviorSettings *platterAnimationSettings
 @property  SBFFluidBehaviorSettings *dropAnimationSettings
 @property  SBFFluidBehaviorSettings *switcherCardDropAnimationSettings
 @property  SBFFluidBehaviorSettings *topAffordanceExpandAnimationSettings
 @property  SBFFluidBehaviorSettings *topAffordanceCollapseAnimationSettings
 @property  SBFFluidBehaviorSettings *topAffordanceFastHideSplitViewButtonAnimationSettings
 @property  SBFFluidBehaviorSettings *topAffordanceFastHideCenterWindowButtonAnimationSettings
 @property  double dropAnimationUnblurThresholdPercentage
 @property  double resizeAnimationUnblurThresholdPercentage
 @property  double resizeAnimationDismissItemOpacity
 @property  double movePanGestureThresholdPercentage
 @property  double movePanGesturePositiveVelocityThreshold
 @property  double movePanGestureNegativeVelocityThreshold
 @property  double replacementDimmingAlpha
 @property  double topAffordanceHitTestExtendTop
 @property  double topAffordanceHitTestExtendBottom
 @property  double topAffordanceHitTestExtendLeft
 @property  double topAffordanceHitTestExtendRight
 @property  double iconPlatterScale
 @property  double windowPlatterScale
 @property  double windowPlatterScaleForReplacingEntireSpace
 @property  double cardPlatterScale
 @property  double floatingCardPlatterScale
 @property  double slideOverTongueExpandedScale
 @property  double draggingPlatterSideActivationGutterPadding
 @property  double draggingPlatterFullscreenActivationRegionWidth
 @property  double draggingPlatterFullscreenActivationRegionHeight
 @property  double switcherFullScreenContentPushInScale
 @property  double switcherCenterWindowContentPushInScale
 @property  double switcherSlideOverContentPushInScale
 @property  double switcherSlideOverDosidoLayoutOvershootMultiplicationFactor
 @property  double cardDragOverSplitAppLayoutScale
 @property  double reflowAnimationProgressForCardHeaderFadeIn
 @property  BOOL showContentDragExclusionRects
 @property  double contentDraggingCommandeerGutterInsetForUniversalControl
 @property  double contentDraggingCommandeerGutterWidth
 @property  double contentDraggingSideActivationGutterWidth
 @property  double contentDraggingFloatingActivationGutterWidth
 @property  double windowTearOffDraggingSideActivationGutterWidth
 @property  double windowTearOffDraggingFloatingActivationGutterWidth
 @property  double windowSplitViewDismissalGutterWidth
 @property  PTOutlet *killSpringBoardOutlet
 @property  double cornerRadiusForInnerCorners
 @property  double cornerRadiusForCompatibilityAppOuterCorners
 @property  double cornerRadiusForFloatingApps
 @property  double cornerRadiusFallbackForOldApps
 @property  BOOL statusBarDebugBackgroundColorsEnabled
 @property  BOOL statusBarDebugOffsettingEnabled
 @property  double switcherShelfCardScale
 @property  double switcherShelfCardCornerRadius
 @property  double switcherShelfCardShadowRadius
 @property  double switcherShelfCardShadowOffsetY
 @property  double switcherShelfCardShadowOpacity
 @property  double switcherShelfLabelLineSpacing
 @property  double switcherShelfBottomSpacing
 @property  double switcherShelfSplitViewIconInset
 @property  double switcherShelfBackgroundBlurPresentationThreshold
 @property  SBFFluidBehaviorSettings *switcherShelfGenieRopeSettings
 @property  SBFFluidBehaviorSettings *switcherShelfCardGeniePresentationSettings
 @property  SBFFluidBehaviorSettings *switcherShelfCardGenieDismissalSettings
 @property  double switcherShelfGenieInitialYIncrementBelowScreen
 @property  double switcherShelfCardGenieResponseIncrementScalar
 @property  double switcherShelfCardGenieDismissedScale
 @property  double switcherShelfGenieBezierCurvePointYDeltaFromTarget
 @property  double switcherShelfGenieBezierCurveXExponent
 @property  double switcherShelfGenieBezierCurveYExponent
 @property  double switcherShelfGenieBezierCurveScaleExponent
 @property  SBFFluidBehaviorSettings *switcherShelfBounceIconSettings
 @property  double switcherShelfGenieIconBounceDelay
 @property  SBFFluidBehaviorSettings *switcherShelfNonGenieRopeSettings
 @property  SBFFluidBehaviorSettings *switcherShelfCardNonGeniePresentationSettings
 @property  SBFFluidBehaviorSettings *switcherShelfCardNonGenieDismissalSettings
 @property  double switcherShelfCardNonGenieResponseIncrementScalar
 @property  double switcherShelfCardNonGenieDismissedScale
 @property  double switcherCenterWindowShadowRadius
 @property  double switcherCenterWindowShadowOffsetY
 @property  double switcherCenterWindowShadowOpacity
 @property  double switcherPeekingWindowShadowRadius
 @property  double switcherPeekingWindowShadowOffsetY
 @property  double switcherPeekingWindowShadowOpacity
 @property  double leadingSlideOverRelocationDelay
 @property  double defaultDimmingOpacity

  // class methods
  +[SBMedusaSettings settingsControllerModule]

  // instance methods
  -[SBMedusaSettings platterAnimationSettings]
  -[SBMedusaSettings vibrantColorMatrixM11]
  -[SBMedusaSettings setSlideOverTongueExpandedScale:]
  -[SBMedusaSettings setWindowPlatterScaleForReplacingEntireSpace:]
  -[SBMedusaSettings setPersistentDock:]
  -[SBMedusaSettings topAffordanceFastHideCenterWindowButtonAnimationSettings]
  -[SBMedusaSettings cardDragOverSplitAppLayoutScale]
  -[SBMedusaSettings windowDragAnimationSettings]
  -[SBMedusaSettings medusaSeparatorCursorRightEdgeInset]
  -[SBMedusaSettings diffuseShadowOffsetVertical]
  -[SBMedusaSettings setVibrantColorMatrixM45:]
  -[SBMedusaSettings setCornerRadiusForInnerCorners:]
  -[SBMedusaSettings switcherShelfGenieIconBounceDelay]
  -[SBMedusaSettings windowPlatterScale]
  -[SBMedusaSettings movePanGesturePositiveVelocityThreshold]
  -[SBMedusaSettings setSwitcherPeekingWindowShadowOffsetY:]
  -[SBMedusaSettings setSwitcherShelfCardGeniePresentationSettings:]
  -[SBMedusaSettings setDropAnimationSettings:]
  -[SBMedusaSettings switcherPeekingWindowShadowOpacity]
  -[SBMedusaSettings setKillSpringBoardOutlet:]
  -[SBMedusaSettings setReflowAnimationProgressForCardHeaderFadeIn:]
  -[SBMedusaSettings switcherCardDropAnimationSettings]
  -[SBMedusaSettings defaultDimmingOpacity]
  -[SBMedusaSettings setSwitcherPeekingWindowShadowOpacity:]
  -[SBMedusaSettings switcherShelfSplitViewIconInset]
  -[SBMedusaSettings setMedusaWindowDraggingCursorLeftEdgeInset:]
  -[SBMedusaSettings setWindowTearOffDraggingFloatingActivationGutterWidth:]
  -[SBMedusaSettings dismissHitTestTopPadding]
  -[SBMedusaSettings setWindowPlatterScale:]
  -[SBMedusaSettings switcherShelfCardShadowOffsetY]
  -[SBMedusaSettings setMovePanGesturePositiveVelocityThreshold:]
  -[SBMedusaSettings setResizeAnimationDismissItemOpacity:]
  -[SBMedusaSettings setDockAnimationSettings:]
  -[SBMedusaSettings windowTearOffDraggingFloatingActivationGutterWidth]
  -[SBMedusaSettings setSwitcherCenterWindowShadowRadius:]
  -[SBMedusaSettings switcherShelfCardCornerRadius]
  -[SBMedusaSettings .cxx_destruct]
  -[SBMedusaSettings setDismissHitTestTopPadding:]
  -[SBMedusaSettings setTopAffordanceFastHideCenterWindowButtonAnimationSettings:]
  -[SBMedusaSettings setDefaultValues]
  -[SBMedusaSettings setDiffuseShadowOffsetVerticalWhileTouched:]
  -[SBMedusaSettings medusaWindowDraggingCursorBottomEdgeInset]
  -[SBMedusaSettings switcherShelfCardScale]
  -[SBMedusaSettings setContentDraggingSideActivationGutterWidth:]
  -[SBMedusaSettings setSwitcherSlideOverContentPushInScale:]
  -[SBMedusaSettings setDiffuseShadowOpacity:]
  -[SBMedusaSettings switcherShelfBackgroundBlurPresentationThreshold]
  -[SBMedusaSettings setVibrantColorMatrixM14:]
  -[SBMedusaSettings setVibrantColorMatrixM32:]
  -[SBMedusaSettings setDraggingPlatterSideActivationGutterPadding:]
  -[SBMedusaSettings vibrantColorMatrixM33]
  -[SBMedusaSettings setVibrantColorMatrixM13:]
  -[SBMedusaSettings setSwitcherShelfCardNonGenieDismissedScale:]
  -[SBMedusaSettings setBlurFadeAnimationDuration:]
  -[SBMedusaSettings setNarrowEdgeSwipeHitTestWidth:]
  -[SBMedusaSettings topAffordanceHitTestExtendTop]
  -[SBMedusaSettings topAffordanceExpandAnimationSettings]
  -[SBMedusaSettings medusaSeparatorCursorBottomEdgeInset]
  -[SBMedusaSettings cardPlatterScale]
  -[SBMedusaSettings floatingCardPlatterScale]
  -[SBMedusaSettings switcherCenterWindowContentPushInScale]
  -[SBMedusaSettings vibrantColorMatrixM13]
  -[SBMedusaSettings setStatusBarDebugOffsettingEnabled:]
  -[SBMedusaSettings setSwitcherCardDropAnimationSettings:]
  -[SBMedusaSettings coronaDiffuseShadowOpacity]
  -[SBMedusaSettings dropAnimationSettings]
  -[SBMedusaSettings setIconPlatterScale:]
  -[SBMedusaSettings setMedusaSeparatorCursorTopEdgeInset:]
  -[SBMedusaSettings rimShadowRadius]
  -[SBMedusaSettings contentDraggingFloatingActivationGutterWidth]
  -[SBMedusaSettings setContentDraggingFloatingActivationGutterWidth:]
  -[SBMedusaSettings windowPlatterScaleForReplacingEntireSpace]
  -[SBMedusaSettings setFloatingAppCardScaleWhileCursorHovered:]
  -[SBMedusaSettings setDiffuseShadowOpacityWhileTouched:]
  -[SBMedusaSettings switcherShelfLabelLineSpacing]
  -[SBMedusaSettings coronaRimShadowOpacity]
  -[SBMedusaSettings vibrantColorMatrixM12]
  -[SBMedusaSettings topAffordanceCollapseAnimationSettings]
  -[SBMedusaSettings setTopAffordanceCollapseAnimationSettings:]
  -[SBMedusaSettings persistentDock]
  -[SBMedusaSettings setContentDraggingCommandeerGutterWidth:]
  -[SBMedusaSettings switcherPeekingWindowShadowRadius]
  -[SBMedusaSettings switcherCenterWindowShadowRadius]
  -[SBMedusaSettings floatingAppCardScaleWhileCursorHovered]
  -[SBMedusaSettings setPlatterAnimationSettings:]
  -[SBMedusaSettings narrowEdgeSwipeHitTestWidth]
  -[SBMedusaSettings setStatusBarDebugBackgroundColorsEnabled:]
  -[SBMedusaSettings setMedusaWindowDraggingCursorTopEdgeInset:]
  -[SBMedusaSettings setMedusaWindowDraggingCursorRightEdgeInset:]
  -[SBMedusaSettings vibrantColorMatrixM21]
  -[SBMedusaSettings switcherShelfCardShadowOpacity]
  -[SBMedusaSettings vibrantColorMatrixM24]
  -[SBMedusaSettings diffuseShadowRadius]
  -[SBMedusaSettings setSwitcherShelfGenieIconBounceDelay:]
  -[SBMedusaSettings setDiffuseShadowRadius:]
  -[SBMedusaSettings diffuseShadowOffsetHorizontalWhileTouched]
  -[SBMedusaSettings switcherShelfCardShadowRadius]
  -[SBMedusaSettings setSwitcherShelfCardNonGenieDismissalSettings:]
  -[SBMedusaSettings switcherShelfNonGenieRopeSettings]
  -[SBMedusaSettings setDraggingPlatterFullscreenActivationRegionWidth:]
  -[SBMedusaSettings setMedusa1oSettings:]
  -[SBMedusaSettings diffuseShadowOpacityWhileTouched]
  -[SBMedusaSettings setSwitcherShelfCardCornerRadius:]
  -[SBMedusaSettings contentDraggingCommandeerGutterInsetForUniversalControl]
  -[SBMedusaSettings setSwitcherShelfGenieBezierCurvePointYDeltaFromTarget:]
  -[SBMedusaSettings switcherShelfBounceIconSettings]
  -[SBMedusaSettings setVibrantColorMatrixM24:]
  -[SBMedusaSettings vibrantColorMatrixM35]
  -[SBMedusaSettings vibrantColorMatrixM25]
  -[SBMedusaSettings setDiffuseShadowOffsetHorizontal:]
  -[SBMedusaSettings setWindowSplitViewDismissalGutterWidth:]
  -[SBMedusaSettings setMovePanGestureThresholdPercentage:]
  -[SBMedusaSettings slideOverTongueExpandedScale]
  -[SBMedusaSettings vibrantColorMatrixM43]
  -[SBMedusaSettings setSwitcherShelfGenieRopeSettings:]
  -[SBMedusaSettings setFloatingAppCardScaleWhileTouched:]
  -[SBMedusaSettings rimShadowOpacity]
  -[SBMedusaSettings topAffordanceHitTestExtendLeft]
  -[SBMedusaSettings showContentDragExclusionRects]
  -[SBMedusaSettings switcherShelfCardGeniePresentationSettings]
  -[SBMedusaSettings setVibrantColorMatrixM25:]
  -[SBMedusaSettings setTopAffordanceHitTestExtendLeft:]
  -[SBMedusaSettings setVibrantColorMatrixM12:]
  -[SBMedusaSettings switcherShelfCardGenieDismissalSettings]
  -[SBMedusaSettings setSwitcherCenterWindowShadowOffsetY:]
  -[SBMedusaSettings setSwitcherShelfLabelLineSpacing:]
  -[SBMedusaSettings killSpringBoardOutlet]
  -[SBMedusaSettings setTopAffordanceHitTestExtendRight:]
  -[SBMedusaSettings setMedusaSeparatorCursorBottomEdgeInset:]
  -[SBMedusaSettings windowSplitViewDismissalGutterWidth]
  -[SBMedusaSettings setSwitcherShelfGenieBezierCurveXExponent:]
  -[SBMedusaSettings setSwitcherShelfNonGenieRopeSettings:]
  -[SBMedusaSettings replacementDimmingAlpha]
  -[SBMedusaSettings topAffordanceHitTestExtendRight]
  -[SBMedusaSettings setCardDragOverSplitAppLayoutScale:]
  -[SBMedusaSettings setMedusaSeparatorCursorLeftEdgeInset:]
  -[SBMedusaSettings setVibrantColorMatrixM41:]
  -[SBMedusaSettings setNumberOfRecents:]
  -[SBMedusaSettings movePanGestureNegativeVelocityThreshold]
  -[SBMedusaSettings setSwitcherShelfCardNonGeniePresentationSettings:]
  -[SBMedusaSettings setReplacementDimmingAlpha:]
  -[SBMedusaSettings setMedusaWindowDraggingCursorBottomEdgeInset:]
  -[SBMedusaSettings setTopAffordanceExpandAnimationSettings:]
  -[SBMedusaSettings effectiveBlurFadeAnimationDuration]
  -[SBMedusaSettings switcherShelfGenieBezierCurveYExponent]
  -[SBMedusaSettings switcherShelfCardGenieResponseIncrementScalar]
  -[SBMedusaSettings coronaVibrantColorMatrixInput]
  -[SBMedusaSettings contentDraggingCommandeerGutterWidth]
  -[SBMedusaSettings setSwitcherCenterWindowShadowOpacity:]
  -[SBMedusaSettings setSwitcherShelfCardGenieResponseIncrementScalar:]
  -[SBMedusaSettings switcherFullScreenContentPushInScale]
  -[SBMedusaSettings topAffordanceFastHideSplitViewButtonAnimationSettings]
  -[SBMedusaSettings switcherShelfGenieBezierCurvePointYDeltaFromTarget]
  -[SBMedusaSettings dropAnimationUnblurThresholdPercentage]
  -[SBMedusaSettings windowTearOffDraggingSideActivationGutterWidth]
  -[SBMedusaSettings setDropAnimationUnblurThresholdPercentage:]
  -[SBMedusaSettings setCoronaDiffuseShadowOpacityWhileTouched:]
  -[SBMedusaSettings setRimShadowOpacity:]
  -[SBMedusaSettings setVibrantColorMatrixM34:]
  -[SBMedusaSettings setCardPlatterScale:]
  -[SBMedusaSettings setResizeAnimationUnblurThresholdPercentage:]
  -[SBMedusaSettings medusaSeparatorCursorEdgeInsets]
  -[SBMedusaSettings setSwitcherShelfCardGenieDismissedScale:]
  -[SBMedusaSettings medusaSeparatorCursorLeftEdgeInset]
  -[SBMedusaSettings blurFadeAnimationDuration]
  -[SBMedusaSettings setSwitcherCenterWindowContentPushInScale:]
  -[SBMedusaSettings setDockWithPresentedFolderAnimationSettings:]
  -[SBMedusaSettings switcherCenterWindowShadowOffsetY]
  -[SBMedusaSettings switcherSlideOverDosidoLayoutOvershootMultiplicationFactor]
  -[SBMedusaSettings switcherPeekingWindowShadowOffsetY]
  -[SBMedusaSettings setVibrantColorMatrixM15:]
  -[SBMedusaSettings vibrantColorMatrixM15]
  -[SBMedusaSettings setCoronaDiffuseShadowOpacity:]
  -[SBMedusaSettings vibrantColorMatrixM32]
  -[SBMedusaSettings setReduceMotionBlurFadeAnimationDuration:]
  -[SBMedusaSettings diffuseShadowOpacity]
  -[SBMedusaSettings vibrantColorMatrixM42]
  -[SBMedusaSettings switcherShelfCardNonGenieDismissalSettings]
  -[SBMedusaSettings setVibrantColorMatrixM22:]
  -[SBMedusaSettings setMedusaSeparatorCursorRightEdgeInset:]
  -[SBMedusaSettings setWindowTearOffDraggingSideActivationGutterWidth:]
  -[SBMedusaSettings vibrantColorMatrixM31]
  -[SBMedusaSettings movePanGestureThresholdPercentage]
  -[SBMedusaSettings vibrantColorMatrixM14]
  -[SBMedusaSettings draggingPlatterFullscreenActivationRegionWidth]
  -[SBMedusaSettings medusaWindowDraggingCursorTopEdgeInset]
  -[SBMedusaSettings switcherShelfCardNonGenieResponseIncrementScalar]
  -[SBMedusaSettings setCornerRadiusFallbackForOldApps:]
  -[SBMedusaSettings setDiffuseShadowOffsetHorizontalWhileTouched:]
  -[SBMedusaSettings draggingPlatterSideActivationGutterPadding]
  -[SBMedusaSettings numberOfRecents]
  -[SBMedusaSettings medusaAnimationSettings]
  -[SBMedusaSettings dockWithPresentedFolderAnimationSettings]
  -[SBMedusaSettings leadingSlideOverRelocationDelay]
  -[SBMedusaSettings statusBarDebugOffsettingEnabled]
  -[SBMedusaSettings cornerRadiusForCompatibilityAppOuterCorners]
  -[SBMedusaSettings setSwitcherPeekingWindowShadowRadius:]
  -[SBMedusaSettings diffuseShadowOffsetHorizontal]
  -[SBMedusaSettings setMovePanGestureNegativeVelocityThreshold:]
  -[SBMedusaSettings switcherShelfCardGenieDismissedScale]
  -[SBMedusaSettings setLeadingSlideOverRelocationDelay:]
  -[SBMedusaSettings setSwitcherShelfCardShadowOpacity:]
  -[SBMedusaSettings vibrantColorMatrixM23]
  -[SBMedusaSettings setContentDraggingCommandeerGutterInsetForUniversalControl:]
  -[SBMedusaSettings setFloatingCardPlatterScale:]
  -[SBMedusaSettings switcherShelfCardNonGeniePresentationSettings]
  -[SBMedusaSettings cornerRadiusForFloatingApps]
  -[SBMedusaSettings medusaWindowDraggingCursorLeftEdgeInset]
  -[SBMedusaSettings setVibrantColorMatrixM42:]
  -[SBMedusaSettings setDefaultDimmingOpacity:]
  -[SBMedusaSettings switcherShelfGenieRopeSettings]
  -[SBMedusaSettings setTopAffordanceFastHideSplitViewButtonAnimationSettings:]
  -[SBMedusaSettings medusa1oSettings]
  -[SBMedusaSettings setDraggingPlatterFullscreenActivationRegionHeight:]
  -[SBMedusaSettings setSwitcherShelfGenieBezierCurveYExponent:]
  -[SBMedusaSettings reflowAnimationProgressForCardHeaderFadeIn]
  -[SBMedusaSettings switcherShelfBottomSpacing]
  -[SBMedusaSettings wideEdgeSwipeHitTestWidth]
  -[SBMedusaSettings setSwitcherShelfGenieBezierCurveScaleExponent:]
  -[SBMedusaSettings setCornerRadiusForFloatingApps:]
  -[SBMedusaSettings setVibrantColorMatrixM31:]
  -[SBMedusaSettings setVibrantColorMatrixM21:]
  -[SBMedusaSettings vibrantColorMatrixM34]
  -[SBMedusaSettings switcherShelfGenieBezierCurveXExponent]
  -[SBMedusaSettings setVibrantColorMatrixM23:]
  -[SBMedusaSettings setSwitcherShelfBounceIconSettings:]
  -[SBMedusaSettings draggingPlatterFullscreenActivationRegionHeight]
  -[SBMedusaSettings cornerRadiusForInnerCorners]
  -[SBMedusaSettings setSwitcherShelfBackgroundBlurPresentationThreshold:]
  -[SBMedusaSettings reduceMotionBlurFadeAnimationDuration]
  -[SBMedusaSettings setVibrantColorMatrixM44:]
  -[SBMedusaSettings cornerRadiusFallbackForOldApps]
  -[SBMedusaSettings contentDraggingSideActivationGutterWidth]
  -[SBMedusaSettings setSwitcherShelfSplitViewIconInset:]
  -[SBMedusaSettings setDiffuseShadowOffsetVertical:]
  -[SBMedusaSettings setSwitcherShelfCardGenieDismissalSettings:]
  -[SBMedusaSettings medusaWindowDraggingCursorEdgeInsets]
  -[SBMedusaSettings medusaWindowDraggingCursorRightEdgeInset]
  -[SBMedusaSettings setMedusaAnimationSettings:]
  -[SBMedusaSettings setVibrantColorMatrixM43:]
  -[SBMedusaSettings medusaSeparatorCursorTopEdgeInset]
  -[SBMedusaSettings setVibrantColorMatrixM11:]
  -[SBMedusaSettings resizeAnimationDismissItemOpacity]
  -[SBMedusaSettings vibrantColorMatrixM41]
  -[SBMedusaSettings topAffordanceHitTestExtendBottom]
  -[SBMedusaSettings setCoronaRimShadowOpacity:]
  -[SBMedusaSettings setShowContentDragExclusionRects:]
  -[SBMedusaSettings setSwitcherShelfBottomSpacing:]
  -[SBMedusaSettings setTopAffordanceHitTestExtendBottom:]
  -[SBMedusaSettings setVibrantColorMatrixM33:]
  -[SBMedusaSettings setVibrantColorMatrixM35:]
  -[SBMedusaSettings resizeAnimationSettings]
  -[SBMedusaSettings setDiffuseShadowRadiusWhileTouched:]
  -[SBMedusaSettings setSwitcherShelfCardShadowOffsetY:]
  -[SBMedusaSettings switcherCenterWindowShadowOpacity]
  -[SBMedusaSettings switcherShelfCardNonGenieDismissedScale]
  -[SBMedusaSettings setSwitcherShelfGenieInitialYIncrementBelowScreen:]
  -[SBMedusaSettings setResizeAnimationSettings:]
  -[SBMedusaSettings floatingAppCardScaleWhileTouched]
  -[SBMedusaSettings setRimShadowRadius:]
  -[SBMedusaSettings setSwitcherShelfCardShadowRadius:]
  -[SBMedusaSettings setWideEdgeSwipeHitTestWidth:]
  -[SBMedusaSettings dockAnimationSettings]
  -[SBMedusaSettings vibrantColorMatrixM45]
  -[SBMedusaSettings setSwitcherShelfCardNonGenieResponseIncrementScalar:]
  -[SBMedusaSettings vibrantColorMatrixM22]
  -[SBMedusaSettings switcherShelfGenieBezierCurveScaleExponent]
  -[SBMedusaSettings setSwitcherFullScreenContentPushInScale:]
  -[SBMedusaSettings setTopAffordanceHitTestExtendTop:]
  -[SBMedusaSettings switcherShelfGenieInitialYIncrementBelowScreen]
  -[SBMedusaSettings switcherSlideOverContentPushInScale]
  -[SBMedusaSettings setSwitcherSlideOverDosidoLayoutOvershootMultiplicationFactor:]
  -[SBMedusaSettings vibrantColorMatrixM44]
  -[SBMedusaSettings diffuseShadowRadiusWhileTouched]
  -[SBMedusaSettings setCornerRadiusForCompatibilityAppOuterCorners:]
  -[SBMedusaSettings diffuseShadowOffsetVerticalWhileTouched]
  -[SBMedusaSettings statusBarDebugBackgroundColorsEnabled]
  -[SBMedusaSettings setSwitcherShelfCardScale:]
  -[SBMedusaSettings iconPlatterScale]
  -[SBMedusaSettings setWindowDragAnimationSettings:]
  -[SBMedusaSettings resizeAnimationUnblurThresholdPercentage]
  -[SBMedusaSettings coronaDiffuseShadowOpacityWhileTouched]


SBMedusa1oSettings : PTSettings
 @property  BOOL debugRotationCenter
 @property  BOOL debugColorRotationRegions
 @property  BOOL clipRotationRegions
 @property  double zoomOutRotationFactor
 @property  double rotationSlowdownFactor
 @property  BOOL fencesRotation
 @property  unsigned long millisecondsBetweenResizeSteps
 @property  double gapSwipeBuffer

  // class methods
  +[SBMedusa1oSettings settingsControllerModule]

  // instance methods
  -[SBMedusa1oSettings setDefaultValues]
  -[SBMedusa1oSettings debugRotationCenter]
  -[SBMedusa1oSettings debugColorRotationRegions]
  -[SBMedusa1oSettings clipRotationRegions]
  -[SBMedusa1oSettings zoomOutRotationFactor]
  -[SBMedusa1oSettings rotationSlowdownFactor]
  -[SBMedusa1oSettings gapSwipeBuffer]
  -[SBMedusa1oSettings setDebugRotationCenter:]
  -[SBMedusa1oSettings setDebugColorRotationRegions:]
  -[SBMedusa1oSettings setClipRotationRegions:]
  -[SBMedusa1oSettings setZoomOutRotationFactor:]
  -[SBMedusa1oSettings setRotationSlowdownFactor:]
  -[SBMedusa1oSettings setFencesRotation:]
  -[SBMedusa1oSettings setGapSwipeBuffer:]
  -[SBMedusa1oSettings fencesRotation]
  -[SBMedusa1oSettings millisecondsBetweenResizeSteps]
  -[SBMedusa1oSettings setMillisecondsBetweenResizeSteps:]


SBLogoutProgressTestRecipe : NSObject <SBLogoutProgressDataSource, SBTestRecipe>
 @property  SBLogoutProgressTransientOverlayViewController *logoutProgressTransientOverlayViewController
 @property  NSArray *remainingApplications
 @property  NSDictionary *remainingBlockingTasks
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLogoutProgressTestRecipe load]

  // instance methods
  -[SBLogoutProgressTestRecipe .cxx_destruct]
  -[SBLogoutProgressTestRecipe title]
  -[SBLogoutProgressTestRecipe debugBlockingTasksForLogoutProgressTransientOverlayViewController:]
  -[SBLogoutProgressTestRecipe pendingApplicationsForLogoutProgressTransientOverlayViewController:]
  -[SBLogoutProgressTestRecipe handleVolumeIncrease]
  -[SBLogoutProgressTestRecipe handleVolumeDecrease]
  -[SBLogoutProgressTestRecipe _defaultPendingApplications]
  -[SBLogoutProgressTestRecipe setRemainingApplications:]
  -[SBLogoutProgressTestRecipe _defaultBlockingTasks]
  -[SBLogoutProgressTestRecipe setRemainingBlockingTasks:]
  -[SBLogoutProgressTestRecipe remainingApplications]
  -[SBLogoutProgressTestRecipe remainingBlockingTasks]
  -[SBLogoutProgressTestRecipe logoutProgressTransientOverlayViewController]
  -[SBLogoutProgressTestRecipe setLogoutProgressTransientOverlayViewController:]


SBSwitcherKeyboardSuppressionMode : NSObject
 @property  long long type
 @property  NSSet *appLayouts
 @property  BOOL applyAssertionEvenIfAppIsHostingTheKeyboard

  // class methods
  +[SBSwitcherKeyboardSuppressionMode suppressionModeNone]
  +[SBSwitcherKeyboardSuppressionMode suppressionModeForAllScenes]
  +[SBSwitcherKeyboardSuppressionMode newSuppressionModeForSwitcherScenesFromAppLayouts:]

  // instance methods
  -[SBSwitcherKeyboardSuppressionMode suppressesNoScenes]
  -[SBSwitcherKeyboardSuppressionMode setType:]
  -[SBSwitcherKeyboardSuppressionMode .cxx_destruct]
  -[SBSwitcherKeyboardSuppressionMode suppressesSwitcherScenesOnly]
  -[SBSwitcherKeyboardSuppressionMode applyAssertionEvenIfAppIsHostingTheKeyboard]
  -[SBSwitcherKeyboardSuppressionMode isEqual:]
  -[SBSwitcherKeyboardSuppressionMode type]
  -[SBSwitcherKeyboardSuppressionMode _initWithAppLayouts:suppressionType:]
  -[SBSwitcherKeyboardSuppressionMode appLayouts]
  -[SBSwitcherKeyboardSuppressionMode setApplyAssertionEvenIfAppIsHostingTheKeyboard:]
  -[SBSwitcherKeyboardSuppressionMode suppressesAllScenes]


SBBuddyLockScreenDismissOnlyAlertItem : SBDismissOnlyAlertItem
  // instance methods
  -[SBBuddyLockScreenDismissOnlyAlertItem forcesModalAlertAppearance]
  -[SBBuddyLockScreenDismissOnlyAlertItem allowInSetup]


SBTraitsHomeFollowsSwitcherPolicySpecifier : SBTraitsRoleAFollowsRoleBPolicySpecifier
  // instance methods
  -[SBTraitsHomeFollowsSwitcherPolicySpecifier force]
  -[SBTraitsHomeFollowsSwitcherPolicySpecifier animate]
  -[SBTraitsHomeFollowsSwitcherPolicySpecifier roleB]
  -[SBTraitsHomeFollowsSwitcherPolicySpecifier roleA]


SBTraitsDockFollowsHomePolicySpecifier : SBTraitsRoleAFollowsRoleBPolicySpecifier
  // instance methods
  -[SBTraitsDockFollowsHomePolicySpecifier roleB]
  -[SBTraitsDockFollowsHomePolicySpecifier roleA]


SBTraitsArbitrationPipelineManager : NSObject <SBLayoutStateTransitionObserver>
 @property  SBFTraitsArbiter *arbiter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTraitsArbitrationPipelineManager layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBTraitsArbitrationPipelineManager initWithArbiter:]
  -[SBTraitsArbitrationPipelineManager layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBTraitsArbitrationPipelineManager .cxx_destruct]
  -[SBTraitsArbitrationPipelineManager init]
  -[SBTraitsArbitrationPipelineManager _layoutCoordinator]
  -[SBTraitsArbitrationPipelineManager setArbiter:]
  -[SBTraitsArbitrationPipelineManager arbiter]
  -[SBTraitsArbitrationPipelineManager dealloc]


SBSecureAppViewController : SBDashBoardHostedAppViewController
 @property  <SBSecureAppViewControllerDelegate> *delegate

  // instance methods
  -[SBSecureAppViewController configureDisplayLayoutElement:]
  -[SBSecureAppViewController handleEvent:]


SBDismissEmergencyCallRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDismissEmergencyCallRecipe load]

  // instance methods
  -[SBDismissEmergencyCallRecipe title]
  -[SBDismissEmergencyCallRecipe handleVolumeIncrease]
  -[SBDismissEmergencyCallRecipe handleVolumeDecrease]


SBRemoteAlertHandleLocalClient : NSObject <SBRemoteTransientOverlaySessionObserver, SBSRemoteAlertHandleClient>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRemoteAlertHandleLocalClient .cxx_destruct]
  -[SBRemoteAlertHandleLocalClient remoteTransientOverlaySession:didInvalidateWithReason:error:]
  -[SBRemoteAlertHandleLocalClient remoteAlertHandlesForDefinition:allowsCreation:configurationContext:]
  -[SBRemoteAlertHandleLocalClient createRemoteAlertHandleWithDefinition:configurationContext:]
  -[SBRemoteAlertHandleLocalClient activateRemoteAlertHandle:withContext:]
  -[SBRemoteAlertHandleLocalClient invalidateRemoteAlertHandle:]
  -[SBRemoteAlertHandleLocalClient initWithSessionManager:]
  -[SBRemoteAlertHandleLocalClient _registerHandle:forSession:]
  -[SBRemoteAlertHandleLocalClient _unregisterHandle:]
  -[SBRemoteAlertHandleLocalClient remoteTransientOverlaySessionDidActivate:]
  -[SBRemoteAlertHandleLocalClient remoteTransientOverlaySessionDidDeactivate:]


SBSecureAppManager : NSObject
 @property  NSMutableDictionary *secureAppActions
 @property  NSMutableArray *remoteAlertActions
 @property  NSHashTable *observers
 @property  BOOL hasSecureApp
 @property  BOOL hasWakeDestinaton
 @property  SBWakeDestination *wakeDestinaton

  // class methods
  +[SBSecureAppManager sharedInstance]

  // instance methods
  -[SBSecureAppManager secureAppActions]
  -[SBSecureAppManager _addRemoteAlertLockScreenContentAction:]
  -[SBSecureAppManager _enumerateSecureAppActionsByPriorityUsingBlock:]
  -[SBSecureAppManager _applicationForAction:]
  -[SBSecureAppManager .cxx_destruct]
  -[SBSecureAppManager newApplicationSceneEntityForCurrentSecureApp]
  -[SBSecureAppManager hasSecureApp]
  -[SBSecureAppManager wakeDestinaton]
  -[SBSecureAppManager hasWakeDestinaton]
  -[SBSecureAppManager setSecureAppActions:]
  -[SBSecureAppManager setObservers:]
  -[SBSecureAppManager init]
  -[SBSecureAppManager remoteAlertActions]
  -[SBSecureAppManager secureAppAction]
  -[SBSecureAppManager _addSecureAppAction:]
  -[SBSecureAppManager _enumerateSecureAppActionsOfType:usingBlock:]
  -[SBSecureAppManager addObserver:]
  -[SBSecureAppManager _applicationSceneEntityForAction:]
  -[SBSecureAppManager observers]
  -[SBSecureAppManager addLockScreenContentAction:]
  -[SBSecureAppManager removeObserver:]
  -[SBSecureAppManager hasSecureAppOfType:]
  -[SBSecureAppManager setRemoteAlertActions:]


SBAutoPurgingImageView : UIImageView
  // instance methods
  -[SBAutoPurgingImageView .cxx_destruct]
  -[SBAutoPurgingImageView setImage:]
  -[SBAutoPurgingImageView didMoveToWindow]
  -[SBAutoPurgingImageView initWithImageGenerationBlock:]


SBIdleTimerDescriptor : NSObject <BSDescriptionProviding, NSCopying>
 @property  long long timerMode
 @property  double sampleInterval
 @property  double warnInterval
 @property  double quickUnwarnInterval
 @property  double totalInterval
 @property  BOOL shouldWarn
 @property  BOOL shouldExpireAfterWarn
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerDescriptor warnInterval]
  -[SBIdleTimerDescriptor setWarnInterval:]
  -[SBIdleTimerDescriptor setQuickUnwarnInterval:]
  -[SBIdleTimerDescriptor sampleInterval]
  -[SBIdleTimerDescriptor initWithTimerMode:warnInterval:totalInterval:]
  -[SBIdleTimerDescriptor shouldExpireAfterWarn]
  -[SBIdleTimerDescriptor quickUnwarnInterval]
  -[SBIdleTimerDescriptor succinctDescriptionBuilder]
  -[SBIdleTimerDescriptor descriptionBuilderWithMultilinePrefix:]
  -[SBIdleTimerDescriptor setTotalInterval:]
  -[SBIdleTimerDescriptor isEqual:]
  -[SBIdleTimerDescriptor descriptionWithMultilinePrefix:]
  -[SBIdleTimerDescriptor timerMode]
  -[SBIdleTimerDescriptor succinctDescription]
  -[SBIdleTimerDescriptor shouldWarn]
  -[SBIdleTimerDescriptor totalInterval]
  -[SBIdleTimerDescriptor copyWithZone:]
  -[SBIdleTimerDescriptor setTimerMode:]
  -[SBIdleTimerDescriptor setSampleInterval:]


SBScrollingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBScrollingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBScrollingSwitcherModifier handleRemovalEvent:]
  -[SBScrollingSwitcherModifier handleScrollEvent:]


SBPIPCoordinatorAssertionContext : NSObject
 @property  NSString *identifier
 @property  long long reason

  // instance methods
  -[SBPIPCoordinatorAssertionContext .cxx_destruct]
  -[SBPIPCoordinatorAssertionContext identifier]
  -[SBPIPCoordinatorAssertionContext initWithIdentifier:reason:]
  -[SBPIPCoordinatorAssertionContext reason]


SBPIPControllerCoordinator : NSObject <SBIdleTimerProviding, SBApplicationHosting>
 @property  BOOL hasIdleTimerBehaviors
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPControllerCoordinator coordinatorRequestedIdleTimerBehavior:]
  -[SBPIPControllerCoordinator hasIdleTimerBehaviors]
  -[SBPIPControllerCoordinator shouldStartPictureInPictureForApplicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:pipContentType:]
  -[SBPIPControllerCoordinator applyPictureInPictureInsets:forSource:]
  -[SBPIPControllerCoordinator updatePictureInPictureWindowLevels]
  -[SBPIPControllerCoordinator .cxx_destruct]
  -[SBPIPControllerCoordinator canHostAnApp]
  -[SBPIPControllerCoordinator hostedAppSceneHandles]
  -[SBPIPControllerCoordinator conformsToSBApplicationHosting]
  -[SBPIPControllerCoordinator handleDestructionRequestForSceneHandles:]
  -[SBPIPControllerCoordinator isAnyPictureInPictureWindowVisible]
  -[SBPIPControllerCoordinator applyStashedPictureInPicturePadding:forPIPSource:]
  -[SBPIPControllerCoordinator isHostingAnApp]
  -[SBPIPControllerCoordinator init]
  -[SBPIPControllerCoordinator hostedAppWillRotateToInterfaceOrientation:]
  -[SBPIPControllerCoordinator controllerForType:]
  -[SBPIPControllerCoordinator hostedAppSceneHandle]
  -[SBPIPControllerCoordinator tetheringModeForScenePersistenceIdentifier:pipContentType:]
  -[SBPIPControllerCoordinator isPresentingPictureInPictureRequiringMedusaKeyboard]
  -[SBPIPControllerCoordinator _enumerateControllersByDescendingPriority:]
  -[SBPIPControllerCoordinator acquireInterruptionAssertionForReason:identifier:]
  -[SBPIPControllerCoordinator acquireStashAssertionForReason:identifier:]
  -[SBPIPControllerCoordinator setPictureInPictureWindowsHidden:withReason:]
  -[SBPIPControllerCoordinator isPointWithinAnyPictureInPictureContent:]
  -[SBPIPControllerCoordinator dealloc]
  -[SBPIPControllerCoordinator registerController:forType:]


SBBlockWorkspaceQueueTestRecipe : NSObject <SBTestRecipe>
 @property  NSTimer *blockTimer
 @property  FBWorkspaceEventQueueLock *queueLock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBlockWorkspaceQueueTestRecipe load]

  // instance methods
  -[SBBlockWorkspaceQueueTestRecipe .cxx_destruct]
  -[SBBlockWorkspaceQueueTestRecipe title]
  -[SBBlockWorkspaceQueueTestRecipe handleVolumeIncrease]
  -[SBBlockWorkspaceQueueTestRecipe handleVolumeDecrease]
  -[SBBlockWorkspaceQueueTestRecipe queueLock]
  -[SBBlockWorkspaceQueueTestRecipe setQueueLock:]
  -[SBBlockWorkspaceQueueTestRecipe blockTimer]
  -[SBBlockWorkspaceQueueTestRecipe blockTimerDidFire:]
  -[SBBlockWorkspaceQueueTestRecipe setBlockTimer:]


SBDeviceApplicationScenePlaceholderContentContext : NSObject <SBScenePlaceholderContentContext, NSMutableCopying>
 @property  <SBActivationSettings> *activationSettings
 @property  long long layoutEnvironment
 @property  NSString *requestedLaunchIdentifier
 @property  NSURL *url
 @property  BOOL prefersLiveXIB
 @property  unsigned long preferredContentType
 @property  BOOL hasOrientationMismatchForClassicApp
 @property  BOOL canShowUserContent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationScenePlaceholderContentContext setPrefersLiveXIB:]
  -[SBDeviceApplicationScenePlaceholderContentContext activationSettings]
  -[SBDeviceApplicationScenePlaceholderContentContext initWithActivationSettings:]
  -[SBDeviceApplicationScenePlaceholderContentContext setRequestedLaunchIdentifier:]
  -[SBDeviceApplicationScenePlaceholderContentContext url]
  -[SBDeviceApplicationScenePlaceholderContentContext .cxx_destruct]
  -[SBDeviceApplicationScenePlaceholderContentContext setUrl:]
  -[SBDeviceApplicationScenePlaceholderContentContext setLayoutEnvironment:]
  -[SBDeviceApplicationScenePlaceholderContentContext init]
  -[SBDeviceApplicationScenePlaceholderContentContext preferredContentType]
  -[SBDeviceApplicationScenePlaceholderContentContext setPreferredContentType:]
  -[SBDeviceApplicationScenePlaceholderContentContext prefersLiveXIB]
  -[SBDeviceApplicationScenePlaceholderContentContext setHasOrientationMismatchForClassicApp:]
  -[SBDeviceApplicationScenePlaceholderContentContext requestedLaunchIdentifier]
  -[SBDeviceApplicationScenePlaceholderContentContext layoutEnvironment]
  -[SBDeviceApplicationScenePlaceholderContentContext hasOrientationMismatchForClassicApp]
  -[SBDeviceApplicationScenePlaceholderContentContext mutableCopyWithZone:]
  -[SBDeviceApplicationScenePlaceholderContentContext setActivationSettings:]
  -[SBDeviceApplicationScenePlaceholderContentContext canShowUserContent]
  -[SBDeviceApplicationScenePlaceholderContentContext copyWithZone:]


SBMutableDeviceApplicationScenePlaceholderContentContext : SBDeviceApplicationScenePlaceholderContentContext
 @property  BOOL prefersLiveXIB
 @property  BOOL hasOrientationMismatchForClassicApp
 @property  long long layoutEnvironment
 @property  unsigned long preferredContentType
 @property  NSString *requestedLaunchIdentifier
 @property  NSURL *url


SBHomeGestureToStashedFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBHomeGestureToStashedFloatingSwitcherModifier slideOverTongueDirection]
  -[SBHomeGestureToStashedFloatingSwitcherModifier slideOverTongueState]
  -[SBHomeGestureToStashedFloatingSwitcherModifier scaleForIndex:]
  -[SBHomeGestureToStashedFloatingSwitcherModifier .cxx_destruct]
  -[SBHomeGestureToStashedFloatingSwitcherModifier cornerRadiiForIndex:]
  -[SBHomeGestureToStashedFloatingSwitcherModifier containerViewBounds]
  -[SBHomeGestureToStashedFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toFloatingConfiguration:]
  -[SBHomeGestureToStashedFloatingSwitcherModifier _tongueScale]


SBDefaultIconModelStore : SBIconModelPropertyListFileStore
  // class methods
  +[SBDefaultIconModelStore sharedInstance]

  // instance methods
  -[SBDefaultIconModelStore init]
  -[SBDefaultIconModelStore deleteDesiredIconStateWithOptions:error:]
  -[SBDefaultIconModelStore _deleteLegacyState]
  -[SBDefaultIconModelStore loadDesiredIconState:]
  -[SBDefaultIconModelStore loadCurrentIconState:]
  -[SBDefaultIconModelStore saveDesiredIconState:error:]


SBDefaultAutomaticIconModelStore : SBIconModelPropertyListFileStore
  // class methods
  +[SBDefaultAutomaticIconModelStore sharedInstance]

  // instance methods
  -[SBDefaultAutomaticIconModelStore init]


SBFullScreenOcclusionTestRecipe : NSObject <FBSceneManagerObserver, SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFullScreenOcclusionTestRecipe load]

  // instance methods
  -[SBFullScreenOcclusionTestRecipe sceneManager:willUpdateScene:withSettings:transitionContext:]
  -[SBFullScreenOcclusionTestRecipe .cxx_destruct]
  -[SBFullScreenOcclusionTestRecipe init]
  -[SBFullScreenOcclusionTestRecipe title]
  -[SBFullScreenOcclusionTestRecipe sceneManager:didDestroyScene:]
  -[SBFullScreenOcclusionTestRecipe sceneManager:didCreateScene:withClient:]
  -[SBFullScreenOcclusionTestRecipe sceneManager:willCommitUpdateForScene:transactionID:]
  -[SBFullScreenOcclusionTestRecipe sceneManager:didCommitUpdateForScene:transactionID:]
  -[SBFullScreenOcclusionTestRecipe dealloc]
  -[SBFullScreenOcclusionTestRecipe sceneManager:willDestroyScene:]
  -[SBFullScreenOcclusionTestRecipe handleVolumeIncrease]
  -[SBFullScreenOcclusionTestRecipe handleVolumeDecrease]


SBActivationInfoViewController : UIViewController <STTelephonyStateObserver, UITableViewDataSource, UITableViewDelegate>
 @property  NSArray *mobileEquipmentInfo
 @property  UIButton *regulatoryInfoButton
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBActivationInfoViewController tableView:viewForHeaderInSection:]
  -[SBActivationInfoViewController numberOfSectionsInTableView:]
  -[SBActivationInfoViewController tableView:numberOfRowsInSection:]
  -[SBActivationInfoViewController _titleForHeaderInSection:]
  -[SBActivationInfoViewController tableView:heightForRowAtIndexPath:]
  -[SBActivationInfoViewController .cxx_destruct]
  -[SBActivationInfoViewController tableView:cellForRowAtIndexPath:]
  -[SBActivationInfoViewController setLegibilitySettings:]
  -[SBActivationInfoViewController initWithNibName:bundle:]
  -[SBActivationInfoViewController mobileEquipmentInfoDidChangeForStateProvider:slot:]
  -[SBActivationInfoViewController setMobileEquipmentInfo:]
  -[SBActivationInfoViewController viewDidLayoutSubviews]
  -[SBActivationInfoViewController viewWillAppear:]
  -[SBActivationInfoViewController mobileEquipmentInfo]
  -[SBActivationInfoViewController dealloc]
  -[SBActivationInfoViewController tableView:heightForFooterInSection:]
  -[SBActivationInfoViewController loadView]
  -[SBActivationInfoViewController subscriptionInfoDidChangeForStateProvider:slot:]
  -[SBActivationInfoViewController legibilitySettings]
  -[SBActivationInfoViewController _canShowWhileLocked]
  -[SBActivationInfoViewController regulatoryInfoButton]
  -[SBActivationInfoViewController _updateMobileEquipmentInfo]
  -[SBActivationInfoViewController _telephonyStateChanged]
  -[SBActivationInfoViewController _activationInfoCell]
  -[SBActivationInfoViewController _backgroundViewForHeaderView:]
  -[SBActivationInfoViewController _processMobileEquipmentInfo:]
  -[SBActivationInfoViewController _processMobileSubscriptionInfo]
  -[SBActivationInfoViewController _processDeviceInfo]
  -[SBActivationInfoViewController _formattedIMEI:]
  -[SBActivationInfoViewController _formattedCSN:]
  -[SBActivationInfoViewController _formattedICCID:]
  -[SBActivationInfoViewController _formattedString:withSpaceAfterDigits:]


SBApplicationSceneHandleRequest : NSObject
 @property  SBApplication *application
 @property  FBScene *existingScene
 @property  FBSDisplayIdentity *displayIdentity
 @property  FBSSceneDefinition *sceneDefinition

  // class methods
  +[SBApplicationSceneHandleRequest defaultRequestForApplication:sceneIdentity:displayIdentity:]
  +[SBApplicationSceneHandleRequest defaultSceneSpecificationForDisplayIdentity:]

  // instance methods
  -[SBApplicationSceneHandleRequest existingScene]
  -[SBApplicationSceneHandleRequest application]
  -[SBApplicationSceneHandleRequest displayIdentity]
  -[SBApplicationSceneHandleRequest setSceneDefinition:]
  -[SBApplicationSceneHandleRequest .cxx_destruct]
  -[SBApplicationSceneHandleRequest setExistingScene:]
  -[SBApplicationSceneHandleRequest sceneDefinition]
  -[SBApplicationSceneHandleRequest setDisplayIdentity:]
  -[SBApplicationSceneHandleRequest setApplication:]
  -[SBApplicationSceneHandleRequest initWithApplication:sceneDefinition:displayIdentity:]


SBUniversalControlServer : NSObject <SBSUniversalControlClientToServerInterface, BSServiceConnectionListenerDelegate, BSDescriptionStreamable>
 @property  unsigned long externalProcessActiveOnScreenEdges
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUniversalControlServer appendDescriptionToFormatter:]
  -[SBUniversalControlServer listener:didReceiveConnection:withContext:]
  -[SBUniversalControlServer .cxx_destruct]
  -[SBUniversalControlServer _queue_removeConnection:]
  -[SBUniversalControlServer setKeyboardFocusDisabled:reason:]
  -[SBUniversalControlServer setScreenEdgesOwned:reason:]
  -[SBUniversalControlServer _queue_addConnection:]
  -[SBUniversalControlServer initWithKeyboardFocusController:keyboardSuppressionManager:]
  -[SBUniversalControlServer externalProcessActiveOnScreenEdges]
  -[SBUniversalControlServer _lock_reevaluateKeyboardFocusDisablement]
  -[SBUniversalControlServer _lock_reevaluateScreenEdgeOwnership]
  -[SBUniversalControlServer setExternalProcessActiveOnScreenEdges:]


SBAppClipOverlayViewController : SBFTouchPassThroughViewController <SBAppClipOverlayCoordinatorParticipant, SBAppClipOverlayViewDelegate, BSInvalidatable>
 @property  NSString *webClipIdentifier
 @property  SBAppClipOverlayCoordinator *coordinator
 @property  CPSClipOverlayViewController *overlayViewController
 @property  BOOL displayedOverPlaceholder
 @property  long long sceneActivationState
 @property  BOOL needsUpdate
 @property  NSString *bundleIdentifier
 @property  NSString *sceneIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppClipOverlayViewController preferredStatusBarStyle]
  -[SBAppClipOverlayViewController initWithCoder:]
  -[SBAppClipOverlayViewController bundleIdentifier]
  -[SBAppClipOverlayViewController sceneIdentifier]
  -[SBAppClipOverlayViewController coordinator]
  -[SBAppClipOverlayViewController .cxx_destruct]
  -[SBAppClipOverlayViewController initWithNibName:bundle:]
  -[SBAppClipOverlayViewController view]
  -[SBAppClipOverlayViewController setNeedsUpdate:]
  -[SBAppClipOverlayViewController viewDidLayoutSubviews]
  -[SBAppClipOverlayViewController viewWillAppear:]
  -[SBAppClipOverlayViewController setCoordinator:]
  -[SBAppClipOverlayViewController needsUpdate]
  -[SBAppClipOverlayViewController setNeedsUpdate]
  -[SBAppClipOverlayViewController participantName]
  -[SBAppClipOverlayViewController invalidate]
  -[SBAppClipOverlayViewController overlayViewController]
  -[SBAppClipOverlayViewController loadView]
  -[SBAppClipOverlayViewController viewDidDisappear:]
  -[SBAppClipOverlayViewController webClipIdentifier]
  -[SBAppClipOverlayViewController initWithCoordinator:bundleIdentifier:sceneIdentifier:]
  -[SBAppClipOverlayViewController setDisplayedOverPlaceholder:animated:]
  -[SBAppClipOverlayViewController setSceneActivationState:animated:]
  -[SBAppClipOverlayViewController appClipOverlayCoordinator:requestsSurrenderOfViewController:]
  -[SBAppClipOverlayViewController appClipPlaceholderViewDidInvalidate:]
  -[SBAppClipOverlayViewController setWebClipIdentifier:]
  -[SBAppClipOverlayViewController setOverlayViewController:]
  -[SBAppClipOverlayViewController displayedOverPlaceholder]
  -[SBAppClipOverlayViewController setDisplayedOverPlaceholder:]
  -[SBAppClipOverlayViewController sceneActivationState]
  -[SBAppClipOverlayViewController setSceneActivationState:]


SBAppClipOverlayView : SBFTouchPassThroughView <BSInvalidatable>
 @property  <SBAppClipOverlayViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppClipOverlayView initWithFrame:delegate:]
  -[SBAppClipOverlayView initWithCoder:]
  -[SBAppClipOverlayView .cxx_destruct]
  -[SBAppClipOverlayView setDelegate:]
  -[SBAppClipOverlayView initWithFrame:]
  -[SBAppClipOverlayView delegate]
  -[SBAppClipOverlayView invalidate]


SBRecordingIndicatorViewController : UIViewController
 @property  BOOL isStatusBarPortal
 @property  SBRecordingIndicatorView *indicatorView
 @property  UIColor *indicatorColor
 @property  unsigned long indicatorAnimationState
 @property  long long activeInterfaceOrientation

  // instance methods
  -[SBRecordingIndicatorViewController setActiveInterfaceOrientation:]
  -[SBRecordingIndicatorViewController activeInterfaceOrientation]
  -[SBRecordingIndicatorViewController _updateToOrientation:]
  -[SBRecordingIndicatorViewController indicatorAnimationState]
  -[SBRecordingIndicatorViewController setIsStatusBarPortal:]
  -[SBRecordingIndicatorViewController _updateIndicatorViewSize:alpha:]
  -[SBRecordingIndicatorViewController indicatorColor]
  -[SBRecordingIndicatorViewController .cxx_destruct]
  -[SBRecordingIndicatorViewController _overrideWindowActiveInterfaceOrientation]
  -[SBRecordingIndicatorViewController _stopAllAnimations]
  -[SBRecordingIndicatorViewController updateIndicatorShape:]
  -[SBRecordingIndicatorViewController _updateIndicatorLayerWithBounds:andCenter:]
  -[SBRecordingIndicatorViewController isStatusBarPortal]
  -[SBRecordingIndicatorViewController _configureRootLayer]
  -[SBRecordingIndicatorViewController initForPortalView:]
  -[SBRecordingIndicatorViewController indicatorView]
  -[SBRecordingIndicatorViewController setIndicatorColor:]
  -[SBRecordingIndicatorViewController updateIndicatorVisibilityWithFastFadeAnimation:]
  -[SBRecordingIndicatorViewController updateIndicatorVisibility:]
  -[SBRecordingIndicatorViewController supportedInterfaceOrientations]
  -[SBRecordingIndicatorViewController updateIndicatorVisibility:skipFadeOutAnimation:]
  -[SBRecordingIndicatorViewController calculateInitialIndicatorPositionAndSize]
  -[SBRecordingIndicatorViewController _canShowWhileLocked]
  -[SBRecordingIndicatorViewController _updateIndicatorLayerSize:opacity:]


SBForcePressGestureRootSwitcherModifier : SBGestureRootSwitcherModifier
  // instance methods
  -[SBForcePressGestureRootSwitcherModifier .cxx_destruct]
  -[SBForcePressGestureRootSwitcherModifier gestureType]
  -[SBForcePressGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBForcePressGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBForcePressGestureRootSwitcherModifier initWithStartingEnvironmentMode:multitaskingModifier:]


SBPrototypeDumpingGround : NSObject <PTSettingsKeyObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPrototypeDumpingGround .cxx_destruct]
  -[SBPrototypeDumpingGround init]
  -[SBPrototypeDumpingGround settings:changedValueForKey:]
  -[SBPrototypeDumpingGround dealloc]
  -[SBPrototypeDumpingGround _updatePearlDebugUI]


SBDashBoardPluginController : NSObject <CSExternalAppearanceProviding, CSExternalBehaviorProviding, CSExternalEventHandling, SBLockScreenPluginManagerDelegate, SBLockScreenPluginPresenting>
 @property  <SBLockScreenActionProvider> *lockScreenActionProvider
 @property  NSString *appearanceIdentifier
 @property  NSSet *components
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode

  // instance methods
  -[SBDashBoardPluginController pluginManager:activePluginDidChange:]
  -[SBDashBoardPluginController _activate]
  -[SBDashBoardPluginController coverSheetIdentifier]
  -[SBDashBoardPluginController conformsToCSBehaviorProviding]
  -[SBDashBoardPluginController conformsToCSExternalBehaviorProviding]
  -[SBDashBoardPluginController lockScreenActionProvider]
  -[SBDashBoardPluginController .cxx_destruct]
  -[SBDashBoardPluginController wouldHandleButtonEvent:]
  -[SBDashBoardPluginController disableLockScreenPluginWithContext:]
  -[SBDashBoardPluginController pluginManager:didLoadPlugin:]
  -[SBDashBoardPluginController participantState]
  -[SBDashBoardPluginController _deactivate]
  -[SBDashBoardPluginController _setPluginViewController:]
  -[SBDashBoardPluginController enableLockScreenPluginWithContext:]
  -[SBDashBoardPluginController pluginManager:displayedPluginDidChangeFromPlugin:toPlugin:]
  -[SBDashBoardPluginController components]
  -[SBDashBoardPluginController conformsToCSAppearanceProviding]
  -[SBDashBoardPluginController _presentPluginViewController:withStyle:animated:completion:]
  -[SBDashBoardPluginController _dismissPluginViewController:withStyle:animated:completion:]
  -[SBDashBoardPluginController appearanceIdentifier]
  -[SBDashBoardPluginController handleEvent:]
  -[SBDashBoardPluginController pluginManager:plugin:handleAction:]
  -[SBDashBoardPluginController pluginManager:willUnloadPlugin:]
  -[SBDashBoardPluginController restrictedCapabilities]
  -[SBDashBoardPluginController proximityDetectionMode]
  -[SBDashBoardPluginController dealloc]
  -[SBDashBoardPluginController scrollingStrategy]
  -[SBDashBoardPluginController pluginManager:displayedPluginDidUpdateAppearance:]
  -[SBDashBoardPluginController conformsToCSEventHandling]
  -[SBDashBoardPluginController initWithCoverSheetViewController:]
  -[SBDashBoardPluginController legibilitySettings]
  -[SBDashBoardPluginController notificationBehavior]


SBAppSuggestionManager : NSObject <UABestAppSuggestionManagerDelegate, SBAttentionAwarenessClientDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAppSuggestionManager sharedInstance]

  // instance methods
  -[SBAppSuggestionManager _stopListeningForNotifications]
  -[SBAppSuggestionManager _handleInitialSpringBoardLaunch]
  -[SBAppSuggestionManager startFetchingPayloadForAppSuggestion:]
  -[SBAppSuggestionManager .cxx_destruct]
  -[SBAppSuggestionManager noteActivatingForAppSuggestion:fromSource:]
  -[SBAppSuggestionManager _listenForNotifications]
  -[SBAppSuggestionManager init]
  -[SBAppSuggestionManager _evaluateSuggestionUpdates:]
  -[SBAppSuggestionManager noteNotActivatingForAppSuggestion:fromSource:]
  -[SBAppSuggestionManager currentSuggestedApp]
  -[SBAppSuggestionManager enableListeningForUpdatesForReason:]
  -[SBAppSuggestionManager client:attentionLostTimeoutDidExpire:forConfigurationGeneration:withAssociatedObject:]
  -[SBAppSuggestionManager _supportedExpertCenterCategories]
  -[SBAppSuggestionManager expertCenterSuggestionChanged:]
  -[SBAppSuggestionManager disableListeningForUpdatesForReason:]
  -[SBAppSuggestionManager performWithCurrentSuggestedAppAndApplication:]
  -[SBAppSuggestionManager _destroySuggestionSources]
  -[SBAppSuggestionManager _createSuggestionSources]
  -[SBAppSuggestionManager _handleAppUninstall:]
  -[SBAppSuggestionManager _setContinuitySuggestionUpdatesEnabled:expertCenterSuggestionUpdatesEnabled:]
  -[SBAppSuggestionManager dealloc]
  -[SBAppSuggestionManager clientDidResetForUserAttention:]
  -[SBAppSuggestionManager _calculateBestSuggestionAndNotifyListeners]
  -[SBAppSuggestionManager _screenDidUndim:]
  -[SBAppSuggestionManager _screenDidDim:]
  -[SBAppSuggestionManager bestAppSuggestionChanged:]


_SBUABestAppSuggestion : SBBestAppSuggestion
  // instance methods
  -[_SBUABestAppSuggestion uniqueIdentifier]
  -[_SBUABestAppSuggestion bundleIdentifier]
  -[_SBUABestAppSuggestion .cxx_destruct]
  -[_SBUABestAppSuggestion isHandoff]
  -[_SBUABestAppSuggestion activityType]
  -[_SBUABestAppSuggestion originatingDeviceType]
  -[_SBUABestAppSuggestion originatingDeviceName]
  -[_SBUABestAppSuggestion lastUpdateTime]
  -[_SBUABestAppSuggestion isEqual:]
  -[_SBUABestAppSuggestion originatingDeviceIdentifier]
  -[_SBUABestAppSuggestion isLocationBasedSuggestion]
  -[_SBUABestAppSuggestion isLocallyGeneratedSuggestion]
  -[_SBUABestAppSuggestion isCallContinuitySuggestion]
  -[_SBUABestAppSuggestion isNotificationSuggestion]
  -[_SBUABestAppSuggestion isOpenURLSuggestion]


_SBExpertAppSuggestion : SBBestAppSuggestion
 @property  _DECAppItem *appSuggestion
 @property  _DECResult *result
 @property  NSUUID *resultUUID

  // instance methods
  -[_SBExpertAppSuggestion isPrediction]
  -[_SBExpertAppSuggestion bundleIdentifier]
  -[_SBExpertAppSuggestion .cxx_destruct]
  -[_SBExpertAppSuggestion originatingDeviceName]
  -[_SBExpertAppSuggestion isEqual:]
  -[_SBExpertAppSuggestion result]
  -[_SBExpertAppSuggestion appSuggestion]
  -[_SBExpertAppSuggestion isLocationBasedSuggestion]
  -[_SBExpertAppSuggestion isBluetoothAudioPrediction]
  -[_SBExpertAppSuggestion isBluetoothPrediction]
  -[_SBExpertAppSuggestion isHeadphonesPrediction]
  -[_SBExpertAppSuggestion isFirstWakePrediction]
  -[_SBExpertAppSuggestion isArrivedAtHomePrediction]
  -[_SBExpertAppSuggestion isArrivedAtWorkPrediction]
  -[_SBExpertAppSuggestion isLocallyGeneratedSuggestion]
  -[_SBExpertAppSuggestion isCarPlayPrediction]
  -[_SBExpertAppSuggestion initWithAppSuggestion:result:]
  -[_SBExpertAppSuggestion resultUUID]


_SBExpertLocationAppSuggestion : _SBExpertAppSuggestion
  // instance methods
  -[_SBExpertLocationAppSuggestion launchURL]
  -[_SBExpertLocationAppSuggestion originatingBundleIdentifier]
  -[_SBExpertLocationAppSuggestion suggestedLocationName]
  -[_SBExpertLocationAppSuggestion launchURLRequiresInboxCopy]
  -[_SBExpertLocationAppSuggestion makeInboxCopyOfLaunchURLToInboxURL:]
  -[_SBExpertLocationAppSuggestion isLocationPredictionOfType:]
  -[_SBExpertLocationAppSuggestion isLocationPredictionFromSource:]
  -[_SBExpertLocationAppSuggestion isEligibleForLockScreen]


SBKeyboardDismissalManager : NSObject <SBFailureNotifyingTapGestureRecognizerDelegate, BKSTouchDeliveryObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBKeyboardDismissalManager touchUpOccuredForIdentifier:detached:context:pid:]
  -[SBKeyboardDismissalManager _reset]
  -[SBKeyboardDismissalManager gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBKeyboardDismissalManager _didTap:]
  -[SBKeyboardDismissalManager .cxx_destruct]
  -[SBKeyboardDismissalManager viewForSystemGestureRecognizer:]
  -[SBKeyboardDismissalManager gestureRecognizer:shouldReceiveTouch:]
  -[SBKeyboardDismissalManager dealloc]
  -[SBKeyboardDismissalManager gestureRecognizerTransitionedToFailed:]
  -[SBKeyboardDismissalManager initWithTouchDeliveryService:systemGestureManager:remoteKeyboards:focusController:]
  -[SBKeyboardDismissalManager _shouldPreventDismissalForTouch:]
  -[SBKeyboardDismissalManager registerKeyboardDismissalParticipant:]


SBUIAnimationPropertyAnimator : NSObject <SBViewControllerAnimatedTransitioning>
 @property  @? generator
 @property  UIViewPropertyAnimator *propertyAnimator
 @property  double duration
 @property  BOOL isReversed
 @property  BOOL wasReversed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIAnimationPropertyAnimator cancelTransition:withCompletionSpeed:completionCurve:]
  -[SBUIAnimationPropertyAnimator addCompletion:]
  -[SBUIAnimationPropertyAnimator isReversed]
  -[SBUIAnimationPropertyAnimator transitionDuration:]
  -[SBUIAnimationPropertyAnimator .cxx_destruct]
  -[SBUIAnimationPropertyAnimator animateTransition:]
  -[SBUIAnimationPropertyAnimator generator]
  -[SBUIAnimationPropertyAnimator propertyAnimator]
  -[SBUIAnimationPropertyAnimator duration]
  -[SBUIAnimationPropertyAnimator initWithPropertyAnimatorGenerator:]
  -[SBUIAnimationPropertyAnimator reverseAnimation]
  -[SBUIAnimationPropertyAnimator _executeGenerator:]
  -[SBUIAnimationPropertyAnimator prepareToRunAnimation:]
  -[SBUIAnimationPropertyAnimator initWithPropertyAnimator:duration:]
  -[SBUIAnimationPropertyAnimator wasReversed]


SBTimerEventSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  NSString *reason

  // instance methods
  -[SBTimerEventSwitcherEventResponse initWithDelay:validator:reason:]
  -[SBTimerEventSwitcherEventResponse .cxx_destruct]
  -[SBTimerEventSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBTimerEventSwitcherEventResponse reason]
  -[SBTimerEventSwitcherEventResponse type]


SBAppContainerViewController : SBLayoutElementViewController <SBDeviceApplicationSceneStatusBarStateObserver, SBApplicationSceneViewControllingStatusBarDelegate, SBSceneHandleObserver, SBApplicationSceneViewControlling, SBApplicationSceneStatusBarDescriberProviding>
 @property  UIViewController<SBApplicationSceneViewControlling> *_applicationSceneViewController
 @property  <SBDeviceApplicationSceneStatusBarStateObserver> *statusBarDelegate
 @property  <SBApplicationSceneStatusBarDescribing> *statusBarDescriber
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBApplicationSceneHandle *sceneHandle
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBAppContainerViewController sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBAppContainerViewController overrideStatusBarStyle]
  -[SBAppContainerViewController sceneHandle:didUpdateContentState:]
  -[SBAppContainerViewController setApplicationSceneStatusBarDelegate:]
  -[SBAppContainerViewController statusBarAlpha]
  -[SBAppContainerViewController sceneHandle:didCreateScene:]
  -[SBAppContainerViewController applicationSceneStatusBarDelegate]
  -[SBAppContainerViewController contentReferenceSize]
  -[SBAppContainerViewController displayMode]
  -[SBAppContainerViewController sceneHandle]
  -[SBAppContainerViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBAppContainerViewController _clearState]
  -[SBAppContainerViewController setCustomContentView:]
  -[SBAppContainerViewController applicationSceneViewController:didUpdateStatusBarSettings:]
  -[SBAppContainerViewController statusBarDelegate]
  -[SBAppContainerViewController .cxx_destruct]
  -[SBAppContainerViewController sceneWithIdentifier:didChangeSceneInterfaceOrientationTo:]
  -[SBAppContainerViewController _deviceApplicationSceneHandle]
  -[SBAppContainerViewController newSnapshot]
  -[SBAppContainerViewController customContentView]
  -[SBAppContainerViewController prepareForReuse]
  -[SBAppContainerViewController statusBarDescriber]
  -[SBAppContainerViewController initWithDisplayIdentity:]
  -[SBAppContainerViewController setStatusBarDelegate:]
  -[SBAppContainerViewController contentInterfaceOrientation]
  -[SBAppContainerViewController containerContentWrapperInterfaceOrientationChangedTo:]
  -[SBAppContainerViewController setDisplayMode:animationFactory:completion:]
  -[SBAppContainerViewController placeholderContentContext]
  -[SBAppContainerViewController invalidate]
  -[SBAppContainerViewController newSnapshotView]
  -[SBAppContainerViewController setPlaceholderContentContext:]
  -[SBAppContainerViewController newSnapshotViewOnQueue:withCompletion:]
  -[SBAppContainerViewController sceneHandle:didUpdatePairingStatusForExternalSceneIdentifiers:]
  -[SBAppContainerViewController configureWithWorkspaceEntity:forLayoutElement:layoutState:referenceFrame:]
  -[SBAppContainerViewController setContentWrapperInterfaceOrientation:]
  -[SBAppContainerViewController didEndTransitionToVisible:]
  -[SBAppContainerViewController _newDisplayLayoutElementForEntity:]
  -[SBAppContainerViewController SB_conformsToSBApplicationSceneStatusBarDescriberProviding]
  -[SBAppContainerViewController _applicationSceneViewControllerForSceneHandle:]
  -[SBAppContainerViewController _configureViewController:]
  -[SBAppContainerViewController _updateDisplayLayoutElementForSceneExistence:]
  -[SBAppContainerViewController _overrideStatusBarOrientationGivenFallbackOrientation:]
  -[SBAppContainerViewController _applicationSceneViewController]


_SBAppContainerStatusBarStateProxy : SBDeviceApplicationSceneStatusBarStateProxy
 @property  SBAppContainerViewController *appVCBackReference

  // instance methods
  -[_SBAppContainerStatusBarStateProxy overrideStatusBarStyle]
  -[_SBAppContainerStatusBarStateProxy .cxx_destruct]
  -[_SBAppContainerStatusBarStateProxy _statusBarAppearsOutsideOfAJailedApp]
  -[_SBAppContainerStatusBarStateProxy _statusBarStyleForPartWithIdentifier:suppressingInherited:]
  -[_SBAppContainerStatusBarStateProxy _statusBarStyle]
  -[_SBAppContainerStatusBarStateProxy _fallbackInterfaceOrientation]
  -[_SBAppContainerStatusBarStateProxy _statusBarAlpha]
  -[_SBAppContainerStatusBarStateProxy _statusBarOrientationGivenFallbackOrientation:]
  -[_SBAppContainerStatusBarStateProxy setAppVCBackReference:]
  -[_SBAppContainerStatusBarStateProxy appVCBackReference]


SBTransientOverlayPresentationRequest : NSObject <NSCopying, NSMutableCopying>
 @property  BOOL animated
 @property  @? completionHandler
 @property  BOOL shouldDismissSiri
 @property  SBTransientOverlayViewController *viewController
 @property  BSProcessHandle *originatingProcess

  // instance methods
  -[SBTransientOverlayPresentationRequest viewController]
  -[SBTransientOverlayPresentationRequest isAnimated]
  -[SBTransientOverlayPresentationRequest initWithViewController:]
  -[SBTransientOverlayPresentationRequest .cxx_destruct]
  -[SBTransientOverlayPresentationRequest originatingProcess]
  -[SBTransientOverlayPresentationRequest mutableCopyWithZone:]
  -[SBTransientOverlayPresentationRequest _copyWithClass:]
  -[SBTransientOverlayPresentationRequest completionHandler]
  -[SBTransientOverlayPresentationRequest copyWithZone:]
  -[SBTransientOverlayPresentationRequest shouldDismissSiri]


SBMutableTransientOverlayPresentationRequest : SBTransientOverlayPresentationRequest
 @property  BOOL animated
 @property  @? completionHandler
 @property  BOOL shouldDismissSiri
 @property  SBTransientOverlayViewController *viewController
 @property  BSProcessHandle *originatingProcess

  // instance methods
  -[SBMutableTransientOverlayPresentationRequest setAnimated:]
  -[SBMutableTransientOverlayPresentationRequest setOriginatingProcess:]
  -[SBMutableTransientOverlayPresentationRequest setCompletionHandler:]
  -[SBMutableTransientOverlayPresentationRequest mutableCopyWithZone:]
  -[SBMutableTransientOverlayPresentationRequest copyWithZone:]
  -[SBMutableTransientOverlayPresentationRequest setViewController:]
  -[SBMutableTransientOverlayPresentationRequest setShouldDismissSiri:]


SBFluidSwitcherContentView : UIView <UIFocusItemScrollableContainer>
 @property  BOOL passesTouchesThrough
 @property  <SBFluidSwitcherContentViewDelegate> *delegate
 @property  {CGPoint=dd} contentOffset
 @property  {CGSize=dd} contentSize
 @property  {CGSize=dd} visibleSize
 @property  <UICoordinateSpace> *coordinateSpace
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherContentView hitTest:withEvent:]
  -[SBFluidSwitcherContentView preferredFocusEnvironments]
  -[SBFluidSwitcherContentView setContentOffset:]
  -[SBFluidSwitcherContentView contentSize]
  -[SBFluidSwitcherContentView contentOffset]
  -[SBFluidSwitcherContentView .cxx_destruct]
  -[SBFluidSwitcherContentView setPassesTouchesThrough:]
  -[SBFluidSwitcherContentView setDelegate:]
  -[SBFluidSwitcherContentView passesTouchesThrough]
  -[SBFluidSwitcherContentView delegate]
  -[SBFluidSwitcherContentView visibleSize]


SBIconOverlayVisibilitySwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  BOOL visible

  // instance methods
  -[SBIconOverlayVisibilitySwitcherEventResponse appLayout]
  -[SBIconOverlayVisibilitySwitcherEventResponse .cxx_destruct]
  -[SBIconOverlayVisibilitySwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBIconOverlayVisibilitySwitcherEventResponse isVisible]
  -[SBIconOverlayVisibilitySwitcherEventResponse type]
  -[SBIconOverlayVisibilitySwitcherEventResponse initWithAppLayout:visible:]


SBMedusaApplicationShortcutService : NSObject <SBApplicationServerMedusaShortcutDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMedusaApplicationShortcutService sharedInstance]

  // instance methods
  -[SBMedusaApplicationShortcutService .cxx_destruct]
  -[SBMedusaApplicationShortcutService init]
  -[SBMedusaApplicationShortcutService applicationServer:client:performShortcutAction:forBundleIdentifier:]
  -[SBMedusaApplicationShortcutService applicationServer:client:fetchSupportedShortcutActionsForBundleIdentifier:withCompletion:]
  -[SBMedusaApplicationShortcutService _switcherShortcutActionForRequestedAction:]


SBMainWorkspaceApplicationSceneLayoutElementViewController : SBAppContainerViewController <SBDeviceApplicationSceneHandleObserver, SBMedusaDecoratedDeviceApplicationSceneViewControlling_Internal, SBMainDisplaySceneLayoutElementViewControlling, SBMedusaDecoratedDeviceApplicationSceneViewControlling>
 @property  BSCornerRadiusConfiguration *cornerRadiusConfiguration
 @property  double shadowOpacity
 @property  double shadowOffset
 @property  BOOL clipsToBounds
 @property  double darkenViewAlpha
 @property  UIDropInteraction *dropInteraction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double blurViewIconScale
 @property  BOOL blurred
 @property  BOOL nubViewHidden
 @property  BOOL nubViewHighlighted
 @property  UIView<SBApplicationSceneBackgroundView> *backgroundView
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  SBHomeGrabberView *homeGrabberView
 @property  long long homeGrabberDisplayMode
 @property  NSString *sceneMinificationFilter
 @property  BOOL sceneRendersAsynchronously
 @property  UIView *sceneContentView
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController leadingStatusBarStyle]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController trailingStatusBarStyle]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController didRotateFromInterfaceOrientation:toInterfaceOrientation:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController willRotateFromInterfaceOrientation:toInterfaceOrientation:alongsideContainerView:animated:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController currentStatusBarHeight]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController bestHomeAffordanceOrientationForOrientation:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setClipsToBounds:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController sceneHandle:didCreateScene:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController sceneHandle:didChangeEffectiveForegroundness:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController .cxx_destruct]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController sceneMinificationFilter]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController isBlurred]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController conformsToProtocolSBDeviceApplicationSceneViewControlling]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController initialCornerRadiusConfiguration]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setShadowOffset:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController containerViewForBlurContentView]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController sceneContentView]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController statusBarAssertionWithStatusBarHidden:atLevel:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController homeGrabberView]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setSceneMinificationFilter:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setBlurViewIconScale:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController SB_conformsToSceneLayoutStatusBarAssertionProviding]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController prepareForReuse]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setHomeGrabberDisplayMode:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setNubViewHidden:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController cornerRadiusConfiguration]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setDropInteraction:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController initWithDisplayIdentity:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController sceneRendersAsynchronously]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setBackgroundView:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController shadowOpacity]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController clipsToBounds]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController shadowOffset]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setSceneRendersAsynchronously:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setLiveContentBlurEnabled:duration:blurDelay:iconViewScale:began:completion:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController blurViewIconScale]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setCornerRadiusConfiguration:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController homeGrabberDisplayMode]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setShadowOpacity:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController backgroundView]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController dropInteraction]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController SB_conformsToSceneLayoutMedusaStatusBarAssertionProviding]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController SB_conformsToMainDisplaySceneLayoutElementViewControlling]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController SB_conformsToMedusaDecoratedDeviceApplicationSceneViewControlling]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setMaskDisplayCorners:forReason:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController statusBarAssertionWithStatusBarHidden:nubViewHidden:atLevel:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController mainWorkspaceApplicationSceneLayoutElementViewController]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setDarkenViewAlpha:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _beginRequiringSceneViewMatchMoveAnimationForReason:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _endRequiringSceneViewMatchMoveAnimationForReason:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setNubViewHighlighted:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _deviceApplicationSceneViewController]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _shouldDisplayLayoutElementBecomeActive]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController supportedContentInterfaceOrientations]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _applicationSceneViewControllerForSceneHandle:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _configureViewController:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _overrideStatusBarOrientationGivenFallbackOrientation:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _applicationSceneViewController]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _medusaDecoratedVC]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _medusaDecoratedVC:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController isNubViewHidden]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController isNubViewHighlighted]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController darkenViewAlpha]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _deviceApplicationSceneViewController:]


SBLongPressDisambiguationAlertItem : SBAlertItem
 @property  @? completion

  // instance methods
  -[SBLongPressDisambiguationAlertItem completion]
  -[SBLongPressDisambiguationAlertItem .cxx_destruct]
  -[SBLongPressDisambiguationAlertItem init]
  -[SBLongPressDisambiguationAlertItem initWithCompletion:]
  -[SBLongPressDisambiguationAlertItem dismissOnLock]
  -[SBLongPressDisambiguationAlertItem configure:requirePasscodeForActions:]
  -[SBLongPressDisambiguationAlertItem deactivateForButton]
  -[SBLongPressDisambiguationAlertItem ignoreIfAlreadyDisplaying]


SBSoftwareUpdatePasscodePolicyManager : NSObject <SBSoftLockoutControllerDelegate>
 @property  long long softwareUpdatePasscodePolicy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSoftwareUpdatePasscodePolicyManager noteAuthenticationSucceededWithPasscode:]
  -[SBSoftwareUpdatePasscodePolicyManager .cxx_destruct]
  -[SBSoftwareUpdatePasscodePolicyManager _authRequestCompleted:]
  -[SBSoftwareUpdatePasscodePolicyManager init]
  -[SBSoftwareUpdatePasscodePolicyManager consumePendingUnlock]
  -[SBSoftwareUpdatePasscodePolicyManager requiresLockout]
  -[SBSoftwareUpdatePasscodePolicyManager _effectiveSoftwareUpdatePasscodePolicy]
  -[SBSoftwareUpdatePasscodePolicyManager setSoftwareUpdatePasscodePolicy:]
  -[SBSoftwareUpdatePasscodePolicyManager initWithLockScreenManager:mobileKeyBag:]
  -[SBSoftwareUpdatePasscodePolicyManager dealloc]
  -[SBSoftwareUpdatePasscodePolicyManager softwareUpdatePasscodePolicy]


SBRebootContext : NSObject <NSCopying>
 @property  NSString *reason
 @property  BOOL dark

  // instance methods
  -[SBRebootContext initWithReason:]
  -[SBRebootContext isDark]
  -[SBRebootContext .cxx_destruct]
  -[SBRebootContext isEqual:]
  -[SBRebootContext reason]
  -[SBRebootContext copyWithZone:]
  -[SBRebootContext setDark:]


SBSwipeMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBSwipeMetric init]


SBFloatingLowEndHardwareModifier : SBSwitcherModifier
  // instance methods
  -[SBFloatingLowEndHardwareModifier wantsSwitcherDimmingView]
  -[SBFloatingLowEndHardwareModifier switcherDimmingViewBlocksTouches]
  -[SBFloatingLowEndHardwareModifier handleTransitionEvent:]
  -[SBFloatingLowEndHardwareModifier switcherDimmingAlpha]
  -[SBFloatingLowEndHardwareModifier initWithOptions:]
  -[SBFloatingLowEndHardwareModifier handleTapOutsideToDismissEvent:]
  -[SBFloatingLowEndHardwareModifier _shouldDimAndBlockTouchesToAppsUnderFloating]
  -[SBFloatingLowEndHardwareModifier _stashedFloatingConfigurationForFloatingConfiguration:]


SBInitialSetupSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBInitialSetupSwitcherModifierEvent type]


SBReverseCountedSemaphore : NSObject
  // instance methods
  -[SBReverseCountedSemaphore decrement]
  -[SBReverseCountedSemaphore waitWithTimeout:]
  -[SBReverseCountedSemaphore .cxx_destruct]
  -[SBReverseCountedSemaphore init]
  -[SBReverseCountedSemaphore increment]


SBDeviceApplicationSceneStatusBarStateProxy : SBDeviceApplicationSceneStatusBarStateProvider_Base <SBDeviceApplicationSceneStatusBarStateObserver, SBDeviceApplicationSceneStatusBarStateProviderBaseSubclassesMustOverride, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneStatusBarStateProxy statusBarAvoidanceFrame]
  -[SBDeviceApplicationSceneStatusBarStateProxy _suppressInheritedPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarAlphaTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy .cxx_destruct]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarAppearsOutsideOfAJailedApp]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarStyleForPartWithIdentifier:suppressingInherited:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _anyObserverWants:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarStyle]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneToHandleStatusBarTapIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarStyleOverridesToSuppressTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy invalidateStatusBarSettings]
  -[SBDeviceApplicationSceneStatusBarStateProxy statusBarSceneIdentifier]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeSceneInterfaceOrientationTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarHiddenTo:withAnimation:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarOrientationTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _fallbackInterfaceOrientation]
  -[SBDeviceApplicationSceneStatusBarStateProxy overlayStatusBarData]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarAlpha]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarStyleTo:forPartWithIdentifier:]
  -[SBDeviceApplicationSceneStatusBarStateProxy statusBarStyleOverridesToSuppress]
  -[SBDeviceApplicationSceneStatusBarStateProxy classicApplicationSceneHandleIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProxy didInvalidateStatusBarDescriptionForSceneWithIdentifier:]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarAvoidanceFrameTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarHiddenGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWantsDeviceOrientationEventsEnabled]
  -[SBDeviceApplicationSceneStatusBarStateProxy invalidate]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarStyleTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarOrientationGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProxy breadcrumbProvider]
  -[SBDeviceApplicationSceneStatusBarStateProxy initWithDeviceApplicationSceneHandle:]


SBDeveloperBuildExpirationTrigger : NSObject <SBMainDisplayWorkspaceAppInteractionEventSourceObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeveloperBuildExpirationTrigger .cxx_destruct]
  -[SBDeveloperBuildExpirationTrigger dealloc]
  -[SBDeveloperBuildExpirationTrigger initWithAlertItemsController:eventSource:]
  -[SBDeveloperBuildExpirationTrigger eventSource:didFinishTransitionToMode:withLayoutState:activatingElement:triggeredBy:]
  -[SBDeveloperBuildExpirationTrigger _coverSheetDidDismiss:]
  -[SBDeveloperBuildExpirationTrigger _initWithAlertItemsController:eventSource:expirationDate:]
  -[SBDeveloperBuildExpirationTrigger showDeveloperBuildExpirationAlertIfNecessaryFromLockscreen:toLauncher:]


SBRingerHUDViewController : UIViewController <UIViewControllerTransitioningDelegate, SBHUDViewControlling>
 @property  SBRingerPillView *pillView
 @property  UIViewFloatAnimatableProperty *positionSpring
 @property  UIViewFloatAnimatableProperty *ringerValueSpring
 @property  NSTimer *dismissalTimer
 @property  BOOL lastEventIsAVolumeChange
 @property  double overshoot
 @property  BOOL ringerSilent
 @property  <SBRingerHUDViewControllerDelegate> *delegate
 @property  float volume
 @property  BOOL presented
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRingerHUDViewController volume]
  -[SBRingerHUDViewController setVolume:]
  -[SBRingerHUDViewController isPresented]
  -[SBRingerHUDViewController .cxx_destruct]
  -[SBRingerHUDViewController setPillView:]
  -[SBRingerHUDViewController viewDidLoad]
  -[SBRingerHUDViewController _dismiss]
  -[SBRingerHUDViewController setDelegate:]
  -[SBRingerHUDViewController viewDidLayoutSubviews]
  -[SBRingerHUDViewController viewWillAppear:]
  -[SBRingerHUDViewController delegate]
  -[SBRingerHUDViewController loadView]
  -[SBRingerHUDViewController pillView]
  -[SBRingerHUDViewController _canShowWhileLocked]
  -[SBRingerHUDViewController dismissalTimer]
  -[SBRingerHUDViewController setDismissalTimer:]
  -[SBRingerHUDViewController definesAnimatedDismissal]
  -[SBRingerHUDViewController dismissAnimatedWithCompletion:]
  -[SBRingerHUDViewController buttonReleased]
  -[SBRingerHUDViewController nudgeUp:]
  -[SBRingerHUDViewController _createSprings]
  -[SBRingerHUDViewController ringerSilent]
  -[SBRingerHUDViewController setRingerSilent:]
  -[SBRingerHUDViewController setVolume:animated:forKeyPress:]
  -[SBRingerHUDViewController presentForMuteSwitch:]
  -[SBRingerHUDViewController _layoutPillView]
  -[SBRingerHUDViewController swipeGesture:]
  -[SBRingerHUDViewController _updateVolumeSliderAnimated:]
  -[SBRingerHUDViewController _updateStateAnimated:invert:]
  -[SBRingerHUDViewController _extendDismissalTimer]
  -[SBRingerHUDViewController _setPositionSpringValue:completion:]
  -[SBRingerHUDViewController noteVolumeUpWasHit:]
  -[SBRingerHUDViewController noteVolumeDownWasHit:]
  -[SBRingerHUDViewController noteVolumeDidChange:]
  -[SBRingerHUDViewController refreshAudioUI]
  -[SBRingerHUDViewController positionSpring]
  -[SBRingerHUDViewController setPositionSpring:]
  -[SBRingerHUDViewController ringerValueSpring]
  -[SBRingerHUDViewController setRingerValueSpring:]
  -[SBRingerHUDViewController lastEventIsAVolumeChange]
  -[SBRingerHUDViewController setLastEventIsAVolumeChange:]
  -[SBRingerHUDViewController overshoot]
  -[SBRingerHUDViewController setOvershoot:]


SBBannerAuthority : NSObject <BNConsideringDelegate, BNConsidering>
 @property  BOOL screenSharingActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <BNConsideringDelegate> *delegate

  // instance methods
  -[SBBannerAuthority .cxx_destruct]
  -[SBBannerAuthority setDelegate:]
  -[SBBannerAuthority registerAuthority:forRequesterIdentifier:]
  -[SBBannerAuthority init]
  -[SBBannerAuthority shouldOverlapPresentable:withPresentable:]
  -[SBBannerAuthority delegate]
  -[SBBannerAuthority bannerAuthority:mayChangeDecisionForResponsiblePresentable:]
  -[SBBannerAuthority shouldPresentPresentable:withPresentedPresentables:responsiblePresentable:]
  -[SBBannerAuthority shouldPostPresentable:userInfo:reason:]
  -[SBBannerAuthority _configureSinksIfNecessary]
  -[SBBannerAuthority _shouldDropPresentablesDuringScreenSharing]
  -[SBBannerAuthority _isScreenSharingActive]
  -[SBBannerAuthority _shouldDropPresentableDuringScreenSharing:userInfo:]
  -[SBBannerAuthority _mediatedDecisionFromDecisions:defaultDecision:]
  -[SBBannerAuthority _setScreenSharingActive:]


SBExternalDemoDefaults : BSAbstractDefaultDomain
 @property  BOOL shouldLockIconsInStoreDemoMode

  // instance methods
  -[SBExternalDemoDefaults init]
  -[SBExternalDemoDefaults _bindAndRegisterDefaults]


SBSwitcherDragMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherDragMetric handleEvent:withContext:]


_SBRecentlyUsedSceneIdentityCache : NSObject <BSDescriptionStreamable, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBRecentlyUsedSceneIdentityCache appendDescriptionToFormatter:]
  -[_SBRecentlyUsedSceneIdentityCache promoteContainedSceneIdentityToken:forPID:]
  -[_SBRecentlyUsedSceneIdentityCache .cxx_destruct]
  -[_SBRecentlyUsedSceneIdentityCache init]
  -[_SBRecentlyUsedSceneIdentityCache isEqual:]
  -[_SBRecentlyUsedSceneIdentityCache removeSceneIdentityToken:forPID:]
  -[_SBRecentlyUsedSceneIdentityCache addSceneIdentityToken:forPID:]
  -[_SBRecentlyUsedSceneIdentityCache copyWithZone:]


SBCenterWindowToSlideOverSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCenterWindowToSlideOverSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBCenterWindowToSlideOverSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBCenterWindowToSlideOverSwitcherModifier transitionWillBegin]
  -[SBCenterWindowToSlideOverSwitcherModifier wantsSlideOverTongue]
  -[SBCenterWindowToSlideOverSwitcherModifier presentationAttributesForShelf:]
  -[SBCenterWindowToSlideOverSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCenterWindowToSlideOverSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBCenterWindowToSlideOverSwitcherModifier scaleForIndex:]
  -[SBCenterWindowToSlideOverSwitcherModifier frameForIndex:]
  -[SBCenterWindowToSlideOverSwitcherModifier visibleAppLayouts]
  -[SBCenterWindowToSlideOverSwitcherModifier scaleForLayoutRole:inAppLayout:]
  -[SBCenterWindowToSlideOverSwitcherModifier .cxx_destruct]
  -[SBCenterWindowToSlideOverSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBCenterWindowToSlideOverSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBCenterWindowToSlideOverSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBCenterWindowToSlideOverSwitcherModifier handleTimerEvent:]
  -[SBCenterWindowToSlideOverSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBCenterWindowToSlideOverSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBCenterWindowToSlideOverSwitcherModifier cornerRadiiForLayoutRole:inAppLayout:withCornerRadii:]
  -[SBCenterWindowToSlideOverSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBCenterWindowToSlideOverSwitcherModifier topMostLayoutElements]
  -[SBCenterWindowToSlideOverSwitcherModifier handleSceneReadyEvent:]
  -[SBCenterWindowToSlideOverSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:fromFloatingAppLayout:toFloatingAppLayout:toFloatingConfiguration:direction:]
  -[SBCenterWindowToSlideOverSwitcherModifier _shouldBlurAndStretchLayoutRole:inAppLayout:]


SBCenterWindowActivationAnimationContext : NSObject
 @property  UIView *deparentingPortal
 @property  UIView *contentPortalContainer

  // instance methods
  -[SBCenterWindowActivationAnimationContext .cxx_destruct]
  -[SBCenterWindowActivationAnimationContext contentPortalContainer]
  -[SBCenterWindowActivationAnimationContext deparentingPortal]
  -[SBCenterWindowActivationAnimationContext setContentPortalContainer:]
  -[SBCenterWindowActivationAnimationContext setDeparentingPortal:]


SBUIFullscreenAnimationView : UIView
 @property  <SBUIFullscreenAnimationViewDelegate> *delegate
 @property  BOOL animating

  // instance methods
  -[SBUIFullscreenAnimationView endTransition]
  -[SBUIFullscreenAnimationView .cxx_destruct]
  -[SBUIFullscreenAnimationView animating]
  -[SBUIFullscreenAnimationView _animationEnded]
  -[SBUIFullscreenAnimationView setDelegate:]
  -[SBUIFullscreenAnimationView beginTransition]
  -[SBUIFullscreenAnimationView setToView:]
  -[SBUIFullscreenAnimationView setFromView:]
  -[SBUIFullscreenAnimationView delegate]
  -[SBUIFullscreenAnimationView _animationBegan]
  -[SBUIFullscreenAnimationView _notifyDelegateAnimationBeganWithDuration:delay:]
  -[SBUIFullscreenAnimationView _notifyDelegateThatAnimationIsDone]


SBRootSettings : _UISettings
 @property  SBAttentionAwarenessSettings *attentionAwarenessSettings
 @property  SBProximitySettings *proximitySettings

  // instance methods
  -[SBRootSettings .cxx_destruct]
  -[SBRootSettings proximitySettings]
  -[SBRootSettings setProximitySettings:]
  -[SBRootSettings attentionAwarenessSettings]
  -[SBRootSettings setAttentionAwarenessSettings:]


SBVoiceCommandButton : NSObject <SBHIDButtonStateDelegate>
 @property  SBHIDButtonStateArbiter *buttonArbiter
 @property  SBSiriHardwareButtonInteraction *siriHardwareButtonInteraction
 @property  BOOL isLongPressRecognized

  // instance methods
  -[SBVoiceCommandButton performActionsForButtonLongPress:]
  -[SBVoiceCommandButton .cxx_destruct]
  -[SBVoiceCommandButton init]
  -[SBVoiceCommandButton performActionsForButtonUp:]
  -[SBVoiceCommandButton handleButtonEvent:]
  -[SBVoiceCommandButton performActionsForButtonDown:]
  -[SBVoiceCommandButton buttonArbiter]
  -[SBVoiceCommandButton setButtonArbiter:]
  -[SBVoiceCommandButton siriHardwareButtonInteraction]
  -[SBVoiceCommandButton setSiriHardwareButtonInteraction:]
  -[SBVoiceCommandButton isLongPressRecognized]
  -[SBVoiceCommandButton setIsLongPressRecognized:]


SBScrollToAppLayoutSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  long long alignment
 @property  BOOL animated

  // instance methods
  -[SBScrollToAppLayoutSwitcherEventResponse animated]
  -[SBScrollToAppLayoutSwitcherEventResponse appLayout]
  -[SBScrollToAppLayoutSwitcherEventResponse alignment]
  -[SBScrollToAppLayoutSwitcherEventResponse initWithAppLayout:alignment:animated:]
  -[SBScrollToAppLayoutSwitcherEventResponse .cxx_destruct]
  -[SBScrollToAppLayoutSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBScrollToAppLayoutSwitcherEventResponse type]


SBVoiceControlController : NSObject <SBVoiceControlTransientOverlayViewControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBVoiceControlController sharedInstance]

  // instance methods
  -[SBVoiceControlController _shouldEnterVoiceControl]
  -[SBVoiceControlController .cxx_destruct]
  -[SBVoiceControlController voiceControlTransientOverlayViewControllerRequestsDismissal:]
  -[SBVoiceControlController _prepareDelayedHeadsetAction]
  -[SBVoiceControlController _spokenLanguageDidChange:]
  -[SBVoiceControlController _cancelDelayedHeadsetAction]
  -[SBVoiceControlController handleHeadsetButtonUpNotInCall]
  -[SBVoiceControlController init]
  -[SBVoiceControlController isVisible]
  -[SBVoiceControlController handleHeadsetButtonDownWithClickCount:]
  -[SBVoiceControlController headsetAvailabilityChanged]
  -[SBVoiceControlController bluetoothDeviceInitiatedVoiceControl:]
  -[SBVoiceControlController dismissTransientOverlay]
  -[SBVoiceControlController _performDelayedHeadsetActionForVoiceControl]
  -[SBVoiceControlController _performDelayedHeadsetActionForAssistant]
  -[SBVoiceControlController handleHeadsetButtonUp]
  -[SBVoiceControlController bluetoothDeviceEndedVoiceControl:]
  -[SBVoiceControlController voiceControlTransientOverlayViewControllerDidDisappear:]
  -[SBVoiceControlController siriBluetoothDeviceSource:]
  -[SBVoiceControlController handleHomeButtonHeld]
  -[SBVoiceControlController _newVoiceControlTransientOverlayViewControllerWithSource:]
  -[SBVoiceControlController _updateNextRecognitionAudioInputPaths:]
  -[SBVoiceControlController configureVoiceControl]
  -[SBVoiceControlController _assistantActivationSettingsDidChange:]


SBDismissOnlyAlertItem : SBAlertItem
  // instance methods
  -[SBDismissOnlyAlertItem setTitle:]
  -[SBDismissOnlyAlertItem bodyText]
  -[SBDismissOnlyAlertItem .cxx_destruct]
  -[SBDismissOnlyAlertItem setBodyText:]
  -[SBDismissOnlyAlertItem title]
  -[SBDismissOnlyAlertItem performUnlockAction]
  -[SBDismissOnlyAlertItem configure:requirePasscodeForActions:]
  -[SBDismissOnlyAlertItem initWithTitle:body:]
  -[SBDismissOnlyAlertItem suppressForKeynote]
  -[SBDismissOnlyAlertItem dismissButtonText]


SBNotchedStatusBarProximityBacklightPolicyEnablementCondition : NSObject <SBAppStatusBarAssertionManagerObserver, SBMainDisplaySceneManagerObserver, SBDeviceApplicationSceneHandleObserver, UIStatusBarServerClient, SBUIActiveOrientationObserver, BSInvalidatable>
 @property  <SBNotchedStatusBarProximityBacklightPolicyEnablementConditionDelegate> *delegate
 @property  BOOL enabled
 @property  double enabledStatusBarHeight
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition activeInterfaceOrientationWillChangeToOrientation:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarAssertionManager:statusBarSettingsDidChange:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition .cxx_destruct]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarServer:didReceiveDoubleHeightStatusString:forStyle:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition _evaluateEnablement]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarServer:didReceiveStatusBarData:withActions:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition setDelegate:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition init]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarServer:didReceiveStyleOverrides:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition isEnabled]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarServer:didReceiveGlowAnimationState:forStyle:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition delegate]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition dealloc]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition invalidate]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition enabledStatusBarHeight]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition initWithMainDisplaySceneManager:statusBarAssertionManager:statusBarServer:orientationProvider:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition _setEnabled:statusBarHeight:]


SBApplicationLaunchImageParameters : NSObject
 @property  NSString *defaultPNGName
 @property  NSString *extension
 @property  NSString *minOSVersionString
 @property  {CGSize=dd} size
 @property  long long interfaceOrientation

  // class methods
  +[SBApplicationLaunchImageParameters launchImageParametersFromLaunchImagesInfo:withBundleIdentifier:isMonarchLinked:]
  +[SBApplicationLaunchImageParameters validInfoPlistOrientationKeys]

  // instance methods
  -[SBApplicationLaunchImageParameters .cxx_destruct]
  -[SBApplicationLaunchImageParameters init]
  -[SBApplicationLaunchImageParameters isEqual:]
  -[SBApplicationLaunchImageParameters extension]
  -[SBApplicationLaunchImageParameters interfaceOrientation]
  -[SBApplicationLaunchImageParameters defaultPNGName]
  -[SBApplicationLaunchImageParameters size]
  -[SBApplicationLaunchImageParameters minOSVersionString]


SBGridSwipeUpToSwitcherSwitcherModifier : SBTransitionSwitcherModifier

SBWallpaperPreviewSnapshotCache : NSObject <SBIconIndexNodeObserver, SBWallpaperObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWallpaperPreviewSnapshotCache sharedInstance]
  +[SBWallpaperPreviewSnapshotCache cacheKeyForVariant:options:scalingWidth:]
  +[SBWallpaperPreviewSnapshotCache cacheKeyForVariant:options:]

  // instance methods
  -[SBWallpaperPreviewSnapshotCache wallpaperDidChangeForVariant:]
  -[SBWallpaperPreviewSnapshotCache .cxx_destruct]
  -[SBWallpaperPreviewSnapshotCache node:didRemoveContainedNodeIdentifiers:]
  -[SBWallpaperPreviewSnapshotCache init]
  -[SBWallpaperPreviewSnapshotCache nodeDidMoveContainedNodes:]
  -[SBWallpaperPreviewSnapshotCache dealloc]
  -[SBWallpaperPreviewSnapshotCache node:didAddContainedNodeIdentifiers:]
  -[SBWallpaperPreviewSnapshotCache mappedWallpaperPreviewForKey:]
  -[SBWallpaperPreviewSnapshotCache snapshotProviderForVariant:options:wallpaperImage:]
  -[SBWallpaperPreviewSnapshotCache mappedWallpaperPreviewForScaledSnapshot:variant:cacheKey:]
  -[SBWallpaperPreviewSnapshotCache initWithImageCache:iconController:wallpaperController:]
  -[SBWallpaperPreviewSnapshotCache _switchToIconModel:]
  -[SBWallpaperPreviewSnapshotCache _backlightFadeFinished]
  -[SBWallpaperPreviewSnapshotCache _iconControllerDidChangeIconModel:]
  -[SBWallpaperPreviewSnapshotCache _modelWillLayout]
  -[SBWallpaperPreviewSnapshotCache _modelDidLayout]
  -[SBWallpaperPreviewSnapshotCache invalidateSnapshotsForLocations:]
  -[SBWallpaperPreviewSnapshotCache regenerateSnapshotsForLocations:]
  -[SBWallpaperPreviewSnapshotCache _orientationForOptions:]
  -[SBWallpaperPreviewSnapshotCache _homeScreenSnapshotProviderWithOptions:wallpaperImage:]
  -[SBWallpaperPreviewSnapshotCache _lockScreenSnapshotProviderWithOptions:wallpaperImage:]


SBModalUIFluidDismissGestureManager : NSObject <SBHomeGesturePanGestureRecognizerInterfaceDelegate, BSTransactionObserver, PTSettingsKeyObserver, SBHomeGestureInteractionDelegate>
 @property  SBTransientOverlayPresentationManager *transientOverlayPresentationManager
 @property  SBAssistantController *assistantController
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  SBHomeGestureInteraction *homeGestureInteraction
 @property  SBModalUIFluidDismissGestureWorkspaceTransaction *currentTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBModalUIFluidDismissGestureManager touchInterfaceOrientationForGestureRecognizer:]
  -[SBModalUIFluidDismissGestureManager transientOverlayPresentationManager]
  -[SBModalUIFluidDismissGestureManager transactionDidComplete:]
  -[SBModalUIFluidDismissGestureManager homeGestureInteraction]
  -[SBModalUIFluidDismissGestureManager currentTransaction]
  -[SBModalUIFluidDismissGestureManager homeGestureInteraction:systemGestureTypeForType:]
  -[SBModalUIFluidDismissGestureManager homeGestureSettings]
  -[SBModalUIFluidDismissGestureManager handleGestureBegan:initiatedFromBottomEdge:]
  -[SBModalUIFluidDismissGestureManager _dismissalTypeForCurrentContext]
  -[SBModalUIFluidDismissGestureManager .cxx_destruct]
  -[SBModalUIFluidDismissGestureManager homeGestureInteractionEnded:]
  -[SBModalUIFluidDismissGestureManager homeGestureInteractionBegan:]
  -[SBModalUIFluidDismissGestureManager homeGestureInteractionCancelled:]
  -[SBModalUIFluidDismissGestureManager setHomeGestureInteraction:]
  -[SBModalUIFluidDismissGestureManager viewForSystemGestureRecognizer:]
  -[SBModalUIFluidDismissGestureManager _addOrRemoveGestureForCurrentSettings]
  -[SBModalUIFluidDismissGestureManager homeGestureInteraction:shouldReceiveTouch:]
  -[SBModalUIFluidDismissGestureManager customScreenEdgePanGestureRecognizerForHomeGestureInteraction:]
  -[SBModalUIFluidDismissGestureManager homeGestureInteractionChanged:]
  -[SBModalUIFluidDismissGestureManager setHomeGestureSettings:]
  -[SBModalUIFluidDismissGestureManager handleGestureChanged:]
  -[SBModalUIFluidDismissGestureManager handleGestureEnded:]
  -[SBModalUIFluidDismissGestureManager settings:changedValueForKey:]
  -[SBModalUIFluidDismissGestureManager setCurrentTransaction:]
  -[SBModalUIFluidDismissGestureManager initWithTransientOverlayPresentationManager:assistantController:]
  -[SBModalUIFluidDismissGestureManager handleGestureBegan:initiatedFromBottomEdge:dismissalThreshold:initiatedFromIndirectEdge:]
  -[SBModalUIFluidDismissGestureManager assistantController]


SBLockStateAggregator : NSObject
 @property  SBFAnalyticsClient *analyticsClient

  // class methods
  +[SBLockStateAggregator sharedInstance]

  // instance methods
  -[SBLockStateAggregator lockState]
  -[SBLockStateAggregator _descriptionForLockState:]
  -[SBLockStateAggregator .cxx_destruct]
  -[SBLockStateAggregator setAnalyticsClient:]
  -[SBLockStateAggregator init]
  -[SBLockStateAggregator _updateLockState]
  -[SBLockStateAggregator _initWithAnalyticsClient:]
  -[SBLockStateAggregator analyticsClient]
  -[SBLockStateAggregator dealloc]
  -[SBLockStateAggregator hasAnyLockState]


SBZionUnlockTrigger : SBMesaUnlockTrigger
  // instance methods
  -[SBZionUnlockTrigger screenOff]
  -[SBZionUnlockTrigger screenOn]
  -[SBZionUnlockTrigger bioUnlock]
  -[SBZionUnlockTrigger .cxx_destruct]
  -[SBZionUnlockTrigger succinctDescriptionBuilder]
  -[SBZionUnlockTrigger lockButtonDown]
  -[SBZionUnlockTrigger fingerOn]
  -[SBZionUnlockTrigger fingerOff]
  -[SBZionUnlockTrigger initWithUnlockBehaviorConfigurationDelegate:]
  -[SBZionUnlockTrigger _isRestToOpenAvailable]
  -[SBZionUnlockTrigger _cancelMinTouchIDTimer]
  -[SBZionUnlockTrigger _startRestToOpenTimerWithDuration:]
  -[SBZionUnlockTrigger _startRestToOpenTimer]
  -[SBZionUnlockTrigger _cancelRestToOpenTimer]
  -[SBZionUnlockTrigger _evaluateRestToOpenTimer]


SBAuthenticationFeedback : NSObject
 @property  unsigned long result
 @property  BOOL showPasscode
 @property  BOOL hintFailureText
 @property  BOOL vibrate
 @property  BOOL jiggleLock

  // instance methods
  -[SBAuthenticationFeedback isEqual:]
  -[SBAuthenticationFeedback result]
  -[SBAuthenticationFeedback vibrate]
  -[SBAuthenticationFeedback showPasscode]
  -[SBAuthenticationFeedback initForFailureWithFailureSettings:]
  -[SBAuthenticationFeedback initForSuccess]
  -[SBAuthenticationFeedback initForFailureShowingPasscode:]
  -[SBAuthenticationFeedback jiggleLock]
  -[SBAuthenticationFeedback hintFailureText]


SBGridSwitcherSwipeUpGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction
  // instance methods
  -[SBGridSwitcherSwipeUpGestureWorkspaceTransaction _gestureType]


SBLockScreenNowPlayingController : NSObject <PTSettingsKeyObserver>
 @property  <SBLockScreenNowPlayingControllerDelegate> *delegate
 @property  BOOL enabled
 @property  long long currentState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenNowPlayingController .cxx_destruct]
  -[SBLockScreenNowPlayingController setDelegate:]
  -[SBLockScreenNowPlayingController _timeoutInterval]
  -[SBLockScreenNowPlayingController isEnabled]
  -[SBLockScreenNowPlayingController _removeObservers]
  -[SBLockScreenNowPlayingController currentState]
  -[SBLockScreenNowPlayingController delegate]
  -[SBLockScreenNowPlayingController settings:changedValueForKey:]
  -[SBLockScreenNowPlayingController dealloc]
  -[SBLockScreenNowPlayingController setEnabled:]
  -[SBLockScreenNowPlayingController _addObservers]
  -[SBLockScreenNowPlayingController _updateNowPlayingPlugin]
  -[SBLockScreenNowPlayingController _invalidateDisableTimer]
  -[SBLockScreenNowPlayingController _updateToState:]
  -[SBLockScreenNowPlayingController _isMediaRecentlyActive]
  -[SBLockScreenNowPlayingController _startDisableTimer]
  -[SBLockScreenNowPlayingController _disableTimerFired]
  -[SBLockScreenNowPlayingController initWithMediaController:]
  -[SBLockScreenNowPlayingController isNowPlayingActive]


SBInteractiveScreenshotGestureManager : NSObject <BSTransactionObserver, SBInteractiveScreenshotCommitWorkspaceTransactionDelegate, SBInteractiveScreenshotGestureRootViewControllerDelegate, SBMainDisplayWorkspaceAppInteractionEventSourceObserving, SBSystemGestureRecognizerDelegate>
 @property  <SBInteractiveScreenshotGestureManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInteractiveScreenshotGestureManager transactionDidComplete:]
  -[SBInteractiveScreenshotGestureManager .cxx_destruct]
  -[SBInteractiveScreenshotGestureManager _invalidateSessionID:]
  -[SBInteractiveScreenshotGestureManager setDelegate:]
  -[SBInteractiveScreenshotGestureManager eventSource:userTouchedApplication:]
  -[SBInteractiveScreenshotGestureManager viewForSystemGestureRecognizer:]
  -[SBInteractiveScreenshotGestureManager gestureRecognizerShouldBegin:]
  -[SBInteractiveScreenshotGestureManager gestureRecognizer:shouldReceiveTouch:]
  -[SBInteractiveScreenshotGestureManager delegate]
  -[SBInteractiveScreenshotGestureManager dealloc]
  -[SBInteractiveScreenshotGestureManager initWithScreen:sourceScene:workspace:systemGestureManager:appInteractionEventSource:]
  -[SBInteractiveScreenshotGestureManager handleRemoteTransientOverlayPresentationRequest:forSession:]
  -[SBInteractiveScreenshotGestureManager acquireDisableGestureAssertionWithReason:]
  -[SBInteractiveScreenshotGestureManager interactiveScreenshotGestureRootViewController:gestureDidCompleteWithIntent:]
  -[SBInteractiveScreenshotGestureManager interactiveScreenshotGestureRootViewControllerRequestsGestureRecognizerCancellation:]
  -[SBInteractiveScreenshotGestureManager interactiveScreenshotCommitWorkspaceTransactionRequestsGestureWindowInvalidation:]
  -[SBInteractiveScreenshotGestureManager interactiveScreenshotCommitWorkspaceTransactionRequestsPlaceholderChromeRemoval:]
  -[SBInteractiveScreenshotGestureManager _handleInteractiveScreenshotGesture:]
  -[SBInteractiveScreenshotGestureManager _updateFailureRequirements]
  -[SBInteractiveScreenshotGestureManager _springBoardBootCompleted:]
  -[SBInteractiveScreenshotGestureManager _performPendingCommitWorkspaceTransactionBlocksWithTransaction:]
  -[SBInteractiveScreenshotGestureManager _screenshotPresentationOptions]
  -[SBInteractiveScreenshotGestureManager _performCommitWorkspaceTransactionBlock:]


_SBInteractiveScreenshotGestureSession : NSObject
 @property  NSUUID *sessionID
 @property  SBInteractiveScreenshotGestureHostRootViewController *hostRootViewController
 @property  SBInteractiveScreenshotGestureRootViewController *rootViewController
 @property  SBInteractiveScreenshotGestureRootWindow *rootWindow
 @property  SBInteractiveScreenshotGestureHostWindow *hostWindow

  // instance methods
  -[_SBInteractiveScreenshotGestureSession sessionID]
  -[_SBInteractiveScreenshotGestureSession rootViewController]
  -[_SBInteractiveScreenshotGestureSession .cxx_destruct]
  -[_SBInteractiveScreenshotGestureSession initWithSessionID:]
  -[_SBInteractiveScreenshotGestureSession rootWindow]
  -[_SBInteractiveScreenshotGestureSession setHostWindow:]
  -[_SBInteractiveScreenshotGestureSession hostWindow]
  -[_SBInteractiveScreenshotGestureSession hostRootViewController]
  -[_SBInteractiveScreenshotGestureSession setRootWindow:]


SBTopAffordanceDotsView : SBHitTestExtendedView <UIPointerInteractionDelegate>
 @property  BOOL expanded
 @property  BOOL highlighted
 @property  BOOL pointerInteractionEnabled
 @property  {UIEdgeInsets=dddd} hitTestEdgeInsets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTopAffordanceDotsView setHighlighted:]
  -[SBTopAffordanceDotsView _updateBackgroundColor]
  -[SBTopAffordanceDotsView pointerInteraction:styleForRegion:]
  -[SBTopAffordanceDotsView isExpanded]
  -[SBTopAffordanceDotsView traitCollectionDidChange:]
  -[SBTopAffordanceDotsView setPointerInteractionEnabled:]
  -[SBTopAffordanceDotsView .cxx_destruct]
  -[SBTopAffordanceDotsView isPointerInteractionEnabled]
  -[SBTopAffordanceDotsView isHighlighted]
  -[SBTopAffordanceDotsView initWithFrame:]
  -[SBTopAffordanceDotsView pointInside:withEvent:]
  -[SBTopAffordanceDotsView setExpanded:]
  -[SBTopAffordanceDotsView pointerInteraction:regionForRequest:defaultRegion:]
  -[SBTopAffordanceDotsView _dotViews]
  -[SBTopAffordanceDotsView hitTestEdgeInsets]
  -[SBTopAffordanceDotsView setHitTestEdgeInsets:]


SBLockScreenBatteryChargingViewController : CSCoverSheetViewControllerBase <BCBatteryDeviceObserving>
 @property  <SBLockScreenBatteryChargingViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenBatteryChargingViewController chargingView]
  -[SBLockScreenBatteryChargingViewController presentationStyle]
  -[SBLockScreenBatteryChargingViewController .cxx_destruct]
  -[SBLockScreenBatteryChargingViewController setDelegate:]
  -[SBLockScreenBatteryChargingViewController delegate]
  -[SBLockScreenBatteryChargingViewController dealloc]
  -[SBLockScreenBatteryChargingViewController loadView]
  -[SBLockScreenBatteryChargingViewController connectedDevicesDidChange:]
  -[SBLockScreenBatteryChargingViewController batteryVisible]
  -[SBLockScreenBatteryChargingViewController _clearVisibilityTimer]
  -[SBLockScreenBatteryChargingViewController _visibilityTimerFired:]
  -[SBLockScreenBatteryChargingViewController initForDisplayOfBattery:]
  -[SBLockScreenBatteryChargingViewController presentWithAnimation:]
  -[SBLockScreenBatteryChargingViewController prepareForDismissalWithAnimation:]
  -[SBLockScreenBatteryChargingViewController showChargeLevelWithBatteryVisible:]


SBSystemServiceServer : FBSServiceFacility
 @property  <SBSystemServiceServerAppSwitcherDelegate> *appSwitcherDelegate
 @property  <SBSystemServiceServerBiometricsDelegate> *biometricsDelegate
 @property  <SBSystemServiceServerHardwareButtonDelegate> *hardwareButtonDelegate
 @property  <SBSystemServiceServerSoftwareUpdateDelegate> *softwareUpdateDelegate
 @property  <SBSystemServiceServerTestAutomationDelegate> *testAutomationDelegate
 @property  <SBSystemServiceServerStateDumpDelegate> *stateDumpDelegate

  // class methods
  +[SBSystemServiceServer sharedInstance]

  // instance methods
  -[SBSystemServiceServer _handleStateDumpServiceClientMessageTypeEnableRemoteStateDump:fromClient:]
  -[SBSystemServiceServer _handleLoadStashedSwitcherModelFromPath:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetTestRunnerRecoveryApplicationBundleIdentifier:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationAddSpecificWidgetToPageWithSize:fromClient:]
  -[SBSystemServiceServer _handleStateDumpServiceClientMessageTypeStateDump:fromClient:]
  -[SBSystemServiceServer noteClientDidDisconnect:]
  -[SBSystemServiceServer setAppSwitcherDelegate:]
  -[SBSystemServiceServer _handleHardwareButtonSetRequestsHIDEvents:fromClient:]
  -[SBSystemServiceServer setStateDumpDelegate:]
  -[SBSystemServiceServer softwareUpdateDelegate]
  -[SBSystemServiceServer _handleTestAutomationResetToHomeScreen:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationRequestHUDHiddenAssertion:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationRequestReachabilityEnabledAssertion:fromClient:]
  -[SBSystemServiceServer setHardwareButtonDelegate:]
  -[SBSystemServiceServer .cxx_destruct]
  -[SBSystemServiceServer _handleSoftwareUpdateGetPasscodePolicy:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetAccessoryAttachedState:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetAlertState:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationAddSpecificWidgetStackToPageWithSize:fromClient:]
  -[SBSystemServiceServer _handleHardwareButtonGetHapticType:fromClient:]
  -[SBSystemServiceServer setSoftwareUpdateDelegate:]
  -[SBSystemServiceServer _handleHardwareButtonSetHapticType:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationGetScencesForBundleIdentifier:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationEnterLostMode:fromClient:]
  -[SBSystemServiceServer _handleStashSwitcherModelToPath:fromClient:]
  -[SBSystemServiceServer _handleHardwareButtonSetPressEventMask:fromClient:]
  -[SBSystemServiceServer _handleSoftwareUpdateSetPasscodePolicy:fromClient:]
  -[SBSystemServiceServer noteDidReceiveMessage:withType:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationBlockApplicationForScreenTime:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetIdleTimerState:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetMallocStackLoggingState:fromClient:]
  -[SBSystemServiceServer _handleStateDumpServiceClientMessageTypeDisableRemoteStateDump:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetReachabilityActiveState:fromClient:]
  -[SBSystemServiceServer setBiometricsDelegate:]
  -[SBSystemServiceServer _handleHardwareButtonGetToggleButtonState:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationClearAllUserNotifications:fromClient:]
  -[SBSystemServiceServer hardwareButtonDelegate]
  -[SBSystemServiceServer _handleTestAutomationSetOrientationLockState:fromClient:]
  -[SBSystemServiceServer appSwitcherDelegate]
  -[SBSystemServiceServer _handleTestAutomationExitLostMode:fromClient:]
  -[SBSystemServiceServer stateDumpDelegate]
  -[SBSystemServiceServer biometricsDelegate]
  -[SBSystemServiceServer _init]
  -[SBSystemServiceServer dealloc]
  -[SBSystemServiceServer _handleRequestAppSwitcherAppearanceForHiddenApp:fromClient:]
  -[SBSystemServiceServer _handleHardwareButtonAcquireAssertionMessage:fromClient:]
  -[SBSystemServiceServer testAutomationDelegate]
  -[SBSystemServiceServer setTestAutomationDelegate:]
  -[SBSystemServiceServer _handleBiometricsFetchUnlockCredentialSetMessage:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetHiddenFeatureState:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSuspendAllDisplays:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationAddWidgetsToEachPage:fromClient:]


SBSwipeToKillSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBSwipeToKillSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBSwipeToKillSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBSwipeToKillSwitcherModifier titleOpacityForIndex:]
  -[SBSwipeToKillSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBSwipeToKillSwitcherModifier shadowOffsetForIndex:]
  -[SBSwipeToKillSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBSwipeToKillSwitcherModifier lighteningAlphaForIndex:]
  -[SBSwipeToKillSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBSwipeToKillSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSwipeToKillSwitcherModifier scaleForIndex:]
  -[SBSwipeToKillSwitcherModifier frameForIndex:]
  -[SBSwipeToKillSwitcherModifier visibleAppLayouts]
  -[SBSwipeToKillSwitcherModifier .cxx_destruct]
  -[SBSwipeToKillSwitcherModifier cornerRadiiForLayoutRole:inAppLayout:withCornerRadii:]
  -[SBSwipeToKillSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBSwipeToKillSwitcherModifier contentViewOffsetForLayoutRole:inAppLayout:]
  -[SBSwipeToKillSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBSwipeToKillSwitcherModifier handleRemovalEvent:]
  -[SBSwipeToKillSwitcherModifier contentViewOffsetForAccessoriesOfAppLayout:]
  -[SBSwipeToKillSwitcherModifier initWithLayoutRole:inAppLayout:fadeOutSwipedItems:]
  -[SBSwipeToKillSwitcherModifier handleSwipeToKillEvent:]
  -[SBSwipeToKillSwitcherModifier _calculateInterpolationDirection]
  -[SBSwipeToKillSwitcherModifier _dragHasBeenReleasedTowardKill]
  -[SBSwipeToKillSwitcherModifier _interpolatingAdjacentIndexForIndex:]
  -[SBSwipeToKillSwitcherModifier _performBlockWhileSimulatingPostRemovalAppLayoutState:]


SBLegacyLockScreenEnvironment : NSObject <BSDescriptionProviding, SBLockScreenEnvironment>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIViewController *rootViewController
 @property  <SBAutoUnlockRule> *autoUnlockRule
 @property  <SBBiometricUnlockBehavior> *biometricUnlockBehavior
 @property  <SBButtonEventsHandler> *buttonEventsHandler
 @property  <SBApplicationHosting> *applicationHoster
 @property  <SBIdleTimerProviding> *idleTimerProvider
 @property  <SBFScreenWakeAnimationTarget> *screenWakeAnimationTarget
 @property  <SBLockScreenApplicationLaunching> *applicationLauncher
 @property  <SBLockScreenBacklightControlling> *backlightController
 @property  <SBLockScreenBehaviorSuppressing> *behaviorSuppressor
 @property  <SBLockScreenBlockedStateObserving> *blockedStateObserver
 @property  <SBLockScreenButtonObserving> *buttonObserver
 @property  <SBLockScreenCallHandling> *callController
 @property  <SBLockScreenContentStateProviding> *contentStateProvider
 @property  <SBLockScreenCustomActionStoring> *customActionStore
 @property  <SBLockScreenIdleTimerControlling> *idleTimerController
 @property  <SBLockScreenLockingAndUnlocking> *lockController
 @property  <SBLockScreenMediaControlsPresenting> *mediaControlsPresenter
 @property  <SBLockScreenPasscodeViewPresenting> *passcodeViewPresenter
 @property  <SBLockScreenPluginPresenting> *pluginPresenter
 @property  <SBLockScreenProximityBehaviorProviding> *proximityBehaviorProvider
 @property  <SBLockScreenStatusBarTransitioning> *statusBarTransitionController
 @property  <SBSWidgetMetricsProviding> *widgetMetricsProvider
 @property  <SBLockScreenSpotlightPresenting> *spotlightPresenter

  // instance methods
  -[SBLegacyLockScreenEnvironment pluginPresenter]
  -[SBLegacyLockScreenEnvironment widgetMetricsProvider]
  -[SBLegacyLockScreenEnvironment rootViewController]
  -[SBLegacyLockScreenEnvironment spotlightPresenter]
  -[SBLegacyLockScreenEnvironment backlightController]
  -[SBLegacyLockScreenEnvironment .cxx_destruct]
  -[SBLegacyLockScreenEnvironment passcodeViewPresenter]
  -[SBLegacyLockScreenEnvironment succinctDescriptionBuilder]
  -[SBLegacyLockScreenEnvironment applicationLauncher]
  -[SBLegacyLockScreenEnvironment callController]
  -[SBLegacyLockScreenEnvironment descriptionBuilderWithMultilinePrefix:]
  -[SBLegacyLockScreenEnvironment screenWakeAnimationTarget]
  -[SBLegacyLockScreenEnvironment buttonEventsHandler]
  -[SBLegacyLockScreenEnvironment mediaControlsPresenter]
  -[SBLegacyLockScreenEnvironment descriptionWithMultilinePrefix:]
  -[SBLegacyLockScreenEnvironment applicationHoster]
  -[SBLegacyLockScreenEnvironment statusBarTransitionController]
  -[SBLegacyLockScreenEnvironment buttonObserver]
  -[SBLegacyLockScreenEnvironment succinctDescription]
  -[SBLegacyLockScreenEnvironment lockController]
  -[SBLegacyLockScreenEnvironment proximityBehaviorProvider]
  -[SBLegacyLockScreenEnvironment biometricUnlockBehavior]
  -[SBLegacyLockScreenEnvironment idleTimerController]
  -[SBLegacyLockScreenEnvironment customActionStore]
  -[SBLegacyLockScreenEnvironment blockedStateObserver]
  -[SBLegacyLockScreenEnvironment idleTimerProvider]
  -[SBLegacyLockScreenEnvironment autoUnlockRule]
  -[SBLegacyLockScreenEnvironment contentStateProvider]
  -[SBLegacyLockScreenEnvironment behaviorSuppressor]
  -[SBLegacyLockScreenEnvironment initWithLockScreenViewController:]


SBPIPPositionHyperregionLibrary : NSObject <SBPIPPositionHyperregionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPPositionHyperregionLibrary .cxx_destruct]
  -[SBPIPPositionHyperregionLibrary init]
  -[SBPIPPositionHyperregionLibrary regionWithType:geometry:]
  -[SBPIPPositionHyperregionLibrary _resetLastKnownRegions]
  -[SBPIPPositionHyperregionLibrary _lastKnownRegionForType:]
  -[SBPIPPositionHyperregionLibrary _cornersRegionWithGeometry:]
  -[SBPIPPositionHyperregionLibrary _stashedLeftRegionWithGeometry:]
  -[SBPIPPositionHyperregionLibrary _stashedRightRegionWithGeometry:]
  -[SBPIPPositionHyperregionLibrary _offscreenCornersRegionWithGeometry:]
  -[SBPIPPositionHyperregionLibrary _containerInsetRegionWithGeometry:]
  -[SBPIPPositionHyperregionLibrary _allUnifiedRegionWithGeometry:]
  -[SBPIPPositionHyperregionLibrary _validatedInsetRectWithinContainerBoundsWithGeometry:]
  -[SBPIPPositionHyperregionLibrary _insetRectForEdgeInsets:pipSize:containerSize:]
  -[SBPIPPositionHyperregionLibrary _validatedMinimumPaddingAndEdgeInsetInsetRect:]
  -[SBPIPPositionHyperregionLibrary _validatedStashedToStashedMaximumumRectWithGeometry:]


SBPlatterHomeGestureContext : NSObject <SBBarSwipeAffordanceControllingDelegate, SBBarSwipeAffordanceDelegate, SBUIPresentableHomeGestureContext, SBPlatterHomeGestureViewProviding>
 @property  <SBUIPresentableHomeGestureParticipant> *participant
 @property  <SBPlatterHomeGestureContextDelegate> *delegate
 @property  BOOL wantsToBeActiveAffordance
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL ownsHomeGesture

  // instance methods
  -[SBPlatterHomeGestureContext ownsHomeGesture]
  -[SBPlatterHomeGestureContext barSwipeAffordanceView:systemGestureTypeForType:]
  -[SBPlatterHomeGestureContext zStackParticipant:updatePreferences:]
  -[SBPlatterHomeGestureContext zStackParticipantDidChange:]
  -[SBPlatterHomeGestureContext .cxx_destruct]
  -[SBPlatterHomeGestureContext setDelegate:]
  -[SBPlatterHomeGestureContext homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBPlatterHomeGestureContext participant]
  -[SBPlatterHomeGestureContext delegate]
  -[SBPlatterHomeGestureContext hideAnimationSettingsForBarSwipeAffordanceView:]
  -[SBPlatterHomeGestureContext unhideAnimationSettingsForBarSwipeAffordanceView:]
  -[SBPlatterHomeGestureContext dealloc]
  -[SBPlatterHomeGestureContext setWantsHomeGesture:]
  -[SBPlatterHomeGestureContext becomeActiveAffordanceIfPossible:]
  -[SBPlatterHomeGestureContext wantsToBeActiveAffordance]
  -[SBPlatterHomeGestureContext initWithParticipant:participantIdentifier:]
  -[SBPlatterHomeGestureContext platterBarSwipeAffordanceViewForParticipant:]
  -[SBPlatterHomeGestureContext _setOwnsHomeGesture:]
  -[SBPlatterHomeGestureContext keyboardHomeAffordanceAssertionForBarSwipeAffordanceControlling:]


SBCoplanarSwitcherModifier : SBSwitcherModifier
 @property  double scale
 @property  BOOL usesContainerViewBoundsAsActiveFrame
 @property  long long spacingType

  // instance methods
  -[SBCoplanarSwitcherModifier _offscreenSpacing]
  -[SBCoplanarSwitcherModifier scaleForIndex:]
  -[SBCoplanarSwitcherModifier frameForIndex:]
  -[SBCoplanarSwitcherModifier spacingType]
  -[SBCoplanarSwitcherModifier .cxx_destruct]
  -[SBCoplanarSwitcherModifier usesContainerViewBoundsAsActiveFrame]
  -[SBCoplanarSwitcherModifier setSpacingType:]
  -[SBCoplanarSwitcherModifier setScale:]
  -[SBCoplanarSwitcherModifier initWithActiveAppLayout:]
  -[SBCoplanarSwitcherModifier scale]
  -[SBCoplanarSwitcherModifier setUsesContainerViewBoundsAsActiveFrame:]
  -[SBCoplanarSwitcherModifier _indexOfActiveAppLayout]


SBHomeGestureSettingsChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBHomeGestureSettingsChangedSwitcherModifierEvent type]


SBCoverSheetPanelBackgroundContainerView : SBFTouchPassThroughView
  // instance methods
  -[SBCoverSheetPanelBackgroundContainerView _setPresentationValue:forKey:]


SBCoverSheetParallaxContainerView : SBFTouchPassThroughView
  // instance methods
  -[SBCoverSheetParallaxContainerView _setPresentationValue:forKey:]


_SBAppSwitcherSnapshotCacheKey : NSObject <NSCopying>
 @property  SBAppLayout *appLayout
 @property  SBDisplayItem *displayItem

  // instance methods
  -[_SBAppSwitcherSnapshotCacheKey displayItem]
  -[_SBAppSwitcherSnapshotCacheKey appLayout]
  -[_SBAppSwitcherSnapshotCacheKey .cxx_destruct]
  -[_SBAppSwitcherSnapshotCacheKey isEqual:]
  -[_SBAppSwitcherSnapshotCacheKey copyWithZone:]
  -[_SBAppSwitcherSnapshotCacheKey initWithDisplayItem:inAppLayout:]


SBAppSwitcherSnapshotCacheEntry : NSObject
 @property  SBAppLayout *appLayout
 @property  SBDisplayItem *displayItem
 @property  XBApplicationSnapshot *snapshot
 @property  UIImage *snapshotImage
 @property  long long role
 @property  BOOL fromFullSizeSnapshotRequest
 @property  BOOL needsUpdate

  // instance methods
  -[SBAppSwitcherSnapshotCacheEntry displayItem]
  -[SBAppSwitcherSnapshotCacheEntry appLayout]
  -[SBAppSwitcherSnapshotCacheEntry setDisplayItem:]
  -[SBAppSwitcherSnapshotCacheEntry setAppLayout:]
  -[SBAppSwitcherSnapshotCacheEntry _matchesAppLayout:displayItem:]
  -[SBAppSwitcherSnapshotCacheEntry setSnapshot:]
  -[SBAppSwitcherSnapshotCacheEntry .cxx_destruct]
  -[SBAppSwitcherSnapshotCacheEntry setSnapshotImage:]
  -[SBAppSwitcherSnapshotCacheEntry fromFullSizeSnapshotRequest]
  -[SBAppSwitcherSnapshotCacheEntry snapshotImage]
  -[SBAppSwitcherSnapshotCacheEntry setNeedsUpdate:]
  -[SBAppSwitcherSnapshotCacheEntry snapshot]
  -[SBAppSwitcherSnapshotCacheEntry role]
  -[SBAppSwitcherSnapshotCacheEntry needsUpdate]
  -[SBAppSwitcherSnapshotCacheEntry setFromFullSizeSnapshotRequest:]


_SBAppSwitcherSnapshotImageCacheRequest : NSObject
 @property  unsigned long sequenceID
 @property  BOOL loadFullSizeSnapshot
 @property  SBAppLayout *appLayout
 @property  SBDisplayItem *displayItem
 @property  XBApplicationSnapshot *snapshot

  // instance methods
  -[_SBAppSwitcherSnapshotImageCacheRequest displayItem]
  -[_SBAppSwitcherSnapshotImageCacheRequest appLayout]
  -[_SBAppSwitcherSnapshotImageCacheRequest setDisplayItem:]
  -[_SBAppSwitcherSnapshotImageCacheRequest setAppLayout:]
  -[_SBAppSwitcherSnapshotImageCacheRequest setLoadFullSizeSnapshot:]
  -[_SBAppSwitcherSnapshotImageCacheRequest setSnapshot:]
  -[_SBAppSwitcherSnapshotImageCacheRequest .cxx_destruct]
  -[_SBAppSwitcherSnapshotImageCacheRequest snapshot]
  -[_SBAppSwitcherSnapshotImageCacheRequest initWithSequenceID:]
  -[_SBAppSwitcherSnapshotImageCacheRequest sequenceID]
  -[_SBAppSwitcherSnapshotImageCacheRequest loadFullSizeSnapshot]


SBAppSwitcherSnapshotImageCache : NSObject <SBUIActiveOrientationObserver>
 @property  <SBAppSwitcherSnapshotImageCacheDelegate> *delegate
 @property  NSArray *cachableAppLayouts
 @property  NSArray *fullSizeCachableAppLayouts
 @property  BOOL reloadsSnapshotsForActiveInterfaceOrientationChange
 @property  NSString *debugName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherSnapshotImageCache activeInterfaceOrientationWillChangeToOrientation:]
  -[SBAppSwitcherSnapshotImageCache debugName]
  -[SBAppSwitcherSnapshotImageCache fullSizeCachableAppLayouts]
  -[SBAppSwitcherSnapshotImageCache reloadSnapshotsForInterfaceStyleChange:]
  -[SBAppSwitcherSnapshotImageCache activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBAppSwitcherSnapshotImageCache _purgeAllSnapshots]
  -[SBAppSwitcherSnapshotImageCache setFullSizeCachableAppLayouts:]
  -[SBAppSwitcherSnapshotImageCache _addCacheEntryForImage:fromRequest:]
  -[SBAppSwitcherSnapshotImageCache _addObserver:forDisplayItem:inAppLayout:]
  -[SBAppSwitcherSnapshotImageCache _purgeSnapshotRequestsForDisplayItem:withReason:]
  -[SBAppSwitcherSnapshotImageCache _purgeLowPrioritySnapshots]
  -[SBAppSwitcherSnapshotImageCache _uiImageForCGImage:forSnapshotRequest:]
  -[SBAppSwitcherSnapshotImageCache .cxx_destruct]
  -[SBAppSwitcherSnapshotImageCache removeSnapshotObserver:]
  -[SBAppSwitcherSnapshotImageCache _purgeAllSnapshotRequests]
  -[SBAppSwitcherSnapshotImageCache setDelegate:]
  -[SBAppSwitcherSnapshotImageCache _cachableAppLayoutsRequiringFullSizeSnapshots]
  -[SBAppSwitcherSnapshotImageCache _initWithDelegate:iconController:applicationController:orientationLockManager:settings:]
  -[SBAppSwitcherSnapshotImageCache _createSnapshotRequestWithDisplayItem:inAppLayout:forFullSizeSnapshot:]
  -[SBAppSwitcherSnapshotImageCache _updateCache]
  -[SBAppSwitcherSnapshotImageCache setCachableAppLayouts:]
  -[SBAppSwitcherSnapshotImageCache reloadSnapshotForDisplayItem:]
  -[SBAppSwitcherSnapshotImageCache _cachableAppLayoutsForTesting]
  -[SBAppSwitcherSnapshotImageCache _setShouldPurgeNilEntry:]
  -[SBAppSwitcherSnapshotImageCache init]
  -[SBAppSwitcherSnapshotImageCache _purgeSnapshotsForKey:]
  -[SBAppSwitcherSnapshotImageCache _enqueueNextSnapshotRequestIfNecessary]
  -[SBAppSwitcherSnapshotImageCache _asynchronouslyLoadSnapshotFromRequest:]
  -[SBAppSwitcherSnapshotImageCache addSnapshotUpdateObserver:forDisplayItem:inAppLayout:]
  -[SBAppSwitcherSnapshotImageCache _enqueueSnapshotRequestsForCachableAppLayouts:forFullSizeSnapshots:]
  -[SBAppSwitcherSnapshotImageCache _purgeLowPriorityFullSizeSnapshots]
  -[SBAppSwitcherSnapshotImageCache _updateObserversForDisplayItem:inAppLayout:withCacheEntry:]
  -[SBAppSwitcherSnapshotImageCache _isValidSnapshotRequest:]
  -[SBAppSwitcherSnapshotImageCache _snapshotChanged:]
  -[SBAppSwitcherSnapshotImageCache _purgeSnapshotRequest:withReason:]
  -[SBAppSwitcherSnapshotImageCache _purgeLowPrioritySnapshotRequests]
  -[SBAppSwitcherSnapshotImageCache _createDownscaledVariantForRequest:snapshot:displayItem:sceneHandle:application:]
  -[SBAppSwitcherSnapshotImageCache cachableAppLayouts]
  -[SBAppSwitcherSnapshotImageCache _updateCacheForDisplayItem:]
  -[SBAppSwitcherSnapshotImageCache _setSnapshotNeedsUpdateForDisplayItem:]
  -[SBAppSwitcherSnapshotImageCache initWithDelegate:]
  -[SBAppSwitcherSnapshotImageCache _isValidAppLayout:withSnapshot:givenCachableAppLayouts:]
  -[SBAppSwitcherSnapshotImageCache setReloadsSnapshotsForActiveInterfaceOrientationChange:]
  -[SBAppSwitcherSnapshotImageCache delegate]
  -[SBAppSwitcherSnapshotImageCache reloadsSnapshotsForActiveInterfaceOrientationChange]
  -[SBAppSwitcherSnapshotImageCache _loadSnapshotForRequest:withDisplayItem:inAppLayout:]
  -[SBAppSwitcherSnapshotImageCache _snapshotImage:finishedLoadingForRequest:]
  -[SBAppSwitcherSnapshotImageCache _updateActiveOrientationObservingIfNeeded]
  -[SBAppSwitcherSnapshotImageCache _cacheSnapshotForRequest:withDisplayItem:inAppLayout:]
  -[SBAppSwitcherSnapshotImageCache dealloc]
  -[SBAppSwitcherSnapshotImageCache _keepGoingForRequest:]
  -[SBAppSwitcherSnapshotImageCache _representedApplicationSceneEntityForDisplayItem:]
  -[SBAppSwitcherSnapshotImageCache _createDecodedImageIfPossible:]
  -[SBAppSwitcherSnapshotImageCache setDebugName:]
  -[SBAppSwitcherSnapshotImageCache _scaleForDownscaledSnapshotsForAppLayout:]
  -[SBAppSwitcherSnapshotImageCache _purgeLowPriorityFullSizeSnapshotRequests]
  -[SBAppSwitcherSnapshotImageCache _appLayoutsInPriorityOrder]
  -[SBAppSwitcherSnapshotImageCache _orientationForAppLayout:]


SBIdleTimerSettings : PTSettings
 @property  BOOL disableIdleTimer

  // class methods
  +[SBIdleTimerSettings settingsControllerModule]

  // instance methods
  -[SBIdleTimerSettings setDefaultValues]
  -[SBIdleTimerSettings disableIdleTimer]
  -[SBIdleTimerSettings setDisableIdleTimer:]


SBLockScreenPluginManager : NSObject <SBLockScreenPluginAgent, PTSettingsKeyObserver, SBLockScreenActionProvider>
 @property  SBLockScreenPlugin *activePlugin
 @property  SBLockScreenPlugin *displayedPlugin
 @property  <SBLockScreenPluginManagerDelegate> *delegate
 @property  BOOL enabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenPluginManager _highestPriorityPluginIgnoringViewDisplay:]
  -[SBLockScreenPluginManager pluginController:sendAction:]
  -[SBLockScreenPluginManager lockScreenActionContext]
  -[SBLockScreenPluginManager _pluginForPluginController:]
  -[SBLockScreenPluginManager activePlugin]
  -[SBLockScreenPluginManager .cxx_destruct]
  -[SBLockScreenPluginManager displayedPlugin]
  -[SBLockScreenPluginManager disableLockScreenPluginWithContext:]
  -[SBLockScreenPluginManager succinctDescriptionBuilder]
  -[SBLockScreenPluginManager _handlePluginDisabled:withContext:]
  -[SBLockScreenPluginManager setDelegate:]
  -[SBLockScreenPluginManager descriptionBuilderWithMultilinePrefix:]
  -[SBLockScreenPluginManager init]
  -[SBLockScreenPluginManager enableLockScreenPluginWithContext:]
  -[SBLockScreenPluginManager descriptionWithMultilinePrefix:]
  -[SBLockScreenPluginManager activatePluginController:]
  -[SBLockScreenPluginManager succinctDescription]
  -[SBLockScreenPluginManager _loadLockScreenPluginWithContext:]
  -[SBLockScreenPluginManager _setActivePlugin:displayedPlugin:]
  -[SBLockScreenPluginManager isEnabled]
  -[SBLockScreenPluginManager handleEvent:]
  -[SBLockScreenPluginManager delegate]
  -[SBLockScreenPluginManager settings:changedValueForKey:]
  -[SBLockScreenPluginManager _sendEventToPlugin:]
  -[SBLockScreenPluginManager _handleUIRelock]
  -[SBLockScreenPluginManager dealloc]
  -[SBLockScreenPluginManager setEnabled:]
  -[SBLockScreenPluginManager _refreshLockScreenPlugin]
  -[SBLockScreenPluginManager deactivatePluginController:]
  -[SBLockScreenPluginManager pluginController:updateAppearance:]


SBDashBoardHostedAppViewController : SBDashBoardViewExternalControllerBase <SBAppViewControllerDelegate, SBSceneHandleObserver, SBMainDisplaySceneLayoutStatusBarViewDataSource, SBDeviceApplicationSceneStatusBarStateObserver, SBApplicationSceneViewControllingStatusBarDelegate, SBApplicationHosting, BSInvalidatable>
 @property  <SBApplicationSceneStatusBarDescribing> *statusBarDescriber
 @property  <SBDashBoardHostedAppViewControllerDelegate> *delegate
 @property  SBApplicationSceneHandle *applicationSceneHandle
 @property  SBApplicationSceneView *appView
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  long long mode
 @property  NSSet *actionsToDeliver
 @property  BOOL intentToTransitionFromSecureAppToFull
 @property  BOOL placeholderContentEnabled
 @property  BOOL interfaceOrientationLocked
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardHostedAppViewController presentationPriority]
  -[SBDashBoardHostedAppViewController statusBarOrientation]
  -[SBDashBoardHostedAppViewController setActionsToDeliver:]
  -[SBDashBoardHostedAppViewController configureDisplayLayoutElement:]
  -[SBDashBoardHostedAppViewController presentationType]
  -[SBDashBoardHostedAppViewController applicationSceneHandle]
  -[SBDashBoardHostedAppViewController initWithApplicationSceneEntity:]
  -[SBDashBoardHostedAppViewController presentationStyle]
  -[SBDashBoardHostedAppViewController actionsToDeliver]
  -[SBDashBoardHostedAppViewController applicationSceneViewController:didUpdateStatusBarSettings:]
  -[SBDashBoardHostedAppViewController _endShowingStatusBarView]
  -[SBDashBoardHostedAppViewController .cxx_destruct]
  -[SBDashBoardHostedAppViewController _appViewController]
  -[SBDashBoardHostedAppViewController _setResignActiveAssertionEnabled:]
  -[SBDashBoardHostedAppViewController setSupplementalActivationSettings:]
  -[SBDashBoardHostedAppViewController canHostAnApp]
  -[SBDashBoardHostedAppViewController viewDidLoad]
  -[SBDashBoardHostedAppViewController hostedAppSceneHandles]
  -[SBDashBoardHostedAppViewController _updateStatusBarContainerOrientation]
  -[SBDashBoardHostedAppViewController conformsToSBApplicationHosting]
  -[SBDashBoardHostedAppViewController containerInterfaceOrientation]
  -[SBDashBoardHostedAppViewController setDelegate:]
  -[SBDashBoardHostedAppViewController _setMode:fromClient:forReason:]
  -[SBDashBoardHostedAppViewController viewDidAppear:]
  -[SBDashBoardHostedAppViewController setPlaceholderContentEnabled:]
  -[SBDashBoardHostedAppViewController isHostingAnApp]
  -[SBDashBoardHostedAppViewController interfaceOrientationLocked]
  -[SBDashBoardHostedAppViewController sceneWithIdentifier:didChangeSceneInterfaceOrientationTo:]
  -[SBDashBoardHostedAppViewController allowsConfiguringIndividualStatusBarParts]
  -[SBDashBoardHostedAppViewController _deviceApplicationSceneHandle]
  -[SBDashBoardHostedAppViewController hostedAppWillRotateToInterfaceOrientation:]
  -[SBDashBoardHostedAppViewController setInterfaceOrientationLocked:]
  -[SBDashBoardHostedAppViewController willMoveToParentViewController:]
  -[SBDashBoardHostedAppViewController aggregateBehavior:]
  -[SBDashBoardHostedAppViewController hostedAppSceneHandle]
  -[SBDashBoardHostedAppViewController _beginShowingStatusBarView]
  -[SBDashBoardHostedAppViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDashBoardHostedAppViewController appView]
  -[SBDashBoardHostedAppViewController viewWillDisappear:]
  -[SBDashBoardHostedAppViewController appViewController:didTransitionFromMode:toMode:]
  -[SBDashBoardHostedAppViewController appViewControllerWillActivateApplication:]
  -[SBDashBoardHostedAppViewController appViewControllerDidDeactivateApplication:]
  -[SBDashBoardHostedAppViewController statusBarDescriber]
  -[SBDashBoardHostedAppViewController _addStatusBarViewIfNeeded]
  -[SBDashBoardHostedAppViewController viewWillAppear:]
  -[SBDashBoardHostedAppViewController appearanceIdentifier]
  -[SBDashBoardHostedAppViewController handleEvent:]
  -[SBDashBoardHostedAppViewController statusBarDescriberForStatusBarPart:]
  -[SBDashBoardHostedAppViewController contentInterfaceOrientation]
  -[SBDashBoardHostedAppViewController delegate]
  -[SBDashBoardHostedAppViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBDashBoardHostedAppViewController appViewControllerShouldBackgroundApplicationOnDeactivate:]
  -[SBDashBoardHostedAppViewController setMode:]
  -[SBDashBoardHostedAppViewController dealloc]
  -[SBDashBoardHostedAppViewController statusBarDescribers]
  -[SBDashBoardHostedAppViewController placeholderContentContext]
  -[SBDashBoardHostedAppViewController invalidate]
  -[SBDashBoardHostedAppViewController displayLayoutElementIdentifier]
  -[SBDashBoardHostedAppViewController setPlaceholderContentContext:]
  -[SBDashBoardHostedAppViewController mode]
  -[SBDashBoardHostedAppViewController aggregateAppearance:]
  -[SBDashBoardHostedAppViewController viewDidDisappear:]
  -[SBDashBoardHostedAppViewController placeholderContentEnabled]
  -[SBDashBoardHostedAppViewController setIntentToTransitionFromSecureAppToFull:]
  -[SBDashBoardHostedAppViewController intentToTransitionFromSecureAppToFull]


_SBDashBoardHostedAppStatusBarStateProxy : SBDeviceApplicationSceneStatusBarStateProxy
 @property  SBDashBoardHostedAppViewController *hostedAppVCBackReference

  // instance methods
  -[_SBDashBoardHostedAppStatusBarStateProxy _suppressInheritedPartStyles]
  -[_SBDashBoardHostedAppStatusBarStateProxy hostedAppVCBackReference]
  -[_SBDashBoardHostedAppStatusBarStateProxy .cxx_destruct]
  -[_SBDashBoardHostedAppStatusBarStateProxy _fallbackInterfaceOrientation]
  -[_SBDashBoardHostedAppStatusBarStateProxy _statusBarAlpha]
  -[_SBDashBoardHostedAppStatusBarStateProxy setHostedAppVCBackReference:]


SBSwitcherDropRegionContext : NSObject <BSDescriptionProviding>
 @property  unsigned long currentDropRegion
 @property  unsigned long currentDropAction
 @property  SBAppLayout *draggingAppLayout
 @property  long long draggingLayoutRole
 @property  SBAppLayout *draggingLeafAppLayout
 @property  SBAppLayout *intersectingAppLayout
 @property  long long intersectingLayoutRole
 @property  SBAppLayout *intersectingLeafAppLayout
 @property  {CGSize=dd} scaledIntersectingAppLayoutSize
 @property  {CGSize=dd} unscaledIntersectingAppLayoutSize
 @property  long long intersectingAppLayoutConfiguration
 @property  BOOL intersectingAppLayoutIsOnFirstRow
 @property  SBAppLayout *closestVisibleAppLayout
 @property  SBAppLayout *remainingAppLayout
 @property  SBAppLayout *evictedAppLayout
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} originRect
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} targetRect
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherDropRegionContext .cxx_destruct]
  -[SBSwitcherDropRegionContext succinctDescriptionBuilder]
  -[SBSwitcherDropRegionContext setTargetRect:]
  -[SBSwitcherDropRegionContext setOriginRect:]
  -[SBSwitcherDropRegionContext descriptionBuilderWithMultilinePrefix:]
  -[SBSwitcherDropRegionContext isSwap]
  -[SBSwitcherDropRegionContext descriptionWithMultilinePrefix:]
  -[SBSwitcherDropRegionContext succinctDescription]
  -[SBSwitcherDropRegionContext targetRect]
  -[SBSwitcherDropRegionContext originRect]
  -[SBSwitcherDropRegionContext draggingLeafAppLayout]
  -[SBSwitcherDropRegionContext currentDropRegion]
  -[SBSwitcherDropRegionContext currentDropAction]
  -[SBSwitcherDropRegionContext intersectingLeafAppLayout]
  -[SBSwitcherDropRegionContext initWithDraggingLayoutRole:inAppLayout:]
  -[SBSwitcherDropRegionContext setIntersectingAppLayout:]
  -[SBSwitcherDropRegionContext setIntersectingLayoutRole:]
  -[SBSwitcherDropRegionContext setScaledIntersectingAppLayoutSize:]
  -[SBSwitcherDropRegionContext setUnscaledIntersectingAppLayoutSize:]
  -[SBSwitcherDropRegionContext setIntersectingAppLayoutConfiguration:]
  -[SBSwitcherDropRegionContext setIntersectingAppLayoutIsOnFirstRow:]
  -[SBSwitcherDropRegionContext setClosestVisibleAppLayout:]
  -[SBSwitcherDropRegionContext setCurrentDropRegion:]
  -[SBSwitcherDropRegionContext setRemainingAppLayout:]
  -[SBSwitcherDropRegionContext setEvictedAppLayout:]
  -[SBSwitcherDropRegionContext finalTargetAppLayout]
  -[SBSwitcherDropRegionContext remainingAppLayout]
  -[SBSwitcherDropRegionContext evictedAppLayout]
  -[SBSwitcherDropRegionContext displayItemsToReloadSnapshots]
  -[SBSwitcherDropRegionContext droppedLeafAppLayout]
  -[SBSwitcherDropRegionContext draggingAppLayout]
  -[SBSwitcherDropRegionContext draggingLayoutRole]
  -[SBSwitcherDropRegionContext intersectingAppLayout]
  -[SBSwitcherDropRegionContext closestVisibleAppLayout]
  -[SBSwitcherDropRegionContext intersectingAppLayoutIsOnFirstRow]
  -[SBSwitcherDropRegionContext scaledIntersectingAppLayoutSize]
  -[SBSwitcherDropRegionContext effectiveDroppingAppLayoutConfiguration]
  -[SBSwitcherDropRegionContext intersectingLayoutRole]
  -[SBSwitcherDropRegionContext unscaledIntersectingAppLayoutSize]
  -[SBSwitcherDropRegionContext intersectingAppLayoutConfiguration]


SBHomeButtonPressSpeedMesaUnlockTrigger : SBMesaUnlockTrigger
 @property  BSTimer *slowPressTimer
 @property  double slowPressDuration

  // instance methods
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _cancelTimer]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _timerFired]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger screenOff]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _startTimer]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger bioUnlock]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger .cxx_destruct]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger succinctDescriptionBuilder]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger init]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger menuButtonDown]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger menuButtonUp]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger fingerOff]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger slowPressDuration]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _isTimerRunning]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _isPrimed]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _evaluateUnlock]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger setSlowPressDuration:]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _slowPressTimer]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _setSlowPressTimer:]


SBSystemNotesPositionHyperregionComposer : NSObject <SBPIPPositionHyperregionComposing>
 @property  <SBPIPPositionHyperregionComposerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemNotesPositionHyperregionComposer _setupStateCapture]
  -[SBSystemNotesPositionHyperregionComposer .cxx_destruct]
  -[SBSystemNotesPositionHyperregionComposer setDelegate:]
  -[SBSystemNotesPositionHyperregionComposer init]
  -[SBSystemNotesPositionHyperregionComposer delegate]
  -[SBSystemNotesPositionHyperregionComposer dealloc]
  -[SBSystemNotesPositionHyperregionComposer invalidate]
  -[SBSystemNotesPositionHyperregionComposer positionRegionsForRegions:geometry:interaction:]
  -[SBSystemNotesPositionHyperregionComposer regionWithType:geometry:]
  -[SBSystemNotesPositionHyperregionComposer _addOffscreenCornersToRegions:geometry:]
  -[SBSystemNotesPositionHyperregionComposer setupForSwipesFromCorners:animated:]
  -[SBSystemNotesPositionHyperregionComposer setupForInteractiveCornerGesture]
  -[SBSystemNotesPositionHyperregionComposer setupForInteractiveCornerGestureEnd]
  -[SBSystemNotesPositionHyperregionComposer setupForStandardBehavior]
  -[SBSystemNotesPositionHyperregionComposer setupForInteractiveDismissalToSize:]
  -[SBSystemNotesPositionHyperregionComposer setupForEdgeProtectCornerSwipe]


SBIdleTimerDomain : PTDomain
  // class methods
  +[SBIdleTimerDomain domainGroupName]
  +[SBIdleTimerDomain rootSettings]
  +[SBIdleTimerDomain domainName]
  +[SBIdleTimerDomain rootSettingsClass]


SBDashBoardMesaUnlockBehavior : NSObject <SBMesaUnlockTriggerDelegate, SBBiometricUnlockBehavior>
 @property  SBHomeHardwareButton *homeHardwareButton
 @property  SBMesaUnlockTrigger *trigger
 @property  CSLockScreenMesaSettings *mesaSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate

  // instance methods
  -[SBDashBoardMesaUnlockBehavior screenOff]
  -[SBDashBoardMesaUnlockBehavior screenOn]
  -[SBDashBoardMesaUnlockBehavior _getHomeHardwareButton]
  -[SBDashBoardMesaUnlockBehavior mesaUnlockTriggerFired:]
  -[SBDashBoardMesaUnlockBehavior significantUserInteractionDidOccur]
  -[SBDashBoardMesaUnlockBehavior setAuthenticated:]
  -[SBDashBoardMesaUnlockBehavior _failureSettingsForFailAttempt:]
  -[SBDashBoardMesaUnlockBehavior setBiometricUnlockBehaviorDelegate:]
  -[SBDashBoardMesaUnlockBehavior handleBiometricEvent:]
  -[SBDashBoardMesaUnlockBehavior .cxx_destruct]
  -[SBDashBoardMesaUnlockBehavior initWithMesaSettings:andUnlockTrigger:]
  -[SBDashBoardMesaUnlockBehavior succinctDescriptionBuilder]
  -[SBDashBoardMesaUnlockBehavior descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardMesaUnlockBehavior descriptionWithMultilinePrefix:]
  -[SBDashBoardMesaUnlockBehavior _setTrigger:]
  -[SBDashBoardMesaUnlockBehavior _mesaSettings]
  -[SBDashBoardMesaUnlockBehavior biometricUnlockBehaviorDelegate]
  -[SBDashBoardMesaUnlockBehavior succinctDescription]
  -[SBDashBoardMesaUnlockBehavior menuButtonDown]
  -[SBDashBoardMesaUnlockBehavior _homeHardwareButton]
  -[SBDashBoardMesaUnlockBehavior _feedbackForBioUnlockEventThatWasSpontaneous:]
  -[SBDashBoardMesaUnlockBehavior _setHomeHardwareButton:]
  -[SBDashBoardMesaUnlockBehavior _trigger]
  -[SBDashBoardMesaUnlockBehavior lockButtonDown]
  -[SBDashBoardMesaUnlockBehavior menuButtonUp]
  -[SBDashBoardMesaUnlockBehavior _feedbackForPasscodeEvent]
  -[SBDashBoardMesaUnlockBehavior _feedbackForFailureSettings:]
  -[SBDashBoardMesaUnlockBehavior _handleMesaFailure]


SBAppExposeGridSwitcherModifier : SBSwitcherModifier
 @property  BOOL disableFullScreenCardScaleRounding
 @property  NSString *bundleIdentifier
 @property  {CGSize=dd} fullScreenCardSize
 @property  {CGSize=dd} floatingCardSize
 @property  BOOL reversesFloatingCardDirection

  // instance methods
  -[SBAppExposeGridSwitcherModifier plusButtonAlpha]
  -[SBAppExposeGridSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBAppExposeGridSwitcherModifier plusButtonStyle]
  -[SBAppExposeGridSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[SBAppExposeGridSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBAppExposeGridSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBAppExposeGridSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBAppExposeGridSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBAppExposeGridSwitcherModifier bundleIdentifier]
  -[SBAppExposeGridSwitcherModifier handleTransitionEvent:]
  -[SBAppExposeGridSwitcherModifier .cxx_destruct]
  -[SBAppExposeGridSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBAppExposeGridSwitcherModifier handleTimerEvent:]
  -[SBAppExposeGridSwitcherModifier didMoveToParentModifier:]
  -[SBAppExposeGridSwitcherModifier handleRemovalEvent:]
  -[SBAppExposeGridSwitcherModifier _updateReopenClosedWindowsButtonPresence]
  -[SBAppExposeGridSwitcherModifier copyWithZone:]
  -[SBAppExposeGridSwitcherModifier handleInsertionEvent:]
  -[SBAppExposeGridSwitcherModifier initWithBundleIdentifier:fullScreenCardSize:floatingCardSize:]
  -[SBAppExposeGridSwitcherModifier reversesFloatingCardDirection]
  -[SBAppExposeGridSwitcherModifier floatingCardSize]
  -[SBAppExposeGridSwitcherModifier disableFullScreenCardScaleRounding]
  -[SBAppExposeGridSwitcherModifier fullScreenCardSize]
  -[SBAppExposeGridSwitcherModifier setReversesFloatingCardDirection:]
  -[SBAppExposeGridSwitcherModifier setDisableFullScreenCardScaleRounding:]
  -[SBAppExposeGridSwitcherModifier _canShowReopenClosedWindowsButton]


SBSimScrollToIconTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSimScrollToIconTestRecipe load]

  // instance methods
  -[SBSimScrollToIconTestRecipe title]
  -[SBSimScrollToIconTestRecipe handleVolumeIncrease]
  -[SBSimScrollToIconTestRecipe handleVolumeDecrease]
  -[SBSimScrollToIconTestRecipe _simulateScrollToIconWithDisplayIdentifier:]


SBSceneManagerCoordinator : NSObject <FBSceneManagerDelegate_Private, FBSceneManagerObserver, FBSceneDelegate, FBProcessManagerObserver, FBWorkspaceDelegate, FBSDisplayObserving, SBSceneManagerReferenceDelegate>
 @property  UIApplicationSceneDeactivationManager *sceneDeactivationManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSceneManagerCoordinator sharedInstance]
  +[SBSceneManagerCoordinator secureMainDisplaySceneManager]
  +[SBSceneManagerCoordinator mainDisplaySceneManager]

  // instance methods
  -[SBSceneManagerCoordinator processManager:didAddProcess:]
  -[SBSceneManagerCoordinator registerSceneWorkspaceIdentifierToIgnore:]
  -[SBSceneManagerCoordinator scene:didPrepareUpdateWithContext:]
  -[SBSceneManagerCoordinator sceneDeactivationManager]
  -[SBSceneManagerCoordinator processManager:didRemoveProcess:]
  -[SBSceneManagerCoordinator displayMonitor:willDisconnectIdentity:]
  -[SBSceneManagerCoordinator displayMonitor:didConnectIdentity:withConfiguration:]
  -[SBSceneManagerCoordinator sceneManager:scene:didReceiveActions:]
  -[SBSceneManagerCoordinator sceneManager:clientDidConnectWithHandshake:]
  -[SBSceneManagerCoordinator .cxx_destruct]
  -[SBSceneManagerCoordinator scene:didCompleteUpdateWithContext:error:]
  -[SBSceneManagerCoordinator scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBSceneManagerCoordinator sceneManager:didCreateScene:]
  -[SBSceneManagerCoordinator scene:didReceiveActions:]
  -[SBSceneManagerCoordinator _referenceForDisplayIdentity:creatingIfNecessary:]
  -[SBSceneManagerCoordinator init]
  -[SBSceneManagerCoordinator workspace:didReceiveSceneRequestWithOptions:completion:]
  -[SBSceneManagerCoordinator scene:didApplyUpdateWithContext:]
  -[SBSceneManagerCoordinator sceneManagerDidInvalidateForReference:]
  -[SBSceneManagerCoordinator sceneManager:didDestroyScene:]
  -[SBSceneManagerCoordinator sceneManagerForDisplayIdentity:]
  -[SBSceneManagerCoordinator sceneManager:createDefaultTransitionContextForScene:]
  -[SBSceneManagerCoordinator dealloc]
  -[SBSceneManagerCoordinator sceneManager:willDestroyScene:]
  -[SBSceneManagerCoordinator _sceneManagerForDisplayIdentity:creatingIfNecessary:]
  -[SBSceneManagerCoordinator enumerateSceneManagersWithBlock:]
  -[SBSceneManagerCoordinator sceneManager:interceptUpdateForScene:withNewSettings:]


SBInvalidateItemContainerBackdropEventResponse : SBSwitcherModifierEventResponse
 @property  long long updateMode

  // instance methods
  -[SBInvalidateItemContainerBackdropEventResponse updateMode]
  -[SBInvalidateItemContainerBackdropEventResponse type]
  -[SBInvalidateItemContainerBackdropEventResponse initWithUpdateMode:]


_SBSynchronizeOperation : NSOperation
 @property  NSString *humanReadableDescription

  // instance methods
  -[_SBSynchronizeOperation main]
  -[_SBSynchronizeOperation .cxx_destruct]
  -[_SBSynchronizeOperation init]
  -[_SBSynchronizeOperation addTask:]
  -[_SBSynchronizeOperation humanReadableDescription]
  -[_SBSynchronizeOperation setHumanReadableDescription:]


SBIPhotoLaunchDeniedAlertItem : SBAlertItem
 @property  BOOL offersMigration

  // instance methods
  -[SBIPhotoLaunchDeniedAlertItem dismissOnLock]
  -[SBIPhotoLaunchDeniedAlertItem configure:requirePasscodeForActions:]
  -[SBIPhotoLaunchDeniedAlertItem setOffersMigration:]
  -[SBIPhotoLaunchDeniedAlertItem ignoreIfAlreadyDisplaying]
  -[SBIPhotoLaunchDeniedAlertItem offersMigration]


SBActivationSettings : NSObject <BSSettingDescriptionProvider, SBActivationSettings, NSCopying, BSDescriptionProviding>
 @property  BOOL empty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBActivationSettings valueDescriptionForFlag:object:ofSetting:]
  -[SBActivationSettings clearActivationSettings]
  -[SBActivationSettings setObject:forActivationSetting:]
  -[SBActivationSettings setFlag:forActivationSetting:]
  -[SBActivationSettings isEmpty]
  -[SBActivationSettings copyActivationSettings]
  -[SBActivationSettings .cxx_destruct]
  -[SBActivationSettings keyDescriptionForSetting:]
  -[SBActivationSettings succinctDescriptionBuilder]
  -[SBActivationSettings objectForActivationSetting:]
  -[SBActivationSettings descriptionBuilderWithMultilinePrefix:]
  -[SBActivationSettings init]
  -[SBActivationSettings boolForActivationSetting:]
  -[SBActivationSettings isEqual:]
  -[SBActivationSettings descriptionWithMultilinePrefix:]
  -[SBActivationSettings flagForActivationSetting:]
  -[SBActivationSettings succinctDescription]
  -[SBActivationSettings applyActivationSettings:]
  -[SBActivationSettings dealloc]
  -[SBActivationSettings copyWithZone:]
  -[SBActivationSettings _settingsAreValidToMoveContentToNewScene]
  -[SBActivationSettings copyActivationSettingsPassingFilter:]


SBCarDoNotDisturbController : NSObject <CSExternalLockProviding, CSExternalEventHandling, CSExternalBehaviorProviding>
 @property  BOOL locked
 @property  BOOL showPasscode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode

  // instance methods
  -[SBCarDoNotDisturbController coverSheetIdentifier]
  -[SBCarDoNotDisturbController conformsToCSBehaviorProviding]
  -[SBCarDoNotDisturbController conformsToCSExternalBehaviorProviding]
  -[SBCarDoNotDisturbController .cxx_destruct]
  -[SBCarDoNotDisturbController wouldHandleButtonEvent:]
  -[SBCarDoNotDisturbController _queue_setExitConfirmationRequired:]
  -[SBCarDoNotDisturbController _queue_setScreenOn:]
  -[SBCarDoNotDisturbController participantState]
  -[SBCarDoNotDisturbController init]
  -[SBCarDoNotDisturbController isLocked]
  -[SBCarDoNotDisturbController _setScreenOn:]
  -[SBCarDoNotDisturbController showPasscode]
  -[SBCarDoNotDisturbController initWithCARAutomaticDNDStatus:lockScreenManager:]
  -[SBCarDoNotDisturbController unlockFromSource:]
  -[SBCarDoNotDisturbController handleEvent:]
  -[SBCarDoNotDisturbController _dismissAlertItemsAnimated:]
  -[SBCarDoNotDisturbController restrictedCapabilities]
  -[SBCarDoNotDisturbController proximityDetectionMode]
  -[SBCarDoNotDisturbController dealloc]
  -[SBCarDoNotDisturbController scrollingStrategy]
  -[SBCarDoNotDisturbController _hasShownSiriHeaderViewControllerDuringCurrentCarDNDSession]
  -[SBCarDoNotDisturbController conformsToCSEventHandling]
  -[SBCarDoNotDisturbController _setHasShownSiriHeaderViewControllerDuringCurrentCarDNDSession:]
  -[SBCarDoNotDisturbController _isExitConfirmationRequired]
  -[SBCarDoNotDisturbController notificationBehavior]


_SBMainScreenScreenshotProvider : _SBDefaultScreenshotProvider
  // instance methods
  -[_SBMainScreenScreenshotProvider flasher]
  -[_SBMainScreenScreenshotProvider captureScreenshot]


SBDashBoardWallpaperEffectView : SBWallpaperEffectView <CSWallpaperView>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardWallpaperEffectView initWithWallpaperVariant:transformOptions:]
  -[SBDashBoardWallpaperEffectView didAddSubview:]
  -[SBDashBoardWallpaperEffectView setBackgroundStyle:]
  -[SBDashBoardWallpaperEffectView .cxx_destruct]
  -[SBDashBoardWallpaperEffectView layoutSubviews]
  -[SBDashBoardWallpaperEffectView setCoverSheetWallpaperStyle:]


SBDeckFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBDeckFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBDeckFloatingSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[SBDeckFloatingSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBDeckFloatingSwitcherModifier visibleShelves]
  -[SBDeckFloatingSwitcherModifier backgroundOpacityForIndex:]
  -[SBDeckFloatingSwitcherModifier isContainerStatusBarVisible]
  -[SBDeckFloatingSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBDeckFloatingSwitcherModifier plusButtonAlpha]
  -[SBDeckFloatingSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBDeckFloatingSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[SBDeckFloatingSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBDeckFloatingSwitcherModifier homeScreenDimmingAlpha]
  -[SBDeckFloatingSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[SBDeckFloatingSwitcherModifier dockWindowLevel]
  -[SBDeckFloatingSwitcherModifier wantsDockBehaviorAssertion]
  -[SBDeckFloatingSwitcherModifier slideOverTongueDirection]
  -[SBDeckFloatingSwitcherModifier homeScreenBackdropBlurType]
  -[SBDeckFloatingSwitcherModifier frameForShelf:]
  -[SBDeckFloatingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBDeckFloatingSwitcherModifier isHomeAffordanceSupportedForAppLayout:]
  -[SBDeckFloatingSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBDeckFloatingSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBDeckFloatingSwitcherModifier plusButtonStyle]
  -[SBDeckFloatingSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[SBDeckFloatingSwitcherModifier titleOpacityForIndex:]
  -[SBDeckFloatingSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBDeckFloatingSwitcherModifier shouldScrollViewBlockTouches]
  -[SBDeckFloatingSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[SBDeckFloatingSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBDeckFloatingSwitcherModifier wallpaperScale]
  -[SBDeckFloatingSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[SBDeckFloatingSwitcherModifier wantsSlideOverTongue]
  -[SBDeckFloatingSwitcherModifier rotationAngleForIndex:]
  -[SBDeckFloatingSwitcherModifier slideOverTongueState]
  -[SBDeckFloatingSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBDeckFloatingSwitcherModifier homeScreenScale]
  -[SBDeckFloatingSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[SBDeckFloatingSwitcherModifier homeScreenAlpha]
  -[SBDeckFloatingSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBDeckFloatingSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBDeckFloatingSwitcherModifier switcherBackdropBlurProgress]
  -[SBDeckFloatingSwitcherModifier shelfBackgroundBlurOpacity]
  -[SBDeckFloatingSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBDeckFloatingSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBDeckFloatingSwitcherModifier transactionCompletionOptions]
  -[SBDeckFloatingSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[SBDeckFloatingSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBDeckFloatingSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBDeckFloatingSwitcherModifier shelfBackgroundBlurFrame]
  -[SBDeckFloatingSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBDeckFloatingSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBDeckFloatingSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[SBDeckFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBDeckFloatingSwitcherModifier wantsSwitcherDimmingView]
  -[SBDeckFloatingSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBDeckFloatingSwitcherModifier dockProgress]
  -[SBDeckFloatingSwitcherModifier shadowOffsetForIndex:]
  -[SBDeckFloatingSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[SBDeckFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBDeckFloatingSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBDeckFloatingSwitcherModifier clippingFrameForIndex:]
  -[SBDeckFloatingSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[SBDeckFloatingSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBDeckFloatingSwitcherModifier lighteningAlphaForIndex:]
  -[SBDeckFloatingSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBDeckFloatingSwitcherModifier isScrollEnabled]
  -[SBDeckFloatingSwitcherModifier isHomeScreenContentRequired]
  -[SBDeckFloatingSwitcherModifier dockWindowLevelPriority]
  -[SBDeckFloatingSwitcherModifier containerLeafAppLayoutForShelf:]
  -[SBDeckFloatingSwitcherModifier headerStyleForIndex:]
  -[SBDeckFloatingSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[SBDeckFloatingSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBDeckFloatingSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[SBDeckFloatingSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBDeckFloatingSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBDeckFloatingSwitcherModifier _isIndexVisible:]
  -[SBDeckFloatingSwitcherModifier neighboringAppLayoutsForFocusedAppLayout:]
  -[SBDeckFloatingSwitcherModifier containerStatusBarAnimationDuration]
  -[SBDeckFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDeckFloatingSwitcherModifier isFocusEnabledForAppLayout:]
  -[SBDeckFloatingSwitcherModifier switcherBackdropBlurType]
  -[SBDeckFloatingSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[SBDeckFloatingSwitcherModifier switcherDimmingViewBlocksTouches]
  -[SBDeckFloatingSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBDeckFloatingSwitcherModifier scaleForIndex:]
  -[SBDeckFloatingSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBDeckFloatingSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBDeckFloatingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBDeckFloatingSwitcherModifier _indexForContentOffset:]
  -[SBDeckFloatingSwitcherModifier handleTransitionEvent:]
  -[SBDeckFloatingSwitcherModifier isIndexRubberbandableForSwipeToKill:]
  -[SBDeckFloatingSwitcherModifier handleTapAppLayoutEvent:]
  -[SBDeckFloatingSwitcherModifier switcherDimmingAlpha]
  -[SBDeckFloatingSwitcherModifier dockUpdateMode]
  -[SBDeckFloatingSwitcherModifier frameForIndex:]
  -[SBDeckFloatingSwitcherModifier tintStyleForLayoutRole:inAppLayout:]
  -[SBDeckFloatingSwitcherModifier wantsHomeScreenPointerInteractions]
  -[SBDeckFloatingSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBDeckFloatingSwitcherModifier blurViewIconScaleForIndex:]
  -[SBDeckFloatingSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBDeckFloatingSwitcherModifier visibleAppLayouts]
  -[SBDeckFloatingSwitcherModifier scrollViewAttributes]
  -[SBDeckFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBDeckFloatingSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBDeckFloatingSwitcherModifier isSwitcherWindowVisible]
  -[SBDeckFloatingSwitcherModifier minimumTranslationToKillIndex:]
  -[SBDeckFloatingSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBDeckFloatingSwitcherModifier contentViewScale]
  -[SBDeckFloatingSwitcherModifier wallpaperStyle]
  -[SBDeckFloatingSwitcherModifier cornerRadiiForIndex:]
  -[SBDeckFloatingSwitcherModifier init]
  -[SBDeckFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBDeckFloatingSwitcherModifier _cardCornerRadiusInSwitcher]
  -[SBDeckFloatingSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBDeckFloatingSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBDeckFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBDeckFloatingSwitcherModifier didMoveToParentModifier:]
  -[SBDeckFloatingSwitcherModifier topMostLayoutElements]
  -[SBDeckFloatingSwitcherModifier _contentSize]
  -[SBDeckFloatingSwitcherModifier resetAdjustedScrollingState]
  -[SBDeckFloatingSwitcherModifier handleTapOutsideToDismissEvent:]
  -[SBDeckFloatingSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBDeckFloatingSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBDeckFloatingSwitcherModifier handleRemovalEvent:]
  -[SBDeckFloatingSwitcherModifier _applyPrototypeSettings]
  -[SBDeckFloatingSwitcherModifier snapshotScaleForAppLayout:]
  -[SBDeckFloatingSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBDeckFloatingSwitcherModifier handleScrollEvent:]
  -[SBDeckFloatingSwitcherModifier _numberOfItems]
  -[SBDeckFloatingSwitcherModifier _visibleAppLayoutRangeForContentOffset:]
  -[SBDeckFloatingSwitcherModifier _contentInsetsWithContainerViewBounds:switcherViewBounds:]
  -[SBDeckFloatingSwitcherModifier _contentSizeWithWithCardSize:contentInsets:switcherViewBounds:numberOfItems:]
  -[SBDeckFloatingSwitcherModifier _adjustedIndexForScaleForIndex:withCardSize:contentOffset:contentSize:contentInsets:switcherViewBounds:]
  -[SBDeckFloatingSwitcherModifier _scaleForScaleAdjustedIndex:]
  -[SBDeckFloatingSwitcherModifier _frameForIndex:withCardSize:scale:adjustedIndexForScale:contentOffset:contentSize:contentInsets:switcherViewBounds:]
  -[SBDeckFloatingSwitcherModifier _frameWithScaleAppliedForIndex:withCardSize:contentOffset:contentSize:contentInsets:switcherViewBounds:]
  -[SBDeckFloatingSwitcherModifier _distanceFromPreviousCardForCardAtIndex:]


SBFluidScrunchGestureRecognizer : SBTouchTemplateGestureRecognizer <SBGestureRecognizerTouchHistoryProviding, SBGestureRecognizerPanGestureProviding>
 @property  {CGPoint=dd} absoluteTranslation
 @property  double absoluteScale
 @property  {CGPoint=dd} additionalTranslationDueToChangingAnchorPoints
 @property  double lastPerimeter
 @property  {CGPoint=dd} initialCentroid
 @property  SBTouchHistory *touchHistory
 @property  {CGPoint=dd} centroid
 @property  long long recognizedTouchType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFluidScrunchGestureRecognizer _scrunchTemplatesForTouchType:]
  +[SBFluidScrunchGestureRecognizer _panTemplatesForTouchType:]

  // instance methods
  -[SBFluidScrunchGestureRecognizer _setMatchedPolygon:]
  -[SBFluidScrunchGestureRecognizer centroid]
  -[SBFluidScrunchGestureRecognizer velocityInView:]
  -[SBFluidScrunchGestureRecognizer setTouchHistory:]
  -[SBFluidScrunchGestureRecognizer absoluteTranslation]
  -[SBFluidScrunchGestureRecognizer setAllowedTouchTypes:]
  -[SBFluidScrunchGestureRecognizer initialCentroid]
  -[SBFluidScrunchGestureRecognizer _gestureView]
  -[SBFluidScrunchGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBFluidScrunchGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBFluidScrunchGestureRecognizer peakSpeed]
  -[SBFluidScrunchGestureRecognizer setAdditionalTranslationDueToChangingAnchorPoints:]
  -[SBFluidScrunchGestureRecognizer .cxx_destruct]
  -[SBFluidScrunchGestureRecognizer recognizedTouchType]
  -[SBFluidScrunchGestureRecognizer touchHistory]
  -[SBFluidScrunchGestureRecognizer translationInView:]
  -[SBFluidScrunchGestureRecognizer initWithTarget:action:]
  -[SBFluidScrunchGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBFluidScrunchGestureRecognizer touchesBegan:withEvent:]
  -[SBFluidScrunchGestureRecognizer _isMatchedTemplateScrunchTemplate]
  -[SBFluidScrunchGestureRecognizer setState:]
  -[SBFluidScrunchGestureRecognizer animationDistance]
  -[SBFluidScrunchGestureRecognizer _hysteresis]
  -[SBFluidScrunchGestureRecognizer setInitialCentroid:]
  -[SBFluidScrunchGestureRecognizer touchesMoved:withEvent:]
  -[SBFluidScrunchGestureRecognizer reset]
  -[SBFluidScrunchGestureRecognizer _computeGestureMotionWithTouches:polygon:]
  -[SBFluidScrunchGestureRecognizer touchesCancelled:withEvent:]
  -[SBFluidScrunchGestureRecognizer _installTemplates]
  -[SBFluidScrunchGestureRecognizer setLastPerimeter:]
  -[SBFluidScrunchGestureRecognizer _updateRecognizedTouchTypeIfNecessaryWithTouches:]
  -[SBFluidScrunchGestureRecognizer _centroidInGestureViewForPolygon:]
  -[SBFluidScrunchGestureRecognizer logCategory]
  -[SBFluidScrunchGestureRecognizer locationInView:]
  -[SBFluidScrunchGestureRecognizer setAbsoluteScale:]
  -[SBFluidScrunchGestureRecognizer absoluteScale]
  -[SBFluidScrunchGestureRecognizer incrementalGestureMotionForCandidate:withTransformAnalyzerInfo:]
  -[SBFluidScrunchGestureRecognizer _shouldAddNewTouchesAfterGestureRecognition]
  -[SBFluidScrunchGestureRecognizer additionalTranslationDueToChangingAnchorPoints]
  -[SBFluidScrunchGestureRecognizer setAbsoluteTranslation:]
  -[SBFluidScrunchGestureRecognizer lastPerimeter]
  -[SBFluidScrunchGestureRecognizer translationWithoutConsideringScaleInView:]
  -[SBFluidScrunchGestureRecognizer touchesEnded:withEvent:]


SBAppStatusBarTransitionInfo : NSObject
 @property  UIStatusBarStyleRequest *startStyleRequest
 @property  long long startOrientation
 @property  UIStatusBarStyleRequest *endStyleRequest
 @property  long long endOrientation
 @property  int transition
 @property  BOOL zoomOther

  // instance methods
  -[SBAppStatusBarTransitionInfo transition]
  -[SBAppStatusBarTransitionInfo setTransition:]
  -[SBAppStatusBarTransitionInfo .cxx_destruct]
  -[SBAppStatusBarTransitionInfo startStyleRequest]
  -[SBAppStatusBarTransitionInfo setStartStyleRequest:]
  -[SBAppStatusBarTransitionInfo startOrientation]
  -[SBAppStatusBarTransitionInfo setStartOrientation:]
  -[SBAppStatusBarTransitionInfo endStyleRequest]
  -[SBAppStatusBarTransitionInfo setEndStyleRequest:]
  -[SBAppStatusBarTransitionInfo endOrientation]
  -[SBAppStatusBarTransitionInfo setEndOrientation:]
  -[SBAppStatusBarTransitionInfo zoomOther]
  -[SBAppStatusBarTransitionInfo setZoomOther:]


SBDesiredIconStateMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDesiredIconStateMetric handleEvent:withContext:]
  -[SBDesiredIconStateMetric .cxx_destruct]
  -[SBDesiredIconStateMetric init]


SBCancelableBlockOperation : NSOperation
  // instance methods
  -[SBCancelableBlockOperation main]
  -[SBCancelableBlockOperation .cxx_destruct]
  -[SBCancelableBlockOperation addBlock:]
  -[SBCancelableBlockOperation init]


SBDisableSystemGestureAssertion : BSSimpleAssertion
 @property  NSSet *exceptions

  // instance methods
  -[SBDisableSystemGestureAssertion exceptions]
  -[SBDisableSystemGestureAssertion .cxx_destruct]
  -[SBDisableSystemGestureAssertion setExceptions:]


SBStylusPriorityGestureRecognizer : UIGestureRecognizer
  // instance methods
  -[SBStylusPriorityGestureRecognizer touchesBegan:withEvent:]
  -[SBStylusPriorityGestureRecognizer touchesCancelled:withEvent:]
  -[SBStylusPriorityGestureRecognizer touchesEnded:withEvent:]


SBSystemGestureManager : NSObject <UIGestureRecognizerDelegate, BSDescriptionProviding>
 @property  BOOL anyTouchGestureRunning
 @property  BOOL systemGesturesDisabledForAccessibility
 @property  NSSet *gesturesPreventedByStylus
 @property  SBIndirectTouchLifecycleMonitor *indirectTouchLifecycleMonitor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSystemGestureManager mainDisplayManager]

  // instance methods
  -[SBSystemGestureManager _shouldEnableSystemGestureWithType:]
  -[SBSystemGestureManager gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBSystemGestureManager removeGestureRecognizer:]
  -[SBSystemGestureManager .cxx_destruct]
  -[SBSystemGestureManager succinctDescriptionBuilder]
  -[SBSystemGestureManager _evaluateEnablement]
  -[SBSystemGestureManager windowForSystemGestures]
  -[SBSystemGestureManager gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:]
  -[SBSystemGestureManager addGestureRecognizer:withType:]
  -[SBSystemGestureManager descriptionBuilderWithMultilinePrefix:]
  -[SBSystemGestureManager init]
  -[SBSystemGestureManager descriptionWithMultilinePrefix:]
  -[SBSystemGestureManager _initWithDisplayIdentity:]
  -[SBSystemGestureManager succinctDescription]
  -[SBSystemGestureManager dealloc]
  -[SBSystemGestureManager _isTouchGestureWithType:]
  -[SBSystemGestureManager setSystemGesturesDisabledForAccessibility:]
  -[SBSystemGestureManager _isGestureWithTypeAllowed:]
  -[SBSystemGestureManager areSystemGesturesDisabledForAccessibility]
  -[SBSystemGestureManager isAnyTouchGestureRunning]
  -[SBSystemGestureManager ignoreScreenEdgeTouchWithIdentifier:]
  -[SBSystemGestureManager isGestureWithTypeAllowed:]
  -[SBSystemGestureManager gestureRecognizerOfType:shouldBeRequiredToFailByGestureRecognizer:]
  -[SBSystemGestureManager indirectTouchLifecycleMonitor]
  -[SBSystemGestureManager gestureRecognizerOfType:shouldRequireFailureOfGestureRecognizer:]
  -[SBSystemGestureManager _disableSystemGesture:withType:]
  -[SBSystemGestureManager shouldEnableSystemGestureWithType:]
  -[SBSystemGestureManager _enableSystemGesture:withType:]
  -[SBSystemGestureManager _systemGestureChanged:]
  -[SBSystemGestureManager _recognitionEventForTouchGestureType:]
  -[SBSystemGestureManager setGesturesPreventedByStylus:]
  -[SBSystemGestureManager acquireSystemGestureDisableAssertionForReason:exceptSystemGestureTypes:]
  -[SBSystemGestureManager gesturesPreventedByStylus]
  -[SBSystemGestureManager setIndirectTouchLifecycleMonitor:]


SBSystemNotesContentViewController : UIViewController <SBPIPWindowOrientationObserver, SBWorkspaceApplicationSceneTransitionContextDelegate, SBSystemPointerInteractionDelegate, SBTransientUITapToDismissParticipant, SBDeviceApplicationSceneHandleObserver, SBPIPSceneContentProviding>
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  SBSSystemNotesPresentationConfiguration *currentConfiguration
 @property  long long presentationMode
 @property  NSString *bundleIdentifier
 @property  <SBSystemNotesContentViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemNotesContentViewController presentationMode]
  -[SBSystemNotesContentViewController setPresentationMode:]
  -[SBSystemNotesContentViewController layoutStateForApplicationTransitionContext:]
  -[SBSystemNotesContentViewController applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBSystemNotesContentViewController preferredContentSize]
  -[SBSystemNotesContentViewController viewWillLayoutSubviews]
  -[SBSystemNotesContentViewController bundleIdentifier]
  -[SBSystemNotesContentViewController sceneHandle]
  -[SBSystemNotesContentViewController styleForRegion:forView:]
  -[SBSystemNotesContentViewController .cxx_destruct]
  -[SBSystemNotesContentViewController shouldBeginPointerInteractionAtLocation:forView:]
  -[SBSystemNotesContentViewController viewDidLoad]
  -[SBSystemNotesContentViewController contentView]
  -[SBSystemNotesContentViewController setDelegate:]
  -[SBSystemNotesContentViewController viewDidAppear:]
  -[SBSystemNotesContentViewController shouldAutorotate]
  -[SBSystemNotesContentViewController _containerViewController]
  -[SBSystemNotesContentViewController pointerInteractionHitTestInsetsForView:]
  -[SBSystemNotesContentViewController _currentInterfaceOrientation]
  -[SBSystemNotesContentViewController viewWillDisappear:]
  -[SBSystemNotesContentViewController viewWillAppear:]
  -[SBSystemNotesContentViewController currentConfiguration]
  -[SBSystemNotesContentViewController previousLayoutStateForApplicationTransitionContext:]
  -[SBSystemNotesContentViewController delegate]
  -[SBSystemNotesContentViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBSystemNotesContentViewController sceneHandle:didDestroyScene:]
  -[SBSystemNotesContentViewController dealloc]
  -[SBSystemNotesContentViewController viewDidDisappear:]
  -[SBSystemNotesContentViewController transientUIHandledTouch:withSystemGestureRecognizer:]
  -[SBSystemNotesContentViewController updateConfiguration:sendCreateActionIfNecessary:]
  -[SBSystemNotesContentViewController initWithSceneHandle:workspace:transientUIInteractionManager:systemPointerInteractionManager:notesInteractionSettings:presentationContext:]
  -[SBSystemNotesContentViewController containerViewController:shouldHandleStashingForTransitionContext:]
  -[SBSystemNotesContentViewController containerViewControllerWillBeginSizeChange:behavior:]
  -[SBSystemNotesContentViewController containerViewControllerDidEndSizeChange:]
  -[SBSystemNotesContentViewController containerViewController:didSettleOnStashState:]
  -[SBSystemNotesContentViewController containerViewControllerDidEndInteraction:]
  -[SBSystemNotesContentViewController _handleThumbnailTapGesture:]
  -[SBSystemNotesContentViewController _updateForegroundStatus:]
  -[SBSystemNotesContentViewController _thumbnailViewForUserActivity:]
  -[SBSystemNotesContentViewController _imageFromUserActivity:presentationMode:]
  -[SBSystemNotesContentViewController _sendActionForUpdatedConfiguration:sendCreateIfNecessary:]
  -[SBSystemNotesContentViewController _updateSceneFrameWithOrientation:completion:]
  -[SBSystemNotesContentViewController _setBlurred:]
  -[SBSystemNotesContentViewController _setPreferredSceneContentSize:]
  -[SBSystemNotesContentViewController _sceneFrameForOrientation:]
  -[SBSystemNotesContentViewController _hitTestTouch:gestureRecognizer:]
  -[SBSystemNotesContentViewController window:activeInterfaceOrientationWillChangeToOrientation:]
  -[SBSystemNotesContentViewController window:activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]


SBCoverSheetToAppsWorkspaceTransaction : SBToAppsWorkspaceTransaction
 @property  BOOL preservesBanners

  // instance methods
  -[SBCoverSheetToAppsWorkspaceTransaction _didComplete]
  -[SBCoverSheetToAppsWorkspaceTransaction _begin]
  -[SBCoverSheetToAppsWorkspaceTransaction _dismissOverlaysOptions]
  -[SBCoverSheetToAppsWorkspaceTransaction _autoPIPIfNeeded]
  -[SBCoverSheetToAppsWorkspaceTransaction setPreservesBanners:]
  -[SBCoverSheetToAppsWorkspaceTransaction .cxx_destruct]
  -[SBCoverSheetToAppsWorkspaceTransaction initWithTransitionRequest:]
  -[SBCoverSheetToAppsWorkspaceTransaction preservesBanners]
  -[SBCoverSheetToAppsWorkspaceTransaction dealloc]
  -[SBCoverSheetToAppsWorkspaceTransaction _dismissOverlaysIfNeeded]


SBWallpaperServer : FBSServiceFacility
 @property  <SBWallpaperServerDelegate> *delegate
 @property  FBServiceClientAuthenticator *accessAuthenticator

  // class methods
  +[SBWallpaperServer sharedInstance]

  // instance methods
  -[SBWallpaperServer _xpcObjectIsDictionary:]
  -[SBWallpaperServer _clientPermittedToModifyWallpaper:]
  -[SBWallpaperServer _handleFetchOriginalVideoURLMessage:fromClient:]
  -[SBWallpaperServer .cxx_destruct]
  -[SBWallpaperServer _handleSetColorMessage:fromClient:]
  -[SBWallpaperServer _handleFetchContentCutoutBoundsMessage:fromClient:]
  -[SBWallpaperServer accessAuthenticator]
  -[SBWallpaperServer setDelegate:]
  -[SBWallpaperServer _wallpaperModeFromXPCDictionary:]
  -[SBWallpaperServer noteDidReceiveMessage:withType:fromClient:]
  -[SBWallpaperServer _wallpaperVariantFromXPCDictionary:]
  -[SBWallpaperServer _handleSetColorNameMessage:fromClient:]
  -[SBWallpaperServer _handleSetVideoMessageWithWallpaperMode:fromClient:]
  -[SBWallpaperServer _handleSetGradientMessage:fromClient:]
  -[SBWallpaperServer delegate]
  -[SBWallpaperServer _handleRestoreDefaultWallpaperMessage:fromClient:]
  -[SBWallpaperServer _deviceOrientationFromXPCDictionary:]
  -[SBWallpaperServer _init]
  -[SBWallpaperServer _handleAcquireActiveWallpaperSceneAssertionMessage:fromClient:]
  -[SBWallpaperServer _handleFetchOriginalImageMessage:fromClient:]
  -[SBWallpaperServer setAccessAuthenticator:]
  -[SBWallpaperServer _handleFetchThumbnailMessage:fromClient:]


SBLowPowerFindMyAlertItem : SBAlertItem
 @property  SPBeaconManager *beaconManager

  // class methods
  +[SBLowPowerFindMyAlertItem showFindMyAlert]
  +[SBLowPowerFindMyAlertItem _readSupportsFindMy:]

  // instance methods
  -[SBLowPowerFindMyAlertItem setBeaconManager:]
  -[SBLowPowerFindMyAlertItem .cxx_destruct]
  -[SBLowPowerFindMyAlertItem beaconManager]
  -[SBLowPowerFindMyAlertItem shouldShowInLockScreen]
  -[SBLowPowerFindMyAlertItem wakeDisplay]
  -[SBLowPowerFindMyAlertItem configure:requirePasscodeForActions:]


SBCameraApplication : SBApplication
 @property  BOOL hasPreHeatInFlight

  // instance methods
  -[SBCameraApplication icon:launchFromLocation:context:]
  -[SBCameraApplication _cancelPreheatForUserLaunchIfNecessary]
  -[SBCameraApplication hasPreHeatInFlight]
  -[SBCameraApplication setHasPreHeatInFlight:]
  -[SBCameraApplication preHeatForUserLaunchIfNecessaryWithAbsoluteTime:andContinuousTime:]


_SBKeyboardFocusRedirection : NSObject
  // instance methods
  -[_SBKeyboardFocusRedirection .cxx_destruct]


SBWorkspaceKeyboardFocusController : NSObject <_UIKeyboardArbiterOmniscientDelegate, SBSceneManagerObserver, _UIEventDeferringSystemShellBehaviorDelegate>
 @property  unsigned long userFocusRequestGeneration
 @property  FBScene *externalSceneWithFocus
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWorkspaceKeyboardFocusController new]

  // instance methods
  -[SBWorkspaceKeyboardFocusController _filterFocusedSceneIdentityToken:focusedPID:resultBlock:]
  -[SBWorkspaceKeyboardFocusController preventFocusForSceneWithIdentityToken:reason:]
  -[SBWorkspaceKeyboardFocusController updateKeyboardFocusDeferringRules]
  -[SBWorkspaceKeyboardFocusController _setKeyboardFocusPolicy:]
  -[SBWorkspaceKeyboardFocusController .cxx_destruct]
  -[SBWorkspaceKeyboardFocusController lockFocusToSpringBoardForReason:]
  -[SBWorkspaceKeyboardFocusController redirectFocusForReason:fromProcessIdentifier:fromDeferringToken:toProcessidentifier:toDeferringToken:]
  -[SBWorkspaceKeyboardFocusController externalSceneWithFocus]
  -[SBWorkspaceKeyboardFocusController eventDeferringManagerSystemShellBehaviorWantsLocalCompatibilityRules]
  -[SBWorkspaceKeyboardFocusController eventDeferringManagerSystemShellBehavior:shouldSuppressRemoteRuleForOwningElement:inEnvironment:]
  -[SBWorkspaceKeyboardFocusController addKeyboardFocusObserver:]
  -[SBWorkspaceKeyboardFocusController init]
  -[SBWorkspaceKeyboardFocusController keyboardArbiterAdvisor:requestedSceneFocusDeliberationForFocusedPid:]
  -[SBWorkspaceKeyboardFocusController sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBWorkspaceKeyboardFocusController presentingKeyboardProcessIdentifier]
  -[SBWorkspaceKeyboardFocusController _updateAccessibilityDeferringRulesUnderstandingSpringBoardIsForeground:]
  -[SBWorkspaceKeyboardFocusController userFocusRequestForScene:reason:]
  -[SBWorkspaceKeyboardFocusController redirectSpringBoardLockFocusForReason:toProcessidentifier:toDeferringToken:]
  -[SBWorkspaceKeyboardFocusController setUserFocusRequestGeneration:]
  -[SBWorkspaceKeyboardFocusController _reevaluatePolicyAndUpdateRulesFromKeyWindowNotification]
  -[SBWorkspaceKeyboardFocusController sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBWorkspaceKeyboardFocusController initWithWorkspace:]
  -[SBWorkspaceKeyboardFocusController _initWithWorkspace:sceneCoordinator:mainDisplaySceneManager:frontBoardSceneManager:installUIKitDependencies:initializeKeyboardArbiter:defaultSpringBoardLayoutSceneIdentityToken:]
  -[SBWorkspaceKeyboardFocusController userFocusRequestGeneration]


SBDeckSwitcherViewController : SBFluidSwitcherViewController <SBSwitcherAppSuggestionViewControllerDelegate>
 @property  SBSwitcherAppSuggestionViewController *appSuggestionController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeckSwitcherViewController viewWillLayoutSubviews]
  -[SBDeckSwitcherViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBDeckSwitcherViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBDeckSwitcherViewController bestAppSuggestion]
  -[SBDeckSwitcherViewController .cxx_destruct]
  -[SBDeckSwitcherViewController performTransitionWithContext:animated:completion:]
  -[SBDeckSwitcherViewController orientationForSuggestionViewController:]
  -[SBDeckSwitcherViewController _setBestAppSuggestion:animationCompletion:]
  -[SBDeckSwitcherViewController setBestAppSuggestion:]
  -[SBDeckSwitcherViewController initWithRootModifier:liveContentOverlayCoordinator:delegate:dataSource:debugName:]
  -[SBDeckSwitcherViewController appSuggestionController]
  -[SBDeckSwitcherViewController setAppSuggestionController:]
  -[SBDeckSwitcherViewController suggestionViewController:activatedSuggestion:]
  -[SBDeckSwitcherViewController handleGestureDidBegin:]


SBSceneBackgroundedStatusAssertion : NSObject
 @property  NSSet *scenes

  // instance methods
  -[SBSceneBackgroundedStatusAssertion .cxx_destruct]
  -[SBSceneBackgroundedStatusAssertion scenes]
  -[SBSceneBackgroundedStatusAssertion dealloc]
  -[SBSceneBackgroundedStatusAssertion invalidate]
  -[SBSceneBackgroundedStatusAssertion initWithScenes:invalidationHandler:]


SBMedusaConfigurationUsageMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMedusaConfigurationUsageMetric _trackMedusaConfigChange]
  -[SBMedusaConfigurationUsageMetric handleEvent:withContext:]
  -[SBMedusaConfigurationUsageMetric .cxx_destruct]
  -[SBMedusaConfigurationUsageMetric init]
  -[SBMedusaConfigurationUsageMetric _floatingAppIsActiveForConfiguration:]


SBMainDisplayWorkspaceAppInteractionEventSource : NSObject <BKSTouchDeliveryObserving, FBSDisplayLayoutPublisherObserving, SBApplicationRestrictionObserver, SBLayoutStateTransitionObserver>
 @property  NSString *currentFocusedBundleID
 @property  BKSTouchDeliveryObservationService *touchDeliveryObservationService
 @property  FBMainDisplayLayoutPublisher *mainDisplayLayoutPublisher
 @property  SBApplicationController *applicationController
 @property  SBApplicationRestrictionController *applicationRestrictionController
 @property  SBFAnalyticsClient *analyticsClient
 @property  SBLayoutStateTransitionCoordinator *layoutStateTransitionCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainDisplayWorkspaceAppInteractionEventSource sharedInstance]

  // instance methods
  -[SBMainDisplayWorkspaceAppInteractionEventSource applicationController]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _installedAppsDidChange:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource mainDisplayLayoutPublisher]
  -[SBMainDisplayWorkspaceAppInteractionEventSource layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource touchDetachedForIdentifier:context:pid:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource touchUpOccuredForIdentifier:detached:context:pid:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _userQuitApplication:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource .cxx_destruct]
  -[SBMainDisplayWorkspaceAppInteractionEventSource setAnalyticsClient:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _initWithAnalyticsClient:applicationController:applicationRestrictionController:iconModel:layoutStateTransitionCoordinator:mainDisplayLayoutPublisher:touchDeliveryObservationService:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource setApplicationRestrictionController:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource init]
  -[SBMainDisplayWorkspaceAppInteractionEventSource setTouchDeliveryObservationService:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource setMainDisplayLayoutPublisher:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _userRemovedSuggestion:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource applicationRestrictionController:didUpdateVisibleTags:hiddenTags:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource publisher:didUpdateLayout:withTransition:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _webBookmarkUninstalled:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource addObserver:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource analyticsClient]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _notifyTransition:beginning:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource setLayoutStateTransitionCoordinator:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource applicationRestrictionController]
  -[SBMainDisplayWorkspaceAppInteractionEventSource setApplicationController:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource layoutStateTransitionCoordinator]
  -[SBMainDisplayWorkspaceAppInteractionEventSource touchDeliveryObservationService]
  -[SBMainDisplayWorkspaceAppInteractionEventSource dealloc]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _bundleIDsForIcons:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource currentFocusedBundleID]
  -[SBMainDisplayWorkspaceAppInteractionEventSource removeObserver:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _iconVisibilityDidChange:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _noteTouchForProcess:context:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource setCurrentFocusedBundleID:]


SBMedusaDecoratedDeviceApplicationSceneViewController : UIViewController <SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneStatusBarStateObserver, SBDeviceApplicationSceneViewControllerDelegate, SBSceneViewStatusBarAssertionObserver, SBSystemPointerInteractionDelegate, SBTopAffordanceViewControllerDelegate, SBUIActiveOrientationObserver, UIGestureRecognizerDelegate, SBMedusaDecoratedDeviceApplicationSceneViewControlling_Internal, SBMedusaDecoratedDeviceApplicationSceneViewControlling>
 @property  UIView *_blurViewContainerView
 @property  BOOL blurred
 @property  double darkenViewAlpha
 @property  MTLumaDodgePillSettings *homeGrabberPillSettings
 @property  BOOL insetForHomeAffordance
 @property  UIDropInteraction *dropInteraction
 @property  long long layoutRole
 @property  long long spaceConfiguration
 @property  long long floatingConfiguration
 @property  <SBMedusaDecoratedDeviceApplicationSceneViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double blurViewIconScale
 @property  BOOL nubViewHidden
 @property  BOOL nubViewHighlighted
 @property  UIView<SBApplicationSceneBackgroundView> *backgroundView
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  SBHomeGrabberView *homeGrabberView
 @property  long long homeGrabberDisplayMode
 @property  NSString *sceneMinificationFilter
 @property  BOOL sceneRendersAsynchronously
 @property  UIView *sceneContentView
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBMedusaDecoratedDeviceApplicationSceneViewController activeInterfaceOrientationWillChangeToOrientation:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController isInsetForHomeAffordance]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController leadingStatusBarStyle]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController trailingStatusBarStyle]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setInsetForHomeAffordance:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController didRotateFromInterfaceOrientation:toInterfaceOrientation:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController overrideStatusBarStyle]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController willRotateFromInterfaceOrientation:toInterfaceOrientation:alongsideContainerView:animated:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController currentStatusBarHeight]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController bestHomeAffordanceOrientationForOrientation:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setApplicationSceneStatusBarDelegate:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAlpha]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneHandle:didCreateScene:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController applicationSceneStatusBarDelegate]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController contentReferenceSize]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController initWithCoder:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController viewWillLayoutSubviews]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController displayMode]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController homeGrabberPillSettings]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneHandle]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController styleForRegion:forView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController layoutRole]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setCustomContentView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController .cxx_destruct]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController shouldBeginPointerInteractionAtLocation:forView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController applicationSceneViewControllerDidUpdateHomeAffordanceSupportedOrientations:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneMinificationFilter]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController isBlurred]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAssertionDidUpdate:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController conformsToProtocolSBDeviceApplicationSceneViewControlling]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController floatingConfiguration]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController applicationSceneViewController:statusBarTapped:tapActionType:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setDelegate:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneContentView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAssertionWithStatusBarHidden:atLevel:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _hardwareKeyboardAvailabilityChanged:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController willMoveToParentViewController:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController homeGrabberView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController pointerInteractionHitTestInsetsForView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setSceneMinificationFilter:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setBlurViewIconScale:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController newSnapshot]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController gestureRecognizerShouldBegin:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController SB_conformsToSceneLayoutStatusBarAssertionProviding]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController customContentView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setHomeGrabberPillSettings:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController performSwitcherKeyboardShortcutAction:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _updateAsyncRendering]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setHomeGrabberDisplayMode:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setNubViewHidden:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController spaceConfiguration]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setDropInteraction:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController gestureRecognizer:shouldReceiveTouch:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneWithIdentifier:didChangeStatusBarStyleTo:forPartWithIdentifier:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneRendersAsynchronously]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setBackgroundView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController contentInterfaceOrientation]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController delegate]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController containerContentWrapperInterfaceOrientationChangedTo:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setDisplayMode:animationFactory:completion:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController dealloc]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController placeholderContentContext]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setSceneRendersAsynchronously:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController invalidate]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneWithIdentifier:didChangeStatusBarStyleTo:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setLiveContentBlurEnabled:duration:blurDelay:iconViewScale:began:completion:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController blurViewIconScale]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController homeGrabberDisplayMode]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController loadView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController newSnapshotView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setPlaceholderContentContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController newSnapshotViewOnQueue:withCompletion:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAssertionDidInvalidate:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController backgroundView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController dropInteraction]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController SB_conformsToSceneLayoutMedusaStatusBarAssertionProviding]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController SB_conformsToMedusaDecoratedDeviceApplicationSceneViewControlling]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAssertionWithStatusBarHidden:nubViewHidden:atLevel:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setDarkenViewAlpha:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController initWithDeviceApplicationSceneHandle:layoutRole:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setLayoutRole:spaceConfiguration:floatingConfiguration:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _beginRequiringSceneViewMatchMoveAnimationForReason:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _endRequiringSceneViewMatchMoveAnimationForReason:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController hitTestToTopAffordance:window:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setNubViewHighlighted:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _setTopAffordanceAutoHides:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController isNubViewHidden]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController isNubViewHighlighted]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController darkenViewAlpha]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _blurViewContainerView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController initWithDeviceApplicationSceneHandle:layoutRole:workspace:setupManager:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _elasticValueViewControllerWillPresent:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _elasticValueViewControllerWillDismiss:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _guidedAccessActivationChanged:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _medusaEnabledStateChanged:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _blurContentView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _setBlurContentView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _handleTopAffordanceButtonPressOfType:forTopAffordanceViewController:desiredFloatingConfiguration:transitionSource:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _handleSplitHomeScreenSwitcherKeyShortcut]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _updateTopAffordanceHighlight]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _updateCurrentTopAffordanceAlpha]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _presentTransientErrorMessageIfNeededForLayoutStateTransitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController topAffordanceView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController updateTopAffordanceOverrideUserInterfaceStyle]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _modifyApplicationContext:forTapOnTopAffordanceButtonType:spaceConfiguration:layoutRole:desiredFloatingConfiguration:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _sceneViewHasMatchMoveAnimation]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _createOrDestroyTopAffordanceViewControllerAnimated:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _updateTopAffordanceInset]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _topAffordanceButtonTypeForCurrentLayout]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _sendStatusBarScrollToTopActionForGestureRecognizer:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _addSceneViewMatchMoveAnimation]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _removeSceneViewMatchMoveAnimation]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _handleTopAffordanceTapGestureRecognizerAction:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _shouldShowSplitViewNotSupportedMessageForLayoutStateTransitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _shouldShowMultipleWindowsNotSupportedMessageForLayoutStateTransitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController topAffordanceViewController:didTapOnButtonWithTopAffordanceButtonType:]


SBArcSwipeFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBArcSwipeFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBArcSwipeFloatingSwitcherModifier transitionWillBegin]
  -[SBArcSwipeFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBArcSwipeFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBArcSwipeFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBArcSwipeFloatingSwitcherModifier scaleForIndex:]
  -[SBArcSwipeFloatingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBArcSwipeFloatingSwitcherModifier frameForIndex:]
  -[SBArcSwipeFloatingSwitcherModifier visibleAppLayouts]
  -[SBArcSwipeFloatingSwitcherModifier .cxx_destruct]
  -[SBArcSwipeFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBArcSwipeFloatingSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBArcSwipeFloatingSwitcherModifier _layoutSettings]
  -[SBArcSwipeFloatingSwitcherModifier handleTimerEvent:]
  -[SBArcSwipeFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBArcSwipeFloatingSwitcherModifier topMostLayoutElements]
  -[SBArcSwipeFloatingSwitcherModifier transitionWillUpdate]
  -[SBArcSwipeFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:floatingConfiguration:direction:needsOvershoot:]


SBPolicyAggregator : NSObject
  // instance methods
  -[SBPolicyAggregator allowsTransitionRequest:]


SBPIPBehaviorOverrideAssertion : BSSimpleAssertion
 @property  NSString *cameraSensorAttributionBundleIdentifier

  // instance methods
  -[SBPIPBehaviorOverrideAssertion .cxx_destruct]
  -[SBPIPBehaviorOverrideAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBPIPBehaviorOverrideAssertion cameraSensorAttributionBundleIdentifier]
  -[SBPIPBehaviorOverrideAssertion behaviorOverrideReason]
  -[SBPIPBehaviorOverrideAssertion initWithReason:identifier:invalidationBlock:]
  -[SBPIPBehaviorOverrideAssertion initWithReason:invalidationBlock:]
  -[SBPIPBehaviorOverrideAssertion initWithReason:identifier:cameraSensorAttributionBundleIdentifier:invalidationBlock:]


SBPIPWindowLevelOverrideAssertion : SBPIPBehaviorOverrideAssertion
 @property  unsigned long windowLevel

  // instance methods
  -[SBPIPWindowLevelOverrideAssertion windowLevel]
  -[SBPIPWindowLevelOverrideAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBPIPWindowLevelOverrideAssertion initWithWindowLevel:reason:identifier:invalidationBlock:]


SBPIPEnvironmentDependentOverrideAssertion : SBPIPBehaviorOverrideAssertion <SBLayoutStateTransitionObserver>
 @property  BOOL invalidatesEarly
 @property  NSSet *allowedEnvironmentModes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPEnvironmentDependentOverrideAssertion layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBPIPEnvironmentDependentOverrideAssertion layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBPIPEnvironmentDependentOverrideAssertion .cxx_destruct]
  -[SBPIPEnvironmentDependentOverrideAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBPIPEnvironmentDependentOverrideAssertion _layoutCoordinator]
  -[SBPIPEnvironmentDependentOverrideAssertion dealloc]
  -[SBPIPEnvironmentDependentOverrideAssertion initWithReason:identifier:invalidationBlock:]
  -[SBPIPEnvironmentDependentOverrideAssertion initWithReason:invalidationBlock:]
  -[SBPIPEnvironmentDependentOverrideAssertion _environmentModeForLayoutState:]
  -[SBPIPEnvironmentDependentOverrideAssertion _updateStateForTransitionWithContext:]
  -[SBPIPEnvironmentDependentOverrideAssertion invalidatesEarly]
  -[SBPIPEnvironmentDependentOverrideAssertion setInvalidatesEarly:]
  -[SBPIPEnvironmentDependentOverrideAssertion allowedEnvironmentModes]
  -[SBPIPEnvironmentDependentOverrideAssertion setAllowedEnvironmentModes:]


SBPIPStashAssertion : SBPIPEnvironmentDependentOverrideAssertion

SBPIPInterruptionAssertion : SBPIPBehaviorOverrideAssertion

SBDismissForEmptySwitcherSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBDismissForEmptySwitcherSwitcherEventResponse init]
  -[SBDismissForEmptySwitcherSwitcherEventResponse type]


SBReusableSnapshotItemContainer : SBFluidSwitcherItemContainer <SBFluidSwitcherItemContainerReusable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBReusableSnapshotItemContainer _snapshotView]
  -[SBReusableSnapshotItemContainer setAppLayout:]
  -[SBReusableSnapshotItemContainer conformsToProtocolSBFluidSwitcherItemContainerReusable]
  -[SBReusableSnapshotItemContainer prepareForReuse]
  -[SBReusableSnapshotItemContainer initWithFrame:appLayout:delegate:active:]
  -[SBReusableSnapshotItemContainer setContentView:]
  -[SBReusableSnapshotItemContainer _updateSnapshotViewWithAppLayout:]


_SBDMPolicyTestAppInfo : SBApplicationInfo
 @property  BOOL testAppBlocked

  // instance methods
  -[_SBDMPolicyTestAppInfo isBlockedForScreenTimeExpiration]
  -[_SBDMPolicyTestAppInfo testAppBlocked]
  -[_SBDMPolicyTestAppInfo screenTimePolicy]
  -[_SBDMPolicyTestAppInfo setTestAppBlocked:]


SBScreenTimeTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBScreenTimeTestRecipe load]
  +[SBScreenTimeTestRecipe _setApplicationBundleIdentifiers:blockedForScreenTimeExpiration:]

  // instance methods
  -[SBScreenTimeTestRecipe title]
  -[SBScreenTimeTestRecipe handleVolumeIncrease]
  -[SBScreenTimeTestRecipe handleVolumeDecrease]
  -[SBScreenTimeTestRecipe _defaultIdentifiers]


SBReduceMotionDeckSwitcherModifier : SBDeckSwitcherModifier
  // instance methods
  -[SBReduceMotionDeckSwitcherModifier wallpaperScale]
  -[SBReduceMotionDeckSwitcherModifier homeScreenScale]
  -[SBReduceMotionDeckSwitcherModifier homeScreenAlpha]
  -[SBReduceMotionDeckSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBReduceMotionDeckSwitcherModifier scrollViewAttributes]
  -[SBReduceMotionDeckSwitcherModifier _switcherCardScale]
  -[SBReduceMotionDeckSwitcherModifier depthForIndex:displayItemsCount:scrollProgress:]
  -[SBReduceMotionDeckSwitcherModifier scrollProgressForIndex:displayItemsCount:frameOrigin:]
  -[SBReduceMotionDeckSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBReduceMotionDeckSwitcherModifier indexForScrollProgress:displayItemsCount:frameOrigin:]
  -[SBReduceMotionDeckSwitcherModifier leadingOffsetForIndex:displayItemsCount:scrollProgress:]
  -[SBReduceMotionDeckSwitcherModifier resetAdjustedScrollingState]
  -[SBReduceMotionDeckSwitcherModifier _pagingOrigin]
  -[SBReduceMotionDeckSwitcherModifier titleOpacityForIndex:scrollProgress:]
  -[SBReduceMotionDeckSwitcherModifier _interpageSpacingForPaging]
  -[SBReduceMotionDeckSwitcherModifier opacityForIndex:scrollProgress:]
  -[SBReduceMotionDeckSwitcherModifier _cardWidth]
  -[SBReduceMotionDeckSwitcherModifier scrollProgressForIndex:]


SBSplitDisplayItemPulseTransitionSwitcherModifier : SBSwitcherModifier
 @property  SBAppLayout *appLayout
 @property  long long layoutRole

  // instance methods
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier backgroundOpacityForIndex:]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier frameForShelf:]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier appLayout]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier containerLeafAppLayoutForShelf:]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier handleTransitionEvent:]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier layoutRole]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier .cxx_destruct]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier homeAffordanceLayoutElementToPortalIntoShelf:]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier topMostLayoutElements]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier completesWhenChildrenComplete]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier _previousHomeAffordanceAppLayout]
  -[SBSplitDisplayItemPulseTransitionSwitcherModifier initWithTransitionID:appLayout:layoutRole:]


SBApplicationLaunchAlertEvaluatorFactory : NSObject
  // class methods
  +[SBApplicationLaunchAlertEvaluatorFactory defaultApplicationLaunchAlertEvaluators]


SBFloatingDockRootViewController : SBFTouchPassThroughViewController <SBFloatingDockViewControllerDelegate, UIGestureRecognizerDelegate, SBIconViewQuerying, SBIconLocationPresenting>
 @property  SBIconController *iconController
 @property  SBApplicationController *applicationController
 @property  SBAppSuggestionManager *appSuggestionManager
 @property  SBFloatingDockViewController *floatingDockViewController
 @property  SBLayoutStateTransitionCoordinator *layoutStateTransitionCoordinator
 @property  SBRecentDisplayItemsController *recentsController
 @property  SBRecentDisplayItemsDataStore *recentsDataStore
 @property  BOOL transitioningPresentation
 @property  BOOL useDismissHitTestPadding
 @property  SBFAnalyticsClient *analyticsClient
 @property  SBWorkspaceApplicationSceneTransitionContext *currentTransitionContext
 @property  <SBIconViewProviding> *iconViewProvider
 @property  SBFloatingDockSuggestionsModel *suggestionsModel
 @property  <SBFloatingDockRootViewControllerDelegate> *delegate
 @property  BOOL floatingDockPresented
 @property  BOOL floatingDockFullyPresented
 @property  BOOL libraryPodIconEnabled
 @property  double presentedProgress
 @property  double maximumFloatingDockHeight
 @property  double floatingDockHeight
 @property  double effectiveFloatingDockHeight
 @property  double preferredVerticalMargin
 @property  double floatingDockViewTopMargin
 @property  double translationFromFullyPresentedFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} floatingDockScreenFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} floatingDockScreenPresentationFrame
 @property  double maximumDockContinuousCornerRadius
 @property  SBApplication *requestedSuggestedApplication
 @property  BOOL contentEligibleForAsynchronousRendering
 @property  BOOL presentingLibraryInForeground
 @property  BOOL presentingLibrary
 @property  BOOL presentingFolder
 @property  SBFolderController *presentedFolderController
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  _UILegibilitySettings *legibilitySettings
 @property  SBIconListView *userIconListView
 @property  SBIconListView *suggestionsIconListView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *presentedIconLocations

  // instance methods
  -[SBFloatingDockRootViewController applicationController]
  -[SBFloatingDockRootViewController setFloatingDockViewController:]
  -[SBFloatingDockRootViewController iconViewForIcon:location:]
  -[SBFloatingDockRootViewController _handlePanGestureRecognizer:]
  -[SBFloatingDockRootViewController firstIconViewForIcon:excludingLocations:]
  -[SBFloatingDockRootViewController displayLayoutElement]
  -[SBFloatingDockRootViewController initWithCoder:]
  -[SBFloatingDockRootViewController presentedIconLocations]
  -[SBFloatingDockRootViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBFloatingDockRootViewController iconViewProvider]
  -[SBFloatingDockRootViewController .cxx_destruct]
  -[SBFloatingDockRootViewController _beginPresentationTransition]
  -[SBFloatingDockRootViewController viewDidLoad]
  -[SBFloatingDockRootViewController setAnalyticsClient:]
  -[SBFloatingDockRootViewController enumerateDisplayedIconViewsForIcon:usingBlock:]
  -[SBFloatingDockRootViewController recentsController]
  -[SBFloatingDockRootViewController setLegibilitySettings:]
  -[SBFloatingDockRootViewController setDelegate:]
  -[SBFloatingDockRootViewController viewDidAppear:]
  -[SBFloatingDockRootViewController initWithNibName:bundle:]
  -[SBFloatingDockRootViewController gestureRecognizerShouldBegin:]
  -[SBFloatingDockRootViewController isDisplayingIconView:inLocation:]
  -[SBFloatingDockRootViewController floatingDockViewController]
  -[SBFloatingDockRootViewController firstIconViewForIcon:inLocations:]
  -[SBFloatingDockRootViewController viewDidLayoutSubviews]
  -[SBFloatingDockRootViewController floatingDockHeight]
  -[SBFloatingDockRootViewController analyticsClient]
  -[SBFloatingDockRootViewController floatingDockViewTopMargin]
  -[SBFloatingDockRootViewController isDisplayingIcon:inLocations:]
  -[SBFloatingDockRootViewController setLayoutStateTransitionCoordinator:]
  -[SBFloatingDockRootViewController delegate]
  -[SBFloatingDockRootViewController isDisplayingIconView:]
  -[SBFloatingDockRootViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBFloatingDockRootViewController firstIconViewForIcon:]
  -[SBFloatingDockRootViewController layoutStateTransitionCoordinator]
  -[SBFloatingDockRootViewController enumerateDisplayedIconViewsUsingBlock:]
  -[SBFloatingDockRootViewController iconController]
  -[SBFloatingDockRootViewController supportedInterfaceOrientations]
  -[SBFloatingDockRootViewController isDisplayingIcon:inLocation:]
  -[SBFloatingDockRootViewController isDisplayingIcon:]
  -[SBFloatingDockRootViewController isFloatingDockFullyPresented]
  -[SBFloatingDockRootViewController isPresentingIconLocation:]
  -[SBFloatingDockRootViewController legibilitySettings]
  -[SBFloatingDockRootViewController translationFromFullyPresentedFrame]
  -[SBFloatingDockRootViewController floatingDockViewController:didChangeContentHeight:]
  -[SBFloatingDockRootViewController userIconListView]
  -[SBFloatingDockRootViewController isLibraryPodIconEnabled]
  -[SBFloatingDockRootViewController libraryContainerViewControllerForFloatingDockViewController:]
  -[SBFloatingDockRootViewController maximumDockContinuousCornerRadius]
  -[SBFloatingDockRootViewController presentedFolderController]
  -[SBFloatingDockRootViewController floatingDockScreenFrame]
  -[SBFloatingDockRootViewController floatingDockViewController:didChangeContentFrame:]
  -[SBFloatingDockRootViewController isFloatingDockViewControllerPresentedOverTransitioningAppToAppContent:]
  -[SBFloatingDockRootViewController isFloatingDockViewControllerPresentedOverTransitioningSwitcherContent:]
  -[SBFloatingDockRootViewController isPresentingLibrary]
  -[SBFloatingDockRootViewController isPresentingLibraryInForeground]
  -[SBFloatingDockRootViewController isPresentingFolder]
  -[SBFloatingDockRootViewController isFloatingDockViewControllerPresentedOverApplication:]
  -[SBFloatingDockRootViewController isDefaultLibraryContainerViewControllerForegroundForFloatingDockViewController:]
  -[SBFloatingDockRootViewController foregroundLibraryContainerViewControllerForFloatingDockViewController:]
  -[SBFloatingDockRootViewController floatingDockViewController:acquireOrderFloatingDockContainerBeforeLibraryAssertionForReason:]
  -[SBFloatingDockRootViewController floatingDockViewController:willPerformTransitionWithLibraryToPresented:]
  -[SBFloatingDockRootViewController floatingDockViewController:didCompleteTransitionWithLibraryToPresented:]
  -[SBFloatingDockRootViewController floatingDockViewController:willUseAnimator:forTransitioningWithFolder:presenting:]
  -[SBFloatingDockRootViewController floatingDockViewController:willPerformTransitionWithFolder:presenting:withTransitionCoordinator:]
  -[SBFloatingDockRootViewController minimumHomeScreenScaleForFloatingDockViewController:]
  -[SBFloatingDockRootViewController floatingDockViewController:wantsToBePresented:]
  -[SBFloatingDockRootViewController setLibraryPodIconEnabled:]
  -[SBFloatingDockRootViewController preferredVerticalMargin]
  -[SBFloatingDockRootViewController floatingDockScreenPresentationFrame]
  -[SBFloatingDockRootViewController layoutUserControlledIconListsWithAnimationType:forceRelayout:]
  -[SBFloatingDockRootViewController presentFolderForIcon:location:animated:completion:]
  -[SBFloatingDockRootViewController isFloatingDockPresented]
  -[SBFloatingDockRootViewController registerAsSharedInstance]
  -[SBFloatingDockRootViewController suggestionsIconListView]
  -[SBFloatingDockRootViewController suggestionsModel]
  -[SBFloatingDockRootViewController requestedSuggestedApplication]
  -[SBFloatingDockRootViewController setRequestedSuggestedApplication:]
  -[SBFloatingDockRootViewController recentsDataStore]
  -[SBFloatingDockRootViewController appSuggestionManager]
  -[SBFloatingDockRootViewController initWithIconController:applicationController:recentsController:recentsDataStore:appSuggestionManager:layoutStateTransitionCoordinator:iconViewProvider:analyticsClient:]
  -[SBFloatingDockRootViewController maximumFloatingDockHeight]
  -[SBFloatingDockRootViewController effectiveFloatingDockHeight]
  -[SBFloatingDockRootViewController dismissPresentedFolderAnimated:withTransitionContext:completion:]
  -[SBFloatingDockRootViewController dismissPresentedLibraryAnimated:withTransitionContext:completion:]
  -[SBFloatingDockRootViewController setPresentationProgress:animated:interactive:withCompletion:]
  -[SBFloatingDockRootViewController presentedProgress]
  -[SBFloatingDockRootViewController isTransitioningPresentation]
  -[SBFloatingDockRootViewController isContentEligibleForAsynchronousRendering]
  -[SBFloatingDockRootViewController prepareForTransitionToEnvironmentMode:fromDockVisible:toDockVisible:]
  -[SBFloatingDockRootViewController cleanupAfterTransitionToEnvironmentMode:]
  -[SBFloatingDockRootViewController setSuggestionsModel:]
  -[SBFloatingDockRootViewController _layoutFloatingDockViewWithProgress:]
  -[SBFloatingDockRootViewController setPresentationProgress:interactive:withCompletion:]
  -[SBFloatingDockRootViewController _setPresentedProgress:animated:interactive:completion:]
  -[SBFloatingDockRootViewController setPresentationProgress:interactive:]
  -[SBFloatingDockRootViewController setCurrentTransitionContext:]
  -[SBFloatingDockRootViewController setUseDismissHitTestPadding:]
  -[SBFloatingDockRootViewController useDismissHitTestPadding]
  -[SBFloatingDockRootViewController _calculateStandardDockFrame]
  -[SBFloatingDockRootViewController _endPresentationTransition]
  -[SBFloatingDockRootViewController setTransitioningPresentation:]
  -[SBFloatingDockRootViewController _floatingDockViewTranslation]
  -[SBFloatingDockRootViewController _floatingDockViewTranslationForHeight:]
  -[SBFloatingDockRootViewController currentTransitionContext]
  -[SBFloatingDockRootViewController setPresentationProgressInteractively:withCompletion:]
  -[SBFloatingDockRootViewController setPresentationProgressInteractively:]
  -[SBFloatingDockRootViewController setPresentationProgress:animated:interactive:]
  -[SBFloatingDockRootViewController setRecentsController:]
  -[SBFloatingDockRootViewController setRecentsDataStore:]


SBExternalDisplayManager : NSObject <FBSDisplayObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBExternalDisplayManager displayMonitor:willDisconnectIdentity:]
  -[SBExternalDisplayManager displayMonitor:didConnectIdentity:withConfiguration:]
  -[SBExternalDisplayManager .cxx_destruct]
  -[SBExternalDisplayManager displayMonitor:didUpdateIdentity:withConfiguration:]
  -[SBExternalDisplayManager init]
  -[SBExternalDisplayManager initWithDisplayMonitor:mainWorkspace:userAuthenticationProvider:mainSceneManager:]


SBFullScreenToHomePIPSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBFullScreenToHomePIPSwitcherModifier homeScreenBackdropBlurType]
  -[SBFullScreenToHomePIPSwitcherModifier transitionWillBegin]
  -[SBFullScreenToHomePIPSwitcherModifier rotationAngleForIndex:]
  -[SBFullScreenToHomePIPSwitcherModifier isHomeScreenContentRequired]
  -[SBFullScreenToHomePIPSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToHomePIPSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBFullScreenToHomePIPSwitcherModifier scaleForIndex:]
  -[SBFullScreenToHomePIPSwitcherModifier frameForIndex:]
  -[SBFullScreenToHomePIPSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBFullScreenToHomePIPSwitcherModifier visibleAppLayouts]
  -[SBFullScreenToHomePIPSwitcherModifier .cxx_destruct]
  -[SBFullScreenToHomePIPSwitcherModifier isSwitcherWindowVisible]
  -[SBFullScreenToHomePIPSwitcherModifier wallpaperStyle]
  -[SBFullScreenToHomePIPSwitcherModifier clipsToBoundsAtIndex:]
  -[SBFullScreenToHomePIPSwitcherModifier cornerRadiiForIndex:]
  -[SBFullScreenToHomePIPSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBFullScreenToHomePIPSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBFullScreenToHomePIPSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBFullScreenToHomePIPSwitcherModifier didMoveToParentModifier:]
  -[SBFullScreenToHomePIPSwitcherModifier topMostLayoutElements]
  -[SBFullScreenToHomePIPSwitcherModifier clippingFrameForIndex:withBounds:]
  -[SBFullScreenToHomePIPSwitcherModifier completesWhenChildrenComplete]
  -[SBFullScreenToHomePIPSwitcherModifier initWithTransitionID:zoomModifier:appLayout:]
  -[SBFullScreenToHomePIPSwitcherModifier handleHideMorphToPIPAppLayoutEvent:]
  -[SBFullScreenToHomePIPSwitcherModifier _shouldApplyMorphToPipToIndex:]
  -[SBFullScreenToHomePIPSwitcherModifier _isIndexSelectedAppLayout:]


SBScheduleEventDodgingModifierEventResponse : SBDodgingModifierEventResponse
 @property  NSString *name

  // instance methods
  -[SBScheduleEventDodgingModifierEventResponse name]
  -[SBScheduleEventDodgingModifierEventResponse .cxx_destruct]
  -[SBScheduleEventDodgingModifierEventResponse initWithName:]
  -[SBScheduleEventDodgingModifierEventResponse type]


SBApplicationHarmonyService : NSObject <SBApplicationServerHarmonyDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationHarmonyService sharedInstance]

  // instance methods
  -[SBApplicationHarmonyService init]
  -[SBApplicationHarmonyService applicationServer:client:fetchWhitePointAdaptivityStyleForDisplayId:withCompletion:]


SBCenterWindowSessionMetric : SBAnalyticsStateMachineEventHandler
 @property  double startTimestamp
 @property  NSString *startReason
 @property  NSString *centerBundleIdentifier

  // instance methods
  -[SBCenterWindowSessionMetric _bundleIdentifierForElementWithLayoutRole:fromContext:]
  -[SBCenterWindowSessionMetric centerBundleIdentifier]
  -[SBCenterWindowSessionMetric .cxx_destruct]
  -[SBCenterWindowSessionMetric initWithHeartbeatMetricPersistence:]
  -[SBCenterWindowSessionMetric setStartReason:]
  -[SBCenterWindowSessionMetric startReason]
  -[SBCenterWindowSessionMetric sendCoreAnalyticsEventWithName:payload:]
  -[SBCenterWindowSessionMetric setCenterBundleIdentifier:]
  -[SBCenterWindowSessionMetric startTimestamp]
  -[SBCenterWindowSessionMetric setStartTimestamp:]
  -[SBCenterWindowSessionMetric _sendCoreAnalyticsEventWithStartReason:endReason:duration:centerBundleIdentifier:doNotDisturbActive:hardwareKeyboardAttached:]


SBLoginAppContainerViewController : SBLockScreenViewControllerBase <SBLockScreenBatteryChargingViewControllerDelegate, SBLoginAppSceneHosterDelegate, SBWallpaperObserver, SBLockScreenPluginManagerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLoginAppContainerViewController wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBLoginAppContainerViewController wallpaperDidChangeForVariant:]
  -[SBLoginAppContainerViewController pluginManager:activePluginDidChange:]
  -[SBLoginAppContainerViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBLoginAppContainerViewController canBeDeactivatedForUIUnlockFromSource:]
  -[SBLoginAppContainerViewController handleVolumeUpButtonPress]
  -[SBLoginAppContainerViewController handleHomeButtonDoublePress]
  -[SBLoginAppContainerViewController shouldDisableALS]
  -[SBLoginAppContainerViewController prepareForUILock]
  -[SBLoginAppContainerViewController handleVolumeDownButtonPress]
  -[SBLoginAppContainerViewController suppressesControlCenter]
  -[SBLoginAppContainerViewController .cxx_destruct]
  -[SBLoginAppContainerViewController shouldShowLockStatusBarTime]
  -[SBLoginAppContainerViewController willUIUnlockFromSource:]
  -[SBLoginAppContainerViewController disableLockScreenPluginWithContext:]
  -[SBLoginAppContainerViewController pluginManager:didLoadPlugin:]
  -[SBLoginAppContainerViewController initWithNibName:bundle:]
  -[SBLoginAppContainerViewController enableLockScreenPluginWithContext:]
  -[SBLoginAppContainerViewController pluginManager:displayedPluginDidChangeFromPlugin:toPlugin:]
  -[SBLoginAppContainerViewController viewWillDisappear:]
  -[SBLoginAppContainerViewController prepareForUIUnlock]
  -[SBLoginAppContainerViewController viewWillAppear:]
  -[SBLoginAppContainerViewController _updateLegibility]
  -[SBLoginAppContainerViewController pluginManager:plugin:handleAction:]
  -[SBLoginAppContainerViewController startLockScreenFadeInAnimationForSource:]
  -[SBLoginAppContainerViewController suppressesScreenshots]
  -[SBLoginAppContainerViewController pluginManager:willUnloadPlugin:]
  -[SBLoginAppContainerViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBLoginAppContainerViewController noteDeviceBlockedStatusUpdated]
  -[SBLoginAppContainerViewController dealloc]
  -[SBLoginAppContainerViewController shouldAutoUnlockForSource:]
  -[SBLoginAppContainerViewController pluginManager:displayedPluginDidUpdateAppearance:]
  -[SBLoginAppContainerViewController loadView]
  -[SBLoginAppContainerViewController _canShowWhileLocked]
  -[SBLoginAppContainerViewController sceneUpdatedIdleTimerMode:]
  -[SBLoginAppContainerViewController sceneUpdatedStatusBarUserName:]
  -[SBLoginAppContainerViewController sceneUpdatedRotationMode:]
  -[SBLoginAppContainerViewController sceneUpdatedWallpaperMode:]
  -[SBLoginAppContainerViewController sceneInvalidated]
  -[SBLoginAppContainerViewController _statusBarSettingsAssertion]
  -[SBLoginAppContainerViewController chargingViewControllerFadedOutContent:]
  -[SBLoginAppContainerViewController initWithNibName:bundle:sceneHoster:wallpaperController:]
  -[SBLoginAppContainerViewController _handleBacklightFadeEnded]
  -[SBLoginAppContainerViewController _reallyRelinquishStatusBarAssertion]
  -[SBLoginAppContainerViewController _showOrHideThermalTrapUIAnimated:]
  -[SBLoginAppContainerViewController _updateBatteryChargingViewAnimated:]
  -[SBLoginAppContainerViewController loginContainerView]
  -[SBLoginAppContainerViewController _setupLoginScene]
  -[SBLoginAppContainerViewController _cleanupBatteryChargingViewWithAnimationDuration:]
  -[SBLoginAppContainerViewController _addBatteryChargingView]
  -[SBLoginAppContainerViewController _fadeViewsForChargingViewVisible:]
  -[SBLoginAppContainerViewController _removeBatteryChargingView]
  -[SBLoginAppContainerViewController _initWithSceneHoster:wallpaperController:]
  -[SBLoginAppContainerViewController addLoginObserver:]
  -[SBLoginAppContainerViewController removeLoginObserver:]
  -[SBLoginAppContainerViewController requiresPasscodeInputForUIUnlockFromSource:withOptions:]
  -[SBLoginAppContainerViewController _displayLayoutElementIdentifier]
  -[SBLoginAppContainerViewController _setupLoginAppHosting]
  -[SBLoginAppContainerViewController _killLoginApp]
  -[SBLoginAppContainerViewController _hostedAppBundleID]
  -[SBLoginAppContainerViewController _hostedAppView]
  -[SBLoginAppContainerViewController _hostedSceneIdentifier]
  -[SBLoginAppContainerViewController _reallyAcquireStatusBarAssertionIfNecessaryInitiallyVisible:]


SBAnalyticsAggdInterface : NSObject
  // class methods
  +[SBAnalyticsAggdInterface sharedInstance]

  // instance methods
  -[SBAnalyticsAggdInterface setValue:forScalarKey:]
  -[SBAnalyticsAggdInterface addValue:forScalarKey:]


SBCardItemsController : NSObject <SBCardItemsControllerRemoteInterface, NSXPCListenerDelegate>
 @property  SBWalletNotificationSource *walletNotificationSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCardItemsController .cxx_destruct]
  -[SBCardItemsController getCardItemsForControllerWithIdentifier:withHandler:]
  -[SBCardItemsController init]
  -[SBCardItemsController walletNotificationSource]
  -[SBCardItemsController setCardItems:forControllerWithIdentifier:]
  -[SBCardItemsController _deactivateCardItem:]
  -[SBCardItemsController _updateCardItem:]
  -[SBCardItemsController dealloc]
  -[SBCardItemsController _updateThumbnailForCardItem:withSnapshotter:completion:]
  -[SBCardItemsController listener:shouldAcceptNewConnection:]
  -[SBCardItemsController _updateRestrictions]
  -[SBCardItemsController setWalletNotificationSource:]
  -[SBCardItemsController _activateCardItem:animated:]


SBSwitcherDemoCommandsServer : NSObject <BSServiceConnectionListenerDelegate, SBSSwitcherDemoCommandsClientToServerInterface>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherDemoCommandsServer listener:didReceiveConnection:withContext:]
  -[SBSwitcherDemoCommandsServer .cxx_destruct]
  -[SBSwitcherDemoCommandsServer updateHiddenApplicationBundleIDs:]
  -[SBSwitcherDemoCommandsServer setShouldDisableSwitcherModelUpdates:]
  -[SBSwitcherDemoCommandsServer _queue_removeConnection:]
  -[SBSwitcherDemoCommandsServer stashSwitcherModelToPath:]
  -[SBSwitcherDemoCommandsServer _queue_addConnection:]
  -[SBSwitcherDemoCommandsServer loadStashedSwitcherModelFromPath:]
  -[SBSwitcherDemoCommandsServer initWithRecentAppLayouts:demoFilteringController:]


SBAlertLayoutPresentationVerifier : NSObject <SBUIActiveOrientationObserver, SBReachabilityObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAlertLayoutPresentationVerifier activeInterfaceOrientationWillChangeToOrientation:]
  -[SBAlertLayoutPresentationVerifier activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBAlertLayoutPresentationVerifier handleReachabilityYOffsetDidChange]
  -[SBAlertLayoutPresentationVerifier setAlertItemWindow:]
  -[SBAlertLayoutPresentationVerifier .cxx_destruct]
  -[SBAlertLayoutPresentationVerifier init]
  -[SBAlertLayoutPresentationVerifier scheduleAlertLayoutVerificationForReason:]
  -[SBAlertLayoutPresentationVerifier dealloc]
  -[SBAlertLayoutPresentationVerifier setAlertPresenter:]


SBLockScreenTemperatureWarningView : SBLockOverlayView
  // instance methods
  -[SBLockScreenTemperatureWarningView _subtitleFont]
  -[SBLockScreenTemperatureWarningView _titleFont]
  -[SBLockScreenTemperatureWarningView .cxx_destruct]
  -[SBLockScreenTemperatureWarningView layoutSubviews]
  -[SBLockScreenTemperatureWarningView initWithFrame:]
  -[SBLockScreenTemperatureWarningView _statusBarOrientationIsPortrait]
  -[SBLockScreenTemperatureWarningView _titleBaseline]
  -[SBLockScreenTemperatureWarningView _subtitleBaseline]
  -[SBLockScreenTemperatureWarningView _iconYPosition]


SBBiometricMonitorView : UIView
 @property  long long matchState
 @property  long long presenceDetectState
 @property  long long poseState

  // instance methods
  -[SBBiometricMonitorView hitTest:withEvent:]
  -[SBBiometricMonitorView .cxx_destruct]
  -[SBBiometricMonitorView layoutSubviews]
  -[SBBiometricMonitorView initWithFrame:]
  -[SBBiometricMonitorView setMatchState:]
  -[SBBiometricMonitorView setPresenceDetectState:]
  -[SBBiometricMonitorView setPoseState:]
  -[SBBiometricMonitorView matchState]
  -[SBBiometricMonitorView presenceDetectState]
  -[SBBiometricMonitorView poseState]


SBElasticSliderView : CCUIContinuousSliderView <SBElasticGlyphView>
 @property  double additiveGlyphScaleFactor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBElasticSliderView additiveGlyphScaleFactor]
  -[SBElasticSliderView .cxx_destruct]
  -[SBElasticSliderView glyphCenter]
  -[SBElasticSliderView layoutSubviews]
  -[SBElasticSliderView setAdditiveGlyphScaleFactor:]
  -[SBElasticSliderView setAxis:]
  -[SBElasticSliderView initWithFrame:]
  -[SBElasticSliderView setContinuousSliderCornerRadius:]


SBElasticVolumeSliderView : MediaControlsVolumeSliderView <SBElasticGlyphView>
 @property  double additiveGlyphScaleFactor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBElasticVolumeSliderView additiveGlyphScaleFactor]
  -[SBElasticVolumeSliderView glyphCenter]
  -[SBElasticVolumeSliderView createBackgroundView]
  -[SBElasticVolumeSliderView setAdditiveGlyphScaleFactor:]
  -[SBElasticVolumeSliderView setAxis:]


SBApplicationSupportServiceRequestContext : NSObject
 @property  UISApplicationInitializationContext *applicationInitializationContext

  // class methods
  +[SBApplicationSupportServiceRequestContext hostingApplicationBundleIDForPid:]
  +[SBApplicationSupportServiceRequestContext initializationContextForClient:]
  +[SBApplicationSupportServiceRequestContext _hostProcessForProcess:]

  // instance methods
  -[SBApplicationSupportServiceRequestContext _main_applicationInitializationContext]
  -[SBApplicationSupportServiceRequestContext initWithApplication:]
  -[SBApplicationSupportServiceRequestContext .cxx_destruct]
  -[SBApplicationSupportServiceRequestContext _main_effectiveScreenType]
  -[SBApplicationSupportServiceRequestContext initWithClient:host:]
  -[SBApplicationSupportServiceRequestContext _main_effectiveClassicMode]
  -[SBApplicationSupportServiceRequestContext _main_deviceContext]
  -[SBApplicationSupportServiceRequestContext _main_persistenceIDs]
  -[SBApplicationSupportServiceRequestContext applicationInitializationContext]
  -[SBApplicationSupportServiceRequestContext _main_displayContext]


SBLockToAppStatusBarAnimator : NSObject
  // instance methods
  -[SBLockToAppStatusBarAnimator .cxx_destruct]
  -[SBLockToAppStatusBarAnimator animateStatusBarFromLockToHome]


SBSystemHapticsPreferencesMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemHapticsPreferencesMetric handleEvent:withContext:]
  -[SBSystemHapticsPreferencesMetric .cxx_destruct]
  -[SBSystemHapticsPreferencesMetric init]


SBHomeGestureFloatingSwitcherModifier : SBGestureSwitcherModifier <SBHomeGestureDockSwitcherModifierDelegate, SBHomeGestureFinalDestinationSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBHomeGestureFloatingSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBHomeGestureFloatingSwitcherModifier slideOverTongueDirection]
  -[SBHomeGestureFloatingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBHomeGestureFloatingSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[SBHomeGestureFloatingSwitcherModifier slideOverTongueState]
  -[SBHomeGestureFloatingSwitcherModifier shadowOffsetForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBHomeGestureFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeGestureFloatingSwitcherModifier scaleForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier handleTransitionEvent:]
  -[SBHomeGestureFloatingSwitcherModifier frameForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier _displayLinkFired:]
  -[SBHomeGestureFloatingSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureFloatingSwitcherModifier .cxx_destruct]
  -[SBHomeGestureFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBHomeGestureFloatingSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBHomeGestureFloatingSwitcherModifier _switcherCardScale]
  -[SBHomeGestureFloatingSwitcherModifier cornerRadiiForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBHomeGestureFloatingSwitcherModifier didMoveToParentModifier:]
  -[SBHomeGestureFloatingSwitcherModifier topMostLayoutElements]
  -[SBHomeGestureFloatingSwitcherModifier _applyPrototypeSettings]
  -[SBHomeGestureFloatingSwitcherModifier handleGestureEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _distanceYToInSwitcherCardScale]
  -[SBHomeGestureFloatingSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _updateGestureTranslationVelocityAndProgressWithEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _isTranslationPastDistanceThresholdToUnconditionallyGoHome:]
  -[SBHomeGestureFloatingSwitcherModifier _updateInMultitaskingIfNeededWithLocation:]
  -[SBHomeGestureFloatingSwitcherModifier currentFinalDestination]
  -[SBHomeGestureFloatingSwitcherModifier _responseForActivatingFinalDestination:]
  -[SBHomeGestureFloatingSwitcherModifier _gestureProgressToMaxTranslationForTranslation:]
  -[SBHomeGestureFloatingSwitcherModifier _isSelectedAppLayoutAtIndex:]
  -[SBHomeGestureFloatingSwitcherModifier _frameOffsetForTranslation:]
  -[SBHomeGestureFloatingSwitcherModifier _scaleForTranslation:]
  -[SBHomeGestureFloatingSwitcherModifier _selectedAppLayoutIndex]
  -[SBHomeGestureFloatingSwitcherModifier _layoutSettingsForAppLayout:layoutSettings:]
  -[SBHomeGestureFloatingSwitcherModifier _inSwitcherCenterYOffsetWhenPresented]
  -[SBHomeGestureFloatingSwitcherModifier _centerYOffsetDuringGesture]
  -[SBHomeGestureFloatingSwitcherModifier unconditionalDistanceThresholdForHome]
  -[SBHomeGestureFloatingSwitcherModifier _hasPausedEnoughForFlyIn]
  -[SBHomeGestureFloatingSwitcherModifier _inMultitaskingForLocation:translation:]
  -[SBHomeGestureFloatingSwitcherModifier _beginAnimatingMultitaskingPropertyWithMode:settings:]
  -[SBHomeGestureFloatingSwitcherModifier _hasTraveledSufficientDistanceForHomeOrAppSwitcher]
  -[SBHomeGestureFloatingSwitcherModifier _distanceYToMaxTranslation]
  -[SBHomeGestureFloatingSwitcherModifier initWithGestureID:selectedAppLayout:continuingGesture:lastGestureWasAnArcSwipe:floatingConfiguration:]
  -[SBHomeGestureFloatingSwitcherModifier _beginAnimatingRampingPropertyWithSettings:]


SBBiometricEventLogger : NSObject <SBUIBiometricResourceObserver>
 @property  unsigned long keybagUnlockTime
 @property  unsigned long fingerOnTime
 @property  BOOL fingerOnWithScreenOn
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBiometricEventLogger sharedInstance]
  +[SBBiometricEventLogger logEvent:]
  +[SBBiometricEventLogger logClass:code:]

  // instance methods
  -[SBBiometricEventLogger _systemDidWakeFromSleep:]
  -[SBBiometricEventLogger _fingerOn:]
  -[SBBiometricEventLogger .cxx_destruct]
  -[SBBiometricEventLogger _coversheetSwipedForDismissal:]
  -[SBBiometricEventLogger _authRequestCompleted:]
  -[SBBiometricEventLogger _screenTurnedOn:]
  -[SBBiometricEventLogger setFingerOnTime:]
  -[SBBiometricEventLogger keybagUnlockTime]
  -[SBBiometricEventLogger init]
  -[SBBiometricEventLogger _shouldSyslogTimestamps]
  -[SBBiometricEventLogger _resetPasscodeStateMachine]
  -[SBBiometricEventLogger setFingerOnWithScreenOn:]
  -[SBBiometricEventLogger _passcodeAuthenticationSucceeded]
  -[SBBiometricEventLogger _keybagBioUnlock:]
  -[SBBiometricEventLogger _passcodePromptCancelled:]
  -[SBBiometricEventLogger _passcodeViewTransitionedToPasscode:]
  -[SBBiometricEventLogger _biometricAuthenticationFailed]
  -[SBBiometricEventLogger setKeybagUnlockTime:]
  -[SBBiometricEventLogger fingerOnTime]
  -[SBBiometricEventLogger fingerOnWithScreenOn]
  -[SBBiometricEventLogger _tryAgain:]
  -[SBBiometricEventLogger biometricResource:observeEvent:]
  -[SBBiometricEventLogger _biometricAuthenticationSucceeded]
  -[SBBiometricEventLogger _clearEverything]
  -[SBBiometricEventLogger _unlockAnimationWillStart:]
  -[SBBiometricEventLogger _prearmMatch:]
  -[SBBiometricEventLogger timestampEvent:]
  -[SBBiometricEventLogger _machTimeInMilliseconds]
  -[SBBiometricEventLogger _backlightLevelChanged:]


SBPIPSceneContentAdapter : NSObject <SBLayoutStateTransitionObserver, SBPIPControllerAdapter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPSceneContentAdapter isStoppingOrCancellingPictureForPIPController:applicationWithBundleIdentifier:scenePersistenceIdentifier:]
  -[SBPIPSceneContentAdapter layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBPIPSceneContentAdapter setPIPController:]
  -[SBPIPSceneContentAdapter .cxx_destruct]
  -[SBPIPSceneContentAdapter contentTypeForPIPController:]
  -[SBPIPSceneContentAdapter tetheringModeForScenePersistenceIdentifier:]
  -[SBPIPSceneContentAdapter isPresentingPictureInPictureForPIPController:applicationBundleIdentifier:]
  -[SBPIPSceneContentAdapter pipController:willBeginPIPInterruptionForAssertion:]
  -[SBPIPSceneContentAdapter isPictureInPictureActiveForPIPController:]
  -[SBPIPSceneContentAdapter shouldStartPictureInPictureForPIPController:applicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:]
  -[SBPIPSceneContentAdapter isStartingStoppingOrCancellingPictureInPictureForPIPController:]
  -[SBPIPSceneContentAdapter initWithPIPContentType:sceneManager:]
  -[SBPIPSceneContentAdapter pipController:didAddContainerViewController:]
  -[SBPIPSceneContentAdapter pipController:willRemoveContainerViewController:]
  -[SBPIPSceneContentAdapter windowLevelDidChangeForPIPController:]
  -[SBPIPSceneContentAdapter windowVisibilityDidChangeForPIPController:]
  -[SBPIPSceneContentAdapter _recalculateLevelAssertions]


SBEventObserverRegistry : NSObject
  // class methods
  +[SBEventObserverRegistry sharedInstance]

  // instance methods
  -[SBEventObserverRegistry handleEvent:token:action:]
  -[SBEventObserverRegistry .cxx_destruct]
  -[SBEventObserverRegistry setValue:forState:]
  -[SBEventObserverRegistry postEventToInterestedObservers:]
  -[SBEventObserverRegistry addObserverWithToken:forEvent:]
  -[SBEventObserverRegistry removeObserverWithToken:forEvent:]


SBSpotlightTransitionAnimator : NSObject <PTSettingsKeyObserver, SBViewControllerInteractiveAnimatedTransitioning>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpotlightTransitionAnimator cancelTransition:withCompletionSpeed:completionCurve:]
  -[SBSpotlightTransitionAnimator supportsRestarting]
  -[SBSpotlightTransitionAnimator transitionDuration:]
  -[SBSpotlightTransitionAnimator .cxx_destruct]
  -[SBSpotlightTransitionAnimator percentComplete]
  -[SBSpotlightTransitionAnimator animateTransition:]
  -[SBSpotlightTransitionAnimator init]
  -[SBSpotlightTransitionAnimator finishInteractiveTransition:withCompletionSpeed:completionCurve:]
  -[SBSpotlightTransitionAnimator settings:changedValueForKey:]
  -[SBSpotlightTransitionAnimator updateTransition:withPercentComplete:]
  -[SBSpotlightTransitionAnimator _prototypeSettingsChanged]
  -[SBSpotlightTransitionAnimator _animateInteractiveTransition:]
  -[SBSpotlightTransitionAnimator _prepareToAnimate]
  -[SBSpotlightTransitionAnimator shouldMoveIntoSearch]
  -[SBSpotlightTransitionAnimator _animateIntoSearch:]
  -[SBSpotlightTransitionAnimator _cleanupAfterAnimating:]
  -[SBSpotlightTransitionAnimator _updateTransitionIntoSearch:percentComplete:]
  -[SBSpotlightTransitionAnimator _cancelInteractiveTransition:withCompletionSpeed:completionCurve:]
  -[SBSpotlightTransitionAnimator shouldMoveIntoSearchOnCancel]
  -[SBSpotlightTransitionAnimator _finishInteractiveTransition:withCompletionSpeed:completionCurve:]
  -[SBSpotlightTransitionAnimator _percentVisibleForPercentComplete:]
  -[SBSpotlightTransitionAnimator _restoreSpotlightHeaderToInitiatingViewControllerForCancellation:]
  -[SBSpotlightTransitionAnimator _restoreSpotlightHeaderToInitiatingViewController]


SBSpotlightTransitionInteractor : NSObject <SBViewControllerInteractiveTransitioning>
 @property  double completionSpeed
 @property  long long completionCurve
 @property  BOOL wantsInteractiveStart
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpotlightTransitionInteractor cancelTransition]
  -[SBSpotlightTransitionInteractor completionSpeed]
  -[SBSpotlightTransitionInteractor completionCurve]
  -[SBSpotlightTransitionInteractor setCompletionCurve:]
  -[SBSpotlightTransitionInteractor .cxx_destruct]
  -[SBSpotlightTransitionInteractor startInteractiveTransition:]
  -[SBSpotlightTransitionInteractor setCompletionSpeed:]
  -[SBSpotlightTransitionInteractor finishInteractiveTransition]
  -[SBSpotlightTransitionInteractor init]
  -[SBSpotlightTransitionInteractor updateTransition:]
  -[SBSpotlightTransitionInteractor initWithAnimator:]


SBAppClipOverlayCoordinator : NSObject
  // instance methods
  -[SBAppClipOverlayCoordinator .cxx_destruct]
  -[SBAppClipOverlayCoordinator init]
  -[SBAppClipOverlayCoordinator overlayViewControllerForBundleIdentifier:webClipIdentifier:participant:]
  -[SBAppClipOverlayCoordinator participant:didSurrenderViewController:]
  -[SBAppClipOverlayCoordinator _existingOverlayViewControllerForWebClipIdentifier:]


SBMatchMoveToIconViewSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  BOOL active

  // instance methods
  -[SBMatchMoveToIconViewSwitcherEventResponse appLayout]
  -[SBMatchMoveToIconViewSwitcherEventResponse isActive]
  -[SBMatchMoveToIconViewSwitcherEventResponse .cxx_destruct]
  -[SBMatchMoveToIconViewSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBMatchMoveToIconViewSwitcherEventResponse type]
  -[SBMatchMoveToIconViewSwitcherEventResponse initWithAppLayout:active:]


SBPIPPinchGestureRecognizer : UIPinchGestureRecognizer
 @property  unsigned long maximumNumberOfTouches
 @property  BOOL failsPastHysteresis
 @property  <SBPIPSystemGestureRecognizerDelegate> *delegate

  // instance methods
  -[SBPIPPinchGestureRecognizer .cxx_destruct]
  -[SBPIPPinchGestureRecognizer initWithTarget:action:]
  -[SBPIPPinchGestureRecognizer touchesBegan:withEvent:]
  -[SBPIPPinchGestureRecognizer setDelegate:]
  -[SBPIPPinchGestureRecognizer touchesMoved:withEvent:]
  -[SBPIPPinchGestureRecognizer reset]
  -[SBPIPPinchGestureRecognizer touchesCancelled:withEvent:]
  -[SBPIPPinchGestureRecognizer delegate]
  -[SBPIPPinchGestureRecognizer maximumNumberOfTouches]
  -[SBPIPPinchGestureRecognizer setMaximumNumberOfTouches:]
  -[SBPIPPinchGestureRecognizer touchesEnded:withEvent:]
  -[SBPIPPinchGestureRecognizer failsPastHysteresis]
  -[SBPIPPinchGestureRecognizer setFailsPastHysteresis:]


SBUIAnimationControllerAnimator : NSObject <SBViewControllerAnimatedTransitioning>
 @property  SBUIAnimationController *animationController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIAnimationControllerAnimator animationController]
  -[SBUIAnimationControllerAnimator transitionDuration:]
  -[SBUIAnimationControllerAnimator .cxx_destruct]
  -[SBUIAnimationControllerAnimator animateTransition:]
  -[SBUIAnimationControllerAnimator init]
  -[SBUIAnimationControllerAnimator initWithAnimationController:]
  -[SBUIAnimationControllerAnimator transitionAnimationFactory:]


SBHomeGestureDockSwitcherModifier : SBSwitcherModifier
 @property  BOOL currentlyTrackingDock

  // instance methods
  -[SBHomeGestureDockSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBHomeGestureDockSwitcherModifier dockWindowLevel]
  -[SBHomeGestureDockSwitcherModifier wantsDockBehaviorAssertion]
  -[SBHomeGestureDockSwitcherModifier dockProgress]
  -[SBHomeGestureDockSwitcherModifier dockWindowLevelPriority]
  -[SBHomeGestureDockSwitcherModifier dockUpdateMode]
  -[SBHomeGestureDockSwitcherModifier .cxx_destruct]
  -[SBHomeGestureDockSwitcherModifier didMoveToParentModifier:]
  -[SBHomeGestureDockSwitcherModifier _applyPrototypeSettings]
  -[SBHomeGestureDockSwitcherModifier studyLogData]
  -[SBHomeGestureDockSwitcherModifier handleGestureEvent:]
  -[SBHomeGestureDockSwitcherModifier initWithDelegate:startingEnvironmentMode:requireVerticalSwipeToTrackDock:]
  -[SBHomeGestureDockSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBHomeGestureDockSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBHomeGestureDockSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBHomeGestureDockSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBHomeGestureDockSwitcherModifier translationForAdjustedTranslation:]
  -[SBHomeGestureDockSwitcherModifier adjustedTranslationForTranslation:]
  -[SBHomeGestureDockSwitcherModifier isCurrentlyTrackingDock]
  -[SBHomeGestureDockSwitcherModifier _hasTraveledSufficientDistanceForHomeOrAppSwitcher]
  -[SBHomeGestureDockSwitcherModifier adjustedFinalDestinationForDestination:withTranslation:velocity:]
  -[SBHomeGestureDockSwitcherModifier _updateGestureTranslationAndVelocityWithEvent:]
  -[SBHomeGestureDockSwitcherModifier _rubberbandedOutOfDockHorizontally]
  -[SBHomeGestureDockSwitcherModifier _shouldPresentDockForFinalDestination:]


SBDeviceOrientationUpdateManager : NSObject
 @property  BOOL currentlyDeferringOrientationUpdates
 @property  long long lastUpdatedDeviceOrientation

  // instance methods
  -[SBDeviceOrientationUpdateManager deviceOrientationUpdateDeferralAssertionWithReason:]
  -[SBDeviceOrientationUpdateManager .cxx_destruct]
  -[SBDeviceOrientationUpdateManager isCurrentlyDeferringOrientationUpdates]
  -[SBDeviceOrientationUpdateManager _endDeferringOrientationUpdatesForAssertion:]
  -[SBDeviceOrientationUpdateManager succinctDescriptionBuilder]
  -[SBDeviceOrientationUpdateManager descriptionBuilderWithMultilinePrefix:]
  -[SBDeviceOrientationUpdateManager init]
  -[SBDeviceOrientationUpdateManager lastUpdatedDeviceOrientation]
  -[SBDeviceOrientationUpdateManager descriptionWithMultilinePrefix:]
  -[SBDeviceOrientationUpdateManager _enqueueOrientationUpdateToDeviceOrientation:]
  -[SBDeviceOrientationUpdateManager succinctDescription]
  -[SBDeviceOrientationUpdateManager _deviceOrientationUpdateNeededForOrientation:]
  -[SBDeviceOrientationUpdateManager dealloc]
  -[SBDeviceOrientationUpdateManager setLastUpdatedDeviceOrientation:]


SBDeviceOrientationUpdateDeferralAssertion : NSObject <BSInvalidatable>
 @property  SBDeviceOrientationUpdateManager *hackyBackReference
 @property  BOOL invalidated
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceOrientationUpdateDeferralAssertion initWithReason:]
  -[SBDeviceOrientationUpdateDeferralAssertion isInvalidated]
  -[SBDeviceOrientationUpdateDeferralAssertion .cxx_destruct]
  -[SBDeviceOrientationUpdateDeferralAssertion init]
  -[SBDeviceOrientationUpdateDeferralAssertion reason]
  -[SBDeviceOrientationUpdateDeferralAssertion hackyBackReference]
  -[SBDeviceOrientationUpdateDeferralAssertion dealloc]
  -[SBDeviceOrientationUpdateDeferralAssertion invalidate]
  -[SBDeviceOrientationUpdateDeferralAssertion _setHackyBackReference:]


SBSystemNotesContentPresentationContext : NSObject
 @property  SBSSystemNotesPresentationConfiguration *requestedConfiguration
 @property  unsigned long source
 @property  SBSystemNotesPositionConfiguration *positionConfiguration

  // instance methods
  -[SBSystemNotesContentPresentationContext .cxx_destruct]
  -[SBSystemNotesContentPresentationContext setSource:]
  -[SBSystemNotesContentPresentationContext requestedConfiguration]
  -[SBSystemNotesContentPresentationContext source]
  -[SBSystemNotesContentPresentationContext initWithRequestedConfiguration:source:positionConfiguration:]
  -[SBSystemNotesContentPresentationContext positionConfiguration]
  -[SBSystemNotesContentPresentationContext initWithLaunchBundleID:presentationMode:source:positionConfiguration:]
  -[SBSystemNotesContentPresentationContext setRequestedConfiguration:]
  -[SBSystemNotesContentPresentationContext setPositionConfiguration:]


SBSystemNotesPositionConfiguration : NSObject
 @property  BOOL edgeProtectEnabled
 @property  unsigned long position

  // instance methods
  -[SBSystemNotesPositionConfiguration setPosition:]
  -[SBSystemNotesPositionConfiguration position]
  -[SBSystemNotesPositionConfiguration setEdgeProtectEnabled:]
  -[SBSystemNotesPositionConfiguration edgeProtectEnabled]
  -[SBSystemNotesPositionConfiguration initWithEdgeProtectEnabled:position:]


SBTopAffordanceMenuInteractionMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTopAffordanceMenuInteractionMetric handleEvent:withContext:]


SBVoiceControlPresentationSource : NSObject
 @property  long long sourceType
 @property  BluetoothDevice *bluetoothDevice

  // class methods
  +[SBVoiceControlPresentationSource sourceFromHomeButton]
  +[SBVoiceControlPresentationSource sourceFromHeadsetButton]
  +[SBVoiceControlPresentationSource sourceFromBluetoothDevice:]

  // instance methods
  -[SBVoiceControlPresentationSource sourceType]
  -[SBVoiceControlPresentationSource .cxx_destruct]
  -[SBVoiceControlPresentationSource bluetoothDevice]
  -[SBVoiceControlPresentationSource _initWithSourceType:]


SBWindowScene : UIWindowScene
  // instance methods
  -[SBWindowScene _windowsIgnoreSceneClientOrientation]


SBApplicationSceneSpecification : UIApplicationSceneSpecification
  // instance methods
  -[SBApplicationSceneSpecification baseSceneComponentClassDictionary]
  -[SBApplicationSceneSpecification uiSceneMinimumClass]


SBCoverSheetBiometricResourceObserver : NSObject <SBUIBiometricResourceObserver, SBPearlMatchingStateProvider>
 @property  BOOL seenMatchResultSinceScreenOn
 @property  <SBUIBiometricResource> *biometricResource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBPearlMatchingStateProviderDelegate> *delegate
 @property  BOOL pearlMatchEnabledAndPossible

  // instance methods
  -[SBCoverSheetBiometricResourceObserver pearlMatchEnabledAndPossible]
  -[SBCoverSheetBiometricResourceObserver .cxx_destruct]
  -[SBCoverSheetBiometricResourceObserver setBiometricResource:]
  -[SBCoverSheetBiometricResourceObserver setDelegate:]
  -[SBCoverSheetBiometricResourceObserver reset]
  -[SBCoverSheetBiometricResourceObserver seenMatchResultSinceScreenOn]
  -[SBCoverSheetBiometricResourceObserver biometricResource]
  -[SBCoverSheetBiometricResourceObserver delegate]
  -[SBCoverSheetBiometricResourceObserver initWithBiometricResource:]
  -[SBCoverSheetBiometricResourceObserver biometricResource:observeEvent:]
  -[SBCoverSheetBiometricResourceObserver setSeenMatchResultSinceScreenOn:]


SBInsertionDodgingModifierEvent : SBDodgingModifierEvent
 @property  NSString *identifier
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size

  // instance methods
  -[SBInsertionDodgingModifierEvent .cxx_destruct]
  -[SBInsertionDodgingModifierEvent center]
  -[SBInsertionDodgingModifierEvent identifier]
  -[SBInsertionDodgingModifierEvent type]
  -[SBInsertionDodgingModifierEvent size]
  -[SBInsertionDodgingModifierEvent initWithIdentifier:center:size:]


SBPIPDefaultPositionHyperregionComposer : NSObject <SBPIPPositionHyperregionComposing>
 @property  <SBPIPPositionHyperregionComposerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPDefaultPositionHyperregionComposer .cxx_destruct]
  -[SBPIPDefaultPositionHyperregionComposer setDelegate:]
  -[SBPIPDefaultPositionHyperregionComposer init]
  -[SBPIPDefaultPositionHyperregionComposer delegate]
  -[SBPIPDefaultPositionHyperregionComposer invalidate]
  -[SBPIPDefaultPositionHyperregionComposer positionRegionsForRegions:geometry:interaction:]
  -[SBPIPDefaultPositionHyperregionComposer regionWithType:geometry:]
  -[SBPIPDefaultPositionHyperregionComposer _addRegionWithType:geometry:toMap:]
  -[SBPIPDefaultPositionHyperregionComposer _pruneRegionsMap:geometry:interaction:]


SBSwitcherSnapshotImageView : UIView
 @property  UIImage *image
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  BOOL usesNonuniformScaling
 @property  BOOL hasOpaqueContents
 @property  BOOL stretchToFillBounds
 @property  BOOL allowsEdgeAntialiasing
 @property  BOOL allowStatusBarToOverlap
 @property  long long orientationForClassicLayout

  // instance methods
  -[SBSwitcherSnapshotImageView stretchToFillBounds]
  -[SBSwitcherSnapshotImageView setUsesNonuniformScaling:]
  -[SBSwitcherSnapshotImageView setAllowsEdgeAntialiasing:]
  -[SBSwitcherSnapshotImageView allowsEdgeAntialiasing]
  -[SBSwitcherSnapshotImageView _updateCornerRadius]
  -[SBSwitcherSnapshotImageView image]
  -[SBSwitcherSnapshotImageView initWithImage:]
  -[SBSwitcherSnapshotImageView .cxx_destruct]
  -[SBSwitcherSnapshotImageView layoutSubviews]
  -[SBSwitcherSnapshotImageView _transformScale]
  -[SBSwitcherSnapshotImageView orientationForClassicLayout]
  -[SBSwitcherSnapshotImageView allowStatusBarToOverlap]
  -[SBSwitcherSnapshotImageView usesNonuniformScaling]
  -[SBSwitcherSnapshotImageView scalingTransform]
  -[SBSwitcherSnapshotImageView setCornerRadius:]
  -[SBSwitcherSnapshotImageView setMaskedCorners:]
  -[SBSwitcherSnapshotImageView _isUsingExternalClassicLayout]
  -[SBSwitcherSnapshotImageView setOrientationForClassicLayout:]
  -[SBSwitcherSnapshotImageView setHasOpaqueContents:]
  -[SBSwitcherSnapshotImageView cornerRadius]
  -[SBSwitcherSnapshotImageView setImage:]
  -[SBSwitcherSnapshotImageView setAllowStatusBarToOverlap:]
  -[SBSwitcherSnapshotImageView _transformVerticalScale]
  -[SBSwitcherSnapshotImageView setStretchToFillBounds:]
  -[SBSwitcherSnapshotImageView _transformHorizontalScale]
  -[SBSwitcherSnapshotImageView maskedCorners]
  -[SBSwitcherSnapshotImageView hasOpaqueContents]


SBDeckSwitcherPanGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction <SBHomeGrabberDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _didComplete]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _begin]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction shouldAllowAutoHideForHomeGrabberView:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _gestureType]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction shouldAllowThinStyleForHomeGrabberView:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _removeHysteresisFromTranslation]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction additionalEdgeSpacingForHomeGrabberView:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _beginWithGesture:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _finishWithGesture:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction selectedAppLayoutForGestureRecognizer:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction touchHistoryProvidingGesture]


SBFocusedAppLayoutSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBFocusedAppLayoutSwitcherModifier visibleAppLayouts]
  -[SBFocusedAppLayoutSwitcherModifier .cxx_destruct]
  -[SBFocusedAppLayoutSwitcherModifier shouldShowBackdropViewAtIndex:]
  -[SBFocusedAppLayoutSwitcherModifier handleRemovalEvent:]
  -[SBFocusedAppLayoutSwitcherModifier initWithFocusedAppLayout:]
  -[SBFocusedAppLayoutSwitcherModifier handleUpdateFocusedAppLayoutEvent:]


SBDragAndDropGestureRootSwitcherModifier : SBGestureRootSwitcherModifier
  // instance methods
  -[SBDragAndDropGestureRootSwitcherModifier handleTransitionEvent:]
  -[SBDragAndDropGestureRootSwitcherModifier .cxx_destruct]
  -[SBDragAndDropGestureRootSwitcherModifier gestureType]
  -[SBDragAndDropGestureRootSwitcherModifier initWithStartingEnvironmentMode:floatingSwitcherVisible:fullScreenAppLayout:]
  -[SBDragAndDropGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBDragAndDropGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBDragAndDropGestureRootSwitcherModifier handleSwitcherDropEvent:]


SBTestTransitionSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBTestTransitionSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBTestTransitionSwitcherModifier setshouldAsyncRenderUntilDelay:]


SBSOSEventHandler : NSObject <SOSManagerClientObserver>
 @property  BOOL running
 @property  SBFUserAuthenticationController *authenticationController
 @property  SBBacklightController *backlightController
 @property  SOSManager *sosManager
 @property  SBLockScreenManager *lockScreenManager
 @property  BOOL SOSActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSOSEventHandler sharedInstance]

  // instance methods
  -[SBSOSEventHandler _backlightController]
  -[SBSOSEventHandler _isRunning]
  -[SBSOSEventHandler _lockScreenManager]
  -[SBSOSEventHandler _setRunning:]
  -[SBSOSEventHandler .cxx_destruct]
  -[SBSOSEventHandler _forceBioAuthenticationLockoutIfAvailableWithSource:showingPasscode:]
  -[SBSOSEventHandler didUpdateCurrentSOSInitiationState:]
  -[SBSOSEventHandler isSOSActive]
  -[SBSOSEventHandler init]
  -[SBSOSEventHandler _authenticationController]
  -[SBSOSEventHandler _sosManager]
  -[SBSOSEventHandler dealloc]
  -[SBSOSEventHandler didDismissSOSBeforeSOSCall:]
  -[SBSOSEventHandler run]


SBSceneDisconnectionManager : NSObject
 @property  unsigned long numberOfRecentScenesExcludedFromDisconnection
 @property  BOOL isExecuting

  // class methods
  +[SBSceneDisconnectionManager sharedManager]

  // instance methods
  -[SBSceneDisconnectionManager sceneManager]
  -[SBSceneDisconnectionManager liveScenesForApplication:]
  -[SBSceneDisconnectionManager isExecuting]
  -[SBSceneDisconnectionManager setIsExecuting:]
  -[SBSceneDisconnectionManager positionOf:inSwitcher:]
  -[SBSceneDisconnectionManager init]
  -[SBSceneDisconnectionManager disconnectScenes:completion:]
  -[SBSceneDisconnectionManager setNumberOfRecentScenesExcludedFromDisconnection:]
  -[SBSceneDisconnectionManager shouldDisconnectScene:inSwitcher:]
  -[SBSceneDisconnectionManager numberOfRecentScenesExcludedFromDisconnection]
  -[SBSceneDisconnectionManager _beginSceneCleanupWithBackgroundedSceneEntities:]


SBPIPStashTabSuppressionPolicyProvider : NSObject <SBBannerManagerTransitionObserver, SBLayoutStateTransitionObserver, SBDeviceApplicationSceneHandleObserver, UIGestureRecognizerDelegate, SBUIActiveOrientationObserver>
 @property  SBBannerManager *bannerManager
 @property  SBMainDisplaySceneManager *sceneManager
 @property  BOOL stashTabCanBeHidden
 @property  SBDeviceApplicationSceneHandle *sceneHandleToObserve
 @property  NSTimer *reevaluatePolicyTimer
 @property  <SBPIPStashTabSuppressionPolicyProviderObserver> *observer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPStashTabSuppressionPolicyProvider activeInterfaceOrientationWillChangeToOrientation:]
  -[SBPIPStashTabSuppressionPolicyProvider sceneManager]
  -[SBPIPStashTabSuppressionPolicyProvider bannerManager:willPresentPresentable:withTransitionCoordinator:]
  -[SBPIPStashTabSuppressionPolicyProvider bannerManager]
  -[SBPIPStashTabSuppressionPolicyProvider activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBPIPStashTabSuppressionPolicyProvider layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBPIPStashTabSuppressionPolicyProvider .cxx_destruct]
  -[SBPIPStashTabSuppressionPolicyProvider sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBPIPStashTabSuppressionPolicyProvider _tapRecognized:]
  -[SBPIPStashTabSuppressionPolicyProvider bannerManager:willDismissPresentable:withTransitionCoordinator:]
  -[SBPIPStashTabSuppressionPolicyProvider observer]
  -[SBPIPStashTabSuppressionPolicyProvider setObserver:]
  -[SBPIPStashTabSuppressionPolicyProvider dealloc]
  -[SBPIPStashTabSuppressionPolicyProvider invalidate]
  -[SBPIPStashTabSuppressionPolicyProvider _startTrackingPresentable:]
  -[SBPIPStashTabSuppressionPolicyProvider _stopTrackingPresentable:]
  -[SBPIPStashTabSuppressionPolicyProvider _resetReevaluatePolicyTimer]
  -[SBPIPStashTabSuppressionPolicyProvider _updateSceneHandleToObserveForLayoutState:]
  -[SBPIPStashTabSuppressionPolicyProvider setSceneHandleToObserve:]
  -[SBPIPStashTabSuppressionPolicyProvider _reevaluatePolicy]
  -[SBPIPStashTabSuppressionPolicyProvider sceneHandleToObserve]
  -[SBPIPStashTabSuppressionPolicyProvider setStashTabCanBeHidden:]
  -[SBPIPStashTabSuppressionPolicyProvider initWithObserver:bannerManager:sceneManager:]
  -[SBPIPStashTabSuppressionPolicyProvider stashTabCanBeHidden]
  -[SBPIPStashTabSuppressionPolicyProvider reevaluatePolicyTimer]
  -[SBPIPStashTabSuppressionPolicyProvider setReevaluatePolicyTimer:]


_SBPIPEndStashTabSuppressionGestureManager : NSObject <UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SBPIPEndStashTabSuppressionGestureManager sharedInstance]

  // instance methods
  -[_SBPIPEndStashTabSuppressionGestureManager gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[_SBPIPEndStashTabSuppressionGestureManager addTarget:]
  -[_SBPIPEndStashTabSuppressionGestureManager .cxx_destruct]
  -[_SBPIPEndStashTabSuppressionGestureManager removeTarget:]
  -[_SBPIPEndStashTabSuppressionGestureManager _removeGestureRecognizers]
  -[_SBPIPEndStashTabSuppressionGestureManager _addSystemRecognizers]


SBSceneLayoutTransitionAnimationController : SBUIWorkspaceAnimationController
  // instance methods
  -[SBSceneLayoutTransitionAnimationController animationSettings]
  -[SBSceneLayoutTransitionAnimationController _canBeInterrupted]
  -[SBSceneLayoutTransitionAnimationController containerView]
  -[SBSceneLayoutTransitionAnimationController .cxx_destruct]
  -[SBSceneLayoutTransitionAnimationController _serialOverlayPreDismissalOptions]
  -[SBSceneLayoutTransitionAnimationController _getTransitionWindow]
  -[SBSceneLayoutTransitionAnimationController initWithWorkspaceTransitionRequest:]
  -[SBSceneLayoutTransitionAnimationController initWithTransitionContextProvider:layoutController:animationSettings:animationBlock:]
  -[SBSceneLayoutTransitionAnimationController initWithTransitionContextProvider:layoutController:animationSettings:stepped:animationBlock:]


SBSceneRotationTransitionAnimationController : SBSceneLayoutTransitionAnimationController
  // instance methods
  -[SBSceneRotationTransitionAnimationController _serialOverlayPreDismissalOptions]


SBApplicationAutoLaunchService : NSObject <BSDescriptionProviding, SBFMobileKeyBagObserver>
 @property  BOOL autoLaunchSynchronously
 @property  NSTimer *queuedApplicationsThrottledForRelaunchTimer
 @property  NSArray *queuedApplicationsThrottledForRelaunch
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationAutoLaunchService _noteTerminationAssertionRemovedForApplication:]
  -[SBApplicationAutoLaunchService _autoLaunchIfNecessary:forReason:]
  -[SBApplicationAutoLaunchService .cxx_destruct]
  -[SBApplicationAutoLaunchService _setAutoLaunchSynchronously:]
  -[SBApplicationAutoLaunchService succinctDescriptionBuilder]
  -[SBApplicationAutoLaunchService descriptionBuilderWithMultilinePrefix:]
  -[SBApplicationAutoLaunchService autoLaunchApplicationsIfNecessaryForStartup]
  -[SBApplicationAutoLaunchService _queuedApplicationsThrottledForRelaunch]
  -[SBApplicationAutoLaunchService _autoLaunchAppsIfNecessaryAfterFirstUnlock]
  -[SBApplicationAutoLaunchService descriptionWithMultilinePrefix:]
  -[SBApplicationAutoLaunchService succinctDescription]
  -[SBApplicationAutoLaunchService _memoryPressureWarn:]
  -[SBApplicationAutoLaunchService _invalidateQueuedApplicationsThrottledForRelaunchTimer]
  -[SBApplicationAutoLaunchService _recalculateVoIPBehaviorForApplication:withExitContext:]
  -[SBApplicationAutoLaunchService _noteKeybagDidUnlock]
  -[SBApplicationAutoLaunchService _applicationProcessStateDidChange:]
  -[SBApplicationAutoLaunchService _queuedApplicationsThrottledForRelaunchTimer]
  -[SBApplicationAutoLaunchService _memoryPressureRelieved:]
  -[SBApplicationAutoLaunchService _autoLaunchSynchronously]
  -[SBApplicationAutoLaunchService _launchNextQueuedApplicationThrottledForRelaunch]
  -[SBApplicationAutoLaunchService dealloc]
  -[SBApplicationAutoLaunchService invalidate]
  -[SBApplicationAutoLaunchService _scheduleThrottledApplicationRelaunchTimerIfNecessary]
  -[SBApplicationAutoLaunchService _initWithWorkspace:applicationController:restartManager:syncController:keybag:]
  -[SBApplicationAutoLaunchService _installedApplicationsDidChange:]
  -[SBApplicationAutoLaunchService _shouldAutoLaunchApplication:forReason:]
  -[SBApplicationAutoLaunchService _scheduleAutoLaunchForApplicationExited:withExitContext:]
  -[SBApplicationAutoLaunchService keybagDidUnlockForTheFirstTime:]


SBApplicationDropSession : NSObject
 @property  FBSSceneIdentity *sceneIdentity
 @property  NSString *targetContentIdentifier
 @property  SBApplication *application
 @property  <UIDragDropSession> *uiDragDropSession
 @property  UIDraggingSystemSession *systemSession
 @property  long long dropZones
 @property  BOOL notificationDrag
 @property  BOOL windowTearOff
 @property  SBSAppDragLocalContext *localContext
 @property  SBActivationSettings *activationSettings
 @property  NSSet *launchActions

  // class methods
  +[SBApplicationDropSession dropSessionWithWindowUIDragSession:]
  +[SBApplicationDropSession canHandleUIDragDropSession:]
  +[SBApplicationDropSession getDropSessionWithUIDropSession:sceneProvider:completion:]
  +[SBApplicationDropSession _dragItemRepresentsAcceptableFileDrag:]
  +[SBApplicationDropSession _getLocalAppDropSessionWithUIDragDropSession:dragItem:systemSession:completion:]
  +[SBApplicationDropSession _applicationForIconLeafIdentifier:]
  +[SBApplicationDropSession _getUserNotificationDropSessionWithUIDragDropSession:systemSession:dragItem:completion:]
  +[SBApplicationDropSession _getUserActivityDropSessionWithUIDragDropSession:dragItem:systemSession:targetApplication:completion:]
  +[SBApplicationDropSession _getFileDropSessionWithUIDragDropSession:dragItem:systemSession:targetApplication:completion:]
  +[SBApplicationDropSession _getURLDropSessionWithUIDragDropSession:dragItem:systemSession:targetApplication:completion:]
  +[SBApplicationDropSession _applicationProxyForIdentifiers:forURL:passingTest:error:]
  +[SBApplicationDropSession _itemProviderRequiresOpenInPlace:]
  +[SBApplicationDropSession _applicationForHandlingDragItem:URL:error:]

  // instance methods
  -[SBApplicationDropSession setTargetContentIdentifier:]
  -[SBApplicationDropSession targetContentIdentifier]
  -[SBApplicationDropSession application]
  -[SBApplicationDropSession activationSettings]
  -[SBApplicationDropSession .cxx_destruct]
  -[SBApplicationDropSession setSceneIdentity:]
  -[SBApplicationDropSession localContext]
  -[SBApplicationDropSession launchActions]
  -[SBApplicationDropSession sceneIdentity]
  -[SBApplicationDropSession uiDragDropSession]
  -[SBApplicationDropSession dropZones]
  -[SBApplicationDropSession systemSession]
  -[SBApplicationDropSession isWindowTearOff]
  -[SBApplicationDropSession initWithUIDragDropSession:systemSession:application:targetContentIdentifier:localContext:activity:activityData:]
  -[SBApplicationDropSession calculateSceneIdentityWithSceneProvider:completion:]
  -[SBApplicationDropSession initWithUIDragDropSession:systemSession:application:targetContentIdentifier:]
  -[SBApplicationDropSession initWithUIDragDropSession:systemSession:application:targetContentIdentifier:URL:requiresOpenInPlace:]
  -[SBApplicationDropSession initWithUIDragDropSession:systemSession:application:activity:activityData:]
  -[SBApplicationDropSession _initWithUIDragDropSession:application:targetContentIdentifier:]
  -[SBApplicationDropSession _isApplicationBoundToVisibleIcon]
  -[SBApplicationDropSession _activityContinuationActionFromActivity:activityData:]
  -[SBApplicationDropSession isNotificationDrag]


SBMainScreenActiveInterfaceOrientationWindow : SBWindow <BSDescriptionProviding, SBUIActiveOrientationObserver>
 @property  NSString *debugName
 @property  UIViewController *contentViewController
 @property  BOOL passesTouchesThrough
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainScreenActiveInterfaceOrientationWindow sb_autorotates]
  +[SBMainScreenActiveInterfaceOrientationWindow _traitsArbiterOrientationActuationRole]
  +[SBMainScreenActiveInterfaceOrientationWindow layoutContentViewControllerWithConstraints]
  +[SBMainScreenActiveInterfaceOrientationWindow _traitsArbiterOrientationActuationEnabled]

  // instance methods
  -[SBMainScreenActiveInterfaceOrientationWindow activeInterfaceOrientationWillChangeToOrientation:]
  -[SBMainScreenActiveInterfaceOrientationWindow _canBecomeKeyWindow]
  -[SBMainScreenActiveInterfaceOrientationWindow debugName]
  -[SBMainScreenActiveInterfaceOrientationWindow hitTest:withEvent:]
  -[SBMainScreenActiveInterfaceOrientationWindow setContentViewController:]
  -[SBMainScreenActiveInterfaceOrientationWindow activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBMainScreenActiveInterfaceOrientationWindow rootViewController]
  -[SBMainScreenActiveInterfaceOrientationWindow initWithScreen:scene:rootViewController:layoutStrategy:role:debugName:]
  -[SBMainScreenActiveInterfaceOrientationWindow isActive]
  -[SBMainScreenActiveInterfaceOrientationWindow .cxx_destruct]
  -[SBMainScreenActiveInterfaceOrientationWindow succinctDescriptionBuilder]
  -[SBMainScreenActiveInterfaceOrientationWindow setRootViewController:]
  -[SBMainScreenActiveInterfaceOrientationWindow setPassesTouchesThrough:]
  -[SBMainScreenActiveInterfaceOrientationWindow initWithRole:debugName:]
  -[SBMainScreenActiveInterfaceOrientationWindow descriptionBuilderWithMultilinePrefix:]
  -[SBMainScreenActiveInterfaceOrientationWindow passesTouchesThrough]
  -[SBMainScreenActiveInterfaceOrientationWindow descriptionWithMultilinePrefix:]
  -[SBMainScreenActiveInterfaceOrientationWindow succinctDescription]
  -[SBMainScreenActiveInterfaceOrientationWindow contentViewController]
  -[SBMainScreenActiveInterfaceOrientationWindow setHidden:]
  -[SBMainScreenActiveInterfaceOrientationWindow isDisablingInterfaceOrientationChanges]
  -[SBMainScreenActiveInterfaceOrientationWindow disableInterfaceOrientationChangesForReason:]
  -[SBMainScreenActiveInterfaceOrientationWindow enableInterfaceOrientationChangesForReason:]
  -[SBMainScreenActiveInterfaceOrientationWindow _updateInterfaceOrientationToCurrentActiveInterfaceOrientationWithDuration:]
  -[SBMainScreenActiveInterfaceOrientationWindow _updateSupportedInterfaceOrientationsForTraitArbiterActuationIfNeeded]
  -[SBMainScreenActiveInterfaceOrientationWindow effectiveRootViewControllerSupportedInterfaceOrientations]


SBSecureMainScreenActiveInterfaceOrientationWindow : SBMainScreenActiveInterfaceOrientationWindow
  // class methods
  +[SBSecureMainScreenActiveInterfaceOrientationWindow _isSecure]


_SBMainScreenActiveInterfaceOrientationWindowRootViewController : SBFTouchPassThroughViewController
 @property  unsigned long supportedInterfaceOrientations
 @property  UIViewController *contentViewController

  // instance methods
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController setContentViewController:]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController _viewControllerForSupportedInterfaceOrientationsWithDismissCheck:]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController .cxx_destruct]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController shouldAutorotate]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController contentViewController]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController setSupportedInterfaceOrientations:]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController supportedInterfaceOrientations]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController _canShowWhileLocked]


SBWorkspaceTransientOverlayTransitionContext : SBWorkspaceTransitionContext
 @property  BOOL animated
 @property  BOOL shouldDismissSiriUponPresentation
 @property  BOOL shouldPreserveAppSwitcher
 @property  SBTransientOverlayPresentationManager *presentationManager
 @property  SBWorkspaceTransientOverlay *transientOverlay
 @property  long long transitionType
 @property  BSProcessHandle *originatingProcess

  // instance methods
  -[SBWorkspaceTransientOverlayTransitionContext presentationManager]
  -[SBWorkspaceTransientOverlayTransitionContext compactDescriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceTransientOverlayTransitionContext setPresentationManager:]
  -[SBWorkspaceTransientOverlayTransitionContext transitionType]
  -[SBWorkspaceTransientOverlayTransitionContext setAnimated:]
  -[SBWorkspaceTransientOverlayTransitionContext setTransitionType:]
  -[SBWorkspaceTransientOverlayTransitionContext isAnimated]
  -[SBWorkspaceTransientOverlayTransitionContext transientOverlay]
  -[SBWorkspaceTransientOverlayTransitionContext setShouldDismissSiriUponPresentation:]
  -[SBWorkspaceTransientOverlayTransitionContext .cxx_destruct]
  -[SBWorkspaceTransientOverlayTransitionContext descriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceTransientOverlayTransitionContext init]
  -[SBWorkspaceTransientOverlayTransitionContext setShouldPreserveAppSwitcher:]
  -[SBWorkspaceTransientOverlayTransitionContext setOriginatingProcess:]
  -[SBWorkspaceTransientOverlayTransitionContext originatingProcess]
  -[SBWorkspaceTransientOverlayTransitionContext shouldPreserveAppSwitcher]
  -[SBWorkspaceTransientOverlayTransitionContext shouldDismissSiriUponPresentation]
  -[SBWorkspaceTransientOverlayTransitionContext setTransientOverlay:]


SBCoverSheetSpotlightPresenter : NSObject <SPUIRemoteSearchViewDelegate, PTSettingsKeyObserver, SBCoverSheetSpotlightViewControllerDelegate, CSCoverSheetSpotlightPresenting>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetSpotlightPresenter dismissSearchView]
  -[SBCoverSheetSpotlightPresenter dismissSpotlightAnimated:]
  -[SBCoverSheetSpotlightPresenter _rubberbandingOffsetForContentOffset:]
  -[SBCoverSheetSpotlightPresenter _setUpSearchAnimationSettings]
  -[SBCoverSheetSpotlightPresenter .cxx_destruct]
  -[SBCoverSheetSpotlightPresenter scrollViewWillEndDragging:]
  -[SBCoverSheetSpotlightPresenter scrollViewDidScroll:]
  -[SBCoverSheetSpotlightPresenter initWithDelegate:]
  -[SBCoverSheetSpotlightPresenter scrollViewWillBeginDragging:]
  -[SBCoverSheetSpotlightPresenter settings:changedValueForKey:]
  -[SBCoverSheetSpotlightPresenter presentSpotlightAnimated:]
  -[SBCoverSheetSpotlightPresenter _spotlightPresentationProgressForOffset:]
  -[SBCoverSheetSpotlightPresenter setSearchState:withMode:]
  -[SBCoverSheetSpotlightPresenter coverSheetSpotlightViewControllerShouldDismiss:animated:]
  -[SBCoverSheetSpotlightPresenter isSpotlightPresented]


_SBHomeScreenFolderDelegate : NSObject
 @property  <SBFolderControllerDelegate> *forwardingTarget

  // instance methods
  -[_SBHomeScreenFolderDelegate forwardingTarget]
  -[_SBHomeScreenFolderDelegate .cxx_destruct]
  -[_SBHomeScreenFolderDelegate backgroundViewForDockForRootFolderController:]
  -[_SBHomeScreenFolderDelegate forwardingTargetForSelector:]
  -[_SBHomeScreenFolderDelegate respondsToSelector:]
  -[_SBHomeScreenFolderDelegate setForwardingTarget:]


SBPreviewFloatingDockViewController : SBFloatingDockViewController
  // instance methods
  -[SBPreviewFloatingDockViewController _canShowWhileLocked]


SBHomeScreenPreviewView : UIView <SBIconViewProviding, SBIconViewDelegate>
 @property  SBHIconManager *iconManager
 @property  SBWallpaperController *wallpaperController
 @property  SBFloatingDockViewController *floatingDockViewController
 @property  unsigned long snapshotOptions
 @property  <SBDockOffscreenFractionModifying> *dockOffscreenModifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeScreenPreviewView configureIconView:forIcon:]
  -[SBHomeScreenPreviewView wallpaperController]
  -[SBHomeScreenPreviewView .cxx_destruct]
  -[SBHomeScreenPreviewView layoutSubviews]
  -[SBHomeScreenPreviewView iconManager]
  -[SBHomeScreenPreviewView isIconViewRecycled:]
  -[SBHomeScreenPreviewView dequeueReusableIconViewOfClass:]
  -[SBHomeScreenPreviewView floatingDockViewController]
  -[SBHomeScreenPreviewView recycleIconView:]
  -[SBHomeScreenPreviewView iconView:backgroundViewForComponentsOfType:]
  -[SBHomeScreenPreviewView behaviorDelegateForIconView:]
  -[SBHomeScreenPreviewView initWithFrame:iconController:wallpaperController:options:wallpaperImage:pageIndexOffset:rootFolder:]
  -[SBHomeScreenPreviewView snapshotOptions]
  -[SBHomeScreenPreviewView dockOffscreenModifier]


SBSiriHardwareButtonEventsOnlyButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonInteraction>
 @property  long long siriButtonIdentifier
 @property  SBSiriHardwareButtonInteraction *parentSiriInteraction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSiriHardwareButtonEventsOnlyButtonInteraction hardwareButtonInteractionForHomeButtonForwardingToInteraction:]

  // instance methods
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction .cxx_destruct]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction siriButtonIdentifier]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction consumeSinglePressUp]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction setSiriButtonIdentifier:]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction setParentSiriInteraction:]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction parentSiriInteraction]


SBTodayIconListLayoutDelegate : NSObject <SBIconListLayoutDelegate>
 @property  NSMutableDictionary *catchupProperties
 @property  NSMutableDictionary *catchupTimers
 @property  double collapseHeight
 @property  double distanceToApex
 @property  double revealProgressMaxTranslation
 @property  SBIconListView *iconListView
 @property  UIView *containerView
 @property  UIScrollView *scrollView
 @property  BOOL carouselLayout
 @property  {UIEdgeInsets=dddd} carouselInsets
 @property  {UIEdgeInsets=dddd} additionalLayoutInsets
 @property  BOOL revealed
 @property  double revealProgress
 @property  double dismissProgress
 @property  BOOL visuallyRevealed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTodayIconListLayoutDelegate isRevealed]
  -[SBTodayIconListLayoutDelegate setRevealProgress:]
  -[SBTodayIconListLayoutDelegate isCarouselLayout]
  -[SBTodayIconListLayoutDelegate setRevealed:]
  -[SBTodayIconListLayoutDelegate setScrollView:]
  -[SBTodayIconListLayoutDelegate initWithIconListView:]
  -[SBTodayIconListLayoutDelegate revealProgress]
  -[SBTodayIconListLayoutDelegate _reorderSubviewsForCarouselLayoutInListView:]
  -[SBTodayIconListLayoutDelegate setAdditionalLayoutInsets:]
  -[SBTodayIconListLayoutDelegate scrollView]
  -[SBTodayIconListLayoutDelegate setCatchupProperties:]
  -[SBTodayIconListLayoutDelegate additionalLayoutInsets]
  -[SBTodayIconListLayoutDelegate containerView]
  -[SBTodayIconListLayoutDelegate .cxx_destruct]
  -[SBTodayIconListLayoutDelegate iconListView:originForIconCoordinate:metrics:proposedOrigin:]
  -[SBTodayIconListLayoutDelegate setCatchupTimers:]
  -[SBTodayIconListLayoutDelegate catchupProperties]
  -[SBTodayIconListLayoutDelegate revealProgressMaxTranslation]
  -[SBTodayIconListLayoutDelegate iconListView:centerForIconCoordinate:metrics:proposedCenter:]
  -[SBTodayIconListLayoutDelegate _layoutFocusGuideViewsInListView:]
  -[SBTodayIconListLayoutDelegate iconListView]
  -[SBTodayIconListLayoutDelegate setVisuallyRevealed:animated:]
  -[SBTodayIconListLayoutDelegate dismissProgress]
  -[SBTodayIconListLayoutDelegate setContainerView:]
  -[SBTodayIconListLayoutDelegate iconListViewDidLayoutIcons:]
  -[SBTodayIconListLayoutDelegate distanceToApex]
  -[SBTodayIconListLayoutDelegate setCarouselLayout:]
  -[SBTodayIconListLayoutDelegate carouselInsets]
  -[SBTodayIconListLayoutDelegate _iconListView:originYForIconCoordinate:metrics:adjustedForRevealProgress:]
  -[SBTodayIconListLayoutDelegate isVisuallyRevealed]
  -[SBTodayIconListLayoutDelegate layoutAttributesForIconCoordinate:metrics:adjustedForRevealProgress:]
  -[SBTodayIconListLayoutDelegate iconListView:willLayoutIconView:]
  -[SBTodayIconListLayoutDelegate unadjustedOriginYForIconCoordinate:]
  -[SBTodayIconListLayoutDelegate setVisuallyRevealed:]
  -[SBTodayIconListLayoutDelegate unadjustedBoundsForIconCoordinate:]
  -[SBTodayIconListLayoutDelegate iconListView:sizeThatFits:metrics:proposedSize:]
  -[SBTodayIconListLayoutDelegate collapseHeight]
  -[SBTodayIconListLayoutDelegate setCarouselInsets:]
  -[SBTodayIconListLayoutDelegate iconListView:rowAtPoint:metrics:proposedRow:]
  -[SBTodayIconListLayoutDelegate catchupTimers]
  -[SBTodayIconListLayoutDelegate setDismissProgress:]


SBReturnToLockscreenWorkspaceTransaction : SBActivateAppUnderLockScreenWorkspaceTransaction
  // instance methods
  -[SBReturnToLockscreenWorkspaceTransaction _didComplete]
  -[SBReturnToLockscreenWorkspaceTransaction .cxx_destruct]
  -[SBReturnToLockscreenWorkspaceTransaction _animationDidFinish]
  -[SBReturnToLockscreenWorkspaceTransaction _setupAnimation]
  -[SBReturnToLockscreenWorkspaceTransaction initWithTransitionRequest:toLockScreenEnvironment:]
  -[SBReturnToLockscreenWorkspaceTransaction _animationWillBegin:]
  -[SBReturnToLockscreenWorkspaceTransaction _serialOverlayPreDismissalOptions]


SBMoveFloatingOverFullScreenGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBMoveFloatingOverFullScreenGestureSwitcherModifier handleTransitionEvent:]
  -[SBMoveFloatingOverFullScreenGestureSwitcherModifier asyncRenderingAttributesForAppLayout:]


SBVolumeButtonEventMapper : NSObject <SBUIActiveOrientationObserver>
 @property  unsigned long buttonsEdge
 @property  long long effectiveInterfaceOrientation
 @property  long long layoutDirection
 @property  BOOL volumeButtonRemappingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBVolumeButtonEventMapper isVolumeButtonRemappingSupported]
  +[SBVolumeButtonEventMapper _shouldInvertVolumeButtonsForRTLTopEdgePadInInterfaceOrientation:]
  +[SBVolumeButtonEventMapper _shouldInvertVolumeButtonsForLTRTopEdgePadInInterfaceOrientation:]
  +[SBVolumeButtonEventMapper _shouldInvertVolumeButtonsForRTLRightEdgePadInInterfaceOrientation:]
  +[SBVolumeButtonEventMapper _shouldInvertVolumeButtonsForLTRRightEdgePadInInterfaceOrientation:]
  +[SBVolumeButtonEventMapper shouldInvertVolumeButtonsOnEdge:forInterfaceOrientation:userInterfaceLayoutDirection:]

  // instance methods
  -[SBVolumeButtonEventMapper activeInterfaceOrientationWillChangeToOrientation:]
  -[SBVolumeButtonEventMapper layoutDirection]
  -[SBVolumeButtonEventMapper activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBVolumeButtonEventMapper setLayoutDirection:]
  -[SBVolumeButtonEventMapper init]
  -[SBVolumeButtonEventMapper effectiveInterfaceOrientation]
  -[SBVolumeButtonEventMapper dealloc]
  -[SBVolumeButtonEventMapper isVolumeButtonEventInvertible:withPressType:]
  -[SBVolumeButtonEventMapper shouldInvertVolumeButtonsForEvent:withPressType:]
  -[SBVolumeButtonEventMapper _hardwareDefaultsChanged]
  -[SBVolumeButtonEventMapper setVolumeButtonRemappingEnabled:]
  -[SBVolumeButtonEventMapper _resetEffectiveInterfaceOrientation]
  -[SBVolumeButtonEventMapper isPreventingEffectiveInterfaceOrientationChanges]
  -[SBVolumeButtonEventMapper isVolumeButtonRemappingEnabled]
  -[SBVolumeButtonEventMapper buttonsEdge]
  -[SBVolumeButtonEventMapper setButtonsEdge:]
  -[SBVolumeButtonEventMapper setEffectiveInterfaceOrientation:]


SBActivityAttribution : NSObject <NSCopying, BSDescriptionProviding>
 @property  int pid
 @property  {?=[8I]} auditToken
 @property  NSString *bundleIdentifier
 @property  NSString *displayName
 @property  NSString *attributionGroup
 @property  NSString *bundleIdentifierMatchingDisplayName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBActivityAttribution auditToken]
  -[SBActivityAttribution displayName]
  -[SBActivityAttribution bundleIdentifier]
  -[SBActivityAttribution initWithSTActivityAttribution:]
  -[SBActivityAttribution .cxx_destruct]
  -[SBActivityAttribution hasSameProcessAsAttribution:]
  -[SBActivityAttribution succinctDescriptionBuilder]
  -[SBActivityAttribution attributionGroup]
  -[SBActivityAttribution descriptionBuilderWithMultilinePrefix:]
  -[SBActivityAttribution isEqual:]
  -[SBActivityAttribution descriptionWithMultilinePrefix:]
  -[SBActivityAttribution succinctDescription]
  -[SBActivityAttribution pid]
  -[SBActivityAttribution bundleIdentifierMatchingDisplayName]
  -[SBActivityAttribution _resolvedFormattedString:forApplication:]
  -[SBActivityAttribution copyWithZone:]
  -[SBActivityAttribution _prepareDisplayName]
  -[SBActivityAttribution initWithSBActivityAttribution:]


SBElasticBrightnessViewController : SBElasticValueViewController
  // instance methods
  -[SBElasticBrightnessViewController initWithDataSource:]
  -[SBElasticBrightnessViewController log]
  -[SBElasticBrightnessViewController viewDidLoad]
  -[SBElasticBrightnessViewController dataSource]
  -[SBElasticBrightnessViewController sliderAccessibilityIdentifier]
  -[SBElasticBrightnessViewController layoutAxisForInterfaceOrientation:]
  -[SBElasticBrightnessViewController noteContinuousValueInteractionWillBegin]
  -[SBElasticBrightnessViewController noteContinuousValueInteractionDidEnd]
  -[SBElasticBrightnessViewController _debugHandleNextRoute]
  -[SBElasticBrightnessViewController _debugHandleResetRoute]
  -[SBElasticBrightnessViewController updateActiveRouteDisplay:]


SBShelfIconBounceTransitionModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBShelfIconBounceTransitionModifier appLayoutsToResignActive]
  -[SBShelfIconBounceTransitionModifier bounceIconInitialFrame]
  -[SBShelfIconBounceTransitionModifier keyboardSuppressionMode]
  -[SBShelfIconBounceTransitionModifier .cxx_destruct]
  -[SBShelfIconBounceTransitionModifier asyncRenderingAttributesForAppLayout:]
  -[SBShelfIconBounceTransitionModifier bounceIconGenerationCountForCurrentCount:]
  -[SBShelfIconBounceTransitionModifier bounceIconBundleIdentifier]
  -[SBShelfIconBounceTransitionModifier initWithTransitionID:shelf:]


SBApplicationShortcutPolluterRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationShortcutPolluterRecipe load]

  // instance methods
  -[SBApplicationShortcutPolluterRecipe title]
  -[SBApplicationShortcutPolluterRecipe handleVolumeIncrease]
  -[SBApplicationShortcutPolluterRecipe handleVolumeDecrease]


SBPIPStashableWrapperViewController : UIViewController <PTSettingsKeyPathObserver>
 @property  <SBPIPStashableWrapperViewControllerDelegate> *delegate
 @property  UIView *contentContainerView
 @property  BOOL interactivelyResizing
 @property  {CGSize=dd} minimumStashTabSize
 @property  BOOL stashed
 @property  BOOL isStashTabHidden
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPStashableWrapperViewController settings:changedValueForKeyPath:]
  -[SBPIPStashableWrapperViewController preferredInterfaceOrientationForPresentation]
  -[SBPIPStashableWrapperViewController preferredContentSize]
  -[SBPIPStashableWrapperViewController viewWillLayoutSubviews]
  -[SBPIPStashableWrapperViewController .cxx_destruct]
  -[SBPIPStashableWrapperViewController viewDidLoad]
  -[SBPIPStashableWrapperViewController setDelegate:]
  -[SBPIPStashableWrapperViewController _continuousCornerRadius]
  -[SBPIPStashableWrapperViewController stashed]
  -[SBPIPStashableWrapperViewController delegate]
  -[SBPIPStashableWrapperViewController dealloc]
  -[SBPIPStashableWrapperViewController contentContainerView]
  -[SBPIPStashableWrapperViewController loadView]
  -[SBPIPStashableWrapperViewController setInteractivelyResizing:]
  -[SBPIPStashableWrapperViewController isInteractivelyResizing]
  -[SBPIPStashableWrapperViewController setStashProgress:]
  -[SBPIPStashableWrapperViewController _handleTapWhileStashedGestureRecognizer:]
  -[SBPIPStashableWrapperViewController setStashed:]
  -[SBPIPStashableWrapperViewController _resetStashTabViewsIfPossible]
  -[SBPIPStashableWrapperViewController setMinimumStashTabSize:]
  -[SBPIPStashableWrapperViewController _setStashedTabHidden:left:]
  -[SBPIPStashableWrapperViewController _addMaskViewSubviewIfNeeded]
  -[SBPIPStashableWrapperViewController _layoutStashTabViewsIfNeeded]
  -[SBPIPStashableWrapperViewController _setPortalActive:left:]
  -[SBPIPStashableWrapperViewController _setStashMaskActive:]
  -[SBPIPStashableWrapperViewController _updateContentCornerRadiusForMaskActive:]
  -[SBPIPStashableWrapperViewController isStashTabHidden]
  -[SBPIPStashableWrapperViewController minimumStashTabSize]
  -[SBPIPStashableWrapperViewController _setStashProgress:animated:]
  -[SBPIPStashableWrapperViewController setStashed:animated:]
  -[SBPIPStashableWrapperViewController _newShadowViewWithSettings:]
  -[SBPIPStashableWrapperViewController _applyDropShadowSettings:toView:]
  -[SBPIPStashableWrapperViewController initWithContentViewController:cornerRadius:stashVisualSettings:shadowSettings:]
  -[SBPIPStashableWrapperViewController setStashTabHidden:left:withSpringBehavior:completion:]


SBHomeScreenBackdropDarkTintView : SBHomeScreenBackdropViewBase
  // instance methods
  -[SBHomeScreenBackdropDarkTintView endRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropDarkTintView .cxx_destruct]
  -[SBHomeScreenBackdropDarkTintView beginRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropDarkTintView isOpaque]
  -[SBHomeScreenBackdropDarkTintView endRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropDarkTintView initWithFrame:]
  -[SBHomeScreenBackdropDarkTintView setBlurProgress:behaviorMode:completion:]
  -[SBHomeScreenBackdropDarkTintView beginRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropDarkTintView _updateDarkTintViewHidden]


SBDodgingItem : NSObject <NSCopying>
 @property  <SBDodgingItemDelegate> *delegate
 @property  UIView *view
 @property  {CGPoint=dd} center
 @property  {CGSize=dd} size
 @property  {CGSize=dd} containerSize
 @property  <UICoordinateSpace> *containerCoordinateSpace
 @property  NSArray *otherDodgingIdentifiers
 @property  SBDodgingItemPreference *preference
 @property  NSString *uniqueIdentifier

  // instance methods
  -[SBDodgingItem uniqueIdentifier]
  -[SBDodgingItem setCenter:]
  -[SBDodgingItem .cxx_destruct]
  -[SBDodgingItem center]
  -[SBDodgingItem preference]
  -[SBDodgingItem view]
  -[SBDodgingItem setSize:]
  -[SBDodgingItem isEqual:]
  -[SBDodgingItem setContainerSize:]
  -[SBDodgingItem containerCoordinateSpace]
  -[SBDodgingItem delegate]
  -[SBDodgingItem size]
  -[SBDodgingItem invalidate]
  -[SBDodgingItem copyWithZone:]
  -[SBDodgingItem containerSize]
  -[SBDodgingItem setPreference:]
  -[SBDodgingItem setNeedsUpdateAnimated:]
  -[SBDodgingItem otherDodgingIdentifiers]
  -[SBDodgingItem initWithUniqueIdentifier:view:delegate:dodgingResolverViewController:]
  -[SBDodgingItem setContainerCoordinateSpace:]
  -[SBDodgingItem setOtherDodgingIdentifiers:]


SBAppViewController : UIViewController <SBDeviceApplicationSceneHandleObserver, SBApplicationHosting, SBApplicationSceneViewControlling, BSInvalidatable>
 @property  <SBAppViewControllerDelegate> *delegate
 @property  BOOL automatesLifecycle
 @property  long long requestedMode
 @property  long long currentMode
 @property  SBApplicationSceneView *appView
 @property  BOOL ignoresOcclusions
 @property  NSSet *actionsToDeliver
 @property  BOOL wantsSecureRendering
 @property  BOOL placeholderContentEnabled
 @property  SBActivationSettings *supplementalActivationSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBApplicationSceneHandle *sceneHandle
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBAppViewController sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBAppViewController _installedAppsDidChange:]
  -[SBAppViewController overrideStatusBarStyle]
  -[SBAppViewController sceneHandle:didUpdateContentState:]
  -[SBAppViewController setActionsToDeliver:]
  -[SBAppViewController setApplicationSceneStatusBarDelegate:]
  -[SBAppViewController _sendActions:]
  -[SBAppViewController statusBarAlpha]
  -[SBAppViewController applicationSceneStatusBarDelegate]
  -[SBAppViewController contentReferenceSize]
  -[SBAppViewController currentMode]
  -[SBAppViewController displayMode]
  -[SBAppViewController sceneHandle]
  -[SBAppViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBAppViewController supplementalActivationSettings]
  -[SBAppViewController actionsToDeliver]
  -[SBAppViewController setCustomContentView:]
  -[SBAppViewController _setCurrentMode:]
  -[SBAppViewController setAutomatesLifecycle:]
  -[SBAppViewController _transformHostedAppViewForRotationToOrientation:]
  -[SBAppViewController .cxx_destruct]
  -[SBAppViewController setSupplementalActivationSettings:]
  -[SBAppViewController canHostAnApp]
  -[SBAppViewController hostedAppSceneHandles]
  -[SBAppViewController conformsToSBApplicationHosting]
  -[SBAppViewController setDelegate:]
  -[SBAppViewController viewDidAppear:]
  -[SBAppViewController setPlaceholderContentEnabled:]
  -[SBAppViewController setWantsSecureRendering:]
  -[SBAppViewController isHostingAnApp]
  -[SBAppViewController _updateForAppearanceState:]
  -[SBAppViewController hostedAppWillRotateToInterfaceOrientation:]
  -[SBAppViewController willMoveToParentViewController:]
  -[SBAppViewController hostedAppSceneHandle]
  -[SBAppViewController newSnapshot]
  -[SBAppViewController wantsSecureRendering]
  -[SBAppViewController automatesLifecycle]
  -[SBAppViewController ignoresOcclusions]
  -[SBAppViewController customContentView]
  -[SBAppViewController _deactivateHostedApp]
  -[SBAppViewController appView]
  -[SBAppViewController _createSceneViewController]
  -[SBAppViewController viewWillDisappear:]
  -[SBAppViewController requestedMode]
  -[SBAppViewController viewDidLayoutSubviews]
  -[SBAppViewController viewWillAppear:]
  -[SBAppViewController initWithIdentifier:andApplicationSceneEntity:]
  -[SBAppViewController contentInterfaceOrientation]
  -[SBAppViewController delegate]
  -[SBAppViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBAppViewController sceneHandle:didDestroyScene:]
  -[SBAppViewController setRequestedMode:]
  -[SBAppViewController containerContentWrapperInterfaceOrientationChangedTo:]
  -[SBAppViewController _configureApplicationSceneEntity:deliveringActions:]
  -[SBAppViewController setDisplayMode:animationFactory:completion:]
  -[SBAppViewController dealloc]
  -[SBAppViewController placeholderContentContext]
  -[SBAppViewController invalidate]
  -[SBAppViewController setIgnoresOcclusions:]
  -[SBAppViewController _createSceneUpdateTransactionForApplicationSceneEntity:deliveringActions:]
  -[SBAppViewController newSnapshotView]
  -[SBAppViewController setPlaceholderContentContext:]
  -[SBAppViewController newSnapshotViewOnQueue:withCompletion:]
  -[SBAppViewController viewDidDisappear:]
  -[SBAppViewController placeholderContentEnabled]
  -[SBAppViewController _activateApp]
  -[SBAppViewController _destroySceneViewController]
  -[SBAppViewController _canShowWhileLocked]


SBPriorityDeviceApplicationSceneViewController : SBDeviceApplicationSceneViewController
  // instance methods
  -[SBPriorityDeviceApplicationSceneViewController sceneViewPresentationPriority:]


SBTransientOverlayDefaultTransitionContextProvider : NSObject <SBTransientOverlayTransitionContextProviding>
 @property  BOOL animated
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTransientOverlayDefaultTransitionContextProvider completeTransition:]
  -[SBTransientOverlayDefaultTransitionContextProvider setAnimated:]
  -[SBTransientOverlayDefaultTransitionContextProvider isAnimated]
  -[SBTransientOverlayDefaultTransitionContextProvider .cxx_destruct]
  -[SBTransientOverlayDefaultTransitionContextProvider performAlongsideTransitions]
  -[SBTransientOverlayDefaultTransitionContextProvider transitionAlongsideUsingBlock:completion:]


SBBadgeCountRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBadgeCountRecipe load]

  // instance methods
  -[SBBadgeCountRecipe title]
  -[SBBadgeCountRecipe handleVolumeIncrease]
  -[SBBadgeCountRecipe handleVolumeDecrease]
  -[SBBadgeCountRecipe _changeBadge:]


SBProactiveLibraryCategoryMapProviderSource : NSObject <SBHLibraryCategoryMapProviderSource>
 @property  <SBHLibraryCategoryMapProviderSourceDelegate> *delegate
 @property  NSString *sourceName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProactiveLibraryCategoryMapProviderSource sourceName]
  -[SBProactiveLibraryCategoryMapProviderSource .cxx_destruct]
  -[SBProactiveLibraryCategoryMapProviderSource setDelegate:]
  -[SBProactiveLibraryCategoryMapProviderSource init]
  -[SBProactiveLibraryCategoryMapProviderSource delegate]
  -[SBProactiveLibraryCategoryMapProviderSource handleUpdateCategoriesNotification:]
  -[SBProactiveLibraryCategoryMapProviderSource requestLibraryCategoryMapWithOptions:existingLibraryCategoryMap:forbiddenApplicationIdentifiers:sessionId:queue:completion:]


SBWorkspaceTransientOverlay : SBWorkspaceEntity
 @property  SBTransientOverlayViewController *viewController

  // instance methods
  -[SBWorkspaceTransientOverlay viewController]
  -[SBWorkspaceTransientOverlay initWithViewController:]
  -[SBWorkspaceTransientOverlay .cxx_destruct]
  -[SBWorkspaceTransientOverlay _generator]
  -[SBWorkspaceTransientOverlay copyWithZone:]


SBWipeSnapshotManifestTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWipeSnapshotManifestTestRecipe load]

  // instance methods
  -[SBWipeSnapshotManifestTestRecipe title]
  -[SBWipeSnapshotManifestTestRecipe handleVolumeIncrease]
  -[SBWipeSnapshotManifestTestRecipe handleVolumeDecrease]


SBHomeScreenView : UIView
 @property  SBFStatusBarLegibilityView *statusBarLegibilityView

  // instance methods
  -[SBHomeScreenView .cxx_destruct]
  -[SBHomeScreenView setFrame:]
  -[SBHomeScreenView layoutSubviews]
  -[SBHomeScreenView statusBarLegibilityView]
  -[SBHomeScreenView initWithFrame:]
  -[SBHomeScreenView didMoveToWindow]


SBHomeScreenViewController : UIViewController
 @property  SBFloatingDockBehaviorAssertion *widgetEditFloatingDockAssertion
 @property  <BSInvalidatable> *widgetEditViewControllerOrientationUpdateDeferralAssertion
 @property  BOOL iconControllerHidden
 @property  SBIconController *iconController
 @property  SBHIconManager *iconManager
 @property  SBUIController *UIController
 @property  _UILegibilitySettings *legibilitySettings
 @property  BOOL homeScreenAutorotatesEvenWhenIconIsDragging

  // instance methods
  -[SBHomeScreenViewController initWithIconController:UIController:]
  -[SBHomeScreenViewController _relinquishForceTouchOrientationUpdateDeferralAssertionForIconView:]
  -[SBHomeScreenViewController initWithCoder:]
  -[SBHomeScreenViewController _acquireForceTouchOrientationUpdateDeferralAssertionForIconView:]
  -[SBHomeScreenViewController _appIconForceTouchControllerWillPresentNotification:]
  -[SBHomeScreenViewController _prepareForTransitionToSize:andInterfaceOrientation:withTransitionCoordinator:]
  -[SBHomeScreenViewController setIconControllerHidden:]
  -[SBHomeScreenViewController setWidgetEditViewControllerOrientationUpdateDeferralAssertion:]
  -[SBHomeScreenViewController setNeedsStatusBarAppearanceUpdate]
  -[SBHomeScreenViewController nudgeIconInterfaceOrientation:duration:]
  -[SBHomeScreenViewController _acquireForceTouchWindowLevelAssertionForIconView:]
  -[SBHomeScreenViewController _cleanupAfterTransitionToSize:fromInterfaceOrientation:withTransitionContext:]
  -[SBHomeScreenViewController .cxx_destruct]
  -[SBHomeScreenViewController iconManager]
  -[SBHomeScreenViewController _appIconForceTouchControllerDidDismissNotification:]
  -[SBHomeScreenViewController _widgetEditViewDidDisappearImplementation]
  -[SBHomeScreenViewController setLegibilitySettings:]
  -[SBHomeScreenViewController homeScreenAutorotatesEvenWhenIconIsDragging]
  -[SBHomeScreenViewController viewDidAppear:]
  -[SBHomeScreenViewController initWithNibName:bundle:]
  -[SBHomeScreenViewController setAllowIconRotation:forReason:]
  -[SBHomeScreenViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBHomeScreenViewController _relinquishForceTouchWindowLevelAssertionForIconView:]
  -[SBHomeScreenViewController shouldAutorotate]
  -[SBHomeScreenViewController _widgetEditViewWillAppear:]
  -[SBHomeScreenViewController UIController]
  -[SBHomeScreenViewController setHomeScreenAutorotatesEvenWhenIconIsDragging:]
  -[SBHomeScreenViewController viewDidLayoutSubviews]
  -[SBHomeScreenViewController viewWillAppear:]
  -[SBHomeScreenViewController isIconControllerHidden]
  -[SBHomeScreenViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBHomeScreenViewController widgetEditViewControllerOrientationUpdateDeferralAssertion]
  -[SBHomeScreenViewController widgetEditFloatingDockAssertion]
  -[SBHomeScreenViewController _dismissAllIconForceTouchControllersDidFire:]
  -[SBHomeScreenViewController _animateTransitionToSize:andInterfaceOrientation:withTransitionContext:]
  -[SBHomeScreenViewController _autorotationPreventionReasons]
  -[SBHomeScreenViewController homeScreenView]
  -[SBHomeScreenViewController iconController]
  -[SBHomeScreenViewController loadView]
  -[SBHomeScreenViewController supportedInterfaceOrientations]
  -[SBHomeScreenViewController viewDidDisappear:]
  -[SBHomeScreenViewController _widgetEditViewDidDisappear:]
  -[SBHomeScreenViewController setWidgetEditFloatingDockAssertion:]
  -[SBHomeScreenViewController disableAnimationForNextIconRotation]
  -[SBHomeScreenViewController legibilitySettings]


SBWorkspaceTransaction : SBTransaction
 @property  SBLayoutStateTransitionCoordinator *layoutStateTransitionCoordinator
 @property  SBSceneManager *sceneManager
 @property  BOOL clearsCompletionAsynchronously
 @property  FBSDisplayIdentity *displayIdentity
 @property  FBSDisplayConfiguration *displayConfiguration
 @property  SBWorkspaceTransitionRequest *transitionRequest
 @property  SBSceneLayoutViewController *layoutController
 @property  SBUIAnimationController *suggestedAnimationController

  // instance methods
  -[SBWorkspaceTransaction _customizedDescriptionProperties]
  -[SBWorkspaceTransaction sceneManager]
  -[SBWorkspaceTransaction _didComplete]
  -[SBWorkspaceTransaction displayConfiguration]
  -[SBWorkspaceTransaction displayIdentity]
  -[SBWorkspaceTransaction .cxx_destruct]
  -[SBWorkspaceTransaction init]
  -[SBWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBWorkspaceTransaction initWithTransitionRequest:]
  -[SBWorkspaceTransaction layoutStateTransitionCoordinator]
  -[SBWorkspaceTransaction layoutController]
  -[SBWorkspaceTransaction transitionRequest]
  -[SBWorkspaceTransaction _isInterruptingForTransitionRequest]
  -[SBWorkspaceTransaction interruptForTransitionRequest:]
  -[SBWorkspaceTransaction clearsCompletionAsynchronously]
  -[SBWorkspaceTransaction setSuggestedAnimationController:]
  -[SBWorkspaceTransaction _willInterruptForTransitionRequest:]
  -[SBWorkspaceTransaction _transitionRequestForInterruption]
  -[SBWorkspaceTransaction _didInterruptForTransitionRequest:]
  -[SBWorkspaceTransaction _performDeviceCoherencyCheck]
  -[SBWorkspaceTransaction _childWorkspaceTransactions]
  -[SBWorkspaceTransaction keepAliveForAsyncBlock:]
  -[SBWorkspaceTransaction suggestedAnimationController]
  -[SBWorkspaceTransaction setClearsCompletionAsynchronously:]


SBAppToAppWorkspaceTransaction : SBToAppsWorkspaceTransaction
 @property  BOOL preventWhitePointAdaptationStrengthUpdateOnComplete

  // instance methods
  -[SBAppToAppWorkspaceTransaction setPreventWhitePointAdaptationStrengthUpdateOnComplete:]
  -[SBAppToAppWorkspaceTransaction _didComplete]
  -[SBAppToAppWorkspaceTransaction _begin]
  -[SBAppToAppWorkspaceTransaction _canBeInterrupted]
  -[SBAppToAppWorkspaceTransaction preventWhitePointAdaptationStrengthUpdateOnComplete]
  -[SBAppToAppWorkspaceTransaction shouldPerformToAppStateCleanupOnCompletion]
  -[SBAppToAppWorkspaceTransaction .cxx_destruct]
  -[SBAppToAppWorkspaceTransaction _cleanUpAfterAnimation]
  -[SBAppToAppWorkspaceTransaction _hasPreAnimationTasks]
  -[SBAppToAppWorkspaceTransaction _clearAnimation]
  -[SBAppToAppWorkspaceTransaction shouldAnimateOrientationChangeOnCompletion]
  -[SBAppToAppWorkspaceTransaction _beginTransition]
  -[SBAppToAppWorkspaceTransaction _performPreAnimationTasksWithCompletion:]
  -[SBAppToAppWorkspaceTransaction _setupAnimation]
  -[SBAppToAppWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBAppToAppWorkspaceTransaction _shouldResignActiveForAnimation]
  -[SBAppToAppWorkspaceTransaction initWithTransitionRequest:]
  -[SBAppToAppWorkspaceTransaction _handleApplicationDidNotChange:]
  -[SBAppToAppWorkspaceTransaction _handleApplicationUpdateScenesTransactionFailed:]
  -[SBAppToAppWorkspaceTransaction _animationDidRevealApplication]
  -[SBAppToAppWorkspaceTransaction _concurrentOverlayDismissalOptions]
  -[SBAppToAppWorkspaceTransaction _hasPostAnimationTasks]
  -[SBAppToAppWorkspaceTransaction _setupAnimationFrom:to:]
  -[SBAppToAppWorkspaceTransaction dealloc]
  -[SBAppToAppWorkspaceTransaction _animationWillBegin:]
  -[SBAppToAppWorkspaceTransaction _transitionWasCancelled]
  -[SBAppToAppWorkspaceTransaction _performPostAnimationTasksWithCompletion:]
  -[SBAppToAppWorkspaceTransaction _serialOverlayPreDismissalOptions]


SBAnalyticsAggdSimpleEventHandler : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAnalyticsAggdSimpleEventHandler latchForEvent:aggdKey:]
  +[SBAnalyticsAggdSimpleEventHandler monotonicallyIncreasingForEvent:aggdKey:]
  +[SBAnalyticsAggdSimpleEventHandler setScalarForEvent:aggdKey:valueBlock:]

  // instance methods
  -[SBAnalyticsAggdSimpleEventHandler handleEvent:withContext:]
  -[SBAnalyticsAggdSimpleEventHandler .cxx_destruct]
  -[SBAnalyticsAggdSimpleEventHandler initWithEvent:emitBlock:]


SBStartupTransitionToApp : SBBaseStartupTransition
  // instance methods
  -[SBStartupTransitionToApp performTransitionWithCompletionBlock:]


SBMedusaBannerViewController : UIViewController <BNPresentable>
 @property  UIViewController *viewController
 @property  long long presentableType
 @property  <BNPresentableContext> *presentableContext
 @property  BOOL draggingDismissalEnabled
 @property  BOOL draggingInteractionEnabled
 @property  BOOL touchOutsideDismissalEnabled
 @property  NSString *requesterIdentifier
 @property  NSString *requestIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMedusaBannerViewController requestIdentifier]
  -[SBMedusaBannerViewController viewController]
  -[SBMedusaBannerViewController .cxx_destruct]
  -[SBMedusaBannerViewController viewDidLoad]
  -[SBMedusaBannerViewController requesterIdentifier]
  -[SBMedusaBannerViewController _bannerView]
  -[SBMedusaBannerViewController initWithType:orientation:peekConfiguration:]


SBDashBoardBiometricUnlockController : NSObject <SBBiometricUnlockBehaviorDelegate, SBBiometricUnlockBehaviorConfigurationDelegate, CSExternalEventHandling, SBBiometricUnlockBehavior>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate

  // instance methods
  -[SBDashBoardBiometricUnlockController biometricUnlockBehavior:requestsUnlock:withFeedback:]
  -[SBDashBoardBiometricUnlockController startRestToOpenCoachingWithCompletion:]
  -[SBDashBoardBiometricUnlockController coverSheetIdentifier]
  -[SBDashBoardBiometricUnlockController fillRestToOpenWithDuration:]
  -[SBDashBoardBiometricUnlockController setAuthenticated:]
  -[SBDashBoardBiometricUnlockController setBiometricUnlockBehaviorDelegate:]
  -[SBDashBoardBiometricUnlockController handleBiometricEvent:]
  -[SBDashBoardBiometricUnlockController .cxx_destruct]
  -[SBDashBoardBiometricUnlockController noteMenuButtonDown]
  -[SBDashBoardBiometricUnlockController noteLockButtonDown]
  -[SBDashBoardBiometricUnlockController wouldHandleButtonEvent:]
  -[SBDashBoardBiometricUnlockController succinctDescriptionBuilder]
  -[SBDashBoardBiometricUnlockController participantState]
  -[SBDashBoardBiometricUnlockController descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardBiometricUnlockController noteMenuButtonUp]
  -[SBDashBoardBiometricUnlockController descriptionWithMultilinePrefix:]
  -[SBDashBoardBiometricUnlockController biometricUnlockBehavior:requestsFeedback:]
  -[SBDashBoardBiometricUnlockController biometricUnlockBehaviorDelegate]
  -[SBDashBoardBiometricUnlockController succinctDescription]
  -[SBDashBoardBiometricUnlockController _mesaUnlockBehavior]
  -[SBDashBoardBiometricUnlockController isLockScreenShowingDefaultContent]
  -[SBDashBoardBiometricUnlockController handleEvent:]
  -[SBDashBoardBiometricUnlockController resetRestToOpen]
  -[SBDashBoardBiometricUnlockController dealloc]
  -[SBDashBoardBiometricUnlockController isRestToOpenAvailable]
  -[SBDashBoardBiometricUnlockController hasVisibleContentToReveal]
  -[SBDashBoardBiometricUnlockController lockScreenWakeSource]
  -[SBDashBoardBiometricUnlockController conformsToCSEventHandling]
  -[SBDashBoardBiometricUnlockController initWithCoverSheetViewController:]
  -[SBDashBoardBiometricUnlockController biometricUnlockBehaviorConfigurationDidChange:]


SBLogoutProgressTransientOverlayViewController : SBTransientOverlayViewController <CSExternalBehaviorProviding>
 @property  <SBLogoutProgressDataSource> *dataSource
 @property  <SBLogoutProgressDelegate> *delegate
 @property  UMUser *user
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBLogoutProgressTransientOverlayViewController preferredStatusBarStyle]
  -[SBLogoutProgressTransientOverlayViewController setContainerOrientation:]
  -[SBLogoutProgressTransientOverlayViewController coverSheetIdentifier]
  -[SBLogoutProgressTransientOverlayViewController conformsToCSBehaviorProviding]
  -[SBLogoutProgressTransientOverlayViewController idleTimerMode]
  -[SBLogoutProgressTransientOverlayViewController setDataSource:]
  -[SBLogoutProgressTransientOverlayViewController conformsToCSExternalBehaviorProviding]
  -[SBLogoutProgressTransientOverlayViewController idleWarnMode]
  -[SBLogoutProgressTransientOverlayViewController .cxx_destruct]
  -[SBLogoutProgressTransientOverlayViewController idleTimerDuration]
  -[SBLogoutProgressTransientOverlayViewController user]
  -[SBLogoutProgressTransientOverlayViewController viewDidLoad]
  -[SBLogoutProgressTransientOverlayViewController setDelegate:]
  -[SBLogoutProgressTransientOverlayViewController participantState]
  -[SBLogoutProgressTransientOverlayViewController dataSource]
  -[SBLogoutProgressTransientOverlayViewController refreshData]
  -[SBLogoutProgressTransientOverlayViewController viewDidLayoutSubviews]
  -[SBLogoutProgressTransientOverlayViewController viewWillAppear:]
  -[SBLogoutProgressTransientOverlayViewController isContentOpaque]
  -[SBLogoutProgressTransientOverlayViewController _updateLegibility]
  -[SBLogoutProgressTransientOverlayViewController delegate]
  -[SBLogoutProgressTransientOverlayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBLogoutProgressTransientOverlayViewController _updateData]
  -[SBLogoutProgressTransientOverlayViewController restrictedCapabilities]
  -[SBLogoutProgressTransientOverlayViewController proximityDetectionMode]
  -[SBLogoutProgressTransientOverlayViewController scrollingStrategy]
  -[SBLogoutProgressTransientOverlayViewController _legibilitySettings]
  -[SBLogoutProgressTransientOverlayViewController viewDidDisappear:]
  -[SBLogoutProgressTransientOverlayViewController _canShowWhileLocked]
  -[SBLogoutProgressTransientOverlayViewController notificationBehavior]
  -[SBLogoutProgressTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBLogoutProgressTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBLogoutProgressTransientOverlayViewController prepareForRestart]
  -[SBLogoutProgressTransientOverlayViewController initWithUserAccount:]
  -[SBLogoutProgressTransientOverlayViewController _supportsDebugUI]
  -[SBLogoutProgressTransientOverlayViewController _updateDebugTasksViewControllerSizeFromSize:]


SBFullScreenToPeekSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBFullScreenToPeekSwitcherModifier isContainerStatusBarVisible]
  -[SBFullScreenToPeekSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBFullScreenToPeekSwitcherModifier homeScreenDimmingAlpha]
  -[SBFullScreenToPeekSwitcherModifier dockWindowLevel]
  -[SBFullScreenToPeekSwitcherModifier wantsDockBehaviorAssertion]
  -[SBFullScreenToPeekSwitcherModifier homeScreenBackdropBlurType]
  -[SBFullScreenToPeekSwitcherModifier transitionWillBegin]
  -[SBFullScreenToPeekSwitcherModifier wallpaperScale]
  -[SBFullScreenToPeekSwitcherModifier homeScreenScale]
  -[SBFullScreenToPeekSwitcherModifier homeScreenAlpha]
  -[SBFullScreenToPeekSwitcherModifier dockProgress]
  -[SBFullScreenToPeekSwitcherModifier dockWindowLevelPriority]
  -[SBFullScreenToPeekSwitcherModifier transitionDidEnd]
  -[SBFullScreenToPeekSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToPeekSwitcherModifier resizeProgressNotificationsForLayoutRole:inAppLayout:]
  -[SBFullScreenToPeekSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBFullScreenToPeekSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBFullScreenToPeekSwitcherModifier frameForIndex:]
  -[SBFullScreenToPeekSwitcherModifier scaleForLayoutRole:inAppLayout:]
  -[SBFullScreenToPeekSwitcherModifier .cxx_destruct]
  -[SBFullScreenToPeekSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBFullScreenToPeekSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBFullScreenToPeekSwitcherModifier handleTimerEvent:]
  -[SBFullScreenToPeekSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBFullScreenToPeekSwitcherModifier cornerRadiiForIndex:]
  -[SBFullScreenToPeekSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBFullScreenToPeekSwitcherModifier didMoveToParentModifier:]
  -[SBFullScreenToPeekSwitcherModifier transitionWillUpdate]
  -[SBFullScreenToPeekSwitcherModifier handleSceneReadyEvent:]
  -[SBFullScreenToPeekSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:fromFloatingAppLayout:toFloatingAppLayout:peekConfiguration:]
  -[SBFullScreenToPeekSwitcherModifier handleResizeProgressEvent:]
  -[SBFullScreenToPeekSwitcherModifier _isPeekingAppLayout:]
  -[SBFullScreenToPeekSwitcherModifier _firstStageFrameForPeekingAppLayoutWithInitialFrame:]
  -[SBFullScreenToPeekSwitcherModifier _firstPhaseScale]


SBGestureSwitcherModifier : SBSwitcherModifier
 @property  unsigned long gesturePhase

  // instance methods
  -[SBGestureSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBGestureSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBGestureSwitcherModifier handleTransitionEvent:]
  -[SBGestureSwitcherModifier .cxx_destruct]
  -[SBGestureSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBGestureSwitcherModifier maskedCornersForIndex:]
  -[SBGestureSwitcherModifier handleEvent:]
  -[SBGestureSwitcherModifier isPreparingLayout]
  -[SBGestureSwitcherModifier isUpdatingLayout]
  -[SBGestureSwitcherModifier handleGestureEvent:]
  -[SBGestureSwitcherModifier initWithGestureID:]
  -[SBGestureSwitcherModifier gesturePhase]


SBCoverSheetSystemGesturesDelegate : NSObject <SBSystemGestureRecognizerDelegate, SBTouchTemplateGestureRecognizerDelegate, SBIndirectPanGestureRecognizerOrientationProviding>
 @property  UIViewController *viewController
 @property  UIGestureRecognizer *dismissGestureRecognizer
 @property  UIGestureRecognizer *dismissAddendumGestureRecognizer
 @property  UIGestureRecognizer *preemptingGestureRecognizer
 @property  CSCoverSheetDismissGestureSettings *dismissGestureSettings
 @property  <SBCoverSheetSystemGestureDelegatePositionProviding> *positionProvider
 @property  UIPanGestureRecognizer *presentGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectPresentGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectDismissGestureRecognizer
 @property  SBFluidScrunchGestureRecognizer *scrunchDismissGestureRecognizer
 @property  int syntheticAppearState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetSystemGesturesDelegate indirectPanEffectiveInterfaceOrientation]
  -[SBCoverSheetSystemGesturesDelegate dismissAddendumGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate viewController]
  -[SBCoverSheetSystemGesturesDelegate gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate setPresentGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate setDismissAddendumGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate dismissGestureSettings]
  -[SBCoverSheetSystemGesturesDelegate .cxx_destruct]
  -[SBCoverSheetSystemGesturesDelegate _isGestureAllowedByTransientOverlaysOrTopmostApp]
  -[SBCoverSheetSystemGesturesDelegate setDismissGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate setScrunchDismissGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate isAnyGestureActivelyRecognized]
  -[SBCoverSheetSystemGesturesDelegate indirectPresentGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate _areAnyGesturesRecognizedInSet:]
  -[SBCoverSheetSystemGesturesDelegate viewForSystemGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate presentGestures]
  -[SBCoverSheetSystemGesturesDelegate setPreemptingGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate setIndirectPresentGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate preemptingGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate dismissGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate positionProvider]
  -[SBCoverSheetSystemGesturesDelegate isDismissGestureActive]
  -[SBCoverSheetSystemGesturesDelegate gestureRecognizerShouldBegin:]
  -[SBCoverSheetSystemGesturesDelegate setSyntheticAppearState:]
  -[SBCoverSheetSystemGesturesDelegate gestureRecognizer:shouldReceiveTouch:]
  -[SBCoverSheetSystemGesturesDelegate isPresentGestureActive]
  -[SBCoverSheetSystemGesturesDelegate scrunchDismissGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate _canDismissGestureBegin]
  -[SBCoverSheetSystemGesturesDelegate indirectDismissGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate isPresentGestureAllowedToBegin]
  -[SBCoverSheetSystemGesturesDelegate presentGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate initWithViewController:dismissGestureRecognizer:dismissAddendumGestureRecognizer:dismissalPreemptingGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate setPositionProvider:]
  -[SBCoverSheetSystemGesturesDelegate dismissGestures]
  -[SBCoverSheetSystemGesturesDelegate setPresentGestureFailureRequirements:]
  -[SBCoverSheetSystemGesturesDelegate _canPresentGestureBegin]
  -[SBCoverSheetSystemGesturesDelegate setViewController:]
  -[SBCoverSheetSystemGesturesDelegate setDismissGestureSettings:]
  -[SBCoverSheetSystemGesturesDelegate _isGestureActivelyRecognized:]
  -[SBCoverSheetSystemGesturesDelegate syntheticAppearState]
  -[SBCoverSheetSystemGesturesDelegate isDismissGestureAllowedToBegin]
  -[SBCoverSheetSystemGesturesDelegate setIndirectDismissGestureRecognizer:]


SBAppSwitcherSettings : PTSettings
 @property  long long simplicityOptions
 @property  BOOL simplicityOptionNoSnapshots
 @property  BOOL simplicityOptionNoCrossfade
 @property  BOOL simplicityOptionNoLabels
 @property  BOOL simplicityOptionNoIcons
 @property  BOOL simplicityOptionNoBlurs
 @property  BOOL simplicityOptionNoShadows
 @property  BOOL simplicityOptionNoControlCenter
 @property  BOOL simplicityOptionNoSnapshotBkg
 @property  BOOL showFloats
 @property  long long switcherStyle
 @property  BOOL useAsynchronousRendering
 @property  BOOL shouldRoundCornersDuringSwipeUp
 @property  double asynchronousRenderingDisableSurfaceCacheDelayDuration
 @property  double preventMedusaSnapshotsAfterTransitionDuration
 @property  SBFloatingSwitcherSettings *floatingSwitcherSettings
 @property  SBAppSwitcherOrbGestureSettings *orbGestureSettings
 @property  double mScale
 @property  double centerPoint
 @property  double maxScale
 @property  double mAlpha
 @property  double bAlpha
 @property  double mDarkening
 @property  double bDarkening
 @property  double maxDarkening
 @property  double tetheredInsertionRemovalInsetForDeterminingVisibility
 @property  double switcherCardScaleWhileTouched
 @property  double switcherCardScaleWhileCursorHovered
 @property  double switcherCardShadowRadius
 @property  double switcherCardShadowOpacity
 @property  double switcherCardShadowOffsetHorizontal
 @property  double switcherCardShadowOffsetVertical
 @property  double switcherCenterYOffsetPercentOfScreenHeight
 @property  double switcherCardShadowRadiusWhileTouched
 @property  double switcherCardShadowOpacityWhileTouched
 @property  double switcherCardShadowOffsetHorizontalWhileTouched
 @property  double switcherCardShadowOffsetVerticalWhileTouched
 @property  double cursorHoverShadowRadiusInterpolationAmount
 @property  double cursorHoverShadowOpacityInterpolationAmount
 @property  double cursorHoverShadowOffsetInterpolationAmount
 @property  double peekInsetWidth
 @property  double tintStyleDimmingAlphaInFocusForDarkMode
 @property  double tintStyleDimmingAlphaUnFocusForDarkMode
 @property  double tintStyleDimmingAlphaInFocusForLightMode
 @property  double appExposeNonFloatingSingleRowScale
 @property  double appExposeNonFloatingDoubleRowScale
 @property  double appExposeFloatingDoubleRowScale
 @property  double gridSwitcherPageScale
 @property  double gridSwitcherHorizontalInterpageSpacingLandscape
 @property  double gridSwitcherVerticalNaturalSpacingLandscape
 @property  double gridSwitcherHorizontalInterpageSpacingPortrait
 @property  double gridSwitcherVerticalNaturalSpacingPortrait
 @property  double gridSwitcherSnapToControlCenterHeightSlop
 @property  double gridSwitcherSwipeUpNormalizedRubberbandingRange
 @property  double gridSwitcherSwipeUpNormalizedRubberbandedTranslationAtMinimumScale
 @property  double gridSwitcherSwipeUpMinimumScale
 @property  double gridSwitcherHomeButtonDeviceCardCornerRadius
 @property  unsigned long numberOfSnapshotsToCacheInSwitcher
 @property  unsigned long numberOfSnapshotsToAlwaysKeepAround
 @property  double spacingBetweenLeadingEdgeAndIcon
 @property  double spacingBetweenTrailingEdgeAndLabels
 @property  double iconSideLength
 @property  double spacingBetweenSnapshotAndIcon
 @property  double spacingBetweenSnapshotAndDescriptionLabelBaseline
 @property  double spacingBetweenTitleAndSubtitleBaseline
 @property  double spacingBetweenIconAndLabel
 @property  double spacingBetweenLabelAndMultipleWindowsIndicator
 @property  double multipleWindowsIndicatorSideLength
 @property  double spacingBetweenLabelAndSecondIcon
 @property  double spacingBetweenBoundsCenterAndSecondIcon
 @property  double deckSwitcherPageScale
 @property  double deckSwitcherDecelerationRate
 @property  double aExpLayoutCoeff
 @property  double bExpLayoutCoeff
 @property  double depthPadding
 @property  double offscreenCardScaleForFlyIn
 @property  double coplanarSpacingPhone
 @property  double coplanarSpacingPad
 @property  BOOL useTitleOpacityPrototypeSettings
 @property  double titleOpacityACoeff
 @property  double titleOpacityBCoeff
 @property  double titleOpacityCCoeff
 @property  double titleOpacityDCoeff
 @property  BOOL showModifierDebugLabel
 @property  BOOL showMainModifierTimeline
 @property  BOOL showFloatingModifierTimeline
 @property  BOOL shouldDisableSwitcherModelUpdatesForDemo
 @property  SBFluidSwitcherAnimationSettings *animationSettings
 @property  PTOutlet *clearModelOutlet
 @property  PTOutlet *stashModelOutlet
 @property  PTOutlet *loadModelOutlet
 @property  PTOutlet *addAppsToModelOutlet
 @property  PTOutlet *addPPTAppsToModelOutlet

  // class methods
  +[SBAppSwitcherSettings settingsControllerModule]

  // instance methods
  -[SBAppSwitcherSettings maxScale]
  -[SBAppSwitcherSettings setTintStyleDimmingAlphaInFocusForLightMode:]
  -[SBAppSwitcherSettings switcherCardScaleWhileTouched]
  -[SBAppSwitcherSettings setGridSwitcherPageScale:]
  -[SBAppSwitcherSettings setAsynchronousRenderingDisableSurfaceCacheDelayDuration:]
  -[SBAppSwitcherSettings spacingBetweenBoundsCenterAndSecondIcon]
  -[SBAppSwitcherSettings setSpacingBetweenSnapshotAndDescriptionLabelBaseline:]
  -[SBAppSwitcherSettings simplicityOptions]
  -[SBAppSwitcherSettings cursorHoverShadowOpacityInterpolationAmount]
  -[SBAppSwitcherSettings setAnimationSettings:]
  -[SBAppSwitcherSettings setSwitcherCardScaleWhileTouched:]
  -[SBAppSwitcherSettings animationSettings]
  -[SBAppSwitcherSettings showFloats]
  -[SBAppSwitcherSettings archiveValueForKey:]
  -[SBAppSwitcherSettings mScale]
  -[SBAppSwitcherSettings setCursorHoverShadowRadiusInterpolationAmount:]
  -[SBAppSwitcherSettings gridSwitcherHomeButtonDeviceCardCornerRadius]
  -[SBAppSwitcherSettings spacingBetweenIconAndLabel]
  -[SBAppSwitcherSettings showFloatingModifierTimeline]
  -[SBAppSwitcherSettings setSwitcherCardScaleWhileCursorHovered:]
  -[SBAppSwitcherSettings setGridSwitcherVerticalNaturalSpacingLandscape:]
  -[SBAppSwitcherSettings setGridSwitcherHomeButtonDeviceCardCornerRadius:]
  -[SBAppSwitcherSettings simplicityOptionNoCrossfade]
  -[SBAppSwitcherSettings loadModelOutlet]
  -[SBAppSwitcherSettings setSwitcherCardShadowOpacity:]
  -[SBAppSwitcherSettings deckSwitcherDecelerationRate]
  -[SBAppSwitcherSettings tetheredInsertionRemovalInsetForDeterminingVisibility]
  -[SBAppSwitcherSettings tintStyleDimmingAlphaInFocusForLightMode]
  -[SBAppSwitcherSettings gridSwitcherHorizontalInterpageSpacingLandscape]
  -[SBAppSwitcherSettings switcherCardShadowOpacity]
  -[SBAppSwitcherSettings showModifierDebugLabel]
  -[SBAppSwitcherSettings appExposeNonFloatingSingleRowScale]
  -[SBAppSwitcherSettings setSimplicityOptionNoShadows:]
  -[SBAppSwitcherSettings setMAlpha:]
  -[SBAppSwitcherSettings setPeekInsetWidth:]
  -[SBAppSwitcherSettings tintStyleDimmingAlphaUnFocusForDarkMode]
  -[SBAppSwitcherSettings gridSwitcherSwipeUpMinimumScale]
  -[SBAppSwitcherSettings setGridSwitcherVerticalNaturalSpacingPortrait:]
  -[SBAppSwitcherSettings setShouldDisableSwitcherModelUpdatesForDemo:]
  -[SBAppSwitcherSettings setSpacingBetweenLeadingEdgeAndIcon:]
  -[SBAppSwitcherSettings stashModelOutlet]
  -[SBAppSwitcherSettings .cxx_destruct]
  -[SBAppSwitcherSettings tintStyleDimmingAlphaInFocusForDarkMode]
  -[SBAppSwitcherSettings bAlpha]
  -[SBAppSwitcherSettings titleOpacityCCoeff]
  -[SBAppSwitcherSettings setTetheredInsertionRemovalInsetForDeterminingVisibility:]
  -[SBAppSwitcherSettings setTitleOpacityCCoeff:]
  -[SBAppSwitcherSettings setMScale:]
  -[SBAppSwitcherSettings floatingSwitcherSettings]
  -[SBAppSwitcherSettings setCoplanarSpacingPad:]
  -[SBAppSwitcherSettings numberOfSnapshotsToCacheInSwitcher]
  -[SBAppSwitcherSettings setDefaultValues]
  -[SBAppSwitcherSettings setSpacingBetweenSnapshotAndIcon:]
  -[SBAppSwitcherSettings setStashModelOutlet:]
  -[SBAppSwitcherSettings setSwitcherCardShadowRadiusWhileTouched:]
  -[SBAppSwitcherSettings setMaxScale:]
  -[SBAppSwitcherSettings useAsynchronousRendering]
  -[SBAppSwitcherSettings setMaxDarkening:]
  -[SBAppSwitcherSettings setNumberOfSnapshotsToCacheInSwitcher:]
  -[SBAppSwitcherSettings setSimplicityOptions:]
  -[SBAppSwitcherSettings setDepthPadding:]
  -[SBAppSwitcherSettings coplanarSpacingPad]
  -[SBAppSwitcherSettings setShouldRoundCornersDuringSwipeUp:]
  -[SBAppSwitcherSettings switcherCardShadowRadius]
  -[SBAppSwitcherSettings setSwitcherCardShadowRadius:]
  -[SBAppSwitcherSettings setSimplicityOptionNoLabels:]
  -[SBAppSwitcherSettings titleOpacityACoeff]
  -[SBAppSwitcherSettings gridSwitcherSwipeUpNormalizedRubberbandedTranslationAtMinimumScale]
  -[SBAppSwitcherSettings spacingBetweenSnapshotAndDescriptionLabelBaseline]
  -[SBAppSwitcherSettings spacingBetweenLabelAndMultipleWindowsIndicator]
  -[SBAppSwitcherSettings setDeckSwitcherPageScale:]
  -[SBAppSwitcherSettings setBAlpha:]
  -[SBAppSwitcherSettings setSpacingBetweenLabelAndMultipleWindowsIndicator:]
  -[SBAppSwitcherSettings centerPoint]
  -[SBAppSwitcherSettings setOffscreenCardScaleForFlyIn:]
  -[SBAppSwitcherSettings _spacingBetweenLeadingEdgeAndIcon]
  -[SBAppSwitcherSettings setSimplicityOptionNoSnapshotBkg:]
  -[SBAppSwitcherSettings switcherCardShadowRadiusWhileTouched]
  -[SBAppSwitcherSettings orbGestureSettings]
  -[SBAppSwitcherSettings setMultipleWindowsIndicatorSideLength:]
  -[SBAppSwitcherSettings simplicityOptionNoLabels]
  -[SBAppSwitcherSettings gridSwitcherVerticalNaturalSpacingLandscape]
  -[SBAppSwitcherSettings useTitleOpacityPrototypeSettings]
  -[SBAppSwitcherSettings peekInsetWidth]
  -[SBAppSwitcherSettings setAppExposeNonFloatingDoubleRowScale:]
  -[SBAppSwitcherSettings setUseAsynchronousRendering:]
  -[SBAppSwitcherSettings setNumberOfSnapshotsToAlwaysKeepAround:]
  -[SBAppSwitcherSettings setUseTitleOpacityPrototypeSettings:]
  -[SBAppSwitcherSettings setSwitcherCardShadowOffsetHorizontalWhileTouched:]
  -[SBAppSwitcherSettings setCursorHoverShadowOffsetInterpolationAmount:]
  -[SBAppSwitcherSettings spacingBetweenLabelAndSecondIcon]
  -[SBAppSwitcherSettings deckSwitcherPageScale]
  -[SBAppSwitcherSettings maxDarkening]
  -[SBAppSwitcherSettings titleOpacityBCoeff]
  -[SBAppSwitcherSettings setGridSwitcherSwipeUpMinimumScale:]
  -[SBAppSwitcherSettings aExpLayoutCoeff]
  -[SBAppSwitcherSettings setShowFloatingModifierTimeline:]
  -[SBAppSwitcherSettings simplicityOptionNoShadows]
  -[SBAppSwitcherSettings simplicityOptionNoIcons]
  -[SBAppSwitcherSettings setGridSwitcherHorizontalInterpageSpacingLandscape:]
  -[SBAppSwitcherSettings setGridSwitcherSnapToControlCenterHeightSlop:]
  -[SBAppSwitcherSettings switcherCardShadowOffsetVertical]
  -[SBAppSwitcherSettings bDarkening]
  -[SBAppSwitcherSettings addAppsToModelOutlet]
  -[SBAppSwitcherSettings simplicityOptionNoControlCenter]
  -[SBAppSwitcherSettings setAddPPTAppsToModelOutlet:]
  -[SBAppSwitcherSettings numberOfSnapshotsToAlwaysKeepAround]
  -[SBAppSwitcherSettings setTitleOpacityACoeff:]
  -[SBAppSwitcherSettings setTintStyleDimmingAlphaUnFocusForDarkMode:]
  -[SBAppSwitcherSettings switcherCardShadowOffsetHorizontalWhileTouched]
  -[SBAppSwitcherSettings setShowMainModifierTimeline:]
  -[SBAppSwitcherSettings setCoplanarSpacingPhone:]
  -[SBAppSwitcherSettings spacingBetweenTrailingEdgeAndLabels]
  -[SBAppSwitcherSettings setTintStyleDimmingAlphaInFocusForDarkMode:]
  -[SBAppSwitcherSettings depthPadding]
  -[SBAppSwitcherSettings setMDarkening:]
  -[SBAppSwitcherSettings setBExpLayoutCoeff:]
  -[SBAppSwitcherSettings shouldRoundCornersDuringSwipeUp]
  -[SBAppSwitcherSettings setSpacingBetweenIconAndLabel:]
  -[SBAppSwitcherSettings appExposeNonFloatingDoubleRowScale]
  -[SBAppSwitcherSettings gridSwitcherHorizontalInterpageSpacingPortrait]
  -[SBAppSwitcherSettings gridSwitcherPageScale]
  -[SBAppSwitcherSettings spacingBetweenLeadingEdgeAndIcon]
  -[SBAppSwitcherSettings appExposeFloatingDoubleRowScale]
  -[SBAppSwitcherSettings titleOpacityDCoeff]
  -[SBAppSwitcherSettings spacingBetweenTitleAndSubtitleBaseline]
  -[SBAppSwitcherSettings offscreenCardScaleForFlyIn]
  -[SBAppSwitcherSettings switcherCenterYOffsetPercentOfScreenHeight]
  -[SBAppSwitcherSettings setGridSwitcherHorizontalInterpageSpacingPortrait:]
  -[SBAppSwitcherSettings preventMedusaSnapshotsAfterTransitionDuration]
  -[SBAppSwitcherSettings setSpacingBetweenLabelAndSecondIcon:]
  -[SBAppSwitcherSettings setOrbGestureSettings:]
  -[SBAppSwitcherSettings gridSwitcherSwipeUpNormalizedRubberbandingRange]
  -[SBAppSwitcherSettings setSwitcherStyle:]
  -[SBAppSwitcherSettings switcherCardScaleWhileCursorHovered]
  -[SBAppSwitcherSettings mDarkening]
  -[SBAppSwitcherSettings setPreventMedusaSnapshotsAfterTransitionDuration:]
  -[SBAppSwitcherSettings switcherCardShadowOffsetVerticalWhileTouched]
  -[SBAppSwitcherSettings switcherStyle]
  -[SBAppSwitcherSettings bExpLayoutCoeff]
  -[SBAppSwitcherSettings setBDarkening:]
  -[SBAppSwitcherSettings clearModelOutlet]
  -[SBAppSwitcherSettings simplicityOptionNoBlurs]
  -[SBAppSwitcherSettings setTitleOpacityBCoeff:]
  -[SBAppSwitcherSettings setSimplicityOptionNoBlurs:]
  -[SBAppSwitcherSettings cursorHoverShadowRadiusInterpolationAmount]
  -[SBAppSwitcherSettings multipleWindowsIndicatorSideLength]
  -[SBAppSwitcherSettings setSimplicityOptionNoIcons:]
  -[SBAppSwitcherSettings setAppExposeNonFloatingSingleRowScale:]
  -[SBAppSwitcherSettings setAExpLayoutCoeff:]
  -[SBAppSwitcherSettings shouldSimplifyForOptions:]
  -[SBAppSwitcherSettings setFloatingSwitcherSettings:]
  -[SBAppSwitcherSettings setSimplicityOptionNoControlCenter:]
  -[SBAppSwitcherSettings setSwitcherCardShadowOffsetVertical:]
  -[SBAppSwitcherSettings shouldDisableSwitcherModelUpdatesForDemo]
  -[SBAppSwitcherSettings setSimplicityOptionNoCrossfade:]
  -[SBAppSwitcherSettings iconSideLength]
  -[SBAppSwitcherSettings setSwitcherCenterYOffsetPercentOfScreenHeight:]
  -[SBAppSwitcherSettings setShowModifierDebugLabel:]
  -[SBAppSwitcherSettings mAlpha]
  -[SBAppSwitcherSettings gridSwitcherVerticalNaturalSpacingPortrait]
  -[SBAppSwitcherSettings setSwitcherCardShadowOffsetVerticalWhileTouched:]
  -[SBAppSwitcherSettings setGridSwitcherSwipeUpNormalizedRubberbandedTranslationAtMinimumScale:]
  -[SBAppSwitcherSettings setTitleOpacityDCoeff:]
  -[SBAppSwitcherSettings addPPTAppsToModelOutlet]
  -[SBAppSwitcherSettings setSpacingBetweenBoundsCenterAndSecondIcon:]
  -[SBAppSwitcherSettings gridSwitcherSnapToControlCenterHeightSlop]
  -[SBAppSwitcherSettings setSimplicityOptionNoSnapshots:]
  -[SBAppSwitcherSettings asynchronousRenderingDisableSurfaceCacheDelayDuration]
  -[SBAppSwitcherSettings coplanarSpacingPhone]
  -[SBAppSwitcherSettings setLoadModelOutlet:]
  -[SBAppSwitcherSettings setDeckSwitcherDecelerationRate:]
  -[SBAppSwitcherSettings setSwitcherCardShadowOffsetHorizontal:]
  -[SBAppSwitcherSettings setAppExposeFloatingDoubleRowScale:]
  -[SBAppSwitcherSettings setSpacingBetweenTitleAndSubtitleBaseline:]
  -[SBAppSwitcherSettings setShowFloats:]
  -[SBAppSwitcherSettings setGridSwitcherSwipeUpNormalizedRubberbandingRange:]
  -[SBAppSwitcherSettings setSwitcherCardShadowOpacityWhileTouched:]
  -[SBAppSwitcherSettings cursorHoverShadowOffsetInterpolationAmount]
  -[SBAppSwitcherSettings simplicityOptionNoSnapshots]
  -[SBAppSwitcherSettings setSpacingBetweenTrailingEdgeAndLabels:]
  -[SBAppSwitcherSettings switcherCardShadowOpacityWhileTouched]
  -[SBAppSwitcherSettings setCursorHoverShadowOpacityInterpolationAmount:]
  -[SBAppSwitcherSettings spacingBetweenSnapshotAndIcon]
  -[SBAppSwitcherSettings setClearModelOutlet:]
  -[SBAppSwitcherSettings setAddAppsToModelOutlet:]
  -[SBAppSwitcherSettings setIconSideLength:]
  -[SBAppSwitcherSettings showMainModifierTimeline]
  -[SBAppSwitcherSettings effectiveSwitcherStyle]
  -[SBAppSwitcherSettings switcherCardShadowOffsetHorizontal]
  -[SBAppSwitcherSettings simplicityOptionNoSnapshotBkg]
  -[SBAppSwitcherSettings setCenterPoint:]


SBSystemGestureMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBSystemGestureMetric .cxx_destruct]
  -[SBSystemGestureMetric initForType:parentMetric:]


SBSystemGestureUsageMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long currentLocation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemGestureUsageMetric setCurrentLocation:]
  -[SBSystemGestureUsageMetric handleEvent:withContext:]
  -[SBSystemGestureUsageMetric .cxx_destruct]
  -[SBSystemGestureUsageMetric init]
  -[SBSystemGestureUsageMetric currentLocation]


SBHIDButtonStateArbiter : NSObject
 @property  BOOL longPressDisabled
 @property  double longPressTimeout
 @property  long long pressSequence
 @property  <SBHIDButtonStateDelegate> *delegate

  // instance methods
  -[SBHIDButtonStateArbiter .cxx_destruct]
  -[SBHIDButtonStateArbiter setDelegate:]
  -[SBHIDButtonStateArbiter reset]
  -[SBHIDButtonStateArbiter processEvent:]
  -[SBHIDButtonStateArbiter delegate]
  -[SBHIDButtonStateArbiter longPressTimeout]
  -[SBHIDButtonStateArbiter setLongPressTimeout:]
  -[SBHIDButtonStateArbiter isLongPressDisabled]
  -[SBHIDButtonStateArbiter _invalidateLongPressTimer]
  -[SBHIDButtonStateArbiter _longPressTimeoutDidOccur]
  -[SBHIDButtonStateArbiter _startLongPressTimerWithTimeout:]
  -[SBHIDButtonStateArbiter pressSequence]


SBOmnibusAlertItemTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBOmnibusAlertItemTestRecipe load]

  // instance methods
  -[SBOmnibusAlertItemTestRecipe .cxx_destruct]
  -[SBOmnibusAlertItemTestRecipe title]
  -[SBOmnibusAlertItemTestRecipe handleVolumeIncrease]
  -[SBOmnibusAlertItemTestRecipe handleVolumeDecrease]
  -[SBOmnibusAlertItemTestRecipe _nextAlertItemToTest]
  -[SBOmnibusAlertItemTestRecipe _dismissCurrentItem]
  -[SBOmnibusAlertItemTestRecipe _mapsApp]
  -[SBOmnibusAlertItemTestRecipe _anyAppIcon]
  -[SBOmnibusAlertItemTestRecipe _anyUserInstalledAppIcon]
  -[SBOmnibusAlertItemTestRecipe _anySUDescriptor]


SBApplicationSceneHandle : SBSceneHandle
 @property  BOOL sceneUpdateInProgress
 @property  SBApplication *application
 @property  NSString *persistenceIdentifier
 @property  BOOL secure
 @property  long long layoutRole
 @property  BOOL insetForHomeAffordance

  // class methods
  +[SBApplicationSceneHandle lookupOrCreatePersistenceIDFromApplication:sceneID:]

  // instance methods
  -[SBApplicationSceneHandle isInsetForHomeAffordance]
  -[SBApplicationSceneHandle _applicationsDidChange:]
  -[SBApplicationSceneHandle setInsetForHomeAffordance:]
  -[SBApplicationSceneHandle _initWithScene:]
  -[SBApplicationSceneHandle _persistenceIdentifier]
  -[SBApplicationSceneHandle isSceneUpdateInProgress]
  -[SBApplicationSceneHandle _initWithApplication:scene:displayIdentity:]
  -[SBApplicationSceneHandle _createProcessExecutionContextFromContext:entity:]
  -[SBApplicationSceneHandle _commonInit]
  -[SBApplicationSceneHandle _initWithDefinition:]
  -[SBApplicationSceneHandle application]
  -[SBApplicationSceneHandle _modifyApplicationSceneClientSettings:fromRequestContext:entity:initialSceneSettings:]
  -[SBApplicationSceneHandle isSecure]
  -[SBApplicationSceneHandle _createParametersFromTransitionContext:entity:]
  -[SBApplicationSceneHandle layoutRole]
  -[SBApplicationSceneHandle .cxx_destruct]
  -[SBApplicationSceneHandle setSceneUpdateInProgress:]
  -[SBApplicationSceneHandle persistenceIdentifier]
  -[SBApplicationSceneHandle addSceneUpdateContributer:]
  -[SBApplicationSceneHandle setLayoutRole:]
  -[SBApplicationSceneHandle _modifyProcessExecutionContext:fromRequestContext:entity:]
  -[SBApplicationSceneHandle newSceneViewWithReferenceSize:orientation:hostRequester:]
  -[SBApplicationSceneHandle newScenePlaceholderContentContextWithActivationSettings:]
  -[SBApplicationSceneHandle _createApplicationSceneClientSettingsFromContext:entity:initialSceneSettings:]
  -[SBApplicationSceneHandle _commonInitWithApplication:sceneIdentifier:displayIdentity:]
  -[SBApplicationSceneHandle newSceneViewController]
  -[SBApplicationSceneHandle displayItemRepresentation]
  -[SBApplicationSceneHandle _createApplicationSceneSettingsFromContext:entity:]
  -[SBApplicationSceneHandle removeSceneUpdateContributer:]
  -[SBApplicationSceneHandle _modifyApplicationSceneSettings:fromRequestContext:entity:]
  -[SBApplicationSceneHandle dealloc]
  -[SBApplicationSceneHandle _initWithApplication:sceneDefinition:displayIdentity:]
  -[SBApplicationSceneHandle _createApplicationSceneTransitionContextFromContext:entity:]
  -[SBApplicationSceneHandle _modifyApplicationTransitionContext:fromRequestContext:entity:]


SBUIStartupFromBlackAnimationController : SBUIMainScreenAnimationController
 @property  BSAnimationSettings *animationSettings
 @property  BOOL waitsForAppActivation

  // instance methods
  -[SBUIStartupFromBlackAnimationController _cleanupAnimation]
  -[SBUIStartupFromBlackAnimationController setAnimationSettings:]
  -[SBUIStartupFromBlackAnimationController animationSettings]
  -[SBUIStartupFromBlackAnimationController _startAnimation]
  -[SBUIStartupFromBlackAnimationController .cxx_destruct]
  -[SBUIStartupFromBlackAnimationController _setHidden:]
  -[SBUIStartupFromBlackAnimationController _prepareAnimation]
  -[SBUIStartupFromBlackAnimationController initWithTransitionContextProvider:]
  -[SBUIStartupFromBlackAnimationController _getTransitionWindow]
  -[SBUIStartupFromBlackAnimationController _waitsForActivatingSceneContentAvailableIfNecessary]
  -[SBUIStartupFromBlackAnimationController _shouldDismissBanner]
  -[SBUIStartupFromBlackAnimationController waitsForAppActivation]
  -[SBUIStartupFromBlackAnimationController setWaitsForAppActivation:]
  -[SBUIStartupFromBlackAnimationController _showBlackView]


SBUserAlertNotificationSource : NSObject <SBAlertItemsControllerObserver, NCNotificationSource, SBAlertItemPresenter>
 @property  NCNotificationDispatcher *dispatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUserAlertNotificationSource presentsAlertItemsModally]
  -[SBUserAlertNotificationSource presentAlertItem:animated:completion:]
  -[SBUserAlertNotificationSource .cxx_destruct]
  -[SBUserAlertNotificationSource alertItemsController:didDeactivateAlertItem:forReason:]
  -[SBUserAlertNotificationSource dispatcher]
  -[SBUserAlertNotificationSource canPresentMultipleAlertItemsSimultaneously]
  -[SBUserAlertNotificationSource alertItemsController:willActivateAlertItem:]
  -[SBUserAlertNotificationSource setDispatcher:]
  -[SBUserAlertNotificationSource alertItemsController:didActivateAlertItem:]
  -[SBUserAlertNotificationSource dealloc]
  -[SBUserAlertNotificationSource dismissAlertItem:animated:completion:]
  -[SBUserAlertNotificationSource initWithDispatcher:]


SBReachabilitySettings : PTSettings
 @property  BOOL allowOnAllDevices
 @property  double reachabilityDefaultKeepAlive
 @property  double reachabilityInteractiveKeepAlive
 @property  double yOffsetFactor
 @property  double homeGestureSwipeDownHysteresis
 @property  double homeGestureSwipeDownHeight
 @property  double systemWideSwipeDownHeight
 @property  SBFFluidBehaviorSettings *animationSettings

  // class methods
  +[SBReachabilitySettings settingsControllerModule]

  // instance methods
  -[SBReachabilitySettings setAnimationSettings:]
  -[SBReachabilitySettings animationSettings]
  -[SBReachabilitySettings yOffset]
  -[SBReachabilitySettings .cxx_destruct]
  -[SBReachabilitySettings setDefaultValues]
  -[SBReachabilitySettings allowOnAllDevices]
  -[SBReachabilitySettings reachabilityInteractiveKeepAlive]
  -[SBReachabilitySettings reachabilityDefaultKeepAlive]
  -[SBReachabilitySettings homeGestureSwipeDownHeight]
  -[SBReachabilitySettings setAllowOnAllDevices:]
  -[SBReachabilitySettings setReachabilityDefaultKeepAlive:]
  -[SBReachabilitySettings setReachabilityInteractiveKeepAlive:]
  -[SBReachabilitySettings setYOffsetFactor:]
  -[SBReachabilitySettings setHomeGestureSwipeDownHysteresis:]
  -[SBReachabilitySettings setHomeGestureSwipeDownHeight:]
  -[SBReachabilitySettings setSystemWideSwipeDownHeight:]
  -[SBReachabilitySettings yOffsetFactor]
  -[SBReachabilitySettings homeGestureSwipeDownHysteresis]
  -[SBReachabilitySettings systemWideSwipeDownHeight]


SBCameraHardwareButtonStudyLogger : NSObject
  // instance methods
  -[SBCameraHardwareButtonStudyLogger .cxx_destruct]
  -[SBCameraHardwareButtonStudyLogger init]
  -[SBCameraHardwareButtonStudyLogger dealloc]
  -[SBCameraHardwareButtonStudyLogger _handleApplicationProcessStateDidChangeNotification:]
  -[SBCameraHardwareButtonStudyLogger logButtonEvent:]
  -[SBCameraHardwareButtonStudyLogger logPocketState:]
  -[SBCameraHardwareButtonStudyLogger _startProcessMonitor]
  -[SBCameraHardwareButtonStudyLogger _stopProcessMonitor]


SBDashBoardPolicyBasedBehaviorProvider : NSObject <CSExternalBehaviorProviding>
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDashBoardPolicyBasedBehaviorProvider _cameraRestrictions]
  -[SBDashBoardPolicyBasedBehaviorProvider coverSheetIdentifier]
  -[SBDashBoardPolicyBasedBehaviorProvider conformsToCSBehaviorProviding]
  -[SBDashBoardPolicyBasedBehaviorProvider conformsToCSExternalBehaviorProviding]
  -[SBDashBoardPolicyBasedBehaviorProvider .cxx_destruct]
  -[SBDashBoardPolicyBasedBehaviorProvider _restrictedCapability:forAggregatorCapability:]
  -[SBDashBoardPolicyBasedBehaviorProvider participantState]
  -[SBDashBoardPolicyBasedBehaviorProvider restrictedCapabilities]
  -[SBDashBoardPolicyBasedBehaviorProvider initWithCoverSheetViewController:policyAggregator:]
  -[SBDashBoardPolicyBasedBehaviorProvider proximityDetectionMode]
  -[SBDashBoardPolicyBasedBehaviorProvider dealloc]
  -[SBDashBoardPolicyBasedBehaviorProvider scrollingStrategy]
  -[SBDashBoardPolicyBasedBehaviorProvider notificationBehavior]


SBRootSceneWindow : UIRootSceneWindow

SBSpringBoardApplicationIcon : SBLeafIcon
  // instance methods
  -[SBSpringBoardApplicationIcon initWithLeafIdentifier:applicationBundleID:]
  -[SBSpringBoardApplicationIcon displayNameForLocation:]
  -[SBSpringBoardApplicationIcon init]
  -[SBSpringBoardApplicationIcon isUninstallSupported]
  -[SBSpringBoardApplicationIcon generateIconImageWithInfo:]
  -[SBSpringBoardApplicationIcon canTruncateLabel]
  -[SBSpringBoardApplicationIcon canTightenLabel]
  -[SBSpringBoardApplicationIcon initWithInterfaceStyle:]
  -[SBSpringBoardApplicationIcon _generateImageWithInfo:]


SBTransientOverlayBlockTransitionCoordinator : NSObject <SBTransientOverlayTransitionCoordinating>
 @property  @? startTransitionHandler
 @property  @? finalizeTransitionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTransientOverlayBlockTransitionCoordinator .cxx_destruct]
  -[SBTransientOverlayBlockTransitionCoordinator setStartTransitionHandler:]
  -[SBTransientOverlayBlockTransitionCoordinator setFinalizeTransitionHandler:]
  -[SBTransientOverlayBlockTransitionCoordinator finalizeTransitionWithContextProvider:]
  -[SBTransientOverlayBlockTransitionCoordinator startTransitionWithContextProvider:]
  -[SBTransientOverlayBlockTransitionCoordinator startTransitionHandler]
  -[SBTransientOverlayBlockTransitionCoordinator finalizeTransitionHandler]


SBFullScreenToHomeCenterZoomDownSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier homeScreenBackdropBlurType]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier transitionWillBegin]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier isHomeScreenContentRequired]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier scaleForIndex:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier frameForIndex:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier visibleAppLayouts]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier .cxx_destruct]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier isSwitcherWindowVisible]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier _layoutSettings]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier wallpaperStyle]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier cornerRadiiForIndex:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier didMoveToParentModifier:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier topMostLayoutElements]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier _opacitySettings]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier initWithTransitionID:appLayout:offsetYPercentOfScreenHeight:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier _isIndexCenterZoomAppLayout:]


SBActivateAppUnderLockScreenWorkspaceTransaction : SBToAppsWorkspaceTransaction
  // instance methods
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _didComplete]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _begin]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction shouldPerformToAppStateCleanupOnCompletion]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction initWithTransitionRequest:lockScreenEnvironment:]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction .cxx_destruct]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _lockScreenDidActivate]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction shouldPlaceOutgoingScenesUnderLockOnCompletion]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction dealloc]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _activateLockScreen]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _setupAndActivate]


SBCrossfadeDosidoSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCrossfadeDosidoSwitcherModifier homeScreenDimmingAlpha]
  -[SBCrossfadeDosidoSwitcherModifier homeScreenBackdropBlurType]
  -[SBCrossfadeDosidoSwitcherModifier transitionWillBegin]
  -[SBCrossfadeDosidoSwitcherModifier wallpaperScale]
  -[SBCrossfadeDosidoSwitcherModifier homeScreenScale]
  -[SBCrossfadeDosidoSwitcherModifier homeScreenAlpha]
  -[SBCrossfadeDosidoSwitcherModifier transactionCompletionOptions]
  -[SBCrossfadeDosidoSwitcherModifier isHomeScreenContentRequired]
  -[SBCrossfadeDosidoSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCrossfadeDosidoSwitcherModifier scaleForIndex:]
  -[SBCrossfadeDosidoSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBCrossfadeDosidoSwitcherModifier frameForIndex:]
  -[SBCrossfadeDosidoSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBCrossfadeDosidoSwitcherModifier visibleAppLayouts]
  -[SBCrossfadeDosidoSwitcherModifier .cxx_destruct]
  -[SBCrossfadeDosidoSwitcherModifier isSwitcherWindowVisible]
  -[SBCrossfadeDosidoSwitcherModifier wallpaperStyle]
  -[SBCrossfadeDosidoSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBCrossfadeDosidoSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBCrossfadeDosidoSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBCrossfadeDosidoSwitcherModifier topMostLayoutElements]
  -[SBCrossfadeDosidoSwitcherModifier _isToAppLayoutAtIndex:]
  -[SBCrossfadeDosidoSwitcherModifier _opacitySettings]
  -[SBCrossfadeDosidoSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]
  -[SBCrossfadeDosidoSwitcherModifier _isFromAppLayoutAtIndex:]
  -[SBCrossfadeDosidoSwitcherModifier _shouldEnsureHomeScreenVisible]


SBMesaUnlockTrigger : NSObject
 @property  <SBMesaUnlockTriggerDelegate> *delegate
 @property  BOOL authenticated

  // instance methods
  -[SBMesaUnlockTrigger screenOff]
  -[SBMesaUnlockTrigger screenOn]
  -[SBMesaUnlockTrigger bioUnlock]
  -[SBMesaUnlockTrigger setAuthenticated:]
  -[SBMesaUnlockTrigger .cxx_destruct]
  -[SBMesaUnlockTrigger succinctDescriptionBuilder]
  -[SBMesaUnlockTrigger setDelegate:]
  -[SBMesaUnlockTrigger descriptionBuilderWithMultilinePrefix:]
  -[SBMesaUnlockTrigger authenticated]
  -[SBMesaUnlockTrigger descriptionWithMultilinePrefix:]
  -[SBMesaUnlockTrigger succinctDescription]
  -[SBMesaUnlockTrigger menuButtonDown]
  -[SBMesaUnlockTrigger lockButtonDown]
  -[SBMesaUnlockTrigger delegate]
  -[SBMesaUnlockTrigger fingerOn]
  -[SBMesaUnlockTrigger menuButtonUp]
  -[SBMesaUnlockTrigger significantUserInteractionOccurred]
  -[SBMesaUnlockTrigger fingerOff]


SBDashBoardApplicationInformer : NSObject <CSApplicationInforming>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardApplicationInformer .cxx_destruct]
  -[SBDashBoardApplicationInformer init]
  -[SBDashBoardApplicationInformer addApplicationInformationObserver:]
  -[SBDashBoardApplicationInformer shouldScreenTimeSuppressNotificationsForBundleIdentifier:]
  -[SBDashBoardApplicationInformer _screenTimeNotificationPolicyDidChange:]
  -[SBDashBoardApplicationInformer isBundleIdentifierClock:]
  -[SBDashBoardApplicationInformer isBundleIdentifierWallet:]
  -[SBDashBoardApplicationInformer dealloc]
  -[SBDashBoardApplicationInformer removeApplicationInformationObserver:]
  -[SBDashBoardApplicationInformer _isBundleIdentifierBlockedForScreenTimeExpiration:]
  -[SBDashBoardApplicationInformer _installedApplicationsDidChange:]
  -[SBDashBoardApplicationInformer _isBundleIdentifierBlockedForCommunicationPolicy:]


SBFullScreenToHomeSlideOverSwitcherModifier : SBTransitionSwitcherModifier
 @property  long long startingScreenEdge
 @property  BOOL shouldBlurUnreadyScenes

  // instance methods
  -[SBFullScreenToHomeSlideOverSwitcherModifier homeScreenBackdropBlurType]
  -[SBFullScreenToHomeSlideOverSwitcherModifier transitionWillBegin]
  -[SBFullScreenToHomeSlideOverSwitcherModifier homeScreenAlpha]
  -[SBFullScreenToHomeSlideOverSwitcherModifier initWithTransitionID:appLayout:direction:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isHomeScreenContentRequired]
  -[SBFullScreenToHomeSlideOverSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier scaleForIndex:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier frameForIndex:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBFullScreenToHomeSlideOverSwitcherModifier visibleAppLayouts]
  -[SBFullScreenToHomeSlideOverSwitcherModifier .cxx_destruct]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isSwitcherWindowVisible]
  -[SBFullScreenToHomeSlideOverSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier wallpaperStyle]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBFullScreenToHomeSlideOverSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier handleSceneReadyEvent:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier setStartingScreenEdge:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier setShouldBlurUnreadyScenes:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier _isIndexSlideOverAppLayout:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier _shouldApplySlideOverLayoutToIndex:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier startingScreenEdge]
  -[SBFullScreenToHomeSlideOverSwitcherModifier shouldBlurUnreadyScenes]


SBLockScreenEmergencyCallViewController : SBUIEmergencyCallHostViewController
 @property  <SBLockScreenEmergencyCallViewControllerDelegate> *delegate

  // instance methods
  -[SBLockScreenEmergencyCallViewController setBackgroundStyle:]
  -[SBLockScreenEmergencyCallViewController viewServiceDidTerminateWithError:]
  -[SBLockScreenEmergencyCallViewController .cxx_destruct]
  -[SBLockScreenEmergencyCallViewController setDelegate:]
  -[SBLockScreenEmergencyCallViewController dismiss]
  -[SBLockScreenEmergencyCallViewController delegate]
  -[SBLockScreenEmergencyCallViewController _canShowWhileLocked]
  -[SBLockScreenEmergencyCallViewController tintColorForBackgroundStyle:outBlurRadius:]
  -[SBLockScreenEmergencyCallViewController _wallpaperStyleFromUIBackgroundStyle:]


SBSwitcherModelRemovalResults : NSObject
 @property  NSArray *appLayouts

  // instance methods
  -[SBSwitcherModelRemovalResults .cxx_destruct]
  -[SBSwitcherModelRemovalResults init]
  -[SBSwitcherModelRemovalResults appLayouts]
  -[SBSwitcherModelRemovalResults executeActionForAppLayout:]
  -[SBSwitcherModelRemovalResults setAction:forAppLayout:]
  -[SBSwitcherModelRemovalResults replacementAppLayoutForAppLayout:]
  -[SBSwitcherModelRemovalResults willHideDisplayItem:]
  -[SBSwitcherModelRemovalResults setReplacementAppLayout:forAppLayout:]
  -[SBSwitcherModelRemovalResults setHide:forDisplayItem:]
  -[SBSwitcherModelRemovalResults removeAppLayout:]


_SBStatusBarLocalDataOverridesWrapper : NSObject
 @property  ^{?=[44B]b1b1b1b1b1b1b1b1b2b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1Ib1b1b1b1b1b1b1b1{?=[44B][64c][64c][256c]iiii[100c][100c][100c][100c][2[100c]][1024c]IIb1b1iib1IIiI[150c]iib1b1b1[256c]b1b1b1b2b2b1Ib1b1b1[256c][256c][100c]b1b1b1b1b1db1b1[100c][100c][256c][256c]}} overrides

  // instance methods
  -[_SBStatusBarLocalDataOverridesWrapper overrides]
  -[_SBStatusBarLocalDataOverridesWrapper dealloc]
  -[_SBStatusBarLocalDataOverridesWrapper setOverrides:]


SBUIStartupToHomescreenAnimationController : SBUIMainScreenAnimationController
  // instance methods
  -[SBUIStartupToHomescreenAnimationController _cleanupAnimation]
  -[SBUIStartupToHomescreenAnimationController animationSettings]
  -[SBUIStartupToHomescreenAnimationController _startAnimation]
  -[SBUIStartupToHomescreenAnimationController .cxx_destruct]
  -[SBUIStartupToHomescreenAnimationController _prepareAnimation]
  -[SBUIStartupToHomescreenAnimationController _animationDelay]
  -[SBUIStartupToHomescreenAnimationController initWithTransitionContextProvider:overlay:]
  -[SBUIStartupToHomescreenAnimationController initWithTransitionContextProvider:]
  -[SBUIStartupToHomescreenAnimationController _shouldDismissBanner]


SBCenterWindowPagePresentationSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCenterWindowPagePresentationSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBCenterWindowPagePresentationSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBCenterWindowPagePresentationSwitcherModifier transitionWillBegin]
  -[SBCenterWindowPagePresentationSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[SBCenterWindowPagePresentationSwitcherModifier frameForIndex:]
  -[SBCenterWindowPagePresentationSwitcherModifier visibleAppLayouts]
  -[SBCenterWindowPagePresentationSwitcherModifier .cxx_destruct]
  -[SBCenterWindowPagePresentationSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBCenterWindowPagePresentationSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBCenterWindowPagePresentationSwitcherModifier topMostLayoutElements]
  -[SBCenterWindowPagePresentationSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBCenterWindowPagePresentationSwitcherModifier initWithTransitionID:toAppLayout:isMorph:]


SBPIPSceneContentContainerAdapter : NSObject <SBPIPStashableWrapperViewControllerDelegate, SBLayoutStateTransitionObserver, SBDeviceApplicationSceneHandleObserver, SBWorkspaceKeyboardFocusControllerObserver, SBKeyboardDismissalParticipant, SBPIPContainerViewControllerAdapter>
 @property  UIViewController<SBPIPSceneContentProviding> *sceneContentViewController
 @property  SBPIPContainerViewController *containerViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPSceneContentContainerAdapter containerViewController]
  -[SBPIPSceneContentContainerAdapter setContainerViewController:]
  -[SBPIPSceneContentContainerAdapter layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBPIPSceneContentContainerAdapter layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBPIPSceneContentContainerAdapter .cxx_destruct]
  -[SBPIPSceneContentContainerAdapter dealloc]
  -[SBPIPSceneContentContainerAdapter invalidate]
  -[SBPIPSceneContentContainerAdapter keyboardFocusController:externalSceneDidAcquireFocus:]
  -[SBPIPSceneContentContainerAdapter sceneHandle:didUpdatePairingStatusForExternalSceneIdentifiers:]
  -[SBPIPSceneContentContainerAdapter initWithSceneContentViewController:contentViewLayoutSettings:stashSettings:shadowSettings:interactionSettings:remoteKeyboards:keyboardFocusController:keyboardSuppressionManager:keyboardDismissalManager:deactivationManager:transitionCoordinator:delegate:]
  -[SBPIPSceneContentContainerAdapter sceneContentViewController]
  -[SBPIPSceneContentContainerAdapter contentViewControllerForContainerViewController:]
  -[SBPIPSceneContentContainerAdapter loadSubviewsForContainerViewController:]
  -[SBPIPSceneContentContainerAdapter containerViewController:shouldHandleStashingForTransitionContext:]
  -[SBPIPSceneContentContainerAdapter containerViewControllerWillBeginSizeChange:behavior:]
  -[SBPIPSceneContentContainerAdapter containerViewControllerDidEndSizeChange:]
  -[SBPIPSceneContentContainerAdapter containerViewController:didUpdateStashProgress:]
  -[SBPIPSceneContentContainerAdapter containerViewController:didSettleOnStashState:]
  -[SBPIPSceneContentContainerAdapter containerViewController:willBeginInteractionWithGestureRecognizer:]
  -[SBPIPSceneContentContainerAdapter containerViewControllerDidEndInteraction:]
  -[SBPIPSceneContentContainerAdapter containerViewControllerPanGestureDidEnd:]
  -[SBPIPSceneContentContainerAdapter isStashTabHiddenForContainerViewController:]
  -[SBPIPSceneContentContainerAdapter containerViewController:wantsStashTabHidden:left:springSettings:completion:]
  -[SBPIPSceneContentContainerAdapter containerViewController:handleDestructionRequestForSceneHandle:]
  -[SBPIPSceneContentContainerAdapter hostedAppSceneHandleForContainerViewController:]
  -[SBPIPSceneContentContainerAdapter containerViewController:willUpdateStashState:]
  -[SBPIPSceneContentContainerAdapter containerViewController:didUpdateStashState:springSettings:]
  -[SBPIPSceneContentContainerAdapter containerViewControllerShouldRequireMedusaKeyboard:]
  -[SBPIPSceneContentContainerAdapter processIdentifierForContainerViewController:]
  -[SBPIPSceneContentContainerAdapter bundleIdentifierForContainerViewController:]
  -[SBPIPSceneContentContainerAdapter scenePersistenceIdentifierForContainerViewController:]
  -[SBPIPSceneContentContainerAdapter keyboardDismissalManager:shouldPreventDismissalForTouch:inWindow:]
  -[SBPIPSceneContentContainerAdapter stashableWrapper:didTransitionToStashed:]
  -[SBPIPSceneContentContainerAdapter stashableWrapper:didReceivedTapGesture:]
  -[SBPIPSceneContentContainerAdapter _hostedAppSceneHandle]
  -[SBPIPSceneContentContainerAdapter _tapInEnvironmentCanDismiss:]
  -[SBPIPSceneContentContainerAdapter _dismissKeyboardIfNecessaryForTransitionContext:]
  -[SBPIPSceneContentContainerAdapter _effectiveEnvironmentModeForTransitionContext:]
  -[SBPIPSceneContentContainerAdapter _updateDisplayLayoutElementKeyboardFocus:]
  -[SBPIPSceneContentContainerAdapter _hostedSceneIsPresentingKeyboard]
  -[SBPIPSceneContentContainerAdapter _hitTestTouch:inWindow:]


SBControlCenterPresentationObservationToken : SBPresentationObservationToken
 @property  SBControlCenterController *controlCenterController

  // instance methods
  -[SBControlCenterPresentationObservationToken .cxx_destruct]
  -[SBControlCenterPresentationObservationToken state]
  -[SBControlCenterPresentationObservationToken dealloc]
  -[SBControlCenterPresentationObservationToken initWithControlCenterController:]
  -[SBControlCenterPresentationObservationToken controlCenterController]


SBBlurItemContainerSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  BOOL shouldBlur

  // instance methods
  -[SBBlurItemContainerSwitcherEventResponse appLayout]
  -[SBBlurItemContainerSwitcherEventResponse .cxx_destruct]
  -[SBBlurItemContainerSwitcherEventResponse type]
  -[SBBlurItemContainerSwitcherEventResponse shouldBlur]
  -[SBBlurItemContainerSwitcherEventResponse initWithAppLayout:shouldBlur:]


SBVoiceControlTransientOverlayViewController : SBTransientOverlayViewController <SBVoiceControlViewControllerDelegate, CSExternalBehaviorProviding>
 @property  NSArray *nextRecognitionAudioInputPaths
 @property  BOOL shouldAllowSensitiveActions
 @property  BOOL shouldDisableHandlerActions
 @property  BOOL shouldDisableVoiceControlForBluetoothRequests
 @property  BOOL voiceControlLoggingEnabled
 @property  <SBVoiceControlTransientOverlayViewControllerDelegate> *voiceControlDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBVoiceControlTransientOverlayViewController preferredStatusBarStyle]
  -[SBVoiceControlTransientOverlayViewController preferredWhitePointAdaptivityStyle]
  -[SBVoiceControlTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBVoiceControlTransientOverlayViewController initWithSource:]
  -[SBVoiceControlTransientOverlayViewController setContainerOrientation:]
  -[SBVoiceControlTransientOverlayViewController coverSheetIdentifier]
  -[SBVoiceControlTransientOverlayViewController conformsToCSBehaviorProviding]
  -[SBVoiceControlTransientOverlayViewController handleHomeButtonPress]
  -[SBVoiceControlTransientOverlayViewController idleTimerMode]
  -[SBVoiceControlTransientOverlayViewController conformsToCSExternalBehaviorProviding]
  -[SBVoiceControlTransientOverlayViewController idleWarnMode]
  -[SBVoiceControlTransientOverlayViewController .cxx_destruct]
  -[SBVoiceControlTransientOverlayViewController idleTimerDuration]
  -[SBVoiceControlTransientOverlayViewController viewDidLoad]
  -[SBVoiceControlTransientOverlayViewController canResignFirstResponder]
  -[SBVoiceControlTransientOverlayViewController canBecomeFirstResponder]
  -[SBVoiceControlTransientOverlayViewController viewDidAppear:]
  -[SBVoiceControlTransientOverlayViewController becomeFirstResponder]
  -[SBVoiceControlTransientOverlayViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBVoiceControlTransientOverlayViewController shouldAutorotate]
  -[SBVoiceControlTransientOverlayViewController participantState]
  -[SBVoiceControlTransientOverlayViewController resignFirstResponder]
  -[SBVoiceControlTransientOverlayViewController viewWillDisappear:]
  -[SBVoiceControlTransientOverlayViewController viewDidLayoutSubviews]
  -[SBVoiceControlTransientOverlayViewController viewWillAppear:]
  -[SBVoiceControlTransientOverlayViewController restrictedCapabilities]
  -[SBVoiceControlTransientOverlayViewController proximityDetectionMode]
  -[SBVoiceControlTransientOverlayViewController dealloc]
  -[SBVoiceControlTransientOverlayViewController scrollingStrategy]
  -[SBVoiceControlTransientOverlayViewController _preferredStatusBarVisibility]
  -[SBVoiceControlTransientOverlayViewController childViewControllerForScreenEdgesDeferringSystemGestures]
  -[SBVoiceControlTransientOverlayViewController supportedInterfaceOrientations]
  -[SBVoiceControlTransientOverlayViewController viewDidDisappear:]
  -[SBVoiceControlTransientOverlayViewController childViewControllerForHomeIndicatorAutoHidden]
  -[SBVoiceControlTransientOverlayViewController _canShowWhileLocked]
  -[SBVoiceControlTransientOverlayViewController notificationBehavior]
  -[SBVoiceControlTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBVoiceControlTransientOverlayViewController beginIgnoringAppearanceUpdates]
  -[SBVoiceControlTransientOverlayViewController endIgnoringAppearanceUpdates]
  -[SBVoiceControlTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBVoiceControlTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBVoiceControlTransientOverlayViewController handleGestureDismissal]
  -[SBVoiceControlTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBVoiceControlTransientOverlayViewController shouldDisableOrientationUpdates]
  -[SBVoiceControlTransientOverlayViewController prefersProximityDetectionEnabled]
  -[SBVoiceControlTransientOverlayViewController resetSessionWithSource:]
  -[SBVoiceControlTransientOverlayViewController handleHeadsetButtonUpFromButtonDownSource:]
  -[SBVoiceControlTransientOverlayViewController setNextRecognitionAudioInputPaths:]
  -[SBVoiceControlTransientOverlayViewController setVoiceControlDelegate:]
  -[SBVoiceControlTransientOverlayViewController isVoiceControlLoggingEnabled]
  -[SBVoiceControlTransientOverlayViewController setVoiceControlLoggingEnabled:]
  -[SBVoiceControlTransientOverlayViewController setShouldDisableHandlerActions:]
  -[SBVoiceControlTransientOverlayViewController setShouldDisableVoiceControlForBluetoothRequests:]
  -[SBVoiceControlTransientOverlayViewController setShouldAllowSensitiveActions:]
  -[SBVoiceControlTransientOverlayViewController nextRecognitionAudioInputPaths]
  -[SBVoiceControlTransientOverlayViewController shouldAllowSensitiveActions]
  -[SBVoiceControlTransientOverlayViewController shouldDisableHandlerActions]
  -[SBVoiceControlTransientOverlayViewController shouldDisableVoiceControlForBluetoothRequests]
  -[SBVoiceControlTransientOverlayViewController voiceControlViewControllerPrefersProximityDetectionEnabledDidChange:]
  -[SBVoiceControlTransientOverlayViewController voiceControlViewControllerRequestsDismissal:]
  -[SBVoiceControlTransientOverlayViewController voiceControlDelegate]


SBIndirectPanGestureRecognizer : UIGestureRecognizer <_UIHoverEventRespondable, SBIndirectTouchLifecycleObserving, SBGestureRecognizerTouchHistoryProviding, SBGestureRecognizerPanGestureProviding>
 @property  {CGPoint=dd} origin
 @property  {CGPoint=dd} lastKnownPoint
 @property  unsigned long activatedEdge
 @property  SBTouchHistory *touchHistory
 @property  UIEvent *currentHoverEvent
 @property  UITouch *currentTouch
 @property  BSMonotonicReferenceTime *lastKnownMouseEventTimestamp
 @property  NSTimer *mouseIdleTimer
 @property  NSValue *gestureStartLocation
 @property  BSMonotonicReferenceTime *mouseEnteredNearEdgeRegionTimestamp
 @property  BOOL gesturePassedThroughScreenCenterRegion
 @property  BSMonotonicReferenceTime *lastMouseActivationTimestamp
 @property  double trackpadHysteresis
 @property  double mouseHysteresis
 @property  {CGPoint=dd} translationWithinHysteresisRange
 @property  unsigned long activatingEdge
 @property  SBSystemGestureManager *systemGestureManager
 @property  BOOL avoidActivatingForExternallyOwnedEdges
 @property  unsigned long edges
 @property  BOOL shouldCancelAfterMovingAwayFromEdge
 @property  BOOL shouldInvertXAxis
 @property  BOOL shouldInvertYAxis
 @property  BOOL pausedUntilTouchedUpOrMovedAwayFromEdge
 @property  @? translationAdjustmentBlock
 @property  BOOL shouldActivateWithThreshold
 @property  double activationRecognitionDistance
 @property  BOOL shouldRequireGestureToStartAtEdge
 @property  unsigned long endReason
 @property  unsigned long currentInputType
 @property  <SBIndirectPanGestureRecognizerOrientationProviding> *orientationProvider
 @property  <SBSystemGestureRecognizerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIndirectPanGestureRecognizer systemGestureManager]
  -[SBIndirectPanGestureRecognizer _hoverMoved:withEvent:]
  -[SBIndirectPanGestureRecognizer currentInputType]
  -[SBIndirectPanGestureRecognizer lastKnownPoint]
  -[SBIndirectPanGestureRecognizer velocityInView:]
  -[SBIndirectPanGestureRecognizer mouseEnteredNearEdgeRegionTimestamp]
  -[SBIndirectPanGestureRecognizer setTouchHistory:]
  -[SBIndirectPanGestureRecognizer _hoverEntered:withEvent:]
  -[SBIndirectPanGestureRecognizer _effectiveOrientation]
  -[SBIndirectPanGestureRecognizer setAllowedTouchTypes:]
  -[SBIndirectPanGestureRecognizer activatedEdge]
  -[SBIndirectPanGestureRecognizer setMouseEnteredNearEdgeRegionTimestamp:]
  -[SBIndirectPanGestureRecognizer _mouseIdleTimerFired:]
  -[SBIndirectPanGestureRecognizer origin]
  -[SBIndirectPanGestureRecognizer setShouldInvertXAxis:]
  -[SBIndirectPanGestureRecognizer setTrackpadHysteresis:]
  -[SBIndirectPanGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBIndirectPanGestureRecognizer setOrigin:]
  -[SBIndirectPanGestureRecognizer currentHoverEvent]
  -[SBIndirectPanGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBIndirectPanGestureRecognizer _hasTranslationReachedThreshold:withTranslation:forEdge:]
  -[SBIndirectPanGestureRecognizer canBePreventedByGestureRecognizer:]
  -[SBIndirectPanGestureRecognizer peakSpeed]
  -[SBIndirectPanGestureRecognizer setActivatingEdge:]
  -[SBIndirectPanGestureRecognizer _hoverExited:withEvent:]
  -[SBIndirectPanGestureRecognizer setHysteresis:forInputType:]
  -[SBIndirectPanGestureRecognizer containerView]
  -[SBIndirectPanGestureRecognizer setSystemGestureManager:]
  -[SBIndirectPanGestureRecognizer setMouseHysteresis:]
  -[SBIndirectPanGestureRecognizer setOrientationProvider:]
  -[SBIndirectPanGestureRecognizer .cxx_destruct]
  -[SBIndirectPanGestureRecognizer touchHistory]
  -[SBIndirectPanGestureRecognizer translationInView:]
  -[SBIndirectPanGestureRecognizer _hoverCancelled:withEvent:]
  -[SBIndirectPanGestureRecognizer currentTouch]
  -[SBIndirectPanGestureRecognizer shouldRequireGestureToStartAtEdge]
  -[SBIndirectPanGestureRecognizer setAvoidActivatingForExternallyOwnedEdges:]
  -[SBIndirectPanGestureRecognizer orientationProvider]
  -[SBIndirectPanGestureRecognizer setGestureStartLocation:]
  -[SBIndirectPanGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBIndirectPanGestureRecognizer endReason]
  -[SBIndirectPanGestureRecognizer setCurrentTouch:]
  -[SBIndirectPanGestureRecognizer setLastMouseActivationTimestamp:]
  -[SBIndirectPanGestureRecognizer activatingEdge]
  -[SBIndirectPanGestureRecognizer _isPointerOnTopScreenCorner:radius:]
  -[SBIndirectPanGestureRecognizer shouldCancelAfterMovingAwayFromEdge]
  -[SBIndirectPanGestureRecognizer setActivationRecognitionDistance:]
  -[SBIndirectPanGestureRecognizer _axisForEdge:]
  -[SBIndirectPanGestureRecognizer gesturePassedThroughScreenCenterRegion]
  -[SBIndirectPanGestureRecognizer avoidActivatingForExternallyOwnedEdges]
  -[SBIndirectPanGestureRecognizer shouldInvertYAxis]
  -[SBIndirectPanGestureRecognizer trackpadDidTouchUpWithEvent:]
  -[SBIndirectPanGestureRecognizer setMouseIdleTimer:]
  -[SBIndirectPanGestureRecognizer _resetTranslationState]
  -[SBIndirectPanGestureRecognizer setShouldCancelAfterMovingAwayFromEdge:]
  -[SBIndirectPanGestureRecognizer _mouseIdleTimerElapsed]
  -[SBIndirectPanGestureRecognizer translationWithinHysteresisRange]
  -[SBIndirectPanGestureRecognizer updateTouchHistoryWithTouches:]
  -[SBIndirectPanGestureRecognizer reset]
  -[SBIndirectPanGestureRecognizer _pointerModelLocation]
  -[SBIndirectPanGestureRecognizer canPreventGestureRecognizer:]
  -[SBIndirectPanGestureRecognizer _convertPoint:fromView:toView:]
  -[SBIndirectPanGestureRecognizer gestureStartLocation]
  -[SBIndirectPanGestureRecognizer hysteresisForInputType:]
  -[SBIndirectPanGestureRecognizer lastMouseActivationTimestamp]
  -[SBIndirectPanGestureRecognizer setGesturePassedThroughScreenCenterRegion:]
  -[SBIndirectPanGestureRecognizer lastKnownMouseEventTimestamp]
  -[SBIndirectPanGestureRecognizer pausedUntilTouchedUpOrMovedAwayFromEdge]
  -[SBIndirectPanGestureRecognizer setPausedUntilTouchedUpOrMovedAwayFromEdge:]
  -[SBIndirectPanGestureRecognizer setShouldActivateWithThreshold:]
  -[SBIndirectPanGestureRecognizer setCurrentHoverEvent:]
  -[SBIndirectPanGestureRecognizer _updateTranslationWithPointerEventAttributes:activeEdge:]
  -[SBIndirectPanGestureRecognizer setLastKnownMouseEventTimestamp:]
  -[SBIndirectPanGestureRecognizer activationRecognitionDistance]
  -[SBIndirectPanGestureRecognizer locationInView:]
  -[SBIndirectPanGestureRecognizer setTranslationWithinHysteresisRange:]
  -[SBIndirectPanGestureRecognizer _isPointOnRoundedCorner:corner:radius:inView:]
  -[SBIndirectPanGestureRecognizer _shouldReceiveEvent:]
  -[SBIndirectPanGestureRecognizer setLastKnownPoint:]
  -[SBIndirectPanGestureRecognizer shouldActivateWithThreshold]
  -[SBIndirectPanGestureRecognizer mouseHysteresis]
  -[SBIndirectPanGestureRecognizer setActivatedEdge:]
  -[SBIndirectPanGestureRecognizer dealloc]
  -[SBIndirectPanGestureRecognizer initWithTarget:action:edges:systemGestureManager:]
  -[SBIndirectPanGestureRecognizer mouseIdleTimer]
  -[SBIndirectPanGestureRecognizer initWithTarget:action:edges:]
  -[SBIndirectPanGestureRecognizer setEdges:]
  -[SBIndirectPanGestureRecognizer shouldInvertXAxis]
  -[SBIndirectPanGestureRecognizer _edgeForPointerModelLocation:inView:inset:]
  -[SBIndirectPanGestureRecognizer setShouldRequireGestureToStartAtEdge:]
  -[SBIndirectPanGestureRecognizer trackpadHysteresis]
  -[SBIndirectPanGestureRecognizer edges]
  -[SBIndirectPanGestureRecognizer setTranslationAdjustmentBlock:]
  -[SBIndirectPanGestureRecognizer translationAdjustmentBlock]
  -[SBIndirectPanGestureRecognizer setShouldInvertYAxis:]
  -[SBIndirectPanGestureRecognizer _centerOfCircleForRoundedCorner:radius:inView:]


SBCardDragAndDropGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBCardDragAndDropGestureSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBCardDragAndDropGestureSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[SBCardDragAndDropGestureSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBCardDragAndDropGestureSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[SBCardDragAndDropGestureSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[SBCardDragAndDropGestureSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBCardDragAndDropGestureSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[SBCardDragAndDropGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCardDragAndDropGestureSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBCardDragAndDropGestureSwitcherModifier shouldUseNonuniformSnapshotScalingForLayoutRole:inAppLayout:]
  -[SBCardDragAndDropGestureSwitcherModifier visibleAppLayouts]
  -[SBCardDragAndDropGestureSwitcherModifier .cxx_destruct]
  -[SBCardDragAndDropGestureSwitcherModifier shouldShowBackdropViewAtIndex:]
  -[SBCardDragAndDropGestureSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBCardDragAndDropGestureSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBCardDragAndDropGestureSwitcherModifier cornerRadiiForLayoutRole:inAppLayout:withCornerRadii:]
  -[SBCardDragAndDropGestureSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBCardDragAndDropGestureSwitcherModifier blurTargetPreferenceForLayoutRole:inAppLayout:]
  -[SBCardDragAndDropGestureSwitcherModifier handleScrollEvent:]
  -[SBCardDragAndDropGestureSwitcherModifier shouldScaleContentToFillBoundsAtIndex:]
  -[SBCardDragAndDropGestureSwitcherModifier handleSceneReadyEvent:]
  -[SBCardDragAndDropGestureSwitcherModifier handleGestureEvent:]
  -[SBCardDragAndDropGestureSwitcherModifier initWithGestureID:]
  -[SBCardDragAndDropGestureSwitcherModifier handleSwitcherDropEvent:]
  -[SBCardDragAndDropGestureSwitcherModifier handleBlurProgressEvent:]
  -[SBCardDragAndDropGestureSwitcherModifier fullyPresentedFrameForLayoutRole:inAppLayout:]


SBAvocadoDebuggingController : NSObject <SBExtensionHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAvocadoDebuggingController .cxx_destruct]
  -[SBAvocadoDebuggingController init]
  -[SBAvocadoDebuggingController launchExtensionWithBundleID:options:completion:]
  -[SBAvocadoDebuggingController _descriptorForWidgetFromExtension:forRequestedKind:widgetFamily:toolService:error:]
  -[SBAvocadoDebuggingController reallyLaunchToWidgetOnHomeScreenForDescriptor:widgetFamily:]


SBWallpaperStyleRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWallpaperStyleRecipe load]

  // instance methods
  -[SBWallpaperStyleRecipe title]
  -[SBWallpaperStyleRecipe handleVolumeIncrease]
  -[SBWallpaperStyleRecipe handleVolumeDecrease]


SBSlideOverTongueView : UIView
 @property  <SBSlideOverTongueViewDelegate> *delegate
 @property  unsigned long direction
 @property  unsigned long state

  // instance methods
  -[SBSlideOverTongueView direction]
  -[SBSlideOverTongueView .cxx_destruct]
  -[SBSlideOverTongueView layoutSubviews]
  -[SBSlideOverTongueView setDelegate:]
  -[SBSlideOverTongueView _handleTap:]
  -[SBSlideOverTongueView state]
  -[SBSlideOverTongueView initWithFrame:]
  -[SBSlideOverTongueView pointInside:withEvent:]
  -[SBSlideOverTongueView delegate]
  -[SBSlideOverTongueView setDirection:state:animated:]
  -[SBSlideOverTongueView _updateContainerPosition]
  -[SBSlideOverTongueView _updateContainerTransform]
  -[SBSlideOverTongueView _updateSubviewCollapsedExpandedState]


SBAlertItemsObjectQueue : NSObject <BSDescriptionProviding, NSFastEnumeration>
 @property  NSMutableOrderedSet *objects
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAlertItemsObjectQueue containsObject:]
  -[SBAlertItemsObjectQueue appendObject:]
  -[SBAlertItemsObjectQueue dequeueAllObjects]
  -[SBAlertItemsObjectQueue objects]
  -[SBAlertItemsObjectQueue removeObject:]
  -[SBAlertItemsObjectQueue setObjects:]
  -[SBAlertItemsObjectQueue .cxx_destruct]
  -[SBAlertItemsObjectQueue succinctDescriptionBuilder]
  -[SBAlertItemsObjectQueue descriptionBuilderWithMultilinePrefix:]
  -[SBAlertItemsObjectQueue init]
  -[SBAlertItemsObjectQueue descriptionWithMultilinePrefix:]
  -[SBAlertItemsObjectQueue succinctDescription]
  -[SBAlertItemsObjectQueue hasObject]
  -[SBAlertItemsObjectQueue hasObjectOfClass:]
  -[SBAlertItemsObjectQueue countByEnumeratingWithState:objects:count:]
  -[SBAlertItemsObjectQueue objectsOfClass:]
  -[SBAlertItemsObjectQueue prependObject:]


SBSynchronizeCloudCriticalDataOperation : NSObject
 @property  BOOL complete

  // instance methods
  -[SBSynchronizeCloudCriticalDataOperation .cxx_destruct]
  -[SBSynchronizeCloudCriticalDataOperation _pendingOperationCount]
  -[SBSynchronizeCloudCriticalDataOperation init]
  -[SBSynchronizeCloudCriticalDataOperation isComplete]
  -[SBSynchronizeCloudCriticalDataOperation startSynchronize]
  -[SBSynchronizeCloudCriticalDataOperation waitForSynchronizeToCompleteWithTimeout:]
  -[SBSynchronizeCloudCriticalDataOperation initWithDefaults:userManager:]
  -[SBSynchronizeCloudCriticalDataOperation _queue_isComplete]
  -[SBSynchronizeCloudCriticalDataOperation _queue_startFetchingCloudCriticalData]
  -[SBSynchronizeCloudCriticalDataOperation _queue_fetchCloudAccountOperation]
  -[SBSynchronizeCloudCriticalDataOperation _queue_fetchCloudDefaultsOperation]
  -[SBSynchronizeCloudCriticalDataOperation _queue_fetchMDMProfilesOperation]
  -[SBSynchronizeCloudCriticalDataOperation _queue_migrateSoundPreferencesOperation]
  -[SBSynchronizeCloudCriticalDataOperation _queue_addOperation:shouldBlock:]
  -[SBSynchronizeCloudCriticalDataOperation _fetchDomains:fromIndex:queue:completion:]
  -[SBSynchronizeCloudCriticalDataOperation _addTestOperation:shouldBlock:]


SBNotificationLongLookBannerPresentationObservationToken : SBPresentationObservationToken <SBNotificationBannerDestinationObserver>
 @property  SBNotificationBannerDestination *notificationBannerDestination
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNotificationLongLookBannerPresentationObservationToken .cxx_destruct]
  -[SBNotificationLongLookBannerPresentationObservationToken state]
  -[SBNotificationLongLookBannerPresentationObservationToken dealloc]
  -[SBNotificationLongLookBannerPresentationObservationToken initWithNotificationBannerDestination:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestinationWillPresentLongLook:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestinationDidPresentLongLook:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestinationWillDismissLongLook:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestinationDidDismissLongLook:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestination]


SBGrabberTongue : NSObject <SBSystemGestureRecognizerDelegate>
 @property  <SBGrabberTongueDelegate> *delegate
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBGrabberTongue uninstall]
  -[SBGrabberTongue _distanceFromEdgeForRecognizer:]
  -[SBGrabberTongue _willDismiss]
  -[SBGrabberTongue edgePullGestureRecognizer]
  -[SBGrabberTongue _handleTapped:]
  -[SBGrabberTongue presentAnimated:]
  -[SBGrabberTongue _newChevronView]
  -[SBGrabberTongue _grabberTongueScreenInsets]
  -[SBGrabberTongue _frameForTongueWhenVisible:]
  -[SBGrabberTongue _shouldAllowSecondSwipeWithRecognizer:]
  -[SBGrabberTongue _didPresentInteractively:]
  -[SBGrabberTongue _cancelPendingTongueDismissRequests]
  -[SBGrabberTongue .cxx_destruct]
  -[SBGrabberTongue _shouldSecondSwipeDismissTongueWithRecognizer:]
  -[SBGrabberTongue _willPresent]
  -[SBGrabberTongue isEdgeLocationInGrabberRegion:]
  -[SBGrabberTongue _presentTongueAnimated:autoDismiss:]
  -[SBGrabberTongue _pullGestureUpdated:]
  -[SBGrabberTongue _pullGestureCanceled:]
  -[SBGrabberTongue init]
  -[SBGrabberTongue edgeLocationForTouch:]
  -[SBGrabberTongue viewForSystemGestureRecognizer:]
  -[SBGrabberTongue isVisible]
  -[SBGrabberTongue _willPresentInteractively:]
  -[SBGrabberTongue distanceFromEdge]
  -[SBGrabberTongue _chevronFrameForTongueBounds:]
  -[SBGrabberTongue _handlePullGesture:]
  -[SBGrabberTongue gestureRecognizerShouldBegin:]
  -[SBGrabberTongue _shouldShowTongueOnFirstSwipeWithRecognizer:]
  -[SBGrabberTongue initWithDelegate:edge:type:]
  -[SBGrabberTongue _tongueOrPullEnabledForGestureRecognizer:]
  -[SBGrabberTongue _pullGestureEnded:]
  -[SBGrabberTongue presentAnimated:autoDismiss:]
  -[SBGrabberTongue dismissWithStyle:animated:]
  -[SBGrabberTongue gestureRecognizer:shouldReceiveTouch:]
  -[SBGrabberTongue _shouldReceiveTouch:]
  -[SBGrabberTongue _createTongueAndGestureRecognizersIfNecessaryWithColorStyle:]
  -[SBGrabberTongue _didDismiss]
  -[SBGrabberTongue delegate]
  -[SBGrabberTongue _createTapGestureRecognizerWithAction:]
  -[SBGrabberTongue _dismissTongue:]
  -[SBGrabberTongue _edgeOrientedVelocityForRecognizer:]
  -[SBGrabberTongue _newBackdropViewWithColorStyle:]
  -[SBGrabberTongue indirectEdgePullGestureRecognizer]
  -[SBGrabberTongue _createEdgePullGestureRecognizerWithAction:]
  -[SBGrabberTongue dealloc]
  -[SBGrabberTongue invalidate]
  -[SBGrabberTongue _updateCancelsTouchesWithRecognizer:]
  -[SBGrabberTongue _centerOnScreenEdge]
  -[SBGrabberTongue _pullGestureBegan:]
  -[SBGrabberTongue _ambiguousActivationMargin]
  -[SBGrabberTongue _dismissTongueWithStyle:animated:]
  -[SBGrabberTongue edgeOrientedVelocity]
  -[SBGrabberTongue _ambiguousActivationMarginIfHonored]
  -[SBGrabberTongue _transformForTongueContainer]
  -[SBGrabberTongue installInView:withColorStyle:]


SBToAppsWorkspaceTransaction : SBMainWorkspaceTransaction <SBSceneLayoutWorkspaceTransactionDelegate, FBSynchronizedTransactionDelegate, SBUIAnimationControllerObserver>
 @property  SBFloatingDockBehaviorAssertion *floatingDockBehaviorAssertion
 @property  NSSet *toApplicationSceneEntities
 @property  NSSet *fromApplicationSceneEntities
 @property  SBSceneLayoutWorkspaceTransaction *layoutTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBToAppsWorkspaceTransaction canInterruptTransaction:forTransitionRequest:]

  // instance methods
  -[SBToAppsWorkspaceTransaction animationController]
  -[SBToAppsWorkspaceTransaction _willInterruptWithReason:]
  -[SBToAppsWorkspaceTransaction _customizedDescriptionProperties]
  -[SBToAppsWorkspaceTransaction _configureAnimation]
  -[SBToAppsWorkspaceTransaction _shouldFailForChildTransaction:]
  -[SBToAppsWorkspaceTransaction fromApplicationSceneEntities]
  -[SBToAppsWorkspaceTransaction _didComplete]
  -[SBToAppsWorkspaceTransaction synchronizedTransactionReadyToCommit:]
  -[SBToAppsWorkspaceTransaction synchronizedTransaction:willCommitSynchronizedTransactions:]
  -[SBToAppsWorkspaceTransaction activateApplications]
  -[SBToAppsWorkspaceTransaction synchronizedTransaction:didCommitSynchronizedTransactions:]
  -[SBToAppsWorkspaceTransaction _childTransactionDidComplete:]
  -[SBToAppsWorkspaceTransaction toApplicationSceneEntities]
  -[SBToAppsWorkspaceTransaction _canBeInterrupted]
  -[SBToAppsWorkspaceTransaction _logForInterruptAttemptReason:]
  -[SBToAppsWorkspaceTransaction _willFailWithReason:]
  -[SBToAppsWorkspaceTransaction isGoingToMainSwitcher]
  -[SBToAppsWorkspaceTransaction _transitionContext]
  -[SBToAppsWorkspaceTransaction _didInterruptWithReason:]
  -[SBToAppsWorkspaceTransaction animationController:willBeginAnimation:]
  -[SBToAppsWorkspaceTransaction _fireAndClearResultBlockIfNecessaryForFailure:]
  -[SBToAppsWorkspaceTransaction shouldPerformToAppStateCleanupOnCompletion]
  -[SBToAppsWorkspaceTransaction _shouldSerialDismissOverlays]
  -[SBToAppsWorkspaceTransaction isFromMainSwitcher]
  -[SBToAppsWorkspaceTransaction transaction:performTransitionWithCompletion:]
  -[SBToAppsWorkspaceTransaction shouldRestoreSpringBoardContentOnCleanup]
  -[SBToAppsWorkspaceTransaction .cxx_destruct]
  -[SBToAppsWorkspaceTransaction _hasPreAnimationTasks]
  -[SBToAppsWorkspaceTransaction _endTransition]
  -[SBToAppsWorkspaceTransaction _clearAnimation]
  -[SBToAppsWorkspaceTransaction performToAppStateCleanup]
  -[SBToAppsWorkspaceTransaction shouldAnimateOrientationChangeOnCompletion]
  -[SBToAppsWorkspaceTransaction setFloatingDockBehaviorAssertion:]
  -[SBToAppsWorkspaceTransaction _beginTransition]
  -[SBToAppsWorkspaceTransaction _performPreAnimationTasksWithCompletion:]
  -[SBToAppsWorkspaceTransaction _animationDidFinish]
  -[SBToAppsWorkspaceTransaction _completeCurrentTransition]
  -[SBToAppsWorkspaceTransaction _noteAnimationFinished]
  -[SBToAppsWorkspaceTransaction isGoingToCoverSheet]
  -[SBToAppsWorkspaceTransaction _setupAnimation]
  -[SBToAppsWorkspaceTransaction _relinquishResignActiveAssertion]
  -[SBToAppsWorkspaceTransaction createSceneEntityForHandle:]
  -[SBToAppsWorkspaceTransaction _checkForAnimationCompletion]
  -[SBToAppsWorkspaceTransaction toAndFromAppsDiffer]
  -[SBToAppsWorkspaceTransaction floatingDockBehaviorAssertion]
  -[SBToAppsWorkspaceTransaction _stopDelayingTransitionCompletionForRequester:]
  -[SBToAppsWorkspaceTransaction _beginAnimationIfNecessary]
  -[SBToAppsWorkspaceTransaction shouldPlaceOutgoingScenesUnderLockOnCompletion]
  -[SBToAppsWorkspaceTransaction _shouldResignActiveForAnimation]
  -[SBToAppsWorkspaceTransaction _beginAnimation]
  -[SBToAppsWorkspaceTransaction initWithTransitionRequest:]
  -[SBToAppsWorkspaceTransaction _handleApplicationDidNotChange:]
  -[SBToAppsWorkspaceTransaction layoutTransaction]
  -[SBToAppsWorkspaceTransaction isGoingToLauncher]
  -[SBToAppsWorkspaceTransaction shouldWatchdog:]
  -[SBToAppsWorkspaceTransaction _handleApplicationUpdateScenesTransactionFailed:]
  -[SBToAppsWorkspaceTransaction _animationDidRevealApplication]
  -[SBToAppsWorkspaceTransaction _acquireResignActiveAssertion]
  -[SBToAppsWorkspaceTransaction _concurrentOverlayDismissalOptions]
  -[SBToAppsWorkspaceTransaction animationControllerDidFinishAnimation:]
  -[SBToAppsWorkspaceTransaction _hasPostAnimationTasks]
  -[SBToAppsWorkspaceTransaction dealloc]
  -[SBToAppsWorkspaceTransaction watchdogTimeout]
  -[SBToAppsWorkspaceTransaction transaction:didEndLayoutTransitionWithContinuation:]
  -[SBToAppsWorkspaceTransaction _delayTransitionCompletionForRequester:]
  -[SBToAppsWorkspaceTransaction _setShouldSerialDismissOverlays:]
  -[SBToAppsWorkspaceTransaction _scenesToBackground]
  -[SBToAppsWorkspaceTransaction _captureApplicationState]
  -[SBToAppsWorkspaceTransaction transactionWillBeginLayoutTransition:]
  -[SBToAppsWorkspaceTransaction _willBegin]
  -[SBToAppsWorkspaceTransaction _animationWillBegin:]
  -[SBToAppsWorkspaceTransaction animationControllerDidRevealApplication:]
  -[SBToAppsWorkspaceTransaction _transitionWasCancelled]
  -[SBToAppsWorkspaceTransaction _performPostAnimationTasksWithCompletion:]
  -[SBToAppsWorkspaceTransaction _synchronizeWithSceneUpdates]
  -[SBToAppsWorkspaceTransaction _serialOverlayPreDismissalOptions]


SBCustomEventDodgingModifierEvent : SBDodgingModifierEvent
 @property  NSString *name

  // instance methods
  -[SBCustomEventDodgingModifierEvent name]
  -[SBCustomEventDodgingModifierEvent .cxx_destruct]
  -[SBCustomEventDodgingModifierEvent initWithName:]
  -[SBCustomEventDodgingModifierEvent type]


SBCenterWindowToNewSplitViewSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCenterWindowToNewSplitViewSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBCenterWindowToNewSplitViewSwitcherModifier .cxx_destruct]
  -[SBCenterWindowToNewSplitViewSwitcherModifier topMostLayoutRolesForAppLayout:]
  -[SBCenterWindowToNewSplitViewSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBCenterWindowToNewSplitViewSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBCenterWindowToNewSplitViewSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBCenterWindowToNewSplitViewSwitcherModifier handleSceneReadyEvent:]
  -[SBCenterWindowToNewSplitViewSwitcherModifier initWithTransitionID:fromFullScreenAppLayout:toSpaceAppLayout:]
  -[SBCenterWindowToNewSplitViewSwitcherModifier _wasItemPreviouslyFullScreen:]
  -[SBCenterWindowToNewSplitViewSwitcherModifier _wasItemPreviouslyCenter:]


SBPowerLogMetricsAggregator : NSObject
  // instance methods
  -[SBPowerLogMetricsAggregator .cxx_destruct]
  -[SBPowerLogMetricsAggregator _startTimerIfNecessary]
  -[SBPowerLogMetricsAggregator init]
  -[SBPowerLogMetricsAggregator flushEventsDueToIminentPowerdown]
  -[SBPowerLogMetricsAggregator emitEventOfType:]
  -[SBPowerLogMetricsAggregator emitEventOfType:withDuration:]
  -[SBPowerLogMetricsAggregator _flushEvents]


SBLockHardwareButton : SBHardwareButtonGestureParametersProviderBase <UIGestureRecognizerDelegate, SBHardwareButtonGestureParametersObserver, SBPressPrecedenceArbiter>
 @property  SBLockHardwareButtonActions *buttonActions
 @property  SBHardwareButtonGestureParameters *buttonGestureParameters
 @property  SBPressGestureRecognizer *buttonDownGestureRecognizer
 @property  SBClickGestureRecognizer *singlePressGestureRecognizer
 @property  SBLongPressGestureRecognizer *longPressGestureRecognizer
 @property  SBClickGestureRecognizer *doublePressGestureRecognizer
 @property  SBClickGestureRecognizer *triplePressGestureRecognizer
 @property  SBClickGestureRecognizer *quadruplePressGestureRecognizer
 @property  UIGestureRecognizer *screenshotGestureRecognizer
 @property  SBLongPressGestureRecognizer *shutdownGestureRecognizer
 @property  SBHomeHardwareButton *homeHardwareButton
 @property  SBVolumeHardwareButton *volumeHardwareButton
 @property  long long homeButtonType
 @property  unsigned long configuredMaximumPressCount
 @property  unsigned long currentPressCount
 @property  BOOL isButtonDown
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockHardwareButton volumeHardwareButton]
  -[SBLockHardwareButton homeHardwareButton]
  -[SBLockHardwareButton singlePressGestureRecognizer]
  -[SBLockHardwareButton isButtonDown]
  -[SBLockHardwareButton gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBLockHardwareButton setShutdownGestureRecognizer:]
  -[SBLockHardwareButton setCurrentPressCount:]
  -[SBLockHardwareButton gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBLockHardwareButton setButtonGestureParameters:]
  -[SBLockHardwareButton buttonDownGestureRecognizer]
  -[SBLockHardwareButton .cxx_destruct]
  -[SBLockHardwareButton forceResetSequenceDidBegin]
  -[SBLockHardwareButton provider:didUpdateButtonGestureParameters:]
  -[SBLockHardwareButton buttonGestureParameters]
  -[SBLockHardwareButton triplePress:]
  -[SBLockHardwareButton screenshotRecognizerDidRecognize:]
  -[SBLockHardwareButton _updatePressCountForDownEvent]
  -[SBLockHardwareButton setButtonDownGestureRecognizer:]
  -[SBLockHardwareButton setConfiguredMaximumPressCount:]
  -[SBLockHardwareButton shutdownGestureRecognizer]
  -[SBLockHardwareButton _reportAggdLoggingForButtonEventIsDownEvent:]
  -[SBLockHardwareButton preemptablePressGestureRecognizers]
  -[SBLockHardwareButton setQuadruplePressGestureRecognizer:]
  -[SBLockHardwareButton triplePressGestureRecognizer]
  -[SBLockHardwareButton currentPressCount]
  -[SBLockHardwareButton doublePressGestureRecognizer]
  -[SBLockHardwareButton longPressGestureRecognizer]
  -[SBLockHardwareButton cancelLongPress]
  -[SBLockHardwareButton setSinglePressGestureRecognizer:]
  -[SBLockHardwareButton _createGestureRecognizers]
  -[SBLockHardwareButton gestureRecognizerShouldBegin:]
  -[SBLockHardwareButton longPress:]
  -[SBLockHardwareButton _gestureRecognizerFailed:]
  -[SBLockHardwareButton quadruplePress:]
  -[SBLockHardwareButton homeButtonType]
  -[SBLockHardwareButton setHomeHardwareButton:]
  -[SBLockHardwareButton setVolumeHardwareButton:]
  -[SBLockHardwareButton hardwareButtonGestureParameters]
  -[SBLockHardwareButton reverseFadeOutIfNeeded]
  -[SBLockHardwareButton buttonActions]
  -[SBLockHardwareButton setScreenshotGestureRecognizer:]
  -[SBLockHardwareButton quadruplePressGestureRecognizer]
  -[SBLockHardwareButton setLongPressGestureRecognizer:]
  -[SBLockHardwareButton setDoublePressGestureRecognizer:]
  -[SBLockHardwareButton setHomeButtonType:]
  -[SBLockHardwareButton initWithScreenshotGestureRecognizer:shutdownGestureRecognizer:proximitySensorManager:homeHardwareButton:volumeHardwareButton:homeButtonType:]
  -[SBLockHardwareButton configuredMaximumPressCount]
  -[SBLockHardwareButton dealloc]
  -[SBLockHardwareButton buttonDown:]
  -[SBLockHardwareButton initWithScreenshotGestureRecognizer:shutdownGestureRecognizer:proximitySensorManager:homeHardwareButton:volumeHardwareButton:buttonActions:homeButtonType:createGestures:]
  -[SBLockHardwareButton setTriplePressGestureRecognizer:]
  -[SBLockHardwareButton screenshotGestureRecognizer]
  -[SBLockHardwareButton doublePress:]
  -[SBLockHardwareButton _reconfigureButtonGestureRecognizers]
  -[SBLockHardwareButton setButtonActions:]
  -[SBLockHardwareButton singlePress:]
  -[SBLockHardwareButton SOSTriggerMechanismDidChange]


SBCommandTabViewController : UIViewController <SBIconViewDelegate>
 @property  <SBCommandTabViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBCommandTabViewController canActivateWithRecentDisplayItems:]

  // instance methods
  -[SBCommandTabViewController icon:touchEnded:]
  -[SBCommandTabViewController iconTouchBegan:]
  -[SBCommandTabViewController iconViewDisplaysAccessories:]
  -[SBCommandTabViewController previous]
  -[SBCommandTabViewController next]
  -[SBCommandTabViewController iconViewCanBeginDrags:]
  -[SBCommandTabViewController traitCollectionDidChange:]
  -[SBCommandTabViewController iconTapped:]
  -[SBCommandTabViewController .cxx_destruct]
  -[SBCommandTabViewController viewDidLoad]
  -[SBCommandTabViewController canBecomeFirstResponder]
  -[SBCommandTabViewController setDelegate:]
  -[SBCommandTabViewController init]
  -[SBCommandTabViewController _handleShiftCommandTab:]
  -[SBCommandTabViewController _handleCommandTab:]
  -[SBCommandTabViewController delegate]
  -[SBCommandTabViewController dealloc]
  -[SBCommandTabViewController removeDisplayItem:]
  -[SBCommandTabViewController selectedApplicationDisplayItem]
  -[SBCommandTabViewController indexOfDisplayItem:]
  -[SBCommandTabViewController showCommandTabBar]
  -[SBCommandTabViewController initWithRecentDisplayItems:]
  -[SBCommandTabViewController iconModelDidChange:]
  -[SBCommandTabViewController _configureGridLayoutConfiguration:]
  -[SBCommandTabViewController _handleUIGesture:]
  -[SBCommandTabViewController _handleTapDismissGesture:]
  -[SBCommandTabViewController _updateForUserInterfaceStyle]
  -[SBCommandTabViewController _moveSelectionSquareToIconAtIndex:]
  -[SBCommandTabViewController _updateIconSelectionPositionAndLabelText]


SBBaseStatusBarChangeAssertion : NSObject
 @property  NSString *reason

  // instance methods
  -[SBBaseStatusBarChangeAssertion .cxx_destruct]
  -[SBBaseStatusBarChangeAssertion init]
  -[SBBaseStatusBarChangeAssertion reason]
  -[SBBaseStatusBarChangeAssertion invalidate]
  -[SBBaseStatusBarChangeAssertion _initWithReason:]


SBDisableAppStatusBarAlphaChangesAssertion : SBBaseStatusBarChangeAssertion
  // instance methods
  -[SBDisableAppStatusBarAlphaChangesAssertion initWithReason:]
  -[SBDisableAppStatusBarAlphaChangesAssertion dealloc]
  -[SBDisableAppStatusBarAlphaChangesAssertion invalidate]


SBDisableAppStatusBarUserInteractionChangesAssertion : SBBaseStatusBarChangeAssertion
  // instance methods
  -[SBDisableAppStatusBarUserInteractionChangesAssertion initWithReason:]
  -[SBDisableAppStatusBarUserInteractionChangesAssertion dealloc]
  -[SBDisableAppStatusBarUserInteractionChangesAssertion invalidate]


SBLibraryViewController : SBHLibraryViewController
  // instance methods
  -[SBLibraryViewController _handleKeyUIEvent:]
  -[SBLibraryViewController _canHandleKeyEvents]
  -[SBLibraryViewController _canHandleKeyUIEvent:]
  -[SBLibraryViewController _didActivateTypeAheadSearchWithPhysicalKeyboardEvent:]


SBFluidSwitcherSpaceUnderlayAccessoryView : SBFTouchPassThroughClippingView <SBFluidSwitcherItemContainerHeaderViewDelegate, SBSystemPointerInteractionDelegate>
 @property  <SBFluidSwitcherSpaceUnderlayAccessoryViewDelegate> *delegate
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  double contentScale
 @property  double keyboardHeight
 @property  double headerOpacity
 @property  double titleOpacity
 @property  NSArray *titleItems
 @property  double backgroundOpacity
 @property  double shadowAlpha
 @property  double shadowOffset
 @property  long long shadowStyle
 @property  UIBezierPath *shadowPath
 @property  double resizeGrabberOpacity
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} resizeGrabberBounds
 @property  {CGPoint=dd} resizeGrabberCenter
 @property  double contentViewScale
 @property  {CGPoint=dd} contentViewOffset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherSpaceUnderlayAccessoryView _updateShadowVisibility]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView hitTest:withEvent:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setShadowStyle:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView _updateBackgroundViewVisibility]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView initWithCoder:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setContentViewOffset:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView styleForRegion:forView:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView _updateHeaderAnimated:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView shadowPath]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setKeyboardHeight:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setShadowAlpha:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView _updateResizeGrabber]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView .cxx_destruct]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setTitleItems:animated:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView shouldBeginPointerInteractionAtLocation:forView:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView shadowStyle]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView layoutSubviews]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setResizeGrabberCenter:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView _updateContentView]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView contentScale]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setShadowOffset:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView contentViewScale]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView titleItems]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView keyboardHeight]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView _updateShadowView]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setBackgroundOpacity:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView shadowAlpha]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView resizeGrabberOpacity]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setContentViewScale:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView pointerInteractionHitTestInsetsForView:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setCornerRadius:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setContentScale:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView prepareForReuse]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setMaskedCorners:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setTitleOpacity:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView contentViewOffset]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView initWithDelegate:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setShadowPath:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView pointInside:withEvent:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView cornerRadius]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView delegate]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView backgroundOpacity]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView itemContainerHeaderView:didSelectTitleItem:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setResizeGrabberOpacity:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView shadowOffset]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView dealloc]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setResizeGrabberBounds:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView _configureDebugBorder]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView _updateBackgroundView]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView titleOpacity]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView maskedCorners]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView resizeGrabberCenter]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView _updateResizeGrabberVisibility]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView setHeaderOpacity:updateMode:settings:completion:]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView resizeGrabberBounds]
  -[SBFluidSwitcherSpaceUnderlayAccessoryView headerOpacity]


SBActivateReachabilitySwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  {SBReachabilityActivationContext={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGRect={CGPoint=dd}{CGSize=dd}}B} reachabilityActivationContext

  // instance methods
  -[SBActivateReachabilitySwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBActivateReachabilitySwitcherEventResponse type]
  -[SBActivateReachabilitySwitcherEventResponse reachabilityActivationContext]
  -[SBActivateReachabilitySwitcherEventResponse initWithReachabilityContext:]


SBMedusaDragAndDropMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBMedusaDragAndDropMetric .cxx_destruct]
  -[SBMedusaDragAndDropMetric init]


SBApplicationWakeSchedulerFactory : NSObject
  // class methods
  +[SBApplicationWakeSchedulerFactory newLegacyVOIPPeriodicWakeSchedulerForApplication:]


SBElasticHUDDomain : PTDomain
  // class methods
  +[SBElasticHUDDomain domainGroupName]
  +[SBElasticHUDDomain rootSettings]
  +[SBElasticHUDDomain domainName]
  +[SBElasticHUDDomain rootSettingsClass]


SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBProximitySensorManagerObserver, SBHardwareButtonInteraction>
 @property  long long phase
 @property  SBProximitySensorManager *sensorManager
 @property  BSTimer *timer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction phase]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction disallowsSinglePressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction consumeInitialPressDown]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction sensorManager]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction setPhase:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction .cxx_destruct]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction setSensorManager:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction descriptionBuilderWithMultilinePrefix:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction disallowsLongPressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction _disallowsAnyPressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction timer]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction initWithProximitySensorManager:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction setTimer:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction disallowsTriplePressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction hardwareButtonGestureParameters]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction disallowsDoublePressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction consumeSinglePressUp]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction dealloc]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction _timerDidFire]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction proximitySensorManager:objectWithinProximityDidChange:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction _transitionToPhase:timeout:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction _transitionToPhase:]


SBLineFragment : NSObject
 @property  unsigned long index
 @property  {_NSRange=QQ} range
 @property  double lineWidth

  // class methods
  +[SBLineFragment fragmentWithIndex:length:lineWidth:]

  // instance methods
  -[SBLineFragment setLineWidth:]
  -[SBLineFragment range]
  -[SBLineFragment setIndex:]
  -[SBLineFragment setRange:]
  -[SBLineFragment lineWidth]
  -[SBLineFragment index]


SBStringMetrics : NSObject <NSFastEnumeration>
  // instance methods
  -[SBStringMetrics .cxx_destruct]
  -[SBStringMetrics init]
  -[SBStringMetrics fragments]
  -[SBStringMetrics countByEnumeratingWithState:objects:count:]
  -[SBStringMetrics fragmentCount]
  -[SBStringMetrics addFragment:]


SBRootDodgingLayerModifier : SBDodgingModifier
 @property  BOOL hasPerformedInitialSetup

  // instance methods
  -[SBRootDodgingLayerModifier _setup]
  -[SBRootDodgingLayerModifier setDelegate:]
  -[SBRootDodgingLayerModifier didMoveToParentModifier:]
  -[SBRootDodgingLayerModifier handleRemovalEvent:]
  -[SBRootDodgingLayerModifier hasPerformedInitialSetup]
  -[SBRootDodgingLayerModifier setHasPerformedInitialSetup:]
  -[SBRootDodgingLayerModifier handleInsertionEvent:]
  -[SBRootDodgingLayerModifier handlePreferenceChangeEvent:]
  -[SBRootDodgingLayerModifier _floorModifier]
  -[SBRootDodgingLayerModifier handleRotationEvent:]


SBFloatingFluidSwitcherRootSwitcherModifier : SBFluidSwitcherRootSwitcherModifier
 @property  SBAppLayout *activeAppLayout
 @property  long long interfaceOrientation
 @property  long long floatingConfiguration
 @property  BOOL floatingSwitcherVisible
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} containerViewBounds

  // instance methods
  -[SBFloatingFluidSwitcherRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBFloatingFluidSwitcherRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier .cxx_destruct]
  -[SBFloatingFluidSwitcherRootSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier _newMultitaskingModifier]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setInterfaceOrientation:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier floatingConfiguration]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setDelegate:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier isFloatingSwitcherVisible]
  -[SBFloatingFluidSwitcherRootSwitcherModifier init]
  -[SBFloatingFluidSwitcherRootSwitcherModifier _defaultMultitaskingModifierClass]
  -[SBFloatingFluidSwitcherRootSwitcherModifier interfaceOrientation]
  -[SBFloatingFluidSwitcherRootSwitcherModifier lowEndHardwareModifier]
  -[SBFloatingFluidSwitcherRootSwitcherModifier gestureModifierForGestureEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier topMostLayoutElements]
  -[SBFloatingFluidSwitcherRootSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier floorModifierForGestureEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier handleEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier transitionModifierForMainTransitionEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier containerViewBounds]
  -[SBFloatingFluidSwitcherRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier shelfModifierForTransitionEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setFloatingSwitcherVisible:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setFloatingConfiguration:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier highlightModifierForHighlightEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier transientlyVisibleSlideOverTongueModifierForEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier _updateContainerViewBounds]
  -[SBFloatingFluidSwitcherRootSwitcherModifier _entityRemovalModifierForEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier activeAppLayout]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setActiveAppLayout:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setContainerViewBounds:]


SBTopAffordanceButton : UIButton <UIPointerInteractionDelegate>
 @property  long long topAffordanceButtonType
 @property  NSLayoutConstraint *widthConstraint
 @property  UIPointerInteraction *pointerInteraction
 @property  MTVisualStylingProvider *visualStylingProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTopAffordanceButton symbolConfiguration]
  +[SBTopAffordanceButton portraitImageNameForTopAffordanceButtonType:]
  +[SBTopAffordanceButton landscapeImageNameForTopAffordanceButtonType:]
  +[SBTopAffordanceButton imageForTopAffordanceButtonType:interfaceOrientation:]
  +[SBTopAffordanceButton selectedButtonBackgroundColor]
  +[SBTopAffordanceButton hoveredSelectedButtonBackgroundColor]
  +[SBTopAffordanceButton buttonWithTopAffordanceButtonType:]

  // instance methods
  -[SBTopAffordanceButton setPointerInteraction:]
  -[SBTopAffordanceButton pointerInteraction]
  -[SBTopAffordanceButton pointerInteraction:styleForRegion:]
  -[SBTopAffordanceButton pointerInteraction:willEnterRegion:animator:]
  -[SBTopAffordanceButton pointerInteraction:willExitRegion:animator:]
  -[SBTopAffordanceButton setPointerInteractionEnabled:]
  -[SBTopAffordanceButton widthConstraint]
  -[SBTopAffordanceButton _selectedIndicatorBounds]
  -[SBTopAffordanceButton setWidthConstraint:]
  -[SBTopAffordanceButton .cxx_destruct]
  -[SBTopAffordanceButton layoutSubviews]
  -[SBTopAffordanceButton isPointerInteractionEnabled]
  -[SBTopAffordanceButton setSelected:]
  -[SBTopAffordanceButton setVisualStylingProvider:]
  -[SBTopAffordanceButton pointInside:withEvent:]
  -[SBTopAffordanceButton _selectedIndicatorAlpha]
  -[SBTopAffordanceButton _selectedIndicatorViewWithImage:]
  -[SBTopAffordanceButton visualStylingProvider]
  -[SBTopAffordanceButton pointerInteraction:regionForRequest:defaultRegion:]
  -[SBTopAffordanceButton setEnabled:]
  -[SBTopAffordanceButton setTopAffordanceButtonType:]
  -[SBTopAffordanceButton _extendedHitTestBounds]
  -[SBTopAffordanceButton setImage:forState:duration:]
  -[SBTopAffordanceButton topAffordanceButtonType]


SBThermalController : NSObject <SBFThermalBlockProvider>
 @property  long long level
 @property  BOOL inSunlight
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBThermalController sharedInstance]
  +[SBThermalController logThermalEvent:]

  // instance methods
  -[SBThermalController _isBlocked]
  -[SBThermalController level]
  -[SBThermalController .cxx_destruct]
  -[SBThermalController removeThermalObserver:]
  -[SBThermalController init]
  -[SBThermalController _setBlocked:]
  -[SBThermalController startListeningForThermalEvents]
  -[SBThermalController _respondToCurrentThermalCondition]
  -[SBThermalController addThermalObserver:]
  -[SBThermalController isInSunlight]
  -[SBThermalController dealloc]
  -[SBThermalController isThermalBlocked]
  -[SBThermalController _updateThermalJetsamCPUSamplingState]


SBMoveGestureFloatingSwitcherModifier : SBGestureSwitcherModifier
 @property  long long initialFloatingConfiguration
 @property  long long interfaceOrientation
 @property  {CGPoint=dd} translation
 @property  BOOL hideSlideOverTongueForDragFromStashedConfiguration

  // instance methods
  -[SBMoveGestureFloatingSwitcherModifier slideOverTongueDirection]
  -[SBMoveGestureFloatingSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBMoveGestureFloatingSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[SBMoveGestureFloatingSwitcherModifier slideOverTongueState]
  -[SBMoveGestureFloatingSwitcherModifier shadowOffsetForIndex:]
  -[SBMoveGestureFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBMoveGestureFloatingSwitcherModifier handleTransitionEvent:]
  -[SBMoveGestureFloatingSwitcherModifier visibleAppLayouts]
  -[SBMoveGestureFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBMoveGestureFloatingSwitcherModifier setInterfaceOrientation:]
  -[SBMoveGestureFloatingSwitcherModifier translation]
  -[SBMoveGestureFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBMoveGestureFloatingSwitcherModifier interfaceOrientation]
  -[SBMoveGestureFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBMoveGestureFloatingSwitcherModifier topMostLayoutElements]
  -[SBMoveGestureFloatingSwitcherModifier containerViewBounds]
  -[SBMoveGestureFloatingSwitcherModifier handleGestureEvent:]
  -[SBMoveGestureFloatingSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBMoveGestureFloatingSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBMoveGestureFloatingSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBMoveGestureFloatingSwitcherModifier setTranslation:]
  -[SBMoveGestureFloatingSwitcherModifier initWithGestureID:initialFloatingConfiguration:interfaceOrientation:]
  -[SBMoveGestureFloatingSwitcherModifier initialFloatingConfiguration]
  -[SBMoveGestureFloatingSwitcherModifier setInitialFloatingConfiguration:]
  -[SBMoveGestureFloatingSwitcherModifier hideSlideOverTongueForDragFromStashedConfiguration]
  -[SBMoveGestureFloatingSwitcherModifier setHideSlideOverTongueForDragFromStashedConfiguration:]


SBCoverSheetSpotlightViewController : CSCoverSheetViewControllerBase <CSDismissableModalViewControllerDelegate>
 @property  <SPUIRemoteSearchViewDelegate> *spotlightDelegate
 @property  <SBCoverSheetSpotlightViewControllerDelegate> *delegate
 @property  _SBCoverSheetSpotlightViewController *spotlightViewController
 @property  BOOL shouldModifyProudLock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetSpotlightViewController presentationCancelsTouches]
  -[SBCoverSheetSpotlightViewController _createProperties]
  -[SBCoverSheetSpotlightViewController .cxx_destruct]
  -[SBCoverSheetSpotlightViewController viewDidLoad]
  -[SBCoverSheetSpotlightViewController _updateForPropertyChanged]
  -[SBCoverSheetSpotlightViewController setDelegate:]
  -[SBCoverSheetSpotlightViewController init]
  -[SBCoverSheetSpotlightViewController setSpotlightViewController:]
  -[SBCoverSheetSpotlightViewController aggregateBehavior:]
  -[SBCoverSheetSpotlightViewController _setCornerRounded:]
  -[SBCoverSheetSpotlightViewController spotlightViewController]
  -[SBCoverSheetSpotlightViewController viewWillAppear:]
  -[SBCoverSheetSpotlightViewController handleEvent:]
  -[SBCoverSheetSpotlightViewController delegate]
  -[SBCoverSheetSpotlightViewController invalidate]
  -[SBCoverSheetSpotlightViewController displayLayoutElementIdentifier]
  -[SBCoverSheetSpotlightViewController addGrabberView:]
  -[SBCoverSheetSpotlightViewController loadView]
  -[SBCoverSheetSpotlightViewController aggregateAppearance:]
  -[SBCoverSheetSpotlightViewController viewDidDisappear:]
  -[SBCoverSheetSpotlightViewController setSpotlightDelegate:]
  -[SBCoverSheetSpotlightViewController spotlightDelegate]
  -[SBCoverSheetSpotlightViewController setShouldModifyProudLock:]
  -[SBCoverSheetSpotlightViewController updatePresentationProgressWithOffset:blurProgress:searchState:]
  -[SBCoverSheetSpotlightViewController _scaleGivenTranslation:]
  -[SBCoverSheetSpotlightViewController _updateSpotlightScale:interactive:]
  -[SBCoverSheetSpotlightViewController dismissForHomeButton]
  -[SBCoverSheetSpotlightViewController handleBottomEdgeGestureBegan:]
  -[SBCoverSheetSpotlightViewController handleBottomEdgeGestureChanged:]
  -[SBCoverSheetSpotlightViewController handleBottomEdgeGestureEnded:]
  -[SBCoverSheetSpotlightViewController shouldModifyProudLock]


_SBCoverSheetSpotlightViewController : SBSpotlightMultiplexingViewController
  // instance methods
  -[_SBCoverSheetSpotlightViewController level]
  -[_SBCoverSheetSpotlightViewController remoteSearchViewPresentationSource]
  -[_SBCoverSheetSpotlightViewController _canShowWhileLocked]


_SBModalViewControllerStackTransition : NSObject
  // instance methods
  -[_SBModalViewControllerStackTransition .cxx_destruct]


SBModalViewControllerStack : NSObject
 @property  <SBModalViewControllerStackDelegate> *delegate
 @property  NSArray *viewControllers
 @property  UIViewController *topViewController

  // instance methods
  -[SBModalViewControllerStack _addPendingTransition:]
  -[SBModalViewControllerStack viewControllers]
  -[SBModalViewControllerStack _popNextPendingTransition]
  -[SBModalViewControllerStack _addViewController:completion:]
  -[SBModalViewControllerStack .cxx_destruct]
  -[SBModalViewControllerStack removeViewControllerAnimated:completion:]
  -[SBModalViewControllerStack _noteWillDismissViewController:animated:]
  -[SBModalViewControllerStack setDelegate:]
  -[SBModalViewControllerStack _performPendingTransitionIfNecessary]
  -[SBModalViewControllerStack _removePendingTransition:forSuccess:]
  -[SBModalViewControllerStack _noteWillPresentViewController:]
  -[SBModalViewControllerStack topViewController]
  -[SBModalViewControllerStack _noteDidDismissViewController:]
  -[SBModalViewControllerStack initWithPresentingViewController:]
  -[SBModalViewControllerStack _queuePendingTransition:]
  -[SBModalViewControllerStack delegate]
  -[SBModalViewControllerStack _noteDidPresentViewController:]
  -[SBModalViewControllerStack _removeViewController:completion:]
  -[SBModalViewControllerStack _setCurrentTransition:]
  -[SBModalViewControllerStack addViewController:animated:completion:]
  -[SBModalViewControllerStack removeViewController:animated:completion:]


SBPressSequenceRecognizer : NSObject
 @property  <SBPressSequenceRecognizerDelegate> *delegate
 @property  SBPressSequenceValidator *validator
 @property  unsigned long numberOfPresses

  // instance methods
  -[SBPressSequenceRecognizer _reset]
  -[SBPressSequenceRecognizer .cxx_destruct]
  -[SBPressSequenceRecognizer _complete]
  -[SBPressSequenceRecognizer setDelegate:]
  -[SBPressSequenceRecognizer validator]
  -[SBPressSequenceRecognizer init]
  -[SBPressSequenceRecognizer delegate]
  -[SBPressSequenceRecognizer registerPressDownWithTimestamp:]
  -[SBPressSequenceRecognizer registerPressUpWithTimestamp:]
  -[SBPressSequenceRecognizer numberOfPresses]
  -[SBPressSequenceRecognizer resetWithNewValidator:numberOfPresses:]
  -[SBPressSequenceRecognizer initWithValidator:numberOfPresses:]
  -[SBPressSequenceRecognizer _handlePressDownWithTimestamp:]
  -[SBPressSequenceRecognizer _handlePressUpWithTimestamp:]
  -[SBPressSequenceRecognizer _resetAndNotify]
  -[SBPressSequenceRecognizer _resetWatchdogIfNecessary]
  -[SBPressSequenceRecognizer _resetAfterDelay:]
  -[SBPressSequenceRecognizer _watchdogTimeIntervalFromDelay:]


SBSwitcherModifierEvent : SBChainableModifierEvent
 @property  long long type

  // instance methods
  -[SBSwitcherModifierEvent loggingCategory]
  -[SBSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBSwitcherModifierEvent type]
  -[SBSwitcherModifierEvent isTransitionEvent]
  -[SBSwitcherModifierEvent isGestureEvent]


SBFluidSwitcherModifierTimelineController : NSObject
 @property  BOOL visible

  // instance methods
  -[SBFluidSwitcherModifierTimelineController setVisible:]
  -[SBFluidSwitcherModifierTimelineController .cxx_destruct]
  -[SBFluidSwitcherModifierTimelineController isVisible]
  -[SBFluidSwitcherModifierTimelineController addEntry:]


_SBDashBoardSpotlightViewController : SBSpotlightMultiplexingViewController
 @property  <_SBDashBoardSpotlightViewControllerDelegate> *delegate

  // instance methods
  -[_SBDashBoardSpotlightViewController level]
  -[_SBDashBoardSpotlightViewController .cxx_destruct]
  -[_SBDashBoardSpotlightViewController setDelegate:]
  -[_SBDashBoardSpotlightViewController delegate]
  -[_SBDashBoardSpotlightViewController remoteSearchViewPresentationSource]
  -[_SBDashBoardSpotlightViewController _canShowWhileLocked]


SBDashBoardSpotlightViewController : SBHomeGestureDismissableCoverSheetViewController <_SBDashBoardSpotlightViewControllerDelegate, SBViewControllerTransitionContextDelegate>
 @property  _SBDashBoardSpotlightViewController *spotlightViewController
 @property  FBDisplayLayoutTransition *displayLayoutTransition
 @property  _UILegibilitySettings *spotlightLegibilitySettings
 @property  <SPUIRemoteSearchViewDelegate> *spotlightDelegate
 @property  UIViewController<SBUISpotlightInitiating> *initiatingViewController
 @property  <SBDashBoardSpotlightViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardSpotlightViewController presentationType]
  -[SBDashBoardSpotlightViewController viewWillLayoutSubviews]
  -[SBDashBoardSpotlightViewController presentationStyle]
  -[SBDashBoardSpotlightViewController presentationCancelsTouches]
  -[SBDashBoardSpotlightViewController .cxx_destruct]
  -[SBDashBoardSpotlightViewController viewDidLoad]
  -[SBDashBoardSpotlightViewController wouldHandleButtonEvent:]
  -[SBDashBoardSpotlightViewController setDelegate:]
  -[SBDashBoardSpotlightViewController displayLayoutTransition]
  -[SBDashBoardSpotlightViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBDashBoardSpotlightViewController init]
  -[SBDashBoardSpotlightViewController _isTransitioning]
  -[SBDashBoardSpotlightViewController setSpotlightViewController:]
  -[SBDashBoardSpotlightViewController transitionDidFinish:]
  -[SBDashBoardSpotlightViewController aggregateBehavior:]
  -[SBDashBoardSpotlightViewController spotlightViewController]
  -[SBDashBoardSpotlightViewController viewWillAppear:]
  -[SBDashBoardSpotlightViewController handleEvent:]
  -[SBDashBoardSpotlightViewController setDisplayLayoutTransition:]
  -[SBDashBoardSpotlightViewController delegate]
  -[SBDashBoardSpotlightViewController invalidate]
  -[SBDashBoardSpotlightViewController displayLayoutElementIdentifier]
  -[SBDashBoardSpotlightViewController performCustomTransitionToVisible:withAnimationSettings:completion:]
  -[SBDashBoardSpotlightViewController presentationTransition]
  -[SBDashBoardSpotlightViewController transitionWillBegin:]
  -[SBDashBoardSpotlightViewController transitionDidReverse:]
  -[SBDashBoardSpotlightViewController transitionWillFinish:]
  -[SBDashBoardSpotlightViewController homeGestureParticipantIdentifier]
  -[SBDashBoardSpotlightViewController zStackParticipantIdentifier]
  -[SBDashBoardSpotlightViewController shouldDismissForHomeGestureRecognizer:]
  -[SBDashBoardSpotlightViewController setSpotlightDelegate:]
  -[SBDashBoardSpotlightViewController spotlightDelegate]
  -[SBDashBoardSpotlightViewController spotlightMultiplexingLevelForSpotlightViewController:]
  -[SBDashBoardSpotlightViewController remoteSearchViewPresentationSourceForSpotlightViewController:]
  -[SBDashBoardSpotlightViewController spotlightLegibilitySettings]
  -[SBDashBoardSpotlightViewController initiatingViewController]
  -[SBDashBoardSpotlightViewController transitionContextToShowSpotlight:animated:interactive:]
  -[SBDashBoardSpotlightViewController _transitioningIntoSpotlight:]
  -[SBDashBoardSpotlightViewController _initiallyTransitioningToSpotlight:]
  -[SBDashBoardSpotlightViewController _shouldCancelInteractiveDismissGesture:]
  -[SBDashBoardSpotlightViewController setSpotlightLegibilitySettings:]
  -[SBDashBoardSpotlightViewController setInitiatingViewController:]


_SBSUICFUserNotificationContentHostViewController : _UIRemoteViewController <_SBSUICFUserNotificationContentExtensionHostInterface>
 @property  SBUserNotificationAlert *userNotification
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SBSUICFUserNotificationContentHostViewController exportedInterface]
  +[_SBSUICFUserNotificationContentHostViewController serviceViewControllerInterface]

  // instance methods
  -[_SBSUICFUserNotificationContentHostViewController .cxx_destruct]
  -[_SBSUICFUserNotificationContentHostViewController configureWithCompletion:]
  -[_SBSUICFUserNotificationContentHostViewController userNotification]
  -[_SBSUICFUserNotificationContentHostViewController setUserNotification:]
  -[_SBSUICFUserNotificationContentHostViewController invalidateWithCompletion:]
  -[_SBSUICFUserNotificationContentHostViewController _canShowWhileLocked]


SBPieChartSlice : NSObject
 @property  double value
 @property  UIColor *fillColor

  // class methods
  +[SBPieChartSlice sliceWithValue:fillColor:]

  // instance methods
  -[SBPieChartSlice fillColor]
  -[SBPieChartSlice .cxx_destruct]
  -[SBPieChartSlice value]
  -[SBPieChartSlice initWithValue:fillColor:]


SBPieChartView : UIView
  // instance methods
  -[SBPieChartView .cxx_destruct]
  -[SBPieChartView initWithFrame:]
  -[SBPieChartView drawRect:]
  -[SBPieChartView _updateMetrics]
  -[SBPieChartView _rotateContext]
  -[SBPieChartView _drawSlice:atValue:]
  -[SBPieChartView setSlices:]


SBSwitcherForcePressSystemGestureRecognizer : SBScreenEdgePanGestureRecognizer <PTSettingsKeyObserver, UIInteractionProgressObserver, SBGestureRecognizerTouchHistoryProviding>
 @property  SBTouchHistory *touchHistory
 @property  double forcePercent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherForcePressSystemGestureRecognizer setTouchHistory:]
  -[SBSwitcherForcePressSystemGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBSwitcherForcePressSystemGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBSwitcherForcePressSystemGestureRecognizer peakSpeed]
  -[SBSwitcherForcePressSystemGestureRecognizer .cxx_destruct]
  -[SBSwitcherForcePressSystemGestureRecognizer touchHistory]
  -[SBSwitcherForcePressSystemGestureRecognizer forcePercent]
  -[SBSwitcherForcePressSystemGestureRecognizer initWithTarget:action:]
  -[SBSwitcherForcePressSystemGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBSwitcherForcePressSystemGestureRecognizer touchesBegan:withEvent:]
  -[SBSwitcherForcePressSystemGestureRecognizer setState:]
  -[SBSwitcherForcePressSystemGestureRecognizer touchesMoved:withEvent:]
  -[SBSwitcherForcePressSystemGestureRecognizer reset]
  -[SBSwitcherForcePressSystemGestureRecognizer interactionProgressDidUpdate:]
  -[SBSwitcherForcePressSystemGestureRecognizer settings:changedValueForKey:]
  -[SBSwitcherForcePressSystemGestureRecognizer dealloc]
  -[SBSwitcherForcePressSystemGestureRecognizer touchesEnded:withEvent:]


SBUpdateLayoutSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  unsigned long options
 @property  long long updateMode

  // instance methods
  -[SBUpdateLayoutSwitcherEventResponse options]
  -[SBUpdateLayoutSwitcherEventResponse updateMode]
  -[SBUpdateLayoutSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBUpdateLayoutSwitcherEventResponse initWithOptions:updateMode:]
  -[SBUpdateLayoutSwitcherEventResponse type]


SBAppBrightnessChangeLogger : NSObject
  // class methods
  +[SBAppBrightnessChangeLogger sharedInstance]

  // instance methods
  -[SBAppBrightnessChangeLogger .cxx_destruct]
  -[SBAppBrightnessChangeLogger init]
  -[SBAppBrightnessChangeLogger _screenLocked]
  -[SBAppBrightnessChangeLogger _publishMetricsIfNeeded]
  -[SBAppBrightnessChangeLogger _publishMetrics]
  -[SBAppBrightnessChangeLogger noteApp:setScreenBrightness:]


SBReduceMotionHomeGestureSwitcherModifier : SBGestureSwitcherModifier <SBHomeGestureDockSwitcherModifierDelegate, SBHomeGestureFinalDestinationSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBReduceMotionHomeGestureSwitcherModifier appLayoutsToResignActive]
  -[SBReduceMotionHomeGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBReduceMotionHomeGestureSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBReduceMotionHomeGestureSwitcherModifier keyboardSuppressionMode]
  -[SBReduceMotionHomeGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBReduceMotionHomeGestureSwitcherModifier scaleForIndex:]
  -[SBReduceMotionHomeGestureSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBReduceMotionHomeGestureSwitcherModifier handleTransitionEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier frameForIndex:]
  -[SBReduceMotionHomeGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBReduceMotionHomeGestureSwitcherModifier visibleAppLayouts]
  -[SBReduceMotionHomeGestureSwitcherModifier .cxx_destruct]
  -[SBReduceMotionHomeGestureSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBReduceMotionHomeGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBReduceMotionHomeGestureSwitcherModifier wallpaperStyle]
  -[SBReduceMotionHomeGestureSwitcherModifier cornerRadiiForIndex:]
  -[SBReduceMotionHomeGestureSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBReduceMotionHomeGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBReduceMotionHomeGestureSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBReduceMotionHomeGestureSwitcherModifier didMoveToParentModifier:]
  -[SBReduceMotionHomeGestureSwitcherModifier _applyPrototypeSettings]
  -[SBReduceMotionHomeGestureSwitcherModifier handleGestureEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier initWithGestureID:selectedAppLayout:startingEnvironmentMode:scrunchInitiated:continuingGesture:lastGestureWasAnArcSwipe:]
  -[SBReduceMotionHomeGestureSwitcherModifier _newDockModifierRequiringVerticalSwipeToTrackDock:startingEnvironmentMode:]
  -[SBReduceMotionHomeGestureSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier currentFinalDestination]
  -[SBReduceMotionHomeGestureSwitcherModifier _responseForActivatingFinalDestination:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateTranslationAdjustmentForGestureFromHomeScreenIfNeededWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier unconditionalDistanceThresholdForHome]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateGestureTranslationAndVelocityWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateReduceMotionAxisIfNecessaryWithEvent:]


SBAppStatusBarSettings : NSObject <BSSettingDescriptionProvider, NSCopying, NSMutableCopying>
 @property  BSSettings *BSSettings
 @property  NSNumber *alpha
 @property  long long style
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long styleOverridesToCancel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppStatusBarSettings valueDescriptionForFlag:object:ofSetting:]
  -[SBAppStatusBarSettings _initWithBSSettings:]
  -[SBAppStatusBarSettings _BSSettings]
  -[SBAppStatusBarSettings .cxx_destruct]
  -[SBAppStatusBarSettings keyDescriptionForSetting:]
  -[SBAppStatusBarSettings init]
  -[SBAppStatusBarSettings isEqual:]
  -[SBAppStatusBarSettings mutableCopyWithZone:]
  -[SBAppStatusBarSettings alpha]
  -[SBAppStatusBarSettings dealloc]
  -[SBAppStatusBarSettings copyWithZone:]
  -[SBAppStatusBarSettings styleOverridesToCancel]
  -[SBAppStatusBarSettings style]
  -[SBAppStatusBarSettings legibilitySettings]


SBMutableAppStatusBarSettings : SBAppStatusBarSettings
 @property  NSNumber *alpha
 @property  long long style
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long styleOverridesToCancel

  // instance methods
  -[SBMutableAppStatusBarSettings setStyleOverridesToCancel:]
  -[SBMutableAppStatusBarSettings setStyle:]
  -[SBMutableAppStatusBarSettings setLegibilitySettings:]
  -[SBMutableAppStatusBarSettings init]
  -[SBMutableAppStatusBarSettings applySettings:]
  -[SBMutableAppStatusBarSettings setAlpha:]
  -[SBMutableAppStatusBarSettings copyWithZone:]


SBMainSwitcherWindow : SBWindow
  // class methods
  +[SBMainSwitcherWindow sb_autorotates]

  // instance methods
  -[SBMainSwitcherWindow _canBecomeKeyWindow]
  -[SBMainSwitcherWindow hitTest:withEvent:]
  -[SBMainSwitcherWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBMainSwitcherWindow _edgesForSystemGesturesTouchDelay]
  -[SBMainSwitcherWindow _usesWindowServerHitTesting]


SBRemoteTransientOverlaySession : NSObject <SBRemoteTransientOverlayViewControllerDelegate>
 @property  <SBRemoteTransientOverlaySessionHostDelegate> *hostDelegate
 @property  SBSRemoteAlertDefinition *definition
 @property  NSError *error
 @property  NSString *sessionID
 @property  BOOL activated
 @property  BOOL prepared
 @property  BOOL switcherEligible
 @property  BOOL valid
 @property  BOOL pendingInvalidation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRemoteTransientOverlaySession sessionID]
  -[SBRemoteTransientOverlaySession removeSessionObserver:]
  -[SBRemoteTransientOverlaySession definition]
  -[SBRemoteTransientOverlaySession isValid]
  -[SBRemoteTransientOverlaySession .cxx_destruct]
  -[SBRemoteTransientOverlaySession isPrepared]
  -[SBRemoteTransientOverlaySession _didDeactivate]
  -[SBRemoteTransientOverlaySession _didActivate]
  -[SBRemoteTransientOverlaySession isSwitcherEligible]
  -[SBRemoteTransientOverlaySession isActivated]
  -[SBRemoteTransientOverlaySession deactivate]
  -[SBRemoteTransientOverlaySession addSessionObserver:]
  -[SBRemoteTransientOverlaySession dealloc]
  -[SBRemoteTransientOverlaySession invalidate]
  -[SBRemoteTransientOverlaySession hostDelegate]
  -[SBRemoteTransientOverlaySession error]
  -[SBRemoteTransientOverlaySession activateWithContext:]
  -[SBRemoteTransientOverlaySession hasPendingButtonEvents:]
  -[SBRemoteTransientOverlaySession hasServiceProcessIdentifier:]
  -[SBRemoteTransientOverlaySession _initWithSessionID:definition:]
  -[SBRemoteTransientOverlaySession setHostDelegate:]
  -[SBRemoteTransientOverlaySession isPendingInvalidation]
  -[SBRemoteTransientOverlaySession prepareWithConfigurationContext:]
  -[SBRemoteTransientOverlaySession getActionForHandlingButtonEvents:completion:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:didAppearAnimated:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:didDisappearAnimated:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:willAppearAnimated:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewControllerRequestsDeactivation:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewControllerRequestsInvalidation:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:didTerminateWithError:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:requestsActionForHandlingButtonEvents:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:prefersStatusBarActivityItemVisibleForServiceBundleIdentifier:]
  -[SBRemoteTransientOverlaySession _actionForHandlingButtonEvents:]
  -[SBRemoteTransientOverlaySession _invalidateWithReason:error:]
  -[SBRemoteTransientOverlaySession _requestInvalidationWithReason:error:]
  -[SBRemoteTransientOverlaySession _addTransaction:]
  -[SBRemoteTransientOverlaySession _registerObserversForTransaction:]
  -[SBRemoteTransientOverlaySession _processPendingTransactions]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewControllerDidInvalidate:]


SBDodgingResolverViewController : UIViewController <SBChainableModifierDelegate>
 @property  SBRootDodgingLayerModifier *rootModifier
 @property  SBDodgingModel *model
 @property  NSMutableDictionary *itemsForIdentifiers
 @property  long long contentOrientation
 @property  NSMutableArray *eventQueue
 @property  BOOL dispatchingEvent
 @property  NSMutableSet *itemsNeedingUpdate
 @property  NSMutableSet *itemsNeedingNonAnimatedUpdate
 @property  BOOL needsModelUpdate
 @property  BOOL needsLayout
 @property  UILabel *debugOverlay
 @property  unsigned long lastUpdateTimeNS
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDodgingResolverViewController eventQueue]
  -[SBDodgingResolverViewController _handleEventResponse:]
  -[SBDodgingResolverViewController contentOrientation]
  -[SBDodgingResolverViewController setContentOrientation:]
  -[SBDodgingResolverViewController setEventQueue:]
  -[SBDodgingResolverViewController .cxx_destruct]
  -[SBDodgingResolverViewController _performEventResponse:]
  -[SBDodgingResolverViewController viewDidLoad]
  -[SBDodgingResolverViewController initWithNibName:bundle:]
  -[SBDodgingResolverViewController interfaceOrientation]
  -[SBDodgingResolverViewController model]
  -[SBDodgingResolverViewController needsLayout]
  -[SBDodgingResolverViewController setNeedsLayout:]
  -[SBDodgingResolverViewController rootModifier]
  -[SBDodgingResolverViewController _setNeedsLayout]
  -[SBDodgingResolverViewController setModel:]
  -[SBDodgingResolverViewController setRootModifier:]
  -[SBDodgingResolverViewController _updateLayoutIfNeeded]
  -[SBDodgingResolverViewController loadView]
  -[SBDodgingResolverViewController _updateItemsIfNeeded]
  -[SBDodgingResolverViewController preferenceForIdentifier:]
  -[SBDodgingResolverViewController performTransitionFromOrientation:toOrientation:animated:mutationBlock:]
  -[SBDodgingResolverViewController contentViewBounds]
  -[SBDodgingResolverViewController spaceBetweenIdentifiers]
  -[SBDodgingResolverViewController addItemWithIdentifier:view:initialCenter:initialSize:delegate:]
  -[SBDodgingResolverViewController setItemNeedsUpdate:animated:]
  -[SBDodgingResolverViewController invalidateItem:]
  -[SBDodgingResolverViewController _dispatchOrAppendEvent:]
  -[SBDodgingResolverViewController _updateItemIfNeeded:]
  -[SBDodgingResolverViewController _setAllItemsNeedUpdate]
  -[SBDodgingResolverViewController _dispatchNextEventIfNeededAndHandleResponse]
  -[SBDodgingResolverViewController _updateModelIfNeeded]
  -[SBDodgingResolverViewController _updateLayoutWithItemIdentifier:completion:]
  -[SBDodgingResolverViewController _performInvalidationResponse:]
  -[SBDodgingResolverViewController _performScheduleEventResponse:]
  -[SBDodgingResolverViewController _setItemNeedsUpdate:]
  -[SBDodgingResolverViewController _setNeedsModelUpdate]
  -[SBDodgingResolverViewController itemsForIdentifiers]
  -[SBDodgingResolverViewController setItemsForIdentifiers:]
  -[SBDodgingResolverViewController isDispatchingEvent]
  -[SBDodgingResolverViewController setDispatchingEvent:]
  -[SBDodgingResolverViewController itemsNeedingUpdate]
  -[SBDodgingResolverViewController setItemsNeedingUpdate:]
  -[SBDodgingResolverViewController itemsNeedingNonAnimatedUpdate]
  -[SBDodgingResolverViewController setItemsNeedingNonAnimatedUpdate:]
  -[SBDodgingResolverViewController needsModelUpdate]
  -[SBDodgingResolverViewController setNeedsModelUpdate:]
  -[SBDodgingResolverViewController debugOverlay]
  -[SBDodgingResolverViewController setDebugOverlay:]
  -[SBDodgingResolverViewController lastUpdateTimeNS]
  -[SBDodgingResolverViewController setLastUpdateTimeNS:]


SBLockScreenDisableAssertion : SBUILockScreenDisableAssertion
  // class methods
  +[SBLockScreenDisableAssertion initialize]

  // instance methods
  -[SBLockScreenDisableAssertion initWithIdentifier:]
  -[SBLockScreenDisableAssertion .cxx_destruct]
  -[SBLockScreenDisableAssertion dealloc]
  -[SBLockScreenDisableAssertion invalidate]


SBFluidSwitcherGestureExclusionTrapezoid : NSObject <SBFluidSwitcherGestureExclusionShape>
 @property  double baseHeight
 @property  double trapezoidHeight
 @property  double adjacentBaseXDistanceFromEdge
 @property  double opposingBaseXDistanceFromEdge
 @property  BOOL allowHorizontalSwipesOutsideTrapezoid
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFluidSwitcherGestureExclusionTrapezoid exclusionTrapezoidWithBaseHeight:trapezoidHeight:adjacentBaseXDistanceFromEdge:opposingBaseXDistanceFromEdge:allowHorizontalSwipesOutsideTrapezoid:]

  // instance methods
  -[SBFluidSwitcherGestureExclusionTrapezoid debugView]
  -[SBFluidSwitcherGestureExclusionTrapezoid baseHeight]
  -[SBFluidSwitcherGestureExclusionTrapezoid shouldBeginGestureAtStartingPoint:velocity:bounds:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setBaseHeight:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setTrapezoidHeight:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setAdjacentBaseXDistanceFromEdge:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setOpposingBaseXDistanceFromEdge:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setAllowHorizontalSwipesOutsideTrapezoid:]
  -[SBFluidSwitcherGestureExclusionTrapezoid trapezoidHeight]
  -[SBFluidSwitcherGestureExclusionTrapezoid adjacentBaseXDistanceFromEdge]
  -[SBFluidSwitcherGestureExclusionTrapezoid opposingBaseXDistanceFromEdge]
  -[SBFluidSwitcherGestureExclusionTrapezoid allowHorizontalSwipesOutsideTrapezoid]


SBFluidSwitcherGestureExclusionCompositeShape : NSObject <SBFluidSwitcherGestureExclusionShape>
 @property  NSArray *rects
 @property  BOOL allowHorizontalSwipesInsideShapes
 @property  double topEdgeY
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFluidSwitcherGestureExclusionCompositeShape exclusionCompositeShapeWithRects:allowHorizontalSwipes:]

  // instance methods
  -[SBFluidSwitcherGestureExclusionCompositeShape rects]
  -[SBFluidSwitcherGestureExclusionCompositeShape .cxx_destruct]
  -[SBFluidSwitcherGestureExclusionCompositeShape debugView]
  -[SBFluidSwitcherGestureExclusionCompositeShape setRects:]
  -[SBFluidSwitcherGestureExclusionCompositeShape shouldBeginGestureAtStartingPoint:velocity:bounds:]
  -[SBFluidSwitcherGestureExclusionCompositeShape setAllowHorizontalSwipesInsideShapes:]
  -[SBFluidSwitcherGestureExclusionCompositeShape allowHorizontalSwipesInsideShapes]
  -[SBFluidSwitcherGestureExclusionCompositeShape topEdgeY]
  -[SBFluidSwitcherGestureExclusionCompositeShape setTopEdgeY:]


_SBFluidSwitcherGestureExclusionTrapezoidDebugView : UIView
 @property  SBFluidSwitcherGestureExclusionTrapezoid *exclusionTrapezoid

  // instance methods
  -[_SBFluidSwitcherGestureExclusionTrapezoidDebugView .cxx_destruct]
  -[_SBFluidSwitcherGestureExclusionTrapezoidDebugView drawRect:]
  -[_SBFluidSwitcherGestureExclusionTrapezoidDebugView setExclusionTrapezoid:]
  -[_SBFluidSwitcherGestureExclusionTrapezoidDebugView exclusionTrapezoid]


_SBFluidSwitcherGestureExclusionCompositeShapeDebugView : UIView
 @property  SBFluidSwitcherGestureExclusionCompositeShape *compositeShape

  // instance methods
  -[_SBFluidSwitcherGestureExclusionCompositeShapeDebugView .cxx_destruct]
  -[_SBFluidSwitcherGestureExclusionCompositeShapeDebugView drawRect:]
  -[_SBFluidSwitcherGestureExclusionCompositeShapeDebugView setCompositeShape:]
  -[_SBFluidSwitcherGestureExclusionCompositeShapeDebugView compositeShape]


SBExternalNotesDefaults : BSAbstractDefaultDomain
 @property  BOOL quickNotesDisabled

  // instance methods
  -[SBExternalNotesDefaults init]
  -[SBExternalNotesDefaults _bindAndRegisterDefaults]


SBDiagnosticRequestAlertItem : SBAlertItem
 @property  @? completionBlock
 @property  NSString *title
 @property  NSString *message
 @property  NSString *radarTitle
 @property  NSString *radarDescription
 @property  NSArray *radarAttachments
 @property  long long radarClassification
 @property  long long radarReproducibility

  // instance methods
  -[SBDiagnosticRequestAlertItem setTitle:]
  -[SBDiagnosticRequestAlertItem .cxx_destruct]
  -[SBDiagnosticRequestAlertItem reappearsAfterLock]
  -[SBDiagnosticRequestAlertItem setMessage:]
  -[SBDiagnosticRequestAlertItem setRadarDescription:]
  -[SBDiagnosticRequestAlertItem setRadarTitle:]
  -[SBDiagnosticRequestAlertItem message]
  -[SBDiagnosticRequestAlertItem radarDescription]
  -[SBDiagnosticRequestAlertItem shouldShowInLockScreen]
  -[SBDiagnosticRequestAlertItem title]
  -[SBDiagnosticRequestAlertItem reappearsAfterUnlock]
  -[SBDiagnosticRequestAlertItem performUnlockAction]
  -[SBDiagnosticRequestAlertItem completionBlock]
  -[SBDiagnosticRequestAlertItem setCompletionBlock:]
  -[SBDiagnosticRequestAlertItem radarTitle]
  -[SBDiagnosticRequestAlertItem configure:requirePasscodeForActions:]
  -[SBDiagnosticRequestAlertItem _fileRadar]
  -[SBDiagnosticRequestAlertItem radarClassification]
  -[SBDiagnosticRequestAlertItem setRadarClassification:]
  -[SBDiagnosticRequestAlertItem setRadarAttachments:]
  -[SBDiagnosticRequestAlertItem radarAttachments]
  -[SBDiagnosticRequestAlertItem radarReproducibility]
  -[SBDiagnosticRequestAlertItem _yesButtonTitle]
  -[SBDiagnosticRequestAlertItem _noButtonTitle]
  -[SBDiagnosticRequestAlertItem _stringFromClassification:]
  -[SBDiagnosticRequestAlertItem _stringFromReproducibility:]
  -[SBDiagnosticRequestAlertItem setRadarReproducibility:]


SBFluidSwitcherIconImageContainerView : UIView
 @property  UIImage *image

  // instance methods
  -[SBFluidSwitcherIconImageContainerView _configureIconImageView:]
  -[SBFluidSwitcherIconImageContainerView image]
  -[SBFluidSwitcherIconImageContainerView .cxx_destruct]
  -[SBFluidSwitcherIconImageContainerView layoutSubviews]
  -[SBFluidSwitcherIconImageContainerView _crossfadeToImage:]
  -[SBFluidSwitcherIconImageContainerView initWithFrame:]
  -[SBFluidSwitcherIconImageContainerView setImage:]
  -[SBFluidSwitcherIconImageContainerView setImage:animated:]


SBGestureSwitcherModifierEvent : SBSwitcherModifierEvent <SBGestureRecognizerTouchHistoryProviding>
 @property  unsigned long phase
 @property  long long touchType
 @property  BOOL mouseEvent
 @property  BOOL pointerTouch
 @property  BOOL canceled
 @property  double lastTouchTimestamp
 @property  {CGPoint=dd} locationInContainerView
 @property  {CGPoint=dd} translationInContainerView
 @property  {CGPoint=dd} velocityInContainerView
 @property  double hysteresis
 @property  <SBGestureRecognizerTouchHistoryProviding> *touchHistoryProvider
 @property  NSUUID *gestureID
 @property  SBAppLayout *selectedAppLayout
 @property  long long gestureType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBGestureSwitcherModifierEvent hysteresis]
  -[SBGestureSwitcherModifierEvent isCanceled]
  -[SBGestureSwitcherModifierEvent setHysteresis:]
  -[SBGestureSwitcherModifierEvent phase]
  -[SBGestureSwitcherModifierEvent conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBGestureSwitcherModifierEvent averageTouchVelocityOverTimeDuration:]
  -[SBGestureSwitcherModifierEvent peakSpeed]
  -[SBGestureSwitcherModifierEvent setPhase:]
  -[SBGestureSwitcherModifierEvent .cxx_destruct]
  -[SBGestureSwitcherModifierEvent averageTouchPathAngleOverTimeDuration:]
  -[SBGestureSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBGestureSwitcherModifierEvent setCanceled:]
  -[SBGestureSwitcherModifierEvent gestureType]
  -[SBGestureSwitcherModifierEvent lastTouchTimestamp]
  -[SBGestureSwitcherModifierEvent type]
  -[SBGestureSwitcherModifierEvent copyWithZone:]
  -[SBGestureSwitcherModifierEvent selectedAppLayout]
  -[SBGestureSwitcherModifierEvent initWithGestureID:selectedAppLayout:gestureType:phase:]
  -[SBGestureSwitcherModifierEvent gestureID]
  -[SBGestureSwitcherModifierEvent setVelocityInContainerView:]
  -[SBGestureSwitcherModifierEvent setLocationInContainerView:]
  -[SBGestureSwitcherModifierEvent setTranslationInContainerView:]
  -[SBGestureSwitcherModifierEvent setMouseEvent:]
  -[SBGestureSwitcherModifierEvent setTouchHistoryProvider:]
  -[SBGestureSwitcherModifierEvent setTouchType:]
  -[SBGestureSwitcherModifierEvent setPointerTouch:]
  -[SBGestureSwitcherModifierEvent setLastTouchTimestamp:]
  -[SBGestureSwitcherModifierEvent locationInContainerView]
  -[SBGestureSwitcherModifierEvent translationInContainerView]
  -[SBGestureSwitcherModifierEvent touchType]
  -[SBGestureSwitcherModifierEvent isPointerTouch]
  -[SBGestureSwitcherModifierEvent velocityInContainerView]
  -[SBGestureSwitcherModifierEvent isMouseEvent]
  -[SBGestureSwitcherModifierEvent isGestureEvent]
  -[SBGestureSwitcherModifierEvent touchHistoryProvider]


SBScrunchGestureSwitcherModifierEvent : SBGestureSwitcherModifierEvent
 @property  {CGPoint=dd} initialCentroid
 @property  {CGPoint=dd} centroid
 @property  double absoluteScale
 @property  {CGPoint=dd} translationWithoutScale

  // instance methods
  -[SBScrunchGestureSwitcherModifierEvent centroid]
  -[SBScrunchGestureSwitcherModifierEvent initialCentroid]
  -[SBScrunchGestureSwitcherModifierEvent setInitialCentroid:]
  -[SBScrunchGestureSwitcherModifierEvent setCentroid:]
  -[SBScrunchGestureSwitcherModifierEvent type]
  -[SBScrunchGestureSwitcherModifierEvent setAbsoluteScale:]
  -[SBScrunchGestureSwitcherModifierEvent absoluteScale]
  -[SBScrunchGestureSwitcherModifierEvent copyWithZone:]
  -[SBScrunchGestureSwitcherModifierEvent setTranslationWithoutScale:]
  -[SBScrunchGestureSwitcherModifierEvent translationWithoutScale]


SBForcePressGestureSwitcherModifierEvent : SBGestureSwitcherModifierEvent
 @property  double forcePercent

  // instance methods
  -[SBForcePressGestureSwitcherModifierEvent forcePercent]
  -[SBForcePressGestureSwitcherModifierEvent type]
  -[SBForcePressGestureSwitcherModifierEvent copyWithZone:]
  -[SBForcePressGestureSwitcherModifierEvent setForcePercent:]


SBDragAndDropGestureSwitcherModifierEvent : SBGestureSwitcherModifierEvent
 @property  long long dropAction
 @property  NSString *draggedSceneIdentifier
 @property  long long draggedSceneLayoutRole
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} platterViewFrame
 @property  double platterScale
 @property  BOOL previewHasLifted
 @property  BOOL platterized
 @property  BOOL windowDrag
 @property  BOOL switcherDrag
 @property  SBSwitcherDropRegionContext *switcherDropRegionContext

  // instance methods
  -[SBDragAndDropGestureSwitcherModifierEvent .cxx_destruct]
  -[SBDragAndDropGestureSwitcherModifierEvent dropAction]
  -[SBDragAndDropGestureSwitcherModifierEvent setDropAction:]
  -[SBDragAndDropGestureSwitcherModifierEvent type]
  -[SBDragAndDropGestureSwitcherModifierEvent copyWithZone:]
  -[SBDragAndDropGestureSwitcherModifierEvent draggedSceneIdentifier]
  -[SBDragAndDropGestureSwitcherModifierEvent setDraggedSceneIdentifier:]
  -[SBDragAndDropGestureSwitcherModifierEvent platterViewFrame]
  -[SBDragAndDropGestureSwitcherModifierEvent setPlatterViewFrame:]
  -[SBDragAndDropGestureSwitcherModifierEvent isSwitcherDrag]
  -[SBDragAndDropGestureSwitcherModifierEvent setDraggedSceneLayoutRole:]
  -[SBDragAndDropGestureSwitcherModifierEvent setPlatterScale:]
  -[SBDragAndDropGestureSwitcherModifierEvent setSwitcherDropRegionContext:]
  -[SBDragAndDropGestureSwitcherModifierEvent setWindowDrag:]
  -[SBDragAndDropGestureSwitcherModifierEvent setSwitcherDrag:]
  -[SBDragAndDropGestureSwitcherModifierEvent setPreviewHasLifted:]
  -[SBDragAndDropGestureSwitcherModifierEvent setPlatterized:]
  -[SBDragAndDropGestureSwitcherModifierEvent switcherDropRegionContext]
  -[SBDragAndDropGestureSwitcherModifierEvent draggedSceneLayoutRole]
  -[SBDragAndDropGestureSwitcherModifierEvent platterScale]
  -[SBDragAndDropGestureSwitcherModifierEvent hasPreviewLifted]
  -[SBDragAndDropGestureSwitcherModifierEvent hasPlatterized]
  -[SBDragAndDropGestureSwitcherModifierEvent isWindowDrag]


SBIndirectPanGestureSwitcherModifierEvent : SBGestureSwitcherModifierEvent
 @property  unsigned long indirectPanEndReason

  // instance methods
  -[SBIndirectPanGestureSwitcherModifierEvent type]
  -[SBIndirectPanGestureSwitcherModifierEvent copyWithZone:]
  -[SBIndirectPanGestureSwitcherModifierEvent setIndirectPanEndReason:]
  -[SBIndirectPanGestureSwitcherModifierEvent indirectPanEndReason]


SBFluidSwitcherPageContentViewProvider : NSObject <SBAppSwitcherTransientOverlayPageContentViewDelegate>
 @property  <SBFluidSwitcherPageContentViewProviderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherPageContentViewProvider purgePageContentViewForAppLayout:]
  -[SBFluidSwitcherPageContentViewProvider existingTransientOverlayViewControllerForAppLayout:]
  -[SBFluidSwitcherPageContentViewProvider _viewForService:appLayout:]
  -[SBFluidSwitcherPageContentViewProvider pageContentViewForAppLayout:setActive:]
  -[SBFluidSwitcherPageContentViewProvider acquiredViewController:forTransientOverlayAppLayout:]
  -[SBFluidSwitcherPageContentViewProvider .cxx_destruct]
  -[SBFluidSwitcherPageContentViewProvider appSwitcherTransientOverlayPageContentViewDidChangeActive:]
  -[SBFluidSwitcherPageContentViewProvider _preferredContentInterfaceOrientationForViewController:preferredInterfaceOrientation:]
  -[SBFluidSwitcherPageContentViewProvider setDelegate:]
  -[SBFluidSwitcherPageContentViewProvider isSuitableForRecycledItemContainer:]
  -[SBFluidSwitcherPageContentViewProvider _snapshotViewForAppLayout:setActive:]
  -[SBFluidSwitcherPageContentViewProvider init]
  -[SBFluidSwitcherPageContentViewProvider _containerViewController]
  -[SBFluidSwitcherPageContentViewProvider appSwitcherTransientOverlayPageContentViewDidChangeContainerOrientation:]
  -[SBFluidSwitcherPageContentViewProvider _snapshotViewDelegate]
  -[SBFluidSwitcherPageContentViewProvider _interfaceOrientation]
  -[SBFluidSwitcherPageContentViewProvider _applyTransientOverlayViewController:toPageContentView:]
  -[SBFluidSwitcherPageContentViewProvider delegate]
  -[SBFluidSwitcherPageContentViewProvider _relinquishTransientOverlayViewController:forPageContentView:]
  -[SBFluidSwitcherPageContentViewProvider initWithDelegate:snapshotCache:lockoutViewProvider:]
  -[SBFluidSwitcherPageContentViewProvider relinquishTransientOverlayViewController:]
  -[SBFluidSwitcherPageContentViewProvider _pageViewSizeForAppLayout:]


SBWindowSelfHostWrapper : NSObject
 @property  NSString *requester
 @property  UIWindow *window
 @property  UIView<UIScenePresentation> *hostView
 @property  <UIScenePresenter> *presenter
 @property  UIScenePresentationContext *presentationContext

  // class methods
  +[SBWindowSelfHostWrapper wrapperForUseInWindow:hostRequester:sceneIdentifier:]
  +[SBWindowSelfHostWrapper wrapperForWindow:orientation:hostRequester:sceneIdentifier:]

  // instance methods
  -[SBWindowSelfHostWrapper hostView]
  -[SBWindowSelfHostWrapper presenter]
  -[SBWindowSelfHostWrapper stopHosting]
  -[SBWindowSelfHostWrapper .cxx_destruct]
  -[SBWindowSelfHostWrapper modifyPresentationContext:]
  -[SBWindowSelfHostWrapper presentationContext]
  -[SBWindowSelfHostWrapper window]
  -[SBWindowSelfHostWrapper requester]


SBDirectToAirPlayController : NSObject <SBMainDisplaySceneManagerObserver, SBAVSystemControllerDirectToAirPlayObserver, SBControlCenterObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDirectToAirPlayController directToAirPlayIsAvailable]
  +[SBDirectToAirPlayController _mediaControllerSaysWeHaveAWiredRoute]

  // instance methods
  -[SBDirectToAirPlayController _currentExternalRouteNames]
  -[SBDirectToAirPlayController externalDisplayChanged:]
  -[SBDirectToAirPlayController currentExternalDestinationDidChange:]
  -[SBDirectToAirPlayController controlCenterWillPresent]
  -[SBDirectToAirPlayController likelyExternalDestinationsDidChange:]
  -[SBDirectToAirPlayController .cxx_destruct]
  -[SBDirectToAirPlayController _main_evaluatePolicyForDirectToAirplayAlert]
  -[SBDirectToAirPlayController controlCenterDidDismiss]
  -[SBDirectToAirPlayController externalAirPlayVideoPlayingDidChange:]
  -[SBDirectToAirPlayController _evaluateDirectToAirPlayImplicationsOfAppBecomingForeground:]
  -[SBDirectToAirPlayController _acquireDirectToAirPlayStatusBarStyleOverrideForApplicationWithBundleID:playing:completion:]
  -[SBDirectToAirPlayController externalAirPlayVideoActiveDidChange:]
  -[SBDirectToAirPlayController init]
  -[SBDirectToAirPlayController _captureCurrentPolicyState]
  -[SBDirectToAirPlayController lockStateChanged:]
  -[SBDirectToAirPlayController _evaluateDirectToAirPlayImplicationsOfAppBecomingBackground:]
  -[SBDirectToAirPlayController sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBDirectToAirPlayController _externalRouteNamesForDestination:]
  -[SBDirectToAirPlayController _updateRouteNamesForPlayingAndReadyApps]
  -[SBDirectToAirPlayController _evaluatePolicyForDirectToAirplayAlert]
  -[SBDirectToAirPlayController _rollBannerActionForReadyBundleID:sceneHandle:]
  -[SBDirectToAirPlayController _clearDirectToAirPlayStatusBarAssertion]
  -[SBDirectToAirPlayController sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]


_SBDirectToAirPlayPolicyState : NSObject
 @property  NSString *routeName
 @property  NSSet *foregroundEligibleBundleIDs
 @property  NSSet *foregroundIneligibleBundleIDs
 @property  NSSet *foregroundReadyBundleIDs
 @property  NSSet *foregroundPlayingBundleIDs
 @property  NSSet *allForegroundBundleIDs
 @property  NSSet *allPlayingBundleIDs
 @property  BOOL currentRouteIsWired
 @property  BOOL playingAppIsActivelyPlaying
 @property  BOOL suppressReadyStateForLock
 @property  BOOL suppressStateChangesForObscured
 @property  BOOL anyEligibleAppIsForeground
 @property  BOOL anyReadyAppIsForeground
 @property  BOOL anyPlayingAppIsForeground
 @property  BOOL anyIneligibleAppIsForeground
 @property  BOOL anyAppIsPlaying
 @property  unsigned long policyStateSerialNumber

  // instance methods
  -[_SBDirectToAirPlayPolicyState routeName]
  -[_SBDirectToAirPlayPolicyState .cxx_destruct]
  -[_SBDirectToAirPlayPolicyState isEqual:]
  -[_SBDirectToAirPlayPolicyState anyEligibleAppIsForeground]
  -[_SBDirectToAirPlayPolicyState policyStateSerialNumber]
  -[_SBDirectToAirPlayPolicyState anyAppIsPlaying]
  -[_SBDirectToAirPlayPolicyState allForegroundBundleIDs]
  -[_SBDirectToAirPlayPolicyState anyReadyAppIsForeground]
  -[_SBDirectToAirPlayPolicyState playingAppIsActivelyPlaying]
  -[_SBDirectToAirPlayPolicyState suppressReadyStateForLock]
  -[_SBDirectToAirPlayPolicyState suppressStateChangesForObscured]
  -[_SBDirectToAirPlayPolicyState currentRouteIsWired]
  -[_SBDirectToAirPlayPolicyState foregroundEligibleBundleIDs]
  -[_SBDirectToAirPlayPolicyState foregroundReadyBundleIDs]
  -[_SBDirectToAirPlayPolicyState foregroundIneligibleBundleIDs]
  -[_SBDirectToAirPlayPolicyState foregroundPlayingBundleIDs]
  -[_SBDirectToAirPlayPolicyState allPlayingBundleIDs]
  -[_SBDirectToAirPlayPolicyState anyIneligibleAppIsForeground]
  -[_SBDirectToAirPlayPolicyState anyPlayingAppIsForeground]


_SBMutableDirectToAirPlayPolicyState : _SBDirectToAirPlayPolicyState
 @property  NSString *routeName
 @property  NSSet *foregroundEligibleBundleIDs
 @property  NSSet *foregroundIneligibleBundleIDs
 @property  NSSet *foregroundReadyBundleIDs
 @property  NSSet *foregroundPlayingBundleIDs
 @property  NSSet *allForegroundBundleIDs
 @property  NSSet *allPlayingBundleIDs
 @property  BOOL currentRouteIsWired
 @property  BOOL playingAppIsActivelyPlaying
 @property  BOOL suppressReadyStateForLock
 @property  BOOL suppressStateChangesForObscured
 @property  unsigned long policyStateSerialNumber

  // instance methods
  -[_SBMutableDirectToAirPlayPolicyState setForegroundReadyBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setRouteName:]
  -[_SBMutableDirectToAirPlayPolicyState setPlayingAppIsActivelyPlaying:]
  -[_SBMutableDirectToAirPlayPolicyState setForegroundIneligibleBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setSuppressStateChangesForObscured:]
  -[_SBMutableDirectToAirPlayPolicyState setAllPlayingBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setForegroundPlayingBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setAllForegroundBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setPolicyStateSerialNumber:]
  -[_SBMutableDirectToAirPlayPolicyState setForegroundEligibleBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setSuppressReadyStateForLock:]
  -[_SBMutableDirectToAirPlayPolicyState setCurrentRouteIsWired:]


SBSwitcherDisplayItemRemovalResolutionResults : NSObject
 @property  NSArray *displayItems

  // instance methods
  -[SBSwitcherDisplayItemRemovalResolutionResults .cxx_destruct]
  -[SBSwitcherDisplayItemRemovalResolutionResults displayItems]
  -[SBSwitcherDisplayItemRemovalResolutionResults actionsForDisplayItem:]
  -[SBSwitcherDisplayItemRemovalResolutionResults setActions:forDisplayItem:]


SBSwitcherDisplayItemRemovalResolutionResultAction : NSObject
 @property  long long actionType
 @property  SBAppLayout *appLayout
 @property  SBAppLayout *replacementAppLayout

  // class methods
  +[SBSwitcherDisplayItemRemovalResolutionResultAction replacementActionWithAppLayout:replacementAppLayout:]
  +[SBSwitcherDisplayItemRemovalResolutionResultAction defaultRemovalPolicyActionWithAppLayout:]

  // instance methods
  -[SBSwitcherDisplayItemRemovalResolutionResultAction appLayout]
  -[SBSwitcherDisplayItemRemovalResolutionResultAction .cxx_destruct]
  -[SBSwitcherDisplayItemRemovalResolutionResultAction actionType]
  -[SBSwitcherDisplayItemRemovalResolutionResultAction replacementAppLayout]
  -[SBSwitcherDisplayItemRemovalResolutionResultAction _initWithAppLayout:actionType:]


SBMainDisplaySceneManager : SBSceneManager <SBIdleTimerCoordinating, SBSuspendedUnderLockManagerDelegate, SBIdleTimerProviding>
 @property  SBMainDisplayLayoutStateManager *_layoutStateManager
 @property  NSArray *_requiredContextIdentifiersForMedusaDraggingDestination
 @property  BOOL _isKeyboardVisibleForSpringBoard
 @property  BOOL _isUsingMedusaHostedKeyboardWindow
 @property  UIWindow *_medusaHostedKeyboardWindow
 @property  SBMainDisplayPolicyAggregator *policyAggregator
 @property  SBMainDisplayLayoutState *currentLayoutState
 @property  SBMainDisplaySceneLayoutViewController *sceneLayoutViewController
 @property  BOOL hasIdleTimerBehaviors
 @property  BOOL suspendedUnderLock
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainDisplaySceneManager _layoutStateManagerClass]
  +[SBMainDisplaySceneManager _sceneLayoutWindowClass]
  +[SBMainDisplaySceneManager _applicationSceneHandleClass]

  // instance methods
  -[SBMainDisplaySceneManager _shouldTrackScenesForDeactivation]
  -[SBMainDisplaySceneManager idleTimerCoordinator]
  -[SBMainDisplaySceneManager coordinatorRequestedIdleTimerBehavior:]
  -[SBMainDisplaySceneManager hasIdleTimerBehaviors]
  -[SBMainDisplaySceneManager _animateGeometryChangesForExternalForegroundApplicationScenes]
  -[SBMainDisplaySceneManager isSuspendedUnderLock]
  -[SBMainDisplaySceneManager idleTimerProvider:didProposeBehavior:forReason:]
  -[SBMainDisplaySceneManager _isKeyboardVisibleForSpringBoard]
  -[SBMainDisplaySceneManager _addMedusaDraggingDestinationWindow:]
  -[SBMainDisplaySceneManager _updateExternalForegroundApplicationScenesToInterfaceOrientation:force:prefersTouchCancellationDisabled:addDefaultAnimationSettings:customAnimationSettings:validator:]
  -[SBMainDisplaySceneManager setIdleTimerCoordinator:]
  -[SBMainDisplaySceneManager existingSceneHandleForScene:]
  -[SBMainDisplaySceneManager _updateMedusaHostedKeyboardWindowForScene:isForeground:]
  -[SBMainDisplaySceneManager _newSceneIdentifierForBundleIdentifier:supportsMultiwindow:]
  -[SBMainDisplaySceneManager _scene:interceptUpdateWithNewSettings:]
  -[SBMainDisplaySceneManager initWithReference:]
  -[SBMainDisplaySceneManager _createRootWindowScenePresentationBinder]
  -[SBMainDisplaySceneManager _deviceOrientationChanged:]
  -[SBMainDisplaySceneManager _sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:allowCanMatches:preferNewScene:visibleIdentifiers:excludingIdentifiers:sceneSessionRole:]
  -[SBMainDisplaySceneManager _updateExternalForegroundApplicationScenesToDeviceOrientation:]
  -[SBMainDisplaySceneManager suspendedUnderLockManager:shouldPreventSuspendUnderLockForScene:]
  -[SBMainDisplaySceneManager _sceneIdentifierForBundleIdentifier:uniqueIdentifier:]
  -[SBMainDisplaySceneManager _anyExternalForegroundApplicationScenesHasDynamicSupportedInterfaceOrientations]
  -[SBMainDisplaySceneManager .cxx_destruct]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:uniqueIdentifier:]
  -[SBMainDisplaySceneManager _proposeIdleTimerBehaviorForReason:]
  -[SBMainDisplaySceneManager _userInterfaceStyleArbiterStyleChanged:]
  -[SBMainDisplaySceneManager _newSceneIdentifierForBundleIdentifier:]
  -[SBMainDisplaySceneManager suspendedUnderLockManagerDisplayConfiguration:]
  -[SBMainDisplaySceneManager _identifierForApplication:]
  -[SBMainDisplaySceneManager _keyboardLayersClientSettingsDiffInspector]
  -[SBMainDisplaySceneManager runningApplicationScenes:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:targetContentIdentifier:allowCanMatches:preferNewScene:visibleIdentifiers:]
  -[SBMainDisplaySceneManager setSuspendedUnderLock:]
  -[SBMainDisplaySceneManager _shouldAutoHostScene:]
  -[SBMainDisplaySceneManager _activeAndVisibleSceneIdentifiersForApplication:]
  -[SBMainDisplaySceneManager newSceneIdentityForApplication:]
  -[SBMainDisplaySceneManager _newSceneLayoutViewController]
  -[SBMainDisplaySceneManager _snapshotRequestsForSceneHandle:settings:]
  -[SBMainDisplaySceneManager suspendedUnderLockManagerVisibleScenes:]
  -[SBMainDisplaySceneManager suspendedUnderLockManager:sceneHandleForScene:]
  -[SBMainDisplaySceneManager _updateDeviceOrientation:ifNeededForScene:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:sceneSessionRole:]
  -[SBMainDisplaySceneManager _removeMedusaDraggingDestinationWindow:]
  -[SBMainDisplaySceneManager existingSceneHandleForPersistenceIdentifier:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:excludingIdentifiers:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:]
  -[SBMainDisplaySceneManager addObserver:]
  -[SBMainDisplaySceneManager _isUsingMedusaHostedKeyboardWindow]
  -[SBMainDisplaySceneManager __shouldRotateToInterfaceOrientation:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:targetContentIdentifier:]
  -[SBMainDisplaySceneManager sceneManager:didDestroyScene:]
  -[SBMainDisplaySceneManager _updateMedusaHostedKeyboardWindow]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:]
  -[SBMainDisplaySceneManager existingSceneHandleForSceneIdentity:]
  -[SBMainDisplaySceneManager _shouldFenceTransitionForScene:updatedClientSettingsDiff:oldClientSettings:transitionContext:]
  -[SBMainDisplaySceneManager _updateValidInterfaceOrientationForTransitionContext:]
  -[SBMainDisplaySceneManager _scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBMainDisplaySceneManager _internalClientSettingsDiffInspector]
  -[SBMainDisplaySceneManager policyAggregator]
  -[SBMainDisplaySceneManager newMedusaHostedKeyboardWindowLevelAssertionWithPriority:windowLevel:]
  -[SBMainDisplaySceneManager _noteDidCommitUpdateForScene:]
  -[SBMainDisplaySceneManager fetchOrCreateApplicationSceneHandleForRequest:]
  -[SBMainDisplaySceneManager dealloc]
  -[SBMainDisplaySceneManager _updateLevelAndBackgroundSettingsForScene:transitionContext:]
  -[SBMainDisplaySceneManager _requiredContextIdentifiersForMedusaDraggingDestination]
  -[SBMainDisplaySceneManager _isExternalForegroundScene:]
  -[SBMainDisplaySceneManager _appClientSettingsDiffInspector]
  -[SBMainDisplaySceneManager _keyboardWillChangeFrame:]
  -[SBMainDisplaySceneManager externalApplicationSceneHandles]
  -[SBMainDisplaySceneManager _shouldRequestSnapshotActionsForScene:]
  -[SBMainDisplaySceneManager _attemptAutorotationOfExternalForegroundApplicationScenesToInterfaceOrientation:]
  -[SBMainDisplaySceneManager removeObserver:]
  -[SBMainDisplaySceneManager _externalClientSettingsDiffInspector]
  -[SBMainDisplaySceneManager externalForegroundApplicationSceneHandles]
  -[SBMainDisplaySceneManager _sceneIdentityForApplication:createPrimaryIfRequired:sceneSessionRole:]
  -[SBMainDisplaySceneManager _scene:willUpdateWithSettings:transitionContext:]
  -[SBMainDisplaySceneManager _application:initiatedChangefromInterfaceOrientation:toInterfaceOrientation:scene:sceneSettings:transitionContext:]
  -[SBMainDisplaySceneManager preventTakingAdditionalMedusaSnapshotsForBackgroundingScenesWithReason:]
  -[SBMainDisplaySceneManager _medusaHostedKeyboardWindow]
  -[SBMainDisplaySceneManager setSuspendedUnderLock:alongsideWillChangeBlock:alongsideDidChangeBlock:]
  -[SBMainDisplaySceneManager acquireIgnoreSuspendedUnderLockAssertionForSceneIdentifier:reason:]
  -[SBMainDisplaySceneManager _noteDidChangeToVisibility:previouslyExisted:forScene:]
  -[SBMainDisplaySceneManager _handleAction:forScene:]
  -[SBMainDisplaySceneManager createSceneForApplication:withOptions:completion:]


SBClientSettingObserverContext : NSObject
  // instance methods
  -[SBClientSettingObserverContext .cxx_destruct]


SBAppClientSettingObserverContext : NSObject
  // instance methods
  -[SBAppClientSettingObserverContext .cxx_destruct]


SBInternalClientSettingObserverContext : NSObject
 @property  FBScene *scene
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  UIApplicationSceneClientSettings *oldClientSettings
 @property  UIApplicationSceneClientSettings *updatedClientSettings
 @property  FBSSceneTransitionContext *transition

  // instance methods
  -[SBInternalClientSettingObserverContext setScene:]
  -[SBInternalClientSettingObserverContext transition]
  -[SBInternalClientSettingObserverContext setTransition:]
  -[SBInternalClientSettingObserverContext setSceneHandle:]
  -[SBInternalClientSettingObserverContext sceneHandle]
  -[SBInternalClientSettingObserverContext setOldClientSettings:]
  -[SBInternalClientSettingObserverContext .cxx_destruct]
  -[SBInternalClientSettingObserverContext scene]
  -[SBInternalClientSettingObserverContext oldClientSettings]
  -[SBInternalClientSettingObserverContext setUpdatedClientSettings:]
  -[SBInternalClientSettingObserverContext updatedClientSettings]


SBLogWindowController : UIViewController
 @property  SBMainScreenActiveInterfaceOrientationWindow *logWindow
 @property  UITextView *logTextView

  // class methods
  +[SBLogWindowController sharedInstance]
  +[SBLogWindowController sharedInstanceIfAvailable]

  // instance methods
  -[SBLogWindowController show]
  -[SBLogWindowController .cxx_destruct]
  -[SBLogWindowController initWithNibName:bundle:]
  -[SBLogWindowController hide]
  -[SBLogWindowController logTextView]
  -[SBLogWindowController setLogTextView:]
  -[SBLogWindowController logWindow]
  -[SBLogWindowController setLogWindow:]


SBLogWindowTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLogWindowTestRecipe load]

  // instance methods
  -[SBLogWindowTestRecipe title]
  -[SBLogWindowTestRecipe handleVolumeIncrease]
  -[SBLogWindowTestRecipe handleVolumeDecrease]


SBNotificationCarPlayDestination : NSObject <BNBannerHostMonitorListenerObserving, BNPresentableObserving, NCCarPlayBannerPresentableViewControllerDelegate, AFUserNotificationAnnouncementSpeakingStateDelegate, NCNotificationAlertDestination>
 @property  NCCarPlayBannerSource *carPlayBannerSource
 @property  BSTimer *announceTimeoutTimer
 @property  NCNotificationRequest *notificationRequestCurrentlyAnnouncing
 @property  BOOL active
 @property  SBNCAlertingController *alertingController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <NCNotificationAlertDestinationDelegate> *delegate
 @property  BOOL alertDestination
 @property  NSString *identifier
 @property  BSServiceConnectionEndpoint *endpoint

  // instance methods
  -[SBNotificationCarPlayDestination _shouldAnnounceNotificationRequest:]
  -[SBNotificationCarPlayDestination notificationAnnouncementObserver:announcementSpeakingStateDidUpdate:forNotificationRequestIdentifiers:]
  -[SBNotificationCarPlayDestination _flushNotificationRequestsPendingAnnounce]
  -[SBNotificationCarPlayDestination _postNotificationRequest:shouldAnnounce:]
  -[SBNotificationCarPlayDestination _withdrawNotificationRequest:inStore:]
  -[SBNotificationCarPlayDestination modifyNotificationRequest:]
  -[SBNotificationCarPlayDestination canReceiveNotificationRequest:]
  -[SBNotificationCarPlayDestination _presentablesWithRequestIdentifier:]
  -[SBNotificationCarPlayDestination isActive]
  -[SBNotificationCarPlayDestination _callOrFaceTimeStateChanged]
  -[SBNotificationCarPlayDestination _queueNotificationRequestWhileAnnouncing:]
  -[SBNotificationCarPlayDestination withdrawNotificationRequest:]
  -[SBNotificationCarPlayDestination .cxx_destruct]
  -[SBNotificationCarPlayDestination _setNotificationRequestCurrentlyAnnouncing:]
  -[SBNotificationCarPlayDestination _carPlayBannerSource]
  -[SBNotificationCarPlayDestination _supplementaryActionsForNotificationRequest:]
  -[SBNotificationCarPlayDestination _subActionsForNotificationRequest:]
  -[SBNotificationCarPlayDestination presentableWillAppearAsBanner:]
  -[SBNotificationCarPlayDestination postNotificationRequest:]
  -[SBNotificationCarPlayDestination isAlertDestination]
  -[SBNotificationCarPlayDestination setDelegate:]
  -[SBNotificationCarPlayDestination alertingController]
  -[SBNotificationCarPlayDestination _removePresentable:]
  -[SBNotificationCarPlayDestination _notificationRequestSupportsSubActions:]
  -[SBNotificationCarPlayDestination init]
  -[SBNotificationCarPlayDestination bannerHostDidBecomeAvailableForMonitorListener:]
  -[SBNotificationCarPlayDestination _notificationRequestCurrentlyAnnouncing]
  -[SBNotificationCarPlayDestination _addPresentable:]
  -[SBNotificationCarPlayDestination _effectiveDefaultActionTypeForNotificationRequest:]
  -[SBNotificationCarPlayDestination _allNotificationActionsForNotificationRequest:]
  -[SBNotificationCarPlayDestination _shouldDeferPostingNotificationRequestForAnnounce:]
  -[SBNotificationCarPlayDestination _inCallOrFaceTime]
  -[SBNotificationCarPlayDestination _defaultActionTypeForNotificationRequest:]
  -[SBNotificationCarPlayDestination bannerHostDidBecomeUnavailableForMonitorListener:]
  -[SBNotificationCarPlayDestination didSelectBannerOfPresentableViewController:]
  -[SBNotificationCarPlayDestination _appPolicyEvaluator]
  -[SBNotificationCarPlayDestination identifier]
  -[SBNotificationCarPlayDestination presentableViewControllerClosesByDefault:]
  -[SBNotificationCarPlayDestination _newPresentableForNotificationRequest:layoutDescription:]
  -[SBNotificationCarPlayDestination _clearNotificationRequestPendingAnnounceDeactivationIfNecessary]
  -[SBNotificationCarPlayDestination _shouldAnnounceNotificationForActiveAVSession:]
  -[SBNotificationCarPlayDestination _announceDeactivationReasonForBannerRevocationReason:]
  -[SBNotificationCarPlayDestination _setAnnounceTimeoutTimer:]
  -[SBNotificationCarPlayDestination _startAnnounceTimeoutTimer]
  -[SBNotificationCarPlayDestination _setSuspended:forPresentingAlertControllerForPresentable:]
  -[SBNotificationCarPlayDestination _bulletinForNotificationRequest:]
  -[SBNotificationCarPlayDestination setAlertingController:]
  -[SBNotificationCarPlayDestination _cancelAnnounceTimeoutTimer]
  -[SBNotificationCarPlayDestination _cancelAnnounceForNotificationRequest:withReason:deactivateAnnounce:]
  -[SBNotificationCarPlayDestination delegate]
  -[SBNotificationCarPlayDestination _notificationRequestForAnnounceWithIdentifier:]
  -[SBNotificationCarPlayDestination didCancelBannerOfPresentableViewController:reason:]
  -[SBNotificationCarPlayDestination keyWindowForScreen:]
  -[SBNotificationCarPlayDestination _flushAnnounceNotificationRequestsShouldAnnounce:]
  -[SBNotificationCarPlayDestination _notificationRequestShouldShowModalSubActions:]
  -[SBNotificationCarPlayDestination presentableDidDisappearAsBanner:withReason:]
  -[SBNotificationCarPlayDestination _policyForApp:]
  -[SBNotificationCarPlayDestination dealloc]
  -[SBNotificationCarPlayDestination endpoint]
  -[SBNotificationCarPlayDestination _requestAnnounceForNotificationRequest:]
  -[SBNotificationCarPlayDestination _voicePromptStyleChanged:]
  -[SBNotificationCarPlayDestination _modifyNotificationRequest:inStore:]
  -[SBNotificationCarPlayDestination _closeNotificationActionForNotificationRequest:]
  -[SBNotificationCarPlayDestination _isCurrentlyAnnouncing]
  -[SBNotificationCarPlayDestination _actionForNotificationRequest:]
  -[SBNotificationCarPlayDestination _announcementStateObserver]
  -[SBNotificationCarPlayDestination _announceTimeoutTimer]
  -[SBNotificationCarPlayDestination _subActionLabelsForNotificationRequest:]
  -[SBNotificationCarPlayDestination _ignoreActionForNotificationRequest:]


SBForcePressToFullScreenAppLayoutSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isContainerStatusBarVisible]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier homeScreenBackdropBlurType]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isHomeScreenContentRequired]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier visibleAppLayouts]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier .cxx_destruct]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isSwitcherWindowVisible]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier wallpaperStyle]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:effectiveStartingEnvironmentMode:]


SBHomeScreenSpotlightViewController : SBSpotlightMultiplexingViewController
 @property  <SBHomeScreenSpotlightDismissalDelegate> *homescreenSpotlightDelegate
 @property  FBDisplayLayoutElement *displayLayoutElement

  // instance methods
  -[SBHomeScreenSpotlightViewController level]
  -[SBHomeScreenSpotlightViewController displayLayoutElement]
  -[SBHomeScreenSpotlightViewController .cxx_destruct]
  -[SBHomeScreenSpotlightViewController initWithDelegate:]
  -[SBHomeScreenSpotlightViewController viewWillAppear:]
  -[SBHomeScreenSpotlightViewController homescreenSpotlightDelegate]
  -[SBHomeScreenSpotlightViewController remoteSearchViewPresentationSource]
  -[SBHomeScreenSpotlightViewController viewDidDisappear:]


SBSoftLockoutController : NSObject <CSExternalLockProviding, CSCoverSheetViewControllerObserver>
 @property  <SBSoftLockoutControllerDelegate> *delegate
 @property  BOOL locked
 @property  BOOL showPasscode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBSoftLockoutController coverSheetIdentifier]
  -[SBSoftLockoutController _createPasscodeRequiredAssertion]
  -[SBSoftLockoutController .cxx_destruct]
  -[SBSoftLockoutController _clearPasscodeRequiredAssertion]
  -[SBSoftLockoutController coverSheetViewControllerDidDismissPasscodeLockView:]
  -[SBSoftLockoutController setDelegate:]
  -[SBSoftLockoutController participantState]
  -[SBSoftLockoutController isLocked]
  -[SBSoftLockoutController showPasscode]
  -[SBSoftLockoutController initWithBiometricLockoutState:]
  -[SBSoftLockoutController unlockFromSource:]
  -[SBSoftLockoutController initWithBiometricLockoutState:lockScreenManager:]
  -[SBSoftLockoutController delegate]
  -[SBSoftLockoutController dealloc]
  -[SBSoftLockoutController reload]


SBAppLibraryMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppLibraryMetric handleEvent:withContext:]
  -[SBAppLibraryMetric .cxx_destruct]
  -[SBAppLibraryMetric init]


SBDefaultImplementationsSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBDefaultImplementationsSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier bounceIconInitialFrame]
  -[SBDefaultImplementationsSwitcherModifier settingsForAnimatableProperty:]
  -[SBDefaultImplementationsSwitcherModifier fullyPresentedFrameForIndex:frame:]
  -[SBDefaultImplementationsSwitcherModifier presentationAttributesForShelf:]
  -[SBDefaultImplementationsSwitcherModifier resizeProgressNotificationsForLayoutRole:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier shouldUseNonuniformSnapshotScalingForLayoutRole:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier scaleForLayoutRole:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier shouldShowBackdropViewAtIndex:]
  -[SBDefaultImplementationsSwitcherModifier topMostLayoutRolesForAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier animatablePropertyIdentifiers]
  -[SBDefaultImplementationsSwitcherModifier hiddenContentStatusBarPartsForLayoutRole:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier clipsToBoundsAtIndex:]
  -[SBDefaultImplementationsSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBDefaultImplementationsSwitcherModifier canFocusableAppLayoutBeEffectivelyObscured:]
  -[SBDefaultImplementationsSwitcherModifier cornerRadiiForLayoutRole:inAppLayout:withCornerRadii:]
  -[SBDefaultImplementationsSwitcherModifier maskedCornersForIndex:]
  -[SBDefaultImplementationsSwitcherModifier homeAffordanceLayoutElementToPortalIntoShelf:]
  -[SBDefaultImplementationsSwitcherModifier anchorPointForIndex:]
  -[SBDefaultImplementationsSwitcherModifier switcherHitTestsAsOpaque]
  -[SBDefaultImplementationsSwitcherModifier contentViewOffsetForLayoutRole:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier frameForIconOverlayInAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier hiddenAppLayoutsInShelf:]
  -[SBDefaultImplementationsSwitcherModifier shouldUpdateAnimatableProperty:]
  -[SBDefaultImplementationsSwitcherModifier shouldTetherItemsAndAccessoriesInAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier focusedAppLayoutForShelf:]
  -[SBDefaultImplementationsSwitcherModifier updateModeForAnimatableProperty:]
  -[SBDefaultImplementationsSwitcherModifier modelValueForAnimatableProperty:currentValue:creating:]
  -[SBDefaultImplementationsSwitcherModifier switcherDropRegionContextForDraggingLayoutRole:inAppLayout:atLocation:]
  -[SBDefaultImplementationsSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBDefaultImplementationsSwitcherModifier blurTargetPreferenceForLayoutRole:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier bounceIconGenerationCountForCurrentCount:]
  -[SBDefaultImplementationsSwitcherModifier hiddenContainerStatusBarParts]
  -[SBDefaultImplementationsSwitcherModifier _isLayoutRoleBehindCenterWindow:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier shouldSuppressHighlightEffectForLayoutRole:inAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier resizeGrabberLayoutAttributesForAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier maskedCornersForLayoutRole:inAppLayout:withMaskedCorners:]
  -[SBDefaultImplementationsSwitcherModifier canLayoutRoleParticipateInSwitcherDragAndDrop:appLayout:]
  -[SBDefaultImplementationsSwitcherModifier bounceIconBundleIdentifier]
  -[SBDefaultImplementationsSwitcherModifier clippingFrameForIndex:withBounds:]
  -[SBDefaultImplementationsSwitcherModifier contentViewOffsetForAccessoriesOfAppLayout:]
  -[SBDefaultImplementationsSwitcherModifier ignoredDisplayItemsForShelf:]
  -[SBDefaultImplementationsSwitcherModifier preferredAppLayoutToReuseAccessoryForAppLayout:fromAppLayouts:]
  -[SBDefaultImplementationsSwitcherModifier shouldScaleContentToFillBoundsAtIndex:]
  -[SBDefaultImplementationsSwitcherModifier multipleWindowsIndicatorLayoutRoleMaskForAppLayout:]


SBCollectionViewCell : UICollectionViewCell
 @property  <SBCollectionViewCellDelegate> *delegate
 @property  BOOL protectDelayedUnhighlights

  // instance methods
  -[SBCollectionViewCell setHighlighted:]
  -[SBCollectionViewCell .cxx_destruct]
  -[SBCollectionViewCell setDelegate:]
  -[SBCollectionViewCell prepareForReuse]
  -[SBCollectionViewCell delegate]
  -[SBCollectionViewCell setHighlighted:afterDelay:]
  -[SBCollectionViewCell _performSetHighlighted]
  -[SBCollectionViewCell _didSetHighlighted:]
  -[SBCollectionViewCell protectDelayedUnhighlights]
  -[SBCollectionViewCell setProtectDelayedUnhighlights:]


SBForcePressToSwitcherSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBForcePressToSwitcherSwitcherModifier isContainerStatusBarVisible]
  -[SBForcePressToSwitcherSwitcherModifier homeScreenBackdropBlurType]
  -[SBForcePressToSwitcherSwitcherModifier transitionWillBegin]
  -[SBForcePressToSwitcherSwitcherModifier isHomeScreenContentRequired]
  -[SBForcePressToSwitcherSwitcherModifier containerStatusBarAnimationDuration]
  -[SBForcePressToSwitcherSwitcherModifier animationAttributesForLayoutElement:]
  -[SBForcePressToSwitcherSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBForcePressToSwitcherSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBForcePressToSwitcherSwitcherModifier visibleAppLayouts]
  -[SBForcePressToSwitcherSwitcherModifier .cxx_destruct]
  -[SBForcePressToSwitcherSwitcherModifier isSwitcherWindowVisible]
  -[SBForcePressToSwitcherSwitcherModifier _layoutSettings]
  -[SBForcePressToSwitcherSwitcherModifier handleTimerEvent:]
  -[SBForcePressToSwitcherSwitcherModifier wallpaperStyle]
  -[SBForcePressToSwitcherSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBForcePressToSwitcherSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBForcePressToSwitcherSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBForcePressToSwitcherSwitcherModifier _appLayoutToScrollToDuringTransition]
  -[SBForcePressToSwitcherSwitcherModifier _dismissForEmptySwitcherResponseName]
  -[SBForcePressToSwitcherSwitcherModifier _indexOfSelectedAppLayout]
  -[SBForcePressToSwitcherSwitcherModifier initWithTransitionID:selectedAppLayout:effectiveStartingEnvironmentMode:multitaskingModifier:]


SBMoveFloatingConfigurationFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier transitionWillBegin]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier visibleAppLayouts]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier _layoutSettings]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier initWithTransitionID:fromFloatingConfiguration:toFloatingConfiguration:]


SBWidgetLaunchStatsTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWidgetLaunchStatsTestRecipe load]

  // instance methods
  -[SBWidgetLaunchStatsTestRecipe title]
  -[SBWidgetLaunchStatsTestRecipe handleVolumeIncrease]
  -[SBWidgetLaunchStatsTestRecipe handleVolumeDecrease]


SBGridToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBGridToFullScreenSwitcherModifier transitionWillBegin]
  -[SBGridToFullScreenSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBGridToFullScreenSwitcherModifier .cxx_destruct]
  -[SBGridToFullScreenSwitcherModifier initWithTransitionID:direction:fullScreenAppLayout:gridModifier:]


SBAWDMetric : NSObject
 @property  <SBAWDMetricDelegate> *delegate

  // instance methods
  -[SBAWDMetric .cxx_destruct]
  -[SBAWDMetric setDelegate:]
  -[SBAWDMetric dataClass]
  -[SBAWDMetric delegate]
  -[SBAWDMetric componentID]
  -[SBAWDMetric postWithDataBuilder:]
  -[SBAWDMetric metricID]
  -[SBAWDMetric configureWithData:]
  -[SBAWDMetric _postMetric:withID:]


SBAWDMetricData : NSObject

SBLowBatteryLogTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLowBatteryLogTestRecipe load]

  // instance methods
  -[SBLowBatteryLogTestRecipe title]
  -[SBLowBatteryLogTestRecipe handleVolumeIncrease]
  -[SBLowBatteryLogTestRecipe handleVolumeDecrease]


SBFaceContactExpectationManager : NSObject
  // instance methods
  -[SBFaceContactExpectationManager initWithSceneManager:proximitySensorManager:]
  -[SBFaceContactExpectationManager _proximitySensorClientID]
  -[SBFaceContactExpectationManager .cxx_destruct]
  -[SBFaceContactExpectationManager initWithSceneManager:]
  -[SBFaceContactExpectationManager updateFaceContactExpectation]
  -[SBFaceContactExpectationManager _frontmostScenesExpectingFaceContact]


SBStatusBarManager : NSObject <BSDescriptionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBStatusBarManager sharedInstance]

  // instance methods
  -[SBStatusBarManager handleStatusBarTapWithEvent:]
  -[SBStatusBarManager createStatusBarWithReason:]
  -[SBStatusBarManager leadingStatusBarStyleRequest]
  -[SBStatusBarManager .cxx_destruct]
  -[SBStatusBarManager resetStatusBar:]
  -[SBStatusBarManager succinctDescriptionBuilder]
  -[SBStatusBarManager acquireHideFrontmostStatusBarAssertionForReason:]
  -[SBStatusBarManager recycleStatusBar:]
  -[SBStatusBarManager descriptionBuilderWithMultilinePrefix:]
  -[SBStatusBarManager init]
  -[SBStatusBarManager descriptionWithMultilinePrefix:]
  -[SBStatusBarManager succinctDescription]
  -[SBStatusBarManager trailingStatusBarStyleRequest]
  -[SBStatusBarManager isFrontmostStatusBarPartHidden:]
  -[SBStatusBarManager _removeStatusBarContainer:]
  -[SBStatusBarManager frontmostStatusBarStyleRequest]
  -[SBStatusBarManager createStatusBarWithReason:withFrame:]
  -[SBStatusBarManager isFrontmostStatusBarHidden]


SBStatusBarContainer : NSObject
 @property  UIStatusBar *statusBar
 @property  NSString *reason

  // instance methods
  -[SBStatusBarContainer .cxx_destruct]
  -[SBStatusBarContainer statusBar]
  -[SBStatusBarContainer reason]
  -[SBStatusBarContainer setReason:]
  -[SBStatusBarContainer dealloc]
  -[SBStatusBarContainer setStatusBar:]


SBRouteToMixedGridSwitcherModifier : SBTransitionSwitcherModifier
 @property  BOOL reversesFloatingCardDirection

  // instance methods
  -[SBRouteToMixedGridSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBRouteToMixedGridSwitcherModifier handleTransitionEvent:]
  -[SBRouteToMixedGridSwitcherModifier .cxx_destruct]
  -[SBRouteToMixedGridSwitcherModifier scrollViewAttributes]
  -[SBRouteToMixedGridSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBRouteToMixedGridSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBRouteToMixedGridSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBRouteToMixedGridSwitcherModifier snapshotScaleForAppLayout:]
  -[SBRouteToMixedGridSwitcherModifier reversesFloatingCardDirection]
  -[SBRouteToMixedGridSwitcherModifier setReversesFloatingCardDirection:]
  -[SBRouteToMixedGridSwitcherModifier initWithTransitionID:mixedGridModifier:]


SBHapticSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  long long hapticType
 @property  long long phase

  // instance methods
  -[SBHapticSwitcherEventResponse phase]
  -[SBHapticSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBHapticSwitcherEventResponse type]
  -[SBHapticSwitcherEventResponse hapticType]
  -[SBHapticSwitcherEventResponse initWithHapticType:phase:]


SBLockOverlayView : SBUILockOverlayView
  // instance methods
  -[SBLockOverlayView _legibilitySettingsForStyle:]


SBMainWorkspaceTransitionRequest : SBWorkspaceTransitionRequest
 @property  SBMainWorkspace *workspace
 @property  long long source
 @property  BOOL shouldPreventEmergencyNotificationBannerDismissal
 @property  <SBBannerUnfurlSourceContextProviding> *bannerUnfurlSourceContextProvider
 @property  @? transactionProvider
 @property  @? transactionConfigurator
 @property  @? completionBlock

  // instance methods
  -[SBMainWorkspaceTransitionRequest compactDescriptionBuilder]
  -[SBMainWorkspaceTransitionRequest shouldPreventEmergencyNotificationBannerDismissal]
  -[SBMainWorkspaceTransitionRequest initWithDisplayConfiguration:]
  -[SBMainWorkspaceTransitionRequest finalize]
  -[SBMainWorkspaceTransitionRequest setShouldPreventEmergencyNotificationBannerDismissal:]
  -[SBMainWorkspaceTransitionRequest .cxx_destruct]
  -[SBMainWorkspaceTransitionRequest transactionConfigurator]
  -[SBMainWorkspaceTransitionRequest _initWithWorkspace:displayConfiguration:]
  -[SBMainWorkspaceTransitionRequest succinctDescriptionBuilder]
  -[SBMainWorkspaceTransitionRequest copyMainWorkspaceTransitionRequest]
  -[SBMainWorkspaceTransitionRequest setTransientOverlayContext:]
  -[SBMainWorkspaceTransitionRequest transactionProvider]
  -[SBMainWorkspaceTransitionRequest setTransactionProvider:]
  -[SBMainWorkspaceTransitionRequest setBannerUnfurlSourceContextProvider:]
  -[SBMainWorkspaceTransitionRequest setSource:]
  -[SBMainWorkspaceTransitionRequest completionBlock]
  -[SBMainWorkspaceTransitionRequest setTransactionConfigurator:]
  -[SBMainWorkspaceTransitionRequest declineWithReason:]
  -[SBMainWorkspaceTransitionRequest isMainWorkspaceTransitionRequest]
  -[SBMainWorkspaceTransitionRequest setCompletionBlock:]
  -[SBMainWorkspaceTransitionRequest bannerUnfurlSourceContextProvider]
  -[SBMainWorkspaceTransitionRequest source]


SBApplicationPlaceholderProxy : FBSApplicationPlaceholder

SBSuspendedUnderLockManager : NSObject
 @property  <SBSuspendedUnderLockManagerDelegate> *delegate
 @property  BOOL suspendedUnderLock

  // instance methods
  -[SBSuspendedUnderLockManager isSuspendedUnderLock]
  -[SBSuspendedUnderLockManager initWithDelegate:eventQueue:]
  -[SBSuspendedUnderLockManager .cxx_destruct]
  -[SBSuspendedUnderLockManager setDelegate:]
  -[SBSuspendedUnderLockManager setSuspendedUnderLock:]
  -[SBSuspendedUnderLockManager _shouldBeBackgroundUnderLockForScene:withSettings:]
  -[SBSuspendedUnderLockManager delegate]
  -[SBSuspendedUnderLockManager interceptUpdateForScene:withNewSettings:]
  -[SBSuspendedUnderLockManager setSuspendedUnderLock:alongsideWillChangeBlock:alongsideDidChangeBlock:]


SBHomeScreenZoomSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBHomeScreenZoomSwitcherModifier homeScreenDimmingAlpha]
  -[SBHomeScreenZoomSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeScreenZoomSwitcherModifier wallpaperScale]
  -[SBHomeScreenZoomSwitcherModifier homeScreenScale]
  -[SBHomeScreenZoomSwitcherModifier homeScreenAlpha]
  -[SBHomeScreenZoomSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeScreenZoomSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeScreenZoomSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBHomeScreenZoomSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeScreenZoomSwitcherModifier _isEffectivelyHome]
  -[SBHomeScreenZoomSwitcherModifier wallpaperStyle]
  -[SBHomeScreenZoomSwitcherModifier initWithTransitionID:direction:]


SBSwitcherModifier : SBChainableModifier <SBSwitcherMultitaskingQueryProviding, SBSwitcherContextProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSwitcherModifier queryProtocol]
  +[SBSwitcherModifier contextProtocol]
  +[SBSwitcherModifier newEventResponse]

  // instance methods
  -[SBSwitcherModifier loggingCategory]
  -[SBSwitcherModifier displayName]
  -[SBSwitcherModifier _handleEvent:]
  -[SBSwitcherModifier handleTransitionEvent:]
  -[SBSwitcherModifier handleTapAppLayoutEvent:]
  -[SBSwitcherModifier handleTimerEvent:]
  -[SBSwitcherModifier init]
  -[SBSwitcherModifier handleTapOutsideToDismissEvent:]
  -[SBSwitcherModifier handleRemovalEvent:]
  -[SBSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBSwitcherModifier handleScrollEvent:]
  -[SBSwitcherModifier handleInsertionEvent:]
  -[SBSwitcherModifier handleSceneReadyEvent:]
  -[SBSwitcherModifier performWithTemporarilyInsertedAppLayout:atIndex:block:]
  -[SBSwitcherModifier defaultAppLayoutsToCacheSnapshots]
  -[SBSwitcherModifier appLayoutsToCacheSnapshotsWithVisibleRange:numberOfSnapshotsToCache:biasForward:]
  -[SBSwitcherModifier handleHighlightEvent:]
  -[SBSwitcherModifier scaledFrameForLayoutRole:inAppLayout:atIndex:]
  -[SBSwitcherModifier stackDescription]
  -[SBSwitcherModifier handleGestureEvent:]
  -[SBSwitcherModifier indexOfFirstMainAppLayoutFromAppLayouts:]
  -[SBSwitcherModifier indexOfFirstFloatingAppFromAppLayouts:]
  -[SBSwitcherModifier scaledFrameForIndex:]
  -[SBSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:numberOfRows:padding:layoutDirection:]
  -[SBSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBSwitcherModifier handleAnimatablePropertyChangedEvent:]
  -[SBSwitcherModifier handleReduceMotionChangedEvent:]
  -[SBSwitcherModifier stackDescriptionWithPrefix:]
  -[SBSwitcherModifier handleResizeProgressEvent:]
  -[SBSwitcherModifier handleSwitcherDropEvent:]
  -[SBSwitcherModifier handleBlurProgressEvent:]
  -[SBSwitcherModifier runsInternalVerificationAfterEventDispatch]
  -[SBSwitcherModifier handleTapSlideOverTongueEvent:]
  -[SBSwitcherModifier handleSwipeToKillEvent:]
  -[SBSwitcherModifier handleUpdateFocusedAppLayoutEvent:]
  -[SBSwitcherModifier handleHideMorphToPIPAppLayoutEvent:]
  -[SBSwitcherModifier handleInitialSetupEvent:]
  -[SBSwitcherModifier handleMedusaSettingsChangedEvent:]
  -[SBSwitcherModifier handleHomeGrabberSettingsChangedEvent:]
  -[SBSwitcherModifier handleSlideOverEdgeProtectTongueEvent:]
  -[SBSwitcherModifier handleShelfFocusedDisplayItemsChangedEvent:]


SBHomeScreenWindow : SBWindow
 @property  SBHomeScreenViewController *homeScreenViewController

  // class methods
  +[SBHomeScreenWindow constrainFrameToScreen:]
  +[SBHomeScreenWindow sb_autorotates]

  // instance methods
  -[SBHomeScreenWindow _canBecomeKeyWindow]
  -[SBHomeScreenWindow hitTest:withEvent:]
  -[SBHomeScreenWindow initWithScreen:scene:rootViewController:layoutStrategy:role:debugName:]
  -[SBHomeScreenWindow isContentHidden]
  -[SBHomeScreenWindow autorotationPreventionReasons]
  -[SBHomeScreenWindow homeScreenViewController]


SBPortalView : UIView
 @property  UIView *sourceView
 @property  BOOL hidesSourceView
 @property  BOOL matchesAlpha
 @property  BOOL matchesTransform
 @property  BOOL matchesPosition
 @property  BOOL allowsBackdropGroups
 @property  BOOL passesTouchesThrough
 @property  CAPortalLayer *portalLayer

  // class methods
  +[SBPortalView layerClass]

  // instance methods
  -[SBPortalView hitTest:withEvent:]
  -[SBPortalView setSourceView:]
  -[SBPortalView setHidesSourceView:]
  -[SBPortalView matchesPosition]
  -[SBPortalView .cxx_destruct]
  -[SBPortalView sourceView]
  -[SBPortalView setPassesTouchesThrough:]
  -[SBPortalView portalLayer]
  -[SBPortalView allowsBackdropGroups]
  -[SBPortalView setMatchesAlpha:]
  -[SBPortalView passesTouchesThrough]
  -[SBPortalView hidesSourceView]
  -[SBPortalView setMatchesTransform:]
  -[SBPortalView setAllowsBackdropGroups:]
  -[SBPortalView setMatchesPosition:]
  -[SBPortalView matchesAlpha]
  -[SBPortalView matchesTransform]


SBFMotionGestureController : NSObject
  // class methods
  +[SBFMotionGestureController sharedInstance]

  // instance methods
  -[SBFMotionGestureController _observersForPriority:]
  -[SBFMotionGestureController .cxx_destruct]
  -[SBFMotionGestureController init]
  -[SBFMotionGestureController dealloc]
  -[SBFMotionGestureController _hasObservers]
  -[SBFMotionGestureController _removeGestureManager]
  -[SBFMotionGestureController addGestureObserver:withPriority:]
  -[SBFMotionGestureController _addGestureObserver:withPriority:]
  -[SBFMotionGestureController _updateGestureManager]
  -[SBFMotionGestureController _removeGestureObserver:]
  -[SBFMotionGestureController _enumerateObserversByPriority:]
  -[SBFMotionGestureController _highestPriorityObservers]
  -[SBFMotionGestureController _addGestureManager]
  -[SBFMotionGestureController _notifyObserversOfGesture:]
  -[SBFMotionGestureController addGestureObserver:]
  -[SBFMotionGestureController removeGestureObserver:]


SBSceneDataStore : NSObject
 @property  NSDictionary *data
 @property  BOOL invalidated
 @property  NSString *identifier

  // instance methods
  -[SBSceneDataStore objectForKey:]
  -[SBSceneDataStore removeAllObjects]
  -[SBSceneDataStore _isInvalidated]
  -[SBSceneDataStore _data]
  -[SBSceneDataStore setObject:forKey:]
  -[SBSceneDataStore .cxx_destruct]
  -[SBSceneDataStore setArchivedObject:forKey:]
  -[SBSceneDataStore removeObjectForKey:]
  -[SBSceneDataStore identifier]
  -[SBSceneDataStore _invalidate]
  -[SBSceneDataStore safeObjectForKey:ofType:]
  -[SBSceneDataStore unarchivedObjectOfClass:forKey:]
  -[SBSceneDataStore _invokeChangeHandler]
  -[SBSceneDataStore _initWithIdentifier:data:changeHandler:]


SBPIPWindow : SBWindow
 @property  NSArray *containerViewControllers

  // instance methods
  -[SBPIPWindow hitTest:withEvent:]
  -[SBPIPWindow isActive]
  -[SBPIPWindow removeActiveOrientationObserver:]
  -[SBPIPWindow setRootViewController:]
  -[SBPIPWindow interfaceOrientationForContainerViewController:]
  -[SBPIPWindow removeContainerViewController:]
  -[SBPIPWindow addActiveOrientationObserver:]
  -[SBPIPWindow hideContainersExcludingContainerForContentViewControllerAndTetheredOnes:animated:]
  -[SBPIPWindow showAllContainersAnimated:]
  -[SBPIPWindow acquireInterfaceOrientationLockForContainerViewController:]
  -[SBPIPWindow relinquishInterfaceOrientationLockForContainerViewController:]
  -[SBPIPWindow containerViewControllers]
  -[SBPIPWindow initWithPIPController:]
  -[SBPIPWindow _pipWindowRootVC]
  -[SBPIPWindow addContainerViewController:]
  -[SBPIPWindow containerViewControllerForPictureInPictureContentViewController:]
  -[SBPIPWindow bringTetheredChildViewControllersToFront]
  -[SBPIPWindow updateActiveInterfaceOrientationForManualPictureInPictureStart]


SBPIPWindowRootViewController : UIViewController <SBPIPContainerViewControllerObserver, SBUIActiveOrientationObserver>
 @property  long long activeInterfaceOrientation
 @property  NSArray *containerViewControllers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPWindowRootViewController activeInterfaceOrientationWillChangeToOrientation:]
  -[SBPIPWindowRootViewController setActiveInterfaceOrientation:]
  -[SBPIPWindowRootViewController _overrideInterfaceOrientationMechanics]
  -[SBPIPWindowRootViewController activeInterfaceOrientation]
  -[SBPIPWindowRootViewController activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBPIPWindowRootViewController .cxx_destruct]
  -[SBPIPWindowRootViewController _overrideWindowActiveInterfaceOrientation]
  -[SBPIPWindowRootViewController removeActiveOrientationObserver:]
  -[SBPIPWindowRootViewController shouldAutorotate]
  -[SBPIPWindowRootViewController interfaceOrientationForContainerViewController:]
  -[SBPIPWindowRootViewController removeContainerViewController:]
  -[SBPIPWindowRootViewController viewDidLayoutSubviews]
  -[SBPIPWindowRootViewController addActiveOrientationObserver:]
  -[SBPIPWindowRootViewController dealloc]
  -[SBPIPWindowRootViewController hideContainersExcludingContainerForContentViewControllerAndTetheredOnes:animated:]
  -[SBPIPWindowRootViewController showAllContainersAnimated:]
  -[SBPIPWindowRootViewController containerViewControllerRequiredInterfaceOrientationDidChange:]
  -[SBPIPWindowRootViewController acquireInterfaceOrientationLockForContainerViewController:]
  -[SBPIPWindowRootViewController relinquishInterfaceOrientationLockForContainerViewController:]
  -[SBPIPWindowRootViewController containerViewControllers]
  -[SBPIPWindowRootViewController initWithPIPController:]
  -[SBPIPWindowRootViewController addContainerViewController:]
  -[SBPIPWindowRootViewController containerViewControllerForPictureInPictureContentViewController:]
  -[SBPIPWindowRootViewController bringTetheredChildViewControllersToFront]
  -[SBPIPWindowRootViewController _layoutInterfaceOrientationUnlockedContainerViewControllersAndForceLayout:]
  -[SBPIPWindowRootViewController _requiredInterfaceOrientationForContainerViewController:]
  -[SBPIPWindowRootViewController _layoutContainerViewControllers:forceLayout:]
  -[SBPIPWindowRootViewController layoutForActiveInterfaceOrientation:duration:fromOrientation:forced:]
  -[SBPIPWindowRootViewController _hasOngoingMorphRestore]
  -[SBPIPWindowRootViewController _bringPGContentViewControllerWithContentTypeToFront:]
  -[SBPIPWindowRootViewController _interfaceOrientationForContainerViewController:]


SBRemovalSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBRemovalSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[SBRemovalSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBRemovalSwitcherModifier animationAttributesForLayoutElement:]
  -[SBRemovalSwitcherModifier resizeProgressNotificationsForLayoutRole:inAppLayout:]
  -[SBRemovalSwitcherModifier blurViewIconScaleForIndex:]
  -[SBRemovalSwitcherModifier visibleAppLayouts]
  -[SBRemovalSwitcherModifier .cxx_destruct]
  -[SBRemovalSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBRemovalSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBRemovalSwitcherModifier topMostLayoutElements]
  -[SBRemovalSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBRemovalSwitcherModifier handleRemovalEvent:]
  -[SBRemovalSwitcherModifier shouldScaleContentToFillBoundsAtIndex:]
  -[SBRemovalSwitcherModifier handleInsertionEvent:]
  -[SBRemovalSwitcherModifier handleSceneReadyEvent:]
  -[SBRemovalSwitcherModifier initWithLayoutRole:inAppLayout:reason:]
  -[SBRemovalSwitcherModifier handleResizeProgressEvent:]
  -[SBRemovalSwitcherModifier _performBlockWhileSimulatingPostRemovalAppLayoutState:]
  -[SBRemovalSwitcherModifier _remainingAppLayoutForRemovingLayoutRole:inAppLayout:]


SBScheduledAlarmObserver : NSObject
  // class methods
  +[SBScheduledAlarmObserver sharedInstance]

  // instance methods
  -[SBScheduledAlarmObserver _updateAlarmStatusBarItem]
  -[SBScheduledAlarmObserver .cxx_destruct]
  -[SBScheduledAlarmObserver init]
  -[SBScheduledAlarmObserver _nextAlarmChanged:]


SBWorkspaceEntity : NSObject <NSCopying, SBActivationSettings, SBDeactivationSettings, BSDescriptionProviding, SBLayoutElementDescriptor>
 @property  BOOL isPreviousWorkspaceEntity
 @property  BOOL isEmptyWorkspaceEntity
 @property  BOOL isHomeScreenEntity
 @property  long long _mainDisplayPreferredInterfaceOrientation
 @property  long long layoutRole
 @property  SBActivationSettings *activationSettings
 @property  SBDeactivationSettings *deactivationSettings
 @property  BOOL supportsPresentationAtAnySize
 @property  BOOL wantsExclusiveForeground
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *uniqueIdentifier
 @property  unsigned long supportedLayoutRoles
 @property  unsigned long layoutAttributes
 @property  Class viewControllerClass
 @property  @? entityGenerator

  // class methods
  +[SBWorkspaceEntity entity]

  // instance methods
  -[SBWorkspaceEntity clearActivationSettings]
  -[SBWorkspaceEntity isPreviousWorkspaceEntity]
  -[SBWorkspaceEntity preferredInterfaceOrientationOnDisplayWithIdentity:]
  -[SBWorkspaceEntity isEmptyWorkspaceEntity]
  -[SBWorkspaceEntity _setMainDisplayPreferredInterfaceOrientation:]
  -[SBWorkspaceEntity setObject:forActivationSetting:]
  -[SBWorkspaceEntity uniqueIdentifier]
  -[SBWorkspaceEntity setFlag:forActivationSetting:]
  -[SBWorkspaceEntity appClipPlaceholderEntity]
  -[SBWorkspaceEntity activationSettings]
  -[SBWorkspaceEntity copyActivationSettings]
  -[SBWorkspaceEntity isAppClipPlaceholderEntity]
  -[SBWorkspaceEntity layoutRole]
  -[SBWorkspaceEntity hasLayoutAttributes:]
  -[SBWorkspaceEntity applyDeactivationSettings:]
  -[SBWorkspaceEntity supportsPresentationAtAnySize]
  -[SBWorkspaceEntity setFlag:forDeactivationSetting:]
  -[SBWorkspaceEntity isApplicationSceneEntity]
  -[SBWorkspaceEntity isDeviceApplicationSceneEntity]
  -[SBWorkspaceEntity deactivationSettings]
  -[SBWorkspaceEntity .cxx_destruct]
  -[SBWorkspaceEntity entityGenerator]
  -[SBWorkspaceEntity initWithIdentifier:displayChangeSettings:]
  -[SBWorkspaceEntity wantsExclusiveForeground]
  -[SBWorkspaceEntity supportsLayoutRole:]
  -[SBWorkspaceEntity viewControllerClass]
  -[SBWorkspaceEntity copyDeactivationSettings]
  -[SBWorkspaceEntity _supportsLayoutRole:]
  -[SBWorkspaceEntity succinctDescriptionBuilder]
  -[SBWorkspaceEntity applicationSceneEntity]
  -[SBWorkspaceEntity supportedLayoutRoles]
  -[SBWorkspaceEntity setPreferredInterfaceOrientation:onDisplayWithIdentity:]
  -[SBWorkspaceEntity _generator]
  -[SBWorkspaceEntity deviceApplicationSceneEntity]
  -[SBWorkspaceEntity objectForActivationSetting:]
  -[SBWorkspaceEntity descriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceEntity init]
  -[SBWorkspaceEntity boolForActivationSetting:]
  -[SBWorkspaceEntity flagForDeactivationSetting:]
  -[SBWorkspaceEntity clearDeactivationSettings]
  -[SBWorkspaceEntity setLayoutRole:]
  -[SBWorkspaceEntity descriptionWithMultilinePrefix:]
  -[SBWorkspaceEntity boolForDeactivationSetting:]
  -[SBWorkspaceEntity _mainDisplayPreferredInterfaceOrientation]
  -[SBWorkspaceEntity flagForActivationSetting:]
  -[SBWorkspaceEntity isAnalogousToEntity:]
  -[SBWorkspaceEntity isHomeScreenEntity]
  -[SBWorkspaceEntity succinctDescription]
  -[SBWorkspaceEntity applyActivationSettings:]
  -[SBWorkspaceEntity setObject:forDeactivationSetting:]
  -[SBWorkspaceEntity objectForDeactivationSetting:]
  -[SBWorkspaceEntity layoutAttributes]
  -[SBWorkspaceEntity copyWithZone:]


SBPreviousWorkspaceEntity : SBWorkspaceEntity
 @property  long long previousLayoutRole

  // class methods
  +[SBPreviousWorkspaceEntity entityWithPreviousLayoutRole:]

  // instance methods
  -[SBPreviousWorkspaceEntity isPreviousWorkspaceEntity]
  -[SBPreviousWorkspaceEntity previousLayoutRole]
  -[SBPreviousWorkspaceEntity initWithIdentifier:displayChangeSettings:]
  -[SBPreviousWorkspaceEntity succinctDescriptionBuilder]
  -[SBPreviousWorkspaceEntity initWithPreviousLayoutRole:]


SBEmptyWorkspaceEntity : SBWorkspaceEntity
  // instance methods
  -[SBEmptyWorkspaceEntity isEmptyWorkspaceEntity]
  -[SBEmptyWorkspaceEntity isAnalogousToEntity:]


SBHomeScreenEntity : SBWorkspaceEntity
  // instance methods
  -[SBHomeScreenEntity _setMainDisplayPreferredInterfaceOrientation:]
  -[SBHomeScreenEntity layoutRole]
  -[SBHomeScreenEntity init]
  -[SBHomeScreenEntity _mainDisplayPreferredInterfaceOrientation]
  -[SBHomeScreenEntity isHomeScreenEntity]


SBPocketStateMonitor : NSObject <CMPocketStateDelegate>
 @property  long long pocketState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPocketStateMonitor sharedInstance]

  // instance methods
  -[SBPocketStateMonitor .cxx_destruct]
  -[SBPocketStateMonitor init]
  -[SBPocketStateMonitor pocketStateManager:didUpdateState:]
  -[SBPocketStateMonitor addObserver:]
  -[SBPocketStateMonitor pocketState]
  -[SBPocketStateMonitor dealloc]
  -[SBPocketStateMonitor removeObserver:]
  -[SBPocketStateMonitor initWithCMPocketStateManager:calloutQueue:]


SBStatusBarTapManager : NSObject
  // instance methods
  -[SBStatusBarTapManager .cxx_destruct]
  -[SBStatusBarTapManager _workspace]
  -[SBStatusBarTapManager _isUILocked]
  -[SBStatusBarTapManager handleTapForStyleOverrides:]
  -[SBStatusBarTapManager canHandleTapForStatusBarStyleOverrides:]
  -[SBStatusBarTapManager _handlerForStyleOverrides:]
  -[SBStatusBarTapManager _addRecentlyTappedApplicationDestinations:forStyleOverrides:]
  -[SBStatusBarTapManager _performAfterAttemptingUnlockForAppWithBundleIdentifier:completion:]
  -[SBStatusBarTapManager _handlerForStyleOverrides:orOutApplications:]
  -[SBStatusBarTapManager _allApplicationDestinationsForApplications:]
  -[SBStatusBarTapManager _foregroundApplicationDestinationsForApplications:]
  -[SBStatusBarTapManager _appDestinationForNextSceneToVisitForApps:styleOverrides:]
  -[SBStatusBarTapManager _recentlyTappedApplicationDestinationsForStyleOverrides:]
  -[SBStatusBarTapManager _resetRecentlyTappedSceneIdentifiersForStyleOverrides:]
  -[SBStatusBarTapManager _scheduleResetRecentlyTappedSceneIdentifiersForStyleOverrides:]


_SBStatusBarTapHandler : NSObject
  // instance methods
  -[_SBStatusBarTapHandler .cxx_destruct]


_SBStatusBarTapApplicationDestination : NSObject <NSCopying>
 @property  NSString *bundleIdentifier
 @property  NSString *sceneIdentifier

  // instance methods
  -[_SBStatusBarTapApplicationDestination application]
  -[_SBStatusBarTapApplicationDestination bundleIdentifier]
  -[_SBStatusBarTapApplicationDestination sceneIdentifier]
  -[_SBStatusBarTapApplicationDestination .cxx_destruct]
  -[_SBStatusBarTapApplicationDestination isEqual:]
  -[_SBStatusBarTapApplicationDestination copyWithZone:]
  -[_SBStatusBarTapApplicationDestination initWithApplication:sceneIdentifier:]


SBSlideOverAppsInFullScreenSwitcherSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBSlideOverAppsInFullScreenSwitcherSwitcherModifier _handleEvent:]
  -[SBSlideOverAppsInFullScreenSwitcherSwitcherModifier adjustedAppLayoutsForAppLayouts:]


SBApplicationLaunchNotifyAirplaneModeAlertItem : SBApplicationLaunchNotifyAlertItem
  // instance methods
  -[SBApplicationLaunchNotifyAirplaneModeAlertItem initWithApplication:]
  -[SBApplicationLaunchNotifyAirplaneModeAlertItem configure:requirePasscodeForActions:]


SBStateDumpService : NSObject <SBSystemServiceServerStateDumpDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBStateDumpService .cxx_destruct]
  -[SBStateDumpService init]
  -[SBStateDumpService _authenticateClient:]
  -[SBStateDumpService systemServiceServer:client:requestStateDump:withCompletion:]
  -[SBStateDumpService systemServiceServer:client:enableRemoteStateDumpWithTimeout:completion:]
  -[SBStateDumpService systemServiceServer:client:disableRemoteStateDumpWithCompletion:]


SBHomeGestureSettings : PTSettings
 @property  BOOL homeGestureEnabled
 @property  double hysteresis
 @property  BOOL recognizeAlongEdge
 @property  BOOL useZStackResolverResults
 @property  double minimumYDistanceForHomeOrAppSwitcher
 @property  double minimumYDistanceToConsiderAccelerationDip
 @property  double minimumXDistanceForFirstArcSwipe
 @property  double minimumXDistanceToTriggerArcByDistancePortrait
 @property  double minimumXDistanceToTriggerArcByDistanceLandscape
 @property  double maximumYDistanceToTriggerArcByDistance
 @property  double maximumYDistanceToTriggerArcByFlick
 @property  double velocityYThresholdForUnconditionalHome
 @property  double minimumYVelocityForHome
 @property  double velocityXThresholdForUnconditionalArcSwipe
 @property  double minimumYVelocityForArcSwipe
 @property  double normalizedDistanceYThresholdForUnconditionalHome
 @property  double normalizedDistanceYThresholdRangeForUnconditionalHome
 @property  double normalizedDistanceYThresholdForUnconditionalHomeInSlideOver
 @property  double normalizedDistanceYThresholdRangeForUnconditionalHomeInSlideOver
 @property  double pauseVelocityThresholdForAppSwitcher
 @property  double pauseVelocityThresholdForDefiniteAppSwitcher
 @property  double maximumAdaptivePauseVelocityThresholdForAppSwitcher
 @property  BOOL snapToMaxVelocityThresholdAfterAccelerationDip
 @property  double maximumAdaptiveVelocityThresholdForDock
 @property  double appSwitcherVelocityThresholdIncreasingRateFraction
 @property  double dockVelocityThresholdIncreasingRateFraction
 @property  double adaptiveThresholdsDecreasingRateFraction
 @property  double velocitySlopeThresholdForBottomSwipeUpArc
 @property  double velocitySlopeThresholdForScrunchArc
 @property  double velocitySlopeThresholdForCurrentLayout
 @property  double edgeDistanceToCorrectGestureFinalDestination
 @property  double edgeAngleWindow
 @property  double cardFlyInMaximumVelocityThreshold
 @property  double cardFlyInDelayAfterEnteringAppSwitcher
 @property  double maximumDistanceYThresholdToPresentDock
 @property  double homeGestureCenterZoomDownCenterYOffsetFactor
 @property  double verticalRubberbandStart
 @property  double verticalRubberbandEnd
 @property  double verticalRubberbandDistance
 @property  double verticalRubberbandExponent
 @property  double horizontalRubberbandStart
 @property  double horizontalRubberbandEnd
 @property  double horizontalRubberbandDistance
 @property  double horizontalRubberbandExponent
 @property  BOOL injectGestureVelocityForZoomDown
 @property  BOOL onlyInjectVelocityForShortFlicks
 @property  double positionVelocityXPercentOfGestureVelocityX
 @property  double positionVelocityYPercentOfGestureVelocityY
 @property  double scaleVelocityPercentOfGestureVelocityYDividedByViewHeight
 @property  double maximumScaleVelocity
 @property  double secondsToAllowMultipleEdges
 @property  BOOL preventMultipleEdgesAfterAppInteraction
 @property  double secondsToResetSwitcherListAfterTransition
 @property  BOOL resetSwitcherListAfterAppInteraction
 @property  double travelDistanceForTranslatingScreenHeight
 @property  double minimumDistanceThresholdToScaleMultiplier
 @property  SBHomeGestureExclusionTrapezoidSettings *exclusionTrapezoidSettings

  // class methods
  +[SBHomeGestureSettings settingsControllerModule]

  // instance methods
  -[SBHomeGestureSettings hysteresis]
  -[SBHomeGestureSettings isHomeGestureEnabled]
  -[SBHomeGestureSettings cardFlyInDelayAfterEnteringAppSwitcher]
  -[SBHomeGestureSettings minimumDistanceThresholdToScaleMultiplier]
  -[SBHomeGestureSettings horizontalRubberbandDistance]
  -[SBHomeGestureSettings recognizeAlongEdge]
  -[SBHomeGestureSettings setMaximumYDistanceToTriggerArcByDistance:]
  -[SBHomeGestureSettings minimumYDistanceToConsiderAccelerationDip]
  -[SBHomeGestureSettings velocityXThresholdForUnconditionalArcSwipe]
  -[SBHomeGestureSettings setPreventMultipleEdgesAfterAppInteraction:]
  -[SBHomeGestureSettings verticalRubberbandEnd]
  -[SBHomeGestureSettings setHysteresis:]
  -[SBHomeGestureSettings setTravelDistanceForTranslatingScreenHeight:]
  -[SBHomeGestureSettings setSecondsToAllowMultipleEdges:]
  -[SBHomeGestureSettings setEdgeDistanceToCorrectGestureFinalDestination:]
  -[SBHomeGestureSettings velocitySlopeThresholdForScrunchArc]
  -[SBHomeGestureSettings setMinimumXDistanceToTriggerArcByDistanceLandscape:]
  -[SBHomeGestureSettings maximumAdaptiveVelocityThresholdForDock]
  -[SBHomeGestureSettings normalizedDistanceYThresholdRangeForUnconditionalHome]
  -[SBHomeGestureSettings pauseVelocityThresholdForAppSwitcher]
  -[SBHomeGestureSettings appSwitcherVelocityThresholdIncreasingRateFraction]
  -[SBHomeGestureSettings setMinimumYDistanceToConsiderAccelerationDip:]
  -[SBHomeGestureSettings setOnlyInjectVelocityForShortFlicks:]
  -[SBHomeGestureSettings secondsToAllowMultipleEdges]
  -[SBHomeGestureSettings horizontalRubberbandEnd]
  -[SBHomeGestureSettings setPositionVelocityXPercentOfGestureVelocityX:]
  -[SBHomeGestureSettings setInjectGestureVelocityForZoomDown:]
  -[SBHomeGestureSettings edgeAngleWindow]
  -[SBHomeGestureSettings .cxx_destruct]
  -[SBHomeGestureSettings setNormalizedDistanceYThresholdForUnconditionalHome:]
  -[SBHomeGestureSettings normalizedDistanceYThresholdForUnconditionalHomeInSlideOver]
  -[SBHomeGestureSettings setDefaultValues]
  -[SBHomeGestureSettings setHorizontalRubberbandStart:]
  -[SBHomeGestureSettings maximumDistanceYThresholdToPresentDock]
  -[SBHomeGestureSettings setEdgeAngleWindow:]
  -[SBHomeGestureSettings setMaximumScaleVelocity:]
  -[SBHomeGestureSettings minimumXDistanceToTriggerArcByDistancePortrait]
  -[SBHomeGestureSettings setVelocityXThresholdForUnconditionalArcSwipe:]
  -[SBHomeGestureSettings setCardFlyInDelayAfterEnteringAppSwitcher:]
  -[SBHomeGestureSettings cardFlyInMaximumVelocityThreshold]
  -[SBHomeGestureSettings minimumXDistanceToTriggerArcByDistanceLandscape]
  -[SBHomeGestureSettings secondsToResetSwitcherListAfterTransition]
  -[SBHomeGestureSettings verticalRubberbandDistance]
  -[SBHomeGestureSettings setVerticalRubberbandExponent:]
  -[SBHomeGestureSettings setAdaptiveThresholdsDecreasingRateFraction:]
  -[SBHomeGestureSettings homeGestureCenterZoomDownCenterYOffsetFactor]
  -[SBHomeGestureSettings normalizedDistanceYThresholdForUnconditionalHome]
  -[SBHomeGestureSettings velocitySlopeThresholdForCurrentLayout]
  -[SBHomeGestureSettings setNormalizedDistanceYThresholdRangeForUnconditionalHomeInSlideOver:]
  -[SBHomeGestureSettings preventMultipleEdgesAfterAppInteraction]
  -[SBHomeGestureSettings dockVelocityThresholdIncreasingRateFraction]
  -[SBHomeGestureSettings setSecondsToResetSwitcherListAfterTransition:]
  -[SBHomeGestureSettings setMinimumYVelocityForHome:]
  -[SBHomeGestureSettings setMaximumYDistanceToTriggerArcByFlick:]
  -[SBHomeGestureSettings velocityYThresholdForUnconditionalHome]
  -[SBHomeGestureSettings positionVelocityYPercentOfGestureVelocityY]
  -[SBHomeGestureSettings setLatchDefaults]
  -[SBHomeGestureSettings normalizedDistanceYThresholdRangeForUnconditionalHomeInSlideOver]
  -[SBHomeGestureSettings setHomeGestureTuningDefaults]
  -[SBHomeGestureSettings scaleVelocityPercentOfGestureVelocityYDividedByViewHeight]
  -[SBHomeGestureSettings setResetSwitcherListAfterAppInteraction:]
  -[SBHomeGestureSettings setNormalizedDistanceYThresholdRangeForUnconditionalHome:]
  -[SBHomeGestureSettings setVelocityYThresholdForUnconditionalHome:]
  -[SBHomeGestureSettings setExclusionTrapezoidSettings:]
  -[SBHomeGestureSettings horizontalRubberbandStart]
  -[SBHomeGestureSettings setMaximumAdaptivePauseVelocityThresholdForAppSwitcher:]
  -[SBHomeGestureSettings verticalRubberbandExponent]
  -[SBHomeGestureSettings pauseVelocityThresholdForDefiniteAppSwitcher]
  -[SBHomeGestureSettings exclusionTrapezoidSettings]
  -[SBHomeGestureSettings setMinimumYDistanceForHomeOrAppSwitcher:]
  -[SBHomeGestureSettings injectGestureVelocityForZoomDown]
  -[SBHomeGestureSettings onlyInjectVelocityForShortFlicks]
  -[SBHomeGestureSettings setMaximumAdaptiveVelocityThresholdForDock:]
  -[SBHomeGestureSettings setHorizontalRubberbandEnd:]
  -[SBHomeGestureSettings setNormalizedDistanceYThresholdForUnconditionalHomeInSlideOver:]
  -[SBHomeGestureSettings setVelocitySlopeThresholdForCurrentLayout:]
  -[SBHomeGestureSettings setCardFlyInMaximumVelocityThreshold:]
  -[SBHomeGestureSettings setHomeGestureEnabled:]
  -[SBHomeGestureSettings maximumAdaptivePauseVelocityThresholdForAppSwitcher]
  -[SBHomeGestureSettings setHomeGestureCenterZoomDownCenterYOffsetFactor:]
  -[SBHomeGestureSettings useZStackResolverResults]
  -[SBHomeGestureSettings setHorizontalRubberbandExponent:]
  -[SBHomeGestureSettings setMaximumDistanceYThresholdToPresentDock:]
  -[SBHomeGestureSettings edgeDistanceToCorrectGestureFinalDestination]
  -[SBHomeGestureSettings setVerticalRubberbandDistance:]
  -[SBHomeGestureSettings resetSwitcherListAfterAppInteraction]
  -[SBHomeGestureSettings setRecognizeAlongEdge:]
  -[SBHomeGestureSettings minimumYDistanceForHomeOrAppSwitcher]
  -[SBHomeGestureSettings adaptiveThresholdsDecreasingRateFraction]
  -[SBHomeGestureSettings setUseZStackResolverResults:]
  -[SBHomeGestureSettings setScaleVelocityPercentOfGestureVelocityYDividedByViewHeight:]
  -[SBHomeGestureSettings horizontalRubberbandExponent]
  -[SBHomeGestureSettings setMinimumDistanceThresholdToScaleMultiplier:]
  -[SBHomeGestureSettings setVerticalRubberbandEnd:]
  -[SBHomeGestureSettings setPauseVelocityThresholdForDefiniteAppSwitcher:]
  -[SBHomeGestureSettings verticalRubberbandStart]
  -[SBHomeGestureSettings setVelocitySlopeThresholdForScrunchArc:]
  -[SBHomeGestureSettings setPositionVelocityYPercentOfGestureVelocityY:]
  -[SBHomeGestureSettings snapToMaxVelocityThresholdAfterAccelerationDip]
  -[SBHomeGestureSettings minimumYVelocityForArcSwipe]
  -[SBHomeGestureSettings setAppSwitcherVelocityThresholdIncreasingRateFraction:]
  -[SBHomeGestureSettings setPauseVelocityThresholdForAppSwitcher:]
  -[SBHomeGestureSettings setDockVelocityThresholdIncreasingRateFraction:]
  -[SBHomeGestureSettings setSnapToMaxVelocityThresholdAfterAccelerationDip:]
  -[SBHomeGestureSettings setMinimumXDistanceToTriggerArcByDistancePortrait:]
  -[SBHomeGestureSettings setHorizontalRubberbandDistance:]
  -[SBHomeGestureSettings minimumYVelocityForHome]
  -[SBHomeGestureSettings maximumYDistanceToTriggerArcByDistance]
  -[SBHomeGestureSettings maximumScaleVelocity]
  -[SBHomeGestureSettings setMinimumXDistanceForFirstArcSwipe:]
  -[SBHomeGestureSettings maximumYDistanceToTriggerArcByFlick]
  -[SBHomeGestureSettings velocitySlopeThresholdForBottomSwipeUpArc]
  -[SBHomeGestureSettings positionVelocityXPercentOfGestureVelocityX]
  -[SBHomeGestureSettings minimumXDistanceForFirstArcSwipe]
  -[SBHomeGestureSettings setMinimumYVelocityForArcSwipe:]
  -[SBHomeGestureSettings setVelocitySlopeThresholdForBottomSwipeUpArc:]
  -[SBHomeGestureSettings setVerticalRubberbandStart:]
  -[SBHomeGestureSettings travelDistanceForTranslatingScreenHeight]


SBAppDragAndDropGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBAppDragAndDropGestureSwitcherModifier backgroundOpacityForIndex:]
  -[SBAppDragAndDropGestureSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBAppDragAndDropGestureSwitcherModifier homeScreenDimmingAlpha]
  -[SBAppDragAndDropGestureSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[SBAppDragAndDropGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBAppDragAndDropGestureSwitcherModifier resizeProgressNotificationsForLayoutRole:inAppLayout:]
  -[SBAppDragAndDropGestureSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBAppDragAndDropGestureSwitcherModifier scaleForIndex:]
  -[SBAppDragAndDropGestureSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBAppDragAndDropGestureSwitcherModifier handleTransitionEvent:]
  -[SBAppDragAndDropGestureSwitcherModifier frameForIndex:]
  -[SBAppDragAndDropGestureSwitcherModifier .cxx_destruct]
  -[SBAppDragAndDropGestureSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBAppDragAndDropGestureSwitcherModifier cornerRadiiForIndex:]
  -[SBAppDragAndDropGestureSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBAppDragAndDropGestureSwitcherModifier switcherHitTestsAsOpaque]
  -[SBAppDragAndDropGestureSwitcherModifier handleSceneReadyEvent:]
  -[SBAppDragAndDropGestureSwitcherModifier completesWhenChildrenComplete]
  -[SBAppDragAndDropGestureSwitcherModifier handleGestureEvent:]
  -[SBAppDragAndDropGestureSwitcherModifier handleResizeProgressEvent:]
  -[SBAppDragAndDropGestureSwitcherModifier _recomputeBlurStateWithCompletion:]
  -[SBAppDragAndDropGestureSwitcherModifier handleBlurProgressEvent:]
  -[SBAppDragAndDropGestureSwitcherModifier _showResizeUI]
  -[SBAppDragAndDropGestureSwitcherModifier initWithGestureID:floatingSwitcherVisible:fullScreenAppLayout:]
  -[SBAppDragAndDropGestureSwitcherModifier _shouldPushInFullScreenContentForEvent:]
  -[SBAppDragAndDropGestureSwitcherModifier _isDraggingLiveWindow]


SBAppStatusBarAssertionManager : NSObject <BSDescriptionProviding, UIStatusBarManager>
 @property  {UIEdgeInsets=dddd} statusBarEdgeInsets
 @property  unsigned long topmostActiveLayoutLayer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAppStatusBarAssertionManager sharedInstance]

  // instance methods
  -[SBAppStatusBarAssertionManager _updateWindowLevel]
  -[SBAppStatusBarAssertionManager removeActiveLayoutLayer:]
  -[SBAppStatusBarAssertionManager currentEffectiveStatusBarStyleRequest]
  -[SBAppStatusBarAssertionManager topmostActiveLayoutLayer]
  -[SBAppStatusBarAssertionManager statusBarOrientationShouldFollowWindow:]
  -[SBAppStatusBarAssertionManager isStatusBarUserInteractionEnabled]
  -[SBAppStatusBarAssertionManager orientationWindowForLayoutLayer:]
  -[SBAppStatusBarAssertionManager statusBar:effectiveStyleOverridesForRequestedStyle:overrides:]
  -[SBAppStatusBarAssertionManager _descriptionForPropertyWithAssertions:]
  -[SBAppStatusBarAssertionManager statusBarEdgeInsets]
  -[SBAppStatusBarAssertionManager _evaluateSettingsWithStyleAnimations:]
  -[SBAppStatusBarAssertionManager .cxx_destruct]
  -[SBAppStatusBarAssertionManager setDefaultWindowLevel:]
  -[SBAppStatusBarAssertionManager _removeDisableAppStatusBarAlphaChangesAssertion:]
  -[SBAppStatusBarAssertionManager setOrientationWindow:forStatusBarLayoutLayer:]
  -[SBAppStatusBarAssertionManager _removeDisableAppStatusBarUserInteractionChangesAssertion:]
  -[SBAppStatusBarAssertionManager removeWindowLevelOverrideReason:]
  -[SBAppStatusBarAssertionManager _cleanUpAllStatusBarSettingsAssertions]
  -[SBAppStatusBarAssertionManager succinctDescriptionBuilder]
  -[SBAppStatusBarAssertionManager _removeStatusBarSettingsAssertion:withAnimationParameters:]
  -[SBAppStatusBarAssertionManager _removeStatusBarSettingsAssertion:]
  -[SBAppStatusBarAssertionManager descriptionBuilderWithMultilinePrefix:]
  -[SBAppStatusBarAssertionManager init]
  -[SBAppStatusBarAssertionManager effectiveStatusBarStyleRequestForLevel:]
  -[SBAppStatusBarAssertionManager _modifiedStatusBarSettingsAssertion:]
  -[SBAppStatusBarAssertionManager _resolveEffectiveStatusBarStyleForSettings:]
  -[SBAppStatusBarAssertionManager descriptionWithMultilinePrefix:]
  -[SBAppStatusBarAssertionManager setStatusBarUserInteractionEnabled:]
  -[SBAppStatusBarAssertionManager succinctDescription]
  -[SBAppStatusBarAssertionManager addActiveLayoutLayer:]
  -[SBAppStatusBarAssertionManager isStatusBarHidden]
  -[SBAppStatusBarAssertionManager setStatusBarEdgeInsets:forLayoutLayer:]
  -[SBAppStatusBarAssertionManager currentStatusBarSettings]
  -[SBAppStatusBarAssertionManager addObserver:]
  -[SBAppStatusBarAssertionManager statusBarSettingsForLevel:]
  -[SBAppStatusBarAssertionManager _enumerateAssertionsToLevel:withBlock:]
  -[SBAppStatusBarAssertionManager _addStatusBarSettingsAssertion:withAnimationParameters:]
  -[SBAppStatusBarAssertionManager statusBar:shouldSetAlpha:]
  -[SBAppStatusBarAssertionManager _updateStatusBarOrientationForTopMostActiveLayer]
  -[SBAppStatusBarAssertionManager _addDisableAppStatusBarUserInteractionChangesAssertion:]
  -[SBAppStatusBarAssertionManager effectiveStatusBarStyleRequestWithSettings:]
  -[SBAppStatusBarAssertionManager setWindowLevel:forOverrideReason:]
  -[SBAppStatusBarAssertionManager statusBar:shouldRequestStyleAttributes:animationParameters:forced:]
  -[SBAppStatusBarAssertionManager dealloc]
  -[SBAppStatusBarAssertionManager _statusBarUpdatedFromSettings:toSettings:withAnimations:]
  -[SBAppStatusBarAssertionManager _addDisableAppStatusBarAlphaChangesAssertion:]
  -[SBAppStatusBarAssertionManager _styleRequestForSettings:]
  -[SBAppStatusBarAssertionManager removeObserver:]
  -[SBAppStatusBarAssertionManager statusBar:shouldRequestStyle:animationParameters:forced:]
  -[SBAppStatusBarAssertionManager _setStatusBarValueForPropertyWithAssertions:setter:]
  -[SBAppStatusBarAssertionManager _modifiedStatusBarSettingsAssertion:withAnimationParameters:]
  -[SBAppStatusBarAssertionManager _addStatusBarSettingsAssertion:]
  -[SBAppStatusBarAssertionManager _applyEdgeInsetsToStatusBar]


SBAWDQueryableMetric : SBAWDMetric
  // instance methods
  -[SBAWDQueryableMetric .cxx_destruct]
  -[SBAWDQueryableMetric _postQueryableMetric]
  -[SBAWDQueryableMetric registerWithDataBuilder:]


SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier animationAttributesForLayoutElement:]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier scaleForIndex:]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier handleTransitionEvent:]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier .cxx_destruct]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier _layoutSettings]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier handleTimerEvent:]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier _settingsByInterpolatingBetween:and:progress:]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier _scaleSettings]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier initWithAppLayout:gestureEdge:liftOffVelocity:]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier _positionSettings]
  -[SBGestureInitiatedIconZoomAnimationAttributesSwitcherModifier _normalizedHomeScreenIconZoomPercentBetweenTopAndBottom]


SBApplicationSceneViewController : SBSceneViewController <SBApplicationSceneViewControlling>
 @property  SBApplicationSceneView *sceneView
 @property  BOOL _applicationStatusBarHidden
 @property  SBAppStatusBarSettings *overrideStatusBarSettings
 @property  SBApplicationSceneHandle *sceneHandle
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationSceneViewController overrideStatusBarStyle]
  -[SBApplicationSceneViewController _applicationStatusBarAlpha]
  -[SBApplicationSceneViewController _isApplicationStatusBarHidden]
  -[SBApplicationSceneViewController initWithSceneHandle:]
  -[SBApplicationSceneViewController setApplicationSceneStatusBarDelegate:]
  -[SBApplicationSceneViewController statusBarAlpha]
  -[SBApplicationSceneViewController _overrideStatusBarSettings]
  -[SBApplicationSceneViewController applicationSceneStatusBarDelegate]
  -[SBApplicationSceneViewController _setOverrideStatusBarSettings:]
  -[SBApplicationSceneViewController .cxx_destruct]


SBAssistantRootViewController : SBFTouchPassThroughViewController <SBFluidGestureDismissable>
 @property  SBFluidDismissalState *fluidDismissalState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView *clippingView
 @property  UIView *contentView
 @property  SiriPresentationSpringBoardMainScreenViewController *assistantController
 @property  BOOL ownsHomeGesture
 @property  BOOL showsHomeAffordance

  // instance methods
  -[SBAssistantRootViewController willRotateToInterfaceOrientation:duration:]
  -[SBAssistantRootViewController ownsHomeGesture]
  -[SBAssistantRootViewController _edgeInsetsForChildViewController:insetsAreAbsolute:]
  -[SBAssistantRootViewController initWithScreen:]
  -[SBAssistantRootViewController wantsFullScreenLayout]
  -[SBAssistantRootViewController viewWillLayoutSubviews]
  -[SBAssistantRootViewController .cxx_destruct]
  -[SBAssistantRootViewController setFluidDismissalState:]
  -[SBAssistantRootViewController contentView]
  -[SBAssistantRootViewController setAssistantController:]
  -[SBAssistantRootViewController setNeedsUpdateOfScreenEdgesDeferringSystemGestures]
  -[SBAssistantRootViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBAssistantRootViewController shouldAutorotate]
  -[SBAssistantRootViewController setNeedsUpdateOfHomeIndicatorAutoHidden]
  -[SBAssistantRootViewController shouldAutomaticallyForwardRotationMethods]
  -[SBAssistantRootViewController loadView]
  -[SBAssistantRootViewController assistantController]
  -[SBAssistantRootViewController childViewControllerForScreenEdgesDeferringSystemGestures]
  -[SBAssistantRootViewController supportedInterfaceOrientations]
  -[SBAssistantRootViewController setOwnsHomeGesture:]
  -[SBAssistantRootViewController childViewControllerForHomeIndicatorAutoHidden]
  -[SBAssistantRootViewController clippingView]
  -[SBAssistantRootViewController _canShowWhileLocked]
  -[SBAssistantRootViewController _keyboardWillShowNotification:]
  -[SBAssistantRootViewController hasContentAtPoint:completion:]
  -[SBAssistantRootViewController _keyboardWillHideNotification:]
  -[SBAssistantRootViewController fluidDismissalState]
  -[SBAssistantRootViewController setHomeGrabberPointerClickDelegate:]
  -[SBAssistantRootViewController setShowsHomeAffordance:]
  -[SBAssistantRootViewController _updateHomeAffordance]
  -[SBAssistantRootViewController _updateKeyboardForHomeGesture]
  -[SBAssistantRootViewController showsHomeAffordance]


SBWebClipService : NSObject <BSServiceConnectionListenerDelegate, SBSWebClipServiceClientToServerInterface>
 @property  double pendingLaunchTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWebClipService bestWebClipForTargetContentIdentifier:fromWebClips:]

  // instance methods
  -[SBWebClipService _applicationsDidChange:]
  -[SBWebClipService listener:didReceiveConnection:withContext:]
  -[SBWebClipService .cxx_destruct]
  -[SBWebClipService launchWebClipWithIdentifier:origin:]
  -[SBWebClipService updateWebClipPropertiesWithIdentifier:]
  -[SBWebClipService _queue_removeConnection:]
  -[SBWebClipService _queue_addConnection:]
  -[SBWebClipService initWithWorkspace:sceneManager:placeholderController:applicationController:lockScreenManager:]
  -[SBWebClipService prepareToLaunchWebClipWithIdentifier:handler:]
  -[SBWebClipService buildLaunchActionsForAppClipWithWebClipIdentifier:completion:]
  -[SBWebClipService _clearPendingLaunch]
  -[SBWebClipService _beginWaitingForBundleIdentifier:webClipIdentifier:launchOrigin:]
  -[SBWebClipService _placeholdersDidChange:]
  -[SBWebClipService _generateUserActivityDataFromUserActivity:completion:]
  -[SBWebClipService initForTestingWithPlaceholderController:applicationController:]
  -[SBWebClipService pendingLaunchTimeout]
  -[SBWebClipService setPendingLaunchTimeout:]


SBWindowDragInteraction : UIDragInteraction
 @property  UIGestureRecognizer *gestureRecognizer
 @property  <SBAppPlatterDragSourceViewProviding> *sourceViewProvider
 @property  NSString *sceneIdentifier
 @property  NSString *bundleIdentifier

  // instance methods
  -[SBWindowDragInteraction _locationInView:]
  -[SBWindowDragInteraction setSceneIdentifier:]
  -[SBWindowDragInteraction gestureRecognizer]
  -[SBWindowDragInteraction bundleIdentifier]
  -[SBWindowDragInteraction sceneIdentifier]
  -[SBWindowDragInteraction .cxx_destruct]
  -[SBWindowDragInteraction setSourceViewProvider:]
  -[SBWindowDragInteraction setBundleIdentifier:]
  -[SBWindowDragInteraction sourceViewProvider]
  -[SBWindowDragInteraction initWithDelegate:gestureRecognizer:]


SBRemoveWidgetAlertItem : SBAlertItem
 @property  <SBLeafIconDataSource> *widget
 @property  SBWidgetIcon *icon
 @property  NSString *iconLocation
 @property  SBHIconManager *iconManager

  // instance methods
  -[SBRemoveWidgetAlertItem setIconManager:]
  -[SBRemoveWidgetAlertItem setWidget:]
  -[SBRemoveWidgetAlertItem icon]
  -[SBRemoveWidgetAlertItem setIconLocation:]
  -[SBRemoveWidgetAlertItem .cxx_destruct]
  -[SBRemoveWidgetAlertItem widget]
  -[SBRemoveWidgetAlertItem iconManager]
  -[SBRemoveWidgetAlertItem iconLocation]
  -[SBRemoveWidgetAlertItem setIcon:]
  -[SBRemoveWidgetAlertItem shouldShowInLockScreen]
  -[SBRemoveWidgetAlertItem dismissOnLock]
  -[SBRemoveWidgetAlertItem configure:requirePasscodeForActions:]
  -[SBRemoveWidgetAlertItem forcesModalAlertAppearance]
  -[SBRemoveWidgetAlertItem didActivate]
  -[SBRemoveWidgetAlertItem initWithWidgetIcon:location:iconManager:]
  -[SBRemoveWidgetAlertItem initWithWidget:inIcon:location:iconManager:]


SBRebootRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBRebootRecipe load]

  // instance methods
  -[SBRebootRecipe title]
  -[SBRebootRecipe handleVolumeIncrease]
  -[SBRebootRecipe handleVolumeDecrease]


SBSystemAnimationSettings : PTSettings
 @property  float assistantAnimationDuration
 @property  float assistantDismissAnimationDurationOverApp
 @property  float assistantBottomEdgeDismissThreshold
 @property  float assistantBottomEdgeDismissVelocity
 @property  float spotlightNoninteractiveAnimationDuration
 @property  SBFAnimationSettings *slideoverDosidoAnimationSettings
 @property  SBEntityRemovalAnimationSettings *entityRemovalAnimationSettings
 @property  SBFWakeAnimationSettings *wakeAnimationSettings

  // class methods
  +[SBSystemAnimationSettings settingsControllerModule]

  // instance methods
  -[SBSystemAnimationSettings .cxx_destruct]
  -[SBSystemAnimationSettings setDefaultValues]
  -[SBSystemAnimationSettings entityRemovalAnimationSettings]
  -[SBSystemAnimationSettings assistantAnimationDuration]
  -[SBSystemAnimationSettings assistantDismissAnimationDurationOverApp]
  -[SBSystemAnimationSettings assistantBottomEdgeDismissThreshold]
  -[SBSystemAnimationSettings assistantBottomEdgeDismissVelocity]
  -[SBSystemAnimationSettings spotlightNoninteractiveAnimationDuration]
  -[SBSystemAnimationSettings setAssistantAnimationDuration:]
  -[SBSystemAnimationSettings setAssistantDismissAnimationDurationOverApp:]
  -[SBSystemAnimationSettings setAssistantBottomEdgeDismissThreshold:]
  -[SBSystemAnimationSettings setAssistantBottomEdgeDismissVelocity:]
  -[SBSystemAnimationSettings setSpotlightNoninteractiveAnimationDuration:]
  -[SBSystemAnimationSettings slideoverDosidoAnimationSettings]
  -[SBSystemAnimationSettings setSlideoverDosidoAnimationSettings:]
  -[SBSystemAnimationSettings setEntityRemovalAnimationSettings:]
  -[SBSystemAnimationSettings wakeAnimationSettings]
  -[SBSystemAnimationSettings setWakeAnimationSettings:]


SBDeviceApplicationRemoteTransientOverlayContainerViewController : UIViewController
  // instance methods
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController preferredStatusBarStyle]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController preferredInterfaceOrientationForPresentation]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController viewWillLayoutSubviews]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController .cxx_destruct]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController supportedInterfaceOrientations]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController initWithViewProvider:]


SBDeviceApplicationRemoteTransientOverlayPresentationContext : NSObject
 @property  SBRemoteTransientOverlayViewController *remoteViewController
 @property  SBSRemoteAlertPresentationTarget *presentationTarget

  // instance methods
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext remoteViewController]
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext .cxx_destruct]
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext setRemoteViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext presentationTarget]
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext setPresentationTarget:]


SBDeviceApplicationRemoteTransientOverlayViewProvider : SBDeviceApplicationSceneOverlayViewProvider <SBTransientOverlayViewControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider preferredStatusBarStyle]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider preferredInterfaceOrientationForPresentation]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider prefersStatusBarHidden]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsFeaturePolicyUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsSceneDeactivationUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _activateIfPossible]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsStatusBarAppearanceUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider defaultSupportedInterfaceOrientationsForTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerDidEndRotation:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider defaultPreferredInterfaceOrientationForPresentationForTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsWhitePointAdaptivityStyleUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsOrientationUpdatesDisabledUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsProximityDetectionUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _dismissRemoteOverlayVC:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider .cxx_destruct]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _deactivateIfPossible]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider isPresentingTransientOverlay:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsContentOpaqueUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _realOverlayViewController]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsGestureDismissalStyleUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider defaultShouldAutorotateForTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _handleAppSwitcherWillPresent:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider shouldFollowSceneOrientation]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _handleCoverSheetDidPresent:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider dismissRemoteTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider initWithSceneHandle:delegate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider dealloc]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider isKeyboardVisibleForSpringBoardForTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider supportedInterfaceOrientations]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider presentRemoteTransientOverlayViewController:presentationTarget:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsWindowHitTestingUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerWillBeginRotation:toInterfaceOrientation:]


SBBarSwipeAffordanceController : NSObject <SBBarSwipeAffordanceControlling>
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  SBFZStackParticipant *zStackParticipant
 @property  <SBBarSwipeAffordanceControllingDelegate> *delegate
 @property  SBBarSwipeAffordanceView *barSwipeAffordanceView
 @property  BOOL wantsToBeActiveAffordance
 @property  BOOL suppressAffordance
 @property  long long activationPolicyForParticipantsBelow
 @property  <SBHomeGrabberPointerClickDelegate> *pointerClickDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBarSwipeAffordanceController _keyboardWillHide:]
  -[SBBarSwipeAffordanceController setHomeGestureParticipant:]
  -[SBBarSwipeAffordanceController homeGestureParticipant]
  -[SBBarSwipeAffordanceController zStackParticipant:updatePreferences:]
  -[SBBarSwipeAffordanceController zStackParticipantDidChange:]
  -[SBBarSwipeAffordanceController .cxx_destruct]
  -[SBBarSwipeAffordanceController setDelegate:]
  -[SBBarSwipeAffordanceController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBBarSwipeAffordanceController homeGestureParticipantResolvedHomeAffordanceSuppressionDidChange:]
  -[SBBarSwipeAffordanceController pointerClickDelegate]
  -[SBBarSwipeAffordanceController zStackParticipant]
  -[SBBarSwipeAffordanceController setZStackParticipant:]
  -[SBBarSwipeAffordanceController setPointerClickDelegate:]
  -[SBBarSwipeAffordanceController _keyboardDidShow:]
  -[SBBarSwipeAffordanceController setActivationPolicyForParticipantsBelow:]
  -[SBBarSwipeAffordanceController delegate]
  -[SBBarSwipeAffordanceController dealloc]
  -[SBBarSwipeAffordanceController activationPolicyForParticipantsBelow]
  -[SBBarSwipeAffordanceController _updateActiveState]
  -[SBBarSwipeAffordanceController wantsToBeActiveAffordance]
  -[SBBarSwipeAffordanceController initWithHomeGestureParticipantIdentifier:zStackParticipantIdentifier:]
  -[SBBarSwipeAffordanceController setWantsToBeActiveAffordance:]
  -[SBBarSwipeAffordanceController barSwipeAffordanceView]
  -[SBBarSwipeAffordanceController suppressAffordance]
  -[SBBarSwipeAffordanceController setSuppressAffordance:]
  -[SBBarSwipeAffordanceController initWithHomeGestureParticipantIdentifier:]
  -[SBBarSwipeAffordanceController _beginTryingToBecomeActiveAffordance]
  -[SBBarSwipeAffordanceController _stopTryingToBecomeActiveAffordance]
  -[SBBarSwipeAffordanceController _setKeyboardHomeAffordanceVisible:]


SBPressSequenceMetric : SBAWDMetric
  // instance methods
  -[SBPressSequenceMetric dataClass]
  -[SBPressSequenceMetric postWithDataBuilder:]
  -[SBPressSequenceMetric metricID]
  -[SBPressSequenceMetric configureWithData:]


SBPressSequenceMetricData : SBAWDMetricData
 @property  NSString *pressName
 @property  NSArray *pressSequence
 @property  BOOL didTriggerSOS
 @property  unsigned long clickMax
 @property  NSUUID *sosTriggerUUID

  // instance methods
  -[SBPressSequenceMetricData .cxx_destruct]
  -[SBPressSequenceMetricData didTriggerSOS]
  -[SBPressSequenceMetricData setDidTriggerSOS:]
  -[SBPressSequenceMetricData pressSequence]
  -[SBPressSequenceMetricData pressName]
  -[SBPressSequenceMetricData clickMax]
  -[SBPressSequenceMetricData setClickMax:]
  -[SBPressSequenceMetricData sosTriggerUUID]
  -[SBPressSequenceMetricData setPressName:]
  -[SBPressSequenceMetricData setPressSequence:]
  -[SBPressSequenceMetricData setSosTriggerUUID:]


SBRestartManager : NSObject
 @property  <SBRestartManagerDelegate> *delegate
 @property  BSTransaction<SBStartupTransition> *startupTransition
 @property  SBRestartTransitionRequest *pendingRestartTransitionRequest
 @property  BOOL pendingExit

  // instance methods
  -[SBRestartManager _killAllAppsForPendingExitWithReason:description:expiration:completion:]
  -[SBRestartManager startupTransition]
  -[SBRestartManager _reallyRestartWithTransitionRequest:]
  -[SBRestartManager .cxx_destruct]
  -[SBRestartManager _postShutdownNotification]
  -[SBRestartManager succinctDescriptionBuilder]
  -[SBRestartManager _restartWithTransitionRequest:]
  -[SBRestartManager initializeAndRunStartupTransition:]
  -[SBRestartManager setDelegate:]
  -[SBRestartManager _persistStartupTransitionContextFromRebootContext:]
  -[SBRestartManager rebootForReason:]
  -[SBRestartManager descriptionBuilderWithMultilinePrefix:]
  -[SBRestartManager init]
  -[SBRestartManager descriptionWithMultilinePrefix:]
  -[SBRestartManager restartWithTransitionRequest:]
  -[SBRestartManager _exitIsImminent]
  -[SBRestartManager _persistStartupTransitionContextFromShutdownContext:]
  -[SBRestartManager succinctDescription]
  -[SBRestartManager _doRestartForTransition:]
  -[SBRestartManager initWithWorkspaceDataSource:initialRestartState:]
  -[SBRestartManager _addPendingExternallyControlledRestartReason:]
  -[SBRestartManager ___waitForeverForRunningBoardKill]
  -[SBRestartManager _shutdownWithOptions:byUser:description:]
  -[SBRestartManager delegate]
  -[SBRestartManager _removePendingExternallyControlledRestartReason:]
  -[SBRestartManager shutdownForReason:]
  -[SBRestartManager _isPendingExitIncludingExternallyControlledReasons:]
  -[SBRestartManager _initWithWorkspaceDataSource:initialRestartState:startupController:systemService:]
  -[SBRestartManager _persistStartupTransitionContextFromRestartRequest:]
  -[SBRestartManager pendingRestartTransitionRequest]
  -[SBRestartManager isPendingExit]
  -[SBRestartManager rebootWithContext:]
  -[SBRestartManager shutdownWithContext:]


SBHIDUILockAssertion : NSObject <BSInvalidatable>
 @property  BOOL suspendProximitySensor
 @property  BOOL suspendMultitouch
 @property  BOOL pocketTouchesExpected
 @property  BOOL disableTapToWake
 @property  long long source
 @property  SBHIDInterface *HIDInterface
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHIDUILockAssertion setPocketTouchesExpected:]
  -[SBHIDUILockAssertion setHIDInterface:]
  -[SBHIDUILockAssertion .cxx_destruct]
  -[SBHIDUILockAssertion HIDInterface]
  -[SBHIDUILockAssertion pocketTouchesExpected]
  -[SBHIDUILockAssertion succinctDescriptionBuilder]
  -[SBHIDUILockAssertion setDisableTapToWake:]
  -[SBHIDUILockAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBHIDUILockAssertion invalidateForSource:]
  -[SBHIDUILockAssertion setSuspendMultitouch:]
  -[SBHIDUILockAssertion descriptionWithMultilinePrefix:]
  -[SBHIDUILockAssertion succinctDescription]
  -[SBHIDUILockAssertion reason]
  -[SBHIDUILockAssertion setSource:]
  -[SBHIDUILockAssertion suspendProximitySensor]
  -[SBHIDUILockAssertion setReason:]
  -[SBHIDUILockAssertion invalidate]
  -[SBHIDUILockAssertion disableTapToWake]
  -[SBHIDUILockAssertion setSuspendProximitySensor:]
  -[SBHIDUILockAssertion suspendMultitouch]
  -[SBHIDUILockAssertion source]


SBCenterAppIconZoomAnimator : SBCenterIconZoomAnimator
 @property  SBReversibleLayerPropertyAnimator *appZoomAnimator
 @property  NSMutableArray *animationCompletions
 @property  SBHCenterAppZoomSettings *settings
 @property  double distantScale

  // instance methods
  -[SBCenterAppIconZoomAnimator _performAnimationToFraction:withCentralAnimationSettings:delay:alreadyAnimating:sharedCompletion:]
  -[SBCenterAppIconZoomAnimator _cleanupAnimation]
  -[SBCenterAppIconZoomAnimator animationCompletions]
  -[SBCenterAppIconZoomAnimator _appZPositionForZoomFraction:]
  -[SBCenterAppIconZoomAnimator distantScale]
  -[SBCenterAppIconZoomAnimator _translateAppForZoomFraction:]
  -[SBCenterAppIconZoomAnimator _setAnimationFraction:]
  -[SBCenterAppIconZoomAnimator .cxx_destruct]
  -[SBCenterAppIconZoomAnimator _appZoomDelay]
  -[SBCenterAppIconZoomAnimator setAnimationCompletions:]
  -[SBCenterAppIconZoomAnimator _numberOfSignificantAnimations]
  -[SBCenterAppIconZoomAnimator cameraPosition]
  -[SBCenterAppIconZoomAnimator setAppZoomAnimator:]
  -[SBCenterAppIconZoomAnimator _prepareAnimation]
  -[SBCenterAppIconZoomAnimator _delayedForRotation]
  -[SBCenterAppIconZoomAnimator _iconZoomDelay]
  -[SBCenterAppIconZoomAnimator setDistantScale:]
  -[SBCenterAppIconZoomAnimator _zoomAppForZoomFraction:]
  -[SBCenterAppIconZoomAnimator initWithFolderController:appView:]
  -[SBCenterAppIconZoomAnimator _fadeAppForZoomFraction:]
  -[SBCenterAppIconZoomAnimator appZoomAnimator]


SBSecureMainDisplaySceneManager : SBSceneManager <SBLayoutStateTransitionSceneEntityFrameProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSecureMainDisplaySceneManager _applicationSceneHandleClass]

  // instance methods
  -[SBSecureMainDisplaySceneManager _shouldTrackScenesForDeactivation]
  -[SBSecureMainDisplaySceneManager _createRootWindowScenePresentationBinder]
  -[SBSecureMainDisplaySceneManager sceneIdentityForApplication:uniqueIdentifier:]
  -[SBSecureMainDisplaySceneManager _setupLayoutStateTransitionCoordinator:]
  -[SBSecureMainDisplaySceneManager _shouldAutoHostScene:]
  -[SBSecureMainDisplaySceneManager sceneLayoutViewController]
  -[SBSecureMainDisplaySceneManager newSceneIdentityForApplication:]
  -[SBSecureMainDisplaySceneManager _sceneIdentifierForBundleIdentifier:]
  -[SBSecureMainDisplaySceneManager sceneIdentityForApplication:]
  -[SBSecureMainDisplaySceneManager sceneIdentityForApplication:targetContentIdentifier:]
  -[SBSecureMainDisplaySceneManager sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:]
  -[SBSecureMainDisplaySceneManager sceneEntityFrameForWorkspaceEntity:inLayoutState:]
  -[SBSecureMainDisplaySceneManager window]
  -[SBSecureMainDisplaySceneManager _noteDidChangeToVisibility:previouslyExisted:forScene:]


SBPressSequenceObserver : NSObject <SBPressCollectorDelegate, SBAWDMetricDelegate>
 @property  <SBPressSequenceObserverDelegate> *delegate
 @property  NSString *pressName
 @property  SBPressCollector *pressCollector
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPressSequenceObserver .cxx_destruct]
  -[SBPressSequenceObserver setDelegate:]
  -[SBPressSequenceObserver init]
  -[SBPressSequenceObserver delegate]
  -[SBPressSequenceObserver dealloc]
  -[SBPressSequenceObserver initWithPressName:]
  -[SBPressSequenceObserver pressCollector]
  -[SBPressSequenceObserver pressCollector:didCollectSequence:]
  -[SBPressSequenceObserver noteDidBeginSOSWithUUID:]
  -[SBPressSequenceObserver metricDidPost:data:]
  -[SBPressSequenceObserver pressName]
  -[SBPressSequenceObserver _notePowerDownImminent]
  -[SBPressSequenceObserver _setPressCollector:]


SBUIStartupToLoginWindowAnimationController : SBUIMainScreenAnimationController <SBLoginAppContainerViewControllerObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIStartupToLoginWindowAnimationController _cleanupAnimation]
  -[SBUIStartupToLoginWindowAnimationController animationSettings]
  -[SBUIStartupToLoginWindowAnimationController _startAnimation]
  -[SBUIStartupToLoginWindowAnimationController .cxx_destruct]
  -[SBUIStartupToLoginWindowAnimationController _setHidden:]
  -[SBUIStartupToLoginWindowAnimationController initWithTransitionContextProvider:overlay:]
  -[SBUIStartupToLoginWindowAnimationController initWithTransitionContextProvider:]
  -[SBUIStartupToLoginWindowAnimationController _getTransitionWindow]
  -[SBUIStartupToLoginWindowAnimationController _shouldDismissBanner]
  -[SBUIStartupToLoginWindowAnimationController loginAppDidFinishLaunching:]


SBDeckSwitcherForcePressGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction
  // instance methods
  -[SBDeckSwitcherForcePressGestureWorkspaceTransaction _gestureType]
  -[SBDeckSwitcherForcePressGestureWorkspaceTransaction _beginWithGesture:]


SBWaitForSceneLayoutTransitionTransaction : SBTransaction <SBLayoutStateTransitionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWaitForSceneLayoutTransitionTransaction _begin]
  -[SBWaitForSceneLayoutTransitionTransaction layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBWaitForSceneLayoutTransitionTransaction .cxx_destruct]
  -[SBWaitForSceneLayoutTransitionTransaction dealloc]
  -[SBWaitForSceneLayoutTransitionTransaction initWithSceneLayoutTransitionCoordinator:]


SBPIPContentViewLayoutContext : NSObject
 @property  double currentAspectRatio
 @property  double currentSize
 @property  BOOL sizeChanged
 @property  double minimumSizePreference
 @property  double maximumSizePreference
 @property  double minimumSizeSpanBetweenPreferredSizes
 @property  double maximumSizeSpanForPreferredSizeTuning
 @property  SBPIPDefaults *defaults
 @property  NSString *contentTypeIdentifier

  // instance methods
  -[SBPIPContentViewLayoutContext setDefaults:]
  -[SBPIPContentViewLayoutContext defaults]
  -[SBPIPContentViewLayoutContext setMaximumSizeSpanForPreferredSizeTuning:]
  -[SBPIPContentViewLayoutContext .cxx_destruct]
  -[SBPIPContentViewLayoutContext currentSize]
  -[SBPIPContentViewLayoutContext setMinimumSizeSpanBetweenPreferredSizes:]
  -[SBPIPContentViewLayoutContext setCurrentSize:]
  -[SBPIPContentViewLayoutContext maximumSizeSpanForPreferredSizeTuning]
  -[SBPIPContentViewLayoutContext minimumSizeSpanBetweenPreferredSizes]
  -[SBPIPContentViewLayoutContext currentAspectRatio]
  -[SBPIPContentViewLayoutContext updatePlatformMetrics:]
  -[SBPIPContentViewLayoutContext contentTypeIdentifier]
  -[SBPIPContentViewLayoutContext initWithPlatformMetrics:contentSize:defaults:]
  -[SBPIPContentViewLayoutContext setCurrentSize:forAspectRatio:]
  -[SBPIPContentViewLayoutContext setCurrentAspectRatio:]
  -[SBPIPContentViewLayoutContext hasSizeChanged]
  -[SBPIPContentViewLayoutContext minimumSizePreference]
  -[SBPIPContentViewLayoutContext setMinimumSizePreference:]
  -[SBPIPContentViewLayoutContext maximumSizePreference]
  -[SBPIPContentViewLayoutContext setMaximumSizePreference:]
  -[SBPIPContentViewLayoutContext setContentTypeIdentifier:]


SBPIPContentViewLayoutSettings : NSObject
  // class methods
  +[SBPIPContentViewLayoutSettings pipDefaults]

  // instance methods
  -[SBPIPContentViewLayoutSettings setMaximumSizeSpanForPreferredSizeTuning:]
  -[SBPIPContentViewLayoutSettings contentViewPadding]
  -[SBPIPContentViewLayoutSettings .cxx_destruct]
  -[SBPIPContentViewLayoutSettings setMinimumSizeSpanBetweenPreferredSizes:]
  -[SBPIPContentViewLayoutSettings defaultCornerRadius]
  -[SBPIPContentViewLayoutSettings setContentViewPosition:]
  -[SBPIPContentViewLayoutSettings setContentViewSize:]
  -[SBPIPContentViewLayoutSettings initWithPlatformMetrics:contentSize:]
  -[SBPIPContentViewLayoutSettings defaultContentViewSizeForAspectRatio:]
  -[SBPIPContentViewLayoutSettings currentContentViewPosition]
  -[SBPIPContentViewLayoutSettings contentViewPaddingWhileStashed]
  -[SBPIPContentViewLayoutSettings platformMetrics]
  -[SBPIPContentViewLayoutSettings updatePlatformMetrics:]
  -[SBPIPContentViewLayoutSettings currentContentViewSizeForAspectRatio:]
  -[SBPIPContentViewLayoutSettings minimumPreferredContentViewSizeForAspectRatio:]
  -[SBPIPContentViewLayoutSettings maximumPreferredContentViewSizeForAspectRatio:]
  -[SBPIPContentViewLayoutSettings minimumStashedTabSize]
  -[SBPIPContentViewLayoutSettings minimumPossibleContentViewSizeForAspectRatio:]
  -[SBPIPContentViewLayoutSettings maximumPossibleContentViewSizeForAspectRatio:]
  -[SBPIPContentViewLayoutSettings _contentViewSizeForAspectRatio:currentSize:]
  -[SBPIPContentViewLayoutSettings _minimumContentViewSizeForAspectRatio:minimumReferenceSize:]
  -[SBPIPContentViewLayoutSettings _maximumContentViewSizeForAspectRatio:maximumReferenceSize:]


SBGridSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBGridSwitcherModifier numberOfRows]
  -[SBGridSwitcherModifier handleTransitionEvent:]
  -[SBGridSwitcherModifier handleTapAppLayoutEvent:]
  -[SBGridSwitcherModifier .cxx_destruct]
  -[SBGridSwitcherModifier didMoveToParentModifier:]
  -[SBGridSwitcherModifier topMostLayoutElements]
  -[SBGridSwitcherModifier handleTapOutsideToDismissEvent:]
  -[SBGridSwitcherModifier handleRemovalEvent:]
  -[SBGridSwitcherModifier containerViewBounds]
  -[SBGridSwitcherModifier handleScrollEvent:]
  -[SBGridSwitcherModifier handleSwipeToKillEvent:]
  -[SBGridSwitcherModifier gridLayoutModifier]


_SBGridFloorSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[_SBGridFloorSwitcherModifier appLayoutsToResignActive]
  -[_SBGridFloorSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[_SBGridFloorSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[_SBGridFloorSwitcherModifier visibleShelves]
  -[_SBGridFloorSwitcherModifier backgroundOpacityForIndex:]
  -[_SBGridFloorSwitcherModifier isContainerStatusBarVisible]
  -[_SBGridFloorSwitcherModifier wantsDockWindowLevelAssertion]
  -[_SBGridFloorSwitcherModifier plusButtonAlpha]
  -[_SBGridFloorSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[_SBGridFloorSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[_SBGridFloorSwitcherModifier homeScreenDimmingAlpha]
  -[_SBGridFloorSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[_SBGridFloorSwitcherModifier dockWindowLevel]
  -[_SBGridFloorSwitcherModifier wantsDockBehaviorAssertion]
  -[_SBGridFloorSwitcherModifier slideOverTongueDirection]
  -[_SBGridFloorSwitcherModifier homeScreenBackdropBlurType]
  -[_SBGridFloorSwitcherModifier frameForShelf:]
  -[_SBGridFloorSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[_SBGridFloorSwitcherModifier isHomeAffordanceSupportedForAppLayout:]
  -[_SBGridFloorSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[_SBGridFloorSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[_SBGridFloorSwitcherModifier plusButtonStyle]
  -[_SBGridFloorSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[_SBGridFloorSwitcherModifier titleOpacityForIndex:]
  -[_SBGridFloorSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[_SBGridFloorSwitcherModifier shouldScrollViewBlockTouches]
  -[_SBGridFloorSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[_SBGridFloorSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[_SBGridFloorSwitcherModifier wallpaperScale]
  -[_SBGridFloorSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[_SBGridFloorSwitcherModifier wantsSlideOverTongue]
  -[_SBGridFloorSwitcherModifier rotationAngleForIndex:]
  -[_SBGridFloorSwitcherModifier slideOverTongueState]
  -[_SBGridFloorSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[_SBGridFloorSwitcherModifier homeScreenScale]
  -[_SBGridFloorSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[_SBGridFloorSwitcherModifier homeScreenAlpha]
  -[_SBGridFloorSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[_SBGridFloorSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[_SBGridFloorSwitcherModifier switcherBackdropBlurProgress]
  -[_SBGridFloorSwitcherModifier shelfBackgroundBlurOpacity]
  -[_SBGridFloorSwitcherModifier wantsSwitcherBackdropBlur]
  -[_SBGridFloorSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[_SBGridFloorSwitcherModifier transactionCompletionOptions]
  -[_SBGridFloorSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[_SBGridFloorSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[_SBGridFloorSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[_SBGridFloorSwitcherModifier shelfBackgroundBlurFrame]
  -[_SBGridFloorSwitcherModifier reopenClosedWindowsButtonScale]
  -[_SBGridFloorSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[_SBGridFloorSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[_SBGridFloorSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[_SBGridFloorSwitcherModifier wantsSwitcherDimmingView]
  -[_SBGridFloorSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[_SBGridFloorSwitcherModifier dockProgress]
  -[_SBGridFloorSwitcherModifier shadowOffsetForIndex:]
  -[_SBGridFloorSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[_SBGridFloorSwitcherModifier keyboardSuppressionMode]
  -[_SBGridFloorSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[_SBGridFloorSwitcherModifier clippingFrameForIndex:]
  -[_SBGridFloorSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[_SBGridFloorSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[_SBGridFloorSwitcherModifier lighteningAlphaForIndex:]
  -[_SBGridFloorSwitcherModifier titleAndIconOpacityForIndex:]
  -[_SBGridFloorSwitcherModifier isScrollEnabled]
  -[_SBGridFloorSwitcherModifier isHomeScreenContentRequired]
  -[_SBGridFloorSwitcherModifier dockWindowLevelPriority]
  -[_SBGridFloorSwitcherModifier containerLeafAppLayoutForShelf:]
  -[_SBGridFloorSwitcherModifier headerStyleForIndex:]
  -[_SBGridFloorSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[_SBGridFloorSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[_SBGridFloorSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[_SBGridFloorSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[_SBGridFloorSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[_SBGridFloorSwitcherModifier neighboringAppLayoutsForFocusedAppLayout:]
  -[_SBGridFloorSwitcherModifier containerStatusBarAnimationDuration]
  -[_SBGridFloorSwitcherModifier animationAttributesForLayoutElement:]
  -[_SBGridFloorSwitcherModifier isFocusEnabledForAppLayout:]
  -[_SBGridFloorSwitcherModifier switcherBackdropBlurType]
  -[_SBGridFloorSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[_SBGridFloorSwitcherModifier switcherDimmingViewBlocksTouches]
  -[_SBGridFloorSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[_SBGridFloorSwitcherModifier scaleForIndex:]
  -[_SBGridFloorSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[_SBGridFloorSwitcherModifier homeScreenBackdropBlurProgress]
  -[_SBGridFloorSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[_SBGridFloorSwitcherModifier isIndexRubberbandableForSwipeToKill:]
  -[_SBGridFloorSwitcherModifier switcherDimmingAlpha]
  -[_SBGridFloorSwitcherModifier dockUpdateMode]
  -[_SBGridFloorSwitcherModifier frameForIndex:]
  -[_SBGridFloorSwitcherModifier tintStyleForLayoutRole:inAppLayout:]
  -[_SBGridFloorSwitcherModifier wantsHomeScreenPointerInteractions]
  -[_SBGridFloorSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[_SBGridFloorSwitcherModifier blurViewIconScaleForIndex:]
  -[_SBGridFloorSwitcherModifier isWallpaperRequiredForSwitcher]
  -[_SBGridFloorSwitcherModifier visibleAppLayouts]
  -[_SBGridFloorSwitcherModifier scrollViewAttributes]
  -[_SBGridFloorSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[_SBGridFloorSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[_SBGridFloorSwitcherModifier isSwitcherWindowVisible]
  -[_SBGridFloorSwitcherModifier minimumTranslationToKillIndex:]
  -[_SBGridFloorSwitcherModifier contentPageViewScaleForAppLayout:]
  -[_SBGridFloorSwitcherModifier contentViewScale]
  -[_SBGridFloorSwitcherModifier wallpaperStyle]
  -[_SBGridFloorSwitcherModifier cornerRadiiForIndex:]
  -[_SBGridFloorSwitcherModifier appLayoutsToCacheSnapshots]
  -[_SBGridFloorSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[_SBGridFloorSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[_SBGridFloorSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[_SBGridFloorSwitcherModifier topMostLayoutElements]
  -[_SBGridFloorSwitcherModifier resetAdjustedScrollingState]
  -[_SBGridFloorSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[_SBGridFloorSwitcherModifier contentOffsetForIndex:alignment:]
  -[_SBGridFloorSwitcherModifier snapshotScaleForAppLayout:]


SBMainDisplaySceneLayoutViewController : SBSceneLayoutViewController <SBMainDisplaySceneLayoutStatusBarViewDataSource, PTSettingsKeyObserver, SBSceneHandleObserver, TFBetaLaunchHandleActivationDelegate, SBDeviceApplicationSceneStatusBarBreadcrumbProviderObserver, SBSystemPointerInteractionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <BSInvalidatable> *pushPopWallpaperRequireAssertion
 @property  SBHomeGrabberRotationView *homeGrabberRotationView
 @property  SBMainDisplayLayoutState *_transitioningFromLayoutState
 @property  SBMainDisplayLayoutState *_transitioningToLayoutState
 @property  NSArray *appViewControllers
 @property  NSArray *_transitioningAppViewControllers
 @property  UIView *_separatorView
 @property  BOOL _preventsCornerRadiusUpdate
 @property  double _separatorViewAlpha
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} _separatorViewHitTestFrame
 @property  unsigned long _nubStyle
 @property  SBHomeGrabberView *_activeHomeGrabberView
 @property  NSString *keyboardFocusSceneID
 @property  SBMainDisplayLayoutState *layoutState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainDisplaySceneLayoutViewController _separatorViewWidth]

  // instance methods
  -[SBMainDisplaySceneLayoutViewController sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBMainDisplaySceneLayoutViewController _leadingStatusBarStyleRequest]
  -[SBMainDisplaySceneLayoutViewController statusBarAvoidanceFrame]
  -[SBMainDisplaySceneLayoutViewController _isStatusBarHidden]
  -[SBMainDisplaySceneLayoutViewController _layoutElementForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutViewController _isLayoutElementViewControllerOccluded:]
  -[SBMainDisplaySceneLayoutViewController statusBarBreadcrumbProviderDidUpdateDisplayProperties:]
  -[SBMainDisplaySceneLayoutViewController _updateKeyboardHomeAffordanceAssertion]
  -[SBMainDisplaySceneLayoutViewController _overrideInterfaceOrientationMechanics]
  -[SBMainDisplaySceneLayoutViewController _updateSuppressingHomeAffordanceBounce]
  -[SBMainDisplaySceneLayoutViewController _updateRectInReferenceCoordinateSpace:withBlock:]
  -[SBMainDisplaySceneLayoutViewController _keyboardIsSuppressedForMedusaKeyboardScene]
  -[SBMainDisplaySceneLayoutViewController _shouldTakeKeyboardHomeAffordanceAssertion]
  -[SBMainDisplaySceneLayoutViewController _nubStyle]
  -[SBMainDisplaySceneLayoutViewController _shouldReverseLayoutDirection]
  -[SBMainDisplaySceneLayoutViewController _replaceSingleAppAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController statusBarOrientation]
  -[SBMainDisplaySceneLayoutViewController _medusaKeyboardSceneHandle]
  -[SBMainDisplaySceneLayoutViewController _trailingStatusBarStyleRequest]
  -[SBMainDisplaySceneLayoutViewController _shouldConsiderHomeScreenAsActive]
  -[SBMainDisplaySceneLayoutViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBMainDisplaySceneLayoutViewController _preventsCornerRadiusUpdate]
  -[SBMainDisplaySceneLayoutViewController _isCurrentlyRotating]
  -[SBMainDisplaySceneLayoutViewController _orderFrontOverlayViews]
  -[SBMainDisplaySceneLayoutViewController referenceFrameForUniqueIdentifier:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _anchorEdgeForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController _layoutSpaceAnchorEdgeForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController animationControllerForRotatingWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController setPushPopWallpaperRequireAssertion:]
  -[SBMainDisplaySceneLayoutViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMainDisplaySceneLayoutViewController _layoutSizeForLayoutRole:spaceConfiguration:peekConfiguration:interfaceOrientation:frameOptions:]
  -[SBMainDisplaySceneLayoutViewController setUserResizing:]
  -[SBMainDisplaySceneLayoutViewController animationControllerForTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _convertPointFromReferenceCoordinateSpaceToContentViewCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController _displayConfiguration]
  -[SBMainDisplaySceneLayoutViewController _addLayoutElementViewController:forLayoutElement:entity:]
  -[SBMainDisplaySceneLayoutViewController _removeAppAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _endRequiringPushedInWallpaperForReason:animationFactory:]
  -[SBMainDisplaySceneLayoutViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMainDisplaySceneLayoutViewController _keyboardWillHide:]
  -[SBMainDisplaySceneLayoutViewController styleForRegion:forView:]
  -[SBMainDisplaySceneLayoutViewController _keyboardWillShow:]
  -[SBMainDisplaySceneLayoutViewController _updateAuxiliaryViews]
  -[SBMainDisplaySceneLayoutViewController _shouldRepositionViewAfterTransition]
  -[SBMainDisplaySceneLayoutViewController _noteKeyboardIsNotForMedusa]
  -[SBMainDisplaySceneLayoutViewController _fadeStatusBarStylesBetweenFromAndToViewControllersWithSettings:completion:]
  -[SBMainDisplaySceneLayoutViewController _keyboardFocusSceneID]
  -[SBMainDisplaySceneLayoutViewController _beginLayoutStateTransitionWithTransitionContext:]
  -[SBMainDisplaySceneLayoutViewController _transitioningAppViewControllers]
  -[SBMainDisplaySceneLayoutViewController _beginRequiringPushedInWallpaperForReason:animationFactory:]
  -[SBMainDisplaySceneLayoutViewController _activeHomeGrabberView]
  -[SBMainDisplaySceneLayoutViewController animationWrapperViewForLayoutState:roleMask:interfaceOrientation:maskDisplayCorners:]
  -[SBMainDisplaySceneLayoutViewController _pushedInTransform]
  -[SBMainDisplaySceneLayoutViewController homeGrabberRotationView]
  -[SBMainDisplaySceneLayoutViewController _shouldAdjustViewAffordancesAfterTransition]
  -[SBMainDisplaySceneLayoutViewController _shouldRotateToLayoutOrientation:]
  -[SBMainDisplaySceneLayoutViewController .cxx_destruct]
  -[SBMainDisplaySceneLayoutViewController _resizeAppViewsWithAnimationSettings:completion:]
  -[SBMainDisplaySceneLayoutViewController _separatorView]
  -[SBMainDisplaySceneLayoutViewController _separatorViewHitTestFrame]
  -[SBMainDisplaySceneLayoutViewController _doCommonCleanupUponEndingLayoutTransitionWithInterruption:]
  -[SBMainDisplaySceneLayoutViewController shouldBeginPointerInteractionAtLocation:forView:]
  -[SBMainDisplaySceneLayoutViewController _convertAnchorEdge:toLayoutOrientation:]
  -[SBMainDisplaySceneLayoutViewController _createSplitAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController viewDidLoad]
  -[SBMainDisplaySceneLayoutViewController _sceneHandleForBottomEdgeLocation:]
  -[SBMainDisplaySceneLayoutViewController betaLaunchHandle:activateIfNeededEndedWithResult:]
  -[SBMainDisplaySceneLayoutViewController initWithSceneManager:]
  -[SBMainDisplaySceneLayoutViewController referenceFrameForEntity:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _layoutRoleForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutViewController statusBarDescriberAtPoint:inView:pointInSceneLayoutSpace:]
  -[SBMainDisplaySceneLayoutViewController _performJiggleHintAnimationForApplicationSceneHandle:completion:]
  -[SBMainDisplaySceneLayoutViewController _updateViewControllerNubViewHighlightState:forKeyboardFocusSceneID:]
  -[SBMainDisplaySceneLayoutViewController _createSlideOverAndFadeElementOffscreenWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _separatorViewReferenceFrameForLayoutRole:spaceConfiguration:interfaceOrientation:frameOptions:]
  -[SBMainDisplaySceneLayoutViewController _popOutForReason:animationFactory:]
  -[SBMainDisplaySceneLayoutViewController _convertRectFromContentViewCoordinateSpaceToReferenceCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController _shouldDrawHomeGrabber]
  -[SBMainDisplaySceneLayoutViewController _updatePointInReferenceCoordinateSpace:withBlock:]
  -[SBMainDisplaySceneLayoutViewController _referenceFrameForLayoutElement:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _updateHomeGrabberEdgeProtectAndAutoHideWithResetDelay:unhideDelay:]
  -[SBMainDisplaySceneLayoutViewController _updateAuxiliaryViewsWhichWantToAnimateDuringRotation]
  -[SBMainDisplaySceneLayoutViewController appViewControllers]
  -[SBMainDisplaySceneLayoutViewController allowsConfiguringIndividualStatusBarParts]
  -[SBMainDisplaySceneLayoutViewController _noteKeyboardIsForMedusaWithOwningScene:]
  -[SBMainDisplaySceneLayoutViewController pointerInteractionHitTestInsetsForView:]
  -[SBMainDisplaySceneLayoutViewController _shouldNubViewBeVisibleForLayoutRole:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _rotateAppsAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _isTransitioningNoninteractivelyFromAppToApp]
  -[SBMainDisplaySceneLayoutViewController _createStatusBarWithFrame:interfaceOrientation:reason:]
  -[SBMainDisplaySceneLayoutViewController _configureHomeGrabberForLayoutStateTransition]
  -[SBMainDisplaySceneLayoutViewController _referenceFrameForLayoutRole:spaceConfiguration:interfaceOrientation:frameOptions:]
  -[SBMainDisplaySceneLayoutViewController _isEdgeProtectedForHomeGestureAtEdgeLocation:]
  -[SBMainDisplaySceneLayoutViewController _anchorEdgeForLayoutRole:inInterfaceOrientation:]
  -[SBMainDisplaySceneLayoutViewController _pushInForReason:animationFactory:]
  -[SBMainDisplaySceneLayoutViewController frameForSceneIdentifier:inView:]
  -[SBMainDisplaySceneLayoutViewController statusBarPartsForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutViewController _addSingleSceneForTransitionRequest:completion:]
  -[SBMainDisplaySceneLayoutViewController _statusBarEdgeInsetsForLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _updateHomeGrabberEdgeProtectAndAutoHideForAppRequest]
  -[SBMainDisplaySceneLayoutViewController _layoutWidthForLayoutRole:inSpaceConfiguration:interfaceOrientation:]
  -[SBMainDisplaySceneLayoutViewController _separatorViewReferenceFrameForSpaceConfiguration:interfaceOrientation:frameOptions:]
  -[SBMainDisplaySceneLayoutViewController _sceneHandlesIntersectingHomeGrabber]
  -[SBMainDisplaySceneLayoutViewController _orderFrontLayoutElementViewController:]
  -[SBMainDisplaySceneLayoutViewController statusBarDescriberForStatusBarPart:]
  -[SBMainDisplaySceneLayoutViewController _configureHomeGrabberForSettingsChangeWithDiff:transitionContext:]
  -[SBMainDisplaySceneLayoutViewController _sceneHandleForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController _applicationSceneLayoutElementControllerForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController currentlyValidStatusBarPartIdentifiers]
  -[SBMainDisplaySceneLayoutViewController _layoutFrameForSize:withRole:inInterfaceOrientation:frameOptions:]
  -[SBMainDisplaySceneLayoutViewController _layoutFrameForLayoutRole:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _rotateAppViewsWithAnimationSettings:completion:]
  -[SBMainDisplaySceneLayoutViewController _setSeparatorViewAlpha:]
  -[SBMainDisplaySceneLayoutViewController settings:changedValueForKey:]
  -[SBMainDisplaySceneLayoutViewController _setPreventsCornerRadiusUpdate:]
  -[SBMainDisplaySceneLayoutViewController _setKeyboardFocusSceneID:]
  -[SBMainDisplaySceneLayoutViewController _resizeAppsAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _setUpObservationWithCurrentEntities:previousEntities:]
  -[SBMainDisplaySceneLayoutViewController _convertTransformFromContentViewCoordinateSpaceToReferenceCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController _removeAppForTransitionRequest:completion:]
  -[SBMainDisplaySceneLayoutViewController dealloc]
  -[SBMainDisplaySceneLayoutViewController statusBarDescribers]
  -[SBMainDisplaySceneLayoutViewController _bannerUnfurlAnimationControllerForTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _statusBarAvoidanceFrameForLayoutState:layoutRole:]
  -[SBMainDisplaySceneLayoutViewController _orderFrontLayoutElementViewControllerForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController _separatorViewFrame]
  -[SBMainDisplaySceneLayoutViewController _convertPointFromContentViewCoordinateSpaceToReferenceCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController _setMaskDisplayCorners:forReason:]
  -[SBMainDisplaySceneLayoutViewController _setNubStyle:]
  -[SBMainDisplaySceneLayoutViewController _animationWrapperViewForElement:entity:layoutState:]
  -[SBMainDisplaySceneLayoutViewController _createOrDestroyHomeGrabberRotationViewIfNecessary]
  -[SBMainDisplaySceneLayoutViewController _layoutSizeForLayoutRole:spaceConfiguration:layoutState:]
  -[SBMainDisplaySceneLayoutViewController _slideOverAndFadeElementOffscreenForTransitionRequest:completion:]
  -[SBMainDisplaySceneLayoutViewController _jiggleAppAnimationControllerForTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _fadeStatusBarStylesBetweenFromAndToViewControllersWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _convertRectFromReferenceCoordinateSpaceToContentViewCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController _convertTransformFromReferenceCoordinateSpaceToContentViewCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController _replaceSingleSceneForTransitionRequest:animationSettings:completion:]
  -[SBMainDisplaySceneLayoutViewController pushPopWallpaperRequireAssertion]
  -[SBMainDisplaySceneLayoutViewController _updateWallpaperStyleAndBackgroundColorWithAnimationFactory:]
  -[SBMainDisplaySceneLayoutViewController _statusBarAvoidanceFrameForLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _separatorViewAlpha]


SBBreadcrumbMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBreadcrumbMetric handleEvent:withContext:]
  -[SBBreadcrumbMetric .cxx_destruct]
  -[SBBreadcrumbMetric init]


SBPowerDownView : SBUIPowerDownView
 @property  <SBPowerDownViewDelegate> *powerDownDelegate

  // instance methods
  -[SBPowerDownView _idleTimerFired]
  -[SBPowerDownView _cancelButtonTapped]
  -[SBPowerDownView _didTapFindMy]
  -[SBPowerDownView _powerDownSliderDidBeginSlide]
  -[SBPowerDownView _powerDownSliderDidUpdateSlideWithValue:]
  -[SBPowerDownView _powerDownSliderDidCompleteSlide]
  -[SBPowerDownView _powerDownSliderDidCancelSlide]
  -[SBPowerDownView powerDownDelegate]
  -[SBPowerDownView setPowerDownDelegate:]


SBKeyboardHomeAffordanceController : NSObject <SBHomeGrabberDelegate, SBSceneHandleObserver, SBUIActiveOrientationObserver, SBMainDisplaySceneManagerObserverPrivate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBKeyboardHomeAffordanceController sharedInstance]

  // instance methods
  -[SBKeyboardHomeAffordanceController activeInterfaceOrientationWillChangeToOrientation:]
  -[SBKeyboardHomeAffordanceController activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBKeyboardHomeAffordanceController shouldAllowAutoHideForHomeGrabberView:]
  -[SBKeyboardHomeAffordanceController .cxx_destruct]
  -[SBKeyboardHomeAffordanceController init]
  -[SBKeyboardHomeAffordanceController shouldAllowThinStyleForHomeGrabberView:]
  -[SBKeyboardHomeAffordanceController dealloc]
  -[SBKeyboardHomeAffordanceController additionalEdgeSpacingForHomeGrabberView:]
  -[SBKeyboardHomeAffordanceController sceneManagerUsingMedusaHostedKeyboardWindowDidChange:]
  -[SBKeyboardHomeAffordanceController _updateHomeAffordance]
  -[SBKeyboardHomeAffordanceController _didChangeKeyboardDocked:]
  -[SBKeyboardHomeAffordanceController _updateTopMostAssertion]
  -[SBKeyboardHomeAffordanceController _getHomeGrabberContainingView:isAlwaysPortrait:]
  -[SBKeyboardHomeAffordanceController registerAssertion:]
  -[SBKeyboardHomeAffordanceController unregisterAssertion:]
  -[SBKeyboardHomeAffordanceController _didChangeAdditionalEdgeMarginForAssertion:]


SBKeyboardHomeAffordanceAssertion : NSObject
 @property  UIWindow *sourceWindow
 @property  double additionalEdgeMargin

  // class methods
  +[SBKeyboardHomeAffordanceAssertion assertionForGestureWindow:]

  // instance methods
  -[SBKeyboardHomeAffordanceAssertion .cxx_destruct]
  -[SBKeyboardHomeAffordanceAssertion dealloc]
  -[SBKeyboardHomeAffordanceAssertion invalidate]
  -[SBKeyboardHomeAffordanceAssertion setAdditionalEdgeMargin:]
  -[SBKeyboardHomeAffordanceAssertion sourceWindow]
  -[SBKeyboardHomeAffordanceAssertion additionalEdgeMargin]
  -[SBKeyboardHomeAffordanceAssertion initWithGestureWindow:]
  -[SBKeyboardHomeAffordanceAssertion setSourceWindow:]


SBWidgetOnboardingLayoutBuilder : NSObject
 @property  NSArray *pinnedWidgets
 @property  NSArray *suggestionWidgets

  // instance methods
  -[SBWidgetOnboardingLayoutBuilder .cxx_destruct]
  -[SBWidgetOnboardingLayoutBuilder pinnedWidgets]
  -[SBWidgetOnboardingLayoutBuilder initWithPinnedWidgets:suggestionWidgets:]
  -[SBWidgetOnboardingLayoutBuilder migratedDefaultWidgets:]
  -[SBWidgetOnboardingLayoutBuilder defaultCalendarWidgetIcon:]
  -[SBWidgetOnboardingLayoutBuilder suggestionWidgets]
  -[SBWidgetOnboardingLayoutBuilder defaultFirstSuggestionWidgetIcon:]
  -[SBWidgetOnboardingLayoutBuilder defaultSecondSuggestionWidgetIcon:]
  -[SBWidgetOnboardingLayoutBuilder defaultSmallClockWidgetIcon]
  -[SBWidgetOnboardingLayoutBuilder defaultSmallCalendarWidgetIcon]
  -[SBWidgetOnboardingLayoutBuilder isCalendarWidget:]
  -[SBWidgetOnboardingLayoutBuilder defaultMediumFirstSuggestionWidgetIcon]
  -[SBWidgetOnboardingLayoutBuilder defaultMediumSecondSuggestionWidgetIcon]
  -[SBWidgetOnboardingLayoutBuilder isCalendarWidgetIcon:]
  -[SBWidgetOnboardingLayoutBuilder isFirstSuggestionActiveWidgetIcon:]
  -[SBWidgetOnboardingLayoutBuilder isSecondSuggestionActiveWidgetIcon:]
  -[SBWidgetOnboardingLayoutBuilder defaultSmallNotesWidgetIcon]
  -[SBWidgetOnboardingLayoutBuilder defaultMediumCalendarWidgetIcon]
  -[SBWidgetOnboardingLayoutBuilder defaultLargeFirstSuggestionWidgetIcon]
  -[SBWidgetOnboardingLayoutBuilder defaultLargeSecondSuggestionWidgetIcon]
  -[SBWidgetOnboardingLayoutBuilder migratedOneLargeWidget:]
  -[SBWidgetOnboardingLayoutBuilder migratedOneMediumWidget:]
  -[SBWidgetOnboardingLayoutBuilder migratedOneSmallWidget:]
  -[SBWidgetOnboardingLayoutBuilder migratedTwoSmallWidgets:]
  -[SBWidgetOnboardingLayoutBuilder migratedTwoMediumWidgets:]
  -[SBWidgetOnboardingLayoutBuilder migratedSmallAndMediumWidget:]
  -[SBWidgetOnboardingLayoutBuilder migratedThreeWidgets:]
  -[SBWidgetOnboardingLayoutBuilder migratedFourWidgets:]
  -[SBWidgetOnboardingLayoutBuilder isClockWidget:]
  -[SBWidgetOnboardingLayoutBuilder deduplicateInsidePinnedWidgets]


SBSleepWakeHardwareButtonInteraction : NSObject <SBHardwareButtonInteraction, SBHardwareButtonGestureParametersObserver>
 @property  SBBacklightController *backlightController
 @property  SBLockScreenManager *lockScreenManager
 @property  SBScreenWakeAnimationController *screenWakeAnimationController
 @property  SBSoundController *soundController
 @property  SBHIDInterface *HIDInterface
 @property  SpringBoard *SBApp
 @property  double multiplePressTimeInterval
 @property  BOOL fadeOutInProgressFromLockButtonWhileUnlocked
 @property  BOOL undidFadeOutFromLockButton
 @property  BOOL didPlayLockSound
 @property  <BSInvalidatable> *deferOrientationUpdatesAssertion
 @property  BOOL inhibitNextSinglePressUp
 @property  BOOL SOSGestureActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSleepWakeHardwareButtonInteraction setDeferOrientationUpdatesAssertion:]
  -[SBSleepWakeHardwareButtonInteraction deferOrientationUpdatesAssertion]
  -[SBSleepWakeHardwareButtonInteraction setScreenWakeAnimationController:]
  -[SBSleepWakeHardwareButtonInteraction soundController]
  -[SBSleepWakeHardwareButtonInteraction consumeInitialPressDown]
  -[SBSleepWakeHardwareButtonInteraction setDidPlayLockSound:]
  -[SBSleepWakeHardwareButtonInteraction inhibitNextSinglePressUp]
  -[SBSleepWakeHardwareButtonInteraction setHIDInterface:]
  -[SBSleepWakeHardwareButtonInteraction screenWakeAnimationController]
  -[SBSleepWakeHardwareButtonInteraction undidFadeOutFromLockButton]
  -[SBSleepWakeHardwareButtonInteraction _playLockSound]
  -[SBSleepWakeHardwareButtonInteraction backlightController]
  -[SBSleepWakeHardwareButtonInteraction .cxx_destruct]
  -[SBSleepWakeHardwareButtonInteraction provider:didUpdateButtonGestureParameters:]
  -[SBSleepWakeHardwareButtonInteraction HIDInterface]
  -[SBSleepWakeHardwareButtonInteraction setLockScreenManager:]
  -[SBSleepWakeHardwareButtonInteraction _performWake]
  -[SBSleepWakeHardwareButtonInteraction setFadeOutInProgressFromLockButtonWhileUnlocked:]
  -[SBSleepWakeHardwareButtonInteraction setSBApp:]
  -[SBSleepWakeHardwareButtonInteraction setBacklightController:]
  -[SBSleepWakeHardwareButtonInteraction setInhibitNextSinglePressUp:]
  -[SBSleepWakeHardwareButtonInteraction setSoundController:]
  -[SBSleepWakeHardwareButtonInteraction init]
  -[SBSleepWakeHardwareButtonInteraction fadeOutInProgressFromLockButtonWhileUnlocked]
  -[SBSleepWakeHardwareButtonInteraction multiplePressTimeInterval]
  -[SBSleepWakeHardwareButtonInteraction _performSleep]
  -[SBSleepWakeHardwareButtonInteraction setUndidFadeOutFromLockButton:]
  -[SBSleepWakeHardwareButtonInteraction consumeSinglePressUp]
  -[SBSleepWakeHardwareButtonInteraction lockScreenManager]
  -[SBSleepWakeHardwareButtonInteraction isSOSGestureActive]
  -[SBSleepWakeHardwareButtonInteraction SBApp]
  -[SBSleepWakeHardwareButtonInteraction reverseSleepIfNeededAndPossible]
  -[SBSleepWakeHardwareButtonInteraction setSOSGestureActive:]
  -[SBSleepWakeHardwareButtonInteraction didPlayLockSound]
  -[SBSleepWakeHardwareButtonInteraction setMultiplePressTimeInterval:]


SBDoubleClickSleepWakeHardwareButtonInteraction : SBSleepWakeHardwareButtonInteraction
 @property  SBHIDUILockAssertion *proxLockAssertion
 @property  SBProximitySensorManager *proximitySensorManager

  // instance methods
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _resumeProxAfterMultiplePressIntervalForReason:]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction consumeInitialPressDown]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction setProxLockAssertion:]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _suspendProx]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction .cxx_destruct]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _performWake]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction consumeInitialPressUp]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction observeFinalPressUp]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _cancelPreviousResumeProxRequests]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction initWithProximitySensorManager:]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction setProximitySensorManager:]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _resumeProxForReason:]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction proxLockAssertion]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction observeSinglePressDidFail]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _performSleep]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction consumeSecondPressDown]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction proximitySensorManager]


SBScreenEdgePanGestureRecognizer : UIScreenEdgePanGestureRecognizer
 @property  double grabberActiveZoneWidth
 @property  <SBSystemGestureRecognizerDelegate> *delegate

  // instance methods
  -[SBScreenEdgePanGestureRecognizer _touchInterfaceOrientation]
  -[SBScreenEdgePanGestureRecognizer setGrabberActiveZoneWidth:]
  -[SBScreenEdgePanGestureRecognizer initWithTarget:action:type:options:]
  -[SBScreenEdgePanGestureRecognizer isLocationWithinGrabberActiveZone]
  -[SBScreenEdgePanGestureRecognizer initWithTarget:action:]
  -[SBScreenEdgePanGestureRecognizer grabberActiveZoneWidth]
  -[SBScreenEdgePanGestureRecognizer sb_commonInitScreenEdgePanGestureRecognizer]


SBPIPMorphAnimatorController : NSObject <SBViewMorphAnimatorObserver>
 @property  int targetProcessIdentifier
 @property  NSString *scenePersistenceIdentifier
 @property  long long completedTargetAnimations
 @property  NSUUID *uuid
 @property  SBViewMorphAnimator *viewMorphAnimator
 @property  <SBViewMorphAnimatorDataSource> *viewMorphAnimatorDataSource
 @property  SBPIPContainerViewController *pictureInPictureContainerViewController
 @property  <SBPIPMorphAnimatorControllerDelegate> *delegate
 @property  @? setupCompletionBlock
 @property  @? animatorWaitingForExternalAnimationActionBlock
 @property  BOOL terminated
 @property  BOOL hasCompletedSourceAnimations
 @property  BOOL hasCompletedTargetAnimations
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPMorphAnimatorController interrupt]
  -[SBPIPMorphAnimatorController .cxx_destruct]
  -[SBPIPMorphAnimatorController init]
  -[SBPIPMorphAnimatorController cancel]
  -[SBPIPMorphAnimatorController uuid]
  -[SBPIPMorphAnimatorController delegate]
  -[SBPIPMorphAnimatorController _terminate]
  -[SBPIPMorphAnimatorController viewMorphAnimator]
  -[SBPIPMorphAnimatorController willStartSourceAnimations:]
  -[SBPIPMorphAnimatorController willRemoveTargeMatchMoveAnimationAtFrame:withinSourceFrame:]
  -[SBPIPMorphAnimatorController didEndSourceAnimations:finished:continueBlock:]
  -[SBPIPMorphAnimatorController didEndTargetAnimations:finished:continueBlock:]
  -[SBPIPMorphAnimatorController animatorWasInterrupted:]
  -[SBPIPMorphAnimatorController setAnimatorWaitingForExternalAnimationActionBlock:]
  -[SBPIPMorphAnimatorController setSetupCompletionBlock:]
  -[SBPIPMorphAnimatorController scenePersistenceIdentifier]
  -[SBPIPMorphAnimatorController targetProcessIdentifier]
  -[SBPIPMorphAnimatorController setTargetProcessIdentifier:]
  -[SBPIPMorphAnimatorController setScenePersistenceIdentifier:]
  -[SBPIPMorphAnimatorController completedTargetAnimations]
  -[SBPIPMorphAnimatorController setCompletedTargetAnimations:]
  -[SBPIPMorphAnimatorController initWithTargetProcessIdentifier:uuid:scenePersistenceIdentifier:direction:gestureInitiated:delegate:]
  -[SBPIPMorphAnimatorController _performAnimatorWaitingForExternalAnimationActionBlock]
  -[SBPIPMorphAnimatorController _isWaitingForExternalAnimationCompletion]
  -[SBPIPMorphAnimatorController setPictureInPictureContainerViewController:]
  -[SBPIPMorphAnimatorController hasCompletedTargetAnimations]
  -[SBPIPMorphAnimatorController hasCompletedSourceAnimations]
  -[SBPIPMorphAnimatorController viewMorphAnimatorDataSource]
  -[SBPIPMorphAnimatorController pictureInPictureContainerViewController]
  -[SBPIPMorphAnimatorController setupCompletionBlock]
  -[SBPIPMorphAnimatorController animatorWaitingForExternalAnimationActionBlock]
  -[SBPIPMorphAnimatorController isTerminated]


SBBannerManager : NSObject <BNPostingPrivate, BNPresentingDelegate, BNBannerSourceListenerDelegate, SBAssistantObserver, SBPlatterHomeGestureManagerDelegate, BNPosting, SBButtonEventsHandler>
 @property  UIWindow *bannerWindow
 @property  <BNLayoutManaging> *layoutManager
 @property  BOOL presentingBanner
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBannerManager _defaultAuthorizedBundleIDs]

  // instance methods
  -[SBBannerManager assistantWillAppear:]
  -[SBBannerManager _updateWindowLevel]
  -[SBBannerManager _enumerateObserversRespondingToSelector:usingBlock:]
  -[SBBannerManager presenter:willDismissPresentable:withTransitionCoordinator:userInfo:]
  -[SBBannerManager presenterRelinquishesVisibility:]
  -[SBBannerManager bannerSourceListener:presentationSize:containerSize:error:]
  -[SBBannerManager platterHomeGestureManager:windowForParticipant:]
  -[SBBannerManager layoutManager]
  -[SBBannerManager addTransitionObserver:]
  -[SBBannerManager _shouldHideStatusBarForPresentable:]
  -[SBBannerManager platterHomeGestureManager:zStackParticipantIdentifierForParticipant:]
  -[SBBannerManager acquireGestureRecognizerPriorityAssertionForPresentable:priority:reason:]
  -[SBBannerManager handleVolumeUpButtonPress]
  -[SBBannerManager presenterRequestsVisibility:]
  -[SBBannerManager bannerWindow]
  -[SBBannerManager handleHomeButtonDoublePress]
  -[SBBannerManager _unregisterHomeGestureContextForPresentable:]
  -[SBBannerManager acquireWindowLevelAssertionWithPriority:windowLevel:reason:]
  -[SBBannerManager _layoutDescriptionWithBounds:]
  -[SBBannerManager bannerSourceListener:requestsRevokingPresentablesWithIdentification:reason:animated:userInfo:error:]
  -[SBBannerManager handleHomeButtonPress]
  -[SBBannerManager presenter:gestureRecognizer:velocityInView:]
  -[SBBannerManager handleLockButtonPress]
  -[SBBannerManager handleVolumeDownButtonPress]
  -[SBBannerManager presenter:gestureRecognizer:translationInView:]
  -[SBBannerManager handleHeadsetButtonPress:]
  -[SBBannerManager handleHomeButtonLongPress]
  -[SBBannerManager handleVoiceCommandButtonPress]
  -[SBBannerManager .cxx_destruct]
  -[SBBannerManager _hideStatusBarIfNecessaryForPresentable:]
  -[SBBannerManager presenter:willTransitionToSize:withTransitionCoordinator:]
  -[SBBannerManager _statusBarAssertionReasonForPresentable:]
  -[SBBannerManager platterHomeGestureManager:gestureRecognizerPriorityAssertionForParticipant:reason:]
  -[SBBannerManager revokePresentablesWithIdentification:reason:options:userInfo:error:]
  -[SBBannerManager _updateGesturePriority]
  -[SBBannerManager isPresentingBanner]
  -[SBBannerManager registerAuthority:forRequesterIdentifier:]
  -[SBBannerManager bannerSourceListener:sceneSpecificationForBannerSceneWithIdentifier:forProcess:userInfo:]
  -[SBBannerManager _isPresentableHUD:]
  -[SBBannerManager bannerSourceListener:didUpdateInitialSceneSettingsWithParameters:]
  -[SBBannerManager init]
  -[SBBannerManager dismissAllBannersAnimated:reason:]
  -[SBBannerManager _newBannerWindow]
  -[SBBannerManager presenter:willPresentPresentable:withTransitionCoordinator:userInfo:]
  -[SBBannerManager _platterHomeGestureManager]
  -[SBBannerManager presenter:gestureRecognizer:locationForTouch:inView:]
  -[SBBannerManager postPresentable:withOptions:userInfo:error:]
  -[SBBannerManager _handleButtonEventWithTest:handler:]
  -[SBBannerManager _revealStatusBarIfNecessaryForPresentable:]
  -[SBBannerManager _homeGestureContextForPresentable:]
  -[SBBannerManager userInterfaceStyleTransitionAnimationSettingsForPresentable:forTransitionToStyle:]
  -[SBBannerManager presenter:presentable:willTransitionToSize:withTransitionCoordinator:]
  -[SBBannerManager panGestureRecognizerForPresenter:]
  -[SBBannerManager bannerSourceListener:layoutDescriptionWithError:]
  -[SBBannerManager bannerSourceListener:newBannerSourceListenerPresentableForBannerSpecification:scene:readyCompletion:]
  -[SBBannerManager bannerSourceListener:requestsPostingPresentable:options:userInfo:error:]
  -[SBBannerManager bannerSourceListener:recommendsSuspending:forReason:revokingCurrent:error:]
  -[SBBannerManager acquireBannerSuppressionAssertionForReason:]
  -[SBBannerManager _acquirePresenterVisibilityGestureRecognizerPriorityAssertion]
  -[SBBannerManager _bannerSuspensionReasonForSuppressionAssertionReason:]
  -[SBBannerManager platterHomeGestureManager:orderedParticipants:]
  -[SBBannerManager removeTransitionObserver:]
  -[SBBannerManager presenter:gestureRecognizer:locationForEvent:inView:]
  -[SBBannerManager _acquireGestureRecognizerPriorityAssertionWithPriority:reason:]
  -[SBBannerManager setSuspended:forReason:]
  -[SBBannerManager revokePresentablesWithIdentification:reason:options:animated:userInfo:error:]
  -[SBBannerManager _invalidatePresenterVisibilityGestureRecognizerPriorityAssertion]
  -[SBBannerManager platterHomeGestureManager:participantOwningHomeGestureDidChange:]


SBLiftToWakeManager : NSObject <CSExternalEventHandling, SBLiftToWakeObserver, BSInvalidatable>
 @property  SBLiftToWakeController *liftToWakeController
 @property  SBMainDisplayPolicyAggregator *policyAggregator
 @property  SBLockScreenManager *lockScreenManager
 @property  SBBacklightController *backlightController
 @property  SBIdleTimerGlobalCoordinator *idleTimerCoordinator
 @property  BOOL gestureWokeScreen
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBLiftToWakeManager _backlightController]
  -[SBLiftToWakeManager _setBacklightController:]
  -[SBLiftToWakeManager _setLockScreenManager:]
  -[SBLiftToWakeManager _setIdleTimerCoordinator:]
  -[SBLiftToWakeManager _setPolicyAggregator:]
  -[SBLiftToWakeManager coverSheetIdentifier]
  -[SBLiftToWakeManager _idleTimerCoordinator]
  -[SBLiftToWakeManager _ignoredTransition:]
  -[SBLiftToWakeManager _policyAggregator]
  -[SBLiftToWakeManager _lockScreenManager]
  -[SBLiftToWakeManager _liftToWakeController]
  -[SBLiftToWakeManager .cxx_destruct]
  -[SBLiftToWakeManager _isLockScreenMainPageVisible]
  -[SBLiftToWakeManager _setLiftToWakeController:]
  -[SBLiftToWakeManager wouldHandleButtonEvent:]
  -[SBLiftToWakeManager participantState]
  -[SBLiftToWakeManager liftToWakeController:didObserveTransition:deviceOrientation:]
  -[SBLiftToWakeManager init]
  -[SBLiftToWakeManager _setGestureWokeScreen:]
  -[SBLiftToWakeManager _initWithLiftToWakeController:]
  -[SBLiftToWakeManager _backlightWillTurnOn:]
  -[SBLiftToWakeManager handleEvent:]
  -[SBLiftToWakeManager dealloc]
  -[SBLiftToWakeManager invalidate]
  -[SBLiftToWakeManager conformsToCSEventHandling]
  -[SBLiftToWakeManager _gestureWokeScreen]


SBWakeDestination : NSObject
 @property  unsigned long type
 @property  NSString *identifier
 @property  SBSRemoteAlertDefinition *remoteAlertDefinition

  // instance methods
  -[SBWakeDestination setType:]
  -[SBWakeDestination .cxx_destruct]
  -[SBWakeDestination identifier]
  -[SBWakeDestination type]
  -[SBWakeDestination setIdentifier:]
  -[SBWakeDestination setRemoteAlertDefinition:]
  -[SBWakeDestination remoteAlertDefinition]


SBFaceIDCoachingConditionRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFaceIDCoachingConditionRecipe load]

  // instance methods
  -[SBFaceIDCoachingConditionRecipe title]
  -[SBFaceIDCoachingConditionRecipe handleVolumeIncrease]
  -[SBFaceIDCoachingConditionRecipe handleVolumeDecrease]
  -[SBFaceIDCoachingConditionRecipe _overrideCoachingConditionEnabled]
  -[SBFaceIDCoachingConditionRecipe _setOverrideCoachingConditionEnabled:]
  -[SBFaceIDCoachingConditionRecipe _setOverrideCoachingEvent:]


SBDoNotDisturbMetric : NSObject <DNDStateUpdateListener, SBFAnalyticsBackendEventHandling>
 @property  DNDStateService *dndStateService
 @property  SBFAnalyticsClient *analyticsClient
 @property  unsigned long location
 @property  NSString *primaryBundleIdentifier
 @property  NSString *sideBundleIdentifier
 @property  NSString *floatingBundleIdentifier
 @property  BOOL doNotDisturbActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDoNotDisturbMetric stateService:didReceiveDoNotDisturbStateUpdate:]
  -[SBDoNotDisturbMetric dndStateService]
  -[SBDoNotDisturbMetric isDoNotDisturbActive]
  -[SBDoNotDisturbMetric setPrimaryBundleIdentifier:]
  -[SBDoNotDisturbMetric initWithAnalyticsClient:]
  -[SBDoNotDisturbMetric _bundleIdentifierForElementWithLayoutRole:fromContext:]
  -[SBDoNotDisturbMetric primaryBundleIdentifier]
  -[SBDoNotDisturbMetric handleEvent:withContext:]
  -[SBDoNotDisturbMetric floatingBundleIdentifier]
  -[SBDoNotDisturbMetric .cxx_destruct]
  -[SBDoNotDisturbMetric setLocation:]
  -[SBDoNotDisturbMetric init]
  -[SBDoNotDisturbMetric setFloatingBundleIdentifier:]
  -[SBDoNotDisturbMetric location]
  -[SBDoNotDisturbMetric analyticsClient]
  -[SBDoNotDisturbMetric setSideBundleIdentifier:]
  -[SBDoNotDisturbMetric sendCoreAnalyticsEventWithName:payload:]
  -[SBDoNotDisturbMetric dealloc]
  -[SBDoNotDisturbMetric sideBundleIdentifier]


SBPIPStashedMaskView : UIView
 @property  UIView *tabShadowView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} tabViewBounds
 @property  {CGSize=dd} minimumStashTabSize

  // instance methods
  -[SBPIPStashedMaskView _setContinuousCornerRadius:]
  -[SBPIPStashedMaskView .cxx_destruct]
  -[SBPIPStashedMaskView layoutSubviews]
  -[SBPIPStashedMaskView _continuousCornerRadius]
  -[SBPIPStashedMaskView initWithFrame:]
  -[SBPIPStashedMaskView pointInside:withEvent:]
  -[SBPIPStashedMaskView setMinimumStashTabSize:]
  -[SBPIPStashedMaskView tabViewBounds]
  -[SBPIPStashedMaskView setTabHidden:left:]
  -[SBPIPStashedMaskView initWithFrame:minimumStashTabSize:]
  -[SBPIPStashedMaskView setTabShadowView:]
  -[SBPIPStashedMaskView minimumStashTabSize]
  -[SBPIPStashedMaskView _mainBodyBounds]
  -[SBPIPStashedMaskView tabShadowView]


SBWorkItem : NSObject
 @property  NSDate *creationDate
 @property  @? work

  // instance methods
  -[SBWorkItem work]
  -[SBWorkItem .cxx_destruct]
  -[SBWorkItem creationDate]
  -[SBWorkItem initWithWork:]


SBWorkStore : NSObject
 @property  NSMutableDictionary *workItemsPerKey
 @property  NSMutableArray *observers
 @property  unsigned long maxWorkPerKey
 @property  NSArray *keysWithWork
 @property  double defaultWorkExpirationPeriod

  // instance methods
  -[SBWorkStore .cxx_destruct]
  -[SBWorkStore addObserver:]
  -[SBWorkStore observers]
  -[SBWorkStore removeObserver:]
  -[SBWorkStore _workQueue_expireWorkForKey:]
  -[SBWorkStore _notifyObserversWorkDidChange]
  -[SBWorkStore dequeueWorkForKey:]
  -[SBWorkStore initWithMaximumNumberOfWorkItemsPerKey:]
  -[SBWorkStore keysWithWork]
  -[SBWorkStore addWorkItem:forKey:]
  -[SBWorkStore purgeWorkForKey:]
  -[SBWorkStore setWorkExpirationPeriod:forKey:]
  -[SBWorkStore defaultWorkExpirationPeriod]
  -[SBWorkStore setDefaultWorkExpirationPeriod:]
  -[SBWorkStore workItemsPerKey]
  -[SBWorkStore maxWorkPerKey]


SBBestAppSuggestion : NSObject <SBIconContinuityInfo>
 @property  NSUUID *uniqueIdentifier
 @property  NSString *bundleIdentifier
 @property  NSString *activityType
 @property  NSDate *lastUpdateTime
 @property  NSString *originatingDeviceIdentifier
 @property  NSString *originatingDeviceName
 @property  NSString *originatingDeviceType
 @property  NSString *originatingBundleIdentifier
 @property  NSString *suggestedLocationName
 @property  NSURL *launchURL

  // instance methods
  -[SBBestAppSuggestion launchURL]
  -[SBBestAppSuggestion uniqueIdentifier]
  -[SBBestAppSuggestion originatingBundleIdentifier]
  -[SBBestAppSuggestion isPrediction]
  -[SBBestAppSuggestion bundleIdentifier]
  -[SBBestAppSuggestion isHandoff]
  -[SBBestAppSuggestion activityType]
  -[SBBestAppSuggestion originatingDeviceType]
  -[SBBestAppSuggestion originatingDeviceName]
  -[SBBestAppSuggestion lastUpdateTime]
  -[SBBestAppSuggestion originatingDeviceIdentifier]
  -[SBBestAppSuggestion isLocationBasedSuggestion]
  -[SBBestAppSuggestion isBluetoothAudioPrediction]
  -[SBBestAppSuggestion isBluetoothPrediction]
  -[SBBestAppSuggestion isHeadphonesPrediction]
  -[SBBestAppSuggestion isFirstWakePrediction]
  -[SBBestAppSuggestion isSiriSuggestion]
  -[SBBestAppSuggestion suggestedLocationName]
  -[SBBestAppSuggestion launchURLRequiresInboxCopy]
  -[SBBestAppSuggestion makeInboxCopyOfLaunchURLToInboxURL:]
  -[SBBestAppSuggestion isLocationPredictionOfType:]
  -[SBBestAppSuggestion isArrivedAtHomePrediction]
  -[SBBestAppSuggestion isArrivedAtWorkPrediction]
  -[SBBestAppSuggestion isLocationPredictionFromSource:]
  -[SBBestAppSuggestion isLocallyGeneratedSuggestion]
  -[SBBestAppSuggestion isCarPlayPrediction]
  -[SBBestAppSuggestion isCallContinuitySuggestion]
  -[SBBestAppSuggestion isNotificationSuggestion]
  -[SBBestAppSuggestion isOpenURLSuggestion]
  -[SBBestAppSuggestion isEligibleForLockScreen]


SBGridSwipeUpGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBGridSwipeUpGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBGridSwipeUpGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBGridSwipeUpGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBGridSwipeUpGestureSwitcherModifier visibleAppLayouts]
  -[SBGridSwipeUpGestureSwitcherModifier .cxx_destruct]
  -[SBGridSwipeUpGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBGridSwipeUpGestureSwitcherModifier contentViewScale]
  -[SBGridSwipeUpGestureSwitcherModifier wallpaperStyle]
  -[SBGridSwipeUpGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBGridSwipeUpGestureSwitcherModifier didMoveToParentModifier:]
  -[SBGridSwipeUpGestureSwitcherModifier scrollViewContentOffset]
  -[SBGridSwipeUpGestureSwitcherModifier switcherViewBounds]
  -[SBGridSwipeUpGestureSwitcherModifier _applyPrototypeSettings]
  -[SBGridSwipeUpGestureSwitcherModifier handleGestureEvent:]
  -[SBGridSwipeUpGestureSwitcherModifier initWithGestureID:]
  -[SBGridSwipeUpGestureSwitcherModifier _performBlockByApplyContentViewScaleToSwitcherViewBounds:]
  -[SBGridSwipeUpGestureSwitcherModifier finalResponseForGestureEvent:]


SBFullScreenSessionMetric : SBAnalyticsStateMachineEventHandler
 @property  double startTimestamp
 @property  NSString *startReason
 @property  NSString *primaryBundleIdentifier
 @property  NSString *sideBundleIdentifier

  // instance methods
  -[SBFullScreenSessionMetric setPrimaryBundleIdentifier:]
  -[SBFullScreenSessionMetric _bundleIdentifierForElementWithLayoutRole:fromContext:]
  -[SBFullScreenSessionMetric primaryBundleIdentifier]
  -[SBFullScreenSessionMetric .cxx_destruct]
  -[SBFullScreenSessionMetric setStartReason:]
  -[SBFullScreenSessionMetric init]
  -[SBFullScreenSessionMetric startReason]
  -[SBFullScreenSessionMetric setSideBundleIdentifier:]
  -[SBFullScreenSessionMetric sendCoreAnalyticsEventWithName:payload:]
  -[SBFullScreenSessionMetric startTimestamp]
  -[SBFullScreenSessionMetric sideBundleIdentifier]
  -[SBFullScreenSessionMetric setStartTimestamp:]
  -[SBFullScreenSessionMetric _sendCoreAnalyticsEventWithStartReason:endReason:duration:primaryBundleIdentifier:doNotDisturbActive:hardwareKeyboardAttached:]


SBChainableModifier : NSObject <BSDescriptionProviding, SBChainableModifierQuery, SBChainableModifierContext, NSCopying>
 @property  SBChainableModifier *parentModifier
 @property  SBChainableModifier *previousContextModifier
 @property  SBChainableModifier *nextQueryModifier
 @property  SBModifierCacheCoordinator *queryCacheCoordinator
 @property  SBModifierCacheCoordinator *contextCacheCoordinator
 @property  long long state
 @property  long long modifierLevel
 @property  NSString *key
 @property  <SBChainableModifierDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBChainableModifier initialize]
  +[SBChainableModifier queryProtocol]
  +[SBChainableModifier makeDynamicSubclassWithDescriptor:implementation:forSelector:ofProtocol:]
  +[SBChainableModifier contextProtocol]
  +[SBChainableModifier baseClassForQueryProtocol]
  +[SBChainableModifier newEventResponse]
  +[SBChainableModifier _initalizeIMPCaching]
  +[SBChainableModifier newQueryCache]
  +[SBChainableModifier newContextCache]
  +[SBChainableModifier querySelectors]
  +[SBChainableModifier newCacheWithSelectorList:subsequentMethodCacheFunc:cachingDictionary:]
  +[SBChainableModifier contextSelectors]
  +[SBChainableModifier verifyModifierImplements:methodsOfProtocol:]
  +[SBChainableModifier modifierUnderTest:containsChildModifierKindOfClass:]

  // instance methods
  -[SBChainableModifier loggingCategory]
  -[SBChainableModifier _handleEvent:]
  -[SBChainableModifier setKey:]
  -[SBChainableModifier .cxx_destruct]
  -[SBChainableModifier succinctDescriptionBuilder]
  -[SBChainableModifier setDelegate:]
  -[SBChainableModifier setState:]
  -[SBChainableModifier descriptionBuilderWithMultilinePrefix:]
  -[SBChainableModifier init]
  -[SBChainableModifier descriptionWithMultilinePrefix:]
  -[SBChainableModifier didMoveToParentModifier:]
  -[SBChainableModifier succinctDescription]
  -[SBChainableModifier state]
  -[SBChainableModifier handleEvent:]
  -[SBChainableModifier delegate]
  -[SBChainableModifier key]
  -[SBChainableModifier dealloc]
  -[SBChainableModifier copyWithZone:]
  -[SBChainableModifier addChildModifier:]
  -[SBChainableModifier removeChildModifier:]
  -[SBChainableModifier completesWhenChildrenComplete]
  -[SBChainableModifier _insertModifier:afterModifier:queryResponse:contextResponse:]
  -[SBChainableModifier previousContextModifier]
  -[SBChainableModifier provideNextQueryImplementation:forSelector:]
  -[SBChainableModifier providePreviousContextImplementation:forSelector:]
  -[SBChainableModifier performTransactionWithTemporaryChildModifier:usingBlock:]
  -[SBChainableModifier parentModifier]
  -[SBChainableModifier childModifierByKey:]
  -[SBChainableModifier addChildModifier:atLevel:key:]
  -[SBChainableModifier responseForProposedChildResponse:childModifier:event:]
  -[SBChainableModifier childModifierCount]
  -[SBChainableModifier debugPotentialChildModifiers]
  -[SBChainableModifier containsChildModifier:]
  -[SBChainableModifier runsInternalVerificationAfterEventDispatch]
  -[SBChainableModifier verifyInternalIntegrityAfterHandlingEvent:]
  -[SBChainableModifier enumerateChildModifiersWithBlock:]
  -[SBChainableModifier setParentModifier:]
  -[SBChainableModifier nextQueryModifier]
  -[SBChainableModifier setPreviousContextModifier:]
  -[SBChainableModifier _notifyChildrenDidMoveToParentIfNeeded]
  -[SBChainableModifier _forwardEvent:toChildModifier:]
  -[SBChainableModifier _anyDescendentImplementsAnyQueryMethod]
  -[SBChainableModifier _anyDescendentImplementsAnyContextMethod]
  -[SBChainableModifier _addChildModifier:atLevel:key:queryResponse:contextResponse:]
  -[SBChainableModifier modifierLevel]
  -[SBChainableModifier setModifierLevel:]
  -[SBChainableModifier _lastDeepChildModifier]
  -[SBChainableModifier _removeChildModifier:queryResponse:contextResponse:]
  -[SBChainableModifier setNextQueryModifier:]
  -[SBChainableModifier queryCacheCoordinator]
  -[SBChainableModifier contextCacheCoordinator]
  -[SBChainableModifier setQueryCacheCoordinator:]
  -[SBChainableModifier setContextCacheCoordinator:]


SBPresentFloatingDockTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPresentFloatingDockTestRecipe load]

  // instance methods
  -[SBPresentFloatingDockTestRecipe title]
  -[SBPresentFloatingDockTestRecipe handleVolumeIncrease]
  -[SBPresentFloatingDockTestRecipe handleVolumeDecrease]


SBElasticRouteDisplayContext : NSObject <SBElasticRouteDisplaying>
 @property  NSString *localizedDisplayName
 @property  @? glyphStateValueTransformer
 @property  CCUICAPackageDescription *glyphPackage
 @property  UIImage *glyphImage
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBElasticRouteDisplayContext routeContextWithName:valueTransformer:glyphPackage:]
  +[SBElasticRouteDisplayContext routeContextWithName:glyphImage:]

  // instance methods
  -[SBElasticRouteDisplayContext localizedDisplayName]
  -[SBElasticRouteDisplayContext .cxx_destruct]
  -[SBElasticRouteDisplayContext glyphImage]
  -[SBElasticRouteDisplayContext setLocalizedDisplayName:]
  -[SBElasticRouteDisplayContext setGlyphImage:]
  -[SBElasticRouteDisplayContext glyphPackage]
  -[SBElasticRouteDisplayContext glyphStateValueTransformer]
  -[SBElasticRouteDisplayContext _initWithName:glyphStateValueTransformer:glyphPackage:glyphImage:]
  -[SBElasticRouteDisplayContext setGlyphStateValueTransformer:]
  -[SBElasticRouteDisplayContext setGlyphPackage:]


SBDeckSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBDeckSwitcherModifier appLayoutsToResignActive]
  -[SBDeckSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[SBDeckSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBDeckSwitcherModifier visibleShelves]
  -[SBDeckSwitcherModifier backgroundOpacityForIndex:]
  -[SBDeckSwitcherModifier isContainerStatusBarVisible]
  -[SBDeckSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBDeckSwitcherModifier plusButtonAlpha]
  -[SBDeckSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBDeckSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[SBDeckSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBDeckSwitcherModifier homeScreenDimmingAlpha]
  -[SBDeckSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[SBDeckSwitcherModifier dockWindowLevel]
  -[SBDeckSwitcherModifier wantsDockBehaviorAssertion]
  -[SBDeckSwitcherModifier slideOverTongueDirection]
  -[SBDeckSwitcherModifier homeScreenBackdropBlurType]
  -[SBDeckSwitcherModifier frameForShelf:]
  -[SBDeckSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBDeckSwitcherModifier isHomeAffordanceSupportedForAppLayout:]
  -[SBDeckSwitcherModifier _scrollMin]
  -[SBDeckSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBDeckSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBDeckSwitcherModifier plusButtonStyle]
  -[SBDeckSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[SBDeckSwitcherModifier titleOpacityForIndex:]
  -[SBDeckSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBDeckSwitcherModifier shouldScrollViewBlockTouches]
  -[SBDeckSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[SBDeckSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBDeckSwitcherModifier wallpaperScale]
  -[SBDeckSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[SBDeckSwitcherModifier wantsSlideOverTongue]
  -[SBDeckSwitcherModifier rotationAngleForIndex:]
  -[SBDeckSwitcherModifier slideOverTongueState]
  -[SBDeckSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBDeckSwitcherModifier homeScreenScale]
  -[SBDeckSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[SBDeckSwitcherModifier homeScreenAlpha]
  -[SBDeckSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBDeckSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBDeckSwitcherModifier switcherBackdropBlurProgress]
  -[SBDeckSwitcherModifier shelfBackgroundBlurOpacity]
  -[SBDeckSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBDeckSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBDeckSwitcherModifier transactionCompletionOptions]
  -[SBDeckSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[SBDeckSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBDeckSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBDeckSwitcherModifier shelfBackgroundBlurFrame]
  -[SBDeckSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBDeckSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBDeckSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[SBDeckSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBDeckSwitcherModifier wantsSwitcherDimmingView]
  -[SBDeckSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBDeckSwitcherModifier dockProgress]
  -[SBDeckSwitcherModifier shadowOffsetForIndex:]
  -[SBDeckSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[SBDeckSwitcherModifier keyboardSuppressionMode]
  -[SBDeckSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBDeckSwitcherModifier clippingFrameForIndex:]
  -[SBDeckSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[SBDeckSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBDeckSwitcherModifier lighteningAlphaForIndex:]
  -[SBDeckSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBDeckSwitcherModifier isScrollEnabled]
  -[SBDeckSwitcherModifier isHomeScreenContentRequired]
  -[SBDeckSwitcherModifier dockWindowLevelPriority]
  -[SBDeckSwitcherModifier containerLeafAppLayoutForShelf:]
  -[SBDeckSwitcherModifier headerStyleForIndex:]
  -[SBDeckSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[SBDeckSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBDeckSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[SBDeckSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBDeckSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBDeckSwitcherModifier _isIndexVisible:]
  -[SBDeckSwitcherModifier neighboringAppLayoutsForFocusedAppLayout:]
  -[SBDeckSwitcherModifier containerStatusBarAnimationDuration]
  -[SBDeckSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDeckSwitcherModifier isFocusEnabledForAppLayout:]
  -[SBDeckSwitcherModifier switcherBackdropBlurType]
  -[SBDeckSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[SBDeckSwitcherModifier switcherDimmingViewBlocksTouches]
  -[SBDeckSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBDeckSwitcherModifier scaleForIndex:]
  -[SBDeckSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBDeckSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBDeckSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBDeckSwitcherModifier _indexForScrollProgress:displayItemsCount:depth:]
  -[SBDeckSwitcherModifier _indexForContentOffset:]
  -[SBDeckSwitcherModifier handleTransitionEvent:]
  -[SBDeckSwitcherModifier isIndexRubberbandableForSwipeToKill:]
  -[SBDeckSwitcherModifier handleTapAppLayoutEvent:]
  -[SBDeckSwitcherModifier switcherDimmingAlpha]
  -[SBDeckSwitcherModifier dockUpdateMode]
  -[SBDeckSwitcherModifier frameForIndex:]
  -[SBDeckSwitcherModifier tintStyleForLayoutRole:inAppLayout:]
  -[SBDeckSwitcherModifier wantsHomeScreenPointerInteractions]
  -[SBDeckSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBDeckSwitcherModifier blurViewIconScaleForIndex:]
  -[SBDeckSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBDeckSwitcherModifier desiredXOriginForQuantizedTopPage]
  -[SBDeckSwitcherModifier visibleAppLayouts]
  -[SBDeckSwitcherModifier _valueAlongDepthCurveForIndex:scrollProgress:aCoefficient:bCoefficient:]
  -[SBDeckSwitcherModifier scrollViewAttributes]
  -[SBDeckSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBDeckSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBDeckSwitcherModifier isSwitcherWindowVisible]
  -[SBDeckSwitcherModifier minimumTranslationToKillIndex:]
  -[SBDeckSwitcherModifier _switcherCardScale]
  -[SBDeckSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBDeckSwitcherModifier depthForIndex:displayItemsCount:scrollProgress:]
  -[SBDeckSwitcherModifier contentViewScale]
  -[SBDeckSwitcherModifier _restingScrollProgressForProgress:velocity:]
  -[SBDeckSwitcherModifier scrollProgressForIndex:displayItemsCount:frameOrigin:]
  -[SBDeckSwitcherModifier wallpaperStyle]
  -[SBDeckSwitcherModifier numberOfItems]
  -[SBDeckSwitcherModifier cornerRadiiForIndex:]
  -[SBDeckSwitcherModifier init]
  -[SBDeckSwitcherModifier _directionForRemovingIndex:centeredIndex:]
  -[SBDeckSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBDeckSwitcherModifier _cardCornerRadiusInSwitcher]
  -[SBDeckSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBDeckSwitcherModifier _scaleTransformedXOrigin:scrollProgress:]
  -[SBDeckSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBDeckSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBDeckSwitcherModifier _priorIndex:fullyObscuresCardForIndex:]
  -[SBDeckSwitcherModifier _preferredVisibleMarginForTopPage]
  -[SBDeckSwitcherModifier indexForScrollProgress:displayItemsCount:frameOrigin:]
  -[SBDeckSwitcherModifier didMoveToParentModifier:]
  -[SBDeckSwitcherModifier _topIndexForLocationInContainerCoordinateSpace:]
  -[SBDeckSwitcherModifier topMostLayoutElements]
  -[SBDeckSwitcherModifier _contentSize]
  -[SBDeckSwitcherModifier _indexOfCurrentCenteredCard]
  -[SBDeckSwitcherModifier _newIndexOfItemAtIndex:afterRemovingItemAtIndex:]
  -[SBDeckSwitcherModifier leadingOffsetForIndex:displayItemsCount:scrollProgress:]
  -[SBDeckSwitcherModifier resetAdjustedScrollingState]
  -[SBDeckSwitcherModifier _scaleInSwitcherViewForIndex:scrollProgress:]
  -[SBDeckSwitcherModifier handleTapOutsideToDismissEvent:]
  -[SBDeckSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBDeckSwitcherModifier _depthForFrameOrigin:]
  -[SBDeckSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBDeckSwitcherModifier _unscaledCardCornerRadius]
  -[SBDeckSwitcherModifier handleRemovalEvent:]
  -[SBDeckSwitcherModifier _frameForIndex:displayItemsCount:scrollProgress:ignoringScrollOffset:]
  -[SBDeckSwitcherModifier _applyPrototypeSettings]
  -[SBDeckSwitcherModifier _counteractScrollingForOffset:scrollProgress:]
  -[SBDeckSwitcherModifier titleOpacityForIndex:scrollProgress:]
  -[SBDeckSwitcherModifier _scaleForTransformForIndex:scrollProgress:]
  -[SBDeckSwitcherModifier snapshotScaleForAppLayout:]
  -[SBDeckSwitcherModifier opacityForIndex:scrollProgress:]
  -[SBDeckSwitcherModifier scrollRange]
  -[SBDeckSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBDeckSwitcherModifier handleScrollEvent:]
  -[SBDeckSwitcherModifier _contentOffsetForScrollProgress:]
  -[SBDeckSwitcherModifier _scrollProgress]
  -[SBDeckSwitcherModifier _scrollProgressForContentOffset:]
  -[SBDeckSwitcherModifier scrollProgressForIndex:]
  -[SBDeckSwitcherModifier _adjustedOffsetForIndex:offset:start:originalLocationInView:locationInView:]
  -[SBDeckSwitcherModifier _scrollProgressForIndex:displayItemsCount:depth:]
  -[SBDeckSwitcherModifier _visibleAppLayoutRangeForContentOffset:]
  -[SBDeckSwitcherModifier _scaleTransformedFrameForIndex:withUntransformedFrame:scrollProgress:]


SBApplicationShortcutReportRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationShortcutReportRecipe load]

  // instance methods
  -[SBApplicationShortcutReportRecipe title]
  -[SBApplicationShortcutReportRecipe handleVolumeIncrease]
  -[SBApplicationShortcutReportRecipe handleVolumeDecrease]
  -[SBApplicationShortcutReportRecipe _dumpReport]


SBApplicationShortcutStore : NSObject
 @property  NSString *bundleIdentifier
 @property  NSArray *applicationShortcutItems
 @property  NSArray *languages
 @property  unsigned long version

  // class methods
  +[SBApplicationShortcutStore clearStore]

  // instance methods
  -[SBApplicationShortcutStore bundleIdentifier]
  -[SBApplicationShortcutStore invalidateCache]
  -[SBApplicationShortcutStore languages]
  -[SBApplicationShortcutStore .cxx_destruct]
  -[SBApplicationShortcutStore truncateIfNecessary]
  -[SBApplicationShortcutStore applicationShortcutItems]
  -[SBApplicationShortcutStore saveSynchronously]
  -[SBApplicationShortcutStore setApplicationShortcutItems:withLanguages:version:]
  -[SBApplicationShortcutStore _plistArrayFromApplicationShortcutItems:]
  -[SBApplicationShortcutStore initWithBundleIdentifier:]
  -[SBApplicationShortcutStore version]
  -[SBApplicationShortcutStore _stateLock_truncateIfNeeded:]
  -[SBApplicationShortcutStore _stateLock_loadFromStoreIfNeeded]
  -[SBApplicationShortcutStore _stateLock_markDirty]
  -[SBApplicationShortcutStore _saveQueue_save]
  -[SBApplicationShortcutStore _applicationShortcutItemsFromPlistArray:]


SBPIPPegasusContainerAdapter : NSObject <PGPictureInPictureViewControllerContentContainer, SBPIPStashTabSuppressionPolicyProviderObserver, SBPIPContainerViewControllerAdapter, SBPIPInteractionControllerDataSource>
 @property  PGPictureInPictureViewController *pictureInPictureViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPPegasusContainerAdapter setContainerViewController:]
  -[SBPIPPegasusContainerAdapter debugName]
  -[SBPIPPegasusContainerAdapter containerViewControllerStopReducingResourcesUsage:]
  -[SBPIPPegasusContainerAdapter .cxx_destruct]
  -[SBPIPPegasusContainerAdapter layoutSettings]
  -[SBPIPPegasusContainerAdapter containerViewControllerStartReducingResourcesUsage:]
  -[SBPIPPegasusContainerAdapter dealloc]
  -[SBPIPPegasusContainerAdapter invalidate]
  -[SBPIPPegasusContainerAdapter pictureInPictureViewController]
  -[SBPIPPegasusContainerAdapter prepareStartAnimationWithInitialInterfaceOrientation:initialLayerFrame:completionHandler:]
  -[SBPIPPegasusContainerAdapter performRotateAnimationWithRotation:completionHandler:]
  -[SBPIPPegasusContainerAdapter acquireInterfaceOrientationLock]
  -[SBPIPPegasusContainerAdapter relinquishInterfaceOrientationLock]
  -[SBPIPPegasusContainerAdapter handleTapWhileStashedGesture]
  -[SBPIPPegasusContainerAdapter handleDoubleTapGesture]
  -[SBPIPPegasusContainerAdapter notePictureInPictureViewControllerTetheringDidUpdate]
  -[SBPIPPegasusContainerAdapter preferredContentSizeDidChangeForPictureInPictureViewController]
  -[SBPIPPegasusContainerAdapter performStartInIsolationWithCompletionHandler:]
  -[SBPIPPegasusContainerAdapter performStartAnimationWithCompletionHandler:]
  -[SBPIPPegasusContainerAdapter _performStopAnimationWithFinalInterfaceOrientation:finalLayerFrame:completionHandler:]
  -[SBPIPPegasusContainerAdapter performStopInIsolationWithCompletionHandler:]
  -[SBPIPPegasusContainerAdapter performStopAnimationWithFinalInterfaceOrientation:finalLayerFrame:completionHandler:]
  -[SBPIPPegasusContainerAdapter updateMenuItems]
  -[SBPIPPegasusContainerAdapter notePictureInPictureViewControllerPrefersHiddenFromClonedDisplayDidChange]
  -[SBPIPPegasusContainerAdapter _reloadMenuButton]
  -[SBPIPPegasusContainerAdapter contentViewControllerForContainerViewController:]
  -[SBPIPPegasusContainerAdapter initWithPictureInPictureViewController:]
  -[SBPIPPegasusContainerAdapter interactionControllerUseSystemGesturesForResizing:]
  -[SBPIPPegasusContainerAdapter defaultPositionHyperregionComposers]
  -[SBPIPPegasusContainerAdapter interactionControllerScalesDuringPanGesture:]
  -[SBPIPPegasusContainerAdapter interactionController:updateScaleInteractor:pipSize:forPanGesture:]
  -[SBPIPPegasusContainerAdapter loadSubviewsForContainerViewController:]
  -[SBPIPPegasusContainerAdapter layoutSubviewsForContainerViewController:]
  -[SBPIPPegasusContainerAdapter containerViewControllerWillBeginSizeChange:behavior:]
  -[SBPIPPegasusContainerAdapter containerViewControllerDidEndSizeChange:]
  -[SBPIPPegasusContainerAdapter containerViewController:didUpdateStashProgress:]
  -[SBPIPPegasusContainerAdapter containerViewController:willBeginInteractionWithGestureRecognizer:]
  -[SBPIPPegasusContainerAdapter containerViewControllerDidEndInteraction:]
  -[SBPIPPegasusContainerAdapter isStashTabHiddenForContainerViewController:]
  -[SBPIPPegasusContainerAdapter containerViewController:wantsStashTabHidden:left:springSettings:completion:]
  -[SBPIPPegasusContainerAdapter shouldDisableIdleTimerForContainerViewController:]
  -[SBPIPPegasusContainerAdapter transitionAnimationWillBeginForContainerViewController:]
  -[SBPIPPegasusContainerAdapter transitionAnimationDidEndForContainerViewController:]
  -[SBPIPPegasusContainerAdapter morphAnimatorTargetViewForContainerViewController:]
  -[SBPIPPegasusContainerAdapter morphAnimatorTargetContainerViewForContainerViewController:]
  -[SBPIPPegasusContainerAdapter containerViewController:didUpdateContentViewFrame:reason:]
  -[SBPIPPegasusContainerAdapter containerViewController:didUpdateStashState:springSettings:]
  -[SBPIPPegasusContainerAdapter processIdentifierForContainerViewController:]
  -[SBPIPPegasusContainerAdapter bundleIdentifierForContainerViewController:]
  -[SBPIPPegasusContainerAdapter scenePersistenceIdentifierForContainerViewController:]
  -[SBPIPPegasusContainerAdapter stashTabVisibilityPolicyProviderDidUpdatePolicy:]
  -[SBPIPPegasusContainerAdapter _layoutMenuButton]
  -[SBPIPPegasusContainerAdapter _createOrInvalidateStashTabVisibilityPolicyProvider]


SBShelfCarouselSwitcherModifier : SBSwitcherModifier
 @property  NSArray *orderedVisibleAppLayouts

  // instance methods
  -[SBShelfCarouselSwitcherModifier appLayoutsToResignActive]
  -[SBShelfCarouselSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[SBShelfCarouselSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBShelfCarouselSwitcherModifier visibleShelves]
  -[SBShelfCarouselSwitcherModifier backgroundOpacityForIndex:]
  -[SBShelfCarouselSwitcherModifier isContainerStatusBarVisible]
  -[SBShelfCarouselSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBShelfCarouselSwitcherModifier plusButtonAlpha]
  -[SBShelfCarouselSwitcherModifier canPerformKeyboardShortcutAction:forBundleIdentifier:]
  -[SBShelfCarouselSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBShelfCarouselSwitcherModifier homeScreenDimmingAlpha]
  -[SBShelfCarouselSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[SBShelfCarouselSwitcherModifier dockWindowLevel]
  -[SBShelfCarouselSwitcherModifier wantsDockBehaviorAssertion]
  -[SBShelfCarouselSwitcherModifier slideOverTongueDirection]
  -[SBShelfCarouselSwitcherModifier homeScreenBackdropBlurType]
  -[SBShelfCarouselSwitcherModifier frameForShelf:]
  -[SBShelfCarouselSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBShelfCarouselSwitcherModifier isHomeAffordanceSupportedForAppLayout:]
  -[SBShelfCarouselSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBShelfCarouselSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBShelfCarouselSwitcherModifier plusButtonStyle]
  -[SBShelfCarouselSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[SBShelfCarouselSwitcherModifier titleOpacityForIndex:]
  -[SBShelfCarouselSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBShelfCarouselSwitcherModifier shouldScrollViewBlockTouches]
  -[SBShelfCarouselSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[SBShelfCarouselSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBShelfCarouselSwitcherModifier wallpaperScale]
  -[SBShelfCarouselSwitcherModifier isLayoutRoleDraggable:inAppLayout:]
  -[SBShelfCarouselSwitcherModifier wantsSlideOverTongue]
  -[SBShelfCarouselSwitcherModifier rotationAngleForIndex:]
  -[SBShelfCarouselSwitcherModifier slideOverTongueState]
  -[SBShelfCarouselSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBShelfCarouselSwitcherModifier homeScreenScale]
  -[SBShelfCarouselSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[SBShelfCarouselSwitcherModifier homeScreenAlpha]
  -[SBShelfCarouselSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBShelfCarouselSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBShelfCarouselSwitcherModifier switcherBackdropBlurProgress]
  -[SBShelfCarouselSwitcherModifier shelfBackgroundBlurOpacity]
  -[SBShelfCarouselSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBShelfCarouselSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBShelfCarouselSwitcherModifier transactionCompletionOptions]
  -[SBShelfCarouselSwitcherModifier shouldAllowContentViewTouchesForLayoutRole:inAppLayout:]
  -[SBShelfCarouselSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBShelfCarouselSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBShelfCarouselSwitcherModifier shelfBackgroundBlurFrame]
  -[SBShelfCarouselSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBShelfCarouselSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBShelfCarouselSwitcherModifier shouldAccessoryDrawShadowForAppLayout:]
  -[SBShelfCarouselSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBShelfCarouselSwitcherModifier wantsSwitcherDimmingView]
  -[SBShelfCarouselSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBShelfCarouselSwitcherModifier dockProgress]
  -[SBShelfCarouselSwitcherModifier shadowOffsetForIndex:]
  -[SBShelfCarouselSwitcherModifier isLayoutRoleSelectable:inAppLayout:]
  -[SBShelfCarouselSwitcherModifier keyboardSuppressionMode]
  -[SBShelfCarouselSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBShelfCarouselSwitcherModifier clippingFrameForIndex:]
  -[SBShelfCarouselSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[SBShelfCarouselSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBShelfCarouselSwitcherModifier lighteningAlphaForIndex:]
  -[SBShelfCarouselSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBShelfCarouselSwitcherModifier isScrollEnabled]
  -[SBShelfCarouselSwitcherModifier isHomeScreenContentRequired]
  -[SBShelfCarouselSwitcherModifier dockWindowLevelPriority]
  -[SBShelfCarouselSwitcherModifier containerLeafAppLayoutForShelf:]
  -[SBShelfCarouselSwitcherModifier headerStyleForIndex:]
  -[SBShelfCarouselSwitcherModifier isLayoutRoleKillable:inAppLayout:atIndex:]
  -[SBShelfCarouselSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBShelfCarouselSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[SBShelfCarouselSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBShelfCarouselSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBShelfCarouselSwitcherModifier _isIndexVisible:]
  -[SBShelfCarouselSwitcherModifier neighboringAppLayoutsForFocusedAppLayout:]
  -[SBShelfCarouselSwitcherModifier containerStatusBarAnimationDuration]
  -[SBShelfCarouselSwitcherModifier animationAttributesForLayoutElement:]
  -[SBShelfCarouselSwitcherModifier isFocusEnabledForAppLayout:]
  -[SBShelfCarouselSwitcherModifier switcherBackdropBlurType]
  -[SBShelfCarouselSwitcherModifier shadowStyleForLayoutRole:inAppLayout:]
  -[SBShelfCarouselSwitcherModifier switcherDimmingViewBlocksTouches]
  -[SBShelfCarouselSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBShelfCarouselSwitcherModifier scaleForIndex:]
  -[SBShelfCarouselSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBShelfCarouselSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBShelfCarouselSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBShelfCarouselSwitcherModifier isIndexRubberbandableForSwipeToKill:]
  -[SBShelfCarouselSwitcherModifier handleTapAppLayoutEvent:]
  -[SBShelfCarouselSwitcherModifier switcherDimmingAlpha]
  -[SBShelfCarouselSwitcherModifier dockUpdateMode]
  -[SBShelfCarouselSwitcherModifier frameForIndex:]
  -[SBShelfCarouselSwitcherModifier tintStyleForLayoutRole:inAppLayout:]
  -[SBShelfCarouselSwitcherModifier wantsHomeScreenPointerInteractions]
  -[SBShelfCarouselSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBShelfCarouselSwitcherModifier blurViewIconScaleForIndex:]
  -[SBShelfCarouselSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBShelfCarouselSwitcherModifier visibleAppLayouts]
  -[SBShelfCarouselSwitcherModifier scrollViewAttributes]
  -[SBShelfCarouselSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBShelfCarouselSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBShelfCarouselSwitcherModifier isSwitcherWindowVisible]
  -[SBShelfCarouselSwitcherModifier minimumTranslationToKillIndex:]
  -[SBShelfCarouselSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBShelfCarouselSwitcherModifier contentViewScale]
  -[SBShelfCarouselSwitcherModifier wallpaperStyle]
  -[SBShelfCarouselSwitcherModifier cornerRadiiForIndex:]
  -[SBShelfCarouselSwitcherModifier init]
  -[SBShelfCarouselSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBShelfCarouselSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBShelfCarouselSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBShelfCarouselSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBShelfCarouselSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBShelfCarouselSwitcherModifier anchorPointForIndex:]
  -[SBShelfCarouselSwitcherModifier didMoveToParentModifier:]
  -[SBShelfCarouselSwitcherModifier topMostLayoutElements]
  -[SBShelfCarouselSwitcherModifier _contentSize]
  -[SBShelfCarouselSwitcherModifier shouldTetherItemsAndAccessoriesInAppLayout:]
  -[SBShelfCarouselSwitcherModifier resetAdjustedScrollingState]
  -[SBShelfCarouselSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBShelfCarouselSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBShelfCarouselSwitcherModifier snapshotScaleForAppLayout:]
  -[SBShelfCarouselSwitcherModifier multipleWindowsIndicatorLayoutRoleMaskForAppLayout:]
  -[SBShelfCarouselSwitcherModifier _visibleRange]
  -[SBShelfCarouselSwitcherModifier _fittedContentSize]
  -[SBShelfCarouselSwitcherModifier orderedVisibleAppLayouts]
  -[SBShelfCarouselSwitcherModifier handleInitialSetupEvent:]
  -[SBShelfCarouselSwitcherModifier handleShelfFocusedDisplayItemsChangedEvent:]
  -[SBShelfCarouselSwitcherModifier _cacheCardSizes]
  -[SBShelfCarouselSwitcherModifier _orderedVisibleAppLayouts]
  -[SBShelfCarouselSwitcherModifier _frameForIndex:applyCarousel:]
  -[SBShelfCarouselSwitcherModifier _cardSizeForAppLayout:]
  -[SBShelfCarouselSwitcherModifier _cardSizeForIndex:]
  -[SBShelfCarouselSwitcherModifier _effectiveMaxCarouselWidth]
  -[SBShelfCarouselSwitcherModifier _trailingPaddingIfAny]


SBResizeProgressSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  double progress

  // instance methods
  -[SBResizeProgressSwitcherModifierEvent progress]
  -[SBResizeProgressSwitcherModifierEvent type]
  -[SBResizeProgressSwitcherModifierEvent copyWithZone:]
  -[SBResizeProgressSwitcherModifierEvent initWithProgress:]


SBInvalidateSnapshotCacheSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  NSArray *displayItems

  // instance methods
  -[SBInvalidateSnapshotCacheSwitcherEventResponse .cxx_destruct]
  -[SBInvalidateSnapshotCacheSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBInvalidateSnapshotCacheSwitcherEventResponse type]
  -[SBInvalidateSnapshotCacheSwitcherEventResponse displayItems]
  -[SBInvalidateSnapshotCacheSwitcherEventResponse initWithDisplayItems:]


SBInsertionSwitcherModifier : SBSwitcherModifier
 @property  unsigned long phase

  // instance methods
  -[SBInsertionSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBInsertionSwitcherModifier phase]
  -[SBInsertionSwitcherModifier animationAttributesForLayoutElement:]
  -[SBInsertionSwitcherModifier visibleAppLayouts]
  -[SBInsertionSwitcherModifier .cxx_destruct]
  -[SBInsertionSwitcherModifier initWithAppLayout:]
  -[SBInsertionSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBInsertionSwitcherModifier scrollViewContentOffset]
  -[SBInsertionSwitcherModifier handleInsertionEvent:]
  -[SBInsertionSwitcherModifier _performBlockBySimulatingPreInsertionState:]


SBCenterWindowDeleteSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCenterWindowDeleteSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBCenterWindowDeleteSwitcherModifier transitionWillBegin]
  -[SBCenterWindowDeleteSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCenterWindowDeleteSwitcherModifier scaleForIndex:]
  -[SBCenterWindowDeleteSwitcherModifier frameForIndex:]
  -[SBCenterWindowDeleteSwitcherModifier visibleAppLayouts]
  -[SBCenterWindowDeleteSwitcherModifier .cxx_destruct]
  -[SBCenterWindowDeleteSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBCenterWindowDeleteSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBCenterWindowDeleteSwitcherModifier topMostLayoutElements]
  -[SBCenterWindowDeleteSwitcherModifier transitionWillUpdate]
  -[SBCenterWindowDeleteSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBCenterWindowDeleteSwitcherModifier initWithTransitionID:fromAppLayout:]


SBIdleTimerGlobalStateMonitor : NSObject <SBPocketStateMonitorObserver, _SBIdleTimerGlobalSettingMonitorDelegate, SBIdleTimerServiceDelegate, SBFThermalConditionObserver>
 @property  long long pocketState
 @property  BOOL dontLockEver
 @property  BOOL dontDimOrLockOnAC
 @property  BOOL disableAttentionAwareness
 @property  double minimumLockscreenIdleTime
 @property  NSNumber *autoLockTimeout
 @property  BOOL batterySaverModeActive
 @property  BOOL onACPower
 @property  BOOL faceDownOnTable
 @property  BOOL autoDimDisabled
 @property  SBIdleTimerAggregateClientConfiguration *aggregateClientConfiguration
 @property  BOOL thermalBlocked
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerGlobalStateMonitor sharedInstance]

  // instance methods
  -[SBIdleTimerGlobalStateMonitor _updateFaceDownOnTable]
  -[SBIdleTimerGlobalStateMonitor _timeIntervalMonitorForProperty:inDefaults:fetchingWith:]
  -[SBIdleTimerGlobalStateMonitor isBatterySaverModeActive]
  -[SBIdleTimerGlobalStateMonitor dontDimOrLockOnAC]
  -[SBIdleTimerGlobalStateMonitor _stateCaptureDescription]
  -[SBIdleTimerGlobalStateMonitor _updateAutoDimDisabled]
  -[SBIdleTimerGlobalStateMonitor .cxx_destruct]
  -[SBIdleTimerGlobalStateMonitor pocketStateMonitor:pocketStateDidChangeFrom:to:]
  -[SBIdleTimerGlobalStateMonitor isAutoDimDisabled]
  -[SBIdleTimerGlobalStateMonitor _addStateCaptureHandlers]
  -[SBIdleTimerGlobalStateMonitor dontLockEver]
  -[SBIdleTimerGlobalStateMonitor disableAttentionAwareness]
  -[SBIdleTimerGlobalStateMonitor _updateObserversForReason:]
  -[SBIdleTimerGlobalStateMonitor _boolMonitorForProperty:inDefaults:fetchingWith:]
  -[SBIdleTimerGlobalStateMonitor addObserver:]
  -[SBIdleTimerGlobalStateMonitor _initWithLocalDefaults:profileConnection:pocketStateMonitor:uiController:idleTimerService:thermalBlockProvider:]
  -[SBIdleTimerGlobalStateMonitor isOnACPower]
  -[SBIdleTimerGlobalStateMonitor pocketState]
  -[SBIdleTimerGlobalStateMonitor _init]
  -[SBIdleTimerGlobalStateMonitor thermalBlockStatusChanged:]
  -[SBIdleTimerGlobalStateMonitor idleTimerServiceTimeoutAssertionsDidChange:]
  -[SBIdleTimerGlobalStateMonitor autoLockTimeout]
  -[SBIdleTimerGlobalStateMonitor isFaceDownOnTable]
  -[SBIdleTimerGlobalStateMonitor dealloc]
  -[SBIdleTimerGlobalStateMonitor idleTimerGlobalSettingMonitor:changedForReason:]
  -[SBIdleTimerGlobalStateMonitor removeObserver:]
  -[SBIdleTimerGlobalStateMonitor minimumLockscreenIdleTime]
  -[SBIdleTimerGlobalStateMonitor isThermalBlocked]
  -[SBIdleTimerGlobalStateMonitor aggregateClientConfiguration]


_SBIdleTimerGlobalSettingMonitor : NSObject
 @property  NSString *label
 @property  <_SBIdleTimerGlobalSettingMonitorDelegate> *delegate

  // instance methods
  -[_SBIdleTimerGlobalSettingMonitor label]
  -[_SBIdleTimerGlobalSettingMonitor .cxx_destruct]
  -[_SBIdleTimerGlobalSettingMonitor setDelegate:]
  -[_SBIdleTimerGlobalSettingMonitor formattedValue]
  -[_SBIdleTimerGlobalSettingMonitor _updateCache]
  -[_SBIdleTimerGlobalSettingMonitor delegate]
  -[_SBIdleTimerGlobalSettingMonitor initWithLabel:delegate:]


_SBIdleTimerGlobalNumericSettingMonitor : _SBIdleTimerGlobalSettingMonitor
 @property  NSNumber *numericValue

  // instance methods
  -[_SBIdleTimerGlobalNumericSettingMonitor _settingChanged:]
  -[_SBIdleTimerGlobalNumericSettingMonitor .cxx_destruct]
  -[_SBIdleTimerGlobalNumericSettingMonitor formattedValue]
  -[_SBIdleTimerGlobalNumericSettingMonitor initWithLabel:delegate:updatingForNotification:fetchingWith:]
  -[_SBIdleTimerGlobalNumericSettingMonitor _updateCache]
  -[_SBIdleTimerGlobalNumericSettingMonitor numericValue]
  -[_SBIdleTimerGlobalNumericSettingMonitor dealloc]


_SBIdleTimerGlobalBoolSettingMonitor : _SBIdleTimerGlobalNumericSettingMonitor
 @property  BOOL boolValue

  // instance methods
  -[_SBIdleTimerGlobalBoolSettingMonitor formattedValue]
  -[_SBIdleTimerGlobalBoolSettingMonitor initWithLabel:delegate:updatingForNotification:fetchingWith:]
  -[_SBIdleTimerGlobalBoolSettingMonitor boolValue]


SBElasticValueViewControllerFactory : NSObject
  // class methods
  +[SBElasticValueViewControllerFactory factoryWithVolumeDataSource:]
  +[SBElasticValueViewControllerFactory factoryWithBrightnessDataSource:]

  // instance methods
  -[SBElasticValueViewControllerFactory .cxx_destruct]
  -[SBElasticValueViewControllerFactory elasticValueViewController]
  -[SBElasticValueViewControllerFactory _initWithViewControllerGenerator:]


SBSwitcherModelRemovalRequest : NSObject
 @property  NSArray *appLayouts

  // instance methods
  -[SBSwitcherModelRemovalRequest .cxx_destruct]
  -[SBSwitcherModelRemovalRequest appLayouts]
  -[SBSwitcherModelRemovalRequest setAction:forAppLayout:]
  -[SBSwitcherModelRemovalRequest actionForAppLayout:]


SBSwitcherModelRemovalRequestAction : NSObject
 @property  long long actionType
 @property  SBAppLayout *replacementAppLayout

  // class methods
  +[SBSwitcherModelRemovalRequestAction defaultRemovalPolicyAction]
  +[SBSwitcherModelRemovalRequestAction replacementActionWithAppLayout:]

  // instance methods
  -[SBSwitcherModelRemovalRequestAction .cxx_destruct]
  -[SBSwitcherModelRemovalRequestAction actionType]
  -[SBSwitcherModelRemovalRequestAction replacementAppLayout]
  -[SBSwitcherModelRemovalRequestAction _initWithActionType:]


SBSwitcherShelf : NSObject <BSDescriptionProviding, NSCopying, SBSwitcherLayoutElementProviding>
 @property  NSString *uniqueIdentifier
 @property  NSString *bundleIdentifier
 @property  long long layoutRole
 @property  unsigned long displayMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherShelf uniqueIdentifier]
  -[SBSwitcherShelf displayMode]
  -[SBSwitcherShelf bundleIdentifier]
  -[SBSwitcherShelf layoutRole]
  -[SBSwitcherShelf .cxx_destruct]
  -[SBSwitcherShelf succinctDescriptionBuilder]
  -[SBSwitcherShelf descriptionBuilderWithMultilinePrefix:]
  -[SBSwitcherShelf isEqual:]
  -[SBSwitcherShelf descriptionWithMultilinePrefix:]
  -[SBSwitcherShelf succinctDescription]
  -[SBSwitcherShelf switcherLayoutElementType]
  -[SBSwitcherShelf copyWithZone:]
  -[SBSwitcherShelf initWithBundleIdentifier:layoutRole:displayMode:]


SBHomeGestureRootSwitcherModifier : SBGestureRootSwitcherModifier
  // instance methods
  -[SBHomeGestureRootSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBHomeGestureRootSwitcherModifier .cxx_destruct]
  -[SBHomeGestureRootSwitcherModifier _newMultitaskingModifier]
  -[SBHomeGestureRootSwitcherModifier gestureType]
  -[SBHomeGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBHomeGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBHomeGestureRootSwitcherModifier initWithStartingEnvironmentMode:multitaskingModifier:]


SBDashBoardLockScreenEnvironment : NSObject <SBApplicationHosting, SBAutoUnlockRule, SBBiometricUnlockBehavior, SBBiometricUnlockBehaviorDelegate, SBButtonEventsHandler, CSCoverSheetViewControllerObserver, SBLockScreenBacklightControlling, SBLockScreenBehaviorSuppressing, SBLockScreenBlockedStateObserving, SBLockScreenButtonObserving, SBLockScreenContentStateProviding, SBLockScreenCustomActionStoring, SBLockScreenLockingAndUnlocking, SBLockScreenMediaControlsPresenting, SBLockScreenPasscodeViewPresenting, SBLockScreenProximityBehaviorProviding, SBLockScreenStatusBarTransitioning, SBLockScreenSpotlightPresenting, SBLockScreenEnvironment>
 @property  CSCoverSheetViewController *coverSheetViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate
 @property  double backlightLevel
 @property  SBFLockScreenActionContext *customLockScreenActionContext
 @property  BOOL authenticated
 @property  BOOL showingMediaControls
 @property  BOOL expectsFaceContact
 @property  BOOL shouldShowLockStatusBarTime
 @property  UIViewController *rootViewController
 @property  <SBAutoUnlockRule> *autoUnlockRule
 @property  <SBBiometricUnlockBehavior> *biometricUnlockBehavior
 @property  <SBButtonEventsHandler> *buttonEventsHandler
 @property  <SBApplicationHosting> *applicationHoster
 @property  <SBIdleTimerProviding> *idleTimerProvider
 @property  <SBFScreenWakeAnimationTarget> *screenWakeAnimationTarget
 @property  <SBLockScreenApplicationLaunching> *applicationLauncher
 @property  <SBLockScreenBacklightControlling> *backlightController
 @property  <SBLockScreenBehaviorSuppressing> *behaviorSuppressor
 @property  <SBLockScreenBlockedStateObserving> *blockedStateObserver
 @property  <SBLockScreenButtonObserving> *buttonObserver
 @property  <SBLockScreenCallHandling> *callController
 @property  <SBLockScreenContentStateProviding> *contentStateProvider
 @property  <SBLockScreenCustomActionStoring> *customActionStore
 @property  <SBLockScreenIdleTimerControlling> *idleTimerController
 @property  <SBLockScreenLockingAndUnlocking> *lockController
 @property  <SBLockScreenMediaControlsPresenting> *mediaControlsPresenter
 @property  <SBLockScreenPasscodeViewPresenting> *passcodeViewPresenter
 @property  <SBLockScreenPluginPresenting> *pluginPresenter
 @property  <SBLockScreenProximityBehaviorProviding> *proximityBehaviorProvider
 @property  <SBLockScreenStatusBarTransitioning> *statusBarTransitionController
 @property  <SBSWidgetMetricsProviding> *widgetMetricsProvider
 @property  <SBLockScreenSpotlightPresenting> *spotlightPresenter

  // instance methods
  -[SBDashBoardLockScreenEnvironment biometricUnlockBehavior:requestsUnlock:withFeedback:]
  -[SBDashBoardLockScreenEnvironment createHomeButtonShowPasscodeRecognizerForHomeButtonPress]
  -[SBDashBoardLockScreenEnvironment pluginPresenter]
  -[SBDashBoardLockScreenEnvironment canBeDeactivatedForUIUnlockFromSource:]
  -[SBDashBoardLockScreenEnvironment widgetMetricsProvider]
  -[SBDashBoardLockScreenEnvironment rootViewController]
  -[SBDashBoardLockScreenEnvironment coverSheetViewController]
  -[SBDashBoardLockScreenEnvironment handleVolumeUpButtonPress]
  -[SBDashBoardLockScreenEnvironment noteResetRestoreStateUpdated]
  -[SBDashBoardLockScreenEnvironment handleHomeButtonDoublePress]
  -[SBDashBoardLockScreenEnvironment setInScreenOffMode:forAutoUnlock:fromUnlockSource:]
  -[SBDashBoardLockScreenEnvironment shouldDisableALS]
  -[SBDashBoardLockScreenEnvironment setAuthenticated:]
  -[SBDashBoardLockScreenEnvironment isPasscodeLockVisible]
  -[SBDashBoardLockScreenEnvironment handleHomeButtonPress]
  -[SBDashBoardLockScreenEnvironment handleLockButtonPress]
  -[SBDashBoardLockScreenEnvironment prepareForUILock]
  -[SBDashBoardLockScreenEnvironment isShowingMediaControls]
  -[SBDashBoardLockScreenEnvironment handleVolumeDownButtonPress]
  -[SBDashBoardLockScreenEnvironment setBiometricUnlockBehaviorDelegate:]
  -[SBDashBoardLockScreenEnvironment handleHeadsetButtonPress:]
  -[SBDashBoardLockScreenEnvironment suppressesControlCenter]
  -[SBDashBoardLockScreenEnvironment spotlightPresenter]
  -[SBDashBoardLockScreenEnvironment backlightLevel]
  -[SBDashBoardLockScreenEnvironment handleHomeButtonLongPress]
  -[SBDashBoardLockScreenEnvironment handleBiometricEvent:]
  -[SBDashBoardLockScreenEnvironment backlightController]
  -[SBDashBoardLockScreenEnvironment _customLockScreenActionContext]
  -[SBDashBoardLockScreenEnvironment handleVoiceCommandButtonPress]
  -[SBDashBoardLockScreenEnvironment isAuthenticated]
  -[SBDashBoardLockScreenEnvironment .cxx_destruct]
  -[SBDashBoardLockScreenEnvironment canHostAnApp]
  -[SBDashBoardLockScreenEnvironment coverSheetViewController:didChangeActiveBehavior:]
  -[SBDashBoardLockScreenEnvironment shouldShowLockStatusBarTime]
  -[SBDashBoardLockScreenEnvironment noteMenuButtonDown]
  -[SBDashBoardLockScreenEnvironment setPasscodeLockVisible:animated:completion:]
  -[SBDashBoardLockScreenEnvironment jiggleLockIcon]
  -[SBDashBoardLockScreenEnvironment updateStatusBarForLockScreenTeardown]
  -[SBDashBoardLockScreenEnvironment setBacklightLevel:]
  -[SBDashBoardLockScreenEnvironment finishUIUnlockFromSource:]
  -[SBDashBoardLockScreenEnvironment passcodeViewPresenter]
  -[SBDashBoardLockScreenEnvironment willUIUnlockFromSource:]
  -[SBDashBoardLockScreenEnvironment expectsFaceContact]
  -[SBDashBoardLockScreenEnvironment hostedAppSceneHandles]
  -[SBDashBoardLockScreenEnvironment conformsToSBApplicationHosting]
  -[SBDashBoardLockScreenEnvironment succinctDescriptionBuilder]
  -[SBDashBoardLockScreenEnvironment applicationLauncher]
  -[SBDashBoardLockScreenEnvironment setInScreenOffMode:]
  -[SBDashBoardLockScreenEnvironment callController]
  -[SBDashBoardLockScreenEnvironment isHostingAnApp]
  -[SBDashBoardLockScreenEnvironment isMainPageVisible]
  -[SBDashBoardLockScreenEnvironment descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardLockScreenEnvironment screenWakeAnimationTarget]
  -[SBDashBoardLockScreenEnvironment init]
  -[SBDashBoardLockScreenEnvironment shouldPresentOrDismissCoverSheetSpotlight]
  -[SBDashBoardLockScreenEnvironment buttonEventsHandler]
  -[SBDashBoardLockScreenEnvironment mediaControlsPresenter]
  -[SBDashBoardLockScreenEnvironment noteMenuButtonUp]
  -[SBDashBoardLockScreenEnvironment hostedAppWillRotateToInterfaceOrientation:]
  -[SBDashBoardLockScreenEnvironment descriptionWithMultilinePrefix:]
  -[SBDashBoardLockScreenEnvironment hostedAppSceneHandle]
  -[SBDashBoardLockScreenEnvironment biometricUnlockBehavior:requestsFeedback:]
  -[SBDashBoardLockScreenEnvironment biometricUnlockBehaviorDelegate]
  -[SBDashBoardLockScreenEnvironment applicationHoster]
  -[SBDashBoardLockScreenEnvironment statusBarTransitionController]
  -[SBDashBoardLockScreenEnvironment buttonObserver]
  -[SBDashBoardLockScreenEnvironment succinctDescription]
  -[SBDashBoardLockScreenEnvironment lockController]
  -[SBDashBoardLockScreenEnvironment prepareForUIUnlock]
  -[SBDashBoardLockScreenEnvironment proximityBehaviorProvider]
  -[SBDashBoardLockScreenEnvironment isUnlockDisabled]
  -[SBDashBoardLockScreenEnvironment biometricUnlockBehavior]
  -[SBDashBoardLockScreenEnvironment idleTimerController]
  -[SBDashBoardLockScreenEnvironment startLockScreenFadeInAnimationForSource:]
  -[SBDashBoardLockScreenEnvironment suppressesBanners]
  -[SBDashBoardLockScreenEnvironment suppressesScreenshots]
  -[SBDashBoardLockScreenEnvironment isInScreenOffMode]
  -[SBDashBoardLockScreenEnvironment noteDeviceBlockedStatusUpdated]
  -[SBDashBoardLockScreenEnvironment customActionStore]
  -[SBDashBoardLockScreenEnvironment blockedStateObserver]
  -[SBDashBoardLockScreenEnvironment idleTimerProvider]
  -[SBDashBoardLockScreenEnvironment shouldAutoUnlockForSource:]
  -[SBDashBoardLockScreenEnvironment autoUnlockRule]
  -[SBDashBoardLockScreenEnvironment contentStateProvider]
  -[SBDashBoardLockScreenEnvironment createHomeButtonSuppressAfterUnlockRecognizerForUnlockSource:]
  -[SBDashBoardLockScreenEnvironment presentOrDismissCoverSheetSpotlightAnimated:]
  -[SBDashBoardLockScreenEnvironment setShowingMediaControls:]
  -[SBDashBoardLockScreenEnvironment shouldUnlockUIOnKeyDownEvent]
  -[SBDashBoardLockScreenEnvironment behaviorSuppressor]
  -[SBDashBoardLockScreenEnvironment _setExpectsFaceContact:]
  -[SBDashBoardLockScreenEnvironment initWithCoverSheetViewController:]
  -[SBDashBoardLockScreenEnvironment setCustomLockScreenActionContext:]
  -[SBDashBoardLockScreenEnvironment updateStatusBarForLockScreenComeback]
  -[SBDashBoardLockScreenEnvironment setPasscodeLockVisible:animated:]
  -[SBDashBoardLockScreenEnvironment updateScaleViewWithScale:]


SBMainDisplayRootWindowScenePresentationBinder : UIRootWindowScenePresentationBinder
 @property  SBRootSceneWindow *rootWindow

  // class methods
  +[SBMainDisplayRootWindowScenePresentationBinder sharedInstance]

  // instance methods
  -[SBMainDisplayRootWindowScenePresentationBinder _disconnectFromRenderServer]
  -[SBMainDisplayRootWindowScenePresentationBinder .cxx_destruct]
  -[SBMainDisplayRootWindowScenePresentationBinder init]
  -[SBMainDisplayRootWindowScenePresentationBinder rootWindow]
  -[SBMainDisplayRootWindowScenePresentationBinder _reconnectToRenderServer]
  -[SBMainDisplayRootWindowScenePresentationBinder assertDisconnectionFromRenderServerForReason:]


SBFluidSwitcherGestureManager : NSObject <SBSystemGestureRecognizerDelegate, SBTouchTemplateGestureRecognizerDelegate, BSTransactionObserver, BSDescriptionProviding, PTSettingsKeyObserver, SBGrabberTongueDelegate, SBHomeGrabberDelegate, SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBPanSystemGestureRecognizerDelegate, SBLayoutStateTransitionObserver, SBFluidSwitcherGestureWorkspaceTransactionDelegate, SBFluidSwitcherDragAndDropManagerDelegate>
 @property  SBFluidSwitcherViewController *switcherContentController
 @property  SBMainDisplaySceneLayoutViewController *sceneLayoutViewController
 @property  <SBFluidSwitcherGestureManagerDelegate> *delegate
 @property  NSHashTable *currentHomeGrabberViews
 @property  SBAppSwitcherDefaults *appSwitcherDefaults
 @property  SBAppSwitcherSettings *appSwitcherSettings
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  SBFHomeGrabberSettings *homeGrabberSettings
 @property  SBReachabilitySettings *reachabilitySettings
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  SBFZStackParticipant *zStackParticipant
 @property  SBFluidSwitcherPanGestureRecognizer *deckInSwitcherPanGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectBottomEdgePanGestureRecognizer
 @property  SBGrabberTongue *deckGrabberTongue
 @property  SBFluidSwitcherPanGestureRecognizer *activateReachabilityGestureRecognizer
 @property  BOOL usesHomeAffordanceRulesForGrabberTongue
 @property  BOOL interactivelyPresentingTongue
 @property  BOOL playedEdgeProtectHaptic
 @property  UINotificationFeedbackGenerator *edgeProtectFeedbackGenerator
 @property  NSTimer *delayedHomeGrabberUpdateTimer
 @property  UIView *exclusionTrapezoidDebugView
 @property  BOOL shouldRubberbandGrabberViewForReduceMotion
 @property  SBSwitcherForcePressSystemGestureRecognizer *deckSwitcherForcePressRecognizer
 @property  SBFluidScrunchGestureRecognizer *fluidScrunchGestureRecognizer
 @property  SBFluidSwitcherPanGestureRecognizer *clickAndDragHomeGestureRecognizer
 @property  BSMonotonicReferenceTime *lastClickAndDragHomeGestureTimestamp
 @property  UIHoverGestureRecognizer *switcherHoverGestureRecognizer
 @property  SBGrabberTongue *rightEdgeFloatingAppGrabberTongue
 @property  SBGrabberTongue *leftEdgeFloatingAppGrabberTongue
 @property  SBFluidSwitcherPanGestureRecognizer *swipeUpFloatingAppGestureRecognizer
 @property  SBFluidSwitcherPanGestureRecognizer *moveFloatingApplicationGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectDismissFloatingApplicationGestureRecognizer
 @property  SBFluidScrunchGestureRecognizer *indirectFloatingAppScrunchGestureRecognizer
 @property  SBFluidSwitcherPanGestureRecognizer *pinFloatingApplicationGestureRecognizer
 @property  SBFluidSwitcherPanGestureRecognizer *unpinSplitViewApplicationGestureRecognizer
 @property  SBPanSystemGestureRecognizer *sceneResizePanGestureRecognizer
 @property  SBFluidSwitcherDragAndDropManager *fluidDragAndDropManager
 @property  SBFluidSwitcherGestureWorkspaceTransaction *activeGestureTransaction
 @property  SBDragAndDropWorkspaceTransaction *dragAndDropWorkspaceTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherGestureManager homeGrabberSettings]
  -[SBFluidSwitcherGestureManager setHomeGrabberSettings:]
  -[SBFluidSwitcherGestureManager _handleDeckSwitcherForcePressGesture:]
  -[SBFluidSwitcherGestureManager edgeProtectFeedbackGenerator]
  -[SBFluidSwitcherGestureManager grabberTongue:shouldShowTongueOnFirstSwipeWithEdgeLocation:]
  -[SBFluidSwitcherGestureManager _setUpGestureRecognizers]
  -[SBFluidSwitcherGestureManager grabberTongue:shouldAllowSecondSwipeWithEdgeLocation:]
  -[SBFluidSwitcherGestureManager _updateReachabilityGestureSettings]
  -[SBFluidSwitcherGestureManager _updateDeckSwitcherForcePressGesturePresence]
  -[SBFluidSwitcherGestureManager grabberTongue:shouldReceiveTouch:]
  -[SBFluidSwitcherGestureManager setLastClickAndDragHomeGestureTimestamp:]
  -[SBFluidSwitcherGestureManager _handleWindowDragGestureRecognizer:]
  -[SBFluidSwitcherGestureManager leftEdgeFloatingAppGrabberTongue]
  -[SBFluidSwitcherGestureManager _hasActiveModalFloatingApplication]
  -[SBFluidSwitcherGestureManager switcherHoverGestureRecognizer]
  -[SBFluidSwitcherGestureManager grabberTongueCanceledPulling:withDistance:andVelocity:andGesture:]
  -[SBFluidSwitcherGestureManager setReachabilitySettings:]
  -[SBFluidSwitcherGestureManager transactionDidComplete:]
  -[SBFluidSwitcherGestureManager grabberTongueOrPullEnabled:forGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setLeftEdgeFloatingAppGrabberTongue:]
  -[SBFluidSwitcherGestureManager _shouldSplitViewApplicationUnpinGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager deckGrabberTongue]
  -[SBFluidSwitcherGestureManager _handleSwitcherGestureBegan:]
  -[SBFluidSwitcherGestureManager _currentFloatingAppLayout]
  -[SBFluidSwitcherGestureManager reachabilitySettings]
  -[SBFluidSwitcherGestureManager gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _handleSwitcherPanGestureBegan:]
  -[SBFluidSwitcherGestureManager grabberTongueBeganPulling:withDistance:andVelocity:andGesture:]
  -[SBFluidSwitcherGestureManager homeGestureSettings]
  -[SBFluidSwitcherGestureManager layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFluidSwitcherGestureManager setClickAndDragHomeGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setFluidScrunchGestureRecognizer:]
  -[SBFluidSwitcherGestureManager grabberTongueDidPresentInteractively:withDistance:andVelocity:]
  -[SBFluidSwitcherGestureManager grabberTongueUpdatedPulling:withDistance:andVelocity:andGesture:]
  -[SBFluidSwitcherGestureManager shouldRubberbandGrabberViewForReduceMotion]
  -[SBFluidSwitcherGestureManager _gestureTypeForGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _updateZStackParticipantWithReason:]
  -[SBFluidSwitcherGestureManager customGestureRecognizerForGrabberTongue:]
  -[SBFluidSwitcherGestureManager grabberTongue:shouldDismissTongueOnSecondSwipeWithEdgeLocation:]
  -[SBFluidSwitcherGestureManager grabberTongueEndedPulling:withDistance:andVelocity:andGesture:]
  -[SBFluidSwitcherGestureManager layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFluidSwitcherGestureManager appSwitcherSettings]
  -[SBFluidSwitcherGestureManager grabberTongueWillPresent:]
  -[SBFluidSwitcherGestureManager setFluidDragAndDropManager:]
  -[SBFluidSwitcherGestureManager _shouldBeginClickAndDragHomeGesture:]
  -[SBFluidSwitcherGestureManager _isBannerOccludingRegionAtReferencePoint:]
  -[SBFluidSwitcherGestureManager indirectPanGestureRecognizerForGrabberTongue:]
  -[SBFluidSwitcherGestureManager setHomeGestureParticipant:]
  -[SBFluidSwitcherGestureManager homeGestureParticipant]
  -[SBFluidSwitcherGestureManager shouldAllowAutoHideForHomeGrabberView:]
  -[SBFluidSwitcherGestureManager setUnpinSplitViewApplicationGestureRecognizer:]
  -[SBFluidSwitcherGestureManager zStackParticipant:updatePreferences:]
  -[SBFluidSwitcherGestureManager _shouldBeginFloatingApplicationPresentGesture:]
  -[SBFluidSwitcherGestureManager _shouldSuppressEdgeProtectToAllowSwipesImmediatelyAfterTransition]
  -[SBFluidSwitcherGestureManager unpinSplitViewApplicationGestureRecognizer]
  -[SBFluidSwitcherGestureManager _startFluidSwitcherTransactionForGestureRecognizer:]
  -[SBFluidSwitcherGestureManager zStackParticipantDidChange:]
  -[SBFluidSwitcherGestureManager setInteractivelyPresentingTongue:]
  -[SBFluidSwitcherGestureManager updateGestureWithTransitionRequest:]
  -[SBFluidSwitcherGestureManager .cxx_destruct]
  -[SBFluidSwitcherGestureManager indirectBottomEdgePanGestureRecognizer]
  -[SBFluidSwitcherGestureManager _hideGrabberAnimated:]
  -[SBFluidSwitcherGestureManager _handleFluidGesture:]
  -[SBFluidSwitcherGestureManager grabberTongueWillDismiss:]
  -[SBFluidSwitcherGestureManager setIndirectBottomEdgePanGestureRecognizer:]
  -[SBFluidSwitcherGestureManager interactivelyPresentingTongue]
  -[SBFluidSwitcherGestureManager moveFloatingApplicationGestureRecognizer]
  -[SBFluidSwitcherGestureManager relinquishHiddenAssertionForHomeGrabber:]
  -[SBFluidSwitcherGestureManager _handleClickAndDragHomeGesture:]
  -[SBFluidSwitcherGestureManager _currentUnlockedEnvironmentMode]
  -[SBFluidSwitcherGestureManager _handleSwitcherPanGestureEnded:]
  -[SBFluidSwitcherGestureManager succinctDescriptionBuilder]
  -[SBFluidSwitcherGestureManager shouldSuppressTongueViewForGrabberTongue:]
  -[SBFluidSwitcherGestureManager grabberTongueWillPresentInteractively:withDistance:andVelocity:]
  -[SBFluidSwitcherGestureManager lastClickAndDragHomeGestureTimestamp]
  -[SBFluidSwitcherGestureManager indirectFloatingAppScrunchGestureRecognizer]
  -[SBFluidSwitcherGestureManager pinFloatingApplicationGestureRecognizer]
  -[SBFluidSwitcherGestureManager _shouldBeginSplitViewApplicationUnpinGesture:]
  -[SBFluidSwitcherGestureManager setDelegate:]
  -[SBFluidSwitcherGestureManager homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBFluidSwitcherGestureManager setIndirectFloatingAppScrunchGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setDeckInSwitcherPanGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _updateExclusionTrapezoidDebugView]
  -[SBFluidSwitcherGestureManager _handleScrunchGesture:]
  -[SBFluidSwitcherGestureManager _firstFloatingAppLayout]
  -[SBFluidSwitcherGestureManager indirectPanSystemGestureTypeForGrabberTongue:]
  -[SBFluidSwitcherGestureManager descriptionBuilderWithMultilinePrefix:]
  -[SBFluidSwitcherGestureManager setSwitcherContentController:]
  -[SBFluidSwitcherGestureManager sceneLayoutViewController]
  -[SBFluidSwitcherGestureManager _shouldIndirectFloatingAppScrunchGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager viewForSystemGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setCurrentHomeGrabberViews:]
  -[SBFluidSwitcherGestureManager rightEdgeFloatingAppGrabberTongue]
  -[SBFluidSwitcherGestureManager fluidDragAndDropManager]
  -[SBFluidSwitcherGestureManager _shouldSceneResizeGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager _configureScrunchGesture]
  -[SBFluidSwitcherGestureManager dragAndDropManager:didBeginGesture:]
  -[SBFluidSwitcherGestureManager dragAndDropManager:sourceViewProviderForDraggingWindowWithGestureRecognizer:]
  -[SBFluidSwitcherGestureManager configureIndirectBottomEdgePanGestureRecognizer]
  -[SBFluidSwitcherGestureManager swipeUpFloatingAppGestureRecognizer]
  -[SBFluidSwitcherGestureManager descriptionWithMultilinePrefix:]
  -[SBFluidSwitcherGestureManager _fluidSwitcherGestureTransactionClassForGestureType:]
  -[SBFluidSwitcherGestureManager setActiveGestureTransaction:]
  -[SBFluidSwitcherGestureManager zStackParticipant]
  -[SBFluidSwitcherGestureManager setZStackParticipant:]
  -[SBFluidSwitcherGestureManager setDeckSwitcherForcePressRecognizer:]
  -[SBFluidSwitcherGestureManager homeGrabberViewDidReceiveClick:]
  -[SBFluidSwitcherGestureManager setSwipeUpFloatingAppGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _indirectPresentFloatingAppGestureRecognizerForEdge:]
  -[SBFluidSwitcherGestureManager gestureRecognizerShouldBegin:]
  -[SBFluidSwitcherGestureManager dragAndDropManager:displayItemForDraggingWindowWithGestureRecognizer:]
  -[SBFluidSwitcherGestureManager succinctDescription]
  -[SBFluidSwitcherGestureManager clickAndDragHomeGestureRecognizer]
  -[SBFluidSwitcherGestureManager _isEdgeLocationInHomeAffordanceRegion:]
  -[SBFluidSwitcherGestureManager _shouldDeckInSwitcherPanGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager _shouldBeginFloatingApplicationPinGesture:]
  -[SBFluidSwitcherGestureManager setAppSwitcherSettings:]
  -[SBFluidSwitcherGestureManager _shouldBeginReachabilityGesture:]
  -[SBFluidSwitcherGestureManager _shouldProtectEdgeLocation:]
  -[SBFluidSwitcherGestureManager _shouldBeginFluidScrunchGesture:]
  -[SBFluidSwitcherGestureManager setHomeGestureSettings:]
  -[SBFluidSwitcherGestureManager completeGestureWithTransitionRequest:]
  -[SBFluidSwitcherGestureManager _shouldAllowFloatingApplicationGesture:gestureType:failureReason:]
  -[SBFluidSwitcherGestureManager _shouldBeginDeckForcePressGesture:]
  -[SBFluidSwitcherGestureManager _handleDeckSwitcherPanGesture:]
  -[SBFluidSwitcherGestureManager setIndirectDismissFloatingApplicationGestureRecognizer:]
  -[SBFluidSwitcherGestureManager dragAndDropWorkspaceTransaction]
  -[SBFluidSwitcherGestureManager dragAndDropManager:didEndGesture:]
  -[SBFluidSwitcherGestureManager setPlayedEdgeProtectHaptic:]
  -[SBFluidSwitcherGestureManager gestureRecognizer:shouldReceiveTouch:]
  -[SBFluidSwitcherGestureManager _updateSwitcherBottomEdgeGesturePresence]
  -[SBFluidSwitcherGestureManager _currentLayoutState]
  -[SBFluidSwitcherGestureManager playedEdgeProtectHaptic]
  -[SBFluidSwitcherGestureManager _handleSwitcherPanGestureChanged:]
  -[SBFluidSwitcherGestureManager setSceneResizePanGestureRecognizer:]
  -[SBFluidSwitcherGestureManager shouldAllowThinStyleForHomeGrabberView:]
  -[SBFluidSwitcherGestureManager switcherContentController]
  -[SBFluidSwitcherGestureManager _deviceApplicationSceneEntityForFloatingApplicationGrabberTongue]
  -[SBFluidSwitcherGestureManager setActivateReachabilityGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _shouldBeginFloatingApplicationSwipeUpGesture:]
  -[SBFluidSwitcherGestureManager setSceneLayoutViewController:]
  -[SBFluidSwitcherGestureManager setShouldRubberbandGrabberViewForReduceMotion:]
  -[SBFluidSwitcherGestureManager delegate]
  -[SBFluidSwitcherGestureManager deckSwitcherForcePressRecognizer]
  -[SBFluidSwitcherGestureManager appSwitcherDefaults]
  -[SBFluidSwitcherGestureManager setDelayedHomeGrabberUpdateTimer:]
  -[SBFluidSwitcherGestureManager indirectDismissFloatingApplicationGestureRecognizer]
  -[SBFluidSwitcherGestureManager settings:changedValueForKey:]
  -[SBFluidSwitcherGestureManager fluidSwitcherGestureTransaction:didEndGesture:]
  -[SBFluidSwitcherGestureManager _updateHomeGrabberViewsWithAnimationMode:]
  -[SBFluidSwitcherGestureManager usesHomeAffordanceRulesForGrabberTongue]
  -[SBFluidSwitcherGestureManager _handleFloatingAppPresentGesture:]
  -[SBFluidSwitcherGestureManager _floatingApplicationBounds]
  -[SBFluidSwitcherGestureManager dragAndDropManager:willEndDraggingWindowWithSceneIdentifier:]
  -[SBFluidSwitcherGestureManager _updateHomeGestureParticipant]
  -[SBFluidSwitcherGestureManager setDeckGrabberTongue:]
  -[SBFluidSwitcherGestureManager fluidScrunchGestureRecognizer]
  -[SBFluidSwitcherGestureManager setPinFloatingApplicationGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _shouldBeginDeckInSwitcherPanGesture:]
  -[SBFluidSwitcherGestureManager dragAndDropManager:didUpdateGesture:]
  -[SBFluidSwitcherGestureManager _shouldBeginFloatingApplicationMoveGesture:]
  -[SBFluidSwitcherGestureManager setAppSwitcherDefaults:]
  -[SBFluidSwitcherGestureManager dealloc]
  -[SBFluidSwitcherGestureManager homeGestureBottomEdgeRecognizer]
  -[SBFluidSwitcherGestureManager takeHiddenAssertionForHomeGrabber:]
  -[SBFluidSwitcherGestureManager fluidSwitcherGestureTransaction:didBeginGesture:]
  -[SBFluidSwitcherGestureManager _shouldFloatingApplicationPinGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager _floatingConfigurationForActivatedEdge:]
  -[SBFluidSwitcherGestureManager _grabberTongueForGestureRecognizer:]
  -[SBFluidSwitcherGestureManager invalidate]
  -[SBFluidSwitcherGestureManager dragAndDropManager:didPlatterizeWindowDragWithSceneIdentifier:]
  -[SBFluidSwitcherGestureManager setMoveFloatingApplicationGestureRecognizer:]
  -[SBFluidSwitcherGestureManager grabberTongueTapped:]
  -[SBFluidSwitcherGestureManager sceneResizePanGestureRecognizer]
  -[SBFluidSwitcherGestureManager setSwitcherHoverGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _updateDeckSwitcherInSwitcherAndReachabilityGesturePresence]
  -[SBFluidSwitcherGestureManager currentHomeGrabberViews]
  -[SBFluidSwitcherGestureManager _configureFloatingApplicationGestureRecognizers]
  -[SBFluidSwitcherGestureManager initWithSwitcherContentController:sceneLayoutViewController:delegate:]
  -[SBFluidSwitcherGestureManager _edgeLocationIsOutsideFloatingApplicationGrabberFreeRegion:]
  -[SBFluidSwitcherGestureManager _shouldFloatingApplicationSwipeUpGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager _shouldBeginBottomEdgePanGesture:]
  -[SBFluidSwitcherGestureManager _shouldSuppressEdgeProtect]
  -[SBFluidSwitcherGestureManager activeGestureTransaction]
  -[SBFluidSwitcherGestureManager setRightEdgeFloatingAppGrabberTongue:]
  -[SBFluidSwitcherGestureManager setEdgeProtectFeedbackGenerator:]
  -[SBFluidSwitcherGestureManager failMultitaskingGesturesForReason:]
  -[SBFluidSwitcherGestureManager _shouldFloatingApplicationMoveGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager _shouldAllowDeckBottomEdgeGestureToRecognizeFromEdges:]
  -[SBFluidSwitcherGestureManager _shouldBeginIndirectHomePanGesture:]
  -[SBFluidSwitcherGestureManager deckInSwitcherPanGestureRecognizer]
  -[SBFluidSwitcherGestureManager dragAndDropManager:didBeginDraggingWindowWithSceneIdentifier:]
  -[SBFluidSwitcherGestureManager setUsesHomeAffordanceRulesForGrabberTongue:]
  -[SBFluidSwitcherGestureManager _isTransactionRunningForGestureRecognizer:]
  -[SBFluidSwitcherGestureManager fluidSwitcherGestureTransaction:didUpdateGesture:]
  -[SBFluidSwitcherGestureManager _shouldClickAndDragHomeGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager _shouldBeginIndirectFloatingAppScrunchGesture:]
  -[SBFluidSwitcherGestureManager setExclusionTrapezoidDebugView:]
  -[SBFluidSwitcherGestureManager _shouldReachabilityGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager exclusionTrapezoidDebugView]
  -[SBFluidSwitcherGestureManager delayedHomeGrabberUpdateTimer]
  -[SBFluidSwitcherGestureManager additionalEdgeSpacingForHomeGrabberView:]
  -[SBFluidSwitcherGestureManager _configureTransitionRequest:forGestureBegin:]
  -[SBFluidSwitcherGestureManager isDragAndDropTransactionRunning]
  -[SBFluidSwitcherGestureManager activateReachabilityGestureRecognizer]


SBApplicationSceneUpdateTransaction : FBApplicationUpdateScenesTransaction
 @property  SBApplicationSceneEntity *applicationSceneEntity
 @property  NSString *sceneIdentifier
 @property  UIApplicationSceneSettings *sceneSettings
 @property  BOOL shouldSendActivationResult

  // instance methods
  -[SBApplicationSceneUpdateTransaction _customizedDescriptionProperties]
  -[SBApplicationSceneUpdateTransaction sceneSettings]
  -[SBApplicationSceneUpdateTransaction _didComplete]
  -[SBApplicationSceneUpdateTransaction setShouldSendActivationResult:]
  -[SBApplicationSceneUpdateTransaction sceneIdentifier]
  -[SBApplicationSceneUpdateTransaction _performSynchronizedCommit:]
  -[SBApplicationSceneUpdateTransaction .cxx_destruct]
  -[SBApplicationSceneUpdateTransaction applicationSceneEntity]
  -[SBApplicationSceneUpdateTransaction initWithApplicationSceneEntity:transitionRequest:]
  -[SBApplicationSceneUpdateTransaction _sendActivationResultWithError:]
  -[SBApplicationSceneUpdateTransaction shouldSendActivationResult]


SBDashBoardSetupView : UIView <CAAnimationDelegate>
 @property  CSHomeAffordanceView *homeAffordanceView
 @property  UIView *activationInfoView
 @property  UIView *regulatoryInfoView
 @property  _UILegibilitySettings *legibilitySettings
 @property  UIButton *infoButton
 @property  BOOL activationLocked
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardSetupView infoButton]
  -[SBDashBoardSetupView isActivationLocked]
  -[SBDashBoardSetupView .cxx_destruct]
  -[SBDashBoardSetupView layoutSubviews]
  -[SBDashBoardSetupView setLegibilitySettings:]
  -[SBDashBoardSetupView animationDidStop:finished:]
  -[SBDashBoardSetupView _setupConstraints]
  -[SBDashBoardSetupView _onDisplayLink:]
  -[SBDashBoardSetupView initWithFrame:]
  -[SBDashBoardSetupView dealloc]
  -[SBDashBoardSetupView legibilitySettings]
  -[SBDashBoardSetupView _addTitleLabel]
  -[SBDashBoardSetupView _removeDisplayLink]
  -[SBDashBoardSetupView homeAffordanceView]
  -[SBDashBoardSetupView setInfoButtonVisible:animated:withDelay:]
  -[SBDashBoardSetupView initWithFrame:usingHomeAffordance:isStoreRestricted:isSecurityResearchDevice:]
  -[SBDashBoardSetupView animateComponents:toActive:withCompletion:]
  -[SBDashBoardSetupView setTitleString:forLanguage:]
  -[SBDashBoardSetupView setCallToActionString:forLanguage:]
  -[SBDashBoardSetupView setStoreRestrictedStrings:bodyString:linkString:forLanguage:]
  -[SBDashBoardSetupView setActivationLockWarningString:detailString:forLanguage:]
  -[SBDashBoardSetupView setActivationLocked:]
  -[SBDashBoardSetupView setActivationInfoView:]
  -[SBDashBoardSetupView setRegulatoryInfoView:]
  -[SBDashBoardSetupView _actsLikeStoreRestricted]
  -[SBDashBoardSetupView _addActivationLockLabels]
  -[SBDashBoardSetupView _addSecurityResearchLabels]
  -[SBDashBoardSetupView _addInfoButton]
  -[SBDashBoardSetupView _addStoreRestrictedLabels]
  -[SBDashBoardSetupView _addHomeAffordanceCallToAction]
  -[SBDashBoardSetupView _addHomeAffordance]
  -[SBDashBoardSetupView _addHomeButtonCallToAction]
  -[SBDashBoardSetupView _adjustTitleVisibilityForInfoViews]
  -[SBDashBoardSetupView _setupActivationInfoConstraintsIfNeeded]
  -[SBDashBoardSetupView _updateLegibilitySettings]
  -[SBDashBoardSetupView _createDisplayLink]
  -[SBDashBoardSetupView _animateView:toActive:withDispatchGroup:]
  -[SBDashBoardSetupView _animateCursiveForTimePassed]
  -[SBDashBoardSetupView _isShowingModalTakeoverUI]
  -[SBDashBoardSetupView _animateHomeButtonCallToActionToActive:withDispatchGroup:]
  -[SBDashBoardSetupView _animateHomeAffordanceCallToActionToActive:withDispatchGroup:]
  -[SBDashBoardSetupView _animateHomeAffordanceToActive:withDispatchGroup:]
  -[SBDashBoardSetupView _layoutRegulatoryInfo]
  -[SBDashBoardSetupView _layoutActivationInfoView]
  -[SBDashBoardSetupView _layoutHomeButtonCallToAction]
  -[SBDashBoardSetupView _layoutHomeAffordanceCallToAction]
  -[SBDashBoardSetupView _layoutHomeAffordance]
  -[SBDashBoardSetupView _removeResetAnimationForKeyPath:onLayer:]
  -[SBDashBoardSetupView _removeNormalAnimationForKeyPath:onLayer:]
  -[SBDashBoardSetupView _addResetAnimationForKeyPath:onLayer:dispatchGroup:]
  -[SBDashBoardSetupView setHomeAffordanceView:]
  -[SBDashBoardSetupView activationInfoView]
  -[SBDashBoardSetupView regulatoryInfoView]


SBDismissSiriSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBDismissSiriSwitcherModifier handleGestureEvent:]
  -[SBDismissSiriSwitcherModifier _eventResponseForGestureModifierEvent:]


SBApplicationSceneEntity : SBWorkspaceEntity <SBProcessSettings>
 @property  SBProcessSettings *processSettings
 @property  SBApplicationSceneHandle *sceneHandle
 @property  SBApplication *application
 @property  NSSet *actions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationSceneEntity setObject:forProcessSetting:]
  -[SBApplicationSceneEntity clearProcessSettings]
  -[SBApplicationSceneEntity objectForProcessSetting:]
  -[SBApplicationSceneEntity applyProcessSettings:]
  -[SBApplicationSceneEntity setFlag:forProcessSetting:]
  -[SBApplicationSceneEntity boolForProcessSetting:]
  -[SBApplicationSceneEntity flagForProcessSetting:]
  -[SBApplicationSceneEntity copyProcessSettings]
  -[SBApplicationSceneEntity application]
  -[SBApplicationSceneEntity sceneHandle]
  -[SBApplicationSceneEntity addActions:]
  -[SBApplicationSceneEntity _initializeWithSceneHandle:]
  -[SBApplicationSceneEntity isApplicationSceneEntity]
  -[SBApplicationSceneEntity processSettings]
  -[SBApplicationSceneEntity .cxx_destruct]
  -[SBApplicationSceneEntity translateActivationSettingsToActions]
  -[SBApplicationSceneEntity entityGenerator]
  -[SBApplicationSceneEntity viewControllerClass]
  -[SBApplicationSceneEntity _supportsLayoutRole:]
  -[SBApplicationSceneEntity actions]
  -[SBApplicationSceneEntity applicationSceneEntity]
  -[SBApplicationSceneEntity descriptionBuilderWithMultilinePrefix:]
  -[SBApplicationSceneEntity isEqual:]
  -[SBApplicationSceneEntity removeActions:]
  -[SBApplicationSceneEntity _initWithSceneHandle:]
  -[SBApplicationSceneEntity removeAllActions]
  -[SBApplicationSceneEntity copyWithZone:]


SBPerformTransitionSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBSwitcherTransitionRequest *transitionRequest
 @property  BOOL gestureInitiated

  // instance methods
  -[SBPerformTransitionSwitcherEventResponse .cxx_destruct]
  -[SBPerformTransitionSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBPerformTransitionSwitcherEventResponse type]
  -[SBPerformTransitionSwitcherEventResponse transitionRequest]
  -[SBPerformTransitionSwitcherEventResponse isGestureInitiated]
  -[SBPerformTransitionSwitcherEventResponse initWithTransitionRequest:gestureInitiated:]


SBRecordingIndicatorView : UIView
 @property  unsigned long indicatorShape

  // instance methods
  -[SBRecordingIndicatorView layoutSubviews]
  -[SBRecordingIndicatorView init]
  -[SBRecordingIndicatorView indicatorShape]
  -[SBRecordingIndicatorView setIndicatorShape:]


SBSystemGestureWorkspaceTransaction : SBMainWorkspaceTransaction
 @property  UIGestureRecognizer *gestureRecognizer
 @property  long long completionType

  // instance methods
  -[SBSystemGestureWorkspaceTransaction setGestureRecognizer:]
  -[SBSystemGestureWorkspaceTransaction _didComplete]
  -[SBSystemGestureWorkspaceTransaction _begin]
  -[SBSystemGestureWorkspaceTransaction gestureRecognizer]
  -[SBSystemGestureWorkspaceTransaction .cxx_destruct]
  -[SBSystemGestureWorkspaceTransaction _setupAnimation]
  -[SBSystemGestureWorkspaceTransaction _beginAnimation]
  -[SBSystemGestureWorkspaceTransaction initWithTransitionRequest:]
  -[SBSystemGestureWorkspaceTransaction completionType]
  -[SBSystemGestureWorkspaceTransaction _finishWithCompletionType:]
  -[SBSystemGestureWorkspaceTransaction finishWithCompletionType:]
  -[SBSystemGestureWorkspaceTransaction systemGestureStateChanged:]
  -[SBSystemGestureWorkspaceTransaction shouldSuppressMedusaKeyboardDuringGesture]


SBMainWorkspaceLayoutStateContingencyPlan : NSObject
  // instance methods
  -[SBMainWorkspaceLayoutStateContingencyPlan transitionContextToUndoTransitionContext:]
  -[SBMainWorkspaceLayoutStateContingencyPlan transitionContextForLayoutContext:failedEntities:]


SBFloatingDragAndDropGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBFloatingDragAndDropGestureSwitcherModifier dimmingAlphaForLayoutRole:inAppLayout:]
  -[SBFloatingDragAndDropGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFloatingDragAndDropGestureSwitcherModifier scaleForIndex:]
  -[SBFloatingDragAndDropGestureSwitcherModifier handleTransitionEvent:]
  -[SBFloatingDragAndDropGestureSwitcherModifier frameForIndex:]
  -[SBFloatingDragAndDropGestureSwitcherModifier containerViewBounds]
  -[SBFloatingDragAndDropGestureSwitcherModifier handleGestureEvent:]
  -[SBFloatingDragAndDropGestureSwitcherModifier initWithGestureID:floatingSwitcherVisible:floatingConfiguration:interfaceOrientation:]
  -[SBFloatingDragAndDropGestureSwitcherModifier _isPlatterPreviewIntersectingFloatingApplication]


SBUIMainScreenAnimationController : SBUIWorkspaceAnimationController
 @property  <BSInvalidatable> *colorSamplingAssertion
 @property  <BSInvalidatable> *wallpaperRequiredAssertion
 @property  <BSInvalidatable> *bannerSuppressionAssertion
 @property  SBWorkspaceTransitionRequest *transitionRequest
 @property  NSSet *toApplicationSceneEntities
 @property  SBDeviceApplicationSceneEntity *toApplicationSceneEntity
 @property  NSSet *fromApplicationSceneEntities
 @property  SBDeviceApplicationSceneEntity *fromApplicationSceneEntity

  // instance methods
  -[SBUIMainScreenAnimationController _cleanupAnimation]
  -[SBUIMainScreenAnimationController _begin]
  -[SBUIMainScreenAnimationController .cxx_destruct]
  -[SBUIMainScreenAnimationController bannerSuppressionAssertion]
  -[SBUIMainScreenAnimationController setBannerSuppressionAssertion:]
  -[SBUIMainScreenAnimationController transitionRequest]
  -[SBUIMainScreenAnimationController initWithTransitionContextProvider:]
  -[SBUIMainScreenAnimationController _getTransitionWindow]
  -[SBUIMainScreenAnimationController _shouldDismissBanner]
  -[SBUIMainScreenAnimationController initWithWorkspaceTransitionRequest:]
  -[SBUIMainScreenAnimationController __startAnimation]
  -[SBUIMainScreenAnimationController __wantsInitialProgressStateChange]
  -[SBUIMainScreenAnimationController toApplicationSceneEntity]
  -[SBUIMainScreenAnimationController fromApplicationSceneEntity]
  -[SBUIMainScreenAnimationController _primaryAppOrAnyAppFromSet:]
  -[SBUIMainScreenAnimationController _dismissBannerAnimated:]
  -[SBUIMainScreenAnimationController setColorSamplingAssertion:]
  -[SBUIMainScreenAnimationController setWallpaperRequiredAssertion:]
  -[SBUIMainScreenAnimationController colorSamplingAssertion]
  -[SBUIMainScreenAnimationController wallpaperRequiredAssertion]


SBDodgingItemPreference : NSObject
 @property  {CGSize=dd} preferredSize
 @property  {CGPoint=dd} preferredCenter
 @property  BOOL updateInteractively
 @property  unsigned long dodgingAxisMask
 @property  {CGSize=dd} minimumSize
 @property  BOOL canBePositionedOutsideContainerBounds
 @property  NSSet *excludedDodgingIdentifiers

  // instance methods
  -[SBDodgingItemPreference minimumSize]
  -[SBDodgingItemPreference .cxx_destruct]
  -[SBDodgingItemPreference preferredSize]
  -[SBDodgingItemPreference excludedDodgingIdentifiers]
  -[SBDodgingItemPreference preferredCenter]
  -[SBDodgingItemPreference dodgingAxisMask]
  -[SBDodgingItemPreference canBePositionedOutsideContainerBounds]
  -[SBDodgingItemPreference initWithPreferredSize:preferredCenter:updateInteractively:dodgingAxisMask:minimumSize:canBePositionedOutsideContainerBounds:excludedDodgingIdentifiers:]
  -[SBDodgingItemPreference isUpdatingInteractively]


SBProximitySensorManager : NSObject <SBUIActiveOrientationObserver>
 @property  BOOL objectInProximity
 @property  BOOL proximityDetectionEnabled
 @property  BOOL proximityDetectionPermitted
 @property  SpringBoard *interfaceOrientationProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProximitySensorManager activeInterfaceOrientationWillChangeToOrientation:]
  -[SBProximitySensorManager _setInterfaceOrientationProvider:]
  -[SBProximitySensorManager activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBProximitySensorManager _destroy]
  -[SBProximitySensorManager isProximityDetectionPermitted]
  -[SBProximitySensorManager _reloadDefaults]
  -[SBProximitySensorManager resetProximityCalibration]
  -[SBProximitySensorManager .cxx_destruct]
  -[SBProximitySensorManager _enableProx]
  -[SBProximitySensorManager client:wantsProximityDetectionEnabled:]
  -[SBProximitySensorManager isObjectInProximity]
  -[SBProximitySensorManager _updateProxState]
  -[SBProximitySensorManager init]
  -[SBProximitySensorManager processHIDEvent:]
  -[SBProximitySensorManager _interfaceOrientationProvider]
  -[SBProximitySensorManager addObserver:]
  -[SBProximitySensorManager initWithHIDInterface:hardwareDefaults:interfaceOrientationProvider:]
  -[SBProximitySensorManager isProximityDetectionEnabled]
  -[SBProximitySensorManager _proximityDidChange:]
  -[SBProximitySensorManager _clientsWantDetectionEnabled]
  -[SBProximitySensorManager _setProximityDetectionEnabled:]
  -[SBProximitySensorManager removeObserver:]
  -[SBProximitySensorManager _setObjectInProximity:]
  -[SBProximitySensorManager _setProximityDetectionPermitted:]
  -[SBProximitySensorManager _disableProx]


SBVolumeHardwareButtonActions : NSObject
  // instance methods
  -[SBVolumeHardwareButtonActions .cxx_destruct]
  -[SBVolumeHardwareButtonActions cancelVolumePress]
  -[SBVolumeHardwareButtonActions addVolumePressBandit:]
  -[SBVolumeHardwareButtonActions removeVolumePressBandit:]
  -[SBVolumeHardwareButtonActions volumeIncreasePressDownWithModifiers:]
  -[SBVolumeHardwareButtonActions volumeIncreasePressUp]
  -[SBVolumeHardwareButtonActions volumeDecreasePressDownWithModifiers:]
  -[SBVolumeHardwareButtonActions volumeDecreasePressUp]
  -[SBVolumeHardwareButtonActions _handleVolumeButtonDownForIncrease:modifiers:]
  -[SBVolumeHardwareButtonActions _handleVolumeButtonUpForIncrease:]
  -[SBVolumeHardwareButtonActions _handleVolumeIncreaseUp]
  -[SBVolumeHardwareButtonActions _handleVolumeDecreaseUp]
  -[SBVolumeHardwareButtonActions _sendVolumeButtonToSBUIControllerForIncrease:down:]
  -[SBVolumeHardwareButtonActions _launchVolumeSettings]
  -[SBVolumeHardwareButtonActions _sendBanditsVolumeIncreased]
  -[SBVolumeHardwareButtonActions _sendBanditsVolumeDecreased]
  -[SBVolumeHardwareButtonActions _sendVolumeButtonDownToSpringBoardInternalUIForIncrease:]
  -[SBVolumeHardwareButtonActions _sendVolumeButtonDownToLegacyRegisteredClientsForIncrease:]
  -[SBVolumeHardwareButtonActions _sendVolumeButtonDownToSBUIControllerForIncrease:]


SBDashBoardSpotlightPresenter : NSObject <SPUIRemoteSearchViewDelegate, SBFLegibilitySettingsProviderDelegate, SBDashBoardSpotlightViewControllerDelegate, CSSpotlightPresenting>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardSpotlightPresenter dismissSearchView]
  -[SBDashBoardSpotlightPresenter providerLegibilitySettingsChanged:]
  -[SBDashBoardSpotlightPresenter .cxx_destruct]
  -[SBDashBoardSpotlightPresenter dismissSpotlightWithCompletion:]
  -[SBDashBoardSpotlightPresenter launchSpotlightForSourceViewController:interactive:completion:]
  -[SBDashBoardSpotlightPresenter spotlightMultiplexingLevelForSpotlightViewController:]
  -[SBDashBoardSpotlightPresenter remoteSearchViewPresentationSourceForSpotlightViewController:]
  -[SBDashBoardSpotlightPresenter homeGestureParticipantIdentifierForSpotlightViewController:]
  -[SBDashBoardSpotlightPresenter zStackParticipantIdentifierForSpotlightViewController:]
  -[SBDashBoardSpotlightPresenter initWithPresenterViewController:spotlightMultiplexingLevel:remoteSearchViewPresentationSource:homeGestureParticipantIdentifier:zStackParticipantIdentifier:]
  -[SBDashBoardSpotlightPresenter createSpotlightLegiblitySettingsProvider]
  -[SBDashBoardSpotlightPresenter dismissSpotlight]
  -[SBDashBoardSpotlightPresenter launchSpotlightForSourceViewController:interactive:]


SBHomeScreenNagAlert : SBDismissOnlyAlertItem
  // instance methods
  -[SBHomeScreenNagAlert shouldShowInLockScreen]
  -[SBHomeScreenNagAlert dismissOnLock]


SBFloatingDockWindowLevelAssertion : NSObject <BSDescriptionProviding, BSInvalidatable>
 @property  unsigned long priority
 @property  double level
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFloatingDockWindowLevelAssertion level]
  -[SBFloatingDockWindowLevelAssertion .cxx_destruct]
  -[SBFloatingDockWindowLevelAssertion succinctDescriptionBuilder]
  -[SBFloatingDockWindowLevelAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBFloatingDockWindowLevelAssertion descriptionWithMultilinePrefix:]
  -[SBFloatingDockWindowLevelAssertion succinctDescription]
  -[SBFloatingDockWindowLevelAssertion reason]
  -[SBFloatingDockWindowLevelAssertion priority]
  -[SBFloatingDockWindowLevelAssertion dealloc]
  -[SBFloatingDockWindowLevelAssertion invalidate]
  -[SBFloatingDockWindowLevelAssertion initWithPriority:level:reason:]


SBBookmark : SBHBookmark
  // instance methods
  -[SBBookmark icon:launchFromLocation:context:]
  -[SBBookmark isTimedOutForIcon:]


SBTodayWidgetXCodeDebuggingUtility : NSObject
  // instance methods
  -[SBTodayWidgetXCodeDebuggingUtility .cxx_destruct]
  -[SBTodayWidgetXCodeDebuggingUtility init]
  -[SBTodayWidgetXCodeDebuggingUtility launchTodayViewFromCurrentContextWithCompletion:]
  -[SBTodayWidgetXCodeDebuggingUtility _reallyLaunchTodayViewFromCurrentContextWithCompletion:]


_SBTopAffordanceView : SBFTouchPassThroughView
  // instance methods
  -[_SBTopAffordanceView pointInside:withEvent:]


SBTopAffordanceViewController : UIViewController <PTSettingsKeyPathObserver, SBAttentionAwarenessClientDelegate, SBTransientUITapToDismissParticipant, SBTransientUITapToUnhideParticipant, SBTransientUIIndirectPanToDismissParticipant>
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  SBTopAffordanceDotsView *dotsView
 @property  UIView *pillContentsView
 @property  UIView *pillBackgroundContainerView
 @property  MTMaterialView *pillBackgroundView
 @property  MTMaterialView *captureOnlyPillBackgroundView
 @property  UIView *pillShadowView
 @property  SBTopAffordanceButton *fullScreenButton
 @property  SBTopAffordanceButton *slideOverButton
 @property  SBTopAffordanceButton *splitViewButton
 @property  SBTopAffordanceButton *centerWindowButton
 @property  SBTopAffordanceButton *splitViewLeftButton
 @property  SBTopAffordanceButton *splitViewRightButton
 @property  UIView *dividerView
 @property  BSSpringAnimationSettings *styleSettings
 @property  double additionalTopInset
 @property  <SBTopAffordanceViewControllerDelegate> *delegate
 @property  BOOL autoHides
 @property  long long topAffordanceMode
 @property  BOOL highlighted
 @property  BOOL expanded
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTopAffordanceViewController collapsedHitTestWidth]

  // instance methods
  -[SBTopAffordanceViewController setHighlighted:]
  -[SBTopAffordanceViewController settings:changedValueForKeyPath:]
  -[SBTopAffordanceViewController isExpanded]
  -[SBTopAffordanceViewController traitCollectionDidChange:]
  -[SBTopAffordanceViewController sceneHandle]
  -[SBTopAffordanceViewController .cxx_destruct]
  -[SBTopAffordanceViewController viewDidLoad]
  -[SBTopAffordanceViewController isHidden]
  -[SBTopAffordanceViewController setDelegate:]
  -[SBTopAffordanceViewController shouldAutorotate]
  -[SBTopAffordanceViewController isHighlighted]
  -[SBTopAffordanceViewController client:attentionLostTimeoutDidExpire:forConfigurationGeneration:withAssociatedObject:]
  -[SBTopAffordanceViewController setOverrideUserInterfaceStyle:]
  -[SBTopAffordanceViewController delegate]
  -[SBTopAffordanceViewController dealloc]
  -[SBTopAffordanceViewController clientDidResetForUserAttention:]
  -[SBTopAffordanceViewController loadView]
  -[SBTopAffordanceViewController dismissAnimated:]
  -[SBTopAffordanceViewController setHidden:]
  -[SBTopAffordanceViewController dividerView]
  -[SBTopAffordanceViewController fullScreenButton]
  -[SBTopAffordanceViewController pillBackgroundView]
  -[SBTopAffordanceViewController initWithDeviceApplicationSceneHandle:]
  -[SBTopAffordanceViewController transientUI:wasTappedToUnhideFromGestureRecognizer:]
  -[SBTopAffordanceViewController transientUI:wasIndirectPannedToDismissFromGestureRecognizer:]
  -[SBTopAffordanceViewController transientUIHandledTouch:withSystemGestureRecognizer:]
  -[SBTopAffordanceViewController setAutoHides:]
  -[SBTopAffordanceViewController _setSystemPointerInteractionEnabled:]
  -[SBTopAffordanceViewController _updateIdleTouchAwarenessClient]
  -[SBTopAffordanceViewController _calculatePresence]
  -[SBTopAffordanceViewController _invalidateInitialAutoHideTime]
  -[SBTopAffordanceViewController autoHides]
  -[SBTopAffordanceViewController dotsView]
  -[SBTopAffordanceViewController setHidden:forReason:animated:]
  -[SBTopAffordanceViewController _emitAnalyticsEventForMenuInteraction:]
  -[SBTopAffordanceViewController setTopAffordanceMode:animated:]
  -[SBTopAffordanceViewController configureButtonsWithLayoutRole:spaceConfiguration:floatingConfiguration:interfaceOrientation:duration:]
  -[SBTopAffordanceViewController setAdditionalTopInset:]
  -[SBTopAffordanceViewController presentButtonsWithSelectedButtonType:animated:]
  -[SBTopAffordanceViewController presentTransientMessageWithImage:title:subtitle:duration:animated:]
  -[SBTopAffordanceViewController _lockScreenUIDidLock:]
  -[SBTopAffordanceViewController _makeDotsView]
  -[SBTopAffordanceViewController _updateDotsForTopAffordanceMode:animated:]
  -[SBTopAffordanceViewController _updateStyleForOverrideUserInterfaceStyle]
  -[SBTopAffordanceViewController _loadPillSubviewsIfNeeded]
  -[SBTopAffordanceViewController _sceneSupportsCenterWindow]
  -[SBTopAffordanceViewController _setTopAffordanceMode:withSelectedButtonType:animated:]
  -[SBTopAffordanceViewController topAffordanceMode]
  -[SBTopAffordanceViewController _applicationIsInOrCanMoveToSplitViewFromLayoutRole:]
  -[SBTopAffordanceViewController _dismissIfNeededWithLocation:window:]
  -[SBTopAffordanceViewController _unhideIfAutoHidden]
  -[SBTopAffordanceViewController _hasLoadedPillSubviews]
  -[SBTopAffordanceViewController _applicationSupportsMedusa]
  -[SBTopAffordanceViewController _primaryApplicationSupportsMedusa]
  -[SBTopAffordanceViewController _makePillBackgroundViewCaptureOnly:]
  -[SBTopAffordanceViewController _makePillShadowView]
  -[SBTopAffordanceViewController _makePillBackgroundContainerView]
  -[SBTopAffordanceViewController _makePillContentsView]
  -[SBTopAffordanceViewController _topAffordanceButtonTapped:]
  -[SBTopAffordanceViewController _makeDividerView]
  -[SBTopAffordanceViewController _loadPillBackgroundAndContentViews]
  -[SBTopAffordanceViewController _loadPillButtonsView]
  -[SBTopAffordanceViewController _loadPillMessageView]
  -[SBTopAffordanceViewController _updatePillContentsIfNeededForCurrentTopAffordanceMode:previousTopAffordanceMode:]
  -[SBTopAffordanceViewController _updatePillForTopAffordanceMode:animated:]
  -[SBTopAffordanceViewController _updatePrimaryButtonsForTopAffordanceMode:selectedButtonType:animated:]
  -[SBTopAffordanceViewController _updateChooseSplitButtonsForTopAffordanceMode:animated:]
  -[SBTopAffordanceViewController _animationSettingsForTopAffordanceMode:]
  -[SBTopAffordanceViewController _dotsViewHorizontalOffsetForShowingCenterWindow]
  -[SBTopAffordanceViewController _animateWithSettings:mode:animations:]
  -[SBTopAffordanceViewController _animationSettingsForTransitionFromPresence:toPresence:]
  -[SBTopAffordanceViewController _updatePresence:withAnimationSettings:]
  -[SBTopAffordanceViewController _updatePresence]
  -[SBTopAffordanceViewController setTopAffordanceMode:]
  -[SBTopAffordanceViewController pillContentsView]
  -[SBTopAffordanceViewController pillBackgroundContainerView]
  -[SBTopAffordanceViewController captureOnlyPillBackgroundView]
  -[SBTopAffordanceViewController pillShadowView]
  -[SBTopAffordanceViewController slideOverButton]
  -[SBTopAffordanceViewController splitViewButton]
  -[SBTopAffordanceViewController centerWindowButton]
  -[SBTopAffordanceViewController splitViewLeftButton]
  -[SBTopAffordanceViewController splitViewRightButton]
  -[SBTopAffordanceViewController styleSettings]
  -[SBTopAffordanceViewController setStyleSettings:]
  -[SBTopAffordanceViewController additionalTopInset]


SBRoundedRectBorderView : UIView
 @property  UIColor *borderColor
 @property  double borderWidth
 @property  double cornerRadius

  // instance methods
  -[SBRoundedRectBorderView setBorderWidth:]
  -[SBRoundedRectBorderView borderWidth]
  -[SBRoundedRectBorderView borderColor]
  -[SBRoundedRectBorderView setBorderColor:]
  -[SBRoundedRectBorderView setCornerRadius:]
  -[SBRoundedRectBorderView initWithFrame:]
  -[SBRoundedRectBorderView cornerRadius]


SBSceneViewAppIconView : UIView
 @property  UILabel *label
 @property  PLPlatterView *shadowView
 @property  SBIconImageView *imageView

  // instance methods
  -[SBSceneViewAppIconView label]
  -[SBSceneViewAppIconView imageView]
  -[SBSceneViewAppIconView .cxx_destruct]
  -[SBSceneViewAppIconView layoutSubviews]
  -[SBSceneViewAppIconView shadowView]
  -[SBSceneViewAppIconView sizeThatFits:]
  -[SBSceneViewAppIconView initWithIcon:]


SBGridSwitcherViewController : SBFluidSwitcherViewController <SBFSpringLoadedInteractionBehaviorDelegate, SBFSpringLoadedInteractionEffectDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBGridSwitcherViewController targetViewForSpringLoadingEffectForView:]
  -[SBGridSwitcherViewController targetItemForSpringLoadingInteractionInView:atLocation:forDropSession:]
  -[SBGridSwitcherViewController viewDidLoad]
  -[SBGridSwitcherViewController _setupSpringLoadingSupport]


_SBKeyboardFocusPolicy : NSObject <BSDescriptionStreamable, NSCopying, NSMutableCopying>
 @property  unsigned long policyGeneration
 @property  BKSHIDEventDeferringTarget *keyboardFocusTarget
 @property  FBSSceneIdentityToken *overrideSceneIdentityToken
 @property  _SBRecentlyUsedSceneIdentityCache *recentlyUsedScenes
 @property  long long advicePolicy
 @property  BOOL shouldSuppressRemoteDeferring
 @property  BOOL cameraIsHosted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SBKeyboardFocusPolicy new]
  +[_SBKeyboardFocusPolicy build:]

  // instance methods
  -[_SBKeyboardFocusPolicy policyGeneration]
  -[_SBKeyboardFocusPolicy appendDescriptionToFormatter:]
  -[_SBKeyboardFocusPolicy advicePolicy]
  -[_SBKeyboardFocusPolicy cameraIsHosted]
  -[_SBKeyboardFocusPolicy .cxx_destruct]
  -[_SBKeyboardFocusPolicy shouldSuppressRemoteDeferring]
  -[_SBKeyboardFocusPolicy init]
  -[_SBKeyboardFocusPolicy isEqual:]
  -[_SBKeyboardFocusPolicy keyboardFocusTarget]
  -[_SBKeyboardFocusPolicy mutableCopyWithZone:]
  -[_SBKeyboardFocusPolicy recentlyUsedScenes]
  -[_SBKeyboardFocusPolicy copyWithZone:]
  -[_SBKeyboardFocusPolicy overrideSceneIdentityToken]


_SBMutableKeyboardFocusPolicy : _SBKeyboardFocusPolicy
 @property  BKSHIDEventDeferringTarget *keyboardFocusTarget
 @property  FBSSceneIdentityToken *overrideSceneIdentityToken
 @property  _SBRecentlyUsedSceneIdentityCache *recentlyUsedScenes
 @property  long long advicePolicy
 @property  BOOL shouldSuppressRemoteDeferring
 @property  BOOL cameraIsHosted

  // instance methods
  -[_SBMutableKeyboardFocusPolicy setShouldSuppressRemoteDeferring:]
  -[_SBMutableKeyboardFocusPolicy setRecentlyUsedScenes:]
  -[_SBMutableKeyboardFocusPolicy setAdvicePolicy:]
  -[_SBMutableKeyboardFocusPolicy setOverrideSceneIdentityToken:]
  -[_SBMutableKeyboardFocusPolicy setKeyboardFocusTarget:]
  -[_SBMutableKeyboardFocusPolicy setCameraIsHosted:]


SBDashBoardPluginView : CSCoverSheetViewBase
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} presentationRegion

  // instance methods
  -[SBDashBoardPluginView presentationRegions]
  -[SBDashBoardPluginView presentationRegion]
  -[SBDashBoardPluginView setPresentationRegion:]


SBDashBoardOrientationController : NSObject <CSOrientationUpdateControlling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardOrientationController .cxx_destruct]
  -[SBDashBoardOrientationController deferOrientationUpdatesWithReason:]
  -[SBDashBoardOrientationController cancelOrientationUpdateDeferral]
  -[SBDashBoardOrientationController noteInterfaceOrientationChanged:duration:logMessage:]


SBSpuriousScreenUndimmingAssertion : NSObject
  // class methods
  +[SBSpuriousScreenUndimmingAssertion isAnyActive]
  +[SBSpuriousScreenUndimmingAssertion _accessListWithBlock:]

  // instance methods
  -[SBSpuriousScreenUndimmingAssertion initWithIdentifier:]
  -[SBSpuriousScreenUndimmingAssertion .cxx_destruct]
  -[SBSpuriousScreenUndimmingAssertion dealloc]
  -[SBSpuriousScreenUndimmingAssertion invalidate]


SBPanSystemGestureRecognizer : UIPanGestureRecognizer
 @property  NSTimer *noHysterisisCancellationTimer
 @property  <SBPanSystemGestureRecognizerDelegate> *delegate
 @property  BOOL failsPastMaximumPressDurationWithoutHysteresis
 @property  double maximumPressDuration

  // instance methods
  -[SBPanSystemGestureRecognizer .cxx_destruct]
  -[SBPanSystemGestureRecognizer initWithTarget:action:]
  -[SBPanSystemGestureRecognizer touchesBegan:withEvent:]
  -[SBPanSystemGestureRecognizer setState:]
  -[SBPanSystemGestureRecognizer reset]
  -[SBPanSystemGestureRecognizer maximumPressDuration]
  -[SBPanSystemGestureRecognizer setMaximumPressDuration:]
  -[SBPanSystemGestureRecognizer dealloc]
  -[SBPanSystemGestureRecognizer setFailsPastMaximumPressDurationWithoutHysteresis:]
  -[SBPanSystemGestureRecognizer invalidateNoHysterisisCancellationTimer]
  -[SBPanSystemGestureRecognizer failsPastMaximumPressDurationWithoutHysteresis]
  -[SBPanSystemGestureRecognizer setupNoHysterisisCancellationTimerIfNeeded]
  -[SBPanSystemGestureRecognizer noHysterisisCancellationTimer]
  -[SBPanSystemGestureRecognizer setNoHysterisisCancellationTimer:]


SBRemoteAlertHandleServer : NSObject <BSServiceConnectionListenerDelegate, SBSRemoteAlertHandleServiceServerInterface, SBRemoteTransientOverlaySessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRemoteAlertHandleServer listener:didReceiveConnection:withContext:]
  -[SBRemoteAlertHandleServer .cxx_destruct]
  -[SBRemoteAlertHandleServer remoteTransientOverlaySession:didInvalidateWithReason:error:]
  -[SBRemoteAlertHandleServer invalidateRemoteAlertHandleWithID:]
  -[SBRemoteAlertHandleServer activateRemoteAlertHandleWithID:activationContext:]
  -[SBRemoteAlertHandleServer remoteAlertHandleContextsForDefinition:allowsCreationValue:configurationContext:]
  -[SBRemoteAlertHandleServer createRemoteAlertHandleContextWithDefinition:configurationContext:]
  -[SBRemoteAlertHandleServer activate]
  -[SBRemoteAlertHandleServer initWithSessionManager:]
  -[SBRemoteAlertHandleServer dealloc]
  -[SBRemoteAlertHandleServer _handleDisconnectForServiceConnection:]
  -[SBRemoteAlertHandleServer remoteTransientOverlaySessionDidActivate:]
  -[SBRemoteAlertHandleServer remoteTransientOverlaySessionDidDeactivate:]
  -[SBRemoteAlertHandleServer _shouldAllowAuditToken:forDefinition:]
  -[SBRemoteAlertHandleServer _addConnection:forSession:]
  -[SBRemoteAlertHandleServer _removeConnection:forSession:]


_SBRemoteAlertHandleServerTarget : NSObject <SBSRemoteAlertHandleServiceServerInterface>
 @property  BSServiceConnection *connection
 @property  <SBSRemoteAlertHandleServiceServerInterface> *proxyInterface

  // class methods
  +[_SBRemoteAlertHandleServerTarget currentTarget]

  // instance methods
  -[_SBRemoteAlertHandleServerTarget _performBlock:]
  -[_SBRemoteAlertHandleServerTarget proxyInterface]
  -[_SBRemoteAlertHandleServerTarget setProxyInterface:]
  -[_SBRemoteAlertHandleServerTarget .cxx_destruct]
  -[_SBRemoteAlertHandleServerTarget invalidateRemoteAlertHandleWithID:]
  -[_SBRemoteAlertHandleServerTarget activateRemoteAlertHandleWithID:activationContext:]
  -[_SBRemoteAlertHandleServerTarget remoteAlertHandleContextsForDefinition:allowsCreationValue:configurationContext:]
  -[_SBRemoteAlertHandleServerTarget createRemoteAlertHandleContextWithDefinition:configurationContext:]
  -[_SBRemoteAlertHandleServerTarget connection]
  -[_SBRemoteAlertHandleServerTarget initWithConnection:proxyInterface:]


SBIconBlurryBackgroundView : UIView
  // instance methods
  -[SBIconBlurryBackgroundView didAddSubview:]
  -[SBIconBlurryBackgroundView .cxx_destruct]
  -[SBIconBlurryBackgroundView layoutSubviews]
  -[SBIconBlurryBackgroundView initWithFrame:]


SBClawGestureLogger : NSObject
  // instance methods
  -[SBClawGestureLogger .cxx_destruct]
  -[SBClawGestureLogger init]
  -[SBClawGestureLogger noteActiveGesturePressTypes:wasClawGestureActive:isClawGestureActive:]
  -[SBClawGestureLogger noteSOSTriggered]
  -[SBClawGestureLogger _publishLoggedData]
  -[SBClawGestureLogger _resetLoggedData]


SBAppSwitcherSnapshotViewState : NSObject
  // instance methods
  -[SBAppSwitcherSnapshotViewState .cxx_destruct]


SBAppSwitcherReusableSnapshotView : SBSwitcherWallpaperPageContentView <SBAppSwitcherSnapshotImageCacheObserver, SBReusableView, SBAppSwitcherPageContentView>
 @property  SBAppLayout *appLayout
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  long long orientation
 @property  BOOL contentRequiresGroupOpacity
 @property  BOOL active
 @property  BOOL visible

  // instance methods
  -[SBAppSwitcherReusableSnapshotView setOrientation:]
  -[SBAppSwitcherReusableSnapshotView appLayout]
  -[SBAppSwitcherReusableSnapshotView setUsesNonuniformScaling:]
  -[SBAppSwitcherReusableSnapshotView _handleInstalledAppsChanged:]
  -[SBAppSwitcherReusableSnapshotView setWallpaperStyle:]
  -[SBAppSwitcherReusableSnapshotView _updateCornerRadiusIfNecessaryForSnapshotImageView:cacheEntry:]
  -[SBAppSwitcherReusableSnapshotView setAppLayout:]
  -[SBAppSwitcherReusableSnapshotView _updateCornerRadius]
  -[SBAppSwitcherReusableSnapshotView setVisible:]
  -[SBAppSwitcherReusableSnapshotView setShouldUseBrightMaterial:]
  -[SBAppSwitcherReusableSnapshotView isActive]
  -[SBAppSwitcherReusableSnapshotView hasSceneOverlayView]
  -[SBAppSwitcherReusableSnapshotView shouldUseBrightMaterial]
  -[SBAppSwitcherReusableSnapshotView .cxx_destruct]
  -[SBAppSwitcherReusableSnapshotView _performDeferredSnapshotUpdatesIfNecessaryForRole:]
  -[SBAppSwitcherReusableSnapshotView _sceneHandleForRole:]
  -[SBAppSwitcherReusableSnapshotView didUpdateCacheEntry:]
  -[SBAppSwitcherReusableSnapshotView layoutSubviews]
  -[SBAppSwitcherReusableSnapshotView contentRequiresGroupOpacity]
  -[SBAppSwitcherReusableSnapshotView _frameForBackstopLayer]
  -[SBAppSwitcherReusableSnapshotView _snapshotImageFrameForCacheEntry:]
  -[SBAppSwitcherReusableSnapshotView _updateCornerRadiusIfNecessaryForOverlayView:matchingSnapshotImage:]
  -[SBAppSwitcherReusableSnapshotView _applicationForRole:]
  -[SBAppSwitcherReusableSnapshotView _isSnapshotSuspendSnapshot:]
  -[SBAppSwitcherReusableSnapshotView _updateTranslucency]
  -[SBAppSwitcherReusableSnapshotView _updateDivider]
  -[SBAppSwitcherReusableSnapshotView isVisible]
  -[SBAppSwitcherReusableSnapshotView _setAnimatingTransition:forRole:]
  -[SBAppSwitcherReusableSnapshotView _addOverlayViewController:toOrientationWrapperForRole:]
  -[SBAppSwitcherReusableSnapshotView _allImageViews]
  -[SBAppSwitcherReusableSnapshotView prepareForReuse]
  -[SBAppSwitcherReusableSnapshotView _requestFreshImages]
  -[SBAppSwitcherReusableSnapshotView _setSceneHandle:forRole:]
  -[SBAppSwitcherReusableSnapshotView _updateContentOrientationForRole:]
  -[SBAppSwitcherReusableSnapshotView _contentOrientationForSnapshotCacheEntry:]
  -[SBAppSwitcherReusableSnapshotView _addAppLockoutOverlayIfNecessaryForRole:]
  -[SBAppSwitcherReusableSnapshotView _updateSceneHandleForRole:]
  -[SBAppSwitcherReusableSnapshotView initWithDelegate:snapshotCache:lockoutVCProvider:appClipOverlayCoordinator:containerViewController:]
  -[SBAppSwitcherReusableSnapshotView setShowingIconOverlayView:]
  -[SBAppSwitcherReusableSnapshotView setActive:]
  -[SBAppSwitcherReusableSnapshotView _isAnimatingTransitionForRole:]
  -[SBAppSwitcherReusableSnapshotView _setCacheEntry:forRole:]
  -[SBAppSwitcherReusableSnapshotView _frameInLayoutSpaceForRole:inAppLayout:inOrientation:]
  -[SBAppSwitcherReusableSnapshotView _updateToNewSnapshotImageUsingCacheEntry:]
  -[SBAppSwitcherReusableSnapshotView _cacheEntryForRole:]
  -[SBAppSwitcherReusableSnapshotView _orientationWrapperForRole:]
  -[SBAppSwitcherReusableSnapshotView invalidate]
  -[SBAppSwitcherReusableSnapshotView _removeAppClipOverlayForRole:]
  -[SBAppSwitcherReusableSnapshotView setShouldStretchToBounds:]
  -[SBAppSwitcherReusableSnapshotView _addAppClipOverlayForRole:bundleIdentifier:sceneIdentifier:]
  -[SBAppSwitcherReusableSnapshotView _imageViewForRole:]
  -[SBAppSwitcherReusableSnapshotView _removeAppLockoutOverlayForRole:]
  -[SBAppSwitcherReusableSnapshotView _configureSnapshotImageView:cacheEntry:]


SBDeviceApplicationSceneViewPlaceholderContentViewProvider : NSObject <SBScenePlaceholderContentViewProvider>
 @property  <SBScenePlaceholderContentViewProviderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider initWithApplication:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider .cxx_destruct]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _loadLiveXIBViewForApplication:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider setDelegate:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider sceneView:requestsPlaceholderContentViewWithContext:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _contentViewFromSceneHandle:displayConfiguration:orientation:snapshot:size:statusBarDescriptor:hasOrientationMismatchForClassicApp:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _contentTypeToSearchFromSceneHandle:withContext:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _snapshotsDidChange:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _initWithApplication:userInterfaceStyleArbiter:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider delegate]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider dealloc]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _naturalSizeForOrientation:referenceSize:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _checkApplicationRestorationState:useSnapshot:]


_SBDeviceApplicationSceneViewPlaceholderContentView : SBOrientationTransformWrapperView <SBScenePlaceholderContentView>
 @property  long long statusBarStyle
 @property  long long containerOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBDeviceApplicationSceneViewPlaceholderContentView statusBarStyle]
  -[_SBDeviceApplicationSceneViewPlaceholderContentView setStatusBarStyle:]


SBSwitcherPresentationInteractionMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherPresentationInteractionMetric handleEvent:withContext:]
  -[SBSwitcherPresentationInteractionMetric .cxx_destruct]
  -[SBSwitcherPresentationInteractionMetric init]


SBAsymmetricalCornerRadiusWrapperView : SBHitTestExtendedView
 @property  BSCornerRadiusConfiguration *cornerRadiusConfiguration
 @property  unsigned long maskedCorners
 @property  NSArray *contentViews

  // instance methods
  -[SBAsymmetricalCornerRadiusWrapperView setClipsToBounds:]
  -[SBAsymmetricalCornerRadiusWrapperView addContentView:]
  -[SBAsymmetricalCornerRadiusWrapperView _updateCornerRadius]
  -[SBAsymmetricalCornerRadiusWrapperView contentViews]
  -[SBAsymmetricalCornerRadiusWrapperView .cxx_destruct]
  -[SBAsymmetricalCornerRadiusWrapperView setMaskedCorners:]
  -[SBAsymmetricalCornerRadiusWrapperView cornerRadiusConfiguration]
  -[SBAsymmetricalCornerRadiusWrapperView initWithFrame:]
  -[SBAsymmetricalCornerRadiusWrapperView setCornerRadiusConfiguration:]
  -[SBAsymmetricalCornerRadiusWrapperView maskedCorners]
  -[SBAsymmetricalCornerRadiusWrapperView bringContentViewToFront:]
  -[SBAsymmetricalCornerRadiusWrapperView _updateMaskedCorners]
  -[SBAsymmetricalCornerRadiusWrapperView sendContentViewToBack:]


SBSplitAllDisplayItemsSwitcherModifier : SBSwitcherModifier
 @property  BOOL hasInvalidatedAppLayoutsForInsertion
 @property  BOOL hasInvalidatedAppLayoutsForRemoval

  // instance methods
  -[SBSplitAllDisplayItemsSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBSplitAllDisplayItemsSwitcherModifier handleEvent:]
  -[SBSplitAllDisplayItemsSwitcherModifier hasInvalidatedAppLayoutsForInsertion]
  -[SBSplitAllDisplayItemsSwitcherModifier setHasInvalidatedAppLayoutsForInsertion:]
  -[SBSplitAllDisplayItemsSwitcherModifier hasInvalidatedAppLayoutsForRemoval]
  -[SBSplitAllDisplayItemsSwitcherModifier setHasInvalidatedAppLayoutsForRemoval:]


SBRouteToAppExposeSwitcherModifier : SBTransitionSwitcherModifier
 @property  BOOL reversesFloatingCardDirection

  // instance methods
  -[SBRouteToAppExposeSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBRouteToAppExposeSwitcherModifier plusButtonStyle]
  -[SBRouteToAppExposeSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBRouteToAppExposeSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBRouteToAppExposeSwitcherModifier handleTransitionEvent:]
  -[SBRouteToAppExposeSwitcherModifier .cxx_destruct]
  -[SBRouteToAppExposeSwitcherModifier scrollViewAttributes]
  -[SBRouteToAppExposeSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBRouteToAppExposeSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBRouteToAppExposeSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBRouteToAppExposeSwitcherModifier snapshotScaleForAppLayout:]
  -[SBRouteToAppExposeSwitcherModifier reversesFloatingCardDirection]
  -[SBRouteToAppExposeSwitcherModifier setReversesFloatingCardDirection:]
  -[SBRouteToAppExposeSwitcherModifier initWithTransitionID:appExposeModifier:]


SBTouchHistory : NSObject <SBGestureRecognizerTouchHistoryProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTouchHistory conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBTouchHistory averageTouchVelocityOverTimeDuration:]
  -[SBTouchHistory peakSpeed]
  -[SBTouchHistory averageTouchPathAngleOverTimeDuration:]
  -[SBTouchHistory init]
  -[SBTouchHistory touchHistoryDepthForTimeDuration:forComputingDerivative:]
  -[SBTouchHistory reset]
  -[SBTouchHistory updateWithLocation:timestamp:]
  -[SBTouchHistory dealloc]
  -[SBTouchHistory initWithDepth:]


SBHomeGestureToZoomDownSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBHomeGestureToZoomDownSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeGestureToZoomDownSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeGestureToZoomDownSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBHomeGestureToZoomDownSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeGestureToZoomDownSwitcherModifier .cxx_destruct]
  -[SBHomeGestureToZoomDownSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeGestureToZoomDownSwitcherModifier wallpaperStyle]
  -[SBHomeGestureToZoomDownSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureToZoomDownSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeGestureToZoomDownSwitcherModifier completesWhenChildrenComplete]
  -[SBHomeGestureToZoomDownSwitcherModifier responseForProposedChildResponse:childModifier:event:]
  -[SBHomeGestureToZoomDownSwitcherModifier initWithTransitionID:appLayout:nonGestureInitiatedZoomModifier:effectiveStartingEnvironmentMode:liftOffVelocity:]


SBReachabilityGestureRecognizer : UIGestureRecognizer
 @property  SBTouchHistory *touchHistory
 @property  UITouch *activeTouch
 @property  {CGPoint=dd} initialTouchLocation
 @property  BOOL everTranslatedUpwards
 @property  BOOL movedPastHysteresis
 @property  SBReachabilitySettings *settings

  // instance methods
  -[SBReachabilityGestureRecognizer setTouchHistory:]
  -[SBReachabilityGestureRecognizer .cxx_destruct]
  -[SBReachabilityGestureRecognizer touchHistory]
  -[SBReachabilityGestureRecognizer initWithTarget:action:]
  -[SBReachabilityGestureRecognizer touchesBegan:withEvent:]
  -[SBReachabilityGestureRecognizer setSettings:]
  -[SBReachabilityGestureRecognizer touchesMoved:withEvent:]
  -[SBReachabilityGestureRecognizer reset]
  -[SBReachabilityGestureRecognizer touchesCancelled:withEvent:]
  -[SBReachabilityGestureRecognizer setActiveTouch:]
  -[SBReachabilityGestureRecognizer activeTouch]
  -[SBReachabilityGestureRecognizer settings]
  -[SBReachabilityGestureRecognizer touchesEnded:withEvent:]
  -[SBReachabilityGestureRecognizer initialTouchLocation]
  -[SBReachabilityGestureRecognizer setInitialTouchLocation:]
  -[SBReachabilityGestureRecognizer everTranslatedUpwards]
  -[SBReachabilityGestureRecognizer setEverTranslatedUpwards:]
  -[SBReachabilityGestureRecognizer movedPastHysteresis]
  -[SBReachabilityGestureRecognizer setMovedPastHysteresis:]


SBPIPInterruptionDebouncingTimer : BSTimer
 @property  SBPIPInterruptionAssertion *debouncedAssertion

  // instance methods
  -[SBPIPInterruptionDebouncingTimer .cxx_destruct]
  -[SBPIPInterruptionDebouncingTimer setDebouncedAssertion:]
  -[SBPIPInterruptionDebouncingTimer debouncedAssertion]


SBPIPController : NSObject <SBPIPContainerViewControllerObserver, SBAlertItemsControllerObserver, SBAssistantObserver, SBSensorActivityObserver, SBWorkspaceKeyboardFocusControllerObserver, SBPIPControllerAdapterContextProviding, SBLayoutStateTransitionObserver, SBIdleTimerProviding, SBPIPMorphAnimatorControllerDelegate>
 @property  BOOL hasIdleTimerBehaviors
 @property  {UIEdgeInsets=dddd} minimumStashedPadding
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double windowLevel

  // class methods
  +[SBPIPController _layoutState:hasMeaningfullyChangedFromOldLayoutState:]

  // instance methods
  -[SBPIPController _lockStateDidChange:]
  -[SBPIPController assistantWillAppear:]
  -[SBPIPController _enumerateObserversRespondingToSelector:usingBlock:]
  -[SBPIPController coordinatorRequestedIdleTimerBehavior:]
  -[SBPIPController acquireInterruptionAssertionForReason:identifier:cameraSensorBundleIdentifier:]
  -[SBPIPController hasIdleTimerBehaviors]
  -[SBPIPController assistantDidDisappear:]
  -[SBPIPController _floatingDockHeightWillChange:]
  -[SBPIPController _adjustPIPInsetsForKeyboardFrameChangeNotification:]
  -[SBPIPController windowLevel]
  -[SBPIPController prepareContainerViewControllerForHidingContentViewController:]
  -[SBPIPController _shouldStashForTransitionContext:]
  -[SBPIPController _cancelInterruptionDebouncingTimer]
  -[SBPIPController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBPIPController acquirePictureInPictureWindowLevelOverrideAssertionForWindowLevel:withReason:identifier:]
  -[SBPIPController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBPIPController activityDidChangeForSensorActivityDataProvider:]
  -[SBPIPController _destroyWindowAndRootViewControllerIfPossible]
  -[SBPIPController allContainerViewControllers]
  -[SBPIPController applyPictureInPictureInsets:forSource:]
  -[SBPIPController _acquireStashAssertionForReason:identifier:customAllowedEnvironmentModes:]
  -[SBPIPController _keyboardFrameInScreenSpaceFromNotification:]
  -[SBPIPController _setAdapter:]
  -[SBPIPController updatePictureInPictureWindowLevel]
  -[SBPIPController _startPictureInPictureTestActionForApplicationWithBundleIdentifier:]
  -[SBPIPController .cxx_destruct]
  -[SBPIPController _pictureInPictureWindowMargins]
  -[SBPIPController isPictureInPictureWindowVisible]
  -[SBPIPController _relinquishPIPStashAssertionIfNecessaryForTransitionContext:]
  -[SBPIPController updateContentPaddingForContainerViewController:]
  -[SBPIPController _updateFloatingDockInsetsWithHeight:]
  -[SBPIPController morphAnimatorController:dataSourceWithTargetProcessIdentifier:scenePersistenceIdentifier:gestureInitiated:]
  -[SBPIPController hostedAppSceneHandles]
  -[SBPIPController handleDestructionRequestForSceneHandles:]
  -[SBPIPController _removePictureInPictureMorphAnimatorController:]
  -[SBPIPController morphAnimatorControllerDidTerminate:]
  -[SBPIPController startPictureInPictureForApplicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:animated:completionHandler:]
  -[SBPIPController shouldStartPictureInPictureForApplicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:]
  -[SBPIPController _updatePictureInPictureOverlayInsetsWithCurrentLayoutState:]
  -[SBPIPController _visualizeKeyboardFrameIfNeeded:]
  -[SBPIPController _overrideInsetsForReason:withIdentifier:]
  -[SBPIPController _managePictureInPictureWindowLevel]
  -[SBPIPController _managePictureInPictureWindowVisibilityAnimated:]
  -[SBPIPController interfaceOrientationForContainerViewController:]
  -[SBPIPController displayLayoutMonitor:didUpdateDisplayLayout:withContext:]
  -[SBPIPController tetheringModeForScenePersistenceIdentifier:]
  -[SBPIPController _updateFloatingDockInsets]
  -[SBPIPController contentType]
  -[SBPIPController homeScreenInitialPIPFrame:withContentViewSize:position:padding:fromOrientation:toOrientation:shouldUpdate:gestureInitiated:]
  -[SBPIPController removeContainerViewController:]
  -[SBPIPController setMinimumStashedPadding:]
  -[SBPIPController _shelfHeightDidChange:]
  -[SBPIPController alertItemsController:didDeactivateAlertItem:forReason:]
  -[SBPIPController addObserver:]
  -[SBPIPController setPictureInPictureWindowHidden:withReason:]
  -[SBPIPController createAndRegisterPictureInPictureMorphAnimatorControllerWithTargetProcessIdentifier:uuid:scenePersistenceIdentifier:direction:gestureInitiated:]
  -[SBPIPController _pointInside:]
  -[SBPIPController _keyboardWillRotate:]
  -[SBPIPController containerViewController:userDidUpdateStashState:]
  -[SBPIPController alertItemsController:willActivateAlertItem:]
  -[SBPIPController _currentLayoutState]
  -[SBPIPController containerViewControllerUserMayUpdateStashState:]
  -[SBPIPController isPresentingPictureInPictureRequiringMedusaKeyboard]
  -[SBPIPController isStoppingOrCancellingPictureInPictureForApplicationWithBundleIdentifier:scenePersistenceIdentifier:]
  -[SBPIPController acquireInterruptionAssertionForReason:identifier:]
  -[SBPIPController containerViewController:didFinishStartAnimationWithInitialInterfaceOrientation:]
  -[SBPIPController _setPictureInPictureWindowMargin:]
  -[SBPIPController acquireStashAssertionForReason:identifier:]
  -[SBPIPController _updatePictureInPictureOverlayInsetsWithCurrentLayoutState:shouldUpdate:]
  -[SBPIPController _updateContainerViewControllersContentPadding]
  -[SBPIPController containerViewControllerForContentViewController:]
  -[SBPIPController alertItemsController:didActivateAlertItem:]
  -[SBPIPController _isContentViewAlignedTopWithPosition:orientation:]
  -[SBPIPController initWithIdleTimerCoordinator:windowLevel:interactionSettings:adapter:]
  -[SBPIPController endPIPInterruptionForAssertion:]
  -[SBPIPController anyPresentedContentView]
  -[SBPIPController invalidateIdleTimerBehaviors]
  -[SBPIPController dealloc]
  -[SBPIPController _keyboardWillChangeFrame:]
  -[SBPIPController pictureInPictureMorphAnimatorControllerForProcessIdentifier:scenePersistenceIdentifier:]
  -[SBPIPController addContainerViewController:dataSource:]
  -[SBPIPController _setContainersStashed:]
  -[SBPIPController minimumStashedPadding]
  -[SBPIPController removeObserver:]
  -[SBPIPController keyboardFocusController:externalSceneDidAcquireFocus:]
  -[SBPIPController _acquirePIPStashAssertionIfNecessaryForTransitionContext:]
  -[SBPIPController cancelPictureInPictureForApplicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:]
  -[SBPIPController _createWindowAndRootViewControllerIfNeeded]
  -[SBPIPController _addPictureInPictureMorphAnimatorController:]
  -[SBPIPController _restorePictureInPictureForTestForApplicationWithBundleIdentifier:]
  -[SBPIPController _pipWindow]
  -[SBPIPController restoreContentViewController:appSceneEntity:morphAnimatorConfigurationBlock:completion:]
  -[SBPIPController _keyboardWillShowOrHide:]
  -[SBPIPController _isContentViewAlignedLeftWithPosition:orientation:]


SBInProcessSecureAppAction : SBSLockScreenContentAction
 @property  SBApplicationSceneEntity *applicationSceneEntity

  // instance methods
  -[SBInProcessSecureAppAction .cxx_destruct]
  -[SBInProcessSecureAppAction applicationSceneEntity]
  -[SBInProcessSecureAppAction initWithType:applicationSceneEntity:handler:]
  -[SBInProcessSecureAppAction isInProcessAction]
  -[SBInProcessSecureAppAction setApplicationSceneEntity:]


SBExternalSetupDefaults : BSAbstractDefaultDomain
 @property  BOOL deviceSetup
 @property  NSString *setupState

  // instance methods
  -[SBExternalSetupDefaults init]
  -[SBExternalSetupDefaults _bindAndRegisterDefaults]


SBUIAnimationControllerSteppedAnimator : SBUIAnimationControllerAnimator <SBViewControllerInteractiveAnimatedTransitioning>
 @property  SBAnimationStepper *stepper
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIAnimationControllerSteppedAnimator stepper]
  -[SBUIAnimationControllerSteppedAnimator cancelTransition:withCompletionSpeed:completionCurve:]
  -[SBUIAnimationControllerSteppedAnimator .cxx_destruct]
  -[SBUIAnimationControllerSteppedAnimator percentComplete]
  -[SBUIAnimationControllerSteppedAnimator finishInteractiveTransition:withCompletionSpeed:completionCurve:]
  -[SBUIAnimationControllerSteppedAnimator initWithAnimationController:]
  -[SBUIAnimationControllerSteppedAnimator updateTransition:withPercentComplete:]
  -[SBUIAnimationControllerSteppedAnimator initWithAnimationController:stepper:]


SBRecentDisplayItemsDataStore : NSObject
 @property  NSOrderedSet *displayItems
 @property  <SBRecentDisplayItemsPersistenceDelegate> *persistenceDelegate

  // instance methods
  -[SBRecentDisplayItemsDataStore .cxx_destruct]
  -[SBRecentDisplayItemsDataStore init]
  -[SBRecentDisplayItemsDataStore setDisplayItems:]
  -[SBRecentDisplayItemsDataStore displayItems]
  -[SBRecentDisplayItemsDataStore setPersistenceDelegate:]
  -[SBRecentDisplayItemsDataStore initWithRecentLayouts:fallbackToRecentAppLayouts:]
  -[SBRecentDisplayItemsDataStore _displayItemsFromRecentAppLayouts:]
  -[SBRecentDisplayItemsDataStore persistenceDelegate]


SBBatteryDeviceChargeTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBatteryDeviceChargeTestRecipe title]
  -[SBBatteryDeviceChargeTestRecipe handleVolumeIncrease]
  -[SBBatteryDeviceChargeTestRecipe handleVolumeDecrease]


_SBDeviceApplicationSceneStatusBarStateProviderObserverRecord : NSObject
 @property  <SBDeviceApplicationSceneStatusBarStateObserver> *observer
 @property  {SBDeviceApplicationSceneStatusBarStateObserverFlags=b1b1b1b1b1b1b1b1b1} flags

  // instance methods
  -[_SBDeviceApplicationSceneStatusBarStateProviderObserverRecord .cxx_destruct]
  -[_SBDeviceApplicationSceneStatusBarStateProviderObserverRecord initWithObserver:andFlags:]
  -[_SBDeviceApplicationSceneStatusBarStateProviderObserverRecord flags]
  -[_SBDeviceApplicationSceneStatusBarStateProviderObserverRecord observer]


SBFloatingDockWindow : SBMainScreenActiveInterfaceOrientationWindow
  // class methods
  +[SBFloatingDockWindow sb_autorotates]
  +[SBFloatingDockWindow _traitsArbiterOrientationActuationRole]

  // instance methods
  -[SBFloatingDockWindow _canBecomeKeyWindow]
  -[SBFloatingDockWindow hitTest:withEvent:]
  -[SBFloatingDockWindow isContentHidden]
  -[SBFloatingDockWindow floatingDockRootViewController]


SBStatusBarStateAggregator : NSObject <SBDateTimeOverrideObserver, SBAVSystemControllerCacheObserver, CBCentralManagerPrivateDelegate>
 @property  SBSystemStatusBatteryDataProvider *batteryDataProvider
 @property  STTelephonyStatusDomainDataProvider *telephonyDataProvider
 @property  SBSystemStatusWifiDataProvider *wifiDataProvider
 @property  STBatteryStatusDomain *batteryDomain
 @property  STCallingStatusDomain *callingDomain
 @property  STFocusStatusDomain *focusDomain
 @property  STLocationStatusDomain *locationDomain
 @property  STPlaygroundsStatusDomain *playgroundsDomain
 @property  STTelephonyStatusDomain *telephonyDomain
 @property  STVoiceControlStatusDomain *voiceControlDomain
 @property  STWifiStatusDomain *wifiDomain
 @property  SBTelephonyManager *telephonyManager
 @property  SBUserSessionController *userSessionController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBStatusBarStateAggregator sharedInstance]
  +[SBStatusBarStateAggregator _thermalColorForLevel:]

  // instance methods
  -[SBStatusBarStateAggregator _updateSecondaryServiceItem]
  -[SBStatusBarStateAggregator callingDomain]
  -[SBStatusBarStateAggregator _removeTetheringStatusBarStyleOverrideAssertion]
  -[SBStatusBarStateAggregator _registerForNotifications]
  -[SBStatusBarStateAggregator setCallingDomain:]
  -[SBStatusBarStateAggregator _temporarilyOverrideLocationItemForProminentIndication]
  -[SBStatusBarStateAggregator endCoalescentBlock]
  -[SBStatusBarStateAggregator controller:didChangeOverrideDateFromDate:]
  -[SBStatusBarStateAggregator _updateThermalColorItem]
  -[SBStatusBarStateAggregator _shouldShowPersonName]
  -[SBStatusBarStateAggregator batteryDomain]
  -[SBStatusBarStateAggregator sendStatusBarActions:]
  -[SBStatusBarStateAggregator _updateDataNetworkItem]
  -[SBStatusBarStateAggregator setShouldShowBluetoothHeadphoneGlyph:andShouldShowBluetoothHeadphoneBatteryPercent:]
  -[SBStatusBarStateAggregator _updateCallForwardingItem:withInfo:]
  -[SBStatusBarStateAggregator _notifyItemChanged:]
  -[SBStatusBarStateAggregator focusDomain]
  -[SBStatusBarStateAggregator _noteAirplaneModeChanged]
  -[SBStatusBarStateAggregator _updateCallingStatusBarStyleOverrideAssertionsForCallDescriptors:]
  -[SBStatusBarStateAggregator setTelephonyDomain:]
  -[SBStatusBarStateAggregator setWifiDomain:]
  -[SBStatusBarStateAggregator _statusBarStyleOverridesForCallDescriptors:]
  -[SBStatusBarStateAggregator _updateSecondaryCallForwardingItem]
  -[SBStatusBarStateAggregator _statusBarBatteryStateForSystemStatusChargingState:]
  -[SBStatusBarStateAggregator setUserNameOverride:]
  -[SBStatusBarStateAggregator .cxx_destruct]
  -[SBStatusBarStateAggregator telephonyDomain]
  -[SBStatusBarStateAggregator _buildLocationState]
  -[SBStatusBarStateAggregator centralManager:didUpdatePeripheralConnectionState:]
  -[SBStatusBarStateAggregator locationDomain]
  -[SBStatusBarStateAggregator _updateSensorActivityItem]
  -[SBStatusBarStateAggregator _updateBatteryItems]
  -[SBStatusBarStateAggregator _updateCarPlayItem]
  -[SBStatusBarStateAggregator centralManagerDidUpdateState:]
  -[SBStatusBarStateAggregator setAlarmEnabled:]
  -[SBStatusBarStateAggregator _updateAirplayItem]
  -[SBStatusBarStateAggregator _updateBluetoothHeadphonesItem]
  -[SBStatusBarStateAggregator cache:didUpdatePickableRoutes:]
  -[SBStatusBarStateAggregator setShowsOverridesForRecording:]
  -[SBStatusBarStateAggregator setShowsActivityIndicatorOnHomeScreen:]
  -[SBStatusBarStateAggregator setShowsSyncActivityIndicator:]
  -[SBStatusBarStateAggregator init]
  -[SBStatusBarStateAggregator _updateStateAtomicallyWithoutAnimationUsingBlock:]
  -[SBStatusBarStateAggregator _updateVoiceControlItem]
  -[SBStatusBarStateAggregator _requestActions:]
  -[SBStatusBarStateAggregator _updateLocationState]
  -[SBStatusBarStateAggregator _setItem:enabled:]
  -[SBStatusBarStateAggregator _updateLockItem]
  -[SBStatusBarStateAggregator _updateVPNItem]
  -[SBStatusBarStateAggregator _updateBluetoothBatteryItem]
  -[SBStatusBarStateAggregator _userSessionController]
  -[SBStatusBarStateAggregator _statusBarData]
  -[SBStatusBarStateAggregator setBatteryDomain:]
  -[SBStatusBarStateAggregator setLocationDomain:]
  -[SBStatusBarStateAggregator _updateSignalStrengthItem]
  -[SBStatusBarStateAggregator _notifyNonItemDataChanged]
  -[SBStatusBarStateAggregator voiceControlDomain]
  -[SBStatusBarStateAggregator _telephonyManager]
  -[SBStatusBarStateAggregator _updateDataNetworkItem:withData:primary:dataNetworkTypeGetter:dataNetworkTypeSetter:]
  -[SBStatusBarStateAggregator setShowsActivityIndicatorEverywhere:]
  -[SBStatusBarStateAggregator _shouldShowEmergencyOnlyStatusForInfo:]
  -[SBStatusBarStateAggregator _tickRefCount:up:withTransitionBlock:]
  -[SBStatusBarStateAggregator _updateTTYItem]
  -[SBStatusBarStateAggregator _updateTetheringState]
  -[SBStatusBarStateAggregator _updateSecondaryDataNetworkItem]
  -[SBStatusBarStateAggregator _resetTimeItemFormatter]
  -[SBStatusBarStateAggregator _updateQuietModeItem]
  -[SBStatusBarStateAggregator _updateLocationItem]
  -[SBStatusBarStateAggregator playgroundsDomain]
  -[SBStatusBarStateAggregator _setTelephonyManager:]
  -[SBStatusBarStateAggregator telephonyDataProvider]
  -[SBStatusBarStateAggregator _updateAirplaneMode]
  -[SBStatusBarStateAggregator _updateTimeItems]
  -[SBStatusBarStateAggregator setFocusDomain:]
  -[SBStatusBarStateAggregator setVoiceControlDomain:]
  -[SBStatusBarStateAggregator _updateStatusBarStyleOverrideAssertionsForSystemStatusDomain:andData:]
  -[SBStatusBarStateAggregator _updateSecondarySignalStrengthItem]
  -[SBStatusBarStateAggregator _updateAlarmItem]
  -[SBStatusBarStateAggregator _stopTimeItemTimer]
  -[SBStatusBarStateAggregator beginCoalescentBlock]
  -[SBStatusBarStateAggregator dealloc]
  -[SBStatusBarStateAggregator _restartTimeItemTimer]
  -[SBStatusBarStateAggregator _removePlaygroundsStatusBarStyleOverrideAssertion]
  -[SBStatusBarStateAggregator _setItem:enabled:inList:itemPostState:]
  -[SBStatusBarStateAggregator batteryDataProvider]
  -[SBStatusBarStateAggregator cache:didUpdateActiveAudioRoute:]
  -[SBStatusBarStateAggregator addPostingObserver:]
  -[SBStatusBarStateAggregator _updateRotationLockItem]
  -[SBStatusBarStateAggregator removePostingObserver:]
  -[SBStatusBarStateAggregator _updateServiceItem:withData:SIMInfo:otherSIMInfo:serviceStringGetter:serviceStringSetter:serviceCrossfadeStringGetter:serviceCrossfadeStringSetter:serviceContentTypeGetter:serviceContentTypeSetter:serviceBadgeStringGetter:serviceBadgeStringSetter:]
  -[SBStatusBarStateAggregator _updatePersonNameItem]
  -[SBStatusBarStateAggregator wifiDataProvider]
  -[SBStatusBarStateAggregator _updateCallForwardingItem]
  -[SBStatusBarStateAggregator _postItem:withState:inList:]
  -[SBStatusBarStateAggregator updateStatusBarItem:]
  -[SBStatusBarStateAggregator _updateSignalStrengthItem:withData:SIMInfo:barsGetter:barsSetter:]
  -[SBStatusBarStateAggregator _updateServiceItem]
  -[SBStatusBarStateAggregator setPlaygroundsDomain:]
  -[SBStatusBarStateAggregator _setUserSessionController:]
  -[SBStatusBarStateAggregator _updateBluetoothItem]
  -[SBStatusBarStateAggregator wifiDomain]
  -[SBStatusBarStateAggregator _updateLiquidDetectionItem]
  -[SBStatusBarStateAggregator _updateActivityItem]
  -[SBStatusBarStateAggregator _updateStatusBarForSystemStatusDomainName:data:]


SBAppSwitcherSnapshotLockoutViewControllerProvider : NSObject
  // instance methods
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider .cxx_destruct]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider recycleBlockingViewController:]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider _receivedMemoryWarning:]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider init]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider blockingViewControllerForBundleIdentifier:screenTimePolicy:]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider dealloc]


SBMainStatusBarStateProvider : SBStatusBarStateProvider <UIStatusBarStateObserver>
 @property  NSHashTable *contentAssertions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainStatusBarStateProvider sharedInstance]

  // instance methods
  -[SBMainStatusBarStateProvider _composePostDataFromAggregatorData:]
  -[SBMainStatusBarStateProvider enableStatusBarItem:requestor:]
  -[SBMainStatusBarStateProvider forceUpdateLocalStatusBarData]
  -[SBMainStatusBarStateProvider disableStatusBarItem:requestor:]
  -[SBMainStatusBarStateProvider _identifierForStateAggregator:]
  -[SBMainStatusBarStateProvider .cxx_destruct]
  -[SBMainStatusBarStateProvider contentAssertionsWantTimeEnabledAnimated:duration:]
  -[SBMainStatusBarStateProvider enableTime:]
  -[SBMainStatusBarStateProvider stopDisablingDataUpdateAnimationsForRequestor:]
  -[SBMainStatusBarStateProvider didUpdateContentAssertion:]
  -[SBMainStatusBarStateProvider isTimeEnabled]
  -[SBMainStatusBarStateProvider statusBarStateAggregatorDidRequestImmediateUpdates:]
  -[SBMainStatusBarStateProvider acquireContentAssertion:]
  -[SBMainStatusBarStateProvider _updateDisabledItems]
  -[SBMainStatusBarStateProvider setTimeCloaked:]
  -[SBMainStatusBarStateProvider relinquishContentAssertion:]
  -[SBMainStatusBarStateProvider init]
  -[SBMainStatusBarStateProvider setTelephonyAndBluetoothItemsCloaked:]
  -[SBMainStatusBarStateProvider statusBarStateProvider:didPostStatusBarData:withActions:]
  -[SBMainStatusBarStateProvider setAllItemsExceptBatteryCloaked:]
  -[SBMainStatusBarStateProvider setContentAssertions:]
  -[SBMainStatusBarStateProvider _shouldPostForVisitedItem:withUpdates:toAggregatorData:lastPost:]
  -[SBMainStatusBarStateProvider updateTimeEnabledImmediately:]
  -[SBMainStatusBarStateProvider disableDataUpdateAnimationsForRequestor:]
  -[SBMainStatusBarStateProvider contentAssertions]
  -[SBMainStatusBarStateProvider enableTime:crossfade:crossfadeDuration:]
  -[SBMainStatusBarStateProvider dealloc]
  -[SBMainStatusBarStateProvider statusBarStateAggregatorDidStopRequestingImmediateUpdates:]
  -[SBMainStatusBarStateProvider updateTimeEnabled]
  -[SBMainStatusBarStateProvider _enableTime:crossfade:crossfadeDuration:immediately:]


SBMainStatusBarContentAssertion : BSSimpleAssertion
 @property  BOOL animated
 @property  double duration
 @property  BOOL dateAndTimeVisible

  // instance methods
  -[SBMainStatusBarContentAssertion animated]
  -[SBMainStatusBarContentAssertion setAnimated:]
  -[SBMainStatusBarContentAssertion dateAndTimeVisible]
  -[SBMainStatusBarContentAssertion setDuration:]
  -[SBMainStatusBarContentAssertion setDateAndTimeVisible:]
  -[SBMainStatusBarContentAssertion initWithIdentifier:forReason:]
  -[SBMainStatusBarContentAssertion duration]


SBPIPSettingsDomain : PTDomain
  // class methods
  +[SBPIPSettingsDomain domainGroupName]
  +[SBPIPSettingsDomain rootSettings]
  +[SBPIPSettingsDomain domainName]
  +[SBPIPSettingsDomain rootSettingsClass]


SBPIPSettings : PTSettings
 @property  SBPIPStashVisualSettings *stashVisualSettings
 @property  SBPIPInteractionSettings *interactionSettings
 @property  SBPIPFluidTransitionsSettings *fluidTransitionsSettings
 @property  SBPIPFadeInOutSettings *fadeInOutSettings
 @property  SBPIPShadowSettings *shadowSettings
 @property  SBPIPSizingSettings *sizingSettings

  // class methods
  +[SBPIPSettings settingsControllerModule]

  // instance methods
  -[SBPIPSettings .cxx_destruct]
  -[SBPIPSettings interactionSettings]
  -[SBPIPSettings stashVisualSettings]
  -[SBPIPSettings shadowSettings]
  -[SBPIPSettings setStashVisualSettings:]
  -[SBPIPSettings setShadowSettings:]
  -[SBPIPSettings setInteractionSettings:]
  -[SBPIPSettings fluidTransitionsSettings]
  -[SBPIPSettings sizingSettings]
  -[SBPIPSettings fadeInOutSettings]
  -[SBPIPSettings setFluidTransitionsSettings:]
  -[SBPIPSettings setFadeInOutSettings:]
  -[SBPIPSettings setSizingSettings:]


SBPIPFadeInOutSettings : PTSettings
 @property  double fadeInInitialScale
 @property  double fadeInInitialOpacity
 @property  double fadeInInitialBlurRadius
 @property  double fadeOutFinalScale
 @property  double fadeOutFinalOpacity
 @property  double fadeOutFinalBlurRadius
 @property  SBFAnimationSettings *fadeInOutAnimationSettings
 @property  {?=ddd} fadeInInitialValues
 @property  {?=ddd} fadeOutFinalValues

  // class methods
  +[SBPIPFadeInOutSettings settingsControllerModule]
  +[SBPIPFadeInOutSettings ignoresKey:]

  // instance methods
  -[SBPIPFadeInOutSettings .cxx_destruct]
  -[SBPIPFadeInOutSettings setDefaultValues]
  -[SBPIPFadeInOutSettings fadeInOutAnimationSettings]
  -[SBPIPFadeInOutSettings fadeInInitialValues]
  -[SBPIPFadeInOutSettings fadeOutFinalValues]
  -[SBPIPFadeInOutSettings setFadeInOutAnimationSettings:]
  -[SBPIPFadeInOutSettings fadeInInitialScale]
  -[SBPIPFadeInOutSettings setFadeInInitialScale:]
  -[SBPIPFadeInOutSettings fadeInInitialOpacity]
  -[SBPIPFadeInOutSettings setFadeInInitialOpacity:]
  -[SBPIPFadeInOutSettings fadeInInitialBlurRadius]
  -[SBPIPFadeInOutSettings setFadeInInitialBlurRadius:]
  -[SBPIPFadeInOutSettings fadeOutFinalScale]
  -[SBPIPFadeInOutSettings setFadeOutFinalScale:]
  -[SBPIPFadeInOutSettings fadeOutFinalOpacity]
  -[SBPIPFadeInOutSettings setFadeOutFinalOpacity:]
  -[SBPIPFadeInOutSettings fadeOutFinalBlurRadius]
  -[SBPIPFadeInOutSettings setFadeOutFinalBlurRadius:]


SBPIPStashVisualSettings : PTSettings
 @property  long long userInterfaceStyle
 @property  double startBlurTransition
 @property  double completeBlurTransition
 @property  SBPIPStashMaterialSettings *lightModeMaterialSettings
 @property  SBPIPStashMaterialSettings *darkModeMaterialSettings

  // class methods
  +[SBPIPStashVisualSettings settingsControllerModule]
  +[SBPIPStashVisualSettings ignoresKey:]

  // instance methods
  -[SBPIPStashVisualSettings setUserInterfaceStyle:]
  -[SBPIPStashVisualSettings .cxx_destruct]
  -[SBPIPStashVisualSettings setDefaultValues]
  -[SBPIPStashVisualSettings userInterfaceStyle]
  -[SBPIPStashVisualSettings startBlurTransition]
  -[SBPIPStashVisualSettings completeBlurTransition]
  -[SBPIPStashVisualSettings materialSettingsForUserInterfaceStyle:]
  -[SBPIPStashVisualSettings setLightModeMaterialSettings:]
  -[SBPIPStashVisualSettings setStartBlurTransition:]
  -[SBPIPStashVisualSettings setCompleteBlurTransition:]
  -[SBPIPStashVisualSettings lightModeMaterialSettings]
  -[SBPIPStashVisualSettings darkModeMaterialSettings]
  -[SBPIPStashVisualSettings setDarkModeMaterialSettings:]


SBPIPStashMaterialSettings : PTSettings
 @property  NSString *chevronCompositingFilter
 @property  UIColor *chevronTintColor
 @property  double darkTintAlpha
 @property  double lightTintAlpha
 @property  UIColor *darkTintColor
 @property  UIColor *lightTintColor

  // class methods
  +[SBPIPStashMaterialSettings settingsControllerModule]
  +[SBPIPStashMaterialSettings ignoresKey:]

  // instance methods
  -[SBPIPStashMaterialSettings .cxx_destruct]
  -[SBPIPStashMaterialSettings setDefaultValues]
  -[SBPIPStashMaterialSettings darkTintColor]
  -[SBPIPStashMaterialSettings lightTintColor]
  -[SBPIPStashMaterialSettings chevronTintColor]
  -[SBPIPStashMaterialSettings chevronCompositingFilter]
  -[SBPIPStashMaterialSettings setDarkTintAlpha:]
  -[SBPIPStashMaterialSettings setLightTintAlpha:]
  -[SBPIPStashMaterialSettings setChevronCompositingFilter:]
  -[SBPIPStashMaterialSettings setChevronTintColor:]
  -[SBPIPStashMaterialSettings darkTintAlpha]
  -[SBPIPStashMaterialSettings lightTintAlpha]


SBPIPShadowSettings : PTSettings
 @property  SBDropShadowSettings *bodyShadowSettings
 @property  SBDropShadowSettings *tabShadowSettings

  // class methods
  +[SBPIPShadowSettings settingsControllerModule]

  // instance methods
  -[SBPIPShadowSettings .cxx_destruct]
  -[SBPIPShadowSettings setBodyShadowSettings:]
  -[SBPIPShadowSettings setTabShadowSettings:]
  -[SBPIPShadowSettings bodyShadowSettings]
  -[SBPIPShadowSettings tabShadowSettings]


SBPIPInteractionSettings : PTSettings
 @property  BOOL shouldStashOnTransitionToSwitcher
 @property  BOOL shouldUnstashOnTransitionFromSwitcher
 @property  BOOL shouldStashOnTransitionToHomescreen
 @property  BOOL shouldUnstashOnTransitionFromHomescreen
 @property  BOOL shouldStashOnAppToAppTransitions
 @property  BOOL usesKeyboards
 @property  BOOL keyboardDismissesOnTransitionToHomescreen
 @property  BOOL keyboardDismissesOnOutsideUserInteractionOnHomescreen
 @property  BOOL keyboardDismissesOnOutsideUserInteractionOutsideHomescreen
 @property  BOOL alwaysStartAtSmallestSize
 @property  BOOL panGestureEnabled
 @property  BOOL pinchGestureEnabled
 @property  BOOL rotationGestureEnabled
 @property  BOOL stashingEnabled
 @property  unsigned long freePositioning
 @property  double defaultContentSizeResetTimeout
 @property  double inFlightHitTestPadding
 @property  double maximumSizeSpanForPreferredSizeTuning
 @property  double minimumSizeSpanBetweenPreferredSizes
 @property  double positionDecelerationRate
 @property  double positionExtenderMaximumDistance
 @property  double positionVelocityYWeightOverVelocityX
 @property  double rotationExtenderMaximumDistance
 @property  double rotationPreRecognitionWeight
 @property  double rotationRubberBandCoefficient
 @property  double scaleDecelerationRate
 @property  double scaleExtenderMaximumDistance
 @property  double scaleLowPassFilterPreviousWeight
 @property  double stashProgressTabAppearanceThresholdX
 @property  SBFFluidBehaviorSettings *interactiveFluidBehavior
 @property  SBFFluidBehaviorSettings *stashTabFluidBehavior
 @property  SBFFluidBehaviorSettings *regionUpdateFluidBehavior

  // class methods
  +[SBPIPInteractionSettings settingsControllerModule]

  // instance methods
  -[SBPIPInteractionSettings setShouldStashOnTransitionToSwitcher:]
  -[SBPIPInteractionSettings inFlightHitTestPadding]
  -[SBPIPInteractionSettings setMaximumSizeSpanForPreferredSizeTuning:]
  -[SBPIPInteractionSettings setInFlightHitTestPadding:]
  -[SBPIPInteractionSettings panGestureEnabled]
  -[SBPIPInteractionSettings rotationGestureEnabled]
  -[SBPIPInteractionSettings setShouldStashOnAppToAppTransitions:]
  -[SBPIPInteractionSettings shouldStashOnTransitionToSwitcher]
  -[SBPIPInteractionSettings freePositioning]
  -[SBPIPInteractionSettings setShouldStashOnTransitionToHomescreen:]
  -[SBPIPInteractionSettings setRegionUpdateFluidBehavior:]
  -[SBPIPInteractionSettings defaultContentSizeResetTimeout]
  -[SBPIPInteractionSettings setStashingEnabled:]
  -[SBPIPInteractionSettings .cxx_destruct]
  -[SBPIPInteractionSettings setDefaultValues]
  -[SBPIPInteractionSettings setScaleDecelerationRate:]
  -[SBPIPInteractionSettings keyboardDismissesOnTransitionToHomescreen]
  -[SBPIPInteractionSettings setStashProgressTabAppearanceThresholdX:]
  -[SBPIPInteractionSettings shouldStashOnTransitionToHomescreen]
  -[SBPIPInteractionSettings setRotationExtenderMaximumDistance:]
  -[SBPIPInteractionSettings setRotationPreRecognitionWeight:]
  -[SBPIPInteractionSettings setKeyboardDismissesOnTransitionToHomescreen:]
  -[SBPIPInteractionSettings regionUpdateFluidBehavior]
  -[SBPIPInteractionSettings setScaleLowPassFilterPreviousWeight:]
  -[SBPIPInteractionSettings setKeyboardDismissesOnOutsideUserInteractionOnHomescreen:]
  -[SBPIPInteractionSettings setPinchGestureEnabled:]
  -[SBPIPInteractionSettings scaleLowPassFilterPreviousWeight]
  -[SBPIPInteractionSettings positionExtenderMaximumDistance]
  -[SBPIPInteractionSettings setAlwaysStartAtSmallestSize:]
  -[SBPIPInteractionSettings interactiveFluidBehavior]
  -[SBPIPInteractionSettings setDefaultContentSizeResetTimeout:]
  -[SBPIPInteractionSettings rotationExtenderMaximumDistance]
  -[SBPIPInteractionSettings setMinimumSizeSpanBetweenPreferredSizes:]
  -[SBPIPInteractionSettings alwaysStartAtSmallestSize]
  -[SBPIPInteractionSettings setPositionDecelerationRate:]
  -[SBPIPInteractionSettings setPositionVelocityYWeightOverVelocityX:]
  -[SBPIPInteractionSettings shouldUnstashOnTransitionFromHomescreen]
  -[SBPIPInteractionSettings setRotationRubberBandCoefficient:]
  -[SBPIPInteractionSettings setScaleExtenderMaximumDistance:]
  -[SBPIPInteractionSettings setShouldUnstashOnTransitionFromHomescreen:]
  -[SBPIPInteractionSettings setRotationGestureEnabled:]
  -[SBPIPInteractionSettings maximumSizeSpanForPreferredSizeTuning]
  -[SBPIPInteractionSettings scaleExtenderMaximumDistance]
  -[SBPIPInteractionSettings rotationPreRecognitionWeight]
  -[SBPIPInteractionSettings positionVelocityYWeightOverVelocityX]
  -[SBPIPInteractionSettings usesKeyboards]
  -[SBPIPInteractionSettings pinchGestureEnabled]
  -[SBPIPInteractionSettings setUsesKeyboards:]
  -[SBPIPInteractionSettings setFreePositioning:]
  -[SBPIPInteractionSettings stashProgressTabAppearanceThresholdX]
  -[SBPIPInteractionSettings stashTabFluidBehavior]
  -[SBPIPInteractionSettings setInteractiveFluidBehavior:]
  -[SBPIPInteractionSettings stashingEnabled]
  -[SBPIPInteractionSettings setKeyboardDismissesOnOutsideUserInteractionOutsideHomescreen:]
  -[SBPIPInteractionSettings shouldUnstashOnTransitionFromSwitcher]
  -[SBPIPInteractionSettings keyboardDismissesOnOutsideUserInteractionOnHomescreen]
  -[SBPIPInteractionSettings keyboardDismissesOnOutsideUserInteractionOutsideHomescreen]
  -[SBPIPInteractionSettings minimumSizeSpanBetweenPreferredSizes]
  -[SBPIPInteractionSettings setShouldUnstashOnTransitionFromSwitcher:]
  -[SBPIPInteractionSettings setPanGestureEnabled:]
  -[SBPIPInteractionSettings shouldStashOnAppToAppTransitions]
  -[SBPIPInteractionSettings rotationRubberBandCoefficient]
  -[SBPIPInteractionSettings setStashTabFluidBehavior:]
  -[SBPIPInteractionSettings scaleDecelerationRate]
  -[SBPIPInteractionSettings setPositionExtenderMaximumDistance:]
  -[SBPIPInteractionSettings positionDecelerationRate]


SBPIPFluidTransitionsSettings : PTSettings
 @property  SBFFluidBehaviorSettings *sourceClippingFluidBehavior
 @property  SBFFluidBehaviorSettings *targetClippingFluidBehavior

  // class methods
  +[SBPIPFluidTransitionsSettings settingsControllerModule]

  // instance methods
  -[SBPIPFluidTransitionsSettings .cxx_destruct]
  -[SBPIPFluidTransitionsSettings setDefaultValues]
  -[SBPIPFluidTransitionsSettings sourceClippingFluidBehavior]
  -[SBPIPFluidTransitionsSettings targetClippingFluidBehavior]
  -[SBPIPFluidTransitionsSettings setSourceClippingFluidBehavior:]
  -[SBPIPFluidTransitionsSettings setTargetClippingFluidBehavior:]


SBPIPSizingSettings : PTSettings
 @property  double landcapeAspectRatioClosedIntervalLowerBound
 @property  double landcapeAspectRatioClosedIntervalUpperBound
 @property  double portraitAspectRatioClosedIntervalLowerBound
 @property  double portraitAspectRatioClosedIntervalUpperBound
 @property  double squareAspectRatioClosedIntervalLowerBound
 @property  double squareAspectRatioClosedIntervalUpperBound

  // class methods
  +[SBPIPSizingSettings settingsControllerModule]

  // instance methods
  -[SBPIPSizingSettings setDefaultValues]
  -[SBPIPSizingSettings landcapeAspectRatioClosedIntervalLowerBound]
  -[SBPIPSizingSettings landcapeAspectRatioClosedIntervalUpperBound]
  -[SBPIPSizingSettings squareAspectRatioClosedIntervalLowerBound]
  -[SBPIPSizingSettings squareAspectRatioClosedIntervalUpperBound]
  -[SBPIPSizingSettings portraitAspectRatioClosedIntervalLowerBound]
  -[SBPIPSizingSettings portraitAspectRatioClosedIntervalUpperBound]
  -[SBPIPSizingSettings setLandcapeAspectRatioClosedIntervalLowerBound:]
  -[SBPIPSizingSettings setLandcapeAspectRatioClosedIntervalUpperBound:]
  -[SBPIPSizingSettings setPortraitAspectRatioClosedIntervalLowerBound:]
  -[SBPIPSizingSettings setPortraitAspectRatioClosedIntervalUpperBound:]
  -[SBPIPSizingSettings setSquareAspectRatioClosedIntervalLowerBound:]
  -[SBPIPSizingSettings setSquareAspectRatioClosedIntervalUpperBound:]


SBStatusBarStateProvider : NSObject <SBStatusBarStateAggregatorPosting, UIStatusBarStateProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBStatusBarStateProvider _composePostDataFromAggregatorData:]
  -[SBStatusBarStateProvider endCoalescentBlock]
  -[SBStatusBarStateProvider .cxx_destruct]
  -[SBStatusBarStateProvider init]
  -[SBStatusBarStateProvider getStatusBarData:]
  -[SBStatusBarStateProvider addStatusBarStateObserver:]
  -[SBStatusBarStateProvider removeStatusBarStateObserver:]
  -[SBStatusBarStateProvider _shouldPostForVisitedItem:withUpdates:toAggregatorData:lastPost:]
  -[SBStatusBarStateProvider beginCoalescentBlock]
  -[SBStatusBarStateProvider dealloc]
  -[SBStatusBarStateProvider updateStatusBarItem:]
  -[SBStatusBarStateProvider statusBarStateAggregatorDidStartPost:]
  -[SBStatusBarStateProvider statusBarStateAggregator:didVisitItem:withUpdates:toData:]
  -[SBStatusBarStateProvider statusBarStateAggregatorDidFinishPost:withData:actions:]
  -[SBStatusBarStateProvider statusBarStateAggregator:didUpdateNonItemData:]
  -[SBStatusBarStateProvider _composePostActionsFromAggregatorActions:]
  -[SBStatusBarStateProvider _didFinishPost]
  -[SBStatusBarStateProvider _shouldPostForUpdatesToNonItemData:]
  -[SBStatusBarStateProvider _didChangeDoubleHeightStatusStringForStyle:]


SBControlCenterRingerSwitchController : NSObject
  // class methods
  +[SBControlCenterRingerSwitchController sharedInstance]

  // instance methods
  -[SBControlCenterRingerSwitchController _updateState]
  -[SBControlCenterRingerSwitchController init]
  -[SBControlCenterRingerSwitchController dealloc]


SBDockSuggestionsMetric : NSObject <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDockSuggestionsMetric handleEvent:withContext:]
  -[SBDockSuggestionsMetric .cxx_destruct]
  -[SBDockSuggestionsMetric _trackEvent:withPayload:]
  -[SBDockSuggestionsMetric init]


SBArcSwipeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBArcSwipeSwitcherModifier appLayoutsToResignActive]
  -[SBArcSwipeSwitcherModifier homeScreenBackdropBlurType]
  -[SBArcSwipeSwitcherModifier transitionWillBegin]
  -[SBArcSwipeSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBArcSwipeSwitcherModifier keyboardSuppressionMode]
  -[SBArcSwipeSwitcherModifier isHomeScreenContentRequired]
  -[SBArcSwipeSwitcherModifier animationAttributesForLayoutElement:]
  -[SBArcSwipeSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBArcSwipeSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBArcSwipeSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBArcSwipeSwitcherModifier visibleAppLayouts]
  -[SBArcSwipeSwitcherModifier .cxx_destruct]
  -[SBArcSwipeSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBArcSwipeSwitcherModifier isSwitcherWindowVisible]
  -[SBArcSwipeSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBArcSwipeSwitcherModifier _layoutSettings]
  -[SBArcSwipeSwitcherModifier wallpaperStyle]
  -[SBArcSwipeSwitcherModifier cornerRadiiForIndex:]
  -[SBArcSwipeSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBArcSwipeSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBArcSwipeSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBArcSwipeSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]


SBRotationDodgingModifierEvent : SBDodgingModifierEvent
 @property  NSUUID *identifier
 @property  long long fromOrientation
 @property  long long toOrientation
 @property  unsigned long phase

  // instance methods
  -[SBRotationDodgingModifierEvent phase]
  -[SBRotationDodgingModifierEvent .cxx_destruct]
  -[SBRotationDodgingModifierEvent identifier]
  -[SBRotationDodgingModifierEvent toOrientation]
  -[SBRotationDodgingModifierEvent fromOrientation]
  -[SBRotationDodgingModifierEvent type]
  -[SBRotationDodgingModifierEvent initWithIdentifier:fromOrientation:toOrientation:phase:]


SBFullScreenToSplitViewSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBFullScreenToSplitViewSwitcherModifier backgroundOpacityForIndex:]
  -[SBFullScreenToSplitViewSwitcherModifier homeScreenDimmingAlpha]
  -[SBFullScreenToSplitViewSwitcherModifier transitionWillBegin]
  -[SBFullScreenToSplitViewSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToSplitViewSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBFullScreenToSplitViewSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBFullScreenToSplitViewSwitcherModifier visibleAppLayouts]
  -[SBFullScreenToSplitViewSwitcherModifier scaleForLayoutRole:inAppLayout:]
  -[SBFullScreenToSplitViewSwitcherModifier .cxx_destruct]
  -[SBFullScreenToSplitViewSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBFullScreenToSplitViewSwitcherModifier wallpaperStyle]
  -[SBFullScreenToSplitViewSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBFullScreenToSplitViewSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBFullScreenToSplitViewSwitcherModifier topMostLayoutElements]
  -[SBFullScreenToSplitViewSwitcherModifier handleSceneReadyEvent:]
  -[SBFullScreenToSplitViewSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]


SBChainableModifierEventResponse : NSObject <BSDescriptionProviding>
 @property  BOOL valid
 @property  double delay
 @property  BOOL requiresExplicitTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBChainableModifierEventResponse responseByAppendingResponse:toResponse:]
  +[SBChainableModifierEventResponse newEventResponse]

  // instance methods
  -[SBChainableModifierEventResponse loggingCategory]
  -[SBChainableModifierEventResponse delay]
  -[SBChainableModifierEventResponse isValid]
  -[SBChainableModifierEventResponse .cxx_destruct]
  -[SBChainableModifierEventResponse succinctDescriptionBuilder]
  -[SBChainableModifierEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBChainableModifierEventResponse init]
  -[SBChainableModifierEventResponse descriptionWithMultilinePrefix:]
  -[SBChainableModifierEventResponse succinctDescription]
  -[SBChainableModifierEventResponse addChildResponse:]
  -[SBChainableModifierEventResponse requiresExplicitTransaction]
  -[SBChainableModifierEventResponse enumerateChildResponsesUsingBlock:]
  -[SBChainableModifierEventResponse setRequiresExplicitTransaction:]
  -[SBChainableModifierEventResponse responseByTransformingResponseWithTransformer:]
  -[SBChainableModifierEventResponse setDelay:withValidator:]
  -[SBChainableModifierEventResponse addChildResponses:]
  -[SBChainableModifierEventResponse insertChildResponse:atIndex:]
  -[SBChainableModifierEventResponse _initWithChildResponses:]
  -[SBChainableModifierEventResponse enumerateResponseTreeUsingBlock:stop:]
  -[SBChainableModifierEventResponse consumeWithReason:]
  -[SBChainableModifierEventResponse enumerateResponseTreeUsingBlock:]


SBChainableModifierTitledEventResponse : SBChainableModifierEventResponse
 @property  NSString *title

  // class methods
  +[SBChainableModifierTitledEventResponse responseWithTitle:]

  // instance methods
  -[SBChainableModifierTitledEventResponse .cxx_destruct]
  -[SBChainableModifierTitledEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBChainableModifierTitledEventResponse title]


SBFloatingDockBehaviorAssertion : NSObject <BSDescriptionProviding, BSInvalidatable>
 @property  SBFloatingDockController *floatingDockController
 @property  unsigned long level
 @property  BOOL animated
 @property  BOOL pinned
 @property  BOOL gesturePossible
 @property  double progress
 @property  NSString *reason
 @property  NSDate *timestamp
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFloatingDockBehaviorAssertion floatingDockController]
  -[SBFloatingDockBehaviorAssertion isAnimated]
  -[SBFloatingDockBehaviorAssertion level]
  -[SBFloatingDockBehaviorAssertion .cxx_destruct]
  -[SBFloatingDockBehaviorAssertion isPinned]
  -[SBFloatingDockBehaviorAssertion initWithPinned:gesturePossible:atLevel:reason:withCompletion:]
  -[SBFloatingDockBehaviorAssertion succinctDescriptionBuilder]
  -[SBFloatingDockBehaviorAssertion progress]
  -[SBFloatingDockBehaviorAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBFloatingDockBehaviorAssertion init]
  -[SBFloatingDockBehaviorAssertion descriptionWithMultilinePrefix:]
  -[SBFloatingDockBehaviorAssertion succinctDescription]
  -[SBFloatingDockBehaviorAssertion reason]
  -[SBFloatingDockBehaviorAssertion modifyProgress:interactive:completion:]
  -[SBFloatingDockBehaviorAssertion timestamp]
  -[SBFloatingDockBehaviorAssertion initWithFloatingDockController:visibleProgress:animated:gesturePossible:atLevel:reason:withCompletion:]
  -[SBFloatingDockBehaviorAssertion dealloc]
  -[SBFloatingDockBehaviorAssertion invalidateWithCompletion:]
  -[SBFloatingDockBehaviorAssertion invalidate]
  -[SBFloatingDockBehaviorAssertion initWithVisibleProgress:gesturePossible:atLevel:reason:withCompletion:]
  -[SBFloatingDockBehaviorAssertion gesturePossible]


SBSlideOverEdgeProtectTongueSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  BOOL tonguePresented
 @property  unsigned long edge

  // instance methods
  -[SBSlideOverEdgeProtectTongueSwitcherModifierEvent edge]
  -[SBSlideOverEdgeProtectTongueSwitcherModifierEvent type]
  -[SBSlideOverEdgeProtectTongueSwitcherModifierEvent copyWithZone:]
  -[SBSlideOverEdgeProtectTongueSwitcherModifierEvent initWithTonguePresented:edge:]
  -[SBSlideOverEdgeProtectTongueSwitcherModifierEvent isTonguePresented]


SBPressTuple : NSObject <BSDescriptionProviding>
 @property  double durationDown
 @property  double durationUp
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPressTuple succinctDescriptionBuilder]
  -[SBPressTuple descriptionBuilderWithMultilinePrefix:]
  -[SBPressTuple isEqual:]
  -[SBPressTuple descriptionWithMultilinePrefix:]
  -[SBPressTuple succinctDescription]
  -[SBPressTuple setDurationUp:]
  -[SBPressTuple initWithDurationDown:durationUp:]
  -[SBPressTuple durationDown]
  -[SBPressTuple durationUp]
  -[SBPressTuple setDurationDown:]


SBDefaultProximityBacklightPolicy : NSObject <SBProximityBacklightPolicy>
 @property  SBIdleTimerGlobalCoordinator *idleTimerGlobalCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDefaultProximityBacklightPolicy .cxx_destruct]
  -[SBDefaultProximityBacklightPolicy dealloc]
  -[SBDefaultProximityBacklightPolicy setIdleTimerGlobalCoordinator:]
  -[SBDefaultProximityBacklightPolicy initWithBacklightController:]
  -[SBDefaultProximityBacklightPolicy _scheduleBacklightFactorToZeroAfterDebounceDuration:]
  -[SBDefaultProximityBacklightPolicy _scheduleBacklightFactorToZeroAfterDefaultDuration]
  -[SBDefaultProximityBacklightPolicy _restoreBacklightFactor]
  -[SBDefaultProximityBacklightPolicy proximitySensorManager:objectWithinProximityDidChange:]
  -[SBDefaultProximityBacklightPolicy _backlightWillUndim:]
  -[SBDefaultProximityBacklightPolicy _cancelScheduledBacklightFactorToZero]
  -[SBDefaultProximityBacklightPolicy _turnBacklightOff]
  -[SBDefaultProximityBacklightPolicy idleTimerGlobalCoordinator]


SBInteractionAfterWakeMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBInteractionAfterWakeMetric .cxx_destruct]
  -[SBInteractionAfterWakeMetric _trackUnlockOpportunity]
  -[SBInteractionAfterWakeMetric init]
  -[SBInteractionAfterWakeMetric _trackSessionWithDuration:]
  -[SBInteractionAfterWakeMetric _trackUnlockConversion:]
  -[SBInteractionAfterWakeMetric _determineIfShouldReport]


SBWalletPreArmController : NSObject
 @property  BOOL preArmAvailable
 @property  BOOL preArmAllowed
 @property  BOOL preArmTriggeredByLockButtonDoublePress
 @property  BOOL preArmTriggeredByHomeButtonDoublePress
 @property  BOOL preArmSuppressed
 @property  BOOL preArmExternallySuppressed

  // class methods
  +[SBWalletPreArmController sharedInstance]

  // instance methods
  -[SBWalletPreArmController presentPreArmInterfaceForTriggerSource:completion:]
  -[SBWalletPreArmController isPreArmAllowed]
  -[SBWalletPreArmController initWithPassLibrary:biometricResource:]
  -[SBWalletPreArmController .cxx_destruct]
  -[SBWalletPreArmController isPreArmSuppressed]
  -[SBWalletPreArmController init]
  -[SBWalletPreArmController isPreArmExternallySuppressed]
  -[SBWalletPreArmController isPreArmTriggeredByLockButtonDoublePress]
  -[SBWalletPreArmController acquireSuppressPreArmAssertionForReason:]
  -[SBWalletPreArmController isPreArmTriggeredByHomeButtonDoublePress]
  -[SBWalletPreArmController isPreArmAvailable]
  -[SBWalletPreArmController _contactlessInterfaceSourceForTriggerSource:]
  -[SBWalletPreArmController _computeTriggerSource]
  -[SBWalletPreArmController acquireSuppressPreArmAssertionOfType:forReason:]


SBFluidSwitcherSpaceTitleItemController : NSObject <SBDeviceApplicationSceneHandleObserver, SBIconObserver, BSInvalidatable>
 @property  BOOL useDarkLabels
 @property  unsigned long multiWindowIndicatorRoleMask
 @property  @? updateHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherSpaceTitleItemController setUpdateHandler:]
  -[SBFluidSwitcherSpaceTitleItemController _performUpdateHandler]
  -[SBFluidSwitcherSpaceTitleItemController updateHandler]
  -[SBFluidSwitcherSpaceTitleItemController setMultiWindowIndicatorRoleMask:]
  -[SBFluidSwitcherSpaceTitleItemController .cxx_destruct]
  -[SBFluidSwitcherSpaceTitleItemController initWithAppLayout:applicationSceneHandleProvider:displayIdentity:showCanvasTitles:]
  -[SBFluidSwitcherSpaceTitleItemController _updateDisplayItemIcons]
  -[SBFluidSwitcherSpaceTitleItemController isUsingDarkLabels]
  -[SBFluidSwitcherSpaceTitleItemController setUseDarkLabels:]
  -[SBFluidSwitcherSpaceTitleItemController multiWindowIndicatorRoleMask]
  -[SBFluidSwitcherSpaceTitleItemController sceneHandle:didChangeSceneTitle:]
  -[SBFluidSwitcherSpaceTitleItemController _loadIconForDisplayItem:]
  -[SBFluidSwitcherSpaceTitleItemController _computeHeaderItems]
  -[SBFluidSwitcherSpaceTitleItemController _iconForDisplayItem:]
  -[SBFluidSwitcherSpaceTitleItemController iconImageDidUpdate:]
  -[SBFluidSwitcherSpaceTitleItemController dealloc]
  -[SBFluidSwitcherSpaceTitleItemController invalidate]


SBClockApplicationIconImageView : SBHClockApplicationIconImageView

SBVolumeControlState : NSObject <NSCopying>
 @property  NSString *activeVolumeCategoryName
 @property  BOOL isAudioPlayingSomewhere
 @property  BOOL isCallOrFaceTimeActive
 @property  BOOL currentRouteHasVolumeControl
 @property  BOOL isFullyMuted
 @property  BOOL isRingerMuted
 @property  BOOL isLocked
 @property  BOOL isHostingAppOnLockScreen
 @property  BOOL isShowingLockScreenMediaControls

  // instance methods
  -[SBVolumeControlState setRingerMuted:]
  -[SBVolumeControlState .cxx_destruct]
  -[SBVolumeControlState currentRouteHasVolumeControl]
  -[SBVolumeControlState isFullyMuted]
  -[SBVolumeControlState isLocked]
  -[SBVolumeControlState isRingerMuted]
  -[SBVolumeControlState copyWithZone:]
  -[SBVolumeControlState setLocked:]
  -[SBVolumeControlState setCurrentRouteHasVolumeControl:]
  -[SBVolumeControlState isHostingAppOnLockScreen]
  -[SBVolumeControlState isAudioPlayingSomewhere]
  -[SBVolumeControlState isCallOrFaceTimeActive]
  -[SBVolumeControlState isShowingLockScreenMediaControls]
  -[SBVolumeControlState setAudioPlayingSomewhere:]
  -[SBVolumeControlState setCallOrFaceTimeActive:]
  -[SBVolumeControlState setFullyMuted:]
  -[SBVolumeControlState setActiveVolumeCategoryName:]
  -[SBVolumeControlState setHostingAppOnLockScreen:]
  -[SBVolumeControlState setShowingLockScreenMediaControls:]
  -[SBVolumeControlState activeVolumeCategoryName]


SBCursiveTextView : UIView
 @property  double duration

  // instance methods
  -[SBCursiveTextView configure]
  -[SBCursiveTextView setTime:]
  -[SBCursiveTextView .cxx_destruct]
  -[SBCursiveTextView layoutSubviews]
  -[SBCursiveTextView init]
  -[SBCursiveTextView initWithFrame:]
  -[SBCursiveTextView setFillColor:]
  -[SBCursiveTextView duration]
  -[SBCursiveTextView loadText:pointSize:]


SBDefaults : NSObject
  // class methods
  +[SBDefaults externalDefaults]
  +[SBDefaults localDefaults]


SBDeckToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBDeckToFullScreenSwitcherModifier homeScreenBackdropBlurType]
  -[SBDeckToFullScreenSwitcherModifier transitionWillBegin]
  -[SBDeckToFullScreenSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBDeckToFullScreenSwitcherModifier isHomeScreenContentRequired]
  -[SBDeckToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDeckToFullScreenSwitcherModifier handleTransitionEvent:]
  -[SBDeckToFullScreenSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBDeckToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBDeckToFullScreenSwitcherModifier .cxx_destruct]
  -[SBDeckToFullScreenSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBDeckToFullScreenSwitcherModifier isSwitcherWindowVisible]
  -[SBDeckToFullScreenSwitcherModifier shouldAsyncRenderUntilDelay:]
  -[SBDeckToFullScreenSwitcherModifier _layoutSettings]
  -[SBDeckToFullScreenSwitcherModifier wallpaperStyle]
  -[SBDeckToFullScreenSwitcherModifier cornerRadiiForIndex:]
  -[SBDeckToFullScreenSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBDeckToFullScreenSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBDeckToFullScreenSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBDeckToFullScreenSwitcherModifier topMostLayoutElements]
  -[SBDeckToFullScreenSwitcherModifier _appLayoutToScrollToDuringTransition]
  -[SBDeckToFullScreenSwitcherModifier initWithTransitionID:direction:fullScreenAppLayout:deckModifier:]


SBHomeGestureToSwitcherFloatingSwitcherModifier : SBTransitionSwitcherModifier
 @property  SBSwitcherModifier *multitaskingModifier
 @property  SBAppLayout *selectedAppLayout
 @property  SBFluidSwitcherAnimationSettings *animationSettings

  // instance methods
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier transitionWillBegin]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier setAnimationSettings:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier animationSettings]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier .cxx_destruct]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier _layoutSettings]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier setSelectedAppLayout:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier multitaskingModifier]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier selectedAppLayout]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier initWithTransitionID:multitaskingModifier:selectedAppLayout:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier setMultitaskingModifier:]


SBActivateHomeButtonSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBActivateHomeButtonSwitcherEventResponse type]


SBLockScreenContentAssertionTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLockScreenContentAssertionTestRecipe load]

  // instance methods
  -[SBLockScreenContentAssertionTestRecipe .cxx_destruct]
  -[SBLockScreenContentAssertionTestRecipe title]
  -[SBLockScreenContentAssertionTestRecipe handleVolumeIncrease]
  -[SBLockScreenContentAssertionTestRecipe handleVolumeDecrease]


SBCenterWindowToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCenterWindowToFullScreenSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBCenterWindowToFullScreenSwitcherModifier frameForIndex:]
  -[SBCenterWindowToFullScreenSwitcherModifier .cxx_destruct]
  -[SBCenterWindowToFullScreenSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBCenterWindowToFullScreenSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBCenterWindowToFullScreenSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBCenterWindowToFullScreenSwitcherModifier handleSceneReadyEvent:]
  -[SBCenterWindowToFullScreenSwitcherModifier initWithTransitionID:fullScreenWithCenterAppLayout:]


SBTripleClickSOSMigrationAlertItem : SBAlertItem
  // instance methods
  -[SBTripleClickSOSMigrationAlertItem shouldShowInLockScreen]
  -[SBTripleClickSOSMigrationAlertItem configure:requirePasscodeForActions:]
  -[SBTripleClickSOSMigrationAlertItem forcesModalAlertAppearance]
  -[SBTripleClickSOSMigrationAlertItem allowInSetup]


SBHomeGestureToSwitcherSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBHomeGestureToSwitcherSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeGestureToSwitcherSwitcherModifier transitionWillBegin]
  -[SBHomeGestureToSwitcherSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeGestureToSwitcherSwitcherModifier containerStatusBarAnimationDuration]
  -[SBHomeGestureToSwitcherSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeGestureToSwitcherSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBHomeGestureToSwitcherSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeGestureToSwitcherSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureToSwitcherSwitcherModifier .cxx_destruct]
  -[SBHomeGestureToSwitcherSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeGestureToSwitcherSwitcherModifier _layoutSettings]
  -[SBHomeGestureToSwitcherSwitcherModifier handleTimerEvent:]
  -[SBHomeGestureToSwitcherSwitcherModifier wallpaperStyle]
  -[SBHomeGestureToSwitcherSwitcherModifier cornerRadiiForIndex:]
  -[SBHomeGestureToSwitcherSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureToSwitcherSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeGestureToSwitcherSwitcherModifier _appLayoutToScrollToDuringTransition]
  -[SBHomeGestureToSwitcherSwitcherModifier _dismissForEmptySwitcherResponseName]
  -[SBHomeGestureToSwitcherSwitcherModifier initWithTransitionID:multitaskingModifier:selectedAppLayout:startingEnvironmentMode:liftOfVelocity:liftOffTranslation:]


SBApplicationShortcutStoreManager : NSObject
  // class methods
  +[SBApplicationShortcutStoreManager sharedManager]

  // instance methods
  -[SBApplicationShortcutStoreManager _installedAppsDidChange:]
  -[SBApplicationShortcutStoreManager invalidateCache]
  -[SBApplicationShortcutStoreManager .cxx_destruct]
  -[SBApplicationShortcutStoreManager applicationShortcutItemsForBundleIdentifier:withVersion:]
  -[SBApplicationShortcutStoreManager _stateLock_storeForBundleIdentifier:]
  -[SBApplicationShortcutStoreManager saveSynchronously]
  -[SBApplicationShortcutStoreManager init]
  -[SBApplicationShortcutStoreManager setApplicationShortcutItems:forBundleIdentifier:withVersion:]
  -[SBApplicationShortcutStoreManager dealloc]


SBInteractiveScreenshotDomain : PTDomain
  // class methods
  +[SBInteractiveScreenshotDomain domainGroupName]
  +[SBInteractiveScreenshotDomain rootSettings]
  +[SBInteractiveScreenshotDomain domainName]
  +[SBInteractiveScreenshotDomain rootSettingsClass]


SBDeviceApplicationSceneOverlayViewProvider : NSObject
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  <SBDeviceApplicationSceneOverlayViewProviderDelegate> *delegate
 @property  UIViewController<SBDeviceApplicationSceneOverlayViewController> *overlayViewController
 @property  BOOL prefersStatusBarHidden
 @property  long long preferredStatusBarStyle
 @property  BOOL wantsResignActiveAssertion
 @property  long long priority

  // instance methods
  -[SBDeviceApplicationSceneOverlayViewProvider preferredStatusBarStyle]
  -[SBDeviceApplicationSceneOverlayViewProvider preferredInterfaceOrientationForPresentation]
  -[SBDeviceApplicationSceneOverlayViewProvider bestHomeAffordanceOrientationForOrientation:]
  -[SBDeviceApplicationSceneOverlayViewProvider hideContentWithAnimation:completionHandler:]
  -[SBDeviceApplicationSceneOverlayViewProvider prefersStatusBarHidden]
  -[SBDeviceApplicationSceneOverlayViewProvider _activateIfPossible]
  -[SBDeviceApplicationSceneOverlayViewProvider setSceneHandle:]
  -[SBDeviceApplicationSceneOverlayViewProvider sceneHandle]
  -[SBDeviceApplicationSceneOverlayViewProvider wantsResignActiveAssertion]
  -[SBDeviceApplicationSceneOverlayViewProvider .cxx_destruct]
  -[SBDeviceApplicationSceneOverlayViewProvider _deactivateIfPossible]
  -[SBDeviceApplicationSceneOverlayViewProvider showContentWithAnimation:completionHandler:]
  -[SBDeviceApplicationSceneOverlayViewProvider _realOverlayViewController]
  -[SBDeviceApplicationSceneOverlayViewProvider priority]
  -[SBDeviceApplicationSceneOverlayViewProvider shouldFollowSceneOrientation]
  -[SBDeviceApplicationSceneOverlayViewProvider delegate]
  -[SBDeviceApplicationSceneOverlayViewProvider initWithSceneHandle:delegate:]
  -[SBDeviceApplicationSceneOverlayViewProvider dealloc]
  -[SBDeviceApplicationSceneOverlayViewProvider overlayViewController]
  -[SBDeviceApplicationSceneOverlayViewProvider supportedInterfaceOrientations]


SBExternalDisplayPresenter : NSObject <SBSceneHandleObserver, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBExternalDisplayPresenter .cxx_destruct]
  -[SBExternalDisplayPresenter sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBExternalDisplayPresenter dealloc]
  -[SBExternalDisplayPresenter invalidate]
  -[SBExternalDisplayPresenter observeValueForKeyPath:ofObject:change:context:]
  -[SBExternalDisplayPresenter initWithLayoutPublisher:displayConfiguration:]
  -[SBExternalDisplayPresenter updateToConfiguration:withForegroundApp:]
  -[SBExternalDisplayPresenter _setPreventIdleSleepForApp:presenting:]
  -[SBExternalDisplayPresenter _createUpdateTransaction]
  -[SBExternalDisplayPresenter _enqueuePresentationUpdate]
  -[SBExternalDisplayPresenter _ensureMode:overscanCompensation:]
  -[SBExternalDisplayPresenter _updateHostingIfNecessary]


SBFMotionAlarmController : NSObject <CMMotionAlarmDelegateProtocol>
 @property  NSMutableArray *observers
 @property  CMMotionAlarmManager *motionAlarmManager
 @property  <SBFMotionAlarmDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFMotionAlarmController .cxx_destruct]
  -[SBFMotionAlarmController alarmDidRegister:error:]
  -[SBFMotionAlarmController alarmDidUnregister:error:]
  -[SBFMotionAlarmController remoteAppLaunchedWithResult:error:]
  -[SBFMotionAlarmController alarmDidFire:error:]
  -[SBFMotionAlarmController _notifyDelegate]
  -[SBFMotionAlarmController setDelegate:]
  -[SBFMotionAlarmController setObservers:]
  -[SBFMotionAlarmController init]
  -[SBFMotionAlarmController delegate]
  -[SBFMotionAlarmController observers]
  -[SBFMotionAlarmController dealloc]
  -[SBFMotionAlarmController _unregisterMotionAlarm]
  -[SBFMotionAlarmController _registerMotionAlarm]
  -[SBFMotionAlarmController registerMotionAlarm]
  -[SBFMotionAlarmController unregisterMotionAlarm]
  -[SBFMotionAlarmController motionAlarmManager]
  -[SBFMotionAlarmController setMotionAlarmManager:]


SBLowEndHardwareSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBLowEndHardwareSwitcherModifier appLayoutsToResignActive]
  -[SBLowEndHardwareSwitcherModifier wallpaperScale]
  -[SBLowEndHardwareSwitcherModifier homeScreenScale]
  -[SBLowEndHardwareSwitcherModifier homeScreenAlpha]
  -[SBLowEndHardwareSwitcherModifier keyboardSuppressionMode]
  -[SBLowEndHardwareSwitcherModifier _shouldResignActiveAppsUnderFloatingApp]
  -[SBLowEndHardwareSwitcherModifier handleTransitionEvent:]
  -[SBLowEndHardwareSwitcherModifier _shouldSimplifyForOpenFolder]
  -[SBLowEndHardwareSwitcherModifier initWithSimplificationOptions:]
  -[SBLowEndHardwareSwitcherModifier _shouldSimplifyForWidgetCenterAndLibrary]


SBShelfSwitcherModifier : SBSwitcherModifier
 @property  SBSwitcherShelf *shelf

  // class methods
  +[SBShelfSwitcherModifier contentOptionsForTransitionEvent:context:]

  // instance methods
  -[SBShelfSwitcherModifier visibleShelves]
  -[SBShelfSwitcherModifier frameForShelf:]
  -[SBShelfSwitcherModifier presentationAttributesForShelf:]
  -[SBShelfSwitcherModifier containerLeafAppLayoutForShelf:]
  -[SBShelfSwitcherModifier handleTransitionEvent:]
  -[SBShelfSwitcherModifier .cxx_destruct]
  -[SBShelfSwitcherModifier shelf]
  -[SBShelfSwitcherModifier homeAffordanceLayoutElementToPortalIntoShelf:]
  -[SBShelfSwitcherModifier topMostLayoutElements]
  -[SBShelfSwitcherModifier focusedAppLayoutForShelf:]
  -[SBShelfSwitcherModifier ignoredDisplayItemsForShelf:]
  -[SBShelfSwitcherModifier handleGestureEvent:]
  -[SBShelfSwitcherModifier initWithShelf:contentOptions:activeFullScreenAppLayout:activeFloatingAppLayout:presentationTargetFrame:presentedFromAppLayout:]
  -[SBShelfSwitcherModifier _responseForDismissingIfNeededGestureInitiated:]


SBReorderInfoAlert : SBHomeScreenNagAlert
  // instance methods
  -[SBReorderInfoAlert init]
  -[SBReorderInfoAlert didDeactivateForReason:]


SBRotationDodgingModifier : SBDodgingModifier
 @property  NSUUID *identifier
 @property  long long fromOrientation
 @property  long long toOrientation
 @property  unsigned long phase

  // instance methods
  -[SBRotationDodgingModifier phase]
  -[SBRotationDodgingModifier setPhase:]
  -[SBRotationDodgingModifier .cxx_destruct]
  -[SBRotationDodgingModifier identifier]
  -[SBRotationDodgingModifier toOrientation]
  -[SBRotationDodgingModifier fromOrientation]
  -[SBRotationDodgingModifier setIdentifier:]
  -[SBRotationDodgingModifier setToOrientation:]
  -[SBRotationDodgingModifier setFromOrientation:]
  -[SBRotationDodgingModifier animationBehaviorModeForIdentifier:]
  -[SBRotationDodgingModifier handleRotationEvent:]
  -[SBRotationDodgingModifier initWithIdentifier:fromOrientation:toOrientation:]


SBAssistantActiveInterfaceOrientationWindow : SBSecureMainScreenActiveInterfaceOrientationWindow
 @property  BOOL touchesPassThroughToSpringBoard
 @property  SBAssistantRootViewController *assistantRootViewController

  // class methods
  +[SBAssistantActiveInterfaceOrientationWindow sb_autorotates]
  +[SBAssistantActiveInterfaceOrientationWindow _traitsArbiterOrientationActuationRole]
  +[SBAssistantActiveInterfaceOrientationWindow defaultLayoutStrategy]
  +[SBAssistantActiveInterfaceOrientationWindow _isSecure]

  // instance methods
  -[SBAssistantActiveInterfaceOrientationWindow _canBecomeKeyWindow]
  -[SBAssistantActiveInterfaceOrientationWindow hitTest:withEvent:]
  -[SBAssistantActiveInterfaceOrientationWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBAssistantActiveInterfaceOrientationWindow initWithRole:debugName:]
  -[SBAssistantActiveInterfaceOrientationWindow touchesPassThroughToSpringBoard]
  -[SBAssistantActiveInterfaceOrientationWindow isOpaque]
  -[SBAssistantActiveInterfaceOrientationWindow assistantRootViewController]
  -[SBAssistantActiveInterfaceOrientationWindow _usesWindowServerHitTesting]
  -[SBAssistantActiveInterfaceOrientationWindow setTouchesPassThroughToSpringBoard:]


SBAssistantWindow : SBWindow
 @property  BOOL touchesPassThroughToSpringBoard
 @property  SBAssistantRootViewController *assistantRootViewController

  // class methods
  +[SBAssistantWindow sb_autorotates]
  +[SBAssistantWindow defaultLayoutStrategy]
  +[SBAssistantWindow _isSecure]

  // instance methods
  -[SBAssistantWindow _canBecomeKeyWindow]
  -[SBAssistantWindow hitTest:withEvent:]
  -[SBAssistantWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBAssistantWindow setRootViewController:]
  -[SBAssistantWindow touchesPassThroughToSpringBoard]
  -[SBAssistantWindow isOpaque]
  -[SBAssistantWindow assistantRootViewController]
  -[SBAssistantWindow dealloc]
  -[SBAssistantWindow setTouchesPassThroughToSpringBoard:]
  -[SBAssistantWindow initWithScreen:role:debugName:]


SBSwitcherScrollViewAttributes : NSObject <NSCopying, NSMutableCopying>
 @property  {CGSize=dd} contentSize
 @property  double decelerationRate
 @property  BOOL scrollViewPagingEnabled
 @property  unsigned long scrollAxis
 @property  {CGSize=dd} interpageSpacingForPaging
 @property  {CGPoint=dd} pagingOrigin
 @property  BOOL interpolatesDuringSwipeToKill

  // instance methods
  -[SBSwitcherScrollViewAttributes contentSize]
  -[SBSwitcherScrollViewAttributes scrollAxis]
  -[SBSwitcherScrollViewAttributes pagingOrigin]
  -[SBSwitcherScrollViewAttributes mutableCopyWithZone:]
  -[SBSwitcherScrollViewAttributes _copyWithClass:]
  -[SBSwitcherScrollViewAttributes copyWithZone:]
  -[SBSwitcherScrollViewAttributes setDecelerationRate:]
  -[SBSwitcherScrollViewAttributes decelerationRate]
  -[SBSwitcherScrollViewAttributes setContentSize:]
  -[SBSwitcherScrollViewAttributes setScrollAxis:]
  -[SBSwitcherScrollViewAttributes setPagingOrigin:]
  -[SBSwitcherScrollViewAttributes scrollViewPagingEnabled]
  -[SBSwitcherScrollViewAttributes interpageSpacingForPaging]
  -[SBSwitcherScrollViewAttributes setScrollViewPagingEnabled:]
  -[SBSwitcherScrollViewAttributes setInterpageSpacingForPaging:]
  -[SBSwitcherScrollViewAttributes setInterpolatesDuringSwipeToKill:]
  -[SBSwitcherScrollViewAttributes interpolatesDuringSwipeToKill]


SBMutableSwitcherScrollViewAttributes : SBSwitcherScrollViewAttributes
 @property  {CGSize=dd} contentSize
 @property  double decelerationRate
 @property  BOOL scrollViewPagingEnabled
 @property  unsigned long scrollAxis
 @property  {CGSize=dd} interpageSpacingForPaging
 @property  {CGPoint=dd} pagingOrigin
 @property  BOOL interpolatesDuringSwipeToKill


SBSwitcherAnimationAttributes : NSObject <NSCopying, NSMutableCopying>
 @property  long long updateMode
 @property  SBFFluidBehaviorSettings *layoutSettings
 @property  SBFFluidBehaviorSettings *positionSettings
 @property  SBFFluidBehaviorSettings *scaleSettings
 @property  SBFFluidBehaviorSettings *opacitySettings
 @property  SBFFluidBehaviorSettings *cornerRadiusSettings
 @property  SBFFluidBehaviorSettings *clippingSettings
 @property  long long layoutUpdateMode
 @property  long long positionUpdateMode
 @property  long long scaleUpdateMode
 @property  long long opacityUpdateMode
 @property  long long cornerRadiusUpdateMode
 @property  long long clippingUpdateMode
 @property  long long titleAndIconOpacityUpdateMode

  // instance methods
  -[SBSwitcherAnimationAttributes .cxx_destruct]
  -[SBSwitcherAnimationAttributes setScaleSettings:]
  -[SBSwitcherAnimationAttributes setLayoutSettings:]
  -[SBSwitcherAnimationAttributes updateMode]
  -[SBSwitcherAnimationAttributes layoutSettings]
  -[SBSwitcherAnimationAttributes mutableCopyWithZone:]
  -[SBSwitcherAnimationAttributes setOpacitySettings:]
  -[SBSwitcherAnimationAttributes _copyWithClass:]
  -[SBSwitcherAnimationAttributes copyWithZone:]
  -[SBSwitcherAnimationAttributes opacitySettings]
  -[SBSwitcherAnimationAttributes scaleSettings]
  -[SBSwitcherAnimationAttributes setPositionSettings:]
  -[SBSwitcherAnimationAttributes setCornerRadiusSettings:]
  -[SBSwitcherAnimationAttributes setUpdateMode:]
  -[SBSwitcherAnimationAttributes layoutUpdateMode]
  -[SBSwitcherAnimationAttributes positionUpdateMode]
  -[SBSwitcherAnimationAttributes scaleUpdateMode]
  -[SBSwitcherAnimationAttributes cornerRadiusUpdateMode]
  -[SBSwitcherAnimationAttributes clippingUpdateMode]
  -[SBSwitcherAnimationAttributes positionSettings]
  -[SBSwitcherAnimationAttributes cornerRadiusSettings]
  -[SBSwitcherAnimationAttributes clippingSettings]
  -[SBSwitcherAnimationAttributes opacityUpdateMode]
  -[SBSwitcherAnimationAttributes titleAndIconOpacityUpdateMode]
  -[SBSwitcherAnimationAttributes setLayoutUpdateMode:]
  -[SBSwitcherAnimationAttributes setPositionUpdateMode:]
  -[SBSwitcherAnimationAttributes setScaleUpdateMode:]
  -[SBSwitcherAnimationAttributes setOpacityUpdateMode:]
  -[SBSwitcherAnimationAttributes setCornerRadiusUpdateMode:]
  -[SBSwitcherAnimationAttributes setClippingUpdateMode:]
  -[SBSwitcherAnimationAttributes setClippingSettings:]
  -[SBSwitcherAnimationAttributes setTitleAndIconOpacityUpdateMode:]


SBMutableSwitcherAnimationAttributes : SBSwitcherAnimationAttributes
 @property  long long updateMode
 @property  SBFFluidBehaviorSettings *layoutSettings
 @property  SBFFluidBehaviorSettings *positionSettings
 @property  SBFFluidBehaviorSettings *scaleSettings
 @property  SBFFluidBehaviorSettings *opacitySettings
 @property  SBFFluidBehaviorSettings *cornerRadiusSettings
 @property  SBFFluidBehaviorSettings *clippingSettings
 @property  long long layoutUpdateMode
 @property  long long positionUpdateMode
 @property  long long scaleUpdateMode
 @property  long long opacityUpdateMode
 @property  long long cornerRadiusUpdateMode
 @property  long long clippingUpdateMode
 @property  long long titleAndIconOpacityUpdateMode


SBSwitcherResizeGrabberLayoutAttributes : NSObject <NSCopying, NSMutableCopying>
 @property  SBAppLayout *leafAppLayout
 @property  unsigned long edge

  // class methods
  +[SBSwitcherResizeGrabberLayoutAttributes attributesWithLeafAppLayout:edge:]

  // instance methods
  -[SBSwitcherResizeGrabberLayoutAttributes edge]
  -[SBSwitcherResizeGrabberLayoutAttributes _copy]
  -[SBSwitcherResizeGrabberLayoutAttributes .cxx_destruct]
  -[SBSwitcherResizeGrabberLayoutAttributes setEdge:]
  -[SBSwitcherResizeGrabberLayoutAttributes mutableCopyWithZone:]
  -[SBSwitcherResizeGrabberLayoutAttributes copyWithZone:]
  -[SBSwitcherResizeGrabberLayoutAttributes setLeafAppLayout:]
  -[SBSwitcherResizeGrabberLayoutAttributes leafAppLayout]


SBBlurViewCoordinator : NSObject
 @property  NSArray *viewControllers
 @property  BOOL blurred
 @property  unsigned long state

  // instance methods
  -[SBBlurViewCoordinator _setState:]
  -[SBBlurViewCoordinator viewControllers]
  -[SBBlurViewCoordinator .cxx_destruct]
  -[SBBlurViewCoordinator isBlurred]
  -[SBBlurViewCoordinator init]
  -[SBBlurViewCoordinator state]
  -[SBBlurViewCoordinator initWithElementViewControllers:]
  -[SBBlurViewCoordinator setBlurred:withAnimationFactory:completion:]
  -[SBBlurViewCoordinator _fireBlocksForState:]
  -[SBBlurViewCoordinator addNotifyBlock:forState:]
  -[SBBlurViewCoordinator removeNotifyBlock:forState:]


SBBacklightController : NSObject
 @property  BOOL isPendingScreenUnblankAfterCACommit
 @property  BOOL screenIsOn
 @property  BOOL screenIsDim
 @property  long long lastBacklightChangeSource
 @property  SBHIDUILockAssertion *currentHIDUILockAssertion
 @property  double backlightFactor

  // class methods
  +[SBBacklightController sharedInstance]
  +[SBBacklightController sharedInstanceIfExists]
  +[SBBacklightController _sharedInstanceCreateIfNeeded:]

  // instance methods
  -[SBBacklightController preventIdleSleep]
  -[SBBacklightController unregisterInformer:]
  -[SBBacklightController _performDeferredBacklightRampWorkWithInfo:]
  -[SBBacklightController preventIdleSleepForNumberOfSeconds:]
  -[SBBacklightController _notifyObserversDidAnimateToFactor:source:]
  -[SBBacklightController registerInformer:]
  -[SBBacklightController allowIdleSleep]
  -[SBBacklightController .cxx_destruct]
  -[SBBacklightController defaultLockScreenDimIntervalWhenNotificationsPresent]
  -[SBBacklightController screenIsDim]
  -[SBBacklightController backlightFactor]
  -[SBBacklightController currentHIDUILockAssertion]
  -[SBBacklightController init]
  -[SBBacklightController defaultLockScreenDimInterval]
  -[SBBacklightController _deferredScreenUnblankDone]
  -[SBBacklightController _notifyObserversWillAnimateToFactor:source:]
  -[SBBacklightController addObserver:]
  -[SBBacklightController turnOnScreenFullyWithBacklightSource:]
  -[SBBacklightController shouldTurnOnScreenForBacklightSource:]
  -[SBBacklightController isPendingScreenUnblankAfterCACommit]
  -[SBBacklightController screenIsOn]
  -[SBBacklightController setBacklightFactor:source:]
  -[SBBacklightController setBacklightFactorPending:]
  -[SBBacklightController _undimFromSource:]
  -[SBBacklightController _animateBacklightToFactor:duration:source:silently:completion:]
  -[SBBacklightController setCurrentHIDUILockAssertion:]
  -[SBBacklightController reloadDefaults]
  -[SBBacklightController removeObserver:]
  -[SBBacklightController lastBacklightChangeSource]
  -[SBBacklightController animateBacklightToFactor:duration:source:completion:]
  -[SBBacklightController _startFadeOutAnimationFromLockSource:]
  -[SBBacklightController _suspendProxAndMultitouch:source:]


SBSystemNotesInteractionManager : NSObject <SBSystemGestureRecognizerDelegate, SBFZStackParticipantDelegate, SBPIPInteractionControllerDataSource, SBPIPSceneContentContainerAdapterDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemNotesInteractionManager debugName]
  -[SBSystemNotesInteractionManager dismissAnimated:completion:]
  -[SBSystemNotesInteractionManager _gestureRecognizerIsActive:]
  -[SBSystemNotesInteractionManager zStackParticipant:updatePreferences:]
  -[SBSystemNotesInteractionManager zStackParticipantDidChange:]
  -[SBSystemNotesInteractionManager .cxx_destruct]
  -[SBSystemNotesInteractionManager viewForSystemGestureRecognizer:]
  -[SBSystemNotesInteractionManager gestureRecognizerShouldBegin:]
  -[SBSystemNotesInteractionManager layoutSettings]
  -[SBSystemNotesInteractionManager gestureRecognizer:shouldReceiveTouch:]
  -[SBSystemNotesInteractionManager expandAnimated:]
  -[SBSystemNotesInteractionManager collapseAnimated:]
  -[SBSystemNotesInteractionManager initWithWorkspace:systemGestureManager:dataSource:delegate:]
  -[SBSystemNotesInteractionManager canHandlePresentationRequests:]
  -[SBSystemNotesInteractionManager startingPositionForExternalPresentationRequest]
  -[SBSystemNotesInteractionManager peepAnimated:]
  -[SBSystemNotesInteractionManager interactionControllerUseSystemGesturesForResizing:]
  -[SBSystemNotesInteractionManager defaultPositionHyperregionComposers]
  -[SBSystemNotesInteractionManager interactionControllerScalesDuringPanGesture:]
  -[SBSystemNotesInteractionManager interactionController:updateScaleInteractor:pipSize:forPanGesture:]
  -[SBSystemNotesInteractionManager interactionControllerIsExternalPanGestureRecognizing:]
  -[SBSystemNotesInteractionManager _updateFailureRequirements]
  -[SBSystemNotesInteractionManager _springBoardBootCompleted:]
  -[SBSystemNotesInteractionManager contentContainerAdapter:handleDestructionRequestForSceneHandle:]
  -[SBSystemNotesInteractionManager contentContainerAdapter:willBeginInteractionWithGestureRecognizer:]
  -[SBSystemNotesInteractionManager contentContainerAdapterDidEndInteraction:]
  -[SBSystemNotesInteractionManager contentContainerAdapterPanGestureDidEnd:]
  -[SBSystemNotesInteractionManager initialStashStateForContentContainerAdapter:]
  -[SBSystemNotesInteractionManager contentContainerAdapter:willUpdateStashState:]
  -[SBSystemNotesInteractionManager contentContainerAdapterShouldUpdateUIForStashing:]
  -[SBSystemNotesInteractionManager _setupPencilGestureRecognizers]
  -[SBSystemNotesInteractionManager _setupFingerGestureRecognizers]
  -[SBSystemNotesInteractionManager _updateStashPadding]
  -[SBSystemNotesInteractionManager _cornersForAllSwipes]
  -[SBSystemNotesInteractionManager _cancelGestureIfNecessary:reason:]
  -[SBSystemNotesInteractionManager _presentationModeForGestureBegin]
  -[SBSystemNotesInteractionManager _cornerForGestureRecognizer:]
  -[SBSystemNotesInteractionManager _touchTypeForGestureRecognizer:]
  -[SBSystemNotesInteractionManager _cornersForTouchType:]
  -[SBSystemNotesInteractionManager _gestureSettingsForRecognizer:]
  -[SBSystemNotesInteractionManager _orientedLocationForReferenceLocation:]
  -[SBSystemNotesInteractionManager _pointForGestureCorner:]
  -[SBSystemNotesInteractionManager _panDistanceBeforeScalingForGestureRecognizer:]
  -[SBSystemNotesInteractionManager _panDistancePer1xScalingForGestureRecognizer:]
  -[SBSystemNotesInteractionManager _panInitialThumbnailScaleForGestureRecognizer:]
  -[SBSystemNotesInteractionManager _scaleThresholdBeforeFullSizeForGestureRecognizer:]
  -[SBSystemNotesInteractionManager _handleInteractiveSystemNotesGesture:]
  -[SBSystemNotesInteractionManager _shouldEdgeProtectGestureRecognizer:]
  -[SBSystemNotesInteractionManager _handleNonInteractiveSwipeInGesture:]
  -[SBSystemNotesInteractionManager _handleInteractiveSwipeInGesture:]
  -[SBSystemNotesInteractionManager _absoluteScaleForInteractiveSystemNotesGesture:]
  -[SBSystemNotesInteractionManager _absoluteScaleThresholdBeforeFullSizeForGestureRecognizer:]
  -[SBSystemNotesInteractionManager _panRecognizerOverFlickThreshold:]
  -[SBSystemNotesInteractionManager _interactionController:updateScaleInteractorForSwipeToDismiss:pipSize:forPanGesture:]
  -[SBSystemNotesInteractionManager _interactionController:updateScaleInteractorForSwipeToPresent:pipSize:forPanGesture:]
  -[SBSystemNotesInteractionManager _convertReferenceVelocity:toOrientation:]
  -[SBSystemNotesInteractionManager _flickVelocityThresholdForGestureRecognizer:]
  -[SBSystemNotesInteractionManager _cornerDistanceBeforeScalingForDismissGestureRecognizer:]
  -[SBSystemNotesInteractionManager _setupForInteractiveDismissal]
  -[SBSystemNotesInteractionManager _gestureIsActive]


SBTransientlyVisibleSlideOverTongueSwitcherModifier : SBSwitcherModifier
 @property  unsigned long mode

  // class methods
  +[SBTransientlyVisibleSlideOverTongueSwitcherModifier slideOverTongueTransientlyVisibleModeForEvent:]

  // instance methods
  -[SBTransientlyVisibleSlideOverTongueSwitcherModifier slideOverTongueDirection]
  -[SBTransientlyVisibleSlideOverTongueSwitcherModifier slideOverTongueState]
  -[SBTransientlyVisibleSlideOverTongueSwitcherModifier handleTransitionEvent:]
  -[SBTransientlyVisibleSlideOverTongueSwitcherModifier initWithMode:]
  -[SBTransientlyVisibleSlideOverTongueSwitcherModifier handleTimerEvent:]
  -[SBTransientlyVisibleSlideOverTongueSwitcherModifier mode]
  -[SBTransientlyVisibleSlideOverTongueSwitcherModifier handleGestureEvent:]
  -[SBTransientlyVisibleSlideOverTongueSwitcherModifier handleSlideOverEdgeProtectTongueEvent:]


SBShutdownContext : NSObject <NSCopying>
 @property  NSString *reason
 @property  BOOL fromUserPowerDown

  // instance methods
  -[SBShutdownContext initWithReason:]
  -[SBShutdownContext .cxx_destruct]
  -[SBShutdownContext isEqual:]
  -[SBShutdownContext reason]
  -[SBShutdownContext copyWithZone:]
  -[SBShutdownContext setFromUserPowerDown:]
  -[SBShutdownContext fromUserPowerDown]


SBApplicationRestrictionController : NSObject <STTelephonyStateObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationRestrictionController initWithDataSource:]
  -[SBApplicationRestrictionController carrierBundleInfoDidChangeForStateProvider:slot:]
  -[SBApplicationRestrictionController .cxx_destruct]
  -[SBApplicationRestrictionController init]
  -[SBApplicationRestrictionController noteRestrictionsMayHaveChanged]
  -[SBApplicationRestrictionController noteApplicationIdentifiersDidChangeWithAdded:replaced:removed:]
  -[SBApplicationRestrictionController addObserver:]
  -[SBApplicationRestrictionController isApplicationIdentifierRestricted:]
  -[SBApplicationRestrictionController beginPostingChanges]
  -[SBApplicationRestrictionController dealloc]
  -[SBApplicationRestrictionController removeObserver:]
  -[SBApplicationRestrictionController noteVisibilityOverridesDidChange]


SBTodayKeepOnHomeScreenPlatterView : UIView
 @property  UILabel *titleLabel
 @property  UILabel *descriptionLabel
 @property  UISwitch *pinnedSwitch
 @property  MTMaterialView *backgroundView
 @property  BOOL pinned

  // instance methods
  -[SBTodayKeepOnHomeScreenPlatterView titleLabel]
  -[SBTodayKeepOnHomeScreenPlatterView .cxx_destruct]
  -[SBTodayKeepOnHomeScreenPlatterView setPinned:]
  -[SBTodayKeepOnHomeScreenPlatterView isPinned]
  -[SBTodayKeepOnHomeScreenPlatterView setTitleLabel:]
  -[SBTodayKeepOnHomeScreenPlatterView traitCollection]
  -[SBTodayKeepOnHomeScreenPlatterView descriptionLabel]
  -[SBTodayKeepOnHomeScreenPlatterView initWithFrame:]
  -[SBTodayKeepOnHomeScreenPlatterView setBackgroundView:]
  -[SBTodayKeepOnHomeScreenPlatterView backgroundView]
  -[SBTodayKeepOnHomeScreenPlatterView setDescriptionLabel:]
  -[SBTodayKeepOnHomeScreenPlatterView _pinnedSwitchValueChanged:]
  -[SBTodayKeepOnHomeScreenPlatterView pinnedSwitch]
  -[SBTodayKeepOnHomeScreenPlatterView setPinnedSwitch:]


SBSnapshotSlotIdWrapper : NSObject
 @property  unsigned int slotId
 @property  CAContext *context

  // instance methods
  -[SBSnapshotSlotIdWrapper slotId]
  -[SBSnapshotSlotIdWrapper .cxx_destruct]
  -[SBSnapshotSlotIdWrapper init]
  -[SBSnapshotSlotIdWrapper dealloc]
  -[SBSnapshotSlotIdWrapper context]
  -[SBSnapshotSlotIdWrapper initWithContext:slotId:]


SBFloatingDockSuggestionsModel : NSObject <SBRecentDisplayItemsPersistenceDelegate, SBRecentDisplayItemsControllerDelegate, SBIconListModelObserver>
 @property  unsigned long maxSuggestions
 @property  SBAppSuggestionManager *appSuggestionManager
 @property  SBRecentDisplayItemsController *recentsController
 @property  SBRecentDisplayItemsDataStore *recentsDataStore
 @property  SBRecentDisplayItemsDefaults *recentsDefaults
 @property  SBIconListModel *userDockListModel
 @property  SBIconController *iconController
 @property  SBApplicationController *applicationController
 @property  SBIconModel *iconModel
 @property  SBFloatingDockDefaults *floatingDockDefaults
 @property  BOOL recentsEnabled
 @property  SBFAnalyticsClient *analyticsClient
 @property  NSMutableSet *pendingSuggestionUpdateReasons
 @property  NSMutableOrderedSet *currentRecentDisplayItems
 @property  NSMutableOrderedSet *currentRecentDisplayItemsSortedByRecency
 @property  NSOrderedSet *currentDisplayItems
 @property  PTSingleTestRecipe *stressTestRecipe
 @property  SBBestAppSuggestion *currentAppSuggestion
 @property  SBApplication *requestedSuggestedApplication
 @property  <SBFloatingDockSuggestionsModelDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFloatingDockSuggestionsModel applicationController]
  -[SBFloatingDockSuggestionsModel _iconModelDidLayout:]
  -[SBFloatingDockSuggestionsModel iconList:didReplaceIcon:withIcon:]
  -[SBFloatingDockSuggestionsModel floatingDockDefaults]
  -[SBFloatingDockSuggestionsModel .cxx_destruct]
  -[SBFloatingDockSuggestionsModel iconModel]
  -[SBFloatingDockSuggestionsModel setAnalyticsClient:]
  -[SBFloatingDockSuggestionsModel recentsController]
  -[SBFloatingDockSuggestionsModel setDelegate:]
  -[SBFloatingDockSuggestionsModel setIconModel:]
  -[SBFloatingDockSuggestionsModel _initializeAndObserveDefaults]
  -[SBFloatingDockSuggestionsModel init]
  -[SBFloatingDockSuggestionsModel _addStateCaptureHandlers]
  -[SBFloatingDockSuggestionsModel maxSuggestions]
  -[SBFloatingDockSuggestionsModel iconList:didAddIcon:]
  -[SBFloatingDockSuggestionsModel analyticsClient]
  -[SBFloatingDockSuggestionsModel delegate]
  -[SBFloatingDockSuggestionsModel dealloc]
  -[SBFloatingDockSuggestionsModel iconController]
  -[SBFloatingDockSuggestionsModel dockViewDidResignVisible]
  -[SBFloatingDockSuggestionsModel dockViewDidBecomeVisible]
  -[SBFloatingDockSuggestionsModel recentsEnabled]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsControllerShouldRepresentAppClipsAsWebClips:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:shouldAddItem:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:didAddItem:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:didAddItem:andDropItem:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:didMoveItemToFront:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:didRemoveItem:]
  -[SBFloatingDockSuggestionsModel _runStressTestWithCompletion:]
  -[SBFloatingDockSuggestionsModel requestedSuggestedApplication]
  -[SBFloatingDockSuggestionsModel setRequestedSuggestedApplication:]
  -[SBFloatingDockSuggestionsModel _iconModelDidChange:]
  -[SBFloatingDockSuggestionsModel currentDisplayItems]
  -[SBFloatingDockSuggestionsModel beginPendingUpdatesForReason:]
  -[SBFloatingDockSuggestionsModel endPendingUpdatesForReason:]
  -[SBFloatingDockSuggestionsModel currentAppSuggestion]
  -[SBFloatingDockSuggestionsModel recentsDataStore]
  -[SBFloatingDockSuggestionsModel recentsDefaults]
  -[SBFloatingDockSuggestionsModel appSuggestionManager]
  -[SBFloatingDockSuggestionsModel persistedDisplayItemsForDataStore:]
  -[SBFloatingDockSuggestionsModel dataStore:persistDisplayItems:]
  -[SBFloatingDockSuggestionsModel dataStore:shouldRestorePersistedDisplayItem:]
  -[SBFloatingDockSuggestionsModel initWithMaximumNumberOfSuggestions:iconController:recentsController:recentsDataStore:recentsDefaults:floatingDockDefaults:appSuggestionManager:analyticsClient:applicationController:]
  -[SBFloatingDockSuggestionsModel _setRecentsEnabled:]
  -[SBFloatingDockSuggestionsModel _dockListModelFromIconController]
  -[SBFloatingDockSuggestionsModel setUserDockListModel:]
  -[SBFloatingDockSuggestionsModel _reloadRecentsAndSuggestions]
  -[SBFloatingDockSuggestionsModel _appSuggestionsChanged:]
  -[SBFloatingDockSuggestionsModel _isPendingAppSuggestionsUpdate]
  -[SBFloatingDockSuggestionsModel _performAppSuggestionChangedWithNewSuggestion:]
  -[SBFloatingDockSuggestionsModel _updateCurrentDisplayItemsAfterContinuityChange:notifyDelegate:]
  -[SBFloatingDockSuggestionsModel _moveOrAddRecentThenCull:]
  -[SBFloatingDockSuggestionsModel _displayItemForAppSuggestion:]
  -[SBFloatingDockSuggestionsModel _indexForAppSuggestion:]
  -[SBFloatingDockSuggestionsModel _oldestRecent]
  -[SBFloatingDockSuggestionsModel _displayItemContainedInUserDock:]
  -[SBFloatingDockSuggestionsModel _handleNewRecentItem:]
  -[SBFloatingDockSuggestionsModel setCurrentDisplayItems:]
  -[SBFloatingDockSuggestionsModel _filterRecentDisplayItems:filteredOutItems:]
  -[SBFloatingDockSuggestionsModel _shouldProcessAppSuggestion:]
  -[SBFloatingDockSuggestionsModel userDockListModel]
  -[SBFloatingDockSuggestionsModel setRecentsEnabled:]
  -[SBFloatingDockSuggestionsModel pendingSuggestionUpdateReasons]
  -[SBFloatingDockSuggestionsModel currentRecentDisplayItems]
  -[SBFloatingDockSuggestionsModel currentRecentDisplayItemsSortedByRecency]
  -[SBFloatingDockSuggestionsModel stressTestRecipe]


SBStartupTransitionToLoginWindow : SBStartupTransitionToLockOut
  // instance methods
  -[SBStartupTransitionToLoginWindow suggestedLockAnimationForTransitionRequest:]


SBPrototypeController : NSObject <PTUIClient>
 @property  SBRestartManager *restartManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPrototypeController sharedInstance]

  // instance methods
  -[SBPrototypeController restartManager]
  -[SBPrototypeController handleKeyHIDEvent:]
  -[SBPrototypeController .cxx_destruct]
  -[SBPrototypeController _sendEvent:]
  -[SBPrototypeController handleVolumeDecreaseEvent]
  -[SBPrototypeController _createConnection]
  -[SBPrototypeController handleRingerSwitchEvent]
  -[SBPrototypeController _shouldSendEvent:]
  -[SBPrototypeController _acquireRemotePrototypingAssertion]
  -[SBPrototypeController setRestartManager:]
  -[SBPrototypeController _handlePrototypingEvent:]
  -[SBPrototypeController init]
  -[SBPrototypeController handleVolumeIncreaseEvent]
  -[SBPrototypeController _invalidateRemotePrototypingAssertion]
  -[SBPrototypeController _updateRemoteEditingState]
  -[SBPrototypeController rootSettings]
  -[SBPrototypeController killSpringBoard]
  -[SBPrototypeController restartSpringBoard]
  -[SBPrototypeController _handleKeyHIDEvent:]
  -[SBPrototypeController _updateKeyHIDEventRouters]


SBApplicationSceneView : SBSceneView
 @property  SBApplicationSceneHandle *sceneHandle
 @property  SBApplication *application

  // instance methods
  -[SBApplicationSceneView application]
  -[SBApplicationSceneView deviceApplicationSceneView]
  -[SBApplicationSceneView initWithSceneHandle:referenceSize:orientation:hostRequester:]


SBHomeGestureArbiter : NSObject <BSDescriptionProviding, SBHardwareButtonServiceObserver>
 @property  <BSInvalidatable> *stateCaptureHandle
 @property  NSMutableArray *participants
 @property  NSArray *owningParticipants
 @property  SBHomeGestureParticipant *hardwareButtonServiceParticipant
 @property  <BSInvalidatable> *hardwareButtonObserverAssertion
 @property  SBHardwareButtonService *hardwareButtonService
 @property  <SBHomeGestureArbiterObserver> *observer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureArbiter participants]
  -[SBHomeGestureArbiter setParticipants:]
  -[SBHomeGestureArbiter .cxx_destruct]
  -[SBHomeGestureArbiter _registerParticipant:]
  -[SBHomeGestureArbiter succinctDescriptionBuilder]
  -[SBHomeGestureArbiter descriptionBuilderWithMultilinePrefix:]
  -[SBHomeGestureArbiter init]
  -[SBHomeGestureArbiter _unregisterParticipant:]
  -[SBHomeGestureArbiter descriptionWithMultilinePrefix:]
  -[SBHomeGestureArbiter succinctDescription]
  -[SBHomeGestureArbiter stateCaptureHandle]
  -[SBHomeGestureArbiter observer]
  -[SBHomeGestureArbiter setStateCaptureHandle:]
  -[SBHomeGestureArbiter setObserver:]
  -[SBHomeGestureArbiter dealloc]
  -[SBHomeGestureArbiter participantWithIdentifier:delegate:]
  -[SBHomeGestureArbiter currentParticipants]
  -[SBHomeGestureArbiter buttonService:buttonKind:eventsConsumedDidChange:]
  -[SBHomeGestureArbiter hardwareButtonService]
  -[SBHomeGestureArbiter hardwareButtonObserverAssertion]
  -[SBHomeGestureArbiter setHardwareButtonObserverAssertion:]
  -[SBHomeGestureArbiter _updateHardwareButtonServiceParticipant]
  -[SBHomeGestureArbiter initWithHardwareButtonService:]
  -[SBHomeGestureArbiter _updateOwningParticipants]
  -[SBHomeGestureArbiter _setOwningParticipants:]
  -[SBHomeGestureArbiter hardwareButtonServiceParticipant]
  -[SBHomeGestureArbiter setHardwareButtonServiceParticipant:]
  -[SBHomeGestureArbiter _owningParticipants]
  -[SBHomeGestureArbiter setHardwareButtonService:]


SBHomeGestureParticipant : NSObject <BSDescriptionProviding>
 @property  SBHomeGestureArbiter *arbiter
 @property  BOOL ownsHomeGesture
 @property  long long resolvedHomeAffordanceSuppression
 @property  long long identifier
 @property  <SBHomeGestureParticipantDelegate> *delegate
 @property  BOOL canShareOwnershipWithNextParticipant
 @property  long long homeAffordanceSuppression
 @property  NSIndexSet *trumpsAdditionalIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureParticipant ownsHomeGesture]
  -[SBHomeGestureParticipant initWithIdentifier:]
  -[SBHomeGestureParticipant .cxx_destruct]
  -[SBHomeGestureParticipant succinctDescriptionBuilder]
  -[SBHomeGestureParticipant setDelegate:]
  -[SBHomeGestureParticipant descriptionBuilderWithMultilinePrefix:]
  -[SBHomeGestureParticipant descriptionWithMultilinePrefix:]
  -[SBHomeGestureParticipant identifier]
  -[SBHomeGestureParticipant succinctDescription]
  -[SBHomeGestureParticipant setArbiter:]
  -[SBHomeGestureParticipant arbiter]
  -[SBHomeGestureParticipant delegate]
  -[SBHomeGestureParticipant setIdentifier:]
  -[SBHomeGestureParticipant dealloc]
  -[SBHomeGestureParticipant invalidate]
  -[SBHomeGestureParticipant setOwnsHomeGesture:]
  -[SBHomeGestureParticipant homeAffordanceSuppression]
  -[SBHomeGestureParticipant setHomeAffordanceSuppression:]
  -[SBHomeGestureParticipant setTrumpsAdditionalIdentifiers:]
  -[SBHomeGestureParticipant resolvedHomeAffordanceSuppression]
  -[SBHomeGestureParticipant setCanShareOwnershipWithNextParticipant:]
  -[SBHomeGestureParticipant trumpsAdditionalIdentifiers]
  -[SBHomeGestureParticipant setResolvedHomeAffordanceSuppression:]
  -[SBHomeGestureParticipant canShareOwnershipWithNextParticipant]


SBLockScreenEmergencyDialerController : NSObject <SBLockScreenEmergencyCallViewControllerDelegate>
 @property  BOOL active
 @property  UIViewController *viewController
 @property  <SBLockScreenEmergencyDialerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenEmergencyDialerController viewController]
  -[SBLockScreenEmergencyDialerController isActive]
  -[SBLockScreenEmergencyDialerController .cxx_destruct]
  -[SBLockScreenEmergencyDialerController setDelegate:]
  -[SBLockScreenEmergencyDialerController activateWithCompletion:]
  -[SBLockScreenEmergencyDialerController delegate]
  -[SBLockScreenEmergencyDialerController deactivate]
  -[SBLockScreenEmergencyDialerController emergencyCallViewController:didExitWithError:]
  -[SBLockScreenEmergencyDialerController dismissEmergencyCallViewController:]


SBSlideUpAppGrabberView : UIView <_SBFVibrantView, SBUILegibility>
 @property  {UIEdgeInsets=dddd} hitTestEdgeInsets
 @property  BOOL vibrancyAllowed
 @property  _SBFVibrantSettings *vibrantSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double strength
 @property  _UILegibilitySettings *legibilitySettings

  // instance methods
  -[SBSlideUpAppGrabberView .cxx_destruct]
  -[SBSlideUpAppGrabberView vibrantSettings]
  -[SBSlideUpAppGrabberView layoutSubviews]
  -[SBSlideUpAppGrabberView setLegibilitySettings:]
  -[SBSlideUpAppGrabberView sizeThatFits:]
  -[SBSlideUpAppGrabberView setBackgroundColor:]
  -[SBSlideUpAppGrabberView strength]
  -[SBSlideUpAppGrabberView pointInside:withEvent:]
  -[SBSlideUpAppGrabberView setBackgroundView:]
  -[SBSlideUpAppGrabberView setStrength:]
  -[SBSlideUpAppGrabberView legibilitySettings]
  -[SBSlideUpAppGrabberView setVibrantSettings:]
  -[SBSlideUpAppGrabberView hitTestEdgeInsets]
  -[SBSlideUpAppGrabberView _shouldUseVibrancy]
  -[SBSlideUpAppGrabberView isVibrancyAllowed]
  -[SBSlideUpAppGrabberView setVibrancyAllowed:]
  -[SBSlideUpAppGrabberView setAppStyleGrabberImage:]
  -[SBSlideUpAppGrabberView _lazyLegibilityView]
  -[SBSlideUpAppGrabberView initWithAdditionalTopPadding:invertVerticalInsets:]
  -[SBSlideUpAppGrabberView setGrabberImageFromAppWithBundleIdentifier:]


SBNotificationHomeAffordanceController : NSObject <SBHomeGestureParticipantDelegate, SBFZStackParticipantDelegate>
 @property  SBScreenEdgePanGestureRecognizer *screenEdgePanGesture
 @property  BSAnimationSettings *hideHomeAffordanceAnimationSettings
 @property  BSAnimationSettings *unhideHomeAffordanceAnimationSettings
 @property  <UIViewSpringAnimationBehaviorDescribing> *settleHomeAffordanceAnimationBehaviorDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBNotificationHomeAffordanceController sharedInstance]

  // instance methods
  -[SBNotificationHomeAffordanceController zStackParticipant:updatePreferences:]
  -[SBNotificationHomeAffordanceController zStackParticipantDidChange:]
  -[SBNotificationHomeAffordanceController .cxx_destruct]
  -[SBNotificationHomeAffordanceController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBNotificationHomeAffordanceController screenEdgePanGesture]
  -[SBNotificationHomeAffordanceController hideHomeAffordanceAnimationSettings]
  -[SBNotificationHomeAffordanceController unhideHomeAffordanceAnimationSettings]
  -[SBNotificationHomeAffordanceController settleHomeAffordanceAnimationBehaviorDescription]
  -[SBNotificationHomeAffordanceController registerClient:withHomeGestureIdentifier:zStackIdentifier:]
  -[SBNotificationHomeAffordanceController unregisterClient:withHomeGestureIdentifier:zStackIdentifier:]


SBNotificationKeyboardHomeAffordanceAssertion : SBKeyboardHomeAffordanceAssertion <PLKeyboardHomeAffordanceAssertion>
 @property  double additionalEdgeMargin
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription


SBSceneViewController : UIViewController <SBSceneViewPresentationConfiguring, SBSceneViewControlling>
 @property  SBSceneView *sceneView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBSceneHandle *sceneHandle
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBSceneViewController initWithSceneHandle:]
  -[SBSceneViewController sceneViewPresentationIdentifier:]
  -[SBSceneViewController contentReferenceSize]
  -[SBSceneViewController initWithCoder:]
  -[SBSceneViewController displayMode]
  -[SBSceneViewController sceneHandle]
  -[SBSceneViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBSceneViewController setCustomContentView:]
  -[SBSceneViewController .cxx_destruct]
  -[SBSceneViewController viewDidLoad]
  -[SBSceneViewController sceneViewPresentationPriority:]
  -[SBSceneViewController initWithNibName:bundle:]
  -[SBSceneViewController newSnapshot]
  -[SBSceneViewController customContentView]
  -[SBSceneViewController contentInterfaceOrientation]
  -[SBSceneViewController containerContentWrapperInterfaceOrientationChangedTo:]
  -[SBSceneViewController setDisplayMode:animationFactory:completion:]
  -[SBSceneViewController dealloc]
  -[SBSceneViewController placeholderContentContext]
  -[SBSceneViewController invalidate]
  -[SBSceneViewController newSnapshotView]
  -[SBSceneViewController setPlaceholderContentContext:]
  -[SBSceneViewController newSnapshotViewOnQueue:withCompletion:]
  -[SBSceneViewController _sceneView]
  -[SBSceneViewController _setSceneView:]


SBRecycledViewsContainer : UIView
  // instance methods
  -[SBRecycledViewsContainer tintColor]


SBMainDisplayWindowLayoutStrategy : NSObject <SBWindowLayoutStrategy>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainDisplayWindowLayoutStrategy clipStrategy]
  +[SBMainDisplayWindowLayoutStrategy noClipStrategy]
  +[SBMainDisplayWindowLayoutStrategy _strategyWithClipping:]

  // instance methods
  -[SBMainDisplayWindowLayoutStrategy frameWithInterfaceOrientation:]
  -[SBMainDisplayWindowLayoutStrategy addObserver:]
  -[SBMainDisplayWindowLayoutStrategy _init]
  -[SBMainDisplayWindowLayoutStrategy removeObserver:]
  -[SBMainDisplayWindowLayoutStrategy shouldClipForWindow:]


SBWindow : SBFWindow <PTSettingsKeyObserver, SBMainDisplayInterfaceOrientationSource, SBRecycledViewsContainerProviding, SBWindowLayoutStrategyObserving>
 @property  <SBWindowLayoutStrategy> *layoutStrategy
 @property  SBFTraitsParticipant *traitsParticipant
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long activeInterfaceOrientation
 @property  BOOL active
 @property  double orientationSourceLevel
 @property  NSString *orientationSourceDescription
 @property  UIView *recycledViewsContainer

  // class methods
  +[SBWindow sb_autorotates]
  +[SBWindow defaultLayoutStrategy]
  +[SBWindow sb_disableStatusBarHeightChanges]

  // instance methods
  -[SBWindow activeInterfaceOrientation]
  -[SBWindow _shouldResizeWithScene]
  -[SBWindow traitCollectionDidChange:]
  -[SBWindow initWithScreen:scene:rootViewController:layoutStrategy:role:debugName:]
  -[SBWindow isActive]
  -[SBWindow .cxx_destruct]
  -[SBWindow layoutStrategy]
  -[SBWindow handleStatusBarChangeFromHeight:toHeight:]
  -[SBWindow initWithDebugName:]
  -[SBWindow setAutorotates:forceUpdateInterfaceOrientation:]
  -[SBWindow makeKeyAndVisible]
  -[SBWindow initWithFrame:]
  -[SBWindow settings:changedValueForKey:]
  -[SBWindow dealloc]
  -[SBWindow setHidden:]
  -[SBWindow sb_coronaAnimationController]
  -[SBWindow recycledViewsContainer]
  -[SBWindow initWithScreen:role:debugName:]
  -[SBWindow initWithScreen:rootViewController:role:debugName:]
  -[SBWindow traitsParticipant]
  -[SBWindow _setTraitsParticipant:]
  -[SBWindow orientationSourceLevel]
  -[SBWindow initWithScreen:scene:layoutStrategy:role:debugName:]
  -[SBWindow initWithScreen:layoutStrategy:role:debugName:]
  -[SBWindow _willEnableSecureRendering:]
  -[SBWindow _didDisableSecureRendering:]
  -[SBWindow _updateHidingForSecureRendering:]
  -[SBWindow _listenForTraitsArbiterPreferenceChangesIfNeeded]
  -[SBWindow _updateRealIsHidden]
  -[SBWindow _sb_updateAutorotatesFlagAndForceInterfaceOrientationUpdate:]
  -[SBWindow sb_updateAutorotatesFlag]
  -[SBWindow _addHiddenReason:]
  -[SBWindow _removeHiddenReason:]
  -[SBWindow orientationSourceDescription]
  -[SBWindow layoutStrategyFrameOnScreenDidChange:]
  -[SBWindow _traitsParticipant]
  -[SBWindow setAlphaAndObeyBecauseIAmTheWindowManager:]


SBSecureWindow : SBWindow
  // class methods
  +[SBSecureWindow _isSecure]


SBIgnoredForAutorotationSecureWindow : SBSecureWindow
  // instance methods
  -[SBIgnoredForAutorotationSecureWindow _shouldControlAutorotation]


SBFluidSwitcherItemContainerHeaderView : UIView <PTSettingsKeyObserver>
 @property  <SBFluidSwitcherItemContainerHeaderViewDelegate> *delegate
 @property  double preferredHeaderHeight
 @property  double textAlpha
 @property  NSArray *titleItems
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFluidSwitcherItemContainerHeaderView distanceFromBoundingLeadingEdgeToIconTrailingEdge]

  // instance methods
  -[SBFluidSwitcherItemContainerHeaderView initWithFrame:delegate:]
  -[SBFluidSwitcherItemContainerHeaderView .cxx_destruct]
  -[SBFluidSwitcherItemContainerHeaderView setTitleItems:animated:]
  -[SBFluidSwitcherItemContainerHeaderView _updateTitleAlpha]
  -[SBFluidSwitcherItemContainerHeaderView layoutSubviews]
  -[SBFluidSwitcherItemContainerHeaderView _updateVisualStylingWithTitleItems:]
  -[SBFluidSwitcherItemContainerHeaderView titleItems]
  -[SBFluidSwitcherItemContainerHeaderView textAlpha]
  -[SBFluidSwitcherItemContainerHeaderView setTextAlpha:]
  -[SBFluidSwitcherItemContainerHeaderView _titleLabelFont]
  -[SBFluidSwitcherItemContainerHeaderView setTitleItems:]
  -[SBFluidSwitcherItemContainerHeaderView _contentSizeCategoryDidChangeNotification:]
  -[SBFluidSwitcherItemContainerHeaderView _subtitleLabelFont]
  -[SBFluidSwitcherItemContainerHeaderView preferredHeaderHeight]
  -[SBFluidSwitcherItemContainerHeaderView delegate]
  -[SBFluidSwitcherItemContainerHeaderView settings:changedValueForKey:]
  -[SBFluidSwitcherItemContainerHeaderView _applyPrototypeSettings]
  -[SBFluidSwitcherItemContainerHeaderView dealloc]
  -[SBFluidSwitcherItemContainerHeaderView _handleTapGestureRecognizer:]
  -[SBFluidSwitcherItemContainerHeaderView _makeMultipleWindowsIndicatorView]


SBIdleTimerBehavior : NSObject <SBFIdleTimerBehaviorProviding, BSDescriptionProviding>
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerBehavior behaviorForBehaviorProvider:]
  +[SBIdleTimerBehavior autoLockBehavior]
  +[SBIdleTimerBehavior behaviorWithDuration:mode:warnMode:]
  +[SBIdleTimerBehavior disabledBehavior]
  +[SBIdleTimerBehavior lockScreenBehavior]
  +[SBIdleTimerBehavior defaultBehavior]

  // instance methods
  -[SBIdleTimerBehavior customIdleExpirationTimeout]
  -[SBIdleTimerBehavior idleTimerMode]
  -[SBIdleTimerBehavior idleWarnMode]
  -[SBIdleTimerBehavior idleTimerDuration]
  -[SBIdleTimerBehavior succinctDescriptionBuilder]
  -[SBIdleTimerBehavior _initWithDuration:mode:warnMode:]
  -[SBIdleTimerBehavior _initWithBehaviorProvider:]
  -[SBIdleTimerBehavior descriptionBuilderWithMultilinePrefix:]
  -[SBIdleTimerBehavior descriptionWithMultilinePrefix:]
  -[SBIdleTimerBehavior succinctDescription]
  -[SBIdleTimerBehavior customIdleWarningTimeout]


SBNCSoundController : NSObject
 @property  SBLockScreenManager *lockScreenManager
 @property  SBLockStateAggregator *lockStateAggregator
 @property  NSMutableDictionary *playingSounds
 @property  NSMutableSet *requestsRequiringExplicitKill

  // instance methods
  -[SBNCSoundController _killSounds]
  -[SBNCSoundController playSoundIfPossibleForNotificationRequest:presentingDestination:]
  -[SBNCSoundController _lockStateChanged:]
  -[SBNCSoundController .cxx_destruct]
  -[SBNCSoundController setLockScreenManager:]
  -[SBNCSoundController requestsRequiringExplicitKill]
  -[SBNCSoundController lockStateAggregator]
  -[SBNCSoundController setLockStateAggregator:]
  -[SBNCSoundController init]
  -[SBNCSoundController stopSoundForNotificationRequest:]
  -[SBNCSoundController playSoundForNotificationRequest:presentingDestination:]
  -[SBNCSoundController initWithLockScreenManager:lockStateAggregator:]
  -[SBNCSoundController playingSounds]
  -[SBNCSoundController canPlaySoundForNotificationRequest:]
  -[SBNCSoundController setPlayingSounds:]
  -[SBNCSoundController _isDeviceUILocked]
  -[SBNCSoundController lockScreenManager]
  -[SBNCSoundController _hardwareButtonPressed:]
  -[SBNCSoundController setRequestsRequiringExplicitKill:]


SBHomeScreenOverlayController : NSObject <SBBarSwipeAffordanceDelegate, SBBarSwipeAffordanceObserver, SBHomeScreenOverlayViewControllerDelegate, UIGestureRecognizerDelegate, SBFOverlayControlling, SBFIdleTimerBehaviorProviding, CSExternalBehaviorProviding, CSExternalEventHandling, BSDescriptionProviding, SBFOverlayDismissalDelegate, SBHVisibleContentPresenter>
 @property  <SBIconListLayoutProvider> *listLayoutProvider
 @property  SBMainScreenActiveInterfaceOrientationWindow *window
 @property  SBBarSwipeAffordanceViewController *homeAffordanceViewController
 @property  SBHomeScreenOverlayViewController *overlayViewController
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  BOOL dismissing
 @property  unsigned long screenEdgeSystemGestureType
 @property  UIPanGestureRecognizer *dismissPanGestureRecognizer
 @property  unsigned long indirectScreenEdgeSystemGestureType
 @property  unsigned long scrunchSystemGestureType
 @property  BOOL animatingPresentationProgress
 @property  BOOL overlayAppearing
 @property  UIViewController *existingAvocadoVC
 @property  double initialPresentationProgress
 @property  BOOL shouldUseReducedMotionAnimation
 @property  <SBHomeScreenOverlayControllerDelegate> *delegate
 @property  UIViewController<SBHWidgetSheetViewControllerPresenter> *viewController
 @property  UIViewController<SBHVisibleContentPresenter> *leadingSidebarViewController
 @property  UIViewController<SBHVisibleContentPresenter> *trailingSidebarViewController
 @property  UIViewController *activeSidebarViewController
 @property  UITapGestureRecognizer *dismissTapGestureRecognizer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double contentWidth
 @property  double presentationProgress
 @property  BOOL presented
 @property  <SBFOverlayDismissalDelegate> *dismissalDelegate
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  unsigned long contentVisibility

  // instance methods
  -[SBHomeScreenOverlayController setDismissalDelegate:]
  -[SBHomeScreenOverlayController barSwipeAffordanceView:systemGestureTypeForType:]
  -[SBHomeScreenOverlayController setLeadingSidebarViewController:]
  -[SBHomeScreenOverlayController viewController]
  -[SBHomeScreenOverlayController homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBHomeScreenOverlayController homeAffordanceViewController]
  -[SBHomeScreenOverlayController displayLayoutElement]
  -[SBHomeScreenOverlayController dismissPanGestureRecognizer]
  -[SBHomeScreenOverlayController dismissTapGestureRecognizer]
  -[SBHomeScreenOverlayController coverSheetIdentifier]
  -[SBHomeScreenOverlayController homeScreenOverlayViewController:setSuppressesEditingStateForListView:]
  -[SBHomeScreenOverlayController dismissAnimated:completionHandler:]
  -[SBHomeScreenOverlayController conformsToCSBehaviorProviding]
  -[SBHomeScreenOverlayController _rootViewController]
  -[SBHomeScreenOverlayController presentAnimated:]
  -[SBHomeScreenOverlayController updateExtraButtonVisibilityAnimated:]
  -[SBHomeScreenOverlayController idleTimerMode]
  -[SBHomeScreenOverlayController setExistingAvocadoVC:]
  -[SBHomeScreenOverlayController presentAnimated:fromLeading:]
  -[SBHomeScreenOverlayController _directionCoefficient]
  -[SBHomeScreenOverlayController homeScreenOverlayViewWantsWidgetEditingViewControllerPresented:]
  -[SBHomeScreenOverlayController conformsToCSExternalBehaviorProviding]
  -[SBHomeScreenOverlayController finalPresentationProgressForTranslation:velocity:initialPresentationProgress:fromLeading:]
  -[SBHomeScreenOverlayController setOverlayAppearing:]
  -[SBHomeScreenOverlayController _addSystemGestureRecognizer]
  -[SBHomeScreenOverlayController initWithListLayoutProvider:windowLevel:homeGestureParticipantIdentifier:zStackParticipantIdentifier:screenEdgeSystemGestureType:indirectScreenEdgeSystemGestureType:scrunchSystemGestureType:secure:]
  -[SBHomeScreenOverlayController idleWarnMode]
  -[SBHomeScreenOverlayController _configureDismissGestureRecognizer]
  -[SBHomeScreenOverlayController _configureOverlayViewController]
  -[SBHomeScreenOverlayController _dismissScrollGestureEndedOrCancelled:]
  -[SBHomeScreenOverlayController addHomeScreenOverlayObserver:]
  -[SBHomeScreenOverlayController dismissScrollGestureUpdated:]
  -[SBHomeScreenOverlayController backgroundViewForEditingDoneButtonForHomeScreenOverlayViewController:]
  -[SBHomeScreenOverlayController setDisplayLayoutElement:]
  -[SBHomeScreenOverlayController homeScreenOverlayViewControllerRequestsDismissal:]
  -[SBHomeScreenOverlayController indirectScreenEdgeSystemGestureType]
  -[SBHomeScreenOverlayController isPresented]
  -[SBHomeScreenOverlayController _enumerateHomeScreenOverlayObserversUsingBlock:]
  -[SBHomeScreenOverlayController setPresentationProgress:interactive:animated:completionHandler:]
  -[SBHomeScreenOverlayController setDismissPanGestureRecognizer:]
  -[SBHomeScreenOverlayController prepareToSetPresentationProgress:fromPresentationProgress:]
  -[SBHomeScreenOverlayController _dismissScrollGestureBegan:]
  -[SBHomeScreenOverlayController .cxx_destruct]
  -[SBHomeScreenOverlayController idleTimerDuration]
  -[SBHomeScreenOverlayController presentAnimated:completionHandler:]
  -[SBHomeScreenOverlayController animatePresentationProgress:withGestureLiftOffVelocity:completionHandler:]
  -[SBHomeScreenOverlayController _dismissScrollGestureChanged:]
  -[SBHomeScreenOverlayController screenEdgeSystemGestureType]
  -[SBHomeScreenOverlayController scrunchSystemGestureType]
  -[SBHomeScreenOverlayController setTrailingSidebarViewController:]
  -[SBHomeScreenOverlayController isEditingForHomeScreenOverlayViewController:]
  -[SBHomeScreenOverlayController showsDoneButtonWhileEditingForHomeScreenOverlayViewController:]
  -[SBHomeScreenOverlayController dismissalDelegate]
  -[SBHomeScreenOverlayController isOverlayAppearing]
  -[SBHomeScreenOverlayController _setDisplayLayoutElementActive:]
  -[SBHomeScreenOverlayController leadingSidebarViewController]
  -[SBHomeScreenOverlayController existingAvocadoVC]
  -[SBHomeScreenOverlayController setPresentationProgress:fromLeading:interactive:animated:completionHandler:]
  -[SBHomeScreenOverlayController wouldHandleButtonEvent:]
  -[SBHomeScreenOverlayController showsAddWidgetButtonWhileEditingForHomeScreenOverlayViewController:]
  -[SBHomeScreenOverlayController testScrollView]
  -[SBHomeScreenOverlayController _setHidden:]
  -[SBHomeScreenOverlayController overlayControllerRequestsDismissal:]
  -[SBHomeScreenOverlayController homeScreenOverlayViewWantsToEndEditing:]
  -[SBHomeScreenOverlayController layerPresentationProgress]
  -[SBHomeScreenOverlayController acquireUseSnapshotAsBackgroundViewAssertionForReason:]
  -[SBHomeScreenOverlayController succinctDescriptionBuilder]
  -[SBHomeScreenOverlayController setDelegate:]
  -[SBHomeScreenOverlayController participantState]
  -[SBHomeScreenOverlayController descriptionBuilderWithMultilinePrefix:]
  -[SBHomeScreenOverlayController init]
  -[SBHomeScreenOverlayController setPresentationProgress:]
  -[SBHomeScreenOverlayController _removeSystemGestureRecognizer]
  -[SBHomeScreenOverlayController contentVisibility]
  -[SBHomeScreenOverlayController initialPresentationProgress]
  -[SBHomeScreenOverlayController descriptionWithMultilinePrefix:]
  -[SBHomeScreenOverlayController presentationProgress]
  -[SBHomeScreenOverlayController interceptDismissalGestureForOverlayController:]
  -[SBHomeScreenOverlayController _dismissLevelAnimated:completionHandler:]
  -[SBHomeScreenOverlayController presentAnimated:fromLeading:completionHandler:]
  -[SBHomeScreenOverlayController removeReasonToDisableDismissGestureRecognizer:]
  -[SBHomeScreenOverlayController setDismissing:]
  -[SBHomeScreenOverlayController gestureRecognizerShouldBegin:]
  -[SBHomeScreenOverlayController succinctDescription]
  -[SBHomeScreenOverlayController setShouldUseReducedMotionAnimation:]
  -[SBHomeScreenOverlayController setPresentationProgress:fromLeading:]
  -[SBHomeScreenOverlayController gestureRecognizer:shouldReceiveTouch:]
  -[SBHomeScreenOverlayController initWithListLayoutProvider:]
  -[SBHomeScreenOverlayController handleEvent:]
  -[SBHomeScreenOverlayController _setHitTestingDisabled:]
  -[SBHomeScreenOverlayController activeSidebarViewController]
  -[SBHomeScreenOverlayController dismissTapGestureUpdated:]
  -[SBHomeScreenOverlayController cleanUpAfterSettingPresentationProgress:]
  -[SBHomeScreenOverlayController delegate]
  -[SBHomeScreenOverlayController isDismissing]
  -[SBHomeScreenOverlayController presentationProgressForTranslation:initialPresentationProgress:fromLeading:]
  -[SBHomeScreenOverlayController removeHomeScreenOverlayObserver:]
  -[SBHomeScreenOverlayController restrictedCapabilities]
  -[SBHomeScreenOverlayController proximityDetectionMode]
  -[SBHomeScreenOverlayController trailingSidebarViewController]
  -[SBHomeScreenOverlayController window]
  -[SBHomeScreenOverlayController shouldUseReducedMotionAnimation]
  -[SBHomeScreenOverlayController scrollingStrategy]
  -[SBHomeScreenOverlayController overlayViewController]
  -[SBHomeScreenOverlayController listLayoutProvider]
  -[SBHomeScreenOverlayController conformsToCSEventHandling]
  -[SBHomeScreenOverlayController addReasonToDisableDismissGestureRecognizer:]
  -[SBHomeScreenOverlayController dismissUsingViewControllerTransitionCoordinator:]
  -[SBHomeScreenOverlayController contentWidth]
  -[SBHomeScreenOverlayController setContentVisibility:]
  -[SBHomeScreenOverlayController isAnimatingPresentationProgress]
  -[SBHomeScreenOverlayController setAnimatingPresentationProgress:]
  -[SBHomeScreenOverlayController setInitialPresentationProgress:]
  -[SBHomeScreenOverlayController notificationBehavior]


SBWindowDragTransitionSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBWindowDragTransitionSwitcherModifier backgroundOpacityForIndex:]
  -[SBWindowDragTransitionSwitcherModifier homeScreenDimmingAlpha]
  -[SBWindowDragTransitionSwitcherModifier homeScreenBackdropBlurType]
  -[SBWindowDragTransitionSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBWindowDragTransitionSwitcherModifier appLayoutToAttachSlideOverTongue]
  -[SBWindowDragTransitionSwitcherModifier isHomeScreenContentRequired]
  -[SBWindowDragTransitionSwitcherModifier transitionDidEnd]
  -[SBWindowDragTransitionSwitcherModifier animationAttributesForLayoutElement:]
  -[SBWindowDragTransitionSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBWindowDragTransitionSwitcherModifier frameForIndex:]
  -[SBWindowDragTransitionSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBWindowDragTransitionSwitcherModifier .cxx_destruct]
  -[SBWindowDragTransitionSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBWindowDragTransitionSwitcherModifier isSwitcherWindowVisible]
  -[SBWindowDragTransitionSwitcherModifier wallpaperStyle]
  -[SBWindowDragTransitionSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBWindowDragTransitionSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBWindowDragTransitionSwitcherModifier didMoveToParentModifier:]
  -[SBWindowDragTransitionSwitcherModifier appLayoutContainingAppLayout:]
  -[SBWindowDragTransitionSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBWindowDragTransitionSwitcherModifier handleSceneReadyEvent:]
  -[SBWindowDragTransitionSwitcherModifier initWithTransitionID:selectedAppLayout:fromAppLayout:toAppLayout:toFloatingAppLayout:toHomeScreenPeek:toAppExposeBundleIdentifier:initiallyBlurredDisplayItems:windowDragDestination:]
  -[SBWindowDragTransitionSwitcherModifier _goingToHomeScreenPeekFromSplitView]
  -[SBWindowDragTransitionSwitcherModifier _minimizingCenterWindow]


SBMoveFloatingApplicationGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction
  // instance methods
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _didComplete]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _begin]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction .cxx_destruct]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _gestureType]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _beginWithGesture:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _updateWithGesture:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _finishWithGesture:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _acquireStatusBarAssertions]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _startSuppressingKeyboardForFloatingApplication]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _invalidateStatusBarAssertions]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _stopSuppressingKeyboard]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _tryPreemptiveFloatingApplicationActivationIfNecessaryWithGesture:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _updateStatusBarAssertionsForGesture]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _performBlockWithLiveContentOverlayUpdatesSuspended:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _updateStatusBarAssertionsForLayoutState]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _transitionRequestForPreemptiveFloatingApplicationActivation]


SBMainDisplayPolicyAggregator : SBPolicyAggregator
 @property  MCProfileConnection *profileConnection
 @property  SBSetupManager *setupManager
 @property  SBAlertItemsController *alertItemsController
 @property  SBApplicationController *applicationController
 @property  SBAssistantController *assistantController
 @property  SBCommandTabController *commandTabController
 @property  SBConferenceManager *conferenceManager
 @property  SBRemoteTransientOverlaySessionManager *remoteTransientOverlaySessionManager
 @property  SBLockScreenManager *lockScreenManager
 @property  SBLockStateAggregator *lockStateAggregator
 @property  SBTelephonyManager *telephonyManager
 @property  SBMainWorkspace *mainWorkspace
 @property  SBBannerManager *bannerManager

  // instance methods
  -[SBMainDisplayPolicyAggregator _setLockScreenManager:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityHomeScreenEditingWithExplanation:]
  -[SBMainDisplayPolicyAggregator _applicationController]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityDismissCoverSheetWithExplanation:]
  -[SBMainDisplayPolicyAggregator _lockScreenManager]
  -[SBMainDisplayPolicyAggregator _allowsCapabilitySuggestedApplicationWithExplanation:]
  -[SBMainDisplayPolicyAggregator _commandTabController]
  -[SBMainDisplayPolicyAggregator _setAssistantController:]
  -[SBMainDisplayPolicyAggregator _lockStateAggregator]
  -[SBMainDisplayPolicyAggregator .cxx_destruct]
  -[SBMainDisplayPolicyAggregator allowsCapability:]
  -[SBMainDisplayPolicyAggregator _profileConnection]
  -[SBMainDisplayPolicyAggregator _setApplicationController:]
  -[SBMainDisplayPolicyAggregator _hasFullySetUpUserWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityVoiceControlWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsNotificationOrControlCenterWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenControlCenterWithExplanation:]
  -[SBMainDisplayPolicyAggregator allowsCapability:explanation:]
  -[SBMainDisplayPolicyAggregator _remoteTransientOverlaySessionManager]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityAssistantWithExplanation:]
  -[SBMainDisplayPolicyAggregator init]
  -[SBMainDisplayPolicyAggregator allowsTransitionRequest:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityTodayViewWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setProfileConnection:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenCameraSupportedWithExplanation:]
  -[SBMainDisplayPolicyAggregator _bannerManager]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityCoverSheetWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLiftToWakeWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityUnlockToPluginSpecifiedApplicationWithExplanation:]
  -[SBMainDisplayPolicyAggregator _initWithDefaults:]
  -[SBMainDisplayPolicyAggregator _conferenceManager]
  -[SBMainDisplayPolicyAggregator _telephonyManager]
  -[SBMainDisplayPolicyAggregator _setCommandTabController:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenTodayViewWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenNotificationCenterWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setLockStateAggregator:]
  -[SBMainDisplayPolicyAggregator _dictationInfoOnScreen]
  -[SBMainDisplayPolicyAggregator _allowsCapabilitySendMediaCommandWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setConferenceManager:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityCommandTabWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLogoutWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setTelephonyManager:]
  -[SBMainDisplayPolicyAggregator _setBannerManager:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityScreenshotWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setMainWorkspace:]
  -[SBMainDisplayPolicyAggregator _setRemoteTransientOverlaySessionManager:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilitySpotlightWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenCameraWithExplanation:]
  -[SBMainDisplayPolicyAggregator _alertItemsController]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityCoverSheetSpotlightWithExplanation:]
  -[SBMainDisplayPolicyAggregator _mainWorkspace]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityAssistantEnabledWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityQuickNoteWithExplanation:]
  -[SBMainDisplayPolicyAggregator reloadDemoDefaults]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenBulletinWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setAlertItemsController:]
  -[SBMainDisplayPolicyAggregator _assistantController]
  -[SBMainDisplayPolicyAggregator _setupManager]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityControlCenterWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilitySystemGestureWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLoginWindowWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setSetupManager:]


SBControlCenterSystemAgent : NSObject <CCUIControlCenterSystemAgent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBControlCenterSystemAgent isUILocked]
  -[SBControlCenterSystemAgent setRingerMuted:]
  -[SBControlCenterSystemAgent isOrientationLocked]
  -[SBControlCenterSystemAgent isRingerMuted]
  -[SBControlCenterSystemAgent unlockOrientation]
  -[SBControlCenterSystemAgent lockOrientation]


SBAppSwitcherTransientOverlayPageContentView : UIView <SBAppSwitcherPageContentView>
 @property  SBAppLayout *appLayout
 @property  BOOL active
 @property  BOOL visible
 @property  long long contentOrientation
 @property  UIView *contentView
 @property  <SBAppSwitcherTransientOverlayPageContentViewDelegate> *delegate
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  long long orientation
 @property  BOOL contentRequiresGroupOpacity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherTransientOverlayPageContentView setOrientation:]
  -[SBAppSwitcherTransientOverlayPageContentView appLayout]
  -[SBAppSwitcherTransientOverlayPageContentView contentOrientation]
  -[SBAppSwitcherTransientOverlayPageContentView setContentOrientation:]
  -[SBAppSwitcherTransientOverlayPageContentView setVisible:]
  -[SBAppSwitcherTransientOverlayPageContentView isActive]
  -[SBAppSwitcherTransientOverlayPageContentView .cxx_destruct]
  -[SBAppSwitcherTransientOverlayPageContentView layoutSubviews]
  -[SBAppSwitcherTransientOverlayPageContentView contentView]
  -[SBAppSwitcherTransientOverlayPageContentView contentRequiresGroupOpacity]
  -[SBAppSwitcherTransientOverlayPageContentView setDelegate:]
  -[SBAppSwitcherTransientOverlayPageContentView isVisible]
  -[SBAppSwitcherTransientOverlayPageContentView setCornerRadius:]
  -[SBAppSwitcherTransientOverlayPageContentView setMaskedCorners:]
  -[SBAppSwitcherTransientOverlayPageContentView orientation]
  -[SBAppSwitcherTransientOverlayPageContentView cornerRadius]
  -[SBAppSwitcherTransientOverlayPageContentView setActive:]
  -[SBAppSwitcherTransientOverlayPageContentView delegate]
  -[SBAppSwitcherTransientOverlayPageContentView invalidate]
  -[SBAppSwitcherTransientOverlayPageContentView setContentView:]
  -[SBAppSwitcherTransientOverlayPageContentView maskedCorners]
  -[SBAppSwitcherTransientOverlayPageContentView initWithFrame:appLayout:]


SBPIPHitTestExtendableView : UIView
 @property  UIView *hitTestExtenderView

  // instance methods
  -[SBPIPHitTestExtendableView .cxx_destruct]
  -[SBPIPHitTestExtendableView pointInside:withEvent:]
  -[SBPIPHitTestExtendableView hitTestExtenderView]
  -[SBPIPHitTestExtendableView setHitTestExtenderView:]


SBHistorianSwitcherModifier : SBSwitcherModifier
 @property  <SBHistorianSwitcherModifierDelegate> *historianDelegate
 @property  SBSwitcherModifier *rootModifier

  // class methods
  +[SBHistorianSwitcherModifier canLogEvent:]

  // instance methods
  -[SBHistorianSwitcherModifier .cxx_destruct]
  -[SBHistorianSwitcherModifier setDelegate:]
  -[SBHistorianSwitcherModifier handleEvent:]
  -[SBHistorianSwitcherModifier rootModifier]
  -[SBHistorianSwitcherModifier initWithRootModifier:]
  -[SBHistorianSwitcherModifier setHistorianDelegate:]
  -[SBHistorianSwitcherModifier _eventSnapshotFromEvent:]
  -[SBHistorianSwitcherModifier _responseSnapshotFromResponse:]
  -[SBHistorianSwitcherModifier _modifierStackSnapshotFromModifier:]
  -[SBHistorianSwitcherModifier historianDelegate]
  -[SBHistorianSwitcherModifier _querySnapshotFromModifier:]
  -[SBHistorianSwitcherModifier _populateQueryMethodDescription:fromModifier:queryName:descriptionProvider:appLayouts:]
  -[SBHistorianSwitcherModifier _populateIndexedQueryMethodDescription:fromModifier:queryName:descriptionProvider:appLayouts:]
  -[SBHistorianSwitcherModifier _populateLayoutRoleInAppLayoutQueryMethodDescription:fromModifier:queryName:descriptionProvider:]
  -[SBHistorianSwitcherModifier _populateLayoutRoleInAppLayoutAtIndexQueryMethodDescription:fromModifier:queryName:descriptionProvider:]
  -[SBHistorianSwitcherModifier _populateAppLayoutQueryMethodDescription:fromModifier:queryName:descriptionProvider:]


SBSwitcherModifierTimelineEntry : NSObject
 @property  SBSwitcherModifierEventSnapshot *eventSnapshot
 @property  SBSwitcherModifierStackSnapshot *postEventStackSnapshot
 @property  SBSwitcherModifierEventResponseSnapshot *responseSnapshot

  // instance methods
  -[SBSwitcherModifierTimelineEntry .cxx_destruct]
  -[SBSwitcherModifierTimelineEntry eventSnapshot]
  -[SBSwitcherModifierTimelineEntry responseSnapshot]
  -[SBSwitcherModifierTimelineEntry postEventStackSnapshot]
  -[SBSwitcherModifierTimelineEntry setEventSnapshot:]
  -[SBSwitcherModifierTimelineEntry setPostEventStackSnapshot:]
  -[SBSwitcherModifierTimelineEntry setResponseSnapshot:]


SBSwitcherModifierStackSnapshot : NSObject
 @property  NSString *modifierName
 @property  SBSwitcherModifierQuerySnapshot *querySnapshot
 @property  NSArray *childSnapshots

  // instance methods
  -[SBSwitcherModifierStackSnapshot .cxx_destruct]
  -[SBSwitcherModifierStackSnapshot countOfAllChildSnapshots]
  -[SBSwitcherModifierStackSnapshot modifierName]
  -[SBSwitcherModifierStackSnapshot childSnapshots]
  -[SBSwitcherModifierStackSnapshot enumerateModifierSnapshots:]
  -[SBSwitcherModifierStackSnapshot querySnapshot]
  -[SBSwitcherModifierStackSnapshot setModifierName:]
  -[SBSwitcherModifierStackSnapshot setQuerySnapshot:]
  -[SBSwitcherModifierStackSnapshot setChildSnapshots:]
  -[SBSwitcherModifierStackSnapshot _enumerateModifierSnapshots:stop:]


SBSwitcherModifierEventResponseSnapshot : NSObject
 @property  NSArray *responseNames
 @property  NSArray *responseDescriptions

  // instance methods
  -[SBSwitcherModifierEventResponseSnapshot .cxx_destruct]
  -[SBSwitcherModifierEventResponseSnapshot responseNames]
  -[SBSwitcherModifierEventResponseSnapshot responseDescriptions]
  -[SBSwitcherModifierEventResponseSnapshot setResponseNames:]
  -[SBSwitcherModifierEventResponseSnapshot setResponseDescriptions:]


SBSwitcherModifierEventSnapshot : NSObject
 @property  NSString *eventName
 @property  NSString *eventDescription

  // instance methods
  -[SBSwitcherModifierEventSnapshot .cxx_destruct]
  -[SBSwitcherModifierEventSnapshot eventName]
  -[SBSwitcherModifierEventSnapshot setEventName:]
  -[SBSwitcherModifierEventSnapshot eventDescription]
  -[SBSwitcherModifierEventSnapshot setEventDescription:]


SBSwitcherModifierQuerySnapshot : NSObject
 @property  NSArray *implementingQueryMethods
 @property  NSArray *nonImplementingQueryMethods
 @property  NSDictionary *queryMethodsToDescriptions

  // instance methods
  -[SBSwitcherModifierQuerySnapshot .cxx_destruct]
  -[SBSwitcherModifierQuerySnapshot implementingQueryMethods]
  -[SBSwitcherModifierQuerySnapshot nonImplementingQueryMethods]
  -[SBSwitcherModifierQuerySnapshot queryMethodsToDescriptions]
  -[SBSwitcherModifierQuerySnapshot setQueryMethodsToDescriptions:]
  -[SBSwitcherModifierQuerySnapshot setImplementingQueryMethods:]
  -[SBSwitcherModifierQuerySnapshot setNonImplementingQueryMethods:]


SBNewsstandMonitor : NSObject <FBProcessManagerObserver, FBProcessObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBNewsstandMonitor sharedInstance]
  +[SBNewsstandMonitor _deniedBundleIdentifiers]

  // instance methods
  -[SBNewsstandMonitor processManager:didAddProcess:]
  -[SBNewsstandMonitor processManager:didRemoveProcess:]
  -[SBNewsstandMonitor process:stateDidChangeFromState:toState:]
  -[SBNewsstandMonitor .cxx_destruct]
  -[SBNewsstandMonitor init]
  -[SBNewsstandMonitor _addObserverForBackgroundUpdateDenyListChange]
  -[SBNewsstandMonitor _handleBackgroundUpdateDenyListChange]


SBPressSequenceValidator : NSObject
 @property  SBPressSequenceSettings *settings

  // instance methods
  -[SBPressSequenceValidator .cxx_destruct]
  -[SBPressSequenceValidator init]
  -[SBPressSequenceValidator initWithSettings:]
  -[SBPressSequenceValidator settings]
  -[SBPressSequenceValidator pressEventIsValidInSequence:endingDownEvent:duration:]
  -[SBPressSequenceValidator timeUntilNextPressEventIsInValidInSequence:lastPressEventInSequenceIsDown:]
  -[SBPressSequenceValidator _pressDownBoundsForDesiredIndex:sequence:]
  -[SBPressSequenceValidator _pressUpBoundsForDesiredIndex:sequence:]
  -[SBPressSequenceValidator _modeForDesiredIndex:isDownEvent:]


SBNCNotificationDispatcher : NSObject <CSCoverSheetViewControllerObserver, SBFNotificationExtensionVisibilityProviding>
 @property  NCNotificationDispatcher *dispatcher
 @property  SBNCNotificationDispatcherDelegate *dispatcherDelegate
 @property  NCBulletinNotificationSource *notificationSource
 @property  SBUserAlertNotificationSource *userNotificationAlertSource
 @property  SBLockScreenManager *lockScreenManager
 @property  SBLockStateAggregator *lockStateAggregator
 @property  SBNotificationCarPlayDestination *carDestination
 @property  SBCommunicationPolicyManager *communicationPolicyManager
 @property  SBNCAlertingController *alertingController
 @property  SBNotificationBannerDestination *bannerDestination
 @property  <SBNotificationDestination> *dashBoardDestination
 @property  SBWalletNotificationSource *walletNotificationSource
 @property  SBNotificationCenterDestination *notificationCenterDestination
 @property  BOOL isCarDestinationActive
 @property  BSServiceConnectionEndpoint *carOpenServiceEndpoint
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNCNotificationDispatcher userNotificationAlertSource]
  -[SBNCNotificationDispatcher isCarDestinationActive]
  -[SBNCNotificationDispatcher carOpenServiceEndpoint]
  -[SBNCNotificationDispatcher _updateActiveDestinations]
  -[SBNCNotificationDispatcher .cxx_destruct]
  -[SBNCNotificationDispatcher coverSheetViewController:didChangeActiveBehavior:]
  -[SBNCNotificationDispatcher notificationCenterDestination]
  -[SBNCNotificationDispatcher setLockScreenManager:]
  -[SBNCNotificationDispatcher _carPlayDestinationAvailabilityDidChange]
  -[SBNCNotificationDispatcher setDispatcherDelegate:]
  -[SBNCNotificationDispatcher isNotificationContentExtensionVisible:]
  -[SBNCNotificationDispatcher alertingController]
  -[SBNCNotificationDispatcher lockStateAggregator]
  -[SBNCNotificationDispatcher setLockStateAggregator:]
  -[SBNCNotificationDispatcher init]
  -[SBNCNotificationDispatcher setUserNotificationAlertSource:]
  -[SBNCNotificationDispatcher setCarDestination:]
  -[SBNCNotificationDispatcher dispatcher]
  -[SBNCNotificationDispatcher dispatcherDelegate]
  -[SBNCNotificationDispatcher bannerDestination]
  -[SBNCNotificationDispatcher walletNotificationSource]
  -[SBNCNotificationDispatcher setAlertingController:]
  -[SBNCNotificationDispatcher carDestination]
  -[SBNCNotificationDispatcher _aggregateLockStateDidChange]
  -[SBNCNotificationDispatcher setDispatcher:]
  -[SBNCNotificationDispatcher keyWindowForScreen:]
  -[SBNCNotificationDispatcher lockScreenManager]
  -[SBNCNotificationDispatcher dashBoardDestination]
  -[SBNCNotificationDispatcher notificationSource]
  -[SBNCNotificationDispatcher setNotificationSource:]
  -[SBNCNotificationDispatcher _setupNewDestinationsForDispatcher:]
  -[SBNCNotificationDispatcher communicationPolicyManager]
  -[SBNCNotificationDispatcher _lockScreenWantsBanners]
  -[SBNCNotificationDispatcher setCommunicationPolicyManager:]


SBDodgingTester : NSObject
 @property  PTSingleTestRecipe *testRecipe

  // instance methods
  -[SBDodgingTester .cxx_destruct]
  -[SBDodgingTester initWithDodgingResolverController:]
  -[SBDodgingTester testRecipe]
  -[SBDodgingTester setTestRecipe:]


SBProximitySettings : SBUISettings
 @property  double initialBacklightDebounceDuration
 @property  double subsequentBacklightDebounceDuration

  // class methods
  +[SBProximitySettings settingsControllerModule]

  // instance methods
  -[SBProximitySettings subsequentBacklightDebounceDuration]
  -[SBProximitySettings setDefaultValues]
  -[SBProximitySettings setSubsequentBacklightDebounceDuration:]
  -[SBProximitySettings initialBacklightDebounceDuration]
  -[SBProximitySettings setInitialBacklightDebounceDuration:]


SBVoiceControlViewController : UIViewController <SiriUISuggestionsViewDelegate, SUICFlamesViewDelegate, VSRecognitionSessionDelegate, VSSpeechSynthesizerDelegate>
 @property  NSArray *nextRecognitionAudioInputPaths
 @property  BOOL prefersProximityDetectionEnabled
 @property  BOOL shouldAllowSensitiveActions
 @property  BOOL shouldDisableHandlerActions
 @property  BOOL shouldDisableVoiceControlForBluetoothRequests
 @property  BOOL voiceControlLoggingEnabled
 @property  <SBVoiceControlViewControllerDelegate> *voiceControlDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBVoiceControlViewController initWithSource:]
  -[SBVoiceControlViewController handleHomeButtonPress]
  -[SBVoiceControlViewController .cxx_destruct]
  -[SBVoiceControlViewController viewDidLoad]
  -[SBVoiceControlViewController _requestDismissal]
  -[SBVoiceControlViewController viewWillDisappear:]
  -[SBVoiceControlViewController viewDidLayoutSubviews]
  -[SBVoiceControlViewController viewWillAppear:]
  -[SBVoiceControlViewController audioLevelForFlamesView:]
  -[SBVoiceControlViewController _resetSession]
  -[SBVoiceControlViewController _localizedStringForKey:]
  -[SBVoiceControlViewController dealloc]
  -[SBVoiceControlViewController _canShowWhileLocked]
  -[SBVoiceControlViewController recognitionSessionDidBeginAction:]
  -[SBVoiceControlViewController recognitionSessionWillBeginAction:]
  -[SBVoiceControlViewController recognitionSession:openURL:completion:]
  -[SBVoiceControlViewController recognitionSession:didCompleteActionWithError:]
  -[SBVoiceControlViewController recognitionSession:didFinishSpeakingFeedbackStringWithError:]
  -[SBVoiceControlViewController _setSession:]
  -[SBVoiceControlViewController _setStatusText:]
  -[SBVoiceControlViewController _flamesViewFrame]
  -[SBVoiceControlViewController nextSuggestionsForSuggestionsView:maxSuggestions:]
  -[SBVoiceControlViewController _setTitleText:]
  -[SBVoiceControlViewController prefersProximityDetectionEnabled]
  -[SBVoiceControlViewController resetSessionWithSource:]
  -[SBVoiceControlViewController handleHeadsetButtonUpFromButtonDownSource:]
  -[SBVoiceControlViewController setNextRecognitionAudioInputPaths:]
  -[SBVoiceControlViewController setVoiceControlDelegate:]
  -[SBVoiceControlViewController isVoiceControlLoggingEnabled]
  -[SBVoiceControlViewController setVoiceControlLoggingEnabled:]
  -[SBVoiceControlViewController setShouldDisableHandlerActions:]
  -[SBVoiceControlViewController setShouldDisableVoiceControlForBluetoothRequests:]
  -[SBVoiceControlViewController setShouldAllowSensitiveActions:]
  -[SBVoiceControlViewController _titleBaseline]
  -[SBVoiceControlViewController _subtitleBaseline]
  -[SBVoiceControlViewController performDismissalTransitionAnimated:completionHandler:]
  -[SBVoiceControlViewController performPresentationTransitionAnimated:completionHandler:]
  -[SBVoiceControlViewController nextRecognitionAudioInputPaths]
  -[SBVoiceControlViewController shouldAllowSensitiveActions]
  -[SBVoiceControlViewController shouldDisableHandlerActions]
  -[SBVoiceControlViewController shouldDisableVoiceControlForBluetoothRequests]
  -[SBVoiceControlViewController voiceControlDelegate]
  -[SBVoiceControlViewController _setPrefersProximityDetectionEnabled:]
  -[SBVoiceControlViewController _setAVAudioRouteUID:]
  -[SBVoiceControlViewController _deviceProximityStateDidChangeNotification:]
  -[SBVoiceControlViewController _setFeedbackVisible:animated:]
  -[SBVoiceControlViewController _newRecognitionSession]
  -[SBVoiceControlViewController _startSession]
  -[SBVoiceControlViewController _performNoMatchFound]
  -[SBVoiceControlViewController _handleButtonUpCancel]
  -[SBVoiceControlViewController _configureRoutingIfNeeded]
  -[SBVoiceControlViewController _speakFeedbackText]
  -[SBVoiceControlViewController _continueWithRecognitionAction]
  -[SBVoiceControlViewController _continueRecognitionAction]
  -[SBVoiceControlViewController _currentPreferredRouteDictionary]
  -[SBVoiceControlViewController _setNeedsRoutingUpdate]
  -[SBVoiceControlViewController _avSystemControllerPickableRoutesDidChangeNotification:]
  -[SBVoiceControlViewController _avSystemControllerHeadphoneJackIsConnectedDidChangeNotification:]
  -[SBVoiceControlViewController _popNextRecognitionAudioInputPath]
  -[SBVoiceControlViewController _performConfirmationAction]
  -[SBVoiceControlViewController _availableRouteDictionaries]
  -[SBVoiceControlViewController _preferredRouteDictionaryWithAvailableRouteDictionaries:preferredAVAudioRouteName:preferredAVAudioRouteUID:shouldPreferBluetooth:]
  -[SBVoiceControlViewController _hasPickableBluetoothDevice]
  -[SBVoiceControlViewController _speakText:]
  -[SBVoiceControlViewController _recognitionSessionKeywordsDidChangeNotification:]


SBGridLayoutSwitcherModifier : SBSwitcherModifier <PTSettingsKeyObserver>
 @property  unsigned long alignment
 @property  unsigned long layoutDirection
 @property  unsigned long scrollAxis
 @property  unsigned long fixedGroupingSize
 @property  double cardScale
 @property  BOOL usesFixedCardSize
 @property  {CGSize=dd} fixedCardSize
 @property  BOOL centersContentVertically
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBGridLayoutSwitcherModifier layoutDirection]
  -[SBGridLayoutSwitcherModifier setAlignment:]
  -[SBGridLayoutSwitcherModifier shadowOpacityForLayoutRole:atIndex:]
  -[SBGridLayoutSwitcherModifier isHomeAffordanceSupportedForAppLayout:]
  -[SBGridLayoutSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBGridLayoutSwitcherModifier titleOpacityForIndex:]
  -[SBGridLayoutSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBGridLayoutSwitcherModifier rotationAngleForIndex:]
  -[SBGridLayoutSwitcherModifier isResizeGrabberVisibleForAppLayout:]
  -[SBGridLayoutSwitcherModifier alignment]
  -[SBGridLayoutSwitcherModifier setLayoutDirection:]
  -[SBGridLayoutSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBGridLayoutSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBGridLayoutSwitcherModifier shadowOffsetForIndex:]
  -[SBGridLayoutSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBGridLayoutSwitcherModifier shouldAnimateInsertionOrRemovalOfAppLayout:atIndex:]
  -[SBGridLayoutSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBGridLayoutSwitcherModifier numberOfRows]
  -[SBGridLayoutSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBGridLayoutSwitcherModifier _isIndexVisible:]
  -[SBGridLayoutSwitcherModifier animationAttributesForLayoutElement:]
  -[SBGridLayoutSwitcherModifier visibleHomeAffordanceLayoutElements]
  -[SBGridLayoutSwitcherModifier scaleForIndex:]
  -[SBGridLayoutSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBGridLayoutSwitcherModifier handleTransitionEvent:]
  -[SBGridLayoutSwitcherModifier frameForIndex:]
  -[SBGridLayoutSwitcherModifier scrollAxis]
  -[SBGridLayoutSwitcherModifier visibleAppLayouts]
  -[SBGridLayoutSwitcherModifier scrollViewAttributes]
  -[SBGridLayoutSwitcherModifier spacing]
  -[SBGridLayoutSwitcherModifier minimumTranslationToKillIndex:]
  -[SBGridLayoutSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBGridLayoutSwitcherModifier contentViewScale]
  -[SBGridLayoutSwitcherModifier cornerRadiiForIndex:]
  -[SBGridLayoutSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBGridLayoutSwitcherModifier _cardCornerRadiusInSwitcher]
  -[SBGridLayoutSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBGridLayoutSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBGridLayoutSwitcherModifier _verticalSpacing]
  -[SBGridLayoutSwitcherModifier didMoveToParentModifier:]
  -[SBGridLayoutSwitcherModifier _contentSize]
  -[SBGridLayoutSwitcherModifier resetAdjustedScrollingState]
  -[SBGridLayoutSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBGridLayoutSwitcherModifier contentOffsetForIndex:alignment:]
  -[SBGridLayoutSwitcherModifier _numberOfColumns]
  -[SBGridLayoutSwitcherModifier _applyPrototypeSettings]
  -[SBGridLayoutSwitcherModifier snapshotScaleForAppLayout:]
  -[SBGridLayoutSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBGridLayoutSwitcherModifier handleScrollEvent:]
  -[SBGridLayoutSwitcherModifier _numberOfRows]
  -[SBGridLayoutSwitcherModifier setScrollAxis:]
  -[SBGridLayoutSwitcherModifier _horizontalSpacing]
  -[SBGridLayoutSwitcherModifier _leadingPadding]
  -[SBGridLayoutSwitcherModifier _cardSize]
  -[SBGridLayoutSwitcherModifier _indexOfLeadingCard]
  -[SBGridLayoutSwitcherModifier _fittedContentSize]
  -[SBGridLayoutSwitcherModifier _cardHeaderHeight]
  -[SBGridLayoutSwitcherModifier _gridSwitcherPageScale]
  -[SBGridLayoutSwitcherModifier initWithScrollAxis:fixedGroupingSize:cardScale:alignment:layoutDirection:]
  -[SBGridLayoutSwitcherModifier visibleAppLayoutRangeForContentOffset:]
  -[SBGridLayoutSwitcherModifier _frameForIndex:ignoringScrollOffset:]
  -[SBGridLayoutSwitcherModifier _frameWithScaleAppliedForIndex:ignoringScrollOffset:]
  -[SBGridLayoutSwitcherModifier _trailingPadding]
  -[SBGridLayoutSwitcherModifier _scaledCardSize]
  -[SBGridLayoutSwitcherModifier _firstTrailingIndexForContentOffset:]
  -[SBGridLayoutSwitcherModifier _rowForIndex:]
  -[SBGridLayoutSwitcherModifier _columnForIndex:]
  -[SBGridLayoutSwitcherModifier isUsingFixedCardSize]
  -[SBGridLayoutSwitcherModifier fittedContentSize]
  -[SBGridLayoutSwitcherModifier cardScale]
  -[SBGridLayoutSwitcherModifier setCardScale:]
  -[SBGridLayoutSwitcherModifier fixedGroupingSize]
  -[SBGridLayoutSwitcherModifier setFixedGroupingSize:]
  -[SBGridLayoutSwitcherModifier setUsesFixedCardSize:]
  -[SBGridLayoutSwitcherModifier fixedCardSize]
  -[SBGridLayoutSwitcherModifier setFixedCardSize:]
  -[SBGridLayoutSwitcherModifier centersContentVertically]
  -[SBGridLayoutSwitcherModifier setCentersContentVertically:]


SBApplicationProcessState : NSObject <BSDescriptionProviding>
 @property  int pid
 @property  BOOL running
 @property  BOOL foreground
 @property  long long taskState
 @property  long long visibility
 @property  BOOL isBeingDebugged
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationProcessState visibility]
  -[SBApplicationProcessState isForeground]
  -[SBApplicationProcessState .cxx_destruct]
  -[SBApplicationProcessState isRunning]
  -[SBApplicationProcessState succinctDescriptionBuilder]
  -[SBApplicationProcessState taskState]
  -[SBApplicationProcessState isBeingDebugged]
  -[SBApplicationProcessState descriptionBuilderWithMultilinePrefix:]
  -[SBApplicationProcessState isEqual:]
  -[SBApplicationProcessState descriptionWithMultilinePrefix:]
  -[SBApplicationProcessState succinctDescription]
  -[SBApplicationProcessState pid]
  -[SBApplicationProcessState _initWithProcess:stateSnapshot:]


SBActivateAppClipFromPlaceholderWorkspaceTransaction : SBAppToAppWorkspaceTransaction <BSTransactionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction transactionDidComplete:]
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction _begin]
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction .cxx_destruct]
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction _concurrentOverlayDismissalOptions]
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction _serialOverlayPreDismissalOptions]


SBApplicationLibraryObserver : NSObject <MCProfileConnectionObserver>
 @property  NSArray *placeholders
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationLibraryObserver new]

  // instance methods
  -[SBApplicationLibraryObserver _didAddApplications:]
  -[SBApplicationLibraryObserver _didUpdateApplications:]
  -[SBApplicationLibraryObserver _didAddPlaceholders:]
  -[SBApplicationLibraryObserver .cxx_destruct]
  -[SBApplicationLibraryObserver removePlaceholderLifecycleObserver:]
  -[SBApplicationLibraryObserver initWithAppLibrary:splashBoardController:]
  -[SBApplicationLibraryObserver _didChangeNetworkUsage:]
  -[SBApplicationLibraryObserver addPlaceholderLifecycleObserver:]
  -[SBApplicationLibraryObserver init]
  -[SBApplicationLibraryObserver profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[SBApplicationLibraryObserver addApplicationLifecycleObserver:]
  -[SBApplicationLibraryObserver _didCancelPlaceholders:]
  -[SBApplicationLibraryObserver _addObserver:table:]
  -[SBApplicationLibraryObserver _didDemoteApplications:]
  -[SBApplicationLibraryObserver removeApplicationLifecycleObserver:]
  -[SBApplicationLibraryObserver _waitForLaunchImageGenerationForApplications:]
  -[SBApplicationLibraryObserver _appBundleIDsForApplications:]
  -[SBApplicationLibraryObserver suspendCalloutsAssertionWithReason:]
  -[SBApplicationLibraryObserver _didReplaceApplications:]
  -[SBApplicationLibraryObserver profileConnectionDidReceiveProfileListChangedNotification:userInfo:]
  -[SBApplicationLibraryObserver _didRemoveApplications:]
  -[SBApplicationLibraryObserver placeholders]
  -[SBApplicationLibraryObserver _removeObserver:table:]


SBBackgroundFetchTask : NSObject
  // class methods
  +[SBBackgroundFetchTask _nextSequenceNumber]

  // instance methods
  -[SBBackgroundFetchTask .cxx_destruct]
  -[SBBackgroundFetchTask execute]
  -[SBBackgroundFetchTask dealloc]


SBBackgroundMultitaskingManager : NSObject
  // class methods
  +[SBBackgroundMultitaskingManager sharedInstance]

  // instance methods
  -[SBBackgroundMultitaskingManager .cxx_destruct]
  -[SBBackgroundMultitaskingManager _appProcessStateDidChange:]
  -[SBBackgroundMultitaskingManager init]
  -[SBBackgroundMultitaskingManager _backgroundTaskFinished:forApplication:]
  -[SBBackgroundMultitaskingManager _createBackgroundFetchTaskForApplication:]


SBBackgroundFetchExternalRequest : NSObject
 @property  UIFetchContentInBackgroundAction *action

  // instance methods
  -[SBBackgroundFetchExternalRequest .cxx_destruct]
  -[SBBackgroundFetchExternalRequest execute]
  -[SBBackgroundFetchExternalRequest action]
  -[SBBackgroundFetchExternalRequest dealloc]
  -[SBBackgroundFetchExternalRequest initForBundleID:]


SBShelfBackgroundView : UIView
 @property  double weighting
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} extendedBlurRect

  // instance methods
  -[SBShelfBackgroundView setWeighting:]
  -[SBShelfBackgroundView weighting]
  -[SBShelfBackgroundView .cxx_destruct]
  -[SBShelfBackgroundView layoutSubviews]
  -[SBShelfBackgroundView initWithFrame:]
  -[SBShelfBackgroundView setExtendedBlurRect:]
  -[SBShelfBackgroundView extendedBlurRect]


SBSwitcherShelfViewController : SBFTouchPassThroughViewController <SBSwitcherContentViewControllerDelegate, SBSwitcherContentViewControllerDataSource, SBShelfLiveContentOverlayCoordinatorDelegate, SBAssistantObserver, SBTransientUIIndirectPanToDismissParticipant, SBTransientUITapToDismissParticipant, SBAttentionAwarenessClientDelegate, SBLayoutStateTransitionObserver>
 @property  SBSwitcherShelfView *view
 @property  <SBSwitcherShelfViewControllerDelegate> *delegate
 @property  SBSwitcherShelf *shelf
 @property  NSArray *appLayouts
 @property  unsigned long contentOptions
 @property  NSSet *ignoredDisplayItems
 @property  NSSet *focusedDisplayItems
 @property  long long contentOrientation
 @property  SBPortalView *homeAffordancePortalView
 @property  BOOL presented
 @property  BOOL presentingOrDismissing
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} presentationTargetFrame
 @property  unsigned long animationStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherShelfViewController assistantWillAppear:]
  -[SBSwitcherShelfViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBSwitcherShelfViewController switcherContentController:requestNewWindowForBundleIdentifier:]
  -[SBSwitcherShelfViewController switcherContentController:setContentOrientation:]
  -[SBSwitcherShelfViewController contentOrientation]
  -[SBSwitcherShelfViewController setContentOrientation:]
  -[SBSwitcherShelfViewController viewWillLayoutSubviews]
  -[SBSwitcherShelfViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBSwitcherShelfViewController switcherContentController:transitionEventForLayoutState:identifier:phase:animated:]
  -[SBSwitcherShelfViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBSwitcherShelfViewController sbActiveInterfaceOrientation]
  -[SBSwitcherShelfViewController .cxx_destruct]
  -[SBSwitcherShelfViewController shelf]
  -[SBSwitcherShelfViewController presented]
  -[SBSwitcherShelfViewController viewDidLoad]
  -[SBSwitcherShelfViewController switcherContentController:performTransitionWithRequest:gestureInitiated:]
  -[SBSwitcherShelfViewController performTransitionWithContext:animated:completion:]
  -[SBSwitcherShelfViewController frameForCenterItemWithConfiguration:interfaceOrientation:]
  -[SBSwitcherShelfViewController appLayoutsForSwitcherContentController:]
  -[SBSwitcherShelfViewController client:attentionLostTimeoutDidExpire:forConfigurationGeneration:withAssociatedObject:]
  -[SBSwitcherShelfViewController performKeyboardShortcutAction:]
  -[SBSwitcherShelfViewController viewWillDisappear:]
  -[SBSwitcherShelfViewController switcherInterfaceOrientationForContentController:]
  -[SBSwitcherShelfViewController viewDidLayoutSubviews]
  -[SBSwitcherShelfViewController viewWillAppear:]
  -[SBSwitcherShelfViewController isPresentingOrDismissing]
  -[SBSwitcherShelfViewController frameForItemWithRole:inMainAppLayout:interfaceOrientation:]
  -[SBSwitcherShelfViewController delegate]
  -[SBSwitcherShelfViewController switcherContentController:deletedDisplayItem:inAppLayout:forReason:]
  -[SBSwitcherShelfViewController contentOptions]
  -[SBSwitcherShelfViewController switcherContentController:transitionEventForContext:identifier:phase:animated:]
  -[SBSwitcherShelfViewController setContentOptions:]
  -[SBSwitcherShelfViewController dealloc]
  -[SBSwitcherShelfViewController clientDidResetForUserAttention:]
  -[SBSwitcherShelfViewController beginHidingAppLayout:forReason:]
  -[SBSwitcherShelfViewController appLayouts]
  -[SBSwitcherShelfViewController loadView]
  -[SBSwitcherShelfViewController switcherContentController:supportsTitleItemsForAppLayout:]
  -[SBSwitcherShelfViewController frameForFloatingAppLayoutInInterfaceOrientation:floatingConfiguration:]
  -[SBSwitcherShelfViewController animationStyle]
  -[SBSwitcherShelfViewController itemFrameForAppLayout:]
  -[SBSwitcherShelfViewController itemScaleForAppLayout:]
  -[SBSwitcherShelfViewController itemCornerRadiusForAppLayout:]
  -[SBSwitcherShelfViewController switcherContentController:shouldSkipNonAnimatedLayoutPassAfterTransition:]
  -[SBSwitcherShelfViewController initWithShelf:mainSwitcherViewController:sceneManager:delegate:]
  -[SBSwitcherShelfViewController setFocusedDisplayItems:]
  -[SBSwitcherShelfViewController setIgnoredDisplayItems:]
  -[SBSwitcherShelfViewController setHomeAffordancePortalView:]
  -[SBSwitcherShelfViewController setPresented:withTargetFrame:style:completion:]
  -[SBSwitcherShelfViewController transientUI:wasIndirectPannedToDismissFromGestureRecognizer:]
  -[SBSwitcherShelfViewController transientUIHandledTouch:withSystemGestureRecognizer:]
  -[SBSwitcherShelfViewController _rebuildCachedAppLayouts]
  -[SBSwitcherShelfViewController _dockHeightWillChange:]
  -[SBSwitcherShelfViewController dismissShelfForShelfTransition]
  -[SBSwitcherShelfViewController _dismissShelfIfNeededWithLocation:window:]
  -[SBSwitcherShelfViewController dismissShelfWithTransitionSource:]
  -[SBSwitcherShelfViewController shelfLiveContentOverlayCoordinatorAppLayouts:]
  -[SBSwitcherShelfViewController shelfLiveContentOverlayCoordinatorSnapshotCache:]
  -[SBSwitcherShelfViewController shelfLiveContentOverlayCoordinator:liveViewForAppLayout:]
  -[SBSwitcherShelfViewController focusedDisplayItems]
  -[SBSwitcherShelfViewController dismissShelfForAccessibilityTransition]
  -[SBSwitcherShelfViewController ignoredDisplayItems]
  -[SBSwitcherShelfViewController homeAffordancePortalView]
  -[SBSwitcherShelfViewController presentationTargetFrame]


SBSwitcherShelfView : UIView
  // instance methods
  -[SBSwitcherShelfView accessibilityIdentifier]


SBStartupTransitionContextPersistence : NSObject
  // instance methods
  -[SBStartupTransitionContextPersistence .cxx_destruct]
  -[SBStartupTransitionContextPersistence initWithBootDefaults:loginSession:]
  -[SBStartupTransitionContextPersistence readTransitionContext]
  -[SBStartupTransitionContextPersistence saveContext:]


SBShelfLiveContentOverlayCoordinator : NSObject <SBAppSwitcherSnapshotImageCacheObserver, SBSwitcherLiveContentOverlayCoordinating>
 @property  <SBShelfLiveContentOverlayCoordinatorDelegate> *shelfDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL liveContentOverlayUpdatesSuspended
 @property  long long containerOrientation
 @property  <SBSwitcherLiveContentOverlayCoordinatorDelegate> *delegate

  // instance methods
  -[SBShelfLiveContentOverlayCoordinator didRotateFromInterfaceOrientation:toInterfaceOrientation:]
  -[SBShelfLiveContentOverlayCoordinator containerOrientation]
  -[SBShelfLiveContentOverlayCoordinator willRotateFromInterfaceOrientation:toInterfaceOrientation:alongsideContainerView:animated:]
  -[SBShelfLiveContentOverlayCoordinator setContainerOrientation:]
  -[SBShelfLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBShelfLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBShelfLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBShelfLiveContentOverlayCoordinator .cxx_destruct]
  -[SBShelfLiveContentOverlayCoordinator didUpdateCacheEntry:]
  -[SBShelfLiveContentOverlayCoordinator liveAppLayoutsMatchingKeyboardFocusedApp:foundAtIndex:]
  -[SBShelfLiveContentOverlayCoordinator areLiveContentOverlayUpdatesSuspended]
  -[SBShelfLiveContentOverlayCoordinator setDelegate:]
  -[SBShelfLiveContentOverlayCoordinator itemContainerForAppLayout:willBeReusedForAppLayout:]
  -[SBShelfLiveContentOverlayCoordinator wantsHomeAffordanceAutoHideForAppLayout:]
  -[SBShelfLiveContentOverlayCoordinator performSwitcherKeyboardShortcutAction:]
  -[SBShelfLiveContentOverlayCoordinator appLayoutWillBecomeVisible:]
  -[SBShelfLiveContentOverlayCoordinator appLayoutForKeyboardFocusedScene]
  -[SBShelfLiveContentOverlayCoordinator wantsEdgeProtectForHomeGestureForAppLayout:]
  -[SBShelfLiveContentOverlayCoordinator noteKeyboardFocusDidChangeToSceneID:]
  -[SBShelfLiveContentOverlayCoordinator delegate]
  -[SBShelfLiveContentOverlayCoordinator setLiveContentOverlayUpdatesSuspended:]
  -[SBShelfLiveContentOverlayCoordinator dealloc]
  -[SBShelfLiveContentOverlayCoordinator appLayoutDidBecomeHidden:]
  -[SBShelfLiveContentOverlayCoordinator initWithShelfDelegate:]
  -[SBShelfLiveContentOverlayCoordinator _addOverlaysIfNeededForTransitionContext:]
  -[SBShelfLiveContentOverlayCoordinator shelfDelegate]


SBShelfLiveContentOverlay : NSObject <SBSwitcherLiveContentOverlay, SBSceneViewPresentationConfiguring, SBUISizeObservingViewDelegate>
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  unsigned long displayMode
 @property  BOOL pendingSwitcherSnapshotCacheUpdate
 @property  <SBSwitcherLiveContentOverlayDelegate> *delegate
 @property  UIView *contentOverlayView
 @property  BOOL insetForHomeAffordance
 @property  BOOL asyncRenderingEnabled
 @property  BOOL requiresLegacyRotationSupport
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBShelfLiveContentOverlay isInsetForHomeAffordance]
  -[SBShelfLiveContentOverlay leadingStatusBarStyle]
  -[SBShelfLiveContentOverlay trailingStatusBarStyle]
  -[SBShelfLiveContentOverlay setInsetForHomeAffordance:]
  -[SBShelfLiveContentOverlay currentStatusBarHeight]
  -[SBShelfLiveContentOverlay sceneViewPresentationIdentifier:]
  -[SBShelfLiveContentOverlay displayMode]
  -[SBShelfLiveContentOverlay sceneHandle]
  -[SBShelfLiveContentOverlay .cxx_destruct]
  -[SBShelfLiveContentOverlay requiresLegacyRotationSupport]
  -[SBShelfLiveContentOverlay isAsyncRenderingEnabled]
  -[SBShelfLiveContentOverlay sceneViewPresentationPriority:]
  -[SBShelfLiveContentOverlay preferredInterfaceOrientation]
  -[SBShelfLiveContentOverlay setDelegate:]
  -[SBShelfLiveContentOverlay setUsesBrightSceneViewBackgroundMaterial:]
  -[SBShelfLiveContentOverlay contentOverlayView]
  -[SBShelfLiveContentOverlay setBlurViewIconScale:]
  -[SBShelfLiveContentOverlay isContentUpdating]
  -[SBShelfLiveContentOverlay noteKeyboardFocusDidChangeToSceneID:]
  -[SBShelfLiveContentOverlay setDisplayMode:]
  -[SBShelfLiveContentOverlay setStatusBarHidden:nubViewHidden:animator:]
  -[SBShelfLiveContentOverlay delegate]
  -[SBShelfLiveContentOverlay _debugPostModernRotationSupportedInterfaceOrientations]
  -[SBShelfLiveContentOverlay setAsyncRenderingEnabled:withMinificationFilterEnabled:]
  -[SBShelfLiveContentOverlay setMatchMovedToScene:]
  -[SBShelfLiveContentOverlay disableAsynchronousRenderingForNextCommit]
  -[SBShelfLiveContentOverlay setLiveContentBlurEnabled:duration:blurDelay:iconViewScale:began:completion:]
  -[SBShelfLiveContentOverlay setDimmed:]
  -[SBShelfLiveContentOverlay supportedInterfaceOrientations]
  -[SBShelfLiveContentOverlay sizeObservingView:didChangeSize:]
  -[SBShelfLiveContentOverlay setPendingSwitcherSnapshotCacheUpdate:]
  -[SBShelfLiveContentOverlay isPendingSwitcherSnapshotCacheUpdate]
  -[SBShelfLiveContentOverlay initWithSceneHandle:referenceSize:referenceOrientation:livePortalView:isInsetForHomeAffordance:]
  -[SBShelfLiveContentOverlay _updateSceneViewInSideSizeObserveringViewIfNecessary]


SBTransientOverlayViewController : UIViewController <SBHomeGrabberDelegate, BSDescriptionProviding, SBButtonEventsHandler, SBFIdleTimerBehaviorProviding, SBIdleTimerProviding>
 @property  <SBTransientOverlayViewControllerDelegate> *transientOverlayDelegate
 @property  UIStatusBarStyleRequest *currentStatusBarStyleRequest
 @property  BOOL hasVisibleStatusBar
 @property  SBHomeGrabberView *grabberView
 @property  BOOL presentationAllowsHomeGrabberAutoHide
 @property  double presentationContentCornerRadius
 @property  {CGAffineTransform=dddddd} presentationContentTransform
 @property  {CGAffineTransform=dddddd} presentationHomeGrabberTransform
 @property  double presentationHomeGrabberAlpha
 @property  double presentationHomeGrabberAdditionalEdgeSpacing
 @property  BOOL presentationDimmingViewHidden
 @property  double presentationDimmingAlpha
 @property  BOOL presentationPrefersStatusBarHidden
 @property  BOOL dismissesForCoverSheetPresentation
 @property  long long homeAffordanceSuppression
 @property  BOOL preservesAppSwitcherDuringPresentationAndDismissal
 @property  UIColor *presentationDimmingViewColor
 @property  BOOL preventsClippingToBounds
 @property  UIView *backgroundView
 @property  UIView *contentView
 @property  BOOL allowsStackingOverlayContentAbove
 @property  NSNumber *preferredSceneDeactivationReasonValue
 @property  @? sceneDeactivationPredicate
 @property  BOOL contentOpaque
 @property  BOOL prefersProximityDetectionEnabled
 @property  _UILegibilitySettings *preferredStatusBarLegibilitySettings
 @property  unsigned long preferredStatusBarStyleOverridesToCancel
 @property  BOOL prefersStatusBarActivityItemVisible
 @property  BOOL shouldDisableBanners
 @property  BOOL shouldDisableControlCenter
 @property  BOOL shouldDisableReachability
 @property  BOOL shouldDisableInteractiveScreenshotGesture
 @property  BOOL shouldDisableSiri
 @property  BOOL shouldPendAlertItems
 @property  BOOL dismissesSiriForPresentation
 @property  BOOL shouldUseSceneBasedKeyboardFocus
 @property  BOOL shouldPreventDragAndDrop
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  long long containerOrientation
 @property  BOOL shouldDisableOrientationUpdates
 @property  BOOL isIgnoringAppearanceUpdates
 @property  BOOL isIgnoringContentOverlayInsetUpdates
 @property  long long preferredLockedGestureDismissalStyle
 @property  long long preferredUnlockedGestureDismissalStyle
 @property  SBDisplayItem *representedDisplayItem
 @property  NSString *preferredDisplayLayoutElementIdentifier
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  int pictureInPictureProcessIdentifier
 @property  BOOL prefersWindowHitTestingDisabled
 @property  BOOL attachedToWindowedAccessory
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} windowedAccessoryCutoutFrameInScreen
 @property  BOOL canBecomeLocalFirstResponder
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout

  // instance methods
  -[SBTransientOverlayViewController containerOrientation]
  -[SBTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBTransientOverlayViewController idleTimerCoordinator]
  -[SBTransientOverlayViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBTransientOverlayViewController _edgeInsetsForChildViewController:insetsAreAbsolute:]
  -[SBTransientOverlayViewController setContainerOrientation:]
  -[SBTransientOverlayViewController _isKeyboardVisibleForSpringBoard]
  -[SBTransientOverlayViewController displayLayoutElement]
  -[SBTransientOverlayViewController setIdleTimerCoordinator:]
  -[SBTransientOverlayViewController handleVolumeUpButtonPress]
  -[SBTransientOverlayViewController handleHomeButtonDoublePress]
  -[SBTransientOverlayViewController handleHomeButtonPress]
  -[SBTransientOverlayViewController idleTimerMode]
  -[SBTransientOverlayViewController handleLockButtonPress]
  -[SBTransientOverlayViewController handleVolumeDownButtonPress]
  -[SBTransientOverlayViewController shouldAllowAutoHideForHomeGrabberView:]
  -[SBTransientOverlayViewController handleHeadsetButtonPress:]
  -[SBTransientOverlayViewController idleWarnMode]
  -[SBTransientOverlayViewController setDisplayLayoutElement:]
  -[SBTransientOverlayViewController setNeedsStatusBarAppearanceUpdate]
  -[SBTransientOverlayViewController handleHomeButtonLongPress]
  -[SBTransientOverlayViewController handleVoiceCommandButtonPress]
  -[SBTransientOverlayViewController .cxx_destruct]
  -[SBTransientOverlayViewController idleTimerDuration]
  -[SBTransientOverlayViewController _setDisplayLayoutElementActive:]
  -[SBTransientOverlayViewController viewDidLoad]
  -[SBTransientOverlayViewController contentView]
  -[SBTransientOverlayViewController shouldDisableSiri]
  -[SBTransientOverlayViewController succinctDescriptionBuilder]
  -[SBTransientOverlayViewController viewDidAppear:]
  -[SBTransientOverlayViewController initWithNibName:bundle:]
  -[SBTransientOverlayViewController setNeedsUpdateOfScreenEdgesDeferringSystemGestures]
  -[SBTransientOverlayViewController shouldAutorotate]
  -[SBTransientOverlayViewController setGrabberView:]
  -[SBTransientOverlayViewController currentStatusBarStyleRequest]
  -[SBTransientOverlayViewController descriptionBuilderWithMultilinePrefix:]
  -[SBTransientOverlayViewController setNeedsUpdateOfHomeIndicatorAutoHidden]
  -[SBTransientOverlayViewController descriptionWithMultilinePrefix:]
  -[SBTransientOverlayViewController succinctDescription]
  -[SBTransientOverlayViewController viewDidLayoutSubviews]
  -[SBTransientOverlayViewController shouldDisableControlCenter]
  -[SBTransientOverlayViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[SBTransientOverlayViewController shouldAllowThinStyleForHomeGrabberView:]
  -[SBTransientOverlayViewController isContentOpaque]
  -[SBTransientOverlayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBTransientOverlayViewController hasVisibleStatusBar]
  -[SBTransientOverlayViewController setNeedsWhitePointAdaptivityStyleUpdate]
  -[SBTransientOverlayViewController dealloc]
  -[SBTransientOverlayViewController prefersStatusBarActivityItemVisible]
  -[SBTransientOverlayViewController grabberView]
  -[SBTransientOverlayViewController supportedInterfaceOrientations]
  -[SBTransientOverlayViewController handleDoubleHeightStatusBarTap]
  -[SBTransientOverlayViewController viewDidDisappear:]
  -[SBTransientOverlayViewController backgroundView]
  -[SBTransientOverlayViewController additionalEdgeSpacingForHomeGrabberView:]
  -[SBTransientOverlayViewController isAttachedToWindowedAccessory]
  -[SBTransientOverlayViewController windowedAccessoryCutoutFrameInScreen]
  -[SBTransientOverlayViewController _keyboardWillShowNotification:]
  -[SBTransientOverlayViewController didTransitionToAttachedToWindowedAccessory:windowedAccessoryCutoutFrameInScreen:]
  -[SBTransientOverlayViewController _keyboardWillHideNotification:]
  -[SBTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBTransientOverlayViewController beginIgnoringAppearanceUpdates]
  -[SBTransientOverlayViewController beginIgnoringContentOverlayInsetUpdates]
  -[SBTransientOverlayViewController endIgnoringAppearanceUpdates]
  -[SBTransientOverlayViewController endIgnoringContentOverlayInsetUpdates]
  -[SBTransientOverlayViewController allowsStackingOverlayContentAbove]
  -[SBTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBTransientOverlayViewController shouldDisableBanners]
  -[SBTransientOverlayViewController shouldPendAlertItems]
  -[SBTransientOverlayViewController preservesAppSwitcherDuringPresentationAndDismissal]
  -[SBTransientOverlayViewController dismissesSiriForPresentation]
  -[SBTransientOverlayViewController preserveInputViewsAnimated:]
  -[SBTransientOverlayViewController handleGestureDismissal]
  -[SBTransientOverlayViewController restoreInputViewsAnimated:]
  -[SBTransientOverlayViewController handlePictureInPictureDidBegin]
  -[SBTransientOverlayViewController homeAffordanceSuppression]
  -[SBTransientOverlayViewController isIgnoringAppearanceUpdates]
  -[SBTransientOverlayViewController setNeedsContentOpaqueUpdate]
  -[SBTransientOverlayViewController setNeedsGestureDismissalStyleUpdate]
  -[SBTransientOverlayViewController setNeedsFeaturePolicyUpdate]
  -[SBTransientOverlayViewController setNeedsSceneDeactivationUpdate]
  -[SBTransientOverlayViewController setNeedsOrientationUpdatesDisabledUpdate]
  -[SBTransientOverlayViewController isIgnoringContentOverlayInsetUpdates]
  -[SBTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBTransientOverlayViewController preferredSceneDeactivationReasonValue]
  -[SBTransientOverlayViewController preferredStatusBarStyleOverridesToCancel]
  -[SBTransientOverlayViewController shouldDisableReachability]
  -[SBTransientOverlayViewController shouldDisableOrientationUpdates]
  -[SBTransientOverlayViewController shouldDisableInteractiveScreenshotGesture]
  -[SBTransientOverlayViewController isPresentedByProcess:]
  -[SBTransientOverlayViewController pictureInPictureProcessIdentifier]
  -[SBTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBTransientOverlayViewController representedDisplayItem]
  -[SBTransientOverlayViewController sceneDeactivationPredicate]
  -[SBTransientOverlayViewController shouldUseSceneBasedKeyboardFocus]
  -[SBTransientOverlayViewController setTransientOverlayDelegate:]
  -[SBTransientOverlayViewController dismissesForCoverSheetPresentation]
  -[SBTransientOverlayViewController canBecomeLocalFirstResponder]
  -[SBTransientOverlayViewController shouldPreventDragAndDrop]
  -[SBTransientOverlayViewController setPresentationDimmingViewHidden:]
  -[SBTransientOverlayViewController setPresentationDimmingAlpha:]
  -[SBTransientOverlayViewController setPresentationContentTransform:]
  -[SBTransientOverlayViewController setPresentationHomeGrabberTransform:]
  -[SBTransientOverlayViewController setPresentationPrefersStatusBarHidden:initialStatusBarSettings:]
  -[SBTransientOverlayViewController setPresentationHomeGrabberAlpha:]
  -[SBTransientOverlayViewController setPresentationHomeGrabberAdditionalEdgeSpacing:]
  -[SBTransientOverlayViewController setPresentationContentCornerRadius:]
  -[SBTransientOverlayViewController prefersProximityDetectionEnabled]
  -[SBTransientOverlayViewController transientOverlayDelegate]
  -[SBTransientOverlayViewController setPresentationPrefersHomeGrabberHidden:animated:]
  -[SBTransientOverlayViewController prefersWindowHitTestingDisabled]
  -[SBTransientOverlayViewController setHomeGrabberPointerClickDelegate:]
  -[SBTransientOverlayViewController setNeedsWindowHitTestingUpdate]
  -[SBTransientOverlayViewController presentationDimmingViewColor]
  -[SBTransientOverlayViewController preventsClippingToBounds]
  -[SBTransientOverlayViewController setNeedsIdleTimerReset]
  -[SBTransientOverlayViewController handleWillShowKeyboard:]
  -[SBTransientOverlayViewController preferredStatusBarLegibilitySettings]
  -[SBTransientOverlayViewController setNeedsProximityDetectionUpdate]
  -[SBTransientOverlayViewController _invalidateKeyboardHomeAffordanceAssertion]
  -[SBTransientOverlayViewController _applyStatusBarStyleRequestWithInitialStatusBarSettings:]
  -[SBTransientOverlayViewController _updateGrabberViewConfiguration]
  -[SBTransientOverlayViewController _currentStatusBarFrameForStyle:]
  -[SBTransientOverlayViewController _newHomeGrabberViewWithFrame:]
  -[SBTransientOverlayViewController addPresentationBackgroundView:]
  -[SBTransientOverlayViewController removePresentationBackgroundView:]
  -[SBTransientOverlayViewController _updateGrabberViewHiddenConfigurationAnimated:]
  -[SBTransientOverlayViewController presentationDimmingAlpha]
  -[SBTransientOverlayViewController presentationAllowsHomeGrabberAutoHide]
  -[SBTransientOverlayViewController setPresentationAllowsHomeGrabberAutoHide:]
  -[SBTransientOverlayViewController presentationContentCornerRadius]
  -[SBTransientOverlayViewController presentationContentTransform]
  -[SBTransientOverlayViewController presentationHomeGrabberTransform]
  -[SBTransientOverlayViewController presentationHomeGrabberAlpha]
  -[SBTransientOverlayViewController presentationHomeGrabberAdditionalEdgeSpacing]
  -[SBTransientOverlayViewController presentationDimmingViewHidden]
  -[SBTransientOverlayViewController presentationPrefersStatusBarHidden]


SBExternalHomeGestureFloatingSwitcherModifier : SBGestureSwitcherModifier <SBHomeGestureDockSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBExternalHomeGestureFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBExternalHomeGestureFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBExternalHomeGestureFloatingSwitcherModifier .cxx_destruct]
  -[SBExternalHomeGestureFloatingSwitcherModifier isFloatingDockGesturePossible]
  -[SBExternalHomeGestureFloatingSwitcherModifier didMoveToParentModifier:]
  -[SBExternalHomeGestureFloatingSwitcherModifier containerViewBounds]
  -[SBExternalHomeGestureFloatingSwitcherModifier handleGestureEvent:]
  -[SBExternalHomeGestureFloatingSwitcherModifier currentFinalDestination]
  -[SBExternalHomeGestureFloatingSwitcherModifier initWithGestureID:initialFloatingConfiguration:interfaceOrientation:]
  -[SBExternalHomeGestureFloatingSwitcherModifier _updateForGestureDidBeginOrChangeWithEvent:]


SBFocusModesHomeScreenSettingsServer : NSObject <BSServiceConnectionListenerDelegate, SBSFocusModesHomeScreenSettingsClientToServerInterface>
 @property  FBServiceClientAuthenticator *authenticator
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSMutableArray *connections
 @property  BSServiceConnectionListener *listener
 @property  <SBFocusModesHomeScreenSettingsServerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFocusModesHomeScreenSettingsServer authenticator]
  -[SBFocusModesHomeScreenSettingsServer listener:didReceiveConnection:withContext:]
  -[SBFocusModesHomeScreenSettingsServer .cxx_destruct]
  -[SBFocusModesHomeScreenSettingsServer setDelegate:]
  -[SBFocusModesHomeScreenSettingsServer init]
  -[SBFocusModesHomeScreenSettingsServer listener]
  -[SBFocusModesHomeScreenSettingsServer connections]
  -[SBFocusModesHomeScreenSettingsServer homeScreenSnapshotsWithRequest:completion:]
  -[SBFocusModesHomeScreenSettingsServer updateFocusModeHomeScreenSettingsWithRequest:]
  -[SBFocusModesHomeScreenSettingsServer activate]
  -[SBFocusModesHomeScreenSettingsServer delegate]
  -[SBFocusModesHomeScreenSettingsServer queue]


SBSceneResizeGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBSceneResizeGestureSwitcherModifier backgroundOpacityForIndex:]
  -[SBSceneResizeGestureSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBSceneResizeGestureSwitcherModifier keyboardSuppressionMode]
  -[SBSceneResizeGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSceneResizeGestureSwitcherModifier isLayoutRoleMatchMovedToScene:inAppLayout:]
  -[SBSceneResizeGestureSwitcherModifier scaleForIndex:]
  -[SBSceneResizeGestureSwitcherModifier handleTransitionEvent:]
  -[SBSceneResizeGestureSwitcherModifier .cxx_destruct]
  -[SBSceneResizeGestureSwitcherModifier blurDelayForLayoutRole:inAppLayout:]
  -[SBSceneResizeGestureSwitcherModifier hiddenContentStatusBarPartsForLayoutRole:inAppLayout:]
  -[SBSceneResizeGestureSwitcherModifier isLayoutRoleBlurred:inAppLayout:]
  -[SBSceneResizeGestureSwitcherModifier cornerRadiiForIndex:]
  -[SBSceneResizeGestureSwitcherModifier frameForLayoutRole:inAppLayout:withBounds:]
  -[SBSceneResizeGestureSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBSceneResizeGestureSwitcherModifier shouldUseAnchorPointToPinLayoutRolesToSpace:]
  -[SBSceneResizeGestureSwitcherModifier resizeGrabberLayoutAttributesForAppLayout:]
  -[SBSceneResizeGestureSwitcherModifier handleGestureEvent:]
  -[SBSceneResizeGestureSwitcherModifier _rubberbandingRange]
  -[SBSceneResizeGestureSwitcherModifier initWithGestureID:appLayout:spaceConfiguration:]
  -[SBSceneResizeGestureSwitcherModifier _minimumCardWidthForDismissalAction]
  -[SBSceneResizeGestureSwitcherModifier _currentPresentationAction]
  -[SBSceneResizeGestureSwitcherModifier _switcherWidth]
  -[SBSceneResizeGestureSwitcherModifier _maxCardWidthForDismissalAction]
  -[SBSceneResizeGestureSwitcherModifier _handleGestureEventBeganWithEvent:]
  -[SBSceneResizeGestureSwitcherModifier _handleGestureEventChangedWithEvent:]
  -[SBSceneResizeGestureSwitcherModifier _handleGestureEventEndedWithEvent:]
  -[SBSceneResizeGestureSwitcherModifier _beginAnimatingRampingProperty]
  -[SBSceneResizeGestureSwitcherModifier _currentActionWithProjection:]
  -[SBSceneResizeGestureSwitcherModifier _appLayoutForAction:]
  -[SBSceneResizeGestureSwitcherModifier _spaceConfigurationForFinalResizeAction:]
  -[SBSceneResizeGestureSwitcherModifier _normalizedHorizontalLocationWithProjection:]
  -[SBSceneResizeGestureSwitcherModifier _actionForNormalizedProgress:inOrientation:]
  -[SBSceneResizeGestureSwitcherModifier _presentationActionForNormalizedProgress:]
  -[SBSceneResizeGestureSwitcherModifier _normalizedDismissLeftProgress]
  -[SBSceneResizeGestureSwitcherModifier _normalizedDismissRightProgress]
  -[SBSceneResizeGestureSwitcherModifier _normalizedPeekDismissLeftProgress]
  -[SBSceneResizeGestureSwitcherModifier _normalizedPeekDismissRightProgress]
  -[SBSceneResizeGestureSwitcherModifier _normalizedNarrowWideProgress]
  -[SBSceneResizeGestureSwitcherModifier _normalizedWideNarrowProgress]
  -[SBSceneResizeGestureSwitcherModifier _normalizedProgressBetweenNarrowWideAndHalfHalf]
  -[SBSceneResizeGestureSwitcherModifier _normalizedProgressBetweenHalfHalfAndWideNarrow]
  -[SBSceneResizeGestureSwitcherModifier _normalizedHalfHalfProgress]


SBEDUTemporarySessionLogoutWarningAlertItem : SBAlertItem
 @property  @? logoutActionHandler

  // instance methods
  -[SBEDUTemporarySessionLogoutWarningAlertItem .cxx_destruct]
  -[SBEDUTemporarySessionLogoutWarningAlertItem shouldShowInLockScreen]
  -[SBEDUTemporarySessionLogoutWarningAlertItem configure:requirePasscodeForActions:]
  -[SBEDUTemporarySessionLogoutWarningAlertItem forcesModalAlertAppearance]
  -[SBEDUTemporarySessionLogoutWarningAlertItem setLogoutActionHandler:]
  -[SBEDUTemporarySessionLogoutWarningAlertItem logoutActionHandler]


SBSceneLayoutCoordinateSpace : NSObject <BSDescriptionProviding, UICoordinateSpace>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds

  // class methods
  +[SBSceneLayoutCoordinateSpace coordinateSpaceForInterfaceOrientation:withReferenceCoordinateSpace:inOrientation:]
  +[SBSceneLayoutCoordinateSpace coordinateSpaceForFrame:withinCoordinateSpace:]

  // instance methods
  -[SBSceneLayoutCoordinateSpace convertRect:fromCoordinateSpace:]
  -[SBSceneLayoutCoordinateSpace .cxx_destruct]
  -[SBSceneLayoutCoordinateSpace succinctDescriptionBuilder]
  -[SBSceneLayoutCoordinateSpace convertPoint:fromCoordinateSpace:]
  -[SBSceneLayoutCoordinateSpace descriptionBuilderWithMultilinePrefix:]
  -[SBSceneLayoutCoordinateSpace convertRect:toCoordinateSpace:]
  -[SBSceneLayoutCoordinateSpace descriptionWithMultilinePrefix:]
  -[SBSceneLayoutCoordinateSpace succinctDescription]
  -[SBSceneLayoutCoordinateSpace convertPoint:toCoordinateSpace:]
  -[SBSceneLayoutCoordinateSpace bounds]
  -[SBSceneLayoutCoordinateSpace initWithParentCoordinateSpace:]


SBSceneLayoutOrientationCoordinateSpace : SBSceneLayoutCoordinateSpace
  // instance methods
  -[SBSceneLayoutOrientationCoordinateSpace convertRect:fromCoordinateSpace:]
  -[SBSceneLayoutOrientationCoordinateSpace initWithInterfaceOrientation:withReferenceCoordinateSpace:inOrientation:]
  -[SBSceneLayoutOrientationCoordinateSpace descriptionBuilderWithMultilinePrefix:]
  -[SBSceneLayoutOrientationCoordinateSpace convertRect:toCoordinateSpace:]
  -[SBSceneLayoutOrientationCoordinateSpace bounds]


SBSceneLayoutFrameCoordinateSpace : SBSceneLayoutCoordinateSpace
  // instance methods
  -[SBSceneLayoutFrameCoordinateSpace convertRect:fromCoordinateSpace:]
  -[SBSceneLayoutFrameCoordinateSpace .cxx_destruct]
  -[SBSceneLayoutFrameCoordinateSpace descriptionBuilderWithMultilinePrefix:]
  -[SBSceneLayoutFrameCoordinateSpace convertRect:toCoordinateSpace:]
  -[SBSceneLayoutFrameCoordinateSpace initWithFrame:withinCoordinateSpace:]
  -[SBSceneLayoutFrameCoordinateSpace bounds]


SBLockScreenViewControllerBase : UIViewController <SBApplicationHosting, SBAutoUnlockRule, SBBiometricUnlockBehavior, SBButtonEventsHandler, SBCoverSheetSlidingViewControllerContentViewController, SBIdleTimerProviding, SBLockScreenBacklightControlling, SBLockScreenBehaviorSuppressing, SBLockScreenBlockedStateObserving, SBLockScreenButtonObserving, SBLockScreenCallHandling, SBLockScreenContentStateProviding, SBLockScreenCustomActionStoring, SBLockScreenIdleTimerControlling, SBLockScreenLockingAndUnlocking, SBLockScreenMediaControlsPresenting, SBLockScreenPasscodeViewPresenting, SBLockScreenPluginPresenting, SBLockScreenProximityBehaviorProviding, SBLockScreenStatusBarTransitioning, SBLockScreenSpotlightPresenting>
 @property  UIVisualEffectView *wakeEffectView
 @property  SBFLockScreenWakeAnimator *lockScreenWakeAnimator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate
 @property  BOOL contentOccludesBackground
 @property  double backlightLevel
 @property  SBFLockScreenActionContext *customLockScreenActionContext
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  BOOL authenticated
 @property  BOOL showingMediaControls
 @property  BOOL expectsFaceContact
 @property  BOOL shouldShowLockStatusBarTime

  // instance methods
  -[SBLockScreenViewControllerBase idleTimerCoordinator]
  -[SBLockScreenViewControllerBase coordinatorRequestedIdleTimerBehavior:]
  -[SBLockScreenViewControllerBase createHomeButtonShowPasscodeRecognizerForHomeButtonPress]
  -[SBLockScreenViewControllerBase canBeDeactivatedForUIUnlockFromSource:]
  -[SBLockScreenViewControllerBase exitEmergencyDialerAnimated:]
  -[SBLockScreenViewControllerBase setIdleTimerCoordinator:]
  -[SBLockScreenViewControllerBase handleVolumeUpButtonPress]
  -[SBLockScreenViewControllerBase noteResetRestoreStateUpdated]
  -[SBLockScreenViewControllerBase handleHomeButtonDoublePress]
  -[SBLockScreenViewControllerBase setInScreenOffMode:forAutoUnlock:fromUnlockSource:]
  -[SBLockScreenViewControllerBase wakeEffectView]
  -[SBLockScreenViewControllerBase shouldDisableALS]
  -[SBLockScreenViewControllerBase setAuthenticated:]
  -[SBLockScreenViewControllerBase isPasscodeLockVisible]
  -[SBLockScreenViewControllerBase handleHomeButtonPress]
  -[SBLockScreenViewControllerBase handleLockButtonPress]
  -[SBLockScreenViewControllerBase prepareForUILock]
  -[SBLockScreenViewControllerBase isShowingMediaControls]
  -[SBLockScreenViewControllerBase handleVolumeDownButtonPress]
  -[SBLockScreenViewControllerBase setBiometricUnlockBehaviorDelegate:]
  -[SBLockScreenViewControllerBase handleHeadsetButtonPress:]
  -[SBLockScreenViewControllerBase suppressesControlCenter]
  -[SBLockScreenViewControllerBase backlightLevel]
  -[SBLockScreenViewControllerBase handleHomeButtonLongPress]
  -[SBLockScreenViewControllerBase handleBiometricEvent:]
  -[SBLockScreenViewControllerBase _customLockScreenActionContext]
  -[SBLockScreenViewControllerBase handleVoiceCommandButtonPress]
  -[SBLockScreenViewControllerBase isAuthenticated]
  -[SBLockScreenViewControllerBase .cxx_destruct]
  -[SBLockScreenViewControllerBase canHostAnApp]
  -[SBLockScreenViewControllerBase shouldShowLockStatusBarTime]
  -[SBLockScreenViewControllerBase noteMenuButtonDown]
  -[SBLockScreenViewControllerBase setPasscodeLockVisible:animated:completion:]
  -[SBLockScreenViewControllerBase viewDidLoad]
  -[SBLockScreenViewControllerBase jiggleLockIcon]
  -[SBLockScreenViewControllerBase updateStatusBarForLockScreenTeardown]
  -[SBLockScreenViewControllerBase setBacklightLevel:]
  -[SBLockScreenViewControllerBase finishUIUnlockFromSource:]
  -[SBLockScreenViewControllerBase willUIUnlockFromSource:]
  -[SBLockScreenViewControllerBase expectsFaceContact]
  -[SBLockScreenViewControllerBase hostedAppSceneHandles]
  -[SBLockScreenViewControllerBase disableLockScreenPluginWithContext:]
  -[SBLockScreenViewControllerBase conformsToSBApplicationHosting]
  -[SBLockScreenViewControllerBase succinctDescriptionBuilder]
  -[SBLockScreenViewControllerBase setInScreenOffMode:]
  -[SBLockScreenViewControllerBase isHostingAnApp]
  -[SBLockScreenViewControllerBase isMainPageVisible]
  -[SBLockScreenViewControllerBase descriptionBuilderWithMultilinePrefix:]
  -[SBLockScreenViewControllerBase shouldPresentOrDismissCoverSheetSpotlight]
  -[SBLockScreenViewControllerBase noteMenuButtonUp]
  -[SBLockScreenViewControllerBase hostedAppWillRotateToInterfaceOrientation:]
  -[SBLockScreenViewControllerBase enableLockScreenPluginWithContext:]
  -[SBLockScreenViewControllerBase descriptionWithMultilinePrefix:]
  -[SBLockScreenViewControllerBase hostedAppSceneHandle]
  -[SBLockScreenViewControllerBase biometricUnlockBehaviorDelegate]
  -[SBLockScreenViewControllerBase succinctDescription]
  -[SBLockScreenViewControllerBase launchEmergencyDialer]
  -[SBLockScreenViewControllerBase prepareForUIUnlock]
  -[SBLockScreenViewControllerBase isUnlockDisabled]
  -[SBLockScreenViewControllerBase startLockScreenFadeInAnimationForSource:]
  -[SBLockScreenViewControllerBase suppressesBanners]
  -[SBLockScreenViewControllerBase suppressesScreenshots]
  -[SBLockScreenViewControllerBase launchEmergencyDialerAnimated:]
  -[SBLockScreenViewControllerBase viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBLockScreenViewControllerBase isInScreenOffMode]
  -[SBLockScreenViewControllerBase noteDeviceBlockedStatusUpdated]
  -[SBLockScreenViewControllerBase shouldAutoUnlockForSource:]
  -[SBLockScreenViewControllerBase createHomeButtonSuppressAfterUnlockRecognizerForUnlockSource:]
  -[SBLockScreenViewControllerBase presentOrDismissCoverSheetSpotlightAnimated:]
  -[SBLockScreenViewControllerBase setShowingMediaControls:]
  -[SBLockScreenViewControllerBase emergencyDialerExitedWithError:]
  -[SBLockScreenViewControllerBase isMakingEmergencyCall]
  -[SBLockScreenViewControllerBase shouldUnlockUIOnKeyDownEvent]
  -[SBLockScreenViewControllerBase setWakeEffectView:]
  -[SBLockScreenViewControllerBase setCustomLockScreenActionContext:]
  -[SBLockScreenViewControllerBase updateStatusBarForLockScreenComeback]
  -[SBLockScreenViewControllerBase setPasscodeLockVisible:animated:]
  -[SBLockScreenViewControllerBase updateScaleViewWithScale:]
  -[SBLockScreenViewControllerBase conformsToSBCoverSheetSlidingViewControllerContentViewController]
  -[SBLockScreenViewControllerBase contentOccludesBackground]
  -[SBLockScreenViewControllerBase lockScreenWakeAnimator]


SBLockScreenManager : NSObject <BSDescriptionProviding, SBPasscodeEntryTransientOverlayViewControllerDelegate, SBFPrivateAuthenticationObserver, CSCoverSheetViewControllerDelegate, CSWallpaperColorProvider, SBLockScreenBiometricAuthenticationCoordinatorDelegate, SBHomeButtonShowPasscodeRecognizerDelegate, SBHomeButtonSuppressAfterUnlockRecognizerDelegate, SBWallpaperObserver, SBCoverSheetPresentationDelegate, SBUILockStateProvider, SBTapToWakeDelegate, SBSRemoteAlertHandleObserver, SBIdleTimerProviding, SBIdleTimerCoordinating>
 @property  BOOL UIUnlocking
 @property  <SBFLockOutStatusProvider> *lockOutController
 @property  SBFUserAuthenticationController *userAuthController
 @property  SBLiftToWakeManager *liftToWakeManager
 @property  SBTapToWakeController *tapToWakeController
 @property  @? unlockActionBlock
 @property  <SBLockScreenEnvironment> *lockScreenEnvironment
 @property  CSCoverSheetViewController *coverSheetViewController
 @property  <SBNotificationDestination> *notificationDestination
 @property  SBLockScreenOrientationManager *lockScreenOrientationManager
 @property  BOOL isUILocked
 @property  BOOL isWaitingToLockUI
 @property  BOOL shouldHandlePocketStateChanges
 @property  BOOL shouldTapToWake
 @property  BOOL shouldPlayLockSound
 @property  BOOL isLockScreenActive
 @property  BOOL isLockScreenVisible
 @property  BOOL isSupressingLockButton
 @property  BOOL bioAuthenticatedWhileMenuButtonDown
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLockScreenManager sharedInstance]
  +[SBLockScreenManager sharedInstanceIfExists]
  +[SBLockScreenManager _sharedInstanceCreateIfNeeded:]

  // instance methods
  -[SBLockScreenManager handleKeyHIDEvent:]
  -[SBLockScreenManager _canAttemptRealUIUnlockIgnoringBacklightNonsenseWithReason:]
  -[SBLockScreenManager loadViewsIfNeeded]
  -[SBLockScreenManager wallpaperDidChangeForVariant:]
  -[SBLockScreenManager removeLockScreenDisableAssertion:]
  -[SBLockScreenManager setUnlockActionBlock:]
  -[SBLockScreenManager coordinatorRequestedIdleTimerBehavior:]
  -[SBLockScreenManager remoteAlertHandleDidActivate:]
  -[SBLockScreenManager isLockScreenDisabledForAssertion]
  -[SBLockScreenManager addLockScreenDisableAssertion:]
  -[SBLockScreenManager isLockScreenActive]
  -[SBLockScreenManager lockScreenEnvironment]
  -[SBLockScreenManager attemptUnlockWithPasscode:finishUIUnlock:completion:]
  -[SBLockScreenManager _sendUILockStateChangedNotification]
  -[SBLockScreenManager _setIdleTimerCoordinator:]
  -[SBLockScreenManager _wakeScreenForTapToWake]
  -[SBLockScreenManager idleTimerProvider:didProposeBehavior:forReason:]
  -[SBLockScreenManager coverSheetViewController]
  -[SBLockScreenManager lockUIFromSource:withOptions:completion:]
  -[SBLockScreenManager contrastForCurrentWallpaper]
  -[SBLockScreenManager _noteStartupTransitionWillBegin]
  -[SBLockScreenManager averageColorForCurrentWallpaper]
  -[SBLockScreenManager extendedKeybagLockStateChanged:]
  -[SBLockScreenManager coverSheetViewController:unlockWithRequest:completion:]
  -[SBLockScreenManager _deviceBlockedChanged:]
  -[SBLockScreenManager shouldHandlePocketStateChanges]
  -[SBLockScreenManager _attemptUnlockWithPasscode:mesa:finishUIUnlock:]
  -[SBLockScreenManager _evaluateWallpaperMode]
  -[SBLockScreenManager _attemptUnlockWithPasscode:finishUIUnlock:]
  -[SBLockScreenManager lockScreenViewControllerDidDismiss]
  -[SBLockScreenManager unlockActionBlock]
  -[SBLockScreenManager _resetOrRestoreStateChanged:]
  -[SBLockScreenManager isLockScreenVisible]
  -[SBLockScreenManager isUILocked]
  -[SBLockScreenManager _unlockWithRequest:cancelPendingRequests:completion:]
  -[SBLockScreenManager shouldTapToWake]
  -[SBLockScreenManager .cxx_destruct]
  -[SBLockScreenManager biometricAuthenticationCoordinator:requestsUnlockWithIntent:]
  -[SBLockScreenManager _handleBacklightLevelWillChange:]
  -[SBLockScreenManager lockScreenViewControllerWillPresent]
  -[SBLockScreenManager _setMesaCoordinatorDisabled:forReason:]
  -[SBLockScreenManager homeButtonShowPasscodeRecognizerRequestsPasscodeUIToBeShown:]
  -[SBLockScreenManager lockScreenViewControllerRequestsUnlock]
  -[SBLockScreenManager updateSpringBoardStatusBarForLockScreenTeardown]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewController:authenticatePasscode:]
  -[SBLockScreenManager tapToWakeControllerDidRecognizePencilWakeGesture:]
  -[SBLockScreenManager _newLockScreenEnvironment]
  -[SBLockScreenManager attemptUnlockWithMesa]
  -[SBLockScreenManager coverSheetViewControllerHandleUnlockAttemptSucceeded:]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerStatusText]
  -[SBLockScreenManager setUIUnlocking:]
  -[SBLockScreenManager _setPasscodeVisible:animated:]
  -[SBLockScreenManager activateLostModeForRemoteLock:]
  -[SBLockScreenManager _maybeLaunchSetupForcingCheckIfNotBricked:]
  -[SBLockScreenManager _shouldLockAfterEndingFaceTimeCall]
  -[SBLockScreenManager succinctDescriptionBuilder]
  -[SBLockScreenManager _setupModeChanged]
  -[SBLockScreenManager _runUnlockActionBlock:]
  -[SBLockScreenManager _createAuthenticationAssertion]
  -[SBLockScreenManager setBiometricAutoUnlockingDisabled:forReason:]
  -[SBLockScreenManager isSupressingLockButton]
  -[SBLockScreenManager _evaluatePreArmDisabledAssertions]
  -[SBLockScreenManager handleTransitionRequest:]
  -[SBLockScreenManager startUIUnlockFromSource:withOptions:]
  -[SBLockScreenManager lockScreenViewControllerWillDismiss]
  -[SBLockScreenManager notificationDestination]
  -[SBLockScreenManager coverSheetViewControllerShouldDismissContextMenu:]
  -[SBLockScreenManager _postLockCompletedNotification:]
  -[SBLockScreenManager descriptionBuilderWithMultilinePrefix:]
  -[SBLockScreenManager init]
  -[SBLockScreenManager _shouldBeInSetupMode]
  -[SBLockScreenManager _wakeScreenForMouseButtonDown:]
  -[SBLockScreenManager coverSheetPresentationManager:unlockWithRequest:completion:]
  -[SBLockScreenManager handlesHomeButtonSinglePresses]
  -[SBLockScreenManager isPasscodeEntryTransientOverlayVisible]
  -[SBLockScreenManager _setUserAuthController:]
  -[SBLockScreenManager descriptionWithMultilinePrefix:]
  -[SBLockScreenManager _shouldUnlockUIOnKeyDownEvent]
  -[SBLockScreenManager coverSheetWindowedAccessoryViewControllerDidDismiss:]
  -[SBLockScreenManager biometricAuthenticationCoordinator]
  -[SBLockScreenManager hasUIEverBeenLocked]
  -[SBLockScreenManager shouldLockUIAfterEndingCall]
  -[SBLockScreenManager coverSheetViewController:requestsTouchIDDisabled:forReason:]
  -[SBLockScreenManager bioAuthenticatedWhileMenuButtonDown]
  -[SBLockScreenManager succinctDescription]
  -[SBLockScreenManager _canHandleTransitionRequest:]
  -[SBLockScreenManager _setMesaUnlockingDisabled:forReason:]
  -[SBLockScreenManager coverSheetViewController:startSpotlightInteractiveGestureTransactionForGesture:]
  -[SBLockScreenManager setPasscodeVisible:animated:]
  -[SBLockScreenManager coverSheetViewControllerIsPasscodeVisible:]
  -[SBLockScreenManager coverSheetViewControllerIrisPlayingDidFinish:]
  -[SBLockScreenManager lockUIFromSource:withOptions:]
  -[SBLockScreenManager _lockOutController]
  -[SBLockScreenManager coverSheetViewControllerHasSecureApp:]
  -[SBLockScreenManager homeButtonShowPasscodeRecognizerDidFailToRecognize:]
  -[SBLockScreenManager _lockScreenDimmed:]
  -[SBLockScreenManager _setUILocked:]
  -[SBLockScreenManager _setMesaAutoUnlockingDisabled:forReason:]
  -[SBLockScreenManager _isPasscodeVisible]
  -[SBLockScreenManager _isUnlockDisabled]
  -[SBLockScreenManager _activeCallStateChanged]
  -[SBLockScreenManager coverSheetWindowedAccessoryViewControllerDidPresent:]
  -[SBLockScreenManager enableLostModePlugin]
  -[SBLockScreenManager isInLostMode]
  -[SBLockScreenManager exitLostModeIfNecessaryFromRemoteRequest:]
  -[SBLockScreenManager shouldPlayLockSound]
  -[SBLockScreenManager _setLockOutController:]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerRequestsDismissal:]
  -[SBLockScreenManager unlockWithRequest:completion:]
  -[SBLockScreenManager _prepareWallpaperForStaticMode]
  -[SBLockScreenManager _tapToWakeController]
  -[SBLockScreenManager noteMenuButtonSinglePress]
  -[SBLockScreenManager _prepareWallpaperForInteractiveMode]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerDidDetectFaceOcclusionsSinceScreenOn:]
  -[SBLockScreenManager _disconnectActiveCallIfNeededFromSource:]
  -[SBLockScreenManager activationChanged:]
  -[SBLockScreenManager _authenticationStateChanged:]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerDidDetectBottomFaceOcclusionsSinceScreenOn:]
  -[SBLockScreenManager newLegibilitySettingsProvider]
  -[SBLockScreenManager lockScreenViewControllerDidPresent]
  -[SBLockScreenManager _liftToWakeManager]
  -[SBLockScreenManager _emulateInterstitialPasscodePresentation]
  -[SBLockScreenManager isUIUnlocking]
  -[SBLockScreenManager _clearAuthenticationLockAssertion]
  -[SBLockScreenManager homeButtonSuppressAfterUnlockRecognizerRequestsEndOfSuppression:]
  -[SBLockScreenManager attemptUnlockWithPasscode:]
  -[SBLockScreenManager coverSheetViewController:setMesaUnlockingDisabled:forReason:]
  -[SBLockScreenManager _specifiesTransientPresentationForMode:]
  -[SBLockScreenManager noteMenuButtonDoublePress]
  -[SBLockScreenManager _shouldDisconnectCallWhenLockingForActiveAudioRoute]
  -[SBLockScreenManager _setHomeButtonShowPasscodeRecognizer:]
  -[SBLockScreenManager _lockUI]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerDidDisappear:]
  -[SBLockScreenManager _setTapToWakeController:]
  -[SBLockScreenManager _activateLockScreenAnimated:animationProvider:automatically:inScreenOffMode:dismissNotificationCenter:completion:]
  -[SBLockScreenManager _lockFeaturesForRemoteLock:]
  -[SBLockScreenManager biometricAuthenticationCoordinator:requestsAuthenticationFeedback:]
  -[SBLockScreenManager _reallySetUILocked:]
  -[SBLockScreenManager unlockUIFromSource:withOptions:]
  -[SBLockScreenManager _finishUIUnlockFromSource:withOptions:]
  -[SBLockScreenManager _shouldEmulateInterstitialPresentation]
  -[SBLockScreenManager _setHomeButtonSuppressAfterUnlockRecognizer:]
  -[SBLockScreenManager remoteLock:]
  -[SBLockScreenManager coverSheetViewControllerIsShowingSecureApp:]
  -[SBLockScreenManager _setLiftToWakeManager:]
  -[SBLockScreenManager _shouldLockAfterEndingTelephonyCall]
  -[SBLockScreenManager _handleBacklightDidTurnOff:]
  -[SBLockScreenManager lockScreenOrientationManager]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerStatusSubtitleText]
  -[SBLockScreenManager _setWalletPreArmDisabled:forReason:]
  -[SBLockScreenManager _attemptUnlockWithPasscode:mesa:finishUIUnlock:completion:]
  -[SBLockScreenManager _userAuthController]
  -[SBLockScreenManager _noteStartupTransitionDidBegin]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerRequestsEmergencyCall:]
  -[SBLockScreenManager biometricAuthenticationCoordinator:handleIdentityMatchSuccess:]
  -[SBLockScreenManager averageColorForCurrentWallpaperInScreenRect:]
  -[SBLockScreenManager isWaitingToLockUI]
  -[SBLockScreenManager biometricAuthenticationCoordinatorShouldWaitToInvalidateMatchingAssertion:]
  -[SBLockScreenManager _handleAuthenticationFeedback:]
  -[SBLockScreenManager _relockUIForButtonlikeSource:]
  -[SBLockScreenManager tapToWakeControllerDidRecognizeWakeGesture:]


SBWindowHideRequest : NSObject
 @property  {SBWindowLevelRange_struct=dd} windowLevelRange
 @property  NSString *reason

  // class methods
  +[SBWindowHideRequest hideRequestWithWindowLevelRange:reason:]

  // instance methods
  -[SBWindowHideRequest .cxx_destruct]
  -[SBWindowHideRequest reason]
  -[SBWindowHideRequest setReason:]
  -[SBWindowHideRequest setWindowLevelRange:]
  -[SBWindowHideRequest windowLevelRange]


SBWindowHideState : NSObject
 @property  BOOL hidden
 @property  double desiredAlpha

  // instance methods
  -[SBWindowHideState desiredAlpha]
  -[SBWindowHideState isHidden]
  -[SBWindowHideState setDesiredAlpha:]
  -[SBWindowHideState setHidden:]


SBWindowHidingManager : NSObject <SBSceneHandleObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWindowHidingManager sharedInstance]
  +[SBWindowHidingManager start]

  // instance methods
  -[SBWindowHidingManager sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBWindowHidingManager setAlpha:forWindow:]
  -[SBWindowHidingManager _takeNoteOfWindow:onScreen:]
  -[SBWindowHidingManager _adjustWindowsForActiveHideRange]
  -[SBWindowHidingManager stopHidingWindowsForContext:]
  -[SBWindowHidingManager dumpKnownWindows]
  -[SBWindowHidingManager .cxx_destruct]
  -[SBWindowHidingManager _recomputeHideRangeAndAdjustWindows]
  -[SBWindowHidingManager _isHidingWindows]
  -[SBWindowHidingManager init]
  -[SBWindowHidingManager dumpHidingState]
  -[SBWindowHidingManager startHidingWindowsExclusivelyFromLevel:toLevel:forContext:reason:]
  -[SBWindowHidingManager _captureWindow:]
  -[SBWindowHidingManager _isHidingWindowLevel:]
  -[SBWindowHidingManager _releaseWindow:]


SBStartupTransitionToSetup : SBBaseStartupTransition
  // instance methods
  -[SBStartupTransitionToSetup .cxx_destruct]
  -[SBStartupTransitionToSetup performTransitionWithCompletionBlock:]
  -[SBStartupTransitionToSetup initWithDestination:context:]
  -[SBStartupTransitionToSetup initWithDestination:context:initialRestartState:]
  -[SBStartupTransitionToSetup _activateSetupWithCompletion:underLock:fromSnapshot:]


SBTransaction : BSTransaction
  // instance methods
  -[SBTransaction init]
  -[SBTransaction queue]


SBDashBoardStatusBarController : NSObject <CSStatusBarControlling>
 @property  NSNumber *statusBarAlpha
 @property  long long statusBarStyle
 @property  _UILegibilitySettings *statusBarLegibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardStatusBarController enableStatusBarItem:requestor:]
  -[SBDashBoardStatusBarController statusBarAlpha]
  -[SBDashBoardStatusBarController createFakeStatusBarWithReason:withFrame:]
  -[SBDashBoardStatusBarController effectiveStatusBarStyleRequestForAlpha:style:legibilitySettings:]
  -[SBDashBoardStatusBarController statusBarStyle]
  -[SBDashBoardStatusBarController disableStatusBarItem:requestor:]
  -[SBDashBoardStatusBarController .cxx_destruct]
  -[SBDashBoardStatusBarController enableStatusBarTime:crossfade:crossfadeDuration:]
  -[SBDashBoardStatusBarController setStatusBarAlpha:style:legibilitySettings:]
  -[SBDashBoardStatusBarController init]
  -[SBDashBoardStatusBarController setStatusBarHidden:forReason:]
  -[SBDashBoardStatusBarController statusBarLegibilitySettings]
  -[SBDashBoardStatusBarController updateStatusBarTimeEnabled]
  -[SBDashBoardStatusBarController dealloc]
  -[SBDashBoardStatusBarController destroyFakeStatusBar:]
  -[SBDashBoardStatusBarController _stateProvider]
  -[SBDashBoardStatusBarController clearStatusBarParameters]


SBRecentAppLayouts : NSObject <SBApplicationRestrictionObserver>
 @property  <SBRecentAppLayoutsDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecentAppLayouts remove:]
  -[SBRecentAppLayouts _persistSynchronously]
  -[SBRecentAppLayouts _removeAllowHiddenAppAssertionForBundleIdentifier:requestIdentifier:]
  -[SBRecentAppLayouts _ppt_setModel:]
  -[SBRecentAppLayouts addAppLayout:atIndex:]
  -[SBRecentAppLayouts _legacyAppLayoutForItem:layoutRole:]
  -[SBRecentAppLayouts _loadStashedModelAtPath:]
  -[SBRecentAppLayouts addToFront:]
  -[SBRecentAppLayouts .cxx_destruct]
  -[SBRecentAppLayouts _setRecents:notifyForChangeDescription:]
  -[SBRecentAppLayouts _recentsFromPrefs]
  -[SBRecentAppLayouts _persistSoon]
  -[SBRecentAppLayouts initWithUserDefaults:persister:iconController:applicationController:placeholderController:sceneManager:]
  -[SBRecentAppLayouts _isDisplayItemRestrictedOrUnsupported:]
  -[SBRecentAppLayouts _setUpStashedModelSettingsOutlets]
  -[SBRecentAppLayouts setDelegate:]
  -[SBRecentAppLayouts _legacyAppLayoutsForDisplayItems:layoutRolesMapping:]
  -[SBRecentAppLayouts _stashModelToPath:]
  -[SBRecentAppLayouts init]
  -[SBRecentAppLayouts _filterRestrictedOrUnsupportedAppsFromRecents]
  -[SBRecentAppLayouts _changeDescriptionForFilteringRestrictedUnsupportedAndInvalidAppsFromAppLayouts:]
  -[SBRecentAppLayouts applicationRestrictionController:didUpdateVisibleTags:hiddenTags:]
  -[SBRecentAppLayouts recentsForBundleIdentifier:includingHiddenAppLayouts:]
  -[SBRecentAppLayouts _initializeRecents]
  -[SBRecentAppLayouts _displayItemLayoutRolesFromLegacyPrefsForLoadedDisplayItems:]
  -[SBRecentAppLayouts _validateAndUpdateRecents:]
  -[SBRecentAppLayouts recentsIncludingHiddenAppLayouts:]
  -[SBRecentAppLayouts _changeDescriptionForFilteringRestrictedOrUnsupportedAppsFromAppLayouts:]
  -[SBRecentAppLayouts _ppt_loadStashedModel]
  -[SBRecentAppLayouts _saveRecents]
  -[SBRecentAppLayouts _ignoresAppHiddenForDisplayItem:]
  -[SBRecentAppLayouts _changeDescriptionForFilteringAppLayouts:withDisplayItemTest:]
  -[SBRecentAppLayouts hide:]
  -[SBRecentAppLayouts _ppt_currentModel]
  -[SBRecentAppLayouts _recentDisplayItemsFromLegacyPrefs]
  -[SBRecentAppLayouts _addAllAppsToModel]
  -[SBRecentAppLayouts _isExistingSceneIdentifierValidForClaimedMultiwindowSupportInDisplayItem:]
  -[SBRecentAppLayouts recentDisplayItemsForBundleIdentifier:includingHiddenAppLayouts:]
  -[SBRecentAppLayouts delegate]
  -[SBRecentAppLayouts addAppLayout:afterAppLayout:]
  -[SBRecentAppLayouts dealloc]
  -[SBRecentAppLayouts replaceAppLayout:withAppLayout:]
  -[SBRecentAppLayouts _iconVisibilityDidChange:]
  -[SBRecentAppLayouts removeAppLayouts:]
  -[SBRecentAppLayouts _isApplicationSupported:]
  -[SBRecentAppLayouts _addAllowHiddenAppAssertionForBundleIdentifier:requestIdentifier:]
  -[SBRecentAppLayouts _migrateDisplayItemIfNeeded:]
  -[SBRecentAppLayouts _filterRestrictedUnsupportedAndInvalidAppsFromRecents]
  -[SBRecentAppLayouts _installedApplicationsDidChange:]
  -[SBRecentAppLayouts _acquireAllowHiddenAppAssertionForBundleIdentifier:reason:]


SBSwitcherSwipeUpGestureFloatingSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier scaleForIndex:]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier frameForIndex:]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier .cxx_destruct]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier contentViewScale]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier handleGestureEvent:]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier initWithGestureID:]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier responseForProposedChildResponse:childModifier:event:]


SBLockedModalAlertItemPresenter : NSObject <SBAlertItemPresenter, SBLockScreenActionProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockedModalAlertItemPresenter lockScreenActionContext]
  -[SBLockedModalAlertItemPresenter presentsAlertItemsModally]
  -[SBLockedModalAlertItemPresenter presentAlertItem:animated:completion:]
  -[SBLockedModalAlertItemPresenter .cxx_destruct]
  -[SBLockedModalAlertItemPresenter canPresentMultipleAlertItemsSimultaneously]
  -[SBLockedModalAlertItemPresenter initWithSharedModalAlertItemPresenter:]
  -[SBLockedModalAlertItemPresenter dismissAlertItem:animated:completion:]


SBCombinationHardwareButtonActions : NSObject
  // instance methods
  -[SBCombinationHardwareButtonActions performTakeScreenshotAction]
  -[SBCombinationHardwareButtonActions performPresentPowerDownTransientOverlayAction]


SBCornerFingerPanGestureRecognizer : SBScreenEdgePanGestureRecognizer
 @property  unsigned long corner

  // instance methods
  -[SBCornerFingerPanGestureRecognizer _shouldBegin]
  -[SBCornerFingerPanGestureRecognizer _touchInterfaceOrientation]
  -[SBCornerFingerPanGestureRecognizer .cxx_destruct]
  -[SBCornerFingerPanGestureRecognizer corner]
  -[SBCornerFingerPanGestureRecognizer touchesBegan:withEvent:]
  -[SBCornerFingerPanGestureRecognizer setState:]
  -[SBCornerFingerPanGestureRecognizer touchesMoved:withEvent:]
  -[SBCornerFingerPanGestureRecognizer reset]
  -[SBCornerFingerPanGestureRecognizer _SBLogTouchesWithMethodName:withMethodName:]
  -[SBCornerFingerPanGestureRecognizer setEdges:]
  -[SBCornerFingerPanGestureRecognizer edges]
  -[SBCornerFingerPanGestureRecognizer touchesEnded:withEvent:]
  -[SBCornerFingerPanGestureRecognizer _convertReferenceLocation:toOrientedLocation:orientedBounds:]
  -[SBCornerFingerPanGestureRecognizer initWithTarget:action:corner:classifier:]
  -[SBCornerFingerPanGestureRecognizer _convertReferenceVector:toCorner:orientation:]


SBCoverSheetPositionView : SBFTouchPassThroughView
 @property  double progress
 @property  UIView *contentView

  // instance methods
  -[SBCoverSheetPositionView positionContentForTouchAtLocation:]
  -[SBCoverSheetPositionView _createContentView]
  -[SBCoverSheetPositionView positionContentForTouchAtLocation:withTransformMode:forPresentationValue:]
  -[SBCoverSheetPositionView .cxx_destruct]
  -[SBCoverSheetPositionView setFrame:]
  -[SBCoverSheetPositionView contentView]
  -[SBCoverSheetPositionView progress]
  -[SBCoverSheetPositionView initWithFrame:]
  -[SBCoverSheetPositionView _progressFromContenViewFrame:]
  -[SBCoverSheetPositionView _progressForTouchLocation:]
  -[SBCoverSheetPositionView _simulatedTouchLocationForProgress]
  -[SBCoverSheetPositionView setProgress:]
  -[SBCoverSheetPositionView _transformForLocation:transformMode:]


SBLockScreenTemperatureWarningViewController : SBLockOverlayViewController
 @property  NSString *slideToUnlockText

  // instance methods
  -[SBLockScreenTemperatureWarningViewController .cxx_destruct]
  -[SBLockScreenTemperatureWarningViewController initWithNibName:bundle:]
  -[SBLockScreenTemperatureWarningViewController loadView]
  -[SBLockScreenTemperatureWarningViewController slideToUnlockText]


SBAppExposeToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBAppExposeToFullScreenSwitcherModifier plusButtonAlpha]
  -[SBAppExposeToFullScreenSwitcherModifier transitionWillBegin]
  -[SBAppExposeToFullScreenSwitcherModifier transitionDidEnd]
  -[SBAppExposeToFullScreenSwitcherModifier scaleForIndex:]
  -[SBAppExposeToFullScreenSwitcherModifier frameForIndex:]
  -[SBAppExposeToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBAppExposeToFullScreenSwitcherModifier .cxx_destruct]
  -[SBAppExposeToFullScreenSwitcherModifier asyncRenderingAttributesForAppLayout:]
  -[SBAppExposeToFullScreenSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBAppExposeToFullScreenSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBAppExposeToFullScreenSwitcherModifier appLayouts]
  -[SBAppExposeToFullScreenSwitcherModifier initWithTransitionID:direction:fullScreenAppLayout:floatingAppLayout:bundleIdentifier:appExposeModifier:fullScreenModifier:]
  -[SBAppExposeToFullScreenSwitcherModifier _isEffectivelyFullScreen]
  -[SBAppExposeToFullScreenSwitcherModifier _isIndexActive:]
  -[SBAppExposeToFullScreenSwitcherModifier _newAppExposeModifier]
  -[SBAppExposeToFullScreenSwitcherModifier _performBlockBySimulatingPreTransitionState:]


SBDirectToAirPlayTestRecipe : NSObject <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDirectToAirPlayTestRecipe load]

  // instance methods
  -[SBDirectToAirPlayTestRecipe .cxx_destruct]
  -[SBDirectToAirPlayTestRecipe title]
  -[SBDirectToAirPlayTestRecipe handleVolumeIncrease]
  -[SBDirectToAirPlayTestRecipe handleVolumeDecrease]
  -[SBDirectToAirPlayTestRecipe _claimForegroundAppIsPlayingVideo]
  -[SBDirectToAirPlayTestRecipe _clearPlayingApp]
  -[SBDirectToAirPlayTestRecipe _anyForegroundApplication]


SBPPTBlockOperation : SBPPTOperation
 @property  @? timeoutBlock
 @property  unsigned long state
 @property  @? block
 @property  double timeoutInterval

  // class methods
  +[SBPPTBlockOperation keyPathsForValuesAffectingIsExecuting]
  +[SBPPTBlockOperation keyPathsForValuesAffectingIsFinished]
  +[SBPPTBlockOperation operationWithBlock:]
  +[SBPPTBlockOperation operationWithName:block:]

  // instance methods
  -[SBPPTBlockOperation isAsynchronous]
  -[SBPPTBlockOperation isFinished]
  -[SBPPTBlockOperation main]
  -[SBPPTBlockOperation .cxx_destruct]
  -[SBPPTBlockOperation timeoutBlock]
  -[SBPPTBlockOperation isExecuting]
  -[SBPPTBlockOperation setState:]
  -[SBPPTBlockOperation init]
  -[SBPPTBlockOperation initWithBlock:]
  -[SBPPTBlockOperation timeoutInterval]
  -[SBPPTBlockOperation state]
  -[SBPPTBlockOperation cancel]
  -[SBPPTBlockOperation setTimeoutBlock:]
  -[SBPPTBlockOperation finish]
  -[SBPPTBlockOperation initWithName:block:]
  -[SBPPTBlockOperation start]
  -[SBPPTBlockOperation block]
  -[SBPPTBlockOperation cancelAndFailTestWithReason:]
  -[SBPPTBlockOperation setTimeoutInterval:]


SBBiometricsService : NSObject <SBSystemServiceServerBiometricsDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBiometricsService sharedInstance]

  // instance methods
  -[SBBiometricsService .cxx_destruct]
  -[SBBiometricsService init]
  -[SBBiometricsService systemServiceServer:client:fetchUnlockCredentialSet:]


SBHomeScreenOverlayViewController : UIViewController <WGWidgetGroupViewControllerDelegate, SBHWidgetSheetViewControllerPresenter, SBHVisibleContentPresenter>
 @property  <SBIconListLayoutProvider> *listLayoutProvider
 @property  MTMaterialView *backgroundView
 @property  SBHRootFolderVisualConfiguration *rootFolderVisualConfiguration
 @property  NSLayoutConstraint *contentLeadingConstraint
 @property  NSLayoutConstraint *contentWidthConstraint
 @property  SBTitledHomeScreenButton *doneButton
 @property  SBTitledHomeScreenButton *widgetButton
 @property  BOOL showsDoneButton
 @property  BOOL showsAddWidgetButton
 @property  SBFTodayGestureSettings *gestureSettings
 @property  UIViewFloatAnimatableProperty *overlayPresentationFloatAnimatableProperty
 @property  BOOL transitioningPresentationProgress
 @property  <SBHomeScreenOverlayViewControllerDelegate> *delegate
 @property  double presentationProgress
 @property  double layerPresentationProgress
 @property  BOOL fromLeading
 @property  double contentWidth
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentRect
 @property  BOOL shouldUseReducedMotionAnimation
 @property  BOOL headerVisible
 @property  SBHRootSidebarController *contentViewController
 @property  UIViewController<SBHVisibleContentPresenter> *leadingSidebarViewController
 @property  UIViewController<SBHVisibleContentPresenter> *trailingSidebarViewController
 @property  BOOL suppressesExtraEditingButtons
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double titledButtonsAlpha
 @property  unsigned long contentVisibility

  // instance methods
  -[SBHomeScreenOverlayViewController _suggestedTodayViewSizeForBounds:]
  -[SBHomeScreenOverlayViewController showsAddWidgetButton]
  -[SBHomeScreenOverlayViewController setLeadingSidebarViewController:]
  -[SBHomeScreenOverlayViewController newHomeScreenButtonBackgroundView]
  -[SBHomeScreenOverlayViewController viewWillLayoutSubviews]
  -[SBHomeScreenOverlayViewController updateExtraButtonVisibilityAnimated:]
  -[SBHomeScreenOverlayViewController rootFolderVisualConfiguration]
  -[SBHomeScreenOverlayViewController setPresentationProgress:interactive:animated:completionHandler:]
  -[SBHomeScreenOverlayViewController .cxx_destruct]
  -[SBHomeScreenOverlayViewController animatePresentationProgress:withGestureLiftOffVelocity:completionHandler:]
  -[SBHomeScreenOverlayViewController setTrailingSidebarViewController:]
  -[SBHomeScreenOverlayViewController leadingSidebarViewController]
  -[SBHomeScreenOverlayViewController presenterType]
  -[SBHomeScreenOverlayViewController layerPresentationProgress]
  -[SBHomeScreenOverlayViewController acquireUseSnapshotAsBackgroundViewAssertionForReason:]
  -[SBHomeScreenOverlayViewController suppressesExtraEditingButtons]
  -[SBHomeScreenOverlayViewController doneButton]
  -[SBHomeScreenOverlayViewController setDelegate:]
  -[SBHomeScreenOverlayViewController viewDidAppear:]
  -[SBHomeScreenOverlayViewController initWithNibName:bundle:]
  -[SBHomeScreenOverlayViewController makeTitledButtonOfClass:]
  -[SBHomeScreenOverlayViewController setShowsDoneButton:]
  -[SBHomeScreenOverlayViewController setSuppressesEditingStateForListView:]
  -[SBHomeScreenOverlayViewController setDoneButton:]
  -[SBHomeScreenOverlayViewController _button:appearAnimated:]
  -[SBHomeScreenOverlayViewController setPresentationProgress:]
  -[SBHomeScreenOverlayViewController contentRect]
  -[SBHomeScreenOverlayViewController isDisplayingEditingButtons]
  -[SBHomeScreenOverlayViewController contentVisibility]
  -[SBHomeScreenOverlayViewController presentationProgress]
  -[SBHomeScreenOverlayViewController _updateConstraintsForPresentationProgress:]
  -[SBHomeScreenOverlayViewController _updateLayoutForEditButtons]
  -[SBHomeScreenOverlayViewController doneButtonTriggered:]
  -[SBHomeScreenOverlayViewController widgetButton]
  -[SBHomeScreenOverlayViewController setShouldUseReducedMotionAnimation:]
  -[SBHomeScreenOverlayViewController bs_endAppearanceTransition]
  -[SBHomeScreenOverlayViewController titledButtonsAlpha]
  -[SBHomeScreenOverlayViewController isHeaderVisible]
  -[SBHomeScreenOverlayViewController childContentVisibility]
  -[SBHomeScreenOverlayViewController contentViewController]
  -[SBHomeScreenOverlayViewController viewWillDisappear:]
  -[SBHomeScreenOverlayViewController contentLeadingConstraint]
  -[SBHomeScreenOverlayViewController contentWidthWithContainerWidth:]
  -[SBHomeScreenOverlayViewController viewDidLayoutSubviews]
  -[SBHomeScreenOverlayViewController initWithListLayoutProvider:]
  -[SBHomeScreenOverlayViewController showsDoneButton]
  -[SBHomeScreenOverlayViewController setSuppressesExtraEditingButtons:]
  -[SBHomeScreenOverlayViewController viewWillAppear:]
  -[SBHomeScreenOverlayViewController currentSidebarViewController]
  -[SBHomeScreenOverlayViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[SBHomeScreenOverlayViewController contentWidthConstraint]
  -[SBHomeScreenOverlayViewController isFromLeading]
  -[SBHomeScreenOverlayViewController setShowsAddWidgetButton:]
  -[SBHomeScreenOverlayViewController isTransitioningPresentationProgress]
  -[SBHomeScreenOverlayViewController setContentLeadingConstraint:]
  -[SBHomeScreenOverlayViewController delegate]
  -[SBHomeScreenOverlayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBHomeScreenOverlayViewController setContentWidthConstraint:]
  -[SBHomeScreenOverlayViewController setWidgetButton:]
  -[SBHomeScreenOverlayViewController _configureMatchMoveAnimationForBackgroundView:withSourceView:]
  -[SBHomeScreenOverlayViewController setFromLeading:]
  -[SBHomeScreenOverlayViewController widgetButtonTriggered:]
  -[SBHomeScreenOverlayViewController _button:disappearAnimated:completion:]
  -[SBHomeScreenOverlayViewController setShowsAddWidgetButton:animated:]
  -[SBHomeScreenOverlayViewController trailingSidebarViewController]
  -[SBHomeScreenOverlayViewController shouldUseReducedMotionAnimation]
  -[SBHomeScreenOverlayViewController gestureSettings]
  -[SBHomeScreenOverlayViewController bs_beginAppearanceTransition:animated:]
  -[SBHomeScreenOverlayViewController overlayPresentationFloatAnimatableProperty]
  -[SBHomeScreenOverlayViewController _updateBackgroundView]
  -[SBHomeScreenOverlayViewController listLayoutProvider]
  -[SBHomeScreenOverlayViewController loadView]
  -[SBHomeScreenOverlayViewController bs_endAppearanceTransition:]
  -[SBHomeScreenOverlayViewController setGestureSettings:]
  -[SBHomeScreenOverlayViewController setOverlayPresentationFloatAnimatableProperty:]
  -[SBHomeScreenOverlayViewController setShowsDoneButton:animated:]
  -[SBHomeScreenOverlayViewController _updateConstraintsForPresentationProgress:layoutIfNeeded:]
  -[SBHomeScreenOverlayViewController contentWidth]
  -[SBHomeScreenOverlayViewController setContentVisibility:]
  -[SBHomeScreenOverlayViewController viewDidDisappear:]
  -[SBHomeScreenOverlayViewController setPresentationProgress:withAnimationUpdateMode:overrideAnimationSettings:completionHandler:]
  -[SBHomeScreenOverlayViewController setTitledButtonsAlpha:]
  -[SBHomeScreenOverlayViewController setTransitioningPresentationProgress:]
  -[SBHomeScreenOverlayViewController backgroundView]
  -[SBHomeScreenOverlayViewController _canShowWhileLocked]
  -[SBHomeScreenOverlayViewController widgetGroupViewController:sizeForInterfaceOrientation:]


SBBiometricAuthenticationPolicy : NSObject <SBUIBiometricAuthenticationPolicy>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBiometricAuthenticationPolicy .cxx_destruct]
  -[SBBiometricAuthenticationPolicy shouldRelockAfterBioUnlock]
  -[SBBiometricAuthenticationPolicy initWithLockOutProvider:]


SBApplicationPlaceholder : SBHProxiedApplicationPlaceholder <FBSApplicationPlaceholderObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationPlaceholder prioritize]
  -[SBApplicationPlaceholder pause]
  -[SBApplicationPlaceholder cancel]
  -[SBApplicationPlaceholder resume]
  -[SBApplicationPlaceholder _reloadThumbnailImage]


SBForcePressToHomeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBForcePressToHomeSwitcherModifier isContainerStatusBarVisible]
  -[SBForcePressToHomeSwitcherModifier homeScreenBackdropBlurType]
  -[SBForcePressToHomeSwitcherModifier isHomeScreenContentRequired]
  -[SBForcePressToHomeSwitcherModifier scaleForIndex:]
  -[SBForcePressToHomeSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBForcePressToHomeSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBForcePressToHomeSwitcherModifier visibleAppLayouts]
  -[SBForcePressToHomeSwitcherModifier .cxx_destruct]
  -[SBForcePressToHomeSwitcherModifier isSwitcherWindowVisible]
  -[SBForcePressToHomeSwitcherModifier _switcherCardScale]
  -[SBForcePressToHomeSwitcherModifier wallpaperStyle]
  -[SBForcePressToHomeSwitcherModifier cornerRadiiForIndex:]
  -[SBForcePressToHomeSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBForcePressToHomeSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBForcePressToHomeSwitcherModifier opacityForLayoutRole:inAppLayout:atIndex:]
  -[SBForcePressToHomeSwitcherModifier initWithTransitionID:selectedAppLayout:effectiveStartingEnvironmentMode:initialPanThreshold:multitaskingModifier:]


SBDataRecoveryController : NSObject
 @property  BOOL dataRecoveryRequired

  // instance methods
  -[SBDataRecoveryController .cxx_destruct]
  -[SBDataRecoveryController init]
  -[SBDataRecoveryController dataRecoveryRequired]
  -[SBDataRecoveryController performDataRecovery]
  -[SBDataRecoveryController initWithMobileKeyBag:]


SBApplicationPlaceholderController : NSObject <SBLeafIconObserver, SBApplicationPlaceholderLifecycleObserver, SBHProxiedApplicationPlaceholderDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationPlaceholderController sharedInstance]

  // instance methods
  -[SBApplicationPlaceholderController isUsingNetwork]
  -[SBApplicationPlaceholderController placeholderForDisplayID:]
  -[SBApplicationPlaceholderController applicationPlaceholdersInstalled:]
  -[SBApplicationPlaceholderController placeholderShouldAllowPausing:]
  -[SBApplicationPlaceholderController .cxx_destruct]
  -[SBApplicationPlaceholderController _finishPlaceholder:]
  -[SBApplicationPlaceholderController applicationPlaceholdersAdded:]
  -[SBApplicationPlaceholderController _processPendingProxies]
  -[SBApplicationPlaceholderController applicationPlaceholdersNetworkUsageChanged:]
  -[SBApplicationPlaceholderController iconAccessoriesDidUpdate:]
  -[SBApplicationPlaceholderController init]
  -[SBApplicationPlaceholderController _removePlaceholders:forInstall:]
  -[SBApplicationPlaceholderController placeholdersByDisplayID]
  -[SBApplicationPlaceholderController dealloc]
  -[SBApplicationPlaceholderController placeholderWantsUninstall:]
  -[SBApplicationPlaceholderController placeholderRepresentsNewAppInstallFromStore:]
  -[SBApplicationPlaceholderController hasDownloadedStoreApplication]
  -[SBApplicationPlaceholderController _postPlaceholdersDidChangeForAdded:modified:removed:]
  -[SBApplicationPlaceholderController applicationPlaceholdersCancelled:]
  -[SBApplicationPlaceholderController _addPlaceholders:]


SBDelayedPressInfo : NSObject
 @property  long long type
 @property  long long phase
 @property  double timestamp

  // instance methods
  -[SBDelayedPressInfo phase]
  -[SBDelayedPressInfo setType:]
  -[SBDelayedPressInfo setPhase:]
  -[SBDelayedPressInfo type]
  -[SBDelayedPressInfo timestamp]
  -[SBDelayedPressInfo setTimestamp:]


SBPressGestureStateInfo : NSObject
 @property  long long state
 @property  BOOL isCoalescing
 @property  double expirationTime
 @property  long long stateUponExpiration

  // instance methods
  -[SBPressGestureStateInfo expirationTime]
  -[SBPressGestureStateInfo setExpirationTime:]
  -[SBPressGestureStateInfo setState:]
  -[SBPressGestureStateInfo setStateUponExpiration:]
  -[SBPressGestureStateInfo init]
  -[SBPressGestureStateInfo stateUponExpiration]
  -[SBPressGestureStateInfo state]
  -[SBPressGestureStateInfo isCoalescing]
  -[SBPressGestureStateInfo setIsCoalescing:]


SBPressGestureRecognizer : UIGestureRecognizer
 @property  NSArray *pressTypesWithPrecedence

  // instance methods
  -[SBPressGestureRecognizer requiredPressTypesCount]
  -[SBPressGestureRecognizer setWaitForPreemptionTimeInterval:]
  -[SBPressGestureRecognizer name]
  -[SBPressGestureRecognizer gestureStateInfoForUnbalancedPressBeganCount:previousCount:]
  -[SBPressGestureRecognizer pressesChanged:withEvent:]
  -[SBPressGestureRecognizer _applyGestureStateInfo:]
  -[SBPressGestureRecognizer _gestureStateInfoForPressInfo:]
  -[SBPressGestureRecognizer .cxx_destruct]
  -[SBPressGestureRecognizer latestPressType]
  -[SBPressGestureRecognizer initWithTarget:action:]
  -[SBPressGestureRecognizer setAllowedPressTypes:]
  -[SBPressGestureRecognizer _reallyStartDispatchingDelayedPresses]
  -[SBPressGestureRecognizer _processPrecedencePresses:]
  -[SBPressGestureRecognizer _waitGestureStateExpirationWithFireInterval:timerExpiredActionBlock:]
  -[SBPressGestureRecognizer waitForPreemptionTimeInterval]
  -[SBPressGestureRecognizer _resetPublishedPressInfo]
  -[SBPressGestureRecognizer _updatePublicPressInfo:]
  -[SBPressGestureRecognizer _resetDelayedPresses]
  -[SBPressGestureRecognizer reset]
  -[SBPressGestureRecognizer _cancelGesture]
  -[SBPressGestureRecognizer _processDelayablePresses:]
  -[SBPressGestureRecognizer _processPresses:]
  -[SBPressGestureRecognizer latestPressPhase]
  -[SBPressGestureRecognizer latestPressTimestamp]
  -[SBPressGestureRecognizer _addDelayedPress:]
  -[SBPressGestureRecognizer pressesCancelled:withEvent:]
  -[SBPressGestureRecognizer setPressTypesWithPrecedence:]
  -[SBPressGestureRecognizer pressesEnded:withEvent:]
  -[SBPressGestureRecognizer _didGestureBegin]
  -[SBPressGestureRecognizer _resetState]
  -[SBPressGestureRecognizer _delayedPressesCount]
  -[SBPressGestureRecognizer _startDispatchingDelayedPresses]
  -[SBPressGestureRecognizer _isGestureFailedOrCancelled]
  -[SBPressGestureRecognizer pressesBegan:withEvent:]
  -[SBPressGestureRecognizer _isDispatchingDelayedPresses]
  -[SBPressGestureRecognizer _stopWaitingGestureStateExpiration]
  -[SBPressGestureRecognizer _shouldStopDispatching]
  -[SBPressGestureRecognizer _updateUnbalancedPressBeganTypesWithCurrentPressType:andPhase:result:]
  -[SBPressGestureRecognizer _allowedPressTypes]
  -[SBPressGestureRecognizer pressTypesWithPrecedence]


SBHideAppIconAlertItem : SBAlertItem
 @property  SBIcon *icon
 @property  NSString *iconLocation

  // instance methods
  -[SBHideAppIconAlertItem icon]
  -[SBHideAppIconAlertItem .cxx_destruct]
  -[SBHideAppIconAlertItem iconLocation]
  -[SBHideAppIconAlertItem shouldShowInLockScreen]
  -[SBHideAppIconAlertItem dismissOnLock]
  -[SBHideAppIconAlertItem configure:requirePasscodeForActions:]
  -[SBHideAppIconAlertItem forcesModalAlertAppearance]
  -[SBHideAppIconAlertItem didActivate]
  -[SBHideAppIconAlertItem initWithIcon:location:]


SBPPTRunner : NSObject <CCUIPPTHostDelegate, NCNotificationViewControllerObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPPTRunner sharedInstance]
  +[SBPPTRunner _operationToStashPIP]
  +[SBPPTRunner _operationToUnstashStashedPIP]
  +[SBPPTRunner isPageManagementTest:]
  +[SBPPTRunner _operationToRestoreVideoFromPIP]
  +[SBPPTRunner _operationToPutVideoInPIP]
  +[SBPPTRunner isAppLibraryTest:]

  // instance methods
  -[SBPPTRunner assistantWillAppear:]
  -[SBPPTRunner _operationToDismissCoverSheetForTestWithName:]
  -[SBPPTRunner _runSwipeFromDeweyTest]
  -[SBPPTRunner _runAppLibraryTestWithName:options:]
  -[SBPPTRunner _runPiPManualStashTestWithOptions:]
  -[SBPPTRunner prepareForControlCenterPPTHostState:completionHandler:]
  -[SBPPTRunner _operationToPresentCoverSheetForTestWithName:]
  -[SBPPTRunner _runFloatingDockDismissTestWithOptions:]
  -[SBPPTRunner _runNotificationClearLongLookTransitionTestWithOptions:]
  -[SBPPTRunner longLookWillDismissForNotificationViewController:]
  -[SBPPTRunner _runPiPBasicRestoreTestWithOptions:]
  -[SBPPTRunner _runCoverSheetPresentOverSafariTestWithOptions:]
  -[SBPPTRunner _runNotificationBannerTransitionTestWithOptions:]
  -[SBPPTRunner _runPiPAutoStashByEnteringSwitcherTestWithOptions:]
  -[SBPPTRunner _runPullToAppLibrarySearchTest]
  -[SBPPTRunner longLookDidPresentForNotificationViewController:]
  -[SBPPTRunner _runNotificationShortToLongLookTransitionTestWithOptions:]
  -[SBPPTRunner _runSiriTestWithName:options:]
  -[SBPPTRunner longLookWillPresentForNotificationViewController:]
  -[SBPPTRunner _runCoverSheetDismissToSafariTestWithOptions:]
  -[SBPPTRunner _runPIPManualUnstashTestWithOptions:]
  -[SBPPTRunner _runFloatingDockBringupTestWithOptions:]
  -[SBPPTRunner _runAppLibraryPadPresent]
  -[SBPPTRunner _runPiPAutoUnstashAndRestoreByExitingSwitcherBackToAppTestWithOptions:]
  -[SBPPTRunner _runScrollWithinExpandedPodTest]
  -[SBPPTRunner _runSwipeToDeweyTest]
  -[SBPPTRunner _runCoverSheetTestWithName:options:]
  -[SBPPTRunner _runNotificationReParkLongLookTransitionTestWithOptions:]
  -[SBPPTRunner _runPIPAutoStashByEnteringSwitcherTestWithOptions:]
  -[SBPPTRunner _runPiPManualUnstashTestWithOptions:]
  -[SBPPTRunner _configureParams:forScrollView:]
  -[SBPPTRunner longLookDidDismissForNotificationViewController:]
  -[SBPPTRunner _runCoverSheetDismissTestWithOptions:]
  -[SBPPTRunner _runPIPBasicRestoreTestWithOptions:]
  -[SBPPTRunner _runPIPManualStashTestWithOptions:]
  -[SBPPTRunner _runCoverSheetPresentTestWithOptions:]
  -[SBPPTRunner _runLibrarySearchTest]
  -[SBPPTRunner _runPIPAutoUnstashAndRestoreByExitingSwitcherBackToAppTestWithOptions:]
  -[SBPPTRunner _runScrollDeweyTest]
  -[SBPPTRunner _setCoverSheetPresentationManagerTransitionCallbacksForTestName:operation:]
  -[SBPPTRunner assistantDidAppear:]
  -[SBPPTRunner _runPageManagementPresentTestWithName:options:]
  -[SBPPTRunner _runPageManagementTestWithName:options:]
  -[SBPPTRunner runTestWithName:options:]


FBSApplicationDataStore(SceneStorage)
	// instance methods
	-[FBSApplicationDataStore(SceneStorage) sceneStoreForIdentifier:creatingIfNecessary:]
	-[FBSApplicationDataStore(SceneStorage) removeSceneStoreForIdentifier:]
	-[FBSApplicationDataStore(SceneStorage) _cachedSceneDataStores]
	-[FBSApplicationDataStore(SceneStorage) _fetchPersistedSceneDataStores]
	-[FBSApplicationDataStore(SceneStorage) _createSceneStoreWithIdentifier:data:]
	-[FBSApplicationDataStore(SceneStorage) _modifyPersistentSceneData:identifier:data:]
	-[FBSApplicationDataStore(SceneStorage) _setCachedSceneDataStores:]
	-[FBSApplicationDataStore(SceneStorage) _removeAllPersistentSceneData]
	-[FBSApplicationDataStore(SceneStorage) removeAllSceneDataStores]
	-[FBSApplicationDataStore(SceneStorage) enumerateSceneStoresUsingBlock:]

(SBSceneLayoutStatusBarAssertionProvidingAdditions)
	// instance methods
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToSceneLayoutStatusBarAssertionProviding]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToSceneLayoutMedusaStatusBarAssertionProviding]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToMainDisplaySceneLayoutElementViewControlling]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToMedusaDecoratedDeviceApplicationSceneViewControlling]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToSBApplicationSceneStatusBarDescribing]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToSBApplicationSceneStatusBarDescriberProviding]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) sb_historianDescription]

_UIHyperInteractor(SBAdditions)
	// instance methods
	-[_UIHyperInteractor(SBAdditions) sbpip_isRubberBanding]
	-[_UIHyperInteractor(SBAdditions) sbpip_setInteractive:]
	-[_UIHyperInteractor(SBAdditions) sbpip_isInteractive]

<DEREK BUG Categories!>(SpringBoard)
	// instance methods
	-[<DEREK BUG Categories!>(SpringBoard) _sb_safeAddObject:]
	-[<DEREK BUG Categories!>(SpringBoard) _sb_enqueue:]
	-[<DEREK BUG Categories!>(SpringBoard) _sb_dequeue]
	-[<DEREK BUG Categories!>(SpringBoard) _sb_peek]

UITextField(SpringBoardUserNotification)
	// instance methods
	-[UITextField(SpringBoardUserNotification) sb_setMaxInputLength:]
	-[UITextField(SpringBoardUserNotification) sb_maxInputLength]

UIImage(_SBUserNotificationAlert)
	// instance methods
	-[UIImage(_SBUserNotificationAlert) pixelSize]
	-[UIImage(_SBUserNotificationAlert) isAnimated]
	-[UIImage(_SBUserNotificationAlert) sbs_hasAlpha]
	-[UIImage(_SBUserNotificationAlert) _sbSetAssociatedAssetManager:]
	-[UIImage(_SBUserNotificationAlert) _thumbnailFitToSize:]
	-[UIImage(_SBUserNotificationAlert) _newThumbnailWithJPEG:forMaxPixelDimension:]
	-[UIImage(_SBUserNotificationAlert) _newSource]
	-[UIImage(_SBUserNotificationAlert) _newThumbnailWithImageSource:forMaxPixelDimension:]
	-[UIImage(_SBUserNotificationAlert) sbg_thumbnailFitToSize:]
	-[UIImage(_SBUserNotificationAlert) sbg_squareImage]

NSUbiquitousKeyValueStore(SBKnownKeyFiltering)
	// class methods
	+[NSUbiquitousKeyValueStore(SBKnownKeyFiltering) load]

	// instance methods
	-[NSUbiquitousKeyValueStore(SBKnownKeyFiltering) sb_setObject:forKey:]

FBSExtensionInfo(SpringBoard)
	// instance methods
	-[FBSExtensionInfo(SpringBoard) sb_type]

UIStatusBar(Workaround_76326100)
	// class methods
	+[UIStatusBar(Workaround_76326100) sb_enumerateStatusBarStyleOverridesWithBlock:]

UIWindow(SBFTraitsArbiterExtensions)
	// instance methods
	-[UIWindow(SBFTraitsArbiterExtensions) sb_traitsParticipant]
	-[UIWindow(SBFTraitsArbiterExtensions) sb_setTraitsParticipant:]
	-[UIWindow(SBFTraitsArbiterExtensions) sb_updateInterfaceOrientationFromActiveInterfaceOrientation]
	-[UIWindow(SBFTraitsArbiterExtensions) sb_hostWrapperForUseInOrientation:hostRequester:]
	-[UIWindow(SBFTraitsArbiterExtensions) sb_hostWrapperForUseInWindow:hostRequester:]
	-[UIWindow(SBFTraitsArbiterExtensions) sb_updateInterfaceOrientationFromActiveInterfaceOrientation:]

FBSDisplayIdentity(SpringBoard)
	// instance methods
	-[FBSDisplayIdentity(SpringBoard) currentConfiguration]
	-[FBSDisplayIdentity(SpringBoard) UIScreen]

_UIHyperregionUnion(SBHyperregionDebugging)
	// instance methods
	-[_UIHyperregionUnion(SBHyperregionDebugging) sb_debugView]
	-[_UIHyperregionUnion(SBHyperregionDebugging) sb_debugFrameForView:]

_UIHyperpoint(SBHyperregionDebugging)
	// instance methods
	-[_UIHyperpoint(SBHyperregionDebugging) sb_debugView]
	-[_UIHyperpoint(SBHyperregionDebugging) sb_debugFrame]
	-[_UIHyperpoint(SBHyperregionDebugging) sb_debugSize]

_UIHyperrectangle(SBHyperregionDebugging)
	// instance methods
	-[_UIHyperrectangle(SBHyperregionDebugging) sb_debugView]
	-[_UIHyperrectangle(SBHyperregionDebugging) sb_debugFrame]
	-[_UIHyperrectangle(SBHyperregionDebugging) sb_debugSize]

(SpringBoard)
	// instance methods
	-[(SpringBoard) sb_arrayByInsertingOrMovingObject:toIndex:]
	-[(SpringBoard) sb_arrayByAddingOrMovingObject:]
	-[(SpringBoard) sb_arrayByRemovingObject:]
	-[(SpringBoard) sb_arrayByRemovingObjects:]
	-[(SpringBoard) sb_historianDescription]

UIView(SBClassicLayout)
	// class methods
	+[UIView(SBClassicLayout) SBPIP_animateUsingDefaultTimingWithOptions:animations:completion:]
	+[UIView(SBClassicLayout) SBPIP_performWithoutRetargetingAnimation:]
	+[UIView(SBClassicLayout) sb_firstDescendantOfViews:passingTest:]
	+[UIView(SBClassicLayout) SBPIP_animateUsingDefaultTimingWithAnimations:completion:]

	// instance methods
	-[UIView(SBClassicLayout) setAnchorPoint:]
	-[UIView(SBClassicLayout) anchorPoint]
	-[UIView(SBClassicLayout) sbClassicLayout_applyTransformsForClassicPresentationInReferenceSpaceForInterfaceOrientation:allowStatusBarToOverlap:useDeviceCornerRadius:]
	-[UIView(SBClassicLayout) _sbClassicLayout_applyTransformsForClassicPresentationInReferenceSpace:forInterfaceOrientation:withInheritedScaleFromContainer:applyInheritedScaleToTranslationAndCorners:allowStatusBarToOverlap:useDeviceCornerRadius:]
	-[UIView(SBClassicLayout) sbClassicLayout_applyTransformsForClassicPresentationInLayoutSpaceForInterfaceOrientation:withInheritedScaleFromContainer:applyInheritedScaleToTranslationAndCorners:allowStatusBarToOverlap:useDeviceCornerRadius:]
	-[UIView(SBClassicLayout) sb_firstDescendantPassingTest:]
	-[UIView(SBClassicLayout) sb_firstDescendantOfClass:]
	-[UIView(SBClassicLayout) sb_firstDescendantOfClassNamed:]
	-[UIView(SBClassicLayout) SBPIP_recursivelyDisallowGroupBlending]
	-[UIView(SBClassicLayout) SBPIP_setAllowsEdgeAntialiasing:]
	-[UIView(SBClassicLayout) SBPIP_setAllowsGroupBlending:]
	-[UIView(SBClassicLayout) SBPIP_updateVibrancyEffectForTintColorWithFilter:]
	-[UIView(SBClassicLayout) sb_snapshotImage]
	-[UIView(SBClassicLayout) sb_removeAnimationsIncludingSubviews:predicate:]
	-[UIView(SBClassicLayout) sb_generateSnapshotContentsSynchronously]
	-[UIView(SBClassicLayout) _printLayer:level:]
	-[UIView(SBClassicLayout) sb_hasActiveKeyboardOnScreen]
	-[UIView(SBClassicLayout) sb_printLayerHierarchy]
	-[UIView(SBClassicLayout) sb_removeAllSubviews]
	-[UIView(SBClassicLayout) sb_removeAnimationsForKeys:update:]
	-[UIView(SBClassicLayout) SBPIP_allowsEdgeAntialiasing]
	-[UIView(SBClassicLayout) SBPIP_allowsGroupBlending]
	-[UIView(SBClassicLayout) SBPIP_removeVibrancyEffect]
	-[UIView(SBClassicLayout) _generateSnapshotOnQueue:completionHandler:]

NCNotificationRequest(AlertSuppression)
	// class methods
	+[NCNotificationRequest(AlertSuppression) notificationRequestWithCardItem:]
	+[NCNotificationRequest(AlertSuppression) notificationRequestForLockScreenWithAlertItem:]
	+[NCNotificationRequest(AlertSuppression) notificationRequestForCarPlayWithAlertItem:]
	+[NCNotificationRequest(AlertSuppression) _notificationRequestForDestinations:withAlertItem:identifier:]
	+[NCNotificationRequest(AlertSuppression) _notificationOptionsForAlertController:item:]
	+[NCNotificationRequest(AlertSuppression) _soundTypeForSBSoundType:]
	+[NCNotificationRequest(AlertSuppression) _notificationSoundFromSound:]

	// instance methods
	-[NCNotificationRequest(AlertSuppression) sb_shouldSuppressAlert]

UISDeviceContext(SpringBoard)
	// class methods
	+[UISDeviceContext(SpringBoard) sb_defaultContext]

UISDisplayContext(SpringBoard)
	// class methods
	+[UISDisplayContext(SpringBoard) sb_defaultContext]

UISApplicationInitializationContext(SpringBoard)
	// class methods
	+[UISApplicationInitializationContext(SpringBoard) sb_defaultContext]

UIViewController(UIViewController_SpringBoard)
	// class methods
	+[UIViewController(UIViewController_SpringBoard) sb_firstDescendantOfViewControllers:passingTest:]

	// instance methods
	-[UIViewController(UIViewController_SpringBoard) sb_firstDescendantPassingTest:]
	-[UIViewController(UIViewController_SpringBoard) sb_firstDescendantOfClass:]
	-[UIViewController(UIViewController_SpringBoard) sb_beginAppearanceTransitionIfNecessary:animated:]
	-[UIViewController(UIViewController_SpringBoard) sb_endAppearanceTransitionIfNecessary]
	-[UIViewController(UIViewController_SpringBoard) sb_firstDescendantOfClassNamed:]
	-[UIViewController(UIViewController_SpringBoard) sb_childOrPresentedViewControllerStatusBarSettings]

UIColor(SBWallpaper)
	// class methods
	+[UIColor(SBWallpaper) sb_colorWithRGBHexString:]

	// instance methods
	-[UIColor(SBWallpaper) sb_RGBHexString]
	-[UIColor(SBWallpaper) SBPIP_wantsVibrancyEffect]

SBSceneHandle(SceneViewControlling)
	// instance methods
	-[SBSceneHandle(SceneViewControlling) isEffectivelyForeground]
	-[SBSceneHandle(SceneViewControlling) newSceneViewWithReferenceSize:orientation:hostRequester:]
	-[SBSceneHandle(SceneViewControlling) newScenePlaceholderContentContextWithActivationSettings:]
	-[SBSceneHandle(SceneViewControlling) isDeviceApplicationSceneHandle]
	-[SBSceneHandle(SceneViewControlling) newSceneViewController]

UIActivityContinuationAction(AppSuggestion)
	// instance methods
	-[UIActivityContinuationAction(AppSuggestion) initWithIdentifier:activityTypeIdentifier:appSuggestion:]

ATXHomeScreenStackConfig(SBAdditions)
	// instance methods
	-[ATXHomeScreenStackConfig(SBAdditions) sb_isAppPredictionStack]

XBApplicationSnapshotManifest(Capture)
	// instance methods
	-[XBApplicationSnapshotManifest(Capture) createSnapshotForSceneSnapshot:withName:]

SBHTestAppIconDescriptor(SBAdditions)
	// class methods
	+[SBHTestAppIconDescriptor(SBAdditions) home]
	+[SBHTestAppIconDescriptor(SBAdditions) camera]
	+[SBHTestAppIconDescriptor(SBAdditions) news]
	+[SBHTestAppIconDescriptor(SBAdditions) maps]
	+[SBHTestAppIconDescriptor(SBAdditions) books]
	+[SBHTestAppIconDescriptor(SBAdditions) preferences]
	+[SBHTestAppIconDescriptor(SBAdditions) health]
	+[SBHTestAppIconDescriptor(SBAdditions) findMy]
	+[SBHTestAppIconDescriptor(SBAdditions) watch]
	+[SBHTestAppIconDescriptor(SBAdditions) shortcuts]
	+[SBHTestAppIconDescriptor(SBAdditions) tv]
	+[SBHTestAppIconDescriptor(SBAdditions) documents]
	+[SBHTestAppIconDescriptor(SBAdditions) tips]
	+[SBHTestAppIconDescriptor(SBAdditions) contacts]
	+[SBHTestAppIconDescriptor(SBAdditions) reminders]
	+[SBHTestAppIconDescriptor(SBAdditions) appStore]
	+[SBHTestAppIconDescriptor(SBAdditions) iTunesStore]
	+[SBHTestAppIconDescriptor(SBAdditions) translate]
	+[SBHTestAppIconDescriptor(SBAdditions) passbook]
	+[SBHTestAppIconDescriptor(SBAdditions) facetime]
	+[SBHTestAppIconDescriptor(SBAdditions) podcasts]

SBHTestWidgetIconDescriptor(SBAdditions)
	// class methods
	+[SBHTestWidgetIconDescriptor(SBAdditions) todayNewsWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) overviewStocksWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) calendarWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) remindersWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) tvWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) recentsWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) gasparWatchDogWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) relivePhotosWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) mobileNotesWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) dateTimeWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) notesWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) podcastWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) batteryWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) weatherWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetIconDescriptor(SBAdditions) mapsWidgetIconDescriptorForSizeClass:]

SBHTestWidgetStackIconDescriptor(SBAdditions)
	// class methods
	+[SBHTestWidgetStackIconDescriptor(SBAdditions) defaultStackIconDescriptorForSizeClass:]
	+[SBHTestWidgetStackIconDescriptor(SBAdditions) padDefaultLeadingHomescreenLayoutStackWidgetIconDescriptorForSizeClass:]
	+[SBHTestWidgetStackIconDescriptor(SBAdditions) padDefaultTrailingHomescreenLayoutStackWidgetIconDescriptorForSizeClass:]

SBIconModelMemoryStore(SBIconModelITunesRepresentation)
	// instance methods
	-[SBIconModelMemoryStore(SBIconModelITunesRepresentation) initWithITunesRepresentation:]

NCNotificationAction(Wallet)
	// class methods
	+[NCNotificationAction(Wallet) revealWalletPassNotificationActionForCardItem:]
	+[NCNotificationAction(Wallet) defaultNotificationActionForSBAlertItem:]
	+[NCNotificationAction(Wallet) dismissNotificationActionForSBAlertItem:]

BSTransaction(SBUIAnimationControllerAdditions)
	// instance methods
	-[BSTransaction(SBUIAnimationControllerAdditions) coordinatingAnimationControllers]

FBSSceneTransitionContext(SBLocalTransientSettings)
	// instance methods
	-[FBSSceneTransitionContext(SBLocalTransientSettings) watchdogScaleFactor]
	-[FBSSceneTransitionContext(SBLocalTransientSettings) setWatchdogScaleFactor:]

UISDisplaySingleRectShape(SpringBoard)
	// class methods
	+[UISDisplaySingleRectShape(SpringBoard) sb_thisDeviceDisplayShape]
	+[UISDisplaySingleRectShape(SpringBoard) sb_displayShapeForScreenType:]

UIApplication(SBUIApplicationAdditions)
	// instance methods
	-[UIApplication(SBUIApplicationAdditions) sb_performBlockAfterCATransactionSynchronizedCommit:]

NCNotificationViewController(SBPPTRunnerAdditions)
	// instance methods
	-[NCNotificationViewController(SBPPTRunnerAdditions) setPPTLongLookWillPresentBlock:]
	-[NCNotificationViewController(SBPPTRunnerAdditions) _recapDismissLongLookViaTapOutside]
	-[NCNotificationViewController(SBPPTRunnerAdditions) setPPTLongLookDidPresentBlock:]
	-[NCNotificationViewController(SBPPTRunnerAdditions) setPPTLongLookDidDismissBlock:]
	-[NCNotificationViewController(SBPPTRunnerAdditions) _recapSwipePresentLongLook]
	-[NCNotificationViewController(SBPPTRunnerAdditions) _recapDismissLongLookViaPullDown]
	-[NCNotificationViewController(SBPPTRunnerAdditions) pptLongLookWillPresentBlock]
	-[NCNotificationViewController(SBPPTRunnerAdditions) pptLongLookDidPresentBlock]
	-[NCNotificationViewController(SBPPTRunnerAdditions) pptLongLookWillDismissBlock]
	-[NCNotificationViewController(SBPPTRunnerAdditions) setPPTLongLookWillDismissBlock:]
	-[NCNotificationViewController(SBPPTRunnerAdditions) pptLongLookDidDismissBlock]
	-[NCNotificationViewController(SBPPTRunnerAdditions) _dismissControlOfPresentedLongLook]

UILabel(SpringBoard)
	// instance methods
	-[UILabel(SpringBoard) SBPIP_updateVibrancyEffectForTintColorWithFilter:]
	-[UILabel(SpringBoard) sb_yPositionForLabelWithContainerBounds:lineHeight:baselineOffset:font:]
	-[UILabel(SpringBoard) sb_yPositionForLabelWithContainerBounds:baselineOffset:font:]
	-[UILabel(SpringBoard) sb_yPositionForLayoutAfterLabel:baselineOffset:]
	-[UILabel(SpringBoard) stringMetricsForFirstLineWidth:]
	-[UILabel(SpringBoard) drawWithMetrics:inContext:]
	-[UILabel(SpringBoard) SBPIP_removeVibrancyEffect]

SBFTraitsArbiterAdoptionSettings(AccessorHelpers)
	// instance methods
	-[SBFTraitsArbiterAdoptionSettings(AccessorHelpers) valueForUndefinedKey:]
	-[SBFTraitsArbiterAdoptionSettings(AccessorHelpers) orientationActuationEnabledForRole:]

SBSLockScreenContentAction(SupportedInterfaceOrientations)
	// instance methods
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) applicationSceneEntity]
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) supportedInterfaceOrientations]
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) specifiesSupportedInterfaceOrientations]
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) isInProcessAction]
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) setApplicationSceneEntity:]

BSDescriptionBuilder(SBIdleTimerDescriptor)
	// instance methods
	-[BSDescriptionBuilder(SBIdleTimerDescriptor) sbidletimerdescriptor_appendTimeInterval:withName:]

BluetoothDevice(SpringBoardExtensions)
	// instance methods
	-[BluetoothDevice(SpringBoardExtensions) sb_siriBluetoothDeviceSource]
	-[BluetoothDevice(SpringBoardExtensions) sb_setSiriBluetoothDeviceSource:]

SBHFloatingDockStyleConfiguration(SBAppAdditions)
	// class methods
	+[SBHFloatingDockStyleConfiguration(SBAppAdditions) configurationWithEnvironmentMode:]

CCUIContinuousSliderView(SBElasticSliderInternalAdditions)
	// instance methods
	-[CCUIContinuousSliderView(SBElasticSliderInternalAdditions) stopGlyphAnimations]
	-[CCUIContinuousSliderView(SBElasticSliderInternalAdditions) _elasticGlyphCenterForDefaultGlyphCenter:]
	-[CCUIContinuousSliderView(SBElasticSliderInternalAdditions) _updateGlyphScaleForAdditiveScaleOrAxisUpdate]
	-[CCUIContinuousSliderView(SBElasticSliderInternalAdditions) _createElasticBackgroundView]

FBProcess(SBHelpers)
	// instance methods
	-[FBProcess(SBHelpers) sb_bundleIdentifierWithFallback]
	-[FBProcess(SBHelpers) sb_isProbablyUIApplication]

FBExtensionProcess(SBHelpers)
	// instance methods
	-[FBExtensionProcess(SBHelpers) sb_bundleIdentifierWithFallback]

BCBatteryDeviceController(SpringBoard)
	// instance methods
	-[BCBatteryDeviceController(SpringBoard) sb_deviceInternalBattery]

CMPocketStateManager(SpringBoard)
	// class methods
	+[CMPocketStateManager(SpringBoard) _sb_isScreenObscuredInPocketState:]

SBHLibraryMutableCategoryMap(ProactiveSourceAdditions)
	// instance methods
	-[SBHLibraryMutableCategoryMap(ProactiveSourceAdditions) sb_categoryIdentifierForAppDirectoryCategoryID:]
	-[SBHLibraryMutableCategoryMap(ProactiveSourceAdditions) sb_hasAppsPopulatedForCategoriesOtherThanProactive]
	-[SBHLibraryMutableCategoryMap(ProactiveSourceAdditions) sb_stripCategoriesThatArentFromProactive]
	-[SBHLibraryMutableCategoryMap(ProactiveSourceAdditions) sb_removeCategoryWithIdentifier:]

UIStatusBar_Base(Snapshots)
	// instance methods
	-[UIStatusBar_Base(Snapshots) sb_setOverrideBreadcrumbTitle:secondaryTitle:]
	-[UIStatusBar_Base(Snapshots) sb_setEnabledStatusBarPartIdentifiersForStatusBarParts:]
	-[UIStatusBar_Base(Snapshots) sb_setSnapshotOverridesWithTimeEnabled:overriddenDate:]
	-[UIStatusBar_Base(Snapshots) sb_getLocalDataOverrides:]
	-[UIStatusBar_Base(Snapshots) sb_setLocalDataOverrides:]

UIStatusBar_Modern(StatusBarOverrides)
	// instance methods
	-[UIStatusBar_Modern(StatusBarOverrides) sb_setOverrideBreadcrumbTitle:secondaryTitle:]

UISApplicationSupportDisplayEdgeInfo(SpringBoard)
	// class methods
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_thisDeviceDisplayEdgeInfo]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_displayEdgeInfoForApplication:]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_insetForHomeAffordanceApplicationDisplayEdgeInfo]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_floatingApplicationDisplayEdgeInfo]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_legacy_homeButtonDeviceDisplayEdgeInfo]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_legacy_roundCornerPadDisplayEdgeInfo]

	// instance methods
	-[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_displayEdgeInfoWithSafeAreaInsetsForStatusBarHeight:]
	-[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_applyDisplayEdgeInfoToSceneSettings:]
	-[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_orientedEdgeInsetsForInterfaceOrientation:traitCollection:]

UIGestureRecognizer(UIGestureRecognizer_SpringBoard)
	// instance methods
	-[UIGestureRecognizer(UIGestureRecognizer_SpringBoard) sb_stringForState]
	-[UIGestureRecognizer(UIGestureRecognizer_SpringBoard) sb_briefDescription]

BCBatteryDevice(SpringBoard)
	// class methods
	+[BCBatteryDevice(SpringBoard) localizedBatteryDetailTextForBatteryLevel:]

	// instance methods
	-[BCBatteryDevice(SpringBoard) sb_supportsDetailedBatteryMetrics]

UIButton(SBPIPVibrancyEffects)
	// instance methods
	-[UIButton(SBPIPVibrancyEffects) SBPIP_updateVibrancyEffectForTintColorWithFilter:]
	-[UIButton(SBPIPVibrancyEffects) SBPIP_removeVibrancyEffect]

CSCoverSheetViewController(SpringBoardGlue)
	// instance methods
	-[CSCoverSheetViewController(SpringBoardGlue) conformsToSBCoverSheetSlidingViewControllerContentViewController]

SBSRemoteAlertDefinition(SBAdditions)
	// class methods
	+[SBSRemoteAlertDefinition(SBAdditions) definitionWithServiceName:legacyAlertOptions:]

FBDisplayManager(SpringBoard)
	// class methods
	+[FBDisplayManager(SpringBoard) sb_secureMainConfiguration]
	+[FBDisplayManager(SpringBoard) sb_secureMainIdentity]

UIScreen(SBSnapshotExtensions)
	// instance methods
	-[UIScreen(SBSnapshotExtensions) sb_snapshotViewImmediatelyFramedForPortrait]

(SBFloatingDockSuggestions)
	// instance methods
	-[(SBFloatingDockSuggestions) sb_indexOfFloatingDockSuggestionDisplayItem:]
	-[(SBFloatingDockSuggestions) sb_containsFloatingDockSuggestionDisplayItem:]

(SBHistorianDescription)
	// instance methods
	-[(SBHistorianDescription) sb_historianDescription]

(SBHistorianDescription)
	// instance methods
	-[(SBHistorianDescription) sb_historianDescription]

SBFFluidBehaviorSettings(SBHistorianDescription)
	// instance methods
	-[SBFFluidBehaviorSettings(SBHistorianDescription) sb_historianDescription]

SBFMappedImageCache(SBMappedImageCacheAdditions)
	// class methods
	+[SBFMappedImageCache(SBMappedImageCacheAdditions) sessionCache]

FBSSceneSettings(SBApplicationSceneHandle)
	// instance methods
	-[FBSSceneSettings(SBApplicationSceneHandle) sb_isEligbleForDeviceOrientationUpdates]

UIApplicationSceneSettings(SBApplicationSceneHandle)
	// instance methods
	-[UIApplicationSceneSettings(SBApplicationSceneHandle) sb_isEligbleForDeviceOrientationUpdates]

UIMutableApplicationSceneSettings(SBApplicationSceneHandle)
	// instance methods
	-[UIMutableApplicationSceneSettings(SBApplicationSceneHandle) sb_isEligbleForDeviceOrientationUpdates]

FBSSceneClientSettings(SBApplicationSceneHandle)
	// instance methods
	-[FBSSceneClientSettings(SBApplicationSceneHandle) sb_effectiveInterfaceOrientation]

UIApplicationSceneClientSettings(SBApplicationSceneHandle)
	// instance methods
	-[UIApplicationSceneClientSettings(SBApplicationSceneHandle) sb_effectiveInterfaceOrientation]

UIMutableApplicationSceneClientSettings(SBApplicationSceneHandle)
	// instance methods
	-[UIMutableApplicationSceneClientSettings(SBApplicationSceneHandle) sb_effectiveInterfaceOrientation]

01 00 9400 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountStore 
01 00 2000 /System/Library/PrivateFrameworks/CoreAccessories.framework/CoreAccessories: ACCConnectionInfo 
01 00 1140 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriAnnouncementRequestCapabilityManager 
01 00 1140 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriUserNotificationRequest 
01 00 1140 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFUserNotificationAnnouncementSpeakingStateObserver 
01 00 b100 /System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation: AITransactionLog 
01 00 3900 /System/Library/PrivateFrameworks/AppPredictionUIWidget.framework/AppPredictionUIWidget: APUIAppPredictionViewController 
01 00 3900 /System/Library/PrivateFrameworks/AppPredictionUIWidget.framework/AppPredictionUIWidget: APUISuggestionsWidgetViewController 
01 00 4500 /System/Library/PrivateFrameworks/AppStoreDaemon.framework/AppStoreDaemon: ASDRepairOptions 
01 00 4500 /System/Library/PrivateFrameworks/AppStoreDaemon.framework/AppStoreDaemon: ASDRepairService 
01 00 4500 /System/Library/PrivateFrameworks/AppStoreDaemon.framework/AppStoreDaemon: ASDStoreKitExternalNotificationSheet 
01 00 0200 /System/Library/PrivateFrameworks/AirTraffic.framework/AirTraffic: ATConnection 
01 00 4b00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXAppDirectoryClient 
01 00 4b00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXDefaultHomeScreenItemManager 
01 00 4b00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXDefaultWidgetStack 
01 00 4b00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXDefaultWidgetSuggesterClient 
01 00 4b00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXHomeScreenPage 
01 00 4b00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXHomeScreenStackConfig 
01 00 4b00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXHomeScreenSuggestionClient 
01 00 4b00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXHomeScreenWidgetIdentifiable 
01 00 cd40 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioPlayer 
01 00 9140 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVExternalPlaybackMonitor 
01 00 9140 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVOutputContext 
01 00 9140 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVRoutingSessionManager 
01 00 aa00 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 5d00 /System/Library/PrivateFrameworks/AttentionAwareness.framework/AttentionAwareness: AWAttentionAwarenessClient 
01 00 5d00 /System/Library/PrivateFrameworks/AttentionAwareness.framework/AttentionAwareness: AWAttentionAwarenessConfiguration 
01 00 6300 /System/Library/PrivateFrameworks/WirelessDiagnostics.framework/WirelessDiagnostics: AWDServerConnection 
01 00 d000 /usr/lib/libAWDSupportFramework.dylib: AWDSpringBoardAppBrightness 
01 00 d000 /usr/lib/libAWDSupportFramework.dylib: AWDSpringBoardBiometricUnlock 
01 00 d000 /usr/lib/libAWDSupportFramework.dylib: AWDSpringBoardClawGesture 
01 00 d000 /usr/lib/libAWDSupportFramework.dylib: AWDSpringBoardPressSequence 
01 00 d000 /usr/lib/libAWDSupportFramework.dylib: AWDTuple 
01 00 b500 /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard: BBBulletinRequest 
01 00 b500 /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard: BBObserver 
01 00 b500 /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard: BBSectionInfo 
01 00 8500 /System/Library/PrivateFrameworks/BatteryCenter.framework/BatteryCenter: BCBatteryDevice 
01 00 8500 /System/Library/PrivateFrameworks/BatteryCenter.framework/BatteryCenter: BCBatteryDeviceController 
01 00 3100 /System/Library/PrivateFrameworks/BatteryCenterUI.framework/BatteryCenterUI: BCUIBatteryAvocadoViewController 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSButtonHapticsController 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSButtonHapticsDefinition 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSDisplayProgressIndicatorProperties 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSDisplayRenderOverlay 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSDisplayRenderOverlayDescriptor 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDeferringEnvironment 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDeferringToken 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDeliveryManager 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDescriptor 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDiscreteDispatchingRule 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDispatchingTarget 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDisplay 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventKeyCommandsDispatchingRule 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventKeyboardDescriptor 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventSenderDescriptor 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHitTestRegion 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSInsecureDrawingAction 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSMousePointerService 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSMutableHIDEventDeferringPredicate 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSMutableHIDEventDeferringTarget 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSMutableHIDEventDiscreteDispatchingPredicate 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSMutableHIDEventKeyCommandsDispatchingPredicate 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSProcessAssertion 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSRestartAction 
01 00 7900 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSTouchDeliveryObservationService 
01 00 2400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMBiomeScheduler 
01 00 2400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMDiscoverabilitySignalEvent 
01 00 2400 /System/Library/PrivateFrameworks/BiomeStreams.framework/BiomeStreams: BMStreams 
01 00 3c00 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerController 
01 00 3c00 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerHostMonitorListener 
01 00 3c00 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerSource 
01 00 3c00 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerSourceLayoutDescription 
01 00 3c00 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerSourceListener 
01 00 3c00 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerSourceListenerPresentableViewController 
01 00 3c00 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNContentViewController 
01 00 3c00 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNPresentableIdentification 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAbsoluteMachTimer 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAbstractDefaultDomain 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAction 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSActionResponder 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSActionResponse 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAnimationSettings 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAtomicSignal 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAuditToken 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSBlockSentinel 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSBlockTransaction 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSCFBundle 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSCompoundAssertion 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSCopyingCacheSet 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSCornerRadiusConfiguration 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDateFormatterCache 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDateTimeCache 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDescriptionBuilder 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDescriptionStream 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDispatchQueueAttributes 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSEqualsBuilder 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSEventQueue 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSEventQueueEvent 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSEventQueueLock 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSHashBuilder 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSMachPortSendRight 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSMonotonicReferenceTime 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSMutableIntegerMap 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSMutableSettings 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPathProviderFactory 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPlatform 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPluginManager 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPortDeathSentinel 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPowerMonitor 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSProcessDeathWatcher 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSProcessHandle 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSServiceConnection 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSServiceConnectionListener 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSServiceQuality 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSSettings 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSSimpleAssertion 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSSpringAnimationSettings 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSTimer 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSTransaction 
01 00 8000 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIAnimationFactory 
01 00 8000 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUICAPackageView 
01 00 8000 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIEmojiLabelView 
01 00 8000 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIFontProvider 
01 00 8000 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIScrollView 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSWatchdog 
01 00 0700 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothDevice 
01 00 0700 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothManager 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAAnimation 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABackdropLayer 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CACloningTerminatorLayer 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAContext 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplay 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayModeCriteria 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayProperties 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADistanceFieldLayer 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAFilter 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAKeyframeAnimation 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMatchMoveAnimation 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMatchPropertyAnimation 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMediaTimingFunction 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAPortalLayer 
01 00 8300 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CARAutomaticDNDStatus 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAReplicatorLayer 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAShapeLayer 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CASpringAnimation 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransition 
01 00 ad00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAValueFunction 
01 00 6a00 /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness: CBAdaptationClient 
01 00 6a00 /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness: CBBlueLightClient 
01 00 2600 /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth: CBCentralManager 
01 00 6a00 /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness: CBClient 
01 00 5800 /System/Library/PrivateFrameworks/ControlCenterServices.framework/ControlCenterServices: CCSModulePresentationOptions 
01 00 5800 /System/Library/PrivateFrameworks/ControlCenterServices.framework/ControlCenterServices: CCSRemoteServiceProvider 
01 00 6e00 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUICAPackageDescription 
01 00 6e00 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUIContinuousSliderView 
01 00 6d00 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUIControlCenterDefaults 
01 00 6d00 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUIModularControlCenterOverlayViewController 
01 00 6d00 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUIModuleAlertViewController 
01 00 6e00 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUISensorActivityData 
01 00 6d00 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUISensorActivityDataProvider 
01 00 6d00 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUIStatusBarStyleSnapshot 
01 00 3a00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSApplicationProcessStateChangeConsumer 
01 00 3a00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSAvocadoDescriptorProvider 
01 00 3a00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSConfiguredWidgetContainerDescriptor 
01 00 3a00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSConfiguredWidgetDescriptor 
01 00 3a00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSMutableWidgetMetricsSpecification 
01 00 3a00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSToolSupportService 
01 00 3a00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSWidget 
01 00 3a00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSWidgetConfiguration 
01 00 3a00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSWidgetHost 
01 00 ca00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMDeviceOrientationManager 
01 00 ca00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMGestureManager 
01 00 ca00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMMotionAlarmManager 
01 00 ca00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMPocketStateManager 
01 00 ca00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMWakeGestureManager 
01 00 7b00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContact 
01 00 7b00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactFormatter 
01 00 7b00 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactStore 
01 00 7d00 /System/Library/Frameworks/ContactsUI.framework/ContactsUI: CNMonogrammer 
01 00 1f00 /System/Library/PrivateFrameworks/CPMS.framework/CPMS: CPMSAgent 
01 00 1f00 /System/Library/PrivateFrameworks/CPMS.framework/CPMS: CPMSStateReader 
01 00 3b00 /System/Library/PrivateFrameworks/ClipUIServices.framework/ClipUIServices: CPSClipOverlayViewController 
01 00 8300 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CRCarPlayAppDeclaration 
01 00 8300 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CRCarPlayAppPolicyEvaluator 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSAction 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSAppearance 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSBatteryChargingView 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSBehavior 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSComponent 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSContentCutoutBoundsCalculator 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSCoverSheetViewBase 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSCoverSheetViewController 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSCoverSheetViewControllerBase 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSEvent 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSHomeAffordanceView 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSLockScreenDomain 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSMagSafeAccessory 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSMainPageContentViewController 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSModalView 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSPageControl 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSPageViewController 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSPoseidonViewController 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSPreciseDateProvider 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSQuickActionsViewController 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSRegion 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSSimpleLockScreenActionProvider 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSTodayPageViewController 
01 00 4c00 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSVibrancyUtility 
01 00 a400 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CoreTelephonyClient 
01 00 b700 /System/Library/PrivateFrameworks/DataAccessExpress.framework/DataAccessExpress: DADConnection 
01 00 4800 /System/Library/PrivateFrameworks/EmbeddedDataReset.framework/EmbeddedDataReset: DDRResetOptions 
01 00 4800 /System/Library/PrivateFrameworks/EmbeddedDataReset.framework/EmbeddedDataReset: DDRResetRequest 
01 00 4800 /System/Library/PrivateFrameworks/EmbeddedDataReset.framework/EmbeddedDataReset: DDRResetService 
01 00 4000 /System/Library/PrivateFrameworks/DeviceManagement.framework/DeviceManagement: DMFCommunicationPolicyMonitor 
01 00 5200 /System/Library/PrivateFrameworks/DoNotDisturbKit.framework/DoNotDisturbKit: DNDAWDMetricsService 
01 00 5100 /System/Library/PrivateFrameworks/DoNotDisturb.framework/DoNotDisturb: DNDEventBehaviorResolutionService 
01 00 5100 /System/Library/PrivateFrameworks/DoNotDisturb.framework/DoNotDisturb: DNDModeConfigurationService 
01 00 5200 /System/Library/PrivateFrameworks/DoNotDisturbKit.framework/DoNotDisturbKit: DNDNotificationsService 
01 00 5100 /System/Library/PrivateFrameworks/DoNotDisturb.framework/DoNotDisturb: DNDStateService 
01 00 5200 /System/Library/PrivateFrameworks/DoNotDisturbKit.framework/DoNotDisturbKit: DNDToggleManager 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBApplicationProcess 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBApplicationProcessLaunchTransaction 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBApplicationProcessWatchdogPolicy 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBApplicationUpdateScenesTransaction 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBDisplayLayoutElement 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBDisplayLayoutTransition 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBDisplayManager 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBExtensionProcess 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBLocalSynchronousSceneClientProvider 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBMainDisplayLayoutPublisher 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBMutableProcessExecutionContext 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBProcess 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBProcessManager 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationDataStore 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationInfo 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationLibrary 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationLibraryConfiguration 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationPlaceholder 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationUninstallOptions 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSCAContextSceneLayer 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayConfiguration 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayIdentity 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayLayoutMonitor 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayLayoutMonitorConfiguration 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayLayoutPublisher 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayLayoutPublisherConfiguration 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSExtensionInfo 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSMutableDisplayConfigurationRequest 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSMutableSceneDefinition 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSMutableSceneParameters 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSMutableSceneSettings 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSOpenApplicationService 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSProcessResourceProvision 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSProcessWatchdogPolicy 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneClientIdentity 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneClientSettings 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneClientSettingsDiffInspector 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneIdentity 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSettings 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSnapshotContext 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSnapshotRequest 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSnapshotRequestAction 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSpecification 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneTransitionContext 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSerialQueue 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSServiceFacility 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSystemService 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSXPCMessage 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSceneManager 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSceneSnapshotAction 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSceneSnapshotContext 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBServiceClientAuthenticator 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSynchronizedTransactionGroup 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSystemService 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSystemShell 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBUpdateSceneTransaction 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBWorkspaceEvent 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBWorkspaceEventQueue 
01 00 8d00 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBWorkspaceEventQueueLock 
01 00 2b00 /System/Library/PrivateFrameworks/FocusUI.framework/FocusUI: FCUIBannerManager 
01 00 8c00 /System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice: FMDFMIPManager 
01 00 c900 /System/Library/PrivateFrameworks/FTClientServices.framework/FTClientServices: FTCServiceAvailabilityCenter 
01 00 9200 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCountryConfiguration 
01 00 4600 /System/Library/PrivateFrameworks/IconServices.framework/IconServices: IFImage 
01 00 3300 /System/Library/Frameworks/Intents.framework/Intents: INIntent 
01 00 5400 /System/Library/Frameworks/IOSurface.framework/IOSurface: IOSurface 
01 00 4600 /System/Library/PrivateFrameworks/IconServices.framework/IconServices: ISIcon 
01 00 4600 /System/Library/PrivateFrameworks/IconServices.framework/IconServices: ISImageDescriptor 
01 00 3d00 /System/Library/PrivateFrameworks/IdleTimerHosting.framework/IdleTimerHosting: ITAttentionAwareIdleTimer 
01 00 3d00 /System/Library/PrivateFrameworks/IdleTimerHosting.framework/IdleTimerHosting: ITIdleTimeout 
01 00 3d00 /System/Library/PrivateFrameworks/IdleTimerHosting.framework/IdleTimerHosting: ITIdleTimerDescriptor 
01 00 5000 /System/Library/PrivateFrameworks/IdleTimerServices.framework/IdleTimerServices: ITIdleTimerState 
01 00 5000 /System/Library/PrivateFrameworks/IdleTimerServices.framework/IdleTimerServices: ITIdleTimerStateService 
01 00 8900 /System/Library/PrivateFrameworks/IntlPreferences.framework/IntlPreferences: IntlUtility 
01 00 6a00 /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness: KeyboardBrightnessClient 
01 00 5a00 /System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication: LAContext 
01 00 b000 /System/Library/PrivateFrameworks/LoginKit.framework/LoginKit: LKLogoutSupport 
01 00 b000 /System/Library/PrivateFrameworks/LoginKit.framework/LoginKit: LKStartupSupport 
01 00 b900 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSAppLink 
01 00 b900 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationExtensionRecord 
01 00 b900 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 b900 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 b900 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 b900 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSDocumentProxy 
01 00 b900 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSPlugInKitProxy 
01 00 af00 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 b600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingController 
01 00 b600 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaControlsStatusBarStyleOverridesCoordinator 
01 00 3e00 /System/Library/PrivateFrameworks/MediaControls.framework/MediaControls: MRUVolumeHUDRouteDescriptionProvider 
01 00 1e00 /System/Library/PrivateFrameworks/MobileStoreDemoKit.framework/MobileStoreDemoKit: MSDKManagedDevice 
01 00 9b00 /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer: MTAlarm 
01 00 9b00 /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer: MTAlarmManager 
01 00 5e00 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTLumaDodgePillSettings 
01 00 5e00 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTLumaDodgePillView 
01 00 5e00 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTMaterialShadowView 
01 00 5e00 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTMaterialView 
01 00 5e00 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTVisualStylingProvider 
01 00 3e00 /System/Library/PrivateFrameworks/MediaControls.framework/MediaControls: MediaControlsVolumeSliderView 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCBulletinNotificationSource 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCCarPlayBannerPresentableViewController 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCCarPlayBannerSource 
01 00 7200 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationAction 
01 00 7200 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationContent 
01 00 7200 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationOptions 
01 00 7200 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationRequest 
01 00 7200 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationSound 
01 00 7200 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCNotificationAction 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationBannerAuthority 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationBannerEventTracker 
01 00 7200 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCNotificationDispatcher 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationManagementLongLookContentProvider 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationManagementViewPresenter 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationPresentableViewController 
01 00 7200 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCNotificationRequest 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationRequestHiddenPreviewContentProvider 
01 00 7500 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationViewController 
01 00 2a00 /System/Library/PrivateFrameworks/NotesPreviewKit.framework/NotesPreviewKit: NPNotePreviewProvider 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSCondition 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtension 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtensionItem 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSISO8601DateFormatter 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInvocation 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSItemProvider 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMachPort 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: NSMutableParagraphStyle 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 cc00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerFunctions 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSRecursiveLock 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 2300 /System/Library/PrivateFrameworks/NewsServicesInternal.framework/NewsServicesInternal: NSSNewsTodayWidgetPlacementPolicyProvider 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSUbiquitousKeyValueStore 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSUserActivity 
01 00 ce00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 a200 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 6700 /System/Library/Frameworks/Network.framework/Network: NWSystemPathMonitor 
01 00 4700 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 4700 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBDataReader 
01 00 4700 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBDataWriter 
01 00 bb00 /System/Library/PrivateFrameworks/PersistentConnection.framework/PersistentConnection: PCPersistentInterfaceManager 
01 00 bb00 /System/Library/PrivateFrameworks/PersistentConnection.framework/PersistentConnection: PCPersistentTimer 
01 00 6100 /System/Library/PrivateFrameworks/ProactiveEventTracker.framework/ProactiveEventTracker: PETDistributionEventTracker 
01 00 6100 /System/Library/PrivateFrameworks/ProactiveEventTracker.framework/ProactiveEventTracker: PETEventProperty 
01 00 6100 /System/Library/PrivateFrameworks/ProactiveEventTracker.framework/ProactiveEventTracker: PETGoalConversionEventTracker 
01 00 6100 /System/Library/PrivateFrameworks/ProactiveEventTracker.framework/ProactiveEventTracker: PETScalarEventTracker 
01 00 8400 /System/Library/PrivateFrameworks/Pegasus.framework/Pegasus: PGPictureInPictureController 
01 00 8400 /System/Library/PrivateFrameworks/Pegasus.framework/Pegasus: PGPictureInPictureViewController 
01 00 7100 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKPassLibrary 
01 00 7000 /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI: PKPassSnapshotter 
01 00 5300 /System/Library/PrivateFrameworks/PlatterKit.framework/PlatterKit: PLPillContentItem 
01 00 5300 /System/Library/PrivateFrameworks/PlatterKit.framework/PlatterKit: PLPillView 
01 00 5300 /System/Library/PrivateFrameworks/PlatterKit.framework/PlatterKit: PLPlatterView 
01 00 ba00 /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary: PLiPhotoMigrationSupport 
01 00 3000 /System/Library/PrivateFrameworks/PointerUIServices.framework/PointerUIServices: PSPointerClientController 
01 00 a600 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSSpecifier 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTButtonRow 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTChoiceRow 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDefaults 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDomain 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDoubleTestRecipe 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDrillDownRow 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTEditFloatRow 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTEditStringRow 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTModule 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTRestoreDefaultSettingsRowAction 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSSliderRow 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSettings 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSingleTestRecipe 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSliderRow 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSwitchRow 
01 00 9840 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTToggleTestRecipe 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSAcquisitionCompletionAttribute 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSAssertion 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSCPUAccessGrant 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSDefineRelativeStartTimeGrant 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSDurationAttribute 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSGPUAccessGrant 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSJetsamPriorityGrant 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSPreventIdleSleepGrant 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessHandle 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessIdentifier 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessIdentity 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessMonitor 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessPredicate 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessStateDescriptor 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSResistTerminationGrant 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSRunningReasonAttribute 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSTarget 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSTerminateContext 
01 00 4e00 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSTerminateRequest 
01 00 2d00 /System/Library/PrivateFrameworks/RecapPerformanceTesting.framework/RecapPerformanceTesting: RPTScrollViewTestParameters 
01 00 2d00 /System/Library/PrivateFrameworks/RecapPerformanceTesting.framework/RecapPerformanceTesting: RPTTestRunner 
01 00 4f00 /System/Library/PrivateFrameworks/RemoteStateDumpKit.framework/RemoteStateDumpKit: RSPeerToPeerServerController 
01 00 4f00 /System/Library/PrivateFrameworks/RemoteStateDumpKit.framework/RemoteStateDumpKit: RSStateInfo 
01 00 a900 /System/Library/PrivateFrameworks/AppSupport.framework/AppSupport: RadiosPreferences 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SASPresentationConnectionListener 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SASSignalConnectionListener 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBAbstractDefaults 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBAlertControllerVisualStyle 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBAlertItem 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBC2GroupCompletion 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBCalendarIconImageProvider 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBCenterIconZoomAnimator 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBCrossfadeIconZoomAnimator 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBCrossfadeView 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAnalyticsBackend 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAnalyticsClient 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAnimationSettings 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAnimationUtilities 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAuthenticationAssertionManager 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAuthenticationRequest 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFBackdropLegibilitySettingsProvider 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFBarSwipeBehavior 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFBuildVersion 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFCARenderer 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFCredentialSet 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFDashBoardViewMetrics 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFDateTimeController 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFDeviceLockOutController 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFFeatherBlurView 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFFluidBehaviorSettings 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFFocusIsolationView 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFFrameRateAssertion 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFGradient 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFHomeGrabberDomain 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLegibilityDomain 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLockScreenDateSubtitleView 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLockScreenDateView 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLockScreenMetrics 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLockScreenWakeAnimator 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFMappedImageCache 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFMobileKeyBag 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFMouseButtonDownGestureRecognizer 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFMutableLockScreenActionContext 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFOverridableDateProvider 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFSpringLoadedInteractionBehavior 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFSpringLoadedInteractionEffect 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFStatusBarLegibilityView 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTapToWakeGestureRecognizer 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTapticEngine 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTodayGestureDomain 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTouchPassThroughClippingView 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTouchPassThroughView 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTouchPassThroughViewController 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTouchPassThroughWindow 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTraitsArbiter 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTraitsArbiterAdoptionSettings 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTraitsArbiterAdoptionSettingsDomain 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFUserAuthenticationController 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFUserAuthenticationModelEducationalMode 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFUserAuthenticationResponder 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFView 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWakeAnimationDomain 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperCache 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperConfigurationManager 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperCoreAnalyticsLogger 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperDomain 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperOptions 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWebClipUtilities 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWindow 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFZStackResolver 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFloatingDockIconListView 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFloatingDockViewController 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderBackgroundView 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderController 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderControllerAnimationContext 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderIcon 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderIconZoomAnimator 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderTitleTextField 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHAddWidgetSheetViewController 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHAppPredictionsElement 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHApplicationIcon 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHBatteriesElement 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHBookmark 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHBookmarkIcon 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHCalendarApplicationIcon 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHClockApplicationIconImageView 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHCustomIconElement 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHCustomIconListLayoutProvider 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHDateHeaderViewController 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHDefaultIconListLayoutProvider 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHEditingDoneButton 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHEditingWidgetButton 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHFileWidgetExtensionProvider 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHFilesElement 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHFloatingDockStyleConfiguration 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHFocusMode 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHHomeScreenDomain 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconApplicationShortcutListComposer 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconImageCache 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconManager 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconModel 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconStateArchiver 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconStateBuilder 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconStateUnarchiver 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconViewContextMenuStateController 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryCategoryIdentifier 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryCategoryMapProvider 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryMutableCategoryMap 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryPodFadeAnimator 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryPodIconZoomAnimator 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryViewController 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHProxiedApplicationPlaceholder 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHRootFolderVisualConfiguration 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHRootSidebarController 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHScrollableZoomingIconViewInteraction 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHShortcutsFolderElement 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHShortcutsSingleElement 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHSidebarVisualConfiguration 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHSidebarWidgetBootstrappingAdvisor 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHSiriSuggestionsElement 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHSpecialAvocadoDescriptor 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHTestAppIconDescriptor 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHTestFakeWidgetIconDescriptor 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHTestWidgetIconDescriptor 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHTestWidgetStackIconDescriptor 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHWidget 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHomeScreenIconTransitionAnimator 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIcon 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconBadgeView 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconFadeAnimator 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconImageView 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconListGridLayout 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconListGridLayoutConfiguration 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconListModel 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconListPageControl 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconListView 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconModelMemoryStore 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconModelPropertyListFileStore 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconModelReadOnlyMemoryStore 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconView 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBIdleTimerRequestConfiguration 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBLeafIcon 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBLegacyServices 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBLocalDefaults 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBLockScreenDefaults 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBLockScreenLegibilitySettings 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBLockScreenPluginAppearanceContext 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBLockScreenPluginContext 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBModalWidgetIntroductionHomeScreenPreview 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBMutableLockScreenPluginPresentation 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBOrientationTransformWrapperView 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBOrientationTransformWrapperViewController 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBPIPDefaults 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBReusableViewMap 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBReversibleLayerPropertyAnimator 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBRootFolderController 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBRootFolderControllerConfiguration 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBRootFolderView 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSAccessibilityWindowHostingSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSAppDragLocalContext 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationShortcutContactIcon 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationShortcutCustomImageIcon 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationShortcutItem 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationShortcutServiceFetchResult 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationUserQuitMonitorSessionSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSDisplayLayoutElement 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSExternalDisplayLayoutElement 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSFocusModesHomeScreenSettingsResponse 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSFocusModesHomeScreenSettingsServiceInterfaceSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSFocusModesHomeScreenSnapshot 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSHomeScreenServiceArrayOfNumbers 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSHomeScreenServiceArrayOfStrings 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSHomeScreenServiceSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSInCallPresentationConfiguration 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSInCallPresentationRequest 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSInCallPresentationServiceInterfaceSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSLockScreenContentAction 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSLockScreenRemoteContentAssertion 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSLockScreenServiceSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSMutableUserNotificationButtonDefinition 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSMutableUserNotificationTextFieldDefinition 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRelaunchAction 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertActivationContext 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertConfigurationContext 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertDefinition 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertHandle 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertHandleContext 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertHandleServiceSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteContentDefinition 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSStatusBarStyleOverridesAssertion 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSStatusBarTapContextImpl 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSSwitcherDemoCommandsSessionSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSSystemNotesConnectAction 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSSystemNotesCreateAction 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSSystemNotesPresentationConfiguration 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSSystemNotesPresentationServiceInterfaceSpecification 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIHandleDeviceLockSceneAction 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIHardwareButtonEventSceneAction 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallDestroySceneAction 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallRequestPresentationModeAction 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallSceneClientSettings 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallSceneClientSettingsDiffInspector 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallSceneSettings 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallSceneSpecification 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallShowNoticeForSystemControlsAction 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUILoginUISceneClientSettings 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUILoginUISceneClientSettingsDiffInspector 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUILoginUISceneSpecification 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUISystemNotesSceneSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSUniversalControlInterfaceSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSWebClipServiceSessionSpecification 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSWidgetMetricsServiceInterfaceSpecification 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBSceneHandle 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBSceneHandleBlockObserver 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBSceneView 
01 00 b200 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBScreenTimeTrackingController 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBSearchBackdropView 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBSearchGesture 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBTraitsRoleAFollowsRoleBPolicySpecifier 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUIBackgroundView 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIBannerClientContainerViewController 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIBannerSourceApplicationSceneSpecification 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIBiometricResource 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUICallToActionLabel 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUIChevronView 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUICoronaAnimationController 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIEmergencyCallHostViewController 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUIExpandedNotificationContainerViewProvider 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUILegibilityLabel 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUILegibilityView 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUILockOverlayView 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUILockScreenDisableAssertion 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIPasscodeBiometricResource 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIPasscodeLockViewFactory 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIPowerDownView 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIPresentableHomeAffordanceThresholdAction 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIProudLockIconView 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIRemoteAlertButtonAction 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUISizeObservingView 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUISound 
01 00 b300 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUIViewFloatSpringProperty 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBViewControllerTransitionContext 
01 00 2c00 /System/Library/PrivateFrameworks/SpringBoardWallpaper.framework/SpringBoardWallpaper: SBWWallpaperEffectViewBase 
01 00 2c00 /System/Library/PrivateFrameworks/SpringBoardWallpaper.framework/SpringBoardWallpaper: SBWWallpaperRemoteViewController 
01 00 2c00 /System/Library/PrivateFrameworks/SpringBoardWallpaper.framework/SpringBoardWallpaper: SBWWallpaperViewController 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBWakeLogger 
01 00 9500 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBWallpaperDefaults 
01 00 4d00 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBWidgetIcon 
01 00 1900 /System/Library/PrivateFrameworks/StudyLog.framework/StudyLog: SLGActivatableLogger 
01 00 1900 /System/Library/PrivateFrameworks/StudyLog.framework/StudyLog: SLGLog 
01 00 1900 /System/Library/PrivateFrameworks/StudyLog.framework/StudyLog: SLGNotificationActivatedLogger 
01 00 5c00 /System/Library/PrivateFrameworks/SOS.framework/SOS: SOSManager 
01 00 5c00 /System/Library/PrivateFrameworks/SOS.framework/SOS: SOSUtilities 
01 00 c300 /System/Library/PrivateFrameworks/SPOwner.framework/SPOwner: SPBeaconManager 
01 00 8200 /System/Library/PrivateFrameworks/SpotlightUI.framework/SpotlightUI: SPUIAppService 
01 00 8200 /System/Library/PrivateFrameworks/SpotlightUI.framework/SpotlightUI: SPUIDefaults 
01 00 8200 /System/Library/PrivateFrameworks/SpotlightUI.framework/SpotlightUI: SPUIRemoteSearchViewController 
01 00 8200 /System/Library/PrivateFrameworks/SpotlightUI.framework/SpotlightUI: SPUISearchBarController 
01 00 6200 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSChromePlaceholderViewController 
01 00 0e00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSDownloadManager 
01 00 6200 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSFlashView 
01 00 6200 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSScreenCaptureAbilityCheck 
01 00 6200 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSScreenCapturer 
01 00 6200 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSScreenCapturerPresentationOptions 
01 00 6200 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSScreenCapturerScreenshotOptions 
01 00 6200 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSScreenCapturerScreenshotOptionsCollection 
01 00 0e00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSSoftwareUpdatesRequest 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STBatteryStatusDomain 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STBatteryStatusDomainPublisher 
01 00 3500 /System/Library/PrivateFrameworks/ScreenTimeUI.framework/ScreenTimeUI: STBlockingViewController 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STCallingStatusDomain 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STCallingStatusDomainUserInteraction 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STDynamicActivityAttributionManager 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STFocusStatusDomain 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STLocationStatusDomain 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STMediaStatusDomain 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STPlaygroundsStatusDomain 
01 00 4300 /System/Library/PrivateFrameworks/SystemStatusServer.framework/SystemStatusServer: STStatusServer 
01 00 4300 /System/Library/PrivateFrameworks/SystemStatusServer.framework/SystemStatusServer: STTelephonyStateProvider 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STTelephonyStatusDomain 
01 00 4300 /System/Library/PrivateFrameworks/SystemStatusServer.framework/SystemStatusServer: STTelephonyStatusDomainDataProvider 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STVoiceControlStatusDomain 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STWifiStatusDomain 
01 00 4200 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STWifiStatusDomainPublisher 
01 00 c600 /System/Library/PrivateFrameworks/SoftwareUpdateServices.framework/SoftwareUpdateServices: SUDescriptor 
01 00 7c40 /System/Library/PrivateFrameworks/SiriUICore.framework/SiriUICore: SUICFlamesView 
01 00 2500 /System/Library/PrivateFrameworks/SystemWake.framework/SystemWake: SWWakingTimer 
01 00 2900 /System/Library/PrivateFrameworks/Synapse.framework/Synapse: SYBacklinkIndicatorUsage 
01 00 2900 /System/Library/PrivateFrameworks/Synapse.framework/Synapse: SYFeatureEligibility 
01 00 2900 /System/Library/PrivateFrameworks/Synapse.framework/Synapse: SYSystemPaperAnalytics 
01 00 9300 /System/Library/PrivateFrameworks/CloudServices.framework/CloudServices: SecureBackup 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriBluetoothDeviceSource 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriBreadcrumbSource 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriContinuityContext 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriContinuitySource 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriDirectActionContext 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriDirectActionSource 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriDismissalOptions 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriLongPressButtonSource 
01 00 4900 /System/Library/PrivateFrameworks/SiriUIActivation.framework/SiriUIActivation: SiriPresentationSpringBoardMainScreenViewController 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriSimpleActivationSource 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriTestingContext 
01 00 4a00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriTestingSource 
01 00 9740 /System/Library/PrivateFrameworks/SiriUI.framework/SiriUI: SiriUICarDNDUseSiriHeaderViewController 
01 00 9740 /System/Library/PrivateFrameworks/SiriUI.framework/SiriUI: SiriUISuggestionsView 
01 00 4400 /System/Library/PrivateFrameworks/TestFlightCore.framework/TestFlightCore: TFBetaLaunchHandle 
01 00 2f00 /System/Library/PrivateFrameworks/TextInput.framework/TextInput: TIPreferencesController 
01 00 c800 /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary: TLAlert 
01 00 c800 /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary: TLAlertConfiguration 
01 00 c800 /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary: TLToneManager 
01 00 9f00 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUCallCapabilities 
01 00 9f00 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUCallCenter 
01 00 9f00 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUDialRequest 
01 00 8100 /System/Library/PrivateFrameworks/UserActivity.framework/UserActivity: UABestAppSuggestionManager 
01 00 8100 /System/Library/PrivateFrameworks/UserActivity.framework/UserActivity: UAUserActivity 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityContinuationAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityIndicatorView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationCoverSheetSceneSpecification 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationExternalScreenSceneSpecification 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationLegacyVOIPKeepAliveAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneClientSettings 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneClientSettingsDiffInspector 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneDeactivationManager 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneSettings 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneSettingsDiffInspector 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneSpecification 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneTransitionContext 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIBannerAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIBarButtonItem 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIBlurEffect 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewCell 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UICommandAlternate 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIControl 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDestroySceneAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDestroySceneActionResponse 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDidTakeScreenshotAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDismissSceneAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragInteraction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragItem 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragPreview 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragPreviewTarget 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDraggingSystemMonitor 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDraggingSystemTouchRoutingPolicy 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDropInteraction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIDropProposal 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIFetchContentInBackgroundAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIFocusSystem 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontDescriptor 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIForceStageInteractionProgress 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRenderer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRendererFormat 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIHBClickGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIHBLongClickGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIHandleBackgroundURLSessionAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIHoverGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIImpactFeedbackGenerator 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyCommand 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyShortcutHUDService 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboard 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboardImpl 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboardInputModeController 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UILongPressGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIMenu 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIMenuSystem 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIMutableApplicationSceneClientSettings 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIMutableApplicationSceneSettings 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIMutableTransformer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationController 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UINib 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UINotificationFeedbackGenerator 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIOpenURLAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPeripheralHost 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPinchGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerEffect 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerHighlightEffect 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerInteraction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerLiftEffect 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerRegion 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerShape 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerStyle 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewForceInteractionProgress 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewParameters 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIQuickLookInternalSceneSpecification 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIRootSceneWindow 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIRootWindowScenePresentationBinder 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIRotationGestureRecognizer 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationInitializationContext 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationStateService 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationSupportDisplayEdgeInfo 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationSupportDisplayEdgeInsetsWrapper 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationSupportService 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISDeviceContext 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISDisplayContext 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISDisplaySingleRectShape 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISFetchContentInBackgroundActionResponse 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISMutableApplicationInitializationContext 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISMutableDeviceContext 
01 00 5700 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISMutableDisplayContext 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISceneActivationConditions 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISceneLayerTargetFactory 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreenEdgePanGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISegmentedControl 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISlider 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISpringLoadedInteraction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStackView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBar 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarHideAnimationParameters 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarHoverRegionAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarManager 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarServer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarStyleAnimationParameters 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarStyleRequest 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarTapAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarWindow 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBar_Base 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBar_Modern 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISwipeGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISwitch 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISystemNavigationAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISystemNavigationActionDestinationContext 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UISystemShellApplication 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITableView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCell 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewController 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewHeaderFooterView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedDragPreview 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedPreview 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITextEffectsWindow 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITextField 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITextView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UITransform 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIUserInterfaceStyleArbiter 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewFloatAnimatableProperty 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewPropertyAnimator 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIVisualEffectView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIWebClip 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindow 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindowScene 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindowSceneSpecification 
01 00 7700 /System/Library/PrivateFrameworks/UserManagement.framework/UserManagement: UMUserManager 
01 00 7700 /System/Library/PrivateFrameworks/UserManagement.framework/UserManagement: UMUserSwitchBlockingTask 
01 00 7300 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNMutableNotificationContent 
01 00 7300 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotification 
01 00 7300 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationRequest 
01 00 7300 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNUserNotificationCenter 
01 00 0d40 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSCacheUpdateListener 
01 00 0d40 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSRecognitionSession 
01 00 3800 /System/Library/PrivateFrameworks/WorkflowUIServices.framework/WorkflowUIServices: WFWidgetOptions 
01 00 3800 /System/Library/PrivateFrameworks/WorkflowUIServices.framework/WorkflowUIServices: WFWidgetViewController 
01 00 6b00 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGCarouselListViewController 
01 00 6b00 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGMajorListViewController 
01 00 6b00 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGWidgetDiscoveryController 
01 00 6b00 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGWidgetGroupViewController 
01 00 6b00 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGWidgetListHeaderView 
01 00 3400 /System/Library/PrivateFrameworks/WallpaperKit.framework/WallpaperKit: WKWallpaperMigrator 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationController 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationLaunchCompatibilityInfo 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshot 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotFetchRequest 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotGenerationContext 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotManifest 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotPredicate 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotSortDescriptor 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBDisplayEdgeInsetsWrapper 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBLaunchImageProvider 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBLaunchStateRequest 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBMutableStatusBarSettings 
01 00 8800 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBSnapshotDataProviderContext 
01 00 1600 /System/Library/PrivateFrameworks/DuetExpertCenter.framework/DuetExpertCenter: _DECConsumer 
01 00 1600 /System/Library/PrivateFrameworks/DuetExpertCenter.framework/DuetExpertCenter: _DECFeedbackProvider 
01 00 1600 /System/Library/PrivateFrameworks/DuetExpertCenter.framework/DuetExpertCenter: _DECLocationAppItem 
01 00 b900 /System/Library/Frameworks/CoreServices.framework/CoreServices: _LSOpenConfiguration 
01 00 1700 /System/Library/PrivateFrameworks/LowPowerMode.framework/LowPowerMode: _PMLowPowerMode 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: _SBUIBiometricKitInterface 
01 00 9a00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: _SBUIBiometricMatchingAssertion 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIApplicationInfo 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIAssetManager 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIBackdropView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIBackdropViewSettings 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIBannerContent 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIDirectionalRotationView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIDiscreteFeedback 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIEdgeFeedbackGenerator 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIEdgeFeedbackGeneratorConfiguration 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIEventDeferringManager 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIFeedbackEngine 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIFeedbackPattern 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperConstantExtender 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperInteractor 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperpoint 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperrectangle 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperregionUnion 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIImpactFeedbackGeneratorConfiguration 
01 00 7a00 /System/Library/PrivateFrameworks/KeyboardArbiter.framework/KeyboardArbiter: _UIKeyboardArbiter_ForSpringBoard 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UILayerHostView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UILegibilityLabel 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UILegibilitySettings 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UINotificationFeedbackGeneratorConfiguration 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIPortalView 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRemoteKeyboards 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRemoteViewController 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRootWindow 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UISettings 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIStatusBarAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIStatusBarData 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIStatusBarDataStringEntry 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UISystemGestureManager 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIVibrantSettings 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIViewControllerTransitionContext 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIWindowSceneActivationCleanupAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIWindowSceneActivationPrewarmAction 
01 00 8700 /System/Library/Frameworks/UIKit.framework/UIKit: _UIWindowSceneActivationPrewarmActionResponse 
01 00 7300 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: _UNMutableNotificationCommunicationContext 
01 00 7300 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: _UNMutableNotificationContact 
