|| __DATA.__common _SBClientAlertItemTestCases
|| __DATA.__common _SBOmnibusAlertItemTestCases
|| __DATA.__common _SBTestableAlertItemTestCases
|| __DATA.__common ___PPTUserSpecifiedEnvironment
|| __DATA.__common ___extendedModeActive
|| __DATA.__common ___extraBacklightLogging
|| __DATA.__data _SBActionHandlerErrorDomain
|| __DATA.__data _SBApplicationDropSessionErrorDomain
|| __DATA.__data _SBBluetoothBatteryAvailabilityChangedNotification
|| __DATA.__data _SBBluetoothBatteryLevelChangedNotification
|| __DATA.__data _SBBluetoothConnectionChangedNotification
|| __DATA.__data _SBButtonLoggingSubsystem
|| __DATA.__data _SBCoverSheetIconFlyInDefaultCenter
|| __DATA.__data _SBHUDControllerDidDismissHUDWindowNotification
|| __DATA.__data _SBIconControllerIconModelDidChangeNotification
|| __DATA.__data _SBIconControllerOverlayVisibilityDidChangeNotification
|| __DATA.__data _SBIconControllerSidebarVisibilityDidChangeNotification
|| __DATA.__data _SBMainDisplaySceneManagerErrorDomain
|| __DATA.__data _SBMainSwitcherViewControllerErrorDomain
|| __DATA.__data _SBMainWorkspaceErrorDomain
|| __DATA.__data _SBWorkspaceErrorDomain
|| __DATA.__data ___QuitTestKey
|| __DATA.__data ___ScrollTestPageDelay
|| __DATA.__data _kSBAssistantDefaultDismissAnimationDurationOverApp
|| __DATA.__objc_data _OBJC_CLASS_$_CSConcreteUnlockRequest
|| __DATA.__objc_data _OBJC_CLASS_$_NCRevealWalletPassActionRunner
|| __DATA.__objc_data _OBJC_CLASS_$_SBAWDQueryableMetric
|| __DATA.__objc_data _OBJC_CLASS_$_SBActivateAppClipFromPlaceholderWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBActivateAppUnderLockScreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBActivatePlusButtonSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBActivateReachabilitySwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBActivationInfoViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBActiveAppLayoutFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnalyticsAggdInterface
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnalyticsAggdSimpleEventHandler
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnalyticsCoreAnalyticsEventHandler
|| __DATA.__objc_data _OBJC_CLASS_$_SBAnimationStepper
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppBrightnessChangeLogger
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppBrightnessMetric
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppBrightnessMetricData
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppClipOverlayView
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppClipOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppClipPlaceholderLayoutElementViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppClipPlaceholderWorkspaceEntity
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppDeniedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppExposeGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppExposeToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppExposeToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppFreeDevProfileNotTrustedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppProfileExpiredAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppProfileNeedsValidationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppProfileNotTrustedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppRepairTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppResizeGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppStatusBarTransitionInfo
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppSwitcherPageServiceRemoteViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppSwitcherService
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppSwitcherServicePageContentView
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppSwitcherServiceSet
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppUnderFloatingSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppUnderFloatingSwitcherTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplication32BitDeprecationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationBlurContentView
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationBlurContentViewBackdropSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationBlurSnapshotGenerationContainerView
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationDropSession
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationLaunchNotifyAirplaneModeAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationLaunchNotifyAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationLaunchNotifyInCallAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationLaunchNotifyInCallWithoutDataSwitchingAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationSceneEntityDestructionIntent
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationSceneRemovalAnimationDomain
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationWakeScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_SBApplicationWakeSchedulerFactory
|| __DATA.__objc_data _OBJC_CLASS_$_SBArcSwipeFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBArcSwipeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBAutoPurgingImageView
|| __DATA.__objc_data _OBJC_CLASS_$_SBBannerUnfurlSourceContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBBannerUnfurlToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBBaseStatusBarChangeAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBBatteryDeviceChargeTestRecipe
|| __DATA.__objc_data _OBJC_CLASS_$_SBBatteryDeviceCountTestRecipe
|| __DATA.__objc_data _OBJC_CLASS_$_SBBatteryLogger
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricKitDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorPearlDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorTestRecipeDummyDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorUI
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorView
|| __DATA.__objc_data _OBJC_CLASS_$_SBBiometricMonitorViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBBluetoothAccessoryLowPowerAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBBlurItemContainerSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBBlurViewCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_SBBookmark
|| __DATA.__objc_data _OBJC_CLASS_$_SBBrightnessHUDViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBBuddyLockScreenDismissOnlyAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBCAAnimationBlockDelegate
|| __DATA.__objc_data _OBJC_CLASS_$_SBCalendarDownloadingIcon
|| __DATA.__objc_data _OBJC_CLASS_$_SBCancelableBlockOperation
|| __DATA.__objc_data _OBJC_CLASS_$_SBCenterAppIconZoomAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBChainableModifierTitledEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBClawGestureMetric
|| __DATA.__objc_data _OBJC_CLASS_$_SBClawGestureMetricData
|| __DATA.__objc_data _OBJC_CLASS_$_SBClippedZoomView
|| __DATA.__objc_data _OBJC_CLASS_$_SBCollectionViewCell
|| __DATA.__objc_data _OBJC_CLASS_$_SBCommandTabIconView
|| __DATA.__objc_data _OBJC_CLASS_$_SBCommandTabWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBCompleteGestureSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBContinuityDisplayItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBCoverSheetAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBCrossblurDosidoSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardEmergencyDialerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardHomeAffordanceControllerClientBridge
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardModalHomeAffordanceControllerClientBridge
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardPluginView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardPluginViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardSpotlightViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBDashBoardVibrantWallpaperChevronView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanAccountAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanActivationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanCompletionAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanDisableAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanExpirationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanFailureAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDataPlanUsageAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeactivationSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeckContinuityToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeckFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeckSwitcherForcePressGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBDefaultAutomaticIconModelStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeveloperBuildExpirationAlert
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeviceApplicationRemoteTransientOverlayContainerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeviceApplicationRemoteTransientOverlayPresentationContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneClassicAccessoryView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDiagnosticRequestAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBDisableAppStatusBarAlphaChangesAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBDisableAppStatusBarUserInteractionChangesAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBDisableSystemGestureAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBDismissForEmptySwitcherSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBDistanceFieldView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDockSuggestionsIconListView
|| __DATA.__objc_data _OBJC_CLASS_$_SBDragAndDropGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDragAndDropGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBDropApplicationFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBDropApplicationSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEDUTemporarySessionLogoutWarningAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBEmitStudyLogSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalCommitFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalCrossblurSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalDeclineFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalDeleteFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalSlideOffscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBEntityRemovalToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBExampleUserNotificationCenter
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDemoDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDisplayApplicationSceneEntity
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDisplayController
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDisplayPresenter
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalDuetDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalHomeGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalInlineAppExposeTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalPhoneDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalSettingsDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBExternalSetupDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBFailingSystemGestureRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBFairPlayFamilyLeaveAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingApplicationLiveContentWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDockRootViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDockSuggestionsModel
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDockSuggestionsViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDockWindowLevelAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingFluidSwitcherRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingLowEndHardwareModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidDismissalState
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGestureExclusionCompositeShape
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherModifierTimelineController
|| __DATA.__objc_data _OBJC_CLASS_$_SBFluidSwitcherModifierTimelineViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressGestureStateTrackingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressToFullScreenAppLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForcePressToSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBForceTouchAppIconInfoProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBFullScreenToHomePiPSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGenerateLaunchSnapshotsAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBGradientView
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwipeUpGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwipeUpToSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwitcherSwipeUpGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridSwitcherViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridToActiveAppLayoutsSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBGridToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHBTriplePressDownGestureRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBHIDValueModifyingButtonSetArbiter
|| __DATA.__objc_data _OBJC_CLASS_$_SBHideAppIconAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBHideFolderContentsAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeButtonPressSpeedMesaUnlockTrigger
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureDismissableCoverSheetViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureDockSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureRootFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureToSwitcherFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeGestureToZoomDownSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeHardwareButtonLongPressDurationAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeScreenNagAlert
|| __DATA.__objc_data _OBJC_CLASS_$_SBHomeToGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBIPhotoLaunchDeniedAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBIconBlurryBackgroundView
|| __DATA.__objc_data _OBJC_CLASS_$_SBIconProfileModelMemoryStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBIconViewSnapshotProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBIdleBehavior
|| __DATA.__objc_data _OBJC_CLASS_$_SBIdleTimerTimeoutPrecedenceSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBIdleTimerTimeoutRange
|| __DATA.__objc_data _OBJC_CLASS_$_SBIndirectPanGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBIndirectTouchLifecycleMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_SBInjectVelocitySwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineAppExposeLayoutElementViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineAppExposeLiveContentOverlayCoordinator
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineAppExposeLiveContentOverlayView
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineAppExposeRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineAppExposeWorkspaceEntity
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineEmptyGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineGridToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineRotationSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInlineTransitionSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBInsecureDrawingAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBInsertionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotCommitWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotDomain
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureCropsView
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureHostRootViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureHostWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureManager
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureMultiPartAnimation
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureRootViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotGestureRootWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotScreenEdgePanGestureRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBInteractiveScreenshotSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBInvalidateReopenButtonTextSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBIsolatedSceneOrientationFollowingContainerView
|| __DATA.__objc_data _OBJC_CLASS_$_SBIsolatedSceneOrientationFollowingSecureWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBKeyboardBrightnessController
|| __DATA.__objc_data _OBJC_CLASS_$_SBKeyboardFocusRedirection
|| __DATA.__objc_data _OBJC_CLASS_$_SBLaunchImageOverridesContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBLaunchSnapshotWaitingAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBLegacyLockScreenEnvironment
|| __DATA.__objc_data _OBJC_CLASS_$_SBLegacyVOIPRefreshWakeTracker
|| __DATA.__objc_data _OBJC_CLASS_$_SBLineFragment
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockOverlayContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockOverlayView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenBatteryChargingViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenEmergencyCallViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenEmergencyDialerController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenNowPlayingController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenPlugin
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenPluginOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenTemperatureWarningView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockScreenTemperatureWarningViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLockToAppStatusBarAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBLogWindowController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppClientSettingObserverContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerOverlayWrapperView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerPluginWrapperView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerPluginWrapperViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerView
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppContainerViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLoginAppSceneHoster
|| __DATA.__objc_data _OBJC_CLASS_$_SBLogoutDebugBlockingViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLogoutProgressTransientOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBLongPressDisambiguationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneLayoutDragAndDropInteractionManager
|| __DATA.__objc_data _OBJC_CLASS_$_SBMainSwitcherRootSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMainSwitcherRoutingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMedusaSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBMinimumViableSwitcherTableViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBModalUIFluidDismissGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBModelessSyncStubs
|| __DATA.__objc_data _OBJC_CLASS_$_SBMoveFloatingConfigurationFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMoveGestureRootFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBMutableBannerUnfurlSourceContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBNotificationBannerDestinationTestActionRunner
|| __DATA.__objc_data _OBJC_CLASS_$_SBNotificationKeyboardHomeAffordanceAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBNotifyIconWillZoomDownSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBOverrideAppLayoutsSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPAnalyticsSessionSummaryAssistant
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPContentViewLayoutSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPInteractionController
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPInteractionSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPInteractionSettingsDomain
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPMorphAnimatorController
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPMorphAnimatorDataSource
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPRestoreToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPWindowLevelOverrideAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBPIPWindowRootViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBPPTFakeAppSuggestion
|| __DATA.__objc_data _OBJC_CLASS_$_SBPPTSearchGestureObserver
|| __DATA.__objc_data _OBJC_CLASS_$_SBPasscodeAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBPasscodeComplianceAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBPearlInterlockAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBPieChartSlice
|| __DATA.__objc_data _OBJC_CLASS_$_SBPieChartView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPowerDownView
|| __DATA.__objc_data _OBJC_CLASS_$_SBPresentDockSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBPreviewFloatingDockViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBRebootContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBRecentDisplayItemsController
|| __DATA.__objc_data _OBJC_CLASS_$_SBRecentDisplayItemsDataStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionDeckSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionForcePressGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionGridSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionHomeGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBReduceMotionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRemovalSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRemovalSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBRemoveWidgetAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBRenderImage
|| __DATA.__objc_data _OBJC_CLASS_$_SBReorderInfoAlert
|| __DATA.__objc_data _OBJC_CLASS_$_SBRequestFolderSnapshotsSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBRestartTransitionRequest
|| __DATA.__objc_data _OBJC_CLASS_$_SBRestoreFailureAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBReturnToLockscreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotateScenesWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotationLockHUDController
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotationLockHUDViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBRotationSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBRoundedRectBorderView
|| __DATA.__objc_data _OBJC_CLASS_$_SBRouteToAppExposeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSaturatedIconView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneClientRotationView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneLayoutTransitionAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneOrientationFollowingWindowRootViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneRotationTransitionAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSceneViewAppIconView
|| __DATA.__objc_data _OBJC_CLASS_$_SBScrollingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBScrunchGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBSeparatorNubView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSeparatorView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSetupPiPMorphingSwitcherEventResponse
|| __DATA.__objc_data _OBJC_CLASS_$_SBSetupRegulatoryInfoViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBShutdownContext
|| __DATA.__objc_data _OBJC_CLASS_$_SBSlideUpAppGrabberView
|| __DATA.__objc_data _OBJC_CLASS_$_SBSnapshotSlotIdWrapper
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightCrossblurToFullscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightDomain
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightSettings
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightTransientOverlayInteractiveGestureTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightTransientOverlaySpotlightViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightTransitionAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpotlightTransitionInteractor
|| __DATA.__objc_data _OBJC_CLASS_$_SBSpringBoardApplicationIcon
|| __DATA.__objc_data _OBJC_CLASS_$_SBStackedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBStartupTransitionToApp
|| __DATA.__objc_data _OBJC_CLASS_$_SBStartupTransitionToHome
|| __DATA.__objc_data _OBJC_CLASS_$_SBStartupTransitionToLoginWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBStashedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBStashedHyperrectangle
|| __DATA.__objc_data _OBJC_CLASS_$_SBStringMetrics
|| __DATA.__objc_data _OBJC_CLASS_$_SBStylusPriorityGestureRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwipeToKillSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwipeToKillSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwipeUpFloatingApplicationGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwipeUpFloatingSwitcherGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherKeyboardSuppressionMode
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierEventResponseSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierEventSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierQuerySnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierStackSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherModifierTimelineEntry
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherSwipeUpGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherSwipeUpToSwitcherFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherToActiveFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSwitcherToAppExposeSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBSystemGestureSwitchMetric
|| __DATA.__objc_data _OBJC_CLASS_$_SBTapAppLayoutSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBTapOutsideToDismissSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_CLASS_$_SBTemplateAndMorph
|| __DATA.__objc_data _OBJC_CLASS_$_SBTestAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBTestTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$_SBTodayKeepOnHomeScreenPlatterView
|| __DATA.__objc_data _OBJC_CLASS_$_SBTodayWidgetXCodeDebuggingUtility
|| __DATA.__objc_data _OBJC_CLASS_$_SBTransientOverlayBackgroundWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBTripleClickSOSMigrationAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIAnimationControllerSteppedAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIFullscreenAnimationView
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIStartupFromBlackAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIStartupToHomescreenAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIStartupToLoginWindowAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUIStartupToUserSetupAppZoomInAnimationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBUnsupportedURLAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBVPPAppRequiresHealingAlertItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBViewMorphAnimator
|| __DATA.__objc_data _OBJC_CLASS_$_SBViewMorphAnimatorContentBlackCurtainView
|| __DATA.__objc_data _OBJC_CLASS_$_SBViewMorphAnimatorContentClippingView
|| __DATA.__objc_data _OBJC_CLASS_$_SBVoiceControlPresentationSource
|| __DATA.__objc_data _OBJC_CLASS_$_SBVoiceControlTransientOverlayViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBVoiceControlViewController
|| __DATA.__objc_data _OBJC_CLASS_$_SBWaitForSceneContentAvailableTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBWaitForSceneLayoutTransitionTransaction
|| __DATA.__objc_data _OBJC_CLASS_$_SBWalletPrearmRecognizer
|| __DATA.__objc_data _OBJC_CLASS_$_SBWeatherApplicationIcon
|| __DATA.__objc_data _OBJC_CLASS_$_SBWidgetDebuggingTestRecipe
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowDragInteraction
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowHideRequest
|| __DATA.__objc_data _OBJC_CLASS_$_SBWindowLevelAssertion
|| __DATA.__objc_data _OBJC_CLASS_$_SBWorkItem
|| __DATA.__objc_data _OBJC_CLASS_$_SBWorkStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBZoomableView
|| __DATA.__objc_data _OBJC_CLASS_$__SBAccessibilityTintView
|| __DATA.__objc_data _OBJC_CLASS_$__SBAccessibilityWindowHostingControllerServerTarget
|| __DATA.__objc_data _OBJC_CLASS_$__SBActiveAppFloorFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$__SBAggregateCameraLaunchCondition
|| __DATA.__objc_data _OBJC_CLASS_$__SBBatteryLogContext
|| __DATA.__objc_data _OBJC_CLASS_$__SBCameraLaunchCondition
|| __DATA.__objc_data _OBJC_CLASS_$__SBDMPolicyTestAppInfo
|| __DATA.__objc_data _OBJC_CLASS_$__SBDashBoardSpotlightViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBDefaultScreenshotProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SBDeviceApplicationSceneClassicHostPositioningView
|| __DATA.__objc_data _OBJC_CLASS_$__SBDeviceApplicationSceneClassicHostWrapperView
|| __DATA.__objc_data _OBJC_CLASS_$__SBExpertLocationAppSuggestion
|| __DATA.__objc_data _OBJC_CLASS_$__SBFloatingApplicationLiveContentContainerViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBFluidSwitcherGestureExclusionCompositeShapeDebugView
|| __DATA.__objc_data _OBJC_CLASS_$__SBFluidSwitcherGestureExclusionTrapezoidDebugView
|| __DATA.__objc_data _OBJC_CLASS_$__SBFluidSwitcherModifierTimelineEntryView
|| __DATA.__objc_data _OBJC_CLASS_$__SBGridFloorSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$__SBIdleTimerConfigurationInfo
|| __DATA.__objc_data _OBJC_CLASS_$__SBInlineGridFloorSwitcherModifier
|| __DATA.__objc_data _OBJC_CLASS_$__SBInteractiveScreenshotGestureBackdropView
|| __DATA.__objc_data _OBJC_CLASS_$__SBInteractiveScreenshotGestureReplicatorView
|| __DATA.__objc_data _OBJC_CLASS_$__SBInteractiveScreenshotGestureSession
|| __DATA.__objc_data _OBJC_CLASS_$__SBLegacyRemoteAlertContentHostViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBMainScreenScreenshotProvider
|| __DATA.__objc_data _OBJC_CLASS_$__SBMaskingContainerView
|| __DATA.__objc_data _OBJC_CLASS_$__SBModifierTimelineDetailViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBModifierTimelineModifierDetailViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBModifierTimelineTextViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBPendingMesaUnlockBehaviorUnlockRequest
|| __DATA.__objc_data _OBJC_CLASS_$__SBPowerAssertionContext
|| __DATA.__objc_data _OBJC_CLASS_$__SBSceneLayoutViewControllerAnimator
|| __DATA.__objc_data _OBJC_CLASS_$__SBStatusBarTapHandler
|| __DATA.__objc_data _OBJC_CLASS_$__SBSynchronizeOperation
|| __DATA.__objc_data _OBJC_CLASS_$__SBTodaySpotlightViewController
|| __DATA.__objc_data _OBJC_CLASS_$__SBUABestAppSuggestion
|| __DATA.__objc_data _OBJC_CLASS_$__SBUserNotificationImageDescriptor
|| __DATA.__objc_data _OBJC_CLASS_$__SBVolumeHUDViewControllerNullAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_CSConcreteUnlockRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_NCRevealWalletPassActionRunner
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAWDQueryableMetric
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActivateAppClipFromPlaceholderWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActivateAppUnderLockScreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActivatePlusButtonSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActivateReachabilitySwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActivationInfoViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBActiveAppLayoutFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnalyticsAggdInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnalyticsAggdSimpleEventHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnalyticsCoreAnalyticsEventHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAnimationStepper
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppBrightnessChangeLogger
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppBrightnessMetric
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppBrightnessMetricData
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppClipOverlayView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppClipOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppClipPlaceholderLayoutElementViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppClipPlaceholderWorkspaceEntity
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppDeniedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppExposeGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppExposeToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppExposeToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppFreeDevProfileNotTrustedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppProfileExpiredAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppProfileNeedsValidationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppProfileNotTrustedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppRepairTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppResizeGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppStatusBarTransitionInfo
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppSwitcherPageServiceRemoteViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppSwitcherService
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppSwitcherServicePageContentView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppSwitcherServiceSet
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppUnderFloatingSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppUnderFloatingSwitcherTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplication32BitDeprecationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationBlurContentView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationBlurContentViewBackdropSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationBlurSnapshotGenerationContainerView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationDropSession
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchNotifyAirplaneModeAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchNotifyAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchNotifyInCallAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchNotifyInCallWithoutDataSwitchingAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationSceneEntityDestructionIntent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationSceneRemovalAnimationDomain
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationWakeScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_SBApplicationWakeSchedulerFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_SBArcSwipeFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBArcSwipeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAutoPurgingImageView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBannerUnfurlSourceContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBannerUnfurlToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBaseStatusBarChangeAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBatteryDeviceChargeTestRecipe
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBatteryDeviceCountTestRecipe
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBatteryLogger
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricKitDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorPearlDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorTestRecipeDummyDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorUI
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBluetoothAccessoryLowPowerAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBlurItemContainerSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBlurViewCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBookmark
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBrightnessHUDViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBBuddyLockScreenDismissOnlyAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCAAnimationBlockDelegate
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCalendarDownloadingIcon
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCancelableBlockOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCenterAppIconZoomAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBChainableModifierTitledEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBClawGestureMetric
|| __DATA.__objc_data _OBJC_METACLASS_$_SBClawGestureMetricData
|| __DATA.__objc_data _OBJC_METACLASS_$_SBClippedZoomView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCollectionViewCell
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCommandTabIconView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCommandTabWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCompleteGestureSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBContinuityDisplayItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCoverSheetAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBCrossblurDosidoSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardEmergencyDialerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardHomeAffordanceControllerClientBridge
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardModalHomeAffordanceControllerClientBridge
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardPluginView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardPluginViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardSpotlightViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDashBoardVibrantWallpaperChevronView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanAccountAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanActivationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanCompletionAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanDisableAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanExpirationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanFailureAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDataPlanUsageAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeactivationSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeckContinuityToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeckFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeckSwitcherForcePressGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDefaultAutomaticIconModelStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeveloperBuildExpirationAlert
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationRemoteTransientOverlayContainerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationRemoteTransientOverlayPresentationContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneClassicAccessoryView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDiagnosticRequestAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDisableAppStatusBarAlphaChangesAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDisableAppStatusBarUserInteractionChangesAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDisableSystemGestureAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDismissForEmptySwitcherSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDistanceFieldView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDockSuggestionsIconListView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDragAndDropGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDragAndDropGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDropApplicationFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBDropApplicationSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEDUTemporarySessionLogoutWarningAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEmitStudyLogSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalCommitFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalCrossblurSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDeclineFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDeleteFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalSlideOffscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBEntityRemovalToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExampleUserNotificationCenter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDemoDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDisplayApplicationSceneEntity
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDisplayController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDisplayPresenter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalDuetDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalHomeGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalInlineAppExposeTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalPhoneDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalSettingsDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBExternalSetupDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFailingSystemGestureRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFairPlayFamilyLeaveAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingApplicationLiveContentWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDockRootViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDockSuggestionsModel
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDockSuggestionsViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDockWindowLevelAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingFluidSwitcherRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingLowEndHardwareModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidDismissalState
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGestureExclusionCompositeShape
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherModifierTimelineController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherModifierTimelineViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressGestureRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressGestureStateTrackingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressToFullScreenAppLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressToHomeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForcePressToSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBForceTouchAppIconInfoProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFullScreenToHomePiPSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGenerateLaunchSnapshotsAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGradientView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridLayoutSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwipeUpGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwipeUpToSwitcherSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwitcherSwipeUpGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridSwitcherViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridToActiveAppLayoutsSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBGridToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHBTriplePressDownGestureRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHIDValueModifyingButtonSetArbiter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHideAppIconAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHideFolderContentsAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeButtonPressSpeedMesaUnlockTrigger
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureDismissableCoverSheetViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureDockSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureRootFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureToSwitcherFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeGestureToZoomDownSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeHardwareButtonLongPressDurationAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeScreenNagAlert
|| __DATA.__objc_data _OBJC_METACLASS_$_SBHomeToGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIPhotoLaunchDeniedAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIconBlurryBackgroundView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIconProfileModelMemoryStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIconViewSnapshotProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIdleBehavior
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIdleTimerTimeoutPrecedenceSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIdleTimerTimeoutRange
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIndirectPanGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIndirectTouchLifecycleMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInjectVelocitySwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineAppExposeLayoutElementViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineAppExposeLiveContentOverlayCoordinator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineAppExposeLiveContentOverlayView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineAppExposeRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineAppExposeWorkspaceEntity
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineEmptyGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineGridToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineRotationSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInlineTransitionSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInsecureDrawingAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInsertionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotCommitWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotDomain
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureCropsView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureHostRootViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureHostWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureMultiPartAnimation
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureRootViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotGestureRootWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotScreenEdgePanGestureRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInteractiveScreenshotSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBInvalidateReopenButtonTextSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIsolatedSceneOrientationFollowingContainerView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBIsolatedSceneOrientationFollowingSecureWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBKeyboardBrightnessController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBKeyboardFocusRedirection
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLaunchImageOverridesContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLaunchSnapshotWaitingAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLegacyLockScreenEnvironment
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLegacyVOIPRefreshWakeTracker
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLineFragment
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockOverlayContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockOverlayView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenBatteryChargingViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenEmergencyCallViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenEmergencyDialerController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenNowPlayingController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenPlugin
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenPluginOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenTemperatureWarningView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockScreenTemperatureWarningViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLockToAppStatusBarAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLogWindowController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppClientSettingObserverContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerOverlayWrapperView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerPluginWrapperView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerPluginWrapperViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppContainerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLoginAppSceneHoster
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLogoutDebugBlockingViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLogoutProgressTransientOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBLongPressDisambiguationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneLayoutDragAndDropInteractionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMainSwitcherRootSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMainSwitcherRoutingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMedusaSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMinimumViableSwitcherTableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBModalUIFluidDismissGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBModelessSyncStubs
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMoveFloatingConfigurationFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMoveGestureRootFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBMutableBannerUnfurlSourceContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBNotificationBannerDestinationTestActionRunner
|| __DATA.__objc_data _OBJC_METACLASS_$_SBNotificationKeyboardHomeAffordanceAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBNotifyIconWillZoomDownSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBOverrideAppLayoutsSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPAnalyticsSessionSummaryAssistant
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPContentViewLayoutSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPInteractionController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPInteractionSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPInteractionSettingsDomain
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPMorphAnimatorController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPMorphAnimatorDataSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPRestoreToFullScreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPWindowLevelOverrideAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPIPWindowRootViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPPTFakeAppSuggestion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPPTSearchGestureObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPasscodeAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPasscodeComplianceAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPearlInterlockAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPieChartSlice
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPieChartView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPowerDownView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPresentDockSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBPreviewFloatingDockViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRebootContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRecentDisplayItemsController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRecentDisplayItemsDataStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionDeckSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionForcePressGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionGridSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionHomeGestureSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReduceMotionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRemovalSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRemovalSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRemoveWidgetAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRenderImage
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReorderInfoAlert
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRequestFolderSnapshotsSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRestartTransitionRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRestoreFailureAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReturnToLockscreenWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotateScenesWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotationLockHUDController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotationLockHUDViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRotationSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRoundedRectBorderView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRouteToAppExposeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSaturatedIconView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneClientRotationView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneLayoutTransitionAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneOrientationFollowingWindowRootViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneRotationTransitionAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSceneViewAppIconView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBScrollingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBScrunchGestureSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSeparatorNubView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSeparatorView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSetupPiPMorphingSwitcherEventResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSetupRegulatoryInfoViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBShutdownContext
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSlideUpAppGrabberView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSnapshotSlotIdWrapper
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightCrossblurToFullscreenSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightDomain
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightTransientOverlayInteractiveGestureTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightTransientOverlaySpotlightViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightTransitionAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpotlightTransitionInteractor
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSpringBoardApplicationIcon
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStackedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToApp
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToHome
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToLoginWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStashedFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStashedHyperrectangle
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStringMetrics
|| __DATA.__objc_data _OBJC_METACLASS_$_SBStylusPriorityGestureRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwipeToKillSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwipeToKillSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwipeUpFloatingApplicationGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwipeUpFloatingSwitcherGestureWorkspaceTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherKeyboardSuppressionMode
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierEventResponseSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierEventSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierQuerySnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierStackSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierTimelineEntry
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherSettingsChangedSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherSwipeUpGestureFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherSwipeUpToSwitcherFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherToActiveFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSwitcherToAppExposeSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSystemGestureSwitchMetric
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTapAppLayoutSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTapOutsideToDismissSwitcherModifierEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTemplateAndMorph
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTestAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTestTransitionSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTodayKeepOnHomeScreenPlatterView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTodayWidgetXCodeDebuggingUtility
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTransientOverlayBackgroundWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBTripleClickSOSMigrationAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIAnimationControllerSteppedAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIFullscreenAnimationView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIStartupFromBlackAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIStartupToHomescreenAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIStartupToLoginWindowAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUIStartupToUserSetupAppZoomInAnimationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBUnsupportedURLAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVPPAppRequiresHealingAlertItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBViewMorphAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$_SBViewMorphAnimatorContentBlackCurtainView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBViewMorphAnimatorContentClippingView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVoiceControlPresentationSource
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVoiceControlTransientOverlayViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVoiceControlViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWaitForSceneContentAvailableTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWaitForSceneLayoutTransitionTransaction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWalletPrearmRecognizer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWeatherApplicationIcon
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWidgetDebuggingTestRecipe
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowDragInteraction
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowHideRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWindowLevelAssertion
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWorkItem
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWorkStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBZoomableView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBAccessibilityTintView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBAccessibilityWindowHostingControllerServerTarget
|| __DATA.__objc_data _OBJC_METACLASS_$__SBActiveAppFloorFloatingSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$__SBAggregateCameraLaunchCondition
|| __DATA.__objc_data _OBJC_METACLASS_$__SBBatteryLogContext
|| __DATA.__objc_data _OBJC_METACLASS_$__SBCameraLaunchCondition
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDMPolicyTestAppInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDashBoardSpotlightViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDefaultScreenshotProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDeviceApplicationSceneClassicHostPositioningView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBDeviceApplicationSceneClassicHostWrapperView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBExpertLocationAppSuggestion
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFloatingApplicationLiveContentContainerViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFluidSwitcherGestureExclusionCompositeShapeDebugView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFluidSwitcherGestureExclusionTrapezoidDebugView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFluidSwitcherModifierTimelineEntryView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBGridFloorSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$__SBIdleTimerConfigurationInfo
|| __DATA.__objc_data _OBJC_METACLASS_$__SBInlineGridFloorSwitcherModifier
|| __DATA.__objc_data _OBJC_METACLASS_$__SBInteractiveScreenshotGestureBackdropView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBInteractiveScreenshotGestureReplicatorView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBInteractiveScreenshotGestureSession
|| __DATA.__objc_data _OBJC_METACLASS_$__SBLegacyRemoteAlertContentHostViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBMainScreenScreenshotProvider
|| __DATA.__objc_data _OBJC_METACLASS_$__SBMaskingContainerView
|| __DATA.__objc_data _OBJC_METACLASS_$__SBModifierTimelineDetailViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBModifierTimelineModifierDetailViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBModifierTimelineTextViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBPendingMesaUnlockBehaviorUnlockRequest
|| __DATA.__objc_data _OBJC_METACLASS_$__SBPowerAssertionContext
|| __DATA.__objc_data _OBJC_METACLASS_$__SBSceneLayoutViewControllerAnimator
|| __DATA.__objc_data _OBJC_METACLASS_$__SBStatusBarTapHandler
|| __DATA.__objc_data _OBJC_METACLASS_$__SBSynchronizeOperation
|| __DATA.__objc_data _OBJC_METACLASS_$__SBTodaySpotlightViewController
|| __DATA.__objc_data _OBJC_METACLASS_$__SBUABestAppSuggestion
|| __DATA.__objc_data _OBJC_METACLASS_$__SBUserNotificationImageDescriptor
|| __DATA.__objc_data _OBJC_METACLASS_$__SBVolumeHUDViewControllerNullAnimator
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBActivateAppUnderLockScreenWorkspaceTransaction._disableActiveOrientationChangeAssertion
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBActivateAppUnderLockScreenWorkspaceTransaction._lockScreenEnvironment
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppDeniedAlertItem._icon
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppFreeDevProfileNotTrustedAlertItem._app
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppProfileExpiredAlertItem._app
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppProfileNeedsValidationAlertItem._icon
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppProfileNotTrustedAlertItem._app
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAppStatusBarSettings._settings
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._appInfo
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._appSnapshotSequenceID
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._bundleIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._calculatedSupportedTypes
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._currentClassicMode
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._defaultClassicModeOverride
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplication._supportedTypes
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationLibraryObserver._applicationObservers
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationLibraryObserver._mainQueueProxy
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationLibraryObserver._placeholderObservers
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationLibraryObserver._placeholdersByBundleID
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBApplicationSupportServiceDelegate._service
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBannerUnfurlSourceContext._cornerRadius
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBannerUnfurlSourceContext._referenceCoordinateSpaceBounds
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBannerUnfurlSourceContext._referenceFrame
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBannerUnfurlSourceContext._referenceVelocity
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBiometricMonitorTestRecipeDummyDataSource._observers
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBiometricMonitorTestRecipeDummyDataSource._state
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBluetoothController._devices
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBBluetoothController._tetheringConnected
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBCancelableBlockOperation._blocks
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._cacheCoordinator
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._dispatchCache
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._genCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._imps
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._modifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._nextFunc
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._selectorCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBChainableModifierMethodCache._selectors
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBClippedZoomView._clippingView
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBClippedZoomView._fullscreenZoomViewToClip
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonContext._daemonRequests
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonContext._dispatchSource
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonContext._pid
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonRequest._disabler
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDaemonRequest._enabler
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanAccountAlertItem._accountURL
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanActivationAlertItem._newAccount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanActivationAlertItem._promptToDisable
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanCompletionAlertItem._carrierName
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanCompletionAlertItem._newAccount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanExpirationAlertItem._expirationDate
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanFailureAlertItem._carrierName
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanFailureAlertItem._newAccount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDataPlanUsageAlertItem._remainingPortion
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationRemoteTransientOverlayContainerViewController._viewProvider
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._layoutEnvironment
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._preferredContentType
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._prefersLiveXIB
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._requestedLaunchIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._settings
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDeviceApplicationScenePlaceholderContentContext._url
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDismissOnlyAlertItem._body
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBDismissOnlyAlertItem._title
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._cachedImage
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._context
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._processedSurface
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._scaleFactor
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFallbackSnapshotDataProvider._snapshot
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFullscreenZoomView._hasImage
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBIconViewSnapshotProvider._invalidationBlock
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLineFragment._index
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLineFragment._lineWidth
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLineFragment._range
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLockdownManager._activatingAlertItem
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLockdownManager._settingUpActivationState
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLockdownManager._state
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLockdownManager._unqiueDeviceIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLoginAppContainerPluginWrapperView._overlayWrapperView
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBLoginAppContainerPluginWrapperView._pluginView
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._airTrafficConnection
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._iCloudRestoreToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._isAppSyncing
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._isAutoSyncing
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._isSyncing
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._isWirelessSyncing
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._restoringFromICloud
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModelessSyncController._syncRegistrationToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModifierCacheSelectorList.selCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBModifierCacheSelectorList.sels
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._environment
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._has
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._hidden
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._layoutConfiguration
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._primaryDisplayItem
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._secondaryDisplayItem
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayout._secondaryDisplayItemRole
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBAppLayoutList._applayouts
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBDisplayItem._bundleIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBDisplayItem._sceneIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBDisplayItem._type
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBPBDisplayItem._webClipIdentifier
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBRenderImage._image
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBRotationLockHUDViewController._locked
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBSnapshotWindow._orientation
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBStringMetrics._fragments
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBSystemGestureMetric._beganLocation
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBSystemGestureMetric._goalTracker
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayDismissalRequest._animated
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayDismissalRequest._completionHandler
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayPresentationRequest._animated
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayPresentationRequest._completionHandler
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayPresentationRequest._shouldDismissSiri
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBTransientOverlayPresentationRequest._viewController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBUIAnimationController._transitionContainer
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBUIAnimationController._transitionWindow
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBVoiceControlController._delayedAssistantActivationPending
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBVoiceControlController._headsetDownDelayedActionPerformed
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBWorkspaceTransaction._layoutController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBWorkspaceTransaction._transitionRequest
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBWorkspaceTransitionContext._request
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._activeInterfaceOrientation
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._activeInterfaceOrientationObservers
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._activeInterfaceOrientationOverrideStack
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._appsRegisteredForLockButtonEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._appsRegisteredForVolumeEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._authenticationController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._blocksAwaitingAvailableMemory
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._cardItemsController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._decimalFormatter
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._didPlayLockSound
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._expectsFaceContact
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._expectsFaceContactInLandscape
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetButtonClickCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetButtonDownTime
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetClickCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetDownDelayedActionPerformed
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._headsetDownEvent
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._ignoringCurrentLockButtonPress
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._inCallApp
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._isSeekingInMedia
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._keybagRefetchTransactionIsActive
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._lastLockButtonEventRecipient
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._lockOutController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._mediaSeekDirection
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._memoryPressureSource
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._memoryPressureStatus
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._menuButtonClickCount
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._menuButtonDown
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._menuButtonInterceptApp
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._menuButtonInterceptAppEnabledForever
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._midnightFireDate
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._midnightTimer
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._notificationDispatcher
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._notifyDontAllowMediaHUDToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._notifyDontAnimateREOToken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._nowRecordingApp
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._percentFormatter
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._restrictionDisabledApplications
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._ringerSwitchState
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._screenWasDimOnMenuDown
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._screenshotWasTaken
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._shouldDelaySleepForHeadsetClick
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._smartCoverClosed
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._springBoardRequestsAccelerometerEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._uiController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._userSessionController
|| __DATA.__objc_ivar _OBJC_IVAR_$_SpringBoard._wantsOrientationEvents
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBActiveAppFloorFloatingSwitcherModifier._activeAppLayout
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBActiveAppFloorFloatingSwitcherModifier._floatingConfiguration
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBAppSwitcherSnapshotCacheKey._hash
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBExpertAppSuggestion._appSuggestion
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBExpertAppSuggestion._result
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFluidSwitcherModifierTimelineEntryView._actionsLabel
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFluidSwitcherModifierTimelineEntryView._nameLabel
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFluidSwitcherModifierTimelineEntryView._postStackLabel
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFluidSwitcherModifierTimelineEntryView._tapRecognizer
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFullScreenAppFloorSwitcherModifier._activeAppLayout
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineDetailViewController._actionDetailViewController
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineDetailViewController._modifierDetailViewController
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineDetailViewController._tableView
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineModifierDetailViewController._tableView
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineModifierDetailViewController._textViewController
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBModifierTimelineTextViewController._textView
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBUABestAppSuggestion._appSuggestion
|| __DATA_CONST.__const _SBAccessibilityWindowHostingEntitlement
|| __DATA_CONST.__const _SBAccountStoreManagerPrimaryAppleAccountDidChangeNotification
|| __DATA_CONST.__const _SBActivateAssistantEntitlement
|| __DATA_CONST.__const _SBActivateAwayViewPluginsEntitlement
|| __DATA_CONST.__const _SBActivateRemoteAlertEntitlement
|| __DATA_CONST.__const _SBAddWebClipToHomeScreenEntitlement
|| __DATA_CONST.__const _SBAddWidgetToTodayViewEntitlement
|| __DATA_CONST.__const _SBAddsNewIconsToHomeScreenEntitlement
|| __DATA_CONST.__const _SBAggregateLockStateDidChangeNotification
|| __DATA_CONST.__const _SBAggregateLockStateKey
|| __DATA_CONST.__const _SBAirPlayScreenSharingStatusChangedNotificationName
|| __DATA_CONST.__const _SBAlertDidActivateNotification
|| __DATA_CONST.__const _SBAlertItemsSuppressionEntitlement
|| __DATA_CONST.__const _SBAlertSuppressionSectionIdentifierEntitlement
|| __DATA_CONST.__const _SBAllHomeScreenApplicationsEntitlement
|| __DATA_CONST.__const _SBAppClassicEnvironment
|| __DATA_CONST.__const _SBAppClassicOverrideEnvironment
|| __DATA_CONST.__const _SBAppClassicSuffixEnvironment
|| __DATA_CONST.__const _SBAppIconVisibilityPreferencesChangedNotification
|| __DATA_CONST.__const _SBAppLibrayRequestUpdateEntitlement
|| __DATA_CONST.__const _SBAppStoreBundleIdentifier
|| __DATA_CONST.__const _SBAppSwitcherModelDidChangeNotification
|| __DATA_CONST.__const _SBAppSwitcherNonInteractiveActivateEventName
|| __DATA_CONST.__const _SBAppSwitcherNonInteractiveDismissEventName
|| __DATA_CONST.__const _SBAppSwitcherNonInteractiveToggleEventName
|| __DATA_CONST.__const _SBAppSwitcherQuitAppBundleIdentifierKey
|| __DATA_CONST.__const _SBAppSwitcherQuitAppNotification
|| __DATA_CONST.__const _SBAppSwitcherServiceAddedNotification
|| __DATA_CONST.__const _SBAppSwitcherServiceNotificationService
|| __DATA_CONST.__const _SBAppSwitcherServiceRegistrarEntitlement
|| __DATA_CONST.__const _SBAppSwitcherServiceRemovedNotification
|| __DATA_CONST.__const _SBAppSwitcherSnapshotImageCacheUpdate
|| __DATA_CONST.__const _SBApplicationDataStoreSceneStorageKey
|| __DATA_CONST.__const _SBApplicationDragEntitlement
|| __DATA_CONST.__const _SBApplicationPlaceholdersAddedKey
|| __DATA_CONST.__const _SBApplicationPlaceholdersDidChangeNotification
|| __DATA_CONST.__const _SBApplicationPlaceholdersModifiedKey
|| __DATA_CONST.__const _SBApplicationPlaceholdersNetworkUsageDidChangeNotification
|| __DATA_CONST.__const _SBApplicationPlaceholdersRemovedKey
|| __DATA_CONST.__const _SBApplicationProcessDidExitNotification
|| __DATA_CONST.__const _SBApplicationProcessStateDidChangeNotification
|| __DATA_CONST.__const _SBApplicationProcessStateDidChangeNotificationKeyPreviousProcessState
|| __DATA_CONST.__const _SBApplicationRequestedDeviceUnlockRequester
|| __DATA_CONST.__const _SBApplicationShortcutStoreApplicationShortcutItemsKey
|| __DATA_CONST.__const _SBApplicationShowsProgressChangedNotification
|| __DATA_CONST.__const _SBApplicationSnapshotChangedNotification
|| __DATA_CONST.__const _SBApplicationSnapshotChangedSceneIdentifierUserInfoKey
|| __DATA_CONST.__const _SBApplicationSnapshotChangedSequenceUserInfoKey
|| __DATA_CONST.__const _SBApplicationSnapshotDownscaledAppSwitcherVariant
|| __DATA_CONST.__const _SBApplicationUserQuitMonitorEntitlement
|| __DATA_CONST.__const _SBApplicationsRegisteredForLockButtonEventsChangedNotification
|| __DATA_CONST.__const _SBApplicationsRegisteredForVolumeButtonEventsChangedNotification
|| __DATA_CONST.__const _SBAssistantBioAuthenticationReason
|| __DATA_CONST.__const _SBAssistantCanRepositionOrbIfNecessary
|| __DATA_CONST.__const _SBAssistantVisibilityDidChangeNotification
|| __DATA_CONST.__const _SBAudioRoutesChangedNotification
|| __DATA_CONST.__const _SBAutomaticCurrentIconStatePathSymbolized
|| __DATA_CONST.__const _SBAutomaticDesiredIconStatePathSymbolized
|| __DATA_CONST.__const _SBBacklightPreFadeBacklightActivationCompleteNotification
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonAssistantWillAppear
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonDismissOverlays
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonLock
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonMainScreenAnimationController
|| __DATA_CONST.__const _SBBannerManagerDismissalReasonPerformSleep
|| __DATA_CONST.__const _SBBarcodeScannerBundleIdentifier
|| __DATA_CONST.__const _SBBatterySaverModeDidChangeNotification
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationCoversheetSwipedForDismissal
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationFingerOn
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationKeybagUnlock
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationPasscodeCancelled
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationPrearmMatch
|| __DATA_CONST.__const _SBBiometricEventTimestampNotificationTryAgain
|| __DATA_CONST.__const _SBBlankScreenStateChangeNotification
|| __DATA_CONST.__const _SBBootCompleteNotification
|| __DATA_CONST.__const _SBBuddyBundleIdentifier
|| __DATA_CONST.__const _SBCFUserNotificationEntitlement
|| __DATA_CONST.__const _SBCalculatorBundleIdentifier
|| __DATA_CONST.__const _SBCalendarBundleIdentifier
|| __DATA_CONST.__const _SBCallCountChangedNotification
|| __DATA_CONST.__const _SBCameraBundleIdentifier
|| __DATA_CONST.__const _SBClockBundleIdentifier
|| __DATA_CONST.__const _SBCommandTabMaterialRecipeDark
|| __DATA_CONST.__const _SBCommandTabMaterialRecipeLight
|| __DATA_CONST.__const _SBCommunicationPolicyDidChangeNotification
|| __DATA_CONST.__const _SBControlCenterControllerDidDismissNotification
|| __DATA_CONST.__const _SBControlCenterControllerDidPresentNotification
|| __DATA_CONST.__const _SBControlCenterControllerWillDismissNotification
|| __DATA_CONST.__const _SBControlCenterControllerWillPresentNotification
|| __DATA_CONST.__const _SBCoverSheetDidDismissNotification
|| __DATA_CONST.__const _SBCoverSheetDidPresentNotification
|| __DATA_CONST.__const _SBCoverSheetWillAnimateDeactivation
|| __DATA_CONST.__const _SBCoverSheetWillDismissNotification
|| __DATA_CONST.__const _SBCoverSheetWillPresentNotification
|| __DATA_CONST.__const _SBCurrentIconStatePathSymbolized
|| __DATA_CONST.__const _SBCurrentLocaleDidChangeNotification
|| __DATA_CONST.__const _SBDataActivationBundleIdentifier
|| __DATA_CONST.__const _SBDefaultSceneIdentifierSuffix
|| __DATA_CONST.__const _SBDeferredScreenUnblankCompletedNotification
|| __DATA_CONST.__const _SBDesiredIconStatePathSymbolized
|| __DATA_CONST.__const _SBDeviceWipeEntitlement
|| __DATA_CONST.__const _SBDiagnosticsBundleIdentifier
|| __DATA_CONST.__const _SBDimSumServiceEntitlement
|| __DATA_CONST.__const _SBDismissReasonMainScreen
|| __DATA_CONST.__const _SBEmitStudyLogSwitcherEventResponseHomeGestureBeginKey
|| __DATA_CONST.__const _SBEmitStudyLogSwitcherEventResponseHomeGestureEndKey
|| __DATA_CONST.__const _SBFaceTimeStateChangedNotification
|| __DATA_CONST.__const _SBFacetimeBundleIdentifier
|| __DATA_CONST.__const _SBFilesBundleIdentifier
|| __DATA_CONST.__const _SBFindMyFriendsBundleIdentifier
|| __DATA_CONST.__const _SBFloatingDockControllerDisableRotationForSystemGestureRecognizerReason
|| __DATA_CONST.__const _SBFloatingDockControllerFrameDidChangeNotification
|| __DATA_CONST.__const _SBFloatingDockControllerFrameKey
|| __DATA_CONST.__const _SBFloatingDockControllerHeightKey
|| __DATA_CONST.__const _SBFloatingDockControllerHeightWillChangeNotification
|| __DATA_CONST.__const _SBFloatingDockSuggestionsDeletedNotification
|| __DATA_CONST.__const _SBFloatingDockSuggestionsDeletedNotificationBundleIdentifierKey
|| __DATA_CONST.__const _SBFloatingDockSuggestionsDeletedNotificationWebAppIdentifierKey
|| __DATA_CONST.__const _SBFrontmostDisplayChangedNotification
|| __DATA_CONST.__const _SBGetIconStateEntitlement
|| __DATA_CONST.__const _SBHandleMenuButtonEventName
|| __DATA_CONST.__const _SBHomescreenDisplayChangedNotification
|| __DATA_CONST.__const _SBIAPExtendedModeChangedNotification
|| __DATA_CONST.__const _SBICloudRestoreDidBeginNotification
|| __DATA_CONST.__const _SBICloudRestoreDidEndNotification
|| __DATA_CONST.__const _SBITunesRestoreStateDidChangeNotification
|| __DATA_CONST.__const _SBIconControllerPPTFolderTestRequestID
|| __DATA_CONST.__const _SBIconFolderPathLookupEntitlement
|| __DATA_CONST.__const _SBIconLocationAppSwitcher
|| __DATA_CONST.__const _SBIconLocationCommandTab
|| __DATA_CONST.__const _SBIconLocationFloatingDockSuggestions
|| __DATA_CONST.__const _SBInCallPresentationEntitlement
|| __DATA_CONST.__const _SBInCallPresentationManagerErrorDomain
|| __DATA_CONST.__const _SBInCallServiceBundleIdentifier
|| __DATA_CONST.__const _SBInSetupModeDidChangeNotification
|| __DATA_CONST.__const _SBInstalledApplicationsDidChangeNotification
|| __DATA_CONST.__const _SBInternalAppTag
|| __DATA_CONST.__const _SBLayoutRoleFloatingIdentifier
|| __DATA_CONST.__const _SBLayoutRolePrimaryIdentifier
|| __DATA_CONST.__const _SBLayoutRoleSideIdentifier
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeApp
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeContinuityApp
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeHomeScreen
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeInlineAppExpose
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeRemoteAlert
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeSwitcherService
|| __DATA_CONST.__const _SBLegacyDisplayItemTypeWebApp
|| __DATA_CONST.__const _SBLiquidDetectionManagerStateDidChangeNotification
|| __DATA_CONST.__const _SBLockScreenBaseScreenOffReason
|| __DATA_CONST.__const _SBLockScreenDimmedNotification
|| __DATA_CONST.__const _SBLockScreenExternalPartyWantsUILockNotification
|| __DATA_CONST.__const _SBLockScreenFacetimeCallUINeedsUpdateNotification
|| __DATA_CONST.__const _SBLockScreenFindMyDevicePluginName
|| __DATA_CONST.__const _SBLockScreenManagerUnlockAnimationDidFinish
|| __DATA_CONST.__const _SBLockScreenMapsPluginName
|| __DATA_CONST.__const _SBLockScreenNowPlayingPluginName
|| __DATA_CONST.__const _SBLockScreenPictureInPictureHiddenReason
|| __DATA_CONST.__const _SBLockScreenPluginWasDisabledNotification
|| __DATA_CONST.__const _SBLockScreenTelephoneCallUINeedsUpdateNotification
|| __DATA_CONST.__const _SBLockScreenTransientActiveInterfaceOrientationForUndimReason
|| __DATA_CONST.__const _SBLockScreenUIDidLockNotification
|| __DATA_CONST.__const _SBLockScreenUIRelockedNotification
|| __DATA_CONST.__const _SBLockScreenUIWillLockNotification
|| __DATA_CONST.__const _SBLockScreenUIWillLockNotificationAnimatedKey
|| __DATA_CONST.__const _SBLockScreenUndimmedNotification
|| __DATA_CONST.__const _SBLockdownDeviceActivatedChangedNotification
|| __DATA_CONST.__const _SBLoginAppBundleIdentifier
|| __DATA_CONST.__const _SBLowDensityIconLayoutEntitlement
|| __DATA_CONST.__const _SBMagnifierBundleIdentifier
|| __DATA_CONST.__const _SBMailBundleIdentifier
|| __DATA_CONST.__const _SBMainDisplayPolicyAggregatorCapabilitiesChangedNotification
|| __DATA_CONST.__const _SBMainSwitcherSwitcherSharedInstanceCreatedNotification
|| __DATA_CONST.__const _SBMapsBundleIdentifier
|| __DATA_CONST.__const _SBMediaApplicationActivityDidBeginNotification
|| __DATA_CONST.__const _SBMediaApplicationActivityDidEndNotification
|| __DATA_CONST.__const _SBMediaNowPlayingAppChangedNotification
|| __DATA_CONST.__const _SBMediaNowPlayingChangedNotification
|| __DATA_CONST.__const _SBMediaNowPlayingTrackElapsedTimeChangedNotification
|| __DATA_CONST.__const _SBMediaserverdBundleIdentifier
|| __DATA_CONST.__const _SBMedusaEnabledStateChangedNotification
|| __DATA_CONST.__const _SBMemoryPressureReturnedToNormalNotification
|| __DATA_CONST.__const _SBMemoryPressureUnderPressureNotification
|| __DATA_CONST.__const _SBMessagesBundleIdentifier
|| __DATA_CONST.__const _SBMobilePhoneBundleIdentifier
|| __DATA_CONST.__const _SBMultitaskingPreferencesEntitlement
|| __DATA_CONST.__const _SBMusicBundleIdentifier
|| __DATA_CONST.__const _SBNewSuggestedAppKey
|| __DATA_CONST.__const _SBNewsstandProcessAssertionsEntitlement
|| __DATA_CONST.__const _SBNonDefaultSystemAppTag
|| __DATA_CONST.__const _SBNotesBundleIdentifier
|| __DATA_CONST.__const _SBNotificationCarPlayDestinationAvailabilityDidChangeNotification
|| __DATA_CONST.__const _SBOpenURLInBackgroundEntitlement
|| __DATA_CONST.__const _SBOpenURLWhenLockedEntitlement
|| __DATA_CONST.__const _SBOrientationLockedForDeviceSetup
|| __DATA_CONST.__const _SBOverrideDisplayedDateEntitlement
|| __DATA_CONST.__const _SBPPTRunnerSiriBringupTestPrefix
|| __DATA_CONST.__const _SBPPTRunnerSiriTestPrefix
|| __DATA_CONST.__const _SBPassbookBundleIdentifier
|| __DATA_CONST.__const _SBPassbookUIServiceBundleIdentifier
|| __DATA_CONST.__const _SBPasscodePolicyChangedNotification
|| __DATA_CONST.__const _SBPersistentOverlayLoginKey
|| __DATA_CONST.__const _SBPersistentOverlayLogoutKey
|| __DATA_CONST.__const _SBPhotosBundleIdentifier
|| __DATA_CONST.__const _SBPresentPowerDownUIEntitlement
|| __DATA_CONST.__const _SBPreventDeviceLockEntitlement
|| __DATA_CONST.__const _SBPreventSpuriousScreenUndimEntitlement
|| __DATA_CONST.__const _SBPrintCenterBundleIdentifier
|| __DATA_CONST.__const _SBReachabilityActivatedAggdKey
|| __DATA_CONST.__const _SBReachabilityActivatedInAppKeyFormat
|| __DATA_CONST.__const _SBReachabilityActivatedInSpringBoardKeyFormat
|| __DATA_CONST.__const _SBReachabilityDismissedByFingerAggdKey
|| __DATA_CONST.__const _SBReachabilityDismissedByHomeAggdKey
|| __DATA_CONST.__const _SBReachabilityDismissedByTouchAggdKey
|| __DATA_CONST.__const _SBReachabilityDismissedTimeoutAfterInteractionAggdKey
|| __DATA_CONST.__const _SBReachabilityDismissedTimeoutAggdKey
|| __DATA_CONST.__const _SBReachabilityEnabledAggdKey
|| __DATA_CONST.__const _SBRecentAppLayoutsDidChangeNotification
|| __DATA_CONST.__const _SBRecentAppLayoutsDidInsertAtIndexesKey
|| __DATA_CONST.__const _SBRecentAppLayoutsDidModifyAtIndexesKey
|| __DATA_CONST.__const _SBRecentAppLayoutsDidRemoveAtIndexesKey
|| __DATA_CONST.__const _SBRecentLocalePreferenceKey
|| __DATA_CONST.__const _SBRemoteAlertTesterViewServiceBundleIdentifier
|| __DATA_CONST.__const _SBRemoteTransientOverlayViewControllerErrorDomain
|| __DATA_CONST.__const _SBRemoveWebClipFromHomeScreenEntitlement
|| __DATA_CONST.__const _SBRequestDeviceUnlockUIEntitlement
|| __DATA_CONST.__const _SBRequestSceneForDaemonEntitlement
|| __DATA_CONST.__const _SBRequestSuggestedAppEntitlement
|| __DATA_CONST.__const _SBResetHomeScreenLayoutEntitlement
|| __DATA_CONST.__const _SBResetOrRestoreStateDidChangeNotification
|| __DATA_CONST.__const _SBRestartManagerWillRebootNotification
|| __DATA_CONST.__const _SBRingerChangedNotification
|| __DATA_CONST.__const _SBRingerHUDIdentifier
|| __DATA_CONST.__const _SBSafariBundleIdentifier
|| __DATA_CONST.__const _SBSceneDataKeyActivationBias
|| __DATA_CONST.__const _SBSceneDataKeyActivationConditions
|| __DATA_CONST.__const _SBSceneDataKeyAppClipIdentifier
|| __DATA_CONST.__const _SBSceneDataKeyCanvasTitle
|| __DATA_CONST.__const _SBSceneDataKeyClassicAppZoomedIn
|| __DATA_CONST.__const _SBSceneDataKeyDefaultPNGExpirationAbsoluteTime
|| __DATA_CONST.__const _SBSceneDataKeyDefaultPNGName
|| __DATA_CONST.__const _SBSceneDataKeyDefaultStatusBarHidden
|| __DATA_CONST.__const _SBSceneDataKeyDefaultStatusBarStyle
|| __DATA_CONST.__const _SBSceneDataKeyPersistenceIdentifier
|| __DATA_CONST.__const _SBSceneIdentifierPrefix
|| __DATA_CONST.__const _SBSceneIdentifierPrefixFormat
|| __DATA_CONST.__const _SBScreenIsOnKey
|| __DATA_CONST.__const _SBScreenshotServicesServiceBundleIdentifier
|| __DATA_CONST.__const _SBSetAppBadgeStringEntitlement
|| __DATA_CONST.__const _SBSetAppUsingExternalAccessoryEntitlement
|| __DATA_CONST.__const _SBSetIconStateEntitlement
|| __DATA_CONST.__const _SBSetIdleTextEntitlement
|| __DATA_CONST.__const _SBSetTypingActiveEntitlement
|| __DATA_CONST.__const _SBSetVoiceControlEnabledEntitlement
|| __DATA_CONST.__const _SBSetWallpaperVariantEntitlement
|| __DATA_CONST.__const _SBSetWantsLockButtonEventsEntitlement
|| __DATA_CONST.__const _SBSettingsBundleIdentifier
|| __DATA_CONST.__const _SBSetupBuddyCompletedNotification
|| __DATA_CONST.__const _SBShowsBadgesInAppLibraryEntitlement
|| __DATA_CONST.__const _SBSidecarBundleIdentifier
|| __DATA_CONST.__const _SBSignificantAnimationDidEndNotification
|| __DATA_CONST.__const _SBSignificantAnimationWillBeginNotification
|| __DATA_CONST.__const _SBSignificantTimeChangeWasMidnightKey
|| __DATA_CONST.__const _SBSignificantTimeChangedNotification
|| __DATA_CONST.__const _SBSiriBundleIdentifier
|| __DATA_CONST.__const _SBSiriContinuityIdentifier
|| __DATA_CONST.__const _SBSpotlightBundleIdentifier
|| __DATA_CONST.__const _SBSpotlightTransientOverlayInteractiveGestureEventLabel
|| __DATA_CONST.__const _SBSpotlightVisibilityDidChangeNotification
|| __DATA_CONST.__const _SBSpringBoardDNDClientIdentifier
|| __DATA_CONST.__const _SBSpringBoardWillRestartReason
|| __DATA_CONST.__const _SBStartupTransitionContextKeyAppLaunchURL
|| __DATA_CONST.__const _SBStartupTransitionContextKeyFromAppBundleID
|| __DATA_CONST.__const _SBStartupTransitionContextKeyFromLocked
|| __DATA_CONST.__const _SBStartupTransitionContextKeyFromUserPowerDown
|| __DATA_CONST.__const _SBStartupTransitionContextKeyReason
|| __DATA_CONST.__const _SBStatusBarOverridesDidChangeNotification
|| __DATA_CONST.__const _SBStatusBarStyleOverridesAssertionEntitlement
|| __DATA_CONST.__const _SBStatusBarStyleOverridesCoordinatorEntitlement
|| __DATA_CONST.__const _SBStatusBarTappedNotification
|| __DATA_CONST.__const _SBSuggestedAppChangedNotification
|| __DATA_CONST.__const _SBSuppressKeyboardForUILock
|| __DATA_CONST.__const _SBSuspendSnapshotName
|| __DATA_CONST.__const _SBSwitcherDemoCommandsEntitlement
|| __DATA_CONST.__const _SBSystemGestureTrackingMilestone
|| __DATA_CONST.__const _SBTTYChangedNotification
|| __DATA_CONST.__const _SBTVRemoteUIServiceBundleIdentifier
|| __DATA_CONST.__const _SBTestFlightBundleIdentifier
|| __DATA_CONST.__const _SBThermalControllerStateDidChange
|| __DATA_CONST.__const _SBTransactionErrorAppRepairFailed
|| __DATA_CONST.__const _SBTransactionErrorAppRepairRequiresDataConnection
|| __DATA_CONST.__const _SBTransactionErrorAutoPiPFailed
|| __DATA_CONST.__const _SBUIACStatusChangedNotification
|| __DATA_CONST.__const _SBUIAppSwitcherObscuredNotification
|| __DATA_CONST.__const _SBUIAppSwitcherRevealedNotification
|| __DATA_CONST.__const _SBUIAppSwitcherWillRevealNotification
|| __DATA_CONST.__const _SBUIApplicationIconLaunchEventLabel
|| __DATA_CONST.__const _SBUIBatteryNotChargingStatusChangedNotification
|| __DATA_CONST.__const _SBUIControllerWallpaperOrientationSourceReason
|| __DATA_CONST.__const _SBUIExternalChargeAccessoryConnectedStatusChangedNotification
|| __DATA_CONST.__const _SBUIHeadsetDockStatusChangedNotification
|| __DATA_CONST.__const _SBUIHomeScreenActiveContentRequirementReason
|| __DATA_CONST.__const _SBUILaunchOptionKeyActivationSettings
|| __DATA_CONST.__const _SBUILockOptionsAnimateLockScreenActivationKey
|| __DATA_CONST.__const _SBUILockOptionsAnimationTransactionProviderKey
|| __DATA_CONST.__const _SBUILockOptionsForceBioLockoutKey
|| __DATA_CONST.__const _SBUILockOptionsForceLockKey
|| __DATA_CONST.__const _SBUILockOptionsIgnoreCallKey
|| __DATA_CONST.__const _SBUILockOptionsLockAutomaticallyKey
|| __DATA_CONST.__const _SBUILockOptionsUseScreenOffModeKey
|| __DATA_CONST.__const _SBUIUnlockOptionsBypassPasscodeKey
|| __DATA_CONST.__const _SBUIUnlockOptionsNoPasscodeAnimationKey
|| __DATA_CONST.__const _SBUIUnlockOptionsRequestedOrientationKey
|| __DATA_CONST.__const _SBUIUnlockOptionsStartFadeInAnimation
|| __DATA_CONST.__const _SBUIUnlockOptionsSuppressingWakeToKey
|| __DATA_CONST.__const _SBUIUnlockOptionsTurnOnScreenFirstKey
|| __DATA_CONST.__const _SBUIUnsupportedChargingAccessoryStatusChangedNotification
|| __DATA_CONST.__const _SBUnlimitedProcessAssertionsEntitlement
|| __DATA_CONST.__const _SBUseModernUILockScreenPreferenceKey
|| __DATA_CONST.__const _SBUserNotificationDoneNotification
|| __DATA_CONST.__const _SBUserSessionControllerDomain
|| __DATA_CONST.__const _SBVPNConnectionChangedNotification
|| __DATA_CONST.__const _SBViewServicesEntitlement
|| __DATA_CONST.__const _SBVirtualDisplayTestAppBundleIdentifier
|| __DATA_CONST.__const _SBVoiceMemosBundleIdentifier
|| __DATA_CONST.__const _SBWTErrorDomain
|| __DATA_CONST.__const _SBWTInterruptReasonHome
|| __DATA_CONST.__const _SBWTInterruptReasonLock
|| __DATA_CONST.__const _SBWTMilestoneAnimationFinished
|| __DATA_CONST.__const _SBWTMilestoneAnimationKeepAlive
|| __DATA_CONST.__const _SBWalletPreArmControllerPreArmSuppressionDidChange
|| __DATA_CONST.__const _SBWallpaperAccessEntitlement
|| __DATA_CONST.__const _SBWallpaperAnimationSuspensionAssertionEntitlement
|| __DATA_CONST.__const _SBWallpaperBackdropGroupName
|| __DATA_CONST.__const _SBWallpaperControllerDefaultCachingIdentifier
|| __DATA_CONST.__const _SBWallpaperIdentifierHomescreenWallpaperAggdKey
|| __DATA_CONST.__const _SBWallpaperIdentifierLockscreenWallpaperAggdKey
|| __DATA_CONST.__const _SBWallpaperIrisEnabledAggdKey
|| __DATA_CONST.__const _SBWallpaperIrisPlayCountAggdKey
|| __DATA_CONST.__const _SBWallpaperSharedWallpaperBetweenHomeAndLockScreen
|| __DATA_CONST.__const _SBWallpaperTypeHomescreenWallpaperAggdKey
|| __DATA_CONST.__const _SBWallpaperTypeLockscreenWallpaperAggdKey
|| __DATA_CONST.__const _SBWallpaperViewBatterySaverReason
|| __DATA_CONST.__const _SBWallpaperViewIsDarkOrHiddenReason
|| __DATA_CONST.__const _SBWebAppBundleIdentifier
|| __DATA_CONST.__const _SBWebBookmarkWasUninstalledNotification
|| __DATA_CONST.__const _SBWebClipServiceEntitlement
|| __DATA_CONST.__const _SBWebClipServiceWillLaunchWebClipBundleIdentifierKey
|| __DATA_CONST.__const _SBWebClipServiceWillLaunchWebClipNotificationName
|| __DATA_CONST.__const _SBWidgetMetricsServiceEntitlement
|| __DATA_CONST.__const _SBWifiManagerLinkDidChangeNotification
|| __DATA_CONST.__const _SBWifiManagerLinkHotSpotnessDidChangeNotification
|| __DATA_CONST.__const _SBWifiManagerLinkWillChangeNotification
|| __DATA_CONST.__const _SBWifiManagerPrimaryInterfaceMayHaveChangedNotification
|| __DATA_CONST.__const _SBWifiSignalStrengthChangedNotification
|| __DATA_CONST.__const _SBWindowDragPrivateTypeIdentifier
|| __DATA_CONST.__const _SBWorkspaceDidWakeFromSleepNotification
|| __DATA_CONST.__const _SBWorkspaceDisplayKey
|| __DATA_CONST.__const _SBiCloudDriveBundleIdentifier
|| __DATA_CONST.__const _SBiPhotoBundleIdentifier
|| __DATA_CONST.__const _SBiPodOutBundleIdentifier
|| __DATA_CONST.__const _UseEmergencyServicesTestNumber
|| __DATA_CONST.__const ___PPTAppCloseCenterZoomTestname
|| __DATA_CONST.__const ___PPTAppCloseInFolderTestname
|| __DATA_CONST.__const ___PPTAppCloseTestname
|| __DATA_CONST.__const ___PPTAppCloseWithScreenTimeOverlayTestname
|| __DATA_CONST.__const ___PPTAppIconForceTouchDismissInDockTestname
|| __DATA_CONST.__const ___PPTAppIconForceTouchDismissTestname
|| __DATA_CONST.__const ___PPTAppIconForceTouchPresentInDockTestname
|| __DATA_CONST.__const ___PPTAppIconForceTouchPresentTestname
|| __DATA_CONST.__const ___PPTAppOpenCenterZoomTestname
|| __DATA_CONST.__const ___PPTAppOpenInFolderTestname
|| __DATA_CONST.__const ___PPTAppOpenTestname
|| __DATA_CONST.__const ___PPTAppOpenWithScreenTimeOverlayTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupOverAppInScreenTimeRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupOverAppInScreenTimeTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupOverAppRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupOverAppTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherBringupTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissOverAppInScreenTimeRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissOverAppInScreenTimeTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissOverAppRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissOverAppTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissRotatedTestname
|| __DATA_CONST.__const ___PPTAppSwitcherDismissTestname
|| __DATA_CONST.__const ___PPTAppSwitcherTapContinuityBannerTestname
|| __DATA_CONST.__const ___PPTDashBoardPasscodeDismissSubTestname
|| __DATA_CONST.__const ___PPTDashBoardPasscodePresentSubTestname
|| __DATA_CONST.__const ___PPTDashBoardPasscodeTestname
|| __DATA_CONST.__const ___PPTDeweyCollapsePodSubTestname
|| __DATA_CONST.__const ___PPTDeweyExpandPodSubTestname
|| __DATA_CONST.__const ___PPTDeweyPullToLibrarySearchDismissSubTestname
|| __DATA_CONST.__const ___PPTDeweyPullToLibrarySearchPresentSubTestname
|| __DATA_CONST.__const ___PPTDeweyPullToLibrarySearchTestname
|| __DATA_CONST.__const ___PPTFolderCloseTestname
|| __DATA_CONST.__const ___PPTFolderOpenTestname
|| __DATA_CONST.__const ___PPTFolderRotationTestname
|| __DATA_CONST.__const ___PPTHomeScreenEnterPageHidingTestname
|| __DATA_CONST.__const ___PPTHomeScreenExitPageHidingTestname
|| __DATA_CONST.__const ___PPTHomeScreenIconPullToSpotlightColdTestname
|| __DATA_CONST.__const ___PPTHomeScreenIconPullToSpotlightDismissTestname
|| __DATA_CONST.__const ___PPTHomeScreenIconPullToSpotlightTestname
|| __DATA_CONST.__const ___PPTHomeScreenRotationTestname
|| __DATA_CONST.__const ___PPTHomeScreenSwipeLeftToTodayViewTestname
|| __DATA_CONST.__const ___PPTHomeScreenSwipeRightFromTodayViewTestname
|| __DATA_CONST.__const ___PPTScrollDeweyLibrarySearchTestname
|| __DATA_CONST.__const ___PPTScrollDeweyTestname
|| __DATA_CONST.__const ___PPTScrollDeweyWithinExpandedPodSubtestname
|| __DATA_CONST.__const ___PPTScrollDeweyWithinExpandedPodTestname
|| __DATA_CONST.__const ___PPTScrollFolderTestname
|| __DATA_CONST.__const ___PPTScrollIconListTestname
|| __DATA_CONST.__const ___PPTScrollIconListWithFoldersTestname
|| __DATA_CONST.__const ___PPTScrollIconListWithWidgetsTestname
|| __DATA_CONST.__const ___PPTScrollJigglyIconListTestname
|| __DATA_CONST.__const ___PPTScrollJigglyIconListWithWidgetsTestname
|| __DATA_CONST.__const ___PPTScrunchHomeToAutoPiPTestname
|| __DATA_CONST.__const ___PPTSpotlightDismissSubTestname
|| __DATA_CONST.__const ___PPTSpotlightPresentSubTestname
|| __DATA_CONST.__const ___PPTSwipeFromDeweyTestname
|| __DATA_CONST.__const ___PPTSwipeToDeweyTestname
|| __DATA_CONST.__const ___PPTSwipeUpHomeToAutoPiPTestname
|| __DATA_CONST.__const _kDisplayItemBundleIDKey
|| __DATA_CONST.__const _kDisplayItemTypeKey
|| __DATA_CONST.__const _kDisplayItemUniqueIDKey
|| __DATA_CONST.__const _kSBAssistantHidingOtherWindowsReason
|| __DATA_CONST.__const _kSBCommunicationPolicyChangedBundleIdentifiersKey
|| __DATA_CONST.__const _kSBInstalledApplicationsAddedBundleIDsKey
|| __DATA_CONST.__const _kSBInstalledApplicationsRemovedBundleIDsKey
|| __DATA_CONST.__const _kSBInstalledApplicationsReplacedBundleIDsKey
|| __DATA_CONST.__const _kSBInstalledApplicationsUpdatedBundleIDsKey
|| __DATA_CONST.__const _kSBSyncSessionBegan
|| __DATA_CONST.__const _kSBSyncSessionEnded
|| __DATA_CONST.__const _kSBWirelessAppSyncBegan
|| __DATA_CONST.__const _kSBWirelessAppSyncEnded
|| __DATA_DIRTY.__common _SBApp
|| __DATA_DIRTY.__common ___CheckForLeaks
|| __DATA_DIRTY.__common ___PPTResetStateWhenDone
|| __DATA_DIRTY.__common ___PPTTestInProgress
|| __DATA_DIRTY.__common ___ScrollTestCurrentPageIndex
|| __DATA_DIRTY.__common ___SkipScrollBeforeLaunch
|| __DATA_DIRTY.__common ___extendedModeNotifyToken
|| __DATA_DIRTY.__common ___extendedModeNotifyTokenIsValid
|| __DATA_DIRTY.__common _kSBAssistantBottomEdgeAngleWindow
|| __DATA_DIRTY.__common _kSBAssistantBottomEdgeDismissTranslationThreshold
|| __DATA_DIRTY.__common _kSBAssistantBottomEdgeDismissVelocityThreshold
|| __DATA_DIRTY.__data ___ScrollTestPageIncrement
|| __DATA_DIRTY.__data ___ScrollTestTargetPageIndex
|| __DATA_DIRTY.__data _kSBAssistantDefaultAnimationDuration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NCUserAlertActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NCUserAlertDefaultActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_NCUserAlertDismissActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAVSystemControllerCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAWDMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAWDMetricData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAccessibilityHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAccessibilityMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAccessibilityWindowHostingControllerServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAccountStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActionHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivateApplicationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivateHomeButtonSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivationFailedAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBActivityAttribution
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAdvanceDateOverrideTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAirplaneModeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertImageHeaderViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemPresentation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemsController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertItemsObjectQueue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAlertLayoutPresentationVerifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnalyticsStateMachineEdge
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnalyticsStateMachineEventHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnimationUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnimationWrapperHostRequester
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnimationWrapperViewLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppClipOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppExitedWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppLayout
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppLibraryMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppPlatterDragPreview
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppStatusBarAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppStatusBarContentAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppStatusBarSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppStatusBarSettingsAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSuggestionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherOrbGestureAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherOrbGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherPageShadowView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherPageView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherReusableSnapshotView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherScrollView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherServiceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSnapshotCacheEntry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSnapshotImageCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSnapshotLockoutViewControllerProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSnapshotViewState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherSystemService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherTransientOverlayPageContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppToAppWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppVisibilityPreferences
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplication
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationAutoLaunchService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationHarmonyService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLaunchAlertEvaluatorFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLaunchAlertService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLaunchImageParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLayoutGestureMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationLibraryObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationMultiwindowService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationPlaceholder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationPlaceholderController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationPlaceholderProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationProcessState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationRestrictionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneHandleRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneSpecification
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneUpdateTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSceneViewStatusBarDescriptor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutPolluterRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutReportRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationShortcutStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationStateServiceDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationStateServiceSingleton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSupportServiceDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSupportServiceRequestContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationSupportServiceSingleton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationTestingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationUserQuitMonitorServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAssistantWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAsymmetricalCornerRadiusWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAsynchronousRenderingAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAttentionAwarenessClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAttentionAwarenessSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAuthenticationFeedback
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAutoPiPWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAutoUnlockComposableRule
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAvocadoDebuggingController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBackBoardServicesInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBackgroundFetchExternalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBackgroundFetchTask
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBackgroundMultitaskingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBacklightController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBacklightIdleTimer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBacklightStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBadgeCountRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBannerGestureRecognizerPriorityAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBannerManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBannerWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBarSwipeAffordanceView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBarSwipeAffordanceViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBaseStartupTransition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBestAppSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBiometricAuthenticationPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBiometricEventLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBiometricMonitorTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBiometricsService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBlockWorkspaceQueueTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBluetoothAccessoryBatteryMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBluetoothController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBookmarkIcon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBreadcrumbActionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBreadcrumbMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBulletinLocalObserverGateway
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBulletinSpokenObserverGateway
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBulletinSystemStateAdapter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBButtonConsumerClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBButtonConsumerRegistration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCalendarApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCalendarIconImageProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraApplication
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraHardwareButtonDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraHardwareButtonSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraHardwareButtonStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCarDoNotDisturbController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCarDoNotDisturbExitConfirmationAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCardItemsController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChainableModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChainableModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChainableModifierEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChainableModifierMethodCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChronoApplicationProcessStateObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBChronoHomeScreenUsageObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClawGestureLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClickGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClientAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClockApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBClockApplicationIconImageView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCombinationHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCombinationHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCommandTabController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCommandTabViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCommunicationPolicyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBConferenceManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterModuleTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterRingerSwitchController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterSystemAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBControlCenterWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoplanarSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetBiometricResourceObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetBlurView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetIconFlyInAnimator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetPanelBackgroundContainerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetParallaxContainerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetPositionView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetPrimarySlidingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetSceneManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetSecureAppEnvironmentViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetSlidingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetSystemGesturesDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCoverSheetWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCrossfadeDosidoSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDaemonContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDaemonHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDaemonRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardAnalyticsEmitter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardApplicationInformer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardApplicationLauncher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardBiometricUnlockController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardCameraPageViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardEmergencyDialerController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardHostedAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardIdleTimerController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardIdleTimerProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardLegibilityProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardLockScreenEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardMesaUnlockBehavior
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardMesaUnlockBehaviorConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardModalHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardNotificationPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardOrientationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardPearlUnlockBehavior
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardPluginController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardPolicyBasedBehaviorProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardSetupController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardSetupView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardSetupViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardStatusBarController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardThermalStatusProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardViewExternalControllerBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDashBoardWallpaperViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDataAccessDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDataAccessSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDataRecoveryController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeckSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeckSwitcherPanGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeckSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeckToFullScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultAuthenticationPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultCoverSheetContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultIconModelStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultLaunchSnapshotTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaultProximityBacklightPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDelayedPressInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeleteNonAppIconAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDesiredIconStateMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeveloperBuildExpirationTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationAppClipOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationRemoteTransientOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneHandle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationScenePlaceholderContentContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneStatusBarBreadcrumbProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneStatusBarStateProvider_Base
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneViewLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationSceneViewPlaceholderContentViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceApplicationScreenTimeLockoutViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceOrientationUpdateDeferralAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceOrientationUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDeviceUnlockAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDirectToAirPlayController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDirectToAirPlayTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDisableActiveInterfaceOrientationChangeAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDisabledIdleTimer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDismissEmergencyCallRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDismissOnlyAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDismissOverlaysAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDismissSiriSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDismissSiriSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDisplayBrightnessController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDisplayItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDockInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDockSuggestionsMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDosidoScaleAnimationSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDosidoSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDoubleClickSleepWakeHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDragAndDropAppActivationWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDraggingSystemManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBElasticSliderMaterialWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBElasticSliderView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBElasticVolumeViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEmitSBEventSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEmptyWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalDosidoDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalDosidoSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalDosidoSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalDosidoSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalFloatingDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalFloatingSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalFloatingSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalFloatingSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalMedusaDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalMedusaSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalMedusaSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEntityRemovalMedusaSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBEventObserverRegistry
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalDisplayManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalGlobalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalNotesDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalSoundsDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBExternalWifiDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMotionGestureController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFaceContactExpectationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFaceIDCoachingConditionRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFailureNotifyingTapGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFakeiTunesRestoreTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFallbackSnapshotDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFixedLayoutModeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingApplicationInlineAppExposeLiveContentOverlayView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingApplicationSceneLiveContentOverlayView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingApplicationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingDockBehaviorAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingDockController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingDockWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingSwitcherLiveContentOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFloatingSwitcherSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidScrunchGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherAppLayoutHeaderItemController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGesture
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGestureExclusionTrapezoid
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherIconImageContainerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherIconOverlayView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherItemContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherItemContainerHeaderItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherItemContainerHeaderView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherLayoutContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherPageContentViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherPanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherTitledButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherTouchPassThroughScrollView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFluidSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFolderStatsQueryableMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenAppLayoutSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenFluidSwitcherRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenOcclusionTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenSwitcherLiveContentOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenToHomeCenterZoomDownSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenToHomeIconZoomSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullScreenToHomeSlideOverSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFullscreenZoomView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGestureRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGestureSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGestureSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGrabberTongue
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGreenController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGuidedAccessListener
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBAcceleratedSinglePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBDoublePressDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBDoublePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBDoubleTapUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBInitialPressDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBInitialPressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBLongPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBSinglePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHBTriplePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHIDButtonStateArbiter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHIDInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHIDUILockAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHUDWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHapticSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareButtonActionList
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareButtonGestureParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareButtonGestureParametersProviderBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareButtonService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHarmonyController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHarmonySettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHistorianSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeButtonPressMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureArbiter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureArbiterRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureExclusionTrapezoidSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureFinalDestinationSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGesturePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureParticipant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureToHomeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGestureToSwitcherSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGrabberRevealGesturesManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGrabberRotationView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeGrabberView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeHardwareButtonGestureRecognizerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenBackdropDarkTintView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenBackdropView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenBackdropViewBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenOverlayController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenPreviewView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenSpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenTodayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeToDeckSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeToSwitcherSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconDeleteMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconDragPlatterWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconFlockingMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconLaunchContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconLaunchMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconListScrollingRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconOverlayVisibilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconPageHidingMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconRelayoutRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconStateArchiver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconViewVisibilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconVisibilityService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerAggregateClientConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerBehavior
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerConfigurationDisablesTimerSetting
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerCoordinatorHelper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerDescriptor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerDescriptorFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerGlobalCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerGlobalStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIgnoredForAutorotationSecureWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBImageHeaderAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInAppStatusBarHiddenAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallBannerPresentableViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallBannerSceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallPresentationRequestServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallPresentationSceneUpdateContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallPresentationSession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallSceneUpdateWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallTransientOverlayManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallTransientOverlayPresentationContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallTransientOverlayPresentationWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInCallTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInProcessSecureAppAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIndirectPanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInitialRestartState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInlineAppExposeContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInsecureDrawingAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInsertionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInteractionAfterWakeMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInternalClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBInvalidateAdjustedAppLayoutsSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIsolatedSceneOrientationFollowingWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIsolatedSceneOrientationFollowingWrapperViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKeyboardFocusHoldAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKeyboardHomeAffordanceAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKeyboardHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBKeyboardSuppressionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutElement
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutElementViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutStateTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLayoutStateTransitionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLiftToWakeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLiftToWakeManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLiftToWakeStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLiquidDetectionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenActionContextFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenActionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenAutoUnlockAggregateRule
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenBiometricAuthenticationCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenContentAssertionTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenDisableAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenDisabledAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenOrientationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenPluginManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenPreviewView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenUnlockRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenViewControllerBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockStateAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockdownManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockedModalAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockedPointerManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLogWindowTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLogoutProgressTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLogoutProgressView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLongPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLowBatteryLogTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLowEndHardwareSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLowPowerAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayInterfaceOrientationAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayLayoutState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayLayoutStateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayRootWindowScenePresentationBinder
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneLayoutGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneLayoutStatusBarView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneLayoutViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneLayoutWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySceneManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplaySystemGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayWindowLayoutStrategy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainDisplayWorkspaceAppInteractionEventSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainScreenActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainStatusBarContentAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainSwitcherLiveContentOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainSwitcherTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainSwitcherWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainTransitionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspaceApplicationSceneLayoutElementViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspaceLayoutStateContingencyPlan
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMainWorkspaceTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMatchMoveToIconViewSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMediaController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusa1oSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaAppsTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaConfigurationUsageMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaDecoratedDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaDragAndDropMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaHostedKeyboardWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaHostedKeyboardWindowLevelAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaOrientationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMedusaSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModalAlertPresentationCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModalAlertPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModalUIFluidDismissGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModalViewControllerStack
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModelessSyncController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModifierCacheCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBModifierCacheSelectorList
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMousePointerManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMoveFloatingApplicationGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMoveGestureFloatingSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableAppStatusBarSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableDeviceApplicationScenePlaceholderContentContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableHardwareButtonGestureParameters
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableInitialRestartState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableSwitcherAnimationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableSwitcherLiveContentRasterizationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableSwitcherScrollViewAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableSwitcherTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMutableTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCAlertingController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCNotificationDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCNotificationDispatcherDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCScreenController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNCSoundController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNetworkReselectionAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNetworkReselectionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNewsstandMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotchedStatusBarProximityBacklightPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotchedStatusBarProximityBacklightPolicyEnablementCondition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationBannerDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationCarPlayDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationLongLookBannerPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationPresentableViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNubView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBOmnibusAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBOrientationAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBOrientationLockManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPBAppLayout
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPBAppLayoutList
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPBDisplayItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPAnalyticsAssistant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPAnalyticsSourceSummaryAssistant
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPBehaviorOverrideAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPEnvironmentDependentOverrideAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPInterruptionAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPInterruptionDebouncingTimer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPStashAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPPTBlockOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPPTOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPPTRunner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPanSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPasscodeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPasscodeEntryTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPearlInterlockObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPearlUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPerformTransitionSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPhoneAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPlatformController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPocketStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPolygon
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPortalView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPowerDownViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPreemptAnimationSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPresentCoverSheetRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPresentFloatingDockTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressCollector
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressGestureStateInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressPrecedenceArbiter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceMetricData
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressSequenceValidator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPressTuple
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPreviousWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPriorityDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProactiveHomeScreenSuggestionProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProactiveHomeScreenUsageObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProactiveLibraryCategoryMapProviderSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProcessSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPrototypeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPrototypeDumpingGround
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProximityBacklightPolicyFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProximitySensorManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBProximitySettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityBackgroundViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilitySettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReachabilityWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRebootRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecalibrateProximitySensorHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecentAppLayouts
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecentAppLayoutsPersister
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecordingIndicatorWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRecycledViewsContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReloadWallpaperTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteAlertHandleLocalClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteAlertHandleServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlayHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlaySession
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlaySessionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRemoteTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRenderOverlayRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRestartManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRestartManagerWorkspaceDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReusableSnapshotItemContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReverseCountedSemaphore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRingerControl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRingerHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRingerPillView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRingerVolumeSliderView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRootSceneWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRootSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRotateHomeScreenWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRunWallpaperMigrationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSOSClawGestureObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSOSEventHandler
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSOSLockGestureObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneBackgroundedStatusAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneDataStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneDisconnectionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutAnimationWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutElementAnimationWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutFrameCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutOrientationCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutSynchronizeTransitionTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutWhitePointAdaptationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneLayoutWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneManagerCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneManagerReference
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneSnapshotDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneStatusBarManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneViewStatusBarAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSceneWatchdogProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScheduledAlarmObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenFlash
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenTimeTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenWakeAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenshotManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScreenshotManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScrollSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScrollToAppLayoutSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBScrollToTopSceneProxyView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureAppManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureAppPolicy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureAppWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureMainDisplaySceneManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureMainScreenActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecureWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSensorActivityAttribution
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSensorActivityDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSetupManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSetupWiFiScanner
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSharedModalAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSimScrollToIconTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSiriHardwareButtonEventsOnlyButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSiriHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSleepWakeHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSnapshotDataProviderContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSnapshotTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSnapshotWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoftLockoutController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoftwareUpdatePasscodePolicyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoftwareUpdateService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoundController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoundPreferences
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSplashBoardController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSplashBoardLaunchRequestProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpotlightDelegateManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpotlightLegibilityProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpotlightMultiplexingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpotlightTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpringloadingMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSpuriousScreenUndimmingAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionContextPersistence
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionFactory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionToLockOut
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStartupTransitionToSetup
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStateDumpService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarContainer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarForcedHiddenTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarStateAggregator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarStyleOverridesAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarStyleOverridesCoordinatorClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarTapManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSuspendedUnderLockManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSuspendedWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwipeMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAccessoryLayoutElement
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAnimationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAppSuggestionBannerView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAppSuggestionContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherAppSuggestionViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherCardUpdateTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDemoCommandsServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDemoFilteringController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDisplayItemRemovalResolutionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDisplayItemRemovalResolutionResultAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherDisplayItemRemovalResolutionResults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherForcePressSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherLiveContentRasterizationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModelRemovalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModelRemovalRequestAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModelRemovalResultAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModelRemovalResults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherModifierEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherPresentationInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherScrollViewAttributes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherSnapshotImageView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherToAppTransitionMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSwitcherWallpaperPageContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSyncController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSynchronizeCloudCriticalDataOperation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemAnimationDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemGestureMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemGestureUsageMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemHapticsPreferencesMetric
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemPointerInteractionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemServiceServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemStatusBatteryDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSystemStatusWifiDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTapToWakeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTelephonyManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTestAutomationService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTestRecipeRegistrar
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTestableAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBThermalController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTimerEventSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTimerSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTodayIconListLayoutDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTodayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTodayViewSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBToggleClassroomPluginTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTouchHistory
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTouchRegionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTouchTemplate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTouchTemplateGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientActiveInterfaceOrientationRequester
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayBlockTransitionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDefaultTransitionContextProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissAllToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissAllWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayPresentWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransientOverlayWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransitionSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransitionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTransitionSwitcherModifierRemovalContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIAnimationControllerAnimator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIAnimationPropertyAnimator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIBlockAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIImageDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIMainScreenAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIPasscodeViewWithLockScreenStyle
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUISettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIStartupFromOverlayAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUISwitcherAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUIWorkspaceAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUnlockedAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUpdateLayoutSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserAgent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserAlertNotificationSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserNotificationAlert
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserNotificationCenter
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUserSessionController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVODController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBViewSnapshotProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVoiceControlController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVoiceDisabledBundles
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeControl
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeControlState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeHUDDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeHUDSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBVolumeHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWakeDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWakeToInCallWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWalletNotificationSource
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWalletPreArmController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperEffectViewBase
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperLegibilitySettingsProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperPreviewSnapshotCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperStyleInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperStyleRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWebApplication
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWebClipService
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWiFiManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWidgetController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWidgetLaunchStatsTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWidgetMetricsServer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowHideState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowHidingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowScene
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWindowSelfHostWrapper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWipeSnapshotManifestTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceApplicationSceneTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceEntityRemovalContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceKeyboardFocusController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransientOverlay
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransientOverlayTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBZionUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBZoomView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBiCloudPasscodeRequirementLockoutController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SpringBoard
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_UIGestureRecognizerTransformAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_UIGestureRecognizerTransformAnalyzerInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBAppContainerStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBAppSwitcherSnapshotCacheKey
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBAppSwitcherSnapshotImageCacheRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBApplicationLaunchAlertInfo
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBDashBoardHostedAppStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBDeviceApplicationSceneStatusBarStateProviderObserverRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBDeviceApplicationSceneViewPlaceholderContentView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBDirectToAirPlayPolicyState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBExpertAppSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBFakeBlurView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBFullScreenAppFloorSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBFullScreenSwitcherLiveContentOverlayContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHUDHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHUDModel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHomeScreenFloorSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHomeScreenFolderDelegate
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBHostedKeyboardViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBIdleTimerGlobalBoolSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBIdleTimerGlobalNumericSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBIdleTimerGlobalSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBInCallPresentationRequestServerTarget
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBInCallProxySceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBLoadApplicationResult
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBMainScreenActiveInterfaceOrientationWindowRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBModalViewControllerStackTransition
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBMutableDirectToAirPlayPolicyState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBProximityTouchHandlingView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBProximityTouchHandlingViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBProximityTouchHandlingWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBRemoteAlertHandleServerTarget
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBSUICFUserNotificationContentHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBScreenshotPersistenceCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBStatusBarLocalDataOverridesWrapper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBStatusBarTapApplicationDestination
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBTestRecipeDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBTestRecipeSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBTintView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBTransientOverlayPresentedEntity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBUIAnimationControllerCoordinatingChildRelationship
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBWallpaperViewControllerAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBWallpaperViewControllerScaleAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBWallpaperWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NCUserAlertActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NCUserAlertDefaultActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_NCUserAlertDismissActionRunner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAVSystemControllerCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAWDMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAWDMetricData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAccessibilityHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAccessibilityMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAccessibilityWindowHostingControllerServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAccountStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActionHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivateApplicationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivateHomeButtonSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivationFailedAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBActivityAttribution
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAdvanceDateOverrideTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAirplaneModeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertImageHeaderViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemPresentation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemsController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertItemsObjectQueue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAlertLayoutPresentationVerifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnalyticsStateMachineEdge
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnalyticsStateMachineEventHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnimationUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnimationWrapperHostRequester
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnimationWrapperViewLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppClipOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppExitedWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppLayout
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppLibraryMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppPlatterDragPreview
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppStatusBarAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppStatusBarContentAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppStatusBarSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppStatusBarSettingsAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSuggestionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherOrbGestureAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherOrbGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherPageShadowView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherPageView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherReusableSnapshotView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherScrollView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherServiceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSnapshotCacheEntry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSnapshotImageCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSnapshotLockoutViewControllerProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSnapshotViewState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherSystemService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherTransientOverlayPageContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppToAppWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppVisibilityPreferences
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplication
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationAutoLaunchService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationHarmonyService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchAlertEvaluatorFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchAlertService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLaunchImageParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLayoutGestureMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationLibraryObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationMultiwindowService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationPlaceholder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationPlaceholderController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationPlaceholderProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationProcessState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationRestrictionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneHandleRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneSpecification
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneUpdateTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSceneViewStatusBarDescriptor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutPolluterRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutReportRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationShortcutStoreManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationStateServiceDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationStateServiceSingleton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSupportServiceDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSupportServiceRequestContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationSupportServiceSingleton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationTestingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationUserQuitMonitorServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAssistantWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAsymmetricalCornerRadiusWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAsynchronousRenderingAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAttentionAwarenessClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAttentionAwarenessSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAuthenticationFeedback
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAutoPiPWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAutoUnlockComposableRule
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAvocadoDebuggingController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBackBoardServicesInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBackgroundFetchExternalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBackgroundFetchTask
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBackgroundMultitaskingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBacklightController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBacklightIdleTimer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBacklightStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBadgeCountRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBannerGestureRecognizerPriorityAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBannerManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBannerWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBarSwipeAffordanceView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBarSwipeAffordanceViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBaseStartupTransition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBestAppSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBiometricAuthenticationPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBiometricEventLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBiometricMonitorTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBiometricsService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBlockWorkspaceQueueTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBluetoothAccessoryBatteryMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBluetoothController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBookmarkIcon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBreadcrumbActionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBreadcrumbMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBulletinLocalObserverGateway
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBulletinSpokenObserverGateway
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBulletinSystemStateAdapter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBButtonConsumerClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBButtonConsumerRegistration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCalendarApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCalendarIconImageProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraApplication
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraHardwareButtonDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraHardwareButtonSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraHardwareButtonStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCarDoNotDisturbController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCarDoNotDisturbExitConfirmationAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCardItemsController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChainableModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChainableModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChainableModifierEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChainableModifierMethodCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChronoApplicationProcessStateObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBChronoHomeScreenUsageObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClawGestureLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClickGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClientAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClockApplicationIcon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBClockApplicationIconImageView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCombinationHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCombinationHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCommandTabController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCommandTabViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCommunicationPolicyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBConferenceManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterModuleTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterRingerSwitchController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterSystemAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBControlCenterWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoplanarSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetBiometricResourceObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetBlurView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetIconFlyInAnimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetPanelBackgroundContainerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetParallaxContainerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetPositionView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetPrimarySlidingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetSceneManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetSecureAppEnvironmentViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetSlidingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetSystemGesturesDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCoverSheetWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCrossfadeDosidoSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDaemonContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDaemonHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDaemonRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardAnalyticsEmitter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardApplicationInformer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardApplicationLauncher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardBiometricUnlockController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardCameraPageViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardEmergencyDialerController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardHostedAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardIdleTimerController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardIdleTimerProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardLegibilityProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardLockScreenEnvironment
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardMesaUnlockBehavior
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardMesaUnlockBehaviorConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardModalHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardNotificationPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardOrientationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardPearlUnlockBehavior
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardPluginController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardPolicyBasedBehaviorProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardSetupController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardSetupView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardSetupViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardStatusBarController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardThermalStatusProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardViewExternalControllerBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDashBoardWallpaperViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDataAccessDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDataAccessSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDataRecoveryController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeckSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeckSwitcherPanGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeckSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeckToFullScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultAuthenticationPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultCoverSheetContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultIconModelStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultLaunchSnapshotTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaultProximityBacklightPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDelayedPressInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeleteNonAppIconAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDesiredIconStateMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeveloperBuildExpirationTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationAppClipOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationRemoteTransientOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneHandle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneOverlayViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationScenePlaceholderContentContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneStatusBarBreadcrumbProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneStatusBarStateProvider_Base
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneViewLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationSceneViewPlaceholderContentViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceApplicationScreenTimeLockoutViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceOrientationUpdateDeferralAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceOrientationUpdateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDeviceUnlockAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDirectToAirPlayController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDirectToAirPlayTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDisableActiveInterfaceOrientationChangeAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDisabledIdleTimer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDismissEmergencyCallRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDismissOnlyAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDismissOverlaysAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDismissSiriSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDismissSiriSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDisplayBrightnessController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDisplayItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDockInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDockSuggestionsMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDosidoScaleAnimationSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDosidoSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDoubleClickSleepWakeHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDragAndDropAppActivationWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDraggingSystemManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBElasticSliderMaterialWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBElasticSliderView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBElasticVolumeViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEmitSBEventSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEmptyWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDosidoDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDosidoSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDosidoSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalDosidoSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalFloatingDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalFloatingSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalFloatingSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalFloatingSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalMedusaDefaultAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalMedusaSlideOutAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalMedusaSlideOutDownwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEntityRemovalMedusaSlideOutUpwardAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBEventObserverRegistry
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalDisplayManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalGlobalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalNotesDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalSoundsDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBExternalWifiDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMotionGestureController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFaceContactExpectationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFaceIDCoachingConditionRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFailureNotifyingTapGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFakeiTunesRestoreTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFallbackSnapshotDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFixedLayoutModeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingApplicationInlineAppExposeLiveContentOverlayView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingApplicationSceneLiveContentOverlayView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingApplicationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingDockBehaviorAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingDockController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingDockWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingSwitcherLiveContentOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFloatingSwitcherSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidScrunchGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherAppLayoutHeaderItemController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGesture
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGestureExclusionTrapezoid
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherIconImageContainerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherIconOverlayView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherItemContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherItemContainerHeaderItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherItemContainerHeaderView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherLayoutContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherPageContentViewProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherPanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherTitledButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherTouchPassThroughScrollView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFluidSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFolderStatsQueryableMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenAppLayoutSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenFluidSwitcherRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenOcclusionTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenSwitcherLiveContentOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenToHomeCenterZoomDownSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenToHomeIconZoomSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullScreenToHomeSlideOverSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFullscreenZoomView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGestureRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGestureSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGestureSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGrabberTongue
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGreenController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGuidedAccessListener
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBAcceleratedSinglePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBDoublePressDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBDoublePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBDoubleTapUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBInitialPressDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBInitialPressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBLongPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBSinglePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHBTriplePressUpGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHIDButtonStateArbiter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHIDInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHIDUILockAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHUDWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHapticSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareButtonActionList
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareButtonGestureParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareButtonGestureParametersProviderBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareButtonService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHarmonyController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHarmonySettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHistorianSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeButtonPressMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureArbiter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureArbiterRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureExclusionTrapezoidSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureFinalDestinationSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGesturePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureParticipant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureRootSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureToHomeSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGestureToSwitcherSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGrabberRevealGesturesManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGrabberRotationView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeGrabberView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeHardwareButtonGestureRecognizerConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenBackdropDarkTintView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenBackdropView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenBackdropViewBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenOverlayController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenPreviewView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenSpotlightViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenTodayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeToDeckSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeToSwitcherSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconDeleteMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconDragPlatterWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconFlockingMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconLaunchContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconLaunchMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconListScrollingRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconOverlayVisibilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconPageHidingMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconRelayoutRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconStateArchiver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconViewVisibilitySwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconVisibilityService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerAggregateClientConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerBehavior
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerConfigurationDisablesTimerSetting
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerCoordinatorHelper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerDescriptor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerDescriptorFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerGlobalCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerGlobalStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIgnoredForAutorotationSecureWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBImageHeaderAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInAppStatusBarHiddenAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallBannerAuthority
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallBannerPresentableViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallBannerSceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallPresentationRequestServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallPresentationSceneUpdateContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallPresentationSession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallSceneUpdateWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallTransientOverlayManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallTransientOverlayPresentationContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallTransientOverlayPresentationWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInCallTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInProcessSecureAppAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIndirectPanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInitialRestartState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInlineAppExposeContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInsecureDrawingAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInsertionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInteractionAfterWakeMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInternalClientSettingObserverContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBInvalidateAdjustedAppLayoutsSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIsolatedSceneOrientationFollowingWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIsolatedSceneOrientationFollowingWrapperViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKeyboardFocusHoldAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKeyboardHomeAffordanceAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKeyboardHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBKeyboardSuppressionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutElement
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutElementViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutStateTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLayoutStateTransitionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLiftToWakeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLiftToWakeManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLiftToWakeStudyLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLiquidDetectionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenActionContextFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenActionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenAutoUnlockAggregateRule
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenBiometricAuthenticationCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenContentAssertionTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenDisableAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenDisabledAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenOrientationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenPluginManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenPreviewView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenUnlockRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenViewControllerBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockStateAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockdownManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockedModalAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockedPointerManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLogWindowTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLogoutProgressTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLogoutProgressView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLongPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLowBatteryLogTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLowEndHardwareSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLowPowerAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayInterfaceOrientationAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayLayoutState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayLayoutStateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayRootWindowScenePresentationBinder
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneLayoutGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneLayoutStatusBarView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneLayoutViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneLayoutWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySceneManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplaySystemGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayWindowLayoutStrategy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainDisplayWorkspaceAppInteractionEventSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainScreenActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainStatusBarContentAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainSwitcherLiveContentOverlayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainSwitcherTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainSwitcherViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainSwitcherWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainTransitionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspaceApplicationSceneLayoutElementViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspaceLayoutStateContingencyPlan
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMainWorkspaceTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMatchMoveToIconViewSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMediaController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusa1oSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaAppsTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaConfigurationUsageMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaDecoratedDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaDragAndDropMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaHostedKeyboardWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaHostedKeyboardWindowLevelAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaOrientationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMedusaSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMesaUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModalAlertPresentationCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModalAlertPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModalUIFluidDismissGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModalViewControllerStack
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModelessSyncController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModifierCacheCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBModifierCacheSelectorList
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMousePointerManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMoveFloatingApplicationGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMoveGestureFloatingSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableAppStatusBarSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableDeviceApplicationScenePlaceholderContentContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableHardwareButtonGestureParameters
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableInitialRestartState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableSwitcherAnimationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableSwitcherLiveContentRasterizationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableSwitcherScrollViewAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableSwitcherTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMutableTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCAlertingController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCNotificationDispatcher
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCNotificationDispatcherDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCScreenController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNCSoundController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNetworkReselectionAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNetworkReselectionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNewsstandMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotchedStatusBarProximityBacklightPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotchedStatusBarProximityBacklightPolicyEnablementCondition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationBannerDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationCarPlayDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationHomeAffordanceController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationLongLookBannerPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationPresentableViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNubView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBOmnibusAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBOrientationAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBOrientationLockManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPBAppLayout
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPBAppLayoutList
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPBDisplayItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPAnalytics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPAnalyticsAssistant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPAnalyticsSourceSummaryAssistant
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPBehaviorOverrideAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPContainerViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPEnvironmentDependentOverrideAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPInterruptionAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPInterruptionDebouncingTimer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPStashAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPPTBlockOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPPTOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPPTRunner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPanSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPasscodeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPasscodeEntryTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPearlInterlockObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPearlUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPerformTransitionSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPhoneAlertItem
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPlatformController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPocketStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPolicyAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPolygon
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPortalView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPowerDownViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPreemptAnimationSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPresentCoverSheetRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPresentFloatingDockTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPresentationObservationToken
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressCollector
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressGestureStateInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressPrecedenceArbiter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceMetricData
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressSequenceValidator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPressTuple
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPreviousWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPriorityDeviceApplicationSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProactiveHomeScreenSuggestionProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProactiveHomeScreenUsageObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProactiveLibraryCategoryMapProviderSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProcessSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPrototypeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPrototypeDumpingGround
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProximityBacklightPolicyFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProximitySensorManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBProximitySettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityBackgroundViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilitySettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReachabilityWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRebootRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecalibrateProximitySensorHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecentAppLayouts
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecentAppLayoutsPersister
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecordingIndicatorWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRecycledViewsContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReloadWallpaperTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteAlertHandleLocalClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteAlertHandleServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlayHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlaySession
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlaySessionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRemoteTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRenderOverlayRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRestartManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRestartManagerWorkspaceDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReusableSnapshotItemContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReverseCountedSemaphore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRingerControl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRingerHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRingerPillView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRingerVolumeSliderView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRootSceneWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRootSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRotateHomeScreenWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRunWallpaperMigrationTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSOSClawGestureObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSOSEventHandler
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSOSLockGestureObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneBackgroundedStatusAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneDataStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneDisconnectionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutAnimationWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutElementAnimationWrapperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutFrameCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutLiveContentOverlay
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutOrientationCoordinateSpace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutSynchronizeTransitionTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutWhitePointAdaptationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneLayoutWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneManagerCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneManagerReference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneSnapshotDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneStatusBarManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneViewStatusBarAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSceneWatchdogProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScheduledAlarmObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenEdgePanGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenFlash
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenTimeTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenWakeAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenshotManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScreenshotManagerDataSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScrollSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScrollToAppLayoutSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBScrollToTopSceneProxyView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureAppManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureAppPolicy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureAppViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureAppWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureMainDisplaySceneManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureMainScreenActiveInterfaceOrientationWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecureWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSensorActivityAttribution
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSensorActivityDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSetupManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSetupWiFiScanner
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSharedModalAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSimScrollToIconTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSiriHardwareButtonEventsOnlyButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSiriHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSleepWakeHardwareButtonInteraction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSnapshotDataProviderContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSnapshotTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSnapshotWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoftLockoutController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoftwareUpdatePasscodePolicyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoftwareUpdateService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoundController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoundPreferences
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSplashBoardController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSplashBoardLaunchRequestProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpotlightDelegateManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpotlightLegibilityProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpotlightMultiplexingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpotlightTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpringloadingMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSpuriousScreenUndimmingAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionContextPersistence
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionFactory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToLockOut
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStartupTransitionToSetup
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStateDumpService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarContainer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarForcedHiddenTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarStateAggregator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarStateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarStyleOverridesAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarStyleOverridesCoordinatorClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarTapManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSuspendedUnderLockManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSuspendedWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwipeMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAccessoryLayoutElement
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAnimationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAppSuggestionBannerView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAppSuggestionContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherAppSuggestionViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherCardUpdateTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDemoCommandsServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDemoFilteringController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDisplayItemRemovalResolutionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDisplayItemRemovalResolutionResultAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherDisplayItemRemovalResolutionResults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherForcePressSystemGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherLiveContentRasterizationAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModelRemovalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModelRemovalRequestAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModelRemovalResultAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModelRemovalResults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherModifierEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherPresentationInteractionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherScrollViewAttributes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherSnapshotImageView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherToAppTransitionMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSwitcherWallpaperPageContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSyncController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSynchronizeCloudCriticalDataOperation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemAnimationDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemGestureManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemGestureMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemGestureUsageMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemGestureWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemHapticsPreferencesMetric
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemPointerInteractionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemServiceServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemStatusBatteryDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSystemStatusWifiDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTapToWakeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTelephonyManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTestAutomationService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTestRecipeRegistrar
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTestableAlertItemTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBThermalController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTimerEventSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTimerSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTodayIconListLayoutDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTodayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTodayViewSpotlightPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBToggleClassroomPluginTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTouchHistory
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTouchRegionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTouchTemplate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTouchTemplateGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientActiveInterfaceOrientationRequester
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayBlockTransitionCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDefaultTransitionContextProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissAllToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissAllWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissToAppsWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayDismissalRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayPresentWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayPresentationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayPresentationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransientOverlayWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransitionSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransitionSwitcherModifierEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTransitionSwitcherModifierRemovalContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIAnimationControllerAnimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIAnimationPropertyAnimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIBlockAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIImageDataProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIMainScreenAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIPasscodeViewWithLockScreenStyle
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUISettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIStartupFromOverlayAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUISwitcherAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUIWorkspaceAnimationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUnlockedAlertItemPresenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUpdateLayoutSwitcherEventResponse
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserAgent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserAlertNotificationSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserNotificationAlert
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserNotificationCenter
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUserSessionController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVODController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBViewSnapshotProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVoiceControlController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVoiceDisabledBundles
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeControl
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeControlState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeHUDDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeHUDSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeHUDViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeHardwareButton
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBVolumeHardwareButtonActions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWakeDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWakeToInCallWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWalletNotificationSource
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWalletPreArmController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperAggdLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperEffectView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperEffectViewBase
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperLegibilitySettingsProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperPreviewSnapshotCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperStyleInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperStyleRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWebApplication
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWebClipService
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWiFiManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWidgetController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWidgetLaunchStatsTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWidgetMetricsServer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowHideState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowHidingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowScene
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWindowSelfHostWrapper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWipeSnapshotManifestTestRecipe
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspace
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceApplicationSceneTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceEntityRemovalContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceKeyboardFocusController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransaction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransientOverlay
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransientOverlayTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransitionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceTransitionRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBZionUnlockTrigger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBZoomView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBiCloudPasscodeRequirementLockoutController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SpringBoard
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_UIGestureRecognizerTransformAnalyzer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_UIGestureRecognizerTransformAnalyzerInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBAppContainerStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBAppSwitcherSnapshotCacheKey
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBAppSwitcherSnapshotImageCacheRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBApplicationLaunchAlertInfo
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBDashBoardHostedAppStatusBarStateProxy
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBDeviceApplicationSceneStatusBarStateProviderObserverRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBDeviceApplicationSceneViewPlaceholderContentView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBDirectToAirPlayPolicyState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBExpertAppSuggestion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBFakeBlurView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBFullScreenAppFloorSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBFullScreenSwitcherLiveContentOverlayContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHUDHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHUDModel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHomeScreenFloorSwitcherModifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHomeScreenFolderDelegate
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBHostedKeyboardViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBIdleTimerGlobalBoolSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBIdleTimerGlobalNumericSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBIdleTimerGlobalSettingMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBInCallPresentationRequestServerTarget
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBInCallProxySceneBackgroundView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBLoadApplicationResult
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBMainScreenActiveInterfaceOrientationWindowRootViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBModalViewControllerStackTransition
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBMutableDirectToAirPlayPolicyState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBProximityTouchHandlingView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBProximityTouchHandlingViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBProximityTouchHandlingWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBRemoteAlertHandleServerTarget
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBSUICFUserNotificationContentHostViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBScreenshotPersistenceCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBStatusBarLocalDataOverridesWrapper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBStatusBarTapApplicationDestination
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBTestRecipeDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBTestRecipeSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBTintView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBTransientOverlayPresentedEntity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBUIAnimationControllerCoordinatingChildRelationship
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBWallpaperViewControllerAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBWallpaperViewControllerScaleAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBWallpaperWindow
|| __TEXT.__const _SBAppPlatterDragPreviewCancelScale
|| __TEXT.__const _SBAppPlatterDragPreviewLiftScale
|| __TEXT.__const _SBApplicationShortcutStoreMaxShortcuts
|| __TEXT.__const _SBClassicUtilitiesZoomButtonDistanceFromEdge
|| __TEXT.__const _SBClassicUtilitiesZoomButtonMinimumAppContentPadding
|| __TEXT.__const _SBClassicUtilitiesZoomButtonSize
|| __TEXT.__const _SBHUDAutoDismissDelayForever
|| __TEXT.__const _SBHUDAutoDismissDelayLong
|| __TEXT.__const _SBHUDAutoDismissDelayNormal
|| __TEXT.__const _SBInvalidPoint
|| __TEXT.__const _SBInvalidSize
|| __TEXT.__const _SBLegacyListPlatterViewCornerRadius
|| __TEXT.__const _SBLockScreenOverlayPluginPriority
|| __TEXT.__const _SBNowPlayingPluginTimeoutInterval
|| __TEXT.__const _SBPressGestureStateUnlimitedDurationValue
|| __TEXT.__const _SBTodayFavoriteInstructionLabelInset
|| __TEXT.__const _SBTodayHeaderPlatterMargin
|| __TEXT.__const _SBTodayViewSearchBarTopOffset
|| __TEXT.__const _SBWhitePointAdaptivityStyleUnknown
|| __TEXT.__const _SpringBoardVersionNumber
|| __TEXT.__const _SpringBoardVersionString
|| __TEXT.__const _kHomeGestureVelocityAveragingDuration
|| __TEXT.__const _kSBDataPlanActivationPromptForDisableLimit
|| __TEXT.__const _kSBHUDControllerDefaultTransitionMultiplier
|| __TEXT.__const _kVelocityAveragingDuration
|| __TEXT.__text _CCUICAPackageDescriptionForSBAudioRouteType
|| __TEXT.__text _CSCoverSheetTransitionSettingsForTransitionType
|| __TEXT.__text _NSLocalizedPluralStringFromSBAudioRouteType
|| __TEXT.__text _NSLocalizedStringFromSBAudioRouteType
|| __TEXT.__text _NSStringFromAnalyticsLayoutLocation
|| __TEXT.__text _NSStringFromSBAppLibraryLogStep
|| __TEXT.__text _NSStringFromSBAppViewControllerMode
|| __TEXT.__text _NSStringFromSBAudioRouteType
|| __TEXT.__text _NSStringFromSBBlurViewCoordinatorState
|| __TEXT.__text _NSStringFromSBElasticVolumeState
|| __TEXT.__text _NSStringFromSBExtensionType
|| __TEXT.__text _NSStringFromSBHomeGestureFinalDestination
|| __TEXT.__text _NSStringFromSBLiftToWakeTransition
|| __TEXT.__text _NSStringFromSBMediaEventSource
|| __TEXT.__text _NSStringFromSBReachabilityActivationContext
|| __TEXT.__text _NSStringFromSBRestartType
|| __TEXT.__text _NSStringFromSBSwitcherModifierEventResponseType
|| __TEXT.__text _NSStringFromSBSwitcherModifierEventType
|| __TEXT.__text _NSStringFromSBUIControllerRequireContentOptions
|| __TEXT.__text _NSStringFromSBVolumeMode
|| __TEXT.__text _NSStringFromSBWindowLevelRange
|| __TEXT.__text _NSStringFromSBWorkspaceSceneLayoutTransitionOptions
|| __TEXT.__text _NSStringFromStartupTransitionDestination
|| __TEXT.__text _NSStringFromWalletPrearmFailureRecognitionReason
|| __TEXT.__text _PETEventPropertyForBoolValues
|| __TEXT.__text _PETEventPropertyForIconLocation
|| __TEXT.__text _PETEventPropertyForLayoutLocations
|| __TEXT.__text _PETStringValueForIconLocation
|| __TEXT.__text _SBAdaptationModeForWhitePointAdaptivityStyle
|| __TEXT.__text _SBAddStatusBarStyleOverridesAssertionByStyleOverride
|| __TEXT.__text _SBAnalyticsLayoutLocationForDisplayLayoutElements
|| __TEXT.__text _SBAnalyticsNameForSystemGestureType
|| __TEXT.__text _SBAnimateBacklightToFactor
|| __TEXT.__text _SBAppLayoutConfigurationFromMainDisplayLayoutStateSpaceConfiguration
|| __TEXT.__text _SBAppStatusBarLayoutLayerDescription
|| __TEXT.__text _SBAppStatusBarSettingsLevelDescription
|| __TEXT.__text _SBApplicationClassicModeDescription
|| __TEXT.__text _SBApplicationClassicModeExpectsRoundedCorners
|| __TEXT.__text _SBApplicationClassicModeForString
|| __TEXT.__text _SBApplicationClassicModeRepresentsPad
|| __TEXT.__text _SBApplicationClassicModeRepresentsPhone
|| __TEXT.__text _SBApplicationClassicModeWantsSafeAreaInsets
|| __TEXT.__text _SBApplicationDropSessionErrorCreate
|| __TEXT.__text _SBApplicationDropSessionGetDragItem
|| __TEXT.__text _SBApplicationSceneEntityDestructionMakeIntent
|| __TEXT.__text _SBApplicationSceneEntityDestructionMakeIntentFromServicesRequest
|| __TEXT.__text _SBAudioRouteTypeCanBePluralized
|| __TEXT.__text _SBAudioRouteTypeIsValid
|| __TEXT.__text _SBBaseCachesPathForApplication
|| __TEXT.__text _SBBaselineScreenDPIForCurrentIdiom
|| __TEXT.__text _SBBaselineScreenDPIForIdiom
|| __TEXT.__text _SBBlankScreen
|| __TEXT.__text _SBCallStateInCall
|| __TEXT.__text _SBChainableModifierMethodCacheContextTrampolineForMethod
|| __TEXT.__text _SBChainableModifierMethodCacheQueryTrampolineForMethod
|| __TEXT.__text _SBClassicUtilitiesInsetAndTranslateLayerForPresentationWithHomeAffordance
|| __TEXT.__text _SBClassicUtilitiesScaleFactorForPhoneAppZoomedIn
|| __TEXT.__text _SBClassicUtilitiesScaleFactorForPresentationWithHomeAffordance
|| __TEXT.__text _SBClassicUtilitiesStatusBarInsetsForPadOnRoundedPad
|| __TEXT.__text _SBCommonInitialize
|| __TEXT.__text _SBCornerMaskForElementInLayoutState
|| __TEXT.__text _SBCoverSheetTransitionTypeForCurrentState
|| __TEXT.__text _SBCreateMainScreenSnapshot
|| __TEXT.__text _SBCreateMainScreenSnapshotBelowWindow
|| __TEXT.__text _SBCreateMainScreenSnapshotBelowWindowWithOrientation
|| __TEXT.__text _SBCreateResourceImageWithoutCaching
|| __TEXT.__text _SBCreateScaledIOSurface
|| __TEXT.__text _SBCreateUIImageFromIOSurfaceResizingIfNecessary
|| __TEXT.__text _SBDashBoardSceneHandleEqualToSceneHandle
|| __TEXT.__text _SBDefaultBackgroundColorForAppScene
|| __TEXT.__text _SBDefaultCornerRadiusConfigurationForElementInLayoutState
|| __TEXT.__text _SBDefaultStatusBarStyle
|| __TEXT.__text _SBDeviceHasRoundedScreenCorners
|| __TEXT.__text _SBDeviceUnlockAggdKeyForPrefixAndOrientation
|| __TEXT.__text _SBDeviceUnlockKeyboardAggdKeyForPrefix
|| __TEXT.__text _SBDeviceUnlockSmartCoverAggdKeyForPrefix
|| __TEXT.__text _SBDismissSpotlight
|| __TEXT.__text _SBDisplayItemTypeFromLegacyType
|| __TEXT.__text _SBDragPreviewShadowParametersEqualToShadowParameters
|| __TEXT.__text _SBEarlierDate
|| __TEXT.__text _SBEffectiveSpaceConfigurationForInterfaceOrientation
|| __TEXT.__text _SBElasticVolumeLayoutAxisForInterfaceOrientation
|| __TEXT.__text _SBEnsureDirectoryExistsAtPath
|| __TEXT.__text _SBEntityRemovalDefaultFluidAnimationSettings
|| __TEXT.__text _SBEnumerateAndCullDeviceApplicationSceneStatusBarStateObservers
|| __TEXT.__text _SBEqualBools
|| __TEXT.__text _SBEqualObjects
|| __TEXT.__text _SBEqualStrings
|| __TEXT.__text _SBFloatingConfigurationForMovingFloatingApplication
|| __TEXT.__text _SBFloatingConfigurationIsValid
|| __TEXT.__text _SBFloatingDockBehaviorLevelDescription
|| __TEXT.__text _SBFloatingDockWindowLevelPriorityDescription
|| __TEXT.__text _SBGestureModifierPhaseForGestureState
|| __TEXT.__text _SBGetBacklightFactor
|| __TEXT.__text _SBGetLastBacklightFactor
|| __TEXT.__text _SBGraphicsQuality
|| __TEXT.__text _SBGuidedAccessIsActive
|| __TEXT.__text _SBGuidedAccessPrepare
|| __TEXT.__text _SBHBundle
|| __TEXT.__text _SBHScreenBounds
|| __TEXT.__text _SBHasOngoingSignificantAnimation
|| __TEXT.__text _SBHomeDirectory
|| __TEXT.__text _SBHomeGestureEnabled
|| __TEXT.__text _SBIdleTimerIntervalToNSString
|| __TEXT.__text _SBImageTagForOrientation
|| __TEXT.__text _SBInlineAppExposeRolesInLayoutStateForOverlay
|| __TEXT.__text _SBInlineAppExposeWorkspaceEntityIsUniqueIdentifierInline
|| __TEXT.__text _SBInteractiveScreenshotCreateImageFromInterfaceOrientedView
|| __TEXT.__text _SBInterfaceOrientationOfTouchedEdgeForHomeGestureRecognizer
|| __TEXT.__text _SBInvertEdgeInsets
|| __TEXT.__text _SBIsBeingDebugged
|| __TEXT.__text _SBIsHomeGestureEnabledByDefault
|| __TEXT.__text _SBIsMainDisplaySystemGestureAllowed
|| __TEXT.__text _SBIsSymbolicLinkAtPath
|| __TEXT.__text _SBKeyDoubleValueLog
|| __TEXT.__text _SBKeyValueLog
|| __TEXT.__text _SBLaterDate
|| __TEXT.__text _SBLayoutAttributesDescription
|| __TEXT.__text _SBLayoutRoleDescription
|| __TEXT.__text _SBLayoutRoleEnumerateAppLayoutRoles
|| __TEXT.__text _SBLayoutRoleEnumerateValidRoles
|| __TEXT.__text _SBLayoutRoleForIdentifier
|| __TEXT.__text _SBLayoutRoleIdentifierForRole
|| __TEXT.__text _SBLayoutRoleIsValid
|| __TEXT.__text _SBLayoutRoleMaskContainsRole
|| __TEXT.__text _SBLayoutRoleMaskDescription
|| __TEXT.__text _SBLayoutRoleMaskForRole
|| __TEXT.__text _SBLegacyDisplayItemTypeFromType
|| __TEXT.__text _SBLibraryIsVisible
|| __TEXT.__text _SBLockScreenChargePercentageLabelForBattery
|| __TEXT.__text _SBLogAVSystemControllerCache
|| __TEXT.__text _SBLogAccessory
|| __TEXT.__text _SBLogAirPlay
|| __TEXT.__text _SBLogAlarm
|| __TEXT.__text _SBLogAlertItemStack
|| __TEXT.__text _SBLogAlertItems
|| __TEXT.__text _SBLogAppLibrary
|| __TEXT.__text _SBLogAppPlaceholder
|| __TEXT.__text _SBLogAppResize
|| __TEXT.__text _SBLogAppStatusBars
|| __TEXT.__text _SBLogAppSwitcher
|| __TEXT.__text _SBLogAudioControl
|| __TEXT.__text _SBLogBacklight
|| __TEXT.__text _SBLogBanner
|| __TEXT.__text _SBLogButtonsCamera
|| __TEXT.__text _SBLogButtonsCombo
|| __TEXT.__text _SBLogButtonsHome
|| __TEXT.__text _SBLogButtonsInteraction
|| __TEXT.__text _SBLogButtonsLock
|| __TEXT.__text _SBLogButtonsVolume
|| __TEXT.__text _SBLogChrono
|| __TEXT.__text _SBLogClassicMode
|| __TEXT.__text _SBLogContinuity
|| __TEXT.__text _SBLogDataReset
|| __TEXT.__text _SBLogDock
|| __TEXT.__text _SBLogGreen
|| __TEXT.__text _SBLogHIDKeyboardEvents
|| __TEXT.__text _SBLogHUD
|| __TEXT.__text _SBLogHomeAffordance
|| __TEXT.__text _SBLogIcon
|| __TEXT.__text _SBLogIconController
|| __TEXT.__text _SBLogLiftToWake
|| __TEXT.__text _SBLogLockScreenHint
|| __TEXT.__text _SBLogPointer
|| __TEXT.__text _SBLogProactiveAppLibrary
|| __TEXT.__text _SBLogProactiveHome
|| __TEXT.__text _SBLogProximitySensor
|| __TEXT.__text _SBLogRemoteAlert
|| __TEXT.__text _SBLogRingerHUD
|| __TEXT.__text _SBLogSceneResize
|| __TEXT.__text _SBLogScreenTime
|| __TEXT.__text _SBLogSmartCover
|| __TEXT.__text _SBLogSound
|| __TEXT.__text _SBLogSwitcherSnapshotCache
|| __TEXT.__text _SBLogSystemGesture
|| __TEXT.__text _SBLogSystemGestureAppSwitcher
|| __TEXT.__text _SBLogSystemGestureBannerDismiss
|| __TEXT.__text _SBLogSystemGestureControlCenter
|| __TEXT.__text _SBLogSystemGestureCoverSheet
|| __TEXT.__text _SBLogSystemGestureDetail
|| __TEXT.__text _SBLogSystemGestureHome
|| __TEXT.__text _SBLogSystemGestureScrunch
|| __TEXT.__text _SBLogSystemGestureSwitchApp
|| __TEXT.__text _SBLogTelemetrySignposts
|| __TEXT.__text _SBLogThermal
|| __TEXT.__text _SBLogUIController
|| __TEXT.__text _SBLogUserSession
|| __TEXT.__text _SBLogVolumeHUD
|| __TEXT.__text _SBLogWebClip
|| __TEXT.__text _SBMainDisplayLayoutStateFloatingConfigurationFromString
|| __TEXT.__text _SBMainDisplayLayoutStateSpaceConfigurationFromAppLayoutConfiguration
|| __TEXT.__text _SBMainDisplayLayoutStateSpaceConfigurationFromString
|| __TEXT.__text _SBMainScreenDPI
|| __TEXT.__text _SBMainScreenPointsPerMillimeter
|| __TEXT.__text _SBMainScreenSnapshotViewWithRect
|| __TEXT.__text _SBMainWorkspaceMapInternalTransitionSourceToExternalTransitionSource
|| __TEXT.__text _SBMainWorkspaceTransitionSourceDescription
|| __TEXT.__text _SBMainWorkspaceTransitionSourceIsUserEventDriven
|| __TEXT.__text _SBMediaEventSourceFromBKSHIDEventSource
|| __TEXT.__text _SBMedusaCapabilitiesSupportsFloatingApplication
|| __TEXT.__text _SBMedusaCapabilitiesSupportsSplitView
|| __TEXT.__text _SBModificationDateForPath
|| __TEXT.__text _SBModifierCacheCoordinatorResponseDescription
|| __TEXT.__text _SBNoteSignificantAnimationDidEnd
|| __TEXT.__text _SBNoteSignificantAnimationWillBegin
|| __TEXT.__text _SBOrientationAppUsageTimeAggdKey
|| __TEXT.__text _SBOrientationKeyboardUsageTimeAggdKey
|| __TEXT.__text _SBOrientationSpringBoardUsageTimeAggdKey
|| __TEXT.__text _SBOuterCornerRadiusForLayoutState
|| __TEXT.__text _SBPBAppLayoutListReadFrom
|| __TEXT.__text _SBPBAppLayoutReadFrom
|| __TEXT.__text _SBPBDisplayItemReadFrom
|| __TEXT.__text _SBPPTEventActionsToSwipeDownFromTopOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeDownInMiddleOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeLeftInMiddleOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeRightInMiddleOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeUpFromBottomOfInterface
|| __TEXT.__text _SBPPTEventActionsToSwipeUpInMiddleOfInterface
|| __TEXT.__text _SBPPTEventActionsToTapAtPoint
|| __TEXT.__text _SBPPTEventActionsToTouchAndHoldAtPoint
|| __TEXT.__text _SBPPTSynthesizeEventsForCommandString
|| __TEXT.__text _SBPPTSynthesizeEventsForEventActions
|| __TEXT.__text _SBPPTSynthesizeEventsForEventStream
|| __TEXT.__text _SBPiPStashStateOverrideReasonForString
|| __TEXT.__text _SBPocketStateIsInPocketOrObscuredScreen
|| __TEXT.__text _SBPointerEventHasMovementOnAxis
|| __TEXT.__text _SBPointerEventIsTrackpadEvent
|| __TEXT.__text _SBPointerEventRepresentsTrackpadTouchUp
|| __TEXT.__text _SBPointerHIDSubEventFromEvent
|| __TEXT.__text _SBPrepareForSetupIfNecessary
|| __TEXT.__text _SBPrepareLaunchSentinelIfNecessary
|| __TEXT.__text _SBPresentationObservationTokenStateDismissedOrDismissing
|| __TEXT.__text _SBPresentationObservationTokenStatePresentedOrPresenting
|| __TEXT.__text _SBReachabilityActivatedInAppAggdKeyForBundleID
|| __TEXT.__text _SBReachabilityActivatedInSpringBoardAggdKeyForClass
|| __TEXT.__text _SBReachabilityGestureShouldActivate
|| __TEXT.__text _SBRecognizedEdgeForHomeGestureRecognizer
|| __TEXT.__text _SBRecordBootToNowTime
|| __TEXT.__text _SBReduceMotion
|| __TEXT.__text _SBRemoveStatusBarStyleOverridesAssertionByStyleOverride
|| __TEXT.__text _SBResizableImageByTilingCenterPixel
|| __TEXT.__text _SBRunningApplicationForAuditToken
|| __TEXT.__text _SBSBacklightChangeSourceDescription
|| __TEXT.__text _SBSDisplayLayoutRoleForLayoutRole
|| __TEXT.__text _SBSafeCast
|| __TEXT.__text _SBSampleValueWithWhitePointAdaptationInteractiveUpdateTimingFunction
|| __TEXT.__text _SBScaleForImagePath
|| __TEXT.__text _SBScaleSuffixForScale
|| __TEXT.__text _SBScaledPoint
|| __TEXT.__text _SBScaledRect
|| __TEXT.__text _SBScaledSize
|| __TEXT.__text _SBScreenBounds
|| __TEXT.__text _SBScreenDisplayCornerRadius
|| __TEXT.__text _SBScreenIsBlanked
|| __TEXT.__text _SBScreenMaximumFramesPerSecond
|| __TEXT.__text _SBScreenOrientedEdgeForHomeGestureRecognizer
|| __TEXT.__text _SBScreenScale
|| __TEXT.__text _SBSecureAppBundleIdentifierForSecureAppType
|| __TEXT.__text _SBSecureAppTypeForApplication
|| __TEXT.__text _SBSendFakeButtonPressEventToApplication
|| __TEXT.__text _SBSendFakeHomeButtonTapEventToApplication
|| __TEXT.__text _SBSeparatorViewBezierPathWithInnerCorners
|| __TEXT.__text _SBSetBacklightFactor
|| __TEXT.__text _SBSetBacklightFactorPending
|| __TEXT.__text _SBSetDeviceInterfaceOrientation
|| __TEXT.__text _SBSetMinimumBrightnessLevel
|| __TEXT.__text _SBSetShouldRasterizeLayer
|| __TEXT.__text _SBSizeTagForOrientation
|| __TEXT.__text _SBSpaceConfigurationIsSplitView
|| __TEXT.__text _SBSpaceConfigurationIsValid
|| __TEXT.__text _SBSpeakerGlyphStateForVolumeLevel
|| __TEXT.__text _SBSpotlightIsVisible
|| __TEXT.__text _SBSpotlightLastPresentationSource
|| __TEXT.__text _SBStatusBarBatteryStateDebugName
|| __TEXT.__text _SBStatusBarDataNetworkDebugName
|| __TEXT.__text _SBStatusBarItemDebugName
|| __TEXT.__text _SBStringForAppLayoutEnvironment
|| __TEXT.__text _SBStringForChainableModifierState
|| __TEXT.__text _SBStringForFloatingConfiguration
|| __TEXT.__text _SBStringForFluidSwitcherGestureType
|| __TEXT.__text _SBStringForPiPStashStateOverrideReason
|| __TEXT.__text _SBStringForSceneResizeGestureFinalAction
|| __TEXT.__text _SBStringForSceneResizeGestureLayoutMode
|| __TEXT.__text _SBStringForSceneResizeGestureRegion
|| __TEXT.__text _SBStringForSpaceConfiguration
|| __TEXT.__text _SBStringForSwitcherHomeScreenBackdropBlurType
|| __TEXT.__text _SBStringForSwitcherSnapshotPreferredInterfaceOrientation
|| __TEXT.__text _SBStringForSwitcherWallpaperStyle
|| __TEXT.__text _SBStringForUnlockedEnvironmentMode
|| __TEXT.__text _SBStringForWallpaperStylePriority
|| __TEXT.__text _SBStringFromApplicationSceneEntityDestructionIntent
|| __TEXT.__text _SBStringFromGesturePhase
|| __TEXT.__text _SBStringFromInsertionSwitcherModifierPhase
|| __TEXT.__text _SBStringFromMedusaHostedKeyboardWindowLevelPriority
|| __TEXT.__text _SBStringFromPIPLayoutReason
|| __TEXT.__text _SBStringFromPIPLayoutTrait
|| __TEXT.__text _SBStringFromPictureInPictureInsetsSource
|| __TEXT.__text _SBStringFromRemovalSwitcherModifierPhase
|| __TEXT.__text _SBStringFromScrollSwitcherModifierEventPhase
|| __TEXT.__text _SBStringFromSwitcherMutationReason
|| __TEXT.__text _SBStringFromSwitcherScrollAxis
|| __TEXT.__text _SBStringFromTransitionPhase
|| __TEXT.__text _SBSystemAppMain
|| __TEXT.__text _SBSystemGestureClearStickyOrientation
|| __TEXT.__text _SBSystemGestureExtendStickyOrientation
|| __TEXT.__text _SBSystemGestureHasStickyOrientation
|| __TEXT.__text _SBSystemGestureLocationForTouchInView
|| __TEXT.__text _SBSystemGestureOrientation
|| __TEXT.__text _SBSystemGesturePreviousLocationForTouchInView
|| __TEXT.__text _SBSystemGestureRecognizerStateDescription
|| __TEXT.__text _SBSystemGestureSetStickyOrientation
|| __TEXT.__text _SBSystemGestureTrySetStickyOrientation
|| __TEXT.__text _SBSystemGestureTypeDebugName
|| __TEXT.__text _SBTMCachedBooleanDebugName
|| __TEXT.__text _SBTimeZoneQueue
|| __TEXT.__text _SBTodayViewIsVisible
|| __TEXT.__text _SBUICScaledRectWithOffsets
|| __TEXT.__text _SBUnlockedEnvironmentModeEnumerateValidModes
|| __TEXT.__text _SBUpdateCallState
|| __TEXT.__text _SBValidateTimeZone
|| __TEXT.__text _SBWTErrorCreate
|| __TEXT.__text _SBWTErrorCreateForTransaction
|| __TEXT.__text _SBWallpaperLightLegibilitySettingsForVariant
|| __TEXT.__text _SBWallpaperOrientationSourceDescription
|| __TEXT.__text _SBWallpaperResetToDefaults
|| __TEXT.__text _SBWallpaperStyleDescription
|| __TEXT.__text _SBWallpaperStyleForBackgroundStyle
|| __TEXT.__text _SBWallpaperStyleTransitionStateMake
|| __TEXT.__text _SBWhitePointAdaptivityStyleForAdaptationMode
|| __TEXT.__text _SBWhitePointAdaptivityStyleValid
|| __TEXT.__text _SBWindowLevelInExclusiveRange
|| __TEXT.__text _SBWindowLevelRangeInvalid
|| __TEXT.__text _SBWindowLevelRangeIsValid
|| __TEXT.__text _SBWindowLevelRangeMake
|| __TEXT.__text _SBWindowLevelUnionRange
|| __TEXT.__text _SBWorkspaceActivateApplication
|| __TEXT.__text _SBWorkspaceActivateApplicationFromURL
|| __TEXT.__text _SBWorkspaceActivateApplicationIdempotent
|| __TEXT.__text _SBWorkspaceActivateApplicationSuspended
|| __TEXT.__text _SBWorkspaceActivateApplicationWithActionsAndResult
|| __TEXT.__text _SBWorkspaceApplicationCanActivateWhilePasscodeLocked
|| __TEXT.__text _SBWorkspaceApplicationCanLaunchWhilePasscodeLocked
|| __TEXT.__text _SBWorkspaceApplicationCanLaunchWhilePasscodeLockedIfSecureLaunchRequested
|| __TEXT.__text _SBWorkspaceApplicationCanResumeWhilePasscodeLocked
|| __TEXT.__text _SBWorkspaceApplicationForIdentifier
|| __TEXT.__text _SBWorkspaceApplicationForURLWithError
|| __TEXT.__text _SBWorkspaceApplicationSceneHandlesInLockedOrUnlockedEnvironmentLayoutState
|| __TEXT.__text _SBWorkspaceCanLaunchApplication
|| __TEXT.__text _SBWorkspaceDestroyApplicationEntity
|| __TEXT.__text _SBWorkspaceDestroyApplicationSceneHandlesWithIntent
|| __TEXT.__text _SBWorkspaceDialRequestForURL
|| __TEXT.__text _SBWorkspaceDoesApplicationURLPresentLockApplicationLaunchVulnerability
|| __TEXT.__text _SBWorkspaceEntitiesAreAnalagous
|| __TEXT.__text _SBWorkspaceEntityRemovalActionTypeDescription
|| __TEXT.__text _SBWorkspaceEntityRemovalAnimationStyleDescription
|| __TEXT.__text _SBWorkspaceForceToSpringBoard
|| __TEXT.__text _SBWorkspaceGetWhyBusy
|| __TEXT.__text _SBWorkspaceGetWhyCannotLock
|| __TEXT.__text _SBWorkspaceHandleStatusBarReturnActionFromApp
|| __TEXT.__text _SBWorkspaceHasApplicationSceneInLockedOrUnlockedEnvironmentLayoutState
|| __TEXT.__text _SBWorkspaceHasApplicationSceneInLockedOrUnlockedEnvironmentLayoutStateMatchingApplication
|| __TEXT.__text _SBWorkspaceInterruptBusynessIfPossible
|| __TEXT.__text _SBWorkspaceIsBusy
|| __TEXT.__text _SBWorkspaceIsSystemBootComplete
|| __TEXT.__text _SBWorkspaceKillApplication
|| __TEXT.__text _SBWorkspaceLaunchMusicSuspended
|| __TEXT.__text _SBWorkspaceLauncherIsActive
|| __TEXT.__text _SBWorkspaceLoadUsageTimes
|| __TEXT.__text _SBWorkspaceLogUsage
|| __TEXT.__text _SBWorkspaceNoteApplicationEntityWasRemovedFromAppSwitcher
|| __TEXT.__text _SBWorkspaceNoteSystemBootComplete
|| __TEXT.__text _SBWorkspaceOpenURLIsHandledBySpringBoard
|| __TEXT.__text _SBWorkspaceRegisterHandlerForExtensionPoint
|| __TEXT.__text _SBWorkspaceSetPreventIdleSleepForReason
|| __TEXT.__text _SBWorkspaceSpringBoardIsActive
|| __TEXT.__text _SBWorkspaceSuspendAllDisplays
|| __TEXT.__text _SBWorkspaceSuspendApplicationScene
|| __TEXT.__text _SBWorkspaceTerminateAllApps
|| __TEXT.__text _SBWorkspaceTerminateApplication
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentIsAppSwitcher
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentIsApplication
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentIsHomeScreen
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentLayoutStateApplicationSceneHandles
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentLayoutStateHasMatchingApplication
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentLayoutStatePrimaryApplicationSceneHandle
|| __TEXT.__text _SBWorkspaceUnlockedEnvironmentLayoutStateSideApplicationSceneHandle
|| __TEXT.__text _SBWorkspaceUnregisterHandlerForExtensionPoint
|| __TEXT.__text _SBWorkspaceUpdateFrontMostApplicationEventPort
|| __TEXT.__text _SetDisplayShowsProgress
|| __TEXT.__text _XBGetCustomSafeAreaInsetsForSceneSnapshot
|| __TEXT.__text _XBGetUIUserInterfaceStyleForSceneSnapshot
|| __TEXT.__text __BackdropRenderingHintForWallpaperAverageColor
|| __TEXT.__text __CCUICAPackageDescriptionNameSuffixForAudioRouteTypeWithCount
|| __TEXT.__text __CentroidOfTouches
|| __TEXT.__text __NSLocalizedStringFromSBAudioTypePluralizedAppropriatelyForCount
|| __TEXT.__text __NSStringFromHapticType
|| __TEXT.__text __NSStringFromPhase
|| __TEXT.__text __SBAdditionalScaleFactorForClassicPresentationWithHomeAffordance
|| __TEXT.__text __SBApp
|| __TEXT.__text __SBAppendDescrptionForStatusBarDescribingToBuilder
|| __TEXT.__text __SBApplicationClassicModeIsClassic
|| __TEXT.__text __SBApplicationPerformAfterPrewarmingAllowedListCache
|| __TEXT.__text __SBAudioRouteTypePrefersSpeakerAppearance
|| __TEXT.__text __SBAxisDescription
|| __TEXT.__text __SBDeviceApplicationSceneStatusBarStateObserverFlagsForObserver
|| __TEXT.__text __SBDeviceOrientationAggdSuffix
|| __TEXT.__text __SBFindFirstView
|| __TEXT.__text __SBFindFirstViewController
|| __TEXT.__text __SBFluidSwitcherTitledButtonContentImageWithTitle
|| __TEXT.__text __SBLayoutStateMixHashes
|| __TEXT.__text __SBMainSwitcherRoutingSwitcherModifierRouteToSubtree
|| __TEXT.__text __SBMainSwitcherRoutingSwitcherModifierRouteToSubtreeContainingAppLayout
|| __TEXT.__text __SBMainSwitcherRoutingSwitcherModifierRouteToSubtreeContainingIndex
|| __TEXT.__text __SBModifierNameFromClassString
|| __TEXT.__text __SBOrientedPointerLocation
|| __TEXT.__text __SBPressSequenceValidatorBoundsMake
|| __TEXT.__text __SBSampleValueWithTimingFunction
|| __TEXT.__text __SBStatusBarLegacyStyleFromStyle
|| __TEXT.__text __SBStatusBarStyleFromLegacyStyle
|| __TEXT.__text __SBStringFromStatusBarLegacyStyle
|| __TEXT.__text __SBStringFromStatusBarStyle
|| __TEXT.__text __SBUIAnimationStateDescription
|| __TEXT.__text __SBUpdateTouchHistoryWithCoalescedTouches
|| __TEXT.__text __SBWhitePointAdaptationInteractiveUpdateTimingFunction
|| __TEXT.__text __SBWorkspaceAreUsageTimesTrusted
|| __TEXT.__text __SBWorkspaceCopyRecentSleepsAndWakes
|| __TEXT.__text __SBWorkspaceCopyScheduledPowerEvents
|| __TEXT.__text __SBWorkspaceGetBatteryAwakeTime
|| __TEXT.__text __SBWorkspaceGetBatteryStandbyTimeInSeconds
|| __TEXT.__text __SBWorkspaceGetBatteryUsageTimeInSeconds
|| __TEXT.__text __SBWorkspaceHaveChargedPartially
|| __TEXT.__text __SBWorkspaceIsBusyForTransaction
|| __TEXT.__text __SBWorkspaceResetBatteryUsageTimes
|| __TEXT.__text __SBWorkspaceSaveUsageTimes
|| __TEXT.__text __SBWorkspaceSetHavePartiallyCharged
|| __TEXT.__text __SBWorkspaceStartUsageTimesIfNecessary
|| __TEXT.__text __SBWorkspaceTerminateApps
|| __TEXT.__text __SBWorkspaceTrackPowerEvents
|| __TEXT.__text __SBXXActivateAssistantWithContext
|| __TEXT.__text __SBXXAddAlertItemsSuppressionAssertion
|| __TEXT.__text __SBXXAddBiometricAssertion
|| __TEXT.__text __SBXXAddWallpaperAnimationSuspensionAssertion
|| __TEXT.__text __SBXXAddWebClipToHomeScreen
|| __TEXT.__text __SBXXAppSwitcherServiceRegister
|| __TEXT.__text __SBXXApplicationDisplayIdentifiers
|| __TEXT.__text __SBXXBundlePathForDisplayIdentifier
|| __TEXT.__text __SBXXClearWallpaperAsset
|| __TEXT.__text __SBXXDeactivateReachability
|| __TEXT.__text __SBXXDimScreen
|| __TEXT.__text __SBXXDisplayIdentifierForPID
|| __TEXT.__text __SBXXDisplayIdentifiersForPID
|| __TEXT.__text __SBXXEnableLockScreenBundle
|| __TEXT.__text __SBXXFlashColor
|| __TEXT.__text __SBXXFrontmostApplicationDisplayIdentifier
|| __TEXT.__text __SBXXGetApplicationNetworkFlags
|| __TEXT.__text __SBXXGetBatteryAwakeTime
|| __TEXT.__text __SBXXGetBatteryUsageTimesInSeconds
|| __TEXT.__text __SBXXGetCurrentBacklightFactor
|| __TEXT.__text __SBXXGetDisplayIdentifiers
|| __TEXT.__text __SBXXGetDisplayIdentifiersForExternalAccessoryProtocols
|| __TEXT.__text __SBXXGetFlattenedIconState
|| __TEXT.__text __SBXXGetHomeScreenIconMetrics
|| __TEXT.__text __SBXXGetIconPNGData
|| __TEXT.__text __SBXXGetIconState
|| __TEXT.__text __SBXXGetInterfaceOrientation
|| __TEXT.__text __SBXXGetMediaVolume
|| __TEXT.__text __SBXXGetNowPlayingAppBundleIdentifier
|| __TEXT.__text __SBXXGetPendingIconState
|| __TEXT.__text __SBXXGetRecentSleepsWakes
|| __TEXT.__text __SBXXGetScheduledPowerEvents
|| __TEXT.__text __SBXXGetScreenLockStatus
|| __TEXT.__text __SBXXGetWallpaperLegibilitySettings
|| __TEXT.__text __SBXXGetWallpaperOptions
|| __TEXT.__text __SBXXGetWallpaperPreview
|| __TEXT.__text __SBXXGetWallpaperPreviewSurface
|| __TEXT.__text __SBXXInterruptKeybagRefetch
|| __TEXT.__text __SBXXIsReachabilityEnabled
|| __TEXT.__text __SBXXIsSystemApplication
|| __TEXT.__text __SBXXLocalizedApplicationNameForDisplayIdentifier
|| __TEXT.__text __SBXXLockDeviceAndFeatures
|| __TEXT.__text __SBXXOverrideDisplayedDate
|| __TEXT.__text __SBXXPresentPowerDownUI
|| __TEXT.__text __SBXXProgrammaticSwitchAppGestureMoveToLeft
|| __TEXT.__text __SBXXProgrammaticSwitchAppGestureMoveToRight
|| __TEXT.__text __SBXXReboot
|| __TEXT.__text __SBXXReloadIconForIdentifier
|| __TEXT.__text __SBXXRemoveWebClipFromHomeScreen
|| __TEXT.__text __SBXXSetAlertSuppressionContexts
|| __TEXT.__text __SBXXSetAlertSuppressionContextsBySectionIdentifier
|| __TEXT.__text __SBXXSetAllApplicationsShowProgress
|| __TEXT.__text __SBXXSetAllApplicationsShowSyncIndicator
|| __TEXT.__text __SBXXSetAppIsConnectedToEA
|| __TEXT.__text __SBXXSetApplicationBadgeNumber
|| __TEXT.__text __SBXXSetApplicationBadgeString
|| __TEXT.__text __SBXXSetApplicationNetworkFlags
|| __TEXT.__text __SBXXSetApplicationShowsProgress
|| __TEXT.__text __SBXXSetAssistantRecognitionStrings
|| __TEXT.__text __SBXXSetIconState
|| __TEXT.__text __SBXXSetIdleText
|| __TEXT.__text __SBXXSetInterceptsMenuButton
|| __TEXT.__text __SBXXSetMediaVolume
|| __TEXT.__text __SBXXSetProceduralWallpaper
|| __TEXT.__text __SBXXSetReachabilityEnabled
|| __TEXT.__text __SBXXSetShowsOverridesForRecording
|| __TEXT.__text __SBXXSetShowsProgress
|| __TEXT.__text __SBXXSetTypingActive
|| __TEXT.__text __SBXXSetVoiceControlEnabled
|| __TEXT.__text __SBXXSetVoiceRecognitionAudioInputPaths
|| __TEXT.__text __SBXXSetWallpaperImageForLocations
|| __TEXT.__text __SBXXSetWallpaperImageSurfaceForLocations
|| __TEXT.__text __SBXXSetWallpaperOptionsForLocations
|| __TEXT.__text __SBXXSetWallpaperVariant
|| __TEXT.__text __SBXXSetWantsLockButtonEvents
|| __TEXT.__text __SBXXSetWantsVolumeButtonEvents
|| __TEXT.__text __SBXXShowNetworkPromptsIfNecessary
|| __TEXT.__text __SBXXShutDown
|| __TEXT.__text __SBXXSuspendFrontmostApp
|| __TEXT.__text __SBXXTagTouchForTypingMenu
|| __TEXT.__text __StringForStyleTransitionState
|| __TEXT.__text __WallpaperBackdropParametersForStyleAndAverageColor
|| __TEXT.__text __WallpaperStyleByRemovingTintFromStyle
|| __TEXT.__text __WallpaperStyleHasBlur
|| __TEXT.__text __WallpaperStyleHasDarkBlur
|| __TEXT.__text __WallpaperStyleHasTint
|| __TEXT.__text __WallpaperStyleUpdatesWithUserInterfaceStyle
|| __TEXT.__text ___EventProviderCallback
|| __TEXT.__text ___PPTExpectedFinalUnlockedEnvironmentModeForCurrentTest
|| __TEXT.__text ___PPTIsRunningSwitcherGestureTest
|| __TEXT.__text ___PPTIsRunningSwitcherGestureToAutoPiPTest
|| __TEXT.__text __arrayByCombiningArrays
|| __TEXT.__text __dictionaryByCombingDictionaryOfSetOfAppLayouts
|| __TEXT.__text __objectByChoosingNonNilObject
|| __TEXT.__text __setByCombiningSets
|| __TEXT.__text __switcherKeyboardSuppressionModeByCombiningSuppressionModes
|| __TEXT.__text __timezoneQueue_setTimeZone
|| __TEXT.__text _clamp
|| __TEXT.__text _configurationFromProtobufConfiguration
|| __TEXT.__text _environmentFromProtobufEnvironment
|| __TEXT.__text _generateOrRetrieveMappedWallpaperPreview
|| __TEXT.__text _getCategoryIdentifier
|| __TEXT.__text _protobufConfigurationFromConfiguration
|| __TEXT.__text _protobufDisplayItemTypeFromType
|| __TEXT.__text _protobufEnvironmentFromEnvironment
|| __TEXT.__text _protobufRoleFromRole
|| __TEXT.__text _roleFromProtobufRole
|| __TEXT.__text _rubberband
|| __TEXT.__text _smoothDecelerationAnimation
|| __TEXT.__text _stringForSBTouchTemplateMatchResult
|| __TEXT.__text _typeFromProtobufDisplayItemType
__ AVFoundation: _AVCaptureCancelPrewarm
__ AVFoundation: _AVCapturePrewarmReasonCameraLaunchHomeScreen
__ AVFoundation: _AVCapturePrewarmReasonCameraLaunchLockScreen
__ AVFoundation: _AVCapturePrewarmReasonKey
__ AVFoundation: _AVCapturePrewarmUserInteractionAbsoluteTimeKey
__ AVFoundation: _AVCapturePrewarmUserInteractionContinuousTimeKey
__ AVFoundation: _AVCapturePrewarmWithOptions
__ AVFoundation: _AVExternalPlaybackMonitorAirPlayVideoActiveDidChangeNotification
__ AVFoundation: _AVExternalPlaybackMonitorAirPlayVideoPlayingDidChangeNotification
__ AVFoundation: _AVOutputContextOutputDeviceDidChangeNotification
__ AVFoundation: _AVOutputContextOutputDevicesDidChangeNotification
__ AVFoundation: _AVRoutingSessionManagerCurrentSessionDidChangeNotification
__ AVFoundation: _AVRoutingSessionManagerLikelyExternalDestinationsDidChangeNotification
__ AVFoundation: _OBJC_CLASS_$_AVAudioPlayer
__ AVFoundation: _OBJC_CLASS_$_AVExternalPlaybackMonitor
__ AVFoundation: _OBJC_CLASS_$_AVOutputContext
__ AVFoundation: _OBJC_CLASS_$_AVRoutingSessionManager
__ Accounts: _ACAccountStoreDidChangeNotification
__ Accounts: _ACAccountTypeIdentifierIMAP
__ Accounts: _ACEmailAliasKeyEmailAddresses
__ Accounts: _OBJC_CLASS_$_ACAccountStore
__ AggregateDictionary: _ADClientAddValueForScalarKey
__ AggregateDictionary: _ADClientPushValueForDistributionKey
__ AggregateDictionary: _ADClientSetValueForDistributionKey
__ AggregateDictionary: _ADClientSetValueForScalarKey
__ AggregateDictionary: _ADMonotonicTimeGetCurrent
__ AggregateDictionary: _ADPushTimeIntervalForDistributionKeySinceStartTime
__ AirTraffic: _OBJC_CLASS_$_ATConnection
__ AppPredictionClient: _ATXAppPredictionPanelBundleIdentifier
__ AppPredictionClient: _OBJC_CLASS_$_ATXAppDirectoryClient
__ AppPredictionClient: _OBJC_CLASS_$_ATXDefaultHomeScreenItemManager
__ AppPredictionClient: _OBJC_CLASS_$_ATXHomeScreenPage
__ AppPredictionClient: _OBJC_CLASS_$_ATXHomeScreenStackConfig
__ AppPredictionClient: _OBJC_CLASS_$_ATXHomeScreenSuggestionClient
__ AppPredictionClient: _OBJC_CLASS_$_ATXHomeScreenWidgetIdentifiable
__ AppPredictionClient: _kATXAppDirectoryCategoriesUpdatedDistributedNotification
__ AppPredictionInternal: _ATXPredictionReasonLocationTransportType
__ AppPredictionInternal: _ATXPredictionReasonLocationTransportTypeAutomobile
__ AppPredictionInternal: _ATXPredictionReasonLocationTransportTypeRide
__ AppPredictionInternal: _ATXPredictionReasonLocationTransportTypeTransit
__ AppPredictionUIWidget: _APUIAppPredictionLaunchOrigin
__ AppPredictionUIWidget: _APUIIconLocationAppPredictions
__ AppPredictionUIWidget: _OBJC_CLASS_$_APUIAppPredictionViewController
__ AppPredictionUIWidget: _OBJC_CLASS_$_APUISuggestionsWidgetViewController
__ AppStoreDaemon: _OBJC_CLASS_$_ASDRepairOptions
__ AppStoreDaemon: _OBJC_CLASS_$_ASDRepairService
__ AppSupport: _CPDateFormatStringForFormatType
__ AppSupport: _CPNoAMPMTimeFormat
__ AppSupport: _CPPhoneNumberCopyActiveCountryCode
__ AppSupport: _CPPhoneNumberCopyActiveCountryCodeNoDefault
__ AppSupport: _CPPhoneNumberSetActiveCountryCode
__ AppSupport: _CPPhoneNumberSetHomeCountryCode
__ AppSupport: _CPPhoneNumberSetNetworkCountryCode
__ AppSupport: _CPSharedResourcesDirectory
__ AppSupport: _CPSqliteSetDefaultPageCacheSize
__ AppSupport: _CPSqliteSetDefaultSharedCacheModeEnabledState
__ AppSupport: _OBJC_CLASS_$_RadiosPreferences
__ AssistantServices: _OBJC_CLASS_$_AFSiriUserNotificationRequest
__ AssistantServices: _OBJC_CLASS_$_AFSiriUserNotificationRequestCapabilityManager
__ AttentionAwareness: _OBJC_CLASS_$_AWAttentionAwarenessClient
__ AttentionAwareness: _OBJC_CLASS_$_AWAttentionAwarenessConfiguration
__ AttentionAwareness: _OBJC_CLASS_$_AWAttentionLostEvent
__ AudioToolbox: _AudioServicesAddSystemSoundCompletion
__ AudioToolbox: _AudioServicesCreateSystemSoundIDWithPath
__ AudioToolbox: _AudioServicesPlaySystemSoundWithCompletion
__ AudioToolbox: _AudioServicesPlaySystemSoundWithVibration
__ AudioToolbox: _AudioServicesRemoveSystemSoundCompletion
__ AudioToolbox: _AudioServicesStopSystemSound
__ BackBoardServices: _BKHIDServicesGetCurrentDeviceOrientation
__ BackBoardServices: _BKHIDServicesGetNonFlatDeviceOrientation
__ BackBoardServices: _BKLogDisplay
__ BackBoardServices: _BKLogOrientationClient
__ BackBoardServices: _BKLogOrientationDevice
__ BackBoardServices: _BKLogOrientationGlobal
__ BackBoardServices: _BKSActivateForEventOptionTypeBackgroundContentFetching
__ BackBoardServices: _BKSApplicationStateAppIsFrontmostKey
__ BackBoardServices: _BKSApplicationStateRunningReasonAssertionReasonKey
__ BackBoardServices: _BKSApplicationStateRunningReasonsKey
__ BackBoardServices: _BKSDebugOptionKeyArguments
__ BackBoardServices: _BKSDebugOptionKeyCancelDebugOnNextLaunch
__ BackBoardServices: _BKSDebugOptionKeyDebugOnNextLaunch
__ BackBoardServices: _BKSDebugOptionKeyDisableASLR
__ BackBoardServices: _BKSDebugOptionKeyEnvironment
__ BackBoardServices: _BKSDebugOptionKeyStandardErrorPath
__ BackBoardServices: _BKSDebugOptionKeyStandardOutPath
__ BackBoardServices: _BKSDebugOptionKeyWaitForDebugger
__ BackBoardServices: _BKSDisplayBrightnessGetCurrent
__ BackBoardServices: _BKSDisplayBrightnessRestoreSystemBrightness
__ BackBoardServices: _BKSDisplayBrightnessSet
__ BackBoardServices: _BKSDisplayBrightnessSetWithImplicitTransaction
__ BackBoardServices: _BKSDisplayBrightnessTransactionCreate
__ BackBoardServices: _BKSDisplayServicesArchiveWithOptionsAndCompletion
__ BackBoardServices: _BKSDisplayServicesDisplayIsTethered
__ BackBoardServices: _BKSDisplayServicesSetScreenBlanked
__ BackBoardServices: _BKSDisplayServicesTetherPrefsNeedImmediateUpdate
__ BackBoardServices: _BKSDisplayServicesUpdateMirroredDisplayOrientationWithInterfaceOrientation
__ BackBoardServices: _BKSDisplayServicesUpdateTetheredDisplayOrientationIfNecessaryWithInterfaceOrientation
__ BackBoardServices: _BKSDisplayServicesWillUnblank
__ BackBoardServices: _BKSHIDEventGetBaseAttributes
__ BackBoardServices: _BKSHIDEventGetConciseDescription
__ BackBoardServices: _BKSHIDEventGetDigitizerAttributes
__ BackBoardServices: _BKSHIDEventGetPointerAttributes
__ BackBoardServices: _BKSHIDEventGetSmartCoverStateFromEvent
__ BackBoardServices: _BKSHIDEventGetSourceFromKeyboardEvent
__ BackBoardServices: _BKSHIDEventSendToProcess
__ BackBoardServices: _BKSHIDEventSendToProcessAndFollowDeferringRules
__ BackBoardServices: _BKSHIDServicesAmbientLightSensorDisableAutoBrightness
__ BackBoardServices: _BKSHIDServicesAmbientLightSensorEnableAutoBrightness
__ BackBoardServices: _BKSHIDServicesCancelTouchesOnMainDisplay
__ BackBoardServices: _BKSHIDServicesGetBacklightFactor
__ BackBoardServices: _BKSHIDServicesGetRingerState
__ BackBoardServices: _BKSHIDServicesIsOrientationLockedWithOrientation
__ BackBoardServices: _BKSHIDServicesIsSmartCoverClosed
__ BackBoardServices: _BKSHIDServicesLastUserEventTime
__ BackBoardServices: _BKSHIDServicesLockOrientation
__ BackBoardServices: _BKSHIDServicesNotifyOnNextUserEvent
__ BackBoardServices: _BKSHIDServicesProximityDetectionActive
__ BackBoardServices: _BKSHIDServicesRequestProximityDetectionMode
__ BackBoardServices: _BKSHIDServicesResetProximityCalibration
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorPending
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorWithFadeDuration
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorWithFadeDurationAsync
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorWithFadeDurationSilently
__ BackBoardServices: _BKSHIDServicesSetBacklightFactorWithFadeDurationSilentlyAsync
__ BackBoardServices: _BKSHIDServicesSetDeviceInterfaceOrientation
__ BackBoardServices: _BKSHIDServicesSetHIDUILockedStateWithSource
__ BackBoardServices: _BKSHIDServicesSetHitTestRegionsForDisplay
__ BackBoardServices: _BKSHIDServicesSetMinimumBrightnessLevelWithFadeDuration
__ BackBoardServices: _BKSHIDServicesSetObjectInProximityIgnoresTouches
__ BackBoardServices: _BKSHIDServicesSetOrientationClient
__ BackBoardServices: _BKSHIDServicesUnlockOrientation
__ BackBoardServices: _BKSTerminationAssertionRegisterObserver
__ BackBoardServices: _NSStringFromBKSHIDEventSource
__ BackBoardServices: _NSStringFromBKSHIDUILockSource
__ BackBoardServices: _NSStringFromBKSHIDUILockState
__ BackBoardServices: _NSStringFromBKSKeyModifierFlags
__ BackBoardServices: _OBJC_CLASS_$_BKSApplicationStateMonitor
__ BackBoardServices: _OBJC_CLASS_$_BKSButtonHapticsController
__ BackBoardServices: _OBJC_CLASS_$_BKSButtonHapticsDefinition
__ BackBoardServices: _OBJC_CLASS_$_BKSDisplayProgressIndicatorProperties
__ BackBoardServices: _OBJC_CLASS_$_BKSDisplayRenderOverlay
__ BackBoardServices: _OBJC_CLASS_$_BKSDisplayRenderOverlayDescriptor
__ BackBoardServices: _OBJC_CLASS_$_BKSEventFocusDeferralProperties
__ BackBoardServices: _OBJC_CLASS_$_BKSEventFocusManager
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDeferringEnvironment
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDeferringToken
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDeliveryManager
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDescriptor
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDiscreteDispatchingRule
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDispatchingTarget
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventDisplay
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventKeyboardDescriptor
__ BackBoardServices: _OBJC_CLASS_$_BKSHIDEventSenderDescriptor
__ BackBoardServices: _OBJC_CLASS_$_BKSHitTestRegion
__ BackBoardServices: _OBJC_CLASS_$_BKSInsecureDrawingAction
__ BackBoardServices: _OBJC_CLASS_$_BKSMousePointerService
__ BackBoardServices: _OBJC_CLASS_$_BKSMutableHIDEventDeferringPredicate
__ BackBoardServices: _OBJC_CLASS_$_BKSMutableHIDEventDeferringTarget
__ BackBoardServices: _OBJC_CLASS_$_BKSMutableHIDEventDiscreteDispatchingPredicate
__ BackBoardServices: _OBJC_CLASS_$_BKSProcessAssertion
__ BackBoardServices: _OBJC_CLASS_$_BKSRestartAction
__ BackBoardServices: _OBJC_CLASS_$_BKSTouchDeliveryObservationService
__ BackBoardServices: _kBKSHIDServicesUserEventOccurred
__ BannerKit: _BNBannerKitWorkspaceIdentifier
__ BannerKit: _OBJC_CLASS_$_BNBannerController
__ BannerKit: _OBJC_CLASS_$_BNBannerHostMonitorListener
__ BannerKit: _OBJC_CLASS_$_BNBannerSource
__ BannerKit: _OBJC_CLASS_$_BNBannerSourceLayoutDescription
__ BannerKit: _OBJC_CLASS_$_BNBannerSourceListener
__ BannerKit: _OBJC_CLASS_$_BNContentViewController
__ BaseBoardUI: _BSUIConstrainValueToIntervalWithRubberBand
__ BaseBoardUI: _BSUIConstrainValueWithRubberBand
__ BaseBoardUI: _BSUISurfaceWithColorSpaceAndDrawBlock
__ BaseBoardUI: _OBJC_CLASS_$_BSUIAnimationFactory
__ BaseBoardUI: _OBJC_CLASS_$_BSUICAPackageView
__ BaseBoardUI: _OBJC_CLASS_$_BSUIEmojiLabelView
__ BaseBoardUI: _OBJC_CLASS_$_BSUIFontProvider
__ BaseBoardUI: _OBJC_CLASS_$_BSUIScrollView
__ BaseBoardUI: _OBJC_METACLASS_$_BSUIScrollView
__ BaseBoardUI: __BSUI_Private_IsN84
__ BatteryCenter: _OBJC_CLASS_$_BCBatteryDevice
__ BatteryCenter: _OBJC_CLASS_$_BCBatteryDeviceController
__ BatteryCenter: _kBCBatteryDeviceB222ProductIdentifier
__ BatteryCenterUI: _OBJC_CLASS_$_BCUIBatteryAvocadoViewController
__ BluetoothManager: _BluetoothAvailabilityChangedNotification
__ BluetoothManager: _BluetoothConnectionStatusChangedNotification
__ BluetoothManager: _BluetoothDeviceBatteryChangedNotification
__ BluetoothManager: _BluetoothDeviceConnectSuccessNotification
__ BluetoothManager: _BluetoothDeviceDisconnectSuccessNotification
__ BluetoothManager: _BluetoothHandsfreeEndedVoiceCommand
__ BluetoothManager: _BluetoothHandsfreeInitiatedVoiceCommand
__ BluetoothManager: _BluetoothStateChangedNotification
__ BluetoothManager: _OBJC_CLASS_$_BluetoothDevice
__ BluetoothManager: _OBJC_CLASS_$_BluetoothManager
__ BulletinBoard: _BBObserverGatewayLocalName
__ BulletinBoard: _BBServerRun
__ BulletinBoard: _BBServerSetAllowsPublication
__ BulletinBoard: _BBServerSetDefaultExpirationComponents
__ BulletinBoard: _OBJC_CLASS_$_BBBulletinRequest
__ BulletinBoard: _OBJC_CLASS_$_BBObserver
__ CPMS: _OBJC_CLASS_$_CPMSAgent
__ CPMS: _OBJC_CLASS_$_CPMSStateReader
__ CarKit: _OBJC_CLASS_$_CARAutomaticDNDStatus
__ CarKit: _OBJC_CLASS_$_CRCarPlayAppDeclaration
__ CarKit: _OBJC_CLASS_$_CRCarPlayAppPolicyEvaluator
__ CarPlayUIServices: _CRSUIBannerRevocationReasonHomeButton
__ CarPlayUIServices: _CRSUIBannerRevocationReasonTouchOutsideDismiss
__ Celestial: _AVSystemController_ActiveAudioRouteAttribute
__ Celestial: _AVSystemController_ActiveAudioRouteDidChangeNotification
__ Celestial: _AVSystemController_AudioFullMutedNotificationParameter
__ Celestial: _AVSystemController_AudioIsPlayingSomewhereAttribute
__ Celestial: _AVSystemController_CurrentExternalScreenAttribute
__ Celestial: _AVSystemController_CurrentVideoStreamsAttribute
__ Celestial: _AVSystemController_CurrentVideoStreams_BundleID
__ Celestial: _AVSystemController_CurrentVideoStreams_VideoRoutes
__ Celestial: _AVSystemController_DeviceManufacturedForEURegion
__ Celestial: _AVSystemController_EUVolumeLimitAttribute
__ Celestial: _AVSystemController_EUVolumeLimitDidChangeNotification
__ Celestial: _AVSystemController_EUVolumeLimitEnforcedAttribute
__ Celestial: _AVSystemController_EUVolumeLimitEnforcedDidChangeNotification
__ Celestial: _AVSystemController_EUVolumeLimitEnforcedNotificationParameter
__ Celestial: _AVSystemController_EUVolumeLimitNotificationParameter
__ Celestial: _AVSystemController_EffectiveVolumeDidChangeNotification
__ Celestial: _AVSystemController_EffectiveVolumeNotificationParameter_Category
__ Celestial: _AVSystemController_EffectiveVolumeNotificationParameter_Volume
__ Celestial: _AVSystemController_EffectiveVolumeNotificationParameter_VolumeChangeReason
__ Celestial: _AVSystemController_ExternalScreenDidChangeNotification
__ Celestial: _AVSystemController_ExternalScreenType_AirPlay
__ Celestial: _AVSystemController_FullMuteAttribute
__ Celestial: _AVSystemController_FullMuteDidChangeNotification
__ Celestial: _AVSystemController_HeadphoneJackHasInputAttribute
__ Celestial: _AVSystemController_HeadphoneJackIsConnectedAttribute
__ Celestial: _AVSystemController_HeadphoneJackIsConnectedDidChangeNotification
__ Celestial: _AVSystemController_LongFormVideoAppsAttribute
__ Celestial: _AVSystemController_PickableRouteType_Wireless
__ Celestial: _AVSystemController_PickableRoutesAttribute
__ Celestial: _AVSystemController_PickableRoutesDidChangeNotification
__ Celestial: _AVSystemController_PickedRouteAttribute
__ Celestial: _AVSystemController_RouteDescriptionKey_AVAudioRouteName
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_IsBTManaged
__ Celestial: _AVSystemController_RouteDescriptionKey_BTDetails_ProductID
__ Celestial: _AVSystemController_RouteDescriptionKey_IsCurrentlyPickedOnPairedDevice
__ Celestial: _AVSystemController_RouteDescriptionKey_RouteCurrentlyPicked
__ Celestial: _AVSystemController_RouteDescriptionKey_RouteType
__ Celestial: _AVSystemController_RouteDescriptionKey_RouteUID
__ Celestial: _AVSystemController_ServerConnectionDiedNotification
__ Celestial: _AVSystemController_SoftMuteDidChangeNotification
__ Celestial: _AVSystemController_SoftMuteNotificationParameter
__ Celestial: _AVSystemController_SomeClientIsPlayingDidChangeNotification
__ Celestial: _AVSystemController_SomeClientIsPlayingNotificationParameter
__ Celestial: _AVSystemController_SystemHasAudioInputDeviceAttribute
__ Celestial: _AVSystemController_VideoStreamsDidChangeNotification
__ Celestial: _AVSystemController_VideoStreamsDidChangeNotificationParameter_BundleID
__ Celestial: _AVSystemController_VideoStreamsDidChangeNotificationParameter_RouteNames
__ Celestial: _FigCreateCGImageFromJPEG
__ Celestial: _OBJC_CLASS_$_AVSystemController
__ ChronoServices: _CHSFlushPowerlog
__ ChronoServices: _CHSIsWidgetExtensionPoint
__ ChronoServices: _CHSWidgetFamilyDescription
__ ChronoServices: _CHSWidgetFamilyFromString
__ ChronoServices: _CHSWidgetFamilyMaskContainsFamily
__ ChronoServices: _OBJC_CLASS_$_CHSApplicationProcessStateChangeConsumer
__ ChronoServices: _OBJC_CLASS_$_CHSConfiguredWidgetContainerConsumer
__ ChronoServices: _OBJC_CLASS_$_CHSConfiguredWidgetContainerDescriptor
__ ChronoServices: _OBJC_CLASS_$_CHSConfiguredWidgetDescriptor
__ ChronoServices: _OBJC_CLASS_$_CHSTimelineController
__ ChronoServices: _OBJC_CLASS_$_CHSToolSupportService
__ ChronoServices: _OBJC_CLASS_$_CHSWidget
__ ChronoUIServices: _CHUISAvocadoWorkspaceIdentifier
__ ClipUIServices: _OBJC_CLASS_$_CPSClipOverlayViewController
__ CloudServices: _OBJC_CLASS_$_SecureBackup
__ CloudServices: _kSecureBackupPassphraseKey
__ Contacts: _OBJC_CLASS_$_CNContact
__ Contacts: _OBJC_CLASS_$_CNContactFormatter
__ Contacts: _OBJC_CLASS_$_CNContactStore
__ ContactsUI: _OBJC_CLASS_$_CNMonogrammer
__ ControlCenterServices: _OBJC_CLASS_$_CCSModulePresentationOptions
__ ControlCenterServices: _OBJC_CLASS_$_CCSRemoteServiceProvider
__ ControlCenterUI: _OBJC_CLASS_$_CCUIControlCenterDefaults
__ ControlCenterUI: _OBJC_CLASS_$_CCUIModularControlCenterOverlayViewController
__ ControlCenterUI: _OBJC_CLASS_$_CCUIModuleAlertViewController
__ ControlCenterUI: _OBJC_CLASS_$_CCUISensorActivityData
__ ControlCenterUI: _OBJC_CLASS_$_CCUIStatusBarStyleSnapshot
__ ControlCenterUIKit: _CCUIAppLaunchOriginControlCenter
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUICAPackageDescription
__ ControlCenterUIKit: _OBJC_CLASS_$_CCUIContinuousSliderView
__ CoreAnalytics: _AnalyticsSendEvent
__ CoreAnalytics: _AnalyticsSendEventLazy
__ CoreBrightness: _OBJC_CLASS_$_CBAdaptationClient
__ CoreBrightness: _OBJC_CLASS_$_CBBlueLightClient
__ CoreBrightness: _OBJC_CLASS_$_CBClient
__ CoreBrightness: _OBJC_CLASS_$_KeyboardBrightnessClient
__ CoreBrightness: _kKBIDDefault
__ CoreDuet: _OBJC_CLASS_$__CDBatterySaver
__ CoreDuet: _kLPMSourceSpringBoardAlert
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFArrayApplyFunction
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFDataCreate
__ CoreFoundation: _CFDataGetBytes
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDictionaryApplyFunction
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryGetCount
__ CoreFoundation: _CFDictionaryGetTypeID
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterGetLocalCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNotificationCenterRemoveEveryObserver
__ CoreFoundation: _CFNotificationCenterRemoveObserver
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFPreferencesAppSynchronize
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesCopyValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPreferencesSetAppValue
__ CoreFoundation: _CFPreferencesSetValue
__ CoreFoundation: _CFPreferencesSynchronize
__ CoreFoundation: _CFPropertyListCreateData
__ CoreFoundation: _CFPropertyListCreateWithData
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddObserver
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopAddTimer
__ CoreFoundation: _CFRunLoopCopyCurrentMode
__ CoreFoundation: _CFRunLoopGetCurrent
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopObserverCreateWithHandler
__ CoreFoundation: _CFRunLoopObserverInvalidate
__ CoreFoundation: _CFRunLoopPerformBlock
__ CoreFoundation: _CFRunLoopRemoveObserver
__ CoreFoundation: _CFRunLoopRunInMode
__ CoreFoundation: _CFRunLoopTimerCreate
__ CoreFoundation: _CFRunLoopTimerInvalidate
__ CoreFoundation: _CFRunLoopWakeUp
__ CoreFoundation: _CFSetContainsValue
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _CFStringCreateWithCString
__ CoreFoundation: _CFStringGetTypeID
__ CoreFoundation: _CFTimeZoneCopySystem
__ CoreFoundation: _CFTimeZoneCreateWithName
__ CoreFoundation: _CFTimeZoneGetName
__ CoreFoundation: _CFUUIDCreate
__ CoreFoundation: _CFUUIDCreateString
__ CoreFoundation: _NSCurrentLocaleDidChangeNotification
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _NSURLIsDirectoryKey
__ CoreFoundation: _NSURLIsExcludedFromBackupKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDateComponents
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: __CFCopyServerVersionDictionary
__ CoreFoundation: __CFCopySystemVersionDictionary
__ CoreFoundation: __CFCopySystemVersionDictionaryValue
__ CoreFoundation: __CFPreferencesAppFullCloudSynchronize
__ CoreFoundation: __CFPreferencesFlushCachesForIdentifier
__ CoreFoundation: __CFPreferencesGetAppBooleanValueWithContainer
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: __kCFBundleURLSchemesKey
__ CoreFoundation: __kCFBundleURLTypesKey
__ CoreFoundation: __kCFSystemVersionBuildVersionKey
__ CoreFoundation: __kCFSystemVersionProductNameKey
__ CoreFoundation: __kCFSystemVersionProductVersionKey
__ CoreFoundation: _kCFAbsoluteTimeIntervalSince1970
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFPreferencesAnyApplication
__ CoreFoundation: _kCFPreferencesAnyHost
__ CoreFoundation: _kCFPreferencesCurrentHost
__ CoreFoundation: _kCFPreferencesCurrentUser
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationAlertSourceKey
__ CoreFoundation: _kCFUserNotificationAlertTopMostKey
__ CoreFoundation: _kCFUserNotificationAlternateButtonTitleKey
__ CoreFoundation: _kCFUserNotificationDefaultButtonTitleKey
__ CoreFoundation: _kCFUserNotificationKeyboardTypesKey
__ CoreFoundation: _kCFUserNotificationLocalizationPathKey
__ CoreFoundation: _kCFUserNotificationOtherButtonTitleKey
__ CoreFoundation: _kCFUserNotificationSoundPathKey
__ CoreFoundation: _kCFUserNotificationTextFieldTitlesKey
__ CoreFoundation: _kCFUserNotificationTextFieldValuesKey
__ CoreFoundation: _kCFUserNotificationTimeoutKey
__ CoreFoundation: _kCFUserNotificationTokenKey
__ CoreGraphics: _CGAffineTransformConcat
__ CoreGraphics: _CGAffineTransformEqualToTransform
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformInvert
__ CoreGraphics: _CGAffineTransformIsIdentity
__ CoreGraphics: _CGAffineTransformMakeRotation
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformMakeTranslation
__ CoreGraphics: _CGAffineTransformRotate
__ CoreGraphics: _CGAffineTransformScale
__ CoreGraphics: _CGAffineTransformTranslate
__ CoreGraphics: _CGContextFillRect
__ CoreGraphics: _CGContextRotateCTM
__ CoreGraphics: _CGContextTranslateCTM
__ CoreGraphics: _CGDataProviderCreateWithFilename
__ CoreGraphics: _CGDataProviderRelease
__ CoreGraphics: _CGImageBlockSetRelease
__ CoreGraphics: _CGImageCreateWithJPEGDataProvider
__ CoreGraphics: _CGImageCreateWithPNGDataProvider
__ CoreGraphics: _CGImageGetAlphaInfo
__ CoreGraphics: _CGImageGetDataProvider
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetTypeID
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectContainsPoint
__ CoreGraphics: _CGRectContainsRect
__ CoreGraphics: _CGRectDivide
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntegral
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIntersectsRect
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectIsInfinite
__ CoreGraphics: _CGRectIsNull
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectOffset
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreLocation: _CLGetStatusBarIconState
__ CoreLocation: _CLShouldDisplayStatusBarIconChangedNotification
__ CoreMotion: _CMPersistOrientationCallbackModeKey
__ CoreMotion: _CMSetDeviceOrientationNotification
__ CoreMotion: _CMSetDeviceOrientationTypeKey
__ CoreMotion: _OBJC_CLASS_$_CMDeviceOrientationManager
__ CoreMotion: _OBJC_CLASS_$_CMGestureManager
__ CoreMotion: _OBJC_CLASS_$_CMPocketStateManager
__ CoreMotion: _OBJC_CLASS_$_CMWakeGestureManager
__ CoreServices: _LSFileProviderStringKey
__ CoreServices: _LSRequireOpenInPlaceKey
__ CoreServices: _LSUserApplicationType
__ CoreServices: _OBJC_CLASS_$_LSAppLink
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _OBJC_CLASS_$_LSApplicationRecord
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ CoreServices: _OBJC_CLASS_$_LSDocumentProxy
__ CoreServices: _OBJC_CLASS_$_LSPlugInKitProxy
__ CoreServices: _OBJC_CLASS_$__LSOpenConfiguration
__ CoreServices: __LSCopyAdvertisementStringForTeamIdentifierAndActivityType
__ CoreServices: __LSHandlerRankOwner
__ CoreTelephony: _CTStartOTASP
__ CoreTelephony: _CTTelephonyCenterAddObserver
__ CoreTelephony: _CTTelephonyCenterGetDefault
__ CoreTelephony: _CTTelephonyCenterSetDefaultRunloop
__ CoreTelephony: _OBJC_CLASS_$_CTTelephonyNetworkInfo
__ CoreTelephony: _OBJC_CLASS_$_CoreTelephonyClient
__ CoreTelephony: __CTServerConnectionCopyMobileCountryCode
__ CoreTelephony: __CTServerConnectionCopyMobileSubscriberHomeCountryList
__ CoreTelephony: __CTServerConnectionCopyOperatorName
__ CoreTelephony: __CTServerConnectionCreateWithIdentifier
__ CoreTelephony: __CTServerConnectionDisableRegistration
__ CoreTelephony: __CTServerConnectionDormancySuspendAssertionCreate
__ CoreTelephony: __CTServerConnectionDumpBasebandState
__ CoreTelephony: __CTServerConnectionEnableRegistration
__ CoreTelephony: __CTServerConnectionGetEmergencyCallBackMode
__ CoreTelephony: __CTServerConnectionSetTargetQueue
__ CoreTelephony: _kCTCellularDataPlanActivationStatus
__ CoreTelephony: _kCTCellularDataPlanActivationSuccessKey
__ CoreTelephony: _kCTCellularDataPlanAutorenewEnabledKey
__ CoreTelephony: _kCTCellularDataPlanBucketPlanSizeKey
__ CoreTelephony: _kCTCellularDataPlanStatusNotification
__ CoreTelephony: _kCTCellularDataPlanStatusTypeKey
__ CoreTelephony: _kCTCellularDataPlanTimedPlanPeriodEndDateKey
__ CoreTelephony: _kCTCellularDataPlanTimedPlanUsageCapKey
__ CoreTelephony: _kCTCellularDataPlanUsageKey
__ CoreTelephony: _kCTCellularDataPlanUsageStatus
__ CoreTelephony: _kCTEmergencyCallBackMode
__ CoreTelephony: _kCTEmergencyCallBackModeStatusNotification
__ CoreTelephony: _kCTRegistrationCellularDataPlanAccountURL
__ CoreTelephony: _kCTRegistrationCellularDataPlanActivateFailedNotification
__ CoreTelephony: _kCTRegistrationCellularDataPlanNewAccount
__ CoreTelephony: _kCTSIMSupportSIMStatusReady
__ CoreTelephony: _kCTServiceProvisioningFailedNotification
__ CoreTelephony: _kCTServiceProvisioningStartedNotification
__ CoreTelephony: _kCTServiceProvisioningSuccessfulNotification
__ CoreTelephony: _kCTTelephonyCenterDaemonRestartNotification
__ CoreText: _CTFontGetLanguageAwareOutsets
__ CoreTime: _TMIsAutomaticTimeZoneEnabled
__ CoreVideo: _CVPixelBufferCreateWithIOSurface
__ CoreVideo: _CVPixelBufferGetIOSurface
__ CoreVideo: _CVPixelBufferRelease
__ CoverSheet: _CSBoundsWidth
__ CoverSheet: _CSEventShouldBeLogged
__ CoverSheet: _CSPageViewControllerRoleCamera
__ CoverSheet: _NSStringFromCoverSheetEventType
__ CoverSheet: _OBJC_CLASS_$_CSAction
__ CoverSheet: _OBJC_CLASS_$_CSAppearance
__ CoverSheet: _OBJC_CLASS_$_CSBatteryChargingView
__ CoverSheet: _OBJC_CLASS_$_CSBehavior
__ CoverSheet: _OBJC_CLASS_$_CSComponent
__ CoverSheet: _OBJC_CLASS_$_CSContentCutoutBoundsCalculator
__ CoverSheet: _OBJC_CLASS_$_CSCoverSheetViewBase
__ CoverSheet: _OBJC_CLASS_$_CSCoverSheetViewController
__ CoverSheet: _OBJC_CLASS_$_CSCoverSheetViewControllerBase
__ CoverSheet: _OBJC_CLASS_$_CSEvent
__ CoverSheet: _OBJC_CLASS_$_CSHomeAffordanceView
__ CoverSheet: _OBJC_CLASS_$_CSLockScreenDomain
__ CoverSheet: _OBJC_CLASS_$_CSMainPageContentViewController
__ CoverSheet: _OBJC_CLASS_$_CSModalView
__ CoverSheet: _OBJC_CLASS_$_CSPageControl
__ CoverSheet: _OBJC_CLASS_$_CSPageViewController
__ CoverSheet: _OBJC_CLASS_$_CSPoseidonViewController
__ CoverSheet: _OBJC_CLASS_$_CSPreciseDateProvider
__ CoverSheet: _OBJC_CLASS_$_CSQuickActionsViewController
__ CoverSheet: _OBJC_CLASS_$_CSRegion
__ CoverSheet: _OBJC_CLASS_$_CSSimpleLockScreenActionProvider
__ CoverSheet: _OBJC_CLASS_$_CSTodayPageViewController
__ CoverSheet: _OBJC_CLASS_$_CSVibrancyUtility
__ CoverSheet: _OBJC_METACLASS_$_CSCoverSheetViewBase
__ CoverSheet: _OBJC_METACLASS_$_CSCoverSheetViewControllerBase
__ CoverSheet: _OBJC_METACLASS_$_CSPageViewController
__ CrashReporterSupport: _GetThermalState
__ CrashReporterSupport: _OSAWriteLogForSubmission
__ CrashReporterSupport: _kOSAProblemTypeLowBattery
__ CrashReporterSupport: _logEventForAppleCare
__ DataAccessExpress: _OBJC_CLASS_$_DADConnection
__ DataMigration: _DMPerformMigration
__ DeviceManagement: _OBJC_CLASS_$_DMFCommunicationPolicyMonitor
__ DoNotDisturb: _OBJC_CLASS_$_DNDEventBehaviorResolutionService
__ DoNotDisturb: _OBJC_CLASS_$_DNDMutableClientEventDetails
__ DoNotDisturb: _OBJC_CLASS_$_DNDStateService
__ DoNotDisturbKit: _OBJC_CLASS_$_DNDAWDMetricsService
__ DoNotDisturbKit: _OBJC_CLASS_$_DNDNotificationsService
__ DoNotDisturbServer: _DNDSRunServer
__ DoNotDisturbServer: _DNDSSetUILockState
__ DuetExpertCenter: _OBJC_CLASS_$__DECConsumer
__ DuetExpertCenter: _OBJC_CLASS_$__DECFeedbackProvider
__ DuetExpertCenter: _OBJC_CLASS_$__DECLocationAppItem
__ DuetExpertCenter: __DECPredictionReasonDeviceName
__ DuetExpertCenter: __DECPredictionReasonLocationOfInterestType
__ DuetExpertCenter: __kDECFeedbackMetadataLaunchSource
__ EmbeddedDataReset: _OBJC_CLASS_$_DDRResetOptions
__ EmbeddedDataReset: _OBJC_CLASS_$_DDRResetRequest
__ EmbeddedDataReset: _OBJC_CLASS_$_DDRResetService
__ FTClientServices: _OBJC_CLASS_$_FTCServiceAvailabilityCenter
__ FileProvider: _FPExtendBookmarkForDocumentURL
__ FindMyDevice: _OBJC_CLASS_$_FMDFMIPManager
__ FindMyDevice: _kLostModeChangedNotification
__ Foundation: _NSAllMapTableKeys
__ Foundation: _NSAllMapTableValues
__ Foundation: _NSClassFromString
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSHomeDirectory
__ Foundation: _NSIntersectionRange
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyedArchiveRootObjectKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedFailureReasonErrorKey
__ Foundation: _NSLog
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSRequestConcreteImplementation
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromBOOL
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromPoint
__ Foundation: _NSStringFromProtocol
__ Foundation: _NSStringFromRange
__ Foundation: _NSStringFromRect
__ Foundation: _NSStringFromSelector
__ Foundation: _NSStringFromSize
__ Foundation: _NSTemporaryDirectory
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _NSUserDefaultsDidChangeNotification
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSDistributedNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSExtension
__ Foundation: _OBJC_CLASS_$_NSExtensionItem
__ Foundation: _OBJC_CLASS_$_NSFileHandle
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexPath
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSItemProvider
__ Foundation: _OBJC_CLASS_$_NSJSONSerialization
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSLayoutConstraint
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMachPort
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPointerArray
__ Foundation: _OBJC_CLASS_$_NSPointerFunctions
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSRecursiveLock
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSScanner
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLComponents
__ Foundation: _OBJC_CLASS_$_NSURLQueryItem
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUbiquitousKeyValueStore
__ Foundation: _OBJC_CLASS_$_NSUserActivity
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_CLASS_$_NSXPCListener
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ FrontBoard: _BSAbsoluteTimeFromMachTime
__ FrontBoard: _BSBundleIDForAuditToken
__ FrontBoard: _BSBundleIDForExecutablePath
__ FrontBoard: _BSBundlePathForExecutablePath
__ FrontBoard: _BSCurrentUserDirectory
__ FrontBoard: _BSDegreesToRadians
__ FrontBoard: _BSDeserializeArrayOfBSXPCEncodableObjectsFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeBSXPCEncodableObjectFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeCFValueFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeCGRectFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeNSSecureEncodableObjectOfClassFromXPCDictionaryWithKey
__ FrontBoard: _BSDeserializeStringFromXPCDictionaryWithKey
__ FrontBoard: _BSDeviceOrientationDescription
__ FrontBoard: _BSDispatchBlockCreateWithQualityOfService
__ FrontBoard: _BSDispatchMain
__ FrontBoard: _BSDispatchQueueAssert
__ FrontBoard: _BSDispatchQueueAssertMain
__ FrontBoard: _BSDispatchQueueAssertNotMain
__ FrontBoard: _BSDispatchQueueCreate
__ FrontBoard: _BSDispatchQueueCreateSerial
__ FrontBoard: _BSDispatchQueueCreateSerialWithQoS
__ FrontBoard: _BSDispatchQueueCreateWithAttributes
__ FrontBoard: _BSDispatchQueueCreateWithQualityOfService
__ FrontBoard: _BSDispatchTimeFromTimeInterval
__ FrontBoard: _BSEqualArrays
__ FrontBoard: _BSEqualBools
__ FrontBoard: _BSEqualDictionaries
__ FrontBoard: _BSEqualObjects
__ FrontBoard: _BSEqualSets
__ FrontBoard: _BSEqualStrings
__ FrontBoard: _BSErrorCodeDescriptionKey
__ FrontBoard: _BSExecutablePathForAuditToken
__ FrontBoard: _BSExecutablePathForPID
__ FrontBoard: _BSFloatApproximatelyEqualToFloat
__ FrontBoard: _BSFloatByLinearlyInterpolatingFloats
__ FrontBoard: _BSFloatEqualToFloat
__ FrontBoard: _BSFloatGreaterThanFloat
__ FrontBoard: _BSFloatGreaterThanOrEqualToFloat
__ FrontBoard: _BSFloatIsOne
__ FrontBoard: _BSFloatIsZero
__ FrontBoard: _BSFloatLessThanFloat
__ FrontBoard: _BSFloatLessThanOrEqualToFloat
__ FrontBoard: _BSFloatRoundForScale
__ FrontBoard: _BSFormattedTimeFromSeconds
__ FrontBoard: _BSInterfaceOrientationDescription
__ FrontBoard: _BSInterfaceOrientationIsLandscape
__ FrontBoard: _BSInterfaceOrientationIsValid
__ FrontBoard: _BSInterfaceOrientationMaskDescription
__ FrontBoard: _BSIntervalMap
__ FrontBoard: _BSIntervalSubIntervalValueForValue
__ FrontBoard: _BSIntervalUnit
__ FrontBoard: _BSIntervalValueForFraction
__ FrontBoard: _BSIsBeingDebugged
__ FrontBoard: _BSLogAddStateCaptureBlockWithTitle
__ FrontBoard: _BSLogGetAllRegisteredStateCaptureBlocks
__ FrontBoard: _BSLogStateCaptureCheckPlistSizeIsPermitted
__ FrontBoard: _BSMachSendRightRelease
__ FrontBoard: _BSNSStringFromCGRect
__ FrontBoard: _BSPIDExists
__ FrontBoard: _BSPIDForAuditToken
__ FrontBoard: _BSPathExistsOnSystemPartition
__ FrontBoard: _BSPointEqualToPoint
__ FrontBoard: _BSPointRoundForScale
__ FrontBoard: _BSPrettyFunctionName
__ FrontBoard: _BSProcessDescriptionForPID
__ FrontBoard: _BSProcessNameForPID
__ FrontBoard: _BSRectByLinearlyInterpolatingRects
__ FrontBoard: _BSRectEqualToRect
__ FrontBoard: _BSRectRoundForScale
__ FrontBoard: _BSRectWithSize
__ FrontBoard: _BSRunLoopPerformAfterCACommit
__ FrontBoard: _BSSerializeArrayOfBSXPCEncodableObjectsToXPCDictionaryWithKey
__ FrontBoard: _BSSerializeBSXPCEncodableObjectToXPCDictionaryWithKey
__ FrontBoard: _BSSerializeCFValueToXPCDictionaryWithKey
__ FrontBoard: _BSSerializeCGRectToXPCDictionaryWithKey
__ FrontBoard: _BSSerializeDataToXPCDictionaryWithKey
__ FrontBoard: _BSSetMainThreadPriorityFixedForUI
__ FrontBoard: _BSSettingFlagDescription
__ FrontBoard: _BSSettingFlagForBool
__ FrontBoard: _BSSettingFlagIfYes
__ FrontBoard: _BSSettingFlagIsExplicitNo
__ FrontBoard: _BSSettingFlagIsYes
__ FrontBoard: _BSSizeEqualToSize
__ FrontBoard: _BSSizeGreaterThanOrEqualToSize
__ FrontBoard: _BSSizeLessThanSize
__ FrontBoard: _BSSizeRoundForScale
__ FrontBoard: _BSStringFromBOOL
__ FrontBoard: _BSSystemHasCapability
__ FrontBoard: _BSTemporaryFileAtPath
__ FrontBoard: _BSTimeUntilNextClockMinute
__ FrontBoard: _BSTimerIntervalMin
__ FrontBoard: _BSTransactionErrorDomain
__ FrontBoard: _BSTransactionErrorReasonKey
__ FrontBoard: _FBDisplayLayoutDidUpdateNotification
__ FrontBoard: _FBSActivateForEventOptionTypeBackgroundContentFetching
__ FrontBoard: _FBSApplicationLibraryLoggingSubsystem
__ FrontBoard: _FBSApplicationTerminationReasonDescription
__ FrontBoard: _FBSApplicationTerminationReasonIsGraceful
__ FrontBoard: _FBSDebugOptionKeyExtensionBundleID
__ FrontBoard: _FBSDebugOptionKeyExtensionPointID
__ FrontBoard: _FBSDisplayHDRModeToCADisplayHDRMode
__ FrontBoard: _FBSDisplayLayoutElementControlCenterIdentifier
__ FrontBoard: _FBSDisplayLayoutElementLockScreenIdentifier
__ FrontBoard: _FBSDisplayLayoutElementSiriIdentifier
__ FrontBoard: _FBSDisplayOverscanCompensationDescription
__ FrontBoard: _FBSDisplayOverscanCompensationIsValid
__ FrontBoard: _FBSDisplayOverscanCompensationToCADisplayOverscanAdjustment
__ FrontBoard: _FBSInstallTypeIsCloudDemoted
__ FrontBoard: _FBSOpenApplicationErrorCreate
__ FrontBoard: _FBSOpenApplicationOptionKeyActions
__ FrontBoard: _FBSOpenApplicationOptionKeyActivateAsClassic
__ FrontBoard: _FBSOpenApplicationOptionKeyActivateForEvent
__ FrontBoard: _FBSOpenApplicationOptionKeyActivateSuspended
__ FrontBoard: _FBSOpenApplicationOptionKeyAppLink4LS
__ FrontBoard: _FBSOpenApplicationOptionKeyBrowserAppLinkState4LS
__ FrontBoard: _FBSOpenApplicationOptionKeyDebuggingOptions
__ FrontBoard: _FBSOpenApplicationOptionKeyLaunchImageName
__ FrontBoard: _FBSOpenApplicationOptionKeyLaunchIntent
__ FrontBoard: _FBSOpenApplicationOptionKeyLaunchOrigin
__ FrontBoard: _FBSOpenApplicationOptionKeyPayloadAnnotation
__ FrontBoard: _FBSOpenApplicationOptionKeyPayloadOptions
__ FrontBoard: _FBSOpenApplicationOptionKeyPayloadURL
__ FrontBoard: _FBSOpenApplicationOptionKeyPromptUnlockDevice
__ FrontBoard: _FBSOpenApplicationOptionKeyUnlockDevice
__ FrontBoard: _FBSOpenApplicationWithNewScene
__ FrontBoard: _FBSProcessPrettyDescription
__ FrontBoard: _FBSProcessResourceAllowanceScale
__ FrontBoard: _FBSSceneLevelMaximum
__ FrontBoard: _FBSSceneSnapshotActionResponseForErrorCode
__ FrontBoard: _FBSSceneVisibilityEndowmentNamespace
__ FrontBoard: _FBServiceClientAuthenticatorErrorDomain
__ FrontBoard: _FBSystemAppBundleID
__ FrontBoard: _FBSystemShellInitialize
__ FrontBoard: _FBTMilestoneSynchronizedCommit
__ FrontBoard: _FBWorkspaceLogCommon
__ FrontBoard: _FBWorkspaceLogSceneLayout
__ FrontBoard: _FBWorkspaceLogTransaction
__ FrontBoard: _FBWorkspaceLogTransactionVerbose
__ FrontBoard: _NSStringFromFBProcessTaskState
__ FrontBoard: _NSStringFromFBProcessVisibility
__ FrontBoard: _NSStringFromFBSApplicationPlaceholderProgressState
__ FrontBoard: _NSStringFromFBSApplicationTrustState
__ FrontBoard: _OBJC_CLASS_$_BSAbstractDefaultDomain
__ FrontBoard: _OBJC_CLASS_$_BSAction
__ FrontBoard: _OBJC_CLASS_$_BSActionResponse
__ FrontBoard: _OBJC_CLASS_$_BSAnimationSettings
__ FrontBoard: _OBJC_CLASS_$_BSAtomicSignal
__ FrontBoard: _OBJC_CLASS_$_BSAuditToken
__ FrontBoard: _OBJC_CLASS_$_BSBlockSentinel
__ FrontBoard: _OBJC_CLASS_$_BSBlockTransaction
__ FrontBoard: _OBJC_CLASS_$_BSCFBundle
__ FrontBoard: _OBJC_CLASS_$_BSCompoundAssertion
__ FrontBoard: _OBJC_CLASS_$_BSCopyingCacheSet
__ FrontBoard: _OBJC_CLASS_$_BSCornerRadiusConfiguration
__ FrontBoard: _OBJC_CLASS_$_BSDateFormatterCache
__ FrontBoard: _OBJC_CLASS_$_BSDateTimeCache
__ FrontBoard: _OBJC_CLASS_$_BSDescriptionBuilder
__ FrontBoard: _OBJC_CLASS_$_BSDescriptionStream
__ FrontBoard: _OBJC_CLASS_$_BSDispatchQueueAttributes
__ FrontBoard: _OBJC_CLASS_$_BSEqualsBuilder
__ FrontBoard: _OBJC_CLASS_$_BSEventQueue
__ FrontBoard: _OBJC_CLASS_$_BSEventQueueEvent
__ FrontBoard: _OBJC_CLASS_$_BSEventQueueLock
__ FrontBoard: _OBJC_CLASS_$_BSHashBuilder
__ FrontBoard: _OBJC_CLASS_$_BSMachPortSendRight
__ FrontBoard: _OBJC_CLASS_$_BSMonotonicReferenceTime
__ FrontBoard: _OBJC_CLASS_$_BSMutableIntegerMap
__ FrontBoard: _OBJC_CLASS_$_BSMutableSettings
__ FrontBoard: _OBJC_CLASS_$_BSPathProviderFactory
__ FrontBoard: _OBJC_CLASS_$_BSPersistentTimer
__ FrontBoard: _OBJC_CLASS_$_BSPlatform
__ FrontBoard: _OBJC_CLASS_$_BSPluginManager
__ FrontBoard: _OBJC_CLASS_$_BSPortDeathSentinel
__ FrontBoard: _OBJC_CLASS_$_BSPowerMonitor
__ FrontBoard: _OBJC_CLASS_$_BSProcessHandle
__ FrontBoard: _OBJC_CLASS_$_BSServiceConnection
__ FrontBoard: _OBJC_CLASS_$_BSServiceConnectionListener
__ FrontBoard: _OBJC_CLASS_$_BSServiceQuality
__ FrontBoard: _OBJC_CLASS_$_BSSettings
__ FrontBoard: _OBJC_CLASS_$_BSSimpleAssertion
__ FrontBoard: _OBJC_CLASS_$_BSSpringAnimationSettings
__ FrontBoard: _OBJC_CLASS_$_BSTimer
__ FrontBoard: _OBJC_CLASS_$_BSTransaction
__ FrontBoard: _OBJC_CLASS_$_BSWatchdog
__ FrontBoard: _OBJC_CLASS_$_FBApplicationProcess
__ FrontBoard: _OBJC_CLASS_$_FBApplicationProcessLaunchTransaction
__ FrontBoard: _OBJC_CLASS_$_FBApplicationProcessWatchdogPolicy
__ FrontBoard: _OBJC_CLASS_$_FBApplicationUpdateScenesTransaction
__ FrontBoard: _OBJC_CLASS_$_FBDisplayLayoutElement
__ FrontBoard: _OBJC_CLASS_$_FBDisplayLayoutTransition
__ FrontBoard: _OBJC_CLASS_$_FBDisplayManager
__ FrontBoard: _OBJC_CLASS_$_FBExtensionProcess
__ FrontBoard: _OBJC_CLASS_$_FBLocalSynchronousSceneClientProvider
__ FrontBoard: _OBJC_CLASS_$_FBMainDisplayLayoutPublisher
__ FrontBoard: _OBJC_CLASS_$_FBMutableProcessExecutionContext
__ FrontBoard: _OBJC_CLASS_$_FBProcess
__ FrontBoard: _OBJC_CLASS_$_FBProcessManager
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationDataStore
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationInfo
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationLibrary
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationLibraryConfiguration
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationPlaceholder
__ FrontBoard: _OBJC_CLASS_$_FBSApplicationUninstallOptions
__ FrontBoard: _OBJC_CLASS_$_FBSCAContextSceneLayer
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayConfiguration
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayIdentity
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayLayoutMonitor
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayLayoutMonitorConfiguration
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayLayoutPublisher
__ FrontBoard: _OBJC_CLASS_$_FBSDisplayLayoutPublisherConfiguration
__ FrontBoard: _OBJC_CLASS_$_FBSExtensionInfo
__ FrontBoard: _OBJC_CLASS_$_FBSMutableDisplayConfigurationRequest
__ FrontBoard: _OBJC_CLASS_$_FBSMutableSceneDefinition
__ FrontBoard: _OBJC_CLASS_$_FBSMutableSceneParameters
__ FrontBoard: _OBJC_CLASS_$_FBSMutableSceneSettings
__ FrontBoard: _OBJC_CLASS_$_FBSOpenApplicationService
__ FrontBoard: _OBJC_CLASS_$_FBSProcessResourceProvision
__ FrontBoard: _OBJC_CLASS_$_FBSProcessWatchdogPolicy
__ FrontBoard: _OBJC_CLASS_$_FBSSceneClientIdentity
__ FrontBoard: _OBJC_CLASS_$_FBSSceneClientSettings
__ FrontBoard: _OBJC_CLASS_$_FBSSceneClientSettingsDiffInspector
__ FrontBoard: _OBJC_CLASS_$_FBSSceneIdentity
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSettings
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSnapshotContext
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSnapshotRequest
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSnapshotRequestAction
__ FrontBoard: _OBJC_CLASS_$_FBSSceneSpecification
__ FrontBoard: _OBJC_CLASS_$_FBSSceneTransitionContext
__ FrontBoard: _OBJC_CLASS_$_FBSSerialQueue
__ FrontBoard: _OBJC_CLASS_$_FBSServiceFacility
__ FrontBoard: _OBJC_CLASS_$_FBSSystemService
__ FrontBoard: _OBJC_CLASS_$_FBSXPCMessage
__ FrontBoard: _OBJC_CLASS_$_FBSceneManager
__ FrontBoard: _OBJC_CLASS_$_FBSceneSnapshotAction
__ FrontBoard: _OBJC_CLASS_$_FBSceneSnapshotContext
__ FrontBoard: _OBJC_CLASS_$_FBServiceClientAuthenticator
__ FrontBoard: _OBJC_CLASS_$_FBSynchronizedTransactionGroup
__ FrontBoard: _OBJC_CLASS_$_FBSystemService
__ FrontBoard: _OBJC_CLASS_$_FBSystemShell
__ FrontBoard: _OBJC_CLASS_$_FBUpdateSceneTransaction
__ FrontBoard: _OBJC_CLASS_$_FBWorkspaceEvent
__ FrontBoard: _OBJC_CLASS_$_FBWorkspaceEventQueue
__ FrontBoard: _OBJC_CLASS_$_FBWorkspaceEventQueueLock
__ FrontBoard: _OBJC_METACLASS_$_BSAbstractDefaultDomain
__ FrontBoard: _OBJC_METACLASS_$_BSSimpleAssertion
__ FrontBoard: _OBJC_METACLASS_$_BSTimer
__ FrontBoard: _OBJC_METACLASS_$_BSTransaction
__ FrontBoard: _OBJC_METACLASS_$_FBApplicationUpdateScenesTransaction
__ FrontBoard: _OBJC_METACLASS_$_FBSApplicationPlaceholder
__ FrontBoard: _OBJC_METACLASS_$_FBSServiceFacility
__ FrontBoard: __BSHasInternalSettings
__ FrontBoard: __BSIsInternalInstall
__ GeoServices: _OBJC_CLASS_$_GEOCountryConfiguration
__ GraphicsServices: _GSEventDeviceOrientation
__ GraphicsServices: _GSEventIsHardwareKeyboardAttached
__ GraphicsServices: _GSMainScreenOrientation
__ GraphicsServices: _GSMainScreenPixelSize
__ GraphicsServices: _GSSendAppPreferencesChanged
__ GraphicsServices: _kGSEventHardwareKeyboardAvailabilityChangedNotification
__ IAP: _kIAPServerDiedNotification
__ IOKit: _IOHIDEventCreateKeyboardEvent
__ IOKit: _IOHIDEventCreateProximtyEvent
__ IOKit: _IOHIDEventGetChildren
__ IOKit: _IOHIDEventGetIntegerValue
__ IOKit: _IOHIDEventGetPhase
__ IOKit: _IOHIDEventGetSenderID
__ IOKit: _IOHIDEventGetTimeStamp
__ IOKit: _IOHIDEventGetType
__ IOKit: _IOIteratorNext
__ IOKit: _IONotificationPortCreate
__ IOKit: _IONotificationPortDestroy
__ IOKit: _IONotificationPortGetRunLoopSource
__ IOKit: _IOObjectRelease
__ IOKit: _IOPMAssertionCreateWithProperties
__ IOKit: _IOPMAssertionRelease
__ IOKit: _IOPMAssertionSetProperty
__ IOKit: _IOPMCopyAssertionsByProcess
__ IOKit: _IOPMCopyScheduledPowerEvents
__ IOKit: _IOPSCopyPowerSourcesByType
__ IOKit: _IOPSCopyPowerSourcesList
__ IOKit: _IOPSGetPowerSourceDescription
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IOServiceAddInterestNotification
__ IOKit: _IOServiceAddMatchingNotification
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceMatching
__ IOKit: _IOServiceOpen
__ IOKit: ___IOAVClassMatching
__ IOKit: _kIOMasterPortDefault
__ IOSurface: _IOSurfaceCreateMachPort
__ IOSurface: _IOSurfaceGetPixelFormat
__ IOSurface: _IOSurfaceGetTypeID
__ IOSurface: _OBJC_CLASS_$_IOSurface
__ IconServices: _OBJC_CLASS_$_ISIcon
__ IconServices: _OBJC_CLASS_$_ISImage
__ IconServices: _OBJC_CLASS_$_ISImageDescriptor
__ IconServices: _kISImageDescriptorNotification
__ IconServices: _kISImageDescriptorSpotlight
__ IconServices: _kISImageDescriptorTableUIName
__ IdleTimerHosting: _OBJC_CLASS_$_ITAttentionAwareIdleTimer
__ IdleTimerHosting: _OBJC_CLASS_$_ITIdleTimeout
__ IdleTimerHosting: _OBJC_CLASS_$_ITIdleTimerDescriptor
__ IdleTimerServices: _OBJC_CLASS_$_ITIdleTimerState
__ IdleTimerServices: _OBJC_CLASS_$_ITIdleTimerStateService
__ ImageIO: _CGImageCreateFromIOSurface
__ ImageIO: _CGImageSourceCreateImageAtIndex
__ ImageIO: _CGImageSourceCreateThumbnailAtIndex
__ ImageIO: _CGImageSourceCreateWithDataProvider
__ ImageIO: _CGImageSourceGetCount
__ ImageIO: _kCGImageComponentTypeRequest
__ ImageIO: _kCGImagePreferredColorConversionMode
__ ImageIO: _kCGImageSkipCIF10SRGBCheck
__ ImageIO: _kCGImageSourceCreateThumbnailFromImageAlways
__ ImageIO: _kCGImageSourceShouldCacheImmediately
__ ImageIO: _kCGImageSourceThumbnailMaxPixelSize
__ Intents: _OBJC_CLASS_$_INIntent
__ IntlPreferences: _OBJC_CLASS_$_IntlUtility
__ KeyboardArbiter: _OBJC_CLASS_$__UIKeyboardArbiter_ForSpringBoard
__ KeyboardArbiter: __UIKeyboardArbiter_SceneIdentifier
__ LocalAuthentication: _OBJC_CLASS_$_LAContext
__ LoginKit: _OBJC_CLASS_$_LKLogoutSupport
__ LoginKit: _OBJC_CLASS_$_LKStartupSupport
__ MallocStackLogging: _msl_turn_on_stack_logging
__ ManagedConfiguration: _MCEffectiveSettingsChangedNotification
__ ManagedConfiguration: _MCFeatureAllowVoiceDialing
__ ManagedConfiguration: _MCFeatureAppRemovalAllowed
__ ManagedConfiguration: _MCFeatureAttentionAwareAutoLockAllowed
__ ManagedConfiguration: _MCFeatureAutoLockTime
__ ManagedConfiguration: _MCFeatureCardsWhileLockedAllowed
__ ManagedConfiguration: _MCFeatureFindMyFriendsModificationAllowed
__ ManagedConfiguration: _MCFeatureLockScreenNotificationsViewAllowed
__ ManagedConfiguration: _MCFeatureLockScreenTodayViewAllowed
__ ManagedConfiguration: _MCFeatureMaximumAppsRating
__ ManagedConfiguration: _MCFeatureScreenShotAllowed
__ ManagedConfiguration: _MCFeatureTodayViewAllowed
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ MaterialKit: _NSStringFromMTLumaDodgePillBackgroundLuminance
__ MaterialKit: _NSStringFromMTLumaDodgePillStyle
__ MaterialKit: _OBJC_CLASS_$_MTLumaDodgePillSettings
__ MaterialKit: _OBJC_CLASS_$_MTLumaDodgePillView
__ MaterialKit: _OBJC_CLASS_$_MTMaterialShadowView
__ MaterialKit: _OBJC_CLASS_$_MTMaterialView
__ MaterialKit: _OBJC_CLASS_$_MTVisualStylingProvider
__ MaterialKit: __MTCoreMaterialRecipeNameForMaterialRecipeAndUserInterfaceStyle
__ MediaControls: _OBJC_CLASS_$_MediaControlsVolumeController
__ MediaControls: _OBJC_CLASS_$_MediaControlsVolumeSliderView
__ MediaControls: _OBJC_METACLASS_$_MediaControlsVolumeSliderView
__ MediaPlayer: _OBJC_CLASS_$_MPAVRoutingController
__ MediaPlayer: _OBJC_CLASS_$_MPMediaControlsStatusBarStyleOverridesCoordinator
__ MediaRemote: _MRApplicationActivityGetStatus
__ MediaRemote: _MRContentItemCopyNowPlayingInfo
__ MediaRemote: _MRMediaRemoteGetLocalOrigin
__ MediaRemote: _MRMediaRemoteGetNowPlayingClientForOrigin
__ MediaRemote: _MRMediaRemoteRegisterForNowPlayingNotifications
__ MediaRemote: _MRMediaRemoteRequestNowPlayingPlaybackQueueSync
__ MediaRemote: _MRMediaRemoteSendCommand
__ MediaRemote: _MRMediaRemoteUnregisterForNowPlayingNotifications
__ MediaRemote: _MRNowPlayingClientGetProcessIdentifier
__ MediaRemote: _MRPlaybackQueueGetContentItemAtOffset
__ MediaRemote: _MRPlaybackQueueRequestCreateDefault
__ MediaRemote: _kMRApplicationActivityStatusDidChangeNotification
__ MediaRemote: _kMRApplicationActivityUserInfoKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesRepeatModeKey
__ MediaRemote: _kMRMediaRemoteCommandInfoPreservesShuffleModeKey
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationIsPlayingUserInfoKey
__ MediaRemote: _kMRMediaRemoteNowPlayingApplicationPIDUserInfoKey
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoDidChangeNotification
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoQueueIndex
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoRepeatMode
__ MediaRemote: _kMRMediaRemoteNowPlayingInfoTotalQueueCount
__ MediaRemote: _kMRMediaRemoteOptionPredefinedPlaybackRate
__ MediaRemote: _kMRMediaRemoteOptionRemoteControlInterfaceIdentifier
__ MobileActivation: _MAEGetActivationStateWithError
__ MobileActivation: _kMAActivationStateActivated
__ MobileActivation: _kMAActivationStateFactoryActivated
__ MobileActivation: _kMAActivationStateUnactivated
__ MobileActivation: _kNotificationActivationStateChanged
__ MobileBackup: _kMBManagerRestoreCompleteAlertStateChangedNotification
__ MobileBackup: _kMBManagerRestoreStateChangedNotification
__ MobileInstallation: _OBJC_CLASS_$_AITransactionLog
__ MobileStoreDemoKit: _OBJC_CLASS_$_MSDKManagedDevice
__ MobileTimer: _MTAlarmManagerNextAlarmChanged
__ MobileTimer: _MTAlarmManagerNextAlarmKey
__ MobileTimer: _MTAlarmManagerStateReset
__ MobileTimer: _OBJC_CLASS_$_MTAlarm
__ MobileTimer: _OBJC_CLASS_$_MTAlarmManager
__ MobileWiFi: _MobileWiFiContainsRadio
__ MobileWiFi: _WiFiDeviceClientCopyCurrentNetwork
__ MobileWiFi: _WiFiDeviceClientCopyProperty
__ MobileWiFi: _WiFiDeviceClientGetInterfaceName
__ MobileWiFi: _WiFiDeviceClientGetPower
__ MobileWiFi: _WiFiDeviceClientGetTypeID
__ MobileWiFi: _WiFiDeviceClientRegisterExtendedLinkCallback
__ MobileWiFi: _WiFiDeviceClientRegisterLQMCallback
__ MobileWiFi: _WiFiDeviceClientRegisterPowerCallback
__ MobileWiFi: _WiFiDeviceClientScanAsync
__ MobileWiFi: _WiFiDeviceClientScanCancel
__ MobileWiFi: _WiFiManagerClientCopyDevices
__ MobileWiFi: _WiFiManagerClientCopyProperty
__ MobileWiFi: _WiFiManagerClientCreate
__ MobileWiFi: _WiFiManagerClientRegisterDeviceAttachmentCallback
__ MobileWiFi: _WiFiManagerClientRegisterServerRestartCallback
__ MobileWiFi: _WiFiManagerClientScheduleWithRunLoop
__ MobileWiFi: _WiFiManagerClientSetPower
__ MobileWiFi: _WiFiManagerClientSetProperty
__ MobileWiFi: _WiFiManagerClientUnscheduleFromRunLoop
__ MobileWiFi: _WiFiNetworkGet11dCountryCodeFromIe
__ MobileWiFi: _WiFiNetworkGetSSID
__ MobileWiFi: _WiFiNetworkIsApplePersonalHotspot
__ MobileWiFi: _kWiFiScaledRSSIKey
__ Netrb: __NETRBClientCreate
__ Netrb: __NETRBClientDestroy
__ Netrb: __NETRBClientGetDynamicStoreKey
__ Network: _OBJC_CLASS_$_NWSystemPathMonitor
__ NotificationCenter: _NCAppLaunchOriginWidget
__ PassKitCore: _OBJC_CLASS_$_PKPassLibrary
__ PassKitCore: _PKLegacyStockholmLog
__ PassKitUI: _OBJC_CLASS_$_PKPassSnapshotter
__ Pegasus: _OBJC_CLASS_$_PGPictureInPictureController
__ Pegasus: _OBJC_CLASS_$_PGPictureInPictureViewController
__ Pegasus: _PGPictureInPictureViewControllerPrefersIdleTimerDisabledDidChangeNotification
__ PersistentConnection: _OBJC_CLASS_$_PCPersistentInterfaceManager
__ PersistentConnection: _OBJC_CLASS_$_PCPersistentTimer
__ PhotoLibrary: _OBJC_CLASS_$_PLiPhotoMigrationSupport
__ PhotoLibrary: _PLCleanupForStoreDemoMode
__ PlatterKit: _OBJC_CLASS_$_PLPlatterView
__ PlatterKit: _OBJC_METACLASS_$_PLPlatterView
__ PointerUIServices: _OBJC_CLASS_$_PSPointerClientController
__ Preferences: _OBJC_CLASS_$_PSSpecifier
__ Preferences: _PSCityForSpecifier
__ Preferences: _PSDefaultsKey
__ Preferences: _PSKeyNameKey
__ Preferences: _PSLocalizedStringFromTableInBundleForLanguage
__ Preferences: _PSMigrateSoundsDefaults_10_0
__ Preferences: _PSRegulatoryImage
__ ProactiveEventTracker: _OBJC_CLASS_$_PETDistributionEventTracker
__ ProactiveEventTracker: _OBJC_CLASS_$_PETEventProperty
__ ProactiveEventTracker: _OBJC_CLASS_$_PETGoalConversionEventTracker
__ ProactiveEventTracker: _OBJC_CLASS_$_PETScalarEventTracker
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_CLASS_$_PBDataReader
__ ProtocolBuffer: _OBJC_CLASS_$_PBDataWriter
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteBOOLField
__ ProtocolBuffer: _PBDataWriterWriteInt32Field
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ PrototypeTools: _OBJC_CLASS_$_PTButtonRow
__ PrototypeTools: _OBJC_CLASS_$_PTChoiceRow
__ PrototypeTools: _OBJC_CLASS_$_PTDefaults
__ PrototypeTools: _OBJC_CLASS_$_PTDomain
__ PrototypeTools: _OBJC_CLASS_$_PTDoubleTestRecipe
__ PrototypeTools: _OBJC_CLASS_$_PTDrillDownRow
__ PrototypeTools: _OBJC_CLASS_$_PTEditFloatRow
__ PrototypeTools: _OBJC_CLASS_$_PTModule
__ PrototypeTools: _OBJC_CLASS_$_PTRestoreDefaultSettingsRowAction
__ PrototypeTools: _OBJC_CLASS_$_PTSSliderRow
__ PrototypeTools: _OBJC_CLASS_$_PTSettings
__ PrototypeTools: _OBJC_CLASS_$_PTSingleTestRecipe
__ PrototypeTools: _OBJC_CLASS_$_PTSliderRow
__ PrototypeTools: _OBJC_CLASS_$_PTSwitchRow
__ PrototypeTools: _OBJC_CLASS_$_PTToggleTestRecipe
__ PrototypeTools: _OBJC_METACLASS_$_PTDomain
__ PrototypeTools: _OBJC_METACLASS_$_PTSettings
__ PrototypeToolsUI: _PTUIClientInterface
__ PrototypeToolsUI: _PTUIMachService
__ PrototypeToolsUI: _PTUIServerInterface
__ QuartzCore: _CACurrentMediaTime
__ QuartzCore: _CALayerGetRenderId
__ QuartzCore: _CARenderRelease
__ QuartzCore: _CARenderRetain
__ QuartzCore: _CARenderServerCaptureLayerWithTransform
__ QuartzCore: _CARenderServerSetCacheAsynchronousSurfaces
__ QuartzCore: _CARenderServerSnapshot
__ QuartzCore: _CATransform3DConcat
__ QuartzCore: _CATransform3DGetAffineTransform
__ QuartzCore: _CATransform3DIdentity
__ QuartzCore: _CATransform3DMakeAffineTransform
__ QuartzCore: _CATransform3DMakeRotation
__ QuartzCore: _CATransform3DMakeScale
__ QuartzCore: _CATransform3DMakeTranslation
__ QuartzCore: _CATransform3DScale
__ QuartzCore: _CATransform3DTranslate
__ QuartzCore: _CATransform3DTranslateRight
__ QuartzCore: _CA_CGRectApplyTransform
__ QuartzCore: _OBJC_CLASS_$_CAAnimation
__ QuartzCore: _OBJC_CLASS_$_CABackdropLayer
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CAContext
__ QuartzCore: _OBJC_CLASS_$_CADisplay
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CADisplayModeCriteria
__ QuartzCore: _OBJC_CLASS_$_CADisplayProperties
__ QuartzCore: _OBJC_CLASS_$_CADistanceFieldLayer
__ QuartzCore: _OBJC_CLASS_$_CAFilter
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CAKeyframeAnimation
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAMatchMoveAnimation
__ QuartzCore: _OBJC_CLASS_$_CAMediaTimingFunction
__ QuartzCore: _OBJC_CLASS_$_CAPortalLayer
__ QuartzCore: _OBJC_CLASS_$_CAReplicatorLayer
__ QuartzCore: _OBJC_CLASS_$_CAShapeLayer
__ QuartzCore: _OBJC_CLASS_$_CASpringAnimation
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _OBJC_CLASS_$_CATransition
__ QuartzCore: _kCAContextDisplayable
__ QuartzCore: _kCAContextEnablePixelDoubling
__ QuartzCore: _kCAContextEnablePixelQuadrupling
__ QuartzCore: _kCAContextSecure
__ QuartzCore: _kCACornerCurveContinuous
__ QuartzCore: _kCAFillModeBackwards
__ QuartzCore: _kCAFillModeBoth
__ QuartzCore: _kCAFillModeRemoved
__ QuartzCore: _kCAFilterBox
__ QuartzCore: _kCAFilterColorMonochrome
__ QuartzCore: _kCAFilterColorSaturate
__ QuartzCore: _kCAFilterDestOut
__ QuartzCore: _kCAFilterGaussianBlur
__ QuartzCore: _kCAFilterNearest
__ QuartzCore: _kCAFilterOverlayBlendMode
__ QuartzCore: _kCAFilterPlusD
__ QuartzCore: _kCAFilterPlusL
__ QuartzCore: _kCAFilterSourceAtop
__ QuartzCore: _kCAFilterTrilinear
__ QuartzCore: _kCAFilterVibrantColorMatrix
__ QuartzCore: _kCALineCapRound
__ QuartzCore: _kCALineJoinRound
__ QuartzCore: _kCAMediaTimingFunctionDefault
__ QuartzCore: _kCAMediaTimingFunctionEaseIn
__ QuartzCore: _kCAMediaTimingFunctionEaseInEaseOut
__ QuartzCore: _kCAMediaTimingFunctionEaseOut
__ QuartzCore: _kCAMediaTimingFunctionLinear
__ QuartzCore: _kCASnapshotContextId
__ QuartzCore: _kCASnapshotDestination
__ QuartzCore: _kCASnapshotDisplayName
__ QuartzCore: _kCASnapshotEnforceSecureMode
__ QuartzCore: _kCASnapshotLayerId
__ QuartzCore: _kCASnapshotMode
__ QuartzCore: _kCASnapshotModeLayer
__ QuartzCore: _kCASnapshotTransform
__ QuartzCore: _kCATransactionCommitTime
__ QuartzCore: _kCATransactionDisableActions
__ QuartzCore: _kCATransitionFade
__ RemoteStateDumpKit: _OBJC_CLASS_$_RSPeerToPeerServerController
__ RemoteStateDumpKit: _OBJC_CLASS_$_RSStateInfo
__ RunningBoardServices: _OBJC_CLASS_$_RBSAssertion
__ RunningBoardServices: _OBJC_CLASS_$_RBSCPUAccessGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSDurationAttribute
__ RunningBoardServices: _OBJC_CLASS_$_RBSGPUAccessGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSJetsamPriorityGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSPreventIdleSleepGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessHandle
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessIdentity
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessMonitor
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessPredicate
__ RunningBoardServices: _OBJC_CLASS_$_RBSProcessStateDescriptor
__ RunningBoardServices: _OBJC_CLASS_$_RBSResistTerminationGrant
__ RunningBoardServices: _OBJC_CLASS_$_RBSRunningReasonAttribute
__ RunningBoardServices: _OBJC_CLASS_$_RBSTarget
__ RunningBoardServices: _OBJC_CLASS_$_RBSTerminateContext
__ RunningBoardServices: _OBJC_CLASS_$_RBSTerminateRequest
__ SOS: _OBJC_CLASS_$_SOSManager
__ SOS: _OBJC_CLASS_$_SOSUtilities
__ ScreenTimeUI: _OBJC_CLASS_$_STBlockingViewController
__ ScreenshotServices: _OBJC_CLASS_$_SSChromePlaceholderViewController
__ ScreenshotServices: _OBJC_CLASS_$_SSFlashView
__ ScreenshotServices: _OBJC_CLASS_$_SSScreenCapturer
__ ScreenshotServices: _OBJC_CLASS_$_SSScreenCapturerPresentationOptions
__ ScreenshotServices: _OBJC_CLASS_$_SSScreenCapturerScreenshotOptions
__ ScreenshotServices: _OBJC_CLASS_$_SSScreenCapturerScreenshotOptionsCollection
__ Security: _SecTaskCreateFromSelf
__ Security: _SecTaskGetCodeSignStatus
__ SetupAssistant: _BYSetupAssistantEnsureShortLivedTokenUpgrade
__ SetupAssistant: _BYSetupAssistantLaunchMigrationSourceUINotification
__ SetupAssistant: _BYSetupAssistantLaunchMigrationSourceUIURL
__ SetupAssistant: _BYSetupAssistantNeedsToRun
__ SetupAssistant: _BYSetupAssistantPrepareLaunchSentinel
__ SetupAssistant: _BYSetupAssistantUISessionNoLongerExclusiveNotification
__ SiriActivation: _OBJC_CLASS_$_SASPresentationConnectionListener
__ SiriActivation: _OBJC_CLASS_$_SASSignalConnectionListener
__ SiriActivation: _OBJC_CLASS_$_SiriBluetoothDeviceSource
__ SiriActivation: _OBJC_CLASS_$_SiriBreadcrumbSource
__ SiriActivation: _OBJC_CLASS_$_SiriContinuityContext
__ SiriActivation: _OBJC_CLASS_$_SiriContinuitySource
__ SiriActivation: _OBJC_CLASS_$_SiriDirectActionContext
__ SiriActivation: _OBJC_CLASS_$_SiriDirectActionSource
__ SiriActivation: _OBJC_CLASS_$_SiriDismissalOptions
__ SiriActivation: _OBJC_CLASS_$_SiriLongPressButtonSource
__ SiriActivation: _OBJC_CLASS_$_SiriSimpleActivationSource
__ SiriActivation: _OBJC_CLASS_$_SiriTestingContext
__ SiriActivation: _OBJC_CLASS_$_SiriTestingSource
__ SiriUI: _OBJC_CLASS_$_SiriUICarDNDUseSiriHeaderViewController
__ SiriUI: _OBJC_CLASS_$_SiriUISuggestionsView
__ SiriUI: _SiriUICarDNDUseSiriExitFrictionAnalyticsContext
__ SiriUIActivation: _OBJC_CLASS_$_SiriPresentationSpringBoardMainScreenViewController
__ SiriUICore: _OBJC_CLASS_$_SUICFlamesView
__ SoftwareUpdateServices: _OBJC_CLASS_$_SUDescriptor
__ SoftwareUpdateServicesUI: _SUSUICreateInstallationKeybagWithSecret
__ SoftwareUpdateServicesUI: _SUSUIRequiresAlertPresentationAfterUpdate
__ SplashBoard: _OBJC_CLASS_$_XBApplicationController
__ SplashBoard: _OBJC_CLASS_$_XBApplicationLaunchCompatibilityInfo
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshot
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotFetchRequest
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotGenerationContext
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotManifest
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotPredicate
__ SplashBoard: _OBJC_CLASS_$_XBApplicationSnapshotSortDescriptor
__ SplashBoard: _OBJC_CLASS_$_XBDisplayEdgeInsetsWrapper
__ SplashBoard: _OBJC_CLASS_$_XBLaunchImageProvider
__ SplashBoard: _OBJC_CLASS_$_XBLaunchStateRequest
__ SplashBoard: _OBJC_CLASS_$_XBMutableStatusBarSettings
__ SplashBoard: _OBJC_CLASS_$_XBSnapshotDataProviderContext
__ SplashBoard: _OBJC_METACLASS_$_XBApplicationController
__ SplashBoard: _OBJC_METACLASS_$_XBSnapshotDataProviderContext
__ SplashBoard: _XBApplicationLaunchCompatibilityInfoPersistenceKey
__ SplashBoard: _XBApplicationSnapshotContentTypeMaskForContentType
__ SplashBoard: _XBCachesPathForApplicationInfo
__ SplashBoard: _XBInterfaceOrientationForString
__ SplashBoard: _XBInterfaceOrientationMaskForInterfaceOrientation
__ SplashBoard: _XBInterfaceOrientationMaskForInterfaceOrientationPair
__ SplashBoard: _XBInterfaceOrientationStringLandscape
__ SplashBoard: _XBInterfaceOrientationStringLandscapeLeft
__ SplashBoard: _XBInterfaceOrientationStringLandscapeRight
__ SplashBoard: _XBInterfaceOrientationStringPortrait
__ SplashBoard: _XBInterfaceOrientationStringPortraitUpsideDown
__ SplashBoard: _XBInterfaceOrientationsAreOrthogonal
__ SplashBoard: _XBLaunchConfigurationNameKey
__ SplashBoard: _XBLaunchConfigurationsKey
__ SplashBoard: _XBLaunchStoryboardNameKey
__ SplashBoard: _XBLaunchStoryboardsKey
__ SplashBoard: _XBLogCapture
__ SplashBoard: _XBLogFileManifest
__ SplashBoard: _XBNextClockwiseInterfaceOrientation
__ SplashBoard: _XBOppositeInterfaceOrientation
__ SplashBoard: _XBRotationDegreesForInterfaceOrientationRotation
__ SplashBoard: _XBStatusBarStateMaskMatchesSettings
__ SplashBoard: _XBStringForInterfaceOrientation
__ SpotlightUI: _OBJC_CLASS_$_SPUIAppService
__ SpotlightUI: _OBJC_CLASS_$_SPUIDefaults
__ SpotlightUI: _OBJC_CLASS_$_SPUIRemoteSearchViewController
__ SpotlightUI: _OBJC_CLASS_$_SPUISearchBarController
__ SpringBoardFoundation: _NSStringFromIdleTimerDuration
__ SpringBoardFoundation: _NSStringFromIdleWarnMode
__ SpringBoardFoundation: _NSStringFromSBFIdleTimerMode
__ SpringBoardFoundation: _OBJC_CLASS_$_SBAbstractDefaults
__ SpringBoardFoundation: _OBJC_CLASS_$_SBC2GroupCompletion
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAnalyticsBackend
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAnalyticsClient
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAnimationSettings
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAuthenticationAssertionManager
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFAuthenticationRequest
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFBackdropLegibilitySettingsProvider
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFBuildVersion
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFCARenderer
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFCredentialSet
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFDashBoardViewMetrics
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFDateTimeController
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFDeviceLockOutController
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFFluidBehaviorSettings
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFGradient
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFHomeGrabberDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFIrisWallpaperView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLegibilityDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLockScreenDateSubtitleView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLockScreenDateView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLockScreenMetrics
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFLockScreenWakeAnimator
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFMappedImageCache
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFMobileKeyBag
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFMouseButtonDownGestureRecognizer
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFMutableLockScreenActionContext
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFOverridableDateProvider
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFSpringLoadedInteractionBehavior
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFSpringLoadedInteractionEffect
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFStatusBarLegibilityView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTapToWakeGestureRecognizer
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTapticEngine
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTodayGestureDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTouchPassThroughView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTouchPassThroughViewController
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFTouchPassThroughWindow
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFUserAuthenticationController
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFUserAuthenticationModelEducationalMode
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFUserAuthenticationResponder
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWakeAnimationDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperCache
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperConfiguration
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperConfigurationManager
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperDomain
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperOptions
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperParallaxSettings
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWallpaperView
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWebClipUtilities
__ SpringBoardFoundation: _OBJC_CLASS_$_SBFWindow
__ SpringBoardFoundation: _OBJC_CLASS_$_SBLocalDefaults
__ SpringBoardFoundation: _OBJC_CLASS_$_SBLockScreenDefaults
__ SpringBoardFoundation: _OBJC_CLASS_$_SBReusableViewMap
__ SpringBoardFoundation: _OBJC_CLASS_$_SBWakeLogger
__ SpringBoardFoundation: _OBJC_CLASS_$_SBWallpaperDefaults
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBAbstractDefaults
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFTouchPassThroughView
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFTouchPassThroughViewController
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFTouchPassThroughWindow
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFView
__ SpringBoardFoundation: _OBJC_METACLASS_$_SBFWindow
__ SpringBoardFoundation: _SBDeviceDidDisableDisplaySecureModeNotification
__ SpringBoardFoundation: _SBDeviceWillEnableDisplaySecureModeNotification
__ SpringBoardFoundation: _SBFAngleForRotationFromInterfaceOrientationToInterfaceOrientation
__ SpringBoardFoundation: _SBFBackdropOutputSettingsForWallpaperBackdropParameters
__ SpringBoardFoundation: _SBFBoolEquals
__ SpringBoardFoundation: _SBFCachesPathForSandboxPath
__ SpringBoardFoundation: _SBFCreateIOSurfaceForImage
__ SpringBoardFoundation: _SBFDescriptionForSensorType
__ SpringBoardFoundation: _SBFDeviceBlockStateDidChangeNotification
__ SpringBoardFoundation: _SBFEdgeInsetsRotateToInterfaceOrientation
__ SpringBoardFoundation: _SBFEffectiveArtworkSubtype
__ SpringBoardFoundation: _SBFEffectiveDeviceClass
__ SpringBoardFoundation: _SBFEffectiveHomeButtonType
__ SpringBoardFoundation: _SBFEnsureDirectoryExistsAtPath
__ SpringBoardFoundation: _SBFFirstInterfaceOrientationInInterfaceOrientationMask
__ SpringBoardFoundation: _SBFInterfaceOrientationMaskContainsInterfaceOrientation
__ SpringBoardFoundation: _SBFIsSymbolicLinkAtPath
__ SpringBoardFoundation: _SBFMKBErrorDomain
__ SpringBoardFoundation: _SBFModificationDateForPath
__ SpringBoardFoundation: _SBFModifiedImageNameForName
__ SpringBoardFoundation: _SBFSafeProtocolCast
__ SpringBoardFoundation: _SBFStringForAppearState
__ SpringBoardFoundation: _SBFStringForWallpaperVariant
__ SpringBoardFoundation: _SBFUserAuthenticatedForFirstTimeNotification
__ SpringBoardFoundation: _SBFUserAuthenticationRequestCompletedAuthenticationTypeKey
__ SpringBoardFoundation: _SBFUserAuthenticationRequestCompletedNotification
__ SpringBoardFoundation: _SBFUserAuthenticationRequestCompletedResultKey
__ SpringBoardFoundation: _SBFUserAuthenticationRequestCompletedResultSuccess
__ SpringBoardFoundation: _SBFUserAuthenticationStateDidChangeNotification
__ SpringBoardFoundation: _SBFUserAuthenticationStateWasAuthenticatedKey
__ SpringBoardFoundation: _SBFWallpaperBackdropParametersMake
__ SpringBoardFoundation: _SBFWallpaperEnumerateVariantsForLocations
__ SpringBoardFoundation: _SBFWallpaperLocationForVariant
__ SpringBoardFoundation: _SBFWallpaperLoggableNameForVariant
__ SpringBoardFoundation: _SBFWallpaperTransformOptionsShouldIgnoreRotation
__ SpringBoardFoundation: _SBFWallpaperViewUnknownContrast
__ SpringBoardFoundation: _SBFWindowForViewControllerTransition
__ SpringBoardFoundation: _SBLogWallpaper
__ SpringBoardFoundation: _SBStringFromAnimationUpdateMode
__ SpringBoardFoundation: _SBWakeLoggerSourceFromBacklightChangeSource
__ SpringBoardFoundation: _SB_NSStringFromUIPressType
__ SpringBoardFoundation: __SBFLoggingMethodProem
__ SpringBoardFoundation: __SBFWallpaperPostExternalChangeNotificationBecauseIAmSpringBoard
__ SpringBoardFoundation: _convertDampingRatioAndResponseToTensionAndFriction
__ SpringBoardFoundation: _kBaseiPadSize
__ SpringBoardFoundation: _kBaseiPhoneSize
__ SpringBoardFoundation: _kSBSOSTriggerMechanismChangedNotification
__ SpringBoardHome: _BCUIAvocadoSizeFromSBHIconGridSizeClass
__ SpringBoardHome: _CHSAvocadoSizeClassForSBHIconGridSizeClass
__ SpringBoardHome: _CHSWidgetFamilyForSBHIconGridSizeClass
__ SpringBoardHome: _OBJC_CLASS_$_SBCenterIconZoomAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBCrossfadeIconZoomAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBDockIconListView
__ SpringBoardHome: _OBJC_CLASS_$_SBDownloadingIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBFloatingDockIconListView
__ SpringBoardHome: _OBJC_CLASS_$_SBFloatingDockViewController
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderBackgroundView
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderController
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderControllerAnimationContext
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderIconZoomAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBFolderTitleTextField
__ SpringBoardHome: _OBJC_CLASS_$_SBHAppPredictionsElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHAvocadoFileWidgetExtensionProvider
__ SpringBoardHome: _OBJC_CLASS_$_SBHBatteriesElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHClockApplicationIconImageView
__ SpringBoardHome: _OBJC_CLASS_$_SBHCustomIconElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHDateHeaderViewController
__ SpringBoardHome: _OBJC_CLASS_$_SBHDefaultIconListLayoutProvider
__ SpringBoardHome: _OBJC_CLASS_$_SBHEditingDoneButton
__ SpringBoardHome: _OBJC_CLASS_$_SBHEditingWidgetButton
__ SpringBoardHome: _OBJC_CLASS_$_SBHFeatherBlurView
__ SpringBoardHome: _OBJC_CLASS_$_SBHFilesElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHFloatingDockStyleConfiguration
__ SpringBoardHome: _OBJC_CLASS_$_SBHHomeScreenDomain
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconApplicationShortcutListComposer
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconImageCache
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconManager
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconModel
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconStateArchiver
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconStateBuilder
__ SpringBoardHome: _OBJC_CLASS_$_SBHIconViewContextMenuStateController
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryAdditionalItemsIndicatorIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryCategoryIconViewController
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryCategoryIdentifier
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryCategoryMapProvider
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryMutableCategoryMap
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryPodFadeAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryPodIconZoomAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBHLibraryViewController
__ SpringBoardHome: _OBJC_CLASS_$_SBHMappedIconListLayoutProvider
__ SpringBoardHome: _OBJC_CLASS_$_SBHRootFolderVisualConfiguration
__ SpringBoardHome: _OBJC_CLASS_$_SBHRootSidebarController
__ SpringBoardHome: _OBJC_CLASS_$_SBHShortcutsFolderElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHShortcutsSingleElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHSidebarVisualConfiguration
__ SpringBoardHome: _OBJC_CLASS_$_SBHSidebarWidgetBootstrappingAdvisor
__ SpringBoardHome: _OBJC_CLASS_$_SBHSiriSuggestionsElement
__ SpringBoardHome: _OBJC_CLASS_$_SBHSpecialAvocadoDescriptor
__ SpringBoardHome: _OBJC_CLASS_$_SBHWidget
__ SpringBoardHome: _OBJC_CLASS_$_SBHomeScreenIconTransitionAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBIconBadgeView
__ SpringBoardHome: _OBJC_CLASS_$_SBIconFadeAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBIconImageView
__ SpringBoardHome: _OBJC_CLASS_$_SBIconListModel
__ SpringBoardHome: _OBJC_CLASS_$_SBIconListView
__ SpringBoardHome: _OBJC_CLASS_$_SBIconModelMemoryStore
__ SpringBoardHome: _OBJC_CLASS_$_SBIconModelPropertyListFileStore
__ SpringBoardHome: _OBJC_CLASS_$_SBIconView
__ SpringBoardHome: _OBJC_CLASS_$_SBLeafIcon
__ SpringBoardHome: _OBJC_CLASS_$_SBReversibleLayerPropertyAnimator
__ SpringBoardHome: _OBJC_CLASS_$_SBRootFolderController
__ SpringBoardHome: _OBJC_CLASS_$_SBRootFolderControllerConfiguration
__ SpringBoardHome: _OBJC_CLASS_$_SBRootFolderView
__ SpringBoardHome: _OBJC_CLASS_$_SBSearchBackdropView
__ SpringBoardHome: _OBJC_CLASS_$_SBViewControllerTransitionContext
__ SpringBoardHome: _OBJC_CLASS_$_SBWidgetIcon
__ SpringBoardHome: _OBJC_METACLASS_$_SBCenterIconZoomAnimator
__ SpringBoardHome: _OBJC_METACLASS_$_SBDownloadingIcon
__ SpringBoardHome: _OBJC_METACLASS_$_SBFloatingDockIconListView
__ SpringBoardHome: _OBJC_METACLASS_$_SBFloatingDockViewController
__ SpringBoardHome: _OBJC_METACLASS_$_SBHClockApplicationIconImageView
__ SpringBoardHome: _OBJC_METACLASS_$_SBHIconModel
__ SpringBoardHome: _OBJC_METACLASS_$_SBHIconStateArchiver
__ SpringBoardHome: _OBJC_METACLASS_$_SBIconModelPropertyListFileStore
__ SpringBoardHome: _OBJC_METACLASS_$_SBIconView
__ SpringBoardHome: _OBJC_METACLASS_$_SBLeafIcon
__ SpringBoardHome: _SBFolderControllerDidEndScrollingNotification
__ SpringBoardHome: _SBFolderViewDidScrollHiddenIconViewOutsideFolderClippingBoundsNotification
__ SpringBoardHome: _SBFolderViewHiddenIconViewUserInfoKey
__ SpringBoardHome: _SBHDisplayCornerRadiusForScreenType
__ SpringBoardHome: _SBHEnumerateScreenTypes
__ SpringBoardHome: _SBHGetScreenSpecification
__ SpringBoardHome: _SBHIconGridSizeClassMaskForCHSFamilyMask
__ SpringBoardHome: _SBHIconListLayoutIconImageInfoForGridSizeClass
__ SpringBoardHome: _SBHIconListLayoutListIconSpacing
__ SpringBoardHome: _SBHIconManagerDidReplaceDownloadingIconNotification
__ SpringBoardHome: _SBHIconManagerIconModelDidChangeNotification
__ SpringBoardHome: _SBHIconManagerListLayoutProviderDidChangeNotification
__ SpringBoardHome: _SBHIconViewContextMenuStateControllerDidDismissAllIconForceTouchControllersNotification
__ SpringBoardHome: _SBHLibraryCategoryMapErrorNotificationKey
__ SpringBoardHome: _SBHLibraryCategoryMapNotificationKey
__ SpringBoardHome: _SBHLibraryCategoryMapProviderCategoryMapRefreshCompletedNotification
__ SpringBoardHome: _SBHLibrarySearchControllerDidDismissSearchPPTNotification
__ SpringBoardHome: _SBHLibrarySearchControllerDidPresentSearchPPTNotification
__ SpringBoardHome: _SBHLibrarySearchControllerWillDismissSearchPPTNotification
__ SpringBoardHome: _SBHLibrarySearchControllerWillPresentSearchPPTNotification
__ SpringBoardHome: _SBHLibraryViewControllerDidCollapsePodPPTNotification
__ SpringBoardHome: _SBHLibraryViewControllerDidExpandPodPPTNotification
__ SpringBoardHome: _SBHLibraryViewControllerWillCollapsePodPPTNotification
__ SpringBoardHome: _SBHLibraryViewControllerWillExpandPodPPTNotification
__ SpringBoardHome: _SBHScreenTypeForCurrentDevice
__ SpringBoardHome: _SBHScreenTypeHasHomeButton
__ SpringBoardHome: _SBHZPositionForScale
__ SpringBoardHome: _SBIconLocationAppLibrary
__ SpringBoardHome: _SBIconLocationAppLibraryCategoryPod
__ SpringBoardHome: _SBIconLocationAppLibraryCategoryPodExpanded
__ SpringBoardHome: _SBIconLocationAppLibraryCategoryPodRecents
__ SpringBoardHome: _SBIconLocationAppLibraryCategoryPodSuggestions
__ SpringBoardHome: _SBIconLocationAppLibrarySearch
__ SpringBoardHome: _SBIconLocationDock
__ SpringBoardHome: _SBIconLocationFavoriteTodayView
__ SpringBoardHome: _SBIconLocationFloatingDock
__ SpringBoardHome: _SBIconLocationFolder
__ SpringBoardHome: _SBIconLocationGroupAddLocation
__ SpringBoardHome: _SBIconLocationGroupAppLibrary
__ SpringBoardHome: _SBIconLocationGroupContainsLocation
__ SpringBoardHome: _SBIconLocationGroupDock
__ SpringBoardHome: _SBIconLocationGroupRoot
__ SpringBoardHome: _SBIconLocationGroupTodayView
__ SpringBoardHome: _SBIconLocationNone
__ SpringBoardHome: _SBIconLocationRoot
__ SpringBoardHome: _SBIconLocationRootWithSidebar
__ SpringBoardHome: _SBIconLocationTodayView
__ SpringBoardHome: _SBIconModelDidAddIconNotification
__ SpringBoardHome: _SBIconModelDidLayoutIconStateNotification
__ SpringBoardHome: _SBIconModelVisibilityDidChangeNotification
__ SpringBoardHome: _SBIconModelWillLayoutIconStateNotification
__ SpringBoardHome: _SBIconModelWillRemoveIconNotification
__ SpringBoardHome: _SBIconViewDidDismissContextMenuNotification
__ SpringBoardHome: _SBIconViewQueryingDisplayingIconInLocation
__ SpringBoardHome: _SBIconViewQueryingDisplayingIconView
__ SpringBoardHome: _SBIconViewQueryingIconViewForIconInLocation
__ SpringBoardHome: _SBIconViewWillDismissContextMenuNotification
__ SpringBoardHome: _SBIconViewWillPresentContextMenuNotification
__ SpringBoardHome: _SBIconZoomExpansionAnimationWillBeginNotification
__ SpringBoardHome: _SBLeafIconDataSourceDidChangeNotification
__ SpringBoardHome: _SBLeafIconDataSourceDidGenerateImageNotification
__ SpringBoardHome: _SBLeafIconDataSourceDidInvalidateNotification
__ SpringBoardHome: _SBRootFolderPageStateIsOnIconPage
__ SpringBoardHome: _SBRootFolderPageStateIsOnTodayPage
__ SpringBoardHome: _SBRootFolderPageStateIsSearch
__ SpringBoardHome: _SBTodayListIndex
__ SpringBoardHome: _SHBLibraryCategoryMapProactiveResponseKey
__ SpringBoardHome: _SHBLibraryCategoryMapProactiveSessionIdKey
__ SpringBoardHome: _kSBHIconAddToHomeScreenShortcutItemType
__ SpringBoardHome: _kSBHIconAddToStackApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconCancelDownloadApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconChangeWidgetSizeToExtraLargeApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconChangeWidgetSizeToLargeApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconChangeWidgetSizeToMediumApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconChangeWidgetSizeToSmallApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconConfigureStackApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconConfigureWidgetApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconDebugFeedbackStackApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconHideStackSuggestionApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconPauseDownloadApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconPrioritizeDownloadApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconRenameFolderApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconResumeDownloadApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconShareApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerDeleteAppApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerHideAppSuggestionApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerHideFolderContentsShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerRearrangeAppsForApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerRemoveAppApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerRemoveWidgetApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconTriggerShowAllWindowsForApplicationShortcutItemType
__ SpringBoardHome: _kSBHIconUnreadNotificationsApplicationShortcutItemType
__ SpringBoardHome: _kSBIconModelIconKey
__ SpringBoardHome: _kSBIconModelLeafIconsToHideKey
__ SpringBoardHome: _kSBIconModelLeafIconsToShowKey
__ SpringBoardHome: _kSBIconStateDock
__ SpringBoardHome: _kSBIconStateFavoriteTodayPageList
__ SpringBoardHome: _kSBIconStateIconBundleIdentifier
__ SpringBoardHome: _kSBIconStateIconBundleVersion
__ SpringBoardHome: _kSBIconStateIconDefaultDisplayName
__ SpringBoardHome: _kSBIconStateIconDisplayName
__ SpringBoardHome: _kSBIconStateIconLastModifiedDate
__ SpringBoardHome: _kSBIconStateIconListMetadata
__ SpringBoardHome: _kSBIconStateIconListUniqueIdentifiers
__ SpringBoardHome: _kSBIconStateIconLists
__ SpringBoardHome: _kSBIconStateIconMatrix
__ SpringBoardHome: _kSBIconStateIconTypeCustom
__ SpringBoardHome: _kSBIconStateIconTypeKey
__ SpringBoardHome: _kSBIconStateIconWebClipURL
__ SpringBoardHome: _kSBIconStateIgnoredList
__ SpringBoardHome: _kSBIconStateLeafIdentifier
__ SpringBoardHome: _kSBIconStateMetadataKey
__ SpringBoardHome: _kSBIconStateTodayPageList
__ SpringBoardHome: _kSBIconStateUniqueIdentifier
__ SpringBoardHome: _kSBLeafIconDataSourceDidGenerateImageFormatKey
__ SpringBoardServices: _NSStringFromAnalyticsEventType
__ SpringBoardServices: _NSStringFromSBIdleTimerConfigSettingPrecedence
__ SpringBoardServices: _NSStringFromSBSHardwareButtonKind
__ SpringBoardServices: _OBJC_CLASS_$_SBIdleTimerRequestConfiguration
__ SpringBoardServices: _OBJC_CLASS_$_SBLegacyServices
__ SpringBoardServices: _OBJC_CLASS_$_SBSAccessibilityWindowHostingSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSAppDragLocalContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationShortcutContactIcon
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationShortcutCustomImageIcon
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationShortcutItem
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationShortcutServiceFetchResult
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationUserQuitMonitorSessionSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSDisplayLayoutElement
__ SpringBoardServices: _OBJC_CLASS_$_SBSExternalDisplayLayoutElement
__ SpringBoardServices: _OBJC_CLASS_$_SBSHomeScreenServiceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSInCallPresentationConfiguration
__ SpringBoardServices: _OBJC_CLASS_$_SBSInCallPresentationRequest
__ SpringBoardServices: _OBJC_CLASS_$_SBSInCallPresentationServiceInterfaceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSLockScreenContentAction
__ SpringBoardServices: _OBJC_CLASS_$_SBSLockScreenRemoteContentAssertion
__ SpringBoardServices: _OBJC_CLASS_$_SBSLockScreenServiceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSMutableUserNotificationButtonDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSMutableUserNotificationTextFieldDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSRelaunchAction
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertActivationContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertConfigurationContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertHandle
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertHandleContext
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteAlertHandleServiceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSRemoteContentDefinition
__ SpringBoardServices: _OBJC_CLASS_$_SBSStatusBarStyleOverridesAssertion
__ SpringBoardServices: _OBJC_CLASS_$_SBSStatusBarTapContextImpl
__ SpringBoardServices: _OBJC_CLASS_$_SBSSwitcherDemoCommandsSessionSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSWebClipServiceSessionSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBSWidgetMetricsServiceInterfaceSpecification
__ SpringBoardServices: _OBJC_CLASS_$_SBScreenTimeTrackingController
__ SpringBoardServices: _OBJC_METACLASS_$_SBSLockScreenContentAction
__ SpringBoardServices: _SBApplicationStateDisplayIDKey
__ SpringBoardServices: _SBCardItemsControllerClientInterface
__ SpringBoardServices: _SBCardItemsControllerServerInterface
__ SpringBoardServices: _SBDisplayLayoutBacklightTransitionReasonCameraButton
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAccessibility
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibraryCategory
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibraryCategoryExpanded
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibraryCategoryRecents
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibraryCategorySuggested
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppLibrarySearch
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonAppSwitcher
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonBannerUnfurl
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonBreadcrumb
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonCommandTab
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonControlCenter
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonDestroySceneAction
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonExternalRequest
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonFloatingApplication
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonFloatingDock
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonFloatingDockRecents
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonHomeScreen
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonInlineAppExpose
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonLockScreen
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonNotification
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonNotificationCenter
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonRequestSceneAction
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonSiri
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonSpotlight
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonSystemGesture
__ SpringBoardServices: _SBDisplayLayoutTransitionReasonWidget
__ SpringBoardServices: _SBDisplayMetrics
__ SpringBoardServices: _SBLogAccessibilityWindowHosting
__ SpringBoardServices: _SBLogAnalytics
__ SpringBoardServices: _SBLogAppQuitMonitor
__ SpringBoardServices: _SBLogAppShortcuts
__ SpringBoardServices: _SBLogAutoLaunching
__ SpringBoardServices: _SBLogBanners
__ SpringBoardServices: _SBLogBiometricResource
__ SpringBoardServices: _SBLogCFUserNotifications
__ SpringBoardServices: _SBLogCommon
__ SpringBoardServices: _SBLogCoverSheet
__ SpringBoardServices: _SBLogDashBoard
__ SpringBoardServices: _SBLogDashBoardHostedAppViewController
__ SpringBoardServices: _SBLogDoNotDisturbWhileDriving
__ SpringBoardServices: _SBLogDockRecents
__ SpringBoardServices: _SBLogIconDragging
__ SpringBoardServices: _SBLogIdleTimer
__ SpringBoardServices: _SBLogInCallPresentation
__ SpringBoardServices: _SBLogLiquidDetection
__ SpringBoardServices: _SBLogLockScreenBiometricCoordinator
__ SpringBoardServices: _SBLogLockScreenMesaUnlockBehaviors
__ SpringBoardServices: _SBLogLockScreenMesaWalletPreArm
__ SpringBoardServices: _SBLogLockScreenNowPlaying
__ SpringBoardServices: _SBLogMedusaDropDestination
__ SpringBoardServices: _SBLogMotionGesture
__ SpringBoardServices: _SBLogPiP
__ SpringBoardServices: _SBLogRootController
__ SpringBoardServices: _SBLogScreenWake
__ SpringBoardServices: _SBLogStatusBarish
__ SpringBoardServices: _SBLogTransientOverlay
__ SpringBoardServices: _SBLogWallet
__ SpringBoardServices: _SBLogWidgets
__ SpringBoardServices: _SBLoggingSubsystem
__ SpringBoardServices: _SBSAppDragPrivateTypeIdentifier
__ SpringBoardServices: _SBSAppLaunchOriginSpotlight
__ SpringBoardServices: _SBSAppSwitcherServiceMessageKeyBundleIdentifier
__ SpringBoardServices: _SBSAppSwitcherServiceMessageKeyPort
__ SpringBoardServices: _SBSAppSwitcherServiceMessageKeySuccessResult
__ SpringBoardServices: _SBSApplicationLaunchOptionAppLinkOpenStrategyChangedKey
__ SpringBoardServices: _SBSApplicationLaunchOptionBreadcrumbBundleIdKey
__ SpringBoardServices: _SBSApplicationLaunchOptionBrowserActivationWithNoURLKey
__ SpringBoardServices: _SBSApplicationLaunchOptionBrowserReuseTabKey
__ SpringBoardServices: _SBSApplicationLaunchOptionRevealIconKey
__ SpringBoardServices: _SBSApplicationLaunchOptionUpdateAppLinkOpenStrategyKey
__ SpringBoardServices: _SBSApplicationMultiwindowServiceTriggerShowAllWindowsEntitlement
__ SpringBoardServices: _SBSApplicationServiceIdentifier
__ SpringBoardServices: _SBSApplicationShortcutServiceCustomImageEntitlement
__ SpringBoardServices: _SBSApplicationShortcutServiceFullAccessEntitlement
__ SpringBoardServices: _SBSAssistantActivationContextBundleIDKey
__ SpringBoardServices: _SBSBiometricsServiceUnlockSuppressionAssertionEntitlement
__ SpringBoardServices: _SBSConvertOpenApplicationSBSKeysToFBSKeysIfNecessary
__ SpringBoardServices: _SBSCreateOpenApplicationServiceEndpoint
__ SpringBoardServices: _SBSDisplayLayoutBacklightTransitionReasonForBacklightChangeSource
__ SpringBoardServices: _SBSDisplayLayoutElementAppLibraryIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementAppSwitcherIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementFloatingDockIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementHomeScreenIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementLockScreenNavigationIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementLoginIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementPasscodeIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementSpotlightFullscreenOverlayIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementSpotlightIdentifier
__ SpringBoardServices: _SBSDisplayLayoutElementTodayViewIdentifier
__ SpringBoardServices: _SBSDisplayLayoutTransitionReasonForSourceApplication
__ SpringBoardServices: _SBSEventObserverEventContinuityUIBecameVisible
__ SpringBoardServices: _SBSEventObserverEventContinuityUIWasObscured
__ SpringBoardServices: _SBSEventObserverEventDimmed
__ SpringBoardServices: _SBSEventObserverEventUndimmed
__ SpringBoardServices: _SBSEventObserverEventUnlocked
__ SpringBoardServices: _SBSEventObserverStateContinuityUIIsVisible
__ SpringBoardServices: _SBSEventObserverStateDimmedForLock
__ SpringBoardServices: _SBSExternalDisplayLayoutServiceInstanceIdentifier
__ SpringBoardServices: _SBSGetSideSwitchPreference
__ SpringBoardServices: _SBSHardwareButtonServiceBackgroundEventConsumerEntitlement
__ SpringBoardServices: _SBSHardwareButtonServiceEventConsumerEntitlement
__ SpringBoardServices: _SBSHardwareButtonServiceHomeHardwareButtonHintSuppressionEntitlement
__ SpringBoardServices: _SBSIdentifierForSecureAppType
__ SpringBoardServices: _SBSInCallPresentationModeDescription
__ SpringBoardServices: _SBSLockScreenContentActionConfigurationKeySupportedOrientations
__ SpringBoardServices: _SBSLockScreenContentAssertionErrorDomain
__ SpringBoardServices: _SBSLockScreenContentAssertionSlotApp
__ SpringBoardServices: _SBSLockScreenContentAssertionSlotEmbedded
__ SpringBoardServices: _SBSLockScreenContentAssertionSlotPlatter
__ SpringBoardServices: _SBSLockScreenContentAssertionSlotRemoteAlert
__ SpringBoardServices: _SBSMinimalVolumeControlHUDIdentifier
__ SpringBoardServices: _SBSOpenApplicationDebugOptionKeyWidgetFamily
__ SpringBoardServices: _SBSOpenApplicationDebugOptionKeyWidgetKind
__ SpringBoardServices: _SBSOpenApplicationDebugOptionKeyWidgetSize
__ SpringBoardServices: _SBSOpenApplicationEnvironmentSecureOnLockScreen
__ SpringBoardServices: _SBSOpenApplicationLaunchOriginShortcutItem
__ SpringBoardServices: _SBSOpenApplicationLayoutRolePrimary
__ SpringBoardServices: _SBSOpenApplicationLayoutRoleSideLarge
__ SpringBoardServices: _SBSOpenApplicationLayoutRoleSideNarrow
__ SpringBoardServices: _SBSOpenApplicationOptionKeyAdditionalApplications
__ SpringBoardServices: _SBSOpenApplicationOptionKeyConfirmedNotInPocket
__ SpringBoardServices: _SBSOpenApplicationOptionKeyDisableWatchdog
__ SpringBoardServices: _SBSOpenApplicationOptionKeyLaunchEnvironment
__ SpringBoardServices: _SBSOpenApplicationOptionKeyLaunchSceneless
__ SpringBoardServices: _SBSOpenApplicationOptionKeyLaunchWithoutAnimation
__ SpringBoardServices: _SBSOpenApplicationOptionKeyLayoutRole
__ SpringBoardServices: _SBSOpenURLOptionKeyUseLiveContentDuringTransition
__ SpringBoardServices: _SBSRemoteAlertActivationReasonWakeTo
__ SpringBoardServices: _SBSRemoteAlertHandleInvalidationErrorCodeForInvalidationReason
__ SpringBoardServices: _SBSRemoteAlertHandleInvalidationErrorDescription
__ SpringBoardServices: _SBSRemoteAlertHandleInvalidationErrorDomain
__ SpringBoardServices: _SBSSecureAppAssertionErrorDomain
__ SpringBoardServices: _SBSSecureAppTypeForIdentifier
__ SpringBoardServices: _SBSSetRequiredContextIdsForMedusaDragAndDropForSpotlightOnly
__ SpringBoardServices: _SBSSetSideSwitchPreference
__ SpringBoardServices: _SBSSoftwareUpdateServicePasscodePolicyEntitlement
__ SpringBoardServices: _SBSStatusBarStyleOverridesAssertionClientInterface
__ SpringBoardServices: _SBSStatusBarStyleOverridesCoordinatorErrorDomain
__ SpringBoardServices: _SBSStatusBarStyleOverridesCoordinatorErrorFailedEntitlementCheckDescription
__ SpringBoardServices: _SBSStatusBarStyleOverridesCoordinatorErrorProcessAlreadyRegisteredCoordinatorDescription
__ SpringBoardServices: _SBSStatusBarStyleOverridesCoordinatorErrorStyleOverrideKey
__ SpringBoardServices: _SBSStringFromWebClipServiceLaunchOrigin
__ SpringBoardServices: _SBSSystemServiceIdentifier
__ SpringBoardServices: _SBSUIRemoteAlertOptionActivateForAssistant
__ SpringBoardServices: _SBSUIRemoteAlertOptionAllowCFUserNotificationsOnTop
__ SpringBoardServices: _SBSUIRemoteAlertOptionCarDisplay
__ SpringBoardServices: _SBSUIRemoteAlertOptionCustomActivationReason
__ SpringBoardServices: _SBSUIRemoteAlertOptionDisableFadeInAnimation
__ SpringBoardServices: _SBSUIRemoteAlertOptionDismissWithHomeButton
__ SpringBoardServices: _SBSUIRemoteAlertOptionDismissalAnimationStyle
__ SpringBoardServices: _SBSUIRemoteAlertOptionHasTranslucentBackground
__ SpringBoardServices: _SBSUIRemoteAlertOptionInitialBackgroundStyle
__ SpringBoardServices: _SBSUIRemoteAlertOptionLaunchingInterfaceOrientation
__ SpringBoardServices: _SBSUIRemoteAlertOptionStatusBarStyle
__ SpringBoardServices: _SBSUIRemoteAlertOptionSuppressSiri
__ SpringBoardServices: _SBSUIRemoteAlertOptionSwipeDismissalStyle
__ SpringBoardServices: _SBSUIRemoteAlertOptionUserInfo
__ SpringBoardServices: _SBSUIRemoteAlertOptionViewControllerClass
__ SpringBoardServices: _SBSUIRemoteAlertOptionWantsWallpaperTunnel
__ SpringBoardServices: _SBSUserNotificationButtonDefinitionResponseIndexKey
__ SpringBoardServices: _SBSUserNotificationButtonDefinitionsKey
__ SpringBoardServices: _SBSUserNotificationTextFieldDefinitionsKey
__ SpringBoardServices: _SBSWallpaperFetchServiceEntitlement
__ SpringBoardServices: _SBSWallpaperServiceIdentifier
__ SpringBoardServices: _SBStatusBarStyleOverridesAssertionServerInterface
__ SpringBoardServices: _SBUserNotificationAlertMessageDelimiterKey
__ SpringBoardServices: _SBUserNotificationAllowInCarKey
__ SpringBoardServices: _SBUserNotificationAllowInLoginWindow
__ SpringBoardServices: _SBUserNotificationAllowInSetupKey
__ SpringBoardServices: _SBUserNotificationAllowLockscreenDismissalKey
__ SpringBoardServices: _SBUserNotificationAllowMenuButtonDismissal
__ SpringBoardServices: _SBUserNotificationAllowedApplicationsKey
__ SpringBoardServices: _SBUserNotificationAlternateButtonPresentationStyleKey
__ SpringBoardServices: _SBUserNotificationAttachmentImageAssetCatalogImageKey
__ SpringBoardServices: _SBUserNotificationAttachmentImageAssetCatalogPathKey
__ SpringBoardServices: _SBUserNotificationAttachmentImagePath
__ SpringBoardServices: _SBUserNotificationBehavesSuperModally
__ SpringBoardServices: _SBUserNotificationButtonLayoutDirectionKey
__ SpringBoardServices: _SBUserNotificationButtonTagForUnlockActionKey
__ SpringBoardServices: _SBUserNotificationDefaultButtonPresentationStyleKey
__ SpringBoardServices: _SBUserNotificationDefaultButtonTag
__ SpringBoardServices: _SBUserNotificationDefaultResponseLaunchBundleID
__ SpringBoardServices: _SBUserNotificationDefaultResponseLaunchURL
__ SpringBoardServices: _SBUserNotificationDisableIdleSleepWhileVisible
__ SpringBoardServices: _SBUserNotificationDismissOnLock
__ SpringBoardServices: _SBUserNotificationDismissesOverlaysInLockScreen
__ SpringBoardServices: _SBUserNotificationDisplayActionButtonOnLockScreen
__ SpringBoardServices: _SBUserNotificationDontDismissOnUnlock
__ SpringBoardServices: _SBUserNotificationExtensionIdentifierKey
__ SpringBoardServices: _SBUserNotificationExtensionItemsKey
__ SpringBoardServices: _SBUserNotificationForcesModalAlertAppearance
__ SpringBoardServices: _SBUserNotificationHeaderImageAssetCatalogImageKey
__ SpringBoardServices: _SBUserNotificationHeaderImageAssetCatalogPathKey
__ SpringBoardServices: _SBUserNotificationHeaderImagePath
__ SpringBoardServices: _SBUserNotificationHideOnClonedDisplay
__ SpringBoardServices: _SBUserNotificationIconImageAssetCatalogImageKey
__ SpringBoardServices: _SBUserNotificationIconImageAssetCatalogPathKey
__ SpringBoardServices: _SBUserNotificationIconImagePath
__ SpringBoardServices: _SBUserNotificationIgnoresQuietMode
__ SpringBoardServices: _SBUserNotificationLockScreenAlertHeaderKey
__ SpringBoardServices: _SBUserNotificationLockScreenAlertMessageDelimiterKey
__ SpringBoardServices: _SBUserNotificationLockScreenAlertMessageKey
__ SpringBoardServices: _SBUserNotificationOtherButtonPresentationStyleKey
__ SpringBoardServices: _SBUserNotificationPendInSetupIfNotAllowedKey
__ SpringBoardServices: _SBUserNotificationPendWhileKeyBagLockedKey
__ SpringBoardServices: _SBUserNotificationRemoteServiceBundleIdentifierKey
__ SpringBoardServices: _SBUserNotificationRemoteViewControllerClassNameKey
__ SpringBoardServices: _SBUserNotificationSoundAlertTopicKey
__ SpringBoardServices: _SBUserNotificationSoundAlertTypeKey
__ SpringBoardServices: _SBUserNotificationSoundRepeatDurationKey
__ SpringBoardServices: _SBUserNotificationSoundVibrationPatternKey
__ SpringBoardServices: _SBUserNotificationSystemSoundBehaviorKey
__ SpringBoardServices: _SBUserNotificationSystemSoundIDKey
__ SpringBoardServices: _SBUserNotificationTextAutocapitalizationType
__ SpringBoardServices: _SBUserNotificationTextAutocorrectionType
__ SpringBoardServices: _SBUserNotificationUndimsScreen
__ SpringBoardServices: _SBUserNotificationWakeDisplay
__ SpringBoardServices: __SBApplicationStateGetMonitor
__ SpringBoardServices: __SBSAutolockTimerPostExternalChangeNotification
__ SpringBoardServices: ___SBSEventObserverGetDarwinNotificationFromEvent
__ SpringBoardServices: ___sb__mainScreenReferenceBounds
__ SpringBoardServices: ___sb__runningInSpringBoard
__ SpringBoardServices: _kSBSAnalyticsBreadcrumbTappedKey
__ SpringBoardServices: _kSBSAnalyticsDeleteIconLocationKey
__ SpringBoardServices: _kSBSAnalyticsDeleteIconOptionsKey
__ SpringBoardServices: _kSBSAnalyticsDeleteIconSelectedOptionKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementBundleIdKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementIdentifierKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementLevelKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementUIApplicationKey
__ SpringBoardServices: _kSBSAnalyticsDisplayLayoutElementsKey
__ SpringBoardServices: _kSBSAnalyticsDockSuggestionIndexKey
__ SpringBoardServices: _kSBSAnalyticsDockSuggestionTypeKey
__ SpringBoardServices: _kSBSAnalyticsDockSuggestionsEnabledKey
__ SpringBoardServices: _kSBSAnalyticsDockSwipeGestureStateKey
__ SpringBoardServices: _kSBSAnalyticsEventTypeDashBoardCameraSwipeFailedLargestPresentExtent
__ SpringBoardServices: _kSBSAnalyticsEventTypeSpringloadedLocationKey
__ SpringBoardServices: _kSBSAnalyticsFloatingApplicationMoveGestureInitialConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsFloatingApplicationMoveGestureResultConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsFloatingApplicationPinGestureDidSwipeDownKey
__ SpringBoardServices: _kSBSAnalyticsFloatingApplicationPinGesturePinActionTypeKey
__ SpringBoardServices: _kSBSAnalyticsFolderStatsNumberOfFoldersInDockKey
__ SpringBoardServices: _kSBSAnalyticsFolderStatsNumberOfFoldersKey
__ SpringBoardServices: _kSBSAnalyticsFolderStatsNumberOfItemsInDockKey
__ SpringBoardServices: _kSBSAnalyticsFolderStatsNumberOfPagesKey
__ SpringBoardServices: _kSBSAnalyticsHasEverHiddenAPageKey
__ SpringBoardServices: _kSBSAnalyticsIconDragSessionDroppedToMedusaDragStartLocationKey
__ SpringBoardServices: _kSBSAnalyticsIconDragSessionDroppedToMedusaDropActionKey
__ SpringBoardServices: _kSBSAnalyticsIconDragSessionIdentifierKey
__ SpringBoardServices: _kSBSAnalyticsIconDragSessionItemCountKey
__ SpringBoardServices: _kSBSAnalyticsIconIndexKey
__ SpringBoardServices: _kSBSAnalyticsIconIsFolderKey
__ SpringBoardServices: _kSBSAnalyticsIconLocationKey
__ SpringBoardServices: _kSBSAnalyticsIconModelWithDesiredIconStateLoadedMissingDesiredIconIdentifiersKey
__ SpringBoardServices: _kSBSAnalyticsIconPageHidingNumberOfPagesHidden
__ SpringBoardServices: _kSBSAnalyticsIconPageHidingNumberOfPagesVisible
__ SpringBoardServices: _kSBSAnalyticsLayoutStateElementIdentifiersKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateElementInterfaceOrientationKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateFloatingConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateInterfaceOrientationKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateSpaceConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateTransitionSourceKey
__ SpringBoardServices: _kSBSAnalyticsLayoutStateUnlockedEnvironmentKey
__ SpringBoardServices: _kSBSAnalyticsLeftBreadcrumbTypeKey
__ SpringBoardServices: _kSBSAnalyticsNewAppDownloadLocationHasBeenSetKey
__ SpringBoardServices: _kSBSAnalyticsNewAppDownloadLocationKey
__ SpringBoardServices: _kSBSAnalyticsPIPVideoDidActivateKey
__ SpringBoardServices: _kSBSAnalyticsReachabilityCancelGestureTypeKey
__ SpringBoardServices: _kSBSAnalyticsRightBreadcrumbTypeKey
__ SpringBoardServices: _kSBSAnalyticsScreenOnKey
__ SpringBoardServices: _kSBSAnalyticsSideApplicationMoveGestureInitialConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsSideApplicationMoveGestureResultConfigurationKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpFinalActionKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpLiftOffVelocityAngleKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpLiftOffVelocityXKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpLiftOffVelocityYKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpOrientationKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpPeakVelocityKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpTimestampDeltaKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpXCoordKey
__ SpringBoardServices: _kSBSAnalyticsSwipeUpYCoordKey
__ SpringBoardServices: _kSBSAnalyticsSwitcherIndexKey
__ SpringBoardServices: _kSBSAnalyticsSwitcherTypeKey
__ SpringBoardServices: _kSBSAnalyticsSystemGestureStateKey
__ SpringBoardServices: _kSBSAnalyticsSystemGestureTypeKey
__ SpringBoardServices: _kSBSApplicationHarmonyServiceClientMessageKeyDisplayId
__ SpringBoardServices: _kSBSApplicationHarmonyServiceServerMessageKeyWhitePointAdaptivityStyle
__ SpringBoardServices: _kSBSApplicationServiceMessageKeyBundleIdentifier
__ SpringBoardServices: _kSBSApplicationShortcutServiceClientMessageKeyDynamicApplicationShortcutItems
__ SpringBoardServices: _kSBSApplicationShortcutServiceClientMessageKeyItemTypes
__ SpringBoardServices: _kSBSApplicationShortcutServiceServerMessageKeyResult
__ SpringBoardServices: _kSBSDashBoardEventTypeKey
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyButtonKind
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyDeferringToken
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyEventMask
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyEventType
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyHIDEventsEnabled
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyHapticType
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyPriority
__ SpringBoardServices: _kSBSHardwareButtonServiceMessageKeyToggleButtonState
__ SpringBoardServices: _kSBSLockStateNotifyKey
__ SpringBoardServices: _kSBSSoftwareUpdateServiceMessageKeyPasscodePolicy
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeyRemoteStateDumpTimeout
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeyStateString
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeyStateType
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeySuccess
__ SpringBoardServices: _kSBSStateDumpServiceMessageKeySuccessDescription
__ SpringBoardServices: _kSBSSystemBiometricsServiceMessageKeyCredentialSet
__ SpringBoardServices: _kSBSSystemHardwareButtonServiceClientMessageKeyAssertionReason
__ SpringBoardServices: _kSBSSystemHardwareButtonServiceClientMessageKeyAssertionType
__ SpringBoardServices: _kSBSSystemHardwareButtonServiceServerMessageKeyAction
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyAnimateTransitions
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyBlockForScreenTime
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyBundleIdentifier
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyEnabledState
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyHUDIdentifier
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyPageInteger
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeyPortSendRight
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeySceneCount
__ SpringBoardServices: _kSBSTestAutomationServiceMessageKeySizeInteger
__ SpringBoardServices: _kSBSTestAutomationServiceServiceMessageKeyPath
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyImageData
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyOrientation
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyRect
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyVariant
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyVideoURL
__ SpringBoardServices: _kSBSWallpaperServiceClientMessageKeyWallpaperMode
__ SpringBoardServices: _kSBUserDoneWithRequestedPasscodeUINotification
__ SpringBoardServices: _secureAppTypeName
__ SpringBoardUI: _NSStringFromLockSource
__ SpringBoardUI: _NSStringFromSBSceneViewDisplayMode
__ SpringBoardUI: _NSStringFromUnlockIntent
__ SpringBoardUI: _NSStringFromUnlockSource
__ SpringBoardUI: _OBJC_CLASS_$_SBAlertControllerVisualStyle
__ SpringBoardUI: _OBJC_CLASS_$_SBAlertItem
__ SpringBoardUI: _OBJC_CLASS_$_SBCrossfadeView
__ SpringBoardUI: _OBJC_CLASS_$_SBLockScreenLegibilitySettings
__ SpringBoardUI: _OBJC_CLASS_$_SBLockScreenPluginAppearanceContext
__ SpringBoardUI: _OBJC_CLASS_$_SBLockScreenPluginContext
__ SpringBoardUI: _OBJC_CLASS_$_SBMutableLockScreenPluginPresentation
__ SpringBoardUI: _OBJC_CLASS_$_SBOrientationTransformWrapperView
__ SpringBoardUI: _OBJC_CLASS_$_SBSceneHandle
__ SpringBoardUI: _OBJC_CLASS_$_SBSceneHandleBlockObserver
__ SpringBoardUI: _OBJC_CLASS_$_SBSceneView
__ SpringBoardUI: _OBJC_CLASS_$_SBUIBackgroundView
__ SpringBoardUI: _OBJC_CLASS_$_SBUIChevronView
__ SpringBoardUI: _OBJC_CLASS_$_SBUICoronaAnimationController
__ SpringBoardUI: _OBJC_CLASS_$_SBUILockScreenDisableAssertion
__ SpringBoardUI: _OBJC_CLASS_$_SBUISearchUtilities
__ SpringBoardUI: _OBJC_CLASS_$_SBUISound
__ SpringBoardUI: _OBJC_CLASS_$_SBUIViewFloatSpringProperty
__ SpringBoardUI: _OBJC_METACLASS_$_SBAlertItem
__ SpringBoardUI: _OBJC_METACLASS_$_SBOrientationTransformWrapperView
__ SpringBoardUI: _OBJC_METACLASS_$_SBSceneHandle
__ SpringBoardUI: _OBJC_METACLASS_$_SBSceneView
__ SpringBoardUI: _OBJC_METACLASS_$_SBUIChevronView
__ SpringBoardUI: _OBJC_METACLASS_$_SBUILockScreenDisableAssertion
__ SpringBoardUI: _SBActiveCallStateChangedNotification
__ SpringBoardUI: _SBAirplaneModeControllerAirplaneModeDidChangeNotification
__ SpringBoardUI: _SBAirplaneModeControllerDidProcessAirplaneModeChangeNotification
__ SpringBoardUI: _SBAirplaneModeControllerWillProcessAirplaneModeChangeNotification
__ SpringBoardUI: _SBAlertItemIsUserDeactivate
__ SpringBoardUI: _SBApplicationNetworkFlagsChangedNotification
__ SpringBoardUI: _SBBacklightAboutToUndimNotification
__ SpringBoardUI: _SBBacklightChangeSourceKey
__ SpringBoardUI: _SBBacklightFadeFinishedNotification
__ SpringBoardUI: _SBBacklightLevelChangedNotification
__ SpringBoardUI: _SBBacklightNewFactorKey
__ SpringBoardUI: _SBBacklightOldFactorKey
__ SpringBoardUI: _SBBacklightWillTurnOnWhileUILockedNotification
__ SpringBoardUI: _SBDeviceLockStateChangedNotification
__ SpringBoardUI: _SBFeaturesShouldBeLockedForRemoteLockNotification
__ SpringBoardUI: _SBHeadsetButtonUpNotification
__ SpringBoardUI: _SBHomescreenIconsDidAppearNotification
__ SpringBoardUI: _SBHomescreenIconsWillAppearNotification
__ SpringBoardUI: _SBIncomingCallPendingNotification
__ SpringBoardUI: _SBLiftToWakeGestureDetectedNotification
__ SpringBoardUI: _SBLockButtonPressedNotification
__ SpringBoardUI: _SBMenuButtonPressedNotification
__ SpringBoardUI: _SBNetworkTetheringStateChangedNotification
__ SpringBoardUI: _SBOrientationLockChangedNotification
__ SpringBoardUI: _SBProximityDidChangeNotification
__ SpringBoardUI: _SBStringFromAlertItemDeactivateReason
__ SpringBoardUI: _SBTelephonyDaemonRestartNotification
__ SpringBoardUI: _SBTelephonyManagerAirplaneModeDidChangeNotification
__ SpringBoardUI: _SBTelephonyManagerDidProcessAirplaneModeChangeNotification
__ SpringBoardUI: _SBTelephonyManagerWillProcessAirplaneModeChangeNotification
__ SpringBoardUI: _SBTestingConfigureNextAssistantRecognitionStrings
__ SpringBoardUI: _SBTestingConfigureNextVoiceRecognitionAudioInputPathsNotification
__ SpringBoardUI: _SBUIConvertLockSourceToBacklightChangeSource
__ SpringBoardUI: _SBUIConvertUnlockSourceToBacklightChangeSource
__ SpringBoardUI: _SBUIHasHIDRingerSwitch
__ SpringBoardUI: _SBUILaunchOptionKeyAllowUnlock
__ SpringBoardUI: _SBUILaunchOptionKeyPNGLess
__ SpringBoardUI: _SBUIPluginContextOptionBundleId
__ SpringBoardUI: _SBUIPluginContextOptionSupportsCarFullScreen
__ SpringBoardUI: _SBUIRingerSwitchBehaviorDidChangeNotification
__ SpringBoardUI: _SBUIUseHIDRingerAsOrientationLock
__ SpringBoardUI: _SBUserEventOccurredNotification
__ SpringBoardUI: _SBVolumeChangedNotification
__ SpringBoardUI: _SBWifiManagerCurrentDeviceDidChangeNotification
__ SpringBoardUI: _SBWifiManagerDevicePresenceDidChangeNotification
__ SpringBoardUI: _SBWifiManagerPowerStateDidChangeNotification
__ SpringBoardUI: _kSBNotificationKeyDeviceLockState
__ SpringBoardUI: _kSBNotificationKeyDisplayIdentifier
__ SpringBoardUI: _kSBNotificationKeyHeadsetButtonLongPress
__ SpringBoardUI: _kSBNotificationKeyState
__ SpringBoardUIServices: _NSStringFromSBUIBiometricEvent
__ SpringBoardUIServices: _NSStringFromSBUIBiometricMatchMode
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIHandleDeviceLockSceneAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIHardwareButtonEventSceneAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallDestroySceneAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallRequestPresentationModeAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallSceneClientSettings
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallSceneClientSettingsDiffInspector
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUIInCallSceneSpecification
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUILoginUISceneClientSettings
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUILoginUISceneClientSettingsDiffInspector
__ SpringBoardUIServices: _OBJC_CLASS_$_SBSUILoginUISceneSpecification
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIBiometricResource
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUICallToActionLabel
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIEmergencyCallHostViewController
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUILegibilityLabel
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUILegibilityView
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUILockOverlayView
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIPasscodeBiometricResource
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIPasscodeLockViewFactory
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIPowerDownView
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIProudLockIconView
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUIRemoteAlertButtonAction
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUISizeObservingView
__ SpringBoardUIServices: _OBJC_CLASS_$_SBUISpotlightBarNavigationController
__ SpringBoardUIServices: _OBJC_CLASS_$__SBUIBiometricKitInterface
__ SpringBoardUIServices: _OBJC_CLASS_$__SBUIBiometricMatchingAssertion
__ SpringBoardUIServices: _OBJC_METACLASS_$_SBUIEmergencyCallHostViewController
__ SpringBoardUIServices: _OBJC_METACLASS_$_SBUILockOverlayView
__ SpringBoardUIServices: _OBJC_METACLASS_$_SBUIPowerDownView
__ SpringBoardUIServices: _SBBiometricEventMonitorHasAuthenticated
__ SpringBoardUIServices: _SBFloatEqualsFloat
__ SpringBoardUIServices: _SBFloatFloorForScale
__ SpringBoardUIServices: _SBFloatGreaterThanFloat
__ SpringBoardUIServices: _SBFloatRoundForMainScreenScale
__ SpringBoardUIServices: _SBFloatRoundForScale
__ SpringBoardUIServices: _SBLaunchImageIngestionInfoKey
__ SpringBoardUIServices: _SBLaunchImageIngestionInfo_cacheGUIDKey
__ SpringBoardUIServices: _SBLaunchImageIngestionInfo_ingestorVersionKey
__ SpringBoardUIServices: _SBLaunchImageIngestionInfo_installInstanceIDKey
__ SpringBoardUIServices: _SBLayoutDefaultSideLayoutElementWidth
__ SpringBoardUIServices: _SBLayoutSupportsSideLayoutRole
__ SpringBoardUIServices: _SBOffsetPointInReferenceSpaceAlongSceneSpaceDirectionForOrientation
__ SpringBoardUIServices: _SBPhoneOnPadFallbackLaunchSize
__ SpringBoardUIServices: _SBRectContainsPoint
__ SpringBoardUIServices: _SBRectCornerRadiiForRadius
__ SpringBoardUIServices: _SBRectWithSize
__ SpringBoardUIServices: _SBSUIHardwareButtonEventTypeDescription
__ SpringBoardUIServices: _SBSUIHardwareButtonEventTypeIsValid
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceBannerDismissal
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceBannerSwipeToUnfurl
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceBannerTap
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceDeviceLock
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceDisplayWake
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceFullscreenOverlayDismissal
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceHomeButton
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceInitialPresentation
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceRotation
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceSceneDestroyed
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceSceneResize
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceSwitcherDismissal
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceSystemGesture
__ SpringBoardUIServices: _SBSUIInCallTransitionAnalyticsSourceTestRecipe
__ SpringBoardUIServices: _SBSUIInCallWindowSceneSessionDestructionReasonDescription
__ SpringBoardUIServices: _SBStringFromRectCornerRadii
__ SpringBoardUIServices: _SBTransformFromOrientationToOrientation
__ SpringBoardUIServices: _SBTransformedRectWithScale
__ SpringBoardUIServices: _SBUIApplicationDragUserActivityUserInfoKeyBundleIdentifier
__ SpringBoardUIServices: _SBUICommonInitialize
__ SpringBoardUIServices: _SBUICurrentPasscodeStyleForUser
__ SpringBoardUIServices: _SBUIDragItemProviderApplicationTypeIdentifier
__ SpringBoardUIServices: _SBUIGraphicsQuality
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscode
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonBioLockout
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonKey
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonMatchFailure
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonTimerExpired
__ SpringBoardUIServices: _SBUIPasscodeLockViewBiometricTransitionToPasscodeReasonUserRequested
__ SpringBoardUIServices: _SBUIRemoteAlertActivationReasonActivatingForUILock
__ SpringBoardUIServices: _SBUnintegralizedRectCenteredAboutPoint
__ StoreKit: _OBJC_CLASS_$_SKStoreProductActivityViewController
__ StoreKit: _SKStoreProductParameterITunesItemIdentifier
__ StoreKit: _SKStoreProductParameterPopoverSourceRect
__ StoreServices: _OBJC_CLASS_$_SSDownloadManager
__ StoreServices: _OBJC_CLASS_$_SSSoftwareUpdatesRequest
__ StudyLog: _OBJC_CLASS_$_SLGActivatableLogger
__ StudyLog: _OBJC_CLASS_$_SLGLog
__ StudyLog: _OBJC_CLASS_$_SLGNotificationActivatedLogger
__ SystemConfiguration: _SCDynamicStoreCopyValue
__ SystemConfiguration: _SCDynamicStoreCreate
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkInterfaceEntity
__ SystemConfiguration: _SCDynamicStoreSetDispatchQueue
__ SystemConfiguration: _SCDynamicStoreSetNotificationKeys
__ SystemConfiguration: _kSCDynamicStoreDomainState
__ SystemConfiguration: _kSCEntNetIPv4
__ SystemConfiguration: _kSCEntNetIPv6
__ SystemStatus: _OBJC_CLASS_$_STBatteryStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STBatteryStatusDomainPublisher
__ SystemStatus: _OBJC_CLASS_$_STCallingStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STCallingStatusDomainUserInteraction
__ SystemStatus: _OBJC_CLASS_$_STDynamicActivityAttributionManager
__ SystemStatus: _OBJC_CLASS_$_STMediaStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STMutableCallingStatusDomainData
__ SystemStatus: _OBJC_CLASS_$_STTelephonyStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STVoiceControlStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STWifiStatusDomain
__ SystemStatus: _OBJC_CLASS_$_STWifiStatusDomainPublisher
__ SystemStatusServer: _OBJC_CLASS_$_STStatusServer
__ SystemStatusServer: _OBJC_CLASS_$_STTelephonyStateProvider
__ SystemStatusServer: _OBJC_CLASS_$_STTelephonyStatusDomainDataProvider
__ TelephonyUtilities: _OBJC_CLASS_$_TUAudioRoute
__ TelephonyUtilities: _OBJC_CLASS_$_TUCallCapabilities
__ TelephonyUtilities: _OBJC_CLASS_$_TUCallCenter
__ TelephonyUtilities: _OBJC_CLASS_$_TUDialRequest
__ TelephonyUtilities: _TUAudioSystemAudioPickableRoutesChanged
__ TelephonyUtilities: _TUCallCapabilitiesEmergencyCallbackModeChangedNotification
__ TelephonyUtilities: _TUCallCenterCallContinuityStateChangedNotification
__ TelephonyUtilities: _TUCallCenterCallStatusChangedNotification
__ TelephonyUtilities: _TUCallCenterControlFailureNotification
__ TelephonyUtilities: _TUCallCenterIsEmergencyChangedNotification
__ TelephonyUtilities: _TUCallCenterVideoCallStatusChangedNotification
__ TelephonyUtilities: _TUCallModelChangedNotification
__ TelephonyUtilities: _TUISOCountryCodeForMCC
__ TelephonyUtilities: _TUInCallRemoteAlertViewControllerClassName
__ TelephonyUtilities: _TUIsCallHandoffActivityType
__ TelephonyUtilities: _TUShouldShowCallHandoff
__ TestFlightCore: _OBJC_CLASS_$_TFBetaLaunchHandle
__ TextInput: _OBJC_CLASS_$_TIPreferencesController
__ TextInput: _TIHardwareKeyboardLastSeenPreference
__ ToneLibrary: _OBJC_CLASS_$_TLAlert
__ ToneLibrary: _OBJC_CLASS_$_TLAlertConfiguration
__ ToneLibrary: _OBJC_CLASS_$_TLToneManager
__ ToneLibrary: _TLAlertTopicSystemNotificationGeneric
__ ToneLibrary: _TLVibrationIdentifierNone
__ UIKit: _CGSizeFromString
__ UIKit: _NSDirectionalEdgeInsetsZero
__ UIKit: _NSFontAttributeName
__ UIKit: _NSForegroundColorAttributeName
__ UIKit: _NSParagraphStyleAttributeName
__ UIKit: _NSStringFromCGAffineTransform
__ UIKit: _NSStringFromCGPoint
__ UIKit: _NSStringFromCGRect
__ UIKit: _NSStringFromCGSize
__ UIKit: _NSStringFromUIEdgeInsets
__ UIKit: _OBJC_CLASS_$_NSMutableParagraphStyle
__ UIKit: _OBJC_CLASS_$_UIActivityContinuationAction
__ UIKit: _OBJC_CLASS_$_UIActivityIndicatorView
__ UIKit: _OBJC_CLASS_$_UIActivityViewController
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIApplicationCoverSheetSceneSpecification
__ UIKit: _OBJC_CLASS_$_UIApplicationExternalScreenSceneSpecification
__ UIKit: _OBJC_CLASS_$_UIApplicationLegacyVOIPKeepAliveAction
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneClientSettings
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneClientSettingsDiffInspector
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneDeactivationManager
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneSettings
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneSettingsDiffInspector
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneSpecification
__ UIKit: _OBJC_CLASS_$_UIApplicationSceneTransitionContext
__ UIKit: _OBJC_CLASS_$_UIBannerAction
__ UIKit: _OBJC_CLASS_$_UIBarButtonItem
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIBlurEffect
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UICollectionViewCell
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIControl
__ UIKit: _OBJC_CLASS_$_UIDestroySceneAction
__ UIKit: _OBJC_CLASS_$_UIDestroySceneActionResponse
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIDidTakeScreenshotAction
__ UIKit: _OBJC_CLASS_$_UIDismissSceneAction
__ UIKit: _OBJC_CLASS_$_UIDragInteraction
__ UIKit: _OBJC_CLASS_$_UIDragItem
__ UIKit: _OBJC_CLASS_$_UIDragPreview
__ UIKit: _OBJC_CLASS_$_UIDragPreviewTarget
__ UIKit: _OBJC_CLASS_$_UIDraggingSystemMonitor
__ UIKit: _OBJC_CLASS_$_UIDraggingSystemTouchRoutingPolicy
__ UIKit: _OBJC_CLASS_$_UIDropInteraction
__ UIKit: _OBJC_CLASS_$_UIDropProposal
__ UIKit: _OBJC_CLASS_$_UIFetchContentInBackgroundAction
__ UIKit: _OBJC_CLASS_$_UIFetchContentInBackgroundActionResponse
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIFontDescriptor
__ UIKit: _OBJC_CLASS_$_UIForceStageInteractionProgress
__ UIKit: _OBJC_CLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRenderer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRendererFormat
__ UIKit: _OBJC_CLASS_$_UIHBClickGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIHBLongClickGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIHandleBackgroundURLSessionAction
__ UIKit: _OBJC_CLASS_$_UIHoverGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIImpactFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UIKeyCommand
__ UIKit: _OBJC_CLASS_$_UIKeyboard
__ UIKit: _OBJC_CLASS_$_UIKeyboardInputModeController
__ UIKit: _OBJC_CLASS_$_UILabel
__ UIKit: _OBJC_CLASS_$_UILongPressGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIMutableApplicationSceneClientSettings
__ UIKit: _OBJC_CLASS_$_UIMutableApplicationSceneSettings
__ UIKit: _OBJC_CLASS_$_UIMutableTransformer
__ UIKit: _OBJC_CLASS_$_UINavigationController
__ UIKit: _OBJC_CLASS_$_UINib
__ UIKit: _OBJC_CLASS_$_UINotificationFeedbackGenerator
__ UIKit: _OBJC_CLASS_$_UIOpenURLAction
__ UIKit: _OBJC_CLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPeripheralHost
__ UIKit: _OBJC_CLASS_$_UIPinchGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIPointerEffect
__ UIKit: _OBJC_CLASS_$_UIPointerHighlightEffect
__ UIKit: _OBJC_CLASS_$_UIPointerInteraction
__ UIKit: _OBJC_CLASS_$_UIPointerLiftEffect
__ UIKit: _OBJC_CLASS_$_UIPointerRegion
__ UIKit: _OBJC_CLASS_$_UIPointerShape
__ UIKit: _OBJC_CLASS_$_UIPointerStyle
__ UIKit: _OBJC_CLASS_$_UIPreviewForceInteractionProgress
__ UIKit: _OBJC_CLASS_$_UIPreviewParameters
__ UIKit: _OBJC_CLASS_$_UIRootSceneWindow
__ UIKit: _OBJC_CLASS_$_UIRootWindowScenePresentationBinder
__ UIKit: _OBJC_CLASS_$_UIRotationGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UISceneActivationConditions
__ UIKit: _OBJC_CLASS_$_UISceneLayerTargetFactory
__ UIKit: _OBJC_CLASS_$_UISceneRequestOptions
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScreenEdgePanGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIScrollEvent
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UISegmentedControl
__ UIKit: _OBJC_CLASS_$_UISlider
__ UIKit: _OBJC_CLASS_$_UISpringLoadedInteraction
__ UIKit: _OBJC_CLASS_$_UIStackView
__ UIKit: _OBJC_CLASS_$_UIStatusBar
__ UIKit: _OBJC_CLASS_$_UIStatusBarHideAnimationParameters
__ UIKit: _OBJC_CLASS_$_UIStatusBarHoverRegionAction
__ UIKit: _OBJC_CLASS_$_UIStatusBarManager
__ UIKit: _OBJC_CLASS_$_UIStatusBarServer
__ UIKit: _OBJC_CLASS_$_UIStatusBarStyleAnimationParameters
__ UIKit: _OBJC_CLASS_$_UIStatusBarStyleRequest
__ UIKit: _OBJC_CLASS_$_UIStatusBarTapAction
__ UIKit: _OBJC_CLASS_$_UIStatusBarWindow
__ UIKit: _OBJC_CLASS_$_UIStatusBar_Base
__ UIKit: _OBJC_CLASS_$_UIStatusBar_Modern
__ UIKit: _OBJC_CLASS_$_UISwipeGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UISwitch
__ UIKit: _OBJC_CLASS_$_UISystemNavigationAction
__ UIKit: _OBJC_CLASS_$_UISystemNavigationActionDestinationContext
__ UIKit: _OBJC_CLASS_$_UISystemShellApplication
__ UIKit: _OBJC_CLASS_$_UITableView
__ UIKit: _OBJC_CLASS_$_UITableViewCell
__ UIKit: _OBJC_CLASS_$_UITableViewController
__ UIKit: _OBJC_CLASS_$_UITableViewHeaderFooterView
__ UIKit: _OBJC_CLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UITargetedDragPreview
__ UIKit: _OBJC_CLASS_$_UITargetedPreview
__ UIKit: _OBJC_CLASS_$_UITextEffectsWindow
__ UIKit: _OBJC_CLASS_$_UITextField
__ UIKit: _OBJC_CLASS_$_UITextView
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _OBJC_CLASS_$_UITransform
__ UIKit: _OBJC_CLASS_$_UIUserInterfaceStyleArbiter
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIViewFloatAnimatableProperty
__ UIKit: _OBJC_CLASS_$_UIViewPropertyAnimator
__ UIKit: _OBJC_CLASS_$_UIVisualEffectView
__ UIKit: _OBJC_CLASS_$_UIWebClip
__ UIKit: _OBJC_CLASS_$_UIWindow
__ UIKit: _OBJC_CLASS_$_UIWindowScene
__ UIKit: _OBJC_CLASS_$_UIWindowSceneSpecification
__ UIKit: _OBJC_CLASS_$__UIApplicationInfo
__ UIKit: _OBJC_CLASS_$__UIAssetManager
__ UIKit: _OBJC_CLASS_$__UIBackdropView
__ UIKit: _OBJC_CLASS_$__UIBackdropViewSettings
__ UIKit: _OBJC_CLASS_$__UIBannerContent
__ UIKit: _OBJC_CLASS_$__UIDirectionalRotationView
__ UIKit: _OBJC_CLASS_$__UIDiscreteFeedback
__ UIKit: _OBJC_CLASS_$__UIEdgeFeedbackGenerator
__ UIKit: _OBJC_CLASS_$__UIEdgeFeedbackGeneratorConfiguration
__ UIKit: _OBJC_CLASS_$__UIFeedbackEngine
__ UIKit: _OBJC_CLASS_$__UIHyperConstantExtender
__ UIKit: _OBJC_CLASS_$__UIHyperInteractor
__ UIKit: _OBJC_CLASS_$__UIHyperpoint
__ UIKit: _OBJC_CLASS_$__UIHyperrectangle
__ UIKit: _OBJC_CLASS_$__UIHyperregionUnion
__ UIKit: _OBJC_CLASS_$__UILayerHostView
__ UIKit: _OBJC_CLASS_$__UILegibilityLabel
__ UIKit: _OBJC_CLASS_$__UILegibilitySettings
__ UIKit: _OBJC_CLASS_$__UINotificationFeedbackGeneratorConfiguration
__ UIKit: _OBJC_CLASS_$__UIPortalView
__ UIKit: _OBJC_CLASS_$__UIRemoteKeyboards
__ UIKit: _OBJC_CLASS_$__UIRemoteViewController
__ UIKit: _OBJC_CLASS_$__UIRootWindow
__ UIKit: _OBJC_CLASS_$__UISettings
__ UIKit: _OBJC_CLASS_$__UIStatusBarAction
__ UIKit: _OBJC_CLASS_$__UIStatusBarData
__ UIKit: _OBJC_CLASS_$__UIStatusBarDataStringEntry
__ UIKit: _OBJC_CLASS_$__UISystemGestureManager
__ UIKit: _OBJC_CLASS_$__UIVibrantSettings
__ UIKit: _OBJC_CLASS_$__UIViewControllerTransitionContext
__ UIKit: _OBJC_METACLASS_$_UIApplicationSceneSpecification
__ UIKit: _OBJC_METACLASS_$_UICollectionViewCell
__ UIKit: _OBJC_METACLASS_$_UIControl
__ UIKit: _OBJC_METACLASS_$_UIDragInteraction
__ UIKit: _OBJC_METACLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIHBClickGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIHBLongClickGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIImageView
__ UIKit: _OBJC_METACLASS_$_UIPanGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIRootSceneWindow
__ UIKit: _OBJC_METACLASS_$_UIRootWindowScenePresentationBinder
__ UIKit: _OBJC_METACLASS_$_UIScreenEdgePanGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIScrollView
__ UIKit: _OBJC_METACLASS_$_UIStatusBarManager
__ UIKit: _OBJC_METACLASS_$_UISystemShellApplication
__ UIKit: _OBJC_METACLASS_$_UITableViewController
__ UIKit: _OBJC_METACLASS_$_UITapGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIWindow
__ UIKit: _OBJC_METACLASS_$_UIWindowScene
__ UIKit: _OBJC_METACLASS_$__UIApplicationInfo
__ UIKit: _OBJC_METACLASS_$__UIBackdropViewSettings
__ UIKit: _OBJC_METACLASS_$__UIHyperrectangle
__ UIKit: _OBJC_METACLASS_$__UIRemoteViewController
__ UIKit: _OBJC_METACLASS_$__UIRootWindow
__ UIKit: _OBJC_METACLASS_$__UISettings
__ UIKit: _UIAccessibilityBoldTextStatusDidChangeNotification
__ UIKit: _UIAccessibilityForceTouchStatusChangedNotification
__ UIKit: _UIAccessibilityIsReduceMotionEnabled
__ UIKit: _UIAccessibilityIsReduceTransparencyEnabled
__ UIKit: _UIAccessibilityIsSwitchControlRunning
__ UIKit: _UIAccessibilityIsVoiceOverRunning
__ UIKit: _UIAccessibilityReduceMotionStatusDidChangeNotification
__ UIKit: _UIAccessibilityReduceTransparencyStatusDidChangeNotification
__ UIKit: _UIAnimationDragCoefficient
__ UIKit: _UIApp
__ UIKit: _UIApplicationCapabilitiesInfoKey
__ UIKit: _UIApplicationDidFinishLaunchingNotification
__ UIKit: _UIApplicationDidReceiveMemoryWarningNotification
__ UIKit: _UIApplicationLaunchOptionsAnnotationKey
__ UIKit: _UIApplicationLaunchOptionsAppLinkOpenStrategyChangedKey
__ UIKit: _UIApplicationLaunchOptionsBrowserReuseTabKey
__ UIKit: _UIApplicationLaunchOptionsSourceApplicationKey
__ UIKit: _UIApplicationLaunchOptionsURLKey
__ UIKit: _UIApplicationLaunchOptionsURLSessionKey
__ UIKit: _UIApplicationMain
__ UIKit: _UIApplicationPreferredUserInterfaceStyleKey
__ UIKit: _UIApplicationSceneDeactivationReasonDescription
__ UIKit: _UIApplicationSceneDeactivationReasonMaskContainsReason
__ UIKit: _UIApplicationStatusBarHeightChangedDurationKey
__ UIKit: _UIApplicationStatusBarHeightChangedNotification
__ UIKit: _UIApplicationTestingNotificationBundleIdKey
__ UIKit: _UIBackgroundModeAudio
__ UIKit: _UIBackgroundModeFetch
__ UIKit: _UIBackgroundModeRemoteNotification
__ UIKit: _UIBackgroundModeVoIP
__ UIKit: _UIContentSizeCategoryAccessibilityMedium
__ UIKit: _UIContentSizeCategoryCompareToCategory
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIDeviceOrientationDidChangeNotification
__ UIKit: _UIDeviceProximityStateDidChangeNotification
__ UIKit: _UIDistanceBetweenPoints
__ UIKit: _UIDraggingSystemSceneUTI
__ UIKit: _UIEdgeInsetsFromApplicationSupportDisplayEdgeInsetsWrapper
__ UIKit: _UIEdgeInsetsMakeWithEdges
__ UIKit: _UIEdgeInsetsSubtract
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFontDescriptorTraitsAttribute
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIFontTextStyleCallout
__ UIKit: _UIFontTextStyleCaption1
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UIFontTextStyleHeadline
__ UIKit: _UIFontTextStyleSubhead
__ UIKit: _UIFontTextStyleSubheadline
__ UIKit: _UIFontTextStyleTitle1
__ UIKit: _UIFontTextStyleTitle3
__ UIKit: _UIFontWeightBold
__ UIKit: _UIFontWeightMedium
__ UIKit: _UIFontWeightRegular
__ UIKit: _UIFontWeightSemibold
__ UIKit: _UIFontWeightTrait
__ UIKit: _UIFormattedPhoneNumberFromString
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetCurrentContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ UIKit: _UIHUDWindowLevel
__ UIKit: _UIImageJPEGRepresentation
__ UIKit: _UIImagePNGRepresentation
__ UIKit: _UIIntegralTransform
__ UIKit: _UIKeyInputEmpty
__ UIKit: _UIKeyInputEscape
__ UIKit: _UIKeyInputLeftArrow
__ UIKit: _UIKeyInputRightArrow
__ UIKit: _UIKeyboardAnimationCurveUserInfoKey
__ UIKit: _UIKeyboardAnimationDurationUserInfoKey
__ UIKit: _UIKeyboardAutomaticFinishRotation
__ UIKit: _UIKeyboardAutomaticIsOnScreen
__ UIKit: _UIKeyboardAutomaticRotateToOrientation
__ UIKit: _UIKeyboardDictationInfoOnScreenNotifyKey
__ UIKit: _UIKeyboardDidHideNotification
__ UIKit: _UIKeyboardDidShowNotification
__ UIKit: _UIKeyboardEndIntersectionHeightIncludingAccessory
__ UIKit: _UIKeyboardForceOrderOutAutomaticAnimated
__ UIKit: _UIKeyboardFrameEndUserInfoKey
__ UIKit: _UIKeyboardOrderOutAutomaticSkippingAnimation
__ UIKit: _UIKeyboardOriginatedFromRotationUserInfoKey
__ UIKit: _UIKeyboardPrivateWillChangeFrameNotification
__ UIKit: _UIKeyboardPrivateWillHideNotification
__ UIKit: _UIKeyboardPrivateWillShowNotification
__ UIKit: _UIKeyboardWillChangeFrameNotification
__ UIKit: _UIKeyboardWillHideNotification
__ UIKit: _UIKeyboardWillShowNotification
__ UIKit: _UILayoutFittingCompressedSize
__ UIKit: _UIRectCenteredAboutPoint
__ UIKit: _UIRectCenteredAboutPointScale
__ UIKit: _UIRectCenteredIntegralRect
__ UIKit: _UIRectCenteredIntegralRectScale
__ UIKit: _UIRectCenteredXInRect
__ UIKit: _UIRectCenteredXInRectScale
__ UIKit: _UIRectCenteredYInRectScale
__ UIKit: _UIRectCornerRadiiZero
__ UIKit: _UIRectFill
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRectInset
__ UIKit: _UIRectIntegralWithScale
__ UIKit: _UIRectIsDiscrete
__ UIKit: _UIRoundToScale
__ UIKit: _UIRoundToViewScale
__ UIKit: _UIScreenshotServicesWindowLevel
__ UIKit: _UIScrollViewDecelerationRateNormal
__ UIKit: _UISizeRoundToScale
__ UIKit: _UISpringBoardLockScreenWindowLevel
__ UIKit: _UIStatusBarDoubleHeight
__ UIKit: _UIStatusBarHeight
__ UIKit: _UIStatusBarLocalizedNotChargingString
__ UIKit: _UIStatusBarLocalizedRecordingStringForAppName
__ UIKit: _UIStatusBarStyleIgnoredOverridesKey
__ UIKit: _UIStatusBarStyleIsDoubleHeight
__ UIKit: _UISystemRootDirectory
__ UIKit: _UITableViewAutomaticDimension
__ UIKit: _UITableViewIndexAppClip
__ UIKit: _UITransitionContextFromViewControllerKey
__ UIKit: _UITransitionContextFromViewKey
__ UIKit: _UITransitionContextToViewControllerKey
__ UIKit: _UITransitionContextToViewKey
__ UIKit: _UIUserInterfaceStyleArbiterStyleChangedNotification
__ UIKit: _UIViewNoIntrinsicMetric
__ UIKit: _UIWhitePointAdaptivityStyleKey
__ UIKit: _UIWindowDidBecomeKeyNotification
__ UIKit: _UIWindowDidBecomeVisibleNotification
__ UIKit: _UIWindowDidMoveToScreenNotification
__ UIKit: _UIWindowDidRotateNotification
__ UIKit: _UIWindowLevelAlert
__ UIKit: _UIWindowLevelNormal
__ UIKit: _UIWindowLevelStatusBar
__ UIKit: _UIWindowNewScreenUserInfoKey
__ UIKit: __UIAccessibilityForceTouchEnabled
__ UIKit: __UIAppActiveInterfaceOrientationDidChangeNotification
__ UIKit: __UIAppActiveInterfaceOrientationRotateAnimatedUserInfoKey
__ UIKit: __UIBackdropViewSettingsStackingLevelDefault
__ UIKit: __UIBackdropViewSettingsStackingLevelHigh
__ UIKit: __UIBackdropViewSettingsStackingLevelLow
__ UIKit: __UICreateCGImageFromIOSurfaceWithOptions
__ UIKit: __UICreateScreenUIImageWithRotation
__ UIKit: __UIDragInteractionDefaultLiftDelay
__ UIKit: __UIInitializeDraggingSystem
__ UIKit: __UIKeyboardInternalWillRotateNotification
__ UIKit: __UILegibilityStrengthMedium
__ UIKit: __UILegibilityStyleFromStatusBarStyle
__ UIKit: __UIMotionEffectsEnabledDidChangeNotification
__ UIKit: __UIRenderingBufferCreate
__ UIKit: __UISceneConnectionOptionsOpenAsDownloadKey
__ UIKit: __UIStatusBarHostedInSpringBoard
__ UIKit: __UIStatusBarManagerWindowSceneComponentKey
__ UIKit: __UIStatusBarPartIdentifierBackNavigation
__ UIKit: __UIStatusBarPartIdentifierCenter
__ UIKit: __UIStatusBarPartIdentifierFittingTrailing
__ UIKit: __UIStatusBarPartIdentifierLeading
__ UIKit: __UIStatusBarPartIdentifierTrailing
__ UIKit: __UIStatusBarStyleFromLegibilityStyle
__ UIKit: __UIStringFromWhitePointAdaptivityStyle
__ UIKit: __UISystemGestureLocationForScrollEventInView
__ UIKit: __UISystemGestureLocationForTouchInView
__ UIKit: __UISystemGestureLocationInView
__ UIKit: __UISystemGesturePreviousLocationForTouchInView
__ UIKit: __UISystemGestureTranslationInView
__ UIKit: __UISystemGestureVelocityInView
__ UIKit: __UIUpdatedVisualStyleAllowed
__ UIKit: __UIWhitePointAdaptivityStyleFromString
__ UIKit: __UIWhitePointAdaptivityStyleKey
__ UIKit: __UIWindowConvertPointFromOrientationToOrientation
__ UIKit: __UIWindowConvertRectFromOrientationToOrientation
__ UIKit: __checkApplicationRestorationState
__ UIKit: __deleteStateRestorationArchiveForApplication
__ UIKit: __interfaceOrientedRegionGivenScreenRegion
__ UIKit: __screenRegionGivenInterfaceOrientedRegion
__ UIKit: _kUIRenderingDestinationGamut
__ UIKitServices: _OBJC_CLASS_$_UISApplicationInitializationContext
__ UIKitServices: _OBJC_CLASS_$_UISApplicationStateService
__ UIKitServices: _OBJC_CLASS_$_UISApplicationSupportDisplayEdgeInfo
__ UIKitServices: _OBJC_CLASS_$_UISApplicationSupportDisplayEdgeInsetsWrapper
__ UIKitServices: _OBJC_CLASS_$_UISApplicationSupportService
__ UIKitServices: _OBJC_CLASS_$_UISDeviceContext
__ UIKitServices: _OBJC_CLASS_$_UISDisplayContext
__ UIKitServices: _OBJC_CLASS_$_UISMutableApplicationInitializationContext
__ UIKitServices: _OBJC_CLASS_$_UISMutableDeviceContext
__ UIKitServices: _OBJC_CLASS_$_UISMutableDisplayContext
__ UIKitServices: _UISDeviceContextDeviceClassKey
__ UIKitServices: _UISDeviceContextDeviceCornerRadiusKey
__ UIKitServices: _UISDeviceContextHomeButtonTypeKey
__ UIKitServices: _UISOpenApplicationOptionAppBasedViewService
__ UIKitServices: _UISOpenApplicationOptionKeySceneSessionPersistentIdentifier
__ UIKitServices: _UISOpenApplicationOptionKeyTargetContentIdentifier
__ UserActivity: _OBJC_CLASS_$_UABestAppSuggestionManager
__ UserActivity: _OBJC_CLASS_$_UAUserActivity
__ UserActivity: _UAUserActivityIsNotificationOptionKey
__ UserManagement: _OBJC_CLASS_$_UMUserManager
__ UserManagement: _OBJC_CLASS_$_UMUserSwitchBlockingTask
__ UserNotifications: _OBJC_CLASS_$_UNMutableNotificationContent
__ UserNotifications: _OBJC_CLASS_$_UNNotification
__ UserNotifications: _OBJC_CLASS_$_UNNotificationRequest
__ UserNotifications: _OBJC_CLASS_$_UNUserNotificationCenter
__ UserNotificationsKit: _NCNotificationActionEnvironmentDefault
__ UserNotificationsKit: _NCRegisterUserNotificationsUILogging
__ UserNotificationsKit: _NCUILogClient
__ UserNotificationsKit: _NCUILogDispatch
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationAction
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationContent
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationOptions
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationRequest
__ UserNotificationsKit: _OBJC_CLASS_$_NCMutableNotificationSound
__ UserNotificationsKit: _OBJC_CLASS_$_NCNotificationAction
__ UserNotificationsKit: _OBJC_CLASS_$_NCNotificationDispatcher
__ UserNotificationsKit: _OBJC_CLASS_$_NCNotificationRequest
__ UserNotificationsServer: _UNSUserNotificationServerRun
__ UserNotificationsUI: _UNAppLaunchOriginContentExtension
__ UserNotificationsUIKit: _NCBulletinDestinationBanner
__ UserNotificationsUIKit: _NCBulletinDestinationCar
__ UserNotificationsUIKit: _NCBulletinDestinationCoverSheet
__ UserNotificationsUIKit: _NCBulletinDestinationLockScreen
__ UserNotificationsUIKit: _NCBulletinDestinationNotificationCenter
__ UserNotificationsUIKit: _NCCarPlayBannerRevocationReasonBackGesture
__ UserNotificationsUIKit: _NCCarPlayBannerRevocationReasonTouchPadSwipeGesture
__ UserNotificationsUIKit: _NCNotificationDestinationIdentifier
__ UserNotificationsUIKit: _NCUserNotificationDragPrivateTypeIdentifier
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCBulletinNotificationSource
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCCarPlayBannerPresentableViewController
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCCarPlayBannerSource
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationBannerAuthority
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationManagementLongLookContentProvider
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationManagementViewPresenter
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationPresentableViewController
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationRequestHiddenPreviewContentProvider
__ UserNotificationsUIKit: _OBJC_CLASS_$_NCNotificationViewController
__ UserNotificationsUIKit: _OBJC_METACLASS_$_NCNotificationPresentableViewController
__ VideoToolbox: _FigCreateIOSurfaceBackedCVPixelBufferWithAttributes
__ VideoToolbox: _VTPixelTransferSessionCreate
__ VideoToolbox: _VTPixelTransferSessionInvalidate
__ VideoToolbox: _VTPixelTransferSessionTransferImage
__ VideoToolbox: _VTSessionSetProperty
__ VideoToolbox: _kVTPixelTransferPropertyKey_AllowLowQualityScaling
__ VoiceServices: _OBJC_CLASS_$_VSCacheUpdateListener
__ VoiceServices: _OBJC_CLASS_$_VSRecognitionSession
__ VoiceServices: _VSPreferencesCopyAvailableLanguageIdentifiers
__ VoiceServices: _VSPreferencesCopySpokenLanguageIdentifier
__ VoiceServices: _VSRecognitionModelCopyResourceURL
__ VoiceServices: _kVSErrorDomain
__ VoiceServices: _kVSPreferencesSpokenLanguageChangedNotification
__ VoiceServices: _kVSRecognitionSessionKeywordsDidChangeNotification
__ Widgets: _OBJC_CLASS_$_WGCarouselListViewController
__ Widgets: _OBJC_CLASS_$_WGMajorListViewController
__ Widgets: _OBJC_CLASS_$_WGWidgetDiscoveryController
__ Widgets: _OBJC_CLASS_$_WGWidgetGroupViewController
__ Widgets: _OBJC_CLASS_$_WGWidgetListHeaderView
__ Widgets: _WGWidgetListEditViewControllerDidDisappearNotification
__ Widgets: _WGWidgetListEditViewControllerWillAppearNotification
__ Widgets: _WGWidgetListSettingsFullCarousel
__ Widgets: _WGWidgetListSettingsTopCarousel
__ Widgets: _WGWidgetViewControllerAddRequestBundleIdentifierKey
__ Widgets: _WGWidgetViewControllerAddRequestNotification
__ WirelessDiagnostics: _AWDPostMetric
__ WirelessDiagnostics: _OBJC_CLASS_$_AWDServerConnection
__ WorkflowUIServices: _OBJC_CLASS_$_WFWidgetOptions
__ WorkflowUIServices: _OBJC_CLASS_$_WFWidgetViewController
__ WorkflowUIServices: _WFCreateShortcutsSmallWidgetConfigurationIntent
__ WorkflowUIServices: _WFCreateShortcutsWidgetConfigurationIntent
__ iOSScreenSharing: _SS_SendStatusBarTapToScreenSharingServer
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDSpringBoardAppBrightness
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDSpringBoardBiometricUnlock
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDSpringBoardClawGesture
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDSpringBoardPressSequence
__ libAWDSupportFramework.dylib: _OBJC_CLASS_$_AWDTuple
__ libAccessibility.dylib: __AXSAssistiveTouchEnabled
__ libAccessibility.dylib: __AXSHandleHomeButtonPressSwallowedForGuidedAccess
__ libAccessibility.dylib: __AXSHandleTripleClickHomeButtonPress
__ libAccessibility.dylib: __AXSHomeButtonAssistant
__ libAccessibility.dylib: __AXSHomeButtonRestingUnlock
__ libAccessibility.dylib: __AXSHomeClickSpeed
__ libAccessibility.dylib: __AXSLockClickDownPressDurationScaleFactor
__ libAccessibility.dylib: __AXSLockClickVarianceScaleFactor
__ libAccessibility.dylib: __AXSPearlAuthenticationHapticsEnabled
__ libAccessibility.dylib: __AXSSideButtonClickSpeed
__ libAccessibility.dylib: __AXSTripleClickCopyOptions
__ libAccessibility.dylib: _kAXSAssistiveTouchEnabledNotification
__ libAccessibility.dylib: _kAXSGuidedAccessStartBlockingEventsInSpringBoard
__ libAccessibility.dylib: _kAXSGuidedAccessStopBlockingEventsInSpringBoard
__ libAccessibility.dylib: _kAXSHomeClickSpeedChangedNotification
__ libAccessibility.dylib: _kAXSRestingHomeButtonUnlockEnabledNotification
__ libAccessibility.dylib: _kAXSSideButtonClickSpeedChangedNotification
__ libAccessibility.dylib: _kAXSTripleHomeEnabledNotification
__ libIOAccessoryManager.dylib: _IOAccessoryManagerConfigurePower
__ libIOReport.dylib: _IOReportChannelGetChannelName
__ libIOReport.dylib: _IOReportCopyChannelsInCategories
__ libIOReport.dylib: _IOReportCreateSamples
__ libIOReport.dylib: _IOReportCreateSubscription
__ libIOReport.dylib: _IOReportIterate
__ libIOReport.dylib: _IOReportStateGetCount
__ libIOReport.dylib: _IOReportStateGetInTransitions
__ libIOReport.dylib: _IOReportStateGetNameForIndex
__ libIOReport.dylib: _IOReportStateGetResidency
__ libMobileGestalt.dylib: _MGCancelNotifications
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGCopyAnswerWithError
__ libMobileGestalt.dylib: _MGCopyMultipleAnswers
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libMobileGestalt.dylib: _MGIsQuestionValid
__ libMobileGestalt.dylib: _MGRegisterForUpdates
__ libSystem.B.dylib: _NDR_record
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___sincosf_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: ___strlcpy_chk
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_source_type_mach_send
__ libSystem.B.dylib: __dispatch_source_type_memorypressure
__ libSystem.B.dylib: __dispatch_source_type_proc
__ libSystem.B.dylib: __dispatch_source_type_timer
__ libSystem.B.dylib: __os_activity_create
__ libSystem.B.dylib: __os_activity_current
__ libSystem.B.dylib: __os_feature_enabled_impl
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: __xpc_event_key_name
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _atan2
__ libSystem.B.dylib: _bootstrap_check_in2
__ libSystem.B.dylib: _bootstrap_look_up
__ libSystem.B.dylib: _bootstrap_port
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _close
__ libSystem.B.dylib: _copyfile
__ libSystem.B.dylib: _dispatch_activate
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_async_and_wait
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_block_cancel
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_block_create_with_qos_class
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_mach_connect
__ libSystem.B.dylib: _dispatch_mach_create
__ libSystem.B.dylib: _dispatch_mach_msg_get_msg
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_autorelease_frequency
__ libSystem.B.dylib: _dispatch_queue_attr_make_with_qos_class
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_queue_create_with_target$V2
__ libSystem.B.dylib: _dispatch_resume
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_source_cancel
__ libSystem.B.dylib: _dispatch_source_create
__ libSystem.B.dylib: _dispatch_source_get_data
__ libSystem.B.dylib: _dispatch_source_set_cancel_handler
__ libSystem.B.dylib: _dispatch_source_set_event_handler
__ libSystem.B.dylib: _dispatch_source_set_timer
__ libSystem.B.dylib: _dispatch_suspend
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dispatch_walltime
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _dyld_program_sdk_at_least
__ libSystem.B.dylib: _exit
__ libSystem.B.dylib: _exp
__ libSystem.B.dylib: _fmod
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _freeaddrinfo
__ libSystem.B.dylib: _getaddrinfo
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _gettimeofday
__ libSystem.B.dylib: _hypot
__ libSystem.B.dylib: _kOSThermalNotificationPressureLevelName
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _kill
__ libSystem.B.dylib: _log
__ libSystem.B.dylib: _mach_absolute_time
__ libSystem.B.dylib: _mach_continuous_time
__ libSystem.B.dylib: _mach_error_string
__ libSystem.B.dylib: _mach_msg
__ libSystem.B.dylib: _mach_msg_destroy
__ libSystem.B.dylib: _mach_port_deallocate
__ libSystem.B.dylib: _mach_port_mod_refs
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _mig_dealloc_reply_port
__ libSystem.B.dylib: _mig_get_reply_port
__ libSystem.B.dylib: _mig_put_reply_port
__ libSystem.B.dylib: _mkdtemp
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_check
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _os_activity_scope_enter
__ libSystem.B.dylib: _os_activity_scope_leave
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_signpost_id_make_with_pointer
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_assert_not_owner
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _os_variant_has_internal_content
__ libSystem.B.dylib: _os_variant_has_internal_diagnostics
__ libSystem.B.dylib: _pid_hibernate
__ libSystem.B.dylib: _pow
__ libSystem.B.dylib: _pthread_getspecific
__ libSystem.B.dylib: _pthread_key_create
__ libSystem.B.dylib: _pthread_mutex_lock
__ libSystem.B.dylib: _pthread_mutex_unlock
__ libSystem.B.dylib: _pthread_once
__ libSystem.B.dylib: _pthread_rwlock_destroy
__ libSystem.B.dylib: _pthread_rwlock_init
__ libSystem.B.dylib: _pthread_rwlock_rdlock
__ libSystem.B.dylib: _pthread_rwlock_unlock
__ libSystem.B.dylib: _pthread_rwlock_wrlock
__ libSystem.B.dylib: _pthread_setspecific
__ libSystem.B.dylib: _realloc
__ libSystem.B.dylib: _sin
__ libSystem.B.dylib: _strcmp
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strncmp
__ libSystem.B.dylib: _strncpy
__ libSystem.B.dylib: _strnlen
__ libSystem.B.dylib: _strstr
__ libSystem.B.dylib: _sysctl
__ libSystem.B.dylib: _sysctlbyname
__ libSystem.B.dylib: _tanh
__ libSystem.B.dylib: _vm_allocate
__ libSystem.B.dylib: _vm_deallocate
__ libSystem.B.dylib: _voucher_mach_msg_set
__ libSystem.B.dylib: _warnc
__ libSystem.B.dylib: _xpc_data_create
__ libSystem.B.dylib: _xpc_data_create_with_dispatch_data
__ libSystem.B.dylib: _xpc_data_get_length
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_get_bool
__ libSystem.B.dylib: _xpc_dictionary_get_int64
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_bool
__ libSystem.B.dylib: _xpc_dictionary_set_int64
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_null_create
__ libSystem.B.dylib: _xpc_transactions_enable
__ libSystem.B.dylib: dyld_stub_binder
__ libapp_launch_measurement.dylib: _alm_app_will_launch_with_details
__ liblockdown.dylib: _kLockdownDeveloperStatusKey
__ liblockdown.dylib: _kLockdownXcodeDomainKey
__ liblockdown.dylib: _lockdown_connect
__ liblockdown.dylib: _lockdown_copy_value
__ liblockdown.dylib: _lockdown_disconnect
__ libnetwork.dylib: _tcp_connection_fallback_watcher_create
__ libnetwork.dylib: _tcp_connection_fallback_watcher_destroy
__ libnetwork.dylib: _tcp_fallback_watcher_fallback_inuse
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_addMethod
__ libobjc.A.dylib: _class_copyMethodList
__ libobjc.A.dylib: _class_getInstanceMethod
__ libobjc.A.dylib: _class_getMethodImplementation
__ libobjc.A.dylib: _imp_implementationWithBlock
__ libobjc.A.dylib: _method_exchangeImplementations
__ libobjc.A.dylib: _method_getDescription
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_allocateClassPair
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyStruct
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_moveWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_registerClassPair
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _object_getClass
__ libobjc.A.dylib: _protocol_copyMethodDescriptionList
__ libobjc.A.dylib: _protocol_copyProtocolList
__ libobjc.A.dylib: _protocol_getMethodDescription
__ libobjc.A.dylib: _sel_isEqual
__ libsp.dylib: _spd_client_session_create
__ libsp.dylib: _spd_client_session_set_callbacks
__ libsp.dylib: _spd_client_session_set_dispatch_queue
__ libsqlite3.dylib: _sqlite3_config
__ libutil.dylib: _tzlink
SBAppDeniedAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBAppDeniedAlertItem dismissOnLock]
  -[SBAppDeniedAlertItem .cxx_destruct]
  -[SBAppDeniedAlertItem shouldShowInLockScreen]
  -[SBAppDeniedAlertItem initWithIcon:]
  -[SBAppDeniedAlertItem configure:requirePasscodeForActions:]


SBRingerVolumeSliderView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIView *backgroundView
 @property  UIView *fillView
 @property  double value

  // instance methods
  -[SBRingerVolumeSliderView backgroundView]
  -[SBRingerVolumeSliderView setBackgroundView:]
  -[SBRingerVolumeSliderView fillView]
  -[SBRingerVolumeSliderView initWithFrame:]
  -[SBRingerVolumeSliderView .cxx_destruct]
  -[SBRingerVolumeSliderView setValue:]
  -[SBRingerVolumeSliderView setFillView:]
  -[SBRingerVolumeSliderView value]
  -[SBRingerVolumeSliderView layoutSubviews]


SBDeviceUnlockAggdLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalEventHandling>
 @property  BOOL observeDashBoardEvents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDeviceUnlockAggdLogger coverSheetIdentifier]
  -[SBDeviceUnlockAggdLogger logDeviceUnlock]
  -[SBDeviceUnlockAggdLogger init]
  -[SBDeviceUnlockAggdLogger conformsToCSEventHandling]
  -[SBDeviceUnlockAggdLogger dealloc]
  -[SBDeviceUnlockAggdLogger _observeDashBoardEvents]
  -[SBDeviceUnlockAggdLogger participantState]
  -[SBDeviceUnlockAggdLogger handleEvent:]
  -[SBDeviceUnlockAggdLogger logOrientationAndAccessoryStateForPrefix:]
  -[SBDeviceUnlockAggdLogger _setObserveDashBoardEvents:]
  -[SBDeviceUnlockAggdLogger logIdleTimerScreenDimWarning]
  -[SBDeviceUnlockAggdLogger logUserResetIdleTimer]
  -[SBDeviceUnlockAggdLogger logDeviceWake]
  -[SBDeviceUnlockAggdLogger wouldHandleButtonEvent:]


SBPearlInterlockObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIBiometricResourceObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPearlInterlockObserver activate]
  -[SBPearlInterlockObserver initWithBiometricResource:]
  -[SBPearlInterlockObserver .cxx_destruct]
  -[SBPearlInterlockObserver biometricResource:observeEvent:]
  -[SBPearlInterlockObserver deactivate]
  -[SBPearlInterlockObserver biometricResource:matchingEnabledDidChange:]
  -[SBPearlInterlockObserver _fire]
  -[SBPearlInterlockObserver _checkForLockout]


SBIconDeleteMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBIconDeleteMetric init]
  -[SBIconDeleteMetric .cxx_destruct]
  -[SBIconDeleteMetric _propertyValuesForTracker]


SBTransientOverlayPresentWorkspaceTransaction : SBMainWorkspaceTransaction <SBUIAnimationControllerObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTransientOverlayPresentWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBTransientOverlayPresentWorkspaceTransaction _willBegin]
  -[SBTransientOverlayPresentWorkspaceTransaction _canBeInterrupted]
  -[SBTransientOverlayPresentWorkspaceTransaction _didComplete]
  -[SBTransientOverlayPresentWorkspaceTransaction initWithTransitionRequest:]
  -[SBTransientOverlayPresentWorkspaceTransaction _begin]
  -[SBTransientOverlayPresentWorkspaceTransaction _willInterruptWithReason:]
  -[SBTransientOverlayPresentWorkspaceTransaction .cxx_destruct]
  -[SBTransientOverlayPresentWorkspaceTransaction _logForInterruptAttemptReason:]
  -[SBTransientOverlayPresentWorkspaceTransaction animationControllerDidFinishAnimation:]
  -[SBTransientOverlayPresentWorkspaceTransaction _performStandardPresentationAnimated:]


SBSystemGestureSwitchMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBSystemGestureSwitchMetric init]
  -[SBSystemGestureSwitchMetric postWithDataBuilder:]


SBLoginAppSceneHoster : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBSceneObserver, SBLoginAppSceneHoster>
 @property  <SBLoginAppSceneHosterDelegate> *delegate
 @property  UIView *contentView
 @property  NSString *hostedAppBundleID
 @property  NSString *hostedSceneIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBApplication *hostedApp
 @property  BOOL deferHIDEvents

  // instance methods
  -[SBLoginAppSceneHoster scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBLoginAppSceneHoster sceneDidInvalidate:]
  -[SBLoginAppSceneHoster init]
  -[SBLoginAppSceneHoster contentView]
  -[SBLoginAppSceneHoster .cxx_destruct]
  -[SBLoginAppSceneHoster _appClientSettingsDiffInspector]
  -[SBLoginAppSceneHoster setDelegate:]
  -[SBLoginAppSceneHoster delegate]
  -[SBLoginAppSceneHoster updateSettingsWithTransitionBlock:]
  -[SBLoginAppSceneHoster hostedApp]
  -[SBLoginAppSceneHoster _updateHIDEventDeferralsIfNecessary]
  -[SBLoginAppSceneHoster hostedAppBundleID]
  -[SBLoginAppSceneHoster launchLoginAppWithCompletion:]
  -[SBLoginAppSceneHoster killLoginApp]
  -[SBLoginAppSceneHoster hostedSceneIdentifier]
  -[SBLoginAppSceneHoster deferHIDEvents]
  -[SBLoginAppSceneHoster setDeferHIDEvents:]


SBLoginAppClientSettingObserverContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  UIApplicationSceneSettings *settings
 @property  SBSUILoginUISceneClientSettings *updatedClientSettings

  // instance methods
  -[SBLoginAppClientSettingObserverContext .cxx_destruct]
  -[SBLoginAppClientSettingObserverContext settings]
  -[SBLoginAppClientSettingObserverContext setUpdatedClientSettings:]
  -[SBLoginAppClientSettingObserverContext updatedClientSettings]
  -[SBLoginAppClientSettingObserverContext setSettings:]


SBAccessibilityMesaUnlockTrigger : SBMesaUnlockTrigger <SBMesaUnlockTriggerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAccessibilityMesaUnlockTrigger screenOff]
  -[SBAccessibilityMesaUnlockTrigger fingerOn]
  -[SBAccessibilityMesaUnlockTrigger .cxx_destruct]
  -[SBAccessibilityMesaUnlockTrigger menuButtonDown]
  -[SBAccessibilityMesaUnlockTrigger mesaUnlockTriggerFired:]
  -[SBAccessibilityMesaUnlockTrigger menuButtonUp]
  -[SBAccessibilityMesaUnlockTrigger significantUserInteractionOccurred]
  -[SBAccessibilityMesaUnlockTrigger bioUnlock]
  -[SBAccessibilityMesaUnlockTrigger fingerOff]
  -[SBAccessibilityMesaUnlockTrigger initWithUnlockBehaviorConfigurationDelegate:baseTrigger:]


SBReachabilityManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemGestureRecognizerDelegate, SBHomeGestureParticipantDelegate>
 @property  BOOL reachabilityModeActive
 @property  BOOL reachabilityEnabled
 @property  SBReachabilityGestureRecognizer *reachabilityGestureRecognizer
 @property  SBScreenEdgePanGestureRecognizer *dismissEdgeGestureRecognizer
 @property  UIPanGestureRecognizer *dismissPanGestureRecognizer
 @property  double reachabilityYOffset
 @property  double effectiveReachabilityYOffset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBReachabilityManager sharedInstance]
  +[SBReachabilityManager reachabilitySupported]

  // instance methods
  -[SBReachabilityManager setReachabilityEnabled:]
  -[SBReachabilityManager reachabilityEnabled]
  -[SBReachabilityManager homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBReachabilityManager viewForSystemGestureRecognizer:]
  -[SBReachabilityManager init]
  -[SBReachabilityManager dealloc]
  -[SBReachabilityManager dismissPanGestureRecognizer]
  -[SBReachabilityManager .cxx_destruct]
  -[SBReachabilityManager deactivateReachability]
  -[SBReachabilityManager gestureRecognizerShouldBegin:]
  -[SBReachabilityManager removeObserver:]
  -[SBReachabilityManager toggleReachability]
  -[SBReachabilityManager gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBReachabilityManager _setupGestureRecognizers]
  -[SBReachabilityManager addObserver:]
  -[SBReachabilityManager _screenDidDim]
  -[SBReachabilityManager gestureRecognizer:shouldReceiveTouch:]
  -[SBReachabilityManager effectiveReachabilityYOffset]
  -[SBReachabilityManager _handleSignificantTimeChanged]
  -[SBReachabilityManager canActivateReachability]
  -[SBReachabilityManager _toggleReachabilityMode]
  -[SBReachabilityManager _updateReachabilityModeActive:]
  -[SBReachabilityManager _modifyDefaultPresentationContextHostTransformForWindow:fromTransform:toTransform:]
  -[SBReachabilityManager _updateReachabilityModeActive:animated:]
  -[SBReachabilityManager _setKeepAliveTimer]
  -[SBReachabilityManager _setupReachabilityWindowIfNecessary]
  -[SBReachabilityManager reachabilityYOffset]
  -[SBReachabilityManager _tearDownReachabilityWindow]
  -[SBReachabilityManager _updateReachabilityWindowForYOffset:mode:completion:]
  -[SBReachabilityManager _notifyObserversReachabilityModeActive:]
  -[SBReachabilityManager _pingKeepAliveWithDuration:interactedBeforePing:initialKeepAliveTime:]
  -[SBReachabilityManager _activateReachability:]
  -[SBReachabilityManager _panToDeactivateReachability:]
  -[SBReachabilityManager _tapToDeactivateReachability:]
  -[SBReachabilityManager _sceneForWindow:]
  -[SBReachabilityManager _transitionWithTransformer:fromTransform:toTransform:]
  -[SBReachabilityManager _notifyObserversWillBeginReachabilityAnimation]
  -[SBReachabilityManager ignoredWindows]
  -[SBReachabilityManager _notifyObserversReachabilityYOffsetDidChange]
  -[SBReachabilityManager _notifyObserversDidEndReachabilityAnimation]
  -[SBReachabilityManager setReachabilityTemporarilyDisabled:forReason:]
  -[SBReachabilityManager ignoreWindowForReachability:]
  -[SBReachabilityManager reachabilityGestureRecognizer]
  -[SBReachabilityManager reachabilityModeActive]
  -[SBReachabilityManager dismissEdgeGestureRecognizer]


SBApplicationStateServiceDelegate : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UISApplicationStateServiceDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationStateServiceDelegate dataSourceForApplicationBundleIdentifier:]


SBApplicationStateServiceSingleton : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBApplicationStateServiceSingleton startService]


SBPowerDownViewController : SBTransientOverlayViewController <SBPowerDownViewDelegate>
 @property  <SBPowerDownViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPowerDownViewController viewDidLoad]
  -[SBPowerDownViewController handleLockButtonPress]
  -[SBPowerDownViewController idleTimerMode]
  -[SBPowerDownViewController powerDownViewAnimateOutCompleted:]
  -[SBPowerDownViewController powerDownViewWillAnimateIn:]
  -[SBPowerDownViewController powerDownViewWillAnimateOut:]
  -[SBPowerDownViewController powerDownViewRequestPowerDown:]
  -[SBPowerDownViewController powerDownViewRequestCancel:]
  -[SBPowerDownViewController shouldDisableControlCenter]
  -[SBPowerDownViewController .cxx_destruct]
  -[SBPowerDownViewController _preferredStatusBarVisibility]
  -[SBPowerDownViewController shouldDisableSiri]
  -[SBPowerDownViewController viewWillAppear:]
  -[SBPowerDownViewController _canShowWhileLocked]
  -[SBPowerDownViewController setDelegate:]
  -[SBPowerDownViewController viewDidDisappear:]
  -[SBPowerDownViewController viewWillDisappear:]
  -[SBPowerDownViewController viewDidLayoutSubviews]
  -[SBPowerDownViewController delegate]
  -[SBPowerDownViewController _beginTimeTracking]
  -[SBPowerDownViewController _incrementCountForKey:]
  -[SBPowerDownViewController _endTimeTrackingIncludingReportWithKey:]
  -[SBPowerDownViewController _resetScreenBrightness]
  -[SBPowerDownViewController powerDownViewDidBeginSlide:]
  -[SBPowerDownViewController powerDownView:didUpdateSlideWithValue:]
  -[SBPowerDownViewController powerDownViewDidCompleteSlide:]
  -[SBPowerDownViewController powerDownViewDidCancelSlide:]
  -[SBPowerDownViewController powerDownViewDidReceiveCancelButtonAction:]
  -[SBPowerDownViewController powerDownViewDidFireIdleTimer:]
  -[SBPowerDownViewController allowsStackingOverlayContentAbove]
  -[SBPowerDownViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBPowerDownViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBPowerDownViewController shouldDisableBanners]
  -[SBPowerDownViewController shouldPendAlertItems]


SBAccountStoreManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  ACAccount *primaryAppleAccount
 @property  ACAccountStore *accountStore

  // instance methods
  -[SBAccountStoreManager _accountStoreDidChange:]
  -[SBAccountStoreManager init]
  -[SBAccountStoreManager .cxx_destruct]
  -[SBAccountStoreManager accountStore]
  -[SBAccountStoreManager setPrimaryAppleAccount:]
  -[SBAccountStoreManager primaryAppleAccount]
  -[SBAccountStoreManager _queue_updatePrimaryAppleAccountAndNotify:]
  -[SBAccountStoreManager _updatePrimaryAppleAccount]


SBHomeGestureDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBHomeGestureDomain domainName]
  +[SBHomeGestureDomain rootSettings]
  +[SBHomeGestureDomain rootSettingsClass]
  +[SBHomeGestureDomain domainGroupName]


SBHomeToSwitcherSwitcherModifier : SBTransitionSwitcherModifier
 @property  long long direction
 @property  SBSwitcherModifier *multitaskingModifier

  // instance methods
  -[SBHomeToSwitcherSwitcherModifier containerStatusBarAnimationDuration]
  -[SBHomeToSwitcherSwitcherModifier direction]
  -[SBHomeToSwitcherSwitcherModifier .cxx_destruct]
  -[SBHomeToSwitcherSwitcherModifier transitionWillBegin]
  -[SBHomeToSwitcherSwitcherModifier transitionWillUpdate]
  -[SBHomeToSwitcherSwitcherModifier handleTimerEvent:]
  -[SBHomeToSwitcherSwitcherModifier appLayoutToScrollToDuringTransition]
  -[SBHomeToSwitcherSwitcherModifier _dismissForEmptySwitcherResponseName]
  -[SBHomeToSwitcherSwitcherModifier initWithTransitionID:direction:multitaskingModifier:]
  -[SBHomeToSwitcherSwitcherModifier isEffectivelyHome]
  -[SBHomeToSwitcherSwitcherModifier multitaskingModifier]


SBSpotlightCrossblurToFullscreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier homeScreenBackdropBlurType]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier visibleAppLayouts]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier homeScreenAlpha]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier scaleForIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier isHomeScreenContentRequired]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier topMostLayoutElements]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier isSwitcherWindowVisible]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier wallpaperStyle]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier cardCornerRadiiForIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier opacityForIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier _layoutSettings]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier frameForIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier .cxx_destruct]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier homeScreenScale]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier transitionWillBegin]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier _isToAppLayoutAtIndex:]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier _opacitySettings]
  -[SBSpotlightCrossblurToFullscreenSwitcherModifier initWithTransitionID:toAppLayout:]


SBAppSwitcherPageShadowView : SBFView /usr/lib/libutil.dylib <PTSettingsKeyObserver>
 @property  UIView *_diffuseShadowView
 @property  UIView *_rimShadowView
 @property  double switcherCardScale
 @property  long long style
 @property  unsigned long highlightType
 @property  double shadowOffset
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherPageShadowView setShadowOffset:]
  -[SBAppSwitcherPageShadowView initWithFrame:style:]
  -[SBAppSwitcherPageShadowView shadowOffset]
  -[SBAppSwitcherPageShadowView settings:changedValueForKey:]
  -[SBAppSwitcherPageShadowView _updateShadowParameters]
  -[SBAppSwitcherPageShadowView _setContinuousCornerRadius:]
  -[SBAppSwitcherPageShadowView switcherCardScale]
  -[SBAppSwitcherPageShadowView setHighlightType:]
  -[SBAppSwitcherPageShadowView .cxx_destruct]
  -[SBAppSwitcherPageShadowView _diffuseShadowView]
  -[SBAppSwitcherPageShadowView highlightType]
  -[SBAppSwitcherPageShadowView _updateShadowViews]
  -[SBAppSwitcherPageShadowView traitCollectionDidChange:]
  -[SBAppSwitcherPageShadowView _rimShadowView]
  -[SBAppSwitcherPageShadowView _applyPrototypeSettingsToConstants]
  -[SBAppSwitcherPageShadowView setStyle:]
  -[SBAppSwitcherPageShadowView style]
  -[SBAppSwitcherPageShadowView setSwitcherCardScale:]


SBDashBoardPluginViewController : CSCoverSheetViewControllerBase /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome <SBLockScreenPluginDelegate>
 @property  SBLockScreenPlugin *plugin
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDashBoardPluginViewController viewClass]

  // instance methods
  -[SBDashBoardPluginViewController presentationPriority]
  -[SBDashBoardPluginViewController viewDidLoad]
  -[SBDashBoardPluginViewController coverSheetIdentifier]
  -[SBDashBoardPluginViewController displayLayoutElementIdentifier]
  -[SBDashBoardPluginViewController presentationStyle]
  -[SBDashBoardPluginViewController aggregateBehavior:]
  -[SBDashBoardPluginViewController aggregateAppearance:]
  -[SBDashBoardPluginViewController presentationType]
  -[SBDashBoardPluginViewController .cxx_destruct]
  -[SBDashBoardPluginViewController succinctDescriptionBuilder]
  -[SBDashBoardPluginViewController plugin]
  -[SBDashBoardPluginViewController view]
  -[SBDashBoardPluginViewController updateForPresentation:]
  -[SBDashBoardPluginViewController handleEvent:]
  -[SBDashBoardPluginViewController presentationTransition]
  -[SBDashBoardPluginViewController _updateLegibility]
  -[SBDashBoardPluginViewController viewWillAppear:]
  -[SBDashBoardPluginViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBDashBoardPluginViewController viewDidDisappear:]
  -[SBDashBoardPluginViewController performCustomTransitionToVisible:withAnimationSettings:completion:]
  -[SBDashBoardPluginViewController willTransitionToPresented:]
  -[SBDashBoardPluginViewController _presentationPriority]
  -[SBDashBoardPluginViewController pluginAppearanceDidChange:]
  -[SBDashBoardPluginViewController initWithLockScreenPlugin:]


SpringBoard : UISystemShellApplication /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <MCProfileConnectionObserver, RSPeerToPeerConnectionControllerDataSource, SBRestartManagerDelegate, SBModalAlertPresentationCoordinatorDelegate, UIStatusBarStyleDelegate_SpringBoardOnly, SSScreenCapturerDelegate, SBBacklightControllerObserver, SBInteractiveScreenshotGestureManagerDelegate, SBRemoteTransientOverlaySessionManagerDelegate, SBSpotlightTransientOverlayViewControllerDelegate, _UIApplicationInitializationContextFactory, SBAVSystemControllerCacheObserver, UIApplicationDelegate, SBIdleTimerProviding>
 @property  NSMutableArray *nowLocatingApps
 @property  <SBIdleTimer> *idleTimer
 @property  NSTimer *daylightSavingsTimer
 @property  int nowPlayingProcessPID
 @property  BOOL batterySaverModeActive
 @property  SBCombinationHardwareButton *combinationHardwareButton
 @property  RSPeerToPeerServerController *stateDumpServerController
 @property  BOOL hasFinishedLaunching
 @property  BOOL typingActive
 @property  double bottomEdgeAmbiguousActivationMargin
 @property  <SBUIUserAgent> *pluginUserAgent
 @property  SBApplication *leastRecentlyForegroundLocatingApp
 @property  SBUserSessionController *userSessionController
 @property  SBHomeHardwareButton *homeHardwareButton
 @property  SBLockHardwareButton *lockHardwareButton
 @property  SBVolumeHardwareButton *volumeHardwareButton
 @property  SBCameraHardwareButton *cameraHardwareButton
 @property  <SBFLockOutStatusProvider> *lockOutController
 @property  SBFUserAuthenticationController *authenticationController
 @property  SBScreenshotManager *screenshotManager
 @property  SBNCNotificationDispatcher *notificationDispatcher
 @property  SBBannerManager *bannerManager
 @property  SBWidgetController *widgetController
 @property  SBAvocadoDebuggingController *avocadoController
 @property  SBRestartManager *restartManager
 @property  SBModalAlertPresentationCoordinator *modalAlertPresentationCoordinator
 @property  SBAccountStoreManager *accountStoreController
 @property  NSArray *appsRegisteredForVolumeEvents
 @property  NSArray *appsRegisteredForLockButtonEvents
 @property  SBLockScreenService *lockScreenService
 @property  SBApplicationAutoLaunchService *applicationAutoLaunchService
 @property  SBApplicationLaunchAlertService *applicationLaunchAlertService
 @property  SBIdleTimerPolicyAggregator *idleTimerPolicyAggregator
 @property  SBInteractiveScreenshotGestureManager *interactiveScreenshotGestureManager
 @property  SBProximitySensorManager *proximitySensorManager
 @property  SBMainDisplayInterfaceOrientationAggregator *orientationAggregator
 @property  SBSoftwareUpdatePasscodePolicyManager *softwareUpdatePasscodePolicyManager
 @property  STStatusServer *systemStatusServer
 @property  STDynamicActivityAttributionManager *dynamicAttributionManager
 @property  STTelephonyStateProvider *telephonyStateProvider
 @property  SBSensorActivityDataProvider *sensorActivityDataProvider
 @property  SBRecordingIndicatorManager *recordingIndicatorManager
 @property  SBSystemPointerInteractionManager *systemPointerInteractionManager
 @property  SBLockedPointerManager *lockedPointerManager
 @property  SBWebClipService *webClipService
 @property  SBAppClipOverlayCoordinator *appClipOverlayCoordinator
 @property  int ringerSwitchState
 @property  SBRemoteTransientOverlaySessionManager *remoteTransientOverlaySessionManager
 @property  BOOL wantsOrientationEvents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIWindow *window

  // class methods
  +[SpringBoard _newApplicationInitializationContext]
  +[SpringBoard initializeSystemServicesBeforeApplicationDidFinishLaunching]
  +[SpringBoard _defaultSceneIdentity]

  // instance methods
  -[SpringBoard userSessionController]
  -[SpringBoard setNowPlayingProcessPID:]
  -[SpringBoard inCallApp]
  -[SpringBoard sensorActivityDataProvider]
  -[SpringBoard isBatterySaverModeActive]
  -[SpringBoard localeChanged]
  -[SpringBoard bannerManager]
  -[SpringBoard _handlePhysicalButtonEvent:]
  -[SpringBoard startupInterfaceOrientation]
  -[SpringBoard _handleKeyUIEvent:]
  -[SpringBoard runTest:options:]
  -[SpringBoard modalAlertPresentationCoordinator]
  -[SpringBoard setBatterySaverModeActive:]
  -[SpringBoard rawDeviceOrientationIgnoringOrientationLocks]
  -[SpringBoard _runAppSearchDismiss]
  -[SpringBoard _setupMainWorkspaceForMedusaTestWithOptions:completion:]
  -[SpringBoard _shouldSwallowHIDEvent:]
  -[SpringBoard activeInterfaceOrientation]
  -[SpringBoard _defaultExpirationComponents]
  -[SpringBoard canOpenURL:]
  -[SpringBoard _runNotificationCoalescingRestackingFromBottomTestWithOptions:]
  -[SpringBoard expectsFaceContact]
  -[SpringBoard _batterySaverModeChanged:]
  -[SpringBoard _startAutoPiPWithGesture:setupCompletion:finalCompletion:]
  -[SpringBoard _broadcastStateCaptureToConnectedRemotePeers:]
  -[SpringBoard _performPanGestureAwayFromUserInterfaceLayoutDirectionOnScreenWithDuration:completion:]
  -[SpringBoard _significantTimeChangeNotificationReceived]
  -[SpringBoard _runAppSwitcherDismissTestOverApp:rotated:completion:]
  -[SpringBoard _runDeweyPullToLibrarySearchWithCompletion:]
  -[SpringBoard handleStatusBarHoverActionForRegion:]
  -[SpringBoard _runTodayViewFocusSearchFieldToSpotlight]
  -[SpringBoard _midnightPassed]
  -[SpringBoard resetIdleTimerAndUndim]
  -[SpringBoard _runNotificationCoalescingExpandingScrollingTestWithOptions:]
  -[SpringBoard _daylightSavingsTimeChanged]
  -[SpringBoard _smartCoverDidOpen:]
  -[SpringBoard noteInterfaceOrientationChanged:force:logMessage:]
  -[SpringBoard _applicationOpenURL:withApplication:animating:activationSettings:origin:withResult:]
  -[SpringBoard _keyboardOrCaseLatchWantsToAttemptUnlock:]
  -[SpringBoard _leadingNotificationRequest]
  -[SpringBoard _prepareToRunAutoPiPTestWithCompletion:]
  -[SpringBoard handleDoubleHeightStatusBarTapWithStyleOverride:]
  -[SpringBoard updateMirroredDisplayOrientationWithLogMessage:]
  -[SpringBoard widgetController]
  -[SpringBoard proximitySensorManager]
  -[SpringBoard setNowLocatingApps:]
  -[SpringBoard cache:didUpdateActiveAudioRoute:]
  -[SpringBoard _cleanUpLaunchTestState]
  -[SpringBoard menuButtonInterceptApp]
  -[SpringBoard init]
  -[SpringBoard launchedForUserTransition]
  -[SpringBoard _headsetButtonDown:]
  -[SpringBoard _returnToHomescreenWithCompletion:]
  -[SpringBoard removeInCallApp]
  -[SpringBoard _runArcSwipeMultipleAppsTest]
  -[SpringBoard _startBulletinBoardServer]
  -[SpringBoard _toggleFloatingDockVisibility:]
  -[SpringBoard _setupKeyboardAnimationSubTestsForTestName:]
  -[SpringBoard _disableRemoteStateDumpWithCompletion:]
  -[SpringBoard underMemoryPressure]
  -[SpringBoard noteCaseHardwarePresent]
  -[SpringBoard setMenuButtonInterceptApp:forever:]
  -[SpringBoard _runDashBoardRotateTodayViewPage]
  -[SpringBoard _updateOrientationDetectionSettings]
  -[SpringBoard _frontMostAppOrientation]
  -[SpringBoard _runAppSwitcherBringupTestOverApp:rotated:completion:]
  -[SpringBoard launchMusicPlayerSuspended]
  -[SpringBoard _performSwipeHomeWithComposer:]
  -[SpringBoard _accessibilityTopDisplay]
  -[SpringBoard activeInterfaceOrientationWithoutConsideringTransientOverlays]
  -[SpringBoard _runHomeScreenSwipeRightFromTodayView]
  -[SpringBoard isLocked]
  -[SpringBoard _runAutoPiPWithGestureTest:]
  -[SpringBoard idleTimer]
  -[SpringBoard _postSpringBoardSignificantTimeChangedNotificationWithLogMessage:]
  -[SpringBoard _pullDownToSpotlightForView:offset:duration:completion:]
  -[SpringBoard _handleHIDEvent:]
  -[SpringBoard backlightController:willAnimateBacklightToFactor:source:]
  -[SpringBoard _runDashBoardRotateMainPage]
  -[SpringBoard _rotateFromPortrait:toLandscape:andFromLandscape:andBackToPortrait:]
  -[SpringBoard _localeChanged]
  -[SpringBoard _runPresentContinuityBannerInSwitcherTestWithCompletion:]
  -[SpringBoard _performRestackingExpandedBundleForNotificationRequest:withCompletion:]
  -[SpringBoard setStateDumpServerController:]
  -[SpringBoard pushTransientActiveInterfaceOrientation:forReason:]
  -[SpringBoard _shouldPendAlertsForTest:]
  -[SpringBoard removeActiveOrientationObserver:]
  -[SpringBoard lockedPointerManager]
  -[SpringBoard appsRegisteredForLockButtonEvents]
  -[SpringBoard _retryLaunchTestWithOptions:]
  -[SpringBoard ringerSwitchState]
  -[SpringBoard runHomeScreenRotationIterationWithRemainingIterations:completionHandler:]
  -[SpringBoard _enableRemoteStateDumpWithTimeout:withCompletion:]
  -[SpringBoard _runSpotlightTodayViewRotation]
  -[SpringBoard _runHomeScreenIconPullToSpotlightDismiss]
  -[SpringBoard _accessibilityDeactivationAnimationStartDelay]
  -[SpringBoard _runMedusaPinFloatingApplicationTest:withOptions:]
  -[SpringBoard daylightSavingsTimer]
  -[SpringBoard notificationDispatcher]
  -[SpringBoard _performAfterDelay:block:]
  -[SpringBoard handleDeferredUILockForInCallPresentation]
  -[SpringBoard runHomeScreenRotationTest:]
  -[SpringBoard recordingIndicatorManager]
  -[SpringBoard _uninstallModelForTestsAndRestoreAppLayouts:]
  -[SpringBoard _runSwipeAndPauseForSwitcherTestFromHomeScreen:completion:]
  -[SpringBoard _takeScreenshotWithOptionsCollection:presentationOptions:]
  -[SpringBoard noteBacklightLevelChanged]
  -[SpringBoard _preheatScreenshotsWithPresentationOptions:]
  -[SpringBoard _runScrunchAndSwipeTest]
  -[SpringBoard _handleSnapshotButtonHIDEvent:buttonIsDown:fromSource:]
  -[SpringBoard _runSwipeToHomeTestWithCompletion:]
  -[SpringBoard isKeybagRefetchTransactionActive]
  -[SpringBoard removeNowLocatingApp:]
  -[SpringBoard _performMultiFingerDragWithComposer:startLocations:endLocations:touchCount:duration:timingFunction:startWithTouchDown:intermediateTransformer:completion:]
  -[SpringBoard spotlightTransientOverlayViewControllerDidPresent:]
  -[SpringBoard _isRemoteStateDumpEnabled]
  -[SpringBoard _runSwipeAndPauseForSwitcherOverFolderTest]
  -[SpringBoard runFolderRotationTest:]
  -[SpringBoard _performDelayedHeadsetClickTimeout]
  -[SpringBoard isTypingActive]
  -[SpringBoard setUpDaylightSavingsTimer]
  -[SpringBoard coordinatorRequestedIdleTimerBehavior:]
  -[SpringBoard _accessibilityActivationAnimationStartDelay]
  -[SpringBoard _runScrollIconListTestEditing:withFolders:withWidgets:]
  -[SpringBoard formattedDecimalStringForNumber:]
  -[SpringBoard noteInterfaceOrientationChanged:duration:updateMirroredDisplays:logMessage:]
  -[SpringBoard willDisplayMiniAlert]
  -[SpringBoard beginIgnoringInteractionEvents]
  -[SpringBoard significantTimeChange]
  -[SpringBoard _runDashBoardDismissTestFromPageIndex:showPasscodeView:]
  -[SpringBoard nowLocatingApps]
  -[SpringBoard _accessibilityFrontMostApplication]
  -[SpringBoard _screenshotWindowWasDismissed]
  -[SpringBoard _runToggleSearchTest]
  -[SpringBoard _performNotificationPublishingWithCount:uniqueThreadCount:withCompletion:]
  -[SpringBoard _enqueueWorkspaceEvent:withName:ifSatisfiesCondition:cancelingEventsWithNames:failureBlock:]
  -[SpringBoard _runTapContinuityBannerInSwitcherTestWithCompletion:]
  -[SpringBoard .cxx_destruct]
  -[SpringBoard _windowForSystemAppButtonEventsForScreen:]
  -[SpringBoard _singleHomeButtonPressEventStream]
  -[SpringBoard _beginRequiringSpotlightTransientOverlayForReason:]
  -[SpringBoard _runBottomEdgeSwipeMultipleAppsTest]
  -[SpringBoard applicationOpenURL:withApplication:animating:activationSettings:origin:notifyLSOnFailure:withResult:]
  -[SpringBoard unregisterRemoteAlertSceneViewProvider:]
  -[SpringBoard _setDeferredHeadsetButtonDownEvent:]
  -[SpringBoard noteInterfaceOrientationChanged:logMessage:]
  -[SpringBoard _runCoverSheetNotificationListHistoryRevealTest]
  -[SpringBoard beginInteractiveSpotlightTransientOverlayPresentationWithValidator:beginHandler:]
  -[SpringBoard _frontBoardWantsKeyboardSceneLayerOrderedIntoScene]
  -[SpringBoard _resetHomeScreenToPageIndex:animated:completion:]
  -[SpringBoard _interfaceOrientationForRawOrientation:validOrientation:ignoringHomeScreenRotationStyle:]
  -[SpringBoard rotateIfNeeded:completion:]
  -[SpringBoard setNowPlayingInfo:forProcessWithPID:]
  -[SpringBoard noteBacklightFadeFinished]
  -[SpringBoard _smartCoverDidClose:]
  -[SpringBoard shouldNeverLock]
  -[SpringBoard _rotateView:toOrientation:]
  -[SpringBoard _accessibilityShouldAllowIconLaunch]
  -[SpringBoard _runMedusaSplitViewSuspendTest:withOptions:]
  -[SpringBoard interactiveScreenshotGestureManager]
  -[SpringBoard _basicRotationTestForCurrentConfigurationWithTeardown:]
  -[SpringBoard handleDeferredUILockForInCallPresentationAnimateIfNeeded:inCallPresentationActive:]
  -[SpringBoard _performPanWithComposer:startLocation:endLocation:duration:]
  -[SpringBoard _simulateHomeButtonPress]
  -[SpringBoard _currentNonFlatDeviceOrientation]
  -[SpringBoard _runSwipeToDeweyTestWithCompletion:]
  -[SpringBoard _runMedusaSplitViewResizeTest:withOptions:]
  -[SpringBoard disablesFrontBoardImplicitWindowScenes]
  -[SpringBoard systemPointerInteractionManager]
  -[SpringBoard _resetToHomeScreen]
  -[SpringBoard setBottomEdgeAmbiguousActivationMargin:]
  -[SpringBoard remoteTransientOverlaySessionManager:performPresentationRequest:forSession:]
  -[SpringBoard _dashBoardControllerForTesting]
  -[SpringBoard restartManager:willRestartWithTransitionRequest:]
  -[SpringBoard _removeAllFakeNotifications]
  -[SpringBoard _runScrunchToHomeTest]
  -[SpringBoard allowCaseLatchLockAndUnlock]
  -[SpringBoard _forceRotateToOrientation:withCompletion:]
  -[SpringBoard _hasForegroundAppWithPID:]
  -[SpringBoard leastRecentlyForegroundLocatingApp]
  -[SpringBoard _performExpandingCoalescedBundleForNotificationRequest:withCompletion:]
  -[SpringBoard _accessibilityObjectWithinProximity]
  -[SpringBoard telephonyStateProvider]
  -[SpringBoard allowedRemotePeerDisplayNames]
  -[SpringBoard updateNativeOrientationAnimated:logMessage:]
  -[SpringBoard batteryStatusDidChange:]
  -[SpringBoard _nowPlayingAppDidChangeNotification:]
  -[SpringBoard modalAlertPresentationCoordinator:didChangeShowingSystemModalAlert:]
  -[SpringBoard _initializeDeferredItems]
  -[SpringBoard _settingLanguageStringForNewLanguage]
  -[SpringBoard isCurrentlyDeferringOrientationUpdates]
  -[SpringBoard noteMainTransientOverlayPresentationManagerWillChangeToInterfaceOrientation:]
  -[SpringBoard _handleStatusBarHoverActionForRegion:]
  -[SpringBoard _runSwipeFromDeweyTestWithCompletion:]
  -[SpringBoard _accessibilityRunningApplications]
  -[SpringBoard remoteTransientOverlaySessionManager]
  -[SpringBoard isSpringBoardStatusBarHidden]
  -[SpringBoard startResumeTestNamed:options:]
  -[SpringBoard setHasFinishedLaunching:]
  -[SpringBoard _dumpStateCaptureData]
  -[SpringBoard _accessibilitySystemGesturesDisabledByAccessibility]
  -[SpringBoard _runSwipeToHomeOverFolderTest]
  -[SpringBoard modalAlertPresentationCoordinatorRequestedForegroundScenes:]
  -[SpringBoard _applicationToUseForScrollTesting]
  -[SpringBoard homeScreenRotationStyle]
  -[SpringBoard nowPlayingProcessPID]
  -[SpringBoard _runTodayViewPullDownToSpotlight]
  -[SpringBoard homeScreenSupportsRotation]
  -[SpringBoard expectsFaceContactInLandscape]
  -[SpringBoard _dashBoardTodayControllerForTestingIfExists]
  -[SpringBoard _removeRecordingStatusBarStyleOverrideAssertion]
  -[SpringBoard _medusaTestWithName:testOptions:]
  -[SpringBoard applicationDidFinishLaunching:]
  -[SpringBoard finishedTest:extraResults:waitForNotification:withTeardownBlock:]
  -[SpringBoard setWantsOrientationEvents:logMessage:]
  -[SpringBoard deviceOrientationForDeferredUpdateIfAny]
  -[SpringBoard _statusBarOrientationFollowsWindow:]
  -[SpringBoard _runScrunchAndSwipeMultipleAppsTest]
  -[SpringBoard screenCapturer:didCaptureScreenshotsOfScreens:]
  -[SpringBoard _takeScreenshotAndEdit:]
  -[SpringBoard _continueRunningScrollAppSwitcherTest:runColdTest:completion:]
  -[SpringBoard _runDashBoardPresentDismissPasscode]
  -[SpringBoard _logReliabilityInfoForEvent:source:]
  -[SpringBoard _runSpotlightCoverSheetTodayViewRotation]
  -[SpringBoard dynamicAttributionManager]
  -[SpringBoard lockOutController]
  -[SpringBoard isNowPlayingAppPlaying]
  -[SpringBoard _testOrientation:options:]
  -[SpringBoard _prepareToRunSwitcherGestureTestsWithForegroundApp:shouldStartTest:withCompletion:]
  -[SpringBoard _runSpotlightPulldownRotation]
  -[SpringBoard applicationLaunchAlertService]
  -[SpringBoard _accessibilityShouldAllowAppLaunch]
  -[SpringBoard canShowLockScreenCameraGrabber]
  -[SpringBoard _startScrollAppSwitcherTest:overApp:runColdTest:completion:]
  -[SpringBoard removeDisableActiveInterfaceOrientationChangeAssertion:nudgeOrientationIfRemovingLast:]
  -[SpringBoard _updateRecordingPIDFromActivities:]
  -[SpringBoard popTransientActiveInterfaceOrientationForReason:]
  -[SpringBoard _accessibilityIsSystemGestureActive]
  -[SpringBoard _performDeferredLaunchWork]
  -[SpringBoard deviceOrientationUpdateDeferralAssertionWithReason:]
  -[SpringBoard smartCoverIsClosed]
  -[SpringBoard localPeerDisplayName]
  -[SpringBoard profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:]
  -[SpringBoard addNowLocatingApp:]
  -[SpringBoard _resetForceRotate]
  -[SpringBoard __performPanGesturesOnScreenFromPage:toPage:completion:]
  -[SpringBoard _handleGotoHomeScreenShortcut:]
  -[SpringBoard _handleStandardFunctionKeyActionWithPreferencesURLString:modifiers:block:]
  -[SpringBoard lockHardwareButton]
  -[SpringBoard setExpectsFaceContact:inLandscape:]
  -[SpringBoard _accessibilitySetSystemGesturesDisabledByAccessibility:]
  -[SpringBoard toggleSearchFromBreadcrumbSource:withWillBeginHandler:completionHandler:]
  -[SpringBoard _caseLatchWantsToAttemptLock]
  -[SpringBoard updateNativeOrientationWithOrientation:logMessage:]
  -[SpringBoard addDisableActiveInterfaceOrientationChangeAssertion:]
  -[SpringBoard accountStoreController]
  -[SpringBoard handleLockButtonPressFromTransientOverlayViewController:]
  -[SpringBoard _handleShutDownAndReboot]
  -[SpringBoard interfaceOrientationForRawOrientation:validOrientation:ignoringHomeScreenRotationStyle:]
  -[SpringBoard startedTest:]
  -[SpringBoard registerAnalyticsEventHandlers]
  -[SpringBoard _unlockAnimationDidFinish:]
  -[SpringBoard handleKeyHIDEvent:]
  -[SpringBoard _runDashboardTodayViewScrollWidgetsTestWithOptions:]
  -[SpringBoard __handleHIDEvent:withUIEvent:]
  -[SpringBoard updateNativeOrientationWithLogMessage:]
  -[SpringBoard restartManagerExitImminent:]
  -[SpringBoard _performLeftToRightPanGestureOnScreenWithDuration:completion:]
  -[SpringBoard _runScrollAppSwitcherTest:overApp:completion:]
  -[SpringBoard _runHomeScreenSwipeLeftToTodayView]
  -[SpringBoard _runDashBoardScrollToLeftPageTestWithBlur:]
  -[SpringBoard _runScrunchToAppSwitcherTest]
  -[SpringBoard caseIsEnabledAndLatched]
  -[SpringBoard isDeterminingBootTransition]
  -[SpringBoard lockScreenService]
  -[SpringBoard _handleApplicationExit:]
  -[SpringBoard languageChanged]
  -[SpringBoard screenshotManager]
  -[SpringBoard _simulateLockButtonPress]
  -[SpringBoard setAppRegisteredForVolumeEvents:isActive:]
  -[SpringBoard _returnToHomeScreenWithCompletion:]
  -[SpringBoard _runDashBoardDismissWhileAuthenticatedTest]
  -[SpringBoard appsRegisteredForVolumeEvents]
  -[SpringBoard runFieldTestScript]
  -[SpringBoard _setStatusBarOrientation:animated:logMessage:]
  -[SpringBoard avocadoController]
  -[SpringBoard updateNativeOrientationAndMirroredDisplays:logMessage:]
  -[SpringBoard _runFourFingerSwipeTest]
  -[SpringBoard interactiveScreenshotGestureManager:requestsScreenshotWithOptionsCollection:presentationOptions:]
  -[SpringBoard _activateSafariWithCompletion:]
  -[SpringBoard restartManager]
  -[SpringBoard homeScreenRotationStyleWantsUIKitRotation]
  -[SpringBoard _publishFakeThreadedLockScreenNotificationsWithCount:uniqueThreadCount:completion:]
  -[SpringBoard setDaylightSavingsTimer:]
  -[SpringBoard wipeDeviceNowWithReason:]
  -[SpringBoard registerRemoteAlertSceneViewProvider:]
  -[SpringBoard homeHardwareButton]
  -[SpringBoard _performDragFromPoint:andDragTo:duration:fromView:withCompletion:]
  -[SpringBoard _setStatusBarShowsProgress:]
  -[SpringBoard beginIgnoringInteractionEventsForReason:]
  -[SpringBoard _dashBoardCombinedListViewController]
  -[SpringBoard _setReachabilitySupported:]
  -[SpringBoard authenticationController]
  -[SpringBoard startLaunchTestNamed:options:withCompletionBlock:]
  -[SpringBoard orientationAggregator]
  -[SpringBoard _runHomeScreenIconPullToSpotlightWithTestName:cold:]
  -[SpringBoard _iapServerConnectionDiedNotification:]
  -[SpringBoard _handleApplicationProcessStateDidChangeNotification:]
  -[SpringBoard _performSwipeWithComposer:startLocation:endLocation:duration:timingFunction:intermediateTransformer:completion:]
  -[SpringBoard _runFourFingerSwipeMultipleAppsTest]
  -[SpringBoard _handleScreenShotShortcut:]
  -[SpringBoard _handleCommandTab:]
  -[SpringBoard _doubleHomeButtonPressEventStream]
  -[SpringBoard _adjustSignificantTimersAfterSleep]
  -[SpringBoard _runTestWithVariableFinish:options:completion:]
  -[SpringBoard _iapExtendedModeReset]
  -[SpringBoard isShowingHomescreen]
  -[SpringBoard _lockdownActivationChanged:]
  -[SpringBoard _registerForAVSystemControllerNotifications]
  -[SpringBoard _runScrollAppSwitcherLandscapeTest:overApp:completion:]
  -[SpringBoard applicationAutoLaunchService]
  -[SpringBoard _endRequiringSpotlightTransientOverlayForReason:]
  -[SpringBoard _unscatterWillBegin:]
  -[SpringBoard setNextVoiceRecognitionAudioInputPaths:]
  -[SpringBoard wantsOrientationEvents]
  -[SpringBoard _performTapAtPoint:fromView:withCompletion:]
  -[SpringBoard remoteTransientOverlaySessionManager:shouldActivateOverlayWithContext:forSession:]
  -[SpringBoard pluginUserAgent]
  -[SpringBoard _handleKeyDownEvent_KeyboardBrightnessChange:modifiers:]
  -[SpringBoard remoteTransientOverlaySessionManager:prefersStatusBarActivityItemVisibleForServiceBundleIdentifier:forSession:]
  -[SpringBoard setExpectsFaceContact:]
  -[SpringBoard _runArcSwipeTestFromHomeScreen:]
  -[SpringBoard _openURLCore:display:animating:activationSettings:origin:withResult:]
  -[SpringBoard keyCommands]
  -[SpringBoard setTypingActive:]
  -[SpringBoard launchApplicationWithIdentifier:suspended:]
  -[SpringBoard _appIconsToPutInFolderForTest]
  -[SpringBoard systemStatusServer]
  -[SpringBoard _performMainWorkspaceTransitionWithPrimaryWorkspaceEntity:sideWorkspaceEntity:floatingWorkspaceEntity:spaceConfiguration:floatingConfiguration:animated:completion:]
  -[SpringBoard _accessibilityActivationAnimationWillBegin]
  -[SpringBoard _screenshotWindowWillBeDisplayed]
  -[SpringBoard endIgnoringInteractionEventsForReason:]
  -[SpringBoard appClipOverlayCoordinator]
  -[SpringBoard webClipService]
  -[SpringBoard lockScreenCameraSupported]
  -[SpringBoard startLaunchTestNamed:options:]
  -[SpringBoard _pauseWithComposer:locations:touchCount:]
  -[SpringBoard _performPanGesturesOnScreenUntilOnPage:withCompletion:]
  -[SpringBoard endLaunchTest]
  -[SpringBoard _setAmbiguousControlCenterActivationMargin:]
  -[SpringBoard _runScrollDeweyLibrarySearchWithCompletion:]
  -[SpringBoard _handleDeviceOrientationChangedEvent:]
  -[SpringBoard hasDisableActiveInterfaceOrientationChangeAssertions]
  -[SpringBoard remoteTransientOverlaySessionManager:requestsHandlingForButtonEvents:forSession:viewController:]
  -[SpringBoard _significantTimeDidChange:]
  -[SpringBoard setWantsVolumeButtonEvents:]
  -[SpringBoard _headsetButtonUp:]
  -[SpringBoard isBundleIdentifierRestrictionDisabled:]
  -[SpringBoard _performSwipeWithComposer:startLocation:endLocation:duration:]
  -[SpringBoard installNotificationObserverForNotificationName:forOneNotification:usingBlock:]
  -[SpringBoard _runDashBoardDismissFromPasscodeViewAfterAuthenticationTest]
  -[SpringBoard alertInterfaceOrientation]
  -[SpringBoard _startSeekWithDirection:]
  -[SpringBoard shouldShowAlertForUnhandledURL:error:]
  -[SpringBoard _ringerChanged:]
  -[SpringBoard _setDeviceOrientation:animated:logMessage:]
  -[SpringBoard _runNotificationCoalescingRestackingTestWithOptions:]
  -[SpringBoard _handleShiftCommandTab:]
  -[SpringBoard restartManagerWillReboot:]
  -[SpringBoard _performPanGestureTowardsUserInterfaceLayoutDirectionOnScreenWithDuration:completion:]
  -[SpringBoard _dumpLoggingStateCaptureWithCompletion:]
  -[SpringBoard _runDashBoardScrollFromLeftToRightPageTestWithBlur:]
  -[SpringBoard _createInitialAppScene]
  -[SpringBoard _simulateHomeButtonPressWithCompletion:]
  -[SpringBoard _accessibilityDeactivationAnimationWillBegin]
  -[SpringBoard setAppRegisteredForLockButtonEvents:isActive:]
  -[SpringBoard _performPanGesturesOnScreenUntilOnDefaultHomeScreenIconPageWithCompletion:]
  -[SpringBoard _runMedusaUnpinFloatingApplicationTest:withOptions:]
  -[SpringBoard _updateHomeScreenPresenceNotification:]
  -[SpringBoard setSuspensionAnimationDelay:]
  -[SpringBoard _runNotificationCoalescingExpandingTestWithOptions:]
  -[SpringBoard _runBottomEdgeSwipeTestFromHomeScreen:]
  -[SpringBoard _handleCommandQ:]
  -[SpringBoard setSystemVolumeHUDEnabled:forAudioCategory:]
  -[SpringBoard _toggleSearch]
  -[SpringBoard updateNativeOrientationWithOrientation:updateMirroredDisplays:animated:logMessage:]
  -[SpringBoard _simulateUserScrollForNotificationListWithCount:completion:]
  -[SpringBoard interactiveScreenshotGestureManager:requestsScreenshotPreheatWithPresentationOptions:]
  -[SpringBoard _runDismissContinuityBannerInSwitcherTestWithCompletion:]
  -[SpringBoard _setStatusBarOrientation:logMessage:]
  -[SpringBoard _turnScreenOnAndAuthenticateWithCompletion:]
  -[SpringBoard frontDisplayDidChange:]
  -[SpringBoard _runMedusaTest:withMainWorkspaceTransition:options:]
  -[SpringBoard _deactivateReachability]
  -[SpringBoard softwareUpdatePasscodePolicyManager]
  -[SpringBoard requestDeviceUnlock]
  -[SpringBoard applicationOpenURL:]
  -[SpringBoard _initializeAndStartObservingDefaultsIfNecessary]
  -[SpringBoard _keyboardAvailabilityChanged]
  -[SpringBoard application:handleOpenURL:]
  -[SpringBoard _adjustDaylightSavingsTimerAfterSleep]
  -[SpringBoard _runScrunchHomeToAutoPiPTest]
  -[SpringBoard supportedStateTypes]
  -[SpringBoard _prepareToRunSwitcherGestureTestsWithCompletion:]
  -[SpringBoard _isStatusBarEffectivelyHiddenForContentOverlayInsetsForWindow:]
  -[SpringBoard _handleLockShortcut:]
  -[SpringBoard _runDashBoardRotationTestWithCompletion:]
  -[SpringBoard _removeTransientActiveInterfaceOrientationOverrideForReason:]
  -[SpringBoard addActiveOrientationObserver:]
  -[SpringBoard _combinedListViewController]
  -[SpringBoard _performFourFingerSwipeWithComposer:vertically:duration:]
  -[SpringBoard showAlertForUnhandledURL:error:]
  -[SpringBoard _performPanGesturesOnScreenUntilOnDeweyOverlayWithCompletion:]
  -[SpringBoard _applicationToUseForOpenAndCloseTesting]
  -[SpringBoard interfaceOrientationForCurrentDeviceOrientation:]
  -[SpringBoard _installSwitcherModelForSwitcherTests]
  -[SpringBoard _isDim]
  -[SpringBoard _continueRunningDismissAppSwitcherTestWithCompletion:]
  -[SpringBoard _runAppOpen:withCompletion:]
  -[SpringBoard _launchFullscreenApplication:withLaunchResult:transactionCompletion:]
  -[SpringBoard noteSceneLayoutDidUpdateOnDisplayWithIdentity:]
  -[SpringBoard takeScreenshot]
  -[SpringBoard _handleKeyDownEvent_DisplayBrightnessChange:modifiers:]
  -[SpringBoard endIgnoringInteractionEvents]
  -[SpringBoard _runDashBoardRotateCameraPage]
  -[SpringBoard _runEnterPageHiding]
  -[SpringBoard _runAppSearchPresent]
  -[SpringBoard remoteTransientOverlaySessionManager:activeWallpaperVariantForSession:]
  -[SpringBoard bottomEdgeAmbiguousActivationMargin]
  -[SpringBoard _setupNotificationListTest]
  -[SpringBoard _application:statusBarTouchesEnded:]
  -[SpringBoard cameraHardwareButton]
  -[SpringBoard _prepareToRunSwitcherGestureTestsFromHomeScreen:withCompletion:]
  -[SpringBoard statusBar:effectiveStyleOverridesForRequestedStyle:overrides:]
  -[SpringBoard failedTest:withResults:]
  -[SpringBoard noteInterfaceOrientationChanged:duration:updateMirroredDisplays:force:logMessage:]
  -[SpringBoard _runDashBoardScrollToRightPageTestWithBlur:]
  -[SpringBoard _runSwipeUpHomeToAutoPiPTest]
  -[SpringBoard windowRotationDuration]
  -[SpringBoard _updateRingerState:withVisuals:updatePreferenceRegister:]
  -[SpringBoard setupMidnightTimer]
  -[SpringBoard _runScrollDeweyTestWithCompletion:]
  -[SpringBoard supportsPortraitUpsideDownOrientation]
  -[SpringBoard _smartCoverMightHaveOpened:]
  -[SpringBoard _performFiveFingerScrunchWithComposer:scrunchProgress:duration:withContinuationBlock:]
  -[SpringBoard _performRightToLeftPanGestureOnScreenWithDuration:completion:]
  -[SpringBoard _postActiveInterfaceOrientationChangedNotificationAnimated:]
  -[SpringBoard _rotationCompletion:]
  -[SpringBoard formattedPercentStringForNumber:]
  -[SpringBoard combinationHardwareButton]
  -[SpringBoard noteInterfaceOrientationChanged:duration:logMessage:]
  -[SpringBoard _turnScreenOnOnDashBoardWithCompletion:]
  -[SpringBoard _runHomeScreenSearchPresent]
  -[SpringBoard _handleEndOfScrollingTest:]
  -[SpringBoard spotlightTransientOverlayViewControllerRequestsDismissal:]
  -[SpringBoard _runHomeScreenSearchDismiss]
  -[SpringBoard hasFinishedLaunching]
  -[SpringBoard _runDashBoardDismissFromTodayViewWhileAuthenticatedTest]
  -[SpringBoard _performScrunchAndSwipeWithComposer:]
  -[SpringBoard noteSubstantialTransitionOccured]
  -[SpringBoard _turnScreenOnAndUnlockWithCompletion:]
  -[SpringBoard restartManagerWillShutdown:]
  -[SpringBoard idleTimerPolicyAggregator]
  -[SpringBoard nowRecordingApp]
  -[SpringBoard menuButtonInterceptAppEnabledForever]
  -[SpringBoard _runMedusaMoveFloatingApplicationTest:withOptions:]
  -[SpringBoard didDismissMiniAlert]
  -[SpringBoard _runScrollTestWithScrollView:options:completion:]
  -[SpringBoard transactionForDismissingSearchTransientOverlay]
  -[SpringBoard _runTodayViewScrollWidgetsTestWithOptions:]
  -[SpringBoard _cleanupMainWorkspaceForMedusaTestWithCompletion:]
  -[SpringBoard nowLocatingAppDidEnterForeground:]
  -[SpringBoard spotlightTransientOverlayViewControllerWillDismiss:]
  -[SpringBoard stateDumpServerController]
  -[SpringBoard noteKeybagRefetchTransactionIsActive:]
  -[SpringBoard _flickTimingFunction]
  -[SpringBoard iapIsInExtendedMode]
  -[SpringBoard _setIdleTimer:]
  -[SpringBoard setNextAssistantRecognitionStrings:]
  -[SpringBoard _dismissSpotlightByHomeButtonEvent:]
  -[SpringBoard _runLockScreenScrollNotificationsTestWithOptions:]
  -[SpringBoard _homeScreenTodayViewEventStreamWithDismissal:]
  -[SpringBoard _performArcSwipeWithComposer:]
  -[SpringBoard _runDoSiDoTest]
  -[SpringBoard _keyWindowForScreen:]
  -[SpringBoard _runScrollDeweyWithinExpandedPodWithCompletion:]
  -[SpringBoard stateForStateType:withCompletionHandler:]
  -[SpringBoard _waitForCloudCriticalData]
  -[SpringBoard remoteTransientOverlaySessionManager:performDismissalRequest:forSession:]
  -[SpringBoard _adjustMidnightTimerAfterSleep]
  -[SpringBoard addInCallApp:]
  -[SpringBoard didReceiveMemoryWarning]
  -[SpringBoard volumeHardwareButton]
  -[SpringBoard _runExitPageHiding]


SBTransientActiveInterfaceOrientationRequester : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *reason
 @property  long long orientation

  // instance methods
  -[SBTransientActiveInterfaceOrientationRequester .cxx_destruct]
  -[SBTransientActiveInterfaceOrientationRequester orientation]
  -[SBTransientActiveInterfaceOrientationRequester reason]
  -[SBTransientActiveInterfaceOrientationRequester initWithOrientation:andReason:]


SBUIController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBWallpaperObserver, PTSettingsKeyObserver, UIInteractionProgressObserver, SBWallpaperOrientationProvider, SBReachabilityObserver, SBHomeScreenBackdropViewBaseDelegate, BCBatteryDeviceObserving, UIWindowDelegate, CSPowerStatusProviding>
 @property  SBIconController *iconController
 @property  BOOL chargingChimeEnabled
 @property  BOOL homeScreenAutorotatesEvenWhenIconIsDragging
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL onAC
 @property  BOOL connectedToExternalChargingSource
 @property  BOOL connectedToQiPower

  // class methods
  +[SBUIController sharedInstance]
  +[SBUIController _effectiveStatusBarSettingsForSnapshot:sceneHandle:]
  +[SBUIController zoomViewForDeviceApplicationSceneHandle:displayConfiguration:interfaceOrientation:snapshot:snapshotSize:statusBarDescriptor:decodeImage:]
  +[SBUIController _transformForStatusBarWithOrientation:scaleFactor:]
  +[SBUIController _transformAndFrame:forLaunchImageHostViewWithOrientation:statusBarHeight:inJailRect:]
  +[SBUIController sharedInstanceIfExists]
  +[SBUIController statusBarFrameForDeviceApplicationSceneHandle:displayConfiguration:interfaceOrientation:statusBarStyleRequest:withinBounds:inReferenceSpace:]
  +[SBUIController statusBarFrameForSnapshotFrame:orientation:statusBarStyleRequest:hidden:]
  +[SBUIController statusBarFrameForSnapshotFrame:remainderFrame:orientation:statusBarStyleRequest:hidden:]

  // instance methods
  -[SBUIController isBackdropVisible]
  -[SBUIController cancelInProcessAnimations]
  -[SBUIController setHomeScreenAutorotatesEvenWhenIconIsDragging:]
  -[SBUIController disableAnimationForNextIconRotation]
  -[SBUIController handleDidEndReachabilityAnimation]
  -[SBUIController setAllowIconRotation:forReason:]
  -[SBUIController configureFakeSpringBoardStatusBarWithDefaultStyleRequestForStyle:]
  -[SBUIController iconController]
  -[SBUIController _hideKeyboard]
  -[SBUIController homeScreenAutorotatesEvenWhenIconIsDragging]
  -[SBUIController wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBUIController setHomeScreenScale:behaviorMode:completion:]
  -[SBUIController batteryCapacity]
  -[SBUIController wallpaperDidChangeForVariant:]
  -[SBUIController window]
  -[SBUIController _legibilitySettings]
  -[SBUIController settings:changedValueForKey:]
  -[SBUIController tearDownIconListAndBar]
  -[SBUIController init]
  -[SBUIController _removeReachabilityEffectViewIfNecessary]
  -[SBUIController homeScreenBackdropView:opaquenessDidChange:]
  -[SBUIController cancelVolumeEvent]
  -[SBUIController setHomeScreenDimmingAlpha:behaviorMode:completion:]
  -[SBUIController isIconListViewTornDown]
  -[SBUIController removeFakeSpringBoardStatusBar]
  -[SBUIController hasVisibleAlertItemOrSheet:]
  -[SBUIController isOnAC]
  -[SBUIController isFullyCharged]
  -[SBUIController dealloc]
  -[SBUIController updateStatusBarLegibility]
  -[SBUIController contentView]
  -[SBUIController suppressChimeForConnectedPowerSources]
  -[SBUIController statusBarOverridesDidChange:]
  -[SBUIController setHomeScreenAlpha:behaviorMode:completion:]
  -[SBUIController .cxx_destruct]
  -[SBUIController setPointerInteractionsEnabled:]
  -[SBUIController isBatteryCharging]
  -[SBUIController interfaceOrientationForWallpaperController:]
  -[SBUIController restoreContentAndUnscatterIconsAnimated:withCompletion:]
  -[SBUIController _backgroundContrastDidChange:]
  -[SBUIController endRequiringBackdropViewForReason:]
  -[SBUIController isConnectedToQiPower]
  -[SBUIController endRequiringContentForReason:]
  -[SBUIController isConnectedToExternalChargingSource]
  -[SBUIController succinctDescriptionBuilder]
  -[SBUIController setIsConnectedToUnsupportedChargingAccessory:]
  -[SBUIController _setupHomeScreenContentBackdropView]
  -[SBUIController headsetBatteryCapacity]
  -[SBUIController handleVolumeButtonWithType:down:]
  -[SBUIController configureFakeSpringBoardStatusBarWithStyleRequest:]
  -[SBUIController restoreContentAndUnscatterIconsAnimated:]
  -[SBUIController activateApplication:fromIcon:location:activationSettings:actions:]
  -[SBUIController disableAppSwitchForcePressDueToHomeButtonForce]
  -[SBUIController endRequiringLiveBackdropViewForReason:]
  -[SBUIController isFakeStatusBarStyleEffectivelyDoubleHeight:]
  -[SBUIController handleHomeButtonDoublePressDown]
  -[SBUIController isConnectedToChargeIncapablePowerSource]
  -[SBUIController isHeadsetDocked]
  -[SBUIController setChargingChimeEnabled:]
  -[SBUIController animateFakeStatusBarWithParameters:transition:]
  -[SBUIController handleHomeButtonSinglePressUpWithSourceType:]
  -[SBUIController succinctDescription]
  -[SBUIController isConnectedToUnsupportedChargingAccessory]
  -[SBUIController playChargingChimeIfAppropriate]
  -[SBUIController _reduceMotionStatusDidChange:]
  -[SBUIController _setupHomeScreenDimmingWindow]
  -[SBUIController updateBatteryState:]
  -[SBUIController _accessibilityWillBeginAppSwitcherRevealAnimation]
  -[SBUIController transitionSourceForIconLocation:]
  -[SBUIController alertItemForPreventingLaunchOfApp:outTrustState:]
  -[SBUIController beginRequiringContentForReason:]
  -[SBUIController setHomeScreenBlurProgress:behaviorMode:completion:]
  -[SBUIController handleWillBeginReachabilityAnimation]
  -[SBUIController _enumeratePowerSourcesWithBlock:]
  -[SBUIController _updateLegibility]
  -[SBUIController ACPowerChanged]
  -[SBUIController _activateWorkspaceEntity:fromIcon:location:validator:]
  -[SBUIController _closeOpenFolderIfNecessary]
  -[SBUIController getRotationContentSettings:forWindow:]
  -[SBUIController interactionProgress:didEnd:]
  -[SBUIController restoreContentAndUnscatterIconsAnimated:afterDelay:withCompletion:]
  -[SBUIController _switchToHomeScreenWallpaperAnimated:]
  -[SBUIController _currentHomeScreenLegibilitySettings]
  -[SBUIController beginRequiringBackdropViewForReason:]
  -[SBUIController setFakeSpringBoardStatusBarVisible:]
  -[SBUIController noteStatusBarHeightChanged:]
  -[SBUIController _activateApplicationFromAccessibility:]
  -[SBUIController supportsDetailedBatteryCapacity]
  -[SBUIController isHeadsetBatteryCharging]
  -[SBUIController batteryCapacityAsPercentage]
  -[SBUIController handleHomeButtonSinglePressUp]
  -[SBUIController fakeStatusBarStyleRequestForStyle:]
  -[SBUIController connectedDevicesDidChange:]
  -[SBUIController _willRevealOrHideContentView]
  -[SBUIController restoreContent]
  -[SBUIController dissmissAlertItemsAndSheetsIfPossible]
  -[SBUIController descriptionWithMultilinePrefix:]
  -[SBUIController interactionProgressDidUpdate:]
  -[SBUIController beginRequiringLiveBackdropViewForReason:]
  -[SBUIController beginRequiringContentForReason:options:]
  -[SBUIController restoreContentWithOptions:]
  -[SBUIController chargingChimeEnabled]
  -[SBUIController _powerSourceWantsToPlayChime]
  -[SBUIController possiblyWakeForPowerStatusChangeWithUnlockSource:]
  -[SBUIController descriptionBuilderWithMultilinePrefix:]
  -[SBUIController scalingView]
  -[SBUIController _fakeSpringBoardStatusBar]
  -[SBUIController _deviceUILocked]
  -[SBUIController nudgeIconInterfaceOrientation:duration:]


SBSceneStatusBarManager : UIStatusBarManager /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBSceneStatusBarManager statusBarFrame]
  -[SBSceneStatusBarManager sb_statusBarFrameForStatusBarHeight:]


SBApplicationLaunchNotifyInCallWithoutDataSwitchingAlertItem : SBApplicationLaunchNotifyInCallAlertItem
  // instance methods
  -[SBApplicationLaunchNotifyInCallWithoutDataSwitchingAlertItem configure:requirePasscodeForActions:]


SBApplicationIcon : SBLeafIcon /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
  // class methods
  +[SBApplicationIcon canGenerateIconsInBackground]

  // instance methods
  -[SBApplicationIcon initWithApplication:]
  -[SBApplicationIcon copyWithZone:]
  -[SBApplicationIcon automationID]
  -[SBApplicationIcon application]
  -[SBApplicationIcon tags]
  -[SBApplicationIcon setBadge:]
  -[SBApplicationIcon possibleUserTapDidCancel]
  -[SBApplicationIcon _noteActiveDataSourceDidChangeAndReloadIcon:]
  -[SBApplicationIcon .cxx_destruct]
  -[SBApplicationIcon folderTitleOptions]
  -[SBApplicationIcon iTunesCategoriesOrderedByRelevancy]
  -[SBApplicationIcon isApplicationIcon]
  -[SBApplicationIcon possibleUserTapBeganWithAbsoluteTime:andContinuousTime:]
  -[SBApplicationIcon isEqual:]
  -[SBApplicationIcon folderFallbackTitle]


SBAppSwitcherServiceManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBAppSwitcherServiceManager sharedInstance]

  // instance methods
  -[SBAppSwitcherServiceManager registerService:]
  -[SBAppSwitcherServiceManager .cxx_destruct]
  -[SBAppSwitcherServiceManager registeredServicesSnapshot]
  -[SBAppSwitcherServiceManager unregisterService:]


SBWorkspace : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIdleTimerProviding, SBIdleTimerCoordinating>
 @property  FBWorkspaceEventQueue *eventQueue
 @property  SBWorkspaceTransaction *currentTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWorkspace mainWorkspace]

  // instance methods
  -[SBWorkspace executeTransitionRequest:]
  -[SBWorkspace transactionForTransitionRequest:]
  -[SBWorkspace eventQueue]
  -[SBWorkspace requestTransitionWithBuilder:]
  -[SBWorkspace init]
  -[SBWorkspace createRequestWithOptions:]
  -[SBWorkspace idleTimerProvider:didProposeBehavior:forReason:]
  -[SBWorkspace requestTransitionWithOptions:builder:validator:]
  -[SBWorkspace initWithEventQueue:]
  -[SBWorkspace executeTransitionRequest:withValidator:]
  -[SBWorkspace createRequestForApplicationActivation:options:]
  -[SBWorkspace _executeTransitionRequest:options:validator:]
  -[SBWorkspace coordinatorRequestedIdleTimerBehavior:]
  -[SBWorkspace currentTransaction]
  -[SBWorkspace .cxx_destruct]


SBMainWorkspace : SBWorkspace <BSTransactionObserver, SBBacklightControllerObserver, FBSystemServiceDelegate, FBProcessManagerObserver, FBApplicationProcessObserver, BSWatchdogDelegate, FBSceneManagerObserver, MCProfileConnectionObserver, BSPowerMonitorObserver, SBPowerDownViewControllerDelegate, SBTransientOverlayPresentationManagerDelegate, CCSModulePresentationEndpoint, SBControlCenterModuleTransientOverlayViewControllerDelegate, SBInCallPresentationManagerDelegate>
 @property  SBWorkspaceTransaction *currentTransaction
 @property  FBSceneManager *sceneManager
 @property  <SBIdleTimerProviding> *activeIdleTimerProvider
 @property  BOOL medusaEnabled
 @property  SBHUDController *HUDController
 @property  SBVolumeControl *volumeControl
 @property  SBRingerControl *ringerControl
 @property  SBHomeGestureArbiter *homeGestureArbiter
 @property  SBInCallTransientOverlayManager *inCallTransientOverlayManager
 @property  SBTransientOverlayPresentationManager *transientOverlayPresentationManager
 @property  SBWorkspaceKeyboardFocusController *keyboardFocusController
 @property  SBInCallPresentationManager *inCallPresentationManager
 @property  BOOL springBoardActive
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  BOOL powerDownTransientOverlayFrontmost
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainWorkspace sharedInstance]
  +[SBMainWorkspace _sharedInstanceWithNilCheckPolicy:]
  +[SBMainWorkspace _instanceIfExists]
  +[SBMainWorkspace start]

  // instance methods
  -[SBMainWorkspace executeTransitionRequest:]
  -[SBMainWorkspace sceneManager]
  -[SBMainWorkspace processManager:didRemoveProcess:]
  -[SBMainWorkspace _suspend]
  -[SBMainWorkspace _addStateCaptureHandlers]
  -[SBMainWorkspace backlightController:didAnimateBacklightToFactor:source:]
  -[SBMainWorkspace _destroyApplicationSceneEntity:]
  -[SBMainWorkspace _determineSourceForTransitionRequest:]
  -[SBMainWorkspace _resume]
  -[SBMainWorkspace processManager:didAddProcess:]
  -[SBMainWorkspace process:stateDidChangeFromState:toState:]
  -[SBMainWorkspace transactionForTransitionRequest:]
  -[SBMainWorkspace _selectTransactionForAppActivationUnderMainScreenLock:withResult:]
  -[SBMainWorkspace _preflightTransitionRequest:]
  -[SBMainWorkspace applicationProcessWillLaunch:]
  -[SBMainWorkspace _applicationEntityWasRemovedFromAppSwitcher:]
  -[SBMainWorkspace processDidExit:]
  -[SBMainWorkspace setIdleTimerCoordinator:]
  -[SBMainWorkspace setCurrentTransaction:]
  -[SBMainWorkspace applicationProcessDebuggingStateDidChange:]
  -[SBMainWorkspace _handleSetupExited:]
  -[SBMainWorkspace applicationProcessDidExit:withContext:]
  -[SBMainWorkspace profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[SBMainWorkspace idleTimerCoordinator]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireDeviceOrientationUpdateDeferralAssertionWithReason:]
  -[SBMainWorkspace transactionDidComplete:]
  -[SBMainWorkspace applicationProcessDidLaunch:]
  -[SBMainWorkspace siriPresentationObservationTokenForTransientOverlayPresentationManager:]
  -[SBMainWorkspace requestTransitionWithBuilder:]
  -[SBMainWorkspace currentStatusBarSettingsForTransientOverlayPresentationManager:]
  -[SBMainWorkspace transientOverlayPresentationManager]
  -[SBMainWorkspace powerDownViewControllerRequestsDismissal:]
  -[SBMainWorkspace _dismissPresentedControlCenterModule:]
  -[SBMainWorkspace powerMonitorSystemWillWakeFromSleep:]
  -[SBMainWorkspace transientOverlayPresentationManager:registerCoverSheetExternalBehaviorProvider:]
  -[SBMainWorkspace init]
  -[SBMainWorkspace createRequestWithOptions:]
  -[SBMainWorkspace _applicationProcessExited:withContext:]
  -[SBMainWorkspace inCallTransientOverlayManager]
  -[SBMainWorkspace idleTimerProvider:didProposeBehavior:forReason:]
  -[SBMainWorkspace requestTransitionWithOptions:builder:validator:]
  -[SBMainWorkspace transientOverlayPresentationManager:newSceneDeactivationAssertionWithReason:]
  -[SBMainWorkspace _coversheetDidDismiss]
  -[SBMainWorkspace powerMonitorSystemWillSleep:]
  -[SBMainWorkspace initWithEventQueue:]
  -[SBMainWorkspace _selectTransactionForAppActivationUnderMainScreenLockRequest:]
  -[SBMainWorkspace executeTransitionRequest:withValidator:]
  -[SBMainWorkspace createRequestForApplicationActivation:options:]
  -[SBMainWorkspace _cleanupAppRepairRequest:]
  -[SBMainWorkspace dismissAllTransientOverlayPresentationsAnimated:]
  -[SBMainWorkspace _executeTransitionRequest:options:validator:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireBannerLongLookWindowLevelAssertionWithReason:windowLevel:]
  -[SBMainWorkspace systemService:canActivateApplication:withResult:]
  -[SBMainWorkspace dealloc]
  -[SBMainWorkspace _activeIdleTimerProvider]
  -[SBMainWorkspace coordinatorRequestedIdleTimerBehavior:]
  -[SBMainWorkspace _initializeAndObserveDefaults]
  -[SBMainWorkspace currentTransaction]
  -[SBMainWorkspace .cxx_destruct]
  -[SBMainWorkspace inCallPresentationManagerInterfaceOrientationForTransientOverlayPresentation:]
  -[SBMainWorkspace inCallPresentationManager:createPresentationSessionWithSceneHandle:]
  -[SBMainWorkspace _updateMedusaEnablementAndNotify:]
  -[SBMainWorkspace systemServicePrepareForShutdown:withOptions:]
  -[SBMainWorkspace transientOverlayPresentationManagerRequestsControlCenterDismissal:animated:]
  -[SBMainWorkspace _coversheetDidPresent]
  -[SBMainWorkspace transientOverlayPresentationManager:didDismissViewController:wasTopmostPresentation:]
  -[SBMainWorkspace systemService:isPasscodeLockedOrBlockedWithResult:]
  -[SBMainWorkspace isPowerDownTransientOverlayTopmost]
  -[SBMainWorkspace controlCenterModuleTransientOverlayViewControllerNeedsDismissal:]
  -[SBMainWorkspace systemServiceApplicationInfoProvider:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireDisableAutoUnlockAssertionWithReason:]
  -[SBMainWorkspace canExecuteTransitionRequest:]
  -[SBMainWorkspace transientOverlayPresentationManager:preferredWhitePointAdaptivityStyleDidChangeWithAnimationSettings:]
  -[SBMainWorkspace _selectTransactionForAppActivationRequest:]
  -[SBMainWorkspace isKeyboardVisibleForSpringBoardForTransientOverlayPresentationManager:]
  -[SBMainWorkspace watchdogFired:]
  -[SBMainWorkspace updateFrontMostApplicationEventPort]
  -[SBMainWorkspace _addRequestCompletionBlock:toTransaction:]
  -[SBMainWorkspace _removeApplicationEntities:withDestroyalIntent:completion:]
  -[SBMainWorkspace _registerHandler:forExtensionPoint:]
  -[SBMainWorkspace _executeSuspendedTransactionForRequest:]
  -[SBMainWorkspace inCallPresentationManager]
  -[SBMainWorkspace transientOverlayPresentationManager:shouldResignFirstResponderForKeyWindow:]
  -[SBMainWorkspace systemService:handleActions:origin:withResult:]
  -[SBMainWorkspace _finishInitialization]
  -[SBMainWorkspace _handlerForExtensionPoint:]
  -[SBMainWorkspace _selectTransactionForAppEntityRemoved:]
  -[SBMainWorkspace _executeTransientOverlayTransitionRequest:]
  -[SBMainWorkspace defaultShouldAutorotateForTransientOverlayPresentationManager:]
  -[SBMainWorkspace defaultPreferredInterfaceOrientationForPresentationForTransientOverlayPresentationManager:]
  -[SBMainWorkspace _applyCommonActivationSettings:forRequestWithOptions:clientProcess:application:]
  -[SBMainWorkspace transientOverlayPresentationManager:unregisterCoverSheetExternalBehaviorProvider:]
  -[SBMainWorkspace bannerLongLookPresentationObservationTokenForTransientOverlayPresentationManager:]
  -[SBMainWorkspace _handleUntrustedOpenRequestForApplication:options:activationSettings:origin:withResult:]
  -[SBMainWorkspace _setCurrentTransactionForRequest:fallbackProvider:]
  -[SBMainWorkspace transientOverlayPresentationManagerRequestsAppIconForceTouchDismissal:animated:]
  -[SBMainWorkspace controlCenterPresentationObservationTokenForTransientOverlayPresentationManager:]
  -[SBMainWorkspace HUDController]
  -[SBMainWorkspace _selectTransactionForReturningToTheLockScreenFromApp:animated:forceToBuddy:withResult:]
  -[SBMainWorkspace _setActiveIdleTimerProvider:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireSiriWindowLevelAssertionWithReason:windowLevel:]
  -[SBMainWorkspace presentPowerDownTransientOverlay]
  -[SBMainWorkspace _handleTrustedOpenRequestForApplication:options:activationSettings:origin:withResult:]
  -[SBMainWorkspace dismissPowerDownTransientOverlayWithCompletion:]
  -[SBMainWorkspace inCallPresentationManagerRequestsHandlingOfDeferredUILock:]
  -[SBMainWorkspace _handleBuddyLaunchFinished]
  -[SBMainWorkspace powerDownViewControllerDidDisappear:]
  -[SBMainWorkspace systemServicePrepareForExit:andRelaunch:]
  -[SBMainWorkspace powerDownViewControllerRequestsPowerDown:]
  -[SBMainWorkspace transientOverlayPresentationManager:willChangeTopmostViewControllerInterfaceOrientationToOrientation:]
  -[SBMainWorkspace _validateRequestToOpenApplication:options:origin:error:]
  -[SBMainWorkspace dismissTransientOverlayViewController:animated:completion:]
  -[SBMainWorkspace _proposeIdleTimerBehaviorForReason:]
  -[SBMainWorkspace powerMonitorSystemDidWakeFromSleep:]
  -[SBMainWorkspace _applicationForIdentifier:]
  -[SBMainWorkspace volumeControl]
  -[SBMainWorkspace systemService:handleOpenApplicationRequest:withCompletion:]
  -[SBMainWorkspace _broadcastCurrentTransaction]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireInteractiveScreenshotGestureDisabledAssertionWithReason:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireWallpaperAnimationSuspensionAssertionWithReason:]
  -[SBMainWorkspace _canImplicitlyUnlockAtLockScreenWhileAuthenticatedFromOrigin:givenOrigin:trustedRequest:outReason:]
  -[SBMainWorkspace presentModuleWithIdentifier:options:completion:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireHideAppStatusBarAssertionWithReason:animated:]
  -[SBMainWorkspace _selectTransactionForAppRelaunch:]
  -[SBMainWorkspace isMedusaEnabled]
  -[SBMainWorkspace _transactionForTransitionRequest:]
  -[SBMainWorkspace transientOverlayPresentationManager:shouldRestoreFirstResponderForKeyWindow:]
  -[SBMainWorkspace presentTransientOverlayViewController:animated:completion:]
  -[SBMainWorkspace ringerControl]
  -[SBMainWorkspace _handleOpenApplicationRequest:options:activationSettings:origin:withResult:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireControlCenterWindowLevelAssertionWithReason:windowLevel:]
  -[SBMainWorkspace _executeApplicationTransitionRequest:]
  -[SBMainWorkspace transientOverlayPresentationManager:acquireProximitySensorEnabledAssertionWithReason:]
  -[SBMainWorkspace _isApplicationRunningAsViewService:]
  -[SBMainWorkspace transientOverlayPresentationManager:willPresentViewController:]
  -[SBMainWorkspace _unregisterHandler:forExtensionPoint:]
  -[SBMainWorkspace transientOverlayPresentationManagerRequestsSiriDismissal:animated:]
  -[SBMainWorkspace _attemptUnlockToApplication:showPasscode:origin:givenOrigin:options:completion:]
  -[SBMainWorkspace _selectTransactionForTransientOverlayPresentationRequest:]
  -[SBMainWorkspace powerMonitorSystemSleepRequestAborted:]
  -[SBMainWorkspace defaultSupportedInterfaceOrientationsForTransientOverlayPresentationManager:]
  -[SBMainWorkspace inCallPresentationManagerInterfaceOrientationForBannerPresentation:]
  -[SBMainWorkspace watchdogStarted:]
  -[SBMainWorkspace _selectTransactionForReturningToTheLockScreenWithRequest:fromApp:]
  -[SBMainWorkspace keyboardFocusController]
  -[SBMainWorkspace _handleUserActionRequest:options:activationSettings:origin:withResult:]
  -[SBMainWorkspace _noteDidWakeFromSleep]
  -[SBMainWorkspace isSpringBoardActive]
  -[SBMainWorkspace _updateFrontMostApplicationEventPort]
  -[SBMainWorkspace homeGestureArbiter]
  -[SBMainWorkspace _generateIdleTimerBehaviorForReason:]


SBFluidSwitcherAnimationSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  SBFFluidBehaviorSettings *layoutSettings
 @property  SBFFluidBehaviorSettings *zoomUpSettings
 @property  SBFFluidBehaviorSettings *iconZoomDownSettings
 @property  SBFFluidBehaviorSettings *floatingDockIconFadeSettings
 @property  SBFFluidBehaviorSettings *switcherZoomDownIconFadeOutSettings
 @property  SBFFluidBehaviorSettings *iconFadeInSettings
 @property  SBFFluidBehaviorSettings *switcherFadeOutSettings
 @property  SBFFluidBehaviorSettings *gestureInitiatedZoomDownSettings
 @property  SBFFluidBehaviorSettings *centerZoomSettings
 @property  SBFFluidBehaviorSettings *slideOverSettings
 @property  SBFFluidBehaviorSettings *switcherToHomeSettings
 @property  SBFFluidBehaviorSettings *switcherToHomeOpacitySettings
 @property  SBFFluidBehaviorSettings *toggleAppSwitcherSettings
 @property  SBFFluidBehaviorSettings *launchAppFromSwitcherSettings
 @property  SBFFluidBehaviorSettings *continuityBannerSlideUpSettings
 @property  SBFFluidBehaviorSettings *stackedSwitcherTrackingSettings
 @property  SBFFluidBehaviorSettings *homeGestureCenterRowZoomUpSettings
 @property  SBFFluidBehaviorSettings *homeGestureEdgeRowZoomUpSettings
 @property  SBFFluidBehaviorSettings *homeGestureTopRowZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureTopRowZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureTopRowZoomDownScaleSettings
 @property  SBFFluidBehaviorSettings *homeGestureBottomRowZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureBottomRowZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureBottomRowZoomDownScaleSettings
 @property  SBFFluidBehaviorSettings *homeGestureSmallWidgetZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureSmallWidgetZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureSmallWidgetZoomDownScaleSettings
 @property  SBFFluidBehaviorSettings *homeGestureMediumWidgetZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureMediumWidgetZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureMediumWidgetZoomDownScaleSettings
 @property  SBFFluidBehaviorSettings *homeGestureLargeWidgetZoomDownLayoutSettings
 @property  SBFFluidBehaviorSettings *homeGestureLargeWidgetZoomDownPositionSettings
 @property  SBFFluidBehaviorSettings *homeGestureLargeWidgetZoomDownScaleSettings
 @property  double zoomDownWidgetScaleVelocityYMinimum
 @property  double zoomDownWidgetScaleVelocityYMaximum
 @property  double zoomDownWidgetScaleOvershootMinimumMultiplier
 @property  double zoomDownWidgetScaleOvershootMaximumMultiplier
 @property  double zoomDownWidgetScaleOvershootDuration
 @property  SBFFluidBehaviorSettings *arcSwipeSettings
 @property  SBFFluidBehaviorSettings *appToSwitcherCornerRadiusSettings
 @property  SBFFluidBehaviorSettings *gestureInitiatedAppToSwitcherSettings
 @property  SBFFluidBehaviorSettings *cardFlyInSettings
 @property  double cardFlyInAccelerationDipThreshold
 @property  long long minimumTouchSamplesForAccelerationDip
 @property  SBFFluidBehaviorSettings *reduceMotionArcSwipeSettings
 @property  SBFFluidBehaviorSettings *reduceMotionAppToSwitcherSettings
 @property  double reduceMotionTriggerDelay
 @property  double zoomDownVelocityYMinimum
 @property  double zoomDownVelocityYMaximum
 @property  double zoomDownVelocityYLayoutResponseMultiplier
 @property  double zoomDownVelocityXMinimum
 @property  double zoomDownVelocityXMaximum
 @property  double zoomDownVelocityXPositionResponseMultiplier
 @property  double appToSwitcherTransitionMinCardScaleFactor
 @property  BOOL allowIconZoomFromMediumWidgets
 @property  BOOL allowIconZoomFromLargeWidgets
 @property  SBFFluidBehaviorSettings *dosidoSettings
 @property  SBFFluidBehaviorSettings *dosidoScaleDownSettings
 @property  SBFFluidBehaviorSettings *dosidoScaleUpSettings
 @property  double dosidoScale
 @property  double dosidoScaleUpDelay
 @property  SBFFluidBehaviorSettings *crossblurDosidoSettings
 @property  double crossblurDosidoSmallScale
 @property  double crossblurDosidoLargeScale
 @property  double crossblurDosidoBlurRadius
 @property  double crossblurRasterizationScale
 @property  SBFFluidBehaviorSettings *crossfadeDosidoSettings
 @property  SBFFluidBehaviorSettings *backdropBlurSettings
 @property  SBFFluidBehaviorSettings *homeScreenOpacitySettings
 @property  SBFFluidBehaviorSettings *homeScreenScaleSettings
 @property  SBFFluidBehaviorSettings *opacitySettings
 @property  SBFFluidBehaviorSettings *centerZoomOpacitySettings
 @property  SBFFluidBehaviorSettings *wallpaperScaleSettings
 @property  SBFFluidBehaviorSettings *appSelectionSquishSettings
 @property  SBFFluidBehaviorSettings *statusBarFadeInSettings
 @property  SBFFluidBehaviorSettings *statusBarFadeOutSettings
 @property  double statusBarToApexBounceAnimationDuration
 @property  double statusBarFromApexBounceAnimationDuration
 @property  SBFFluidBehaviorSettings *alertCardifiedDismissalSettings
 @property  double alertCardifiedDismissHapticDelay
 @property  double alertCardifiedDismissZoomOutDelay
 @property  double alertCardifiedDismissClientAnimationsDelay
 @property  SBFFluidBehaviorSettings *alertBarSwipeDismissalSettings
 @property  double alertBarSwipeDismissHapticDelay
 @property  double alertBarSwipeDismissZoomOutDelay
 @property  double alertBarSwipeDismissClientAnimationsDelay
 @property  SBFFluidBehaviorSettings *siriSwipeDismissalSettings
 @property  double siriSwipeDismissHapticDelay
 @property  double siriSwipeDismissZoomOutDelay
 @property  double siriSwipeDismissClientAnimationsDelay
 @property  SBFFluidBehaviorSettings *reopenButtonScaleSettings
 @property  double reopenButtonInitialScale
 @property  double reopenButtonFadeInDelay
 @property  SBFFluidBehaviorSettings *bannerUnfurlSettings
 @property  SBFFluidBehaviorSettings *bannerUnfurlWallpaperAlphaSettings
 @property  double bannerUnfurlWallpaperAlphaDelay
 @property  double disableAsyncRenderingTransitionPercentage
 @property  double disallowAcceleratedHomeButtonPressTransitionPercentage
 @property  double centerZoomScale
 @property  double homeScreenBlurInSwitcher
 @property  double homeScreenBlurInSwitcherReduceMotionEnabled
 @property  double homeScreenBlurInApplication
 @property  double homeScreenOpacityInSwitcher
 @property  double homeScreenOpacityInApplication
 @property  double homeScreenScaleInSwitcher
 @property  double homeScreenScaleInApplication
 @property  double wallpaperScaleInSwitcher
 @property  double wallpaperScaleInApplication
 @property  double dimmingAlphaInSwitcher
 @property  double dimmingAlphaInApplication
 @property  double dockHurdlingIconZoomInitialVelocity
 @property  double dockHurdlingIconZoomDockToBackTiming
 @property  double reduceMotionCrossfadeDuration
 @property  double iconZoomFloatingDockFadeDelay
 @property  double emptySwitcherDismissDelay

  // class methods
  +[SBFluidSwitcherAnimationSettings settingsControllerModule]

  // instance methods
  -[SBFluidSwitcherAnimationSettings setDefaultValues]
  -[SBFluidSwitcherAnimationSettings statusBarToApexBounceAnimationDuration]
  -[SBFluidSwitcherAnimationSettings switcherFadeOutSettings]
  -[SBFluidSwitcherAnimationSettings wallpaperScaleSettings]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityXPositionResponseMultiplier]
  -[SBFluidSwitcherAnimationSettings homeGestureTopRowZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings dimmingAlphaInApplication]
  -[SBFluidSwitcherAnimationSettings gestureInitiatedZoomDownSettings]
  -[SBFluidSwitcherAnimationSettings setCenterZoomScale:]
  -[SBFluidSwitcherAnimationSettings setAllowIconZoomFromMediumWidgets:]
  -[SBFluidSwitcherAnimationSettings setSiriSwipeDismissHapticDelay:]
  -[SBFluidSwitcherAnimationSettings setIconFadeInSettings:]
  -[SBFluidSwitcherAnimationSettings switcherToHomeSettings]
  -[SBFluidSwitcherAnimationSettings setArcSwipeSettings:]
  -[SBFluidSwitcherAnimationSettings setLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings reopenButtonScaleSettings]
  -[SBFluidSwitcherAnimationSettings setBackdropBlurSettings:]
  -[SBFluidSwitcherAnimationSettings _setHomeGestureAnimationDefaultValues]
  -[SBFluidSwitcherAnimationSettings setHomeScreenBlurInSwitcher:]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityXMaximum:]
  -[SBFluidSwitcherAnimationSettings setAlertCardifiedDismissClientAnimationsDelay:]
  -[SBFluidSwitcherAnimationSettings setHomeScreenScaleInApplication:]
  -[SBFluidSwitcherAnimationSettings setAlertBarSwipeDismissZoomOutDelay:]
  -[SBFluidSwitcherAnimationSettings setSwitcherToHomeSettings:]
  -[SBFluidSwitcherAnimationSettings bannerUnfurlWallpaperAlphaDelay]
  -[SBFluidSwitcherAnimationSettings alertBarSwipeDismissalSettings]
  -[SBFluidSwitcherAnimationSettings setDosidoScaleDownSettings:]
  -[SBFluidSwitcherAnimationSettings crossblurDosidoSmallScale]
  -[SBFluidSwitcherAnimationSettings homeScreenScaleForMode:]
  -[SBFluidSwitcherAnimationSettings homeScreenBlurInSwitcherReduceMotionEnabled]
  -[SBFluidSwitcherAnimationSettings setReduceMotionAppToSwitcherSettings:]
  -[SBFluidSwitcherAnimationSettings backdropBlurSettings]
  -[SBFluidSwitcherAnimationSettings dockHurdlingIconZoomDockToBackTiming]
  -[SBFluidSwitcherAnimationSettings setHomeScreenBlurInSwitcherReduceMotionEnabled:]
  -[SBFluidSwitcherAnimationSettings alertCardifiedDismissalSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureEdgeRowZoomUpSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureTopRowZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings setHomeScreenBlurInApplication:]
  -[SBFluidSwitcherAnimationSettings setToggleAppSwitcherSettings:]
  -[SBFluidSwitcherAnimationSettings homeScreenDimmingAlphaForMode:]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleOvershootMinimumMultiplier]
  -[SBFluidSwitcherAnimationSettings homeGestureTopRowZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureTopRowZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureSmallWidgetZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenBlurProgressForMode:]
  -[SBFluidSwitcherAnimationSettings setReopenButtonFadeInDelay:]
  -[SBFluidSwitcherAnimationSettings homeScreenOpacityInApplication]
  -[SBFluidSwitcherAnimationSettings setHomeGestureMediumWidgetZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings setCardFlyInSettings:]
  -[SBFluidSwitcherAnimationSettings homeScreenScaleInApplication]
  -[SBFluidSwitcherAnimationSettings zoomUpSettings]
  -[SBFluidSwitcherAnimationSettings setHomeScreenOpacityInApplication:]
  -[SBFluidSwitcherAnimationSettings crossblurDosidoSettings]
  -[SBFluidSwitcherAnimationSettings siriSwipeDismissClientAnimationsDelay]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityYLayoutResponseMultiplier]
  -[SBFluidSwitcherAnimationSettings opacitySettings]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityYMinimum]
  -[SBFluidSwitcherAnimationSettings setStatusBarFadeInSettings:]
  -[SBFluidSwitcherAnimationSettings alertCardifiedDismissZoomOutDelay]
  -[SBFluidSwitcherAnimationSettings setCardFlyInAccelerationDipThreshold:]
  -[SBFluidSwitcherAnimationSettings siriSwipeDismissalSettings]
  -[SBFluidSwitcherAnimationSettings allowIconZoomFromMediumWidgets]
  -[SBFluidSwitcherAnimationSettings setWallpaperScaleSettings:]
  -[SBFluidSwitcherAnimationSettings setAllowIconZoomFromLargeWidgets:]
  -[SBFluidSwitcherAnimationSettings emptySwitcherDismissDelay]
  -[SBFluidSwitcherAnimationSettings .cxx_destruct]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleOvershootDuration:]
  -[SBFluidSwitcherAnimationSettings setHomeScreenOpacityInSwitcher:]
  -[SBFluidSwitcherAnimationSettings setCrossblurDosidoSmallScale:]
  -[SBFluidSwitcherAnimationSettings crossblurDosidoLargeScale]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleVelocityYMaximum:]
  -[SBFluidSwitcherAnimationSettings setAlertCardifiedDismissZoomOutDelay:]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityYLayoutResponseMultiplier:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureMediumWidgetZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings reopenButtonFadeInDelay]
  -[SBFluidSwitcherAnimationSettings setHomeGestureLargeWidgetZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings iconFadeInSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenOpacityInSwitcher]
  -[SBFluidSwitcherAnimationSettings setSwitcherToHomeOpacitySettings:]
  -[SBFluidSwitcherAnimationSettings siriSwipeDismissHapticDelay]
  -[SBFluidSwitcherAnimationSettings reduceMotionCrossfadeDuration]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityXPositionResponseMultiplier:]
  -[SBFluidSwitcherAnimationSettings cardFlyInSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenOpacitySettings]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityXMinimum]
  -[SBFluidSwitcherAnimationSettings setReduceMotionCrossfadeDuration:]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleVelocityYMinimum]
  -[SBFluidSwitcherAnimationSettings setWallpaperScaleInSwitcher:]
  -[SBFluidSwitcherAnimationSettings setAlertCardifiedDismissalSettings:]
  -[SBFluidSwitcherAnimationSettings setAlertCardifiedDismissHapticDelay:]
  -[SBFluidSwitcherAnimationSettings setSwitcherZoomDownIconFadeOutSettings:]
  -[SBFluidSwitcherAnimationSettings disallowAcceleratedHomeButtonPressTransitionPercentage]
  -[SBFluidSwitcherAnimationSettings setSiriSwipeDismissalSettings:]
  -[SBFluidSwitcherAnimationSettings setAlertBarSwipeDismissHapticDelay:]
  -[SBFluidSwitcherAnimationSettings continuityBannerSlideUpSettings]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleOvershootMaximumMultiplier:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureSmallWidgetZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleOvershootMaximumMultiplier]
  -[SBFluidSwitcherAnimationSettings wallpaperScaleForMode:]
  -[SBFluidSwitcherAnimationSettings setReduceMotionTriggerDelay:]
  -[SBFluidSwitcherAnimationSettings alertBarSwipeDismissZoomOutDelay]
  -[SBFluidSwitcherAnimationSettings homeGestureMediumWidgetZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings reduceMotionArcSwipeSettings]
  -[SBFluidSwitcherAnimationSettings setDockHurdlingIconZoomDockToBackTiming:]
  -[SBFluidSwitcherAnimationSettings centerZoomSettings]
  -[SBFluidSwitcherAnimationSettings alertBarSwipeDismissHapticDelay]
  -[SBFluidSwitcherAnimationSettings setCrossblurDosidoSettings:]
  -[SBFluidSwitcherAnimationSettings iconZoomFloatingDockFadeDelay]
  -[SBFluidSwitcherAnimationSettings dosidoSettings]
  -[SBFluidSwitcherAnimationSettings stackedSwitcherTrackingSettings]
  -[SBFluidSwitcherAnimationSettings slideOverSettings]
  -[SBFluidSwitcherAnimationSettings setReduceMotionArcSwipeSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureBottomRowZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings setCenterZoomSettings:]
  -[SBFluidSwitcherAnimationSettings setHomeScreenOpacitySettings:]
  -[SBFluidSwitcherAnimationSettings homeScreenAlphaForMode:]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityYMinimum:]
  -[SBFluidSwitcherAnimationSettings setGestureInitiatedAppToSwitcherSettings:]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityYMaximum:]
  -[SBFluidSwitcherAnimationSettings setDosidoSettings:]
  -[SBFluidSwitcherAnimationSettings launchAppFromSwitcherSettings]
  -[SBFluidSwitcherAnimationSettings setStatusBarFromApexBounceAnimationDuration:]
  -[SBFluidSwitcherAnimationSettings setDosidoScaleUpDelay:]
  -[SBFluidSwitcherAnimationSettings toggleAppSwitcherSettings]
  -[SBFluidSwitcherAnimationSettings alertCardifiedDismissClientAnimationsDelay]
  -[SBFluidSwitcherAnimationSettings setHomeGestureMediumWidgetZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings setCrossblurRasterizationScale:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureLargeWidgetZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings setCenterZoomOpacitySettings:]
  -[SBFluidSwitcherAnimationSettings setCrossblurDosidoLargeScale:]
  -[SBFluidSwitcherAnimationSettings statusBarFadeInSettings]
  -[SBFluidSwitcherAnimationSettings switcherToHomeOpacitySettings]
  -[SBFluidSwitcherAnimationSettings homeGestureMediumWidgetZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings disableAsyncRenderingTransitionPercentage]
  -[SBFluidSwitcherAnimationSettings setIconZoomDownSettings:]
  -[SBFluidSwitcherAnimationSettings dosidoScaleDownSettings]
  -[SBFluidSwitcherAnimationSettings setAppToSwitcherTransitionMinCardScaleFactor:]
  -[SBFluidSwitcherAnimationSettings dosidoScaleUpDelay]
  -[SBFluidSwitcherAnimationSettings bannerUnfurlSettings]
  -[SBFluidSwitcherAnimationSettings setMinimumTouchSamplesForAccelerationDip:]
  -[SBFluidSwitcherAnimationSettings dimmingAlphaInSwitcher]
  -[SBFluidSwitcherAnimationSettings centerZoomOpacitySettings]
  -[SBFluidSwitcherAnimationSettings appToSwitcherTransitionMinCardScaleFactor]
  -[SBFluidSwitcherAnimationSettings setDockHurdlingIconZoomInitialVelocity:]
  -[SBFluidSwitcherAnimationSettings minimumTouchSamplesForAccelerationDip]
  -[SBFluidSwitcherAnimationSettings setHomeGestureBottomRowZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings setSwitcherFadeOutSettings:]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleOvershootMinimumMultiplier:]
  -[SBFluidSwitcherAnimationSettings setHomeScreenScaleSettings:]
  -[SBFluidSwitcherAnimationSettings setSlideOverSettings:]
  -[SBFluidSwitcherAnimationSettings statusBarFromApexBounceAnimationDuration]
  -[SBFluidSwitcherAnimationSettings setReopenButtonInitialScale:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureBottomRowZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings alertBarSwipeDismissClientAnimationsDelay]
  -[SBFluidSwitcherAnimationSettings setAppSelectionSquishSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureSmallWidgetZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings homeGestureCenterRowZoomUpSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenScaleInSwitcher]
  -[SBFluidSwitcherAnimationSettings gestureInitiatedAppToSwitcherSettings]
  -[SBFluidSwitcherAnimationSettings setGestureInitiatedZoomDownSettings:]
  -[SBFluidSwitcherAnimationSettings siriSwipeDismissZoomOutDelay]
  -[SBFluidSwitcherAnimationSettings appSelectionSquishSettings]
  -[SBFluidSwitcherAnimationSettings setOpacitySettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureBottomRowZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureLargeWidgetZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureTopRowZoomDownScaleSettings:]
  -[SBFluidSwitcherAnimationSettings switcherZoomDownIconFadeOutSettings]
  -[SBFluidSwitcherAnimationSettings setDisallowAcceleratedHomeButtonPressTransitionPercentage:]
  -[SBFluidSwitcherAnimationSettings iconZoomDownSettings]
  -[SBFluidSwitcherAnimationSettings setSiriSwipeDismissClientAnimationsDelay:]
  -[SBFluidSwitcherAnimationSettings dockHurdlingIconZoomInitialVelocity]
  -[SBFluidSwitcherAnimationSettings arcSwipeSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenBlurInApplication]
  -[SBFluidSwitcherAnimationSettings setZoomUpSettings:]
  -[SBFluidSwitcherAnimationSettings dosidoScale]
  -[SBFluidSwitcherAnimationSettings setAlertBarSwipeDismissClientAnimationsDelay:]
  -[SBFluidSwitcherAnimationSettings setHomeGestureTopRowZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings appToSwitcherCornerRadiusSettings]
  -[SBFluidSwitcherAnimationSettings setStatusBarFadeOutSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureMediumWidgetZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings setDisableAsyncRenderingTransitionPercentage:]
  -[SBFluidSwitcherAnimationSettings reopenButtonInitialScale]
  -[SBFluidSwitcherAnimationSettings homeGestureLargeWidgetZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings wallpaperScaleInApplication]
  -[SBFluidSwitcherAnimationSettings homeGestureEdgeRowZoomUpSettings]
  -[SBFluidSwitcherAnimationSettings setBannerUnfurlWallpaperAlphaSettings:]
  -[SBFluidSwitcherAnimationSettings wallpaperScaleInSwitcher]
  -[SBFluidSwitcherAnimationSettings centerZoomScale]
  -[SBFluidSwitcherAnimationSettings setDimmingAlphaInApplication:]
  -[SBFluidSwitcherAnimationSettings homeGestureSmallWidgetZoomDownScaleSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureSmallWidgetZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings crossfadeDosidoSettings]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleOvershootDuration]
  -[SBFluidSwitcherAnimationSettings setDosidoScale:]
  -[SBFluidSwitcherAnimationSettings setZoomDownWidgetScaleVelocityYMinimum:]
  -[SBFluidSwitcherAnimationSettings setSiriSwipeDismissZoomOutDelay:]
  -[SBFluidSwitcherAnimationSettings allowIconZoomFromLargeWidgets]
  -[SBFluidSwitcherAnimationSettings setAppToSwitcherCornerRadiusSettings:]
  -[SBFluidSwitcherAnimationSettings setFloatingDockIconFadeSettings:]
  -[SBFluidSwitcherAnimationSettings setLaunchAppFromSwitcherSettings:]
  -[SBFluidSwitcherAnimationSettings setBannerUnfurlWallpaperAlphaDelay:]
  -[SBFluidSwitcherAnimationSettings setContinuityBannerSlideUpSettings:]
  -[SBFluidSwitcherAnimationSettings setCrossfadeDosidoSettings:]
  -[SBFluidSwitcherAnimationSettings floatingDockIconFadeSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureBottomRowZoomDownPositionSettings:]
  -[SBFluidSwitcherAnimationSettings dosidoScaleUpSettings]
  -[SBFluidSwitcherAnimationSettings homeScreenBlurInSwitcher]
  -[SBFluidSwitcherAnimationSettings reduceMotionAppToSwitcherSettings]
  -[SBFluidSwitcherAnimationSettings crossblurDosidoBlurRadius]
  -[SBFluidSwitcherAnimationSettings homeGestureLargeWidgetZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityYMaximum]
  -[SBFluidSwitcherAnimationSettings cardFlyInAccelerationDipThreshold]
  -[SBFluidSwitcherAnimationSettings alertCardifiedDismissHapticDelay]
  -[SBFluidSwitcherAnimationSettings setStatusBarToApexBounceAnimationDuration:]
  -[SBFluidSwitcherAnimationSettings homeGestureLargeWidgetZoomDownLayoutSettings]
  -[SBFluidSwitcherAnimationSettings setHomeScreenScaleInSwitcher:]
  -[SBFluidSwitcherAnimationSettings setDimmingAlphaInSwitcher:]
  -[SBFluidSwitcherAnimationSettings setBannerUnfurlSettings:]
  -[SBFluidSwitcherAnimationSettings crossblurRasterizationScale]
  -[SBFluidSwitcherAnimationSettings setCrossblurDosidoBlurRadius:]
  -[SBFluidSwitcherAnimationSettings setWallpaperScaleInApplication:]
  -[SBFluidSwitcherAnimationSettings homeScreenScaleSettings]
  -[SBFluidSwitcherAnimationSettings setHomeGestureCenterRowZoomUpSettings:]
  -[SBFluidSwitcherAnimationSettings setDosidoScaleUpSettings:]
  -[SBFluidSwitcherAnimationSettings setReopenButtonScaleSettings:]
  -[SBFluidSwitcherAnimationSettings setAlertBarSwipeDismissalSettings:]
  -[SBFluidSwitcherAnimationSettings reduceMotionTriggerDelay]
  -[SBFluidSwitcherAnimationSettings setEmptySwitcherDismissDelay:]
  -[SBFluidSwitcherAnimationSettings statusBarFadeOutSettings]
  -[SBFluidSwitcherAnimationSettings zoomDownVelocityXMaximum]
  -[SBFluidSwitcherAnimationSettings setHomeGestureSmallWidgetZoomDownLayoutSettings:]
  -[SBFluidSwitcherAnimationSettings bannerUnfurlWallpaperAlphaSettings]
  -[SBFluidSwitcherAnimationSettings setStackedSwitcherTrackingSettings:]
  -[SBFluidSwitcherAnimationSettings homeGestureBottomRowZoomDownPositionSettings]
  -[SBFluidSwitcherAnimationSettings setIconZoomFloatingDockFadeDelay:]
  -[SBFluidSwitcherAnimationSettings layoutSettings]
  -[SBFluidSwitcherAnimationSettings setZoomDownVelocityXMinimum:]
  -[SBFluidSwitcherAnimationSettings zoomDownWidgetScaleVelocityYMaximum]


SBDashBoardWallpaperViewProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSWallpaperViewProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardWallpaperViewProvider suspendWallpaperAnimationForReason:]
  -[SBDashBoardWallpaperViewProvider wallpaperClientWillAnimateRotationToInterfaceOrientation:duration:]
  -[SBDashBoardWallpaperViewProvider createCoverSheetWallpaperViewWithTransformOptions:]
  -[SBDashBoardWallpaperViewProvider createCoverSheetWallpaperView]
  -[SBDashBoardWallpaperViewProvider wallpaperClientWillRotateToInterfaceOrientation:duration:]
  -[SBDashBoardWallpaperViewProvider wallpaperClientDidRotateFromInterfaceOrientation:]


SBBiometricMonitorUI : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBBiometricMonitorObserver>
 @property  <SBBiometricMonitorDataSource> *dataSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBiometricMonitorUI enable]
  -[SBBiometricMonitorUI disable]
  -[SBBiometricMonitorUI setDataSource:]
  -[SBBiometricMonitorUI init]
  -[SBBiometricMonitorUI .cxx_destruct]
  -[SBBiometricMonitorUI dataSource]
  -[SBBiometricMonitorUI _updateMatchState]
  -[SBBiometricMonitorUI _updatePresenceDetectState]
  -[SBBiometricMonitorUI _cancelDeferredUpdateMatchState]
  -[SBBiometricMonitorUI _doDeferredMatchStateUpdate]
  -[SBBiometricMonitorUI _doDeferredPresenceDetectUpdate]
  -[SBBiometricMonitorUI _deferredUpdateMatchState]
  -[SBBiometricMonitorUI _isDeferredMatchStateUpdatePending]
  -[SBBiometricMonitorUI _isDeferredPresenceDetectStateUpdatePending]
  -[SBBiometricMonitorUI _cancelDeferredUpdatePresenceDetectState]
  -[SBBiometricMonitorUI _deferredUpdatePresenceDetectState]
  -[SBBiometricMonitorUI biometricMonitorDataSourceMatchingStarted:]
  -[SBBiometricMonitorUI biometricMonitorDataSourceMatchingFailed:]
  -[SBBiometricMonitorUI biometricMonitorDataSourceMatchingSucceeded:]
  -[SBBiometricMonitorUI biometricMonitorDataSourceMatchingEnded:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePresenceDetectionStarted:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePresenceDetectionFailed:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePresenceDetectionSucceeded:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePresenceDetectionEnded:]
  -[SBBiometricMonitorUI biometricMonitorDataSourcePoseUpdated:]


SBHUDViewController : SBFTouchPassThroughViewController /usr/lib/libutil.dylib <UIViewControllerTransitioningDelegate, SBHUDViewControlling>
 @property  UIView *hudView
 @property  UIView *blockView
 @property  _UIBackdropView *backdropView
 @property  UIImageView *backdropMaskImageView
 @property  UIImage *image
 @property  BOOL showsProgress
 @property  double progress
 @property  double visibilityProgress
 @property  NSString *title
 @property  NSString *subtitle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHUDViewController progressIndicatorStep]

  // instance methods
  -[SBHUDViewController viewDidLoad]
  -[SBHUDViewController setSubtitle:]
  -[SBHUDViewController .cxx_destruct]
  -[SBHUDViewController setImage:]
  -[SBHUDViewController hudView]
  -[SBHUDViewController setTitle:]
  -[SBHUDViewController image]
  -[SBHUDViewController viewWillLayoutSubviews]
  -[SBHUDViewController title]
  -[SBHUDViewController showsProgress]
  -[SBHUDViewController backdropView]
  -[SBHUDViewController setProgress:]
  -[SBHUDViewController progress]
  -[SBHUDViewController subtitle]
  -[SBHUDViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBHUDViewController setShowsProgress:]
  -[SBHUDViewController _rotateToInterfaceOrientation:]
  -[SBHUDViewController _updateBlockView]
  -[SBHUDViewController _updateBackdropMask]
  -[SBHUDViewController displaysLabel]
  -[SBHUDViewController backdropMaskImageView]
  -[SBHUDViewController blockView]
  -[SBHUDViewController _blockColorForValue:]
  -[SBHUDViewController definesAnimatedDismissal]
  -[SBHUDViewController dismissAnimatedWithCompletion:]
  -[SBHUDViewController visibilityProgress]
  -[SBHUDViewController setVisibilityProgress:]


SBAppSwitcherPageView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <PTSettingsKeyObserver>
 @property  UIView *_overlayClippingView
 @property  SBAppSwitcherPageShadowView *_shadowView
 @property  UIView<SBAppSwitcherPageContentView> *view
 @property  UIView *overlay
 @property  long long shadowStyle
 @property  double shadowAlpha
 @property  double shadowOffset
 @property  double overlayAlpha
 @property  double contentAlpha
 @property  double darkeningAlpha
 @property  BOOL needsBackgroundWallpaperTreatment
 @property  double wallpaperOverlayAlpha
 @property  double lighteningAlpha
 @property  {UIRectCornerRadii=dddd} cornerRadii
 @property  long long orientation
 @property  unsigned long highlightType
 @property  BOOL shouldClipContentView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentClippingFrame
 @property  {CGSize=dd} overlayViewSize
 @property  {CGSize=dd} fullyPresentedSize
 @property  double switcherCardScale
 @property  BOOL shouldScaleOverlayToFillBounds
 @property  BOOL blocksTouches
 @property  BOOL active
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherPageView setOverlayAlpha:]
  -[SBAppSwitcherPageView setShadowOffset:]
  -[SBAppSwitcherPageView setVisible:]
  -[SBAppSwitcherPageView _orderSubviews]
  -[SBAppSwitcherPageView contentAlpha]
  -[SBAppSwitcherPageView shadowAlpha]
  -[SBAppSwitcherPageView setView:]
  -[SBAppSwitcherPageView setShadowAlpha:]
  -[SBAppSwitcherPageView overlayAlpha]
  -[SBAppSwitcherPageView setCornerRadii:]
  -[SBAppSwitcherPageView overlay]
  -[SBAppSwitcherPageView _updateCornerRadius]
  -[SBAppSwitcherPageView shadowOffset]
  -[SBAppSwitcherPageView settings:changedValueForKey:]
  -[SBAppSwitcherPageView isVisible]
  -[SBAppSwitcherPageView _updateShadow]
  -[SBAppSwitcherPageView initWithFrame:]
  -[SBAppSwitcherPageView darkeningAlpha]
  -[SBAppSwitcherPageView blocksTouches]
  -[SBAppSwitcherPageView _shadowView]
  -[SBAppSwitcherPageView setOverlay:animated:]
  -[SBAppSwitcherPageView shadowStyle]
  -[SBAppSwitcherPageView cornerRadii]
  -[SBAppSwitcherPageView setOverlay:]
  -[SBAppSwitcherPageView switcherCardScale]
  -[SBAppSwitcherPageView setHighlightType:]
  -[SBAppSwitcherPageView setDarkeningAlpha:]
  -[SBAppSwitcherPageView .cxx_destruct]
  -[SBAppSwitcherPageView _setupShadowView]
  -[SBAppSwitcherPageView overlayViewSize]
  -[SBAppSwitcherPageView _layoutOverlayView]
  -[SBAppSwitcherPageView setContentAlpha:]
  -[SBAppSwitcherPageView setShouldScaleOverlayToFillBounds:]
  -[SBAppSwitcherPageView setNeedsBackgroundWallpaperTreatment:]
  -[SBAppSwitcherPageView view]
  -[SBAppSwitcherPageView setOverlayViewSize:]
  -[SBAppSwitcherPageView highlightType]
  -[SBAppSwitcherPageView setActive:]
  -[SBAppSwitcherPageView fullyPresentedSize]
  -[SBAppSwitcherPageView isActive]
  -[SBAppSwitcherPageView needsBackgroundWallpaperTreatment]
  -[SBAppSwitcherPageView traitCollectionDidChange:]
  -[SBAppSwitcherPageView setBlocksTouches:]
  -[SBAppSwitcherPageView _viewFrame]
  -[SBAppSwitcherPageView setView:animated:]
  -[SBAppSwitcherPageView _updateLighteningAlpha]
  -[SBAppSwitcherPageView setOrientation:]
  -[SBAppSwitcherPageView setFullyPresentedSize:]
  -[SBAppSwitcherPageView _overlayClippingView]
  -[SBAppSwitcherPageView contentClippingFrame]
  -[SBAppSwitcherPageView setShouldClipContentView:]
  -[SBAppSwitcherPageView wallpaperOverlayAlpha]
  -[SBAppSwitcherPageView orientation]
  -[SBAppSwitcherPageView _updateWallpaperOverlayAlpha]
  -[SBAppSwitcherPageView setLighteningAlpha:]
  -[SBAppSwitcherPageView shouldScaleOverlayToFillBounds]
  -[SBAppSwitcherPageView invalidate]
  -[SBAppSwitcherPageView shouldClipContentView]
  -[SBAppSwitcherPageView setWallpaperOverlayAlpha:]
  -[SBAppSwitcherPageView setShadowStyle:]
  -[SBAppSwitcherPageView _updateDimmingViewAlpha]
  -[SBAppSwitcherPageView setContentClippingFrame:]
  -[SBAppSwitcherPageView _updateEffectOverlayViews]
  -[SBAppSwitcherPageView layoutSubviews]
  -[SBAppSwitcherPageView lighteningAlpha]
  -[SBAppSwitcherPageView setSwitcherCardScale:]


SBIconViewVisibilitySwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  SBFFluidBehaviorSettings *animationSettings
 @property  NSSet *excludedIconLocations
 @property  BOOL visible

  // instance methods
  -[SBIconViewVisibilitySwitcherEventResponse appLayout]
  -[SBIconViewVisibilitySwitcherEventResponse isVisible]
  -[SBIconViewVisibilitySwitcherEventResponse excludedIconLocations]
  -[SBIconViewVisibilitySwitcherEventResponse .cxx_destruct]
  -[SBIconViewVisibilitySwitcherEventResponse type]
  -[SBIconViewVisibilitySwitcherEventResponse initWithAppLayout:visible:animationSettings:excludedIconLocations:]
  -[SBIconViewVisibilitySwitcherEventResponse animationSettings]
  -[SBIconViewVisibilitySwitcherEventResponse descriptionBuilderWithMultilinePrefix:]


SBAlertItemTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAlertItemTestRecipe load]

  // instance methods
  -[SBAlertItemTestRecipe title]
  -[SBAlertItemTestRecipe handleVolumeIncrease]
  -[SBAlertItemTestRecipe handleVolumeDecrease]


SBApplicationTestingManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSMutableDictionary *idleTimerDisableAssertions
 @property  NSString *currentTestName
 @property  NSString *scrollTestActiveSubtest

  // class methods
  +[SBApplicationTestingManager sharedInstance]

  // instance methods
  -[SBApplicationTestingManager init]
  -[SBApplicationTestingManager currentTestName]
  -[SBApplicationTestingManager .cxx_destruct]
  -[SBApplicationTestingManager _idleTimerDisableAssertions]
  -[SBApplicationTestingManager _handleTestEnded]
  -[SBApplicationTestingManager markUserLaunchInitiationTime]
  -[SBApplicationTestingManager setCurrentTestName:]
  -[SBApplicationTestingManager scrollTestActiveSubtest]
  -[SBApplicationTestingManager _prepareForTestStartup:]
  -[SBApplicationTestingManager _installTestEndedHandler:]
  -[SBApplicationTestingManager setScrollTestActiveSubtest:]


SBPPTSearchGestureObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSearchGestureObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPPTSearchGestureObserver searchGesture:startedShowing:]
  -[SBPPTSearchGestureObserver searchGesture:completedShowing:]
  -[SBPPTSearchGestureObserver searchGesture:changedPercentComplete:]


SBPPTFakeAppSuggestion : SBBestAppSuggestion
  // instance methods
  -[SBPPTFakeAppSuggestion initWithBundleIdentifier:]
  -[SBPPTFakeAppSuggestion activityType]
  -[SBPPTFakeAppSuggestion .cxx_destruct]
  -[SBPPTFakeAppSuggestion uniqueIdentifier]
  -[SBPPTFakeAppSuggestion originatingDeviceType]
  -[SBPPTFakeAppSuggestion originatingDeviceName]
  -[SBPPTFakeAppSuggestion isEqual:]
  -[SBPPTFakeAppSuggestion bundleIdentifier]
  -[SBPPTFakeAppSuggestion suggestedLocationName]


SBWorkspaceTransitionRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIAnimationControllerTransitionContextProvider, SBWorkspaceApplicationSceneTransitionContextDelegate, BSDescriptionProviding>
 @property  BOOL isMainWorkspaceTransitionRequest
 @property  NSSet *toApplicationSceneEntities
 @property  NSSet *fromApplicationSceneEntities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBWorkspace *workspace
 @property  FBSDisplayIdentity *displayIdentity
 @property  FBSDisplayConfiguration *displayConfiguration
 @property  BSProcessHandle *originatingProcess
 @property  NSString *eventLabel
 @property  NSUUID *uniqueID
 @property  BOOL finalized
 @property  SBWorkspaceApplicationSceneTransitionContext *applicationContext
 @property  SBWorkspaceTransientOverlayTransitionContext *transientOverlayContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWorkspaceTransitionRequest compactDescriptionBuilder]
  -[SBWorkspaceTransitionRequest isMainWorkspaceTransitionRequest]
  -[SBWorkspaceTransitionRequest setOriginatingProcess:]
  -[SBWorkspaceTransitionRequest init]
  -[SBWorkspaceTransitionRequest originatingProcess]
  -[SBWorkspaceTransitionRequest toApplicationSceneEntities]
  -[SBWorkspaceTransitionRequest fromApplicationSceneEntities]
  -[SBWorkspaceTransitionRequest setTransientOverlayContext:]
  -[SBWorkspaceTransitionRequest displayConfiguration]
  -[SBWorkspaceTransitionRequest modifyTransientOverlayContext:]
  -[SBWorkspaceTransitionRequest eventLabel]
  -[SBWorkspaceTransitionRequest previousLayoutStateForApplicationTransitionContext:]
  -[SBWorkspaceTransitionRequest declineWithReason:]
  -[SBWorkspaceTransitionRequest _initWithWorkspace:displayConfiguration:]
  -[SBWorkspaceTransitionRequest .cxx_destruct]
  -[SBWorkspaceTransitionRequest succinctDescriptionBuilder]
  -[SBWorkspaceTransitionRequest uniqueID]
  -[SBWorkspaceTransitionRequest displayIdentity]
  -[SBWorkspaceTransitionRequest succinctDescription]
  -[SBWorkspaceTransitionRequest transientOverlayContext]
  -[SBWorkspaceTransitionRequest applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBWorkspaceTransitionRequest setEventLabelWithFormat:]
  -[SBWorkspaceTransitionRequest layoutStateForApplicationTransitionContext:]
  -[SBWorkspaceTransitionRequest finalize]
  -[SBWorkspaceTransitionRequest setEventLabel:]
  -[SBWorkspaceTransitionRequest isFinalized]
  -[SBWorkspaceTransitionRequest applicationContext]
  -[SBWorkspaceTransitionRequest modifyApplicationContext:]
  -[SBWorkspaceTransitionRequest descriptionWithMultilinePrefix:]
  -[SBWorkspaceTransitionRequest descriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceTransitionRequest setApplicationContext:]
  -[SBWorkspaceTransitionRequest workspace]


SBLockHardwareButtonActions : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonGestureParametersObserver>
 @property  SBSiriHardwareButtonInteraction *siriButtonInteraction
 @property  SBAccessibilityHardwareButtonInteraction *accessibilityButtonInteraction
 @property  SBSleepWakeHardwareButtonInteraction *sleepWakeButtonInteraction
 @property  <SBHardwareButtonInteraction><SBHardwareButtonGestureParametersProvider> *proximitySensorButtonInteraction
 @property  BOOL isButtonDown
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockHardwareButtonActions performSinglePressDidFailActions]
  -[SBLockHardwareButtonActions provider:didUpdateButtonGestureParameters:]
  -[SBLockHardwareButtonActions performButtonUpPreActions]
  -[SBLockHardwareButtonActions shouldBeginDoublePressGestureWhileObjectWithinProximity]
  -[SBLockHardwareButtonActions performInitialButtonDownActions]
  -[SBLockHardwareButtonActions _shouldWaitForDoublePress]
  -[SBLockHardwareButtonActions _isSOSActive]
  -[SBLockHardwareButtonActions sleepWakeButtonInteraction]
  -[SBLockHardwareButtonActions performLongPressActions]
  -[SBLockHardwareButtonActions .cxx_destruct]
  -[SBLockHardwareButtonActions disallowsLongPressForReason:]
  -[SBLockHardwareButtonActions _registeredLockButtonAppsDidChange:]
  -[SBLockHardwareButtonActions proximitySensorButtonInteraction]
  -[SBLockHardwareButtonActions initWithHomeButtonType:proximitySensorManager:]
  -[SBLockHardwareButtonActions setProximitySensorButtonInteraction:]
  -[SBLockHardwareButtonActions performSecondButtonDownActions]
  -[SBLockHardwareButtonActions _foregroundAppRegisteredForLockButtonEvents]
  -[SBLockHardwareButtonActions _performSOSDidTriggerActions]
  -[SBLockHardwareButtonActions setAccessibilityButtonInteraction:]
  -[SBLockHardwareButtonActions performDoublePressActions]
  -[SBLockHardwareButtonActions accessibilityButtonInteraction]
  -[SBLockHardwareButtonActions performSinglePressAction]
  -[SBLockHardwareButtonActions performFinalButtonUpActions]
  -[SBLockHardwareButtonActions performSOSGestureEndedActions]
  -[SBLockHardwareButtonActions performSOSGestureBeganActions]
  -[SBLockHardwareButtonActions reverseFadeOutIfNeeded]
  -[SBLockHardwareButtonActions disallowsTriplePressForReason:]
  -[SBLockHardwareButtonActions disallowsDoublePressForReason:]
  -[SBLockHardwareButtonActions siriButtonInteraction]
  -[SBLockHardwareButtonActions performSOSActionsWithUUID:triggerMechanism:completion:]
  -[SBLockHardwareButtonActions disallowsSinglePressForReason:]
  -[SBLockHardwareButtonActions _sendButtonDownToRegisteredApp]
  -[SBLockHardwareButtonActions performForceResetSequenceBeganActions]
  -[SBLockHardwareButtonActions performInitialButtonUpActions]
  -[SBLockHardwareButtonActions hardwareButtonGestureParameters]
  -[SBLockHardwareButtonActions performLongPressCancelledActions]
  -[SBLockHardwareButtonActions isButtonDown]
  -[SBLockHardwareButtonActions setSleepWakeButtonInteraction:]
  -[SBLockHardwareButtonActions _sendButtonUpToRegisteredApp]
  -[SBLockHardwareButtonActions _sendButtonEventToApp:down:]
  -[SBLockHardwareButtonActions setSiriButtonInteraction:]
  -[SBLockHardwareButtonActions _showPowerDownTransientOverlayOnForceReset]
  -[SBLockHardwareButtonActions performTriplePressActions]


SBUIPasscodeViewWithLockScreenStyle : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIView<SBUIPasscodeLockView> *passcodeView

  // instance methods
  -[SBUIPasscodeViewWithLockScreenStyle passcodeView]
  -[SBUIPasscodeViewWithLockScreenStyle .cxx_destruct]
  -[SBUIPasscodeViewWithLockScreenStyle layoutSubviews]
  -[SBUIPasscodeViewWithLockScreenStyle setBlurEnabled:]
  -[SBUIPasscodeViewWithLockScreenStyle initWithFrame:includeBlur:passcodeViewGenerator:]


SBVolumeHardwareButton : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIGestureRecognizerDelegate, SBPressPrecedenceArbiter>
 @property  SBPressSequenceObserver *volumeIncreaseSequenceObserver
 @property  SBPressSequenceObserver *volumeDecreaseSequenceObserver
 @property  SBVolumeHardwareButtonActions *buttonActions
 @property  NSHashTable *volumePressBandits
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBVolumeHardwareButton volumeIncreasePress:]
  -[SBVolumeHardwareButton removeVolumePressBandit:]
  -[SBVolumeHardwareButton _aggdLogVolumeDecreaseButtonDown:]
  -[SBVolumeHardwareButton .cxx_destruct]
  -[SBVolumeHardwareButton volumeDecreaseSequenceObserver]
  -[SBVolumeHardwareButton gestureRecognizerShouldBegin:]
  -[SBVolumeHardwareButton volumeDecreasePress:]
  -[SBVolumeHardwareButton _logVolumeButtonWithObserver:down:]
  -[SBVolumeHardwareButton volumeIncreaseSequenceObserver]
  -[SBVolumeHardwareButton setVolumePressBandits:]
  -[SBVolumeHardwareButton volumePressBandits]
  -[SBVolumeHardwareButton cancelVolumePress]
  -[SBVolumeHardwareButton buttonActions]
  -[SBVolumeHardwareButton initWithScreenshotGestureRecognizer:shutdownGestureRecognizer:homeButtonType:]
  -[SBVolumeHardwareButton _createGestureRecognizers]
  -[SBVolumeHardwareButton addVolumePressBandit:]
  -[SBVolumeHardwareButton gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBVolumeHardwareButton gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBVolumeHardwareButton _aggdLogVolumeIncreaseButtonDown:]
  -[SBVolumeHardwareButton preemptablePressGestureRecognizers]


SBHomeGestureToHomeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBHomeGestureToHomeSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeGestureToHomeSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureToHomeSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeGestureToHomeSwitcherModifier scaleForIndex:]
  -[SBHomeGestureToHomeSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeGestureToHomeSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeGestureToHomeSwitcherModifier wallpaperStyle]
  -[SBHomeGestureToHomeSwitcherModifier cardCornerRadiiForIndex:]
  -[SBHomeGestureToHomeSwitcherModifier opacityForIndex:]
  -[SBHomeGestureToHomeSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureToHomeSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeGestureToHomeSwitcherModifier frameForIndex:]
  -[SBHomeGestureToHomeSwitcherModifier transactionCompletionOptions]
  -[SBHomeGestureToHomeSwitcherModifier initWithTransitionID:showingOrAnimatingCardsForFlyIn:]


SBRingerPillView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  MTMaterialShadowView *materialView
 @property  MTVisualStylingProvider *stylingProvider
 @property  BSUICAPackageView *glyphView
 @property  UILabel *silentModeLabel
 @property  UILabel *ringerLabel
 @property  UILabel *onLabel
 @property  UILabel *offLabel
 @property  SBRingerVolumeSliderView *slider
 @property  UIColor *glyphTintColor
 @property  NSArray *glyphTintBackgroundLayers
 @property  NSArray *glyphTintShapeLayers
 @property  unsigned long state
 @property  float sliderValue

  // instance methods
  -[SBRingerPillView sliderValue]
  -[SBRingerPillView slider]
  -[SBRingerPillView init]
  -[SBRingerPillView setGlyphView:]
  -[SBRingerPillView glyphView]
  -[SBRingerPillView setState:]
  -[SBRingerPillView .cxx_destruct]
  -[SBRingerPillView traitCollectionDidChange:]
  -[SBRingerPillView setSlider:]
  -[SBRingerPillView materialView]
  -[SBRingerPillView setMaterialView:]
  -[SBRingerPillView sizeThatFits:]
  -[SBRingerPillView setGlyphTintColor:]
  -[SBRingerPillView glyphTintColor]
  -[SBRingerPillView onLabel]
  -[SBRingerPillView state]
  -[SBRingerPillView setSliderValue:]
  -[SBRingerPillView layoutSubviews]
  -[SBRingerPillView offLabel]
  -[SBRingerPillView _setGlyphTintColor:animationDuration:]
  -[SBRingerPillView _visibleViewsForState:]
  -[SBRingerPillView _updateGlyphWithStaticColor:animationSettings:]
  -[SBRingerPillView stylingProvider]
  -[SBRingerPillView setStylingProvider:]
  -[SBRingerPillView silentModeLabel]
  -[SBRingerPillView setSilentModeLabel:]
  -[SBRingerPillView ringerLabel]
  -[SBRingerPillView setRingerLabel:]
  -[SBRingerPillView setOnLabel:]
  -[SBRingerPillView setOffLabel:]
  -[SBRingerPillView glyphTintBackgroundLayers]
  -[SBRingerPillView setGlyphTintBackgroundLayers:]
  -[SBRingerPillView glyphTintShapeLayers]
  -[SBRingerPillView setGlyphTintShapeLayers:]


SBPearlUnlockTrigger : SBMesaUnlockTrigger
  // instance methods
  -[SBPearlUnlockTrigger bioUnlock]


SBInCallBannerSceneBackgroundView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBApplicationSceneBackgroundView>
 @property  double wallpaperAlpha
 @property  long long wallpaperStyle
 @property  BOOL fullscreen
 @property  BOOL needsClassicModeBackground
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallBannerSceneBackgroundView setWallpaperStyle:]
  -[SBInCallBannerSceneBackgroundView setFullscreen:]
  -[SBInCallBannerSceneBackgroundView wallpaperStyle]
  -[SBInCallBannerSceneBackgroundView isFullscreen]
  -[SBInCallBannerSceneBackgroundView initWithFrame:]
  -[SBInCallBannerSceneBackgroundView .cxx_destruct]
  -[SBInCallBannerSceneBackgroundView layoutSubviews]
  -[SBInCallBannerSceneBackgroundView _updateBackdropView]
  -[SBInCallBannerSceneBackgroundView initWithFrame:wallpaperVariant:transformOptions:]
  -[SBInCallBannerSceneBackgroundView setWallpaperAlpha:]
  -[SBInCallBannerSceneBackgroundView wallpaperAlpha]


SBPressCollector : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBPressCollectorDelegate> *delegate
 @property  double maxPressDownDuration
 @property  double maxPressUpDuration

  // class methods
  +[SBPressCollector currentTimeStamp]

  // instance methods
  -[SBPressCollector _reset]
  -[SBPressCollector init]
  -[SBPressCollector .cxx_destruct]
  -[SBPressCollector setDelegate:]
  -[SBPressCollector _end]
  -[SBPressCollector delegate]
  -[SBPressCollector registerPressDownWithTimeStamp:]
  -[SBPressCollector registerPressUpWithTimeStamp:]
  -[SBPressCollector _resetTimersIfNecessary]
  -[SBPressCollector _handlePressUpWithTimeStamp:]
  -[SBPressCollector _handlePressDownWithTimeStamp:]
  -[SBPressCollector maxPressUpDuration]
  -[SBPressCollector maxPressDownDuration]
  -[SBPressCollector _fireEndTimerWithDelay:isButtonDown:]
  -[SBPressCollector endCurrentSequence]
  -[SBPressCollector setMaxPressDownDuration:]
  -[SBPressCollector setMaxPressUpDuration:]


SBApplication : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <XBApplicationSnapshotManifestDelegate, SBLeafIconDataSource, UISApplicationStateServiceDataSource, BSDescriptionProviding>
 @property  BOOL wantsLegacyFullscreenInterfaceOrientationBehaviors
 @property  BOOL isMedusaCapable
 @property  BOOL isClassic
 @property  BOOL classicAppZoomedIn
 @property  BOOL classicAppRequiresHiDPI
 @property  BOOL classicAppZoomedInOrRequiresHiDPI
 @property  BOOL classicAppScaled
 @property  BOOL classicAppFullScreen
 @property  BOOL classicAppPhoneAppRunningOnPad
 @property  BOOL classicAppInsetForHomeAffordance
 @property  BOOL includesStatusBarInClassicJail
 @property  BOOL ignoreScalingOfJailedStatusBar
 @property  BOOL isInsetForHomeAffordance
 @property  BOOL classicAppScaledWithAspectRatioCloseEnoughToBeTreatedAsFullScreen
 @property  long long classicMode
 @property  long long defaultClassicMode
 @property  BOOL classicAppZoomedIn
 @property  BOOL isSpringBoard
 @property  BOOL isSetup
 @property  BOOL isMobilePhone
 @property  BOOL isFaceTime
 @property  SBApplicationProcessState *internalProcessState
 @property  SBApplicationInfo *info
 @property  SBApplicationProcessState *processState
 @property  FBProcessExitContext *lastExitContext
 @property  unsigned long failedLaunchCount
 @property  NSString *bundleIdentifier
 @property  NSString *iconIdentifier
 @property  NSString *displayName
 @property  BOOL internalApplication
 @property  BOOL systemApplication
 @property  SBApplicationWakeScheduler *legacyVOIPPeriodicWakeScheduler
 @property  BOOL terminationAssertionHeld
 @property  BOOL cacheCleaningTerminationAssertionHeld
 @property  BOOL uninstallSupported
 @property  BOOL uninstalled
 @property  NSArray *dynamicApplicationShortcutItems
 @property  BOOL restoringIcon
 @property  BOOL showsProgress
 @property  BOOL hasShownDataPlanAlertSinceLock
 @property  BOOL wantsAutoLaunchForVOIP
 @property  unsigned long failedAutoLaunchCountForVOIP
 @property  BOOL playingAudio
 @property  BOOL nowRecordingApplication
 @property  BOOL connectedToExternalAccessory
 @property  BOOL usesEdgeNetwork
 @property  BOOL usesWiFiNetwork
 @property  int dataUsage
 @property  BOOL suppressesControlCenter
 @property  BOOL suppressesCoverSheetGesture
 @property  NSString *uniqueIdentifier
 @property  NSString *configurationStorageIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL usesBackgroundNetwork
 @property  id badgeValue
 @property  NSDate *nextWakeDate

  // class methods
  +[SBApplication _defaultLaunchingSizeForDisplayConfiguration:classicMode:]
  +[SBApplication restrictedClassicModeDisplayConfigurationForDisplayConfiguration:classicMode:]
  +[SBApplication _classicModeForLaunchingSize:]
  +[SBApplication _bestAvailableClassicModeForHostingExtensionContainedInApplication:]
  +[SBApplication _canonicalScreenTypeForClassicMode:]
  +[SBApplication _niceScreenTypeForClassicType:matchingAValidDisplayZoomModeOnScreenType:]
  +[SBApplication _appStateKeysToPrefetch]
  +[SBApplication _deviceSafeAreaInsets]
  +[SBApplication snapshotSortDescriptorForNames:]
  +[SBApplication snapshotSortDescriptorForScheme:]
  +[SBApplication snapshotSortDescriptorForInterfaceOrientationMask:]
  +[SBApplication snapshotSortDescriptorForStatusBarStateMask:]
  +[SBApplication snapshotSortDescriptorForImageScale:]
  +[SBApplication snapshotSortDescriptorForContentTypeMask]
  +[SBApplication snapshotSortDescriptorForRequiredOSVersion:]
  +[SBApplication snapshotSortDescriptorPreferringProtectedContent]
  +[SBApplication snapshotSortDescriptorForCreationDate]
  +[SBApplication snapshotSortDescriptorForUIUserInterfaceStyle:]
  +[SBApplication snapshotSortDescriptorsForNames:scheme:imageScale:userInterfaceStyle:statusBarStateMask:interfaceOrientationMask:requiredOSVersion:]
  +[SBApplication snapshotSortDescriptorForLaunchInterfaceIdentifier:]
  +[SBApplication snapshotSortDescriptorForCustomSafeAreaInsets:]
  +[SBApplication _markAllManifestsForReingestion]
  +[SBApplication _reingestStaticDefaultImagesForAllApps]

  // instance methods
  -[SBApplication lastExitContext]
  -[SBApplication suppressesControlCenter]
  -[SBApplication copyWithZone:]
  -[SBApplication iconCompleteUninstall:]
  -[SBApplication _defaultClassicMode]
  -[SBApplication _setInternalProcessState:]
  -[SBApplication deleteAllSnapshots]
  -[SBApplication purgeCaches]
  -[SBApplication _isClassicViaOverride]
  -[SBApplication _lockStateDidChange:]
  -[SBApplication markNewlyInstalled]
  -[SBApplication isInternalApplication]
  -[SBApplication iconCanTightenLabel:]
  -[SBApplication badgeValue]
  -[SBApplication isSystemApplication]
  -[SBApplication setBadgeValue:]
  -[SBApplication saveSuspendSnapshot:forSceneHandle:]
  -[SBApplication statusBarStyleOverridesAssertionsByStyleOverride]
  -[SBApplication wantsAutoLaunchForVOIP]
  -[SBApplication _snapshotManifest]
  -[SBApplication setNowRecordingApplication:]
  -[SBApplication iconAllowsLaunch:]
  -[SBApplication classicAppInsetForHomeAffordance]
  -[SBApplication usesBackgroundNetwork]
  -[SBApplication isSetup]
  -[SBApplication setUninstalled:]
  -[SBApplication priorityForIcon:]
  -[SBApplication _normalizeSnapshotName:]
  -[SBApplication icon:launchFromLocation:context:]
  -[SBApplication classicAppZoomedIn]
  -[SBApplication processState]
  -[SBApplication isClassic]
  -[SBApplication icon:imageWithInfo:]
  -[SBApplication isTimedOutForIcon:]
  -[SBApplication classicAppScaledWithAspectRatioCloseEnoughToBeTreatedAsFullScreen]
  -[SBApplication icon:displayNameForLocation:]
  -[SBApplication setWantsAutoLaunchForVOIP:]
  -[SBApplication _setNewlyInstalled:]
  -[SBApplication releaseStatusBarStyleOverridesAssertion:]
  -[SBApplication isUninstalled]
  -[SBApplication setAudioCategoriesThatDisableSystemVolumeHUD:forSceneIdentifier:]
  -[SBApplication isAnyTerminationAssertionHeld]
  -[SBApplication classicAppPhoneAppRunningOnPad]
  -[SBApplication _cancelPreheatForUserLaunchIfNecessary]
  -[SBApplication _noteProcess:didChangeToState:]
  -[SBApplication supportedGridSizeClassesForIcon:]
  -[SBApplication setHasShownDataPlanAlertSinceLock:]
  -[SBApplication _processDidLaunch:]
  -[SBApplication manifest:didPurgeProtectedContentSnapshotsWithGroupIdentifiers:]
  -[SBApplication setInfo:]
  -[SBApplication iconIdentifier]
  -[SBApplication setHasDisplayedLaunchAlert:forType:]
  -[SBApplication suppressesCoverSheetGesture]
  -[SBApplication flushSnapshotsForAllScenesIncludingAllLegacyImages]
  -[SBApplication _isRecentlyUpdated]
  -[SBApplication setUsesBackgroundNetwork:]
  -[SBApplication info]
  -[SBApplication dealloc]
  -[SBApplication snapshotSizeAdjustedForLegacyStatusBarBasedOnSize:interfaceOrientation:contentFrame:]
  -[SBApplication classicAppRequiresHiDPI]
  -[SBApplication _isNewEnoughToKnowAboutRoundPads]
  -[SBApplication _clearSceneTitles]
  -[SBApplication classicAppScaled]
  -[SBApplication _setDataUsage:]
  -[SBApplication _noteSnapshotDidUpdateForSceneIdentifier:]
  -[SBApplication iconCanTruncateLabel:]
  -[SBApplication .cxx_destruct]
  -[SBApplication hasDisplayedLaunchAlertForType:]
  -[SBApplication _classicAppScaledPadOnPad]
  -[SBApplication _noteSnapshotDidUpdateForSceneIdentifiers:]
  -[SBApplication _resetDataUsage]
  -[SBApplication failedLaunchCount]
  -[SBApplication accessoryTypeForIcon:]
  -[SBApplication isRestoringIcon]
  -[SBApplication markRecentlyUpdated]
  -[SBApplication isMobilePhone]
  -[SBApplication mostRecentSceneSnapshotsForSceneHandle:scale:launchingOrientation:]
  -[SBApplication _terminationAssertionEfficacyChangedTo:]
  -[SBApplication succinctDescriptionBuilder]
  -[SBApplication _sceneIdentifierForStoredPersistenceIdentifier:]
  -[SBApplication ignoreScalingOfJailedStatusBar]
  -[SBApplication _setApplicationRestorationCheckState:]
  -[SBApplication _preferredImagePathByScaleInBundle:resourceName:ofType:scale:outScale:]
  -[SBApplication _reingestStaticDefaultImagesInSnapshotManifest]
  -[SBApplication flushSnapshotsForAllScenes]
  -[SBApplication uniqueIdentifier]
  -[SBApplication saveSnapshotForSceneHandle:context:completion:]
  -[SBApplication __noteSnapshotDidUpdate:forSceneIdentifier:]
  -[SBApplication _purgeStaticDefaultImagesInSnapshotManifest]
  -[SBApplication setConnectedToExternalAccessory:]
  -[SBApplication setFailedAutoLaunchCountForVOIP:]
  -[SBApplication _classicModeForHostingExtensionContainedInApplication:]
  -[SBApplication deleteSnapshotForContext:]
  -[SBApplication _useSupportedTypesForSplashBoard]
  -[SBApplication _defaultPNGNameUsingFallbacksWithSceneID:contentOverridesContext:]
  -[SBApplication shouldReceiveSourceApplicationContextFromOriginatingApplication:]
  -[SBApplication usesEdgeNetwork]
  -[SBApplication usesWiFiNetwork]
  -[SBApplication initWithApplicationInfo:]
  -[SBApplication _baseSceneIdentifier]
  -[SBApplication setNextWakeDate:]
  -[SBApplication showsProgress]
  -[SBApplication _internalProcessState]
  -[SBApplication _setCurrentClassicMode:]
  -[SBApplication _dataStore]
  -[SBApplication classicAppZoomedInOrRequiresHiDPI]
  -[SBApplication restrictedClassicModeDisplayConfigurationForDisplayConfiguration:]
  -[SBApplication succinctDescription]
  -[SBApplication _calculateSupportedTypesForSplashBoard]
  -[SBApplication setUsesEdgeNetwork:]
  -[SBApplication labelAccessoryTypeForIcon:]
  -[SBApplication classicAppFullScreen]
  -[SBApplication _defaultPNGNameFromSuspensionSettingsWithExpiration:sceneID:]
  -[SBApplication _classicModeForHostingExtensionContainedInThisApplicationInUnknownHostingHierarchy]
  -[SBApplication nextWakeDate]
  -[SBApplication isSameExecutableAsApplication:]
  -[SBApplication _snapshotsWithImageName:sceneHandle:launchingSize:launchingScale:contentTypeMask:statusBarStateMask:launchingOrientation:contentOverridesContext:userInterfaceStyle:displayEdgeInfo:]
  -[SBApplication _didSuspend]
  -[SBApplication _didExitWithContext:]
  -[SBApplication includesStatusBarInClassicJail]
  -[SBApplication _updateRecentlyUpdatedTimer]
  -[SBApplication icon:unmaskedImageWithInfo:]
  -[SBApplication _defaultLaunchImageBaseName]
  -[SBApplication _classicModeFromSupportedTypes]
  -[SBApplication iconSupportsUninstall:]
  -[SBApplication _setClassicAppZoomedIn:]
  -[SBApplication iconDisallowsLaunchForObscuredReason:]
  -[SBApplication setDynamicApplicationShortcutItems:]
  -[SBApplication KJHKJHw39rq9w87q903475q0983rskjd]
  -[SBApplication formattedAccessoryStringForIcon:]
  -[SBApplication isSpringBoard]
  -[SBApplication setUsesWiFiNetwork:]
  -[SBApplication _classicAppScaledOnPhone]
  -[SBApplication dynamicApplicationShortcutItems]
  -[SBApplication legacyVOIPPeriodicWakeScheduler]
  -[SBApplication isInsetForHomeAffordance]
  -[SBApplication _resetLaunchImageIngestionStatus]
  -[SBApplication isFaceTime]
  -[SBApplication takeStatusBarStyleOverridesAssertion:]
  -[SBApplication _initializationContext]
  -[SBApplication failedAutoLaunchCountForVOIP]
  -[SBApplication imageForSnapshot:interfaceOrientation:]
  -[SBApplication _classicMode]
  -[SBApplication _supportsApplicationType:]
  -[SBApplication _purgeAndResetStaticDefaultImagesInSnapshotManifest]
  -[SBApplication flushSnapshotsForSceneID:]
  -[SBApplication createDownscaledVariantForSnapshot:sceneHandle:scaleFactor:didSaveImage:]
  -[SBApplication cachedImageForSnapshot:interfaceOrientation:]
  -[SBApplication refreshLaunchImagesInSnapshotManifestIfNeeded]
  -[SBApplication _screenTypeForClassicMode:]
  -[SBApplication _ingestDefaultPNGsInManifest:withLaunchImageBaseName:]
  -[SBApplication bestSnapshotWithImageName:sceneHandle:variantID:scale:size:contentTypeMask:statusBarStateMask:launchingOrientation:contentOverridesContext:userInterfaceStyle:displayEdgeInfo:]
  -[SBApplication canShowSystemVolumeHUDForCategory:forSceneIdentifier:]
  -[SBApplication badgeNumberOrStringForIcon:]
  -[SBApplication dataUsage]
  -[SBApplication bundleIdentifier]
  -[SBApplication setRestoringIcon:]
  -[SBApplication _canLaunchInClassicMode:]
  -[SBApplication _exposeRealDisplayCornerRadii]
  -[SBApplication _bypassesClassicMode]
  -[SBApplication _setRecentlyUpdated:]
  -[SBApplication _isNewlyInstalled]
  -[SBApplication isUninstallSupported]
  -[SBApplication _invalidateStatusBarStyleOverridesAssertions]
  -[SBApplication _processWillLaunch:]
  -[SBApplication wantsLegacyFullscreenInterfaceOrientationBehaviors]
  -[SBApplication _preferredImagePathInBundle:baseResourceName:ofType:forMainScene:size:scale:outScale:]
  -[SBApplication isCacheCleaningTerminationAssertionHeld]
  -[SBApplication displayName]
  -[SBApplication _setDefaultClassicModeOverride:]
  -[SBApplication snapshotFrameForClassicInsideBounds:forOrientation:scaleFactor:inReferenceSpace:]
  -[SBApplication _xbactivity_saveSnapshotForSceneHandle:context:completion:]
  -[SBApplication setShowsProgress:]
  -[SBApplication descriptionWithMultilinePrefix:]
  -[SBApplication isMedusaCapable]
  -[SBApplication _updateProcess:withState:]
  -[SBApplication preHeatForUserLaunchIfNecessaryWithAbsoluteTime:andContinuousTime:]
  -[SBApplication icon:displayNameForObscuredDisabledLaunchForLocation:]
  -[SBApplication setPlayingAudio:]
  -[SBApplication _calculateSupportedTypesLazilyIfNecessary]
  -[SBApplication hasShownDataPlanAlertSinceLock]
  -[SBApplication isConnectedToExternalAccessory]
  -[SBApplication isNowRecordingApplication]
  -[SBApplication defaultLaunchingSizeForDisplayConfiguration:]
  -[SBApplication descriptionBuilderWithMultilinePrefix:]
  -[SBApplication isWebApplication]
  -[SBApplication _ingestInfoPlistImagesInManifest:]
  -[SBApplication _supportedTypeForClassicModeNone]
  -[SBApplication _noteIconDataSourceDidChange]
  -[SBApplication _applicationRestorationCheckState]
  -[SBApplication _classicAppScaledPhoneOnPad]
  -[SBApplication isPlayingAudio]
  -[SBApplication _recalculateApplicationSupportedTypes]


SBTelephonyManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <STTelephonyStateObserver>
 @property  TUCall *incomingCall
 @property  TUCall *activeCall
 @property  TUCall *heldCall
 @property  TUCall *outgoingCall
 @property  CoreTelephonyClient *coreTelephonyClient
 @property  STTelephonyStateProvider *telephonyStateProvider
 @property  STWifiStatusDomain *wifiDomain
 @property  SBBluetoothController *bluetoothController
 @property  NSString *cachedSlot1CountryCode
 @property  NSString *cachedSlot2CountryCode
 @property  NSString *cachedSlot1SIMStatus
 @property  NSString *cachedSlot2SIMStatus
 @property  unsigned long dataConnectionAvailabilityWithCurrentCalls
 @property  BOOL cellDataSwitchingEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTelephonyManager sharedTelephonyManager]
  +[SBTelephonyManager sharedTelephonyManagerCreatingIfNecessary:]
  +[SBTelephonyManager defaultTelephonyCenter]

  // instance methods
  -[SBTelephonyManager displayedCall]
  -[SBTelephonyManager incomingCall]
  -[SBTelephonyManager disconnectAllCalls]
  -[SBTelephonyManager setCachedSlot2SIMStatus:]
  -[SBTelephonyManager coreTelephonyClient]
  -[SBTelephonyManager setCachedSlot2CountryCode:]
  -[SBTelephonyManager _anySubscriptionSlotWithSIMPresent]
  -[SBTelephonyManager _dataConnectedSubscriptionSlot]
  -[SBTelephonyManager setCoreTelephonyClient:]
  -[SBTelephonyManager setOutgoingCall:]
  -[SBTelephonyManager isEndpointOnCurrentDevice]
  -[SBTelephonyManager containsCellularRadio]
  -[SBTelephonyManager _callCountForService:]
  -[SBTelephonyManager disconnectCallAndActivateHeld]
  -[SBTelephonyManager heldCallExists]
  -[SBTelephonyManager init]
  -[SBTelephonyManager _provisioningUpdateWithStatus:slot:]
  -[SBTelephonyManager numberOfNetworkTetheredDevices]
  -[SBTelephonyManager isTTYEnabled]
  -[SBTelephonyManager preHeatDataLinkForDomains:]
  -[SBTelephonyManager queue_setFastDormancySuspended:withConnection:]
  -[SBTelephonyManager _otherSubscriptionSlotIfSIMPresent:]
  -[SBTelephonyManager heldCall]
  -[SBTelephonyManager swapCalls]
  -[SBTelephonyManager outgoingCallExists]
  -[SBTelephonyManager updateCalls]
  -[SBTelephonyManager _secondarySubscriptionSlot]
  -[SBTelephonyManager cachedSlot2SIMStatus]
  -[SBTelephonyManager isUsingVPNConnection]
  -[SBTelephonyManager _primaryCarrierBundleInfo]
  -[SBTelephonyManager _handleTelephonyDaemonRestart]
  -[SBTelephonyManager hasCellularData]
  -[SBTelephonyManager setNetworkRegistrationEnabled:]
  -[SBTelephonyManager .cxx_destruct]
  -[SBTelephonyManager _secondaryMobileEquipmentInfo]
  -[SBTelephonyManager _setCurrentActivationAlertItem:]
  -[SBTelephonyManager dumpBasebandState:]
  -[SBTelephonyManager setIncomingCall:]
  -[SBTelephonyManager inCallDuration]
  -[SBTelephonyManager multipleCallsExist]
  -[SBTelephonyManager _queue_noteWirelessModemDynamicStoreChanged]
  -[SBTelephonyManager _performQueryInBackground:withMainQueueResultHandler:]
  -[SBTelephonyManager subscriptionInfoDidChangeForStateProvider:slot:]
  -[SBTelephonyManager telephonyStateProvider]
  -[SBTelephonyManager updateLocale]
  -[SBTelephonyManager isEmergencyCallActive]
  -[SBTelephonyManager dataConnectionAvailabilityWithCurrentCalls]
  -[SBTelephonyManager setCachedSlot1SIMStatus:]
  -[SBTelephonyManager _serverConnectionDidError:]
  -[SBTelephonyManager inCallUsingSpeakerOrReceiver]
  -[SBTelephonyManager _subscriptionInfoForCall:]
  -[SBTelephonyManager outgoingCall]
  -[SBTelephonyManager _setIsInEmergencyCallbackMode:]
  -[SBTelephonyManager cachedSlot2CountryCode]
  -[SBTelephonyManager setFastDormancySuspended:]
  -[SBTelephonyManager cachedSlot1CountryCode]
  -[SBTelephonyManager isInEmergencyCallbackMode]
  -[SBTelephonyManager _primarySubscriptionInfo]
  -[SBTelephonyManager callCount]
  -[SBTelephonyManager _subscriptionSlotIfSIMPresent:]
  -[SBTelephonyManager _primarySubscriptionSlot]
  -[SBTelephonyManager activeCallExists]
  -[SBTelephonyManager bluetoothController]
  -[SBTelephonyManager _updateNetworkLocale]
  -[SBTelephonyManager disconnectDisplayedCall]
  -[SBTelephonyManager _phoneApp]
  -[SBTelephonyManager hasCellularTelephony]
  -[SBTelephonyManager carrierDisabledApplicationIDs]
  -[SBTelephonyManager _avSystemControllerDidError:]
  -[SBTelephonyManager setCachedSlot1CountryCode:]
  -[SBTelephonyManager updateSpringBoard]
  -[SBTelephonyManager observeValueForKeyPath:ofObject:change:context:]
  -[SBTelephonyManager isCellDataSwitchingEnabled]
  -[SBTelephonyManager isNetworkRegistrationEnabled]
  -[SBTelephonyManager telephonyAudioChangeHandler]
  -[SBTelephonyManager _callsForService:]
  -[SBTelephonyManager isNetworkTethering]
  -[SBTelephonyManager wifiDomain]
  -[SBTelephonyManager activeCall]
  -[SBTelephonyManager _dataPreferredSubscriptionSlotIfSIMPresent]
  -[SBTelephonyManager setCellDataSwitchingEnabled:]
  -[SBTelephonyManager disconnectIncomingCall]
  -[SBTelephonyManager telephonyCallCount]
  -[SBTelephonyManager setHeldCall:]
  -[SBTelephonyManager incomingCallExists]
  -[SBTelephonyManager _setIsNetworkTethering:withNumberOfDevices:]
  -[SBTelephonyManager _backgroundQueryQueue]
  -[SBTelephonyManager setActiveCall:]
  -[SBTelephonyManager emergencyCallSupported]
  -[SBTelephonyManager isUsingSlowDataConnection]
  -[SBTelephonyManager _updateState]
  -[SBTelephonyManager carrierBundleInfoDidChangeForStateProvider:slot:]
  -[SBTelephonyManager _secondarySubscriptionInfo]
  -[SBTelephonyManager cachedSlot1SIMStatus]
  -[SBTelephonyManager initWithStateProvider:wifiDomain:bluetoothController:]
  -[SBTelephonyManager _secondaryCarrierBundleInfo]
  -[SBTelephonyManager handleCallControlFailure:]
  -[SBTelephonyManager _serverConnection]
  -[SBTelephonyManager hasNonCellularNetworkConnection]
  -[SBTelephonyManager inCall]
  -[SBTelephonyManager _primaryMobileEquipmentInfo]
  -[SBTelephonyManager faceTimeAudioCallCount]
  -[SBTelephonyManager callEventHandler:]


SBInlineGridToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
 @property  SBAppLayout *fullScreenAppLayout
 @property  SBSwitcherModifier *multitaskingModifier

  // instance methods
  -[SBInlineGridToFullScreenSwitcherModifier homeScreenBackdropBlurType]
  -[SBInlineGridToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBInlineGridToFullScreenSwitcherModifier scaleForIndex:]
  -[SBInlineGridToFullScreenSwitcherModifier topMostLayoutElements]
  -[SBInlineGridToFullScreenSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBInlineGridToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBInlineGridToFullScreenSwitcherModifier cardCornerRadiiForIndex:]
  -[SBInlineGridToFullScreenSwitcherModifier opacityForIndex:]
  -[SBInlineGridToFullScreenSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBInlineGridToFullScreenSwitcherModifier frameForIndex:]
  -[SBInlineGridToFullScreenSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBInlineGridToFullScreenSwitcherModifier homeScreenDimmingAlpha]
  -[SBInlineGridToFullScreenSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBInlineGridToFullScreenSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBInlineGridToFullScreenSwitcherModifier .cxx_destruct]
  -[SBInlineGridToFullScreenSwitcherModifier titleOpacityForIndex:]
  -[SBInlineGridToFullScreenSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBInlineGridToFullScreenSwitcherModifier transitionWillBegin]
  -[SBInlineGridToFullScreenSwitcherModifier darkeningAlphaForIndex:]
  -[SBInlineGridToFullScreenSwitcherModifier plusButtonAlpha]
  -[SBInlineGridToFullScreenSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBInlineGridToFullScreenSwitcherModifier plusButtonStyle]
  -[SBInlineGridToFullScreenSwitcherModifier isContainerStatusBarVisible]
  -[SBInlineGridToFullScreenSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBInlineGridToFullScreenSwitcherModifier multitaskingModifier]
  -[SBInlineGridToFullScreenSwitcherModifier _isIndexFullScreenAppLayout:]
  -[SBInlineGridToFullScreenSwitcherModifier _unselectedCardScale]
  -[SBInlineGridToFullScreenSwitcherModifier fullScreenAppLayout]
  -[SBInlineGridToFullScreenSwitcherModifier initWithTransitionID:fullScreenAppLayout:multitaskingModifier:fullscreenCornerRadii:dimInactiveCards:]


SBZoomView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIStatusBar *statusBar
 @property  UIView *contentView

  // class methods
  +[SBZoomView _chromeStatusBarImageForInterfaceOrientation:]

  // instance methods
  -[SBZoomView setStatusBar:]
  -[SBZoomView _shouldAnimatePropertyWithKey:]
  -[SBZoomView statusBar]
  -[SBZoomView initWithFrame:]
  -[SBZoomView dealloc]
  -[SBZoomView contentView]
  -[SBZoomView .cxx_destruct]
  -[SBZoomView _initWithFrame:]


SBFullscreenZoomView : SBZoomView
 @property  id surface

  // instance methods
  -[SBFullscreenZoomView _initWithView:displayConfiguration:]
  -[SBFullscreenZoomView .cxx_destruct]
  -[SBFullscreenZoomView initWithView:containingSceneSnapshot:forDisplayConfiguration:]
  -[SBFullscreenZoomView surface]
  -[SBFullscreenZoomView initWithContainingBounds:contentFrame:statusBarFrame:snapshot:snapshotOrientation:interfaceOrientation:doubleHeightStatusBar:preventSplit:needsZoomFilter:asyncDecodeImage:forJail:]
  -[SBFullscreenZoomView _addBlackBackground]
  -[SBFullscreenZoomView _initWithFrame:]


SBClippedZoomView : SBZoomView
  // instance methods
  -[SBClippedZoomView .cxx_destruct]
  -[SBClippedZoomView initWithClippingFrame:fullscreenZoomView:]


SBAppSwitcherOrbGestureAnimationSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  SBFFluidBehaviorSettings *popToSwitcherSettings
 @property  SBFFluidBehaviorSettings *peekingAndPanningSettings
 @property  SBFFluidBehaviorSettings *breathingSettings
 @property  double response

  // class methods
  +[SBAppSwitcherOrbGestureAnimationSettings settingsControllerModule]

  // instance methods
  -[SBAppSwitcherOrbGestureAnimationSettings setDefaultValues]
  -[SBAppSwitcherOrbGestureAnimationSettings .cxx_destruct]
  -[SBAppSwitcherOrbGestureAnimationSettings setResponse:]
  -[SBAppSwitcherOrbGestureAnimationSettings response]
  -[SBAppSwitcherOrbGestureAnimationSettings popToSwitcherSettings]
  -[SBAppSwitcherOrbGestureAnimationSettings peekingAndPanningSettings]
  -[SBAppSwitcherOrbGestureAnimationSettings breathingSettings]
  -[SBAppSwitcherOrbGestureAnimationSettings setPopToSwitcherSettings:]
  -[SBAppSwitcherOrbGestureAnimationSettings setPeekingAndPanningSettings:]
  -[SBAppSwitcherOrbGestureAnimationSettings setBreathingSettings:]


SBGuidedAccessListener : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL isGuidedAccessActive

  // class methods
  +[SBGuidedAccessListener sharedGuidedAccessListener]

  // instance methods
  -[SBGuidedAccessListener setIsGuidedAccessActive:]
  -[SBGuidedAccessListener init]
  -[SBGuidedAccessListener guidedAccessWasActivated]
  -[SBGuidedAccessListener isGuidedAccessActive]
  -[SBGuidedAccessListener guidedAccessWasDeactivated]


SBVolumeControl : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBVolumeHUDViewControllerDelegate, PTSettingsKeyObserver, SBAVSystemControllerCacheObserver>
 @property  NSString *lastDisplayedCategory
 @property  NSArray *activeAudioRouteTypes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBVolumeControl sharedInstance]
  +[SBVolumeControl _isVolumeChangeAllowedForState:error:]

  // instance methods
  -[SBVolumeControl volumeHUDViewControllerRequestsDismissal:]
  -[SBVolumeControl _presentVolumeHUDIfDisplayable:orRefreshIfPresentedWithReason:]
  -[SBVolumeControl volumeStepDown]
  -[SBVolumeControl _audioRouteTypeForOutputDevice:]
  -[SBVolumeControl settings:changedValueForKey:]
  -[SBVolumeControl _updateVolumeLimit:]
  -[SBVolumeControl _configureVolumeHUDViewControllerWithVolume:]
  -[SBVolumeControl _updateEffectiveVolume:]
  -[SBVolumeControl lastDisplayedCategory]
  -[SBVolumeControl _updateEUVolumeSettings]
  -[SBVolumeControl _getMediaVolumeForIAP]
  -[SBVolumeControl cancelVolumeEvent]
  -[SBVolumeControl _isCategoryAlwaysHidden:]
  -[SBVolumeControl acquireVolumeHUDHiddenAssertionForReason:]
  -[SBVolumeControl isEUDevice]
  -[SBVolumeControl cache:didUpdateVolumeLimitEnforced:]
  -[SBVolumeControl clearAlwaysHiddenCategories]
  -[SBVolumeControl isEUVolumeLimitSet]
  -[SBVolumeControl _isHUDDisplayable]
  -[SBVolumeControl avSystemControllerDispatchQueue]
  -[SBVolumeControl .cxx_destruct]
  -[SBVolumeControl _serverConnectionDied:]
  -[SBVolumeControl _turnOnScreenIfNecessaryForEULimit:]
  -[SBVolumeControl setVolume:forCategory:]
  -[SBVolumeControl _volumeStepUp:]
  -[SBVolumeControl _dispatchAVSystemControllerAsync:]
  -[SBVolumeControl _audioRouteTypeForActiveAudioRoute:withAttributes:]
  -[SBVolumeControl cache:didUpdateActiveAudioRoutingWithRoute:routeAttributes:activeOutputDevices:]
  -[SBVolumeControl isEUVolumeLimitEnabled]
  -[SBVolumeControl _dispatchAVSystemControllerSync:]
  -[SBVolumeControl _isVolumeHUDVisibleOrFading]
  -[SBVolumeControl handleVolumeButtonWithType:down:]
  -[SBVolumeControl wouldShowAtLeastAYellowWarningForVolume:]
  -[SBVolumeControl toggleMute]
  -[SBVolumeControl _HUDIsDisplayableForCategory:]
  -[SBVolumeControl hideVolumeHUDIfVisible]
  -[SBVolumeControl _shouldRouteChangeResultInPresentingVolumeHUDWhenTransitioningFrom:toAudioRoutes:]
  -[SBVolumeControl _HUDIsDisplayableInCurrentSpringBoardContext]
  -[SBVolumeControl activeAudioRouteTypes]
  -[SBVolumeControl _setMediaVolumeForIAP:]
  -[SBVolumeControl _presentVolumeHUDWithVolume:]
  -[SBVolumeControl setActiveCategoryVolume:]
  -[SBVolumeControl _effectiveVolumeChanged:]
  -[SBVolumeControl existingVolumeHUDViewController]
  -[SBVolumeControl _controlCenterDidDismiss:]
  -[SBVolumeControl _effectiveVolume]
  -[SBVolumeControl changeVolumeByDelta:]
  -[SBVolumeControl _audioRouteTypeForTelephonyDeviceType:]
  -[SBVolumeControl isEUVolumeLimitEnforced]
  -[SBVolumeControl increaseVolume]
  -[SBVolumeControl cache:didUpdateVolumeLimit:]
  -[SBVolumeControl addAlwaysHiddenCategory:]
  -[SBVolumeControl _resetMediaServerConnection]
  -[SBVolumeControl _outputDevicesRepresentWirelessSplitterGroup:]
  -[SBVolumeControl removeAlwaysHiddenCategory:]
  -[SBVolumeControl presentedVolumeHUDViewController]
  -[SBVolumeControl _HUDIsDisplayableForLastEventCategory]
  -[SBVolumeControl _updateAudioRoutesIfNecessary:forRoute:withAttributes:andOutputDevices:]
  -[SBVolumeControl _isVolumeHUDVisible]
  -[SBVolumeControl _controlCenterWillPresent:]
  -[SBVolumeControl _userAcknowledgedEUEnforcement:]
  -[SBVolumeControl euVolumeLimit]
  -[SBVolumeControl _updateVolumeLimitEnforced:]
  -[SBVolumeControl userHasAcknowledgedEUVolumeLimit]
  -[SBVolumeControl _sendEUVolumeLimitAcknowledgementIfNecessary]
  -[SBVolumeControl decreaseVolume]
  -[SBVolumeControl initWithHUDController:ringerControl:telephonyManager:conferenceManager:]
  -[SBVolumeControl volumeStepUp]
  -[SBVolumeControl _calcButtonRepeatDelay]


SBUIStartupFromOverlayAnimationController : SBUIMainScreenAnimationController
 @property  BSAnimationSettings *animationSettings
 @property  BOOL waitsForAppActivation

  // instance methods
  -[SBUIStartupFromOverlayAnimationController initWithTransitionContextProvider:overlay:]
  -[SBUIStartupFromOverlayAnimationController .cxx_destruct]
  -[SBUIStartupFromOverlayAnimationController _shouldDismissBanner]
  -[SBUIStartupFromOverlayAnimationController setAnimationSettings:]
  -[SBUIStartupFromOverlayAnimationController _prepareAnimation]
  -[SBUIStartupFromOverlayAnimationController animationSettings]
  -[SBUIStartupFromOverlayAnimationController _cleanupAnimation]
  -[SBUIStartupFromOverlayAnimationController _startAnimation]
  -[SBUIStartupFromOverlayAnimationController initWithTransitionContextProvider:]
  -[SBUIStartupFromOverlayAnimationController _waitsForActivatingSceneContentAvailableIfNecessary]
  -[SBUIStartupFromOverlayAnimationController waitsForAppActivation]
  -[SBUIStartupFromOverlayAnimationController setWaitsForAppActivation:]


SBInlineEmptyGridSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBInlineEmptyGridSwitcherModifier homeScreenBackdropBlurType]
  -[SBInlineEmptyGridSwitcherModifier visibleAppLayouts]
  -[SBInlineEmptyGridSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBInlineEmptyGridSwitcherModifier homeScreenDimmingAlpha]
  -[SBInlineEmptyGridSwitcherModifier init]
  -[SBInlineEmptyGridSwitcherModifier appLayoutsToCacheFullsizeSnapshots]


SBHUDDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBHUDDomain domainName]
  +[SBHUDDomain rootSettings]
  +[SBHUDDomain rootSettingsClass]
  +[SBHUDDomain domainGroupName]


SBHomeToGridSwitcherModifier : SBHomeToSwitcherSwitcherModifier
  // instance methods
  -[SBHomeToGridSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeToGridSwitcherModifier visibleAppLayouts]
  -[SBHomeToGridSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeToGridSwitcherModifier scaleForIndex:]
  -[SBHomeToGridSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeToGridSwitcherModifier topMostLayoutElements]
  -[SBHomeToGridSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeToGridSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeToGridSwitcherModifier wallpaperStyle]
  -[SBHomeToGridSwitcherModifier cardCornerRadiiForIndex:]
  -[SBHomeToGridSwitcherModifier opacityForIndex:]
  -[SBHomeToGridSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeToGridSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeToGridSwitcherModifier frameForIndex:]
  -[SBHomeToGridSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBHomeToGridSwitcherModifier titleOpacityForIndex:]
  -[SBHomeToGridSwitcherModifier shadowOpacityForIndex:]
  -[SBHomeToGridSwitcherModifier appLayoutToScrollToDuringTransition]


SBContinuityDisplayItem : SBDisplayItem
 @property  SBBestAppSuggestion *appSuggestion

  // class methods
  +[SBContinuityDisplayItem continuityAppDisplayItemWithBundleIdentifier:appSuggestion:]

  // instance methods
  -[SBContinuityDisplayItem .cxx_destruct]
  -[SBContinuityDisplayItem isEqual:]
  -[SBContinuityDisplayItem initWithType:displayIdentifier:appSuggestion:]
  -[SBContinuityDisplayItem appSuggestion]


SBDeviceApplicationSceneStatusBarStateProvider : SBDeviceApplicationSceneStatusBarStateProvider_Base <SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneStatusBarStateProviderBaseSubclassesMustOverride, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneStatusBarStateProvider statusBarSceneIdentifier]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarStyle]
  -[SBDeviceApplicationSceneStatusBarStateProvider _initWithSceneHandle:]
  -[SBDeviceApplicationSceneStatusBarStateProvider _fallbackInterfaceOrientation]
  -[SBDeviceApplicationSceneStatusBarStateProvider sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarHiddenGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProvider overlayStatusBarData]
  -[SBDeviceApplicationSceneStatusBarStateProvider sceneToHandleStatusBarTapIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProvider statusBarAvoidanceFrame]
  -[SBDeviceApplicationSceneStatusBarStateProvider dealloc]
  -[SBDeviceApplicationSceneStatusBarStateProvider .cxx_destruct]
  -[SBDeviceApplicationSceneStatusBarStateProvider sceneWantsDeviceOrientationEventsEnabled]
  -[SBDeviceApplicationSceneStatusBarStateProvider sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarOrientationGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProvider _suppressInheritedPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider _handleStatusBarStyleOverridesToSuppressUpdate]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarStyleForPartWithIdentifier:suppressingInherited:]
  -[SBDeviceApplicationSceneStatusBarStateProvider statusBarStyleOverridesToSuppress]
  -[SBDeviceApplicationSceneStatusBarStateProvider _performUpdateWith:actions:]
  -[SBDeviceApplicationSceneStatusBarStateProvider classicApplicationSceneHandleIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProvider _anyObserverWants:]
  -[SBDeviceApplicationSceneStatusBarStateProvider breadcrumbProvider]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarAppearsOutsideOfAJailedApp]
  -[SBDeviceApplicationSceneStatusBarStateProvider invalidate]
  -[SBDeviceApplicationSceneStatusBarStateProvider _statusBarAlpha]
  -[SBDeviceApplicationSceneStatusBarStateProvider invalidateStatusBarSettings]


SBHIDInterface : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBProximitySensorControlling>
 @property  BOOL proximityDetectionEnabled
 @property  BOOL pocketTouchesExpected
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHIDInterface sharedInstance]

  // instance methods
  -[SBHIDInterface setPocketTouchesExpected:]
  -[SBHIDInterface suspendMultitouchForSource:reason:]
  -[SBHIDInterface init]
  -[SBHIDInterface suspendProximityDetectionForSource:reason:]
  -[SBHIDInterface .cxx_destruct]
  -[SBHIDInterface suspendProximityDetectionAndMultitouchForSource:disableTapToWake:reason:]
  -[SBHIDInterface reevaluateHIDLockAssertionsForSource:]
  -[SBHIDInterface pocketTouchesExpected]
  -[SBHIDInterface isProximityDetectionEnabled]
  -[SBHIDInterface _reevaluateLockStateForSource:]
  -[SBHIDInterface setProximityDetectionEnabled:]
  -[SBHIDInterface _suspendProximity:suspendMultitouch:disableTapToWake:source:reason:]
  -[SBHIDInterface addStartupHIDLockAssertion]
  -[SBHIDInterface _setLockState:source:]
  -[SBHIDInterface resetProximityCalibration]
  -[SBHIDInterface removeHIDLockAssertion:source:]


SBUIStartupToUserSetupAppZoomInAnimationController : SBUIMainScreenAnimationController
  // instance methods
  -[SBUIStartupToUserSetupAppZoomInAnimationController _setHidden:]
  -[SBUIStartupToUserSetupAppZoomInAnimationController initWithTransitionContextProvider:overlay:]
  -[SBUIStartupToUserSetupAppZoomInAnimationController .cxx_destruct]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _shouldDismissBanner]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _prepareAnimation]
  -[SBUIStartupToUserSetupAppZoomInAnimationController animationSettings]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _cleanupAnimation]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _startAnimation]
  -[SBUIStartupToUserSetupAppZoomInAnimationController initWithTransitionContextProvider:]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _getTransitionWindow]
  -[SBUIStartupToUserSetupAppZoomInAnimationController _waitsForActivatingSceneContentAvailableIfNecessary]


SBGenerateLaunchSnapshotsAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  @? handler

  // instance methods
  -[SBGenerateLaunchSnapshotsAlertItem forcesModalAlertAppearance]
  -[SBGenerateLaunchSnapshotsAlertItem .cxx_destruct]
  -[SBGenerateLaunchSnapshotsAlertItem handler]
  -[SBGenerateLaunchSnapshotsAlertItem setHandler:]
  -[SBGenerateLaunchSnapshotsAlertItem behavesSuperModally]
  -[SBGenerateLaunchSnapshotsAlertItem initWithHandler:]
  -[SBGenerateLaunchSnapshotsAlertItem shouldShowInLockScreen]
  -[SBGenerateLaunchSnapshotsAlertItem configure:requirePasscodeForActions:]
  -[SBGenerateLaunchSnapshotsAlertItem regenerateApplications:]


SBLaunchSnapshotWaitingAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBLaunchSnapshotWaitingAlertItem forcesModalAlertAppearance]
  -[SBLaunchSnapshotWaitingAlertItem reappearsAfterLock]
  -[SBLaunchSnapshotWaitingAlertItem allowMenuButtonDismissal]
  -[SBLaunchSnapshotWaitingAlertItem reappearsAfterUnlock]
  -[SBLaunchSnapshotWaitingAlertItem behavesSuperModally]
  -[SBLaunchSnapshotWaitingAlertItem shouldShowInLockScreen]
  -[SBLaunchSnapshotWaitingAlertItem allowLockScreenDismissal]
  -[SBLaunchSnapshotWaitingAlertItem configure:requirePasscodeForActions:]


SBDefaultLaunchSnapshotTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDefaultLaunchSnapshotTestRecipe load]

  // instance methods
  -[SBDefaultLaunchSnapshotTestRecipe .cxx_destruct]
  -[SBDefaultLaunchSnapshotTestRecipe title]
  -[SBDefaultLaunchSnapshotTestRecipe handleVolumeIncrease]
  -[SBDefaultLaunchSnapshotTestRecipe handleVolumeDecrease]


SBHardwareButtonGestureParametersProviderBase : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHardwareButtonGestureParametersProvider, BSDescriptionProviding>
 @property  NSMapTable *observers
 @property  SBHardwareButtonGestureParameters *hardwareButtonGestureParameters
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHardwareButtonGestureParametersProviderBase setObservers:]
  -[SBHardwareButtonGestureParametersProviderBase .cxx_destruct]
  -[SBHardwareButtonGestureParametersProviderBase succinctDescriptionBuilder]
  -[SBHardwareButtonGestureParametersProviderBase observers]
  -[SBHardwareButtonGestureParametersProviderBase succinctDescription]
  -[SBHardwareButtonGestureParametersProviderBase hardwareButtonGestureParameters]
  -[SBHardwareButtonGestureParametersProviderBase descriptionWithMultilinePrefix:]
  -[SBHardwareButtonGestureParametersProviderBase descriptionBuilderWithMultilinePrefix:]
  -[SBHardwareButtonGestureParametersProviderBase addHardwareButtonGestureParametersObserver:]
  -[SBHardwareButtonGestureParametersProviderBase publishUpdatedParameters:]
  -[SBHardwareButtonGestureParametersProviderBase removeHardwareButtonGestureParametersObserver:]


SBRemoteTransientOverlayPresentationRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  SBTransientOverlayViewController *viewController
 @property  BOOL animated
 @property  SBSRemoteAlertPresentationTarget *presentationTarget
 @property  BOOL isScreenshotMarkup
 @property  BOOL shouldDismissSiri

  // instance methods
  -[SBRemoteTransientOverlayPresentationRequest copyWithZone:]
  -[SBRemoteTransientOverlayPresentationRequest viewController]
  -[SBRemoteTransientOverlayPresentationRequest setAnimated:]
  -[SBRemoteTransientOverlayPresentationRequest presentationTarget]
  -[SBRemoteTransientOverlayPresentationRequest setPresentationTarget:]
  -[SBRemoteTransientOverlayPresentationRequest isAnimated]
  -[SBRemoteTransientOverlayPresentationRequest .cxx_destruct]
  -[SBRemoteTransientOverlayPresentationRequest initWithViewController:]
  -[SBRemoteTransientOverlayPresentationRequest setShouldDismissSiri:]
  -[SBRemoteTransientOverlayPresentationRequest shouldDismissSiri]
  -[SBRemoteTransientOverlayPresentationRequest isScreenshotMarkup]
  -[SBRemoteTransientOverlayPresentationRequest setIsScreenshotMarkup:]


SBBiometricMonitorPearlDataSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BKDevicePearlDelegate, SBUIBiometricResourceObserver, SBBiometricMonitorDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL presenceDetectRunning
 @property  BOOL matchRunning
 @property  BOOL poseIsMarginal

  // instance methods
  -[SBBiometricMonitorPearlDataSource init]
  -[SBBiometricMonitorPearlDataSource dealloc]
  -[SBBiometricMonitorPearlDataSource .cxx_destruct]
  -[SBBiometricMonitorPearlDataSource biometricResource:observeEvent:]
  -[SBBiometricMonitorPearlDataSource removeObserver:]
  -[SBBiometricMonitorPearlDataSource _forEachObserver:]
  -[SBBiometricMonitorPearlDataSource addObserver:]
  -[SBBiometricMonitorPearlDataSource device:pearlEventOccurred:]
  -[SBBiometricMonitorPearlDataSource device:pearlStateChanged:]
  -[SBBiometricMonitorPearlDataSource matchRunning]
  -[SBBiometricMonitorPearlDataSource presenceDetectRunning]
  -[SBBiometricMonitorPearlDataSource poseIsMarginal]
  -[SBBiometricMonitorPearlDataSource initWithPearlDevice:]
  -[SBBiometricMonitorPearlDataSource _setMatching:]
  -[SBBiometricMonitorPearlDataSource _setFaceDetecting:]
  -[SBBiometricMonitorPearlDataSource _setPoseIsMarginal:]
  -[SBBiometricMonitorPearlDataSource _updateFaceDetecting]
  -[SBBiometricMonitorPearlDataSource _updateMatching]


SBVolumeHUDViewController : SBFTouchPassThroughViewController /usr/lib/libutil.dylib <UIViewControllerTransitioningDelegate, SBElasticAudioDataSource, SBElasticAudioVolumeViewControllerDelegate, SBHUDViewControlling>
 @property  SBElasticVolumeViewController *elasticAudioViewController
 @property  <SBVolumeHUDViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBVolumeHUDViewController viewDidLoad]
  -[SBVolumeHUDViewController animationControllerForDismissedController:]
  -[SBVolumeHUDViewController animationControllerForPresentedController:presentingController:sourceController:]
  -[SBVolumeHUDViewController init]
  -[SBVolumeHUDViewController .cxx_destruct]
  -[SBVolumeHUDViewController supportedInterfaceOrientations]
  -[SBVolumeHUDViewController _dismiss]
  -[SBVolumeHUDViewController isEqual:]
  -[SBVolumeHUDViewController _canShowWhileLocked]
  -[SBVolumeHUDViewController setDelegate:]
  -[SBVolumeHUDViewController viewDidLayoutSubviews]
  -[SBVolumeHUDViewController delegate]
  -[SBVolumeHUDViewController definesAnimatedDismissal]
  -[SBVolumeHUDViewController dismissAnimatedWithCompletion:]
  -[SBVolumeHUDViewController noteVolumeUpWasHit:]
  -[SBVolumeHUDViewController noteVolumeDownWasHit:]
  -[SBVolumeHUDViewController noteVolumeWillDeltaStepToVolume:]
  -[SBVolumeHUDViewController noteVolumeDidChange:]
  -[SBVolumeHUDViewController refreshAudioUI]
  -[SBVolumeHUDViewController elasticAudioViewControllerCurrentVolume:]
  -[SBVolumeHUDViewController elasticAudioViewController:updateCurrentVolumeToLevel:]
  -[SBVolumeHUDViewController elasticAudioViewControllerActiveAudioRouteTypes:]
  -[SBVolumeHUDViewController elasticAudioViewControllerActiveAudioCategory:]
  -[SBVolumeHUDViewController elasticAudioViewControllerShouldShowVolumeWarningForCurrentVolumeLevel:]
  -[SBVolumeHUDViewController elasticVolumeViewControllerNeedsDismissal:]
  -[SBVolumeHUDViewController _volumeHUDPresentationEdge]
  -[SBVolumeHUDViewController elasticAudioViewController]


_SBVolumeHUDViewControllerNullAnimator : SBUIAnimationPropertyAnimator
  // instance methods
  -[_SBVolumeHUDViewControllerNullAnimator init]


SBSystemPointerInteractionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIPointerInteractionDelegate>
 @property  UIWindow *window
 @property  UIView *activePointerRegionView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemPointerInteractionManager window]
  -[SBSystemPointerInteractionManager .cxx_destruct]
  -[SBSystemPointerInteractionManager pointerInteraction:willEnterRegion:animator:]
  -[SBSystemPointerInteractionManager registerView:delegate:]
  -[SBSystemPointerInteractionManager pointerInteraction:willExitRegion:animator:]
  -[SBSystemPointerInteractionManager pointerInteraction:styleForRegion:]
  -[SBSystemPointerInteractionManager unregisterView:]
  -[SBSystemPointerInteractionManager pointerInteraction:regionForRequest:defaultRegion:]
  -[SBSystemPointerInteractionManager initWithPointerInteractionWindow:]
  -[SBSystemPointerInteractionManager activePointerRegionView]


SBSceneManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSceneLayoutViewControllerDelegate, FBSceneManagerObserver, FBSceneDelegate, FBSceneManagerDelegate_Private, BSDescriptionProviding, BSInvalidatable, SBApplicationSceneHandleProviding, SBSceneLayoutSlaveTransactionProviding>
 @property  SBLayoutState *currentLayoutState
 @property  SBLayoutStateManager *_layoutStateManager
 @property  SBLayoutStateTransitionCoordinator *_layoutStateTransitionCoordinator
 @property  BOOL hidden
 @property  BOOL valid
 @property  FBSDisplayIdentity *displayIdentity
 @property  SBSceneLayoutWindow *window
 @property  SBSceneLayoutViewController *sceneLayoutViewController
 @property  SBPolicyAggregator *policyAggregator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSceneManager _layoutStateManagerClass]
  +[SBSceneManager _sceneLayoutWindowClass]
  +[SBSceneManager _applicationSceneHandleClass]

  // instance methods
  -[SBSceneManager sceneManager:didCreateScene:]
  -[SBSceneManager _noteDidCommitUpdateForScene:]
  -[SBSceneManager sceneManager:willDestroyScene:]
  -[SBSceneManager scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBSceneManager sceneManager:createDefaultTransitionContextForScene:]
  -[SBSceneManager scene:didPrepareUpdateWithContext:]
  -[SBSceneManager scene:didApplyUpdateWithContext:]
  -[SBSceneManager sceneManager:interceptUpdateForScene:withNewSettings:]
  -[SBSceneManager scene:didReceiveActions:]
  -[SBSceneManager scene:didCompleteUpdateWithContext:error:]
  -[SBSceneManager sceneManager:didDestroyScene:]
  -[SBSceneManager window]
  -[SBSceneManager sceneLayoutController:noteHasVisibleElements:]
  -[SBSceneManager externalApplicationSceneHandles]
  -[SBSceneManager _sceneIdentifierForBundleIdentifier:]
  -[SBSceneManager init]
  -[SBSceneManager sceneLayoutViewController]
  -[SBSceneManager _shouldRequestSnapshotActionsForScene:]
  -[SBSceneManager policyAggregator]
  -[SBSceneManager existingSceneHandleForSceneIdentity:]
  -[SBSceneManager addSlaveTransactionProvider:]
  -[SBSceneManager dealloc]
  -[SBSceneManager allScenes]
  -[SBSceneManager _windowShouldBeHidden]
  -[SBSceneManager _handleAction:forScene:]
  -[SBSceneManager currentLayoutState]
  -[SBSceneManager .cxx_destruct]
  -[SBSceneManager sceneIdentityForApplication:uniqueIdentifier:]
  -[SBSceneManager succinctDescriptionBuilder]
  -[SBSceneManager _reconnectSceneRemnant:forProcess:sceneManager:]
  -[SBSceneManager assertBackgroundedStatusForScenes:]
  -[SBSceneManager sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:]
  -[SBSceneManager isValid]
  -[SBSceneManager _setupLayoutStateTransitionCoordinator:]
  -[SBSceneManager setCurrentLayoutState:]
  -[SBSceneManager sceneIdentityForApplication:excludingIdentifiers:]
  -[SBSceneManager transientApplicationSceneHandleIdentityForApplication:]
  -[SBSceneManager displayIdentity]
  -[SBSceneManager slaveTransactionsForTransitionRequest:]
  -[SBSceneManager externalForegroundApplicationSceneHandles]
  -[SBSceneManager succinctDescription]
  -[SBSceneManager _noteObserversDidInvalidate]
  -[SBSceneManager _shouldTrackScenesForDeactivation]
  -[SBSceneManager existingSceneHandleForScene:]
  -[SBSceneManager _layoutStateManager]
  -[SBSceneManager _addReportedForegroundExternalApplicationSceneHandle:]
  -[SBSceneManager _shouldAutoHostScene:]
  -[SBSceneManager daemonScenes]
  -[SBSceneManager _sceneWindowLayoutStrategy]
  -[SBSceneManager _layoutStateTransitionCoordinator]
  -[SBSceneManager _doObserverCalloutWithBlock:]
  -[SBSceneManager _updateStateForScene:withSettings:]
  -[SBSceneManager removeObserver:]
  -[SBSceneManager _scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBSceneManager _createRootWindowScenePresentationBinder]
  -[SBSceneManager scenesForWorkspaceWithID:]
  -[SBSceneManager _scene:interceptUpdateWithNewSettings:]
  -[SBSceneManager initWithReference:]
  -[SBSceneManager addObserver:]
  -[SBSceneManager _shouldFenceTransitionForScene:updatedClientSettingsDiff:oldClientSettings:transitionContext:]
  -[SBSceneManager invalidate]
  -[SBSceneManager fetchOrCreateApplicationSceneHandleForRequest:]
  -[SBSceneManager _scene:willUpdateWithSettings:transitionContext:]
  -[SBSceneManager sceneIdentityForApplication:targetContentIdentifier:]
  -[SBSceneManager _removeReportedForegroundExternalApplicationSceneHandle:]
  -[SBSceneManager descriptionWithMultilinePrefix:]
  -[SBSceneManager removeSlaveTransactionProvider:]
  -[SBSceneManager newSceneIdentityForApplication:]
  -[SBSceneManager existingSceneHandleForPersistenceIdentifier:]
  -[SBSceneManager sceneIdentityForApplication:]
  -[SBSceneManager _newSceneLayoutViewController]
  -[SBSceneManager setHidden:]
  -[SBSceneManager _snapshotRequestsForSceneHandle:settings:]
  -[SBSceneManager descriptionBuilderWithMultilinePrefix:]
  -[SBSceneManager _noteDidChangeToVisibility:previouslyExisted:forScene:]
  -[SBSceneManager isHidden]


SBAppSwitcherPageServiceRemoteViewController : _UIRemoteViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <_SBUISwitcherPageHostInterface>
  // class methods
  +[SBAppSwitcherPageServiceRemoteViewController exportedInterface]
  +[SBAppSwitcherPageServiceRemoteViewController serviceViewControllerInterface]

  // instance methods
  -[SBAppSwitcherPageServiceRemoteViewController __shouldRemoteViewControllerFenceOperations]


SBRequestFolderSnapshotsSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  BOOL snapshotRequested

  // instance methods
  -[SBRequestFolderSnapshotsSwitcherEventResponse type]
  -[SBRequestFolderSnapshotsSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBRequestFolderSnapshotsSwitcherEventResponse initWithSnapshotRequest:]
  -[SBRequestFolderSnapshotsSwitcherEventResponse isSnapshotRequested]
  -[SBRequestFolderSnapshotsSwitcherEventResponse setSnapshotRequested:]


SBRemovalSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  SBAppLayout *appLayout
 @property  long long reason
 @property  unsigned long phase

  // instance methods
  -[SBRemovalSwitcherModifierEvent copyWithZone:]
  -[SBRemovalSwitcherModifierEvent appLayout]
  -[SBRemovalSwitcherModifierEvent phase]
  -[SBRemovalSwitcherModifierEvent .cxx_destruct]
  -[SBRemovalSwitcherModifierEvent type]
  -[SBRemovalSwitcherModifierEvent reason]
  -[SBRemovalSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBRemovalSwitcherModifierEvent initWithAppLayout:reason:phase:]


SBDashBoardSetupViewController : CSCoverSheetViewControllerBase /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome <CSEventHandling, UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardSetupViewController presentationPriority]
  -[SBDashBoardSetupViewController viewDidLoad]
  -[SBDashBoardSetupViewController aggregateBehavior:]
  -[SBDashBoardSetupViewController aggregateAppearance:]
  -[SBDashBoardSetupViewController presentationType]
  -[SBDashBoardSetupViewController .cxx_destruct]
  -[SBDashBoardSetupViewController initWithCoverSheetViewController:]
  -[SBDashBoardSetupViewController viewDidAppear:]
  -[SBDashBoardSetupViewController _startWifiScan]
  -[SBDashBoardSetupViewController handleEvent:]
  -[SBDashBoardSetupViewController _infoButtonTapped:]
  -[SBDashBoardSetupViewController setupView]
  -[SBDashBoardSetupViewController viewWillAppear:]
  -[SBDashBoardSetupViewController _isSecurityResearchDevice]
  -[SBDashBoardSetupViewController viewDidDisappear:]
  -[SBDashBoardSetupViewController viewWillDisappear:]
  -[SBDashBoardSetupViewController gestureRecognizer:shouldReceiveTouch:]
  -[SBDashBoardSetupViewController loadView]
  -[SBDashBoardSetupViewController _didClickHomeAffordance:]
  -[SBDashBoardSetupViewController _handleHoverEvent:]
  -[SBDashBoardSetupViewController _fetchLanguageFromTelephony]
  -[SBDashBoardSetupViewController _componentsRelevantToPointerSuppression]
  -[SBDashBoardSetupViewController isCyclingComponents:]
  -[SBDashBoardSetupViewController _stopCyclingComponents:]
  -[SBDashBoardSetupViewController _startCyclingComponents:withDelay:]
  -[SBDashBoardSetupViewController _cancelWifiScan]
  -[SBDashBoardSetupViewController _resetDisplayedLocalizedStringsImmediately:]
  -[SBDashBoardSetupViewController _animateComponentsForNewCycle]
  -[SBDashBoardSetupViewController _updateDisplayedStrings]
  -[SBDashBoardSetupViewController _incrementLocalizedStringsForNewCycle]
  -[SBDashBoardSetupViewController _importantLanguageIdentifiers]
  -[SBDashBoardSetupViewController _currentLanguageIdentifier]
  -[SBDashBoardSetupViewController _currentStringsDictionary]
  -[SBDashBoardSetupViewController _currentStoreRestrictedStringsDictionary]
  -[SBDashBoardSetupViewController _regulatoryInfoButtonTapped:]
  -[SBDashBoardSetupViewController _updateWifiPrimaryLanguageFromDiscoveredCountryCodes:]


SBSwitcherSwipeUpToSwitcherFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSwitcherSwipeUpToSwitcherFloatingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]


SBHomeGestureDismissableCoverSheetViewController : CSCoverSheetViewControllerBase /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome <SBHomeGestureParticipantDelegate, SBSystemGestureRecognizerDelegate>
 @property  SBHomeGesturePanGestureRecognizer *bottomEdgeRecognizer
 @property  BOOL wantsHomeGestureOwnership
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  long long homeGestureParticipantIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureDismissableCoverSheetViewController setHomeGestureParticipant:]
  -[SBHomeGestureDismissableCoverSheetViewController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBHomeGestureDismissableCoverSheetViewController _addOrRemoveGestureForCurrentSettings]
  -[SBHomeGestureDismissableCoverSheetViewController viewForSystemGestureRecognizer:]
  -[SBHomeGestureDismissableCoverSheetViewController homeGestureParticipant]
  -[SBHomeGestureDismissableCoverSheetViewController .cxx_destruct]
  -[SBHomeGestureDismissableCoverSheetViewController gestureRecognizerShouldBegin:]
  -[SBHomeGestureDismissableCoverSheetViewController _requestHomeGestureOwnership]
  -[SBHomeGestureDismissableCoverSheetViewController viewDidAppear:]
  -[SBHomeGestureDismissableCoverSheetViewController setWantsHomeGestureOwnership:]
  -[SBHomeGestureDismissableCoverSheetViewController wantsHomeGestureOwnership]
  -[SBHomeGestureDismissableCoverSheetViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBHomeGestureDismissableCoverSheetViewController _relinquishHomeGestureOwnership]
  -[SBHomeGestureDismissableCoverSheetViewController viewWillDisappear:]
  -[SBHomeGestureDismissableCoverSheetViewController gestureRecognizer:shouldReceiveTouch:]
  -[SBHomeGestureDismissableCoverSheetViewController homeGestureParticipantIdentifier]
  -[SBHomeGestureDismissableCoverSheetViewController _handleBottomEdgeGesture:]
  -[SBHomeGestureDismissableCoverSheetViewController _handleBottomEdgeGestureBegan:]
  -[SBHomeGestureDismissableCoverSheetViewController _handleBottomEdgeGestureChanged:]
  -[SBHomeGestureDismissableCoverSheetViewController _handleBottomEdgeGestureEnded:]
  -[SBHomeGestureDismissableCoverSheetViewController shouldDismissForHomeGestureRecognizer:]
  -[SBHomeGestureDismissableCoverSheetViewController bottomEdgeRecognizer]
  -[SBHomeGestureDismissableCoverSheetViewController setBottomEdgeRecognizer:]


SBFloatingSwitcherSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL showFloats
 @property  double switcherCardScale
 @property  double cardSpacing
 @property  double dimmingAlpha
 @property  double leadingEdgeRubberbandingRange
 @property  double perCardAdditionalScaleCoefficient
 @property  double scaleCurveExponent
 @property  double opacityMinimumDistanceThreshold
 @property  double opacityFadeDistance
 @property  double darkeningMinimumDistanceThreshold
 @property  double darkeningFadeDistance
 @property  double maximumDarkening
 @property  double titleAndIconOpacityMinimumDistanceThreshold
 @property  double titleAndIconOpacityFadeDistance
 @property  double titleOpacityMinimumDistanceThreshold
 @property  double titleOpacityFadeDistance
 @property  double overshootPullbackDelayOffscreen
 @property  double overshootPullbackDelayOnscreen
 @property  MTLumaDodgePillSettings *homeAffordanceSettings

  // class methods
  +[SBFloatingSwitcherSettings settingsControllerModule]

  // instance methods
  -[SBFloatingSwitcherSettings setDefaultValues]
  -[SBFloatingSwitcherSettings switcherCardScale]
  -[SBFloatingSwitcherSettings .cxx_destruct]
  -[SBFloatingSwitcherSettings setShowFloats:]
  -[SBFloatingSwitcherSettings showFloats]
  -[SBFloatingSwitcherSettings setDimmingAlpha:]
  -[SBFloatingSwitcherSettings dimmingAlpha]
  -[SBFloatingSwitcherSettings archiveValueForKey:]
  -[SBFloatingSwitcherSettings setSwitcherCardScale:]
  -[SBFloatingSwitcherSettings setCardSpacing:]
  -[SBFloatingSwitcherSettings setLeadingEdgeRubberbandingRange:]
  -[SBFloatingSwitcherSettings setPerCardAdditionalScaleCoefficient:]
  -[SBFloatingSwitcherSettings setScaleCurveExponent:]
  -[SBFloatingSwitcherSettings setOpacityMinimumDistanceThreshold:]
  -[SBFloatingSwitcherSettings setOpacityFadeDistance:]
  -[SBFloatingSwitcherSettings setDarkeningMinimumDistanceThreshold:]
  -[SBFloatingSwitcherSettings setDarkeningFadeDistance:]
  -[SBFloatingSwitcherSettings setMaximumDarkening:]
  -[SBFloatingSwitcherSettings setTitleAndIconOpacityMinimumDistanceThreshold:]
  -[SBFloatingSwitcherSettings setTitleAndIconOpacityFadeDistance:]
  -[SBFloatingSwitcherSettings setTitleOpacityMinimumDistanceThreshold:]
  -[SBFloatingSwitcherSettings setTitleOpacityFadeDistance:]
  -[SBFloatingSwitcherSettings setOvershootPullbackDelayOffscreen:]
  -[SBFloatingSwitcherSettings setOvershootPullbackDelayOnscreen:]
  -[SBFloatingSwitcherSettings homeAffordanceSettings]
  -[SBFloatingSwitcherSettings cardSpacing]
  -[SBFloatingSwitcherSettings leadingEdgeRubberbandingRange]
  -[SBFloatingSwitcherSettings perCardAdditionalScaleCoefficient]
  -[SBFloatingSwitcherSettings scaleCurveExponent]
  -[SBFloatingSwitcherSettings opacityMinimumDistanceThreshold]
  -[SBFloatingSwitcherSettings opacityFadeDistance]
  -[SBFloatingSwitcherSettings darkeningMinimumDistanceThreshold]
  -[SBFloatingSwitcherSettings darkeningFadeDistance]
  -[SBFloatingSwitcherSettings maximumDarkening]
  -[SBFloatingSwitcherSettings titleAndIconOpacityMinimumDistanceThreshold]
  -[SBFloatingSwitcherSettings titleAndIconOpacityFadeDistance]
  -[SBFloatingSwitcherSettings titleOpacityMinimumDistanceThreshold]
  -[SBFloatingSwitcherSettings titleOpacityFadeDistance]
  -[SBFloatingSwitcherSettings overshootPullbackDelayOffscreen]
  -[SBFloatingSwitcherSettings overshootPullbackDelayOnscreen]
  -[SBFloatingSwitcherSettings setHomeAffordanceSettings:]


SBSwitcherDisplayItemRemovalResolutionRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *displayItems

  // instance methods
  -[SBSwitcherDisplayItemRemovalResolutionRequest .cxx_destruct]
  -[SBSwitcherDisplayItemRemovalResolutionRequest displayItems]
  -[SBSwitcherDisplayItemRemovalResolutionRequest removalIntentTypeForDisplayItem:]
  -[SBSwitcherDisplayItemRemovalResolutionRequest setRemovalIntentType:forDisplayItem:]


SBOrientationAggdLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBSDisplayLayoutObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBOrientationAggdLogger _noteSignificantTimeChanged:]
  -[SBOrientationAggdLogger _keyboardWillHide:]
  -[SBOrientationAggdLogger init]
  -[SBOrientationAggdLogger _orientationLockChanged:]
  -[SBOrientationAggdLogger dealloc]
  -[SBOrientationAggdLogger .cxx_destruct]
  -[SBOrientationAggdLogger layoutMonitor:didUpdateDisplayLayout:withContext:]
  -[SBOrientationAggdLogger _bucketedElapsedTimeWithStartTime:]
  -[SBOrientationAggdLogger _saveOrientationLockAggdValues]
  -[SBOrientationAggdLogger _keyboardDidShow:]


SBInlineAppExposeLayoutElementViewController : SBLayoutElementViewController <SBLayoutStateTransitionObserver, SBMainDisplaySceneLayoutElementViewControlling>
 @property  BSCornerRadiusConfiguration *cornerRadiusConfiguration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInlineAppExposeLayoutElementViewController setShadowOffset:]
  -[SBInlineAppExposeLayoutElementViewController setShadowOpacity:]
  -[SBInlineAppExposeLayoutElementViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBInlineAppExposeLayoutElementViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBInlineAppExposeLayoutElementViewController setMaskDisplayCorners:forReason:]
  -[SBInlineAppExposeLayoutElementViewController configureWithWorkspaceEntity:forLayoutElement:layoutState:referenceFrame:]
  -[SBInlineAppExposeLayoutElementViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBInlineAppExposeLayoutElementViewController .cxx_destruct]
  -[SBInlineAppExposeLayoutElementViewController relinquishInlineContainerViewController]
  -[SBInlineAppExposeLayoutElementViewController prepareForReuse]
  -[SBInlineAppExposeLayoutElementViewController animationControllerForTransitionRequest:]
  -[SBInlineAppExposeLayoutElementViewController _newDisplayLayoutElementForEntity:]
  -[SBInlineAppExposeLayoutElementViewController SB_conformsToMainDisplaySceneLayoutElementViewControlling]
  -[SBInlineAppExposeLayoutElementViewController invalidate]
  -[SBInlineAppExposeLayoutElementViewController viewDidLayoutSubviews]
  -[SBInlineAppExposeLayoutElementViewController cornerRadiusConfiguration]
  -[SBInlineAppExposeLayoutElementViewController setCornerRadiusConfiguration:]


SBWalletPrearmRecognizer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBWalletPrearmRecognizer initWithDelegate:]
  -[SBWalletPrearmRecognizer dealloc]
  -[SBWalletPrearmRecognizer .cxx_destruct]
  -[SBWalletPrearmRecognizer _invalidate]
  -[SBWalletPrearmRecognizer invalidate]
  -[SBWalletPrearmRecognizer _computeDoubleTapTimeout]
  -[SBWalletPrearmRecognizer _invalidateForFailureReason:]
  -[SBWalletPrearmRecognizer _invalidateForSuccess]
  -[SBWalletPrearmRecognizer startRecognizing]
  -[SBWalletPrearmRecognizer menuButtonSinglePress]
  -[SBWalletPrearmRecognizer menuButtonDoublePress]


SBReduceMotionGridSwitcherModifier : SBGridSwitcherModifier
  // instance methods
  -[SBReduceMotionGridSwitcherModifier homeScreenScale]
  -[SBReduceMotionGridSwitcherModifier wallpaperScale]


_SBCameraLaunchCondition : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL met

  // class methods
  +[_SBCameraLaunchCondition conditionWithConditions:]
  +[_SBCameraLaunchCondition conditionWithValue:]

  // instance methods
  -[_SBCameraLaunchCondition isMet]
  -[_SBCameraLaunchCondition setMet:]


_SBAggregateCameraLaunchCondition : _SBCameraLaunchCondition
 @property  NSArray *conditions

  // instance methods
  -[_SBAggregateCameraLaunchCondition conditions]
  -[_SBAggregateCameraLaunchCondition isMet]
  -[_SBAggregateCameraLaunchCondition .cxx_destruct]
  -[_SBAggregateCameraLaunchCondition setConditions:]


SBCameraHardwareButton : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHIDButtonStateDelegate, PTSettingsKeyObserver, SBSceneManagerObserver>
 @property  BOOL disableDeferringToApplications
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCameraHardwareButton sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBCameraHardwareButton _reconfigureProcessMonitor]
  -[SBCameraHardwareButton settings:changedValueForKey:]
  -[SBCameraHardwareButton _deferCameraPressesToCameraApplication]
  -[SBCameraHardwareButton _launchToUnlockedCameraAfterWakingScreen:]
  -[SBCameraHardwareButton performActionsForButtonLongPress:]
  -[SBCameraHardwareButton init]
  -[SBCameraHardwareButton performActionsForButtonUp:]
  -[SBCameraHardwareButton setDisableDeferringToApplications:]
  -[SBCameraHardwareButton _updateSettingsForReason:]
  -[SBCameraHardwareButton _deferCameraPressesToApplication:]
  -[SBCameraHardwareButton _deferCameraPressesToPID:]
  -[SBCameraHardwareButton dealloc]
  -[SBCameraHardwareButton _launchCameraIfReady]
  -[SBCameraHardwareButton _updateCameraDeferringRule]
  -[SBCameraHardwareButton .cxx_destruct]
  -[SBCameraHardwareButton sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBCameraHardwareButton _isCoverSheetCameraVisible]
  -[SBCameraHardwareButton _notifyCoreAnalyticsCameraDidLaunchToLockScreen:screenWasOff:]
  -[SBCameraHardwareButton handleButtonEvent:]
  -[SBCameraHardwareButton _deferCameraPressesToSpringBoard]
  -[SBCameraHardwareButton _longPressDidCancel]
  -[SBCameraHardwareButton _process:stateDidUpdate:]
  -[SBCameraHardwareButton _shouldDeferToCoverSheetCamera]
  -[SBCameraHardwareButton _shouldDeferToNonSpringBoardProcess]
  -[SBCameraHardwareButton performActionsForButtonDown:]
  -[SBCameraHardwareButton disableDeferringToApplications]
  -[SBCameraHardwareButton addProcessRequestingCameraButton:token:]
  -[SBCameraHardwareButton _launchToCoverSheetCameraAfterWakingScreen:]
  -[SBCameraHardwareButton _reconfigureProcessMonitorForPredicates:]
  -[SBCameraHardwareButton removeProcessRequestingCameraButton:]
  -[SBCameraHardwareButton _stopWaitingForLongPressCancellation]
  -[SBCameraHardwareButton _startWaitingForLongPressCancellation]


SBCalendarApplicationIcon : SBApplicationIcon <SBCalendarIconImageProviderDelegate>
  // class methods
  +[SBCalendarApplicationIcon canGenerateIconsInBackground]
  +[SBCalendarApplicationIcon downloadingIconClass]

  // instance methods
  -[SBCalendarApplicationIcon initWithApplication:]
  -[SBCalendarApplicationIcon localeChanged]
  -[SBCalendarApplicationIcon generateIconImageWithInfo:]
  -[SBCalendarApplicationIcon _boldTextStatusDidChange:]
  -[SBCalendarApplicationIcon dealloc]
  -[SBCalendarApplicationIcon .cxx_destruct]
  -[SBCalendarApplicationIcon unmaskedIconImageWithInfo:]
  -[SBCalendarApplicationIcon calendarIconImageProviderHasChanged:]


SBIdleTimerProxy : SBIdleTimerBase <SBIdleTimerObserving>
 @property  <SBIdleTimer> *sourceTimer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerProxy disabledIdleTimerProxy]

  // instance methods
  -[SBIdleTimerProxy isDisabled]
  -[SBIdleTimerProxy isActivated]
  -[SBIdleTimerProxy idleTimerDidResetForUserAttention:]
  -[SBIdleTimerProxy setActivated:]
  -[SBIdleTimerProxy idleTimerDidRefresh:]
  -[SBIdleTimerProxy idleTimerDidWarn:]
  -[SBIdleTimerProxy .cxx_destruct]
  -[SBIdleTimerProxy _logExpirationTimeout:]
  -[SBIdleTimerProxy idleTimerDidExpire:]
  -[SBIdleTimerProxy reset]
  -[SBIdleTimerProxy setSourceTimer:]
  -[SBIdleTimerProxy initWithIdleTimerSource:]
  -[SBIdleTimerProxy sourceTimer]


SBIconLaunchContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBActivationSettings *activationSettings
 @property  NSSet *actions

  // instance methods
  -[SBIconLaunchContext actions]
  -[SBIconLaunchContext setActions:]
  -[SBIconLaunchContext setActivationSettings:]
  -[SBIconLaunchContext .cxx_destruct]
  -[SBIconLaunchContext activationSettings]


SBLockScreenAutoUnlockAggregateRule : SBAutoUnlockComposableRule
 @property  SBSyncController *syncController
 @property  SBFUserAuthenticationController *userAuthenticationController

  // instance methods
  -[SBLockScreenAutoUnlockAggregateRule shouldAutoUnlockForSource:]
  -[SBLockScreenAutoUnlockAggregateRule _syncController]
  -[SBLockScreenAutoUnlockAggregateRule .cxx_destruct]
  -[SBLockScreenAutoUnlockAggregateRule _initWithUserAuthenticationController:syncController:]
  -[SBLockScreenAutoUnlockAggregateRule initWithUserAuthenticationController:]
  -[SBLockScreenAutoUnlockAggregateRule userAuthenticationController]
  -[SBLockScreenAutoUnlockAggregateRule _setSyncController:]


SBElasticSliderMaterialWrapperView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBElasticSliderView *sliderView
 @property  MTMaterialShadowView *baseMaterialView
 @property  UIView *maskView
 @property  long long shadowMode

  // instance methods
  -[SBElasticSliderMaterialWrapperView init]
  -[SBElasticSliderMaterialWrapperView sliderView]
  -[SBElasticSliderMaterialWrapperView _setContinuousCornerRadius:]
  -[SBElasticSliderMaterialWrapperView .cxx_destruct]
  -[SBElasticSliderMaterialWrapperView maskView]
  -[SBElasticSliderMaterialWrapperView layoutSubviews]
  -[SBElasticSliderMaterialWrapperView _updateShadowMode]
  -[SBElasticSliderMaterialWrapperView baseMaterialView]
  -[SBElasticSliderMaterialWrapperView setShadowMode:]
  -[SBElasticSliderMaterialWrapperView shadowMode]


SBSoundPreferences : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBSoundPreferences _soundDefaults]
  +[SBSoundPreferences calendarAlarmPath]
  +[SBSoundPreferences ringtoneIdentifier]
  +[SBSoundPreferences vibrateWhenRinging]
  +[SBSoundPreferences vibrateWhenSilent]
  +[SBSoundPreferences ringtonePath]


SBHomeHardwareButtonLongPressDurationAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  double duration
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeHardwareButtonLongPressDurationAssertion .cxx_destruct]
  -[SBHomeHardwareButtonLongPressDurationAssertion succinctDescriptionBuilder]
  -[SBHomeHardwareButtonLongPressDurationAssertion succinctDescription]
  -[SBHomeHardwareButtonLongPressDurationAssertion reason]
  -[SBHomeHardwareButtonLongPressDurationAssertion descriptionWithMultilinePrefix:]
  -[SBHomeHardwareButtonLongPressDurationAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBHomeHardwareButtonLongPressDurationAssertion duration]
  -[SBHomeHardwareButtonLongPressDurationAssertion initWithReason:duration:]


SBBatteryDeviceCountTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBatteryDeviceCountTestRecipe title]
  -[SBBatteryDeviceCountTestRecipe handleVolumeIncrease]
  -[SBBatteryDeviceCountTestRecipe handleVolumeDecrease]


SBGreenController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBGreenController init]
  -[SBGreenController .cxx_destruct]
  -[SBGreenController performPreBuddyWork]
  -[SBGreenController _readFileStateFromDisk]
  -[SBGreenController _defaultValuesDictionaryAndState:]
  -[SBGreenController _writeGreenValuesToDisk:withState:]
  -[SBGreenController _effectivePlaceIsAmbiguous:]
  -[SBGreenController _deviceRegionCode]


SBTapToWakeController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIGestureRecognizerDelegate>
 @property  SBFTapToWakeGestureRecognizer *tapToWakeGestureRecognizer
 @property  SBFTapToWakeGestureRecognizer *pencilToWakeGestureRecognizer
 @property  SBIdleTimerDefaults *idleTimerDefaults
 @property  <SBTapToWakeDelegate> *delegate
 @property  BOOL screenOff
 @property  BOOL shouldTapToWake
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTapToWakeController isTapToWakeSupported]

  // instance methods
  -[SBTapToWakeController _evaluateEnablement]
  -[SBTapToWakeController init]
  -[SBTapToWakeController setScreenOff:]
  -[SBTapToWakeController idleTimerDefaults]
  -[SBTapToWakeController .cxx_destruct]
  -[SBTapToWakeController shouldTapToWake]
  -[SBTapToWakeController setDelegate:]
  -[SBTapToWakeController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBTapToWakeController delegate]
  -[SBTapToWakeController tapToWakeDidRecognize:]
  -[SBTapToWakeController pencilToWakeDidRecognize:]
  -[SBTapToWakeController isScreenOff]
  -[SBTapToWakeController tapToWakeGestureRecognizer]
  -[SBTapToWakeController setTapToWakeGestureRecognizer:]
  -[SBTapToWakeController pencilToWakeGestureRecognizer]
  -[SBTapToWakeController setPencilToWakeGestureRecognizer:]
  -[SBTapToWakeController setIdleTimerDefaults:]


SBCommandTabIconView : SBIconView /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
  // class methods
  +[SBCommandTabIconView supportsCursorInteraction]


SBRenderOverlayRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBRenderOverlayRecipe load]

  // instance methods
  -[SBRenderOverlayRecipe .cxx_destruct]
  -[SBRenderOverlayRecipe title]
  -[SBRenderOverlayRecipe handleVolumeIncrease]
  -[SBRenderOverlayRecipe handleVolumeDecrease]


SBDistanceFieldView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  NSString *renderMode
 @property  BOOL invertsShape
 @property  ^{CGColor=} foregroundColor
 @property  double offset
 @property  double sharpness
 @property  double lineWidth

  // class methods
  +[SBDistanceFieldView layerClass]

  // instance methods
  -[SBDistanceFieldView setLineWidth:]
  -[SBDistanceFieldView foregroundColor]
  -[SBDistanceFieldView lineWidth]
  -[SBDistanceFieldView setForegroundColor:]
  -[SBDistanceFieldView _shouldAnimatePropertyWithKey:]
  -[SBDistanceFieldView setRenderMode:]
  -[SBDistanceFieldView setOffset:]
  -[SBDistanceFieldView renderMode]
  -[SBDistanceFieldView sharpness]
  -[SBDistanceFieldView offset]
  -[SBDistanceFieldView invertsShape]
  -[SBDistanceFieldView setInvertsShape:]
  -[SBDistanceFieldView setSharpness:]


SBSwitcherTransitionRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBAppLayout *appLayout
 @property  long long appLayoutEnvironment
 @property  long long unlockedEnvironmentMode
 @property  long long preferredInterfaceOrientation
 @property  long long floatingConfiguration
 @property  long long floatingSwitcherVisible
 @property  long long dismissInlineAppExpose
 @property  long long animationDisabled
 @property  long long source
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSwitcherTransitionRequest requestForActivatingAppLayout:]
  +[SBSwitcherTransitionRequest requestForActivatingHomeScreen]
  +[SBSwitcherTransitionRequest requestForActivatingAppSwitcher]
  +[SBSwitcherTransitionRequest requestForActivatingFloatingSwitcher]
  +[SBSwitcherTransitionRequest requestForDeactivatingFloatingSwitcher]
  +[SBSwitcherTransitionRequest requestForStashingFloatingApplication]
  +[SBSwitcherTransitionRequest requestForDismissingInlineSwitcher]

  // instance methods
  -[SBSwitcherTransitionRequest setAppLayout:]
  -[SBSwitcherTransitionRequest setAnimationDisabled:]
  -[SBSwitcherTransitionRequest appLayout]
  -[SBSwitcherTransitionRequest init]
  -[SBSwitcherTransitionRequest setSource:]
  -[SBSwitcherTransitionRequest unlockedEnvironmentMode]
  -[SBSwitcherTransitionRequest source]
  -[SBSwitcherTransitionRequest .cxx_destruct]
  -[SBSwitcherTransitionRequest succinctDescriptionBuilder]
  -[SBSwitcherTransitionRequest floatingConfiguration]
  -[SBSwitcherTransitionRequest succinctDescription]
  -[SBSwitcherTransitionRequest setPreferredInterfaceOrientation:]
  -[SBSwitcherTransitionRequest animationDisabled]
  -[SBSwitcherTransitionRequest preferredInterfaceOrientation]
  -[SBSwitcherTransitionRequest descriptionWithMultilinePrefix:]
  -[SBSwitcherTransitionRequest descriptionBuilderWithMultilinePrefix:]
  -[SBSwitcherTransitionRequest setUnlockedEnvironmentMode:]
  -[SBSwitcherTransitionRequest setFloatingSwitcherVisible:]
  -[SBSwitcherTransitionRequest setFloatingConfiguration:]
  -[SBSwitcherTransitionRequest setDismissInlineAppExpose:]
  -[SBSwitcherTransitionRequest appLayoutEnvironment]
  -[SBSwitcherTransitionRequest setAppLayoutEnvironment:]
  -[SBSwitcherTransitionRequest floatingSwitcherVisible]
  -[SBSwitcherTransitionRequest dismissInlineAppExpose]


SBMutableSwitcherTransitionRequest : SBSwitcherTransitionRequest
 @property  SBAppLayout *appLayout
 @property  long long appLayoutEnvironment
 @property  long long unlockedEnvironmentMode
 @property  long long preferredInterfaceOrientation
 @property  long long floatingConfiguration
 @property  long long floatingSwitcherVisible
 @property  long long dismissInlineAppExpose
 @property  long long animationDisabled
 @property  long long source


SBDashBoardCameraPageViewController : CSPageViewController /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome <SBDashBoardHostedAppViewControllerDelegate, SBSceneHandleObserver, SBSystemGestureRecognizerDelegate, SBHomeGesturePanGestureRecognizerInterfaceDelegate, SBHomeGestureParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBHomeGestureInteractionDelegate, CSApplicationHosting>
 @property  BOOL wantsHomeGestureOwnership
 @property  SBHomeGestureInteraction *homeGestureInteraction
 @property  UIViewFloatAnimatableProperty *scaleProperty
 @property  UIViewFloatAnimatableProperty *alphaProperty
 @property  SBFFluidBehaviorSettings *scaleSettings
 @property  SBFFluidBehaviorSettings *alphaSettings
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  NSSet *actionsToDeliver
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDashBoardCameraPageViewController isAvailableForConfiguration]
  +[SBDashBoardCameraPageViewController requiredCapabilities]

  // instance methods
  -[SBDashBoardCameraPageViewController homeGestureInteraction]
  -[SBDashBoardCameraPageViewController actionsToDeliver]
  -[SBDashBoardCameraPageViewController isHostingAnApp]
  -[SBDashBoardCameraPageViewController hostedAppSceneHandle]
  -[SBDashBoardCameraPageViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDashBoardCameraPageViewController canHostAnApp]
  -[SBDashBoardCameraPageViewController touchInterfaceOrientationForGestureRecognizer:]
  -[SBDashBoardCameraPageViewController setActionsToDeliver:]
  -[SBDashBoardCameraPageViewController conformsToSBApplicationHosting]
  -[SBDashBoardCameraPageViewController homeGestureInteraction:systemGestureTypeForType:]
  -[SBDashBoardCameraPageViewController setHomeGestureParticipant:]
  -[SBDashBoardCameraPageViewController hostedAppWillRotateToInterfaceOrientation:]
  -[SBDashBoardCameraPageViewController hostedAppSceneHandles]
  -[SBDashBoardCameraPageViewController pageRole]
  -[SBDashBoardCameraPageViewController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBDashBoardCameraPageViewController customScreenEdgePanGestureRecognizerForHomeGestureInteraction:]
  -[SBDashBoardCameraPageViewController homeGestureInteraction:shouldBeginGestureRecognizerOfType:]
  -[SBDashBoardCameraPageViewController _addOrRemoveGestureForCurrentSettings]
  -[SBDashBoardCameraPageViewController homeGestureInteraction:shouldReceiveTouch:]
  -[SBDashBoardCameraPageViewController updateTransitionToVisible:progress:mode:]
  -[SBDashBoardCameraPageViewController viewForSystemGestureRecognizer:]
  -[SBDashBoardCameraPageViewController homeGestureParticipant]
  -[SBDashBoardCameraPageViewController homeGestureInteractionChanged:]
  -[SBDashBoardCameraPageViewController homeGestureInteractionEnded:]
  -[SBDashBoardCameraPageViewController setHomeGestureInteraction:]
  -[SBDashBoardCameraPageViewController homeGestureInteraction:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBDashBoardCameraPageViewController handlesRotationIndependentOfCoverSheet]
  -[SBDashBoardCameraPageViewController requestedDismissalType]
  -[SBDashBoardCameraPageViewController homeGestureInteractionBegan:]
  -[SBDashBoardCameraPageViewController homeGestureInteractionCancelled:]
  -[SBDashBoardCameraPageViewController setScaleSettings:]
  -[SBDashBoardCameraPageViewController aggregateBehavior:]
  -[SBDashBoardCameraPageViewController aggregateAppearance:]
  -[SBDashBoardCameraPageViewController _updateCameraScale:dimmingAlpha:]
  -[SBDashBoardCameraPageViewController _createProperties]
  -[SBDashBoardCameraPageViewController _prelaunchThreshold]
  -[SBDashBoardCameraPageViewController _resetAfterInteractiveGestureToCameraVisible:]
  -[SBDashBoardCameraPageViewController _endPrewarmBackoffPeriod]
  -[SBDashBoardCameraPageViewController .cxx_destruct]
  -[SBDashBoardCameraPageViewController alphaSettings]
  -[SBDashBoardCameraPageViewController _shouldCancelInteractiveDismissGesture]
  -[SBDashBoardCameraPageViewController viewWillMoveToWindow:]
  -[SBDashBoardCameraPageViewController willTransitionToVisible:]
  -[SBDashBoardCameraPageViewController didTransitionToVisible:]
  -[SBDashBoardCameraPageViewController setScaleProperty:]
  -[SBDashBoardCameraPageViewController presentationAltitude]
  -[SBDashBoardCameraPageViewController _noteUserLaunchEventTime]
  -[SBDashBoardCameraPageViewController requestedDismissalSettings]
  -[SBDashBoardCameraPageViewController _requestHomeGestureOwnership]
  -[SBDashBoardCameraPageViewController _updateCameraScale:dimmingAlpha:interactive:]
  -[SBDashBoardCameraPageViewController _prepareForInteractiveGestureToCameraVisible:]
  -[SBDashBoardCameraPageViewController _makeApplicationStatic]
  -[SBDashBoardCameraPageViewController _takeHiddenAssertionForHomeGrabber:]
  -[SBDashBoardCameraPageViewController _updateForPropertyChanged]
  -[SBDashBoardCameraPageViewController viewDidAppear:]
  -[SBDashBoardCameraPageViewController homeGrabberViewDidReceiveClick:]
  -[SBDashBoardCameraPageViewController setAlphaSettings:]
  -[SBDashBoardCameraPageViewController _convertTranslationFromContainerOrientationToContentOrientation:]
  -[SBDashBoardCameraPageViewController conformsToCSApplicationHosting]
  -[SBDashBoardCameraPageViewController _coolCameraIfNecessary]
  -[SBDashBoardCameraPageViewController handleEvent:]
  -[SBDashBoardCameraPageViewController _prewarmThreshold]
  -[SBDashBoardCameraPageViewController _updateCameraScale:interactive:]
  -[SBDashBoardCameraPageViewController setAlphaProperty:]
  -[SBDashBoardCameraPageViewController _setSceneGrabberHidden:]
  -[SBDashBoardCameraPageViewController setWantsHomeGestureOwnership:]
  -[SBDashBoardCameraPageViewController viewWillAppear:]
  -[SBDashBoardCameraPageViewController scaleSettings]
  -[SBDashBoardCameraPageViewController wantsHomeGestureOwnership]
  -[SBDashBoardCameraPageViewController viewDidDisappear:]
  -[SBDashBoardCameraPageViewController _bailIfFaceTimeCallComesIn]
  -[SBDashBoardCameraPageViewController _prewarmCamera]
  -[SBDashBoardCameraPageViewController _updateDimmingAlpha:interactive:]
  -[SBDashBoardCameraPageViewController _relinquishHomeGestureOwnership]
  -[SBDashBoardCameraPageViewController _shouldPrelaunchOnSwipe]
  -[SBDashBoardCameraPageViewController viewWillDisappear:]
  -[SBDashBoardCameraPageViewController _relinquishHiddenAssertionForHomeGrabber:]
  -[SBDashBoardCameraPageViewController alphaProperty]
  -[SBDashBoardCameraPageViewController scaleProperty]
  -[SBDashBoardCameraPageViewController loadView]
  -[SBDashBoardCameraPageViewController _shouldPrewarmOnSwipe]
  -[SBDashBoardCameraPageViewController dashBoardHostedAppViewController:shouldTransitionToMode:]
  -[SBDashBoardCameraPageViewController _transitionAppViewWithProgress:]
  -[SBDashBoardCameraPageViewController wouldHandleButtonEvent:]


SBPBAppLayoutList : PBCodable /System/Library/PrivateFrameworks/EmbeddedDataReset.framework/EmbeddedDataReset <NSCopying>
  // instance methods
  -[SBPBAppLayoutList copyWithZone:]
  -[SBPBAppLayoutList .cxx_destruct]
  -[SBPBAppLayoutList readFrom:]
  -[SBPBAppLayoutList writeTo:]
  -[SBPBAppLayoutList isEqual:]
  -[SBPBAppLayoutList dictionaryRepresentation]


SBDataAccessSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL alwaysShowIndicatorForCameraCapture
 @property  BOOL alwaysShowIndicatorForMicrophoneCapture
 @property  long long indicatorColor

  // class methods
  +[SBDataAccessSettings settingsControllerModule]

  // instance methods
  -[SBDataAccessSettings setDefaultValues]
  -[SBDataAccessSettings setAlwaysShowIndicatorForCameraCapture:]
  -[SBDataAccessSettings setAlwaysShowIndicatorForMicrophoneCapture:]
  -[SBDataAccessSettings setIndicatorColor:]
  -[SBDataAccessSettings alwaysShowIndicatorForCameraCapture]
  -[SBDataAccessSettings alwaysShowIndicatorForMicrophoneCapture]
  -[SBDataAccessSettings indicatorColor]


SBFolderStatsQueryableMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFolderStatsQueryableMetric init]
  -[SBFolderStatsQueryableMetric handleEvent:withContext:]
  -[SBFolderStatsQueryableMetric .cxx_destruct]


SBOverrideAppLayoutsSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBOverrideAppLayoutsSwitcherModifier appLayoutsGenerationCount]
  -[SBOverrideAppLayoutsSwitcherModifier setState:]
  -[SBOverrideAppLayoutsSwitcherModifier .cxx_destruct]
  -[SBOverrideAppLayoutsSwitcherModifier didMoveToParentModifier:]
  -[SBOverrideAppLayoutsSwitcherModifier appLayouts]
  -[SBOverrideAppLayoutsSwitcherModifier initWithAppLayouts:]


SBLoginAppContainerOverlayWrapperView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBLockOverlayView *overlayView

  // instance methods
  -[SBLoginAppContainerOverlayWrapperView overlayView]
  -[SBLoginAppContainerOverlayWrapperView .cxx_destruct]
  -[SBLoginAppContainerOverlayWrapperView layoutSubviews]
  -[SBLoginAppContainerOverlayWrapperView initWithFrame:overlayView:]


SBEntityRemovalSlideOffscreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalSlideOffscreenSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier _layoutSettings]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier frameForIndex:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier didMoveToParentModifier:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier transitionWillUpdate]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier handleTimerEvent:]
  -[SBEntityRemovalSlideOffscreenSwitcherModifier initWithTransitionID:appLayout:direction:animationSettings:multitaskingModifier:]


SBUserNotificationCenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBUserNotificationCenter startUserNotificationCenter]
  +[SBUserNotificationCenter _userNotificationDone:]
  +[SBUserNotificationCenter dispatchUserNotification:flags:replyPort:auditToken:]


SBBulletinSpokenObserverGateway : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BBObserverDelegate, AFSiriUserNotificationRequestCapabilityObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBulletinSpokenObserverGateway sharedInstance]

  // instance methods
  -[SBBulletinSpokenObserverGateway init]
  -[SBBulletinSpokenObserverGateway hasEligibleSetupChanged:]
  -[SBBulletinSpokenObserverGateway .cxx_destruct]
  -[SBBulletinSpokenObserverGateway requestCanBeHandledChanged:]
  -[SBBulletinSpokenObserverGateway observer:addBulletin:forFeed:playLightsAndSirens:withReply:]


SBMainDisplaySceneLayoutWindow : SBSceneLayoutWindow
  // instance methods
  -[SBMainDisplaySceneLayoutWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBMainDisplaySceneLayoutWindow _usesWindowServerHitTesting]


SBSensorActivityAttribution : SBActivityAttribution <SBFSensorActivityAttribution>
 @property  long long sensor
 @property  NSString *displayName
 @property  NSString *bundleIdentifier
 @property  NSString *attributionGroup
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSensorActivityAttribution sensor]
  -[SBSensorActivityAttribution succinctDescriptionBuilder]
  -[SBSensorActivityAttribution initWithSTActivityAttribution:sensor:]
  -[SBSensorActivityAttribution succinctDescription]
  -[SBSensorActivityAttribution isEqual:]
  -[SBSensorActivityAttribution descriptionWithMultilinePrefix:]
  -[SBSensorActivityAttribution descriptionBuilderWithMultilinePrefix:]


SBIdleTimerDescriptorFactory : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SpringBoard *springBoard
 @property  SBAlertItemsController *alertItemsController
 @property  SBBacklightController *backlightController
 @property  SBPrototypeController *prototypeController
 @property  SBIdleTimerSettings *idleTimerPrototypeSettings
 @property  SBLockScreenManager *lockScreenManager
 @property  SBMainWorkspace *mainWorkspace
 @property  SBUIBiometricResource *biometricResource
 @property  SBTelephonyManager *telephonyManager
 @property  SBConferenceManager *conferenceManager

  // class methods
  +[SBIdleTimerDescriptorFactory disabledIdleTimerDescriptor]

  // instance methods
  -[SBIdleTimerDescriptorFactory _setSpringBoard:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForPowerDefaults:]
  -[SBIdleTimerDescriptorFactory _setBiometricResource:]
  -[SBIdleTimerDescriptorFactory _setPrototypeController:]
  -[SBIdleTimerDescriptorFactory _setConferenceManager:]
  -[SBIdleTimerDescriptorFactory _setIdleTimerPrototypeSettings:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsWithCustomTimeouts:fromBehavior:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForFaceDown:]
  -[SBIdleTimerDescriptorFactory _idleTimerPrototypeSettings]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForThermalBlockedMode:]
  -[SBIdleTimerDescriptorFactory sanitizeTotalDuration:]
  -[SBIdleTimerDescriptorFactory _shouldUseAttentionSensor]
  -[SBIdleTimerDescriptorFactory .cxx_destruct]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForUnlockedWithMesa:]
  -[SBIdleTimerDescriptorFactory _setLockScreenManager:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForDuration:descriptor:]
  -[SBIdleTimerDescriptorFactory _biometricResource]
  -[SBIdleTimerDescriptorFactory _springBoard]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForPrototypeSettings:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForActiveClientConfiguration:]
  -[SBIdleTimerDescriptorFactory sanitizeWarnInterval:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForSecurityDefaults:]
  -[SBIdleTimerDescriptorFactory _lockScreenManager]
  -[SBIdleTimerDescriptorFactory _backlightController]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForDefaultWarnInterval:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForWarnInterval:]
  -[SBIdleTimerDescriptorFactory _conferenceManager]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForTelephony:]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForAutoLockTimeout:]
  -[SBIdleTimerDescriptorFactory idleTimerDescriptorForBehavior:]
  -[SBIdleTimerDescriptorFactory sanitizeSettingsAfterInitialSetup:]
  -[SBIdleTimerDescriptorFactory _setAlertItemsController:]
  -[SBIdleTimerDescriptorFactory _alertItemsController]
  -[SBIdleTimerDescriptorFactory _setBacklightController:]
  -[SBIdleTimerDescriptorFactory _isIdleDurationForever:]
  -[SBIdleTimerDescriptorFactory sanitizeSettingsAfterSetup:duration:]
  -[SBIdleTimerDescriptorFactory _setMainWorkspace:]
  -[SBIdleTimerDescriptorFactory _updateIdleTimerSettingsWarnInterval:totalInterval:]
  -[SBIdleTimerDescriptorFactory _mainWorkspace]
  -[SBIdleTimerDescriptorFactory initWithGlobalStateMonitor:]
  -[SBIdleTimerDescriptorFactory sanitizeDescriptorForLockscreenDefaults:]
  -[SBIdleTimerDescriptorFactory _telephonyManager]
  -[SBIdleTimerDescriptorFactory _setTelephonyManager:]
  -[SBIdleTimerDescriptorFactory _prototypeController]
  -[SBIdleTimerDescriptorFactory updateIdleTimerSettingsForBatterySaverMode:]


SBIdleBehavior : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFIdleTimerBehaviorProviding>
 @property  long long duration
 @property  long long warnMode
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleBehavior idleTimerDuration]
  -[SBIdleBehavior idleWarnMode]
  -[SBIdleBehavior idleTimerMode]
  -[SBIdleBehavior duration]
  -[SBIdleBehavior warnMode]
  -[SBIdleBehavior initWithDuration:warnMode:]


SBRemoteTransientOverlayDismissalRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL animated
 @property  @? completionHandler
 @property  BOOL shouldInvalidatePresentation
 @property  SBTransientOverlayViewController *viewController

  // instance methods
  -[SBRemoteTransientOverlayDismissalRequest copyWithZone:]
  -[SBRemoteTransientOverlayDismissalRequest viewController]
  -[SBRemoteTransientOverlayDismissalRequest setAnimated:]
  -[SBRemoteTransientOverlayDismissalRequest isAnimated]
  -[SBRemoteTransientOverlayDismissalRequest .cxx_destruct]
  -[SBRemoteTransientOverlayDismissalRequest initWithViewController:]
  -[SBRemoteTransientOverlayDismissalRequest completionHandler]
  -[SBRemoteTransientOverlayDismissalRequest setCompletionHandler:]
  -[SBRemoteTransientOverlayDismissalRequest shouldInvalidatePresentation]
  -[SBRemoteTransientOverlayDismissalRequest setShouldInvalidatePresentation:]


SBLegacyVOIPRefreshWakeTracker : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationWakeLifecycleHandling>
 @property  BKSProcessAssertion *appKeepAliveAssertion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLegacyVOIPRefreshWakeTracker init]
  -[SBLegacyVOIPRefreshWakeTracker dealloc]
  -[SBLegacyVOIPRefreshWakeTracker .cxx_destruct]
  -[SBLegacyVOIPRefreshWakeTracker endWake]
  -[SBLegacyVOIPRefreshWakeTracker wakeDuration]
  -[SBLegacyVOIPRefreshWakeTracker initWithProcessManager:]
  -[SBLegacyVOIPRefreshWakeTracker setAppKeepAliveAssertion:]
  -[SBLegacyVOIPRefreshWakeTracker _activateAppIfNeeded:]
  -[SBLegacyVOIPRefreshWakeTracker _createAssertionForBundleID:]
  -[SBLegacyVOIPRefreshWakeTracker appKeepAliveAssertion]
  -[SBLegacyVOIPRefreshWakeTracker beginWakeForApplication:]


SBInteractiveScreenshotGestureMultiPartAnimation : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBInteractiveScreenshotGestureMultiPartAnimation .cxx_destruct]
  -[SBInteractiveScreenshotGestureMultiPartAnimation initWithCompletionHandler:]
  -[SBInteractiveScreenshotGestureMultiPartAnimation beginAnimationWithIdentifier:]
  -[SBInteractiveScreenshotGestureMultiPartAnimation completeAnimationWithIdentifier:finished:retargeted:]


_SBLegacyRemoteAlertContentHostViewController : _UIRemoteViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBSUIRemoteAlertItemContentHostInterface>
 @property  id delegate
 @property  NSString *serviceClassName

  // class methods
  +[_SBLegacyRemoteAlertContentHostViewController exportedInterface]
  +[_SBLegacyRemoteAlertContentHostViewController serviceViewControllerInterface]

  // instance methods
  -[_SBLegacyRemoteAlertContentHostViewController serviceClassName]
  -[_SBLegacyRemoteAlertContentHostViewController setServiceClassName:]
  -[_SBLegacyRemoteAlertContentHostViewController .cxx_destruct]
  -[_SBLegacyRemoteAlertContentHostViewController _canShowWhileLocked]
  -[_SBLegacyRemoteAlertContentHostViewController setDelegate:]
  -[_SBLegacyRemoteAlertContentHostViewController delegate]
  -[_SBLegacyRemoteAlertContentHostViewController viewServiceDidTerminateWithError:]
  -[_SBLegacyRemoteAlertContentHostViewController _getPreferredContentSizeWithReplyBlock:]


SBUserNotificationAlert : SBAlertItem /usr/lib/libicucore.A.dylib <UITextFieldDelegate>
 @property  id keyboardTypes
 @property  id autocapitalizationTypes
 @property  id autocorrectionTypes
 @property  id textFieldTitles
 @property  id textFieldValues
 @property  NSString *soundPath
 @property  unsigned int soundID
 @property  unsigned int soundIDBehavior
 @property  NSDictionary *vibrationPattern
 @property  long long soundAlertType
 @property  NSString *soundAlertTopic
 @property  NSString *alertHeader
 @property  NSString *alertMessage
 @property  NSString *alertMessageDelimiter
 @property  NSString *lockScreenAlertHeader
 @property  NSString *lockScreenAlertMessage
 @property  NSString *lockScreenAlertMessageDelimiter
 @property  NSString *defaultButtonTitle
 @property  NSString *alternateButtonTitle
 @property  NSString *otherButtonTitle
 @property  NSString *defaultResponseLaunchBundleID
 @property  NSURL *defaultResponseLaunchURL
 @property  NSString *remoteViewControllerClassName
 @property  NSString *remoteServiceBundleIdentifier
 @property  NSString *extensionIdentifier
 @property  UIViewController *contentViewControllerForAlertController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUserNotificationAlert setRemoteViewControllerClassName:]
  -[SBUserNotificationAlert lockScreenAlertHeader]
  -[SBUserNotificationAlert alertMessageDelimiter]
  -[SBUserNotificationAlert didFailToActivate]
  -[SBUserNotificationAlert contentViewControllerForAlertController]
  -[SBUserNotificationAlert setSoundPath:]
  -[SBUserNotificationAlert setLockScreenAlertMessageDelimiter:]
  -[SBUserNotificationAlert sound]
  -[SBUserNotificationAlert _parseCustomButtonDefinitions:locBundle:]
  -[SBUserNotificationAlert keyboardTypes]
  -[SBUserNotificationAlert _publicDescription]
  -[SBUserNotificationAlert _parseTextFieldDefinitions:locBundle:]
  -[SBUserNotificationAlert _headerImage]
  -[SBUserNotificationAlert autocapitalizationTypes]
  -[SBUserNotificationAlert forcesModalAlertAppearance]
  -[SBUserNotificationAlert dismissOnLock]
  -[SBUserNotificationAlert _prepareNewAlertControllerWithLockedState:requirePasscodeForActions:]
  -[SBUserNotificationAlert _sendResponseAndCleanUp:]
  -[SBUserNotificationAlert _activateApplication:withURL:]
  -[SBUserNotificationAlert reappearsAfterLock]
  -[SBUserNotificationAlert didDeactivateForReason:]
  -[SBUserNotificationAlert otherButtonTitle]
  -[SBUserNotificationAlert allowMenuButtonDismissal]
  -[SBUserNotificationAlert dealloc]
  -[SBUserNotificationAlert visualStyleForAlertControllerStyle:traitCollection:descriptor:]
  -[SBUserNotificationAlert .cxx_destruct]
  -[SBUserNotificationAlert willActivate]
  -[SBUserNotificationAlert setLockScreenAlertMessage:]
  -[SBUserNotificationAlert doCleanupAfterDeactivationAnimation]
  -[SBUserNotificationAlert _clearRemoteViewControllerIfPresent]
  -[SBUserNotificationAlert iconImage]
  -[SBUserNotificationAlert _setActivated:]
  -[SBUserNotificationAlert textFieldTitles]
  -[SBUserNotificationAlert parseVisualStyleForMessage:]
  -[SBUserNotificationAlert presentationStateDidChangeFromState:toState:]
  -[SBUserNotificationAlert setDefaultResponseLaunchBundleID:]
  -[SBUserNotificationAlert defaultResponseLaunchURL]
  -[SBUserNotificationAlert wakeDisplay]
  -[SBUserNotificationAlert autocorrectionTypes]
  -[SBUserNotificationAlert setAlertMessage:]
  -[SBUserNotificationAlert setTextFieldValues:]
  -[SBUserNotificationAlert soundID]
  -[SBUserNotificationAlert setVibrationPattern:]
  -[SBUserNotificationAlert allowInLoginWindow]
  -[SBUserNotificationAlert willDeactivateForReason:]
  -[SBUserNotificationAlert _cleanup]
  -[SBUserNotificationAlert setDefaultResponseLaunchURL:]
  -[SBUserNotificationAlert hideOnClonedDisplay]
  -[SBUserNotificationAlert token]
  -[SBUserNotificationAlert setAlternateButtonTitle:]
  -[SBUserNotificationAlert setSoundAlertType:]
  -[SBUserNotificationAlert soundIDBehavior]
  -[SBUserNotificationAlert cancel]
  -[SBUserNotificationAlert dismissIfNecessaryWithResponse:customButtonResponse:]
  -[SBUserNotificationAlert textField:shouldChangeCharactersInRange:replacementString:]
  -[SBUserNotificationAlert dismissesOverlaysOnLockScreen]
  -[SBUserNotificationAlert _cleanupCustomContentViewControllers]
  -[SBUserNotificationAlert _uiAlertActionStyleFromSBUserNotificationButtonPresentationStyle:]
  -[SBUserNotificationAlert _sendResponseAndCleanUp:customButtonResponse:]
  -[SBUserNotificationAlert performUnlockAction]
  -[SBUserNotificationAlert soundPath]
  -[SBUserNotificationAlert reappearsAfterUnlock]
  -[SBUserNotificationAlert soundAlertTopic]
  -[SBUserNotificationAlert behavesSuperModally]
  -[SBUserNotificationAlert _parseLegacyTextFieldDefinitions:locBundle:]
  -[SBUserNotificationAlert alternateButtonTitle]
  -[SBUserNotificationAlert _noteVolumeOrLockPressed]
  -[SBUserNotificationAlert textFieldValues]
  -[SBUserNotificationAlert soundAlertType]
  -[SBUserNotificationAlert initWithMessage:replyPort:requestFlags:auditToken:]
  -[SBUserNotificationAlert setContentViewControllerForAlertController:]
  -[SBUserNotificationAlert setAutocapitalizationTypes:]
  -[SBUserNotificationAlert defaultResponseLaunchBundleID]
  -[SBUserNotificationAlert lockScreenAlertMessage]
  -[SBUserNotificationAlert setTextFieldTitles:]
  -[SBUserNotificationAlert _safeLocalizedValue:withBundle:]
  -[SBUserNotificationAlert setOtherButtonTitle:]
  -[SBUserNotificationAlert lockScreenAlertMessageDelimiter]
  -[SBUserNotificationAlert extensionIdentifier]
  -[SBUserNotificationAlert setAlertMessageDelimiter:]
  -[SBUserNotificationAlert defaultButtonTitle]
  -[SBUserNotificationAlert alertHeader]
  -[SBUserNotificationAlert updateWithMessage:requestFlags:]
  -[SBUserNotificationAlert setRemoteServiceBundleIdentifier:]
  -[SBUserNotificationAlert _attachmentImage]
  -[SBUserNotificationAlert _displayActionButtonOnLockScreen]
  -[SBUserNotificationAlert setKeyboardTypes:]
  -[SBUserNotificationAlert remoteServiceBundleIdentifier]
  -[SBUserNotificationAlert setSoundID:]
  -[SBUserNotificationAlert setLockScreenAlertHeader:]
  -[SBUserNotificationAlert remoteViewControllerClassName]
  -[SBUserNotificationAlert setDefaultButtonTitle:]
  -[SBUserNotificationAlert shouldShowInLockScreen]
  -[SBUserNotificationAlert allowLockScreenDismissal]
  -[SBUserNotificationAlert _uiAlertActionLayoutDirectionFromSBUserNotificationButtonLayoutDirection:]
  -[SBUserNotificationAlert _imageDescriptorForPath:catalogPath:catalogImageKey:]
  -[SBUserNotificationAlert vibrationPattern]
  -[SBUserNotificationAlert setExtensionIdentifier:]
  -[SBUserNotificationAlert dismissIfNecessaryWithResponse:]
  -[SBUserNotificationAlert setAlertHeader:]
  -[SBUserNotificationAlert alertMessage]
  -[SBUserNotificationAlert setSoundAlertTopic:]
  -[SBUserNotificationAlert configure:requirePasscodeForActions:]
  -[SBUserNotificationAlert setAutocorrectionTypes:]
  -[SBUserNotificationAlert setSoundIDBehavior:]


_SBUserNotificationImageDescriptor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  UIImage *image

  // instance methods
  -[_SBUserNotificationImageDescriptor .cxx_destruct]
  -[_SBUserNotificationImageDescriptor image]
  -[_SBUserNotificationImageDescriptor initWithImagePath:]
  -[_SBUserNotificationImageDescriptor initWithImageCatalogPath:catalogKey:]


SBGradientView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  NSArray *colors
 @property  NSArray *locations
 @property  {CGPoint=dd} startPoint
 @property  {CGPoint=dd} endPoint

  // class methods
  +[SBGradientView layerClass]

  // instance methods
  -[SBGradientView colors]
  -[SBGradientView locations]
  -[SBGradientView setLocations:]
  -[SBGradientView setStartPoint:]
  -[SBGradientView endPoint]
  -[SBGradientView setEndPoint:]
  -[SBGradientView setColors:]
  -[SBGradientView startPoint]
  -[SBGradientView .cxx_destruct]
  -[SBGradientView color]


SBInCallPresentationRequestServer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSServiceConnectionListenerDelegate, SBSInCallPresentationClientToServerInterface, BSInvalidatable>
 @property  <SBInCallPresentationRequestServerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallPresentationRequestServer init]
  -[SBInCallPresentationRequestServer activate]
  -[SBInCallPresentationRequestServer .cxx_destruct]
  -[SBInCallPresentationRequestServer listener:didReceiveConnection:withContext:]
  -[SBInCallPresentationRequestServer setDelegate:]
  -[SBInCallPresentationRequestServer invalidate]
  -[SBInCallPresentationRequestServer delegate]
  -[SBInCallPresentationRequestServer presentWithConfiguration:completion:]


_SBInCallPresentationRequestServerTarget : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSInCallPresentationClientToServerInterface>
 @property  BSServiceConnection *connection
 @property  <SBSInCallPresentationClientToServerInterface> *proxyInterface
 @property  NSUUID *clientIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SBInCallPresentationRequestServerTarget currentTarget]

  // instance methods
  -[_SBInCallPresentationRequestServerTarget clientIdentifier]
  -[_SBInCallPresentationRequestServerTarget .cxx_destruct]
  -[_SBInCallPresentationRequestServerTarget _performBlock:]
  -[_SBInCallPresentationRequestServerTarget proxyInterface]
  -[_SBInCallPresentationRequestServerTarget setProxyInterface:]
  -[_SBInCallPresentationRequestServerTarget connection]
  -[_SBInCallPresentationRequestServerTarget presentWithConfiguration:completion:]
  -[_SBInCallPresentationRequestServerTarget initWithConnection:proxyInterface:]


SBBluetoothAccessoryBatteryMonitor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BCBatteryDeviceObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBluetoothAccessoryBatteryMonitor init]
  -[SBBluetoothAccessoryBatteryMonitor .cxx_destruct]
  -[SBBluetoothAccessoryBatteryMonitor descriptionBuilder]
  -[SBBluetoothAccessoryBatteryMonitor connectedDevicesDidChange:]
  -[SBBluetoothAccessoryBatteryMonitor _popLowPowerAlertForAccessoryIfNecessary:]


SBAppVisibilityPreferences : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL defaultVisible
 @property  BOOL currentlyVisible

  // instance methods
  -[SBAppVisibilityPreferences update]
  -[SBAppVisibilityPreferences isCurrentlyVisible]
  -[SBAppVisibilityPreferences .cxx_destruct]
  -[SBAppVisibilityPreferences initWithDefaultVisible:bundleID:containerPath:]
  -[SBAppVisibilityPreferences isDefaultVisible]


SBModalAlertPresentationCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBModalAlertPresenter *springBoardPresenter
 @property  <SBModalAlertPresentationCoordinatorDelegate> *delegate
 @property  BOOL showingModalAlert
 @property  BOOL showingSystemModalAlert
 @property  BOOL canShowApplicationModalAlerts
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBModalAlertPresentationCoordinator _setSpringBoardPresenter:]
  -[SBModalAlertPresentationCoordinator _noteSpringBoardModalAlertStateChanged:]
  -[SBModalAlertPresentationCoordinator isShowingModalAlert]
  -[SBModalAlertPresentationCoordinator .cxx_destruct]
  -[SBModalAlertPresentationCoordinator succinctDescriptionBuilder]
  -[SBModalAlertPresentationCoordinator _fencingTransitionContext:]
  -[SBModalAlertPresentationCoordinator hideApplicationModalAlertsForReason:]
  -[SBModalAlertPresentationCoordinator _addModalAlertPresenterIfNecessary:]
  -[SBModalAlertPresentationCoordinator _adjustApplicationSceneSettingsForModalAlertsAndFence:]
  -[SBModalAlertPresentationCoordinator succinctDescription]
  -[SBModalAlertPresentationCoordinator initWithSceneDeactivationManager:]
  -[SBModalAlertPresentationCoordinator isShowingSystemModalAlert]
  -[SBModalAlertPresentationCoordinator setDelegate:]
  -[SBModalAlertPresentationCoordinator _getSpringBoardPresenter]
  -[SBModalAlertPresentationCoordinator delegate]
  -[SBModalAlertPresentationCoordinator descriptionWithMultilinePrefix:]
  -[SBModalAlertPresentationCoordinator descriptionBuilderWithMultilinePrefix:]
  -[SBModalAlertPresentationCoordinator _removeModalAlertPresenter:]
  -[SBModalAlertPresentationCoordinator canShowApplicationModalAlerts]


SBInCallSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  SBFFluidBehaviorSettings *transientOverlayFadeInSettings
 @property  SBFFluidBehaviorSettings *transientOverlayFadeOutSettings

  // class methods
  +[SBInCallSettings settingsControllerModule]

  // instance methods
  -[SBInCallSettings setDefaultValues]
  -[SBInCallSettings .cxx_destruct]
  -[SBInCallSettings transientOverlayFadeInSettings]
  -[SBInCallSettings setTransientOverlayFadeInSettings:]
  -[SBInCallSettings transientOverlayFadeOutSettings]
  -[SBInCallSettings setTransientOverlayFadeOutSettings:]


SBIconPageHidingMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIconPageHidingMetric init]
  -[SBIconPageHidingMetric handleEvent:withContext:]
  -[SBIconPageHidingMetric .cxx_destruct]


SBDisabledIdleTimer : SBIdleTimerBase
  // instance methods
  -[SBDisabledIdleTimer copyWithZone:]
  -[SBDisabledIdleTimer isDisabled]
  -[SBDisabledIdleTimer isActivated]
  -[SBDisabledIdleTimer setActivated:]
  -[SBDisabledIdleTimer reset]
  -[SBDisabledIdleTimer isEqual:]


SBSpotlightTransientOverlayInteractiveGestureTransaction : SBMainWorkspaceTransaction <BSTransactionObserver>
 @property  SBSpotlightSettings *settings
 @property  SBSpotlightTransientOverlayViewController *spotlightTransientOverlayViewController
 @property  SBMainWorkspaceTransaction *presentTransientOverlayTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction canInterruptForTransitionRequest:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction transactionDidComplete:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _didComplete]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _begin]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction .cxx_destruct]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction settings]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _logForInterruptAttemptReason:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction setSettings:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction initWithTransitionRequest:spotlightTransientOverlayViewController:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _presentTransientOverlayViewController:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction _dismissSpotlightTransientOverlayViewController]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction updatePresentationWithProgress:translation:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction endPresentation:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction spotlightTransientOverlayViewController]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction setSpotlightTransientOverlayViewController:]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction presentTransientOverlayTransaction]
  -[SBSpotlightTransientOverlayInteractiveGestureTransaction setPresentTransientOverlayTransaction:]


SBUISettings : _UISettings /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBUISettings addKeyObserverIfPrototyping:]
  -[SBUISettings addKeyPathObserverIfPrototyping:]


SBHomeScreenBackdropViewBase : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  <SBHomeScreenBackdropViewBaseDelegate> *delegate

  // instance methods
  -[SBHomeScreenBackdropViewBase cancelInProcessAnimations]
  -[SBHomeScreenBackdropViewBase backdropBlurSettings]
  -[SBHomeScreenBackdropViewBase initWithFrame:]
  -[SBHomeScreenBackdropViewBase .cxx_destruct]
  -[SBHomeScreenBackdropViewBase endRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropViewBase endRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropViewBase beginRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropViewBase setDelegate:]
  -[SBHomeScreenBackdropViewBase isOpaque]
  -[SBHomeScreenBackdropViewBase setBlurProgress:behaviorMode:completion:]
  -[SBHomeScreenBackdropViewBase delegate]
  -[SBHomeScreenBackdropViewBase beginRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropViewBase requiresBackdropView]
  -[SBHomeScreenBackdropViewBase requiresLiveBackdropView]


SBAlertItemsController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBModalAlertPresenter *systemModalAlertPresenter
 @property  <SBAlertItemPresenter><SBLockScreenActionProvider> *lockScreenModalAlertItemPresenter
 @property  <SBAlertItemPresenter> *lockScreenNotificationsAlertItemPresenter
 @property  <SBAlertItemPresenter> *unlockedAlertItemPresenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAlertItemsController sharedInstance]

  // instance methods
  -[SBAlertItemsController deactivateAlertItemsOfClass:reason:animated:]
  -[SBAlertItemsController alertItemsOfClass:]
  -[SBAlertItemsController _systemModalAlertPresenter]
  -[SBAlertItemsController setUnlockedAlertItemPresenter:]
  -[SBAlertItemsController deactivateAlertItemsOfClass:reason:]
  -[SBAlertItemsController setLockScreenNotificationsAlertItemPresenter:]
  -[SBAlertItemsController _deactivateAlertItem:reason:animated:alertDismissCompletion:]
  -[SBAlertItemsController init]
  -[SBAlertItemsController _processAlertItemsFromQueue:animated:]
  -[SBAlertItemsController _activeCallStateDidChange:]
  -[SBAlertItemsController dealloc]
  -[SBAlertItemsController deactivateAlertItem:reason:]
  -[SBAlertItemsController _hasVisibleModalAlertOfType:]
  -[SBAlertItemsController deactivateAlertItem:reason:animated:]
  -[SBAlertItemsController .cxx_destruct]
  -[SBAlertItemsController _clearAllQueuedAlertItems]
  -[SBAlertItemsController _reallyDeactivateAlertItem:forReason:deactivateBlock:]
  -[SBAlertItemsController _hasPresentationForPresenter:]
  -[SBAlertItemsController hasAlerts]
  -[SBAlertItemsController _enumerateWithDirection:presentationsWithType:usingBlock:]
  -[SBAlertItemsController succinctDescriptionBuilder]
  -[SBAlertItemsController canDeactivateAlertForMenuClickOrSystemGesture]
  -[SBAlertItemsController _presentedAlertItemForPresenter:]
  -[SBAlertItemsController _notifyObservers:]
  -[SBAlertItemsController hasVisibleModalAlert]
  -[SBAlertItemsController _enumeratePresentationsWithType:usingBlock:]
  -[SBAlertItemsController _presentAlertItem:withPresenter:animated:]
  -[SBAlertItemsController succinctDescription]
  -[SBAlertItemsController _shouldPendAlertItem:outReasonsPended:]
  -[SBAlertItemsController hasVisibleSuperModalAlert]
  -[SBAlertItemsController _isAlertItemPresentable:outReasonsNotPresentable:]
  -[SBAlertItemsController _activePresenterForAlertItem:]
  -[SBAlertItemsController moveActiveUnlockedAlertsToPendingWithAnimation:completion:]
  -[SBAlertItemsController activatePendedAlertsIfNecessary]
  -[SBAlertItemsController setInUILockedMode:]
  -[SBAlertItemsController lockScreenNotificationsAlertItemPresenter]
  -[SBAlertItemsController unlockedAlertItemPresenter]
  -[SBAlertItemsController deactivateAlertItemsOfClass:]
  -[SBAlertItemsController hasLockScreenModalAlert]
  -[SBAlertItemsController convertUnlockedAlertsToLockedAlerts]
  -[SBAlertItemsController _hasActivePresentationsThatPresentModally]
  -[SBAlertItemsController captureSuppressionAssertion:reason:]
  -[SBAlertItemsController _setSystemModalAlertPresenter:]
  -[SBAlertItemsController _performBatchActions:animated:processQueue:]
  -[SBAlertItemsController removeObserver:]
  -[SBAlertItemsController deactivateAlertForMenuClickOrSystemGestureWithAnimation:]
  -[SBAlertItemsController _deactivateAlertItem:reason:animated:]
  -[SBAlertItemsController _presenterForAlertItem:]
  -[SBAlertItemsController hasAlertOfClass:]
  -[SBAlertItemsController _dismissAlertItem:fromPresenter:forReason:animated:completion:]
  -[SBAlertItemsController noteVolumeOrLockPressedOverLockedAlerts]
  -[SBAlertItemsController lockScreenModalAlertItemPresenter]
  -[SBAlertItemsController visibleAlertItem]
  -[SBAlertItemsController addObserver:]
  -[SBAlertItemsController _presentationForAlertItem:]
  -[SBAlertItemsController setForceAlertsToPend:forReason:]
  -[SBAlertItemsController activateAlertItem:animated:]
  -[SBAlertItemsController _buddyDidExit]
  -[SBAlertItemsController descriptionWithMultilinePrefix:]
  -[SBAlertItemsController activateAlertItem:]
  -[SBAlertItemsController hasVisibleAlert]
  -[SBAlertItemsController descriptionBuilderWithMultilinePrefix:]
  -[SBAlertItemsController _updateActiveDestinations]
  -[SBAlertItemsController convertLockedAlertsToUnlockedAlerts]
  -[SBAlertItemsController _processAlertItemQueuesAnimated:]
  -[SBAlertItemsController _initWithUserSessionController:]
  -[SBAlertItemsController deactivateAlertItem:]
  -[SBAlertItemsController setLockScreenModalAlertItemPresenter:]


SBApplicationInfo : _UIApplicationInfo /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  BOOL supportsDirectToAirplayOrIsAllowListed
 @property  BOOL systemApplication
 @property  BOOL internalApplication
 @property  BOOL appleApplication
 @property  BOOL arcadeApplication
 @property  BOOL appClip
 @property  NSString *displayName
 @property  BOOL monarchLinked
 @property  BOOL tigrisLinked
 @property  BOOL peaceLinked
 @property  BOOL peaceBLinked
 @property  BOOL yukonLinked
 @property  BOOL yukonELinked
 @property  BOOL azulLinked
 @property  unsigned long supportedTypes
 @property  NSSet *urlSchemes
 @property  NSURL *restorationArchiveContainerURL
 @property  NSString *installInstanceID
 @property  BOOL representsWebApplication
 @property  BOOL supports64Bit
 @property  BOOL supportsMultiwindow
 @property  BOOL newsstand
 @property  unsigned long applicationSizeInBytes
 @property  NSArray *iTunesCategoriesOrderedByRelevancy
 @property  unsigned long visibilityOverride
 @property  BOOL hasHiddenTag
 @property  BOOL usesRLNDataProvider
 @property  BOOL systemAppSupportsLocalNotifications
 @property  BOOL suppressUserNotificationPermissionAlert
 @property  unsigned long allowedNKNotificationsPerDay
 @property  BOOL statusBarIsLegacy
 @property  long long defaultStatusBarStyle
 @property  int ignoredStatusBarStyleOverrides
 @property  BOOL shouldLaunchSuspendedAlways
 @property  NSArray *domainsToPreheat
 @property  BOOL launchableDuringSetup
 @property  BOOL shouldLaunchWithLiveContentASAP
 @property  XBSnapshotContainerIdentity *manifestContainerIdentity
 @property  BOOL usesSplashBoard
 @property  BOOL wantsLaunchWithoutPNG
 @property  BOOL wantsFullScreen
 @property  BOOL prefersSavedSnapshots
 @property  BOOL preventsLaunchInterfaceSplitting
 @property  BOOL disablesClassicMode
 @property  NSString *launchInterfaceFileName
 @property  NSArray *launchImageInfo
 @property  long long whitePointAdaptivityStyle
 @property  BOOL requiresHiDPI
 @property  BOOL disallowsNotificationCenter
 @property  BOOL disallowsControlCenter
 @property  Class iconClass
 @property  NSString *applicationShortcutWidgetBundleIdentifier
 @property  NSArray *staticApplicationShortcutItems
 @property  unsigned long dynamicApplicationShortcutItemsVersion
 @property  unsigned long uninstallCapability
 @property  int networkUsageTypes
 @property  unsigned long voipClass
 @property  BOOL supportsLegacyVOIPBackgroundMode
 @property  BOOL supportsAudioBackgroundMode
 @property  BOOL supportsFetchBackgroundMode
 @property  BOOL supportsRemoteNotificationBackgroundMode
 @property  BOOL supportsNewsstandContentBackgroundMode
 @property  CRCarPlayAppDeclaration *carPlayDeclaration
 @property  BOOL gameCenterEnabled
 @property  BOOL wasGameCenterEverEnabled
 @property  BOOL cloudDemoted
 @property  BOOL wantsExclusiveForeground
 @property  BOOL shouldSkipCrossfadeToLive
 @property  NSURL *documentInboxURL
 @property  NSUserDefaults *userDefaults
 @property  BOOL supportsDirectToAirplay
 @property  BOOL alwaysReceivesOpenURLSource
 @property  BOOL alwaysDeliversOpenURLActionsUsingWorkspace
 @property  NSString *vendorName

  // class methods
  +[SBApplicationInfo _directToAirPlayBundleIDs]

  // instance methods
  -[SBApplicationInfo urlSchemes]
  -[SBApplicationInfo iconClass]
  -[SBApplicationInfo isAppClip]
  -[SBApplicationInfo isInternalApplication]
  -[SBApplicationInfo statusBarHiddenWhenVerticallyCompact]
  -[SBApplicationInfo isSystemApplication]
  -[SBApplicationInfo isGameCenterEnabled]
  -[SBApplicationInfo alwaysDeliversOpenURLActionsUsingWorkspace]
  -[SBApplicationInfo userDefaults]
  -[SBApplicationInfo applicationShortcutWidgetBundleIdentifier]
  -[SBApplicationInfo allowedNKNotificationsPerDay]
  -[SBApplicationInfo backgroundStyleForRequestedBackgroundStyle:]
  -[SBApplicationInfo isTigrisLinked]
  -[SBApplicationInfo supportedTypes]
  -[SBApplicationInfo vendorName]
  -[SBApplicationInfo isPeaceLinked]
  -[SBApplicationInfo isYukonLinked]
  -[SBApplicationInfo backgroundStyle]
  -[SBApplicationInfo staticApplicationShortcutItems]
  -[SBApplicationInfo representsWebApplication]
  -[SBApplicationInfo isYukonELinked]
  -[SBApplicationInfo shouldLaunchWithLiveContentASAP]
  -[SBApplicationInfo alwaysReceivesOpenURLSource]
  -[SBApplicationInfo ignoredStatusBarStyleOverrides]
  -[SBApplicationInfo dataContainerURL]
  -[SBApplicationInfo .cxx_destruct]
  -[SBApplicationInfo networkUsageTypes]
  -[SBApplicationInfo applicationSizeInBytes]
  -[SBApplicationInfo prefersSavedSnapshots]
  -[SBApplicationInfo wantsExclusiveForeground]
  -[SBApplicationInfo requiresHiDPI]
  -[SBApplicationInfo supportsDirectToAirplayOrIsAllowListed]
  -[SBApplicationInfo disallowsNotificationCenter]
  -[SBApplicationInfo launchImageInfo]
  -[SBApplicationInfo preventsLaunchInterfaceSplitting]
  -[SBApplicationInfo installInstanceID]
  -[SBApplicationInfo isMonarchLinked]
  -[SBApplicationInfo restorationArchiveContainerURL]
  -[SBApplicationInfo isStatusBarLegacy]
  -[SBApplicationInfo disallowsControlCenter]
  -[SBApplicationInfo iTunesCategoriesOrderedByRelevancy]
  -[SBApplicationInfo carPlayDeclaration]
  -[SBApplicationInfo defaultStatusBarStyle]
  -[SBApplicationInfo launchInterfaceFileName]
  -[SBApplicationInfo wantsLaunchWithoutPNG]
  -[SBApplicationInfo isArcadeApplication]
  -[SBApplicationInfo usesRLNDataProvider]
  -[SBApplicationInfo isLaunchableDuringSetup]
  -[SBApplicationInfo shouldSkipCrossfadeToLive]
  -[SBApplicationInfo supportsRemoteNotificationBackgroundMode]
  -[SBApplicationInfo manifestContainerIdentity]
  -[SBApplicationInfo supports64Bit]
  -[SBApplicationInfo canChangeBackgroundStyle]
  -[SBApplicationInfo usesSplashBoard]
  -[SBApplicationInfo supportsNewsstandContentBackgroundMode]
  -[SBApplicationInfo isAzulLinked]
  -[SBApplicationInfo voipClass]
  -[SBApplicationInfo isPeaceBLinked]
  -[SBApplicationInfo visibilityOverride]
  -[SBApplicationInfo supportsAudioBackgroundMode]
  -[SBApplicationInfo uninstallCapability]
  -[SBApplicationInfo supportsMultiwindow]
  -[SBApplicationInfo isNewsstand]
  -[SBApplicationInfo supportsLegacyVOIPBackgroundMode]
  -[SBApplicationInfo _loadFromProxy:]
  -[SBApplicationInfo isCloudDemoted]
  -[SBApplicationInfo shouldLaunchSuspendedAlways]
  -[SBApplicationInfo systemAppSupportsLocalNotifications]
  -[SBApplicationInfo domainsToPreheat]
  -[SBApplicationInfo disablesClassicMode]
  -[SBApplicationInfo supportsDirectToAirplay]
  -[SBApplicationInfo suppressUserNotificationPermissionAlert]
  -[SBApplicationInfo displayName]
  -[SBApplicationInfo whitePointAdaptivityStyle]
  -[SBApplicationInfo supportsFetchBackgroundMode]
  -[SBApplicationInfo documentInboxURL]
  -[SBApplicationInfo wantsFullScreen]
  -[SBApplicationInfo wasGameCenterEverEnabled]
  -[SBApplicationInfo isAppleApplication]
  -[SBApplicationInfo dynamicApplicationShortcutItemsVersion]
  -[SBApplicationInfo hasHiddenTag]


SBSwitcherSettingsChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBSwitcherSettingsChangedSwitcherModifierEvent type]


SBLaunchImageOverridesContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *sceneID
 @property  SBActivationSettings *activationSettings
 @property  BOOL ignoreSnapshots
 @property  NSString *launchImageName
 @property  NSURL *url

  // instance methods
  -[SBLaunchImageOverridesContext url]
  -[SBLaunchImageOverridesContext sceneID]
  -[SBLaunchImageOverridesContext .cxx_destruct]
  -[SBLaunchImageOverridesContext activationSettings]
  -[SBLaunchImageOverridesContext launchImageName]
  -[SBLaunchImageOverridesContext initWithSceneID:activationSettings:]
  -[SBLaunchImageOverridesContext ignoreSnapshots]


SBDisplayItem : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, BSDescriptionProviding>
 @property  long long type
 @property  NSString *bundleIdentifier
 @property  NSString *uniqueIdentifier
 @property  NSString *webClipIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDisplayItem displayItemWithType:bundleIdentifier:uniqueIdentifier:]
  +[SBDisplayItem homeScreenDisplayItem]
  +[SBDisplayItem remoteAlertDisplayItemWithServiceBundleIdentifier:]
  +[SBDisplayItem switcherServiceDisplayItemWithServiceIdentifier:]
  +[SBDisplayItem webAppDisplayItemWithWebAppIdentifier:]
  +[SBDisplayItem applicationDisplayItemWithBundleIdentifier:sceneIdentifier:]
  +[SBDisplayItem displayItemWithProtobufRepresentation:]

  // instance methods
  -[SBDisplayItem copyWithZone:]
  -[SBDisplayItem _initWithArrayPlistRepresentation:]
  -[SBDisplayItem init]
  -[SBDisplayItem isHomeScreenDisplayItem]
  -[SBDisplayItem compare:]
  -[SBDisplayItem isEqualToDisplayItemForFloatingDockSuggestions:]
  -[SBDisplayItem .cxx_destruct]
  -[SBDisplayItem initWithLegacyPlistRepresentation:]
  -[SBDisplayItem _calculateUniqueStringRepresentation]
  -[SBDisplayItem succinctDescriptionBuilder]
  -[SBDisplayItem _initWithDictionaryPlistRepresentation:]
  -[SBDisplayItem uniqueIdentifier]
  -[SBDisplayItem plistRepresentation]
  -[SBDisplayItem type]
  -[SBDisplayItem uniqueStringRepresentation]
  -[SBDisplayItem succinctDescription]
  -[SBDisplayItem _initWithPlistRepresentation:sceneIdentifierFromBundleIdentifierGenerator:]
  -[SBDisplayItem webClipIdentifier]
  -[SBDisplayItem isEqual:]
  -[SBDisplayItem initWithType:bundleIdentifier:uniqueIdentifier:]
  -[SBDisplayItem _initWithLegacyPlistRepresentation:sceneIdentifierFromBundleIdentifierGenerator:]
  -[SBDisplayItem displayItemForFloatingDockSuggestionsComparison]
  -[SBDisplayItem bundleIdentifier]
  -[SBDisplayItem _newSceneIdentifierForBundleIdentifier:]
  -[SBDisplayItem protobufRepresentation]
  -[SBDisplayItem descriptionWithMultilinePrefix:]
  -[SBDisplayItem initWithPlistRepresentation:]
  -[SBDisplayItem descriptionBuilderWithMultilinePrefix:]


SBTransitionSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  unsigned long phase
 @property  BOOL animated
 @property  SBAppLayout *fromAppLayout
 @property  long long fromEnvironmentMode
 @property  SBAppLayout *toAppLayout
 @property  long long toEnvironmentMode
 @property  long long fromInterfaceOrientation
 @property  long long toInterfaceOrientation
 @property  NSUUID *transitionID

  // instance methods
  -[SBTransitionSwitcherModifierEvent copyWithZone:]
  -[SBTransitionSwitcherModifierEvent setPhase:]
  -[SBTransitionSwitcherModifierEvent setAnimated:]
  -[SBTransitionSwitcherModifierEvent phase]
  -[SBTransitionSwitcherModifierEvent isAnimated]
  -[SBTransitionSwitcherModifierEvent .cxx_destruct]
  -[SBTransitionSwitcherModifierEvent type]
  -[SBTransitionSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBTransitionSwitcherModifierEvent initWithTransitionID:phase:animated:]
  -[SBTransitionSwitcherModifierEvent isTransitionEvent]
  -[SBTransitionSwitcherModifierEvent transitionID]
  -[SBTransitionSwitcherModifierEvent fromAppLayout]
  -[SBTransitionSwitcherModifierEvent setFromAppLayout:]
  -[SBTransitionSwitcherModifierEvent fromEnvironmentMode]
  -[SBTransitionSwitcherModifierEvent setFromEnvironmentMode:]
  -[SBTransitionSwitcherModifierEvent toAppLayout]
  -[SBTransitionSwitcherModifierEvent setToAppLayout:]
  -[SBTransitionSwitcherModifierEvent toEnvironmentMode]
  -[SBTransitionSwitcherModifierEvent setToEnvironmentMode:]
  -[SBTransitionSwitcherModifierEvent fromInterfaceOrientation]
  -[SBTransitionSwitcherModifierEvent setFromInterfaceOrientation:]
  -[SBTransitionSwitcherModifierEvent toInterfaceOrientation]
  -[SBTransitionSwitcherModifierEvent setToInterfaceOrientation:]


SBMainTransitionSwitcherModifierEvent : SBTransitionSwitcherModifierEvent
 @property  BOOL fromAppLayoutWantsExclusiveForeground
 @property  BOOL toAppLayoutWantsExclusiveForeground
 @property  SBAppLayout *fromFloatingAppLayout
 @property  long long fromFloatingConfiguration
 @property  BOOL fromFloatingSwitcherVisible
 @property  SBAppLayout *toFloatingAppLayout
 @property  long long toFloatingConfiguration
 @property  BOOL toFloatingSwitcherVisible
 @property  NSString *fromAppExposeBundleID
 @property  NSString *toAppExposeBundleID
 @property  unsigned long fromInlineAppExposeRoles
 @property  unsigned long toInlineAppExposeRoles
 @property  SBBannerUnfurlSourceContext *bannerUnfurlSourceContext
 @property  BOOL prefersCrossfadeTransition
 @property  BOOL gestureInitiated
 @property  BOOL dragAndDropTransition
 @property  BOOL breadcrumbTransition
 @property  BOOL inlineAppExposeTransition
 @property  BOOL morphToPiPTransition
 @property  BOOL morphFromPiPTransition
 @property  BOOL continuityTransition
 @property  BOOL bannerUnfurlTransition
 @property  BOOL iconZoomDisabled
 @property  BOOL spotlightTransition
 @property  NSArray *appLayoutsWithRemovalContexts

  // instance methods
  -[SBMainTransitionSwitcherModifierEvent copyWithZone:]
  -[SBMainTransitionSwitcherModifierEvent setToInlineAppExposeRoles:]
  -[SBMainTransitionSwitcherModifierEvent isInlineAppExposeTransition]
  -[SBMainTransitionSwitcherModifierEvent isDragAndDropTransition]
  -[SBMainTransitionSwitcherModifierEvent setBannerUnfurlSourceContext:]
  -[SBMainTransitionSwitcherModifierEvent isIconZoomDisabled]
  -[SBMainTransitionSwitcherModifierEvent setContinuityTransition:]
  -[SBMainTransitionSwitcherModifierEvent prefersCrossfadeTransition]
  -[SBMainTransitionSwitcherModifierEvent fromFloatingAppLayout]
  -[SBMainTransitionSwitcherModifierEvent setToAppLayoutWantsExclusiveForeground:]
  -[SBMainTransitionSwitcherModifierEvent toInlineAppExposeRoles]
  -[SBMainTransitionSwitcherModifierEvent toAppLayoutWantsExclusiveForeground]
  -[SBMainTransitionSwitcherModifierEvent setIconZoomDisabled:]
  -[SBMainTransitionSwitcherModifierEvent setToAppExposeBundleID:]
  -[SBMainTransitionSwitcherModifierEvent setBreadcrumbTransition:]
  -[SBMainTransitionSwitcherModifierEvent .cxx_destruct]
  -[SBMainTransitionSwitcherModifierEvent fromInlineAppExposeRoles]
  -[SBMainTransitionSwitcherModifierEvent bannerUnfurlSourceContext]
  -[SBMainTransitionSwitcherModifierEvent setFromFloatingSwitcherVisible:]
  -[SBMainTransitionSwitcherModifierEvent toAppExposeBundleID]
  -[SBMainTransitionSwitcherModifierEvent setFromFloatingAppLayout:]
  -[SBMainTransitionSwitcherModifierEvent setToFloatingConfiguration:]
  -[SBMainTransitionSwitcherModifierEvent fromFloatingConfiguration]
  -[SBMainTransitionSwitcherModifierEvent type]
  -[SBMainTransitionSwitcherModifierEvent toFloatingAppLayout]
  -[SBMainTransitionSwitcherModifierEvent toFloatingConfiguration]
  -[SBMainTransitionSwitcherModifierEvent isSpotlightTransition]
  -[SBMainTransitionSwitcherModifierEvent setFromAppExposeBundleID:]
  -[SBMainTransitionSwitcherModifierEvent setSpotlightTransition:]
  -[SBMainTransitionSwitcherModifierEvent fromFloatingSwitcherVisible]
  -[SBMainTransitionSwitcherModifierEvent isBreadcrumbTransition]
  -[SBMainTransitionSwitcherModifierEvent isMorphToPiPTransition]
  -[SBMainTransitionSwitcherModifierEvent setGestureInitiated:]
  -[SBMainTransitionSwitcherModifierEvent setFromFloatingConfiguration:]
  -[SBMainTransitionSwitcherModifierEvent setPrefersCrossfadeTransition:]
  -[SBMainTransitionSwitcherModifierEvent removalContextForAppLayout:]
  -[SBMainTransitionSwitcherModifierEvent isGestureInitiated]
  -[SBMainTransitionSwitcherModifierEvent toFloatingSwitcherVisible]
  -[SBMainTransitionSwitcherModifierEvent isMorphFromPiPTransition]
  -[SBMainTransitionSwitcherModifierEvent setFromInlineAppExposeRoles:]
  -[SBMainTransitionSwitcherModifierEvent setMorphFromPiPTransition:]
  -[SBMainTransitionSwitcherModifierEvent fromAppLayoutWantsExclusiveForeground]
  -[SBMainTransitionSwitcherModifierEvent fromAppExposeBundleID]
  -[SBMainTransitionSwitcherModifierEvent setToFloatingAppLayout:]
  -[SBMainTransitionSwitcherModifierEvent setRemovalContext:forAppLayout:]
  -[SBMainTransitionSwitcherModifierEvent isBannerUnfurlTransition]
  -[SBMainTransitionSwitcherModifierEvent setInlineAppExposeTransition:]
  -[SBMainTransitionSwitcherModifierEvent setDragAndDropTransition:]
  -[SBMainTransitionSwitcherModifierEvent setFromAppLayoutWantsExclusiveForeground:]
  -[SBMainTransitionSwitcherModifierEvent isContinuityTransition]
  -[SBMainTransitionSwitcherModifierEvent appLayoutsWithRemovalContexts]
  -[SBMainTransitionSwitcherModifierEvent setBannerUnfurlTransition:]
  -[SBMainTransitionSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBMainTransitionSwitcherModifierEvent setMorphToPiPTransition:]
  -[SBMainTransitionSwitcherModifierEvent setToFloatingSwitcherVisible:]


SBInlineTransitionSwitcherModifierEvent : SBTransitionSwitcherModifierEvent
 @property  unsigned long scrollAxis
 @property  double cardScale
 @property  {CGSize=dd} fixedCardSize

  // instance methods
  -[SBInlineTransitionSwitcherModifierEvent copyWithZone:]
  -[SBInlineTransitionSwitcherModifierEvent setScrollAxis:]
  -[SBInlineTransitionSwitcherModifierEvent type]
  -[SBInlineTransitionSwitcherModifierEvent scrollAxis]
  -[SBInlineTransitionSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBInlineTransitionSwitcherModifierEvent cardScale]
  -[SBInlineTransitionSwitcherModifierEvent setCardScale:]
  -[SBInlineTransitionSwitcherModifierEvent fixedCardSize]
  -[SBInlineTransitionSwitcherModifierEvent setFixedCardSize:]


SBBacklightStudyLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBBacklightControllerObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBacklightStudyLogger backlightController:didAnimateBacklightToFactor:source:]
  -[SBBacklightStudyLogger dealloc]
  -[SBBacklightStudyLogger .cxx_destruct]
  -[SBBacklightStudyLogger initWithController:]


SBFluidSwitcherViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBFluidSwitcherPageContentViewProviderDelegate, SBChainableModifierDelegate, SBAppSwitcherSnapshotImageCacheDelegate, BSUIScrollViewDelegate, SBFluidSwitcherItemContainerDelegate, SBIconViewObserver, BSDescriptionProviding, UIGestureRecognizerDelegate, SBSearchGestureObserver, SBChainableModifierDelegate, PTSettingsKeyObserver, PTSettingsKeyPathObserver, SBHistorianSwitcherModifierDelegate, SBSwitcherLiveContentOverlayCoordinatorDelegate, SBAppSwitcherReusableSnapshotViewDelegate, SBC2GroupCompletionDelegate, SBSwitcherContentViewControlling>
 @property  NSMutableDictionary *visibleItemContainers
 @property  NSMutableArray *hiddenRecycledItemContainers
 @property  SBAppSwitcherScrollView *scrollView
 @property  SBScrollSwitcherModifierEvent *currentScrollEvent
 @property  SBFluidSwitcherContentView *contentView
 @property  SBFluidSwitcherButton *plusButton
 @property  SBFluidSwitcherTitledButton *reopenClosedWindowsButton
 @property  SBFluidSwitcherLayoutContext *layoutContext
 @property  SBSwitcherModifier *rootModifier
 @property  SBSwitcherModifier *reduceMotionModifier
 @property  NSMutableDictionary *hiddenIconViews
 @property  NSMutableDictionary *hiddenIconViewContainers
 @property  unsigned long traceType
 @property  SBFloatingDockBehaviorAssertion *inAppFloatingDockBehaviorAssertion
 @property  SBFloatingDockBehaviorAssertion *transientOverlayFloatingDockBehaviorAssertion
 @property  SBFloatingDockBehaviorAssertion *switcherFloatingDockBehaviorAssertion
 @property  SBFloatingDockWindowLevelAssertion *switcherFloatingDockWindowLevelAssertion
 @property  SBFloatingDockWindowLevelAssertion *transientOverlayFloatingDockWindowLevelAssertion
 @property  SBFHomeGrabberSettings *grabberSettings
 @property  SBViewMorphAnimator *pipViewMorphAnimator
 @property  UILabel *modifierStackDebugLabel
 @property  <BSInvalidatable> *wallpaperRequireAssertion
 @property  NSArray *appLayouts
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBSwitcherContentViewControllerDelegate> *delegate
 @property  <SBSwitcherContentViewControllerDataSource> *dataSource
 @property  SBBestAppSuggestion *bestAppSuggestion
 @property  BOOL showModifierTimeline
 @property  long long contentOrientation
 @property  BOOL liveContentRasterizationDisabled
 @property  BOOL canInterruptActiveTransition
 @property  BSAnimationSettings *defaultTransitionAnimationSettings

  // instance methods
  -[SBFluidSwitcherViewController switcherSettings]
  -[SBFluidSwitcherViewController _performModifierScrollToAppLayoutResponse:]
  -[SBFluidSwitcherViewController _updateModifierStackDebugLabelPresence]
  -[SBFluidSwitcherViewController traceType]
  -[SBFluidSwitcherViewController isFloatingDockSupported]
  -[SBFluidSwitcherViewController grabberSettings]
  -[SBFluidSwitcherViewController reduceMotionModifier]
  -[SBFluidSwitcherViewController _performModifierHapticResponse:]
  -[SBFluidSwitcherViewController isShowingModifierTimeline]
  -[SBFluidSwitcherViewController _performModifierEmitSBEventResponse:]
  -[SBFluidSwitcherViewController viewDidLoad]
  -[SBFluidSwitcherViewController handleHomeButtonPress]
  -[SBFluidSwitcherViewController _updateHomeScreenContentRequirement]
  -[SBFluidSwitcherViewController scrollViewDidScroll:withContext:]
  -[SBFluidSwitcherViewController iconViewWasRecycled:]
  -[SBFluidSwitcherViewController handleHeadsetButtonPress:]
  -[SBFluidSwitcherViewController setBestAppSuggestion:]
  -[SBFluidSwitcherViewController _updateKeyboardSuppressionAssertion]
  -[SBFluidSwitcherViewController searchGesture:startedShowing:]
  -[SBFluidSwitcherViewController activatingDisplayItemForAppLayout:]
  -[SBFluidSwitcherViewController defaultTransitionAnimationSettings]
  -[SBFluidSwitcherViewController bestAppSuggestion]
  -[SBFluidSwitcherViewController areLiveContentOverlayUpdatesSuspended]
  -[SBFluidSwitcherViewController handleLockButtonPress]
  -[SBFluidSwitcherViewController _updateLayoutWithCompletion:]
  -[SBFluidSwitcherViewController handleHomeButtonLongPress]
  -[SBFluidSwitcherViewController pipViewMorphAnimator]
  -[SBFluidSwitcherViewController handleVolumeDownButtonPress]
  -[SBFluidSwitcherViewController _appLayoutForItemContainerAtLocation:environment:]
  -[SBFluidSwitcherViewController handleVolumeUpButtonPress]
  -[SBFluidSwitcherViewController _performModifierEmitStudyLogResponse:]
  -[SBFluidSwitcherViewController setHiddenRecycledItemContainers:]
  -[SBFluidSwitcherViewController _setupLiveContentOverlayForAppLayout:itemContainer:overlay:]
  -[SBFluidSwitcherViewController _updateSnapshotCacheReloadingForActiveInterfaceOrientationChange]
  -[SBFluidSwitcherViewController isShowingSpotlightOrTodayView]
  -[SBFluidSwitcherViewController handleHomeButtonDoublePress]
  -[SBFluidSwitcherViewController settings:changedValueForKey:]
  -[SBFluidSwitcherViewController _isPerformingMatchMoveToIconView]
  -[SBFluidSwitcherViewController _performModifierIconViewVisibilityUpdateResponse:]
  -[SBFluidSwitcherViewController setCurrentScrollEvent:]
  -[SBFluidSwitcherViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFluidSwitcherViewController setDataSource:]
  -[SBFluidSwitcherViewController orientationForPageViewFromProvider:]
  -[SBFluidSwitcherViewController isAppLayoutMostRecentRepresentationOfDisplayItems:]
  -[SBFluidSwitcherViewController _updateSpringBoardStatusBarAssertionAnimated:]
  -[SBFluidSwitcherViewController isWindowVisible]
  -[SBFluidSwitcherViewController init]
  -[SBFluidSwitcherViewController switcherDimmingViewLayoutElement]
  -[SBFluidSwitcherViewController _performFolderSnapshotRequestResponse:]
  -[SBFluidSwitcherViewController _prepareForCrossfadeIfNeeded]
  -[SBFluidSwitcherViewController morphToPiPTargetScale]
  -[SBFluidSwitcherViewController setLayoutContext:]
  -[SBFluidSwitcherViewController shouldAddAppLayoutToFront:forTransitionWithContext:transitionCompleted:]
  -[SBFluidSwitcherViewController isUserInteractionEnabled]
  -[SBFluidSwitcherViewController minimumHomeScreenScale]
  -[SBFluidSwitcherViewController _appLayoutWantsToBeKeptInViewHierarchy:]
  -[SBFluidSwitcherViewController _updateLayoutForInterfaceOrientation:]
  -[SBFluidSwitcherViewController appLayoutsGenerationCount]
  -[SBFluidSwitcherViewController switcherFloatingDockBehaviorAssertion]
  -[SBFluidSwitcherViewController noteKeyboardFocusDidChangeToSceneID:]
  -[SBFluidSwitcherViewController removeLiveContentOverlayForAppLayout:animated:]
  -[SBFluidSwitcherViewController canInterruptActiveTransition]
  -[SBFluidSwitcherViewController _updateHomeScreenPointerInteractions]
  -[SBFluidSwitcherViewController currentVelocityValueForVisibleAppLayout:key:]
  -[SBFluidSwitcherViewController _addVisibleItemContainerForAppLayout:]
  -[SBFluidSwitcherViewController _updateFloatingDockBehaviorAssertion]
  -[SBFluidSwitcherViewController setHiddenIconViews:]
  -[SBFluidSwitcherViewController shouldAcceleratedHomeButtonPressBegin]
  -[SBFluidSwitcherViewController _layoutVisibleItemsWithCompletion:]
  -[SBFluidSwitcherViewController setGrabberSettings:]
  -[SBFluidSwitcherViewController iconViewForAppLayout:]
  -[SBFluidSwitcherViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBFluidSwitcherViewController _performModifierUpdateLayoutResponse:]
  -[SBFluidSwitcherViewController _updateModifierStackDebugLabel]
  -[SBFluidSwitcherViewController setShowModifierTimeline:]
  -[SBFluidSwitcherViewController newAppLayoutsGenCount]
  -[SBFluidSwitcherViewController _updateContentViewPassesTouchesThrough]
  -[SBFluidSwitcherViewController _performModifierInvalidateAdjustedAppLayoutsResponse:]
  -[SBFluidSwitcherViewController iconForAppLayout:]
  -[SBFluidSwitcherViewController _liveContentOverlayForHandlingHardwareButtonEvents]
  -[SBFluidSwitcherViewController setLiveContentRasterizationDisabled:]
  -[SBFluidSwitcherViewController _dispatchEventAndHandleAction:]
  -[SBFluidSwitcherViewController setLiveContentOverlayUpdatesSuspended:]
  -[SBFluidSwitcherViewController _performModifierCompletionResponse:]
  -[SBFluidSwitcherViewController gestureHandlingModifier:averageVelocityOverDuration:]
  -[SBFluidSwitcherViewController homeScreenIconScaleForAppLayout:]
  -[SBFluidSwitcherViewController switcherWindowLevel]
  -[SBFluidSwitcherViewController iconImageFrameForAppLayout:]
  -[SBFluidSwitcherViewController numberOfVisibleCards]
  -[SBFluidSwitcherViewController _updateVisibleItemsLayoutAndStyleWithCompletion:]
  -[SBFluidSwitcherViewController dealloc]
  -[SBFluidSwitcherViewController snapshotSizeForItemWithRole:inAppLayout:interfaceOrientation:inImageCache:]
  -[SBFluidSwitcherViewController contentView]
  -[SBFluidSwitcherViewController iconViewSizeDidChange:]
  -[SBFluidSwitcherViewController hiddenIconViewContainers]
  -[SBFluidSwitcherViewController isHomeScreenSidebarVisible]
  -[SBFluidSwitcherViewController _folderScrolledEnoughToClipSwitcherIconView:]
  -[SBFluidSwitcherViewController homeScreenHasOpenFolder]
  -[SBFluidSwitcherViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFluidSwitcherViewController scrollViewKillingProgressUpdated:ofContainer:]
  -[SBFluidSwitcherViewController homeScreenHasOpenFolderInLocation:]
  -[SBFluidSwitcherViewController handleReopenClosedWindowsButtonTapped:]
  -[SBFluidSwitcherViewController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[SBFluidSwitcherViewController homeScreenInterfaceOrientation]
  -[SBFluidSwitcherViewController .cxx_destruct]
  -[SBFluidSwitcherViewController _acquireKeyboardSuppressionAssertionForMode:]
  -[SBFluidSwitcherViewController _updateAppExposeAccessoryButtonsExtendedTouchRegions]
  -[SBFluidSwitcherViewController layoutContext]
  -[SBFluidSwitcherViewController _temporarilyHideMatchMovedZoomDownAnimationViewAnimated:]
  -[SBFluidSwitcherViewController _performModifierMatchMoveToIconViewResponse:]
  -[SBFluidSwitcherViewController scrollableQueryModifier:convertScrollViewPointToContainerViewCoordinateSpace:]
  -[SBFluidSwitcherViewController viewControllerForTransientOverlayAppLayout:fromProvider:]
  -[SBFluidSwitcherViewController isStatusBarHiddenForAppLayout:]
  -[SBFluidSwitcherViewController noteModelDidMutateForRemovalOfAppLayout:forReason:animated:]
  -[SBFluidSwitcherViewController _backgroundContrastDidChange:]
  -[SBFluidSwitcherViewController homeGestureSettings]
  -[SBFluidSwitcherViewController noteAppLayoutsDidChange]
  -[SBFluidSwitcherViewController _updateStatusBarAndHomeGrabberVisibilityForAppLayout:animated:]
  -[SBFluidSwitcherViewController hiddenIconViews]
  -[SBFluidSwitcherViewController _createWorkspaceTransientOverlayForAppLayout:]
  -[SBFluidSwitcherViewController _frameForFloatingAppLayoutInInterfaceOrientation:floatingConfiguration:]
  -[SBFluidSwitcherViewController _updateStyleWithCompletion:]
  -[SBFluidSwitcherViewController _updateSnapshotCache]
  -[SBFluidSwitcherViewController performAnimatedInsertionOfAppLayouts:atIndexes:completion:]
  -[SBFluidSwitcherViewController _performModifierInjectVelocityResponse:]
  -[SBFluidSwitcherViewController switcherViewBounds]
  -[SBFluidSwitcherViewController succinctDescriptionBuilder]
  -[SBFluidSwitcherViewController shouldAnimateInsertionOfAppLayouts:atIndexes:]
  -[SBFluidSwitcherViewController _performModifierPerformTransitionResponse:]
  -[SBFluidSwitcherViewController isFloatingDockFullyPresented]
  -[SBFluidSwitcherViewController _blurItemContainerWithAnimation:]
  -[SBFluidSwitcherViewController _allowsHeaderItemsForAppLayout:]
  -[SBFluidSwitcherViewController scrollView]
  -[SBFluidSwitcherViewController _actuateEmptyAppSwitcherHaptic]
  -[SBFluidSwitcherViewController _updateScrollViewSizeAndSpacing]
  -[SBFluidSwitcherViewController noteModelDidMutateForInsertionOfAppLayouts:atIndexes:willAnimate:]
  -[SBFluidSwitcherViewController transientOverlayFloatingDockBehaviorAssertion]
  -[SBFluidSwitcherViewController entityRemovalSettings]
  -[SBFluidSwitcherViewController acquiredViewController:forTransientOverlayAppLayout:]
  -[SBFluidSwitcherViewController _scrollToAppLayout:animated:completion:]
  -[SBFluidSwitcherViewController isReduceMotionEnabled]
  -[SBFluidSwitcherViewController _iconImageFrameForIconView:]
  -[SBFluidSwitcherViewController _ensureSubviewOrdering]
  -[SBFluidSwitcherViewController setWallpaperRequireAssertion:]
  -[SBFluidSwitcherViewController _updateAppStatusBarAndHomeGrabberVisibilityAnimated:]
  -[SBFluidSwitcherViewController _configureApplicationAndTransientOverlayDockBehaviorAssertionsForContext:]
  -[SBFluidSwitcherViewController setTraceType:]
  -[SBFluidSwitcherViewController medusaSettings]
  -[SBFluidSwitcherViewController _updatePlusButtonPresence]
  -[SBFluidSwitcherViewController hasHomeButton]
  -[SBFluidSwitcherViewController _warmupEmptyAppSwitcherHaptic]
  -[SBFluidSwitcherViewController setPlusButton:]
  -[SBFluidSwitcherViewController _setupMorphToPiPIfNeededForTransitionContext:]
  -[SBFluidSwitcherViewController _applyStyleToItemContainer:completion:]
  -[SBFluidSwitcherViewController _updateReopenClosedWindowsButtonText]
  -[SBFluidSwitcherViewController _itemContainerForAppLayoutIfExists:]
  -[SBFluidSwitcherViewController animationControllerForTransitionRequest:]
  -[SBFluidSwitcherViewController _performWithFixedUpdateMode:usingBlock:]
  -[SBFluidSwitcherViewController wallpaperRequireAssertion]
  -[SBFluidSwitcherViewController shouldAnimateRemovalOfAppLayout:forReason:]
  -[SBFluidSwitcherViewController viewWillLayoutSubviews]
  -[SBFluidSwitcherViewController scrollViewDidEndScrolling:]
  -[SBFluidSwitcherViewController _removeVisibleItemContainerForAppLayout:]
  -[SBFluidSwitcherViewController _performCrossfadeIfNeededWithCompletion:]
  -[SBFluidSwitcherViewController _updateReopenClosedWindowsButtonWithMode:completion:]
  -[SBFluidSwitcherViewController isStudyLogEnabled]
  -[SBFluidSwitcherViewController rootModifier]
  -[SBFluidSwitcherViewController _handleDismissTapGesture:]
  -[SBFluidSwitcherViewController _isLayoutStateSwitcher:allowTransitions:]
  -[SBFluidSwitcherViewController floatingApplicationFrameInInterfaceOrientation:floatingConfiguration:]
  -[SBFluidSwitcherViewController _viewForLayoutElement:]
  -[SBFluidSwitcherViewController contentOrientation]
  -[SBFluidSwitcherViewController didSelectContainer:]
  -[SBFluidSwitcherViewController _updatePlusButtonStyleWithMode:completion:]
  -[SBFluidSwitcherViewController setVisibleItemContainers:]
  -[SBFluidSwitcherViewController _unadjustedAppLayouts]
  -[SBFluidSwitcherViewController morphToPiPSourceAlpha]
  -[SBFluidSwitcherViewController _performModifierDosidoScaleAnimationResponse:]
  -[SBFluidSwitcherViewController floatingDockHeight]
  -[SBFluidSwitcherViewController _updateHomeScreenBackdropType]
  -[SBFluidSwitcherViewController isLiveContentRasterizationDisabled]
  -[SBFluidSwitcherViewController _sceneDeactivationPredicateMatchingAppLayouts:]
  -[SBFluidSwitcherViewController containerViewBounds]
  -[SBFluidSwitcherViewController _workspaceEntityForBundleIdentifier:inTransitionContext:]
  -[SBFluidSwitcherViewController snapshotView:shouldShowAppClipOverlayForLayout:]
  -[SBFluidSwitcherViewController switcherInterfaceOrientation]
  -[SBFluidSwitcherViewController setContentView:]
  -[SBFluidSwitcherViewController initWithNibName:bundle:]
  -[SBFluidSwitcherViewController setModifierStackDebugLabel:]
  -[SBFluidSwitcherViewController traitCollectionDidChange:]
  -[SBFluidSwitcherViewController _performEventResponse:]
  -[SBFluidSwitcherViewController _supportsKillingForAppLayout:]
  -[SBFluidSwitcherViewController genericSwitcherAccessoryLayoutElement]
  -[SBFluidSwitcherViewController visibleItemContainers]
  -[SBFluidSwitcherViewController setScrollView:]
  -[SBFluidSwitcherViewController _transitionEventForTransitionToLayoutState:identifier:phase:animated:]
  -[SBFluidSwitcherViewController _updateSwitcherDimmingViewPresence]
  -[SBFluidSwitcherViewController isDevicePad]
  -[SBFluidSwitcherViewController _performModifierNotifyIconWillZoomDownResponse:]
  -[SBFluidSwitcherViewController numberOfHiddenAppLayoutsForBundleIdentifier:]
  -[SBFluidSwitcherViewController succinctDescription]
  -[SBFluidSwitcherViewController hiddenRecycledItemContainers]
  -[SBFluidSwitcherViewController isAppLayoutVisibleInSwitcherBounds:]
  -[SBFluidSwitcherViewController _updateResignActiveAssertions]
  -[SBFluidSwitcherViewController orientationForSnapshotOfAppLayout:inImageCache:]
  -[SBFluidSwitcherViewController transientOverlayFloatingDockWindowLevelAssertion]
  -[SBFluidSwitcherViewController _reduceMotionStatusDidChange:]
  -[SBFluidSwitcherViewController setRootModifier:]
  -[SBFluidSwitcherViewController addLiveContentOverlay:forAppLayout:animated:]
  -[SBFluidSwitcherViewController homeScreenIconLocationForAppLayout:]
  -[SBFluidSwitcherViewController _transitionEventForTransitionWithContext:identifier:phase:animated:]
  -[SBFluidSwitcherViewController scaleForDownscaledSnapshotsOfAppLayout:inImageCache:]
  -[SBFluidSwitcherViewController performAnimatedRemovalOfAppLayout:forReason:completion:]
  -[SBFluidSwitcherViewController _activeTransientOverlayPresentedAppLayout]
  -[SBFluidSwitcherViewController _setupMorphAnimatorIfNeededForEntity:pid:appLayout:uniqueID:direction:gestureInitiated:]
  -[SBFluidSwitcherViewController dataSource]
  -[SBFluidSwitcherViewController settings:changedValueForKeyPath:]
  -[SBFluidSwitcherViewController _updateSwitcherBackdropViewPresence]
  -[SBFluidSwitcherViewController setHiddenIconViewContainers:]
  -[SBFluidSwitcherViewController plusButton]
  -[SBFluidSwitcherViewController homeScreenHasWidgetCenterOrLibraryOpen]
  -[SBFluidSwitcherViewController _updateFloatingDockWindowLevelAssertion]
  -[SBFluidSwitcherViewController _floatingDockIconLocationForTransitionSource:]
  -[SBFluidSwitcherViewController handleGestureDidBegin:]
  -[SBFluidSwitcherViewController killContainer:forReason:]
  -[SBFluidSwitcherViewController homeScreenIconFrameForAppLayout:]
  -[SBFluidSwitcherViewController itemContainerForAppLayoutOverlapsFloatingDock:]
  -[SBFluidSwitcherViewController shouldRubberbandFullScreenHomeGrabberView]
  -[SBFluidSwitcherViewController _updateScrollViewScrollEnabled]
  -[SBFluidSwitcherViewController inAppFloatingDockBehaviorAssertion]
  -[SBFluidSwitcherViewController iconForDisplayItem:]
  -[SBFluidSwitcherViewController setContentOrientation:]
  -[SBFluidSwitcherViewController containerViewControllerForPageViewFromProvider:]
  -[SBFluidSwitcherViewController _rebuildCachedAdjustedAppLayouts]
  -[SBFluidSwitcherViewController _performModifierTimerEventResponse:]
  -[SBFluidSwitcherViewController switcherFloatingDockWindowLevelAssertion]
  -[SBFluidSwitcherViewController _updateReopenClosedWindowsButtonPresence]
  -[SBFluidSwitcherViewController setReduceMotionModifier:]
  -[SBFluidSwitcherViewController _handlePlusButtonTapped:]
  -[SBFluidSwitcherViewController relinquishTransientOverlayViewController:]
  -[SBFluidSwitcherViewController snapshotScaleForSceneHandle:]
  -[SBFluidSwitcherViewController _shouldItemContainersUseDarkLabels]
  -[SBFluidSwitcherViewController _makeAppLayoutVisibleForTransitionWithContext:animated:completion:]
  -[SBFluidSwitcherViewController _frameForInlineAppExposeItemAspectFill:]
  -[SBFluidSwitcherViewController _handleEventResponse:]
  -[SBFluidSwitcherViewController defaultHomeScreenIconSize]
  -[SBFluidSwitcherViewController appLayouts]
  -[SBFluidSwitcherViewController canSelectContainer:numberOfTaps:]
  -[SBFluidSwitcherViewController _applyStyleToLiveContentOverlay:forItemContainer:atIndex:]
  -[SBFluidSwitcherViewController _updateHeaderItemsLabelColor]
  -[SBFluidSwitcherViewController scrollViewContentOffset]
  -[SBFluidSwitcherViewController _rotationAnimationSettingsForTransitionContext:]
  -[SBFluidSwitcherViewController modifierStackDebugLabel]
  -[SBFluidSwitcherViewController prepareAnimatedInsertionOfAppLayouts:atIndexes:]
  -[SBFluidSwitcherViewController sizeForAppLayout:fromProvider:]
  -[SBFluidSwitcherViewController reopenClosedWindowsButton]
  -[SBFluidSwitcherViewController delegateForForSnapshotPageViewFromProvider:]
  -[SBFluidSwitcherViewController setSwitcherFloatingDockWindowLevelAssertion:]
  -[SBFluidSwitcherViewController historianModifier:didRecordEntry:]
  -[SBFluidSwitcherViewController respondToInAppStatusBarRequestedHiddenUpdateAnimated:]
  -[SBFluidSwitcherViewController searchGesture:changedPercentComplete:]
  -[SBFluidSwitcherViewController setPipViewMorphAnimator:]
  -[SBFluidSwitcherViewController _frameForItemWithRole:inMainAppLayout:interfaceOrientation:]
  -[SBFluidSwitcherViewController switcherBackdropLayoutElement]
  -[SBFluidSwitcherViewController isFloatingDockGesturePossible]
  -[SBFluidSwitcherViewController _performModifierInvalidateReopenButtonTextResponse:]
  -[SBFluidSwitcherViewController setInAppFloatingDockBehaviorAssertion:]
  -[SBFluidSwitcherViewController shouldMorphToPiPForTransitionContext:]
  -[SBFluidSwitcherViewController _performContentViewScaleAnimationForDosido]
  -[SBFluidSwitcherViewController _updateVisibleItems]
  -[SBFluidSwitcherViewController setDelegate:]
  -[SBFluidSwitcherViewController appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBFluidSwitcherViewController SBC2GroupCompletionAnimationDidComplete:finished:retargeted:]
  -[SBFluidSwitcherViewController _coolDownEmptyAppSwitcherHaptic]
  -[SBFluidSwitcherViewController floatingDockViewTopMargin]
  -[SBFluidSwitcherViewController setReopenClosedWindowsButton:]
  -[SBFluidSwitcherViewController _folderExpansionAnimationWillBegin:]
  -[SBFluidSwitcherViewController _shouldInterruptPresentationAndDismiss]
  -[SBFluidSwitcherViewController _setupContentAndTransientViews]
  -[SBFluidSwitcherViewController handleEventResponse:]
  -[SBFluidSwitcherViewController displayCornerRadius]
  -[SBFluidSwitcherViewController _layoutAppLayout:completion:]
  -[SBFluidSwitcherViewController _appLayoutForWorkspaceTransientOverlay:]
  -[SBFluidSwitcherViewController homeScreenIconCornerRadiusForAppLayout:]
  -[SBFluidSwitcherViewController morphToPiPTargetCenter]
  -[SBFluidSwitcherViewController performTransitionWithContext:animated:alongsideAnimationHandler:completion:]
  -[SBFluidSwitcherViewController parentViewControllerForContentOverlay]
  -[SBFluidSwitcherViewController switcherWindow]
  -[SBFluidSwitcherViewController _iconViewForDisplayItem:isVisible:]
  -[SBFluidSwitcherViewController prepareAnimatedRemovalOfAppLayout:forReason:]
  -[SBFluidSwitcherViewController handleGestureDidUpdate:]
  -[SBFluidSwitcherViewController _updateAsynchronousSurfaceRetentionAssertion]
  -[SBFluidSwitcherViewController _webClipIdentifierForAppClipBundleIdentifier:sceneIdentifier:]
  -[SBFluidSwitcherViewController _updateSwitcherBackdropType]
  -[SBFluidSwitcherViewController _iconForWorkspaceEntity:]
  -[SBFluidSwitcherViewController _scrollView:adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBFluidSwitcherViewController currentScrollEvent]
  -[SBFluidSwitcherViewController _updateLiveContentRasterization]
  -[SBFluidSwitcherViewController _updateModifierTimelinePresence]
  -[SBFluidSwitcherViewController _performBlurItemContainerResponse:]
  -[SBFluidSwitcherViewController gestureRecognizer:shouldReceiveTouch:]
  -[SBFluidSwitcherViewController setTransientOverlayFloatingDockBehaviorAssertion:]
  -[SBFluidSwitcherViewController _configureTransitionRequestForGestureBegin:]
  -[SBFluidSwitcherViewController delegate]
  -[SBFluidSwitcherViewController descriptionWithMultilinePrefix:]
  -[SBFluidSwitcherViewController _unblurItemContainer:]
  -[SBFluidSwitcherViewController handleGestureDidEnd:]
  -[SBFluidSwitcherViewController isRTLEnabled]
  -[SBFluidSwitcherViewController homeScreenIconGridSizeClassForAppLayout:]
  -[SBFluidSwitcherViewController _firstZOrderedSubviewViewAtLocation:]
  -[SBFluidSwitcherViewController _cancelInProcessAnimationsWithOptions:]
  -[SBFluidSwitcherViewController layoutFrameForItemWithRole:inAppLayout:interfaceOrientation:forSnapshotView:]
  -[SBFluidSwitcherViewController SBC2GroupCompletionAnimationDidBegin:]
  -[SBFluidSwitcherViewController _itemContainerAtLocation:environment:]
  -[SBFluidSwitcherViewController setTransientOverlayFloatingDockWindowLevelAssertion:]
  -[SBFluidSwitcherViewController _delayForTransitionWithContext:animated:]
  -[SBFluidSwitcherViewController loadView]
  -[SBFluidSwitcherViewController initWithRootModifier:liveContentOverlayCoordinator:debugName:]
  -[SBFluidSwitcherViewController _performModifierIconOverlayVisibilityUpdateResponse:]
  -[SBFluidSwitcherViewController initWithCoder:]
  -[SBFluidSwitcherViewController frameForPageViewOfContainer:fullyPresented:]
  -[SBFluidSwitcherViewController floatingDockWindowLevel]
  -[SBFluidSwitcherViewController descriptionBuilderWithMultilinePrefix:]
  -[SBFluidSwitcherViewController _applyStyleToVisibleItemContainersWithCompletion:]
  -[SBFluidSwitcherViewController _updateWallpaperStyle]
  -[SBFluidSwitcherViewController scrollableQueryModifier:contentOffsetVelocityConsideringNextContentOffset:]
  -[SBFluidSwitcherViewController _performModifierReachabilityResponse:]
  -[SBFluidSwitcherViewController setSwitcherFloatingDockBehaviorAssertion:]
  -[SBFluidSwitcherViewController scrollViewDidEndDragging:willDecelerate:]
  -[SBFluidSwitcherViewController _performActivatePlusButtonSwitcherResponse:]
  -[SBFluidSwitcherViewController _iconControllerOverlayVisibilityDidChange:]
  -[SBFluidSwitcherViewController gestureHandlingModifierRequestsUpdate:]


SBInCallTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBInCallTestRecipe load]

  // instance methods
  -[SBInCallTestRecipe title]
  -[SBInCallTestRecipe handleVolumeIncrease]
  -[SBInCallTestRecipe handleVolumeDecrease]


SBRecordingIndicatorWindow : SBIgnoredForAutorotationSecureWindow
  // instance methods
  -[SBRecordingIndicatorWindow initWithDebugName:]
  -[SBRecordingIndicatorWindow isActive]


SBRecordingIndicatorManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBAppStatusBarAssertionManagerObserver, SBSensorActivityObserver, SBUIActiveOrientationObserver, PTSettingsKeyObserver>
 @property  UIColor *indicatorColor
 @property  BOOL isIndicatorVisible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecordingIndicatorManager activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBRecordingIndicatorManager settings:changedValueForKey:]
  -[SBRecordingIndicatorManager .cxx_destruct]
  -[SBRecordingIndicatorManager activityDidChangeForSensorActivityDataProvider:]
  -[SBRecordingIndicatorManager activeInterfaceOrientationWillChangeToOrientation:]
  -[SBRecordingIndicatorManager initWithSensorActivityDataProvider:]
  -[SBRecordingIndicatorManager indicatorColor]
  -[SBRecordingIndicatorManager updateIndicatorColorForSensorActivityAttributions:]
  -[SBRecordingIndicatorManager _allowStatusBarDelayForCameraApp:]
  -[SBRecordingIndicatorManager setIndicatorVisible:allowStatusBarDelayForCameraApp:]
  -[SBRecordingIndicatorManager isIndicatorVisible]
  -[SBRecordingIndicatorManager setIndicatorVisible:]
  -[SBRecordingIndicatorManager dataProviderDidUpdate:]
  -[SBRecordingIndicatorManager updateRecordingIndicatorForStatusBarChanges]
  -[SBRecordingIndicatorManager updateIndicatorColorForSensorType:]
  -[SBRecordingIndicatorManager indicatorColorForSensorType:]
  -[SBRecordingIndicatorManager statusBarAssertionManager:addStatusBarSettingsAssertion:]
  -[SBRecordingIndicatorManager statusBarAssertionManager:removeStatusBarSettingsAssertion:]


SBDraggingSystemManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIDraggingSystemMonitorDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDraggingSystemManager sharedInstance]

  // instance methods
  -[SBDraggingSystemManager .cxx_destruct]
  -[SBDraggingSystemManager removeObserver:]
  -[SBDraggingSystemManager addObserver:]
  -[SBDraggingSystemManager dragSessionDidBegin:]
  -[SBDraggingSystemManager touchRoutingPolicyForBeginningDragSessionWithInfo:]
  -[SBDraggingSystemManager dragSessionDidEnd:]
  -[SBDraggingSystemManager setCommandeered:forDraggingSystemSession:forReason:]
  -[SBDraggingSystemManager setCommandeered:forDropSession:forReason:]


SBLowPowerAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // class methods
  +[SBLowPowerAlertItem initialize]
  +[SBLowPowerAlertItem _shouldIgnoreChangeToBatteryLevel:]
  +[SBLowPowerAlertItem _thresholdForLevel:]
  +[SBLowPowerAlertItem setBatteryLevel:]

  // instance methods
  -[SBLowPowerAlertItem init]
  -[SBLowPowerAlertItem initWithLevel:]
  -[SBLowPowerAlertItem wakeDisplay]
  -[SBLowPowerAlertItem shouldShowInLockScreen]
  -[SBLowPowerAlertItem configure:requirePasscodeForActions:]
  -[SBLowPowerAlertItem shouldShowInEmergencyCall]
  -[SBLowPowerAlertItem _enableLowPowerMode]


SBPresentationObservationToken : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  long long state
 @property  @? willPresentHandler
 @property  @? didPresentHandler
 @property  @? willDismissHandler
 @property  @? didDismissHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPresentationObservationToken didPresent]
  -[SBPresentationObservationToken .cxx_destruct]
  -[SBPresentationObservationToken willDismiss]
  -[SBPresentationObservationToken didDismissHandler]
  -[SBPresentationObservationToken setDidDismissHandler:]
  -[SBPresentationObservationToken state]
  -[SBPresentationObservationToken willPresent]
  -[SBPresentationObservationToken invalidate]
  -[SBPresentationObservationToken didDismiss]
  -[SBPresentationObservationToken willPresentHandler]
  -[SBPresentationObservationToken setWillPresentHandler:]
  -[SBPresentationObservationToken didPresentHandler]
  -[SBPresentationObservationToken setDidPresentHandler:]
  -[SBPresentationObservationToken willDismissHandler]
  -[SBPresentationObservationToken setWillDismissHandler:]


SBFixedLayoutModeSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBFixedLayoutModeSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFixedLayoutModeSwitcherModifier initWithUpdateMode:]


SBInteractiveScreenshotGestureRootWindow : _UIRootWindow /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // class methods
  +[SBInteractiveScreenshotGestureRootWindow _isSecure]

  // instance methods
  -[SBInteractiveScreenshotGestureRootWindow _canBecomeKeyWindow]
  -[SBInteractiveScreenshotGestureRootWindow hitTest:withEvent:]
  -[SBInteractiveScreenshotGestureRootWindow _appearsInLoupe]
  -[SBInteractiveScreenshotGestureRootWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBInteractiveScreenshotGestureRootWindow _usesWindowServerHitTesting]
  -[SBInteractiveScreenshotGestureRootWindow _shouldPrepareScreenForWindow]


SBHomeToDeckSwitcherModifier : SBHomeToSwitcherSwitcherModifier
  // instance methods
  -[SBHomeToDeckSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeToDeckSwitcherModifier visibleAppLayouts]
  -[SBHomeToDeckSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeToDeckSwitcherModifier scaleForIndex:]
  -[SBHomeToDeckSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeToDeckSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeToDeckSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeToDeckSwitcherModifier wallpaperStyle]
  -[SBHomeToDeckSwitcherModifier cardCornerRadiiForIndex:]
  -[SBHomeToDeckSwitcherModifier opacityForIndex:]
  -[SBHomeToDeckSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeToDeckSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeToDeckSwitcherModifier _layoutSettings]
  -[SBHomeToDeckSwitcherModifier frameForIndex:]
  -[SBHomeToDeckSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBHomeToDeckSwitcherModifier titleOpacityForIndex:]
  -[SBHomeToDeckSwitcherModifier darkeningAlphaForIndex:]
  -[SBHomeToDeckSwitcherModifier shadowOpacityForIndex:]
  -[SBHomeToDeckSwitcherModifier appLayoutToScrollToDuringTransition]
  -[SBHomeToDeckSwitcherModifier _opacitySettings]


SBIconListScrollingRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIconListScrollingRecipe load]

  // instance methods
  -[SBIconListScrollingRecipe title]
  -[SBIconListScrollingRecipe handleVolumeIncrease]
  -[SBIconListScrollingRecipe handleVolumeDecrease]


SBTransientOverlayDismissAllWorkspaceTransaction : SBMainWorkspaceTransaction
 @property  long long animatedOverride

  // class methods
  +[SBTransientOverlayDismissAllWorkspaceTransaction isValidForTransitionRequest:]

  // instance methods
  -[SBTransientOverlayDismissAllWorkspaceTransaction _canBeInterrupted]
  -[SBTransientOverlayDismissAllWorkspaceTransaction initWithTransitionRequest:]
  -[SBTransientOverlayDismissAllWorkspaceTransaction _begin]
  -[SBTransientOverlayDismissAllWorkspaceTransaction isAnimatedOverride]
  -[SBTransientOverlayDismissAllWorkspaceTransaction setAnimatedOverride:]


SBUISwitcherAnimationController : SBUIWorkspaceAnimationController <SBUIAnimationControllerObserver>
 @property  SBMainSwitcherViewController *switcherViewController
 @property  @? animationBlock
 @property  BOOL _interruptible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUISwitcherAnimationController _previousLayoutState]
  -[SBUISwitcherAnimationController _didComplete]
  -[SBUISwitcherAnimationController _layoutState]
  -[SBUISwitcherAnimationController animationBlock]
  -[SBUISwitcherAnimationController _updatePPTsForAnimationStart]
  -[SBUISwitcherAnimationController .cxx_destruct]
  -[SBUISwitcherAnimationController initWithWorkspaceTransitionRequest:switcherViewController:childAnimationControllers:animationBlock:]
  -[SBUISwitcherAnimationController shouldResignActiveForAnimation]
  -[SBUISwitcherAnimationController switcherViewController]
  -[SBUISwitcherAnimationController setSwitcherViewController:]
  -[SBUISwitcherAnimationController isInterruptible]
  -[SBUISwitcherAnimationController setAnimationBlock:]
  -[SBUISwitcherAnimationController _setInterruptible:]
  -[SBUISwitcherAnimationController _updatePPTsForAnimationEnd]
  -[SBUISwitcherAnimationController animationSettings]
  -[SBUISwitcherAnimationController _startAnimation]
  -[SBUISwitcherAnimationController _addSignpostsForAnimationStart]
  -[SBUISwitcherAnimationController _addSignpostsForAnimationEnd]
  -[SBUISwitcherAnimationController isReasonableMomentToInterrupt]
  -[SBUISwitcherAnimationController animationControllerDidFinishAnimation:]
  -[SBUISwitcherAnimationController _isInterruptible]


SBPhoneAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  long long slot

  // instance methods
  -[SBPhoneAlertItem .cxx_destruct]
  -[SBPhoneAlertItem slot]
  -[SBPhoneAlertItem configure:requirePasscodeForActions:]
  -[SBPhoneAlertItem initWithTitle:bodyText:slot:]


SBNetworkReselectionAlertItem : SBPhoneAlertItem
  // instance methods
  -[SBNetworkReselectionAlertItem initWithSlot:]
  -[SBNetworkReselectionAlertItem performUnlockAction]
  -[SBNetworkReselectionAlertItem lockLabel]
  -[SBNetworkReselectionAlertItem configure:requirePasscodeForActions:]
  -[SBNetworkReselectionAlertItem shortLockLabel]
  -[SBNetworkReselectionAlertItem _showPrefs]


SBIndirectTouchLifecycleMonitor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIGestureRecognizerDelegate>
 @property  UIHoverGestureRecognizer *hoverGestureRecognizer
 @property  NSHashTable *observers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIndirectTouchLifecycleMonitor setObservers:]
  -[SBIndirectTouchLifecycleMonitor .cxx_destruct]
  -[SBIndirectTouchLifecycleMonitor observers]
  -[SBIndirectTouchLifecycleMonitor setHoverGestureRecognizer:]
  -[SBIndirectTouchLifecycleMonitor removeObserver:]
  -[SBIndirectTouchLifecycleMonitor hoverGestureRecognizer]
  -[SBIndirectTouchLifecycleMonitor addObserver:]
  -[SBIndirectTouchLifecycleMonitor handleHoverEvent:]
  -[SBIndirectTouchLifecycleMonitor initWithSystemGestureManager:]
  -[SBIndirectTouchLifecycleMonitor systemGestureHoverLocationInView:]


SBTransitionSwitcherModifier : SBSwitcherModifier
 @property  unsigned long transitionPhase
 @property  NSUUID *transitionID

  // instance methods
  -[SBTransitionSwitcherModifier animationAttributesForLayoutElement:]
  -[SBTransitionSwitcherModifier handleMainTransitionEvent:]
  -[SBTransitionSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBTransitionSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBTransitionSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBTransitionSwitcherModifier .cxx_destruct]
  -[SBTransitionSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBTransitionSwitcherModifier appLayoutsToResignActive]
  -[SBTransitionSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBTransitionSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBTransitionSwitcherModifier transitionWillBegin]
  -[SBTransitionSwitcherModifier transitionPhase]
  -[SBTransitionSwitcherModifier transitionDidEnd]
  -[SBTransitionSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBTransitionSwitcherModifier handleScrollEvent:]
  -[SBTransitionSwitcherModifier keyboardSuppressionMode]
  -[SBTransitionSwitcherModifier handleRemovalEvent:]
  -[SBTransitionSwitcherModifier transitionWillUpdate]
  -[SBTransitionSwitcherModifier handleTimerEvent:]
  -[SBTransitionSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBTransitionSwitcherModifier initWithTransitionID:]
  -[SBTransitionSwitcherModifier isPreparingLayout]
  -[SBTransitionSwitcherModifier isUpdatingLayout]
  -[SBTransitionSwitcherModifier transitionID]
  -[SBTransitionSwitcherModifier transitionLiveContentRasterizationStyle]
  -[SBTransitionSwitcherModifier _handleTransitionEvent:]
  -[SBTransitionSwitcherModifier handleInlineTransitionEvent:]
  -[SBTransitionSwitcherModifier handleGestureEvent:]
  -[SBTransitionSwitcherModifier _setTransitionPhase:]


SBExampleUserNotificationCenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *latestNotificationRequestIdentifier
 @property  NSString *sectionIdentifier

  // class methods
  +[SBExampleUserNotificationCenter sharedInstance]

  // instance methods
  -[SBExampleUserNotificationCenter update]
  -[SBExampleUserNotificationCenter sectionIdentifier]
  -[SBExampleUserNotificationCenter .cxx_destruct]
  -[SBExampleUserNotificationCenter _existingNotificationRequestForIdentifier:]
  -[SBExampleUserNotificationCenter _postNotificationWithID:threadIdentifier:]
  -[SBExampleUserNotificationCenter publish]
  -[SBExampleUserNotificationCenter publish:completion:]
  -[SBExampleUserNotificationCenter latestNotificationRequestIdentifier]
  -[SBExampleUserNotificationCenter _newNotificationRequest:threadIdentifier:]
  -[SBExampleUserNotificationCenter _userNotificationCenter]
  -[SBExampleUserNotificationCenter publish:numberOfUniqueThreads:completion:]
  -[SBExampleUserNotificationCenter publishWithNumberOfUniqueThreads:]
  -[SBExampleUserNotificationCenter removeAllNotifications]


SBInvalidateReopenButtonTextSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBInvalidateReopenButtonTextSwitcherEventResponse type]


SBSceneViewStatusBarAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  BOOL statusBarHidden
 @property  long long nubViewHidden
 @property  SBAppStatusBarSettings *settings
 @property  BOOL shouldDrawStatusBarInsideSceneView
 @property  unsigned long level
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneViewStatusBarAssertion level]
  -[SBSceneViewStatusBarAssertion setStatusBarHidden:]
  -[SBSceneViewStatusBarAssertion _notifyObserversDidInvalidate]
  -[SBSceneViewStatusBarAssertion dealloc]
  -[SBSceneViewStatusBarAssertion nubViewHidden]
  -[SBSceneViewStatusBarAssertion .cxx_destruct]
  -[SBSceneViewStatusBarAssertion setShouldDrawStatusBarInsideSceneView:]
  -[SBSceneViewStatusBarAssertion _notifyObserversDidUpdate]
  -[SBSceneViewStatusBarAssertion isStatusBarHidden]
  -[SBSceneViewStatusBarAssertion settings]
  -[SBSceneViewStatusBarAssertion initWithStatusBarSettings:nubViewHidden:atLevel:]
  -[SBSceneViewStatusBarAssertion shouldDrawStatusBarInsideSceneView]
  -[SBSceneViewStatusBarAssertion removeObserver:]
  -[SBSceneViewStatusBarAssertion addObserver:]
  -[SBSceneViewStatusBarAssertion invalidate]
  -[SBSceneViewStatusBarAssertion setSettings:]
  -[SBSceneViewStatusBarAssertion setNubViewHidden:]
  -[SBSceneViewStatusBarAssertion initWithStatusBarHidden:nubViewHidden:atLevel:]


SBRemoteTransientOverlaySessionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBRemoteTransientOverlaySessionHostDelegate>
 @property  <SBRemoteTransientOverlaySessionManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRemoteTransientOverlaySessionManager init]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:requestsHandlingForButtonEvents:viewController:]
  -[SBRemoteTransientOverlaySessionManager hasSessionWithServiceProcessIdentifier:options:]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:prefersStatusBarActivityItemVisibleForServiceBundleIdentifier:]
  -[SBRemoteTransientOverlaySessionManager existingSessionsWithDefinition:options:]
  -[SBRemoteTransientOverlaySessionManager existingSessionWithSessionID:options:]
  -[SBRemoteTransientOverlaySessionManager createSessionWithDefinition:]
  -[SBRemoteTransientOverlaySessionManager .cxx_destruct]
  -[SBRemoteTransientOverlaySessionManager sessionWithDefinition:options:]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:performDismissalRequest:]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:didInvalidateWithReason:error:]
  -[SBRemoteTransientOverlaySessionManager activeWallpaperVariantForRemoteTransientOverlaySession:]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:shouldActivateWithContext:]
  -[SBRemoteTransientOverlaySessionManager _existingSessionsWithDefinition:options:]
  -[SBRemoteTransientOverlaySessionManager hasSessionWithPendingButtonEvents:options:]
  -[SBRemoteTransientOverlaySessionManager setDelegate:]
  -[SBRemoteTransientOverlaySessionManager sessionsWithDefinition:options:]
  -[SBRemoteTransientOverlaySessionManager delegate]
  -[SBRemoteTransientOverlaySessionManager _createSessionWithDefinition:]
  -[SBRemoteTransientOverlaySessionManager remoteTransientOverlaySession:performPresentationRequest:]


SBRecentDisplayItemsController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBMainDisplayWorkspaceAppInteractionEventSourceObserving>
 @property  NSOrderedSet *recentDisplayItems
 @property  <SBRecentDisplayItemsControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecentDisplayItemsController init]
  -[SBRecentDisplayItemsController dealloc]
  -[SBRecentDisplayItemsController .cxx_destruct]
  -[SBRecentDisplayItemsController _addStateCaptureHandler]
  -[SBRecentDisplayItemsController eventSource:userTouchedApplication:]
  -[SBRecentDisplayItemsController eventSource:didBeginTransitionToMode:withLayoutState:activatingElement:triggeredBy:]
  -[SBRecentDisplayItemsController eventSource:userDeletedWebBookmark:]
  -[SBRecentDisplayItemsController reset]
  -[SBRecentDisplayItemsController setDelegate:]
  -[SBRecentDisplayItemsController delegate]
  -[SBRecentDisplayItemsController initWithRemovalPersonality:movePersonality:transitionFromSources:maxDisplayItems:eventSource:applicationController:]
  -[SBRecentDisplayItemsController _removeDisplayItem:]
  -[SBRecentDisplayItemsController _allDisplayItemsPassingTest:]
  -[SBRecentDisplayItemsController _allDisplayItemsForBundleID:]
  -[SBRecentDisplayItemsController _clearDelayAfterTransitionTimer]
  -[SBRecentDisplayItemsController _firstDisplayItemForBundleID:]
  -[SBRecentDisplayItemsController _moveDisplayItemToFront:]
  -[SBRecentDisplayItemsController _displayItemForLayoutElement:]
  -[SBRecentDisplayItemsController _addOrMoveDisplayItemToFront:]
  -[SBRecentDisplayItemsController _setupDelayAfterTransitionTimerForActivatingElement:]
  -[SBRecentDisplayItemsController _allDisplayItemsForWebClipID:]
  -[SBRecentDisplayItemsController _displayItemRepresentsAppClip:]
  -[SBRecentDisplayItemsController _webClipForIdentifier:]
  -[SBRecentDisplayItemsController _displayItem:matchesBundleID:]
  -[SBRecentDisplayItemsController _associatedWebClipIdentifierForAppClipIdentifier:sceneIdentifier:]
  -[SBRecentDisplayItemsController _addDisplayItemToFront:]
  -[SBRecentDisplayItemsController _displayItemIsExecutableOnCurrentPlatform:]
  -[SBRecentDisplayItemsController _isDisallowedDisplayItem:]
  -[SBRecentDisplayItemsController eventSource:applicationsBecameHidden:]
  -[SBRecentDisplayItemsController eventSource:userRemovedSuggestions:]
  -[SBRecentDisplayItemsController eventSource:userDeletedApplications:]
  -[SBRecentDisplayItemsController eventSource:userQuitApplicationInSwitcher:]
  -[SBRecentDisplayItemsController eventSource:applicationsBecameVisible:]
  -[SBRecentDisplayItemsController eventSource:keyboardFocusChangedToApplication:]
  -[SBRecentDisplayItemsController eventSource:didFinishTransitionToMode:withLayoutState:activatingElement:triggeredBy:]
  -[SBRecentDisplayItemsController setRecentDisplayItems:]
  -[SBRecentDisplayItemsController recentDisplayItems]
  -[SBRecentDisplayItemsController removeDisplayItem:]
  -[SBRecentDisplayItemsController _firstDisplayItemForUniqueID:]
  -[SBRecentDisplayItemsController _allDisplayItemsForUniqueID:]
  -[SBRecentDisplayItemsController _allowAppToAppearWhileHidden:]
  -[SBRecentDisplayItemsController _disallowAppFromAppearingWhileHidden:]


SBWiFiManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBWiFiManager sharedInstance]

  // instance methods
  -[SBWiFiManager _primaryInterfaceChanged:]
  -[SBWiFiManager _wifiInterface]
  -[SBWiFiManager init]
  -[SBWiFiManager _lock_setWiFiDevice:]
  -[SBWiFiManager signalStrengthBars]
  -[SBWiFiManager setPowered:]
  -[SBWiFiManager .cxx_destruct]
  -[SBWiFiManager _updateSignalStrength]
  -[SBWiFiManager _updateCurrentNetwork]
  -[SBWiFiManager isPrimaryInterface]
  -[SBWiFiManager isAssociatedToIOSHotspot]
  -[SBWiFiManager _updateDevicePresence]
  -[SBWiFiManager _linkDidChange]
  -[SBWiFiManager signalStrengthRSSI]
  -[SBWiFiManager _updateSignalStrengthFromRawRSSI:andScaledRSSI:]
  -[SBWiFiManager _lock_spawnManagerCallbackThread]
  -[SBWiFiManager isAssociated]
  -[SBWiFiManager observeValueForKeyPath:ofObject:change:context:]
  -[SBWiFiManager wiFiEnabled]
  -[SBWiFiManager _lock_manager]
  -[SBWiFiManager _runManagerCallbackThread]
  -[SBWiFiManager _updateWiFiDevice]
  -[SBWiFiManager _powerStateDidChange]
  -[SBWiFiManager isPowered]
  -[SBWiFiManager currentNetworkName]
  -[SBWiFiManager _cachedIsAssociated]
  -[SBWiFiManager wifiRunLoopRef]
  -[SBWiFiManager setWiFiEnabled:]
  -[SBWiFiManager _updateWiFiState]


SBLockdownManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBLockdownManager sharedInstance]
  +[SBLockdownManager _isDeveloperDevice]

  // instance methods
  -[SBLockdownManager lockdownState]
  -[SBLockdownManager init]
  -[SBLockdownManager .cxx_destruct]
  -[SBLockdownManager _setupActivationState]
  -[SBLockdownManager _resetActivationState]
  -[SBLockdownManager brickedDevice]


SBSyncController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <DDRResetObserver, SBIdleTimerProviding>
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSyncController sharedInstance]

  // instance methods
  -[SBSyncController _idleTimerCoordinator]
  -[SBSyncController restoreState]
  -[SBSyncController _idleTimerBehavior]
  -[SBSyncController _setupRestoreTimer]
  -[SBSyncController _setIdleTimerCoordinator:]
  -[SBSyncController _delayedQuitApplications]
  -[SBSyncController resetService:didBeginDataResetWithMode:]
  -[SBSyncController isResetting]
  -[SBSyncController _wirelessSyncEnded:]
  -[SBSyncController stopObserving]
  -[SBSyncController cancelRestoring]
  -[SBSyncController dealloc]
  -[SBSyncController coordinatorRequestedIdleTimerBehavior:]
  -[SBSyncController .cxx_destruct]
  -[SBSyncController resetService:willBeginDataResetWithMode:]
  -[SBSyncController _didEndRestoring:]
  -[SBSyncController _isBackupAgentRunning]
  -[SBSyncController finishedTerminatingApplications]
  -[SBSyncController isRestoring]
  -[SBSyncController _killApplicationsIfNecessary]
  -[SBSyncController startObserving]
  -[SBSyncController _syncSessionDidBegin]
  -[SBSyncController _setRestoreState:]
  -[SBSyncController _appInstallationNotification]
  -[SBSyncController _restoreTimerFired:]
  -[SBSyncController _invalidateRestoreTimer]
  -[SBSyncController _wirelessSyncBegan:]
  -[SBSyncController beginRestoring]
  -[SBSyncController resetState]
  -[SBSyncController _syncSessionDidEnd]
  -[SBSyncController _rebootNow]
  -[SBSyncController _notifyRestoreCanProceed]
  -[SBSyncController isInUse]
  -[SBSyncController resetService:didCompleteDataResetMode:withError:completion:]


SBMainSwitcherRootSwitcherModifier : SBFluidSwitcherRootSwitcherModifier
  // instance methods
  -[SBMainSwitcherRootSwitcherModifier gestureModifierForGestureEvent:]
  -[SBMainSwitcherRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBMainSwitcherRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBMainSwitcherRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBMainSwitcherRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBMainSwitcherRootSwitcherModifier transitionModifierForMainTransitionEvent:]
  -[SBMainSwitcherRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBMainSwitcherRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBMainSwitcherRootSwitcherModifier _createNewDefaultFloorModifier]


SBApplicationService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationServerMiscDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationService sharedInstance]

  // instance methods
  -[SBApplicationService .cxx_destruct]
  -[SBApplicationService _initWithApplicationController:]
  -[SBApplicationService applicationServer:client:deleteSnapshotsForApplicationIdentifier:]


SBSOSClawGestureObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SOSManagerClientObserver, SBVolumePressBandit>
 @property  NSMutableSet *activePressTypes
 @property  BOOL sosActivated
 @property  SBSOSDefaults *sosDefaults
 @property  BSTimer *sosTriggerTimer
 @property  SBClawGestureLogger *clawGestureLogger
 @property  BOOL wasSOSTiggeredByClaw
 @property  BOOL clawGestureActive
 @property  BOOL autoCallCountdownEnabled
 @property  BOOL gestureLoggingEnabled
 @property  BOOL sosEnabled
 @property  <SBSOSClawGestureObserverDelegate> *delegate
 @property  BOOL clawActivated
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSOSClawGestureObserver init]
  -[SBSOSClawGestureObserver didUpdateCurrentSOSInitiationState:]
  -[SBSOSClawGestureObserver dealloc]
  -[SBSOSClawGestureObserver .cxx_destruct]
  -[SBSOSClawGestureObserver sosDefaults]
  -[SBSOSClawGestureObserver setDelegate:]
  -[SBSOSClawGestureObserver delegate]
  -[SBSOSClawGestureObserver handleVolumeIncrease]
  -[SBSOSClawGestureObserver handleVolumeDecrease]
  -[SBSOSClawGestureObserver _initWithSOSManager:workspace:]
  -[SBSOSClawGestureObserver isSOSEnabled]
  -[SBSOSClawGestureObserver _presentSOSInterface]
  -[SBSOSClawGestureObserver _isClawGestureActive]
  -[SBSOSClawGestureObserver activePressTypes]
  -[SBSOSClawGestureObserver isGestureLoggingEnabled]
  -[SBSOSClawGestureObserver clawGestureLogger]
  -[SBSOSClawGestureObserver _cancelSOSActivity]
  -[SBSOSClawGestureObserver _isSOSActivated]
  -[SBSOSClawGestureObserver _isAutomaticCallCountdownEnabled]
  -[SBSOSClawGestureObserver _wasSOSTriggeredByClaw]
  -[SBSOSClawGestureObserver sosTriggerTimer]
  -[SBSOSClawGestureObserver _setWasSOSTriggeredByClaw:]
  -[SBSOSClawGestureObserver isClawActivated]
  -[SBSOSClawGestureObserver noteButtonPress:isDown:]
  -[SBSOSClawGestureObserver noteGestureReset]
  -[SBSOSClawGestureObserver setGestureLoggingEnabled:]
  -[SBSOSClawGestureObserver setSOSEnabled:]
  -[SBSOSClawGestureObserver setActivePressTypes:]
  -[SBSOSClawGestureObserver setClawGestureLogger:]
  -[SBSOSClawGestureObserver _setSOSDefaults:]
  -[SBSOSClawGestureObserver setSosTriggerTimer:]


SBInjectVelocitySwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  NSString *key
 @property  id velocity

  // instance methods
  -[SBInjectVelocitySwitcherEventResponse appLayout]
  -[SBInjectVelocitySwitcherEventResponse velocity]
  -[SBInjectVelocitySwitcherEventResponse .cxx_destruct]
  -[SBInjectVelocitySwitcherEventResponse key]
  -[SBInjectVelocitySwitcherEventResponse type]
  -[SBInjectVelocitySwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBInjectVelocitySwitcherEventResponse initWithVelocity:forKey:appLayout:]


SBBreadcrumbActionContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBBreadcrumbActionContext dealloc]
  -[SBBreadcrumbActionContext .cxx_destruct]


SBDeviceApplicationSceneStatusBarBreadcrumbProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBDeviceApplicationSceneHandleObserver>
 @property  BOOL hasBreadcrumb
 @property  NSString *breadcrumbTitle
 @property  NSString *breadcrumbSecondaryTitle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _breadcrumbBundleIdForActivatingSceneEntity:withTransitionContext:]
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _shouldAddBreadcrumbToActivatingSceneEntity:sceneHandle:withTransitionContext:]
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _breadcrumbPrimaryTitleForAppWithBundleID:sceneHandle:activatingSceneEntity:]
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _destinationContextsForActivatingSceneEntity:withTransitionContext:]
  +[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _breadcrumbSceneIdForForAppWithBundleID:activatingSceneEntity:withTransitionContext:]

  // instance methods
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _breadcrumbNavigationActionContextForActivatingSceneEntity:withTransitionContext:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider initWithSceneHandle:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _setCurrentBreadcrumbActionContext:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider hasBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider captureContextForActivatingSceneEntity:withTransitionContext:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _hasSecondaryBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _openStrategyForAppLinkState:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _installedApplicationsDidChange:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _hasPrimaryBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider .cxx_destruct]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider succinctDescriptionBuilder]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider prepareForReuse]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _presentSpotlightFromBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider activateSecondaryBreadcrumbIfPossible]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _handleBreadcrumbAction:analyticsSide:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider succinctDescription]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider breadcrumbActionsForActivatingSceneEntity:withTransitionContext:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _activateBreadcrumbApplication:withSceneIdentifier:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider noteDidUpdateDisplayProperties]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider breadcrumbTitle]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider removeObserver:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _showTransientOvelayInPlace]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _presentAssistantFromBreadcrumb]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider _activateAppLink:withAppLinkState:wasFromSpotlight:previousSideBundleID:previousBreadcrumb:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider addObserver:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider descriptionWithMultilinePrefix:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider breadcrumbSecondaryTitle]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider activateBreadcrumbIfPossible]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider descriptionBuilderWithMultilinePrefix:]
  -[SBDeviceApplicationSceneStatusBarBreadcrumbProvider sceneHandle:didChangeEffectiveForegroundness:]


SBDashBoardIdleTimerProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIdleTimerObserving, BSDescriptionProviding>
 @property  <SBDashBoardIdleTimerProviderDelegate> *delegate
 @property  <SBIdleTimer> *idleTimer
 @property  BOOL idleTimerEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardIdleTimerProvider setIdleTimer:]
  -[SBDashBoardIdleTimerProvider addDisabledIdleTimerAssertionReason:]
  -[SBDashBoardIdleTimerProvider initWithDelegate:]
  -[SBDashBoardIdleTimerProvider idleTimerDidRefresh:]
  -[SBDashBoardIdleTimerProvider idleTimerDidWarn:]
  -[SBDashBoardIdleTimerProvider idleTimer]
  -[SBDashBoardIdleTimerProvider dealloc]
  -[SBDashBoardIdleTimerProvider .cxx_destruct]
  -[SBDashBoardIdleTimerProvider succinctDescriptionBuilder]
  -[SBDashBoardIdleTimerProvider _proposeIdleTimerBehavior:forReason:]
  -[SBDashBoardIdleTimerProvider _copyIdleTimerBehaviorForBehaviorProvider:]
  -[SBDashBoardIdleTimerProvider _proposeEffectiveIdleTimerBehaviorForReason:]
  -[SBDashBoardIdleTimerProvider updateIdleTimerWithIdleDimProvider:reason:]
  -[SBDashBoardIdleTimerProvider isIdleTimerEnabled]
  -[SBDashBoardIdleTimerProvider succinctDescription]
  -[SBDashBoardIdleTimerProvider effectiveIdleTimerBehavior]
  -[SBDashBoardIdleTimerProvider idleTimerDidExpire:]
  -[SBDashBoardIdleTimerProvider isDisabledAssertionActiveForReason:]
  -[SBDashBoardIdleTimerProvider setDelegate:]
  -[SBDashBoardIdleTimerProvider removeDisabledIdleTimerAssertionReason:]
  -[SBDashBoardIdleTimerProvider delegate]
  -[SBDashBoardIdleTimerProvider descriptionWithMultilinePrefix:]
  -[SBDashBoardIdleTimerProvider descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardIdleTimerProvider resetIdleTimer]


SBScreenFlash : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBScreenFlash mainScreenFlasher]

  // instance methods
  -[SBScreenFlash _tearDown]
  -[SBScreenFlash .cxx_destruct]
  -[SBScreenFlash initWithScreen:]
  -[SBScreenFlash flashColor:withCompletion:]
  -[SBScreenFlash _orderWindowFrontAndThenOut:withColor:]
  -[SBScreenFlash _orderWindowOut:]
  -[SBScreenFlash _createUIWithColor:]
  -[SBScreenFlash flashWhiteWithCompletion:]


SBAppProfileNeedsValidationAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBAppProfileNeedsValidationAlertItem dismissOnLock]
  -[SBAppProfileNeedsValidationAlertItem .cxx_destruct]
  -[SBAppProfileNeedsValidationAlertItem shouldShowInLockScreen]
  -[SBAppProfileNeedsValidationAlertItem initWithIcon:]
  -[SBAppProfileNeedsValidationAlertItem configure:requirePasscodeForActions:]


SBLockScreenPluginOverlayViewController : SBLockOverlayViewController
  // class methods
  +[SBLockScreenPluginOverlayViewController _pluginNeedsOverlay:]

  // instance methods
  -[SBLockScreenPluginOverlayViewController .cxx_destruct]
  -[SBLockScreenPluginOverlayViewController initWithPlugin:]
  -[SBLockScreenPluginOverlayViewController loadView]
  -[SBLockScreenPluginOverlayViewController _newOverlayView]


SBUIWorkspaceAnimationController : SBUIAnimationController
 @property  SBWorkspaceTransitionRequest *workspaceTransitionRequest

  // instance methods
  -[SBUIWorkspaceAnimationController initWithTransitionContextProvider:]
  -[SBUIWorkspaceAnimationController initWithWorkspaceTransitionRequest:]
  -[SBUIWorkspaceAnimationController workspaceTransitionRequest]


SBModalUIFluidDismissGestureWorkspaceTransaction : SBSystemGestureWorkspaceTransaction
 @property  SBAssistantController *assistantController
 @property  long long dismissalType
 @property  SBMainWorkspaceTransaction *currentTransaction
 @property  double dismissalThreshold
 @property  BOOL animateGestureCancelationOrFailure

  // instance methods
  -[SBModalUIFluidDismissGestureWorkspaceTransaction assistantController]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction setAssistantController:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _layoutSettings]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction setCurrentTransaction:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _canBeInterrupted]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _didComplete]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _begin]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction currentTransaction]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction .cxx_destruct]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _didInterruptWithReason:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _viewForGesture]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _dismissalFeedbackGenerator]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _beginWithGesture:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _updateWithGesture:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _finishWithGesture:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _finishWithCompletionType:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _updateDismissingViewLayoutAndStyleForGesture]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _shouldDismissImmmediatelyAtFullGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _swipeUpGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _finishInteractionAndDismiss:animated:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _dismissClientAnimated:completion:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction dismissalType]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _zoomOutDelay]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _backgroundWeightingForDismissal:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _scaleForDismissal]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _scaleForGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _setFluidDismissalState:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _cleanupHierarchyForDismissal:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _yOffsetForGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _swipeUpGestureTranslation]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _backgroundWeightingForGestureProgress]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _clientAnimationsDelay]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _hapticDelay]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction _notificationFeedbackType]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction initWithTransitionRequest:assistantController:dismissalType:initiatedFromBottomEdge:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction systemGestureStateChanged:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction dismissalThreshold]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction setDismissalThreshold:]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction animateGestureCancelationOrFailure]
  -[SBModalUIFluidDismissGestureWorkspaceTransaction setAnimateGestureCancelationOrFailure:]


SBSpringloadingMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpringloadingMetric init]
  -[SBSpringloadingMetric handleEvent:withContext:]
  -[SBSpringloadingMetric .cxx_destruct]


SBEntityRemovalDeclineFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalDeclineFloatingSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier topMostLayoutElements]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier opacityForIndex:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier _layoutSettings]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier frameForIndex:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier containerViewBounds]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier transitionWillBegin]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier shadowOpacityForIndex:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier _isIndexFromAppLayout:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier _isIndexToAppLayout:]
  -[SBEntityRemovalDeclineFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:floatingConfiguration:]


SBIconFlockingMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBIconFlockingMetric init]
  -[SBIconFlockingMetric .cxx_destruct]


SBDropApplicationFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBDropApplicationFloatingSwitcherModifier visibleAppLayouts]
  -[SBDropApplicationFloatingSwitcherModifier opacityForIndex:]
  -[SBDropApplicationFloatingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBDropApplicationFloatingSwitcherModifier .cxx_destruct]
  -[SBDropApplicationFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBDropApplicationFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBDropApplicationFloatingSwitcherModifier transitionWillBegin]
  -[SBDropApplicationFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBDropApplicationFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]


SBInCallTransientOverlayManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBInCallTransientOverlayManager _remoteTransientOverlaySessionManager]
  -[SBInCallTransientOverlayManager _newAlertDefinition]
  -[SBInCallTransientOverlayManager presentTransientOverlay]
  -[SBInCallTransientOverlayManager presentTransientOverlayForActivityContinuationWithActivityIdentifier:]
  -[SBInCallTransientOverlayManager presentTransientOverlayForUILock]


SBAppClipPlaceholderWorkspaceEntity : SBWorkspaceEntity
 @property  NSString *bundleIdentifier
 @property  NSString *futureSceneIdentifier

  // instance methods
  -[SBAppClipPlaceholderWorkspaceEntity copyWithZone:]
  -[SBAppClipPlaceholderWorkspaceEntity entityGenerator]
  -[SBAppClipPlaceholderWorkspaceEntity isAppClipPlaceholderEntity]
  -[SBAppClipPlaceholderWorkspaceEntity .cxx_destruct]
  -[SBAppClipPlaceholderWorkspaceEntity _supportsLayoutRole:]
  -[SBAppClipPlaceholderWorkspaceEntity wantsExclusiveForeground]
  -[SBAppClipPlaceholderWorkspaceEntity supportsPresentationAtAnySize]
  -[SBAppClipPlaceholderWorkspaceEntity appClipPlaceholderEntity]
  -[SBAppClipPlaceholderWorkspaceEntity isEqual:]
  -[SBAppClipPlaceholderWorkspaceEntity viewControllerClass]
  -[SBAppClipPlaceholderWorkspaceEntity bundleIdentifier]
  -[SBAppClipPlaceholderWorkspaceEntity futureSceneIdentifier]
  -[SBAppClipPlaceholderWorkspaceEntity initWithBundleIdentifier:futureSceneIdentifier:]


_SBSceneLayoutViewControllerAnimator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIViewControllerAnimatedTransitioning>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBSceneLayoutViewControllerAnimator transitionDuration:]
  -[_SBSceneLayoutViewControllerAnimator animateTransition:]


SBStatusBarStyleOverridesAssertionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSXPCListenerDelegate, SBAppStatusBarAssertionManagerObserver, SBStatusBarStyleOverridesAssertionServer, BSDescriptionProviding>
 @property  SBAppStatusBarAssertionManager *appStatusBarAssertionManager
 @property  NSXPCListener *xpcListener
 @property  NSMapTable *assertionsByIdentifierByClientConnection
 @property  NSMapTable *assertionsByStyleOverride
 @property  NSMutableArray *coordinatorConnectionsByStyleOverride
 @property  NSObject<OS_dispatch_queue> *internalQueue
 @property  NSObject<OS_dispatch_source> *assertionTimerSource
 @property  FBWorkspaceEventQueue *eventQueue
 @property  int statusBarStyleOverrides
 @property  int exclusiveStatusBarStyleOverrides
 @property  SBStatusBarTapManager *statusBarTapManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBStatusBarStyleOverridesAssertionManager sharedInstance]

  // instance methods
  -[SBStatusBarStyleOverridesAssertionManager internalQueue]
  -[SBStatusBarStyleOverridesAssertionManager setInternalQueue:]
  -[SBStatusBarStyleOverridesAssertionManager xpcListener]
  -[SBStatusBarStyleOverridesAssertionManager setXpcListener:]
  -[SBStatusBarStyleOverridesAssertionManager eventQueue]
  -[SBStatusBarStyleOverridesAssertionManager setAssertionTimerSource:]
  -[SBStatusBarStyleOverridesAssertionManager assertionTimerSource]
  -[SBStatusBarStyleOverridesAssertionManager setRegisteredOverrides:reply:]
  -[SBStatusBarStyleOverridesAssertionManager assertionsByStyleOverride]
  -[SBStatusBarStyleOverridesAssertionManager init]
  -[SBStatusBarStyleOverridesAssertionManager invalidateStatusBarStyleOverridesAssertions:]
  -[SBStatusBarStyleOverridesAssertionManager coordinatorConnectionsByStyleOverride]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_addAssertionByStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager _updateAppSceneSettingsForForegroundAppsAndPostAddedStyleOverrides:removedStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager .cxx_destruct]
  -[SBStatusBarStyleOverridesAssertionManager setAssertionsByStyleOverride:]
  -[SBStatusBarStyleOverridesAssertionManager _postStatusStringsByStyle:]
  -[SBStatusBarStyleOverridesAssertionManager updateForegroundApplicationSceneHandles:withOptions:completion:]
  -[SBStatusBarStyleOverridesAssertionManager appStatusBarAssertionManager]
  -[SBStatusBarStyleOverridesAssertionManager _verifyCoordinatorEntitlementForStyleOverride:onConnection:]
  -[SBStatusBarStyleOverridesAssertionManager handleTapForStatusBarStyleOverride:]
  -[SBStatusBarStyleOverridesAssertionManager deactivateStatusBarStyleOverridesAssertionsWithIdentifiers:]
  -[SBStatusBarStyleOverridesAssertionManager succinctDescriptionBuilder]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_deactivateStatusBarStyleOverridesAssertionsWithIdentifiers:forClientConnection:]
  -[SBStatusBarStyleOverridesAssertionManager statusBarAssertionManager:statusBarSettingsDidChange:]
  -[SBStatusBarStyleOverridesAssertionManager listener:shouldAcceptNewConnection:]
  -[SBStatusBarStyleOverridesAssertionManager succinctDescription]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_coordinatorClientForConnection:]
  -[SBStatusBarStyleOverridesAssertionManager setAppStatusBarAssertionManager:]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_removeAssertionByStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager statusBarTapManager]
  -[SBStatusBarStyleOverridesAssertionManager _internalQueue_coordinatorClientForStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager setStatusString:forAssertionWithIdentifier:]
  -[SBStatusBarStyleOverridesAssertionManager setExclusiveStatusBarStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager setEventQueue:]
  -[SBStatusBarStyleOverridesAssertionManager statusBarStyleOverrides]
  -[SBStatusBarStyleOverridesAssertionManager _mainQueue_getStatusBarStyleOverridesToSuppressAndStatusStringsByStyleForForegroundApplicationSceneHandles:withHandler:]
  -[SBStatusBarStyleOverridesAssertionManager activateStatusBarStyleOverridesAssertions:reply:]
  -[SBStatusBarStyleOverridesAssertionManager _invalidateAssertionsWithIdentifiers:forClientConnection:]
  -[SBStatusBarStyleOverridesAssertionManager descriptionWithMultilinePrefix:]
  -[SBStatusBarStyleOverridesAssertionManager _statusStringsByStyleForActiveAssertionsByStyleOverride:inactiveAssertionsByStyleOverride:]
  -[SBStatusBarStyleOverridesAssertionManager setAssertionsByIdentifierByClientConnection:]
  -[SBStatusBarStyleOverridesAssertionManager setCoordinatorConnectionsByStyleOverride:]
  -[SBStatusBarStyleOverridesAssertionManager unregisterCoordinatorRegistrationForStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager setStatusBarStyleOverrides:]
  -[SBStatusBarStyleOverridesAssertionManager assertionsByIdentifierByClientConnection]
  -[SBStatusBarStyleOverridesAssertionManager descriptionBuilderWithMultilinePrefix:]
  -[SBStatusBarStyleOverridesAssertionManager exclusiveStatusBarStyleOverrides]


SBApplicationLayoutGestureMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationLayoutGestureMetric init]
  -[SBApplicationLayoutGestureMetric handleEvent:withContext:]
  -[SBApplicationLayoutGestureMetric _moveActionForInitialFloatingConfig:finalConfig:]
  -[SBApplicationLayoutGestureMetric .cxx_destruct]
  -[SBApplicationLayoutGestureMetric _moveActionForInitialSpaceConfig:finalConfig:]


SBFluidSwitcherLayoutContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, SBMainDisplayWorkspaceAppInteractionEventSourceObserving>
 @property  SBMainDisplayLayoutState *currentLayoutState
 @property  SBMainDisplayLayoutState *previousLayoutState
 @property  long long previousInterfaceOrientation
 @property  SBAppLayout *currentAppLayout
 @property  SBAppLayout *transitioningFromAppLayout
 @property  SBAppLayout *transitioningToAppLayout
 @property  NSDate *lastTransitionCompletionDate
 @property  BOOL hasUserInteractedWithActiveApplication
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  SBMainDisplayLayoutState *layoutState
 @property  SBFluidSwitcherGesture *activeGesture
 @property  SBWorkspaceApplicationSceneTransitionContext *activeTransitionContext
 @property  SBMainDisplayLayoutState *transitioningFromLayoutState
 @property  SBMainDisplayLayoutState *transitioningToLayoutState
 @property  double secondsSinceLastTransitionCompletion
 @property  unsigned long supportedOrientationsForGesture
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherLayoutContext previousLayoutState]
  -[SBFluidSwitcherLayoutContext layoutState]
  -[SBFluidSwitcherLayoutContext secondsSinceLastTransitionCompletion]
  -[SBFluidSwitcherLayoutContext hasUserInteractedWithActiveApplication]
  -[SBFluidSwitcherLayoutContext transitioningFromAppLayout]
  -[SBFluidSwitcherLayoutContext previousInterfaceOrientation]
  -[SBFluidSwitcherLayoutContext setTransitioningFromAppLayout:]
  -[SBFluidSwitcherLayoutContext currentAppLayout]
  -[SBFluidSwitcherLayoutContext currentLayoutState]
  -[SBFluidSwitcherLayoutContext .cxx_destruct]
  -[SBFluidSwitcherLayoutContext lastTransitionCompletionDate]
  -[SBFluidSwitcherLayoutContext homeGestureSettings]
  -[SBFluidSwitcherLayoutContext setActiveGesture:]
  -[SBFluidSwitcherLayoutContext succinctDescriptionBuilder]
  -[SBFluidSwitcherLayoutContext didEndTransitioningToLayoutStateWithContext:]
  -[SBFluidSwitcherLayoutContext initWithLayoutState:]
  -[SBFluidSwitcherLayoutContext supportedOrientationsForGesture]
  -[SBFluidSwitcherLayoutContext setCurrentAppLayout:]
  -[SBFluidSwitcherLayoutContext transitioningToLayoutState]
  -[SBFluidSwitcherLayoutContext setCurrentLayoutState:]
  -[SBFluidSwitcherLayoutContext setHomeGestureSettings:]
  -[SBFluidSwitcherLayoutContext eventSource:userTouchedApplication:]
  -[SBFluidSwitcherLayoutContext setLastTransitionCompletionDate:]
  -[SBFluidSwitcherLayoutContext _shouldUpdateSwitcherModelBasedOnTimeOrUserInteraction]
  -[SBFluidSwitcherLayoutContext setTransitioningToAppLayout:]
  -[SBFluidSwitcherLayoutContext activeTransitionContext]
  -[SBFluidSwitcherLayoutContext succinctDescription]
  -[SBFluidSwitcherLayoutContext transitioningFromLayoutState]
  -[SBFluidSwitcherLayoutContext setPreviousLayoutState:]
  -[SBFluidSwitcherLayoutContext willBeginTransitioningToLayoutStateWithContext:]
  -[SBFluidSwitcherLayoutContext setPreviousInterfaceOrientation:]
  -[SBFluidSwitcherLayoutContext transitioningToAppLayout]
  -[SBFluidSwitcherLayoutContext shouldAddAppLayoutToFront:forTransitionWithContext:currentAppLayouts:transitionCompleted:]
  -[SBFluidSwitcherLayoutContext descriptionWithMultilinePrefix:]
  -[SBFluidSwitcherLayoutContext setHasUserInteractedWithActiveApplication:]
  -[SBFluidSwitcherLayoutContext activeGesture]
  -[SBFluidSwitcherLayoutContext descriptionBuilderWithMultilinePrefix:]
  -[SBFluidSwitcherLayoutContext shouldAddAppLayoutToFront:whenBeginningGestureOfType:]


SBPressPrecedenceArbiter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *hardwareButtons

  // instance methods
  -[SBPressPrecedenceArbiter _shouldArbitrateLockAndVolumeHardwareButtonPriorities]
  -[SBPressPrecedenceArbiter hardwareButtons]
  -[SBPressPrecedenceArbiter .cxx_destruct]
  -[SBPressPrecedenceArbiter _updateButtonPrioritiesForNotification:]
  -[SBPressPrecedenceArbiter setHardwareButtons:]
  -[SBPressPrecedenceArbiter _applyButtonPriority:]
  -[SBPressPrecedenceArbiter _updateButtonPriority]
  -[SBPressPrecedenceArbiter _initializeButtonPriorities]
  -[SBPressPrecedenceArbiter _updateButtonPrioritiesForClientIsPlayingNotification:]
  -[SBPressPrecedenceArbiter _currentButtonPriority]
  -[SBPressPrecedenceArbiter initWithHomeButtonType:]


SBMainSwitcherRoutingSwitcherModifier : SBSwitcherModifier <SBChainableModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMainSwitcherRoutingSwitcherModifier homeScreenBackdropBlurType]
  -[SBMainSwitcherRoutingSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBMainSwitcherRoutingSwitcherModifier visibleAppLayouts]
  -[SBMainSwitcherRoutingSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBMainSwitcherRoutingSwitcherModifier homeScreenAlpha]
  -[SBMainSwitcherRoutingSwitcherModifier scaleForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier isHomeScreenContentRequired]
  -[SBMainSwitcherRoutingSwitcherModifier topMostLayoutElements]
  -[SBMainSwitcherRoutingSwitcherModifier wantsDockBehaviorAssertion]
  -[SBMainSwitcherRoutingSwitcherModifier isSwitcherWindowVisible]
  -[SBMainSwitcherRoutingSwitcherModifier isScrollEnabled]
  -[SBMainSwitcherRoutingSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBMainSwitcherRoutingSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBMainSwitcherRoutingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBMainSwitcherRoutingSwitcherModifier copyWithZone:]
  -[SBMainSwitcherRoutingSwitcherModifier handleMainTransitionEvent:]
  -[SBMainSwitcherRoutingSwitcherModifier wallpaperStyle]
  -[SBMainSwitcherRoutingSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBMainSwitcherRoutingSwitcherModifier cardCornerRadiiForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier opacityForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBMainSwitcherRoutingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBMainSwitcherRoutingSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBMainSwitcherRoutingSwitcherModifier dockProgress]
  -[SBMainSwitcherRoutingSwitcherModifier frameForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier contentOffsetForIndex:centered:]
  -[SBMainSwitcherRoutingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier homeScreenDimmingAlpha]
  -[SBMainSwitcherRoutingSwitcherModifier minimumTranslationToKillIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBMainSwitcherRoutingSwitcherModifier containerStatusBarAnimationDuration]
  -[SBMainSwitcherRoutingSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBMainSwitcherRoutingSwitcherModifier isIndexSelectable:]
  -[SBMainSwitcherRoutingSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier wantsHomeScreenPointerInteractions]
  -[SBMainSwitcherRoutingSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBMainSwitcherRoutingSwitcherModifier switcherDimmingAlpha]
  -[SBMainSwitcherRoutingSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBMainSwitcherRoutingSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBMainSwitcherRoutingSwitcherModifier .cxx_destruct]
  -[SBMainSwitcherRoutingSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBMainSwitcherRoutingSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBMainSwitcherRoutingSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBMainSwitcherRoutingSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier titleOpacityForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier dockUpdateMode]
  -[SBMainSwitcherRoutingSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier shadowStyleForAppLayout:]
  -[SBMainSwitcherRoutingSwitcherModifier homeScreenScale]
  -[SBMainSwitcherRoutingSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBMainSwitcherRoutingSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBMainSwitcherRoutingSwitcherModifier appLayoutsToResignActive]
  -[SBMainSwitcherRoutingSwitcherModifier shouldAllowContentViewTouchesForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBMainSwitcherRoutingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBMainSwitcherRoutingSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[SBMainSwitcherRoutingSwitcherModifier dockWindowLevel]
  -[SBMainSwitcherRoutingSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBMainSwitcherRoutingSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBMainSwitcherRoutingSwitcherModifier handleEvent:]
  -[SBMainSwitcherRoutingSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBMainSwitcherRoutingSwitcherModifier didMoveToParentModifier:]
  -[SBMainSwitcherRoutingSwitcherModifier wallpaperScale]
  -[SBMainSwitcherRoutingSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier snapshotScaleForAppLayout:]
  -[SBMainSwitcherRoutingSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBMainSwitcherRoutingSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier resetAdjustedScrollingState]
  -[SBMainSwitcherRoutingSwitcherModifier isIndexKillable:]
  -[SBMainSwitcherRoutingSwitcherModifier darkeningAlphaForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier appLayouts]
  -[SBMainSwitcherRoutingSwitcherModifier switcherDimmingViewBlocksTouches]
  -[SBMainSwitcherRoutingSwitcherModifier plusButtonAlpha]
  -[SBMainSwitcherRoutingSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBMainSwitcherRoutingSwitcherModifier shadowOffsetForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier lighteningAlphaForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier keyboardSuppressionMode]
  -[SBMainSwitcherRoutingSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[SBMainSwitcherRoutingSwitcherModifier transactionCompletionOptions]
  -[SBMainSwitcherRoutingSwitcherModifier contentViewScale]
  -[SBMainSwitcherRoutingSwitcherModifier plusButtonStyle]
  -[SBMainSwitcherRoutingSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBMainSwitcherRoutingSwitcherModifier wantsSwitcherDimmingView]
  -[SBMainSwitcherRoutingSwitcherModifier dockWindowLevelPriority]
  -[SBMainSwitcherRoutingSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[SBMainSwitcherRoutingSwitcherModifier scrollViewAttributes]
  -[SBMainSwitcherRoutingSwitcherModifier isContainerStatusBarVisible]
  -[SBMainSwitcherRoutingSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier shadowOpacityForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier switcherBackdropBlurProgress]
  -[SBMainSwitcherRoutingSwitcherModifier rotationAngleForIndex:]
  -[SBMainSwitcherRoutingSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBMainSwitcherRoutingSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[SBMainSwitcherRoutingSwitcherModifier switcherBackdropBlurType]
  -[SBMainSwitcherRoutingSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBMainSwitcherRoutingSwitcherModifier handleGestureEvent:]
  -[SBMainSwitcherRoutingSwitcherModifier initWithMainModifierSubtree:floatingModifierSubtree:]
  -[SBMainSwitcherRoutingSwitcherModifier _indexOfFirstMainAppLayout]


SBRestoreFailureAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBRestoreFailureAlertItem forcesModalAlertAppearance]
  -[SBRestoreFailureAlertItem allowMenuButtonDismissal]
  -[SBRestoreFailureAlertItem performUnlockAction]
  -[SBRestoreFailureAlertItem shouldShowInLockScreen]
  -[SBRestoreFailureAlertItem _rebootNow]
  -[SBRestoreFailureAlertItem configure:requirePasscodeForActions:]
  -[SBRestoreFailureAlertItem suppressForKeynote]
  -[SBRestoreFailureAlertItem allowInSetup]
  -[SBRestoreFailureAlertItem restartSystemEvent]


SBDashBoardThermalStatusProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSThermalStatusProviding>
 @property  long long thermalStatus
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardThermalStatusProvider init]
  -[SBDashBoardThermalStatusProvider .cxx_destruct]
  -[SBDashBoardThermalStatusProvider initWithThermalController:]
  -[SBDashBoardThermalStatusProvider thermalStatus]


SBPlatformController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBPlatformController sharedInstance]

  // instance methods
  -[SBPlatformController systemBuildVersion]
  -[SBPlatformController defaultIconState]
  -[SBPlatformController isInternalInstall]
  -[SBPlatformController hardwareModel]
  -[SBPlatformController isHomeGestureEnabled]
  -[SBPlatformController isCarrierInstall]
  -[SBPlatformController uniqueDeviceIdentifier]
  -[SBPlatformController productType]
  -[SBPlatformController deviceClass]
  -[SBPlatformController init]
  -[SBPlatformController isRoundCornerPad]
  -[SBPlatformController isRoundCornerPhone]
  -[SBPlatformController .cxx_destruct]
  -[SBPlatformController isiPadMini]
  -[SBPlatformController medusaCapabilities]
  -[SBPlatformController isDeveloperDevice]
  -[SBPlatformController localizedPlatformName]
  -[SBPlatformController prefersAlwaysOnOrientation]
  -[SBPlatformController _loadDefaultIconInfo]
  -[SBPlatformController defaultIconStateDisplayIdentifiers]


SBTapAppLayoutSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  SBAppLayout *appLayout

  // instance methods
  -[SBTapAppLayoutSwitcherModifierEvent copyWithZone:]
  -[SBTapAppLayoutSwitcherModifierEvent appLayout]
  -[SBTapAppLayoutSwitcherModifierEvent .cxx_destruct]
  -[SBTapAppLayoutSwitcherModifierEvent type]
  -[SBTapAppLayoutSwitcherModifierEvent initWithAppLayout:]
  -[SBTapAppLayoutSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]


SBIconController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <BBObserverDelegate, MCProfileConnectionObserver, SBApplicationRestrictionObserver, UIGestureRecognizerDelegate, SBSearchGestureObserver, FBSDisplayLayoutPublisherObserving, SBRootFolderPageStateObserver, SBAlertItemsControllerObserver, SBAssistantObserver, SBHIconManagerDelegate, SBRootFolderControllerAccessoryViewControllerDelegate, SBHomeScreenSpotlightDismissalDelegate, SBHomeScreenTodayViewControllerDelegate, SBTodayViewControllerDelegate, SBFloatingDockControllerDelegate, SPUIRemoteSearchViewDelegate, PTSettingsKeyObserver, WGWidgetGroupViewControllerDelegate, SBHSidebarProviderDelegate, SBLayoutStateTransitionObserver, SPUISearchBarDelegate, SBProactiveHomeScreenSuggestionProviderObserver, SBFOverlayObserving, SBProactiveHomeScreenUsageObserverDelegate, SBHLibraryViewControllerObserver, PTSettingsKeyObserver, SBHomeScreenOverlayControllerDelegate, APUIAppPredictionViewControllerDelegate, SBBarSwipeAffordanceObserver, SBBarSwipeAffordanceDelegate, SBIconModelApplicationDataSource, SBHomeScreenIconTransitionAnimatorDelegate, SBIconAnimationContaining>
 @property  BOOL hasRestrictedEnforcedLayout
 @property  BOOL uninstallingSystemAppsRestricted
 @property  NSTimer *delayedLaunchRequestTimer
 @property  NSTimer *popoverDelayTimer
 @property  unsigned long iconOcclusionReasons
 @property  SBHomeScreenTodayViewController *todayViewController
 @property  SBHomeScreenTodayViewController *coverSheetTodayViewController
 @property  SBHomeScreenTodayViewController *homeScreenTodayViewController
 @property  SBHomeScreenSpotlightViewController *spotlightViewController
 @property  SBHLibraryViewController *libraryViewController
 @property  <SBRootFolderPageTransition> *interactivePullToTodaySearchTransition
 @property  <BSInvalidatable> *displayLayoutTransition
 @property  PTSingleTestRecipe *relayoutTestRecipe
 @property  PTSingleTestRecipe *toggleSearchTestRecipe
 @property  PTSingleTestRecipe *runDownloadingIconTestRecipe
 @property  PTSingleTestRecipe *runRemoveAndRestoreIconTestRecipe
 @property  PTSingleTestRecipe *organizeInFoldersTestRecipe
 @property  PTDoubleTestRecipe *shuffleStackTestRecipe
 @property  SBHRootFolderSettings *rootFolderSettings
 @property  BOOL dismissingMenuForFolderPresentation
 @property  <BSInvalidatable> *sidebarAppearanceStateOverrideAssertion
 @property  <BSInvalidatable> *significantAnimationColorSamplingAssertion
 @property  <BSInvalidatable> *suspendWallpaperAnimationForSpotlightAssertion
 @property  <BSInvalidatable> *suspendWallpaperAnimationForOverlayViewAssertion
 @property  SBProactiveHomeScreenUsageObserver *proactiveUsageObserver
 @property  SBProactiveHomeScreenSuggestionProvider *proactiveSuggestionProvider
 @property  NSObject<OS_dispatch_queue> *accountStoreQueue
 @property  SBWidgetMetricsServer *widgetMetricsServer
 @property  <BSInvalidatable> *pageManagementWallpaperScaleAssertion
 @property  SBBarSwipeAffordanceViewController *widgetAddSheetAffordanceViewController
 @property  SBApplicationController *applicationController
 @property  SBApplicationPlaceholderController *applicationPlaceholderController
 @property  SBUIController *userInterfaceController
 @property  SBMainDisplayPolicyAggregator *policyAggregator
 @property  SBAlertItemsController *alertItemsController
 @property  SBAssistantController *assistantController
 @property  WGWidgetGroupViewController *widgetGroupViewController
 @property  SBIconModel *model
 @property  SBHomeScreenOverlayController *homeScreenOverlayController
 @property  SBRootFolderController *rootFolderController
 @property  SBFolderController *openFolderController
 @property  SBFolderController *currentFolderController
 @property  BOOL _ignoreMutatingIconListsOnApplicationInstall
 @property  long long currentIconListIndex
 @property  BOOL areAnyIconViewContextMenusShowing
 @property  BOOL isAnySearchVisibleOrTransitioning
 @property  NSSet *appIconForceTouchWindows
 @property  SBHIconManager *iconManager
 @property  SBHIconImageCache *appSwitcherHeaderIconImageCache
 @property  SBHIconImageCache *appSwitcherUnmaskedIconImageCache
 @property  SBHIconImageCache *tableUIIconImageCache
 @property  SBHIconImageCache *notificationIconImageCache
 @property  SBIconContentView *contentView
 @property  SBRootFolder *rootFolder
 @property  NSSet *visibleIconStateDisplayIdentifiers
 @property  unsigned long allowedInterfaceOrientations
 @property  _UILegibilitySettings *legibilitySettings
 @property  BOOL appLibrarySupported
 @property  SBIconDragManager *iconDragManager
 @property  SBFloatingDockController *floatingDockController
 @property  <SBIconAnimationContaining> *currentAnimationContainer
 @property  BOOL showingHomeScreenOverlay
 @property  BOOL todayOverlaySpotlightVisible
 @property  BOOL showingSidebar
 @property  BOOL sidebarPinned
 @property  SBHLibraryCategoryMap *libraryCategoryMap
 @property  SBAppStatusBarContentAssertion *statusBarContentAssertion
 @property  BOOL shouldAddNewIconsToRootFolder
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double currentDockHeight
 @property  NSArray *allApplications
 @property  UIView *containerView
 @property  UIWindow *animationWindow
 @property  UIView *fallbackIconContainerView

  // class methods
  +[SBIconController sharedInstance]
  +[SBIconController sharedInstanceIfExists]

  // instance methods
  -[SBIconController observer:updateSectionInfo:]
  -[SBIconController isSidebarPinned]
  -[SBIconController rootFolder]
  -[SBIconController localizedFolderNameForDefaultDisplayName:]
  -[SBIconController assistantController]
  -[SBIconController setTodayViewController:]
  -[SBIconController todayViewController]
  -[SBIconController _enqueueTransitionName:withHandler:]
  -[SBIconController noteFloatingDockWillChangeHeight]
  -[SBIconController searchGesture:startedShowing:]
  -[SBIconController iconManager]
  -[SBIconController alertItemsController:willActivateAlertItem:]
  -[SBIconController assistantWillAppear:]
  -[SBIconController profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[SBIconController libraryViewController:willPresentSearchController:]
  -[SBIconController settings:changedValueForKey:]
  -[SBIconController areAnyIconViewContextMenusShowing]
  -[SBIconController overlayController:didChangePresentationProgress:fromLeading:]
  -[SBIconController _coverSheetDidPresent:]
  -[SBIconController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBIconController minimumHomeScreenScale]
  -[SBIconController searchBarDidFocus]
  -[SBIconController containerViewForPresentingContextMenuForIconView:]
  -[SBIconController widgetGroupViewController:sizeForInterfaceOrientation:]
  -[SBIconController windowForIconDragPreviewsForIconManager:]
  -[SBIconController iconManagerCanBeginIconDrags:]
  -[SBIconController policyAggregator]
  -[SBIconController iconManager:willBeginIconDragWithUniqueIdentifier:numberOfDraggedItems:]
  -[SBIconController dismissLibraryOverlayForIconManager:]
  -[SBIconController iconManager:canAddDragItemsToSession:fromIconView:]
  -[SBIconController iconManager:didAddItemsToIconDragWithUniqueIdentifier:numberOfDraggedItems:]
  -[SBIconController iconManager:didEndIconDragWithUniqueIdentifier:numberOfDraggedItems:]
  -[SBIconController iconManager:dragPreviewForIconView:dragPreviewForItem:session:previewParameters:]
  -[SBIconController legibilitySettings]
  -[SBIconController iconManager:canAcceptDropInSession:inIconListView:]
  -[SBIconController iconManager:iconDropSessionDidEnter:]
  -[SBIconController presentTodayOverlayForIconManager:]
  -[SBIconController dismissTodayOverlayForIconManager:]
  -[SBIconController presentLibraryOverlayForIconManager:]
  -[SBIconController accountStoreQueue]
  -[SBIconController shouldAutomaticallyForwardAppearanceMethods]
  -[SBIconController _rootFolderController]
  -[SBIconController interfaceOrientationForIconManager:]
  -[SBIconController allowedInterfaceOrientationsForIconManager:]
  -[SBIconController iconManager:willDestroyRootFolderController:]
  -[SBIconController iconManager:willDestroyRootViewController:]
  -[SBIconController iconManager:didCreateRootViewController:]
  -[SBIconController iconManager:didCreateRootFolderController:]
  -[SBIconController iconManager:willUseRootFolderControllerConfiguration:]
  -[SBIconController isFloatingDockVisibleForIconManager:]
  -[SBIconController isEditingAllowedForIconManager:]
  -[SBIconController iconManager:isPartialEditingAllowedForIconLocation:]
  -[SBIconController iconManager:canAddIconToIgnoredList:]
  -[SBIconController iconManagerDidFinishInstallForIcon:]
  -[SBIconController iconManager:willUseIconImageCache:]
  -[SBIconController isRootFolderContentVisibleForIconManager:]
  -[SBIconController isIconContentPossiblyVisibleOverApplicationForIconManager:]
  -[SBIconController viewControllerForPresentingViewControllersForIconManager:]
  -[SBIconController iconManager:accessibilityTintColorForScreenRect:]
  -[SBIconController iconManagerIconDraggingDidChange:]
  -[SBIconController iconManager:configurationDataForDataSource:ofIcon:]
  -[SBIconController iconManager:dataSource:ofIcon:didUpdateConfigurationData:]
  -[SBIconController iconManagerFolderAnimatingDidChange:]
  -[SBIconController maximumListCountForFoldersForIconManager:]
  -[SBIconController localizedDefaultFolderNameForIconManager:]
  -[SBIconController iconManager:localizedFolderNameForDefaultDisplayName:]
  -[SBIconController iconManager:launchIcon:location:animated:completionHandler:]
  -[SBIconController iconManager:willOpenFolder:]
  -[SBIconController iconManager:didOpenFolder:]
  -[SBIconController iconManager:willCloseFolder:]
  -[SBIconController iconManager:didCloseFolder:]
  -[SBIconController iconManager:viewControllerForCustomIcon:element:]
  -[SBIconController iconManager:isWidgetValid:]
  -[SBIconController iconManager:isCustomElementValid:]
  -[SBIconController iconManager:wantsLaunchForWidgetURL:]
  -[SBIconController contentOverlayInsetsFromParentIfAvailableForFolderController:]
  -[SBIconController iconManager:isIconVisibleForBundleIdentifier:]
  -[SBIconController iconManager:willRemoveViewControllerForIdentifier:]
  -[SBIconController iconManager:shouldCacheRecentViewController:forIdentifier:]
  -[SBIconController iconManager:applicationNameWithIdentifier:]
  -[SBIconController iconManager:isApplicationWithIdentifierBlockedForScreenTimeExpiration:]
  -[SBIconController iconManager:possibleUserIconTapBegan:]
  -[SBIconController iconManager:possibleUserIconTapBeganAfterInformingIcon:]
  -[SBIconController iconManager:touchesEndedForIconView:]
  -[SBIconController fallbackIconContainerView]
  -[SBIconController searchGesture:endedGesture:]
  -[SBIconController dealloc]
  -[SBIconController iconManager:reasonToDisallowInteractionOnIconView:]
  -[SBIconController iconManager:willPrepareIconViewForLaunch:]
  -[SBIconController iconManager:launchIconForIconView:withActions:]
  -[SBIconController iconManager:didReceiveTapOnLaunchDisabledIconView:]
  -[SBIconController iconManager:wantsUninstallForIcon:location:]
  -[SBIconController iconManager:iconViewDisplaysCloseBox:]
  -[SBIconController iconManager:canBeginDragForIconView:]
  -[SBIconController iconManager:draggingStartLocationForIconView:proposedStartLocation:]
  -[SBIconController iconManager:launchActionsForIconView:]
  -[SBIconController iconManager:launchURLForIconView:]
  -[SBIconController iconManager:containerViewForPresentingContextMenuForIconView:]
  -[SBIconController iconManager:iconView:willUseContextMenuStyle:]
  -[SBIconController iconManager:additionalDragLiftScaleForIconView:]
  -[SBIconController contentView]
  -[SBIconController iconManager:closeBoxTypeForIconView:proposedType:]
  -[SBIconController iconManager:allowsBadgingForIcon:]
  -[SBIconController iconManager:allowsBadgingForIconLocation:]
  -[SBIconController iconManager:backgroundViewForComponentsOfIconView:]
  -[SBIconController iconManager:accessibilityTintColorForIconView:]
  -[SBIconController iconManager:shouldContinueToUseBackgroundView:forComponentsOfIconView:]
  -[SBIconController iconManager:screenSnapshotProviderForComponentsOfIconView:]
  -[SBIconController iconManager:applicationShortcutItemsForIconView:]
  -[SBIconController iconManager:applicationBundleURLForShortcutsWithIconView:]
  -[SBIconController iconManager:applicationShortcutWidgetBundleIdentifierForShortcutsWithIconView:]
  -[SBIconController iconManagerWillPresentWidgetEditing:]
  -[SBIconController rootFolderPageStateProvider:willEndTransitionToState:successfully:]
  -[SBIconController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBIconController iconManager:shouldActivateApplicationShortcutItem:atIndex:forIconView:]
  -[SBIconController iconManager:containerViewControllerForConfigurationOfIconView:]
  -[SBIconController iconManager:contentBoundingRectForConfigurationOfIconView:]
  -[SBIconController iconManagerDidDismissPageManagement:]
  -[SBIconController shouldAutorotate]
  -[SBIconController iconManager:homeScreenContentViewForConfigurationOfIconView:]
  -[SBIconController iconManager:iconView:configurationWillBeginWithInteraction:]
  -[SBIconController iconManager:iconView:configurationDidEndWithInteraction:]
  -[SBIconController iconManager:willPresentPageManagementUsingAnimator:]
  -[SBIconController iconManager:willDismissPageManagementUsingAnimator:]
  -[SBIconController iconManagerDidDismissWidgetEditing:]
  -[SBIconController recycledViewsContainerProviderForIconManager:]
  -[SBIconController iconManager:configureIconView:forIcon:]
  -[SBIconController iconManager:folderControllerWillBeginScrolling:]
  -[SBIconController iconManager:folderController:canChangeCurrentPageIndexToIndex:]
  -[SBIconController iconManager:folderControllerDidEndScrolling:]
  -[SBIconController iconManager:minimumHomeScreenScaleForFolderController:]
  -[SBIconController iconManager:didSpringLoadIconView:]
  -[SBIconController iconManager:contentOverlayInsetsFromParentIfAvailableForFolderController:]
  -[SBIconController iconManager:willOpenFolderController:]
  -[SBIconController iconManager:willCloseFolderController:]
  -[SBIconController iconManager:wantsToHideStatusBarForFolderController:animated:]
  -[SBIconController iconManager:fakeStatusBarForFolderController:]
  -[SBIconController iconManager:statusBarStyleRequestForFolderController:]
  -[SBIconController iconManager:willRemoveFakeStatusBar:forFolderController:]
  -[SBIconController iconManager:statusBarEdgeInsetsForFolderController:]
  -[SBIconController .cxx_destruct]
  -[SBIconController iconManager:wantsToAdjustTodayContentForEdgeBounceForScrollOffset:]
  -[SBIconController distanceToTopOfSpotlightIconsForIconManager:]
  -[SBIconController iconManager:backgroundViewForDockForRootFolderController:]
  -[SBIconController iconManagerCanUseSeparateWindowForRotation:]
  -[SBIconController spotlightViewController]
  -[SBIconController iconManager:statusBarInsetsDidChange:]
  -[SBIconController iconManager:rootFolderController:willUseTransitionContext:toTransitionToState:]
  -[SBIconController iconManagerCanSaveIconState:]
  -[SBIconController iconManager:rootFolderController:willUsePropertyAnimator:toTransitionToState:]
  -[SBIconController iconManager:rootFolderController:didChangeSidebarVisibilityProgress:]
  -[SBIconController iconManager:rootFolderController:didChangeEffectiveSidebarVisibilityProgress:]
  -[SBIconController iconManager:rootFolderController:didOverscrollOnFirstPageByAmount:]
  -[SBIconController iconManager:rootFolderController:didEndOverscrollOnFirstPageWithVelocity:translation:]
  -[SBIconController iconManager:rootFolderController:didOverscrollOnLastPageByAmount:]
  -[SBIconController iconManager:rootFolderController:didEndOverscrollOnLastPageWithVelocity:translation:]
  -[SBIconController iconManager:vendorNameForAppWithBundleIdentifiers:]
  -[SBIconController iconManager:nestingViewController:willPerformOperation:onViewController:withTransitionCoordinator:]
  -[SBIconController iconManager:animator:animationSettingsForOperation:childViewController:]
  -[SBIconController iconManagerDidSaveIconState:]
  -[SBIconController defaultIconStateForIconManager:]
  -[SBIconController firstPageLeafIdentifiersForIconManager:]
  -[SBIconController iconManager:shouldPlaceIconOnIgnoredList:]
  -[SBIconController iconManagerDidNoteIconStateChangedExternally:]
  -[SBIconController iconManager:canAddIcon:toIconList:inFolder:]
  -[SBIconController iconManager:prepareForPageHidingEducationWithCompletionHandler:]
  -[SBIconController iconManager:prepareAddSheetViewController:]
  -[SBIconController libraryViewControllerWillPresent:]
  -[SBIconController libraryViewControllerRequestsDismissal:]
  -[SBIconController libraryViewControllerDidPresent:]
  -[SBIconController libraryViewControllerWillDismiss:]
  -[SBIconController libraryViewControllerDidDismiss:]
  -[SBIconController libraryViewController:willPresentFolderController:]
  -[SBIconController libraryViewController:willDismissFolderController:]
  -[SBIconController libraryViewController:didPresentSearchController:]
  -[SBIconController libraryViewController:didDismissSearchController:]
  -[SBIconController setModel:]
  -[SBIconController _ensureRootFolderController]
  -[SBIconController areAnyIconViewContextMenusAnimating]
  -[SBIconController succinctDescriptionBuilder]
  -[SBIconController launchActionsForIconView:]
  -[SBIconController animator:animationSettingsForOperation:childViewController:]
  -[SBIconController currentDockHeight]
  -[SBIconController iconManagerEditingDidChange:]
  -[SBIconController setLegibilitySettings:]
  -[SBIconController viewWillLayoutSubviews]
  -[SBIconController supportedInterfaceOrientations]
  -[SBIconController initWithNibName:bundle:]
  -[SBIconController rootFolderSettings]
  -[SBIconController _installedAppsDidChange:]
  -[SBIconController viewDidAppear:]
  -[SBIconController homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBIconController succinctDescription]
  -[SBIconController rootFolderPageStateProvider:willBeginTransitionToState:animated:interactive:]
  -[SBIconController folderNameForDisplayID:]
  -[SBIconController rootFolderPageStateProvider:didContinueTransitionToState:progress:]
  -[SBIconController publisher:didUpdateLayout:withTransition:]
  -[SBIconController _iconModelDidLayout:]
  -[SBIconController containerView]
  -[SBIconController dismissSearchView]
  -[SBIconController animationWindow]
  -[SBIconController profileConnectionDidReceiveProfileListChangedNotification:userInfo:]
  -[SBIconController allApplications]
  -[SBIconController _currentFolderController]
  -[SBIconController rootFolderPageStateProvider:didEndTransitionFromState:toState:successfully:]
  -[SBIconController libraryCategoryMap]
  -[SBIconController viewWillAppear:]
  -[SBIconController isAnySearchVisibleOrTransitioning]
  -[SBIconController dismissAppIconForceTouchControllers:]
  -[SBIconController dismissHomeScreenOverlay]
  -[SBIconController alertItemsController:didDeactivateAlertItem:forReason:]
  -[SBIconController overlayController:visibilityDidChange:]
  -[SBIconController folderController:iconListView:springLoadedInteractionForIconDragDidCompleteOnIconView:]
  -[SBIconController earlyTerminateAnyContextMenuAnimations]
  -[SBIconController searchGesture:changedPercentComplete:]
  -[SBIconController orientation]
  -[SBIconController noteFloatingDockWillAnimateChangeInHeight]
  -[SBIconController popToCurrentRootIconListWhenPossible]
  -[SBIconController alertItemsController:didActivateAlertItem:]
  -[SBIconController rootFolderController:transitionContextForTransitioningToState:animated:interactive:]
  -[SBIconController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBIconController rootFolderController:transitionWillBegin:]
  -[SBIconController rootFolderController:transitionWillReverse:]
  -[SBIconController rootFolderController:transitionWillFinish:]
  -[SBIconController rootFolderController:transitionDidFinish:]
  -[SBIconController viewDidDisappear:]
  -[SBIconController model]
  -[SBIconController activateTodayViewWithCompletion:]
  -[SBIconController performAfterContextMenuAnimationsHaveCompleted:]
  -[SBIconController _controlCenterWillPresent:]
  -[SBIconController viewWillDisappear:]
  -[SBIconController barSwipeAffordanceView:systemGestureTypeForType:]
  -[SBIconController allowedInterfaceOrientations]
  -[SBIconController libraryViewController:willDismissSearchController:]
  -[SBIconController gestureRecognizer:shouldReceiveTouch:]
  -[SBIconController descriptionWithMultilinePrefix:]
  -[SBIconController observer:noteServerConnectionStateChanged:]
  -[SBIconController applicationRestrictionController:didUpdateVisibleTags:hiddenTags:]
  -[SBIconController currentIconListIndex]
  -[SBIconController loadView]
  -[SBIconController launchURLForIconView:]
  -[SBIconController iconDragManager]
  -[SBIconController descriptionBuilderWithMultilinePrefix:]
  -[SBIconController _policyAggregator]
  -[SBIconController overlayControllerDidBeginChangingPresentationProgress:]
  -[SBIconController applicationController]
  -[SBIconController floatingDockController]
  -[SBIconController initWithApplicationController:applicationPlaceholderController:userInterfaceController:policyAggregator:alertItemsController:assistantController:]
  -[SBIconController updateNumberOfRowsWithDuration:]
  -[SBIconController handleHomeButtonTap]
  -[SBIconController noteTransientOverlayPresented]
  -[SBIconController _runTest:afterMovingIconsIntoFolder:withFolderOpen:]
  -[SBIconController _runFolderOpenTest]
  -[SBIconController _runScrollFolderTest:]
  -[SBIconController _runFolderCloseTest]
  -[SBIconController _runAppIconForceTouchTest:withOptions:]
  -[SBIconController _runFolderTestWithName:actions:]
  -[SBIconController _ppt_currentHomescreenState]
  -[SBIconController _ppt_setHomescreenState:]
  -[SBIconController homeScreenOverlayController]
  -[SBIconController homeScreenTodayViewController]
  -[SBIconController libraryViewController]
  -[SBIconController _configureDeweyEachAppHasItsOwnCategory:]
  -[SBIconController resetCategories]
  -[SBIconController _configureDeweyOneCategoryWithAllApps]
  -[SBIconController visibleIconStateDisplayIdentifiers]
  -[SBIconController importIconState:]
  -[SBIconController isShowingSidebar]
  -[SBIconController _updateIconModelStore]
  -[SBIconController _lockScreenUIWillLock:]
  -[SBIconController _primaryAppleAcountDidChange:]
  -[SBIconController _storeAccountDidChange:]
  -[SBIconController _backupRestoringDidChange:]
  -[SBIconController _controlCenterWillDismiss:]
  -[SBIconController _coverSheetWillPresent:]
  -[SBIconController _forceTouchControllerWillPresent:]
  -[SBIconController _bookmarkDidUninstall:]
  -[SBIconController _mainSwitcherCreated:]
  -[SBIconController _updateUninstallingSystemAppsRestricted]
  -[SBIconController configureLibraryViewController:withIconManager:]
  -[SBIconController _setUpLibraryViewController]
  -[SBIconController _makeTodayViewControllers]
  -[SBIconController isAppLibrarySupported]
  -[SBIconController _foldersInList:]
  -[SBIconController alertItemsController]
  -[SBIconController _showsBadgesInAppLibraryDidChange]
  -[SBIconController _configureEditingGestureRecognizers]
  -[SBIconController _addStateCaptureHandlerForKeyDisplayIDsWithBadgingEnabled]
  -[SBIconController _addStateCaptureHandlerForHomeScreenDefaults]
  -[SBIconController updateContentViewOrientationAndLayoutIfNeeded]
  -[SBIconController _beginAppearanceTransitionForChildViewControllersToVisible:animated:]
  -[SBIconController _updateStatusBarContentAssertion]
  -[SBIconController _endAppearanceTransitionForChildViewControllersToVisible:]
  -[SBIconController _relinquishStatusBarContentAssertion]
  -[SBIconController _effectiveOrientation]
  -[SBIconController _performInitialLayoutWithOrientation:]
  -[SBIconController _openFolderController]
  -[SBIconController applicationPlaceholderController]
  -[SBIconController isTodayOverlaySpotlightVisible]
  -[SBIconController dismissTodayOverlaySpotlightAnimated:]
  -[SBIconController isTodayOverlayPresented]
  -[SBIconController dismissTodayOverlayAnimated:]
  -[SBIconController isLibraryOverlayPresented]
  -[SBIconController dismissLibraryOverlayAnimated:]
  -[SBIconController dismissHomeScreenOverlayUsingTransitionCoordinator:]
  -[SBIconController _showOnBoardingAlertIfNeeded]
  -[SBIconController allowsUninstall]
  -[SBIconController isUninstallingSystemAppsRestricted]
  -[SBIconController isHideSupportedForIcon:inLocation:]
  -[SBIconController isUninstallSupportedForIcon:]
  -[SBIconController delayedLaunchRequestTimer]
  -[SBIconController setDelayedLaunchRequestTimer:]
  -[SBIconController launchActivationSettingsForIconView:]
  -[SBIconController _launchWidgetIcon:fromLocation:withContext:]
  -[SBIconController completeSidebarAnimationsIfNeeded]
  -[SBIconController setUninstallingSystemAppsRestricted:]
  -[SBIconController _containerViewControllerForPresentingFromTodayViewController]
  -[SBIconController dismissHomeScreenOverlayAnimated:]
  -[SBIconController _addSmartStackToTodayList:completionHandler:]
  -[SBIconController tableUIIconImageCache]
  -[SBIconController dismissHomeScreenOverlayAnimated:completion:]
  -[SBIconController userInterfaceController]
  -[SBIconController _handleEditingGesture:]
  -[SBIconController _shouldTodayViewController:receiveTouch:]
  -[SBIconController _suggestedTodayViewSizeForBounds:]
  -[SBIconController iconOcclusionReasons]
  -[SBIconController setIconOcclusionReasons:]
  -[SBIconController _updateVisibleIconsAfterOcclusionChange]
  -[SBIconController addIconOcclusionReason:updateVisibleIcons:]
  -[SBIconController removeIconOcclusionReason:updateVisibleIcons:]
  -[SBIconController _performWidgetMigrationIfNecessaryForApplication:]
  -[SBIconController _mutateIconListsForInstalledAppsDidChangeWithController:added:modified:removed:]
  -[SBIconController _ignoreMutatingIconListsOnApplicationInstall]
  -[SBIconController _performWidgetMigrationIfNecessary]
  -[SBIconController setHasRestrictedEnforcedLayout:]
  -[SBIconController setLibraryViewController:]
  -[SBIconController _iconVisibilityChanged:]
  -[SBIconController _rootFolderDidChange]
  -[SBIconController _createWidgetIconWithDescriptors:gridSize:]
  -[SBIconController _newTodayViewControllerWithIconManager:iconListModel:rootFolder:location:]
  -[SBIconController coverSheetTodayViewController]
  -[SBIconController setCoverSheetTodayViewController:]
  -[SBIconController setHomeScreenTodayViewController:]
  -[SBIconController _badgesAreEnabledForSectionInfo:]
  -[SBIconController _updateEnabledBadgesSetWithSections:]
  -[SBIconController hasRestrictedEnforcedLayout]
  -[SBIconController _acquireAssertionsForFolderController:]
  -[SBIconController _invalidateAssertionsForFolderController:]
  -[SBIconController setHomeScreenOverlayController:]
  -[SBIconController _homeScreenOverlayControllerIfNeeded]
  -[SBIconController allowsHomeScreenOverlay]
  -[SBIconController suspendWallpaperAnimationForSpotlightAssertion]
  -[SBIconController setSuspendWallpaperAnimationForSpotlightAssertion:]
  -[SBIconController transitionContextToShowSpotlight:fromTodayView:animated:interactive:]
  -[SBIconController displayLayoutTransition]
  -[SBIconController setDisplayLayoutTransition:]
  -[SBIconController setWallpaperAnimationDisabled:forReason:]
  -[SBIconController setInteractivePullToTodaySearchTransition:]
  -[SBIconController interactivePullToTodaySearchTransition]
  -[SBIconController proactiveUsageObserver]
  -[SBIconController _shouldHideAppIconForceTouchInfoForApplication:]
  -[SBIconController isOnlyHideSuggestionSupportedForIcon:inLocation:]
  -[SBIconController isHideSuggestionSupportedForIconView:inLocation:]
  -[SBIconController _aggregateLoggingAppKeyForIcon:]
  -[SBIconController _beginDisablingAllOrientationChangesForReason:]
  -[SBIconController _endDisablingAllOrientationChangesForReason:]
  -[SBIconController _startSpotlightInteractiveGestureTransactionForGesture:]
  -[SBIconController setSpotlightViewController:]
  -[SBIconController _showInfoAlertIfNeeded:]
  -[SBIconController _launchFromIconView:withActions:]
  -[SBIconController setDismissingMenuForFolderPresentation:]
  -[SBIconController dismissingMenuForFolderPresentation]
  -[SBIconController _dragSessionContainsAppClipWebClipIcon:]
  -[SBIconController shouldUseLiveBlurForBackgroundViewForComponentsOfIconView:]
  -[SBIconController allowsBadgingForIcon:]
  -[SBIconController significantAnimationColorSamplingAssertion]
  -[SBIconController setSignificantAnimationColorSamplingAssertion:]
  -[SBIconController isAppLibraryAllowed]
  -[SBIconController temporaryIntentDataForIconWithIdentifier:widgetUniqueIdentifier:]
  -[SBIconController _getApplicationDataStore:configurationKey:forDataSource:]
  -[SBIconController setPageManagementWallpaperScaleAssertion:]
  -[SBIconController pageManagementWallpaperScaleAssertion]
  -[SBIconController shouldAddNewIconsToRootFolder]
  -[SBIconController _isWidgetWithContainerBundleIdentifierValid:]
  -[SBIconController sidebarAppearanceStateOverrideAssertion]
  -[SBIconController setSidebarAppearanceStateOverrideAssertion:]
  -[SBIconController setTemporaryIntent:forIconWithIdentifier:widgetUniqueIdentifier:]
  -[SBIconController suspendWallpaperAnimationForOverlayViewAssertion]
  -[SBIconController setSuspendWallpaperAnimationForOverlayViewAssertion:]
  -[SBIconController dismissOverlaysForIconManager:]
  -[SBIconController iconManager:defaultAutomaticFavoriteIconIdentifiersWithMaximumCount:]
  -[SBIconController handleSpotlightPresentationFromViewController:]
  -[SBIconController handleSpotlightDismissalFromViewController:]
  -[SBIconController defaultSearchViewPresentationSourceForViewController:]
  -[SBIconController todayViewControllerCanBeginInteractivePullToSearch:]
  -[SBIconController todayViewControllerDidBeginInteractivePullToSearch:]
  -[SBIconController todayViewController:didUpdateInteractivePullToSearchWithProgress:]
  -[SBIconController todayViewController:didEndInteractivePullToSearchSuccessfully:]
  -[SBIconController todayViewControllerDidFocusSearchField:]
  -[SBIconController todayViewWantsToEndEditing:]
  -[SBIconController todayViewControllerWillPresentSpotlight:]
  -[SBIconController todayViewControllerDidChangeHeaderVisibility:]
  -[SBIconController todayViewDidAppear:]
  -[SBIconController isTodayViewRotating:]
  -[SBIconController minimumHomeScreenScaleForFloatingDockController:]
  -[SBIconController widgetGroupViewControllerDidChangeHeaderVisibility:]
  -[SBIconController proactiveHomeScreenSuggestionProviderDidUpdatePrediction:]
  -[SBIconController proactiveHomeScreenSuggestionProvider:willUseTemporaryIntent:forIconWithIdentifier:widgetUniqueIdentifier:]
  -[SBIconController proactiveHomeScreenUsageObserver:intentForWidget:ofIcon:]
  -[SBIconController backgroundViewForEditingDoneButtonForHomeScreenOverlayController:]
  -[SBIconController homeScreenOverlayWantsToEndEditing:]
  -[SBIconController homeScreenOverlayWantsWidgetEditingViewControllerPresented:]
  -[SBIconController showsAddWidgetButtonWhileEditingForHomeScreenOverlayController:]
  -[SBIconController showsDoneButtonWhileEditingForHomeScreenOverlayController:]
  -[SBIconController isEditingForHomeScreenOverlayController:]
  -[SBIconController homeScreenOverlayController:setSuppressesEditingStateForListView:]
  -[SBIconController homeScreenOverlayController:displayLayoutIdentifierForSidebarViewController:]
  -[SBIconController appPredictionViewController:launchAppFromIcon:]
  -[SBIconController appPredictionViewController:shouldDisplayBadgeWithBundleIdentifier:]
  -[SBIconController appPredictionViewController:iconForApplicationWithBundleIdentifier:]
  -[SBIconController iconModel:applicationWithBundleIdentifier:]
  -[SBIconController placeholdersByDisplayIDForIconModel:]
  -[SBIconController userInterfaceControllerIfExists]
  -[SBIconController iconPathForIconWithDisplayID:]
  -[SBIconController isUninstallOrHideSupportedForIcon:inLocation:]
  -[SBIconController noteViewCovered]
  -[SBIconController noteViewUncovered]
  -[SBIconController currentAnimationContainer]
  -[SBIconController resetHomeScreenLayout]
  -[SBIconController forbidApplicationBundleIdentifierFromLibrary:]
  -[SBIconController unforbidApplicationBundleIdentifierFromLibrary:]
  -[SBIconController appSwitcherUnmaskedIconImageCache]
  -[SBIconController appSwitcherHeaderIconImageCache]
  -[SBIconController notificationIconImageCache]
  -[SBIconController dismissTodayOverlay]
  -[SBIconController dismissLibraryOverlay]
  -[SBIconController areHomeScreenIconsOccluded]
  -[SBIconController _isHostedByCoverSheet]
  -[SBIconController _iconForceTouchControllerWillPresent:]
  -[SBIconController _iconForceTouchControllerDidDismiss:]
  -[SBIconController _createWidgetIconWithDataSource:gridSize:]
  -[SBIconController _createWidgetIconWithKind:extensionBundleIdentifier:gridSize:]
  -[SBIconController iconManager:didRemoveConfigurableDataSource:]
  -[SBIconController appPredictionViewController:badgeValueForApplicationWithBundleIdentifier:]
  -[SBIconController _configureCategoryMapProviderToUseCategoryMapAtURL:]
  -[SBIconController _teardownDeweyTestConfigurations]
  -[SBIconController isShowingHomeScreenOverlay]
  -[SBIconController statusBarContentAssertion]
  -[SBIconController setStatusBarContentAssertion:]
  -[SBIconController popoverDelayTimer]
  -[SBIconController setPopoverDelayTimer:]
  -[SBIconController relayoutTestRecipe]
  -[SBIconController toggleSearchTestRecipe]
  -[SBIconController runDownloadingIconTestRecipe]
  -[SBIconController runRemoveAndRestoreIconTestRecipe]
  -[SBIconController organizeInFoldersTestRecipe]
  -[SBIconController shuffleStackTestRecipe]
  -[SBIconController setProactiveUsageObserver:]
  -[SBIconController proactiveSuggestionProvider]
  -[SBIconController setProactiveSuggestionProvider:]
  -[SBIconController widgetMetricsServer]
  -[SBIconController widgetAddSheetAffordanceViewController]
  -[SBIconController setWidgetAddSheetAffordanceViewController:]
  -[SBIconController widgetGroupViewController]
  -[SBIconController _setIgnoreMutatingIconListsOnApplicationInstall:]
  -[SBIconController appIconForceTouchWindows]
  -[SBIconController _createTestFolderWithOverrideIconList:]
  -[SBIconController _failCurrentTestWithMessage:]
  -[SBIconController _createTestFolder]


SBForceTouchAppIconInfoProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIconAccessoryInfoProvider>
 @property  NSString *location
 @property  BOOL highlighted
 @property  long long continuityBadgeType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBForceTouchAppIconInfoProvider continuityBadgeType]
  -[SBForceTouchAppIconInfoProvider isHighlighted]
  -[SBForceTouchAppIconInfoProvider location]


SBIconDragPlatterWindow : SBSecureMainScreenActiveInterfaceOrientationWindow <SBIconDragPreviewContaining>
 @property  UIView *iconDragPreviewContainerView

  // instance methods
  -[SBIconDragPlatterWindow iconDragPreviewContainerView]


SBIconViewSnapshotProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIconViewSnapshotProviding>
 @property  UIView *snapshotView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIconViewSnapshotProvider snapshotView]
  -[SBIconViewSnapshotProvider .cxx_destruct]
  -[SBIconViewSnapshotProvider invalidate]
  -[SBIconViewSnapshotProvider initWithSnapshotView:invalidation:]


SBHardwareButtonGestureParameters : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, NSCopying, NSMutableCopying>
 @property  long long maximumPressCount
 @property  double longPressTimeInterval
 @property  double multiplePressTimeInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHardwareButtonGestureParameters copyWithZone:]
  -[SBHardwareButtonGestureParameters succinctDescriptionBuilder]
  -[SBHardwareButtonGestureParameters succinctDescription]
  -[SBHardwareButtonGestureParameters longPressTimeInterval]
  -[SBHardwareButtonGestureParameters multiplePressTimeInterval]
  -[SBHardwareButtonGestureParameters mutableCopyWithZone:]
  -[SBHardwareButtonGestureParameters descriptionWithMultilinePrefix:]
  -[SBHardwareButtonGestureParameters descriptionBuilderWithMultilinePrefix:]
  -[SBHardwareButtonGestureParameters maximumPressCount]


SBMutableHardwareButtonGestureParameters : SBHardwareButtonGestureParameters
 @property  long long maximumPressCount
 @property  double longPressTimeInterval
 @property  double multiplePressTimeInterval

  // instance methods
  -[SBMutableHardwareButtonGestureParameters setMaximumPressCount:]
  -[SBMutableHardwareButtonGestureParameters setLongPressTimeInterval:]
  -[SBMutableHardwareButtonGestureParameters longPressTimeInterval]
  -[SBMutableHardwareButtonGestureParameters multiplePressTimeInterval]
  -[SBMutableHardwareButtonGestureParameters setMultiplePressTimeInterval:]
  -[SBMutableHardwareButtonGestureParameters maximumPressCount]


SBFluidSwitcherGestureWorkspaceTransaction : SBSystemGestureWorkspaceTransaction <SBUIAnimationControllerObserver, SBSceneLayoutWorkspaceTransactionDelegate, SBWorkspaceApplicationSceneTransitionContextDelegate, SBViewMorphAnimatorObserver>
 @property  SBFluidSwitcherViewController *switcherViewController
 @property  <SBFluidSwitcherGestureWorkspaceTransactionDelegate> *delegate
 @property  UIApplicationSceneDeactivationAssertion *backgroundingScenesDeactivationAssertion
 @property  SBMainDisplayLayoutState *originalLayoutState
 @property  SBMainDisplayLayoutState *activeLayoutState
 @property  SBUISwitcherAnimationController *animationController
 @property  SBMainWorkspaceTransaction *finalRootTransaction
 @property  SBSceneLayoutWorkspaceTransaction *sceneLayoutTransaction
 @property  @? layoutCompletion
 @property  SBAutoPiPWorkspaceTransaction *autoPiPWorkspaceTransaction
 @property  NSTimer *activateScenesTimer
 @property  SBTransientOverlayViewController *switcherTransitioningTransientOverlayViewController
 @property  BOOL hasCompletedAtLeastOneGesture
 @property  NSUUID *gestureID
 @property  SBAppLayout *selectedAppLayout
 @property  BOOL shouldCancelGestureUponInterruption
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherGestureWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBFluidSwitcherGestureWorkspaceTransaction transactionDidComplete:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _canBeInterrupted]
  -[SBFluidSwitcherGestureWorkspaceTransaction _didComplete]
  -[SBFluidSwitcherGestureWorkspaceTransaction completeGestureWithTransitionRequest:]
  -[SBFluidSwitcherGestureWorkspaceTransaction previousLayoutStateForApplicationTransitionContext:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setAnimationController:]
  -[SBFluidSwitcherGestureWorkspaceTransaction dealloc]
  -[SBFluidSwitcherGestureWorkspaceTransaction _begin]
  -[SBFluidSwitcherGestureWorkspaceTransaction _willInterruptWithReason:]
  -[SBFluidSwitcherGestureWorkspaceTransaction .cxx_destruct]
  -[SBFluidSwitcherGestureWorkspaceTransaction _gestureType]
  -[SBFluidSwitcherGestureWorkspaceTransaction transaction:performTransitionWithCompletion:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _createWorkspaceTransientOverlayForAppLayout:]
  -[SBFluidSwitcherGestureWorkspaceTransaction switcherViewController]
  -[SBFluidSwitcherGestureWorkspaceTransaction setSwitcherViewController:]
  -[SBFluidSwitcherGestureWorkspaceTransaction transactionWillBeginLayoutTransition:]
  -[SBFluidSwitcherGestureWorkspaceTransaction createSceneEntityForHandle:]
  -[SBFluidSwitcherGestureWorkspaceTransaction applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBFluidSwitcherGestureWorkspaceTransaction layoutStateForApplicationTransitionContext:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setDelegate:]
  -[SBFluidSwitcherGestureWorkspaceTransaction transaction:didEndLayoutTransitionWithContinuation:]
  -[SBFluidSwitcherGestureWorkspaceTransaction animationController]
  -[SBFluidSwitcherGestureWorkspaceTransaction delegate]
  -[SBFluidSwitcherGestureWorkspaceTransaction _didInterruptWithReason:]
  -[SBFluidSwitcherGestureWorkspaceTransaction selectedAppLayout]
  -[SBFluidSwitcherGestureWorkspaceTransaction gestureID]
  -[SBFluidSwitcherGestureWorkspaceTransaction _beginWithGesture:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updateWithGesture:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _finishWithGesture:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _finishWithCompletionType:]
  -[SBFluidSwitcherGestureWorkspaceTransaction systemGestureStateChanged:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _failRunningLayoutStateTransition]
  -[SBFluidSwitcherGestureWorkspaceTransaction finalRootTransaction]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updatePPTsForGestureTransactionBegan]
  -[SBFluidSwitcherGestureWorkspaceTransaction backgroundingScenesDeactivationAssertion]
  -[SBFluidSwitcherGestureWorkspaceTransaction _switcherGestureDidUpdate:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _transitionRequestForApplicationTransitionContext:eventLabel:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updateDigitizerSurfaceDimensions]
  -[SBFluidSwitcherGestureWorkspaceTransaction _currentGestureEventForGesture:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updatePPTsForGestureEnded]
  -[SBFluidSwitcherGestureWorkspaceTransaction _copiedTransitionRequestFromTransitionRequest:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _updatePPTsForAnimationEndedWithFinalLayoutState:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setSelectedAppLayout:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setFinalRootTransaction:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _addChildWorkspaceTransaction:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _transitionRequestForSwitcherTransitionRequest:eventLabel:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _addWaitForSceneLayoutTransitionTransaction:forLeafAnimationControllers:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _acquireBackgroundingScenesDeactivationAssertionForTransitionRequest:]
  -[SBFluidSwitcherGestureWorkspaceTransaction _runSceneLayoutTransactionForTransitionRequest:updateScenes:]
  -[SBFluidSwitcherGestureWorkspaceTransaction didEndAllAnimations]
  -[SBFluidSwitcherGestureWorkspaceTransaction initWithTransitionRequest:fluidSwitcherViewController:delegate:]
  -[SBFluidSwitcherGestureWorkspaceTransaction shouldSuppressMedusaKeyboardDuringGesture]
  -[SBFluidSwitcherGestureWorkspaceTransaction shouldCancelGestureUponInterruption]
  -[SBFluidSwitcherGestureWorkspaceTransaction setShouldCancelGestureUponInterruption:]
  -[SBFluidSwitcherGestureWorkspaceTransaction setBackgroundingScenesDeactivationAssertion:]
  -[SBFluidSwitcherGestureWorkspaceTransaction originalLayoutState]
  -[SBFluidSwitcherGestureWorkspaceTransaction setOriginalLayoutState:]
  -[SBFluidSwitcherGestureWorkspaceTransaction activeLayoutState]
  -[SBFluidSwitcherGestureWorkspaceTransaction setActiveLayoutState:]
  -[SBFluidSwitcherGestureWorkspaceTransaction sceneLayoutTransaction]
  -[SBFluidSwitcherGestureWorkspaceTransaction setSceneLayoutTransaction:]
  -[SBFluidSwitcherGestureWorkspaceTransaction layoutCompletion]
  -[SBFluidSwitcherGestureWorkspaceTransaction setLayoutCompletion:]
  -[SBFluidSwitcherGestureWorkspaceTransaction autoPiPWorkspaceTransaction]
  -[SBFluidSwitcherGestureWorkspaceTransaction setAutoPiPWorkspaceTransaction:]
  -[SBFluidSwitcherGestureWorkspaceTransaction activateScenesTimer]
  -[SBFluidSwitcherGestureWorkspaceTransaction setActivateScenesTimer:]
  -[SBFluidSwitcherGestureWorkspaceTransaction switcherTransitioningTransientOverlayViewController]
  -[SBFluidSwitcherGestureWorkspaceTransaction setSwitcherTransitioningTransientOverlayViewController:]
  -[SBFluidSwitcherGestureWorkspaceTransaction hasCompletedAtLeastOneGesture]


SBDismissSiriSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBDismissSiriSwitcherEventResponse type]


SBMainDisplayInterfaceOrientationAggregator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long activeInterfaceOrientation
 @property  NSArray *interfaceOrientationSources

  // instance methods
  -[SBMainDisplayInterfaceOrientationAggregator activeInterfaceOrientation]
  -[SBMainDisplayInterfaceOrientationAggregator _layoutOrientation]
  -[SBMainDisplayInterfaceOrientationAggregator init]
  -[SBMainDisplayInterfaceOrientationAggregator interfaceOrientationSources]
  -[SBMainDisplayInterfaceOrientationAggregator dealloc]
  -[SBMainDisplayInterfaceOrientationAggregator activeInterfaceOrientationAtOrBelow:]
  -[SBMainDisplayInterfaceOrientationAggregator .cxx_destruct]
  -[SBMainDisplayInterfaceOrientationAggregator highestActiveInterfaceOrientationSourceBelow:]
  -[SBMainDisplayInterfaceOrientationAggregator succinctDescriptionBuilder]
  -[SBMainDisplayInterfaceOrientationAggregator _sortSources:]
  -[SBMainDisplayInterfaceOrientationAggregator activeInterfaceOrientationBelow:]
  -[SBMainDisplayInterfaceOrientationAggregator highestActiveInterfaceOrientationSource]
  -[SBMainDisplayInterfaceOrientationAggregator highestActiveInterfaceOrientationSourceIgnoringSourcesAbove:]
  -[SBMainDisplayInterfaceOrientationAggregator succinctDescription]
  -[SBMainDisplayInterfaceOrientationAggregator descriptionWithMultilinePrefix:]
  -[SBMainDisplayInterfaceOrientationAggregator descriptionBuilderWithMultilinePrefix:]
  -[SBMainDisplayInterfaceOrientationAggregator _highestSourceAtOrBelow:amongSources:]


SBHomeGestureSwitcherModifier : SBGestureSwitcherModifier <SBHomeGestureDockSwitcherModifierDelegate, SBHomeGestureFinalDestinationSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeGestureSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeGestureSwitcherModifier homeScreenAlpha]
  -[SBHomeGestureSwitcherModifier scaleForIndex:]
  -[SBHomeGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeGestureSwitcherModifier handleMainTransitionEvent:]
  -[SBHomeGestureSwitcherModifier wallpaperStyle]
  -[SBHomeGestureSwitcherModifier cardCornerRadiiForIndex:]
  -[SBHomeGestureSwitcherModifier opacityForIndex:]
  -[SBHomeGestureSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBHomeGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeGestureSwitcherModifier frameForIndex:]
  -[SBHomeGestureSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBHomeGestureSwitcherModifier homeScreenDimmingAlpha]
  -[SBHomeGestureSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBHomeGestureSwitcherModifier dealloc]
  -[SBHomeGestureSwitcherModifier .cxx_destruct]
  -[SBHomeGestureSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBHomeGestureSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBHomeGestureSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBHomeGestureSwitcherModifier titleOpacityForIndex:]
  -[SBHomeGestureSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBHomeGestureSwitcherModifier homeScreenScale]
  -[SBHomeGestureSwitcherModifier appLayoutsToResignActive]
  -[SBHomeGestureSwitcherModifier _switcherCardScale]
  -[SBHomeGestureSwitcherModifier didMoveToParentModifier:]
  -[SBHomeGestureSwitcherModifier wallpaperScale]
  -[SBHomeGestureSwitcherModifier _applyPrototypeSettings]
  -[SBHomeGestureSwitcherModifier darkeningAlphaForIndex:]
  -[SBHomeGestureSwitcherModifier lighteningAlphaForIndex:]
  -[SBHomeGestureSwitcherModifier keyboardSuppressionMode]
  -[SBHomeGestureSwitcherModifier _displayLinkFired:]
  -[SBHomeGestureSwitcherModifier handleRemovalEvent:]
  -[SBHomeGestureSwitcherModifier isContainerStatusBarVisible]
  -[SBHomeGestureSwitcherModifier shadowOpacityForIndex:]
  -[SBHomeGestureSwitcherModifier selectedAppLayout]
  -[SBHomeGestureSwitcherModifier handleGestureEvent:]
  -[SBHomeGestureSwitcherModifier _newDockModifierRequiringVerticalSwipeToTrackDock:startingEnvironmentMode:]
  -[SBHomeGestureSwitcherModifier _distanceYToInSwitcherCardScale]
  -[SBHomeGestureSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBHomeGestureSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateGestureTranslationVelocityAndProgressWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateShouldResignActiveWithEvent:]
  -[SBHomeGestureSwitcherModifier _updateStackedProgress]
  -[SBHomeGestureSwitcherModifier _responseForUpdatingLayoutForGestureBegan]
  -[SBHomeGestureSwitcherModifier _responseForUpdatingIconViewVisibility:]
  -[SBHomeGestureSwitcherModifier _responseForStudyLogDidBeginGesture]
  -[SBHomeGestureSwitcherModifier _responseForSBEventGestureBeganWithTimeDelta:]
  -[SBHomeGestureSwitcherModifier _unadjustedGestureTranslation]
  -[SBHomeGestureSwitcherModifier _isTranslationPastDistanceThresholdToUnconditionallyGoHome:]
  -[SBHomeGestureSwitcherModifier _updateInMultitaskingIfNeededWithLocation:]
  -[SBHomeGestureSwitcherModifier _scaleForAdjacentCards]
  -[SBHomeGestureSwitcherModifier _updateFrameOffsetForXRubberbandingForTranslation:]
  -[SBHomeGestureSwitcherModifier currentFinalDestination]
  -[SBHomeGestureSwitcherModifier _responseForActivatingFinalDestination:]
  -[SBHomeGestureSwitcherModifier _responseForActivatingReachabilityIfNeededWithFinalDestination:]
  -[SBHomeGestureSwitcherModifier _responseForStudyLogDidEndGestureWithEvent:finalDestination:destinationReason:]
  -[SBHomeGestureSwitcherModifier _responseForSBEventGestureEndWithEvent:finalDestination:]
  -[SBHomeGestureSwitcherModifier _updateTranslationAdjustmentForGestureFromHomeScreenIfNeededWithEvent:]
  -[SBHomeGestureSwitcherModifier _gestureProgressToMaxTranslationForTranslation:]
  -[SBHomeGestureSwitcherModifier _isSelectedAppLayoutAtIndex:]
  -[SBHomeGestureSwitcherModifier _frameOffsetForTranslation:]
  -[SBHomeGestureSwitcherModifier _shouldPositionAdjacentCardsOffscreenForFlyIn]
  -[SBHomeGestureSwitcherModifier _rubberbandedTranslationForAdjacentCards]
  -[SBHomeGestureSwitcherModifier _scaleForTranslation:]
  -[SBHomeGestureSwitcherModifier _selectedAppLayoutIndex]
  -[SBHomeGestureSwitcherModifier _coplanarSpacing]
  -[SBHomeGestureSwitcherModifier _layoutSettingsForAppLayout:layoutSettings:]
  -[SBHomeGestureSwitcherModifier _cornerRadiusSettings]
  -[SBHomeGestureSwitcherModifier _inSwitcherCenterYOffsetWhenPresented]
  -[SBHomeGestureSwitcherModifier _centerYOffsetDuringGesture]
  -[SBHomeGestureSwitcherModifier _scaleForOffscreenAdjacentCardsForFlyIn]
  -[SBHomeGestureSwitcherModifier unconditionalDistanceThresholdForHome]
  -[SBHomeGestureSwitcherModifier _shouldResignActiveBasedOnCardScale]
  -[SBHomeGestureSwitcherModifier _hasPausedEnoughForFlyIn]
  -[SBHomeGestureSwitcherModifier _inMultitaskingForLocation:translation:]
  -[SBHomeGestureSwitcherModifier _preventPositioningCardsOffscreenForFlatBottomEdgeSwipe]
  -[SBHomeGestureSwitcherModifier _beginAnimatingMultitaskingPropertyWithMode:settings:]
  -[SBHomeGestureSwitcherModifier _hasTraveledSufficientDistanceForHomeOrAppSwitcher]
  -[SBHomeGestureSwitcherModifier _distanceYToMaxTranslation]
  -[SBHomeGestureSwitcherModifier initWithGestureID:selectedAppLayout:startingEnvironmentMode:multitaskingModifier:scrunchInitiated:continuingGesture:lastGestureWasAnArcSwipe:]
  -[SBHomeGestureSwitcherModifier liftOffVelocityForGestureEnd]
  -[SBHomeGestureSwitcherModifier liftOffTranslationForGestureEnd]
  -[SBHomeGestureSwitcherModifier isShowingOrAnimatingCardsForFlyIn]


SBScrollToTopSceneProxyView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <_UIScrollToTopView>
 @property  SBSceneHandle *sceneHandle
 @property  <SBScrollToTopSceneProxyViewDelegate> *delegate

  // instance methods
  -[SBScrollToTopSceneProxyView isScrollEnabled]
  -[SBScrollToTopSceneProxyView didMoveToWindow]
  -[SBScrollToTopSceneProxyView sceneHandle]
  -[SBScrollToTopSceneProxyView .cxx_destruct]
  -[SBScrollToTopSceneProxyView setSceneHandle:]
  -[SBScrollToTopSceneProxyView willMoveToWindow:]
  -[SBScrollToTopSceneProxyView setDelegate:]
  -[SBScrollToTopSceneProxyView _scrollToTopFromTouchAtScreenLocation:resultHandler:]
  -[SBScrollToTopSceneProxyView delegate]


SBWidgetDebuggingTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWidgetDebuggingTestRecipe __systemService]

  // instance methods
  -[SBWidgetDebuggingTestRecipe title]
  -[SBWidgetDebuggingTestRecipe handleVolumeIncrease]
  -[SBWidgetDebuggingTestRecipe handleVolumeDecrease]
  -[SBWidgetDebuggingTestRecipe _openNotificationCenter]


SBKeyboardBrightnessController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHIDValueModifyingButtonSetArbiterDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBKeyboardBrightnessController init]
  -[SBKeyboardBrightnessController .cxx_destruct]
  -[SBKeyboardBrightnessController setBrightnessLevel:]
  -[SBKeyboardBrightnessController handleBrightnessKeyPressEvent:]
  -[SBKeyboardBrightnessController cancelBrightnessEvent]
  -[SBKeyboardBrightnessController _setBrightnessLevel:showHUD:]
  -[SBKeyboardBrightnessController _adjustBacklightLevel:]
  -[SBKeyboardBrightnessController buttonSetArbiter:performActionForButtonPage:usage:]


SBSwitcherWallpaperPageContentView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBAppSwitcherPageContentView>
 @property  long long desiredWallpaperOrientation
 @property  long long wallpaperStyle
 @property  SBWallpaperEffectView *wallpaperEffectView
 @property  double cornerRadius
 @property  long long orientation
 @property  BOOL contentRequiresGroupOpacity
 @property  BOOL active
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherWallpaperPageContentView setWallpaperStyle:]
  -[SBSwitcherWallpaperPageContentView setVisible:]
  -[SBSwitcherWallpaperPageContentView wallpaperStyle]
  -[SBSwitcherWallpaperPageContentView _updateCornerRadius]
  -[SBSwitcherWallpaperPageContentView isVisible]
  -[SBSwitcherWallpaperPageContentView _wallpaperFrame]
  -[SBSwitcherWallpaperPageContentView initWithFrame:]
  -[SBSwitcherWallpaperPageContentView setCornerRadius:]
  -[SBSwitcherWallpaperPageContentView _deviceSupportsEdgeAntiAliasing]
  -[SBSwitcherWallpaperPageContentView .cxx_destruct]
  -[SBSwitcherWallpaperPageContentView setDesiredWallpaperOrientation:]
  -[SBSwitcherWallpaperPageContentView _viewForWallpaperWrapper]
  -[SBSwitcherWallpaperPageContentView setActive:]
  -[SBSwitcherWallpaperPageContentView isActive]
  -[SBSwitcherWallpaperPageContentView desiredWallpaperOrientation]
  -[SBSwitcherWallpaperPageContentView wallpaperEffectView]
  -[SBSwitcherWallpaperPageContentView setOrientation:]
  -[SBSwitcherWallpaperPageContentView _updateWallpaperOrientation]
  -[SBSwitcherWallpaperPageContentView orientation]
  -[SBSwitcherWallpaperPageContentView invalidate]
  -[SBSwitcherWallpaperPageContentView cornerRadius]
  -[SBSwitcherWallpaperPageContentView contentRequiresGroupOpacity]
  -[SBSwitcherWallpaperPageContentView layoutSubviews]


SBInlineGridSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBInlineGridSwitcherModifier visibleAppLayouts]
  -[SBInlineGridSwitcherModifier copyWithZone:]
  -[SBInlineGridSwitcherModifier .cxx_destruct]
  -[SBInlineGridSwitcherModifier handleTapAppLayoutEvent:]
  -[SBInlineGridSwitcherModifier scrollAxis]
  -[SBInlineGridSwitcherModifier didMoveToParentModifier:]
  -[SBInlineGridSwitcherModifier numberOfRows]
  -[SBInlineGridSwitcherModifier handleRemovalEvent:]
  -[SBInlineGridSwitcherModifier handleTapOutsideToDismissEvent:]
  -[SBInlineGridSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBInlineGridSwitcherModifier initWithBundleIdentifier:scrollAxis:fixedCardSize:cardScale:floating:overlay:]
  -[SBInlineGridSwitcherModifier cardScale]
  -[SBInlineGridSwitcherModifier fixedCardSize]
  -[SBInlineGridSwitcherModifier handleInlineTransitionEvent:]
  -[SBInlineGridSwitcherModifier gridLayoutModifier]


_SBInlineGridFloorSwitcherModifier : SBSwitcherModifier
 @property  BOOL floating
 @property  BOOL overlay

  // instance methods
  -[_SBInlineGridFloorSwitcherModifier homeScreenBackdropBlurType]
  -[_SBInlineGridFloorSwitcherModifier wantsDockWindowLevelAssertion]
  -[_SBInlineGridFloorSwitcherModifier isFloating]
  -[_SBInlineGridFloorSwitcherModifier visibleAppLayouts]
  -[_SBInlineGridFloorSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[_SBInlineGridFloorSwitcherModifier homeScreenAlpha]
  -[_SBInlineGridFloorSwitcherModifier scaleForIndex:]
  -[_SBInlineGridFloorSwitcherModifier isHomeScreenContentRequired]
  -[_SBInlineGridFloorSwitcherModifier topMostLayoutElements]
  -[_SBInlineGridFloorSwitcherModifier wantsDockBehaviorAssertion]
  -[_SBInlineGridFloorSwitcherModifier isSwitcherWindowVisible]
  -[_SBInlineGridFloorSwitcherModifier isScrollEnabled]
  -[_SBInlineGridFloorSwitcherModifier contentPageViewScaleForAppLayout:]
  -[_SBInlineGridFloorSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[_SBInlineGridFloorSwitcherModifier animationAttributesForLayoutElement:]
  -[_SBInlineGridFloorSwitcherModifier wallpaperStyle]
  -[_SBInlineGridFloorSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[_SBInlineGridFloorSwitcherModifier cardCornerRadiiForIndex:]
  -[_SBInlineGridFloorSwitcherModifier opacityForIndex:]
  -[_SBInlineGridFloorSwitcherModifier appLayoutsToCacheSnapshots]
  -[_SBInlineGridFloorSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[_SBInlineGridFloorSwitcherModifier isWallpaperRequiredForSwitcher]
  -[_SBInlineGridFloorSwitcherModifier dockProgress]
  -[_SBInlineGridFloorSwitcherModifier frameForIndex:]
  -[_SBInlineGridFloorSwitcherModifier contentOffsetForIndex:centered:]
  -[_SBInlineGridFloorSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[_SBInlineGridFloorSwitcherModifier homeScreenDimmingAlpha]
  -[_SBInlineGridFloorSwitcherModifier minimumTranslationToKillIndex:]
  -[_SBInlineGridFloorSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[_SBInlineGridFloorSwitcherModifier containerStatusBarAnimationDuration]
  -[_SBInlineGridFloorSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[_SBInlineGridFloorSwitcherModifier isIndexSelectable:]
  -[_SBInlineGridFloorSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[_SBInlineGridFloorSwitcherModifier wantsHomeScreenPointerInteractions]
  -[_SBInlineGridFloorSwitcherModifier isOverlay]
  -[_SBInlineGridFloorSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[_SBInlineGridFloorSwitcherModifier switcherDimmingAlpha]
  -[_SBInlineGridFloorSwitcherModifier homeScreenBackdropBlurProgress]
  -[_SBInlineGridFloorSwitcherModifier reopenClosedWindowsButtonScale]
  -[_SBInlineGridFloorSwitcherModifier setOverlay:]
  -[_SBInlineGridFloorSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[_SBInlineGridFloorSwitcherModifier titleAndIconOpacityForIndex:]
  -[_SBInlineGridFloorSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[_SBInlineGridFloorSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[_SBInlineGridFloorSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[_SBInlineGridFloorSwitcherModifier titleOpacityForIndex:]
  -[_SBInlineGridFloorSwitcherModifier dockUpdateMode]
  -[_SBInlineGridFloorSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[_SBInlineGridFloorSwitcherModifier shadowStyleForAppLayout:]
  -[_SBInlineGridFloorSwitcherModifier homeScreenScale]
  -[_SBInlineGridFloorSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[_SBInlineGridFloorSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[_SBInlineGridFloorSwitcherModifier appLayoutsToResignActive]
  -[_SBInlineGridFloorSwitcherModifier shouldAllowContentViewTouchesForIndex:]
  -[_SBInlineGridFloorSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[_SBInlineGridFloorSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[_SBInlineGridFloorSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[_SBInlineGridFloorSwitcherModifier dockWindowLevel]
  -[_SBInlineGridFloorSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[_SBInlineGridFloorSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[_SBInlineGridFloorSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[_SBInlineGridFloorSwitcherModifier setFloating:]
  -[_SBInlineGridFloorSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[_SBInlineGridFloorSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[_SBInlineGridFloorSwitcherModifier wallpaperScale]
  -[_SBInlineGridFloorSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[_SBInlineGridFloorSwitcherModifier snapshotScaleForAppLayout:]
  -[_SBInlineGridFloorSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[_SBInlineGridFloorSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[_SBInlineGridFloorSwitcherModifier resetAdjustedScrollingState]
  -[_SBInlineGridFloorSwitcherModifier isIndexKillable:]
  -[_SBInlineGridFloorSwitcherModifier darkeningAlphaForIndex:]
  -[_SBInlineGridFloorSwitcherModifier switcherDimmingViewBlocksTouches]
  -[_SBInlineGridFloorSwitcherModifier plusButtonAlpha]
  -[_SBInlineGridFloorSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[_SBInlineGridFloorSwitcherModifier shadowOffsetForIndex:]
  -[_SBInlineGridFloorSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[_SBInlineGridFloorSwitcherModifier lighteningAlphaForIndex:]
  -[_SBInlineGridFloorSwitcherModifier keyboardSuppressionMode]
  -[_SBInlineGridFloorSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[_SBInlineGridFloorSwitcherModifier transactionCompletionOptions]
  -[_SBInlineGridFloorSwitcherModifier contentViewScale]
  -[_SBInlineGridFloorSwitcherModifier plusButtonStyle]
  -[_SBInlineGridFloorSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[_SBInlineGridFloorSwitcherModifier wantsSwitcherBackdropBlur]
  -[_SBInlineGridFloorSwitcherModifier wantsSwitcherDimmingView]
  -[_SBInlineGridFloorSwitcherModifier dockWindowLevelPriority]
  -[_SBInlineGridFloorSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[_SBInlineGridFloorSwitcherModifier scrollViewAttributes]
  -[_SBInlineGridFloorSwitcherModifier isContainerStatusBarVisible]
  -[_SBInlineGridFloorSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[_SBInlineGridFloorSwitcherModifier shadowOpacityForIndex:]
  -[_SBInlineGridFloorSwitcherModifier switcherBackdropBlurProgress]
  -[_SBInlineGridFloorSwitcherModifier rotationAngleForIndex:]
  -[_SBInlineGridFloorSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[_SBInlineGridFloorSwitcherModifier switcherBackdropBlurType]
  -[_SBInlineGridFloorSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]


SBBarSwipeAffordanceView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <UIGestureRecognizerDelegate, SBHomeGrabberDelegate, SBSystemGestureRecognizerDelegate, SBHomeGestureInteractionDelegate, SBHomeGesturePanGestureRecognizerInterfaceDelegate>
 @property  SBHomeGrabberView *grabberView
 @property  long long feedbackType
 @property  <SBBarSwipeAffordanceDelegate> *delegate
 @property  <SBHomeGrabberPointerClickDelegate> *pointerClickDelegate
 @property  BOOL active
 @property  long long colorBias
 @property  BOOL homeAffordanceHidden
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBarSwipeAffordanceView _settleGrabber]
  -[SBBarSwipeAffordanceView touchInterfaceOrientationForGestureRecognizer:]
  -[SBBarSwipeAffordanceView homeGestureInteraction:systemGestureTypeForType:]
  -[SBBarSwipeAffordanceView customScreenEdgePanGestureRecognizerForHomeGestureInteraction:]
  -[SBBarSwipeAffordanceView _createFeedbackGenerator]
  -[SBBarSwipeAffordanceView shouldAllowThinStyleForHomeGrabberView:]
  -[SBBarSwipeAffordanceView _deactivate]
  -[SBBarSwipeAffordanceView viewForSystemGestureRecognizer:]
  -[SBBarSwipeAffordanceView shouldAllowAutoHideForHomeGrabberView:]
  -[SBBarSwipeAffordanceView homeGestureInteractionChanged:]
  -[SBBarSwipeAffordanceView homeGestureInteractionEnded:]
  -[SBBarSwipeAffordanceView _settleAffordanceAnimationBehaviorDescription]
  -[SBBarSwipeAffordanceView _updateHomeAffordanceVisibility]
  -[SBBarSwipeAffordanceView homeGestureInteractionBegan:]
  -[SBBarSwipeAffordanceView additionalEdgeSpacingForHomeGrabberView:]
  -[SBBarSwipeAffordanceView homeGestureInteractionCancelled:]
  -[SBBarSwipeAffordanceView initWithFrame:]
  -[SBBarSwipeAffordanceView _setGrabberAdditionalEdgeSpacing:]
  -[SBBarSwipeAffordanceView _runBlockOnObservers:]
  -[SBBarSwipeAffordanceView _offsetGrabberForProgress:]
  -[SBBarSwipeAffordanceView .cxx_destruct]
  -[SBBarSwipeAffordanceView setColorBias:]
  -[SBBarSwipeAffordanceView _hideHomeAffordanceAnimationSettings]
  -[SBBarSwipeAffordanceView initWithFrame:systemGestureManager:enableGestures:]
  -[SBBarSwipeAffordanceView _activate]
  -[SBBarSwipeAffordanceView _effectiveOrientationAccountingForTransforms]
  -[SBBarSwipeAffordanceView _fireAction]
  -[SBBarSwipeAffordanceView setFeedbackType:]
  -[SBBarSwipeAffordanceView colorBias]
  -[SBBarSwipeAffordanceView setActive:]
  -[SBBarSwipeAffordanceView isActive]
  -[SBBarSwipeAffordanceView _unhideHomeAffordanceAnimationSettings]
  -[SBBarSwipeAffordanceView _progressWithTranslation:liftoffVelocity:]
  -[SBBarSwipeAffordanceView setPointerClickDelegate:]
  -[SBBarSwipeAffordanceView pointerClickDelegate]
  -[SBBarSwipeAffordanceView removeObserver:]
  -[SBBarSwipeAffordanceView setHomeAffordanceHidden:]
  -[SBBarSwipeAffordanceView isHomeAffordanceHidden]
  -[SBBarSwipeAffordanceView setDelegate:]
  -[SBBarSwipeAffordanceView grabberView]
  -[SBBarSwipeAffordanceView feedbackType]
  -[SBBarSwipeAffordanceView addObserver:]
  -[SBBarSwipeAffordanceView didAddSubview:]
  -[SBBarSwipeAffordanceView delegate]
  -[SBBarSwipeAffordanceView layoutSubviews]


SBIconModel : SBHIconModel /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
 @property  <SBIconModelApplicationDataSource> *applicationDataSource
 @property  BOOL allowsWebClips

  // class methods
  +[SBIconModel migratedIdentifierForLeafIdentifier:]

  // instance methods
  -[SBIconModel localeChanged]
  -[SBIconModel exportState:]
  -[SBIconModel modernizeRootArchive:]
  -[SBIconModel forecastedLayoutForIconState:includeMissingIcons:]
  -[SBIconModel importState:]
  -[SBIconModel willLayout]
  -[SBIconModel dealloc]
  -[SBIconModel expectedIconForDisplayIdentifier:createIfNecessary:]
  -[SBIconModel _replaceAppIconsWithDownloadingIcons]
  -[SBIconModel _shouldSkipAddingIcon:toRootFolder:]
  -[SBIconModel indexPathForIconInPlatformState:]
  -[SBIconModel setAllowsWebClips:]
  -[SBIconModel .cxx_destruct]
  -[SBIconModel addDownloadingIconForDownload:]
  -[SBIconModel adjustIconsToShow:iconsToHide:afterChangeToVisibleIconTags:hiddenIconTags:]
  -[SBIconModel expectedIconForDisplayIdentifier:]
  -[SBIconModel addIconForApplication:force:]
  -[SBIconModel addBookmarkIconForWebClip:]
  -[SBIconModel addIconForApplication:]
  -[SBIconModel updateExistingBookmarkIcon:forUpdatedWebClip:]
  -[SBIconModel allowsWebClips]
  -[SBIconModel shouldAvoidPlacingIconOnFirstPage:]
  -[SBIconModel bookmarkIconForWebClipIdentifier:]
  -[SBIconModel isIconVisible:]
  -[SBIconModel _noteApplicationIconImageChanged:]
  -[SBIconModel applicationIconForBundleIdentifier:]
  -[SBIconModel initWithStore:applicationDataSource:]
  -[SBIconModel applicationDataSource]
  -[SBIconModel exportPendingState:includeMissingIcons:]
  -[SBIconModel loadAllIcons]
  -[SBIconModel exportFlattenedState:includeMissingIcons:]
  -[SBIconModel _applicationIcons]
  -[SBIconModel applicationWithBundleIdentifier:]
  -[SBIconModel _replaceAppIconsWithDownloadingIcons:]
  -[SBIconModel placeholdersByDisplayID]
  -[SBIconModel shouldAvoidCreatingIconForApplication:]


SBNetworkReselectionController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <STTelephonyStateObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBNetworkReselectionController sharedController]

  // instance methods
  -[SBNetworkReselectionController init]
  -[SBNetworkReselectionController dealloc]
  -[SBNetworkReselectionController subscriptionInfoDidChangeForStateProvider:slot:]
  -[SBNetworkReselectionController _test]
  -[SBNetworkReselectionController _handleNetworkReselectionNeeded:forSlot:]


SBCombinationHardwareButton : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIGestureRecognizerDelegate, SBHardwareButtonGestureParametersObserver, SBSOSLockGestureObserverDelegate, SBSOSClawGestureObserverDelegate, SBPressPrecedenceArbiter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCombinationHardwareButton provider:didUpdateButtonGestureParameters:]
  -[SBCombinationHardwareButton screenshotGesture:]
  -[SBCombinationHardwareButton dealloc]
  -[SBCombinationHardwareButton sosClawDidBecomeInactive:]
  -[SBCombinationHardwareButton sosClawAutoCallInteractiveStateChanged:interacting:]
  -[SBCombinationHardwareButton .cxx_destruct]
  -[SBCombinationHardwareButton _setScreenshotDisabled:forReason:]
  -[SBCombinationHardwareButton gestureRecognizerShouldBegin:]
  -[SBCombinationHardwareButton sosLockTriggerDidBecomeInactive:]
  -[SBCombinationHardwareButton initWithScreenshotGestureRecognizer:shutdownGestureRecognizer:homeHardwareButton:lockHardwareButton:volumeHardwareButton:proximitySensorManager:backlightController:]
  -[SBCombinationHardwareButton sosLockTriggerDidBecomeActive:]
  -[SBCombinationHardwareButton _configureGestureRecognizers]
  -[SBCombinationHardwareButton shutdownGesture:]
  -[SBCombinationHardwareButton sosGesture:]
  -[SBCombinationHardwareButton gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBCombinationHardwareButton _configureSOSGestureBehaviors]
  -[SBCombinationHardwareButton gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBCombinationHardwareButton _backlightChanged:]
  -[SBCombinationHardwareButton sosClawDidTriggerSOS:completion:]
  -[SBCombinationHardwareButton _sosTriggerMechanismDidChange]
  -[SBCombinationHardwareButton sosLockDidTriggerSOS:completion:]
  -[SBCombinationHardwareButton preemptablePressGestureRecognizers]
  -[SBCombinationHardwareButton sosClawDidBecomeActive:]


SBEntityRemovalMedusaDefaultAnimationSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  double toBeRemovedFinalScale
 @property  double toBeRemovedFinalAlpha
 @property  double toBeRemovedFinalBlurRadius
 @property  double toBeMadeFullscreenFrameAnimationDelay
 @property  SBFFluidBehaviorSettings *toBeMadeFullscreenFrameAnimationSettings
 @property  SBFFluidBehaviorSettings *toBeRemovedScaleAnimationSettings
 @property  SBFFluidBehaviorSettings *toBeRemovedAlphaAnimationSettings

  // class methods
  +[SBEntityRemovalMedusaDefaultAnimationSettings settingsControllerModule]
  +[SBEntityRemovalMedusaDefaultAnimationSettings _settingsModule]

  // instance methods
  -[SBEntityRemovalMedusaDefaultAnimationSettings setDefaultValues]
  -[SBEntityRemovalMedusaDefaultAnimationSettings .cxx_destruct]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedFinalScale]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedFinalAlpha]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeMadeFullscreenFrameAnimationDelay]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedScaleAnimationSettings]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeMadeFullscreenFrameAnimationSettings]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedAlphaAnimationSettings]
  -[SBEntityRemovalMedusaDefaultAnimationSettings toBeRemovedFinalBlurRadius]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedFinalScale:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedFinalAlpha:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedFinalBlurRadius:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeMadeFullscreenFrameAnimationDelay:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedScaleAnimationSettings:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeRemovedAlphaAnimationSettings:]
  -[SBEntityRemovalMedusaDefaultAnimationSettings setToBeMadeFullscreenFrameAnimationSettings:]


SBEntityRemovalMedusaSlideOutAnimationSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  double toBeMadeFullScreenPushInScale
 @property  double toBeMadeFullScreenScaleResetAnimationDelay
 @property  double toBeRemovedSlideOutAnimationDelay
 @property  double toBeRemovedSlideOutHeightOffsetMultiplier
 @property  SBFFluidBehaviorSettings *toBeMadeFullscreenPushInScaleAnimationSettings
 @property  SBFFluidBehaviorSettings *toBeMadeFullscreenScaleResetAnimationSettings
 @property  SBFFluidBehaviorSettings *toBeRemovedSlideOutAnimationSettings
 @property  SBEntityRemovalMedusaDefaultAnimationSettings *defaultAnimationSettings

  // class methods
  +[SBEntityRemovalMedusaSlideOutAnimationSettings settingsControllerModule]

  // instance methods
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setDefaultValues]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings .cxx_destruct]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings defaultAnimationSettings]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeRemovedSlideOutHeightOffsetMultiplier]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeRemovedSlideOutAnimationSettings]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeMadeFullScreenScaleResetAnimationDelay]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeMadeFullScreenPushInScale]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeMadeFullscreenPushInScaleAnimationSettings]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeMadeFullscreenScaleResetAnimationSettings]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings toBeRemovedSlideOutAnimationDelay]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeMadeFullScreenPushInScale:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeMadeFullScreenScaleResetAnimationDelay:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeMadeFullscreenPushInScaleAnimationSettings:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeMadeFullscreenScaleResetAnimationSettings:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeRemovedSlideOutAnimationSettings:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeRemovedSlideOutAnimationDelay:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setToBeRemovedSlideOutHeightOffsetMultiplier:]
  -[SBEntityRemovalMedusaSlideOutAnimationSettings setDefaultAnimationSettings:]


SBEntityRemovalMedusaSlideOutUpwardAnimationSettings : SBEntityRemovalMedusaSlideOutAnimationSettings

SBEntityRemovalMedusaSlideOutDownwardAnimationSettings : SBEntityRemovalMedusaSlideOutAnimationSettings
  // instance methods
  -[SBEntityRemovalMedusaSlideOutDownwardAnimationSettings setDefaultValues]


SBEntityRemovalFloatingDefaultAnimationSettings : SBEntityRemovalMedusaDefaultAnimationSettings
  // instance methods
  -[SBEntityRemovalFloatingDefaultAnimationSettings setDefaultValues]


SBEntityRemovalFloatingSlideOutAnimationSettings : SBEntityRemovalMedusaSlideOutAnimationSettings
  // instance methods
  -[SBEntityRemovalFloatingSlideOutAnimationSettings setDefaultValues]


SBEntityRemovalFloatingSlideOutUpwardAnimationSettings : SBEntityRemovalFloatingSlideOutAnimationSettings

SBEntityRemovalFloatingSlideOutDownwardAnimationSettings : SBEntityRemovalFloatingSlideOutAnimationSettings
  // instance methods
  -[SBEntityRemovalFloatingSlideOutDownwardAnimationSettings setDefaultValues]


SBEntityRemovalDosidoDefaultAnimationSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  double fromViewFinalScale
 @property  double fromViewFinalAlpha
 @property  double fromViewFinalBlurRadius
 @property  double fromViewAlphaAnimationDelay
 @property  SBFFluidBehaviorSettings *fromViewScaleAnimationSettings
 @property  SBFFluidBehaviorSettings *fromViewAlphaAnimationSettings
 @property  double toViewInitialPushInScale
 @property  double toViewScreenInitialAlpha
 @property  double toViewInitialDimmingAlpha
 @property  double toViewInitialBlurProgress
 @property  double toViewScaleAndAlphaResetAnimationDelay
 @property  double toViewDimmingViewFadeOutDelay
 @property  SBFFluidBehaviorSettings *toViewScaleAndAlphaResetAnimationSettings
 @property  SBFFluidBehaviorSettings *toViewWallpaperScaleAnimationSettings
 @property  SBFFluidBehaviorSettings *toViewDimmingViewAlphaAnimationSettings

  // class methods
  +[SBEntityRemovalDosidoDefaultAnimationSettings settingsControllerModule]
  +[SBEntityRemovalDosidoDefaultAnimationSettings _settingsModule]

  // instance methods
  -[SBEntityRemovalDosidoDefaultAnimationSettings setDefaultValues]
  -[SBEntityRemovalDosidoDefaultAnimationSettings .cxx_destruct]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewScaleAndAlphaResetAnimationDelay]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewFinalScale]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewScaleAnimationSettings]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewAlphaAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewAlphaAnimationDelay:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewFinalScale:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewFinalAlpha:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewFinalBlurRadius:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewInitialPushInScale:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewScreenInitialAlpha:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewInitialDimmingAlpha:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewInitialBlurProgress:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewScaleAndAlphaResetAnimationDelay:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewDimmingViewFadeOutDelay:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setFromViewScaleAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewScaleAndAlphaResetAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewScaleAndAlphaResetAnimationSettings]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewWallpaperScaleAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings setToViewDimmingViewAlphaAnimationSettings:]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewFinalAlpha]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewFinalBlurRadius]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewAlphaAnimationDelay]
  -[SBEntityRemovalDosidoDefaultAnimationSettings fromViewAlphaAnimationSettings]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewInitialPushInScale]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewScreenInitialAlpha]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewInitialDimmingAlpha]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewInitialBlurProgress]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewDimmingViewFadeOutDelay]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewWallpaperScaleAnimationSettings]
  -[SBEntityRemovalDosidoDefaultAnimationSettings toViewDimmingViewAlphaAnimationSettings]


SBEntityRemovalDosidoSlideOutAnimationSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  double fromViewSlideOutAnimationDelay
 @property  double fromViewSlideOutHeightOffsetMultiplier
 @property  SBFFluidBehaviorSettings *fromViewSlideOutAnimationSettings
 @property  SBEntityRemovalDosidoDefaultAnimationSettings *defaultAnimationSettings

  // class methods
  +[SBEntityRemovalDosidoSlideOutAnimationSettings settingsControllerModule]

  // instance methods
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setDefaultValues]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings .cxx_destruct]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings fromViewSlideOutAnimationDelay]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings defaultAnimationSettings]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings fromViewSlideOutHeightOffsetMultiplier]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings fromViewSlideOutAnimationSettings]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setDefaultAnimationSettings:]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setFromViewSlideOutHeightOffsetMultiplier:]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setFromViewSlideOutAnimationDelay:]
  -[SBEntityRemovalDosidoSlideOutAnimationSettings setFromViewSlideOutAnimationSettings:]


SBEntityRemovalDosidoSlideOutUpwardAnimationSettings : SBEntityRemovalDosidoSlideOutAnimationSettings

SBEntityRemovalDosidoSlideOutDownwardAnimationSettings : SBEntityRemovalDosidoSlideOutAnimationSettings
  // instance methods
  -[SBEntityRemovalDosidoSlideOutDownwardAnimationSettings setDefaultValues]


SBEntityRemovalAnimationSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  SBEntityRemovalMedusaDefaultAnimationSettings *medusaDeleteIntentAnimationSettings
 @property  SBEntityRemovalMedusaSlideOutUpwardAnimationSettings *medusaCommitIntentAnimationSettings
 @property  SBEntityRemovalMedusaSlideOutDownwardAnimationSettings *medusaDeclineIntentAnimationSettings
 @property  SBEntityRemovalFloatingDefaultAnimationSettings *floatingDeleteIntentAnimationSettings
 @property  SBEntityRemovalFloatingSlideOutUpwardAnimationSettings *floatingCommitIntentAnimationSettings
 @property  SBEntityRemovalFloatingSlideOutDownwardAnimationSettings *floatingDeclineIntentAnimationSettings
 @property  SBEntityRemovalDosidoDefaultAnimationSettings *dosidoDeleteIntentAnimationSettings
 @property  SBEntityRemovalDosidoSlideOutUpwardAnimationSettings *dosidoCommitIntentAnimationSettings
 @property  SBEntityRemovalDosidoSlideOutDownwardAnimationSettings *dosidoDeclineIntentAnimationSettings

  // class methods
  +[SBEntityRemovalAnimationSettings settingsControllerModule]

  // instance methods
  -[SBEntityRemovalAnimationSettings .cxx_destruct]
  -[SBEntityRemovalAnimationSettings floatingDeclineIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings medusaDeleteIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings medusaCommitIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings medusaDeclineIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setMedusaDeleteIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings setMedusaCommitIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings setMedusaDeclineIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings floatingDeleteIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setFloatingDeleteIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings floatingCommitIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setFloatingCommitIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings setFloatingDeclineIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings dosidoDeleteIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setDosidoDeleteIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings dosidoCommitIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setDosidoCommitIntentAnimationSettings:]
  -[SBEntityRemovalAnimationSettings dosidoDeclineIntentAnimationSettings]
  -[SBEntityRemovalAnimationSettings setDosidoDeclineIntentAnimationSettings:]


SBAppStatusBarContentAssertion : BSSimpleAssertion /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  UIStatusBar *statusBar

  // instance methods
  -[SBAppStatusBarContentAssertion setStatusBar:]
  -[SBAppStatusBarContentAssertion statusBar]
  -[SBAppStatusBarContentAssertion .cxx_destruct]
  -[SBAppStatusBarContentAssertion initWithIdentifier:forReason:]
  -[SBAppStatusBarContentAssertion hideStatusBarPartLeading:]


SBInCallBannerPresentableViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBDeviceApplicationSceneHandleObserver, SBBannerManagerPresentable, BSInvalidatable>
 @property  <SBInCallBannerPresentableViewControllerDelegate> *delegate
 @property  {CGSize=dd} preferredBannerContentSize
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  BOOL callConnected
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *requesterIdentifier
 @property  NSString *requestIdentifier
 @property  UIViewController *viewController
 @property  long long presentableType
 @property  BOOL draggingDismissalEnabled
 @property  BOOL draggingInteractionEnabled
 @property  BOOL touchOutsideDismissalEnabled

  // class methods
  +[SBInCallBannerPresentableViewController cornerRadius]
  +[SBInCallBannerPresentableViewController requesterIdentifier]

  // instance methods
  -[SBInCallBannerPresentableViewController viewDidLoad]
  -[SBInCallBannerPresentableViewController handleHomeButtonPress]
  -[SBInCallBannerPresentableViewController handleHeadsetButtonPress:]
  -[SBInCallBannerPresentableViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBInCallBannerPresentableViewController handleLockButtonPress]
  -[SBInCallBannerPresentableViewController shouldDismissForReason:]
  -[SBInCallBannerPresentableViewController handleHomeButtonLongPress]
  -[SBInCallBannerPresentableViewController handleVolumeDownButtonPress]
  -[SBInCallBannerPresentableViewController viewController]
  -[SBInCallBannerPresentableViewController handleVolumeUpButtonPress]
  -[SBInCallBannerPresentableViewController requestIdentifier]
  -[SBInCallBannerPresentableViewController handleHomeButtonDoublePress]
  -[SBInCallBannerPresentableViewController initWithSceneHandle:]
  -[SBInCallBannerPresentableViewController presentableDidAppearAsBanner:]
  -[SBInCallBannerPresentableViewController sceneHandle]
  -[SBInCallBannerPresentableViewController dealloc]
  -[SBInCallBannerPresentableViewController .cxx_destruct]
  -[SBInCallBannerPresentableViewController presentableDidDisappearAsBanner:withReason:]
  -[SBInCallBannerPresentableViewController userInteractionWillBeginForBannerForPresentable:]
  -[SBInCallBannerPresentableViewController userInteractionDidEndForBannerForPresentable:]
  -[SBInCallBannerPresentableViewController presentableWillDisappearAsBanner:withReason:]
  -[SBInCallBannerPresentableViewController isCallConnected]
  -[SBInCallBannerPresentableViewController _canShowWhileLocked]
  -[SBInCallBannerPresentableViewController presentableWillAppearAsBanner:]
  -[SBInCallBannerPresentableViewController setDelegate:]
  -[SBInCallBannerPresentableViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBInCallBannerPresentableViewController invalidate]
  -[SBInCallBannerPresentableViewController viewDidLayoutSubviews]
  -[SBInCallBannerPresentableViewController requesterIdentifier]
  -[SBInCallBannerPresentableViewController delegate]
  -[SBInCallBannerPresentableViewController preferredContentSizeWithPresentationSize:containerSize:]
  -[SBInCallBannerPresentableViewController visualTranslationInCoordinateSpace:]
  -[SBInCallBannerPresentableViewController velocityInCoordinateSpace:]
  -[SBInCallBannerPresentableViewController draggingDidBeginWithGestureProxy:]
  -[SBInCallBannerPresentableViewController isDraggingDismissalEnabled]
  -[SBInCallBannerPresentableViewController isDraggingInteractionEnabled]
  -[SBInCallBannerPresentableViewController isTouchOutsideDismissalEnabled]
  -[SBInCallBannerPresentableViewController _inCallSceneClientSettingsDiffInspector]
  -[SBInCallBannerPresentableViewController _handleTapAction:]
  -[SBInCallBannerPresentableViewController preferredBannerContentSize]
  -[SBInCallBannerPresentableViewController _handlePanGestureProxyAction:]
  -[SBInCallBannerPresentableViewController _callConnectedStatusChanged]
  -[SBInCallBannerPresentableViewController translationInCoordinateSpace:]
  -[SBInCallBannerPresentableViewController setPreferredBannerContentSize:]


SBBluetoothController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBBluetoothController sharedInstance]

  // instance methods
  -[SBBluetoothController noteDevicesChanged]
  -[SBBluetoothController dealloc]
  -[SBBluetoothController batteryLevel]
  -[SBBluetoothController .cxx_destruct]
  -[SBBluetoothController iapDeviceChanged:]
  -[SBBluetoothController stopWatchingForDevices]
  -[SBBluetoothController deviceForAudioRoute:]
  -[SBBluetoothController removeDeviceNotification:]
  -[SBBluetoothController updateTetheringConnected]
  -[SBBluetoothController bluetoothDeviceEndedVoiceControl:]
  -[SBBluetoothController updateBattery]
  -[SBBluetoothController canReportBatteryLevel]
  -[SBBluetoothController bluetoothDeviceInitiatedVoiceControl:]
  -[SBBluetoothController startWatchingForDevices]
  -[SBBluetoothController tetheringConnected]
  -[SBBluetoothController batteryChanged:]
  -[SBBluetoothController firstBTDeviceToReportBatteryLevel]
  -[SBBluetoothController connectionChanged:]
  -[SBBluetoothController addDeviceNotification:]


SBSplashBoardLaunchRequestProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <XBApplicationLaunchRequestProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSplashBoardLaunchRequestProvider .cxx_destruct]
  -[SBSplashBoardLaunchRequestProvider launchRequestsForApplication:withCompatibilityInfo:defaultLaunchRequests:]
  -[SBSplashBoardLaunchRequestProvider initWithApplicationController:displayConfiguration:]


SBSceneWatchdogProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBProcessWatchdogProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSceneWatchdogProvider defaultSceneWatchdogProvider]
  +[SBSceneWatchdogProvider disabledSceneWatchdogProvider]

  // instance methods
  -[SBSceneWatchdogProvider .cxx_destruct]
  -[SBSceneWatchdogProvider _scaleProvisions:byFactor:]
  -[SBSceneWatchdogProvider watchdogPolicyForProcess:eventContext:]
  -[SBSceneWatchdogProvider initAsDisabled:]


SBApplicationServer : FBSServiceFacility /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  <SBApplicationServerMiscDelegate> *miscDelegate
 @property  <SBApplicationServerHarmonyDelegate> *harmonyDelegate
 @property  <SBApplicationServerShortcutDelegate> *shortcutDelegate
 @property  <SBApplicationServerMultiwindowDelegate> *multiwindowDelegate

  // class methods
  +[SBApplicationServer sharedInstance]

  // instance methods
  -[SBApplicationServer miscDelegate]
  -[SBApplicationServer setMiscDelegate:]
  -[SBApplicationServer harmonyDelegate]
  -[SBApplicationServer multiwindowDelegate]
  -[SBApplicationServer dealloc]
  -[SBApplicationServer .cxx_destruct]
  -[SBApplicationServer shortcutDelegate]
  -[SBApplicationServer noteDidReceiveMessage:withType:fromClient:]
  -[SBApplicationServer setHarmonyDelegate:]
  -[SBApplicationServer setShortcutDelegate:]
  -[SBApplicationServer setMultiwindowDelegate:]


_SBPowerAssertionContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *processName
 @property  @? collectionBlock

  // instance methods
  -[_SBPowerAssertionContext setProcessName:]
  -[_SBPowerAssertionContext processName]
  -[_SBPowerAssertionContext .cxx_destruct]
  -[_SBPowerAssertionContext collectionBlock]
  -[_SBPowerAssertionContext setCollectionBlock:]


_SBBatteryLogContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *foregroundApplications
 @property  int capacity
 @property  int voltage
 @property  double usageTimeInSeconds
 @property  double standbyTimeInSeconds
 @property  BOOL hasChargedPartially

  // instance methods
  -[_SBBatteryLogContext setCapacity:]
  -[_SBBatteryLogContext capacity]
  -[_SBBatteryLogContext .cxx_destruct]
  -[_SBBatteryLogContext voltage]
  -[_SBBatteryLogContext hasChargedPartially]
  -[_SBBatteryLogContext setHasChargedPartially:]
  -[_SBBatteryLogContext foregroundApplications]
  -[_SBBatteryLogContext setForegroundApplications:]
  -[_SBBatteryLogContext setVoltage:]
  -[_SBBatteryLogContext usageTimeInSeconds]
  -[_SBBatteryLogContext setUsageTimeInSeconds:]
  -[_SBBatteryLogContext standbyTimeInSeconds]
  -[_SBBatteryLogContext setStandbyTimeInSeconds:]


SBBatteryLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBBatteryLogger saveLowBatteryLogWithCapacity:voltage:completion:]


SBFullScreenSwitcherLiveContentOverlayCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSwitcherLiveContentOverlayCoordinating>
 @property  NSMutableDictionary *appLayoutToLiveContentOverlayContext
 @property  NSMutableArray *visibleAlwaysLiveAppLayouts
 @property  SBMainDisplaySceneLayoutViewController *sceneLayoutViewController
 @property  SBSceneLayoutLiveContentOverlay *sceneLayoutLiveContentOverlay
 @property  BOOL liveContentOverlayUpdatesSuspended
 @property  long long containerOrientation
 @property  <SBSwitcherLiveContentOverlayCoordinatorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator areLiveContentOverlayUpdatesSuspended]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator sceneLayoutViewController]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator noteKeyboardFocusDidChangeToSceneID:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator initWithSceneLayoutViewController:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _canTransitionToOverlayType:forAppLayout:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setLiveContentOverlayUpdatesSuspended:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _existingOverlayTypeForAppLayout:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _addOverlay:withType:forAppLayout:animated:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator appLayoutDidBecomeHidden:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator .cxx_destruct]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator sceneLayoutLiveContentOverlay]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _shouldAnimateAddingSceneLayoutLiveContentOverlayForTransitionContext:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator visibleAlwaysLiveAppLayouts]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator appLayoutToLiveContentOverlayContext]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator animationControllerForTransitionRequest:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setContainerOrientation:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setVisibleAlwaysLiveAppLayouts:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setSceneLayoutLiveContentOverlay:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _updateAlwaysLiveSceneContentOverlays]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _layoutStateContainsElementBlockedForScreenTimeExpiration:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator appLayoutWillBecomeVisible:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setDelegate:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator containerOrientation]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator delegate]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator _removeOverlayForAppLayout:animated:]
  -[SBFullScreenSwitcherLiveContentOverlayCoordinator setAppLayoutToLiveContentOverlayContext:]


SBSceneLayoutLiveContentOverlay : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSwitcherLiveContentOverlay>
 @property  SBMainDisplaySceneLayoutViewController *sceneLayoutViewController
 @property  SBWindowSelfHostWrapper *sceneLayoutWindowHostWrapper
 @property  SBOrientationTransformWrapperView *sceneLayoutOrientationWrapperView
 @property  SBFHomeGrabberSettings *grabberSettings
 @property  long long containerOrientation
 @property  NSMutableDictionary *statusBarAssertions
 @property  long long rasterizationStyle
 @property  BOOL wantsMinificationFilter
 @property  BOOL asynchronousRenderingTemporarilyDisabled
 @property  UIView *contentOverlayView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneLayoutLiveContentOverlay grabberSettings]
  -[SBSceneLayoutLiveContentOverlay handleHomeButtonPress]
  -[SBSceneLayoutLiveContentOverlay handleHeadsetButtonPress:]
  -[SBSceneLayoutLiveContentOverlay handleLockButtonPress]
  -[SBSceneLayoutLiveContentOverlay handleHomeButtonLongPress]
  -[SBSceneLayoutLiveContentOverlay handleVolumeDownButtonPress]
  -[SBSceneLayoutLiveContentOverlay _evaluateAsynchronousRenderingEnablement]
  -[SBSceneLayoutLiveContentOverlay setHomeGrabberHidden:animated:]
  -[SBSceneLayoutLiveContentOverlay handleVolumeUpButtonPress]
  -[SBSceneLayoutLiveContentOverlay handleHomeButtonDoublePress]
  -[SBSceneLayoutLiveContentOverlay sceneLayoutViewController]
  -[SBSceneLayoutLiveContentOverlay noteKeyboardFocusDidChangeToSceneID:]
  -[SBSceneLayoutLiveContentOverlay initWithSceneLayoutViewController:]
  -[SBSceneLayoutLiveContentOverlay dealloc]
  -[SBSceneLayoutLiveContentOverlay setUsesBrightSceneViewBackgroundMaterial:]
  -[SBSceneLayoutLiveContentOverlay .cxx_destruct]
  -[SBSceneLayoutLiveContentOverlay _sceneHandleForHardwareButtonEvents]
  -[SBSceneLayoutLiveContentOverlay setStatusBarAssertions:]
  -[SBSceneLayoutLiveContentOverlay setContainerOrientation:]
  -[SBSceneLayoutLiveContentOverlay statusBarAssertions]
  -[SBSceneLayoutLiveContentOverlay disableAsynchronousRenderingForNextCommit]
  -[SBSceneLayoutLiveContentOverlay asynchronousRenderingTemporarilyDisabled]
  -[SBSceneLayoutLiveContentOverlay rasterizationStyle]
  -[SBSceneLayoutLiveContentOverlay sceneLayoutOrientationWrapperView]
  -[SBSceneLayoutLiveContentOverlay containerOrientation]
  -[SBSceneLayoutLiveContentOverlay sceneLayoutWindowHostWrapper]
  -[SBSceneLayoutLiveContentOverlay setStatusBarHidden:nubViewHidden:animator:]
  -[SBSceneLayoutLiveContentOverlay wantsMinificationFilter]
  -[SBSceneLayoutLiveContentOverlay setRasterizationStyle:withMinificationFilterEnabled:]
  -[SBSceneLayoutLiveContentOverlay contentOverlayView]


SBAnimationWrapperViewLiveContentOverlay : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSwitcherLiveContentOverlay>
 @property  SBSceneLayoutAnimationWrapperView *animationWrapperView
 @property  long long containerOrientation
 @property  UIView *contentOverlayView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAnimationWrapperViewLiveContentOverlay setHomeGrabberHidden:animated:]
  -[SBAnimationWrapperViewLiveContentOverlay noteKeyboardFocusDidChangeToSceneID:]
  -[SBAnimationWrapperViewLiveContentOverlay setUsesBrightSceneViewBackgroundMaterial:]
  -[SBAnimationWrapperViewLiveContentOverlay .cxx_destruct]
  -[SBAnimationWrapperViewLiveContentOverlay setContainerOrientation:]
  -[SBAnimationWrapperViewLiveContentOverlay disableAsynchronousRenderingForNextCommit]
  -[SBAnimationWrapperViewLiveContentOverlay rasterizationStyle]
  -[SBAnimationWrapperViewLiveContentOverlay animationWrapperView]
  -[SBAnimationWrapperViewLiveContentOverlay containerOrientation]
  -[SBAnimationWrapperViewLiveContentOverlay setStatusBarHidden:nubViewHidden:animator:]
  -[SBAnimationWrapperViewLiveContentOverlay initWithAnimationWrapperView:]
  -[SBAnimationWrapperViewLiveContentOverlay setRasterizationStyle:withMinificationFilterEnabled:]
  -[SBAnimationWrapperViewLiveContentOverlay contentOverlayView]


SBDeviceApplicationSceneViewLiveContentOverlay : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable, SBDeviceApplicationSceneHandleObserver, SBSceneViewPresentationConfiguring, SBSwitcherLiveContentOverlay>
 @property  long long containerOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView *contentOverlayView

  // instance methods
  -[SBDeviceApplicationSceneViewLiveContentOverlay setHomeGrabberHidden:animated:]
  -[SBDeviceApplicationSceneViewLiveContentOverlay noteKeyboardFocusDidChangeToSceneID:]
  -[SBDeviceApplicationSceneViewLiveContentOverlay sceneViewPresentationPriority:]
  -[SBDeviceApplicationSceneViewLiveContentOverlay setUsesBrightSceneViewBackgroundMaterial:]
  -[SBDeviceApplicationSceneViewLiveContentOverlay .cxx_destruct]
  -[SBDeviceApplicationSceneViewLiveContentOverlay sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationSceneViewLiveContentOverlay setContainerOrientation:]
  -[SBDeviceApplicationSceneViewLiveContentOverlay disableAsynchronousRenderingForNextCommit]
  -[SBDeviceApplicationSceneViewLiveContentOverlay rasterizationStyle]
  -[SBDeviceApplicationSceneViewLiveContentOverlay sceneViewPresentationIdentifier:]
  -[SBDeviceApplicationSceneViewLiveContentOverlay containerOrientation]
  -[SBDeviceApplicationSceneViewLiveContentOverlay setStatusBarHidden:nubViewHidden:animator:]
  -[SBDeviceApplicationSceneViewLiveContentOverlay invalidate]
  -[SBDeviceApplicationSceneViewLiveContentOverlay setRasterizationStyle:withMinificationFilterEnabled:]
  -[SBDeviceApplicationSceneViewLiveContentOverlay contentOverlayView]
  -[SBDeviceApplicationSceneViewLiveContentOverlay initWithSceneHandle:referenceSize:containerOrientation:]


_SBFullScreenSwitcherLiveContentOverlayContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long overlayType
 @property  <SBSwitcherLiveContentOverlay> *overlay

  // instance methods
  -[_SBFullScreenSwitcherLiveContentOverlayContext overlay]
  -[_SBFullScreenSwitcherLiveContentOverlayContext .cxx_destruct]
  -[_SBFullScreenSwitcherLiveContentOverlayContext initWithOverlay:overlayType:]
  -[_SBFullScreenSwitcherLiveContentOverlayContext overlayType]


SBSwitcherDemoFilteringController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *hiddenApplicationBundleIDs

  // instance methods
  -[SBSwitcherDemoFilteringController .cxx_destruct]
  -[SBSwitcherDemoFilteringController removeObserver:]
  -[SBSwitcherDemoFilteringController addObserver:]
  -[SBSwitcherDemoFilteringController setHiddenApplicationBundleIDs:]
  -[SBSwitcherDemoFilteringController hiddenApplicationBundleIDs]


SBGestureRootSwitcherModifier : SBSwitcherModifier
 @property  SBAppLayout *selectedAppLayout
 @property  long long currentEnvironmentMode

  // instance methods
  -[SBGestureRootSwitcherModifier handleMainTransitionEvent:]
  -[SBGestureRootSwitcherModifier .cxx_destruct]
  -[SBGestureRootSwitcherModifier handleEvent:]
  -[SBGestureRootSwitcherModifier handleRemovalEvent:]
  -[SBGestureRootSwitcherModifier gestureType]
  -[SBGestureRootSwitcherModifier selectedAppLayout]
  -[SBGestureRootSwitcherModifier handleGestureEvent:]
  -[SBGestureRootSwitcherModifier _transitionModifier]
  -[SBGestureRootSwitcherModifier _gestureModifier]
  -[SBGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBGestureRootSwitcherModifier initWithStartingEnvironmentMode:]
  -[SBGestureRootSwitcherModifier completesWhenChildrenComplete]
  -[SBGestureRootSwitcherModifier currentEnvironmentMode]


SBPreemptAnimationSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  unsigned long options

  // instance methods
  -[SBPreemptAnimationSwitcherEventResponse initWithOptions:]
  -[SBPreemptAnimationSwitcherEventResponse options]
  -[SBPreemptAnimationSwitcherEventResponse type]


_SBFakeBlurView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <_SBFakeBlur, SBWallpaperReachabilityObserving>
 @property  long long variant
 @property  BOOL fullscreen
 @property  SBWallpaperViewController *wallpaperViewController
 @property  <SBWallpaperReachabilityCoordinating> *reachabilityCoordinator
 @property  <_SBFakeBlurObserver> *observer
 @property  double zoomScale
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SBFakeBlurView _imageForStyle:withSource:overrideTraitCollection:]
  +[_SBFakeBlurView _imageForStyle:withSource:]

  // instance methods
  -[_SBFakeBlurView offsetWallpaperBy:]
  -[_SBFakeBlurView setFullscreen:]
  -[_SBFakeBlurView handleReachabilityYOffsetDidChange]
  -[_SBFakeBlurView updateImageWithSource:]
  -[_SBFakeBlurView setZoomScale:]
  -[_SBFakeBlurView isFullscreen]
  -[_SBFakeBlurView didMoveToWindow]
  -[_SBFakeBlurView reconfigureWithSource:]
  -[_SBFakeBlurView zoomScale]
  -[_SBFakeBlurView transformOptions]
  -[_SBFakeBlurView reachabilityCoordinator]
  -[_SBFakeBlurView wallpaperViewController]
  -[_SBFakeBlurView effectiveStyle]
  -[_SBFakeBlurView setTransformOptions:]
  -[_SBFakeBlurView dealloc]
  -[_SBFakeBlurView .cxx_destruct]
  -[_SBFakeBlurView initWithVariant:wallpaperViewController:transformOptions:reachabilityCoordinator:]
  -[_SBFakeBlurView variant]
  -[_SBFakeBlurView willMoveToWindow:]
  -[_SBFakeBlurView requestStyle:]
  -[_SBFakeBlurView traitCollectionDidChange:]
  -[_SBFakeBlurView setObserver:]
  -[_SBFakeBlurView rotateToInterfaceOrientation:]
  -[_SBFakeBlurView observer]
  -[_SBFakeBlurView layoutSubviews]


_SBAccessibilityTintView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <_SBFakeBlur, SBWallpaperObserver>
 @property  <_SBFakeBlurObserver> *observer
 @property  BOOL fullscreen
 @property  SBWallpaperViewController *wallpaperViewController
 @property  double zoomScale
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBAccessibilityTintView offsetWallpaperBy:]
  -[_SBAccessibilityTintView setFullscreen:]
  -[_SBAccessibilityTintView wallpaperLegibilitySettingsDidChange:forVariant:]
  -[_SBAccessibilityTintView setZoomScale:]
  -[_SBAccessibilityTintView isFullscreen]
  -[_SBAccessibilityTintView didMoveToWindow]
  -[_SBAccessibilityTintView wallpaperDidChangeForVariant:]
  -[_SBAccessibilityTintView zoomScale]
  -[_SBAccessibilityTintView transformOptions]
  -[_SBAccessibilityTintView didMoveToSuperview]
  -[_SBAccessibilityTintView wallpaperViewController]
  -[_SBAccessibilityTintView effectiveStyle]
  -[_SBAccessibilityTintView setTransformOptions:]
  -[_SBAccessibilityTintView dealloc]
  -[_SBAccessibilityTintView .cxx_destruct]
  -[_SBAccessibilityTintView requestStyle:]
  -[_SBAccessibilityTintView _updateBackgroundColor]
  -[_SBAccessibilityTintView setObserver:]
  -[_SBAccessibilityTintView observer]
  -[_SBAccessibilityTintView initWithVariant:wallpaperViewController:]


SBWallpaperStyleInfo : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBWallpaperEffectViewBase *wallpaperEffectView
 @property  {?=qqd} styleTransitionState
 @property  long long highestValidPriority
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWallpaperStyleInfo priorityInfoForPriority:]
  -[SBWallpaperStyleInfo init]
  -[SBWallpaperStyleInfo removePriorityInfoForPriority:]
  -[SBWallpaperStyleInfo .cxx_destruct]
  -[SBWallpaperStyleInfo setStyleTransitionState:]
  -[SBWallpaperStyleInfo setWallpaperEffectView:]
  -[SBWallpaperStyleInfo succinctDescriptionBuilder]
  -[SBWallpaperStyleInfo enumerateValidPrioritiesUsingBlock:]
  -[SBWallpaperStyleInfo succinctDescription]
  -[SBWallpaperStyleInfo wallpaperEffectView]
  -[SBWallpaperStyleInfo styleTransitionState]
  -[SBWallpaperStyleInfo setPriorityInfo:forPriority:]
  -[SBWallpaperStyleInfo highestValidPriority]
  -[SBWallpaperStyleInfo descriptionWithMultilinePrefix:]
  -[SBWallpaperStyleInfo descriptionBuilderWithMultilinePrefix:]


SBCameraHardwareButtonDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBCameraHardwareButtonDomain domainName]
  +[SBCameraHardwareButtonDomain rootSettings]
  +[SBCameraHardwareButtonDomain rootSettingsClass]
  +[SBCameraHardwareButtonDomain domainGroupName]


SBChronoApplicationProcessStateObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBHIconManager *iconManager
 @property  CHSApplicationProcessStateChangeConsumer *chronoConsumer
 @property  NSObject<OS_dispatch_queue> *queue

  // instance methods
  -[SBChronoApplicationProcessStateObserver initWithIconManager:]
  -[SBChronoApplicationProcessStateObserver iconManager]
  -[SBChronoApplicationProcessStateObserver init]
  -[SBChronoApplicationProcessStateObserver .cxx_destruct]
  -[SBChronoApplicationProcessStateObserver setQueue:]
  -[SBChronoApplicationProcessStateObserver queue]
  -[SBChronoApplicationProcessStateObserver chronoConsumer]
  -[SBChronoApplicationProcessStateObserver applicationProcessStateDidChange:]
  -[SBChronoApplicationProcessStateObserver _queue_handleApplicationProcessStateDidChangeIfNecessary:]


SBAccessibilityHardwareButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonInteraction>
 @property  unsigned long buttonType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAccessibilityHardwareButtonInteraction hardwareButtonInteractionForLockButton]
  +[SBAccessibilityHardwareButtonInteraction hardwareButtonInteractionForHomeButton]

  // instance methods
  -[SBAccessibilityHardwareButtonInteraction buttonType]
  -[SBAccessibilityHardwareButtonInteraction dealloc]
  -[SBAccessibilityHardwareButtonInteraction hardwareButtonGestureParameters]
  -[SBAccessibilityHardwareButtonInteraction consumeTriplePressUp]
  -[SBAccessibilityHardwareButtonInteraction initWithButtonType:]
  -[SBAccessibilityHardwareButtonInteraction _registerAsNotificationObserver]
  -[SBAccessibilityHardwareButtonInteraction _unregisterAsNotificationObserver]
  -[SBAccessibilityHardwareButtonInteraction _supportsTripleClick]
  -[SBAccessibilityHardwareButtonInteraction _downToDownInterval]
  -[SBAccessibilityHardwareButtonInteraction _presentMigrationAlertIfNeeded]
  -[SBAccessibilityHardwareButtonInteraction _speedChangedNotificationName]
  -[SBAccessibilityHardwareButtonInteraction _accessibilityPrefsDidChange]


SBTestAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  NSString *title
 @property  BOOL shouldShowInLockScreen
 @property  BOOL forcesModalAlertAppearance
 @property  BOOL behavesSuperModally
 @property  BOOL allowMenuButtonDismissal
 @property  BOOL allowLockScreenDismissal
 @property  BOOL reappearsAfterUnlock
 @property  BOOL reappearsAfterLock

  // class methods
  +[SBTestAlertItem alertItemWithShowInLockScreen:forcesModal:superModal:]

  // instance methods
  -[SBTestAlertItem forcesModalAlertAppearance]
  -[SBTestAlertItem reappearsAfterLock]
  -[SBTestAlertItem allowMenuButtonDismissal]
  -[SBTestAlertItem .cxx_destruct]
  -[SBTestAlertItem setTitle:]
  -[SBTestAlertItem title]
  -[SBTestAlertItem reappearsAfterUnlock]
  -[SBTestAlertItem behavesSuperModally]
  -[SBTestAlertItem shouldShowInLockScreen]
  -[SBTestAlertItem allowLockScreenDismissal]
  -[SBTestAlertItem configure:requirePasscodeForActions:]
  -[SBTestAlertItem setReappearsAfterLock:]
  -[SBTestAlertItem setReappearsAfterUnlock:]
  -[SBTestAlertItem setShouldShowInLockScreen:]
  -[SBTestAlertItem setForcesModalAlertAppearance:]
  -[SBTestAlertItem setBehavesSuperModally:]
  -[SBTestAlertItem setAllowMenuButtonDismissal:]
  -[SBTestAlertItem setAllowLockScreenDismissal:]


SBHomeGestureExclusionTrapezoidSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL showExclusionTrapezoidDebugView
 @property  BOOL landscapeTrapezoidEnabled
 @property  BOOL allowHorizontalSwipesOutsideLandscapeTrapezoid
 @property  double landscapeTrapezoidHeight
 @property  double landscapeTrapezoidBaseHeight
 @property  double landscapeTrapezoidAdjacentXDistanceFromEdge
 @property  double landscapeTrapezoidOpposingXDistanceFromEdge
 @property  BOOL portraitTrapezoidEnabled
 @property  BOOL portraitTrapezoidEnabledOnlyForKeyboards
 @property  BOOL allowHorizontalSwipesOutsidePortraitTrapezoid
 @property  double portraitTrapezoidHeight
 @property  double portraitTrapezoidBaseHeight
 @property  double portraitTrapezoidAdjacentXDistanceFromEdge
 @property  double portraitTrapezoidOpposingXDistanceFromEdge

  // class methods
  +[SBHomeGestureExclusionTrapezoidSettings settingsControllerModule]

  // instance methods
  -[SBHomeGestureExclusionTrapezoidSettings setDefaultValues]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidAdjacentXDistanceFromEdge]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidBaseHeight]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidOpposingXDistanceFromEdge]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidAdjacentXDistanceFromEdge:]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidEnabled:]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidOpposingXDistanceFromEdge]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidEnabledOnlyForKeyboards:]
  -[SBHomeGestureExclusionTrapezoidSettings setAllowHorizontalSwipesOutsideLandscapeTrapezoid:]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidOpposingXDistanceFromEdge:]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidHeight]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidBaseHeight]
  -[SBHomeGestureExclusionTrapezoidSettings showExclusionTrapezoidDebugView]
  -[SBHomeGestureExclusionTrapezoidSettings allowHorizontalSwipesOutsideLandscapeTrapezoid]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidHeight:]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidBaseHeight:]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidAdjacentXDistanceFromEdge]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidEnabled:]
  -[SBHomeGestureExclusionTrapezoidSettings setShowExclusionTrapezoidDebugView:]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidBaseHeight:]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidOpposingXDistanceFromEdge:]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidEnabledOnlyForKeyboards]
  -[SBHomeGestureExclusionTrapezoidSettings setPortraitTrapezoidHeight:]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidHeight]
  -[SBHomeGestureExclusionTrapezoidSettings landscapeTrapezoidEnabled]
  -[SBHomeGestureExclusionTrapezoidSettings allowHorizontalSwipesOutsidePortraitTrapezoid]
  -[SBHomeGestureExclusionTrapezoidSettings setLandscapeTrapezoidAdjacentXDistanceFromEdge:]
  -[SBHomeGestureExclusionTrapezoidSettings setAllowHorizontalSwipesOutsidePortraitTrapezoid:]
  -[SBHomeGestureExclusionTrapezoidSettings portraitTrapezoidEnabled]


SBSwitcherAccessoryLayoutElement : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSwitcherLayoutElementProviding>
 @property  unsigned long type
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherAccessoryLayoutElement switcherLayoutElementType]
  -[SBSwitcherAccessoryLayoutElement initWithType:]
  -[SBSwitcherAccessoryLayoutElement type]


SBMediaController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <MPAVRoutingControllerDelegate, FBSDisplayObserving, SBAVSystemControllerCacheObserver>
 @property  int nowPlayingProcessPID
 @property  SBApplication *nowPlayingApplication
 @property  NSDate *lastActivityDate
 @property  BOOL suppressHUD
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMediaController sharedInstance]
  +[SBMediaController applicationCanBeConsideredNowPlaying:]
  +[SBMediaController sendResetPlaybackTimeoutCommand]

  // instance methods
  -[SBMediaController setNowPlayingProcessPID:]
  -[SBMediaController wirelessDisplayRouteIsPicked]
  -[SBMediaController _registerForNotifications]
  -[SBMediaController isPlaying]
  -[SBMediaController _mediaRemoteNowPlayingInfoDidChange:]
  -[SBMediaController init]
  -[SBMediaController _applicationActivityStatusDidChange:]
  -[SBMediaController _setNowPlayingApplication:]
  -[SBMediaController _unregisterForNotifications]
  -[SBMediaController cancelVolumeEvent]
  -[SBMediaController hasTrack]
  -[SBMediaController _nowPlayingAppDidExit:]
  -[SBMediaController cache:didUpdateAirplayDisplayActive:]
  -[SBMediaController dealloc]
  -[SBMediaController addTrackToWishListForEventSource:]
  -[SBMediaController _notifyThatScreenSharingChanged]
  -[SBMediaController routingControllerAvailableRoutesDidChange:]
  -[SBMediaController .cxx_destruct]
  -[SBMediaController endSeek:eventSource:]
  -[SBMediaController isScreenSharing]
  -[SBMediaController _clearScreenSharingStatusBarStyleOverride]
  -[SBMediaController toggleShuffleForEventSource:]
  -[SBMediaController banTrackForEventSource:]
  -[SBMediaController handsetRouteIsSelected]
  -[SBMediaController nowPlayingProcessPID]
  -[SBMediaController nowPlayingApplication]
  -[SBMediaController _authenticationStateChanged:]
  -[SBMediaController _startVideoOutStatusBarStyleOverride]
  -[SBMediaController pauseForEventSource:]
  -[SBMediaController displayMonitor:didConnectIdentity:withConfiguration:]
  -[SBMediaController playForEventSource:]
  -[SBMediaController _mediaRemoteNowPlayingApplicationIsPlayingDidChange:]
  -[SBMediaController _updateAVRoutes]
  -[SBMediaController _sendMediaCommand:options:]
  -[SBMediaController routeOtherThanHandsetIsAvailable]
  -[SBMediaController isLastTrack]
  -[SBMediaController isApplicationActivityActive]
  -[SBMediaController lastActivityDate]
  -[SBMediaController isPaused]
  -[SBMediaController _updateDisplayMonitorState]
  -[SBMediaController setSuppressHUD:]
  -[SBMediaController changeTrack:eventSource:]
  -[SBMediaController _mediaRemoteNowPlayingApplicationDidChange:]
  -[SBMediaController nameOfPickedRoute]
  -[SBMediaController likeTrackForEventSource:]
  -[SBMediaController setPlaybackSpeed:eventSource:]
  -[SBMediaController _updateLastRecentActivityDate]
  -[SBMediaController beginSeek:eventSource:]
  -[SBMediaController setNowPlayingInfo:]
  -[SBMediaController isFirstTrack]
  -[SBMediaController togglePlayPauseForEventSource:]
  -[SBMediaController cacheDidRebuildAfterServerDeath:]
  -[SBMediaController updateScreenSharingStatusBarStyleOverride]
  -[SBMediaController _clearVideoOutStatusBarStyleOverride]
  -[SBMediaController volumeControlIsAvailable]
  -[SBMediaController _updateScreenSharingStatusBarStyleOverrideSuppressionPreference:]
  -[SBMediaController toggleRepeatForEventSource:]
  -[SBMediaController _displayMonitorHasAConnectedExternalIdentity]
  -[SBMediaController suppressHUD]
  -[SBMediaController _nowPlayingInfo]
  -[SBMediaController displayMonitor:willDisconnectIdentity:]
  -[SBMediaController stopForEventSource:]


SBDeviceApplicationSceneEntity : SBApplicationSceneEntity
 @property  SBDeviceApplicationSceneHandle *sceneHandle

  // class methods
  +[SBDeviceApplicationSceneEntity defaultEntityWithApplicationForMainDisplay:]
  +[SBDeviceApplicationSceneEntity defaultEntityWithApplicationForMainDisplay:targetContentIdentifier:]
  +[SBDeviceApplicationSceneEntity newEntityWithApplicationForMainDisplay:]
  +[SBDeviceApplicationSceneEntity entityWithApplicationForMainDisplay:withScenePersistenceIdentifier:]

  // instance methods
  -[SBDeviceApplicationSceneEntity _setMainDisplayPreferredInterfaceOrientation:]
  -[SBDeviceApplicationSceneEntity deviceApplicationSceneEntity]
  -[SBDeviceApplicationSceneEntity isDeviceApplicationSceneEntity]
  -[SBDeviceApplicationSceneEntity _supportsLayoutRole:]
  -[SBDeviceApplicationSceneEntity wantsExclusiveForeground]
  -[SBDeviceApplicationSceneEntity supportsPresentationAtAnySize]
  -[SBDeviceApplicationSceneEntity _mainDisplayPreferredInterfaceOrientation]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainDisplay:]
  -[SBDeviceApplicationSceneEntity initWithApplication:uniqueIdentifier:targetContentIdentifier:sceneHandleProvider:displayIdentity:]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainSecureDisplay:]
  -[SBDeviceApplicationSceneEntity viewControllerClass]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainDisplay:uniqueIdentifier:]
  -[SBDeviceApplicationSceneEntity initWithApplicationSceneHandle:]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainDisplay:targetContentIdentifier:]
  -[SBDeviceApplicationSceneEntity initWithApplicationForMainDisplay:generatingNewPrimarySceneIfRequired:]


SBNCNotificationDispatcherDelegate : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NCNotificationDispatcherDelegate>
 @property  SBNotificationBannerDestination *bannerDestination
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNCNotificationDispatcherDelegate .cxx_destruct]
  -[SBNCNotificationDispatcherDelegate bannerDestination]
  -[SBNCNotificationDispatcherDelegate _requestAuthenticationWithCompletion:]
  -[SBNCNotificationDispatcherDelegate dispatcher:requestPermissionToExecuteAction:forDestination:notificationRequest:withParameters:completionBlock:]
  -[SBNCNotificationDispatcherDelegate dispatcher:willExecuteAction:forDestination:notificationRequest:requestAuthentication:withParameters:completionBlock:]
  -[SBNCNotificationDispatcherDelegate dispatcher:didExecuteAction:forNotificationRequest:]
  -[SBNCNotificationDispatcherDelegate dispatcher:launchForegroundApplicationForAction:notificationRequest:fromDestination:withParameters:]
  -[SBNCNotificationDispatcherDelegate dispatcher:launchBackgroundApplicationForAction:notificationRequest:fromDestination:withParameters:]
  -[SBNCNotificationDispatcherDelegate setBannerDestination:]


SBWeatherApplicationIcon : SBApplicationIcon
  // instance methods
  -[SBWeatherApplicationIcon localeChanged]


SBTestAutomationService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemServiceServerTestAutomationDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTestAutomationService init]
  -[SBTestAutomationService .cxx_destruct]
  -[SBTestAutomationService _authenticateClient:]
  -[SBTestAutomationService systemServiceServer:suspendAllDisplaysForClient:]
  -[SBTestAutomationService systemServiceServer:client:setAlertsEnabled:]
  -[SBTestAutomationService systemServiceServer:client:setIdleTimerEnabled:]
  -[SBTestAutomationService systemServiceServer:client:setOrientationLockEnabled:]
  -[SBTestAutomationService systemServiceServer:client:setMallocStackLoggingEnabled:]
  -[SBTestAutomationService systemServiceServer:client:setHiddenFeaturesEnabled:]
  -[SBTestAutomationService systemServiceServer:client:resetToHomeScreenAnimated:]
  -[SBTestAutomationService systemServiceServer:client:port:acquireHUDHiddenAssertionForIdentifier:]
  -[SBTestAutomationService systemServiceServer:client:setApplicationBundleIdentifier:blockedForScreenTime:]
  -[SBTestAutomationService systemServiceServer:client:setTestRunnerRecoveryApplicationBundleIdentifier:]
  -[SBTestAutomationService systemServiceServer:client:countScenesForBundleIdentifier:withCompletion:]
  -[SBTestAutomationService systemServiceServer:client:stashSwitcherModelToPath:]
  -[SBTestAutomationService systemServiceServer:client:loadStashedSwitcherModelFromPath:]
  -[SBTestAutomationService systemServiceServer:addWidgetsToEachPageForClient:]
  -[SBTestAutomationService systemServiceServer:client:addWidgetWithIdentifier:toPage:withSizing:]


SBBookmarkIcon : SBLeafIcon /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
 @property  SBBookmark *bookmark
 @property  UIWebClip *webClip
 @property  NSURL *launchURL
 @property  BOOL displaysShareBookmarkShortcutItem
 @property  BOOL representsWebApp

  // instance methods
  -[SBBookmarkIcon copyWithZone:]
  -[SBBookmarkIcon bookmark]
  -[SBBookmarkIcon setBookmark:]
  -[SBBookmarkIcon .cxx_destruct]
  -[SBBookmarkIcon canBeAddedToSubfolder]
  -[SBBookmarkIcon canBeAddedToMultiItemDrag]
  -[SBBookmarkIcon isBookmarkIcon]
  -[SBBookmarkIcon representedSceneIdentifier]
  -[SBBookmarkIcon folderTitleOptions]
  -[SBBookmarkIcon iTunesCategoriesOrderedByRelevancy]
  -[SBBookmarkIcon webClip]
  -[SBBookmarkIcon displaysShareBookmarkShortcutItem]
  -[SBBookmarkIcon uninstallAlertBody]
  -[SBBookmarkIcon folderFallbackTitle]
  -[SBBookmarkIcon uninstallAlertTitle]
  -[SBBookmarkIcon draggingUserActivity]
  -[SBBookmarkIcon initWithBookmark:]
  -[SBBookmarkIcon _sbhIconLibraryOverrideCollationSectionTitle]
  -[SBBookmarkIcon launchURL]
  -[SBBookmarkIcon applicationToLaunch]
  -[SBBookmarkIcon representsWebApp]


SBMinimumViableSwitcherTableViewController : UITableViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBSwitcherContentViewControlling>
 @property  <SBSwitcherContentViewControllerDelegate> *delegate
 @property  <SBSwitcherContentViewControllerDataSource> *dataSource
 @property  SBBestAppSuggestion *bestAppSuggestion
 @property  BOOL showModifierTimeline
 @property  long long contentOrientation
 @property  BOOL liveContentRasterizationDisabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL canInterruptActiveTransition
 @property  BSAnimationSettings *defaultTransitionAnimationSettings

  // instance methods
  -[SBMinimumViableSwitcherTableViewController isShowingModifierTimeline]
  -[SBMinimumViableSwitcherTableViewController viewDidLoad]
  -[SBMinimumViableSwitcherTableViewController handleHomeButtonPress]
  -[SBMinimumViableSwitcherTableViewController handleHeadsetButtonPress:]
  -[SBMinimumViableSwitcherTableViewController setBestAppSuggestion:]
  -[SBMinimumViableSwitcherTableViewController defaultTransitionAnimationSettings]
  -[SBMinimumViableSwitcherTableViewController bestAppSuggestion]
  -[SBMinimumViableSwitcherTableViewController handleLockButtonPress]
  -[SBMinimumViableSwitcherTableViewController handleHomeButtonLongPress]
  -[SBMinimumViableSwitcherTableViewController handleVolumeDownButtonPress]
  -[SBMinimumViableSwitcherTableViewController handleVolumeUpButtonPress]
  -[SBMinimumViableSwitcherTableViewController handleHomeButtonDoublePress]
  -[SBMinimumViableSwitcherTableViewController setDataSource:]
  -[SBMinimumViableSwitcherTableViewController isWindowVisible]
  -[SBMinimumViableSwitcherTableViewController shouldAddAppLayoutToFront:forTransitionWithContext:transitionCompleted:]
  -[SBMinimumViableSwitcherTableViewController isUserInteractionEnabled]
  -[SBMinimumViableSwitcherTableViewController minimumHomeScreenScale]
  -[SBMinimumViableSwitcherTableViewController failMultitaskingGesturesForReason:]
  -[SBMinimumViableSwitcherTableViewController noteKeyboardFocusDidChangeToSceneID:]
  -[SBMinimumViableSwitcherTableViewController canInterruptActiveTransition]
  -[SBMinimumViableSwitcherTableViewController tableView:commitEditingStyle:forRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController shouldAcceleratedHomeButtonPressBegin]
  -[SBMinimumViableSwitcherTableViewController tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController setShowModifierTimeline:]
  -[SBMinimumViableSwitcherTableViewController tableView:numberOfRowsInSection:]
  -[SBMinimumViableSwitcherTableViewController iconForAppLayout:]
  -[SBMinimumViableSwitcherTableViewController setLiveContentRasterizationDisabled:]
  -[SBMinimumViableSwitcherTableViewController tableView:didSelectRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController tableView:canEditRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController switcherCardScale]
  -[SBMinimumViableSwitcherTableViewController .cxx_destruct]
  -[SBMinimumViableSwitcherTableViewController isStatusBarHiddenForAppLayout:]
  -[SBMinimumViableSwitcherTableViewController noteModelDidMutateForRemovalOfAppLayout:forReason:animated:]
  -[SBMinimumViableSwitcherTableViewController noteAppLayoutsDidChange]
  -[SBMinimumViableSwitcherTableViewController performAnimatedInsertionOfAppLayouts:atIndexes:completion:]
  -[SBMinimumViableSwitcherTableViewController shouldAnimateInsertionOfAppLayouts:atIndexes:]
  -[SBMinimumViableSwitcherTableViewController noteModelDidMutateForInsertionOfAppLayouts:atIndexes:willAnimate:]
  -[SBMinimumViableSwitcherTableViewController acquiredViewController:forTransientOverlayAppLayout:]
  -[SBMinimumViableSwitcherTableViewController tableView:cellForRowAtIndexPath:]
  -[SBMinimumViableSwitcherTableViewController animationControllerForTransitionRequest:]
  -[SBMinimumViableSwitcherTableViewController shouldAnimateRemovalOfAppLayout:forReason:]
  -[SBMinimumViableSwitcherTableViewController numberOfSectionsInTableView:]
  -[SBMinimumViableSwitcherTableViewController contentOrientation]
  -[SBMinimumViableSwitcherTableViewController isLiveContentRasterizationDisabled]
  -[SBMinimumViableSwitcherTableViewController performAnimatedRemovalOfAppLayout:forReason:completion:]
  -[SBMinimumViableSwitcherTableViewController dataSource]
  -[SBMinimumViableSwitcherTableViewController handleGestureDidBegin:]
  -[SBMinimumViableSwitcherTableViewController shouldRubberbandFullScreenHomeGrabberView]
  -[SBMinimumViableSwitcherTableViewController setContentOrientation:]
  -[SBMinimumViableSwitcherTableViewController relinquishTransientOverlayViewController:]
  -[SBMinimumViableSwitcherTableViewController snapshotScaleForSceneHandle:]
  -[SBMinimumViableSwitcherTableViewController prepareAnimatedInsertionOfAppLayouts:atIndexes:]
  -[SBMinimumViableSwitcherTableViewController respondToInAppStatusBarRequestedHiddenUpdateAnimated:]
  -[SBMinimumViableSwitcherTableViewController setDelegate:]
  -[SBMinimumViableSwitcherTableViewController performTransitionWithContext:animated:alongsideAnimationHandler:completion:]
  -[SBMinimumViableSwitcherTableViewController prepareAnimatedRemovalOfAppLayout:forReason:]
  -[SBMinimumViableSwitcherTableViewController handleGestureDidUpdate:]
  -[SBMinimumViableSwitcherTableViewController delegate]
  -[SBMinimumViableSwitcherTableViewController handleGestureDidEnd:]
  -[SBMinimumViableSwitcherTableViewController _appLayouts]


SBDeviceApplicationSceneStatusBarStateProvider_Base : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationSceneStatusBarDescribingInternal, SBDeviceApplicationSceneStatusBarStateProviderBaseSubclassesMustOverride, SBApplicationSceneStatusBarDescribing>
 @property  long long statusBarStyle
 @property  BOOL statusBarHidden
 @property  double statusBarAlpha
 @property  long long statusBarOrientation
 @property  int statusBarStyleOverridesToSuppress
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} statusBarAvoidanceFrame
 @property  BOOL sceneWantsDeviceOrientationEventsEnabled
 @property  NSString *statusBarSceneIdentifier
 @property  _UIStatusBarData *overlayStatusBarData
 @property  SBDeviceApplicationSceneStatusBarBreadcrumbProvider *breadcrumbProvider
 @property  SBDeviceApplicationSceneHandle *classicApplicationSceneHandleIfExists
 @property  FBScene *sceneToHandleStatusBarTapIfExists
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarSceneIdentifier]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarOrientation]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarStyle]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _fallbackInterfaceOrientation]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarHiddenGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base overlayStatusBarData]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base sceneToHandleStatusBarTapIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarAvoidanceFrame]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base init]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarAlpha]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _allObservers]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base enumerateObserversWithBlock:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base .cxx_destruct]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base sceneWantsDeviceOrientationEventsEnabled]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base succinctDescriptionBuilder]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarHidden]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarStyle]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarOrientationGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base SB_conformsToSBApplicationSceneStatusBarDescribing]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _suppressInheritedPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base succinctDescription]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarStyleForPartWithIdentifier:suppressingInherited:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarStyleOverridesToSuppress]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarStyleForPartWithIdentifier:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base classicApplicationSceneHandleIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base breadcrumbProvider]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarAppearsOutsideOfAJailedApp]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _observerRecords]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base _statusBarAlpha]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base descriptionWithMultilinePrefix:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base descriptionBuilderWithMultilinePrefix:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base statusBarPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base addStatusBarObserver:]
  -[SBDeviceApplicationSceneStatusBarStateProvider_Base removeStatusBarObserver:]


SBIconContentView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  long long orientation
 @property  UIView *contentView

  // instance methods
  -[SBIconContentView initWithFrame:]
  -[SBIconContentView contentView]
  -[SBIconContentView .cxx_destruct]
  -[SBIconContentView setContentView:]
  -[SBIconContentView setOrientation:]
  -[SBIconContentView initWithOrientation:]
  -[SBIconContentView orientation]
  -[SBIconContentView layoutSubviews]


SBVODController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBVODController sharedInstance]

  // instance methods
  -[SBVODController init]
  -[SBVODController dealloc]
  -[SBVODController _launchIPodIfNecessary]


SBUIBlockAnimationController : SBUIWorkspaceAnimationController
  // instance methods
  -[SBUIBlockAnimationController initWithWorkspaceTransitionRequest:animationSettings:animationBlock:]
  -[SBUIBlockAnimationController _didComplete]
  -[SBUIBlockAnimationController .cxx_destruct]
  -[SBUIBlockAnimationController animationSettings]
  -[SBUIBlockAnimationController _startAnimation]
  -[SBUIBlockAnimationController initWithWorkspaceTransitionRequest:]


SBLockScreenPlugin : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBProcessObserver, SBLockScreenPluginAgent, SBLockScreenPluginController>
 @property  <SBLockScreenPluginDelegate> *delegate
 @property  NSString *name
 @property  <SBLockScreenPluginController> *controller
 @property  UIViewController<SBLockScreenPluginViewController> *viewController
 @property  SBLockScreenPluginAppearanceContext *appearance
 @property  SBLockScreenPluginAction *unlockAction
 @property  CSAppearance *coverSheetAppearance
 @property  CSBehavior *coverSheetBehavior
 @property  SBLockOverlayContext *overlay
 @property  @? auxiliaryActivationAnimationBlock
 @property  @? auxiliaryDeactivationAnimationBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBLockScreenPluginAgent> *pluginAgent
 @property  long long pluginPriority
 @property  UIViewController<SBLockScreenPluginViewController> *pluginViewController
 @property  <SBLockScreenPluginAppearance> *pluginAppearance
 @property  SBLockScreenPluginAction *pluginUnlockAction
 @property  _UILegibilitySettings *legibilitySettings

  // class methods
  +[SBLockScreenPlugin _pluginBundleForPluginWithName:]
  +[SBLockScreenPlugin pluginWithName:activationContext:]

  // instance methods
  -[SBLockScreenPlugin processDidExit:]
  -[SBLockScreenPlugin overlay]
  -[SBLockScreenPlugin viewController]
  -[SBLockScreenPlugin activatePluginController:]
  -[SBLockScreenPlugin dealloc]
  -[SBLockScreenPlugin setOverlay:]
  -[SBLockScreenPlugin .cxx_destruct]
  -[SBLockScreenPlugin name]
  -[SBLockScreenPlugin succinctDescriptionBuilder]
  -[SBLockScreenPlugin pluginViewController]
  -[SBLockScreenPlugin succinctDescription]
  -[SBLockScreenPlugin controller]
  -[SBLockScreenPlugin deactivatePluginController:]
  -[SBLockScreenPlugin setDelegate:]
  -[SBLockScreenPlugin appearance]
  -[SBLockScreenPlugin _updateAppearance:]
  -[SBLockScreenPlugin pluginController:sendAction:]
  -[SBLockScreenPlugin delegate]
  -[SBLockScreenPlugin descriptionWithMultilinePrefix:]
  -[SBLockScreenPlugin pluginController:updateAppearance:]
  -[SBLockScreenPlugin descriptionBuilderWithMultilinePrefix:]
  -[SBLockScreenPlugin coverSheetAppearance]
  -[SBLockScreenPlugin coverSheetBehavior]
  -[SBLockScreenPlugin handleDashBoardEvent:]
  -[SBLockScreenPlugin isCapabilityRestricted:]
  -[SBLockScreenPlugin initWithBundle:activationContext:]
  -[SBLockScreenPlugin pluginAgent]
  -[SBLockScreenPlugin setPluginAgent:]
  -[SBLockScreenPlugin pluginPriority]
  -[SBLockScreenPlugin pluginAppearance]
  -[SBLockScreenPlugin pluginWillActivateWithContext:]
  -[SBLockScreenPlugin pluginDidDeactivateWithContext:]
  -[SBLockScreenPlugin pluginHandleEvent:]
  -[SBLockScreenPlugin pluginUnlockAction]
  -[SBLockScreenPlugin overrideForElement:]
  -[SBLockScreenPlugin unlockAction]
  -[SBLockScreenPlugin isElementHidden:]
  -[SBLockScreenPlugin addLifecycleObserver:]
  -[SBLockScreenPlugin removeLifecycleObserver:]
  -[SBLockScreenPlugin enumerateLifecycleObserversUsingBlock:]
  -[SBLockScreenPlugin auxiliaryActivationAnimationBlock]
  -[SBLockScreenPlugin setAuxiliaryActivationAnimationBlock:]
  -[SBLockScreenPlugin auxiliaryDeactivationAnimationBlock]
  -[SBLockScreenPlugin setAuxiliaryDeactivationAnimationBlock:]


SBDashBoardLegibilityProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBWallpaperObserver, CSLegibilityProviding>
 @property  SBWallpaperController *wallpaperController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <CSLegibilityProviderDelegate> *legibilityProviderDelegate

  // instance methods
  -[SBDashBoardLegibilityProvider wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBDashBoardLegibilityProvider _wallpaperLegibilitySettings]
  -[SBDashBoardLegibilityProvider wallpaperController]
  -[SBDashBoardLegibilityProvider wallpaperDidChangeForVariant:]
  -[SBDashBoardLegibilityProvider init]
  -[SBDashBoardLegibilityProvider setLegibilityProviderDelegate:]
  -[SBDashBoardLegibilityProvider .cxx_destruct]
  -[SBDashBoardLegibilityProvider setWallpaperController:]
  -[SBDashBoardLegibilityProvider currentLegibilitySettings]
  -[SBDashBoardLegibilityProvider legibilityProviderDelegate]
  -[SBDashBoardLegibilityProvider initWithWallpaperController:]
  -[SBDashBoardLegibilityProvider _notifyDelegate]


SBAppSwitcherSystemService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemServiceServerAppSwitcherDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherSystemService .cxx_destruct]
  -[SBAppSwitcherSystemService initWithRecentAppLayoutsController:commandTabController:]
  -[SBAppSwitcherSystemService requestAppearanceForHiddenAppWithBundleIdentifier:assertionPort:forClient:withCompletion:]
  -[SBAppSwitcherSystemService systemServiceServer:requestAppearanceForHiddenAppWithBundleIdentifier:assertionPort:forClient:withCompletion:]


SBDashBoardApplicationLauncher : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalEventHandling, SBLockScreenApplicationLaunching, CSApplicationLaunching, CSCameraPrewarming>
 @property  CSCoverSheetViewController *coverSheetViewController
 @property  SBSecureAppManager *secureAppManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDashBoardApplicationLauncher coverSheetIdentifier]
  -[SBDashBoardApplicationLauncher setCoverSheetViewController:]
  -[SBDashBoardApplicationLauncher prewarmCameraHardware:andApplication:]
  -[SBDashBoardApplicationLauncher notePrewarmRequestWasUseful]
  -[SBDashBoardApplicationLauncher conformsToCSEventHandling]
  -[SBDashBoardApplicationLauncher dealloc]
  -[SBDashBoardApplicationLauncher coverSheetViewController]
  -[SBDashBoardApplicationLauncher .cxx_destruct]
  -[SBDashBoardApplicationLauncher _activateAppSceneBelowDashBoard:secureAppType:withActions:interactive:completion:]
  -[SBDashBoardApplicationLauncher _backgroundLaunchCamera]
  -[SBDashBoardApplicationLauncher launchQuickNote]
  -[SBDashBoardApplicationLauncher setSecureAppManager:]
  -[SBDashBoardApplicationLauncher participantState]
  -[SBDashBoardApplicationLauncher _launchQuickNote]
  -[SBDashBoardApplicationLauncher _coolCameraIfNecessary]
  -[SBDashBoardApplicationLauncher handleEvent:]
  -[SBDashBoardApplicationLauncher _reallyActivateAppSceneWithEntity:interactive:withCompletion:]
  -[SBDashBoardApplicationLauncher handleTransitionRequest:]
  -[SBDashBoardApplicationLauncher _canHandleTransitionRequest:outActivatingSceneEntity:]
  -[SBDashBoardApplicationLauncher _attemptToUnlockToCameraCompletion:]
  -[SBDashBoardApplicationLauncher _prewarmCamera]
  -[SBDashBoardApplicationLauncher _activateCameraAnimated:actions:completion:]
  -[SBDashBoardApplicationLauncher notePrewarmRequestEnded]
  -[SBDashBoardApplicationLauncher secureAppManager]
  -[SBDashBoardApplicationLauncher _presentApplicationSceneEntity:withResult:]
  -[SBDashBoardApplicationLauncher wouldHandleButtonEvent:]


_SBTestRecipeSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI

_SBTestRecipeDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[_SBTestRecipeDomain domainName]
  +[_SBTestRecipeDomain rootSettingsClass]
  +[_SBTestRecipeDomain domainGroupName]


SBTestRecipeRegistrar : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBTestRecipeRegistrar registerTestRecipeClass:]
  +[SBTestRecipeRegistrar _registerRecipeWithClass:]
  +[SBTestRecipeRegistrar registerAllTestRecipes]


SBReduceMotionSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBReduceMotionSwitcherModifier homeScreenScale]
  -[SBReduceMotionSwitcherModifier wallpaperScale]
  -[SBReduceMotionSwitcherModifier handleReduceMotionChangedEvent:]


SBMainSwitcherLiveContentOverlayCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSwitcherLiveContentOverlayCoordinating>
 @property  BOOL liveContentOverlayUpdatesSuspended
 @property  long long containerOrientation
 @property  <SBSwitcherLiveContentOverlayCoordinatorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMainSwitcherLiveContentOverlayCoordinator areLiveContentOverlayUpdatesSuspended]
  -[SBMainSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMainSwitcherLiveContentOverlayCoordinator noteKeyboardFocusDidChangeToSceneID:]
  -[SBMainSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBMainSwitcherLiveContentOverlayCoordinator initWithSceneLayoutViewController:]
  -[SBMainSwitcherLiveContentOverlayCoordinator setLiveContentOverlayUpdatesSuspended:]
  -[SBMainSwitcherLiveContentOverlayCoordinator appLayoutDidBecomeHidden:]
  -[SBMainSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMainSwitcherLiveContentOverlayCoordinator .cxx_destruct]
  -[SBMainSwitcherLiveContentOverlayCoordinator animationControllerForTransitionRequest:]
  -[SBMainSwitcherLiveContentOverlayCoordinator setContainerOrientation:]
  -[SBMainSwitcherLiveContentOverlayCoordinator appLayoutWillBecomeVisible:]
  -[SBMainSwitcherLiveContentOverlayCoordinator setDelegate:]
  -[SBMainSwitcherLiveContentOverlayCoordinator containerOrientation]
  -[SBMainSwitcherLiveContentOverlayCoordinator delegate]


SBDeleteNonAppIconAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  SBIcon *icon
 @property  NSString *iconLocation

  // instance methods
  -[SBDeleteNonAppIconAlertItem forcesModalAlertAppearance]
  -[SBDeleteNonAppIconAlertItem dismissOnLock]
  -[SBDeleteNonAppIconAlertItem .cxx_destruct]
  -[SBDeleteNonAppIconAlertItem icon]
  -[SBDeleteNonAppIconAlertItem iconLocation]
  -[SBDeleteNonAppIconAlertItem shouldShowInLockScreen]
  -[SBDeleteNonAppIconAlertItem configure:requirePasscodeForActions:]
  -[SBDeleteNonAppIconAlertItem didActivate]
  -[SBDeleteNonAppIconAlertItem initWithIcon:location:]


SBWindowLevelAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, BSInvalidatable>
 @property  double windowLevel
 @property  long long priority
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWindowLevelAssertion .cxx_destruct]
  -[SBWindowLevelAssertion succinctDescriptionBuilder]
  -[SBWindowLevelAssertion succinctDescription]
  -[SBWindowLevelAssertion windowLevel]
  -[SBWindowLevelAssertion priority]
  -[SBWindowLevelAssertion invalidate]
  -[SBWindowLevelAssertion reason]
  -[SBWindowLevelAssertion descriptionWithMultilinePrefix:]
  -[SBWindowLevelAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBWindowLevelAssertion initWithPriority:windowLevel:reason:invalidationHandler:]


SBDashBoardMesaUnlockBehaviorConfiguration : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBLiftToWakeObserver, SBBiometricUnlockBehaviorConfiguration>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorConfigurationDelegate> *delegate

  // instance methods
  -[SBDashBoardMesaUnlockBehaviorConfiguration dealloc]
  -[SBDashBoardMesaUnlockBehaviorConfiguration .cxx_destruct]
  -[SBDashBoardMesaUnlockBehaviorConfiguration setDelegate:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration delegate]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _setLiftToWakeController:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _accessibilityOptionsChanged:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _evaluateTriggerClass]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _unlockTriggerWithClass:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _expectedTriggerClassIncludingAccessibility:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _isAccessibilityRestingUnlockPreferenceEnabled]
  -[SBDashBoardMesaUnlockBehaviorConfiguration liftToWakeControllerEnablementDidChange:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration newBehaviorForCurrentConfiguration]
  -[SBDashBoardMesaUnlockBehaviorConfiguration initWithLiftToWakeController:biometricResource:lockScreenPrototypeSettings:]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _currentUnlockTriggerClass]
  -[SBDashBoardMesaUnlockBehaviorConfiguration _liftToWakeController]


SBFluidDismissalState : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SiriUIFluidDismissalState>
 @property  double backgroundWeighting
 @property  double contentWeighting
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentRect
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double backgroundWeighting
 @property  double contentWeighting
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentRect
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} homeGrabberContentRect
 @property  long long dismissalType
 @property  long long transitionPhase

  // instance methods
  -[SBFluidDismissalState transitionPhase]
  -[SBFluidDismissalState setContentRect:]
  -[SBFluidDismissalState setTransitionPhase:]
  -[SBFluidDismissalState contentRect]
  -[SBFluidDismissalState setDismissalType:]
  -[SBFluidDismissalState contentWeighting]
  -[SBFluidDismissalState backgroundWeighting]
  -[SBFluidDismissalState dismissalType]
  -[SBFluidDismissalState setBackgroundWeighting:]
  -[SBFluidDismissalState setContentWeighting:]
  -[SBFluidDismissalState setHomeGrabberContentRect:]
  -[SBFluidDismissalState homeGrabberContentRect]


SBReduceMotionChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBReduceMotionChangedSwitcherModifierEvent type]


SBForcePressGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBForcePressGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBForcePressGestureSwitcherModifier visibleAppLayouts]
  -[SBForcePressGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBForcePressGestureSwitcherModifier homeScreenAlpha]
  -[SBForcePressGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBForcePressGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBForcePressGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBForcePressGestureSwitcherModifier handleMainTransitionEvent:]
  -[SBForcePressGestureSwitcherModifier wallpaperStyle]
  -[SBForcePressGestureSwitcherModifier cardCornerRadiiForIndex:]
  -[SBForcePressGestureSwitcherModifier opacityForIndex:]
  -[SBForcePressGestureSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBForcePressGestureSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBForcePressGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBForcePressGestureSwitcherModifier _layoutSettings]
  -[SBForcePressGestureSwitcherModifier frameForIndex:]
  -[SBForcePressGestureSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBForcePressGestureSwitcherModifier homeScreenDimmingAlpha]
  -[SBForcePressGestureSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBForcePressGestureSwitcherModifier .cxx_destruct]
  -[SBForcePressGestureSwitcherModifier homeScreenScale]
  -[SBForcePressGestureSwitcherModifier appLayoutsToResignActive]
  -[SBForcePressGestureSwitcherModifier _switcherCardScale]
  -[SBForcePressGestureSwitcherModifier didMoveToParentModifier:]
  -[SBForcePressGestureSwitcherModifier wallpaperScale]
  -[SBForcePressGestureSwitcherModifier darkeningAlphaForIndex:]
  -[SBForcePressGestureSwitcherModifier keyboardSuppressionMode]
  -[SBForcePressGestureSwitcherModifier isContainerStatusBarVisible]
  -[SBForcePressGestureSwitcherModifier _scaleSettings]
  -[SBForcePressGestureSwitcherModifier handleGestureEvent:]
  -[SBForcePressGestureSwitcherModifier _beginAnimatingMultitaskingPropertyWithMode:settings:]
  -[SBForcePressGestureSwitcherModifier _scaleForCoplanarModifier]
  -[SBForcePressGestureSwitcherModifier _effectivePanProgress]
  -[SBForcePressGestureSwitcherModifier _indexOfSelectedAppLayout]
  -[SBForcePressGestureSwitcherModifier _forcePressGestureCanBreathe]
  -[SBForcePressGestureSwitcherModifier initWithGestureID:selectedAppLayout:effectiveStartingEnvironmentMode:multitaskingModifier:]
  -[SBForcePressGestureSwitcherModifier initialPanThreshold]


SBAppExitedWorkspaceTransaction : SBToAppsWorkspaceTransaction
  // instance methods
  -[SBAppExitedWorkspaceTransaction _didComplete]
  -[SBAppExitedWorkspaceTransaction _begin]


SBUserSessionController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBLogoutProgressDataSource, SBLogoutProgressDelegate, UMCriticalUserSwitchStakeholder>
 @property  BOOL loggingOut
 @property  SBMainDisplayPolicyAggregator *policyAggregator
 @property  UMUser *user
 @property  BOOL loginSession
 @property  BOOL isMultiUserSupported
 @property  BOOL canLogout
 @property  long long sessionType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUserSessionController user]
  -[SBUserSessionController init]
  -[SBUserSessionController policyAggregator]
  -[SBUserSessionController pendingApplicationsForLogoutProgressTransientOverlayViewController:]
  -[SBUserSessionController _displayProgressTransientOverlayIfNeeded]
  -[SBUserSessionController userSwitchBlockingTasksDidUpdate:]
  -[SBUserSessionController dealloc]
  -[SBUserSessionController logout]
  -[SBUserSessionController sessionType]
  -[SBUserSessionController .cxx_destruct]
  -[SBUserSessionController _initWithUserManager:]
  -[SBUserSessionController _noteApplicationDidExit:]
  -[SBUserSessionController willSwitchToUser:]
  -[SBUserSessionController succinctDescriptionBuilder]
  -[SBUserSessionController disableCurrentUser]
  -[SBUserSessionController readyToSwitchToUser:]
  -[SBUserSessionController _setPolicyAggregator:]
  -[SBUserSessionController succinctDescription]
  -[SBUserSessionController setLoggingOut:]
  -[SBUserSessionController _portraitOrientedProgressLocationForOrientation:]
  -[SBUserSessionController isLoginSession]
  -[SBUserSessionController isMultiUserSupported]
  -[SBUserSessionController debugBlockingTasksForLogoutProgressTransientOverlayViewController:]
  -[SBUserSessionController canLogout]
  -[SBUserSessionController logoutProgressTransientOverlayViewControllerDidDisappear:]
  -[SBUserSessionController _readyToSwitchToUser:]
  -[SBUserSessionController descriptionWithMultilinePrefix:]
  -[SBUserSessionController readyToSwitchToLoginSession:]
  -[SBUserSessionController _noteApplicationDidExitFromNotification:]
  -[SBUserSessionController descriptionBuilderWithMultilinePrefix:]
  -[SBUserSessionController logoutWithLogoutSupport:completion:]
  -[SBUserSessionController _evaluateRunningApplications]
  -[SBUserSessionController isLoggingOut]
  -[SBUserSessionController _policyAggregator]
  -[SBUserSessionController _massageApplicationListForDisplay:]


SBRestartTransitionRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, NSCopying>
 @property  NSString *requester
 @property  NSString *reason
 @property  int restartType
 @property  double delay
 @property  BOOL wantsPersistentSnapshot
 @property  BKSDisplayRenderOverlayDescriptor *customOverlayDescriptor
 @property  NSURL *applicationLaunchURL
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRestartTransitionRequest copyWithZone:]
  -[SBRestartTransitionRequest setDelay:]
  -[SBRestartTransitionRequest delay]
  -[SBRestartTransitionRequest setReason:]
  -[SBRestartTransitionRequest init]
  -[SBRestartTransitionRequest setApplicationLaunchURL:]
  -[SBRestartTransitionRequest .cxx_destruct]
  -[SBRestartTransitionRequest applicationLaunchURL]
  -[SBRestartTransitionRequest succinctDescriptionBuilder]
  -[SBRestartTransitionRequest requester]
  -[SBRestartTransitionRequest succinctDescription]
  -[SBRestartTransitionRequest setRequester:]
  -[SBRestartTransitionRequest reason]
  -[SBRestartTransitionRequest descriptionWithMultilinePrefix:]
  -[SBRestartTransitionRequest descriptionBuilderWithMultilinePrefix:]
  -[SBRestartTransitionRequest initWithRequester:reason:]
  -[SBRestartTransitionRequest setRestartType:]
  -[SBRestartTransitionRequest setWantsPersistentSnapshot:]
  -[SBRestartTransitionRequest setCustomOverlayDescriptor:]
  -[SBRestartTransitionRequest restartType]
  -[SBRestartTransitionRequest wantsPersistentSnapshot]
  -[SBRestartTransitionRequest customOverlayDescriptor]


SBMousePointerManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BKSMousePointerDeviceObserver>
 @property  unsigned int systemCursorInteractionContextID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMousePointerManager _setPointerUIDWithConnectedDeviceCount:]
  -[SBMousePointerManager init]
  -[SBMousePointerManager dealloc]
  -[SBMousePointerManager .cxx_destruct]
  -[SBMousePointerManager mousePointerDevicesDidChange:]
  -[SBMousePointerManager _updateKeepAliveAssertion]
  -[SBMousePointerManager systemCursorInteractionContextID]
  -[SBMousePointerManager setSystemCursorInteractionContextID:]
  -[SBMousePointerManager _handleAssistiveTouchEnabledDidChangeNotification]


_SBProximityTouchHandlingWindow : SBFTouchPassThroughWindow /usr/lib/libutil.dylib

_SBProximityTouchHandlingView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[_SBProximityTouchHandlingView hitTest:withEvent:]


_SBProximityTouchHandlingViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[_SBProximityTouchHandlingViewController _view]
  -[_SBProximityTouchHandlingViewController preferredInterfaceOrientationForPresentation]
  -[_SBProximityTouchHandlingViewController shouldAutorotate]
  -[_SBProximityTouchHandlingViewController supportedInterfaceOrientations]
  -[_SBProximityTouchHandlingViewController loadView]


SBNotchedStatusBarProximityBacklightPolicy : SBDefaultProximityBacklightPolicy <SBNotchedStatusBarProximityBacklightPolicyEnablementConditionDelegate, _SBProximityTouchHandlingDelegate>
 @property  SBProximitySettings *_proximitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNotchedStatusBarProximityBacklightPolicy dealloc]
  -[SBNotchedStatusBarProximityBacklightPolicy .cxx_destruct]
  -[SBNotchedStatusBarProximityBacklightPolicy didHitAllowedRegion:]
  -[SBNotchedStatusBarProximityBacklightPolicy initWithBacklightController:]
  -[SBNotchedStatusBarProximityBacklightPolicy _scheduleBacklightFactorToZeroAfterDebounceDuration:]
  -[SBNotchedStatusBarProximityBacklightPolicy _createNewEnablementCondition]
  -[SBNotchedStatusBarProximityBacklightPolicy _debounceDurationForNumberOfTouchesReceivedWithObjectInProximity:]
  -[SBNotchedStatusBarProximityBacklightPolicy _setHandleTouchesIfNecessary:]
  -[SBNotchedStatusBarProximityBacklightPolicy _proximitySettings]
  -[SBNotchedStatusBarProximityBacklightPolicy condition:enablementDidChange:]
  -[SBNotchedStatusBarProximityBacklightPolicy proximitySensorManager:objectWithinProximityDidChange:]
  -[SBNotchedStatusBarProximityBacklightPolicy _setProximitySettings:]


SBWallpaperAggdLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBWallpaperAggdLogger init]
  -[SBWallpaperAggdLogger _valueString]
  -[SBWallpaperAggdLogger incrementIrisPlayCount]
  -[SBWallpaperAggdLogger .cxx_destruct]
  -[SBWallpaperAggdLogger _clearAggdKeysForLocations:]
  -[SBWallpaperAggdLogger updateWallpaperAggdKeysForLocations:withHasVideo:hasProcedural:name:]
  -[SBWallpaperAggdLogger saveWallpaperAggdCurrentValues]
  -[SBWallpaperAggdLogger _bucketedPlayCount]
  -[SBWallpaperAggdLogger _resetPlayCountDate]


SBSystemAnimationDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBSystemAnimationDomain domainName]
  +[SBSystemAnimationDomain rootSettings]
  +[SBSystemAnimationDomain rootSettingsClass]
  +[SBSystemAnimationDomain domainGroupName]


SBRemoteTransientOverlayViewController : SBTransientOverlayViewController <SBRemoteTransientOverlayHostViewControllerDelegate, SBIdleTimerCoordinating>
 @property  BOOL activatingForSiri
 @property  BOOL isScreenshotMarkup
 @property  BOOL shouldInvalidateWhenDeactivated
 @property  BOOL switcherEligible
 @property  long long preferredDismissalAnimationStyle
 @property  <SBRemoteTransientOverlayViewControllerDelegate> *delegate
 @property  long long wallpaperVariant
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBRemoteTransientOverlayViewController requestViewControllerForAlertDefinition:connectionHandler:]

  // instance methods
  -[SBRemoteTransientOverlayViewController viewDidLoad]
  -[SBRemoteTransientOverlayViewController handleHomeButtonPress]
  -[SBRemoteTransientOverlayViewController canResignFirstResponder]
  -[SBRemoteTransientOverlayViewController becomeFirstResponder]
  -[SBRemoteTransientOverlayViewController handleHeadsetButtonPress:]
  -[SBRemoteTransientOverlayViewController preferredWhitePointAdaptivityStyle]
  -[SBRemoteTransientOverlayViewController childViewControllerForHomeIndicatorAutoHidden]
  -[SBRemoteTransientOverlayViewController handleLockButtonPress]
  -[SBRemoteTransientOverlayViewController handleHomeButtonLongPress]
  -[SBRemoteTransientOverlayViewController resignFirstResponder]
  -[SBRemoteTransientOverlayViewController handleVolumeDownButtonPress]
  -[SBRemoteTransientOverlayViewController preferredStatusBarStyle]
  -[SBRemoteTransientOverlayViewController setIdleTimerCoordinator:]
  -[SBRemoteTransientOverlayViewController handleVolumeUpButtonPress]
  -[SBRemoteTransientOverlayViewController handleHomeButtonDoublePress]
  -[SBRemoteTransientOverlayViewController didInvalidate]
  -[SBRemoteTransientOverlayViewController isActivatingForSiri]
  -[SBRemoteTransientOverlayViewController shouldInvalidateWhenDeactivated]
  -[SBRemoteTransientOverlayViewController isSwitcherEligible]
  -[SBRemoteTransientOverlayViewController idleTimerProvider:didProposeBehavior:forReason:]
  -[SBRemoteTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBRemoteTransientOverlayViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBRemoteTransientOverlayViewController dealloc]
  -[SBRemoteTransientOverlayViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBRemoteTransientOverlayViewController shouldAutorotate]
  -[SBRemoteTransientOverlayViewController shouldDisableControlCenter]
  -[SBRemoteTransientOverlayViewController .cxx_destruct]
  -[SBRemoteTransientOverlayViewController serviceProcessIdentifier]
  -[SBRemoteTransientOverlayViewController canBecomeFirstResponder]
  -[SBRemoteTransientOverlayViewController _preferredStatusBarVisibility]
  -[SBRemoteTransientOverlayViewController succinctDescriptionBuilder]
  -[SBRemoteTransientOverlayViewController shouldDisableSiri]
  -[SBRemoteTransientOverlayViewController supportedInterfaceOrientations]
  -[SBRemoteTransientOverlayViewController setContainerOrientation:]
  -[SBRemoteTransientOverlayViewController viewDidAppear:]
  -[SBRemoteTransientOverlayViewController prepareForActivationWithContext:completion:]
  -[SBRemoteTransientOverlayViewController configureWithContext:completion:]
  -[SBRemoteTransientOverlayViewController childViewControllerForScreenEdgesDeferringSystemGestures]
  -[SBRemoteTransientOverlayViewController prefersStatusBarActivityItemVisible]
  -[SBRemoteTransientOverlayViewController viewWillAppear:]
  -[SBRemoteTransientOverlayViewController _canShowWhileLocked]
  -[SBRemoteTransientOverlayViewController isContentOpaque]
  -[SBRemoteTransientOverlayViewController handleDoubleHeightStatusBarTap]
  -[SBRemoteTransientOverlayViewController setDelegate:]
  -[SBRemoteTransientOverlayViewController viewDidDisappear:]
  -[SBRemoteTransientOverlayViewController viewWillDisappear:]
  -[SBRemoteTransientOverlayViewController viewDidLayoutSubviews]
  -[SBRemoteTransientOverlayViewController delegate]
  -[SBRemoteTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBRemoteTransientOverlayViewController beginIgnoringAppearanceUpdates]
  -[SBRemoteTransientOverlayViewController beginIgnoringContentOverlayInsetUpdates]
  -[SBRemoteTransientOverlayViewController endIgnoringAppearanceUpdates]
  -[SBRemoteTransientOverlayViewController endIgnoringContentOverlayInsetUpdates]
  -[SBRemoteTransientOverlayViewController setWallpaperVariant:]
  -[SBRemoteTransientOverlayViewController allowsStackingOverlayContentAbove]
  -[SBRemoteTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBRemoteTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBRemoteTransientOverlayViewController shouldDisableBanners]
  -[SBRemoteTransientOverlayViewController shouldPendAlertItems]
  -[SBRemoteTransientOverlayViewController isScreenshotMarkup]
  -[SBRemoteTransientOverlayViewController hasServiceProcessIdentifier:]
  -[SBRemoteTransientOverlayViewController preserveInputViewsAnimated:]
  -[SBRemoteTransientOverlayViewController handleGestureDismissal]
  -[SBRemoteTransientOverlayViewController restoreInputViewsAnimated:]
  -[SBRemoteTransientOverlayViewController handlePictureInPictureDidBegin]
  -[SBRemoteTransientOverlayViewController _initWithContentViewController:]
  -[SBRemoteTransientOverlayViewController _configureWallpaperEffectViewWithAnimationSettings:]
  -[SBRemoteTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBRemoteTransientOverlayViewController preferredSceneDeactivationReasonValue]
  -[SBRemoteTransientOverlayViewController _needsWallpaperEffectView]
  -[SBRemoteTransientOverlayViewController preferredStatusBarStyleOverridesToCancel]
  -[SBRemoteTransientOverlayViewController shouldDisableReachability]
  -[SBRemoteTransientOverlayViewController shouldDisableOrientationUpdates]
  -[SBRemoteTransientOverlayViewController shouldDisableInteractiveScreenshotGesture]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangeContentOpaque:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangeGestureDismissalStyles:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangeFeaturePolicy:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangePreferredSceneDeactivationReasonValue:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerDidChangeShouldDisableOrientationUpdates:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerRequestsDeactivation:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewControllerRequestsInvalidation:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewController:didTerminateWithError:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewController:requestsWallpaperEffectUpdateWithAnimationSettings:]
  -[SBRemoteTransientOverlayViewController defaultPreferredInterfaceOrientationForPresentationForRemoteTransientOverlayHostViewController:]
  -[SBRemoteTransientOverlayViewController remoteTransientOverlayHostViewController:requestsActionForHandlingButtonEvents:]
  -[SBRemoteTransientOverlayViewController serviceEventDeferringToken]
  -[SBRemoteTransientOverlayViewController pictureInPictureProcessIdentifier]
  -[SBRemoteTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBRemoteTransientOverlayViewController representedDisplayItem]
  -[SBRemoteTransientOverlayViewController _setMediaOverridePID:]
  -[SBRemoteTransientOverlayViewController preferredDismissalAnimationStyle]
  -[SBRemoteTransientOverlayViewController wallpaperVariant]


SBFluidSwitcherItemContainerHeaderItem : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  NSString *titleText
 @property  NSString *subtitleText
 @property  UIImage *image
 @property  UIColor *titleTextColor
 @property  long long subtitleInterfaceStyle

  // instance methods
  -[SBFluidSwitcherItemContainerHeaderItem copyWithZone:]
  -[SBFluidSwitcherItemContainerHeaderItem setTitleText:]
  -[SBFluidSwitcherItemContainerHeaderItem setTitleTextColor:]
  -[SBFluidSwitcherItemContainerHeaderItem titleText]
  -[SBFluidSwitcherItemContainerHeaderItem .cxx_destruct]
  -[SBFluidSwitcherItemContainerHeaderItem setImage:]
  -[SBFluidSwitcherItemContainerHeaderItem image]
  -[SBFluidSwitcherItemContainerHeaderItem setSubtitleInterfaceStyle:]
  -[SBFluidSwitcherItemContainerHeaderItem subtitleText]
  -[SBFluidSwitcherItemContainerHeaderItem subtitleInterfaceStyle]
  -[SBFluidSwitcherItemContainerHeaderItem titleTextColor]
  -[SBFluidSwitcherItemContainerHeaderItem setSubtitleText:]


SBUnlockedAlertItemPresenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBAlertItemPresenter>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUnlockedAlertItemPresenter presentAlertItem:animated:completion:]
  -[SBUnlockedAlertItemPresenter initWithSharedModalAlertItemPresenter:]
  -[SBUnlockedAlertItemPresenter dismissAlertItem:animated:completion:]
  -[SBUnlockedAlertItemPresenter .cxx_destruct]
  -[SBUnlockedAlertItemPresenter presentsAlertItemsModally]
  -[SBUnlockedAlertItemPresenter canPresentMultipleAlertItemsSimultaneously]


SBHomeScreenSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBHomeScreenSwitcherModifier init]
  -[SBHomeScreenSwitcherModifier .cxx_destruct]


_SBHomeScreenFloorSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[_SBHomeScreenFloorSwitcherModifier homeScreenBackdropBlurType]
  -[_SBHomeScreenFloorSwitcherModifier wantsDockWindowLevelAssertion]
  -[_SBHomeScreenFloorSwitcherModifier visibleAppLayouts]
  -[_SBHomeScreenFloorSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[_SBHomeScreenFloorSwitcherModifier homeScreenAlpha]
  -[_SBHomeScreenFloorSwitcherModifier scaleForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isHomeScreenContentRequired]
  -[_SBHomeScreenFloorSwitcherModifier topMostLayoutElements]
  -[_SBHomeScreenFloorSwitcherModifier wantsDockBehaviorAssertion]
  -[_SBHomeScreenFloorSwitcherModifier isSwitcherWindowVisible]
  -[_SBHomeScreenFloorSwitcherModifier isScrollEnabled]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[_SBHomeScreenFloorSwitcherModifier animationAttributesForLayoutElement:]
  -[_SBHomeScreenFloorSwitcherModifier wallpaperStyle]
  -[_SBHomeScreenFloorSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[_SBHomeScreenFloorSwitcherModifier cardCornerRadiiForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier opacityForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutsToCacheSnapshots]
  -[_SBHomeScreenFloorSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier isWallpaperRequiredForSwitcher]
  -[_SBHomeScreenFloorSwitcherModifier dockProgress]
  -[_SBHomeScreenFloorSwitcherModifier frameForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier homeScreenDimmingAlpha]
  -[_SBHomeScreenFloorSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[_SBHomeScreenFloorSwitcherModifier containerStatusBarAnimationDuration]
  -[_SBHomeScreenFloorSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[_SBHomeScreenFloorSwitcherModifier isIndexSelectable:]
  -[_SBHomeScreenFloorSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier wantsHomeScreenPointerInteractions]
  -[_SBHomeScreenFloorSwitcherModifier switcherDimmingAlpha]
  -[_SBHomeScreenFloorSwitcherModifier homeScreenBackdropBlurProgress]
  -[_SBHomeScreenFloorSwitcherModifier reopenClosedWindowsButtonScale]
  -[_SBHomeScreenFloorSwitcherModifier titleAndIconOpacityForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[_SBHomeScreenFloorSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[_SBHomeScreenFloorSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier titleOpacityForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier dockUpdateMode]
  -[_SBHomeScreenFloorSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[_SBHomeScreenFloorSwitcherModifier shadowStyleForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier homeScreenScale]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[_SBHomeScreenFloorSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutsToResignActive]
  -[_SBHomeScreenFloorSwitcherModifier shouldAllowContentViewTouchesForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[_SBHomeScreenFloorSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[_SBHomeScreenFloorSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[_SBHomeScreenFloorSwitcherModifier dockWindowLevel]
  -[_SBHomeScreenFloorSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[_SBHomeScreenFloorSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[_SBHomeScreenFloorSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[_SBHomeScreenFloorSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[_SBHomeScreenFloorSwitcherModifier wallpaperScale]
  -[_SBHomeScreenFloorSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[_SBHomeScreenFloorSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isIndexKillable:]
  -[_SBHomeScreenFloorSwitcherModifier darkeningAlphaForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier switcherDimmingViewBlocksTouches]
  -[_SBHomeScreenFloorSwitcherModifier plusButtonAlpha]
  -[_SBHomeScreenFloorSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[_SBHomeScreenFloorSwitcherModifier shadowOffsetForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[_SBHomeScreenFloorSwitcherModifier lighteningAlphaForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier keyboardSuppressionMode]
  -[_SBHomeScreenFloorSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier transactionCompletionOptions]
  -[_SBHomeScreenFloorSwitcherModifier contentViewScale]
  -[_SBHomeScreenFloorSwitcherModifier plusButtonStyle]
  -[_SBHomeScreenFloorSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[_SBHomeScreenFloorSwitcherModifier wantsSwitcherBackdropBlur]
  -[_SBHomeScreenFloorSwitcherModifier wantsSwitcherDimmingView]
  -[_SBHomeScreenFloorSwitcherModifier dockWindowLevelPriority]
  -[_SBHomeScreenFloorSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[_SBHomeScreenFloorSwitcherModifier isContainerStatusBarVisible]
  -[_SBHomeScreenFloorSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[_SBHomeScreenFloorSwitcherModifier shadowOpacityForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier switcherBackdropBlurProgress]
  -[_SBHomeScreenFloorSwitcherModifier rotationAngleForIndex:]
  -[_SBHomeScreenFloorSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[_SBHomeScreenFloorSwitcherModifier switcherBackdropBlurType]
  -[_SBHomeScreenFloorSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]


SBHUDSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  float defaultHUDPresentationAnimationDuration

  // class methods
  +[SBHUDSettings settingsControllerModule]

  // instance methods
  -[SBHUDSettings setDefaultValues]
  -[SBHUDSettings setDefaultHUDPresentationAnimationDuration:]
  -[SBHUDSettings defaultHUDPresentationAnimationDuration]


SBEntityRemovalCommitFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalCommitFloatingSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalCommitFloatingSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier topMostLayoutElements]
  -[SBEntityRemovalCommitFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier opacityForIndex:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier _layoutSettings]
  -[SBEntityRemovalCommitFloatingSwitcherModifier frameForIndex:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalCommitFloatingSwitcherModifier containerViewBounds]
  -[SBEntityRemovalCommitFloatingSwitcherModifier transitionWillBegin]
  -[SBEntityRemovalCommitFloatingSwitcherModifier shadowOpacityForIndex:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier _isIndexFromAppLayout:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier _isIndexToAppLayout:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:floatingConfiguration:]
  -[SBEntityRemovalCommitFloatingSwitcherModifier _toBeRemovedFinalScale]
  -[SBEntityRemovalCommitFloatingSwitcherModifier isContentStatusBarVisible]


SBAccessibilityWindowHostingControllerServer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSServiceConnectionListenerDelegate, SBSAccessibilityWindowHostingClientToServerInterface, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAccessibilityWindowHostingControllerServer init]
  -[SBAccessibilityWindowHostingControllerServer activate]
  -[SBAccessibilityWindowHostingControllerServer unregisterWindowWithContextID:]
  -[SBAccessibilityWindowHostingControllerServer .cxx_destruct]
  -[SBAccessibilityWindowHostingControllerServer listener:didReceiveConnection:withContext:]
  -[SBAccessibilityWindowHostingControllerServer registerWindowWithContextID:atLevel:]
  -[SBAccessibilityWindowHostingControllerServer invalidate]
  -[SBAccessibilityWindowHostingControllerServer _handleDisconnectForServiceConnection:]
  -[SBAccessibilityWindowHostingControllerServer _beginHostingWindowWithContextID:atLevel:]
  -[SBAccessibilityWindowHostingControllerServer _endHostingWindowWithContextID:]


_SBAccessibilityWindowHostingControllerServerTarget : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BSServiceConnection *connection
 @property  <SBSAccessibilityWindowHostingClientToServerInterface> *proxyInterface

  // class methods
  +[_SBAccessibilityWindowHostingControllerServerTarget currentTarget]

  // instance methods
  -[_SBAccessibilityWindowHostingControllerServerTarget unregisterWindowWithContextID:]
  -[_SBAccessibilityWindowHostingControllerServerTarget .cxx_destruct]
  -[_SBAccessibilityWindowHostingControllerServerTarget _performBlock:]
  -[_SBAccessibilityWindowHostingControllerServerTarget proxyInterface]
  -[_SBAccessibilityWindowHostingControllerServerTarget setProxyInterface:]
  -[_SBAccessibilityWindowHostingControllerServerTarget registerWindowWithContextID:atLevel:]
  -[_SBAccessibilityWindowHostingControllerServerTarget connection]
  -[_SBAccessibilityWindowHostingControllerServerTarget initWithConnection:proxyInterface:]


SBAppUnderFloatingSwitcherTransitionSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBAppUnderFloatingSwitcherTransitionSwitcherModifier liveContentRasterizationAttributesForAppLayout:]


_SBLoadApplicationResult : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[_SBLoadApplicationResult .cxx_destruct]


SBApplicationController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationRestrictionDataSource, BKSTerminationAssertionObserver, XBApplicationProviding, SBApplicationLifecycleObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationController sharedInstance]
  +[SBApplicationController _sharedInstanceCreateIfNecessary:]
  +[SBApplicationController sharedInstanceIfExists]
  +[SBApplicationController _setClearAllLegacySnapshotsWhenLoaded:]
  +[SBApplicationController _setClearSystemAppSnapshotsWhenLoaded:]

  // instance methods
  -[SBApplicationController allBundleIdentifiers]
  -[SBApplicationController _updateVisibilityOverridesInBackground]
  -[SBApplicationController dataActivationApplication]
  -[SBApplicationController iPodOutApplication]
  -[SBApplicationController init]
  -[SBApplicationController dealloc]
  -[SBApplicationController mobilePhone]
  -[SBApplicationController .cxx_destruct]
  -[SBApplicationController applicationRestrictionsMayHaveChanged]
  -[SBApplicationController loginApplication]
  -[SBApplicationController _loadApplications:remove:]
  -[SBApplicationController _appClassForInfo:]
  -[SBApplicationController _finishDeferredMajorVersionMigrationTasks_FlushSystemSnapshots]
  -[SBApplicationController _loadApplicationFromApplicationInfo:]
  -[SBApplicationController _memoryWarningReceived]
  -[SBApplicationController runningApplications]
  -[SBApplicationController _lock_applicationWithBundleIdentifier:]
  -[SBApplicationController testFlightApplication]
  -[SBApplicationController allInstalledApplications]
  -[SBApplicationController splashBoardSystemApplications]
  -[SBApplicationController _sendInstalledAppsDidChangeNotification:removed:replaced:updated:]
  -[SBApplicationController webApplication]
  -[SBApplicationController _finishDeferredMajorVersionMigrationTasks_FlushLegacySnapshots]
  -[SBApplicationController applicationsReplaced:]
  -[SBApplicationController restrictionController]
  -[SBApplicationController applicationsAdded:]
  -[SBApplicationController _appLibrary]
  -[SBApplicationController _appLibraryObserver]
  -[SBApplicationController _preLoadApplications]
  -[SBApplicationController _splashBoardController]
  -[SBApplicationController noteTerminationAssertionEfficacyChangedTo:forBundleIdentifier:]
  -[SBApplicationController applicationsDemoted:]
  -[SBApplicationController musicApplication]
  -[SBApplicationController _allApplicationsFilteredBySystem:]
  -[SBApplicationController uninstallApplication:]
  -[SBApplicationController _removeApplicationsFromModelWithBundleIdentifier:forInstall:withReason:]
  -[SBApplicationController mapsApplication]
  -[SBApplicationController clockApplication]
  -[SBApplicationController alwaysAvailableApplicationBundleIdentifiers]
  -[SBApplicationController faceTimeApp]
  -[SBApplicationController allApplications]
  -[SBApplicationController setupApplication]
  -[SBApplicationController _updateVisibilityOverrides]
  -[SBApplicationController applicationsRemoved:]
  -[SBApplicationController requestUninstallApplication:options:withCompletion:]
  -[SBApplicationController waitForUninstallsToComplete]
  -[SBApplicationController _appInfosToBundleIDs:]
  -[SBApplicationController cameraApplication]
  -[SBApplicationController bundleIdentifiersWithVisibilityOverrideHidden]
  -[SBApplicationController applicationVisibilityMayHaveChanged]
  -[SBApplicationController allSplashBoardApplications]
  -[SBApplicationController applicationWithBundleIdentifier:]
  -[SBApplicationController applicationsUpdated:]
  -[SBApplicationController requestUninstallApplicationWithBundleIdentifier:options:withCompletion:]
  -[SBApplicationController inCallServiceApp]
  -[SBApplicationController spotlightApplication]
  -[SBApplicationController notesApplication]
  -[SBApplicationController applicationWithPid:]


SBUnsupportedURLAlertItem : SBDismissOnlyAlertItem

SBDefaultAuthenticationPolicy : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAuthenticationPolicy>
 @property  SecureBackup *secureBackupHelper
 @property  SBiCloudPasscodeRequirementLockoutController *iCloudPasscodeRequirementLockoutController
 @property  SBSoftwareUpdatePasscodePolicyManager *softwareUpdatePasscodePolicyManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDefaultAuthenticationPolicy .cxx_destruct]
  -[SBDefaultAuthenticationPolicy softwareUpdatePasscodePolicyManager]
  -[SBDefaultAuthenticationPolicy usesSecureMode]
  -[SBDefaultAuthenticationPolicy wipeDeviceWithReason:]
  -[SBDefaultAuthenticationPolicy shouldClearBlockStateOnSync]
  -[SBDefaultAuthenticationPolicy cachePasscode:]
  -[SBDefaultAuthenticationPolicy clearPasscodeCache]
  -[SBDefaultAuthenticationPolicy allowAuthenticationRevocation]
  -[SBDefaultAuthenticationPolicy passcodeAuthenticationFailedWithError:]
  -[SBDefaultAuthenticationPolicy setSoftwareUpdatePasscodePolicyManager:]
  -[SBDefaultAuthenticationPolicy setICloudPasscodeRequirementLockoutController:]
  -[SBDefaultAuthenticationPolicy iCloudPasscodeRequirementLockoutController]
  -[SBDefaultAuthenticationPolicy _secureBackupHelper]
  -[SBDefaultAuthenticationPolicy _setSecureBackupHelper:]


SBRotationSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBRotationSwitcherModifier animationAttributesForLayoutElement:]
  -[SBRotationSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBRotationSwitcherModifier appLayoutsToResignActive]
  -[SBRotationSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBRotationSwitcherModifier keyboardSuppressionMode]


SBAppSwitcherOrbGestureSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL useOrbGesture
 @property  double orbGestureRegionMax
 @property  double maxIconScrollProgressAllowed
 @property  double appToAppCurveMinimum
 @property  double homeToAppCurveMinimum
 @property  double minPanTranslation
 @property  double maxPopPanTranslation
 @property  double additionalThrowDisplacement
 @property  double commitToPreviousAppTranslation
 @property  double commitToNextAppTranslation
 @property  double dimmingValue
 @property  double forcePeekAdjustApex
 @property  double forceAdjustMax
 @property  double maxAverageBreathingVelocity
 @property  double maxBreathingVelocityInterval
 @property  BOOL canPop
 @property  BOOL forceDrivesInitialProgress
 @property  BOOL canPlayInitialHaptic
 @property  BOOL canPlayCommitHaptic
 @property  SBAppSwitcherOrbGestureAnimationSettings *animationSettings

  // class methods
  +[SBAppSwitcherOrbGestureSettings settingsControllerModule]

  // instance methods
  -[SBAppSwitcherOrbGestureSettings setDefaultValues]
  -[SBAppSwitcherOrbGestureSettings .cxx_destruct]
  -[SBAppSwitcherOrbGestureSettings canPop]
  -[SBAppSwitcherOrbGestureSettings setAnimationSettings:]
  -[SBAppSwitcherOrbGestureSettings animationSettings]
  -[SBAppSwitcherOrbGestureSettings commitToNextAppTranslation]
  -[SBAppSwitcherOrbGestureSettings dimmingValue]
  -[SBAppSwitcherOrbGestureSettings appToAppCurveMinimum]
  -[SBAppSwitcherOrbGestureSettings homeToAppCurveMinimum]
  -[SBAppSwitcherOrbGestureSettings valueAlongDefaultForcePressCurveWithMinY:progress:fromHomeScreen:]
  -[SBAppSwitcherOrbGestureSettings maxPopPanTranslation]
  -[SBAppSwitcherOrbGestureSettings forceDrivesInitialProgress]
  -[SBAppSwitcherOrbGestureSettings forcePeekAdjustApex]
  -[SBAppSwitcherOrbGestureSettings forceAdjustMax]
  -[SBAppSwitcherOrbGestureSettings maxAverageBreathingVelocity]
  -[SBAppSwitcherOrbGestureSettings setUseOrbGesture:]
  -[SBAppSwitcherOrbGestureSettings setOrbGestureRegionMax:]
  -[SBAppSwitcherOrbGestureSettings setMaxIconScrollProgressAllowed:]
  -[SBAppSwitcherOrbGestureSettings setAppToAppCurveMinimum:]
  -[SBAppSwitcherOrbGestureSettings setHomeToAppCurveMinimum:]
  -[SBAppSwitcherOrbGestureSettings setMinPanTranslation:]
  -[SBAppSwitcherOrbGestureSettings setMaxPopPanTranslation:]
  -[SBAppSwitcherOrbGestureSettings setAdditionalThrowDisplacement:]
  -[SBAppSwitcherOrbGestureSettings setCommitToPreviousAppTranslation:]
  -[SBAppSwitcherOrbGestureSettings setCommitToNextAppTranslation:]
  -[SBAppSwitcherOrbGestureSettings setDimmingValue:]
  -[SBAppSwitcherOrbGestureSettings setForceAdjustMax:]
  -[SBAppSwitcherOrbGestureSettings setForcePeekAdjustApex:]
  -[SBAppSwitcherOrbGestureSettings setMaxAverageBreathingVelocity:]
  -[SBAppSwitcherOrbGestureSettings setMaxBreathingVelocityInterval:]
  -[SBAppSwitcherOrbGestureSettings setCanPop:]
  -[SBAppSwitcherOrbGestureSettings setForceDrivesInitialProgress:]
  -[SBAppSwitcherOrbGestureSettings setCanPlayInitialHaptic:]
  -[SBAppSwitcherOrbGestureSettings setCanPlayCommitHaptic:]
  -[SBAppSwitcherOrbGestureSettings useOrbGesture]
  -[SBAppSwitcherOrbGestureSettings orbGestureRegionMax]
  -[SBAppSwitcherOrbGestureSettings maxIconScrollProgressAllowed]
  -[SBAppSwitcherOrbGestureSettings minPanTranslation]
  -[SBAppSwitcherOrbGestureSettings additionalThrowDisplacement]
  -[SBAppSwitcherOrbGestureSettings commitToPreviousAppTranslation]
  -[SBAppSwitcherOrbGestureSettings maxBreathingVelocityInterval]
  -[SBAppSwitcherOrbGestureSettings canPlayInitialHaptic]
  -[SBAppSwitcherOrbGestureSettings canPlayCommitHaptic]


SBSwitcherAppSuggestionBannerView : PLPlatterView /System/Library/Frameworks/IOSurface.framework/IOSurface
 @property  BOOL highlighted
 @property  SBBestAppSuggestion *representedAppSuggestion
 @property  unsigned long style

  // instance methods
  -[SBSwitcherAppSuggestionBannerView _titleFont]
  -[SBSwitcherAppSuggestionBannerView isHighlighted]
  -[SBSwitcherAppSuggestionBannerView _configureConstraints]
  -[SBSwitcherAppSuggestionBannerView .cxx_destruct]
  -[SBSwitcherAppSuggestionBannerView setHighlighted:]
  -[SBSwitcherAppSuggestionBannerView traitCollectionDidChange:]
  -[SBSwitcherAppSuggestionBannerView _textStyle]
  -[SBSwitcherAppSuggestionBannerView initWithRecipe:]
  -[SBSwitcherAppSuggestionBannerView _descriptionFont]
  -[SBSwitcherAppSuggestionBannerView style]
  -[SBSwitcherAppSuggestionBannerView initWithFrame:appSuggestion:style:]
  -[SBSwitcherAppSuggestionBannerView _createAppLabelForSuggestion:]
  -[SBSwitcherAppSuggestionBannerView _createIconViewForSuggestion:]
  -[SBSwitcherAppSuggestionBannerView _createDescriptionLabelForSuggestion:]
  -[SBSwitcherAppSuggestionBannerView _createDarkeningView]
  -[SBSwitcherAppSuggestionBannerView _updateAppearanceForCurrentUserInterfaceStyle]
  -[SBSwitcherAppSuggestionBannerView _isSingleLine]
  -[SBSwitcherAppSuggestionBannerView _appTitleForSuggestion:]
  -[SBSwitcherAppSuggestionBannerView _firstWakeGreetingString]
  -[SBSwitcherAppSuggestionBannerView _descriptionStringForSuggestion:]
  -[SBSwitcherAppSuggestionBannerView _iconImageFromAppWithBundleIdentifier:withIconImageCache:]
  -[SBSwitcherAppSuggestionBannerView representedAppSuggestion]
  -[SBSwitcherAppSuggestionBannerView _meCardShortName]


SBEntityRemovalDeleteFloatingSwitcherModifier : SBTransitionSwitcherModifier
 @property  BOOL blursFromAppLayout

  // instance methods
  -[SBEntityRemovalDeleteFloatingSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier topMostLayoutElements]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier opacityForIndex:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier _layoutSettings]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier frameForIndex:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier containerViewBounds]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier transitionWillBegin]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier transitionDidEnd]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier transitionWillUpdate]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier shadowOpacityForIndex:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier _opacitySettings]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier _isIndexFromAppLayout:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier _isIndexToAppLayout:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:floatingConfiguration:]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier blursFromAppLayout]
  -[SBEntityRemovalDeleteFloatingSwitcherModifier setBlursFromAppLayout:]


SBAVSystemControllerCache : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL fullyMuted
 @property  float volumeLimit
 @property  BOOL volumeLimitEnforced
 @property  NSString *activeAudioRoute
 @property  NSDictionary *activeAudioRouteInfo
 @property  NSArray *pickableRoutes
 @property  NSArray *activeOutputDevices
 @property  BOOL airplayDisplayActive

  // class methods
  +[SBAVSystemControllerCache sharedInstance]

  // instance methods
  -[SBAVSystemControllerCache init]
  -[SBAVSystemControllerCache _queue_updateActiveAudioRouteFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache _queue_signalBackgroundQueryCancellationForNotification:]
  -[SBAVSystemControllerCache initWithCallOutQueue:notificationCenter:dataProviderInitializer:]
  -[SBAVSystemControllerCache activeOutputDevices]
  -[SBAVSystemControllerCache _queue_updateVolumeLimitFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache isFullyMuted]
  -[SBAVSystemControllerCache dealloc]
  -[SBAVSystemControllerCache _queue_updateActiveOutputDevicesFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache .cxx_destruct]
  -[SBAVSystemControllerCache fetchPickableRoutesWithCompletion:]
  -[SBAVSystemControllerCache _queue_updatePickableRoutesFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache _receiveUpdatedValueFromNotification:]
  -[SBAVSystemControllerCache pickableRoutes]
  -[SBAVSystemControllerCache volumeLimit]
  -[SBAVSystemControllerCache _queue_updateVolumeLimitEnforcedFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache _queue_rebuildCache]
  -[SBAVSystemControllerCache _serverDied:]
  -[SBAVSystemControllerCache _queue_backgroundQueryCancellationSignalForNotificationCreatingIfNecessary:]
  -[SBAVSystemControllerCache _queue_updateFullyMutedFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]
  -[SBAVSystemControllerCache _queryActiveOutputDevicesFromContext:]
  -[SBAVSystemControllerCache _queue_notifyObserversWithBlock:]
  -[SBAVSystemControllerCache activeAudioRouteInfo]
  -[SBAVSystemControllerCache addObserver:]
  -[SBAVSystemControllerCache isAirplayDisplayActive]
  -[SBAVSystemControllerCache activeAudioRoute]
  -[SBAVSystemControllerCache isVolumeLimitEnforced]
  -[SBAVSystemControllerCache _queue_updateAirplayDisplayActiveFromNotification:allowingBackgroundQueries:backgroundQueriesCancelledBlock:cancelBackgroundQueriesBlock:completion:]


SBScreenshotManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBSceneManagerCoordinator *sceneManagerCoordinator
 @property  _SBScreenshotPersistenceCoordinator *persistenceCoordinator
 @property  <SBScreenshotManagerDataSource> *dataSource

  // instance methods
  -[SBScreenshotManager initWithDataSource:]
  -[SBScreenshotManager .cxx_destruct]
  -[SBScreenshotManager dataSource]
  -[SBScreenshotManager saveScreenshots]
  -[SBScreenshotManager _initWithDataSource:persistenceCoordinator:sceneManagerCoordinator:]
  -[SBScreenshotManager saveScreenshotsWithCompletion:]
  -[SBScreenshotManager _fetchEligibleScreenshotProvidersForSnapshotting]
  -[SBScreenshotManager _providerForScreen:]
  -[SBScreenshotManager _sceneManagerCoordinator]
  -[SBScreenshotManager _setSceneManagerCoordinator:]
  -[SBScreenshotManager _persistenceCoordinator]
  -[SBScreenshotManager _setPersistenceCoordinator:]


SBPasscodeAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib <UITextFieldDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPasscodeAlertItem dealloc]
  -[SBPasscodeAlertItem .cxx_destruct]
  -[SBPasscodeAlertItem textField:shouldChangeCharactersInRange:replacementString:]
  -[SBPasscodeAlertItem shouldShowInLockScreen]
  -[SBPasscodeAlertItem configure:requirePasscodeForActions:]
  -[SBPasscodeAlertItem submitPassword]
  -[SBPasscodeAlertItem _clearAlertController]
  -[SBPasscodeAlertItem configureTextField:]
  -[SBPasscodeAlertItem makeEmergencyCall]
  -[SBPasscodeAlertItem initWithPasscodeMode:unlockScreenType:simplePasscodeType:]
  -[SBPasscodeAlertItem _setErrorString:]
  -[SBPasscodeAlertItem didEndCall]


SBPasscodeComplianceAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBPasscodeComplianceAlertItem .cxx_destruct]
  -[SBPasscodeComplianceAlertItem shouldShowInLockScreen]
  -[SBPasscodeComplianceAlertItem configure:requirePasscodeForActions:]
  -[SBPasscodeComplianceAlertItem initWithTitle:message:continueButtonTitle:cancelButtonTitle:]


SBPasscodeController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBPasscodeController sharedInstance]

  // instance methods
  -[SBPasscodeController init]
  -[SBPasscodeController dealloc]
  -[SBPasscodeController .cxx_destruct]
  -[SBPasscodeController _abort]
  -[SBPasscodeController _passwordEntered:]
  -[SBPasscodeController _userWantsToComplyNow:]
  -[SBPasscodeController _startListeningToManagedConfigurationNotification]
  -[SBPasscodeController _stopListeningToManagedConfigurationNotification]
  -[SBPasscodeController _fetchAndSetUnlockScreenTypeForNewPasscode:]
  -[SBPasscodeController _presentPasscodeAlertItemWithMode:alertItemErrorString:unlockScreenType:]
  -[SBPasscodeController _stopListeningToRestoreCompletedAlertStateChangedNotifications]
  -[SBPasscodeController checkPasscodeCompliance]
  -[SBPasscodeController forceUserToChangePasscode]
  -[SBPasscodeController _stopListeningToTelephonyNotifications]
  -[SBPasscodeController _didEndCall]
  -[SBPasscodeController _isRestoreCompletedAlertActive]
  -[SBPasscodeController _activateComplianceAlert]
  -[SBPasscodeController _startListeningToTelephonyNotifications]
  -[SBPasscodeController _startListeningToRestoreCompletedAlertStateChangedNotifications]


SBCommunicationPolicyManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBCommunicationPolicyManager sharedInstance]

  // instance methods
  -[SBCommunicationPolicyManager init]
  -[SBCommunicationPolicyManager dealloc]
  -[SBCommunicationPolicyManager .cxx_destruct]
  -[SBCommunicationPolicyManager observeValueForKeyPath:ofObject:change:context:]
  -[SBCommunicationPolicyManager shouldScreenTimeSuppressNotificationsForBundleIdentifier:]


SBInAppStatusBarHiddenAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInAppStatusBarHiddenAssertion dealloc]
  -[SBInAppStatusBarHiddenAssertion .cxx_destruct]
  -[SBInAppStatusBarHiddenAssertion invalidate]
  -[SBInAppStatusBarHiddenAssertion initWithIdentifier:forReason:invalidationBlock:]
  -[SBInAppStatusBarHiddenAssertion invalidateWithAnimation:]


SBRecentAppLayoutsPersister : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *recents
 @property  BOOL initializedNewStoreOnDisk

  // instance methods
  -[SBRecentAppLayoutsPersister syncToDiskSynchronously]
  -[SBRecentAppLayoutsPersister .cxx_destruct]
  -[SBRecentAppLayoutsPersister recents]
  -[SBRecentAppLayoutsPersister _queue_writeCompressedProtobufRepresentationToDisk:]
  -[SBRecentAppLayoutsPersister _enqueueDiskWrite]
  -[SBRecentAppLayoutsPersister _persistTimerExpired:]
  -[SBRecentAppLayoutsPersister setRecents:]
  -[SBRecentAppLayoutsPersister _scheduledPersistTimer]
  -[SBRecentAppLayoutsPersister initializedNewStoreOnDisk]
  -[SBRecentAppLayoutsPersister syncToDiskSoonIfDirty]
  -[SBRecentAppLayoutsPersister initWithPersistenceURL:]
  -[SBRecentAppLayoutsPersister _loadRecents]


SBFluidSwitcherGesture : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  long long state
 @property  SBAppLayout *selectedAppLayout
 @property  UIGestureRecognizer *gestureRecognizerForStudyLog
 @property  long long type
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherGesture .cxx_destruct]
  -[SBFluidSwitcherGesture succinctDescriptionBuilder]
  -[SBFluidSwitcherGesture _setState:]
  -[SBFluidSwitcherGesture type]
  -[SBFluidSwitcherGesture succinctDescription]
  -[SBFluidSwitcherGesture state]
  -[SBFluidSwitcherGesture descriptionWithMultilinePrefix:]
  -[SBFluidSwitcherGesture descriptionBuilderWithMultilinePrefix:]
  -[SBFluidSwitcherGesture selectedAppLayout]
  -[SBFluidSwitcherGesture gestureEvent]
  -[SBFluidSwitcherGesture studyLogData]
  -[SBFluidSwitcherGesture initWithType:eventProvider:]
  -[SBFluidSwitcherGesture _setSelectedAppLayout:]
  -[SBFluidSwitcherGesture _setGestureRecognizerForStudyLog:]
  -[SBFluidSwitcherGesture gestureRecognizerForStudyLog]


SBKeyboardSuppressionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBKeyboardSuppressionManager sharedInstance]

  // instance methods
  -[SBKeyboardSuppressionManager init]
  -[SBKeyboardSuppressionManager stopSuppressingKeyboardWithReason:]
  -[SBKeyboardSuppressionManager .cxx_destruct]
  -[SBKeyboardSuppressionManager startSuppressingKeyboardWithReason:predicate:]
  -[SBKeyboardSuppressionManager _setKeyboardSuppressed:forReason:withPredicate:]


SBAppProfileExpiredAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBAppProfileExpiredAlertItem dismissOnLock]
  -[SBAppProfileExpiredAlertItem .cxx_destruct]
  -[SBAppProfileExpiredAlertItem shouldShowInLockScreen]
  -[SBAppProfileExpiredAlertItem configure:requirePasscodeForActions:]
  -[SBAppProfileExpiredAlertItem initWithApp:]


SBDashBoardVibrantWallpaperChevronView : SBUIChevronView /usr/lib/libicucore.A.dylib <SBUILegibility>
 @property  <CSWallpaperColorProvider> *wallpaperColorProvider
 @property  double strength
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardVibrantWallpaperChevronView setStrength:]
  -[SBDashBoardVibrantWallpaperChevronView init]
  -[SBDashBoardVibrantWallpaperChevronView legibilitySettings]
  -[SBDashBoardVibrantWallpaperChevronView wallpaperColorProvider]
  -[SBDashBoardVibrantWallpaperChevronView .cxx_destruct]
  -[SBDashBoardVibrantWallpaperChevronView setWallpaperColorProvider:]
  -[SBDashBoardVibrantWallpaperChevronView initWithColor:]
  -[SBDashBoardVibrantWallpaperChevronView strength]
  -[SBDashBoardVibrantWallpaperChevronView setLegibilitySettings:]
  -[SBDashBoardVibrantWallpaperChevronView _updateVibrancy]


SBBaseStartupTransition : SBTransaction <SBStartupTransition>
 @property  SBMainWorkspace *mainWorkspace
 @property  SBStartupTransitionContext *context
 @property  unsigned long destination

  // instance methods
  -[SBBaseStartupTransition context]
  -[SBBaseStartupTransition destination]
  -[SBBaseStartupTransition performTransitionWithCompletionBlock:]
  -[SBBaseStartupTransition _begin]
  -[SBBaseStartupTransition .cxx_destruct]
  -[SBBaseStartupTransition mainWorkspace]
  -[SBBaseStartupTransition initWithDestination:context:]


SBAppProfileNotTrustedAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBAppProfileNotTrustedAlertItem dismissOnLock]
  -[SBAppProfileNotTrustedAlertItem .cxx_destruct]
  -[SBAppProfileNotTrustedAlertItem shouldShowInLockScreen]
  -[SBAppProfileNotTrustedAlertItem configure:requirePasscodeForActions:]
  -[SBAppProfileNotTrustedAlertItem initWithApp:]


SBTransientOverlayDismissToAppsWorkspaceTransaction : SBMainWorkspaceTransaction
  // class methods
  +[SBTransientOverlayDismissToAppsWorkspaceTransaction isValidForTransitionRequest:]

  // instance methods
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction _canBeInterrupted]
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction _didComplete]
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction _sendActivationResultWithError:]
  -[SBTransientOverlayDismissToAppsWorkspaceTransaction _begin]


SBSpotlightDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBSpotlightDomain domainName]
  +[SBSpotlightDomain rootSettings]
  +[SBSpotlightDomain rootSettingsClass]
  +[SBSpotlightDomain domainGroupName]


SBSnapshotTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSnapshotTestRecipe load]

  // instance methods
  -[SBSnapshotTestRecipe title]
  -[SBSnapshotTestRecipe handleVolumeIncrease]
  -[SBSnapshotTestRecipe handleVolumeDecrease]
  -[SBSnapshotTestRecipe _sendRequestWithType:]


SBWidgetController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <WGWidgetDiscoveryControllerDelegate, SBExtensionHandling, SBHSidebarWidgetLearningObserver, CSWidgetGroupViewControllerProviding>
 @property  WGWidgetDiscoveryController *widgetDiscoveryController
 @property  SBHSidebarWidgetBootstrappingAdvisor *sidebarWidgetBootstrappingAdvisor
 @property  BOOL bootstrapFavoriteWidgets
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWidgetController setBootstrapFavoriteWidgets:]
  -[SBWidgetController init]
  -[SBWidgetController shouldShowWidgetsPinButtonForWidgetDiscoveryController:]
  -[SBWidgetController _updateFavoriteWidgetLearning]
  -[SBWidgetController _reloadWidgetPreferences]
  -[SBWidgetController newWidgetListViewControllerWithSettings:]
  -[SBWidgetController _homescreenSidebarVisibilityDidChange:]
  -[SBWidgetController _shouldUsePinnedWidgets]
  -[SBWidgetController newWidgetGroupViewControllerWithSettings:]
  -[SBWidgetController .cxx_destruct]
  -[SBWidgetController widgetDiscoveryController:didChangeWidgetsPinning:]
  -[SBWidgetController newAvocadoWidgetListViewControllerWithSettings:]
  -[SBWidgetController widgetDiscoveryController:preferredViewControllerForPresentingFromViewController:]
  -[SBWidgetController sidebarWidgetLearningAdvisorDidUpdate:]
  -[SBWidgetController didPurgeNonCAMLSnapshotsForWidgetDiscoveryController:]
  -[SBWidgetController areWidgetsPinnedForWidgetDiscoveryController:]
  -[SBWidgetController widgetDiscoveryController:shouldPurgeArchivedSnapshotsForWidgetWithBundleIdentifier:]
  -[SBWidgetController widgetDiscoveryController:updateStatusBarAssertion:withLegibilityStyle:]
  -[SBWidgetController didPurgeNonASTCSnapshotsForWidgetDiscoveryController:]
  -[SBWidgetController widgetDiscoveryController:didEndUsingStatusBarAssertion:]
  -[SBWidgetController _widgetDiscoveryController]
  -[SBWidgetController shouldShowWidgetsPinningTeachingViewForWidgetDiscoveryController:]
  -[SBWidgetController bootstrapFavoriteWidgets]
  -[SBWidgetController widgetDiscoveryControllerShouldRespectFavorites:]
  -[SBWidgetController statusBarAssertionForWidgetDiscoveryController:legibilityStyle:]
  -[SBWidgetController removeWidgetIdentifiersFromToday:]
  -[SBWidgetController widgetDiscoveryController:widgetWithBundleIdentifier:didEncounterProblematicSnapshotAtURL:]
  -[SBWidgetController widgetDiscoveryControllerDidDismissWidgetsPinningTeachingView:]
  -[SBWidgetController sidebarWidgetBootstrappingAdvisor]
  -[SBWidgetController widgetDiscoveryControllerShouldIncludeInternalWidgets:]
  -[SBWidgetController setWidgetDiscoveryController:]
  -[SBWidgetController widgetDiscoveryController:requestUnlockWithCompletion:]
  -[SBWidgetController launchExtensionWithBundleID:options:completion:]
  -[SBWidgetController todayWidgetIdentifiers]


SBApplicationLaunchNotifyInCallAlertItem : SBApplicationLaunchNotifyAlertItem
  // instance methods
  -[SBApplicationLaunchNotifyInCallAlertItem initWithApplication:]
  -[SBApplicationLaunchNotifyInCallAlertItem configure:requirePasscodeForActions:]


_SBScreenshotPersistenceCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL isSaving

  // instance methods
  -[_SBScreenshotPersistenceCoordinator isSaving]
  -[_SBScreenshotPersistenceCoordinator saveScreenshot:withCompletion:]
  -[_SBScreenshotPersistenceCoordinator _isWritingSnapshot]
  -[_SBScreenshotPersistenceCoordinator _incrementWriteCount]
  -[_SBScreenshotPersistenceCoordinator _finishedWritingScreenshot:didFinishSavingWithError:context:]
  -[_SBScreenshotPersistenceCoordinator _decrementWriteCount]


SBMainDisplaySceneLayoutStatusBarView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <PTSettingsKeyObserver, UIStatusBarStyleDelegate_SpringBoardOnly, SBDeviceApplicationSceneStatusBarStateObserver>
 @property  <UIStatusBarStyleDelegate_SpringBoardOnly> *realStyleDelegate
 @property  BOOL requiringStatusBar
 @property  BOOL statusBarEffectivelyHidden
 @property  <SBMainDisplaySceneLayoutStatusBarViewDataSource> *dataSource
 @property  long long containerOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarAvoidanceFrameTo:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarAlphaTo:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarStyleTo:forPartWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarOrientationTo:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarHiddenTo:withAnimation:]
  -[SBMainDisplaySceneLayoutStatusBarView _setupDebugging]
  -[SBMainDisplaySceneLayoutStatusBarView _sceneHandleForClassicApplicationIfAny]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarStyleOverridesToSuppress:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView settings:changedValueForKey:]
  -[SBMainDisplaySceneLayoutStatusBarView setDataSource:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:willAnimateFromHeight:toHeight:duration:animation:]
  -[SBMainDisplaySceneLayoutStatusBarView initWithFrame:]
  -[SBMainDisplaySceneLayoutStatusBarView _updateDebugBackgroundColor]
  -[SBMainDisplaySceneLayoutStatusBarView isRequiringStatusBar]
  -[SBMainDisplaySceneLayoutStatusBarView updateBreadcrumbActionIfNecessary]
  -[SBMainDisplaySceneLayoutStatusBarView createStatusBarWithFrame:interfaceOrientation:reason:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBarSystemNavigationAction:]
  -[SBMainDisplaySceneLayoutStatusBarView .cxx_destruct]
  -[SBMainDisplaySceneLayoutStatusBarView hitTest:withEvent:]
  -[SBMainDisplaySceneLayoutStatusBarView _hiddenTransformForAnimation:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:didAnimateFromHeight:toHeight:animation:]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarFrameForOrientation:]
  -[SBMainDisplaySceneLayoutStatusBarView _setDebugBackgroundColor:]
  -[SBMainDisplaySceneLayoutStatusBarView didInvalidateStatusBarDescriptionForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView updateStatusBarOrientationForLegacyApp]
  -[SBMainDisplaySceneLayoutStatusBarView _effectiveStatusBarStyleOverridesToSuppress]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarAvoidanceFrame]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarAvoidanceFrame:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView _updateHitTestLayers]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:didTriggerButtonType:withAction:context:]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarStyle:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView applyStatusBarStylesForDescriber:]
  -[SBMainDisplaySceneLayoutStatusBarView allValidStatusBarPartIdentifiers]
  -[SBMainDisplaySceneLayoutStatusBarView _enumerateValidStatusBarPartIdentifiersForSceneWithIdentifier:withBlock:]
  -[SBMainDisplaySceneLayoutStatusBarView setContainerOrientation:]
  -[SBMainDisplaySceneLayoutStatusBarView _setDebugOffsetIndex:]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarHidden:withAnimation:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarStyle:toPartIdentifier:ofSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView _effectiveStyleForPartIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView _hiddenAlphaForAnimation:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarStyleTo:]
  -[SBMainDisplaySceneLayoutStatusBarView sceneWithIdentifier:didChangeStatusBarStyleOverridesToSuppressTo:]
  -[SBMainDisplaySceneLayoutStatusBarView dataSource]
  -[SBMainDisplaySceneLayoutStatusBarView layoutStatusBarForSpringBoardRotationToOrientation:]
  -[SBMainDisplaySceneLayoutStatusBarView _anyAppViewControllerOwningInterfaceOrientation]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:styleForRequestedStyle:overrides:]
  -[SBMainDisplaySceneLayoutStatusBarView _tearDownStatusBar]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarScrollToTop:]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarTapped:type:]
  -[SBMainDisplaySceneLayoutStatusBarView _currentlyValidStatusBarPartIdentifiers]
  -[SBMainDisplaySceneLayoutStatusBarView isStatusBarEffectivelyHidden]
  -[SBMainDisplaySceneLayoutStatusBarView _animateHidden:withAnimation:transitionHandler:applyHandler:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:didTriggerButtonType:withAction:]
  -[SBMainDisplaySceneLayoutStatusBarView beginRequiringStatusBarForReason:]
  -[SBMainDisplaySceneLayoutStatusBarView endRequiringStatusBarForReason:]
  -[SBMainDisplaySceneLayoutStatusBarView _defaultStatusBarStyleRequest]
  -[SBMainDisplaySceneLayoutStatusBarView _addStatusBarIfNeeded]
  -[SBMainDisplaySceneLayoutStatusBarView overriddenRequestedStyleFromStyle:]
  -[SBMainDisplaySceneLayoutStatusBarView _applyStatusBarAlpha:toSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView realStyleDelegate]
  -[SBMainDisplaySceneLayoutStatusBarView containerOrientation]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarShowDebug:]
  -[SBMainDisplaySceneLayoutStatusBarView _allowChangingIndividualStatusBarParts]
  -[SBMainDisplaySceneLayoutStatusBarView statusBar:effectiveStyleOverridesForRequestedStyle:overrides:]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarDescriberForPrimaryApplicationIfAny]
  -[SBMainDisplaySceneLayoutStatusBarView _layoutStatusBarForOrientation:]
  -[SBMainDisplaySceneLayoutStatusBarView setRealStyleDelegate:]
  -[SBMainDisplaySceneLayoutStatusBarView _validStatusBarPartIdentifiersForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutStatusBarView statusBarStyleRequestForStatusBarPart:]
  -[SBMainDisplaySceneLayoutStatusBarView _statusBarNeedsSpecialLayoutForClassic]
  -[SBMainDisplaySceneLayoutStatusBarView _updateDebugOffset]


SBLockOverlayContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBLockOverlayViewController *viewController
 @property  unsigned long priority
 @property  @? activationBlock
 @property  @? deactivationBlock

  // instance methods
  -[SBLockOverlayContext viewController]
  -[SBLockOverlayContext .cxx_destruct]
  -[SBLockOverlayContext setActivationBlock:]
  -[SBLockOverlayContext priority]
  -[SBLockOverlayContext activationBlock]
  -[SBLockOverlayContext initWithOverlayViewController:priority:]
  -[SBLockOverlayContext deactivationBlock]
  -[SBLockOverlayContext setDeactivationBlock:]


SBPPTOperation : NSOperation /System/Library/PrivateFrameworks/GraphicsServices.framework/GraphicsServices
  // class methods
  +[SBPPTOperation operationToUnlockInterfaceFinishingUIUnlock:]
  +[SBPPTOperation operationToSynthesizeEventsForEventActions:]
  +[SBPPTOperation enqueueOperations:]
  +[SBPPTOperation operationToUnlockInterface]
  +[SBPPTOperation operationToLockInterface]
  +[SBPPTOperation operationToSetInterfaceOrientation:]
  +[SBPPTOperation operationToWaitForTimeInterval:]
  +[SBPPTOperation operationToWaitForNotificationName:object:timeout:]
  +[SBPPTOperation operationToTransitionToHomeScreen]
  +[SBPPTOperation operationToSaveHomeScreenState]
  +[SBPPTOperation operationToRestoreHomeScreenState]
  +[SBPPTOperation operationToPresentAppSwitcher]
  +[SBPPTOperation operationToDismissAppSwitcher]
  +[SBPPTOperation operationToSaveAppSwitcherState]
  +[SBPPTOperation operationToRestoreAppSwitcherState]
  +[SBPPTOperation operationToLoadPPTAppSwitcherState]
  +[SBPPTOperation operationToPresentCoverSheet]
  +[SBPPTOperation operationToDismissCoverSheet]
  +[SBPPTOperation operationToPresentFloatingDock]
  +[SBPPTOperation operationToDismissFloatingDock]
  +[SBPPTOperation operationToPresentBannerNotification]
  +[SBPPTOperation operationToDismissBannerNotification]
  +[SBPPTOperation operationToActivateApplicationWithBundleIdentifier:]
  +[SBPPTOperation operationToTerminateApplicationWithBundleIdentifier:]
  +[SBPPTOperation operationToSynthesizeEventsForCommandString:]
  +[SBPPTOperation operationToSynthesizeEventsForEventStream:]
  +[SBPPTOperation operationToSwipeUpInMiddleOfInterface]
  +[SBPPTOperation operationToSwipeDownInMiddleOfInterface]
  +[SBPPTOperation operationToSwipeLeftInMiddleOfInterface]
  +[SBPPTOperation operationToSwipeRightInMiddleOfInterface]


SBInCallDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBInCallDomain domainName]
  +[SBInCallDomain rootSettings]
  +[SBInCallDomain rootSettingsClass]
  +[SBInCallDomain domainGroupName]


SBCoverSheetSlidingViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBCoverSheetSystemGestureDelegatePositionProviding, PTSettingsKeyObserver>
 @property  SBCoverSheetPositionView *positionView
 @property  SBScreenEdgePanGestureRecognizer *dismissGestureRecognizer
 @property  SBScreenEdgePanGestureRecognizer *dismissAddendumGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectPresentGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectDismissGestureRecognizer
 @property  SBFluidScrunchGestureRecognizer *scrunchDismissGestureRecognizer
 @property  BOOL indirectPresentGestureCalledBegin
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  CSLockScreenSettings *lockScreenSettings
 @property  long long presentGestureState
 @property  BOOL canBePulledDown
 @property  BOOL canBePulledUp
 @property  UIViewFloatAnimatableProperty *progressProperty
 @property  UIViewFloatAnimatableProperty *catchupProperty
 @property  BOOL performingCatchUpForPresentation
 @property  {CGPoint=dd} lastTouchLocation
 @property  long long groupCount
 @property  @? completionBlock
 @property  NSObject<OS_dispatch_group> *completionGroup
 @property  double initialTouchOffsetFromScreenEdge
 @property  UIViewController<SBCoverSheetSlidingViewControllerContentViewController> *contentViewController
 @property  <SBCoverSheetSlidingViewControllerDelegate> *delegate
 @property  long long dismissalSlidingMode
 @property  long long dismissalTransformMode
 @property  SBCoverSheetSystemGesturesDelegate *systemGesturesDelegate
 @property  BOOL roundsCorners
 @property  CSCoverSheetTransitionSettings *transitionSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetSlidingViewController lastTouchLocation]
  -[SBCoverSheetSlidingViewController viewDidLoad]
  -[SBCoverSheetSlidingViewController coverSheetIdentifier]
  -[SBCoverSheetSlidingViewController positionView]
  -[SBCoverSheetSlidingViewController _dismissGestureBeganWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _setCornerRounded:]
  -[SBCoverSheetSlidingViewController _presentOrDismissGestureEndedWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _grabberRecognizer]
  -[SBCoverSheetSlidingViewController _transitionToViewControllerAppearState:forUserGesture:]
  -[SBCoverSheetSlidingViewController setInitialTouchOffsetFromScreenEdge:]
  -[SBCoverSheetSlidingViewController setPositionView:]
  -[SBCoverSheetSlidingViewController setLastTouchLocation:]
  -[SBCoverSheetSlidingViewController _dismissCoverSheetAnimated:withCompletion:]
  -[SBCoverSheetSlidingViewController progressProperty]
  -[SBCoverSheetSlidingViewController _finalLocationForTransitionToPresented:]
  -[SBCoverSheetSlidingViewController setScrunchDismissGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _handleIndirectPresentGesture:]
  -[SBCoverSheetSlidingViewController setProgressProperty:]
  -[SBCoverSheetSlidingViewController isTransitioning]
  -[SBCoverSheetSlidingViewController _endTransitionToAppeared:]
  -[SBCoverSheetSlidingViewController setCanBePulledUp:]
  -[SBCoverSheetSlidingViewController _logDismissGestureState:forAddendumGesture:]
  -[SBCoverSheetSlidingViewController _adjustedTouchLocationForCurrentDismissalMode:]
  -[SBCoverSheetSlidingViewController isAnyGestureActivelyRecognized]
  -[SBCoverSheetSlidingViewController setCanBePulledDown:]
  -[SBCoverSheetSlidingViewController settings:changedValueForKey:]
  -[SBCoverSheetSlidingViewController groupCount]
  -[SBCoverSheetSlidingViewController _animationTickForPresentationValue:]
  -[SBCoverSheetSlidingViewController completionGroup]
  -[SBCoverSheetSlidingViewController dismissalSlidingMode]
  -[SBCoverSheetSlidingViewController scrunchDismissGestureRecognizer]
  -[SBCoverSheetSlidingViewController indirectPresentGestureCalledBegin]
  -[SBCoverSheetSlidingViewController _studyLogForGestureRecognizerState:bounds:position:velocity:]
  -[SBCoverSheetSlidingViewController canBePulledDown]
  -[SBCoverSheetSlidingViewController mathForGestureRecognizerPointsDown:]
  -[SBCoverSheetSlidingViewController _shouldEndPresentedForEndingGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setTransitionSettings:]
  -[SBCoverSheetSlidingViewController dismissAddendumGestureRecognizer]
  -[SBCoverSheetSlidingViewController _addSystemGestureRecognizers]
  -[SBCoverSheetSlidingViewController canBePulledUp]
  -[SBCoverSheetSlidingViewController _velocityForGesture:]
  -[SBCoverSheetSlidingViewController setCompletionGroup:]
  -[SBCoverSheetSlidingViewController indirectPresentGestureRecognizer]
  -[SBCoverSheetSlidingViewController indirectDismissGestureRecognizer]
  -[SBCoverSheetSlidingViewController _updatePositionViewForProgress:forPresentationValue:]
  -[SBCoverSheetSlidingViewController setIndirectDismissGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setIndirectPresentGestureCalledBegin:]
  -[SBCoverSheetSlidingViewController _updateHomeGestureSettings:]
  -[SBCoverSheetSlidingViewController setGroupCount:]
  -[SBCoverSheetSlidingViewController _averageVelocityForGesture:]
  -[SBCoverSheetSlidingViewController setDismissAddendumGestureRecognizer:]
  -[SBCoverSheetSlidingViewController systemGesturesDelegate]
  -[SBCoverSheetSlidingViewController _handlePresentGesture:]
  -[SBCoverSheetSlidingViewController _finishTransitionToPresented:animated:withCompletion:]
  -[SBCoverSheetSlidingViewController wantsFullScreenLayout]
  -[SBCoverSheetSlidingViewController _mathForGestureRecognizerPointsDown:position:velocity:instantVelocity:averageVelocity:]
  -[SBCoverSheetSlidingViewController _logPresentGestureState:]
  -[SBCoverSheetSlidingViewController _transitionToViewControllerAppearState:]
  -[SBCoverSheetSlidingViewController _presentCoverSheetAnimated:forUserGesture:withCompletion:]
  -[SBCoverSheetSlidingViewController dismissGestureRecognizer]
  -[SBCoverSheetSlidingViewController setDismissalTransformMode:]
  -[SBCoverSheetSlidingViewController performingCatchUpForPresentation]
  -[SBCoverSheetSlidingViewController _updateCoverSheetDismissSettings:]
  -[SBCoverSheetSlidingViewController shouldAutomaticallyForwardRotationMethods]
  -[SBCoverSheetSlidingViewController _studyLogForCompletionOfTransitionToPresented:]
  -[SBCoverSheetSlidingViewController _handleDismissGesture:]
  -[SBCoverSheetSlidingViewController setPresented:forUserGesture:animated:withCompletion:]
  -[SBCoverSheetSlidingViewController _isPresentingInterstitialForGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setPerformingCatchUpForPresentation:]
  -[SBCoverSheetSlidingViewController _startCatchupAnimationWithDuration:completion:]
  -[SBCoverSheetSlidingViewController _presentGestureBeganWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _beginTransitionFromAppeared:]
  -[SBCoverSheetSlidingViewController setLockScreenSettings:]
  -[SBCoverSheetSlidingViewController _shouldRubberBandForGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _locationForGesture:]
  -[SBCoverSheetSlidingViewController _updateForLocation:interactive:]
  -[SBCoverSheetSlidingViewController setIndirectPresentGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setRoundsCorners:]
  -[SBCoverSheetSlidingViewController initialTouchOffsetFromScreenEdge]
  -[SBCoverSheetSlidingViewController dismissalTransformMode]
  -[SBCoverSheetSlidingViewController setCatchupProperty:]
  -[SBCoverSheetSlidingViewController setDismissalSlidingMode:]
  -[SBCoverSheetSlidingViewController setSystemGesturesDelegate:]
  -[SBCoverSheetSlidingViewController _cancelTransitionForGesture:]
  -[SBCoverSheetSlidingViewController _animationTickedWithProgress:forPresentationValue:]
  -[SBCoverSheetSlidingViewController setDismissGestureRecognizer:]
  -[SBCoverSheetSlidingViewController catchupProperty]
  -[SBCoverSheetSlidingViewController dealloc]
  -[SBCoverSheetSlidingViewController _removeSystemGestureRecognizers]
  -[SBCoverSheetSlidingViewController _positionSubviewsForContentFrame:forPresentationValue:]
  -[SBCoverSheetSlidingViewController _transitionToViewControllerAppearState:ifNeeded:forUserGesture:]
  -[SBCoverSheetSlidingViewController initWithContentViewController:canBePulledDown:canBePulledUp:dismissalPreemptingGestureRecognizer:]
  -[SBCoverSheetSlidingViewController isBottomMostSlider]
  -[SBCoverSheetSlidingViewController _dismissGestureChangedWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController setDismissGesturesEnabled:]
  -[SBCoverSheetSlidingViewController isDismissGestureActive]
  -[SBCoverSheetSlidingViewController _createProperties]
  -[SBCoverSheetSlidingViewController shouldAutorotate]
  -[SBCoverSheetSlidingViewController roundsCorners]
  -[SBCoverSheetSlidingViewController presentGestureState]
  -[SBCoverSheetSlidingViewController isPresentGestureActive]
  -[SBCoverSheetSlidingViewController activeGestureRecognizer]
  -[SBCoverSheetSlidingViewController lockScreenSettings]
  -[SBCoverSheetSlidingViewController transitionSettings]
  -[SBCoverSheetSlidingViewController .cxx_destruct]
  -[SBCoverSheetSlidingViewController _presentOrDismissGestureChangedWithGestureRecognizer:]
  -[SBCoverSheetSlidingViewController _isTransitioning]
  -[SBCoverSheetSlidingViewController homeGestureSettings]
  -[SBCoverSheetSlidingViewController supportedInterfaceOrientations]
  -[SBCoverSheetSlidingViewController setCompletionBlock:]
  -[SBCoverSheetSlidingViewController completionBlock]
  -[SBCoverSheetSlidingViewController participantState]
  -[SBCoverSheetSlidingViewController setHomeGestureSettings:]
  -[SBCoverSheetSlidingViewController viewDidAppear:]
  -[SBCoverSheetSlidingViewController viewWillAppear:]
  -[SBCoverSheetSlidingViewController _canShowWhileLocked]
  -[SBCoverSheetSlidingViewController setDelegate:]
  -[SBCoverSheetSlidingViewController invalidate]
  -[SBCoverSheetSlidingViewController viewDidLayoutSubviews]
  -[SBCoverSheetSlidingViewController delegate]
  -[SBCoverSheetSlidingViewController contentViewController]
  -[SBCoverSheetSlidingViewController loadView]


SBAppBrightnessMetric : SBAWDMetric
  // instance methods
  -[SBAppBrightnessMetric dataClass]
  -[SBAppBrightnessMetric metricID]
  -[SBAppBrightnessMetric postWithDataBuilder:]
  -[SBAppBrightnessMetric configureWithData:]


SBAppBrightnessMetricData : SBAWDMetricData
 @property  NSString *appBundleID
 @property  unsigned long brightness
 @property  unsigned long duration

  // instance methods
  -[SBAppBrightnessMetricData brightness]
  -[SBAppBrightnessMetricData .cxx_destruct]
  -[SBAppBrightnessMetricData appBundleID]
  -[SBAppBrightnessMetricData setDuration:]
  -[SBAppBrightnessMetricData setAppBundleID:]
  -[SBAppBrightnessMetricData setBrightness:]
  -[SBAppBrightnessMetricData duration]


SBElasticVolumeViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <UIGestureRecognizerDelegate, PTSettingsKeyObserver, SBHUDViewControlling>
 @property  SBVolumeHUDSettings *settings
 @property  BOOL isSliderTracking
 @property  BOOL volumeUpButtonIsDown
 @property  BOOL volumeDownButtonIsDown
 @property  SBElasticSliderView *sliderView
 @property  unsigned long axis
 @property  <SBElasticAudioDataSource> *dataSource
 @property  <SBElasticAudioVolumeViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBElasticVolumeViewController _beginTrackingWithGestureRecognizer:]
  -[SBElasticVolumeViewController viewDidLoad]
  -[SBElasticVolumeViewController _endTrackingWithGestureRecognizer:]
  -[SBElasticVolumeViewController settings:changedValueForKey:]
  -[SBElasticVolumeViewController axis]
  -[SBElasticVolumeViewController reloadData]
  -[SBElasticVolumeViewController setDataSource:]
  -[SBElasticVolumeViewController init]
  -[SBElasticVolumeViewController sliderView]
  -[SBElasticVolumeViewController dealloc]
  -[SBElasticVolumeViewController .cxx_destruct]
  -[SBElasticVolumeViewController gestureRecognizerShouldBegin:]
  -[SBElasticVolumeViewController viewWillLayoutSubviews]
  -[SBElasticVolumeViewController supportedInterfaceOrientations]
  -[SBElasticVolumeViewController _reloadData]
  -[SBElasticVolumeViewController _reduceMotionStatusDidChange]
  -[SBElasticVolumeViewController currentVolume]
  -[SBElasticVolumeViewController viewDidAppear:]
  -[SBElasticVolumeViewController _continueTrackingWithGestureRecognizer:]
  -[SBElasticVolumeViewController settings]
  -[SBElasticVolumeViewController activeAudioRouteTypes]
  -[SBElasticVolumeViewController dataSource]
  -[SBElasticVolumeViewController viewWillAppear:]
  -[SBElasticVolumeViewController _canShowWhileLocked]
  -[SBElasticVolumeViewController setDelegate:]
  -[SBElasticVolumeViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBElasticVolumeViewController viewDidDisappear:]
  -[SBElasticVolumeViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBElasticVolumeViewController delegate]
  -[SBElasticVolumeViewController loadView]
  -[SBElasticVolumeViewController definesAnimatedDismissal]
  -[SBElasticVolumeViewController dismissAnimatedWithCompletion:]
  -[SBElasticVolumeViewController noteVolumeUpWasHit:]
  -[SBElasticVolumeViewController noteVolumeDownWasHit:]
  -[SBElasticVolumeViewController noteVolumeWillDeltaStepToVolume:]
  -[SBElasticVolumeViewController _anyCallActive]
  -[SBElasticVolumeViewController setupFailureRelationshipForGestureRecognizer:]
  -[SBElasticVolumeViewController updateVolumeLevel:]
  -[SBElasticVolumeViewController _handleSliderViewPanGestureRecognizer:]
  -[SBElasticVolumeViewController _handleShortLongPressGestureRecognizer:]
  -[SBElasticVolumeViewController _computeCachedAudioRouteDisplayInformation]
  -[SBElasticVolumeViewController _createHapticFeedbackEngines]
  -[SBElasticVolumeViewController _updateSliderTracking]
  -[SBElasticVolumeViewController _updateForAxisChange:]
  -[SBElasticVolumeViewController _createSprings]
  -[SBElasticVolumeViewController transitionToState:animated:completion:]
  -[SBElasticVolumeViewController _activeCallStatusStateChanged:]
  -[SBElasticVolumeViewController _refreshDebugUI:]
  -[SBElasticVolumeViewController _updateGlyphStateIfNecessaryForVolumeLevel:]
  -[SBElasticVolumeViewController _destroySprings]
  -[SBElasticVolumeViewController _actuallyDismiss]
  -[SBElasticVolumeViewController _invalidateDismissalTimerForReason:]
  -[SBElasticVolumeViewController _updateSliderViewMetricsForState:bounds:integralized:useSpringData:]
  -[SBElasticVolumeViewController _modifySpringsFromState:toState:]
  -[SBElasticVolumeViewController _forciblyResetMinMaxSprings]
  -[SBElasticVolumeViewController _clearLastHitDates]
  -[SBElasticVolumeViewController _updateDimmingVisible:]
  -[SBElasticVolumeViewController _updateLabelsForAxis:containerViewSize:state:animated:]
  -[SBElasticVolumeViewController _updateTouchTrackingView]
  -[SBElasticVolumeViewController isSliderTracking]
  -[SBElasticVolumeViewController _scheduleDismissal:]
  -[SBElasticVolumeViewController _setScaleSpringActiveForVolumeButtonUpdateIfNeeded]
  -[SBElasticVolumeViewController _stretchVolumeSliderForMaximumVolumeUpdateIfNeeded]
  -[SBElasticVolumeViewController _playMaximumVolumeHaptic]
  -[SBElasticVolumeViewController _resetInputForMajorAxisSpring]
  -[SBElasticVolumeViewController _stretchVolumeSliderForMinimumVolumeUpdateIfNeeded]
  -[SBElasticVolumeViewController _playMinimumVolumeHaptic]
  -[SBElasticVolumeViewController _updateVolumeLevelSlider:animated:]
  -[SBElasticVolumeViewController setVolumeUpButtonIsDown:]
  -[SBElasticVolumeViewController transitionStateContextuallyForVolumeChangeEvent]
  -[SBElasticVolumeViewController setVolumeDownButtonIsDown:]
  -[SBElasticVolumeViewController _playTickHapticForSteppedVolume:]
  -[SBElasticVolumeViewController sizeForState:useSpringData:]
  -[SBElasticVolumeViewController glyphScaleForState:]
  -[SBElasticVolumeViewController _changeVolumeLevel:]
  -[SBElasticVolumeViewController _updateAnyCallActive]
  -[SBElasticVolumeViewController _updateEdgeFeedbackParametersForMaxVolume:]
  -[SBElasticVolumeViewController hudPresentationOrientation]
  -[SBElasticVolumeViewController _isStateChangeAllowedFrom:toState:]
  -[SBElasticVolumeViewController _updateDebugUIPositions]
  -[SBElasticVolumeViewController _beginDeflatorDismissalSpringAnimation]
  -[SBElasticVolumeViewController _animateFromState:toState:animations:completion:]
  -[SBElasticVolumeViewController _dismissalTimerFired:]
  -[SBElasticVolumeViewController _noteSliderViewDidBeginTracking]
  -[SBElasticVolumeViewController _noteSliderViewDidEndTracking]
  -[SBElasticVolumeViewController changeVolumeLevel:animated:]
  -[SBElasticVolumeViewController _updateViewsWithSpringData]
  -[SBElasticVolumeViewController _completeDeflatorDismissalSpringAnimation]
  -[SBElasticVolumeViewController centerForState:containerViewSize:bounds:useSpringData:]
  -[SBElasticVolumeViewController _updateSliderViewToCenter:size:integralized:continuousCornerRadius:]
  -[SBElasticVolumeViewController _debugDump:]
  -[SBElasticVolumeViewController _debugNextAudioRoute:]
  -[SBElasticVolumeViewController _debugResetAudioRoute:]
  -[SBElasticVolumeViewController _debugChangingStateFromSegmentedControl:]
  -[SBElasticVolumeViewController _debugAutoDismissalSwitchValueChanged:]
  -[SBElasticVolumeViewController _debugLockStateSwitchValueChanged:]
  -[SBElasticVolumeViewController _debugDimensionSliderValueDidChange:]
  -[SBElasticVolumeViewController shouldShowHighVolumeWarningForCurrentVolume]
  -[SBElasticVolumeViewController _updateSliderViewMetricsForState:bounds:integralized:useSizeSpringData:useCenterSpringData:]
  -[SBElasticVolumeViewController cornerRadiusForState:useSpringData:]
  -[SBElasticVolumeViewController maximumSizeForSlider]
  -[SBElasticVolumeViewController _markVolumeUpdateInRunningListOfVolumesUpdates:]
  -[SBElasticVolumeViewController _volumeUpdateIsMaximumOfPotentialVolumeUpdates]
  -[SBElasticVolumeViewController _volumeUpdateIsMinimumOfPotentialVolumeUpdates]
  -[SBElasticVolumeViewController activeAudioCategory]
  -[SBElasticVolumeViewController _updateDebugString:]
  -[SBElasticVolumeViewController volumeUpButtonIsDown]
  -[SBElasticVolumeViewController volumeDownButtonIsDown]


SBApplicationShortcutService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationServerShortcutDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationShortcutService sharedInstance]

  // instance methods
  -[SBApplicationShortcutService init]
  -[SBApplicationShortcutService .cxx_destruct]
  -[SBApplicationShortcutService _sanitizeApplicationShortcutItems:withEntitlements:]
  -[SBApplicationShortcutService applicationServer:client:setDynamicApplicationShortcutItems:forBundleIdentifier:]
  -[SBApplicationShortcutService applicationServer:client:fetchApplicationShortcutItemsOfTypes:forBundleIdentifier:withCompletion:]
  -[SBApplicationShortcutService _authenticateClient:forBundleIdentifier:withCompletionHandler:]
  -[SBApplicationShortcutService _checkEntitlementsForClient:withCompletionHandler:]


SBDashBoardEmergencyDialerController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <PTSettingsKeyObserver, CSEmergencyCalling, SBLockScreenCallHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardEmergencyDialerController settings:changedValueForKey:]
  -[SBDashBoardEmergencyDialerController isMakingEmergencyCall]
  -[SBDashBoardEmergencyDialerController dealloc]
  -[SBDashBoardEmergencyDialerController launchEmergencyDialer]
  -[SBDashBoardEmergencyDialerController .cxx_destruct]
  -[SBDashBoardEmergencyDialerController initWithCoverSheetViewController:]
  -[SBDashBoardEmergencyDialerController exitEmergencyDialerAnimated:]
  -[SBDashBoardEmergencyDialerController launchEmergencyDialerAnimated:]
  -[SBDashBoardEmergencyDialerController emergencyDialerExitedWithError:]


SBSystemStatusBatteryDataProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BCBatteryDeviceObserving, BSInvalidatable>
 @property  STBatteryStatusDomainPublisher *batteryDataPublisher
 @property  BCBatteryDeviceController *batteryDeviceController
 @property  BOOL shouldExposeNotChargingState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemStatusBatteryDataProvider _registerForNotifications]
  -[SBSystemStatusBatteryDataProvider init]
  -[SBSystemStatusBatteryDataProvider dealloc]
  -[SBSystemStatusBatteryDataProvider .cxx_destruct]
  -[SBSystemStatusBatteryDataProvider setShouldExposeNotChargingState:]
  -[SBSystemStatusBatteryDataProvider shouldExposeNotChargingState]
  -[SBSystemStatusBatteryDataProvider batteryDeviceController]
  -[SBSystemStatusBatteryDataProvider _updateShouldExposeNotChargingState]
  -[SBSystemStatusBatteryDataProvider _noteNotChargingStatusChanged]
  -[SBSystemStatusBatteryDataProvider _isInNotChargingState]
  -[SBSystemStatusBatteryDataProvider _updateData]
  -[SBSystemStatusBatteryDataProvider invalidate]
  -[SBSystemStatusBatteryDataProvider connectedDevicesDidChange:]
  -[SBSystemStatusBatteryDataProvider batteryDataPublisher]


SBInteractiveScreenshotGestureHostWindow : SBIgnoredForAutorotationSecureWindow
  // class methods
  +[SBInteractiveScreenshotGestureHostWindow sb_autorotates]

  // instance methods
  -[SBInteractiveScreenshotGestureHostWindow _canBecomeKeyWindow]
  -[SBInteractiveScreenshotGestureHostWindow hitTest:withEvent:]


_SBApplicationLaunchAlertInfo : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[_SBApplicationLaunchAlertInfo .cxx_destruct]


SBApplicationLaunchAlertService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, SBSceneManagerObserver, FBSceneObserver, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationLaunchAlertService sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBApplicationLaunchAlertService sceneContentStateDidChange:]
  -[SBApplicationLaunchAlertService init]
  -[SBApplicationLaunchAlertService _sceneWillBecomeForeground:]
  -[SBApplicationLaunchAlertService dealloc]
  -[SBApplicationLaunchAlertService .cxx_destruct]
  -[SBApplicationLaunchAlertService sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBApplicationLaunchAlertService succinctDescriptionBuilder]
  -[SBApplicationLaunchAlertService _invalidateAndDismissLaunchAlertsForLaunchAlertInfo:]
  -[SBApplicationLaunchAlertService succinctDescription]
  -[SBApplicationLaunchAlertService _reallyShowLaunchAlertOfType:withLaunchAlertInfo:application:]
  -[SBApplicationLaunchAlertService invalidate]
  -[SBApplicationLaunchAlertService _tryShowLaunchAlertsForLaunchAlertInfo:]
  -[SBApplicationLaunchAlertService descriptionWithMultilinePrefix:]
  -[SBApplicationLaunchAlertService _sceneDidResignForeground:]
  -[SBApplicationLaunchAlertService initObservingSceneManagers:launchAlertEvaluators:applicationController:alertItemsController:]
  -[SBApplicationLaunchAlertService showLaunchAlertOfType:forApplication:]
  -[SBApplicationLaunchAlertService _sceneDidBecomeForeground:]
  -[SBApplicationLaunchAlertService descriptionBuilderWithMultilinePrefix:]


SBHomeScreenService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSServiceConnectionListenerDelegate, SBSHomeScreenServiceClientToServerInterface>
 @property  SBIconController *iconController
 @property  FBServiceClientAuthenticator *resetHomeScreenLayoutAuthenticator
 @property  FBServiceClientAuthenticator *requestSuggestedAppAuthenticator
 @property  FBServiceClientAuthenticator *iconFolderPathLookupAuthenticator
 @property  FBServiceClientAuthenticator *addWidgetToTodayViewAuthenticator
 @property  FBServiceClientAuthenticator *lowDensityLayoutAuthenticator
 @property  FBServiceClientAuthenticator *addsNewIconsToHomeScreenAuthenticator
 @property  FBServiceClientAuthenticator *showsBadgesInAppLibraryAuthenticator
 @property  FBServiceClientAuthenticator *homeScreenBundleIdentifiersAuthenticator
 @property  FBServiceClientAuthenticator *appLibraryRequestUpdateAuthenticator
 @property  FBServiceClientAuthenticator *displayedDateAuthenticator
 @property  FBServiceClientAuthenticator *configurationAuthenticator
 @property  NSMutableSet *activeConnections
 @property  BSServiceConnectionListener *connectionListener
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSNumber *lowDensityIconLayoutEnabledValue
 @property  NSNumber *addsNewIconsToHomeScreenValue
 @property  NSNumber *showsBadgesInAppLibraryValue
 @property  NSArray *allHomeScreenApplicationBundleIdentifiers
 @property  NSArray *allHomeScreenApplicationPlaceholderBundleIdentifiers

  // instance methods
  -[SBHomeScreenService connectionListener]
  -[SBHomeScreenService iconController]
  -[SBHomeScreenService reloadIcons]
  -[SBHomeScreenService runDownloadingIconTest]
  -[SBHomeScreenService runFloatingDockStressTestWithCompletion:]
  -[SBHomeScreenService initWithIconController:]
  -[SBHomeScreenService displayedDateAuthenticator]
  -[SBHomeScreenService setShowsBadgesInAppLibraryValue:]
  -[SBHomeScreenService activeConnections]
  -[SBHomeScreenService runRemoveAndRestoreIconTest]
  -[SBHomeScreenService addsNewIconsToHomeScreenAuthenticator]
  -[SBHomeScreenService configureDeweyOneCategoryWithAllApps]
  -[SBHomeScreenService .cxx_destruct]
  -[SBHomeScreenService allHomeScreenApplicationPlaceholderBundleIdentifiers]
  -[SBHomeScreenService listener:didReceiveConnection:withContext:]
  -[SBHomeScreenService overrideBadgeValue:forBundleIdentifier:]
  -[SBHomeScreenService requestSuggestedAppAuthenticator]
  -[SBHomeScreenService appLibraryRequestUpdateAuthenticator]
  -[SBHomeScreenService organizeAllIconsAcrossPagesWithPageCount:]
  -[SBHomeScreenService iconFolderPathLookupAuthenticator]
  -[SBHomeScreenService resetHomeScreenLayoutWithCompletion:]
  -[SBHomeScreenService setAddsNewIconsToHomeScreenValue:]
  -[SBHomeScreenService debugContinuityWithBadgeType:]
  -[SBHomeScreenService resetCategoriesLayoutWithCompletion:]
  -[SBHomeScreenService folderPathToIconWithBundleIdentifier:]
  -[SBHomeScreenService addWidgetToTodayViewWithBundleIdentifier:]
  -[SBHomeScreenService configureDeweyEachAppHasItsOwnCategory]
  -[SBHomeScreenService homeScreenBundleIdentifiersAuthenticator]
  -[SBHomeScreenService changeDisplayedDateOffsetOverride:]
  -[SBHomeScreenService showsBadgesInAppLibraryAuthenticator]
  -[SBHomeScreenService hasWidgetWithBundleIdentifier:]
  -[SBHomeScreenService changeDisplayedDateOverride:]
  -[SBHomeScreenService ignoreAllApps]
  -[SBHomeScreenService setLowDensityIconLayoutEnabledValue:]
  -[SBHomeScreenService _requestAppLibraryUpdate:reason:optionalCompletionHandler:]
  -[SBHomeScreenService lowDensityIconLayoutEnabledValue]
  -[SBHomeScreenService showsBadgesInAppLibraryValue]
  -[SBHomeScreenService refreshAppLibrary:reason:]
  -[SBHomeScreenService requestAppLibraryUpdate:reason:completion:]
  -[SBHomeScreenService removeAllWidgets]
  -[SBHomeScreenService requestSuggestedApplicationWithBundleIdentifier:assertionPort:completion:]
  -[SBHomeScreenService forbidApplicationBundleIdentifierFromLibrary:withCompletion:]
  -[SBHomeScreenService addsNewIconsToHomeScreenValue]
  -[SBHomeScreenService addWidgetToTodayViewAuthenticator]
  -[SBHomeScreenService configurationAuthenticator]
  -[SBHomeScreenService lowDensityLayoutAuthenticator]
  -[SBHomeScreenService unforbidApplicationBundleIdentifierFromLibrary:withCompletion:]
  -[SBHomeScreenService allHomeScreenApplicationBundleIdentifiers]
  -[SBHomeScreenService organizeAllIconsIntoFoldersWithPageCount:]
  -[SBHomeScreenService configureCategoryMapProviderToUseCategoryMapAtURL:]
  -[SBHomeScreenService resetHomeScreenLayoutAuthenticator]


SBEntityRemovalToHomeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenBackdropBlurType]
  -[SBEntityRemovalToHomeSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBEntityRemovalToHomeSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenAlpha]
  -[SBEntityRemovalToHomeSwitcherModifier isHomeScreenContentRequired]
  -[SBEntityRemovalToHomeSwitcherModifier wantsDockBehaviorAssertion]
  -[SBEntityRemovalToHomeSwitcherModifier isSwitcherWindowVisible]
  -[SBEntityRemovalToHomeSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalToHomeSwitcherModifier wallpaperStyle]
  -[SBEntityRemovalToHomeSwitcherModifier cardCornerRadiiForIndex:]
  -[SBEntityRemovalToHomeSwitcherModifier opacityForIndex:]
  -[SBEntityRemovalToHomeSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBEntityRemovalToHomeSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBEntityRemovalToHomeSwitcherModifier dockProgress]
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenDimmingAlpha]
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBEntityRemovalToHomeSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalToHomeSwitcherModifier dockUpdateMode]
  -[SBEntityRemovalToHomeSwitcherModifier homeScreenScale]
  -[SBEntityRemovalToHomeSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBEntityRemovalToHomeSwitcherModifier transitionWillBegin]
  -[SBEntityRemovalToHomeSwitcherModifier wallpaperScale]
  -[SBEntityRemovalToHomeSwitcherModifier transitionWillUpdate]
  -[SBEntityRemovalToHomeSwitcherModifier handleTimerEvent:]
  -[SBEntityRemovalToHomeSwitcherModifier isContainerStatusBarVisible]
  -[SBEntityRemovalToHomeSwitcherModifier initWithTransitionID:homeAnimationDelay:multitaskingModifier:]
  -[SBEntityRemovalToHomeSwitcherModifier _cornerRadiusSettings]
  -[SBEntityRemovalToHomeSwitcherModifier isContentStatusBarVisible]


SBLockScreenDisabledAssertionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBAutoUnlockRule>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenDisabledAssertionManager shouldAutoUnlockForSource:]
  -[SBLockScreenDisabledAssertionManager init]
  -[SBLockScreenDisabledAssertionManager removeLockScreenDisableAssertion:]
  -[SBLockScreenDisabledAssertionManager .cxx_destruct]
  -[SBLockScreenDisabledAssertionManager isLockScreenDisabledForAssertion]
  -[SBLockScreenDisabledAssertionManager addLockScreenDisableAssertion:]


SBLoginAppContainerPluginWrapperView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBLoginAppContainerPluginWrapperView .cxx_destruct]
  -[SBLoginAppContainerPluginWrapperView layoutSubviews]
  -[SBLoginAppContainerPluginWrapperView initWithFrame:overlayWrapperView:pluginView:]


SBLoginAppContainerPluginWrapperViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBLockScreenPlugin *plugin

  // instance methods
  -[SBLoginAppContainerPluginWrapperViewController handleVolumeDownButtonPress]
  -[SBLoginAppContainerPluginWrapperViewController handleVolumeUpButtonPress]
  -[SBLoginAppContainerPluginWrapperViewController .cxx_destruct]
  -[SBLoginAppContainerPluginWrapperViewController plugin]
  -[SBLoginAppContainerPluginWrapperViewController initWithPlugin:]
  -[SBLoginAppContainerPluginWrapperViewController loadView]


SBNCAlertingController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NCAlertingController>
 @property  SBNCSoundController *soundController
 @property  SBNCScreenController *screenController
 @property  SBLockScreenManager *lockScreenManager
 @property  SBCommunicationPolicyManager *communicationPolicyManager
 @property  NCNotificationRequest *activeRequestWithRealerts
 @property  NSMutableSet *realertTimers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNCAlertingController _lockStateChanged]
  -[SBNCAlertingController lockScreenManager]
  -[SBNCAlertingController init]
  -[SBNCAlertingController screenController]
  -[SBNCAlertingController _shouldScreenTimeSuppressNotificationRequest:]
  -[SBNCAlertingController resetAutomaticLockStateForNotificationRequest:]
  -[SBNCAlertingController realertTimers]
  -[SBNCAlertingController alertOnPresentationForNotificationRequest:presentingDestination:]
  -[SBNCAlertingController _activeAlertDestinationsInRequestDestinations:]
  -[SBNCAlertingController .cxx_destruct]
  -[SBNCAlertingController _shouldScreenTimeSuppressNotificationsForBundleIdentifier:]
  -[SBNCAlertingController killAlertsForNotificationRequest:]
  -[SBNCAlertingController _scheduleRealertsForNotificationRequest:]
  -[SBNCAlertingController communicationPolicyManager]
  -[SBNCAlertingController soundController]
  -[SBNCAlertingController setScreenController:]
  -[SBNCAlertingController setCommunicationPolicyManager:]
  -[SBNCAlertingController killRealerts]
  -[SBNCAlertingController setActiveRequestWithRealerts:]
  -[SBNCAlertingController _isBundleIdentifierBlockedForScreenTimeExpiration:]
  -[SBNCAlertingController _alertNowForNotificationRequest:]
  -[SBNCAlertingController initWithSoundController:screenController:lockScreenManager:communicationPolicyManager:]
  -[SBNCAlertingController _isBundleIdentifierBlockedForCommunicationPolicy:]
  -[SBNCAlertingController _shouldRealert]
  -[SBNCAlertingController _realertTimerFired:]
  -[SBNCAlertingController _hardwareButtonPressed:]
  -[SBNCAlertingController setRealertTimers:]
  -[SBNCAlertingController _alertNowForNotificationRequest:presentingDestination:]
  -[SBNCAlertingController _notificationCenterDidPresent]
  -[SBNCAlertingController alertOnPostForNotificationRequest:forRequestDestinations:]
  -[SBNCAlertingController _killRealertsForNotificationRequest:]
  -[SBNCAlertingController setSoundController:]
  -[SBNCAlertingController setLockScreenManager:]
  -[SBNCAlertingController activeRequestWithRealerts]


SBControlCenterModuleTransientOverlayViewController : SBTransientOverlayViewController <CCUIModuleAlertViewControllerDelegate>
 @property  <SBControlCenterModuleTransientOverlayViewControllerDelegate> *delegate
 @property  CCSModulePresentationOptions *presentationOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBControlCenterModuleTransientOverlayViewController viewDidLoad]
  -[SBControlCenterModuleTransientOverlayViewController handleHomeButtonPress]
  -[SBControlCenterModuleTransientOverlayViewController init]
  -[SBControlCenterModuleTransientOverlayViewController _shouldBlurBackground]
  -[SBControlCenterModuleTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBControlCenterModuleTransientOverlayViewController shouldDisableControlCenter]
  -[SBControlCenterModuleTransientOverlayViewController .cxx_destruct]
  -[SBControlCenterModuleTransientOverlayViewController presentationOptions]
  -[SBControlCenterModuleTransientOverlayViewController supportedInterfaceOrientations]
  -[SBControlCenterModuleTransientOverlayViewController initWithNibName:bundle:]
  -[SBControlCenterModuleTransientOverlayViewController _dismiss]
  -[SBControlCenterModuleTransientOverlayViewController _canShowWhileLocked]
  -[SBControlCenterModuleTransientOverlayViewController setDelegate:]
  -[SBControlCenterModuleTransientOverlayViewController delegate]
  -[SBControlCenterModuleTransientOverlayViewController initWithCoder:]
  -[SBControlCenterModuleTransientOverlayViewController contentModuleAlertViewControllerNeedsDismissal:]
  -[SBControlCenterModuleTransientOverlayViewController initWithModuleIdentifier:presentationOptions:]
  -[SBControlCenterModuleTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBControlCenterModuleTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBControlCenterModuleTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBControlCenterModuleTransientOverlayViewController handleGestureDismissal]
  -[SBControlCenterModuleTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBControlCenterModuleTransientOverlayViewController shouldDisableOrientationUpdates]
  -[SBControlCenterModuleTransientOverlayViewController _animateTransitionFromViewController:toViewController:containerView:isAnimated:otherAnimations:completion:]


SBDockSuggestionsIconListView : SBFloatingDockIconListView /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices

SBFloatingDockSuggestionsViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBFloatingDockSuggestionsModelDelegate, SBLayoutStateTransitionObserver, SBIconViewProviding, SBFloatingDockSuggestionsViewProviding, SBIconViewQuerying>
 @property  SBIconController *iconController
 @property  SBApplicationController *applicationController
 @property  SBRecentDisplayItemsDataStore *recentsDataStore
 @property  SBRecentDisplayItemsDefaults *recentsDefaults
 @property  SBAppSuggestionManager *appSuggestionManager
 @property  SBIconListModel *suggestionsIconListModel
 @property  SBFloatingDockSuggestionsModel *suggestionsModel
 @property  NSMutableArray *deferredIconUpdates
 @property  SBLayoutStateTransitionCoordinator *layoutStateTransitionCoordinator
 @property  long long effectiveEnvironmentMode
 @property  BOOL visible
 @property  <SBIconViewProviding> *iconViewProvider
 @property  SBDockIconListView *listView
 @property  <SBFloatingDockSuggestionsViewControllerDelegate> *delegate
 @property  unsigned long numberOfRecents
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBFloatingDockViewController *floatingDockViewController
 @property  NSSet *presentedIconLocations

  // instance methods
  -[SBFloatingDockSuggestionsViewController configureIconView:forIcon:]
  -[SBFloatingDockSuggestionsViewController setVisible:]
  -[SBFloatingDockSuggestionsViewController iconController]
  -[SBFloatingDockSuggestionsViewController iconViewForIcon:location:]
  -[SBFloatingDockSuggestionsViewController recycleIconView:]
  -[SBFloatingDockSuggestionsViewController isVisible]
  -[SBFloatingDockSuggestionsViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFloatingDockSuggestionsViewController listView]
  -[SBFloatingDockSuggestionsViewController isDisplayingIconView:inLocation:]
  -[SBFloatingDockSuggestionsViewController dealloc]
  -[SBFloatingDockSuggestionsViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFloatingDockSuggestionsViewController .cxx_destruct]
  -[SBFloatingDockSuggestionsViewController dockViewWillBecomeVisible]
  -[SBFloatingDockSuggestionsViewController dockViewWillResignVisible]
  -[SBFloatingDockSuggestionsViewController dockViewDidResignVisible]
  -[SBFloatingDockSuggestionsViewController dockViewDidBecomeVisible]
  -[SBFloatingDockSuggestionsViewController firstIconViewForIcon:]
  -[SBFloatingDockSuggestionsViewController dockFolderWillBeginTransitioning]
  -[SBFloatingDockSuggestionsViewController dockFolderDidEndTransitioning]
  -[SBFloatingDockSuggestionsViewController floatingDockViewController]
  -[SBFloatingDockSuggestionsViewController firstIconViewForIcon:inLocations:]
  -[SBFloatingDockSuggestionsViewController isDisplayingIcon:inLocations:]
  -[SBFloatingDockSuggestionsViewController isDisplayingIconView:]
  -[SBFloatingDockSuggestionsViewController enumerateDisplayedIconViewsForIcon:usingBlock:]
  -[SBFloatingDockSuggestionsViewController initWithNibName:bundle:]
  -[SBFloatingDockSuggestionsViewController presentedIconLocations]
  -[SBFloatingDockSuggestionsViewController enumerateDisplayedIconViewsUsingBlock:]
  -[SBFloatingDockSuggestionsViewController numberOfRecents]
  -[SBFloatingDockSuggestionsViewController isIconViewRecycled:]
  -[SBFloatingDockSuggestionsViewController _iconForDisplayItem:]
  -[SBFloatingDockSuggestionsViewController isDisplayingIcon:inLocation:]
  -[SBFloatingDockSuggestionsViewController setDelegate:]
  -[SBFloatingDockSuggestionsViewController dequeueReusableIconViewOfClass:]
  -[SBFloatingDockSuggestionsViewController isDisplayingIcon:]
  -[SBFloatingDockSuggestionsViewController firstIconViewForIcon:excludingLocations:]
  -[SBFloatingDockSuggestionsViewController delegate]
  -[SBFloatingDockSuggestionsViewController iconViewProvider]
  -[SBFloatingDockSuggestionsViewController loadView]
  -[SBFloatingDockSuggestionsViewController isPresentingIconLocation:]
  -[SBFloatingDockSuggestionsViewController setFloatingDockViewController:]
  -[SBFloatingDockSuggestionsViewController applicationController]
  -[SBFloatingDockSuggestionsViewController setListView:]
  -[SBFloatingDockSuggestionsViewController layoutStateTransitionCoordinator]
  -[SBFloatingDockSuggestionsViewController suggestionsModel]
  -[SBFloatingDockSuggestionsViewController _placeholdersDidChange:]
  -[SBFloatingDockSuggestionsViewController _iconModelDidChange:]
  -[SBFloatingDockSuggestionsViewController _listLayoutDidChange:]
  -[SBFloatingDockSuggestionsViewController initWithNumberOfRecents:iconController:applicationController:layoutStateTransitionCoordinator:suggestionsModel:iconViewProvider:]
  -[SBFloatingDockSuggestionsViewController _loadAndPlaceIconsInViewForDisplayItems:]
  -[SBFloatingDockSuggestionsViewController _performDeferredIconUpdates]
  -[SBFloatingDockSuggestionsViewController _onHomescreen]
  -[SBFloatingDockSuggestionsViewController _shouldDeferUpdateInvolvingContinuity:]
  -[SBFloatingDockSuggestionsViewController _emitPresentedEventInvolvingContinuity:fromModel:atIndex:]
  -[SBFloatingDockSuggestionsViewController _fadeInIcon:isReplacing:completion:]
  -[SBFloatingDockSuggestionsViewController _didChangeNumberOfIcons]
  -[SBFloatingDockSuggestionsViewController _performOrDefer:iconUpdate:]
  -[SBFloatingDockSuggestionsViewController _fadeOutIcon:atIndex:isReplacing:completion:]
  -[SBFloatingDockSuggestionsViewController _swapIcon:forPlaceholders:]
  -[SBFloatingDockSuggestionsViewController dockSuggestionsModel:didInsertItem:atIndex:involvesContinuity:]
  -[SBFloatingDockSuggestionsViewController dockSuggestionsModel:didRemoveItem:atIndex:involvesContinuity:]
  -[SBFloatingDockSuggestionsViewController dockSuggestionsModel:didReplaceItem:atIndex:withItem:atIndex:involvesContinuity:]
  -[SBFloatingDockSuggestionsViewController dockSuggestionsModel:didReloadItems:withItems:]
  -[SBFloatingDockSuggestionsViewController recentsDataStore]
  -[SBFloatingDockSuggestionsViewController recentsDefaults]
  -[SBFloatingDockSuggestionsViewController appSuggestionManager]
  -[SBFloatingDockSuggestionsViewController suggestionsIconListModel]
  -[SBFloatingDockSuggestionsViewController deferredIconUpdates]
  -[SBFloatingDockSuggestionsViewController setDeferredIconUpdates:]
  -[SBFloatingDockSuggestionsViewController setLayoutStateTransitionCoordinator:]
  -[SBFloatingDockSuggestionsViewController effectiveEnvironmentMode]
  -[SBFloatingDockSuggestionsViewController setEffectiveEnvironmentMode:]


SBDeviceApplicationSceneClassicAccessoryView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <BSInvalidatable>
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  long long buttonOrientation
 @property  <SBDeviceApplicationSceneClassicAccessoryViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneClassicAccessoryView sceneHandle]
  -[SBDeviceApplicationSceneClassicAccessoryView dealloc]
  -[SBDeviceApplicationSceneClassicAccessoryView .cxx_destruct]
  -[SBDeviceApplicationSceneClassicAccessoryView _sceneHandleDidUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDeviceApplicationSceneClassicAccessoryView setDelegate:]
  -[SBDeviceApplicationSceneClassicAccessoryView _sceneHandleDidUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationSceneClassicAccessoryView invalidate]
  -[SBDeviceApplicationSceneClassicAccessoryView delegate]
  -[SBDeviceApplicationSceneClassicAccessoryView layoutSubviews]
  -[SBDeviceApplicationSceneClassicAccessoryView _isZoomed]
  -[SBDeviceApplicationSceneClassicAccessoryView _updateZoomButton]
  -[SBDeviceApplicationSceneClassicAccessoryView _changeZoom:]
  -[SBDeviceApplicationSceneClassicAccessoryView _setupPositioningAndRotationForInterfaceOrientation:offscreen:]
  -[SBDeviceApplicationSceneClassicAccessoryView _updateZoomButtonVisibilityAnimated:]
  -[SBDeviceApplicationSceneClassicAccessoryView _zoomButtonShouldBeVisible]
  -[SBDeviceApplicationSceneClassicAccessoryView _updateOrientationFrom:toOrientation:animationSettings:]
  -[SBDeviceApplicationSceneClassicAccessoryView initWithFrame:sceneHandle:]
  -[SBDeviceApplicationSceneClassicAccessoryView buttonOrientation]
  -[SBDeviceApplicationSceneClassicAccessoryView setButtonOrientation:]


SBSoftwareUpdateService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemServiceServerSoftwareUpdateDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSoftwareUpdateService sharedInstance]

  // instance methods
  -[SBSoftwareUpdateService .cxx_destruct]
  -[SBSoftwareUpdateService _init]
  -[SBSoftwareUpdateService systemServiceServer:client:setPasscodePolicy:]
  -[SBSoftwareUpdateService systemServiceServer:client:passcodePolicy:]


SBCommandTabWindow : SBWindow
  // instance methods
  -[SBCommandTabWindow _canBecomeKeyWindow]


SBCommandTabController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBCommandTabViewControllerDelegate, SBRecentDisplayItemsControllerDelegate, SBRecentDisplayItemsPersistenceDelegate>
 @property  SBWindow *window
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBCommandTabController sharedInstance]
  +[SBCommandTabController sharedInstanceIfExists]
  +[SBCommandTabController keyCommands]

  // instance methods
  -[SBCommandTabController next]
  -[SBCommandTabController window]
  -[SBCommandTabController previous]
  -[SBCommandTabController isVisible]
  -[SBCommandTabController init]
  -[SBCommandTabController dismiss]
  -[SBCommandTabController dealloc]
  -[SBCommandTabController .cxx_destruct]
  -[SBCommandTabController _clearTimer]
  -[SBCommandTabController launchCurrentSelectedApplication]
  -[SBCommandTabController removeCurrentSelectedApplication]
  -[SBCommandTabController activateWithKeyCommand:]
  -[SBCommandTabController recentDisplayItemsController:shouldAddItem:]
  -[SBCommandTabController recentDisplayItemsControllerDidUpdateDisplayItems:]
  -[SBCommandTabController recentDisplayItemsController:didRemoveItem:]
  -[SBCommandTabController _allowAppToAppearWhileHidden:]
  -[SBCommandTabController _disallowAppFromAppearingWhileHidden:]
  -[SBCommandTabController _activateWithForwardDirection:]
  -[SBCommandTabController _showWindow:]
  -[SBCommandTabController viewController:selectedApplicationWithDisplayItem:]
  -[SBCommandTabController _emitAnalyticsEventForDisplayItem:]
  -[SBCommandTabController _showCommandTabBarAfterTimer:]
  -[SBCommandTabController viewControllerWantsDismissal:]
  -[SBCommandTabController persistedDisplayItemsForDataStore:]
  -[SBCommandTabController dataStore:persistDisplayItems:]
  -[SBCommandTabController dataStore:shouldRestorePersistedDisplayItem:]


SBInCallPresentationSession : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationSceneHandleUpdateContributing, SBBannerUnfurlSourceContextProviding, SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneStatusBarStateObserver, SBInCallBannerPresentableViewControllerDelegate, SBInCallTransientOverlayViewControllerDelegate, SBSceneHandleActionConsuming, SBWorkspaceApplicationSceneTransitionContextDelegate, SBLayoutStateTransitionObserver, SBUIActiveOrientationObserver, BSInvalidatable, SBApplicationHosting>
 @property  <SBInCallPresentationSessionDelegate> *delegate
 @property  double preferredBannerHeight
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  BOOL supportsHandlingDeviceLock
 @property  BOOL disallowsLockHardwareButtonDoublePress
 @property  BOOL supportsBecomingVisibleWhenWakingDisplay
 @property  BOOL shouldIgnoreHomeIndicatorAutoHiddenClientSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallPresentationSession isHostingAnApp]
  -[SBInCallPresentationSession hostedAppSceneHandle]
  -[SBInCallPresentationSession canHostAnApp]
  -[SBInCallPresentationSession conformsToSBApplicationHosting]
  -[SBInCallPresentationSession activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBInCallPresentationSession hostedAppWillRotateToInterfaceOrientation:]
  -[SBInCallPresentationSession hostedAppSceneHandles]
  -[SBInCallPresentationSession preferredBannerHeight]
  -[SBInCallPresentationSession setPreferredBannerHeight:]
  -[SBInCallPresentationSession layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBInCallPresentationSession previousLayoutStateForApplicationTransitionContext:]
  -[SBInCallPresentationSession sceneHandle]
  -[SBInCallPresentationSession layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBInCallPresentationSession .cxx_destruct]
  -[SBInCallPresentationSession succinctDescriptionBuilder]
  -[SBInCallPresentationSession supportsBecomingVisibleWhenWakingDisplay]
  -[SBInCallPresentationSession succinctDescription]
  -[SBInCallPresentationSession sceneHandle:didDestroyScene:]
  -[SBInCallPresentationSession applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBInCallPresentationSession sceneWithIdentifier:didChangeStatusBarStyleOverridesToSuppressTo:]
  -[SBInCallPresentationSession layoutStateForApplicationTransitionContext:]
  -[SBInCallPresentationSession supportsHandlingDeviceLock]
  -[SBInCallPresentationSession setDelegate:]
  -[SBInCallPresentationSession invalidate]
  -[SBInCallPresentationSession delegate]
  -[SBInCallPresentationSession descriptionWithMultilinePrefix:]
  -[SBInCallPresentationSession activeInterfaceOrientationWillChangeToOrientation:]
  -[SBInCallPresentationSession descriptionBuilderWithMultilinePrefix:]
  -[SBInCallPresentationSession disallowsLockHardwareButtonDoublePress]
  -[SBInCallPresentationSession initWithSceneHandle:screen:sceneManager:workspace:bannerManager:lockScreenManager:deactivationManager:mainSwitcherViewController:backlightController:keyboardFocusController:springBoard:setupManager:]
  -[SBInCallPresentationSession inCallBannerPresentableViewController:viewWillTransitionSizeWithAnimationSettings:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerDidAppear:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerWillAppear:]
  -[SBInCallPresentationSession inCallBannerPresentableViewController:willDisappearWithReason:]
  -[SBInCallPresentationSession inCallBannerPresentableViewController:didDisappearWithReason:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerUserInteractionWillBegin:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerUserInteractionDidEnd:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerCallConnectedStatusChanged:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerDidReceiveTap:]
  -[SBInCallPresentationSession inCallBannerPresentableViewControllerDidCrossDefaultDraggingThreshold:]
  -[SBInCallPresentationSession _applicationProcessDidExit:]
  -[SBInCallPresentationSession _uiLockStateDidChange:]
  -[SBInCallPresentationSession setShouldIgnoreHomeIndicatorAutoHiddenClientSettings:]
  -[SBInCallPresentationSession _currentPresentationModeForLayoutState:]
  -[SBInCallPresentationSession _performBannerToFullScreenPresentationTransitionAnimated:analyticsSource:completion:]
  -[SBInCallPresentationSession _addSystemAnimationDeactivationReason:]
  -[SBInCallPresentationSession _removeSystemAnimationDeactivationReason:]
  -[SBInCallPresentationSession _setBannerPresentationActive:]
  -[SBInCallPresentationSession _performSceneUpdateTransactionWithContext:]
  -[SBInCallPresentationSession _addSystemGestureDeactivationReason:]
  -[SBInCallPresentationSession _removeSystemGestureDeactivationReason:]
  -[SBInCallPresentationSession _setTransientOverlayPresentationActive:]
  -[SBInCallPresentationSession _hasExistingSceneSettingsPresentationModeForLayoutState:]
  -[SBInCallPresentationSession _performTransientOverlayDismissalTransitionAnimated:shouldInsertIntoSwitcherModel:analyticsSource:completion:]
  -[SBInCallPresentationSession _updateKeyboardFocusPreventionAssertionWithLayoutState:]
  -[SBInCallPresentationSession _shouldConsiderScenePrimaryForLayoutState:]
  -[SBInCallPresentationSession _updateAppStatusBarSettingsAssertion]
  -[SBInCallPresentationSession _handleRequestInCallPresentationModeAction:]
  -[SBInCallPresentationSession _performPresentationWithRequestedPresentationMode:isUserInitiated:animated:analyticsSource:completion:]
  -[SBInCallPresentationSession _acquireAssertionForAnalyticsSource:]
  -[SBInCallPresentationSession _presentedBannerBounds]
  -[SBInCallPresentationSession _allowsBannerPresentation]
  -[SBInCallPresentationSession dismissAnimated:shouldFinalizeSceneDestruction:analyticsSource:completion:]
  -[SBInCallPresentationSession _performBannerPresentationTransitionWithAnalyticsSource:completion:]
  -[SBInCallPresentationSession _shouldUseTransientOverlayForFullScreenPresentation]
  -[SBInCallPresentationSession _performTransientOverlayPresentationTransitionAnimated:analyticsSource:completion:]
  -[SBInCallPresentationSession _performSwitcherPresentationTransitionAnimated:isUserInitiated:analyticsSource:completion:]
  -[SBInCallPresentationSession _performBannerToTransientOverlayPresentationTransitionAnimated:analyticsSource:completion:]
  -[SBInCallPresentationSession _updateSceneDeactivationAssertions]
  -[SBInCallPresentationSession _destroySceneEntity]
  -[SBInCallPresentationSession _destroySceneEntityUsingMainEventQueueWithCompletion:]
  -[SBInCallPresentationSession _performBannerDismissalTransitionAnimated:analyticsSource:completion:]
  -[SBInCallPresentationSession _performSwitcherDismissalTransitionAnimated:shouldDestroyScene:analyticsSource:completion:]
  -[SBInCallPresentationSession _sceneSupportsHandlingDeviceLock]
  -[SBInCallPresentationSession _isCallConnectedForScene]
  -[SBInCallPresentationSession _createTransientOverlayViewController]
  -[SBInCallPresentationSession _configureTransitionRequest:forPresentingTransientOverlay:animated:]
  -[SBInCallPresentationSession _performBlockUsingMainEventQueueWithReason:handler:]
  -[SBInCallPresentationSession applicationSceneHandle:appendToSceneSettings:fromRequestContext:entity:]
  -[SBInCallPresentationSession applicationSceneHandle:appendToTransitionContext:fromRequestContext:entity:]
  -[SBInCallPresentationSession bannerUnfurlSourceContextForTransitionRequest:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:willAppearAnimated:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:didAppearAnimated:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:willDisappearAnimated:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:didDisappearAnimated:]
  -[SBInCallPresentationSession inCallTransientOverlayViewControllerRequestsDismissal:]
  -[SBInCallPresentationSession inCallTransientOverlayViewController:viewWillTransitionSizeWithAnimationSettings:]
  -[SBInCallPresentationSession sceneHandle:didReceiveAction:]
  -[SBInCallPresentationSession presentWithRequestedPresentationMode:isUserInitiated:animated:analyticsSource:completion:]
  -[SBInCallPresentationSession handleDeviceLockFromSource:completion:]
  -[SBInCallPresentationSession _prepareForTransientOverlayPresentationTransactionWithAnimation:analyticsSource:completion:]
  -[SBInCallPresentationSession shouldIgnoreHomeIndicatorAutoHiddenClientSettings]


SBInCallTransientOverlayPresentationContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  @? requestBuilder

  // instance methods
  -[SBInCallTransientOverlayPresentationContext .cxx_destruct]
  -[SBInCallTransientOverlayPresentationContext initWithRequestBuilder:]
  -[SBInCallTransientOverlayPresentationContext requestBuilder]


SBApplicationSceneBackgroundView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBApplicationSceneBackgroundView>
 @property  BOOL fullscreen
 @property  long long wallpaperStyle
 @property  BOOL needsClassicModeBackground
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationSceneBackgroundView setWallpaperStyle:]
  -[SBApplicationSceneBackgroundView setFullscreen:]
  -[SBApplicationSceneBackgroundView wallpaperStyle]
  -[SBApplicationSceneBackgroundView isFullscreen]
  -[SBApplicationSceneBackgroundView transformOptions]
  -[SBApplicationSceneBackgroundView initWithFrame:]
  -[SBApplicationSceneBackgroundView setTransformOptions:]
  -[SBApplicationSceneBackgroundView _setupBackground]
  -[SBApplicationSceneBackgroundView .cxx_destruct]
  -[SBApplicationSceneBackgroundView setNeedsClassicModeBackground:]
  -[SBApplicationSceneBackgroundView needsClassicModeBackground]
  -[SBApplicationSceneBackgroundView setShouldUseBrightMaterial:]
  -[SBApplicationSceneBackgroundView shouldUseBrightMaterial]


SBExternalDisplayController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSceneLayoutSlaveTransactionProviding>
 @property  FBSDisplayIdentity *displayIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBExternalDisplayController isConnected]
  -[SBExternalDisplayController init]
  -[SBExternalDisplayController dealloc]
  -[SBExternalDisplayController updateWithConfiguration:]
  -[SBExternalDisplayController .cxx_destruct]
  -[SBExternalDisplayController _appProcessStateDidChange:]
  -[SBExternalDisplayController displayIdentity]
  -[SBExternalDisplayController slaveTransactionsForTransitionRequest:]
  -[SBExternalDisplayController initWithMainWorkspace:userAuthenticationProvider:mainDisplaySceneManager:layoutPublisher:displayConfiguration:]
  -[SBExternalDisplayController _authenicationStateDidChange:]
  -[SBExternalDisplayController _handleDisplayConnectIfPossible]
  -[SBExternalDisplayController _runRootUpdateTransactionWithLabel:completion:]
  -[SBExternalDisplayController _runRootTransaction:withLabel:completion:]
  -[SBExternalDisplayController _createUpdateTransactionWithLabel:]
  -[SBExternalDisplayController _expectedForegroundApp]
  -[SBExternalDisplayController _displayConnectShouldWaitForAppRunning:]
  -[SBExternalDisplayController _application:canAccessDisplay:]
  -[SBExternalDisplayController _shouldConnectDisplayNow:]
  -[SBExternalDisplayController disconnectWithCompletion:]


SBNCScreenController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CMPocketStateDelegate, SBIdleTimerResetSource>
 @property  SBBacklightController *backlightController
 @property  SBLockScreenManager *lockScreenManager
 @property  SBLockStateAggregator *lockStateAggregator
 @property  CMPocketStateManager *pocketStateManager
 @property  BOOL turnOnScreenForOutOfPocketEvent
 @property  NSString *powerAssertionName
 @property  unsigned int powerAssertionID
 @property  DNDEventBehaviorResolutionService *dndEventBehaviorResolutionService
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNCScreenController setDndEventBehaviorResolutionService:]
  -[SBNCScreenController lockScreenManager]
  -[SBNCScreenController init]
  -[SBNCScreenController resetAutomaticLockStateForNotificationRequest:]
  -[SBNCScreenController .cxx_destruct]
  -[SBNCScreenController lockStateAggregator]
  -[SBNCScreenController pocketStateManager:didUpdateState:]
  -[SBNCScreenController powerAssertionID]
  -[SBNCScreenController dndEventBehaviorResolutionService]
  -[SBNCScreenController _releasePowerAssertion]
  -[SBNCScreenController setPowerAssertionID:]
  -[SBNCScreenController setLockStateAggregator:]
  -[SBNCScreenController backlightController]
  -[SBNCScreenController _isDeviceUILocked]
  -[SBNCScreenController setLockScreenManager:]
  -[SBNCScreenController setPocketStateManager:]
  -[SBNCScreenController pocketStateManager]
  -[SBNCScreenController turnOnScreenIfPossibleForNotificationRequest:]
  -[SBNCScreenController _turnOnScreenForPocketMode]
  -[SBNCScreenController _turnOnScreen]
  -[SBNCScreenController canTurnOnScreenForNotificationRequest:]
  -[SBNCScreenController turnOnScreenForNotificationRequest:]
  -[SBNCScreenController _turnOnScreenForOutOfPocketEventBeforeTimeInterval:]
  -[SBNCScreenController _createOrResetPowerAssertionWithTimeout:]
  -[SBNCScreenController _cancelTurnOnScreenForOutOfPocketEvents]
  -[SBNCScreenController _turnOnScreenForOutOfPocketEventIfNecessary]
  -[SBNCScreenController initWithBackLightController:lockScreenManager:lockStateAggregator:]
  -[SBNCScreenController setBacklightController:]
  -[SBNCScreenController turnOnScreenForOutOfPocketEvent]
  -[SBNCScreenController setTurnOnScreenForOutOfPocketEvent:]
  -[SBNCScreenController powerAssertionName]
  -[SBNCScreenController setPowerAssertionName:]


SBSceneLayoutWindow : SBWindow
  // class methods
  +[SBSceneLayoutWindow sb_autorotates]

  // instance methods
  -[SBSceneLayoutWindow hitTest:withEvent:]
  -[SBSceneLayoutWindow _layoutController]
  -[SBSceneLayoutWindow referenceCoordinateSpace]
  -[SBSceneLayoutWindow layoutCoordinateSpace]


_SBHostedKeyboardViewController : SBFTouchPassThroughViewController /usr/lib/libutil.dylib
  // instance methods
  -[_SBHostedKeyboardViewController shouldAutorotate]
  -[_SBHostedKeyboardViewController supportedInterfaceOrientations]
  -[_SBHostedKeyboardViewController _canShowWhileLocked]


SBMedusaHostedKeyboardWindow : SBWindow
 @property  NSMutableArray *windowLevelAssertions

  // class methods
  +[SBMedusaHostedKeyboardWindow autorotates]
  +[SBMedusaHostedKeyboardWindow _isSecure]

  // instance methods
  -[SBMedusaHostedKeyboardWindow windowLevelAssertions]
  -[SBMedusaHostedKeyboardWindow setWindowLevelAssertions:]
  -[SBMedusaHostedKeyboardWindow _updateWindowLevel]
  -[SBMedusaHostedKeyboardWindow newWindowLevelAssertionWithPriority:windowLevel:]
  -[SBMedusaHostedKeyboardWindow dealloc]
  -[SBMedusaHostedKeyboardWindow .cxx_destruct]
  -[SBMedusaHostedKeyboardWindow initWithKeyboardScene:]
  -[SBMedusaHostedKeyboardWindow hitTest:withEvent:]
  -[SBMedusaHostedKeyboardWindow isActive]
  -[SBMedusaHostedKeyboardWindow addWindowLevelAssertion:]
  -[SBMedusaHostedKeyboardWindow removeWindowLevelAssertion:]
  -[SBMedusaHostedKeyboardWindow setHidden:]


SBMedusaHostedKeyboardWindowLevelAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  unsigned long priority
 @property  double windowLevel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMedusaHostedKeyboardWindowLevelAssertion dealloc]
  -[SBMedusaHostedKeyboardWindowLevelAssertion .cxx_destruct]
  -[SBMedusaHostedKeyboardWindowLevelAssertion windowLevel]
  -[SBMedusaHostedKeyboardWindowLevelAssertion priority]
  -[SBMedusaHostedKeyboardWindowLevelAssertion invalidate]
  -[SBMedusaHostedKeyboardWindowLevelAssertion initWithMedusaHostedKeyboardWindow:priority:windowLevel:]


SBLockOverlayViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  <SBLockOverlayViewControllerDelegate> *delegate
 @property  BOOL shouldBeHidden

  // instance methods
  -[SBLockOverlayViewController overlayView]
  -[SBLockOverlayViewController .cxx_destruct]
  -[SBLockOverlayViewController setDelegate:]
  -[SBLockOverlayViewController delegate]
  -[SBLockOverlayViewController shouldBeHidden]


SBInCallSceneUpdateWorkspaceTransaction : SBMainWorkspaceTransaction
 @property  @? postSceneUpdateHandler

  // instance methods
  -[SBInCallSceneUpdateWorkspaceTransaction _begin]
  -[SBInCallSceneUpdateWorkspaceTransaction .cxx_destruct]
  -[SBInCallSceneUpdateWorkspaceTransaction initWithApplicationSceneEntity:transitionRequest:]
  -[SBInCallSceneUpdateWorkspaceTransaction setPostSceneUpdateHandler:]
  -[SBInCallSceneUpdateWorkspaceTransaction postSceneUpdateHandler]


SBHarmonySettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  float whitePointAdaptationStrengthStandard
 @property  float whitePointAdaptationStrengthReading
 @property  float whitePointAdaptationStrengthPhoto
 @property  float whitePointAdaptationStrengthVideo
 @property  float whitePointAdaptationStrengthGame
 @property  float whitePointAdaptationUpdateDefaultDuration
 @property  BOOL whitePointAdaptationInteractiveUpdateEnabled
 @property  NSString *whitePointAdaptationInteractiveUpdateTimingFunctionName

  // instance methods
  -[SBHarmonySettings setDefaultValues]
  -[SBHarmonySettings .cxx_destruct]
  -[SBHarmonySettings setWhitePointAdaptationStrengthStandard:]
  -[SBHarmonySettings setWhitePointAdaptationStrengthReading:]
  -[SBHarmonySettings setWhitePointAdaptationStrengthPhoto:]
  -[SBHarmonySettings setWhitePointAdaptationStrengthVideo:]
  -[SBHarmonySettings setWhitePointAdaptationStrengthGame:]
  -[SBHarmonySettings setWhitePointAdaptationUpdateDefaultDuration:]
  -[SBHarmonySettings setWhitePointAdaptationInteractiveUpdateEnabled:]
  -[SBHarmonySettings setWhitePointAdaptationInteractiveUpdateTimingFunctionName:]
  -[SBHarmonySettings whitePointAdaptationStrengthStandard]
  -[SBHarmonySettings whitePointAdaptationStrengthReading]
  -[SBHarmonySettings whitePointAdaptationStrengthPhoto]
  -[SBHarmonySettings whitePointAdaptationStrengthVideo]
  -[SBHarmonySettings whitePointAdaptationStrengthGame]
  -[SBHarmonySettings whitePointAdaptationUpdateDefaultDuration]
  -[SBHarmonySettings whitePointAdaptationInteractiveUpdateEnabled]
  -[SBHarmonySettings whitePointAdaptationInteractiveUpdateTimingFunctionName]


SBAnalyticsStateMachineEdge : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  unsigned long fromState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAnalyticsStateMachineEdge edgeFromState:toState:uponGestureState:andDo:]
  +[SBAnalyticsStateMachineEdge edgeFromState:toState:uponGestureState:]
  +[SBAnalyticsStateMachineEdge edgeFromState:toState:uponEvent:]
  +[SBAnalyticsStateMachineEdge edgeFromState:transition:]

  // instance methods
  -[SBAnalyticsStateMachineEdge handleEvent:withContext:]
  -[SBAnalyticsStateMachineEdge fromState]
  -[SBAnalyticsStateMachineEdge .cxx_destruct]
  -[SBAnalyticsStateMachineEdge succinctDescriptionBuilder]
  -[SBAnalyticsStateMachineEdge succinctDescription]
  -[SBAnalyticsStateMachineEdge initWithFromState:transition:]
  -[SBAnalyticsStateMachineEdge descriptionWithMultilinePrefix:]
  -[SBAnalyticsStateMachineEdge descriptionBuilderWithMultilinePrefix:]


SBCalendarDownloadingIcon : SBDownloadingIcon /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices <SBCalendarIconImageProviderDelegate>
 @property  SBCalendarIconImageProvider *imageProvider

  // class methods
  +[SBCalendarDownloadingIcon canGenerateIconsInBackground]

  // instance methods
  -[SBCalendarDownloadingIcon localeChanged]
  -[SBCalendarDownloadingIcon generateIconImageWithInfo:]
  -[SBCalendarDownloadingIcon imageProvider]
  -[SBCalendarDownloadingIcon .cxx_destruct]
  -[SBCalendarDownloadingIcon initWithDownloadingIconDataSource:]
  -[SBCalendarDownloadingIcon unmaskedIconImageWithInfo:]
  -[SBCalendarDownloadingIcon calendarIconImageProviderHasChanged:]


SBSwitcherToAppTransitionMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherToAppTransitionMetric init]
  -[SBSwitcherToAppTransitionMetric handleEvent:withContext:]
  -[SBSwitcherToAppTransitionMetric .cxx_destruct]


SBBannerGestureRecognizerPriorityAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  BOOL enabled
 @property  long long priority
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBannerGestureRecognizerPriorityAssertion isValidBannerGestureRecognizerPriority:]

  // instance methods
  -[SBBannerGestureRecognizerPriorityAssertion .cxx_destruct]
  -[SBBannerGestureRecognizerPriorityAssertion isEnabled]
  -[SBBannerGestureRecognizerPriorityAssertion setEnabled:]
  -[SBBannerGestureRecognizerPriorityAssertion priority]
  -[SBBannerGestureRecognizerPriorityAssertion invalidate]
  -[SBBannerGestureRecognizerPriorityAssertion reason]
  -[SBBannerGestureRecognizerPriorityAssertion initWithPriority:reason:invalidationHandler:enablementChangeHandler:]


SBLogoutDebugBlockingViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <UITableViewDataSource, UITableViewDelegate>
 @property  NSDictionary *debugBlockingTasks
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLogoutDebugBlockingViewController tableView:numberOfRowsInSection:]
  -[SBLogoutDebugBlockingViewController tableView:canEditRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController .cxx_destruct]
  -[SBLogoutDebugBlockingViewController tableView:titleForHeaderInSection:]
  -[SBLogoutDebugBlockingViewController _tableView]
  -[SBLogoutDebugBlockingViewController tableView:cellForRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController numberOfSectionsInTableView:]
  -[SBLogoutDebugBlockingViewController tableView:indentationLevelForRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController tableView:shouldHighlightRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController viewWillAppear:]
  -[SBLogoutDebugBlockingViewController _canShowWhileLocked]
  -[SBLogoutDebugBlockingViewController tableView:canMoveRowAtIndexPath:]
  -[SBLogoutDebugBlockingViewController loadView]
  -[SBLogoutDebugBlockingViewController _configureCell:withBlockingTask:]
  -[SBLogoutDebugBlockingViewController setDebugBlockingTasks:]
  -[SBLogoutDebugBlockingViewController debugBlockingTasks]


SBReloadWallpaperTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBReloadWallpaperTestRecipe load]

  // instance methods
  -[SBReloadWallpaperTestRecipe title]
  -[SBReloadWallpaperTestRecipe handleVolumeIncrease]
  -[SBReloadWallpaperTestRecipe handleVolumeDecrease]


SBApplicationSceneEntityDestructionIntent : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  unsigned long animation
 @property  BOOL shouldRemoveFromHistory

  // instance methods
  -[SBApplicationSceneEntityDestructionIntent animation]
  -[SBApplicationSceneEntityDestructionIntent setAnimation:]
  -[SBApplicationSceneEntityDestructionIntent shouldRemoveFromHistory]
  -[SBApplicationSceneEntityDestructionIntent setShouldRemoveFromHistory:]


SBAssistantPresentationObservationToken : SBPresentationObservationToken <SBAssistantObserver>
 @property  SBAssistantController *assistantController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAssistantPresentationObservationToken assistantController]
  -[SBAssistantPresentationObservationToken assistantDidDisappear:]
  -[SBAssistantPresentationObservationToken assistantWillAppear:]
  -[SBAssistantPresentationObservationToken dealloc]
  -[SBAssistantPresentationObservationToken assistantDidAppear:]
  -[SBAssistantPresentationObservationToken .cxx_destruct]
  -[SBAssistantPresentationObservationToken state]
  -[SBAssistantPresentationObservationToken initWithAssistantController:]
  -[SBAssistantPresentationObservationToken assistantWillDisappear:]


SBHomeGestureArbiterRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  SBHomeGestureParticipant *participant
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHomeGestureArbiterRecipe load]

  // instance methods
  -[SBHomeGestureArbiterRecipe .cxx_destruct]
  -[SBHomeGestureArbiterRecipe title]
  -[SBHomeGestureArbiterRecipe setParticipant:]
  -[SBHomeGestureArbiterRecipe participant]
  -[SBHomeGestureArbiterRecipe handleVolumeIncrease]
  -[SBHomeGestureArbiterRecipe handleVolumeDecrease]


SBAppFreeDevProfileNotTrustedAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBAppFreeDevProfileNotTrustedAlertItem dismissOnLock]
  -[SBAppFreeDevProfileNotTrustedAlertItem .cxx_destruct]
  -[SBAppFreeDevProfileNotTrustedAlertItem shouldShowInLockScreen]
  -[SBAppFreeDevProfileNotTrustedAlertItem configure:requirePasscodeForActions:]
  -[SBAppFreeDevProfileNotTrustedAlertItem initWithApp:]


SBDeviceApplicationScreenTimeLockoutViewProvider : SBDeviceApplicationSceneOverlayViewProvider
  // instance methods
  -[SBDeviceApplicationScreenTimeLockoutViewProvider initWithSceneHandle:delegate:]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider showContentWithAnimation:completionHandler:]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _deactivateIfPossible]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _activateIfPossible]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider hideContentWithAnimation:completionHandler:]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider dealloc]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider .cxx_destruct]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _realOverlayViewController]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _handleInstalledAppsChanged:]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider priority]
  -[SBDeviceApplicationScreenTimeLockoutViewProvider _newBlockingViewControllerWithBundleIdentifier:]


SBIdleTimerCoordinatorHelper : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBIdleTimerProviding> *sourceProvider
 @property  NSMapTable *idleTimerCache
 @property  <SBIdleTimerCoordinating> *targetCoordinator

  // instance methods
  -[SBIdleTimerCoordinatorHelper removeProvider:]
  -[SBIdleTimerCoordinatorHelper init]
  -[SBIdleTimerCoordinatorHelper bindProvider:toSourceTimer:behavior:forReason:]
  -[SBIdleTimerCoordinatorHelper updateProvider:behavior:reason:]
  -[SBIdleTimerCoordinatorHelper sourceProvider]
  -[SBIdleTimerCoordinatorHelper hasProvider:]
  -[SBIdleTimerCoordinatorHelper .cxx_destruct]
  -[SBIdleTimerCoordinatorHelper _updateProvider:behavior:reason:]
  -[SBIdleTimerCoordinatorHelper targetCoordinator]
  -[SBIdleTimerCoordinatorHelper proposeProvider:byCoordinator:reason:]
  -[SBIdleTimerCoordinatorHelper proposeIdleTimerBehavior:fromProvider:reason:]
  -[SBIdleTimerCoordinatorHelper setTargetCoordinator:]
  -[SBIdleTimerCoordinatorHelper idleTimerCache]
  -[SBIdleTimerCoordinatorHelper initWithSourceProvider:]
  -[SBIdleTimerCoordinatorHelper _updateProviderInfo:behavior:reason:]
  -[SBIdleTimerCoordinatorHelper idleTimerProxyForProvider:]
  -[SBIdleTimerCoordinatorHelper setSourceProvider:]


SBIdleTimerInfo : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBIdleTimerProviding> *provider
 @property  <SBFIdleTimerBehaviorProviding> *behavior
 @property  NSString *reason
 @property  SBIdleTimerProxy *idleTimerProxy

  // instance methods
  -[SBIdleTimerInfo setBehavior:]
  -[SBIdleTimerInfo provider]
  -[SBIdleTimerInfo setReason:]
  -[SBIdleTimerInfo setIdleTimerProxy:]
  -[SBIdleTimerInfo behavior]
  -[SBIdleTimerInfo idleTimerProxy]
  -[SBIdleTimerInfo .cxx_destruct]
  -[SBIdleTimerInfo initWithProvider:behavior:reason:idleTimerProxy:]
  -[SBIdleTimerInfo reason]


SBDeckContinuityToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBDeckContinuityToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBDeckContinuityToFullScreenSwitcherModifier scaleForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDeckContinuityToFullScreenSwitcherModifier cardCornerRadiiForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier opacityForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier frameForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier .cxx_destruct]
  -[SBDeckContinuityToFullScreenSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier titleOpacityForIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier transitionWillBegin]
  -[SBDeckContinuityToFullScreenSwitcherModifier _isInsertingIndex:]
  -[SBDeckContinuityToFullScreenSwitcherModifier _initialFrameForContinuityAppLayout]
  -[SBDeckContinuityToFullScreenSwitcherModifier initWithTransitionID:appLayout:deckModifier:fullscreenModifier:]


SBIconLaunchMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBIconLaunchMetric init]
  -[SBIconLaunchMetric _processAndReportTappedEventPayload:]
  -[SBIconLaunchMetric .cxx_destruct]
  -[SBIconLaunchMetric _processAndReportLaunchedEventPayload:]


SBSetupManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBMainDisplayWorkspaceAppInteractionEventSourceObserving>
 @property  BOOL inSetupModeReadyToExit
 @property  BOOL inSetupMode
 @property  BOOL deferringDeviceOrientationUpdates
 @property  BOOL inSetupModeForDeviceMigration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSetupManager sharedInstance]

  // instance methods
  -[SBSetupManager setInSetupModeReadyToExit:]
  -[SBSetupManager isInSetupModeReadyToExit]
  -[SBSetupManager init]
  -[SBSetupManager _setupProcessChangedNotificationReceived:]
  -[SBSetupManager dealloc]
  -[SBSetupManager .cxx_destruct]
  -[SBSetupManager _clearFloatingDockAssertion]
  -[SBSetupManager updateInSetupMode]
  -[SBSetupManager setDeferringDeviceOrientationUpdates:]
  -[SBSetupManager eventSource:didBeginTransitionToMode:withLayoutState:activatingElement:triggeredBy:]
  -[SBSetupManager _isInSetupMode]
  -[SBSetupManager isDeferringDeviceOrientationUpdates]
  -[SBSetupManager _toggleSetupForMigrationNeeded:forReason:]
  -[SBSetupManager isInSetupModeForDeviceMigration]
  -[SBSetupManager postLaunchCompleteNotificationForSetup]
  -[SBSetupManager _setSetupRequiredReason:]
  -[SBSetupManager setupHasFinishedRestoringFromBackup]
  -[SBSetupManager isInSetupMode]


SBMedusaSettingsChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBMedusaSettingsChangedSwitcherModifierEvent type]


SBDosidoSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBDosidoSwitcherModifier homeScreenBackdropBlurType]
  -[SBDosidoSwitcherModifier visibleAppLayouts]
  -[SBDosidoSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBDosidoSwitcherModifier isHomeScreenContentRequired]
  -[SBDosidoSwitcherModifier isSwitcherWindowVisible]
  -[SBDosidoSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDosidoSwitcherModifier wallpaperStyle]
  -[SBDosidoSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBDosidoSwitcherModifier cardCornerRadiiForIndex:]
  -[SBDosidoSwitcherModifier opacityForIndex:]
  -[SBDosidoSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBDosidoSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBDosidoSwitcherModifier _layoutSettings]
  -[SBDosidoSwitcherModifier .cxx_destruct]
  -[SBDosidoSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBDosidoSwitcherModifier transitionWillBegin]
  -[SBDosidoSwitcherModifier transitionWillUpdate]
  -[SBDosidoSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:direction:]


SBIdleTimerFactory : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBIdleTimerFactory _attentionAwareTimer]
  +[SBIdleTimerFactory idleTimerForDescriptor:]


SBStatusBarStyleOverridesCoordinatorClient : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSObject<OS_dispatch_queue> *registeredOverridesQueue
 @property  NSXPCConnection *connection
 @property  int registeredOverrides

  // instance methods
  -[SBStatusBarStyleOverridesCoordinatorClient .cxx_destruct]
  -[SBStatusBarStyleOverridesCoordinatorClient setConnection:]
  -[SBStatusBarStyleOverridesCoordinatorClient registeredOverrides]
  -[SBStatusBarStyleOverridesCoordinatorClient connection]
  -[SBStatusBarStyleOverridesCoordinatorClient acquireAssertionAndDeliverTapContextToClient:]
  -[SBStatusBarStyleOverridesCoordinatorClient setRegisteredOverrides:]
  -[SBStatusBarStyleOverridesCoordinatorClient initWithConnection:andStyleOverrides:]
  -[SBStatusBarStyleOverridesCoordinatorClient registeredOverridesQueue]
  -[SBStatusBarStyleOverridesCoordinatorClient setRegisteredOverridesQueue:]


SBLockScreenActionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSMutableDictionary *actionProviders

  // instance methods
  -[SBLockScreenActionManager init]
  -[SBLockScreenActionManager .cxx_destruct]
  -[SBLockScreenActionManager registerLockScreenActionProvider:forSource:]
  -[SBLockScreenActionManager actionProviders]
  -[SBLockScreenActionManager setActionProviders:]
  -[SBLockScreenActionManager currentLockScreenActionContext]
  -[SBLockScreenActionManager _clearActionOnAllProviders]
  -[SBLockScreenActionManager currentLockScreenActionContextActionSource:]
  -[SBLockScreenActionManager runUnlockAction]


SBHomeButtonPressMesaUnlockTrigger : SBMesaUnlockTrigger
  // instance methods
  -[SBHomeButtonPressMesaUnlockTrigger screenOff]
  -[SBHomeButtonPressMesaUnlockTrigger succinctDescriptionBuilder]
  -[SBHomeButtonPressMesaUnlockTrigger menuButtonDown]
  -[SBHomeButtonPressMesaUnlockTrigger menuButtonUp]
  -[SBHomeButtonPressMesaUnlockTrigger significantUserInteractionOccurred]
  -[SBHomeButtonPressMesaUnlockTrigger bioUnlock]


SBSceneLayoutAnimationWrapperView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBSceneLayoutReferenceOrientedView>
 @property  long long referenceOrientation
 @property  long long layoutOrientation
 @property  NSArray *elementWrapperViews
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneLayoutAnimationWrapperView setLayoutOrientation:]
  -[SBSceneLayoutAnimationWrapperView crossfadeWithCompletion:]
  -[SBSceneLayoutAnimationWrapperView elementWrapperViews]
  -[SBSceneLayoutAnimationWrapperView elementWrapperViewForLayoutRole:]
  -[SBSceneLayoutAnimationWrapperView initWithFrame:]
  -[SBSceneLayoutAnimationWrapperView referenceOrientation]
  -[SBSceneLayoutAnimationWrapperView layoutOrientation]
  -[SBSceneLayoutAnimationWrapperView setReferenceOrientation:]
  -[SBSceneLayoutAnimationWrapperView invalidate]


SBSceneLayoutElementAnimationWrapperView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBLayoutElement *layoutElement
 @property  UIView<BSInvalidatable> *contentView
 @property  SBApplicationSceneView *applicationSceneViewIfExists

  // instance methods
  -[SBSceneLayoutElementAnimationWrapperView _shouldAnimatePropertyWithKey:]
  -[SBSceneLayoutElementAnimationWrapperView initWithFrame:]
  -[SBSceneLayoutElementAnimationWrapperView layoutElement]
  -[SBSceneLayoutElementAnimationWrapperView applicationSceneViewIfExists]
  -[SBSceneLayoutElementAnimationWrapperView initWithLayoutElement:contentView:orientation:]
  -[SBSceneLayoutElementAnimationWrapperView contentView]
  -[SBSceneLayoutElementAnimationWrapperView willMoveToSuperview:]
  -[SBSceneLayoutElementAnimationWrapperView .cxx_destruct]
  -[SBSceneLayoutElementAnimationWrapperView invalidate]
  -[SBSceneLayoutElementAnimationWrapperView addContentView:]
  -[SBSceneLayoutElementAnimationWrapperView layoutSubviews]


SBTodayViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBUICoronaAnimationControllerParticipant, SBIconListLayoutObserver, SBIconViewObserver, UIScrollViewDelegate, SBIconListModelObserver, SBIconListViewDragDelegate, WGMajorListViewControllerDelegate, WGWidgetIconAnimationExtraViewsProviding, PTSettingsKeyObserver, SBTodayViewSpotlightPresenterDelegate, CSExternalBehaviorProviding, UIGestureRecognizerDelegate, SBUISpotlightInitiating, SBHLegibility, SBIconViewQuerying, SBIconLocationPresenting, SBFIdleTimerBehaviorProviding, SBHOccludable>
 @property  <SBIconListLayoutProvider> *listLayoutProvider
 @property  <SBIconViewProviding> *iconViewProvider
 @property  long long location
 @property  SBHWidgetSettings *widgetSettings
 @property  UIScrollView *scrollView
 @property  NSMutableArray *scrollViewDidEndScrollingHandlers
 @property  UIStackView *stackView
 @property  UIView *fixedContentSizeView
 @property  SBIconListView *listView
 @property  UIView *favoriteListContainerView
 @property  MTMaterialView *favoriteListPlatterView
 @property  UILabel *favoriteListInstructionLabel
 @property  SBIconListView *favoriteListView
 @property  NSLayoutConstraint *favoriteListWithLargeWidgetMinimumHeightConstraint
 @property  NSLayoutConstraint *favoriteListWithSmallOrMediumWidgetsMinimumHeightConstraint
 @property  SBTodayIconListLayoutDelegate *listLayoutDelegate
 @property  SBTodayIconListLayoutDelegate *favoriteListLayoutDelegate
 @property  UIView *carouselReferenceForLegacyWidgetListView
 @property  UIView *legacyListContainerView
 @property  MTMaterialView *legacyListPlatterView
 @property  UIView *headerContainerView
 @property  SBTodayKeepOnHomeScreenPlatterView *keepOnHomeScreenPlatterView
 @property  WGWidgetListHeaderView *dateHeaderView
 @property  SBHDateHeaderViewController *dateHeaderViewController
 @property  NSMutableDictionary *cancelTouchesAssertionsByLegacyWidgetID
 @property  NSMutableDictionary *cancelTouchesAssertionsByWidgetID
 @property  SBTodayViewSpotlightPresenter *spotlightPresenter
 @property  SBFTouchPassThroughView *spotlightContainerView
 @property  NSLayoutConstraint *stackViewToScrollViewTopConstraint
 @property  NSLayoutConstraint *stackViewToScrollViewBottomConstraint
 @property  BOOL visuallyRevealedPriorToEditingIcons
 @property  NSMutableSet *suspendVisibleRowRangeUpdatesReasons
 @property  NSMutableSet *widgetHitTestingDisabledReasons
 @property  double searchBarTopOffset
 @property  NSHashTable *viewControllerAppearStateOverrideAssertions
 @property  BOOL enableEditingModeWhenScrollEnds
 @property  UITapGestureRecognizer *dismissTapGestureRecognizer
 @property  SBRootFolder *rootFolder
 @property  SBHIconManager *iconManager
 @property  <SBTodayViewControllerDelegate> *delegate
 @property  <SBFOverlayDismissalDelegate> *dismissalDelegate
 @property  UIViewController *containerViewController
 @property  WGMajorListViewController *legacyWidgetListViewController
 @property  BOOL suppressesEditingStateForListViews
 @property  BOOL headerVisible
 @property  BOOL spotlightVisible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSArray *extraViewsContainers
 @property  NSArray *extraViews
 @property  BOOL shouldAnimateLastTwoViewsAsOne
 @property  BOOL shouldAnimateFirstTwoViewsAsOne
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  SBViewControllerTransitionContext *transitionContext
 @property  _UILegibilitySettings *legibilitySettings
 @property  NSSet *presentedIconLocations
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  BOOL occluded

  // instance methods
  -[SBTodayViewController rootFolder]
  -[SBTodayViewController coronaAnimationController:willAnimateCoronaTransitionWithAnimator:]
  -[SBTodayViewController setSpotlightPresenter:]
  -[SBTodayViewController coverSheetIdentifier]
  -[SBTodayViewController spotlightPresenter]
  -[SBTodayViewController setRootFolder:]
  -[SBTodayViewController isHeaderVisible]
  -[SBTodayViewController iconView:didChangeCustomImageViewController:]
  -[SBTodayViewController idleTimerDuration]
  -[SBTodayViewController iconManager]
  -[SBTodayViewController scrollingStrategy]
  -[SBTodayViewController setListLayoutProvider:]
  -[SBTodayViewController notificationBehavior]
  -[SBTodayViewController iconViewForIcon:location:]
  -[SBTodayViewController settings:changedValueForKey:]
  -[SBTodayViewController _majorScrollView]
  -[SBTodayViewController conformsToCSBehaviorProviding]
  -[SBTodayViewController idleWarnMode]
  -[SBTodayViewController idleTimerMode]
  -[SBTodayViewController cleanupAfterSpotlightDismissal]
  -[SBTodayViewController restrictedCapabilities]
  -[SBTodayViewController legibilitySettings]
  -[SBTodayViewController resetForSpotlightDismissalAnimated:]
  -[SBTodayViewController _cleanupViews]
  -[SBTodayViewController stackView]
  -[SBTodayViewController isSpotlightVisible]
  -[SBTodayViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBTodayViewController searchBarTopOffset]
  -[SBTodayViewController iconListView:didRemoveIconView:]
  -[SBTodayViewController listView]
  -[SBTodayViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[SBTodayViewController isDisplayingIconView:inLocation:]
  -[SBTodayViewController proximityDetectionMode]
  -[SBTodayViewController layoutIconListView:animationType:forceRelayout:]
  -[SBTodayViewController favoriteListView]
  -[SBTodayViewController iconListView:iconDragItem:willAnimateDropWithAnimator:]
  -[SBTodayViewController _platterViewAtLocation:]
  -[SBTodayViewController visuallyRevealedPriorToEditingIcons]
  -[SBTodayViewController dealloc]
  -[SBTodayViewController _scrollViewDidEndScrolling]
  -[SBTodayViewController iconListView:didAddIconView:]
  -[SBTodayViewController setEditing:]
  -[SBTodayViewController conformsToCSExternalBehaviorProviding]
  -[SBTodayViewController scrollIconToVisible:atPosition:animated:completion:]
  -[SBTodayViewController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[SBTodayViewController .cxx_destruct]
  -[SBTodayViewController _updateHiddenIconViewForScrolling:]
  -[SBTodayViewController firstIconViewForIcon:]
  -[SBTodayViewController iconList:didReplaceIcon:withIcon:]
  -[SBTodayViewController setRevealed:]
  -[SBTodayViewController setIconViewProvider:]
  -[SBTodayViewController shouldAnimateLastTwoViewsAsOne]
  -[SBTodayViewController _handleClippingScrollViewDidScroll:]
  -[SBTodayViewController firstIconViewForIcon:inLocations:]
  -[SBTodayViewController scrollView]
  -[SBTodayViewController spotlightHeaderAcquiringViewController]
  -[SBTodayViewController transitionContext]
  -[SBTodayViewController iconListView:iconDropSessionDidUpdate:]
  -[SBTodayViewController setLocation:]
  -[SBTodayViewController isDisplayingIcon:inLocations:]
  -[SBTodayViewController _updateVisiblySettledForIconViews]
  -[SBTodayViewController _updateVisiblySettledForIconView:]
  -[SBTodayViewController isDisplayingIconView:]
  -[SBTodayViewController iconListView:canHandleIconDropSession:]
  -[SBTodayViewController setHeaderVisible:]
  -[SBTodayViewController setLegibilitySettings:]
  -[SBTodayViewController viewWillLayoutSubviews]
  -[SBTodayViewController _findHiddenIconView]
  -[SBTodayViewController participantState]
  -[SBTodayViewController scrollViewDidEndDecelerating:]
  -[SBTodayViewController setTransitionContext:]
  -[SBTodayViewController enumerateDisplayedIconViewsForIcon:usingBlock:]
  -[SBTodayViewController scrollViewWillBeginDragging:]
  -[SBTodayViewController iconListView:iconDropSessionDidEnter:]
  -[SBTodayViewController viewDidAppear:]
  -[SBTodayViewController setScrollView:]
  -[SBTodayViewController setWidgetSettings:]
  -[SBTodayViewController setVisuallyRevealedPriorToEditingIcons:]
  -[SBTodayViewController iconViewWillPresentContextMenu:]
  -[SBTodayViewController presentedIconLocations]
  -[SBTodayViewController _updateScrollViewContentSize]
  -[SBTodayViewController setSuppressesEditingStateForListViews:]
  -[SBTodayViewController iconViewWillDismissContextMenu:]
  -[SBTodayViewController enumerateDisplayedIconViewsUsingBlock:]
  -[SBTodayViewController removeFromParentViewController]
  -[SBTodayViewController _suggestedTodayViewFrameForBounds:]
  -[SBTodayViewController iconListView:performIconDrop:]
  -[SBTodayViewController setDisplayLayoutElementActive:]
  -[SBTodayViewController widgetSettings]
  -[SBTodayViewController iconListView:iconDropSessionDidExit:]
  -[SBTodayViewController containerViewController]
  -[SBTodayViewController setContainerViewController:]
  -[SBTodayViewController shouldAnimateFirstTwoViewsAsOne]
  -[SBTodayViewController _updateEditingStateAnimated:]
  -[SBTodayViewController listLayoutProvider]
  -[SBTodayViewController isDisplayingIcon:inLocation:]
  -[SBTodayViewController scrollViewDidScroll:]
  -[SBTodayViewController location]
  -[SBTodayViewController viewWillAppear:]
  -[SBTodayViewController iconListView:customSpringAnimationBehaviorForDroppingItem:]
  -[SBTodayViewController setIconManager:]
  -[SBTodayViewController setStackView:]
  -[SBTodayViewController _canShowWhileLocked]
  -[SBTodayViewController iconListView:previewForDroppingIconDragItem:proposedPreview:]
  -[SBTodayViewController iconList:didAddIcon:]
  -[SBTodayViewController scrollViewDidEndScrollingAnimation:]
  -[SBTodayViewController widgetListViewController:sizeForInterfaceOrientation:]
  -[SBTodayViewController scrollViewShouldScrollToTop:]
  -[SBTodayViewController setDelegate:]
  -[SBTodayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBTodayViewController viewDidDisappear:]
  -[SBTodayViewController iconListView:willUseIconView:forDroppingIconDragItem:]
  -[SBTodayViewController iconListView:springLoadedInteractionForIconDragDidCompleteOnIconView:]
  -[SBTodayViewController isDisplayingIcon:]
  -[SBTodayViewController firstIconViewForIcon:excludingLocations:]
  -[SBTodayViewController noteIconViewWillZoomDown:]
  -[SBTodayViewController viewWillDisappear:]
  -[SBTodayViewController iconListViewDidChangeBoundsSize:]
  -[SBTodayViewController iconListView:iconDropSession:didPauseAtLocation:]
  -[SBTodayViewController suppressesEditingStateForListViews]
  -[SBTodayViewController iconList:didRemoveIcon:]
  -[SBTodayViewController iconListView:shouldAllowSpringLoadedInteractionForIconDropSession:onIconView:]
  -[SBTodayViewController _updateHeaderVisibility]
  -[SBTodayViewController gestureRecognizer:shouldReceiveTouch:]
  -[SBTodayViewController _setUpGestureRecognizers]
  -[SBTodayViewController setHeaderContainerView:]
  -[SBTodayViewController headerContainerView]
  -[SBTodayViewController delegate]
  -[SBTodayViewController _cellFrameInScrollBoundsForCell:]
  -[SBTodayViewController extraViewsContainers]
  -[SBTodayViewController _invalidateAllCancelTouchesAssertions]
  -[SBTodayViewController iconViewProvider]
  -[SBTodayViewController extraViews]
  -[SBTodayViewController listModel]
  -[SBTodayViewController loadView]
  -[SBTodayViewController setOccluded:]
  -[SBTodayViewController isOccluded]
  -[SBTodayViewController isPresentingIconLocation:]
  -[SBTodayViewController scrollViewDidEndDragging:willDecelerate:]
  -[SBTodayViewController iconList:didMoveIcon:]
  -[SBTodayViewController setDismissalDelegate:]
  -[SBTodayViewController dismissalDelegate]
  -[SBTodayViewController setListView:]
  -[SBTodayViewController _beginAppearanceTransitionForChildViewControllersToVisible:animated:]
  -[SBTodayViewController _endAppearanceTransitionForChildViewControllersToVisible:]
  -[SBTodayViewController _showOnBoardingAlertIfNeeded]
  -[SBTodayViewController dismissSpotlightAnimated:]
  -[SBTodayViewController legacyWidgetListViewController]
  -[SBTodayViewController dismissTapGestureRecognizer]
  -[SBTodayViewController initWithListLayoutProvider:iconViewProvider:legacyWidgetListViewController:location:]
  -[SBTodayViewController beginOverridingViewControllerAppearanceStateToRemainDisappearedForReason:]
  -[SBTodayViewController _updateSidebarPinnedState]
  -[SBTodayViewController _setUpScrollView]
  -[SBTodayViewController _setUpSearchPresenter]
  -[SBTodayViewController _setUpIconListViews]
  -[SBTodayViewController _setUpLegacyWidgetListView]
  -[SBTodayViewController _setUpHeaderViews]
  -[SBTodayViewController _isSidebarPinned]
  -[SBTodayViewController setVisuallyRevealed:animated:]
  -[SBTodayViewController _iconSpacingForIconListViews]
  -[SBTodayViewController _updateFavoriteListPlatterAndSize]
  -[SBTodayViewController _beginSuspendingVisibleRowRangeUpdatesForReason:]
  -[SBTodayViewController favoriteListModel]
  -[SBTodayViewController _updateIconListSpacing]
  -[SBTodayViewController _setUpIconListViewLayoutDelegates]
  -[SBTodayViewController _updateLegacyListPlatter]
  -[SBTodayViewController _dateHeaderViewSpacing]
  -[SBTodayViewController _dismissTodayViewOverlay:]
  -[SBTodayViewController _endSuspendingVisibleRowRangeUpdatesForReason:]
  -[SBTodayViewController _autoFillInFavoriteListViewIfNecessary]
  -[SBTodayViewController _toggleHeaderViewWithEditingState:]
  -[SBTodayViewController _updateListLayoutAdditionalInsets]
  -[SBTodayViewController _updateScrollViewContentInset]
  -[SBTodayViewController _endDisablingWidgetHitTestingForReason:]
  -[SBTodayViewController _cancelTouchesForAllWidgets]
  -[SBTodayViewController _beginDisablingWidgetHitTestingForReason:]
  -[SBTodayViewController _isOverridingViewControllerAppearanceStateToRemainDisappeared]
  -[SBTodayViewController _effectiveLayoutInsets]
  -[SBTodayViewController _updateListViewLayoutAnimated:]
  -[SBTodayViewController _updateTouchInsets]
  -[SBTodayViewController _toggleNonFavoriteListVisibilityWithSidebarPinned:editing:]
  -[SBTodayViewController _toggleCarouselLayoutWithEditingState:]
  -[SBTodayViewController viewControllerAppearStateOverrideAssertions]
  -[SBTodayViewController _cancelTouchesForWidgetIconView:]
  -[SBTodayViewController _enumerateWidgetIconViewsUsingBlock:]
  -[SBTodayViewController _enumerateWidgetPlatterViewsUsingBlock:]
  -[SBTodayViewController _cancelTouchesForWidgetPlatterView:]
  -[SBTodayViewController _widgetIconViewAtLocation:]
  -[SBTodayViewController _enumerateWidgetWrapperViewsUsingBlock:]
  -[SBTodayViewController _isWidgetHitTestingDisabled]
  -[SBTodayViewController _updateVisibleRowRangeForListViews]
  -[SBTodayViewController _prepareIconViewsForSpotlightPresentation]
  -[SBTodayViewController _prepareIconViewForSpotlightPresentation:]
  -[SBTodayViewController _cancelTouchesForHitTestedWidgetInScrollView:]
  -[SBTodayViewController dateHeaderView]
  -[SBTodayViewController _styleHeaderView:withCellFrameInScrollViewBounds:]
  -[SBTodayViewController listLayoutDelegate]
  -[SBTodayViewController _indexForNextWidgetInNonFavoriteListViewAfterContentOffset:]
  -[SBTodayViewController _updateRevealStateAnimated:]
  -[SBTodayViewController _updateSubviewOrderingForListViews]
  -[SBTodayViewController _updateVisibleRowRangeForListView:]
  -[SBTodayViewController _isViewVisibleInScrollViewSpace:]
  -[SBTodayViewController stackViewToScrollViewBottomConstraint]
  -[SBTodayViewController scrollViewForWidgetListViewController:]
  -[SBTodayViewController editButtonTappedFromWidgetListViewController:]
  -[SBTodayViewController editingMaterialViewForWidgetListViewController:]
  -[SBTodayViewController isWidgetListViewControllerEditable:]
  -[SBTodayViewController parentViewControllerForSpotlightPresenter:]
  -[SBTodayViewController todayViewControllerLocationForSpotlightPresenter:]
  -[SBTodayViewController searchBarTopOffsetForSpotlightPresenter:]
  -[SBTodayViewController spotlightPresenterSearchBarDidFocus:]
  -[SBTodayViewController spotlightPresenterWillPresentSpotlight:]
  -[SBTodayViewController spotlightPresenterDidPresentSpotlight:]
  -[SBTodayViewController spotlightPresenterDidDismissSpotlight:]
  -[SBTodayViewController spotlightPresenterAllowsPullToSearch:]
  -[SBTodayViewController setSpotlightVisible:]
  -[SBTodayViewController scrollViewDidEndScrollingHandlers]
  -[SBTodayViewController setScrollViewDidEndScrollingHandlers:]
  -[SBTodayViewController fixedContentSizeView]
  -[SBTodayViewController setFixedContentSizeView:]
  -[SBTodayViewController favoriteListContainerView]
  -[SBTodayViewController setFavoriteListContainerView:]
  -[SBTodayViewController favoriteListPlatterView]
  -[SBTodayViewController setFavoriteListPlatterView:]
  -[SBTodayViewController favoriteListInstructionLabel]
  -[SBTodayViewController setFavoriteListInstructionLabel:]
  -[SBTodayViewController setFavoriteListView:]
  -[SBTodayViewController favoriteListWithLargeWidgetMinimumHeightConstraint]
  -[SBTodayViewController setFavoriteListWithLargeWidgetMinimumHeightConstraint:]
  -[SBTodayViewController favoriteListWithSmallOrMediumWidgetsMinimumHeightConstraint]
  -[SBTodayViewController setFavoriteListWithSmallOrMediumWidgetsMinimumHeightConstraint:]
  -[SBTodayViewController setListLayoutDelegate:]
  -[SBTodayViewController favoriteListLayoutDelegate]
  -[SBTodayViewController setFavoriteListLayoutDelegate:]
  -[SBTodayViewController carouselReferenceForLegacyWidgetListView]
  -[SBTodayViewController setCarouselReferenceForLegacyWidgetListView:]
  -[SBTodayViewController legacyListContainerView]
  -[SBTodayViewController setLegacyListContainerView:]
  -[SBTodayViewController legacyListPlatterView]
  -[SBTodayViewController setLegacyListPlatterView:]
  -[SBTodayViewController keepOnHomeScreenPlatterView]
  -[SBTodayViewController setKeepOnHomeScreenPlatterView:]
  -[SBTodayViewController setDateHeaderView:]
  -[SBTodayViewController dateHeaderViewController]
  -[SBTodayViewController setDateHeaderViewController:]
  -[SBTodayViewController cancelTouchesAssertionsByLegacyWidgetID]
  -[SBTodayViewController setCancelTouchesAssertionsByLegacyWidgetID:]
  -[SBTodayViewController cancelTouchesAssertionsByWidgetID]
  -[SBTodayViewController setCancelTouchesAssertionsByWidgetID:]
  -[SBTodayViewController spotlightContainerView]
  -[SBTodayViewController setSpotlightContainerView:]
  -[SBTodayViewController stackViewToScrollViewTopConstraint]
  -[SBTodayViewController suspendVisibleRowRangeUpdatesReasons]
  -[SBTodayViewController setSuspendVisibleRowRangeUpdatesReasons:]
  -[SBTodayViewController widgetHitTestingDisabledReasons]
  -[SBTodayViewController setWidgetHitTestingDisabledReasons:]
  -[SBTodayViewController setViewControllerAppearStateOverrideAssertions:]
  -[SBTodayViewController enableEditingModeWhenScrollEnds]
  -[SBTodayViewController setEnableEditingModeWhenScrollEnds:]
  -[SBTodayViewController setDismissTapGestureRecognizer:]


SBExternalWifiDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL wifiEnabled

  // instance methods
  -[SBExternalWifiDefaults init]
  -[SBExternalWifiDefaults _bindAndRegisterDefaults]


SBRingerControl : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBRingerHUDViewControllerDelegate>
 @property  SBHUDController *HUDController
 @property  SBSoundController *soundController
 @property  float volume
 @property  BOOL ringerMuted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRingerControl volume]
  -[SBRingerControl setVolume:]
  -[SBRingerControl .cxx_destruct]
  -[SBRingerControl isRingerMuted]
  -[SBRingerControl soundController]
  -[SBRingerControl HUDController]
  -[SBRingerControl setRingerMuted:]
  -[SBRingerControl nudgeUp:]
  -[SBRingerControl lastSavedRingerMutedState]
  -[SBRingerControl activateRingerHUDFromMuteSwitch:]
  -[SBRingerControl initWithHUDController:soundController:]
  -[SBRingerControl buttonReleased]
  -[SBRingerControl activateRingerHUDForVolumeChangeWithInitialVolume:]
  -[SBRingerControl setVolume:forKeyPress:]
  -[SBRingerControl _softMuteChanged:]
  -[SBRingerControl activateRingerHUD:withInitialVolume:fromSource:]
  -[SBRingerControl existingRingerHUDViewController]
  -[SBRingerControl hideRingerHUDIfVisible]
  -[SBRingerControl ringerHUDViewControllerWantsToBeDismissed:]
  -[SBRingerControl toggleRingerMute]


SBNotifyIconWillZoomDownSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout

  // instance methods
  -[SBNotifyIconWillZoomDownSwitcherEventResponse appLayout]
  -[SBNotifyIconWillZoomDownSwitcherEventResponse .cxx_destruct]
  -[SBNotifyIconWillZoomDownSwitcherEventResponse type]
  -[SBNotifyIconWillZoomDownSwitcherEventResponse initWithAppLayout:]
  -[SBNotifyIconWillZoomDownSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]


SBMedusaAppsTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  FBApplicationUpdateScenesTransaction *currentTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMedusaAppsTestRecipe load]

  // instance methods
  -[SBMedusaAppsTestRecipe setCurrentTransaction:]
  -[SBMedusaAppsTestRecipe init]
  -[SBMedusaAppsTestRecipe currentTransaction]
  -[SBMedusaAppsTestRecipe .cxx_destruct]
  -[SBMedusaAppsTestRecipe title]
  -[SBMedusaAppsTestRecipe _toggle]
  -[SBMedusaAppsTestRecipe handleVolumeIncrease]
  -[SBMedusaAppsTestRecipe handleVolumeDecrease]
  -[SBMedusaAppsTestRecipe _updateAppsToBringUpFromPreferences]


SBiCloudPasscodeRequirementLockoutController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSoftLockoutControllerDelegate>
 @property  BOOL desiresPasscode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBiCloudPasscodeRequirementLockoutController desiresPasscode]
  -[SBiCloudPasscodeRequirementLockoutController dealloc]
  -[SBiCloudPasscodeRequirementLockoutController .cxx_destruct]
  -[SBiCloudPasscodeRequirementLockoutController initWithLockScreenManager:mobileKeyBag:]
  -[SBiCloudPasscodeRequirementLockoutController _deviceHasComplexPasscode]
  -[SBiCloudPasscodeRequirementLockoutController noteAuthenticationSucceededWithPasscode:]
  -[SBiCloudPasscodeRequirementLockoutController requiresLockout]


SBSecureAppPolicy : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBSecureAppPolicy shouldAlwaysShowSecureSceneForApp:]


SBTestableAlertItemTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  NSArray *recipesToTest
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTestableAlertItemTestRecipe load]
  +[SBTestableAlertItemTestRecipe testCases]
  +[SBTestableAlertItemTestRecipe testCasesGrouped]
  +[SBTestableAlertItemTestRecipe nameForCase:]

  // instance methods
  -[SBTestableAlertItemTestRecipe .cxx_destruct]
  -[SBTestableAlertItemTestRecipe title]
  -[SBTestableAlertItemTestRecipe _mapsApp]
  -[SBTestableAlertItemTestRecipe handleVolumeIncrease]
  -[SBTestableAlertItemTestRecipe handleVolumeDecrease]
  -[SBTestableAlertItemTestRecipe _nextAlertItemToTest]
  -[SBTestableAlertItemTestRecipe _dismissCurrentItem]
  -[SBTestableAlertItemTestRecipe alertForIndex:]
  -[SBTestableAlertItemTestRecipe _anyAppIcon]
  -[SBTestableAlertItemTestRecipe dataPlanAlertItemForCase:]
  -[SBTestableAlertItemTestRecipe _anyUserInstalledAppIcon]
  -[SBTestableAlertItemTestRecipe _anySUDescriptor]
  -[SBTestableAlertItemTestRecipe recipesToTest]
  -[SBTestableAlertItemTestRecipe setRecipesToTest:]


SBApplicationUserQuitMonitorServer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSServiceConnectionListenerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationUserQuitMonitorServer init]
  -[SBApplicationUserQuitMonitorServer userClosedLastSceneOfApplicationWithBundleID:]
  -[SBApplicationUserQuitMonitorServer .cxx_destruct]
  -[SBApplicationUserQuitMonitorServer listener:didReceiveConnection:withContext:]
  -[SBApplicationUserQuitMonitorServer _queue_removeConnection:]
  -[SBApplicationUserQuitMonitorServer _queue_addConnection:]


SBAsynchronousRenderingAssertion : BSSimpleAssertion /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL wantsMinificationFilter

  // instance methods
  -[SBAsynchronousRenderingAssertion initWithReason:]
  -[SBAsynchronousRenderingAssertion setWantsMinificationFilter:]
  -[SBAsynchronousRenderingAssertion initWithReason:wantsMinificationFilter:]
  -[SBAsynchronousRenderingAssertion wantsMinificationFilter]


SBTransientOverlayDismissWorkspaceTransaction : SBMainWorkspaceTransaction
  // class methods
  +[SBTransientOverlayDismissWorkspaceTransaction isValidForTransitionRequest:]

  // instance methods
  -[SBTransientOverlayDismissWorkspaceTransaction _didComplete]
  -[SBTransientOverlayDismissWorkspaceTransaction _sendActivationResultWithError:]
  -[SBTransientOverlayDismissWorkspaceTransaction _begin]


SBBrightnessHUDViewController : SBHUDViewController
  // instance methods
  -[SBBrightnessHUDViewController init]
  -[SBBrightnessHUDViewController _canShowWhileLocked]
  -[SBBrightnessHUDViewController displaysLabel]


SBDisplayBrightnessController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHIDValueModifyingButtonSetArbiterDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDisplayBrightnessController init]
  -[SBDisplayBrightnessController .cxx_destruct]
  -[SBDisplayBrightnessController setBrightnessLevel:]
  -[SBDisplayBrightnessController handleBrightnessKeyPressEvent:]
  -[SBDisplayBrightnessController cancelBrightnessEvent]
  -[SBDisplayBrightnessController _setBrightnessLevel:showHUD:]
  -[SBDisplayBrightnessController _adjustBacklightLevel:]
  -[SBDisplayBrightnessController buttonSetArbiter:performActionForButtonPage:usage:]
  -[SBDisplayBrightnessController buttonSetArbiterDidReset:]


SBHUDWindow : SBSecureMainScreenActiveInterfaceOrientationWindow

SBHUDController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <_SBHUDHostViewControllerDelegate, PTSettingsKeyObserver, BSDescriptionProviding, UIViewControllerTransitioningDelegate>
 @property  SBMainScreenActiveInterfaceOrientationWindow *hudWindow
 @property  _SBHUDHostViewController *hudViewController
 @property  SBHUDSettings *settings
 @property  UIScreen *screen
 @property  BOOL anyHUDsVisible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHUDController _defaultCrossfadeAnimatorForHUDController:]

  // instance methods
  -[SBHUDController screen]
  -[SBHUDController _tearDown]
  -[SBHUDController animationControllerForDismissedController:]
  -[SBHUDController settings:changedValueForKey:]
  -[SBHUDController presentingHUDs]
  -[SBHUDController animationControllerForPresentedController:presentingController:sourceController:]
  -[SBHUDController init]
  -[SBHUDController anyHUDsVisible]
  -[SBHUDController _finishedTransitionForHUD:intendedState:finalState:]
  -[SBHUDController presentedHUDControllerForIdentifier:]
  -[SBHUDController hudViewController:willPresentHUD:]
  -[SBHUDController hudViewController:didPresentHUD:]
  -[SBHUDController dealloc]
  -[SBHUDController .cxx_destruct]
  -[SBHUDController _setupStateCapture]
  -[SBHUDController acquireHUDHiddenAssertionForIdentifier:withReason:]
  -[SBHUDController _notificationWhichWeWantToUseToTearEverythingDown:]
  -[SBHUDController _presentHUD:animated:]
  -[SBHUDController succinctDescriptionBuilder]
  -[SBHUDController dismissHUDs:]
  -[SBHUDController presentedHUDs]
  -[SBHUDController _createHUDWindowIfNeeded]
  -[SBHUDController succinctDescription]
  -[SBHUDController settings]
  -[SBHUDController hudViewController:didDismissHUD:]
  -[SBHUDController _tearDownIfNoHuds]
  -[SBHUDController hudViewController:willDismissHUD:]
  -[SBHUDController hudViewController]
  -[SBHUDController HUDSessionForViewController:identifier:]
  -[SBHUDController knownHUDs]
  -[SBHUDController knownHUDControllerForIdentifier:]
  -[SBHUDController hudWindow]
  -[SBHUDController descriptionWithMultilinePrefix:]
  -[SBHUDController _dismissHUD:animated:]
  -[SBHUDController descriptionBuilderWithMultilinePrefix:]
  -[SBHUDController initWithScreen:]


_SBHUDModel : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <_SBHUDHostViewControllerDelegate, SBHUDControlling>
 @property  BOOL isPresented
 @property  BOOL isPresenting
 @property  BOOL isDismissing
 @property  BOOL isDismissed
 @property  SBHUDController *HUDController
 @property  UIViewController<SBHUDViewControlling> *HUDViewController
 @property  double dismissalInterval
 @property  NSString *identifier
 @property  BOOL dismissalScheduled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL isVisible

  // class methods
  +[_SBHUDModel HUDModelForController:viewController:identifier:]

  // instance methods
  -[_SBHUDModel isPresented]
  -[_SBHUDModel dismissAnimated:]
  -[_SBHUDModel isVisible]
  -[_SBHUDModel setDismissed:]
  -[_SBHUDModel hudViewController:willPresentHUD:]
  -[_SBHUDModel hudViewController:didPresentHUD:]
  -[_SBHUDModel dismiss]
  -[_SBHUDModel .cxx_destruct]
  -[_SBHUDModel dismissalInterval]
  -[_SBHUDModel setDismissing:]
  -[_SBHUDModel identifier]
  -[_SBHUDModel HUDController]
  -[_SBHUDModel hudViewController:didDismissHUD:]
  -[_SBHUDModel setPresenting:]
  -[_SBHUDModel hudViewController:willDismissHUD:]
  -[_SBHUDModel isEqual:]
  -[_SBHUDModel isPresenting]
  -[_SBHUDModel isDismissed]
  -[_SBHUDModel isDismissing]
  -[_SBHUDModel setPresented:]
  -[_SBHUDModel HUDViewController]
  -[_SBHUDModel presentWithDismissalInterval:animated:]
  -[_SBHUDModel presentWithDismissalInterval:]
  -[_SBHUDModel rescheduleDismissalTimer]
  -[_SBHUDModel invalidateDismissalTimer]
  -[_SBHUDModel isDismissalScheduled]
  -[_SBHUDModel scheduleDismissalTimer]


_SBHUDHostViewController : SBFTouchPassThroughViewController /usr/lib/libutil.dylib <SBViewControllerTransitionContextDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBHUDHostViewController transitionDidFinish:]
  -[_SBHUDHostViewController .cxx_destruct]
  -[_SBHUDHostViewController supportedInterfaceOrientations]
  -[_SBHUDHostViewController _canShowWhileLocked]
  -[_SBHUDHostViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[_SBHUDHostViewController _transitionContextMatchingHUD:withinContainer:]
  -[_SBHUDHostViewController _executePresentNewHUD:animated:completion:]
  -[_SBHUDHostViewController _executeDismissHUD:animated:completion:]
  -[_SBHUDHostViewController _buildTransitionContextToPresentHUD:dismissHUD:animated:delegate:containerView:completion:]
  -[_SBHUDHostViewController _executeViewControllerTransitionContext:]


SBFullScreenToHomeIconZoomSwitcherModifier : SBTransitionSwitcherModifier
 @property  BOOL shouldUpdateIconViewVisibility
 @property  BOOL shouldMatchMoveToIconView

  // instance methods
  -[SBFullScreenToHomeIconZoomSwitcherModifier homeScreenBackdropBlurType]
  -[SBFullScreenToHomeIconZoomSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBFullScreenToHomeIconZoomSwitcherModifier visibleAppLayouts]
  -[SBFullScreenToHomeIconZoomSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBFullScreenToHomeIconZoomSwitcherModifier homeScreenAlpha]
  -[SBFullScreenToHomeIconZoomSwitcherModifier scaleForIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier isHomeScreenContentRequired]
  -[SBFullScreenToHomeIconZoomSwitcherModifier topMostLayoutElements]
  -[SBFullScreenToHomeIconZoomSwitcherModifier wantsDockBehaviorAssertion]
  -[SBFullScreenToHomeIconZoomSwitcherModifier isSwitcherWindowVisible]
  -[SBFullScreenToHomeIconZoomSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier wallpaperStyle]
  -[SBFullScreenToHomeIconZoomSwitcherModifier cardCornerRadiiForIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier opacityForIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBFullScreenToHomeIconZoomSwitcherModifier setShouldMatchMoveToIconView:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _layoutSettings]
  -[SBFullScreenToHomeIconZoomSwitcherModifier dockProgress]
  -[SBFullScreenToHomeIconZoomSwitcherModifier frameForIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldUpdateIconViewVisibility]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _settingsByInterpolatingBetween:and:progress:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier .cxx_destruct]
  -[SBFullScreenToHomeIconZoomSwitcherModifier setShouldUpdateIconViewVisibility:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier layoutSettingsForTargetCenter:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _normalizedHomeScreenIconZoomPercentBetweenTopAndBottom:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier initWithTransitionID:appLayout:direction:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier dockWindowLevel]
  -[SBFullScreenToHomeIconZoomSwitcherModifier transitionWillBegin]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _isIndexZoomAppLayout:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier transitionDidEnd]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldMatchMoveToIconView]
  -[SBFullScreenToHomeIconZoomSwitcherModifier didMoveToParentModifier:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier dockWindowLevelPriority]
  -[SBFullScreenToHomeIconZoomSwitcherModifier handleTimerEvent:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _normalizedHomeScreenTargetZoomPercentBetweenCenterAndEdge:]
  -[SBFullScreenToHomeIconZoomSwitcherModifier _isEffectivelyHome]


SBSwitcherAppSuggestionViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  BOOL suggestionQueueSuspended
 @property  SBBestAppSuggestion *bestAppSuggestion
 @property  BOOL showSuggestions
 @property  <SBSwitcherAppSuggestionViewControllerDelegate> *delegate

  // instance methods
  -[SBSwitcherAppSuggestionViewController viewDidLoad]
  -[SBSwitcherAppSuggestionViewController setBestAppSuggestion:]
  -[SBSwitcherAppSuggestionViewController bestAppSuggestion]
  -[SBSwitcherAppSuggestionViewController _hasSuggestionBannerView]
  -[SBSwitcherAppSuggestionViewController _handleLongPress:]
  -[SBSwitcherAppSuggestionViewController _setBestAppSuggestion:animationCompletion:]
  -[SBSwitcherAppSuggestionViewController willMoveToParentViewController:]
  -[SBSwitcherAppSuggestionViewController setShowSuggestions:]
  -[SBSwitcherAppSuggestionViewController _bannerStyle]
  -[SBSwitcherAppSuggestionViewController dealloc]
  -[SBSwitcherAppSuggestionViewController .cxx_destruct]
  -[SBSwitcherAppSuggestionViewController _evaluateSuggestionQueueSuspension]
  -[SBSwitcherAppSuggestionViewController _offscreenRectForBottomBanner]
  -[SBSwitcherAppSuggestionViewController showSuggestions]
  -[SBSwitcherAppSuggestionViewController beginPausingSuggestionUpdatesForReason:]
  -[SBSwitcherAppSuggestionViewController _handleBannerTap:]
  -[SBSwitcherAppSuggestionViewController viewWillLayoutSubviews]
  -[SBSwitcherAppSuggestionViewController _idleOnscreenRectForBottomBanner]
  -[SBSwitcherAppSuggestionViewController _activateBestAppSuggestion]
  -[SBSwitcherAppSuggestionViewController _animateOutAndRemoveCurrentBottomBannerWithCompletion:]
  -[SBSwitcherAppSuggestionViewController initWithNibName:bundle:]
  -[SBSwitcherAppSuggestionViewController _activateCurrentSuggestion]
  -[SBSwitcherAppSuggestionViewController setDelegate:]
  -[SBSwitcherAppSuggestionViewController endPausingSuggestionUpdatesForReason:]
  -[SBSwitcherAppSuggestionViewController delegate]
  -[SBSwitcherAppSuggestionViewController _insertAndAnimateInBottomBannerForSuggestion:completion:]
  -[SBSwitcherAppSuggestionViewController _isSuggestionQueueSuspended]
  -[SBSwitcherAppSuggestionViewController _updateBottomBannerWithCompletion:]
  -[SBSwitcherAppSuggestionViewController loadView]
  -[SBSwitcherAppSuggestionViewController _setSuggestionQueueSuspended:]


SBSwitcherAppSuggestionContentView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBSwitcherAppSuggestionContentView pointInside:withEvent:]


SBDataPlanAccountAlertItem : SBDataPlanAlertItem <SBDataPlanAlertActions>
 @property  NSURL *accountURL

  // class methods
  +[SBDataPlanAccountAlertItem laterButtonTitle]
  +[SBDataPlanAccountAlertItem nowButtonTitle]

  // instance methods
  -[SBDataPlanAccountAlertItem .cxx_destruct]
  -[SBDataPlanAccountAlertItem notNow]
  -[SBDataPlanAccountAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanAccountAlertItem initWithAccountURL:]
  -[SBDataPlanAccountAlertItem setAccountURL:]
  -[SBDataPlanAccountAlertItem takeAction]
  -[SBDataPlanAccountAlertItem accountURL]


SBDataPlanUsageAlertItem : SBDataPlanAccountAlertItem
 @property  NSNumber *remainingPortion

  // instance methods
  -[SBDataPlanUsageAlertItem .cxx_destruct]
  -[SBDataPlanUsageAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanUsageAlertItem initWithAccountURL:usage:]
  -[SBDataPlanUsageAlertItem setRemainingPortion:]
  -[SBDataPlanUsageAlertItem remainingPortion]


SBWorkspaceEntityRemovalContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  unsigned long animationStyle
 @property  unsigned long removalActionType

  // instance methods
  -[SBWorkspaceEntityRemovalContext animationStyle]
  -[SBWorkspaceEntityRemovalContext initWithAnimationStyle:removalActionType:]
  -[SBWorkspaceEntityRemovalContext removalActionType]


SBDataPlanDisableAlertItem : SBDataPlanAlertItem
  // instance methods
  -[SBDataPlanDisableAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanDisableAlertItem _showSettings]


SBDataPlanActivationAlertItem : SBDataPlanAccountAlertItem
 @property  BOOL newAccount

  // instance methods
  -[SBDataPlanActivationAlertItem notNow]
  -[SBDataPlanActivationAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanActivationAlertItem initWithAccountURL:newAccount:promptToDisable:]
  -[SBDataPlanActivationAlertItem setNewAccount:]
  -[SBDataPlanActivationAlertItem isNewAccount]


SBSceneLayoutWhitePointAdaptationController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBSceneLayoutWhitePointAdaptationController sharedInstance]
  +[SBSceneLayoutWhitePointAdaptationController _harmonySettings]
  +[SBSceneLayoutWhitePointAdaptationController _isInteractiveUpdateEnabled]
  +[SBSceneLayoutWhitePointAdaptationController _defaultAnimationSettings]
  +[SBSceneLayoutWhitePointAdaptationController _defaultAnimationDuration]

  // instance methods
  -[SBSceneLayoutWhitePointAdaptationController init]
  -[SBSceneLayoutWhitePointAdaptationController _whitePointAdaptivityStyleForLayoutElement:]
  -[SBSceneLayoutWhitePointAdaptationController updateWhitePointAdaptationStrengthWithAnimationSettings:]
  -[SBSceneLayoutWhitePointAdaptationController _updateWhitePointAdaptationStrengthWithWorkspaceTransitionRequest:fromPercentage:toPercentage:animationSettings:cancelled:interactive:]
  -[SBSceneLayoutWhitePointAdaptationController .cxx_destruct]
  -[SBSceneLayoutWhitePointAdaptationController _updateWhitePointAdaptationStrengthWithAnimationSettings:]
  -[SBSceneLayoutWhitePointAdaptationController _whitePointAdaptivityStylesForLayoutState]
  -[SBSceneLayoutWhitePointAdaptationController updateWhitePointAdaptationStrengthWithFromApplicationSceneEntities:toApplicationSceneEntities:fromPercentage:toPercentage:animationSettings:interactive:]
  -[SBSceneLayoutWhitePointAdaptationController _updateWhitePointAdaptationStrengthWithFromApplicationScenes:toApplicationScenes:fromPercentage:toPercentage:animationSettings:interactive:]
  -[SBSceneLayoutWhitePointAdaptationController _applicationSceneHandleForLayoutElement:]
  -[SBSceneLayoutWhitePointAdaptationController updateWhitePointAdaptationStrength]
  -[SBSceneLayoutWhitePointAdaptationController _deviceSceneHandlesFromEntities:]
  -[SBSceneLayoutWhitePointAdaptationController updateWhitePointAdaptationStrengthWithWorkspaceTransitionRequest:animationTransitionContext:]


SBDeviceApplicationSceneViewController : SBApplicationSceneViewController <SBDeviceApplicationSceneOverlayViewProviderDelegate, SBDeviceApplicationSceneHandleObserver, SBSceneViewDelegate, SBSceneViewStatusBarAssertionObserver, SBDeviceApplicationSceneViewControlling>
 @property  SBDeviceApplicationSceneView *sceneView
 @property  MTLumaDodgePillSettings *homeGrabberPillSettings
 @property  NSHashTable *statusBarAssertions
 @property  BOOL rendersWhileLocked
 @property  BOOL shouldRasterizeSceneHostView
 @property  NSString *sceneHostViewMinificationFilter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView<SBApplicationSceneBackgroundView> *backgroundView
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  SBHomeGrabberView *homeGrabberView
 @property  long long homeGrabberDisplayMode
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBDeviceApplicationSceneViewController statusBarAssertionWithStatusBarHidden:atLevel:]
  -[SBDeviceApplicationSceneViewController viewDidLoad]
  -[SBDeviceApplicationSceneViewController _activeOverlaysWantResignActiveAssertion]
  -[SBDeviceApplicationSceneViewController homeGrabberView]
  -[SBDeviceApplicationSceneViewController setRendersWhileLocked:]
  -[SBDeviceApplicationSceneViewController _configureFakeStatusBarWithCurrentStyleRequestCreatingIfNecessary]
  -[SBDeviceApplicationSceneViewController statusBarAssertionDidUpdate:]
  -[SBDeviceApplicationSceneViewController _relinquishResignActiveAssertion]
  -[SBDeviceApplicationSceneViewController homeGrabberPillSettings]
  -[SBDeviceApplicationSceneViewController _setStatusBarAssertions:]
  -[SBDeviceApplicationSceneViewController _createSceneOverlayViewProvidersIfNecessary]
  -[SBDeviceApplicationSceneViewController homeGrabberDisplayMode]
  -[SBDeviceApplicationSceneViewController rendersWhileLocked]
  -[SBDeviceApplicationSceneViewController _statusBarAssertionsDidUpdate]
  -[SBDeviceApplicationSceneViewController setHomeGrabberPillSettings:]
  -[SBDeviceApplicationSceneViewController _shouldSuppressHomeGrabber]
  -[SBDeviceApplicationSceneViewController _didDisableSecureDisplay]
  -[SBDeviceApplicationSceneViewController sceneHostViewMinificationFilter]
  -[SBDeviceApplicationSceneViewController _destroySceneOverlayViewProviders]
  -[SBDeviceApplicationSceneViewController shouldRasterizeSceneHostView]
  -[SBDeviceApplicationSceneViewController backgroundView]
  -[SBDeviceApplicationSceneViewController setBackgroundView:]
  -[SBDeviceApplicationSceneViewController initWithSceneHandle:]
  -[SBDeviceApplicationSceneViewController definesPresentationContext]
  -[SBDeviceApplicationSceneViewController _willEnableSecureDisplay]
  -[SBDeviceApplicationSceneViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBDeviceApplicationSceneViewController setShouldRasterizeSceneHostView:]
  -[SBDeviceApplicationSceneViewController setSceneHostViewMinificationFilter:]
  -[SBDeviceApplicationSceneViewController dealloc]
  -[SBDeviceApplicationSceneViewController _removeFakeStatusBar]
  -[SBDeviceApplicationSceneViewController .cxx_destruct]
  -[SBDeviceApplicationSceneViewController _configureForSecureDisplay:]
  -[SBDeviceApplicationSceneViewController didMoveToParentViewController:]
  -[SBDeviceApplicationSceneViewController _deactivateOverlayForViewProvider:]
  -[SBDeviceApplicationSceneViewController _isApplicationStatusBarHidden]
  -[SBDeviceApplicationSceneViewController sceneView:changedPreferredStatusBarStyleTo:]
  -[SBDeviceApplicationSceneViewController _statusBarAssertions]
  -[SBDeviceApplicationSceneViewController setHomeGrabberDisplayMode:]
  -[SBDeviceApplicationSceneViewController _recalculateResignActiveAssertionForActiveOverlays]
  -[SBDeviceApplicationSceneViewController viewWillLayoutSubviews]
  -[SBDeviceApplicationSceneViewController _addFakeStatusBarWithStyleRequest:enabledParts:]
  -[SBDeviceApplicationSceneViewController overlayViewProviderRendersWhileLocked:]
  -[SBDeviceApplicationSceneViewController statusBarAssertionDidInvalidate:]
  -[SBDeviceApplicationSceneViewController sceneHandle:didChangeStatusBarAvoidanceFrame:]
  -[SBDeviceApplicationSceneViewController statusBarAssertionWithStatusBarSettings:atLevel:]
  -[SBDeviceApplicationSceneViewController _layoutFakeStatusBar]
  -[SBDeviceApplicationSceneViewController _canShowWhileLocked]
  -[SBDeviceApplicationSceneViewController activateOverlayForViewProvider:]
  -[SBDeviceApplicationSceneViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBDeviceApplicationSceneViewController deactivateOverlayForViewProvider:]
  -[SBDeviceApplicationSceneViewController invalidate]
  -[SBDeviceApplicationSceneViewController _configureForCurrentSecureDisplayState]
  -[SBDeviceApplicationSceneViewController animationFactoryForImplicitTransitionFromMode:toMode:defaultFactory:]
  -[SBDeviceApplicationSceneViewController sceneHandle:didChangeStatusBarParts:]
  -[SBDeviceApplicationSceneViewController SB_conformsToSceneLayoutStatusBarAssertionProviding]


SBDataPlanCompletionAlertItem : SBDataPlanAlertItem
 @property  NSString *carrierName
 @property  BOOL newAccount

  // instance methods
  -[SBDataPlanCompletionAlertItem .cxx_destruct]
  -[SBDataPlanCompletionAlertItem setCarrierName:]
  -[SBDataPlanCompletionAlertItem carrierName]
  -[SBDataPlanCompletionAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanCompletionAlertItem initWithCarrierName:newAccount:]
  -[SBDataPlanCompletionAlertItem setNewAccount:]
  -[SBDataPlanCompletionAlertItem isNewAccount]


SBHomeGestureInteraction : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIGestureRecognizerDelegate, SBSystemGestureRecognizerDelegate, SBTouchTemplateGestureRecognizerDelegate>
 @property  SBHomeGesturePanGestureRecognizer *screenEdgePanGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectPanGestureRecognizer
 @property  SBFluidScrunchGestureRecognizer *scrunchGestureRecognizer
 @property  <SBHomeGestureInteractionDelegate> *delegate
 @property  long long recognizedGestureType
 @property  SBSystemGestureManager *gestureManager
 @property  BOOL enabled
 @property  NSSet *gestureRecognizers
 @property  UIGestureRecognizer *recognizedGestureRecognizer
 @property  double indirectScreenEdgeGestureRecognitionDistance
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureInteraction initWithDelegate:]
  -[SBHomeGestureInteraction viewForSystemGestureRecognizer:]
  -[SBHomeGestureInteraction gestureRecognizers]
  -[SBHomeGestureInteraction locationInView:]
  -[SBHomeGestureInteraction velocityInView:]
  -[SBHomeGestureInteraction dealloc]
  -[SBHomeGestureInteraction _handleGestureRecognizer:]
  -[SBHomeGestureInteraction .cxx_destruct]
  -[SBHomeGestureInteraction gestureRecognizerShouldBegin:]
  -[SBHomeGestureInteraction setGestureManager:]
  -[SBHomeGestureInteraction gestureManager]
  -[SBHomeGestureInteraction isEnabled]
  -[SBHomeGestureInteraction _configureGestureRecognizers]
  -[SBHomeGestureInteraction setEnabled:]
  -[SBHomeGestureInteraction screenEdgePanGestureRecognizer]
  -[SBHomeGestureInteraction setDelegate:]
  -[SBHomeGestureInteraction gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBHomeGestureInteraction invalidate]
  -[SBHomeGestureInteraction gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBHomeGestureInteraction gestureRecognizer:shouldReceiveTouch:]
  -[SBHomeGestureInteraction delegate]
  -[SBHomeGestureInteraction gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:]
  -[SBHomeGestureInteraction translationInView:]
  -[SBHomeGestureInteraction gestureRecognizerForType:]
  -[SBHomeGestureInteraction initWithSystemGestureManager:delegate:]
  -[SBHomeGestureInteraction _configureScreenEdgePanGestureRecognizer]
  -[SBHomeGestureInteraction _configureIndirectPanGestureRecognizer]
  -[SBHomeGestureInteraction _configureScrunchGestureRecognizer]
  -[SBHomeGestureInteraction typeOfGestureRecognizer:]
  -[SBHomeGestureInteraction recognizedGestureRecognizer]
  -[SBHomeGestureInteraction indirectScreenEdgeGestureRecognitionDistance]
  -[SBHomeGestureInteraction _isGestureRunning:]
  -[SBHomeGestureInteraction recognizedGestureType]
  -[SBHomeGestureInteraction setRecognizedGestureType:]
  -[SBHomeGestureInteraction setScreenEdgePanGestureRecognizer:]
  -[SBHomeGestureInteraction indirectPanGestureRecognizer]
  -[SBHomeGestureInteraction setIndirectPanGestureRecognizer:]
  -[SBHomeGestureInteraction scrunchGestureRecognizer]
  -[SBHomeGestureInteraction setScrunchGestureRecognizer:]


SBInteractiveScreenshotGestureCropsView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  double cornerAlpha
 @property  double cornerEdgeLength
 @property  UIColor *cornerColor
 @property  double lineGrabberAlpha
 @property  double lineGrabberEdgeLength
 @property  UIColor *lineGrabberColor
 @property  double grabberLineWidth
 @property  double lineAlpha
 @property  double lineWidth
 @property  UIColor *lineColor
 @property  id cropsCompositingFilter

  // instance methods
  -[SBInteractiveScreenshotGestureCropsView setLineWidth:]
  -[SBInteractiveScreenshotGestureCropsView lineWidth]
  -[SBInteractiveScreenshotGestureCropsView initWithFrame:]
  -[SBInteractiveScreenshotGestureCropsView _setPresentationValue:forKey:]
  -[SBInteractiveScreenshotGestureCropsView .cxx_destruct]
  -[SBInteractiveScreenshotGestureCropsView setLineColor:]
  -[SBInteractiveScreenshotGestureCropsView traitCollectionDidChange:]
  -[SBInteractiveScreenshotGestureCropsView setBounds:]
  -[SBInteractiveScreenshotGestureCropsView setFrame:]
  -[SBInteractiveScreenshotGestureCropsView lineColor]
  -[SBInteractiveScreenshotGestureCropsView layoutSubviews]
  -[SBInteractiveScreenshotGestureCropsView _updateGeometryForBounds:shouldUsePresentationValues:]
  -[SBInteractiveScreenshotGestureCropsView _updateGeometryOrDeferLayoutUsingModelBounds]
  -[SBInteractiveScreenshotGestureCropsView setCornerAlpha:]
  -[SBInteractiveScreenshotGestureCropsView setCornerColor:]
  -[SBInteractiveScreenshotGestureCropsView setCropsCompositingFilter:]
  -[SBInteractiveScreenshotGestureCropsView setCornerEdgeLength:]
  -[SBInteractiveScreenshotGestureCropsView setGrabberLineWidth:]
  -[SBInteractiveScreenshotGestureCropsView setLineAlpha:]
  -[SBInteractiveScreenshotGestureCropsView setLineGrabberAlpha:]
  -[SBInteractiveScreenshotGestureCropsView setLineGrabberColor:]
  -[SBInteractiveScreenshotGestureCropsView setLineGrabberEdgeLength:]
  -[SBInteractiveScreenshotGestureCropsView cornerAlpha]
  -[SBInteractiveScreenshotGestureCropsView cornerEdgeLength]
  -[SBInteractiveScreenshotGestureCropsView cornerColor]
  -[SBInteractiveScreenshotGestureCropsView lineGrabberAlpha]
  -[SBInteractiveScreenshotGestureCropsView lineGrabberEdgeLength]
  -[SBInteractiveScreenshotGestureCropsView lineGrabberColor]
  -[SBInteractiveScreenshotGestureCropsView grabberLineWidth]
  -[SBInteractiveScreenshotGestureCropsView lineAlpha]
  -[SBInteractiveScreenshotGestureCropsView cropsCompositingFilter]


SBWidgetMetricsServer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSServiceConnectionListenerDelegate, SBSWidgetMetricsServiceServerInterface>
 @property  NSMutableArray *connections
 @property  FBServiceClientAuthenticator *authenticator
 @property  BSServiceConnectionListener *listener
 @property  NSObject<OS_dispatch_queue> *queue
 @property  <SBSWidgetMetricsProviding> *metricsProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWidgetMetricsServer connections]
  -[SBWidgetMetricsServer listener]
  -[SBWidgetMetricsServer authenticator]
  -[SBWidgetMetricsServer init]
  -[SBWidgetMetricsServer dealloc]
  -[SBWidgetMetricsServer .cxx_destruct]
  -[SBWidgetMetricsServer listener:didReceiveConnection:withContext:]
  -[SBWidgetMetricsServer queue]
  -[SBWidgetMetricsServer metricsProvider]
  -[SBWidgetMetricsServer initWithMetricsProvider:]
  -[SBWidgetMetricsServer systemMetricsForWidget:]
  -[SBWidgetMetricsServer previewMetricsSpecificationForBundleIdentifier:]
  -[SBWidgetMetricsServer previewMetricsSpecificationForDeviceContext:displayContext:bundleIdentifier:]


SBFluidSwitcherButton : UIControl /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <UIPointerInteractionDelegate>
 @property  UIImage *image
 @property  {UIEdgeInsets=dddd} extendedEdgeInsets
 @property  NSString *backdropGroupName
 @property  long long buttonStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherButton backdropGroupName]
  -[SBFluidSwitcherButton setBackdropGroupName:]
  -[SBFluidSwitcherButton didMoveToSuperview]
  -[SBFluidSwitcherButton initWithFrame:]
  -[SBFluidSwitcherButton buttonStyle]
  -[SBFluidSwitcherButton .cxx_destruct]
  -[SBFluidSwitcherButton setImage:]
  -[SBFluidSwitcherButton setHighlighted:]
  -[SBFluidSwitcherButton gestureRecognizerShouldBegin:]
  -[SBFluidSwitcherButton pointerInteraction:styleForRegion:]
  -[SBFluidSwitcherButton _invalidateBackgroundView]
  -[SBFluidSwitcherButton image]
  -[SBFluidSwitcherButton setButtonStyle:]
  -[SBFluidSwitcherButton pointInside:withEvent:]
  -[SBFluidSwitcherButton pointerInteraction:regionForRequest:defaultRegion:]
  -[SBFluidSwitcherButton _addHighlightViewIfNecessary]
  -[SBFluidSwitcherButton layoutSubviews]
  -[SBFluidSwitcherButton _backgroundMaterialView]
  -[SBFluidSwitcherButton setExtendedEdgeInsets:]
  -[SBFluidSwitcherButton _invalidateXPlusDView]
  -[SBFluidSwitcherButton _configureGlyphImageViewIfNecessaryForStyle:]
  -[SBFluidSwitcherButton _configureXPlusDViewIfNecessaryForStyle:]
  -[SBFluidSwitcherButton _configureBackgroundViewIfNecessaryForStyle:]
  -[SBFluidSwitcherButton extendedEdgeInsets]


SBFluidSwitcherTitledButton : SBFluidSwitcherButton
 @property  NSString *title

  // instance methods
  -[SBFluidSwitcherTitledButton .cxx_destruct]
  -[SBFluidSwitcherTitledButton setTitle:]
  -[SBFluidSwitcherTitledButton title]
  -[SBFluidSwitcherTitledButton sizeThatFits:]


SBTransientOverlayDismissAllToAppsWorkspaceTransaction : SBToAppsWorkspaceTransaction
  // instance methods
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _shouldResignActiveForAnimation]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _canBeInterrupted]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _didComplete]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _shouldUseSwitcherDismissalAnimationForTransientOverlayViewController:]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction initWithTransitionRequest:]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _serialOverlayPreDismissalOptions]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _setupAnimation]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _performDismissal]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction dealloc]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _begin]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction .cxx_destruct]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _shouldAnimateTransition]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _concurrentOverlayDismissalOptions]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _handleDismissOverlaysCompletion]
  -[SBTransientOverlayDismissAllToAppsWorkspaceTransaction _logForInterruptAttemptReason:]


SBHomeHardwareButtonActions : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonGestureParametersObserver>
 @property  BOOL buttonDown
 @property  double currentLongPressDuration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeHardwareButtonActions provider:didUpdateButtonGestureParameters:]
  -[SBHomeHardwareButtonActions performDoublePressDownActions]
  -[SBHomeHardwareButtonActions performInitialButtonDownActions]
  -[SBHomeHardwareButtonActions performLongPressActions]
  -[SBHomeHardwareButtonActions performTriplePressUpActions]
  -[SBHomeHardwareButtonActions .cxx_destruct]
  -[SBHomeHardwareButtonActions performSinglePressUpActionsWithSourceType:]
  -[SBHomeHardwareButtonActions performDoubleTapUpActions]
  -[SBHomeHardwareButtonActions setButtonDown:]
  -[SBHomeHardwareButtonActions performSinglePressUpActions]
  -[SBHomeHardwareButtonActions initWitHomeButtonType:]
  -[SBHomeHardwareButtonActions performWhenMenuButtonIsUpUsingBlock:]
  -[SBHomeHardwareButtonActions _logMenuButtonHoldTime]
  -[SBHomeHardwareButtonActions performFinalButtonUpActions]
  -[SBHomeHardwareButtonActions configureForwardingToLockButtonActions:]
  -[SBHomeHardwareButtonActions _shouldIgnorePressesDueToProxOrIdle:]
  -[SBHomeHardwareButtonActions setCurrentLongPressDuration:]
  -[SBHomeHardwareButtonActions currentLongPressDuration]
  -[SBHomeHardwareButtonActions performInitialButtonUpActions]
  -[SBHomeHardwareButtonActions hardwareButtonGestureParameters]
  -[SBHomeHardwareButtonActions performAfterMenuButtonUpIsHandledUsingBlock:]
  -[SBHomeHardwareButtonActions performLongPressCancelledActions]
  -[SBHomeHardwareButtonActions _performButtonPreflightActions]
  -[SBHomeHardwareButtonActions isButtonDown]


SBScrollSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  {CGPoint=dd} contentOffset
 @property  unsigned long phase
 @property  BOOL userInitiated

  // instance methods
  -[SBScrollSwitcherModifierEvent copyWithZone:]
  -[SBScrollSwitcherModifierEvent contentOffset]
  -[SBScrollSwitcherModifierEvent setPhase:]
  -[SBScrollSwitcherModifierEvent phase]
  -[SBScrollSwitcherModifierEvent initWithContentOffset:phase:userInitiated:]
  -[SBScrollSwitcherModifierEvent isUserInitiated]
  -[SBScrollSwitcherModifierEvent setContentOffset:]
  -[SBScrollSwitcherModifierEvent setUserInitiated:]
  -[SBScrollSwitcherModifierEvent type]
  -[SBScrollSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]


SBFullScreenAppLayoutSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBFullScreenAppLayoutSwitcherModifier .cxx_destruct]
  -[SBFullScreenAppLayoutSwitcherModifier initWithActiveAppLayout:]


_SBFullScreenAppFloorSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenBackdropBlurType]
  -[_SBFullScreenAppFloorSwitcherModifier wantsDockWindowLevelAssertion]
  -[_SBFullScreenAppFloorSwitcherModifier visibleAppLayouts]
  -[_SBFullScreenAppFloorSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier scaleForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isHomeScreenContentRequired]
  -[_SBFullScreenAppFloorSwitcherModifier topMostLayoutElements]
  -[_SBFullScreenAppFloorSwitcherModifier wantsDockBehaviorAssertion]
  -[_SBFullScreenAppFloorSwitcherModifier isSwitcherWindowVisible]
  -[_SBFullScreenAppFloorSwitcherModifier isScrollEnabled]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[_SBFullScreenAppFloorSwitcherModifier animationAttributesForLayoutElement:]
  -[_SBFullScreenAppFloorSwitcherModifier wallpaperStyle]
  -[_SBFullScreenAppFloorSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[_SBFullScreenAppFloorSwitcherModifier cardCornerRadiiForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier opacityForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutsToCacheSnapshots]
  -[_SBFullScreenAppFloorSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier isWallpaperRequiredForSwitcher]
  -[_SBFullScreenAppFloorSwitcherModifier dockProgress]
  -[_SBFullScreenAppFloorSwitcherModifier frameForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenDimmingAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[_SBFullScreenAppFloorSwitcherModifier containerStatusBarAnimationDuration]
  -[_SBFullScreenAppFloorSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[_SBFullScreenAppFloorSwitcherModifier isIndexSelectable:]
  -[_SBFullScreenAppFloorSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier wantsHomeScreenPointerInteractions]
  -[_SBFullScreenAppFloorSwitcherModifier switcherDimmingAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenBackdropBlurProgress]
  -[_SBFullScreenAppFloorSwitcherModifier reopenClosedWindowsButtonScale]
  -[_SBFullScreenAppFloorSwitcherModifier .cxx_destruct]
  -[_SBFullScreenAppFloorSwitcherModifier titleAndIconOpacityForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[_SBFullScreenAppFloorSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[_SBFullScreenAppFloorSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier titleOpacityForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier dockUpdateMode]
  -[_SBFullScreenAppFloorSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier shadowStyleForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier homeScreenScale]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[_SBFullScreenAppFloorSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutsToResignActive]
  -[_SBFullScreenAppFloorSwitcherModifier shouldAllowContentViewTouchesForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[_SBFullScreenAppFloorSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[_SBFullScreenAppFloorSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[_SBFullScreenAppFloorSwitcherModifier dockWindowLevel]
  -[_SBFullScreenAppFloorSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[_SBFullScreenAppFloorSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[_SBFullScreenAppFloorSwitcherModifier wallpaperScale]
  -[_SBFullScreenAppFloorSwitcherModifier initWithActiveAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[_SBFullScreenAppFloorSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isIndexKillable:]
  -[_SBFullScreenAppFloorSwitcherModifier darkeningAlphaForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier switcherDimmingViewBlocksTouches]
  -[_SBFullScreenAppFloorSwitcherModifier plusButtonAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[_SBFullScreenAppFloorSwitcherModifier shadowOffsetForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier lighteningAlphaForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier keyboardSuppressionMode]
  -[_SBFullScreenAppFloorSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier transactionCompletionOptions]
  -[_SBFullScreenAppFloorSwitcherModifier contentViewScale]
  -[_SBFullScreenAppFloorSwitcherModifier plusButtonStyle]
  -[_SBFullScreenAppFloorSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier wantsSwitcherBackdropBlur]
  -[_SBFullScreenAppFloorSwitcherModifier wantsSwitcherDimmingView]
  -[_SBFullScreenAppFloorSwitcherModifier dockWindowLevelPriority]
  -[_SBFullScreenAppFloorSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[_SBFullScreenAppFloorSwitcherModifier isContainerStatusBarVisible]
  -[_SBFullScreenAppFloorSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier shadowOpacityForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier switcherBackdropBlurProgress]
  -[_SBFullScreenAppFloorSwitcherModifier rotationAngleForIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier _isActiveAppLayoutAtIndex:]
  -[_SBFullScreenAppFloorSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[_SBFullScreenAppFloorSwitcherModifier switcherBackdropBlurType]
  -[_SBFullScreenAppFloorSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]


SBApplicationMultiwindowService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationServerMultiwindowDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationMultiwindowService sharedInstance]

  // instance methods
  -[SBApplicationMultiwindowService init]
  -[SBApplicationMultiwindowService .cxx_destruct]
  -[SBApplicationMultiwindowService triggerShowAllWindowsForApplicationBundleIdentifier:]
  -[SBApplicationMultiwindowService applicationServer:client:showAllWindowsForBundleIdentifier:]


SBDataPlanFailureAlertItem : SBDataPlanAccountAlertItem
 @property  NSString *carrierName
 @property  BOOL newAccount

  // class methods
  +[SBDataPlanFailureAlertItem laterButtonTitle]
  +[SBDataPlanFailureAlertItem nowButtonTitle]

  // instance methods
  -[SBDataPlanFailureAlertItem .cxx_destruct]
  -[SBDataPlanFailureAlertItem setCarrierName:]
  -[SBDataPlanFailureAlertItem carrierName]
  -[SBDataPlanFailureAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanFailureAlertItem initWithAccountURL:carrierName:newAccount:]
  -[SBDataPlanFailureAlertItem setNewAccount:]
  -[SBDataPlanFailureAlertItem isNewAccount]


SBApplication32BitDeprecationAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  SBApplication *associatedDisplay

  // instance methods
  -[SBApplication32BitDeprecationAlertItem initWithApplication:]
  -[SBApplication32BitDeprecationAlertItem _title]
  -[SBApplication32BitDeprecationAlertItem _message]
  -[SBApplication32BitDeprecationAlertItem dismissOnLock]
  -[SBApplication32BitDeprecationAlertItem associatedDisplay]
  -[SBApplication32BitDeprecationAlertItem .cxx_destruct]
  -[SBApplication32BitDeprecationAlertItem setAssociatedDisplay:]
  -[SBApplication32BitDeprecationAlertItem configure:requirePasscodeForActions:]


SBButtonConsumerClient : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <FBSServiceFacilityClientHandle> *systemServiceClient
 @property  BOOL entitledToConsumeButtonsInBackground
 @property  BOOL application
 @property  BOOL runningVisible
 @property  BOOL suspended
 @property  BOOL canReceiveEvents
 @property  NSMutableSet *registrations

  // instance methods
  -[SBButtonConsumerClient setRegistrations:]
  -[SBButtonConsumerClient registrations]
  -[SBButtonConsumerClient setSuspended:]
  -[SBButtonConsumerClient isSuspended]
  -[SBButtonConsumerClient .cxx_destruct]
  -[SBButtonConsumerClient isEqual:]
  -[SBButtonConsumerClient isApplication]
  -[SBButtonConsumerClient setApplication:]
  -[SBButtonConsumerClient canReceiveEvents]
  -[SBButtonConsumerClient systemServiceClient]
  -[SBButtonConsumerClient setSystemServiceClient:]
  -[SBButtonConsumerClient isEntitledToConsumeButtonsInBackground]
  -[SBButtonConsumerClient setEntitledToConsumeButtonsInBackground:]
  -[SBButtonConsumerClient isRunningVisible]
  -[SBButtonConsumerClient setRunningVisible:]


SBButtonConsumerRegistration : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBButtonConsumerClient *client
 @property  long long buttonKind
 @property  unsigned long eventMask
 @property  long long eventPriority

  // instance methods
  -[SBButtonConsumerRegistration setClient:]
  -[SBButtonConsumerRegistration client]
  -[SBButtonConsumerRegistration eventMask]
  -[SBButtonConsumerRegistration setEventMask:]
  -[SBButtonConsumerRegistration .cxx_destruct]
  -[SBButtonConsumerRegistration isEqual:]
  -[SBButtonConsumerRegistration setEventPriority:]
  -[SBButtonConsumerRegistration eventPriority]
  -[SBButtonConsumerRegistration setButtonKind:]
  -[SBButtonConsumerRegistration buttonKind]


SBHardwareButtonService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemServiceServerHardwareButtonDelegate>
 @property  BSMutableIntegerMap *registrationsByButtonKind
 @property  BSMutableIntegerMap *clientsByPID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHardwareButtonService sharedInstance]

  // instance methods
  -[SBHardwareButtonService _reconfigureProcessMonitor]
  -[SBHardwareButtonService _registrationsForButtonKind:]
  -[SBHardwareButtonService _addRegistration:toClient:]
  -[SBHardwareButtonService consumeHomeButtonTriplePressUpWithPriority:]
  -[SBHardwareButtonService _removeRegistration:fromClient:]
  -[SBHardwareButtonService init]
  -[SBHardwareButtonService consumeHomeButtonLongPressWithPriority:]
  -[SBHardwareButtonService systemServiceServer:clientDidDisconnect:]
  -[SBHardwareButtonService _performButtonRegistrationChangeAndNotifyObservers:]
  -[SBHardwareButtonService systemServiceServer:client:setHapticType:buttonKind:]
  -[SBHardwareButtonService consumeLockButtonDoublePressUpWithPriority:]
  -[SBHardwareButtonService _mutableRegistrationsForButtonKind:]
  -[SBHardwareButtonService systemServiceServer:client:fetchHapticTypeForButtonKind:completion:]
  -[SBHardwareButtonService .cxx_destruct]
  -[SBHardwareButtonService consumeHeadsetPlayPauseSinglePressUpWithPriority:]
  -[SBHardwareButtonService consumeHomeButtonDoublePressDownWithPriority:]
  -[SBHardwareButtonService _updateEventMasksForButtonKind:]
  -[SBHardwareButtonService consumeHomeButtonSinglePressUpWithPriority:]
  -[SBHardwareButtonService consumeVolumeDecreaseButtonSinglePressUpWithPriority:]
  -[SBHardwareButtonService consumeLockButtonSinglePressUpWithPriority:]
  -[SBHardwareButtonService _init]
  -[SBHardwareButtonService setRegistrationsByButtonKind:]
  -[SBHardwareButtonService consumeRingerSwitchToggleStateOnWithPriority:]
  -[SBHardwareButtonService _sendXPCMessageForEvent:buttonKind:priority:toClient:]
  -[SBHardwareButtonService consumeVolumeIncreaseButtonSinglePressDownWithPriority:continuation:]
  -[SBHardwareButtonService hasConsumersForHomeButtonPresses]
  -[SBHardwareButtonService hasConsumersForLockButtonDoublePressUp]
  -[SBHardwareButtonService _process:stateDidUpdate:]
  -[SBHardwareButtonService setClientsByPID:]
  -[SBHardwareButtonService consumeVolumeDecreaseButtonSinglePressDownWithPriority:continuation:]
  -[SBHardwareButtonService systemServiceServer:client:setEventMask:buttonKind:priority:]
  -[SBHardwareButtonService _updateAllButtonEventMasks]
  -[SBHardwareButtonService _applicationForClientInfo:]
  -[SBHardwareButtonService clientsByPID]
  -[SBHardwareButtonService consumeVolumeIncreaseButtonSinglePressUpWithPriority:]
  -[SBHardwareButtonService consumeRingerSwitchToggleStateOffWithPriority:]
  -[SBHardwareButtonService _sendEvent:buttonKind:withPriority:continuation:]
  -[SBHardwareButtonService consumeHeadsetPlayPauseSinglePressDownWithPriority:continuation:]
  -[SBHardwareButtonService _reconfigureProcessMonitorForPredicates:]
  -[SBHardwareButtonService hasConsumersForHomeButtonSinglePress]
  -[SBHardwareButtonService addObserver:]
  -[SBHardwareButtonService consumeLockButtonLongPressWithPriority:]
  -[SBHardwareButtonService _sendEvent:buttonKind:withPriority:]
  -[SBHardwareButtonService hasConsumersForLockButtonPresses]
  -[SBHardwareButtonService systemServiceServer:client:requestsHIDEvents:token:forButtonKind:]
  -[SBHardwareButtonService systemServiceServer:client:acquireAssertionOfType:forReason:withCompletion:]
  -[SBHardwareButtonService _mutableRegistrationsForButtonKind:createIfNecessary:]
  -[SBHardwareButtonService registrationsByButtonKind]
  -[SBHardwareButtonService _setSystemServiceClient:buttonKind:eventMask:priority:]


SBIdleTimerAggregateClientConfiguration : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBIdleTimerConfigurationDisablesTimerSetting *disableTimerSetting
 @property  SBIdleTimerTimeoutPrecedenceSettings *minExpirationTimeoutSettings
 @property  SBIdleTimerTimeoutPrecedenceSettings *maxExpirationTimeoutSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerAggregateClientConfiguration setMaxExpirationTimeout:ifLeastForPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration setDisablesTimerWithPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration .cxx_destruct]
  -[SBIdleTimerAggregateClientConfiguration setMaxExpirationTimeout:withPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration setMinExpirationTimeout:withPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration succinctDescriptionBuilder]
  -[SBIdleTimerAggregateClientConfiguration succinctDescription]
  -[SBIdleTimerAggregateClientConfiguration resolvedExpirationTimeoutRange]
  -[SBIdleTimerAggregateClientConfiguration maxExpirationTimeoutSettings]
  -[SBIdleTimerAggregateClientConfiguration setMinExpirationTimeout:ifGreatestForPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration disableTimerSetting]
  -[SBIdleTimerAggregateClientConfiguration expirationTimeoutIntervalRangeForPrecedence:]
  -[SBIdleTimerAggregateClientConfiguration descriptionWithMultilinePrefix:]
  -[SBIdleTimerAggregateClientConfiguration minExpirationTimeoutSettings]
  -[SBIdleTimerAggregateClientConfiguration descriptionBuilderWithMultilinePrefix:]


SBIdleTimerConfigurationDisablesTimerSetting : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  unsigned long precedence
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerConfigurationDisablesTimerSetting succinctDescriptionBuilder]
  -[SBIdleTimerConfigurationDisablesTimerSetting precedence]
  -[SBIdleTimerConfigurationDisablesTimerSetting succinctDescription]
  -[SBIdleTimerConfigurationDisablesTimerSetting descriptionWithMultilinePrefix:]
  -[SBIdleTimerConfigurationDisablesTimerSetting initWithPrecedence:]
  -[SBIdleTimerConfigurationDisablesTimerSetting descriptionBuilderWithMultilinePrefix:]


SBIdleTimerTimeoutPrecedenceSettings : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  double normalTimeout
 @property  double highTimeout
 @property  double criticalTimeout
 @property  unsigned long highestPrecedence
 @property  double leastTimeout
 @property  double greatestTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerTimeoutPrecedenceSettings succinctDescriptionBuilder]
  -[SBIdleTimerTimeoutPrecedenceSettings succinctDescription]
  -[SBIdleTimerTimeoutPrecedenceSettings descriptionWithMultilinePrefix:]
  -[SBIdleTimerTimeoutPrecedenceSettings descriptionBuilderWithMultilinePrefix:]
  -[SBIdleTimerTimeoutPrecedenceSettings highestPrecedence]
  -[SBIdleTimerTimeoutPrecedenceSettings _setTimeout:withPrecedence:]
  -[SBIdleTimerTimeoutPrecedenceSettings _setTimeout:ifGreatestForPrecedence:]
  -[SBIdleTimerTimeoutPrecedenceSettings _setTimeout:ifLeastForPrecedence:]
  -[SBIdleTimerTimeoutPrecedenceSettings _intervalForPrecedence:]
  -[SBIdleTimerTimeoutPrecedenceSettings leastTimeout]
  -[SBIdleTimerTimeoutPrecedenceSettings greatestTimeout]
  -[SBIdleTimerTimeoutPrecedenceSettings normalTimeout]
  -[SBIdleTimerTimeoutPrecedenceSettings highTimeout]
  -[SBIdleTimerTimeoutPrecedenceSettings criticalTimeout]


SBIdleTimerTimeoutRange : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  double lowerTimeout
 @property  double upperTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerTimeoutRange intersects:]
  -[SBIdleTimerTimeoutRange succinctDescriptionBuilder]
  -[SBIdleTimerTimeoutRange succinctDescription]
  -[SBIdleTimerTimeoutRange descriptionWithMultilinePrefix:]
  -[SBIdleTimerTimeoutRange descriptionBuilderWithMultilinePrefix:]
  -[SBIdleTimerTimeoutRange lowerTimeout]
  -[SBIdleTimerTimeoutRange upperTimeout]
  -[SBIdleTimerTimeoutRange initWithLowerTimeout:upperTimeout:]
  -[SBIdleTimerTimeoutRange clippedRangeWithFavoredRange:]


SBAutoUnlockComposableRule : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBAutoUnlockRule>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAutoUnlockComposableRule shouldAutoUnlockForSource:]
  -[SBAutoUnlockComposableRule init]
  -[SBAutoUnlockComposableRule .cxx_destruct]
  -[SBAutoUnlockComposableRule addAutoUnlockRule:]
  -[SBAutoUnlockComposableRule removeAutoUnlockRule:]


SBPBDisplayItem : PBCodable /System/Library/PrivateFrameworks/EmbeddedDataReset.framework/EmbeddedDataReset <NSCopying>
  // instance methods
  -[SBPBDisplayItem copyWithZone:]
  -[SBPBDisplayItem .cxx_destruct]
  -[SBPBDisplayItem readFrom:]
  -[SBPBDisplayItem writeTo:]
  -[SBPBDisplayItem isEqual:]
  -[SBPBDisplayItem dictionaryRepresentation]


SBHomeGestureFinalDestinationSwitcherModifier : SBSwitcherModifier
 @property  long long currentFinalDestination
 @property  NSString *finalDestinationReason
 @property  BOOL hasSeenAccelerationDipForAppSwitcher

  // instance methods
  -[SBHomeGestureFinalDestinationSwitcherModifier .cxx_destruct]
  -[SBHomeGestureFinalDestinationSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier didMoveToParentModifier:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _applyPrototypeSettings]
  -[SBHomeGestureFinalDestinationSwitcherModifier studyLogData]
  -[SBHomeGestureFinalDestinationSwitcherModifier handleGestureEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier initWithDelegate:initialTranslationAdjustment:startingEnvironmentMode:continuingGesture:dockModifier:]
  -[SBHomeGestureFinalDestinationSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateGestureTranslationVelocityAndProgressWithEvent:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _isTranslationPastDistanceThresholdToUnconditionallyGoHome:]
  -[SBHomeGestureFinalDestinationSwitcherModifier currentFinalDestination]
  -[SBHomeGestureFinalDestinationSwitcherModifier finalDestinationReason]
  -[SBHomeGestureFinalDestinationSwitcherModifier hasSeenAccelerationDipForAppSwitcher]
  -[SBHomeGestureFinalDestinationSwitcherModifier _hasTraveledSufficientDistanceForHomeOrAppSwitcher]
  -[SBHomeGestureFinalDestinationSwitcherModifier _updateAdaptiveThresholdsForCurrentFinalDestination:velocityAverage:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _adjustedFinalDestinationAccountingForEdgeDataDistortion:location:]
  -[SBHomeGestureFinalDestinationSwitcherModifier _unconditionalDistanceThresholdForHome]


SBInCallTransientOverlayViewController : SBTransientOverlayViewController <SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneStatusBarStateObserver, SBIdleTimerCoordinating, BSInvalidatable>
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  <SBInCallTransientOverlayViewControllerDelegate> *delegate
 @property  BOOL shouldIgnoreHomeIndicatorAutoHiddenClientSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallTransientOverlayViewController viewDidLoad]
  -[SBInCallTransientOverlayViewController handleHomeButtonPress]
  -[SBInCallTransientOverlayViewController canResignFirstResponder]
  -[SBInCallTransientOverlayViewController sceneWithIdentifier:didChangeStatusBarAlphaTo:]
  -[SBInCallTransientOverlayViewController handleHeadsetButtonPress:]
  -[SBInCallTransientOverlayViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBInCallTransientOverlayViewController sceneWithIdentifier:didChangeStatusBarHiddenTo:withAnimation:]
  -[SBInCallTransientOverlayViewController prefersStatusBarHidden]
  -[SBInCallTransientOverlayViewController preferredWhitePointAdaptivityStyle]
  -[SBInCallTransientOverlayViewController handleLockButtonPress]
  -[SBInCallTransientOverlayViewController handleVolumeDownButtonPress]
  -[SBInCallTransientOverlayViewController preferredStatusBarStyle]
  -[SBInCallTransientOverlayViewController setIdleTimerCoordinator:]
  -[SBInCallTransientOverlayViewController handleVolumeUpButtonPress]
  -[SBInCallTransientOverlayViewController initWithSceneHandle:]
  -[SBInCallTransientOverlayViewController idleTimerProvider:didProposeBehavior:forReason:]
  -[SBInCallTransientOverlayViewController prefersHomeIndicatorAutoHidden]
  -[SBInCallTransientOverlayViewController sceneHandle]
  -[SBInCallTransientOverlayViewController dealloc]
  -[SBInCallTransientOverlayViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBInCallTransientOverlayViewController .cxx_destruct]
  -[SBInCallTransientOverlayViewController serviceProcessIdentifier]
  -[SBInCallTransientOverlayViewController canBecomeFirstResponder]
  -[SBInCallTransientOverlayViewController succinctDescriptionBuilder]
  -[SBInCallTransientOverlayViewController supportedInterfaceOrientations]
  -[SBInCallTransientOverlayViewController setContainerOrientation:]
  -[SBInCallTransientOverlayViewController viewDidAppear:]
  -[SBInCallTransientOverlayViewController sceneWithIdentifier:didChangeStatusBarStyleTo:]
  -[SBInCallTransientOverlayViewController sceneWithIdentifier:didChangeStatusBarStyleOverridesToSuppressTo:]
  -[SBInCallTransientOverlayViewController viewWillAppear:]
  -[SBInCallTransientOverlayViewController _canShowWhileLocked]
  -[SBInCallTransientOverlayViewController isContentOpaque]
  -[SBInCallTransientOverlayViewController setDelegate:]
  -[SBInCallTransientOverlayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBInCallTransientOverlayViewController viewDidDisappear:]
  -[SBInCallTransientOverlayViewController viewWillDisappear:]
  -[SBInCallTransientOverlayViewController invalidate]
  -[SBInCallTransientOverlayViewController viewDidLayoutSubviews]
  -[SBInCallTransientOverlayViewController delegate]
  -[SBInCallTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBInCallTransientOverlayViewController allowsStackingOverlayContentAbove]
  -[SBInCallTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBInCallTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBInCallTransientOverlayViewController _inCallSceneClientSettingsDiffInspector]
  -[SBInCallTransientOverlayViewController handleGestureDismissal]
  -[SBInCallTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBInCallTransientOverlayViewController preferredStatusBarStyleOverridesToCancel]
  -[SBInCallTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBInCallTransientOverlayViewController setShouldIgnoreHomeIndicatorAutoHiddenClientSettings:]
  -[SBInCallTransientOverlayViewController shouldIgnoreHomeIndicatorAutoHiddenClientSettings]
  -[SBInCallTransientOverlayViewController sceneDeactivationPredicate]
  -[SBInCallTransientOverlayViewController shouldUseSceneBasedKeyboardFocus]


_SBInCallProxySceneBackgroundView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBApplicationSceneBackgroundView>
 @property  <SBApplicationSceneBackgroundView> *proxyTarget
 @property  BOOL fullscreen
 @property  long long wallpaperStyle
 @property  BOOL needsClassicModeBackground
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBInCallProxySceneBackgroundView setWallpaperStyle:]
  -[_SBInCallProxySceneBackgroundView setFullscreen:]
  -[_SBInCallProxySceneBackgroundView wallpaperStyle]
  -[_SBInCallProxySceneBackgroundView isFullscreen]
  -[_SBInCallProxySceneBackgroundView .cxx_destruct]
  -[_SBInCallProxySceneBackgroundView setNeedsClassicModeBackground:]
  -[_SBInCallProxySceneBackgroundView needsClassicModeBackground]
  -[_SBInCallProxySceneBackgroundView setShouldUseBrightMaterial:]
  -[_SBInCallProxySceneBackgroundView shouldUseBrightMaterial]
  -[_SBInCallProxySceneBackgroundView initWithFrame:proxyTarget:]
  -[_SBInCallProxySceneBackgroundView setProxyTarget:]
  -[_SBInCallProxySceneBackgroundView proxyTarget]


SBStartupTransitionController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSTransactionObserver, BSDescriptionProviding, BSTransactionObserver>
 @property  SBStartupTransitionFactory *transitionFactory
 @property  SBStartupTransitionContextPersistence *transitionContextPersistence
 @property  BSTransaction<SBStartupTransition> *startupTransition
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBStartupTransitionController transactionDidComplete:]
  -[SBStartupTransitionController startupTransition]
  -[SBStartupTransitionController initializeAndRunStartupTransition:]
  -[SBStartupTransitionController _setTransitionContextPersistence:]
  -[SBStartupTransitionController .cxx_destruct]
  -[SBStartupTransitionController _transitionContextPersistence]
  -[SBStartupTransitionController succinctDescriptionBuilder]
  -[SBStartupTransitionController _setTransitionFactory:]
  -[SBStartupTransitionController transactionDidBegin:]
  -[SBStartupTransitionController succinctDescription]
  -[SBStartupTransitionController _transitionFactory]
  -[SBStartupTransitionController _saveContextFromTransitionContext:]
  -[SBStartupTransitionController initWithInitialRestartState:]
  -[SBStartupTransitionController descriptionWithMultilinePrefix:]
  -[SBStartupTransitionController descriptionBuilderWithMultilinePrefix:]


SBFairPlayFamilyLeaveAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  FBSApplicationInfo *appInfo

  // instance methods
  -[SBFairPlayFamilyLeaveAlertItem dismissOnLock]
  -[SBFairPlayFamilyLeaveAlertItem appInfo]
  -[SBFairPlayFamilyLeaveAlertItem .cxx_destruct]
  -[SBFairPlayFamilyLeaveAlertItem setAppInfo:]
  -[SBFairPlayFamilyLeaveAlertItem configure:requirePasscodeForActions:]
  -[SBFairPlayFamilyLeaveAlertItem initWithAppInfo:]


SBForcePressGestureStateTrackingSwitcherModifier : SBSwitcherModifier
 @property  {CGPoint=dd} velocity
 @property  {CGPoint=dd} averageVelocity
 @property  double panTranslationThreshold
 @property  double panProgress
 @property  double forceProgress
 @property  BOOL didBeginPanning
 @property  BOOL didPop

  // instance methods
  -[SBForcePressGestureStateTrackingSwitcherModifier averageVelocity]
  -[SBForcePressGestureStateTrackingSwitcherModifier velocity]
  -[SBForcePressGestureStateTrackingSwitcherModifier .cxx_destruct]
  -[SBForcePressGestureStateTrackingSwitcherModifier didPop]
  -[SBForcePressGestureStateTrackingSwitcherModifier handleGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _responseForActivatingFinalDestination:]
  -[SBForcePressGestureStateTrackingSwitcherModifier initWithSelectedAppLayout:]
  -[SBForcePressGestureStateTrackingSwitcherModifier panTranslationThreshold]
  -[SBForcePressGestureStateTrackingSwitcherModifier forceProgress]
  -[SBForcePressGestureStateTrackingSwitcherModifier didBeginPanning]
  -[SBForcePressGestureStateTrackingSwitcherModifier panProgress]
  -[SBForcePressGestureStateTrackingSwitcherModifier _updateForGestureDidBeginWithGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _updateForGestureDidChangeWithGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _updateForGestureDidEndWithGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _currentProgressForGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _updateForcePressTrackingWithGestureEvent:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _canCommitToSwitcherWithPanPercent:forceComplete:]
  -[SBForcePressGestureStateTrackingSwitcherModifier _currentFinalDestination]
  -[SBForcePressGestureStateTrackingSwitcherModifier _projectedTranslationWithVelocity:initialTranslation:]


SBZoomableView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBZoomableView _shouldAnimatePropertyWithKey:]


SBMedusaOrientationTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMedusaOrientationTestRecipe load]

  // instance methods
  -[SBMedusaOrientationTestRecipe title]
  -[SBMedusaOrientationTestRecipe handleVolumeIncrease]
  -[SBMedusaOrientationTestRecipe handleVolumeDecrease]


SBActivatePlusButtonSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBActivatePlusButtonSwitcherEventResponse type]


SBFluidSwitcherTouchPassThroughScrollView : UIScrollView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBAppLayout *appLayout

  // instance methods
  -[SBFluidSwitcherTouchPassThroughScrollView setAppLayout:]
  -[SBFluidSwitcherTouchPassThroughScrollView _gestureRecognizer:shouldReceiveTouch:]
  -[SBFluidSwitcherTouchPassThroughScrollView handlePan:]
  -[SBFluidSwitcherTouchPassThroughScrollView appLayout]
  -[SBFluidSwitcherTouchPassThroughScrollView .cxx_destruct]
  -[SBFluidSwitcherTouchPassThroughScrollView hitTest:withEvent:]
  -[SBFluidSwitcherTouchPassThroughScrollView cancelTouchTracking]
  -[SBFluidSwitcherTouchPassThroughScrollView _gestureRecognizerFailed:]


SBFluidSwitcherItemContainer : SBFTouchPassThroughView /usr/lib/libutil.dylib <UIScrollViewDelegate, UIGestureRecognizerDelegate, SBFailureNotifyingTapGestureRecognizerDelegate, SBAppPlatterDragSourceViewProviding>
 @property  BOOL highlightedFromDirectTouch
 @property  BOOL highlightedFromCursorHover
 @property  <SBFluidSwitcherItemContainerDelegate> *delegate
 @property  SBAppLayout *appLayout
 @property  UIView<SBAppSwitcherPageContentView> *contentView
 @property  BOOL contentViewHasSceneOverlay
 @property  {UIRectCornerRadii=dddd} contentCornerRadii
 @property  double contentPageViewScale
 @property  double titleAndIconOpacity
 @property  double titleOpacity
 @property  double unobscuredMargin
 @property  BOOL clipsToUnobscuredMargin
 @property  double darkeningAlpha
 @property  double wallpaperOverlayAlpha
 @property  double lighteningAlpha
 @property  BOOL selectable
 @property  unsigned long killAxis
 @property  BOOL killable
 @property  double minimumTranslationForKillingContainer
 @property  BOOL shouldScaleOverlayToFillBounds
 @property  BOOL shouldUseBackgroundWallpaperTreatment
 @property  BOOL blocksContentViewTouches
 @property  UIView *contentOverlay
 @property  double contentAlpha
 @property  double killingProgress
 @property  BOOL isDeceleratingTowardsKillZone
 @property  double shadowAlpha
 @property  double shadowOffset
 @property  long long shadowStyle
 @property  BOOL active
 @property  BOOL visible
 @property  BOOL pointerInteractionEnabled
 @property  NSArray *headerItems
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL dragging

  // class methods
  +[SBFluidSwitcherItemContainer preferredRestingVisibleMarginForBounds:]

  // instance methods
  -[SBFluidSwitcherItemContainer setAppLayout:]
  -[SBFluidSwitcherItemContainer setShadowOffset:]
  -[SBFluidSwitcherItemContainer setVisible:]
  -[SBFluidSwitcherItemContainer containerViewForBlurContentView]
  -[SBFluidSwitcherItemContainer contentAlpha]
  -[SBFluidSwitcherItemContainer shadowAlpha]
  -[SBFluidSwitcherItemContainer setShadowAlpha:]
  -[SBFluidSwitcherItemContainer setHeaderItems:animated:]
  -[SBFluidSwitcherItemContainer appLayout]
  -[SBFluidSwitcherItemContainer shadowOffset]
  -[SBFluidSwitcherItemContainer isVisible]
  -[SBFluidSwitcherItemContainer _shouldAnimatePropertyWithKey:]
  -[SBFluidSwitcherItemContainer initialRimShadowFilters]
  -[SBFluidSwitcherItemContainer initialCornerRadiusConfiguration]
  -[SBFluidSwitcherItemContainer setDragging:]
  -[SBFluidSwitcherItemContainer initWithFrame:]
  -[SBFluidSwitcherItemContainer darkeningAlpha]
  -[SBFluidSwitcherItemContainer isDragging]
  -[SBFluidSwitcherItemContainer sourceView]
  -[SBFluidSwitcherItemContainer shadowStyle]
  -[SBFluidSwitcherItemContainer contentView]
  -[SBFluidSwitcherItemContainer scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[SBFluidSwitcherItemContainer setDarkeningAlpha:]
  -[SBFluidSwitcherItemContainer .cxx_destruct]
  -[SBFluidSwitcherItemContainer setContentAlpha:]
  -[SBFluidSwitcherItemContainer initialDiffuseShadowFilters]
  -[SBFluidSwitcherItemContainer gestureRecognizerShouldBegin:]
  -[SBFluidSwitcherItemContainer _scrollViewShouldPanGestureTryToBegin:]
  -[SBFluidSwitcherItemContainer setShouldScaleOverlayToFillBounds:]
  -[SBFluidSwitcherItemContainer prepareForReuse]
  -[SBFluidSwitcherItemContainer initialRimShadowParameters]
  -[SBFluidSwitcherItemContainer isSelectable]
  -[SBFluidSwitcherItemContainer initialDiffuseShadowParameters]
  -[SBFluidSwitcherItemContainer setActive:]
  -[SBFluidSwitcherItemContainer setSelectable:]
  -[SBFluidSwitcherItemContainer isActive]
  -[SBFluidSwitcherItemContainer setContentView:]
  -[SBFluidSwitcherItemContainer scrollViewWillBeginDragging:]
  -[SBFluidSwitcherItemContainer pointInside:withEvent:]
  -[SBFluidSwitcherItemContainer setHeaderItems:]
  -[SBFluidSwitcherItemContainer _handleHoverGesture:]
  -[SBFluidSwitcherItemContainer scrollViewDidScroll:]
  -[SBFluidSwitcherItemContainer titleOpacity]
  -[SBFluidSwitcherItemContainer setTitleOpacity:]
  -[SBFluidSwitcherItemContainer setPointerInteractionEnabled:]
  -[SBFluidSwitcherItemContainer wallpaperOverlayAlpha]
  -[SBFluidSwitcherItemContainer initWithFrame:appLayout:delegate:active:]
  -[SBFluidSwitcherItemContainer setDelegate:]
  -[SBFluidSwitcherItemContainer setLighteningAlpha:]
  -[SBFluidSwitcherItemContainer gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBFluidSwitcherItemContainer isPointerInteractionEnabled]
  -[SBFluidSwitcherItemContainer shouldScaleOverlayToFillBounds]
  -[SBFluidSwitcherItemContainer setWallpaperOverlayAlpha:]
  -[SBFluidSwitcherItemContainer setShadowStyle:]
  -[SBFluidSwitcherItemContainer headerItems]
  -[SBFluidSwitcherItemContainer delegate]
  -[SBFluidSwitcherItemContainer layoutSubviews]
  -[SBFluidSwitcherItemContainer initWithCoder:]
  -[SBFluidSwitcherItemContainer lighteningAlpha]
  -[SBFluidSwitcherItemContainer killAxis]
  -[SBFluidSwitcherItemContainer _overlayViewSize]
  -[SBFluidSwitcherItemContainer contentViewHasSceneOverlay]
  -[SBFluidSwitcherItemContainer setContentOverlay:animated:]
  -[SBFluidSwitcherItemContainer removeIconOverlay]
  -[SBFluidSwitcherItemContainer setContentCornerRadii:]
  -[SBFluidSwitcherItemContainer setMinimumTranslationForKillingContainer:]
  -[SBFluidSwitcherItemContainer setContentPageViewScale:]
  -[SBFluidSwitcherItemContainer titleAndIconOpacity]
  -[SBFluidSwitcherItemContainer setBlocksContentViewTouches:]
  -[SBFluidSwitcherItemContainer setTitleAndIconOpacity:]
  -[SBFluidSwitcherItemContainer setShouldUseBackgroundWallpaperTreatment:]
  -[SBFluidSwitcherItemContainer setKillAxis:]
  -[SBFluidSwitcherItemContainer setKillable:]
  -[SBFluidSwitcherItemContainer setClipsToUnobscuredMargin:]
  -[SBFluidSwitcherItemContainer setUnobscuredMargin:]
  -[SBFluidSwitcherItemContainer killingProgress]
  -[SBFluidSwitcherItemContainer isDeceleratingTowardsKillZone]
  -[SBFluidSwitcherItemContainer contentOverlay]
  -[SBFluidSwitcherItemContainer configureOverlayForIconZoomWithView:]
  -[SBFluidSwitcherItemContainer _createScrollView]
  -[SBFluidSwitcherItemContainer _addPageView]
  -[SBFluidSwitcherItemContainer _frameForScrollView]
  -[SBFluidSwitcherItemContainer _handleSelectionHighlightGesture:]
  -[SBFluidSwitcherItemContainer _handlePageViewPressDown:]
  -[SBFluidSwitcherItemContainer _handlePageViewTap:]
  -[SBFluidSwitcherItemContainer setHighlightedFromDirectTouch:]
  -[SBFluidSwitcherItemContainer setHighlightedFromCursorHover:]
  -[SBFluidSwitcherItemContainer setContentOverlay:]
  -[SBFluidSwitcherItemContainer _updateShadowVisibility]
  -[SBFluidSwitcherItemContainer _updateHeaderAnimated:]
  -[SBFluidSwitcherItemContainer _updatePageViewContentClippingFrame]
  -[SBFluidSwitcherItemContainer _updatePageViewContentViewClipping]
  -[SBFluidSwitcherItemContainer _frameForPageView]
  -[SBFluidSwitcherItemContainer _resetKillProgressScrollState]
  -[SBFluidSwitcherItemContainer _killingProgressForContentOffset:]
  -[SBFluidSwitcherItemContainer contentPageViewScale]
  -[SBFluidSwitcherItemContainer _CGPointXOrYBasedOnKillAxis:]
  -[SBFluidSwitcherItemContainer _contentOffsetAtRest]
  -[SBFluidSwitcherItemContainer _CGSizeWidthOrHeightBasedOnKillAxis:]
  -[SBFluidSwitcherItemContainer _CGPointFromScalarBasedOnKillAxis:]
  -[SBFluidSwitcherItemContainer _updateTransformForCurrentHighlight]
  -[SBFluidSwitcherItemContainer _contentSizeForScrollView]
  -[SBFluidSwitcherItemContainer _contentOffsetForKillingProgress:]
  -[SBFluidSwitcherItemContainer _inverseScaleTransformFactor]
  -[SBFluidSwitcherItemContainer _scaleTransformFactor]
  -[SBFluidSwitcherItemContainer _ensureSubviewOrder]
  -[SBFluidSwitcherItemContainer _CGSizeFromLengthBasedOnKillAxis:]
  -[SBFluidSwitcherItemContainer isHighlightedFromDirectTouch]
  -[SBFluidSwitcherItemContainer _scaleForHighlightFromDirectTouch]
  -[SBFluidSwitcherItemContainer _scaleForHighlightFromCursorHover]
  -[SBFluidSwitcherItemContainer gestureRecognizerTransitionedToFailed:]
  -[SBFluidSwitcherItemContainer blocksContentViewTouches]
  -[SBFluidSwitcherItemContainer shouldUseBackgroundWallpaperTreatment]
  -[SBFluidSwitcherItemContainer _isTitleIconVisible]
  -[SBFluidSwitcherItemContainer _springLoadingEffectTargetView]
  -[SBFluidSwitcherItemContainer contentCornerRadii]
  -[SBFluidSwitcherItemContainer unobscuredMargin]
  -[SBFluidSwitcherItemContainer clipsToUnobscuredMargin]
  -[SBFluidSwitcherItemContainer isKillable]
  -[SBFluidSwitcherItemContainer minimumTranslationForKillingContainer]
  -[SBFluidSwitcherItemContainer isHighlightedFromCursorHover]


SBLayoutStateTransitionCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBWorkspaceApplicationSceneTransitionContextDelegate>
 @property  SBSceneManager *sceneManager
 @property  <SBLayoutStateTransitionSceneEntityFrameProvider> *sceneEntityFrameProvider
 @property  BOOL transitioning
 @property  SBLayoutStateTransitionContext *transitionContext
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLayoutStateTransitionCoordinator sceneManager]
  -[SBLayoutStateTransitionCoordinator initWithSceneManager:]
  -[SBLayoutStateTransitionCoordinator isTransitioning]
  -[SBLayoutStateTransitionCoordinator init]
  -[SBLayoutStateTransitionCoordinator previousLayoutStateForApplicationTransitionContext:]
  -[SBLayoutStateTransitionCoordinator .cxx_destruct]
  -[SBLayoutStateTransitionCoordinator transitionContext]
  -[SBLayoutStateTransitionCoordinator willEndTransition]
  -[SBLayoutStateTransitionCoordinator sceneEntityFrameProvider]
  -[SBLayoutStateTransitionCoordinator applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBLayoutStateTransitionCoordinator layoutStateForApplicationTransitionContext:]
  -[SBLayoutStateTransitionCoordinator beginTransitionForWorkspaceTransaction:]
  -[SBLayoutStateTransitionCoordinator removeObserver:]
  -[SBLayoutStateTransitionCoordinator endTransitionWithError:]
  -[SBLayoutStateTransitionCoordinator setSceneEntityFrameProvider:]
  -[SBLayoutStateTransitionCoordinator addObserver:]


SBBannerUnfurlToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBBannerUnfurlToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBBannerUnfurlToFullScreenSwitcherModifier isHomeScreenContentRequired]
  -[SBBannerUnfurlToFullScreenSwitcherModifier isSwitcherWindowVisible]
  -[SBBannerUnfurlToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier wallpaperStyle]
  -[SBBannerUnfurlToFullScreenSwitcherModifier cardCornerRadiiForIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier opacityForIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBBannerUnfurlToFullScreenSwitcherModifier frameForIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier .cxx_destruct]
  -[SBBannerUnfurlToFullScreenSwitcherModifier transitionWillBegin]
  -[SBBannerUnfurlToFullScreenSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier transitionWillUpdate]
  -[SBBannerUnfurlToFullScreenSwitcherModifier handleTimerEvent:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier transitionLiveContentRasterizationStyle]
  -[SBBannerUnfurlToFullScreenSwitcherModifier _isAppLayout:atIndex:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:bannerUnfurlSourceContext:]
  -[SBBannerUnfurlToFullScreenSwitcherModifier backdropBlurType]


SBFailureNotifyingTapGestureRecognizer : UITapGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  <SBFailureNotifyingTapGestureRecognizerDelegate> *delegate

  // instance methods
  -[SBFailureNotifyingTapGestureRecognizer setState:]
  -[SBFailureNotifyingTapGestureRecognizer setDelegate:]
  -[SBFailureNotifyingTapGestureRecognizer delegate]


SBSetupRegulatoryInfoViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBSetupRegulatoryInfoViewController .cxx_destruct]
  -[SBSetupRegulatoryInfoViewController _canShowWhileLocked]
  -[SBSetupRegulatoryInfoViewController loadView]


SBDataPlanAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBDataPlanAlertItem didDeactivateForReason:]
  -[SBDataPlanAlertItem suppressForKeynote]


SBDashBoardModalHomeAffordanceControllerClientBridge : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHomeGestureParticipantDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardModalHomeAffordanceControllerClientBridge homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBDashBoardModalHomeAffordanceControllerClientBridge .cxx_destruct]
  -[SBDashBoardModalHomeAffordanceControllerClientBridge initWithCoverSheetModalHomeGestureParticipant:]


SBDashBoardModalHomeAffordanceController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSModalHomeAffordanceControlling>
 @property  UIScreenEdgePanGestureRecognizer *homeGestureRecognizer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardModalHomeAffordanceController init]
  -[SBDashBoardModalHomeAffordanceController .cxx_destruct]
  -[SBDashBoardModalHomeAffordanceController _addGrabberView:]
  -[SBDashBoardModalHomeAffordanceController registerHomeGestureParticipant:]
  -[SBDashBoardModalHomeAffordanceController unregisterHomeGestureParticipant]
  -[SBDashBoardModalHomeAffordanceController homeGestureRecognizer]
  -[SBDashBoardModalHomeAffordanceController setHomeGestureRecognizer:]


SBToggleClassroomPluginTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBToggleClassroomPluginTestRecipe load]

  // instance methods
  -[SBToggleClassroomPluginTestRecipe title]
  -[SBToggleClassroomPluginTestRecipe handleVolumeIncrease]
  -[SBToggleClassroomPluginTestRecipe handleVolumeDecrease]


SBIsolatedSceneOrientationFollowingWindow : SBWindow
  // instance methods
  -[SBIsolatedSceneOrientationFollowingWindow _usesWindowServerHitTesting]
  -[SBIsolatedSceneOrientationFollowingWindow overlayRootViewController]


SBIsolatedSceneOrientationFollowingSecureWindow : SBIsolatedSceneOrientationFollowingWindow
  // class methods
  +[SBIsolatedSceneOrientationFollowingSecureWindow _isSecure]


SBIsolatedSceneOrientationFollowingWrapperViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBDeviceApplicationSceneHandleObserver, SBDeviceApplicationSceneOverlayViewController>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView<SBDeviceApplicationSceneOverlayView> *overlayView

  // instance methods
  -[SBIsolatedSceneOrientationFollowingWrapperViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController overlayView]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController dealloc]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController .cxx_destruct]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController viewDidAppear:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController viewWillAppear:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _canShowWhileLocked]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController viewDidDisappear:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController viewWillDisappear:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController loadView]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _orientationBasedOnScene]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _effectiveSceneOrientation]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController initWithContentViewController:sceneHandle:orientationDelegate:rendersWhileLocked:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _containerViewDidSetCenter:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _containerViewDidSetBounds:]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _isSceneStatusBarHidden]
  -[SBIsolatedSceneOrientationFollowingWrapperViewController _boundsForOverlayRootView]


SBIsolatedSceneOrientationFollowingContainerView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBDeviceApplicationSceneOverlayView>
 @property  SBIsolatedSceneOrientationFollowingWrapperViewController *wrapperViewController
 @property  long long hostOrientation
 @property  BOOL shouldLayoutOverlayImmediatelyForContainerGeometryChange

  // instance methods
  -[SBIsolatedSceneOrientationFollowingContainerView .cxx_destruct]
  -[SBIsolatedSceneOrientationFollowingContainerView setCenter:]
  -[SBIsolatedSceneOrientationFollowingContainerView setBounds:]
  -[SBIsolatedSceneOrientationFollowingContainerView wrapperViewController]
  -[SBIsolatedSceneOrientationFollowingContainerView initWithFrame:wrapperViewController:]
  -[SBIsolatedSceneOrientationFollowingContainerView hostOrientation]
  -[SBIsolatedSceneOrientationFollowingContainerView shouldLayoutOverlayImmediatelyForContainerGeometryChange]
  -[SBIsolatedSceneOrientationFollowingContainerView setHostOrientation:]
  -[SBIsolatedSceneOrientationFollowingContainerView setShouldLayoutOverlayImmediatelyForContainerGeometryChange:]


SBSceneOrientationFollowingWindowRootViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBIsolatedSceneOrientationFollowingWrapperViewController *hostingViewController
 @property  UIView *overlayContentView

  // instance methods
  -[SBSceneOrientationFollowingWindowRootViewController _edgeInsetsForChildViewController:insetsAreAbsolute:]
  -[SBSceneOrientationFollowingWindowRootViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBSceneOrientationFollowingWindowRootViewController .cxx_destruct]
  -[SBSceneOrientationFollowingWindowRootViewController viewWillLayoutSubviews]
  -[SBSceneOrientationFollowingWindowRootViewController overlayContentView]
  -[SBSceneOrientationFollowingWindowRootViewController _canShowWhileLocked]
  -[SBSceneOrientationFollowingWindowRootViewController hostingViewController]
  -[SBSceneOrientationFollowingWindowRootViewController setHostingViewController:]
  -[SBSceneOrientationFollowingWindowRootViewController initWithHostingViewController:]
  -[SBSceneOrientationFollowingWindowRootViewController setOverlayContentView:]


SBRestartManagerWorkspaceDataSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBRestartManagerWorkspaceDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRestartManagerWorkspaceDataSource isUILocked]
  -[SBRestartManagerWorkspaceDataSource terminateAllApplicationsForReason:description:completion:]
  -[SBRestartManagerWorkspaceDataSource activePrimaryApplicationBundleID]


SBCrossblurDosidoSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCrossblurDosidoSwitcherModifier homeScreenBackdropBlurType]
  -[SBCrossblurDosidoSwitcherModifier visibleAppLayouts]
  -[SBCrossblurDosidoSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBCrossblurDosidoSwitcherModifier scaleForIndex:]
  -[SBCrossblurDosidoSwitcherModifier isHomeScreenContentRequired]
  -[SBCrossblurDosidoSwitcherModifier topMostLayoutElements]
  -[SBCrossblurDosidoSwitcherModifier isSwitcherWindowVisible]
  -[SBCrossblurDosidoSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCrossblurDosidoSwitcherModifier wallpaperStyle]
  -[SBCrossblurDosidoSwitcherModifier cardCornerRadiiForIndex:]
  -[SBCrossblurDosidoSwitcherModifier opacityForIndex:]
  -[SBCrossblurDosidoSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBCrossblurDosidoSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBCrossblurDosidoSwitcherModifier _layoutSettings]
  -[SBCrossblurDosidoSwitcherModifier frameForIndex:]
  -[SBCrossblurDosidoSwitcherModifier .cxx_destruct]
  -[SBCrossblurDosidoSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBCrossblurDosidoSwitcherModifier transitionWillBegin]
  -[SBCrossblurDosidoSwitcherModifier transitionDidEnd]
  -[SBCrossblurDosidoSwitcherModifier transitionWillUpdate]
  -[SBCrossblurDosidoSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:direction:]
  -[SBCrossblurDosidoSwitcherModifier _isToAppLayoutAtIndex:]
  -[SBCrossblurDosidoSwitcherModifier _opacitySettings]
  -[SBCrossblurDosidoSwitcherModifier _isFromAppLayoutAtIndex:]


SBCoverSheetIconFlyInAnimator : SBCenterIconZoomAnimator /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices <PTSettingsKeyObserver>
 @property  UIViewFloatAnimatableProperty *labelAlphaDrivingProgressAnimatableProperty
 @property  CAMediaTimingFunction *timingFunction
 @property  UIPageControl *pageControl
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetIconFlyInAnimator timingFunction]
  -[SBCoverSheetIconFlyInAnimator setTimingFunction:]
  -[SBCoverSheetIconFlyInAnimator settings:changedValueForKey:]
  -[SBCoverSheetIconFlyInAnimator _updateDockForFraction:]
  -[SBCoverSheetIconFlyInAnimator .cxx_destruct]
  -[SBCoverSheetIconFlyInAnimator _zPositionForPoint:center:andFraction:]
  -[SBCoverSheetIconFlyInAnimator _functionWithProgress:distance:]
  -[SBCoverSheetIconFlyInAnimator _updateWithSettings:]
  -[SBCoverSheetIconFlyInAnimator initWithFolderController:]
  -[SBCoverSheetIconFlyInAnimator setPageControl:]
  -[SBCoverSheetIconFlyInAnimator _setAnimationFraction:withCenter:]
  -[SBCoverSheetIconFlyInAnimator _prepareAnimation]
  -[SBCoverSheetIconFlyInAnimator _updateLabelAlphaForPresentationValue:]
  -[SBCoverSheetIconFlyInAnimator labelAlphaDrivingProgressAnimatableProperty]
  -[SBCoverSheetIconFlyInAnimator _cleanupAnimation]
  -[SBCoverSheetIconFlyInAnimator _zPositionForView:center:andFraction:]
  -[SBCoverSheetIconFlyInAnimator _createAnimatableProperties]
  -[SBCoverSheetIconFlyInAnimator pageControl]
  -[SBCoverSheetIconFlyInAnimator _labelAlphaForFraction:]
  -[SBCoverSheetIconFlyInAnimator setLabelAlphaDrivingProgressAnimatableProperty:]


_SBDefaultScreenshotProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <_SBScreenshotProvider>
 @property  UIScreen *screen
 @property  SBScreenFlash *flasher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBDefaultScreenshotProvider screen]
  -[_SBDefaultScreenshotProvider .cxx_destruct]
  -[_SBDefaultScreenshotProvider flasher]
  -[_SBDefaultScreenshotProvider captureScreenshot]
  -[_SBDefaultScreenshotProvider initWithScreen:]


SBSystemStatusWifiDataProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  STWifiStatusDomainPublisher *wifiDataPublisher
 @property  BOOL wifiActive
 @property  BOOL fallingBackToCellular
 @property  ^v cellularFallbackWatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemStatusWifiDataProvider _registerForNotifications]
  -[SBSystemStatusWifiDataProvider _updateWifiActive]
  -[SBSystemStatusWifiDataProvider cellularFallbackWatcher]
  -[SBSystemStatusWifiDataProvider init]
  -[SBSystemStatusWifiDataProvider dealloc]
  -[SBSystemStatusWifiDataProvider .cxx_destruct]
  -[SBSystemStatusWifiDataProvider isWifiActive]
  -[SBSystemStatusWifiDataProvider isFallingBackToCellular]
  -[SBSystemStatusWifiDataProvider setCellularFallbackWatcher:]
  -[SBSystemStatusWifiDataProvider setWifiActive:]
  -[SBSystemStatusWifiDataProvider setFallingBackToCellular:]
  -[SBSystemStatusWifiDataProvider _updateData]
  -[SBSystemStatusWifiDataProvider invalidate]
  -[SBSystemStatusWifiDataProvider wifiDataPublisher]


SBAppSwitcherService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *bundleIdentifier
 @property  NSString *viewServiceClassName

  // class methods
  +[SBAppSwitcherService switcherServiceWithName:viewServiceClassName:]

  // instance methods
  -[SBAppSwitcherService .cxx_destruct]
  -[SBAppSwitcherService setBundleIdentifier:]
  -[SBAppSwitcherService bundleIdentifier]
  -[SBAppSwitcherService setViewServiceClassName:]
  -[SBAppSwitcherService viewServiceClassName]


SBDashBoardViewExternalControllerBase : CSCoverSheetViewControllerBase /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome <CSExternalAppearanceProviding, CSExternalBehaviorProviding, CSExternalPresentationProviding, CSExternalEventHandling>
 @property  BOOL externalToDashBoard
 @property  NSString *appearanceIdentifier
 @property  long long backgroundStyle
 @property  NSSet *components
 @property  _UILegibilitySettings *legibilitySettings
 @property  UIColor *backgroundColor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  <UICoordinateSpace> *presentationCoordinateSpace
 @property  NSArray *presentationRegions

  // instance methods
  -[SBDashBoardViewExternalControllerBase _registerAsExternalProviderIfNeeded]
  -[SBDashBoardViewExternalControllerBase isExternalToDashBoard]
  -[SBDashBoardViewExternalControllerBase _unregisterAsExternalProvider]
  -[SBDashBoardViewExternalControllerBase conformsToCSExternalBehaviorProviding]
  -[SBDashBoardViewExternalControllerBase viewDidAppear:]
  -[SBDashBoardViewExternalControllerBase _presenter]
  -[SBDashBoardViewExternalControllerBase viewWillDisappear:]


SBFailingSystemGestureRecognizer : UIGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  <SBSystemGestureRecognizerDelegate> *delegate

  // instance methods
  -[SBFailingSystemGestureRecognizer touchesBegan:withEvent:]
  -[SBFailingSystemGestureRecognizer init]
  -[SBFailingSystemGestureRecognizer initWithTarget:action:]


SBLongPressGestureRecognizer : SBClickGestureRecognizer
 @property  unsigned long numberOfClicksRequired
 @property  double minimumPressDuration

  // instance methods
  -[SBLongPressGestureRecognizer gestureStateInfoForUnbalancedPressBeganCount:previousCount:]
  -[SBLongPressGestureRecognizer reset]
  -[SBLongPressGestureRecognizer initWithTarget:action:]
  -[SBLongPressGestureRecognizer setMinimumPressDuration:]
  -[SBLongPressGestureRecognizer minimumPressDuration]


SBFloatingApplicationTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFloatingApplicationTestRecipe load]

  // instance methods
  -[SBFloatingApplicationTestRecipe init]
  -[SBFloatingApplicationTestRecipe _perform]
  -[SBFloatingApplicationTestRecipe title]
  -[SBFloatingApplicationTestRecipe handleVolumeIncrease]
  -[SBFloatingApplicationTestRecipe handleVolumeDecrease]


SBPresentCoverSheetRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPresentCoverSheetRecipe load]

  // instance methods
  -[SBPresentCoverSheetRecipe title]
  -[SBPresentCoverSheetRecipe handleVolumeIncrease]
  -[SBPresentCoverSheetRecipe handleVolumeDecrease]


SBDataAccessDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBDataAccessDomain domainName]
  +[SBDataAccessDomain rootSettings]
  +[SBDataAccessDomain rootSettingsClass]
  +[SBDataAccessDomain domainGroupName]


SBTransientOverlayPresentationManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHomeGestureParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBIdleTimerCoordinating, SBTransientOverlayViewControllerDelegate, SBIdleTimerProviding, SBButtonEventsHandler>
 @property  SBBannerManager *bannerManager
 @property  SBCoverSheetPresentationManager *coverSheetPresentationManager
 @property  <SBTransientOverlayPresentationManagerDelegate> *delegate
 @property  BOOL hasIdleTimerBehaviors
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  SBTransientOverlayViewController *topmostPresentedViewController
 @property  BOOL hasActivePresentation
 @property  long long presentedViewControllerCount
 @property  BOOL shouldUseSceneBasedKeyboardFocusForActivePresentation
 @property  BOOL canHandleButtonEvents
 @property  UIStatusBarStyleRequest *currentStatusBarStyleRequest
 @property  BOOL hasVisibleStatusBar
 @property  BOOL prefersStatusBarActivityItemVisible
 @property  NSNumber *preferredWhitePointAdaptivityStyleValue
 @property  long long topmostViewControllerInterfaceOrientation
 @property  double topmostWindowLevel
 @property  BOOL ownsHomeGesture
 @property  long long preferredGestureDismissalStyle
 @property  SBTransientOverlayViewController *viewControllerForGestureDismissal
 @property  BOOL shouldDisableControlCenter
 @property  BOOL shouldDisableCoverSheetGesture
 @property  BOOL shouldDisableSiri
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTransientOverlayPresentationManager handleHomeButtonPress]
  -[SBTransientOverlayPresentationManager bannerManager]
  -[SBTransientOverlayPresentationManager handleHeadsetButtonPress:]
  -[SBTransientOverlayPresentationManager _currentExternalStatusBarSettings]
  -[SBTransientOverlayPresentationManager _updatePreferredWhitePointAdaptivityStyle]
  -[SBTransientOverlayPresentationManager handleLockButtonPress]
  -[SBTransientOverlayPresentationManager hasPresentationAboveWindowLevel:]
  -[SBTransientOverlayPresentationManager handleHomeButtonLongPress]
  -[SBTransientOverlayPresentationManager homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBTransientOverlayPresentationManager handleVolumeDownButtonPress]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerDidEndRotation:]
  -[SBTransientOverlayPresentationManager setIdleTimerCoordinator:]
  -[SBTransientOverlayPresentationManager handleVolumeUpButtonPress]
  -[SBTransientOverlayPresentationManager shouldUseSceneBasedKeyboardFocusForActivePresentation]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsWhitePointAdaptivityStyleUpdate:]
  -[SBTransientOverlayPresentationManager handleHomeButtonDoublePress]
  -[SBTransientOverlayPresentationManager idleTimerCoordinator]
  -[SBTransientOverlayPresentationManager _newSceneDeactivationAssertionWithReason:]
  -[SBTransientOverlayPresentationManager _updateFeaturePolicies]
  -[SBTransientOverlayPresentationManager hasIdleTimerBehaviors]
  -[SBTransientOverlayPresentationManager _applyProximityDetectionModeForEntity:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsSceneDeactivationUpdate:]
  -[SBTransientOverlayPresentationManager defaultShouldAutorotateForTransientOverlayViewController:]
  -[SBTransientOverlayPresentationManager defaultPreferredInterfaceOrientationForPresentationForTransientOverlayViewController:]
  -[SBTransientOverlayPresentationManager initWithScreen:alertItemsController:lockStateAggregator:homeGestureArbiter:reachabilityManager:]
  -[SBTransientOverlayPresentationManager isKeyboardVisibleForSpringBoardForTransientOverlayViewController:]
  -[SBTransientOverlayPresentationManager topmostPresentedViewController]
  -[SBTransientOverlayPresentationManager idleTimerProvider:didProposeBehavior:forReason:]
  -[SBTransientOverlayPresentationManager homeGestureParticipantResolvedHomeAffordanceSuppressionDidChange:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsProximityDetectionUpdate:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsContentOpaqueUpdate:]
  -[SBTransientOverlayPresentationManager _backgroundWindowLevelForEntity:]
  -[SBTransientOverlayPresentationManager _preferredStatusBarVisibilityForEntity:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsOrientationUpdatesDisabledUpdate:]
  -[SBTransientOverlayPresentationManager _topmostPresentedEntity]
  -[SBTransientOverlayPresentationManager _getContentScale:translation:fromRect:entity:]
  -[SBTransientOverlayPresentationManager dealloc]
  -[SBTransientOverlayPresentationManager coordinatorRequestedIdleTimerBehavior:]
  -[SBTransientOverlayPresentationManager defaultSupportedInterfaceOrientationsForTransientOverlayViewController:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsGestureDismissalStyleUpdate:]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsWindowHitTestingUpdate:]
  -[SBTransientOverlayPresentationManager shouldDisableControlCenter]
  -[SBTransientOverlayPresentationManager .cxx_destruct]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsFeaturePolicyUpdate:]
  -[SBTransientOverlayPresentationManager _handleCoverSheetWillPresent:]
  -[SBTransientOverlayPresentationManager hasVisibleStatusBar]
  -[SBTransientOverlayPresentationManager shouldDisableCoverSheetGesture]
  -[SBTransientOverlayPresentationManager _buttonEventHandlingViewController]
  -[SBTransientOverlayPresentationManager currentStatusBarStyleRequest]
  -[SBTransientOverlayPresentationManager shouldDisableSiri]
  -[SBTransientOverlayPresentationManager viewControllerForGestureDismissal]
  -[SBTransientOverlayPresentationManager _updateBackgroundWindowForEntity:]
  -[SBTransientOverlayPresentationManager coverSheetPresentationManager]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerWillBeginRotation:toInterfaceOrientation:]
  -[SBTransientOverlayPresentationManager _updateContentStatusBarPresentation]
  -[SBTransientOverlayPresentationManager _updateWindowHitTestingForEntity:]
  -[SBTransientOverlayPresentationManager _windowLevelForEntity:]
  -[SBTransientOverlayPresentationManager _updateStatusBarWithCurrentExternalStatusBarSettings:animated:]
  -[SBTransientOverlayPresentationManager setCoverSheetPresentationManager:]
  -[SBTransientOverlayPresentationManager ownsHomeGesture]
  -[SBTransientOverlayPresentationManager preferredGestureDismissalStyle]
  -[SBTransientOverlayPresentationManager _statusBarEntity]
  -[SBTransientOverlayPresentationManager isTopmostPresentedViewController:]
  -[SBTransientOverlayPresentationManager homeGrabberViewDidReceiveClick:]
  -[SBTransientOverlayPresentationManager setBannerManager:]
  -[SBTransientOverlayPresentationManager _dismissEntity:animated:completion:]
  -[SBTransientOverlayPresentationManager _isPresentationStatusBarHiddenForVisibility:currentExternalStatusBarSettings:]
  -[SBTransientOverlayPresentationManager prefersStatusBarActivityItemVisible]
  -[SBTransientOverlayPresentationManager transientOverlayViewControllerNeedsStatusBarAppearanceUpdate:]
  -[SBTransientOverlayPresentationManager _updateDeactivationAssertions]
  -[SBTransientOverlayPresentationManager performPresentationRequest:]
  -[SBTransientOverlayPresentationManager canHandleButtonEvents]
  -[SBTransientOverlayPresentationManager _applyWallpaperAnimationSuspensionAssertionForEntity:]
  -[SBTransientOverlayPresentationManager _updateHomeGestureStateAnimated:]
  -[SBTransientOverlayPresentationManager handleDoubleHeightStatusBarTap]
  -[SBTransientOverlayPresentationManager performDismissalRequest:]
  -[SBTransientOverlayPresentationManager preferredWhitePointAdaptivityStyleValue]
  -[SBTransientOverlayPresentationManager setDelegate:]
  -[SBTransientOverlayPresentationManager hasActivePresentation]
  -[SBTransientOverlayPresentationManager setFluidDismissalState:forViewController:]
  -[SBTransientOverlayPresentationManager presentedViewControllerCount]
  -[SBTransientOverlayPresentationManager isPresentingViewController:]
  -[SBTransientOverlayPresentationManager newContentStatusBarHiddenAssertionWithReason:]
  -[SBTransientOverlayPresentationManager topmostWindowLevel]
  -[SBTransientOverlayPresentationManager delegate]
  -[SBTransientOverlayPresentationManager topmostViewControllerInterfaceOrientation]
  -[SBTransientOverlayPresentationManager _invalidateAssertionsForEntity:]


_SBTransientOverlayPresentedEntity : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  double baseWindowLevel
 @property  SBTransientOverlayViewController *viewController
 @property  SBTransientOverlayBackgroundWindow *backgroundWindow
 @property  BOOL rotating
 @property  SBTransientOverlayWindow *window
 @property  BOOL dismissing
 @property  BOOL hasFinishedWindowInitialization
 @property  BOOL hasPreservedInputViews
 @property  <BSInvalidatable> *disableAutoUnlockAssertion
 @property  <BSInvalidatable> *proximityEnabledAssertion
 @property  <BSInvalidatable> *wallpaperAnimationSuspensionAssertion
 @property  SBFluidDismissalState *fluidDismissalState
 @property  SBPresentationObservationToken *bannerLongLookPresentationObservationToken
 @property  <BSInvalidatable> *bannerLongLookWindowLevelAssertion
 @property  SBPresentationObservationToken *controlCenterPresentationObservationToken
 @property  <BSInvalidatable> *controlCenterWindowLevelAssertion
 @property  SBPresentationObservationToken *siriPresentationObservationToken
 @property  <BSInvalidatable> *siriWindowLevelAssertion

  // instance methods
  -[_SBTransientOverlayPresentedEntity viewController]
  -[_SBTransientOverlayPresentedEntity window]
  -[_SBTransientOverlayPresentedEntity setFluidDismissalState:]
  -[_SBTransientOverlayPresentedEntity .cxx_destruct]
  -[_SBTransientOverlayPresentedEntity setDismissing:]
  -[_SBTransientOverlayPresentedEntity fluidDismissalState]
  -[_SBTransientOverlayPresentedEntity setRotating:]
  -[_SBTransientOverlayPresentedEntity isDismissing]
  -[_SBTransientOverlayPresentedEntity isRotating]
  -[_SBTransientOverlayPresentedEntity initWithViewController:window:baseWindowLevel:]
  -[_SBTransientOverlayPresentedEntity baseWindowLevel]
  -[_SBTransientOverlayPresentedEntity hasPreservedInputViews]
  -[_SBTransientOverlayPresentedEntity setHasPreservedInputViews:]
  -[_SBTransientOverlayPresentedEntity setSiriPresentationObservationToken:]
  -[_SBTransientOverlayPresentedEntity setSiriWindowLevelAssertion:]
  -[_SBTransientOverlayPresentedEntity siriWindowLevelAssertion]
  -[_SBTransientOverlayPresentedEntity siriPresentationObservationToken]
  -[_SBTransientOverlayPresentedEntity setControlCenterPresentationObservationToken:]
  -[_SBTransientOverlayPresentedEntity setControlCenterWindowLevelAssertion:]
  -[_SBTransientOverlayPresentedEntity controlCenterWindowLevelAssertion]
  -[_SBTransientOverlayPresentedEntity controlCenterPresentationObservationToken]
  -[_SBTransientOverlayPresentedEntity setBannerLongLookPresentationObservationToken:]
  -[_SBTransientOverlayPresentedEntity setBannerLongLookWindowLevelAssertion:]
  -[_SBTransientOverlayPresentedEntity bannerLongLookWindowLevelAssertion]
  -[_SBTransientOverlayPresentedEntity bannerLongLookPresentationObservationToken]
  -[_SBTransientOverlayPresentedEntity setDisableAutoUnlockAssertion:]
  -[_SBTransientOverlayPresentedEntity setHasFinishedWindowInitialization:]
  -[_SBTransientOverlayPresentedEntity proximityEnabledAssertion]
  -[_SBTransientOverlayPresentedEntity setProximityEnabledAssertion:]
  -[_SBTransientOverlayPresentedEntity wallpaperAnimationSuspensionAssertion]
  -[_SBTransientOverlayPresentedEntity setWallpaperAnimationSuspensionAssertion:]
  -[_SBTransientOverlayPresentedEntity backgroundWindow]
  -[_SBTransientOverlayPresentedEntity disableAutoUnlockAssertion]
  -[_SBTransientOverlayPresentedEntity setBackgroundWindow:]
  -[_SBTransientOverlayPresentedEntity hasFinishedWindowInitialization]


SBConferenceManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBConferenceManager sharedInstance]
  +[SBConferenceManager initialize]

  // instance methods
  -[SBConferenceManager inFaceTime]
  -[SBConferenceManager currentFaceTimeCall]
  -[SBConferenceManager canStartFaceTime]
  -[SBConferenceManager init]
  -[SBConferenceManager incomingFaceTimeCall]
  -[SBConferenceManager dealloc]
  -[SBConferenceManager .cxx_destruct]
  -[SBConferenceManager hasFaceTimeCapability]
  -[SBConferenceManager _faceTimeStateChanged:]
  -[SBConferenceManager activeFaceTimeCall]
  -[SBConferenceManager faceTimeInvitationExists]
  -[SBConferenceManager endFaceTime]
  -[SBConferenceManager faceTimeIsAvailable]
  -[SBConferenceManager inFaceTimeVideo]
  -[SBConferenceManager activeFaceTimeCallExists]


SBExternalSoundsDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL keyboardPlaysSounds
 @property  BOOL systemHapticsEnabled
 @property  BOOL buttonsCanChangeRingerVolume

  // instance methods
  -[SBExternalSoundsDefaults init]
  -[SBExternalSoundsDefaults _bindAndRegisterDefaults]


SBNotificationPresentableViewController : NCNotificationPresentableViewController /System/Library/PrivateFrameworks/UserManagementUI.framework/UserManagementUI <SBBannerManagerPresentable>
 @property  NSString *requesterIdentifier
 @property  NSString *requestIdentifier
 @property  UIViewController *viewController
 @property  long long presentableType
 @property  BOOL draggingDismissalEnabled
 @property  BOOL draggingInteractionEnabled
 @property  BOOL touchOutsideDismissalEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNotificationPresentableViewController handleHomeButtonPress]
  -[SBNotificationPresentableViewController handleHeadsetButtonPress:]
  -[SBNotificationPresentableViewController handleLockButtonPress]
  -[SBNotificationPresentableViewController shouldDismissForReason:]
  -[SBNotificationPresentableViewController handleHomeButtonLongPress]
  -[SBNotificationPresentableViewController handleVolumeDownButtonPress]
  -[SBNotificationPresentableViewController handleVolumeUpButtonPress]
  -[SBNotificationPresentableViewController handleHomeButtonDoublePress]
  -[SBNotificationPresentableViewController shouldAcquireWindowLevelAssertion]


SBWallpaperController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFLegibilitySettingsProviderDelegate, SBFWallpaperViewInternalObserver, SBUIActiveOrientationObserver, _UISettingsKeyObserver, SBWallpaperPresentingDelegate, SBWallpaperReachabilityCoordinating, BSDescriptionProviding, SBWallpaperServerDelegate, SBFWallpaperViewDelegate, UIWindowDelegate, CSWallpaperOverlayHosting, SBWallpaperPresenting, SBWallpaperLegibilityProviding>
 @property  SBWallpaperAggdLogger *wallpaperAggdLogger
 @property  long long _orientation
 @property  UITraitCollection *fakeBlurViewOverrideTraitCollection
 @property  <BSInvalidatable> *batterySaverAnimationAssertion
 @property  <BSInvalidatable> *wallpaperStyleAnimationAssertion
 @property  UIScreen *screen
 @property  NSString *cachingIdentifier
 @property  <SBWallpaperPresenting> *presenter
 @property  <SBWallpaperLegibilityProviding> *legibilityProvider
 @property  double windowLevel
 @property  UIGestureRecognizer *wallpaperGestureRecognizer
 @property  long long activeOrientationSource
 @property  SBFWallpaperConfigurationManager *wallpaperConfigurationManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double effectiveReachabilityYOffset
 @property  <SBWallpaperPresentingDelegate> *wallpaperPresentingDelegate
 @property  long long variant
 @property  double homescreenWallpaperScale
 @property  double minimumHomescreenWallpaperScale
 @property  double lockscreenWallpaperScale
 @property  double minimumLockscreenWallpaperScale
 @property  <SBFIrisWallpaperView> *irisWallpaperView
 @property  {?=qqd} currentHomescreenStyleTransitionState

  // class methods
  +[SBWallpaperController sharedInstance]
  +[SBWallpaperController accessAuthenticator]

  // instance methods
  -[SBWallpaperController wallpaperConfigurationManager]
  -[SBWallpaperController setLockscreenWallpaperContentsRect:]
  -[SBWallpaperController suspendWallpaperAnimationForReason:]
  -[SBWallpaperController _noteSignificantTimeChanged:]
  -[SBWallpaperController wallpaperView:didChangeZoomFactor:]
  -[SBWallpaperController cancelInProcessAnimations]
  -[SBWallpaperController setWallpaperAggdLogger:]
  -[SBWallpaperController wallpaperView:wallpaperConfigurationIncludingValueTypes:]
  -[SBWallpaperController wallpaperAggdLogger]
  -[SBWallpaperController setVariant:withOutAnimationFactory:inAnimationFactory:completion:]
  -[SBWallpaperController setLockscreenWallpaperScale:withAnimationFactory:]
  -[SBWallpaperController legibilityProvider]
  -[SBWallpaperController wallpaperGestureRecognizer]
  -[SBWallpaperController updateIrisWallpaperForStaticMode]
  -[SBWallpaperController currentHomescreenStyleTransitionState]
  -[SBWallpaperController setLockscreenWallpaperScale:]
  -[SBWallpaperController setWallpaperStyleAnimationAssertion:]
  -[SBWallpaperController wallpaperViewDidInvalidateBlurs:]
  -[SBWallpaperController beginRequiringWithReason:]
  -[SBWallpaperController cachingIdentifier]
  -[SBWallpaperController screen]
  -[SBWallpaperController setHomescreenWallpaperScale:withAnimationFactory:]
  -[SBWallpaperController contrastInRect:forVariant:]
  -[SBWallpaperController contrastForVariant:]
  -[SBWallpaperController wallpaperPresentingDelegate]
  -[SBWallpaperController relinquishHostingOfWallpaperOverlay]
  -[SBWallpaperController endDelayingHomescreenStyleChangesForReason:animationFactory:]
  -[SBWallpaperController startHostingWallpaperOverlay:]
  -[SBWallpaperController irisWallpaperView]
  -[SBWallpaperController activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBWallpaperController wallpaperServer:setWallpaperColorName:forVariants:completionHandler:]
  -[SBWallpaperController updateWallpaperForLocations:withCompletion:]
  -[SBWallpaperController preheatWallpaperForVariant:]
  -[SBWallpaperController suspendColorSamplingForReason:]
  -[SBWallpaperController lockscreenWallpaperScale]
  -[SBWallpaperController setWallpaperStyle:forPriority:forVariant:withAnimationFactory:]
  -[SBWallpaperController minimumLockscreenWallpaperScale]
  -[SBWallpaperController legibilitySettingsForVariant:]
  -[SBWallpaperController _batterySaverModeChanged:]
  -[SBWallpaperController averageColorForVariant:]
  -[SBWallpaperController newFakeBlurViewForVariant:style:transformOptions:]
  -[SBWallpaperController initWithWallpaperConfigurationManager:]
  -[SBWallpaperController setAlpha:forWallpaperVariant:]
  -[SBWallpaperController wallpaperViewDidChangeWantsRasterization:]
  -[SBWallpaperController setLockscreenOnlyWallpaperAlpha:]
  -[SBWallpaperController _window]
  -[SBWallpaperController addObserver:forVariant:]
  -[SBWallpaperController settings:changedValueForKey:]
  -[SBWallpaperController setFakeBlurViewOverrideTraitCollection:]
  -[SBWallpaperController willAnimateRotationToInterfaceOrientation:duration:]
  -[SBWallpaperController initWithWallpaperConfigurationManager:cachingIdentifier:]
  -[SBWallpaperController homescreenWallpaperScale]
  -[SBWallpaperController setWallpaperPresentingDelegate:]
  -[SBWallpaperController init]
  -[SBWallpaperController _saveWallpaperAggdKeysForLocations:withConfiguration:]
  -[SBWallpaperController wallpaperServer:setWallpaperVideoWithWallpaperMode:cropRect:wallpaperMode:completionHandler:]
  -[SBWallpaperController setVariant:]
  -[SBWallpaperController deactivateOrientationSource:]
  -[SBWallpaperController setDisallowsRasterization:forVariant:withReason:]
  -[SBWallpaperController orientationSource:didRotateFromInterfaceOrientation:]
  -[SBWallpaperController removeReachabilityObserver:]
  -[SBWallpaperController dealloc]
  -[SBWallpaperController _isAcceptingOrientationChangesFromSource:]
  -[SBWallpaperController isWindowIgnoredForReachability:]
  -[SBWallpaperController batterySaverAnimationAssertion]
  -[SBWallpaperController wallpaperServer:fetchOriginalVideoURLDataForVariant:completionHandler:]
  -[SBWallpaperController .cxx_destruct]
  -[SBWallpaperController updateWallpaperForLocations:wallpaperMode:withCompletion:]
  -[SBWallpaperController minimumHomescreenWallpaperScale]
  -[SBWallpaperController _forceUpdateToSpringBoardInterfaceOrientationWithAnimationDuration:]
  -[SBWallpaperController wallpaperServer:restoreDefaultWallpaperWithCompletionHandler:]
  -[SBWallpaperController _WallpaperOrientationNotForYou]
  -[SBWallpaperController _reloadWallpaperAndFlushCaches:completionHandler:]
  -[SBWallpaperController succinctDescriptionBuilder]
  -[SBWallpaperController beginDelayingHomescreenStyleChangesForReason:]
  -[SBWallpaperController wallpaperStyleAnimationAssertion]
  -[SBWallpaperController removeObserver:forVariant:]
  -[SBWallpaperController wallpaperPresenter:requestsOrientationWithRefresh:]
  -[SBWallpaperController variant]
  -[SBWallpaperController wallpaperServer:setWallpaperColor:darkColor:forVariants:completionHandler:]
  -[SBWallpaperController wallpaperPresenter:didChangeWallpaperForLocations:withConfiguration:]
  -[SBWallpaperController defaultInterfaceOrientationForSource:]
  -[SBWallpaperController presenter]
  -[SBWallpaperController updateOrientationAfterSourceChange]
  -[SBWallpaperController updateIrisWallpaperForInteractiveMode]
  -[SBWallpaperController wallpaperServer:setWallpaperGradient:forVariants:completionHandler:]
  -[SBWallpaperController activeInterfaceOrientationSourcesDescriptions]
  -[SBWallpaperController wallpaperServer:fetchOriginalImageDataForVariant:completionHandler:]
  -[SBWallpaperController _wallpaperViewForVariant:]
  -[SBWallpaperController succinctDescription]
  -[SBWallpaperController wallpaperServer:fetchThumbnailDataForVariant:completionHandler:]
  -[SBWallpaperController setBatterySaverAnimationAssertion:]
  -[SBWallpaperController setWallpaperHidden:variant:reason:]
  -[SBWallpaperController averageColorInRect:forVariant:withSmudgeRadius:]
  -[SBWallpaperController setOrientationProvider:forSource:]
  -[SBWallpaperController fakeBlurViewOverrideTraitCollection]
  -[SBWallpaperController orientationSource:willAnimateRotationToInterfaceOrientation:duration:]
  -[SBWallpaperController wallpaperServer:fetchContentCutoutBoundsForVariant:orientation:completionHandler:]
  -[SBWallpaperController windowLevel]
  -[SBWallpaperController _motionEffectsChanged]
  -[SBWallpaperController orientationSource:willRotateToInterfaceOrientation:duration:]
  -[SBWallpaperController addReachabilityObserver:]
  -[SBWallpaperController initWithScreen:orientation:variant:wallpaperConfigurationManager:cachingIdentifier:]
  -[SBWallpaperController _updateScreenBlanked]
  -[SBWallpaperController averageColorInRect:forVariant:]
  -[SBWallpaperController setWallpaperStyleTransitionState:forPriority:forVariant:withAnimationFactory:]
  -[SBWallpaperController providerLegibilitySettingsChanged:]
  -[SBWallpaperController setWindowLevel:]
  -[SBWallpaperController activateOrientationSource:]
  -[SBWallpaperController activeOrientationSource]
  -[SBWallpaperController removeWallpaperStyleForPriority:forVariant:withAnimationFactory:]
  -[SBWallpaperController descriptionWithMultilinePrefix:]
  -[SBWallpaperController effectiveReachabilityYOffset]
  -[SBWallpaperController activeInterfaceOrientationWillChangeToOrientation:]
  -[SBWallpaperController _updateWallpaperForLocations:options:wallpaperMode:withCompletion:]
  -[SBWallpaperController descriptionBuilderWithMultilinePrefix:]
  -[SBWallpaperController _updateWallpaperForLocations:options:withCompletion:]


_SBWallpaperWindow : SBSecureWindow
  // instance methods
  -[_SBWallpaperWindow activeInterfaceOrientation]


SBExternalGlobalDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  NSString *locale
 @property  NSArray *languages
 @property  NSArray *keyboards

  // class methods
  +[SBExternalGlobalDefaults __useDynamicMethodResolution]

  // instance methods
  -[SBExternalGlobalDefaults init]
  -[SBExternalGlobalDefaults setLocale:]
  -[SBExternalGlobalDefaults locale]
  -[SBExternalGlobalDefaults keyboards]
  -[SBExternalGlobalDefaults setKeyboards:]
  -[SBExternalGlobalDefaults languages]
  -[SBExternalGlobalDefaults setLanguages:]
  -[SBExternalGlobalDefaults removeFormattedPhoneNumberFromGlobalPreferences]
  -[SBExternalGlobalDefaults flushExternalCaches]


SBWalletNotificationSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NCNotificationSource>
 @property  NCNotificationDispatcher *dispatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWalletNotificationSource setDispatcher:]
  -[SBWalletNotificationSource dispatcher]
  -[SBWalletNotificationSource initWithDispatcher:]
  -[SBWalletNotificationSource .cxx_destruct]
  -[SBWalletNotificationSource postNotificationRequestForCardItem:]
  -[SBWalletNotificationSource modifyNotificationRequestForCardItem:]
  -[SBWalletNotificationSource withdrawNotificationRequestForCardItem:]


SBHBInitialPressDownGestureRecognizer : UIHBClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHBInitialPressUpGestureRecognizer : UIHBClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHBDoublePressDownGestureRecognizer : UIHBClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHBDoublePressUpGestureRecognizer : UIHBClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHBTriplePressDownGestureRecognizer : UIHBClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHBSinglePressUpGestureRecognizer : UIHBClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHBAcceleratedSinglePressUpGestureRecognizer : UIHBClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHBTriplePressUpGestureRecognizer : UIHBClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHBLongPressGestureRecognizer : UIHBLongClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHBDoubleTapUpGestureRecognizer : UIHBClickGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBHomeHardwareButtonGestureRecognizerConfiguration : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBSystemGestureManager *systemGestureManager
 @property  UIHBClickGestureRecognizer *initialButtonDownGestureRecognizer
 @property  UIHBClickGestureRecognizer *initialButtonUpGestureRecognizer
 @property  UIHBClickGestureRecognizer *singlePressUpGestureRecognizer
 @property  UIHBClickGestureRecognizer *acceleratedSinglePressUpGestureRecognizer
 @property  UIHBLongClickGestureRecognizer *longPressGestureRecognizer
 @property  UIHBClickGestureRecognizer *doublePressDownGestureRecognizer
 @property  UIHBClickGestureRecognizer *doublePressUpGestureRecognizer
 @property  UIHBClickGestureRecognizer *triplePressUpGestureRecognizer
 @property  UIHBClickGestureRecognizer *doubleTapUpGestureRecognizer
 @property  BOOL shouldConfigureDependencies

  // instance methods
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setLongPressGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration doubleTapUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setSinglePressUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration systemGestureManager]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setTriplePressUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration .cxx_destruct]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration triplePressUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setInitialButtonDownGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration singlePressUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setAcceleratedSinglePressUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setSystemGestureManager:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration acceleratedSinglePressUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setDoubleTapUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration shouldConfigureDependencies]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration initialButtonUpGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration doublePressDownGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setDoublePressUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setDoublePressDownGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration initialButtonDownGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration setInitialButtonUpGestureRecognizer:]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration longPressGestureRecognizer]
  -[SBHomeHardwareButtonGestureRecognizerConfiguration doublePressUpGestureRecognizer]


SBHomeHardwareButton : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIGestureRecognizerDelegate, SBHardwareButtonGestureParametersObserver>
 @property  SBHomeHardwareButtonActions *buttonActions
 @property  SBHardwareButtonGestureParameters *buttonGestureParameters
 @property  SBHomeHardwareButtonGestureRecognizerConfiguration *gestureRecognizerConfiguration
 @property  UIGestureRecognizer *screenshotGestureRecognizer
 @property  long long homeButtonType
 @property  long long maximumPressCount
 @property  long long maximumTapCount
 @property  BOOL longPressDidOccur
 @property  NSMutableDictionary *emulatedPerSenderDownCount
 @property  BKSButtonHapticsDefinition *buttonDefinition
 @property  BOOL buttonDown
 @property  BOOL supportsAcceleratedAppDismiss
 @property  long long hapticType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeHardwareButton longPress:]
  -[SBHomeHardwareButton provider:didUpdateButtonGestureParameters:]
  -[SBHomeHardwareButton doublePressDown:]
  -[SBHomeHardwareButton _setFingerDetectionEnabled:]
  -[SBHomeHardwareButton supportsAcceleratedAppDismiss]
  -[SBHomeHardwareButton _terminateHomeButtonEventAtCount:]
  -[SBHomeHardwareButton homeButtonType]
  -[SBHomeHardwareButton setMaximumPressCount:]
  -[SBHomeHardwareButton setHomeButtonType:]
  -[SBHomeHardwareButton _createGestureRecognizersWithConfiguration:]
  -[SBHomeHardwareButton configureForwardingToLockButton:]
  -[SBHomeHardwareButton addHintSuppressionAssertion:]
  -[SBHomeHardwareButton _reconfigureGestureRecognizersForNewMaximumTapCount:oldMaximumTapCount:]
  -[SBHomeHardwareButton _longPressGestureRecognizerShouldBegin:]
  -[SBHomeHardwareButton .cxx_destruct]
  -[SBHomeHardwareButton setScreenshotGestureRecognizer:]
  -[SBHomeHardwareButton gestureRecognizerShouldBegin:]
  -[SBHomeHardwareButton removeLongPressDurationAssertion:]
  -[SBHomeHardwareButton setMaximumTapCount:]
  -[SBHomeHardwareButton setLongPressDidOccur:]
  -[SBHomeHardwareButton cancelLongPress]
  -[SBHomeHardwareButton setEmulatedPerSenderDownCount:]
  -[SBHomeHardwareButton addLongPressDurationAssertion:]
  -[SBHomeHardwareButton gestureRecognizerConfiguration]
  -[SBHomeHardwareButton performWhenMenuButtonIsUpUsingBlock:]
  -[SBHomeHardwareButton _acceleratedSinglePressRecognizerShouldBegin]
  -[SBHomeHardwareButton hapticType]
  -[SBHomeHardwareButton doublePressUp:]
  -[SBHomeHardwareButton acceleratedSinglePressUp:]
  -[SBHomeHardwareButton _isMenuDoublePressDisabled]
  -[SBHomeHardwareButton buttonActions]
  -[SBHomeHardwareButton longPressDidOccur]
  -[SBHomeHardwareButton setButtonActions:]
  -[SBHomeHardwareButton buttonGestureParameters]
  -[SBHomeHardwareButton setGestureRecognizerConfiguration:]
  -[SBHomeHardwareButton initialButtonDown:]
  -[SBHomeHardwareButton screenshotRecognizerDidRecognize:]
  -[SBHomeHardwareButton buttonDefinition]
  -[SBHomeHardwareButton emulatedPerSenderDownCount]
  -[SBHomeHardwareButton setButtonGestureParameters:]
  -[SBHomeHardwareButton emulateHomeButtonEventsIfNeeded:]
  -[SBHomeHardwareButton removeHintSuppressionAssertion:]
  -[SBHomeHardwareButton initWithScreenshotGestureRecognizer:homeButtonType:buttonActions:gestureRecognizerConfiguration:]
  -[SBHomeHardwareButton setHapticType:]
  -[SBHomeHardwareButton initWithScreenshotGestureRecognizer:homeButtonType:]
  -[SBHomeHardwareButton screenshotGestureRecognizer]
  -[SBHomeHardwareButton _processDoubleDownAndDoubleUpSimultaneously]
  -[SBHomeHardwareButton _reconfigureGestureRecognizersForNewMaximumPressCount:oldMaximumPressCount:]
  -[SBHomeHardwareButton initialButtonUp:]
  -[SBHomeHardwareButton performAfterMenuButtonUpIsHandledUsingBlock:]
  -[SBHomeHardwareButton isButtonDown]
  -[SBHomeHardwareButton _reconfigureHomeButton]
  -[SBHomeHardwareButton gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBHomeHardwareButton _startObservingReconfigurationTriggers]
  -[SBHomeHardwareButton _isMenuDoublePressAllowed:]
  -[SBHomeHardwareButton gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBHomeHardwareButton _cancelGestureRecognizer:]
  -[SBHomeHardwareButton doubleTapUp:]
  -[SBHomeHardwareButton _singlePressUp:]
  -[SBHomeHardwareButton singlePressUp:]
  -[SBHomeHardwareButton maximumPressCount]
  -[SBHomeHardwareButton triplePressUp:]
  -[SBHomeHardwareButton setButtonDefinition:]
  -[SBHomeHardwareButton maximumTapCount]


SBRotateHomeScreenWorkspaceTransaction : SBMainWorkspaceTransaction <SBUIAnimationControllerObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRotateHomeScreenWorkspaceTransaction .cxx_destruct]
  -[SBRotateHomeScreenWorkspaceTransaction begin]


SBEntityRemovalCrossblurSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBEntityRemovalCrossblurSwitcherModifier visibleAppLayouts]
  -[SBEntityRemovalCrossblurSwitcherModifier scaleForIndex:]
  -[SBEntityRemovalCrossblurSwitcherModifier animationAttributesForLayoutElement:]
  -[SBEntityRemovalCrossblurSwitcherModifier opacityForIndex:]
  -[SBEntityRemovalCrossblurSwitcherModifier frameForIndex:]
  -[SBEntityRemovalCrossblurSwitcherModifier .cxx_destruct]
  -[SBEntityRemovalCrossblurSwitcherModifier transitionDidEnd]
  -[SBEntityRemovalCrossblurSwitcherModifier didMoveToParentModifier:]
  -[SBEntityRemovalCrossblurSwitcherModifier transitionWillUpdate]
  -[SBEntityRemovalCrossblurSwitcherModifier handleTimerEvent:]
  -[SBEntityRemovalCrossblurSwitcherModifier initWithTransitionID:appLayout:multitaskingModifier:]


SBAppSwitcherModel : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBRecentAppLayoutsDelegate>
 @property  <SBAppSwitcherModelDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAppSwitcherModel appSwitcherHeaderIconImageDescriptorName]

  // instance methods
  -[SBAppSwitcherModel remove:]
  -[SBAppSwitcherModel recentAppLayouts:didRemoveAppLayoutForFallingOffList:]
  -[SBAppSwitcherModel removeAppLayouts:]
  -[SBAppSwitcherModel init]
  -[SBAppSwitcherModel hide:]
  -[SBAppSwitcherModel dealloc]
  -[SBAppSwitcherModel .cxx_destruct]
  -[SBAppSwitcherModel replaceAppLayout:withAppLayout:]
  -[SBAppSwitcherModel _warmUpIconsForRecentAppLayouts:]
  -[SBAppSwitcherModel recentDisplayItemsForBundleIdentifier:includingHiddenAppLayouts:]
  -[SBAppSwitcherModel addToFront:]
  -[SBAppSwitcherModel appLayoutsForBundleIdentifier:includingHiddenAppLayouts:]
  -[SBAppSwitcherModel initWithIconController:applicationController:recents:]
  -[SBAppSwitcherModel setDelegate:]
  -[SBAppSwitcherModel delegate]
  -[SBAppSwitcherModel _warmUpIconsForAppLayout:]
  -[SBAppSwitcherModel _recentAppLayoutsController]
  -[SBAppSwitcherModel appLayoutsIncludingHiddenAppLayouts:]


SBWorkspaceTransitionContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBWorkspaceTransitionRequest *request
 @property  NSSet *entities
 @property  NSSet *previousEntities
 @property  BOOL finalized
 @property  BOOL animationDisabled
 @property  BSAnimationSettings *animationSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWorkspaceTransitionContext context]

  // instance methods
  -[SBWorkspaceTransitionContext setAnimationDisabled:]
  -[SBWorkspaceTransitionContext previousEntityForKey:]
  -[SBWorkspaceTransitionContext init]
  -[SBWorkspaceTransitionContext addFinalizeBlock:]
  -[SBWorkspaceTransitionContext setRequest:]
  -[SBWorkspaceTransitionContext .cxx_destruct]
  -[SBWorkspaceTransitionContext entities]
  -[SBWorkspaceTransitionContext succinctDescriptionBuilder]
  -[SBWorkspaceTransitionContext previousEntities]
  -[SBWorkspaceTransitionContext succinctDescription]
  -[SBWorkspaceTransitionContext previousEntityForIdentifier:]
  -[SBWorkspaceTransitionContext setEntity:forKey:]
  -[SBWorkspaceTransitionContext setPreviousEntity:forKey:]
  -[SBWorkspaceTransitionContext setAnimationSettings:]
  -[SBWorkspaceTransitionContext animationSettings]
  -[SBWorkspaceTransitionContext finalize]
  -[SBWorkspaceTransitionContext entityForIdentifier:]
  -[SBWorkspaceTransitionContext isFinalized]
  -[SBWorkspaceTransitionContext animationDisabled]
  -[SBWorkspaceTransitionContext request]
  -[SBWorkspaceTransitionContext descriptionWithMultilinePrefix:]
  -[SBWorkspaceTransitionContext entityForKey:]
  -[SBWorkspaceTransitionContext descriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceTransitionContext compactDescriptionBuilderWithMultilinePrefix:]


SBRotationLockHUDViewController : SBHUDViewController
 @property  BOOL locked

  // instance methods
  -[SBRotationLockHUDViewController init]
  -[SBRotationLockHUDViewController isLocked]
  -[SBRotationLockHUDViewController setLocked:]
  -[SBRotationLockHUDViewController _updateLockedImage]


SBRotationLockHUDController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBRotationLockHUDController activateWithLocked:]


SBDataPlanExpirationAlertItem : SBDataPlanAccountAlertItem
 @property  NSDate *expirationDate

  // instance methods
  -[SBDataPlanExpirationAlertItem setExpirationDate:]
  -[SBDataPlanExpirationAlertItem .cxx_destruct]
  -[SBDataPlanExpirationAlertItem expirationDate]
  -[SBDataPlanExpirationAlertItem configure:requirePasscodeForActions:]
  -[SBDataPlanExpirationAlertItem initWithAccountURL:expirationDate:]


SBSwitcherCardUpdateTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSwitcherCardUpdateTestRecipe load]

  // instance methods
  -[SBSwitcherCardUpdateTestRecipe title]
  -[SBSwitcherCardUpdateTestRecipe handleVolumeIncrease]
  -[SBSwitcherCardUpdateTestRecipe handleVolumeDecrease]


SBBluetoothAccessoryLowPowerAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBBluetoothAccessoryLowPowerAlertItem .cxx_destruct]
  -[SBBluetoothAccessoryLowPowerAlertItem wakeDisplay]
  -[SBBluetoothAccessoryLowPowerAlertItem configure:requirePasscodeForActions:]
  -[SBBluetoothAccessoryLowPowerAlertItem initWithAccessory:batteryLevel:]


SBApplicationLaunchNotifyAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  SBApplication *application

  // instance methods
  -[SBApplicationLaunchNotifyAlertItem initWithApplication:]
  -[SBApplicationLaunchNotifyAlertItem application]
  -[SBApplicationLaunchNotifyAlertItem dismissOnLock]
  -[SBApplicationLaunchNotifyAlertItem .cxx_destruct]


SBDismissOverlaysAnimationController : SBUIAnimationController
 @property  unsigned long dismissOptions

  // class methods
  +[SBDismissOverlaysAnimationController willDismissOverlaysForDismissOptions:]
  +[SBDismissOverlaysAnimationController _overlaysToDismissForOptions:]

  // instance methods
  -[SBDismissOverlaysAnimationController _canBeInterrupted]
  -[SBDismissOverlaysAnimationController animationSettings]
  -[SBDismissOverlaysAnimationController _startAnimation]
  -[SBDismissOverlaysAnimationController initWithTransitionContextProvider:]
  -[SBDismissOverlaysAnimationController initWithTransitionContextProvider:options:]
  -[SBDismissOverlaysAnimationController dismissOptions]


SBHomeGrabberView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <PTSettingsKeyPathObserver, SBAttentionAwarenessClientDelegate, MTLumaDodgePillBackgroundLuminanceObserver, SBSystemPointerInteractionDelegate>
 @property  <SBHomeGrabberDelegate> *delegate
 @property  <SBHomeGrabberPointerClickDelegate> *pointerClickDelegate
 @property  BOOL autoHides
 @property  BOOL edgeProtectEnabled
 @property  long long colorBias
 @property  BOOL suppressesBounce
 @property  double suggestedEdgeSpacing
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGrabberView shouldBeginPointerInteractionAtLocation:forView:]
  -[SBHomeGrabberView _bounce]
  -[SBHomeGrabberView initWithFrame:]
  -[SBHomeGrabberView dealloc]
  -[SBHomeGrabberView clientDidResetForUserAttention:]
  -[SBHomeGrabberView .cxx_destruct]
  -[SBHomeGrabberView hitTest:withEvent:]
  -[SBHomeGrabberView setColorBias:]
  -[SBHomeGrabberView styleForRegion:forView:]
  -[SBHomeGrabberView updateStyle]
  -[SBHomeGrabberView colorBias]
  -[SBHomeGrabberView client:attentionLostTimeoutDidExpire:forConfigurationGeneration:withAssociatedObject:]
  -[SBHomeGrabberView settings:changedValueForKeyPath:]
  -[SBHomeGrabberView setPointerClickDelegate:]
  -[SBHomeGrabberView pointerClickDelegate]
  -[SBHomeGrabberView setDelegate:]
  -[SBHomeGrabberView delegate]
  -[SBHomeGrabberView setHidden:]
  -[SBHomeGrabberView layoutSubviews]
  -[SBHomeGrabberView initWithCoder:]
  -[SBHomeGrabberView isHidden]
  -[SBHomeGrabberView lumaDodgePillDidDetectBackgroundLuminanceChange:]
  -[SBHomeGrabberView suggestedEdgeSpacing]
  -[SBHomeGrabberView suggestedSizeForContentWidth:]
  -[SBHomeGrabberView regionAtLocation:forView:]
  -[SBHomeGrabberView setHidden:forReason:withAnimationSettings:]
  -[SBHomeGrabberView initWithFrame:shouldEnableGestures:]
  -[SBHomeGrabberView setAutoHides:]
  -[SBHomeGrabberView initWithFrame:settings:shouldEnableGestures:]
  -[SBHomeGrabberView _newPillView]
  -[SBHomeGrabberView _setSystemPointerInteractionEnabled:]
  -[SBHomeGrabberView _updateIdleTouchAwarenessClient]
  -[SBHomeGrabberView _autohideEffectivelyEnabled]
  -[SBHomeGrabberView resetAutoHideWithInitialDelay:]
  -[SBHomeGrabberView resetAutoHide]
  -[SBHomeGrabberView _calculateStyle]
  -[SBHomeGrabberView _calculatePresence]
  -[SBHomeGrabberView _animationSettingsForTransitionFromStyle:toStyle:fromPresence:toPresence:]
  -[SBHomeGrabberView _updatePresence:style:withAnimationSettings:]
  -[SBHomeGrabberView updateStyleWithAnimationSettings:]
  -[SBHomeGrabberView _edgeProtectEffectivelyEnabled]
  -[SBHomeGrabberView _calculateLumaStyle]
  -[SBHomeGrabberView _animateToStyle:disallowAdditive:withAnimationSettings:]
  -[SBHomeGrabberView grabberFrameForBounds:]
  -[SBHomeGrabberView _calculatePillFrame]
  -[SBHomeGrabberView _pointerInteractionHitTestRect]
  -[SBHomeGrabberView turnOnAutoHideWithInitialDelay:]
  -[SBHomeGrabberView turnOffAutoHideWithDelay:]
  -[SBHomeGrabberView setEdgeProtectEnabled:]
  -[SBHomeGrabberView forgetBackgroundLuminance]
  -[SBHomeGrabberView _bounceHitTest:]
  -[SBHomeGrabberView _invalidateInitialAutoHideTime]
  -[SBHomeGrabberView _noteActiveForTouchThatShouldUnhideImmediately:]
  -[SBHomeGrabberView autoHides]
  -[SBHomeGrabberView isEdgeProtectEnabled]
  -[SBHomeGrabberView suppressesBounce]
  -[SBHomeGrabberView setSuppressesBounce:]


SBHomeGrabberRevealGesturesManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIGestureRecognizerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHomeGrabberRevealGesturesManager sharedInstance]

  // instance methods
  -[SBHomeGrabberRevealGesturesManager _tapRecognized:]
  -[SBHomeGrabberRevealGesturesManager init]
  -[SBHomeGrabberRevealGesturesManager .cxx_destruct]
  -[SBHomeGrabberRevealGesturesManager gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBHomeGrabberRevealGesturesManager gestureRecognizer:shouldReceiveTouch:]
  -[SBHomeGrabberRevealGesturesManager registerGrabber:]
  -[SBHomeGrabberRevealGesturesManager unregisterGrabber:]
  -[SBHomeGrabberRevealGesturesManager _edgePanChanged:]
  -[SBHomeGrabberRevealGesturesManager gestureRecognizerContainsPointerEvent:]


SBLiftToWakeController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CMWakeGestureDelegate>
 @property  SBIdleTimerDefaults *idleTimerDefaults
 @property  BOOL enabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLiftToWakeController sharedController]

  // instance methods
  -[SBLiftToWakeController _startObservingIfNecessary]
  -[SBLiftToWakeController init]
  -[SBLiftToWakeController .cxx_destruct]
  -[SBLiftToWakeController wakeGestureManager:didUpdateWakeGesture:orientation:]
  -[SBLiftToWakeController wakeGestureManager:didUpdateWakeGesture:orientation:detectedAt:]
  -[SBLiftToWakeController wakeGestureManager:didUpdateWakeGesture:]
  -[SBLiftToWakeController isEnabled]
  -[SBLiftToWakeController removeObserver:]
  -[SBLiftToWakeController addObserver:]
  -[SBLiftToWakeController _idleTimerDefaults]
  -[SBLiftToWakeController initWithBacklightController:idleTimerDefaults:]
  -[SBLiftToWakeController _handleBacklightLevelChanged:]
  -[SBLiftToWakeController _reconsiderEnablement]
  -[SBLiftToWakeController _stopObservingIfNecessary]
  -[SBLiftToWakeController _screenTurnedOff]
  -[SBLiftToWakeController _screenTurnedOn]
  -[SBLiftToWakeController _sendTransitionToObservers:deviceOrientation:]
  -[SBLiftToWakeController _ignoredTransition:]
  -[SBLiftToWakeController _isObservingWakeGestureManager]
  -[SBLiftToWakeController _setIdleTimerDefaults:]


SBTransientOverlayWallpaperEffectView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  long long containerOrientation
 @property  long long wallpaperStyle

  // instance methods
  -[SBTransientOverlayWallpaperEffectView prepareToAnimateToTransitionState:]
  -[SBTransientOverlayWallpaperEffectView setWallpaperStyle:]
  -[SBTransientOverlayWallpaperEffectView wallpaperStyle]
  -[SBTransientOverlayWallpaperEffectView setTransitionState:]
  -[SBTransientOverlayWallpaperEffectView .cxx_destruct]
  -[SBTransientOverlayWallpaperEffectView setContainerOrientation:]
  -[SBTransientOverlayWallpaperEffectView containerOrientation]
  -[SBTransientOverlayWallpaperEffectView layoutSubviews]
  -[SBTransientOverlayWallpaperEffectView initWithFrame:wallpaperVariant:]
  -[SBTransientOverlayWallpaperEffectView _updateWallpaperGeometry]
  -[SBTransientOverlayWallpaperEffectView _currentWallpaperTransform]


SBAppSwitcherServicePageContentView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBAppSwitcherPageContentView>
 @property  long long orientation
 @property  double cornerRadius
 @property  BOOL contentRequiresGroupOpacity
 @property  BOOL active
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherServicePageContentView setVisible:]
  -[SBAppSwitcherServicePageContentView isVisible]
  -[SBAppSwitcherServicePageContentView initWithFrame:]
  -[SBAppSwitcherServicePageContentView setCornerRadius:]
  -[SBAppSwitcherServicePageContentView setActive:]
  -[SBAppSwitcherServicePageContentView isActive]
  -[SBAppSwitcherServicePageContentView sizeThatFits:]
  -[SBAppSwitcherServicePageContentView setOrientation:]
  -[SBAppSwitcherServicePageContentView orientation]
  -[SBAppSwitcherServicePageContentView invalidate]
  -[SBAppSwitcherServicePageContentView cornerRadius]
  -[SBAppSwitcherServicePageContentView contentRequiresGroupOpacity]


SBProactiveHomeScreenUsageObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHHomeScreenUsageMonitorObserver>
 @property  SBHIconManager *iconManager
 @property  ATXHomeScreenPrediction *currentPrediction
 @property  <SBProactiveHomeScreenUsageObserverDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProactiveHomeScreenUsageObserver rootFolder]
  -[SBProactiveHomeScreenUsageObserver initWithIconManager:]
  -[SBProactiveHomeScreenUsageObserver currentPrediction]
  -[SBProactiveHomeScreenUsageObserver iconManager]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserTappedWidgetIcon:]
  -[SBProactiveHomeScreenUsageObserver proactiveWidgetForIconDataSource:ofIcon:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteWidgetIconStackChangedActiveWidget:]
  -[SBProactiveHomeScreenUsageObserver logTodayViewDidAppear]
  -[SBProactiveHomeScreenUsageObserver proactiveWidgetForWidget:ofIcon:]
  -[SBProactiveHomeScreenUsageObserver .cxx_destruct]
  -[SBProactiveHomeScreenUsageObserver deviceLockStateDidChange:]
  -[SBProactiveHomeScreenUsageObserver iconModelDidLayout:]
  -[SBProactiveHomeScreenUsageObserver proactiveStackForWidgetIcon:atIndex:gridCellInfo:]
  -[SBProactiveHomeScreenUsageObserver pushCurrentDockConfiguration]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteDataSourceDidDisappear:forWidgetIcon:]
  -[SBProactiveHomeScreenUsageObserver pushCurrentTodayConfiguration]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteDataSourceDidAppear:forWidgetIcon:]
  -[SBProactiveHomeScreenUsageObserver pushCurrentHomeScreenPagesConfiguration]
  -[SBProactiveHomeScreenUsageObserver iconModel]
  -[SBProactiveHomeScreenUsageObserver setCurrentPrediction:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregatorDidNoteHomeScreenLayoutChanged:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteRootControllerWillAppearWithPageIndex:]
  -[SBProactiveHomeScreenUsageObserver setDelegate:]
  -[SBProactiveHomeScreenUsageObserver widgetIdentifiablesDictionaryForIconListModel:]
  -[SBProactiveHomeScreenUsageObserver homeScreenUsageAggregator:didNoteCurrentPageIndexChanged:]
  -[SBProactiveHomeScreenUsageObserver logHomeScreenPageDidAppearWithPageIndex:]
  -[SBProactiveHomeScreenUsageObserver delegate]
  -[SBProactiveHomeScreenUsageObserver pushCurrentHomeScreenConfiguration]


SBOrientationLockManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBOrientationLockManager sharedInstance]

  // instance methods
  -[SBOrientationLockManager isEffectivelyLocked]
  -[SBOrientationLockManager enableLockOverrideForReason:forceOrientation:]
  -[SBOrientationLockManager _updateLockStateWithOrientation:forceUpdateHID:changes:]
  -[SBOrientationLockManager _setupRunLoopObserverIfNecessaryForOrientation:andInitialLockState:]
  -[SBOrientationLockManager init]
  -[SBOrientationLockManager isUserLocked]
  -[SBOrientationLockManager setLockOverrideEnabled:forReason:]
  -[SBOrientationLockManager dealloc]
  -[SBOrientationLockManager _addLockOverrideReason:orientation:force:]
  -[SBOrientationLockManager .cxx_destruct]
  -[SBOrientationLockManager lock]
  -[SBOrientationLockManager succinctDescriptionBuilder]
  -[SBOrientationLockManager lockOverrideEnabled]
  -[SBOrientationLockManager unlock]
  -[SBOrientationLockManager enableLockOverrideForReason:suggestOrientation:]
  -[SBOrientationLockManager succinctDescription]
  -[SBOrientationLockManager userLockOrientation]
  -[SBOrientationLockManager _beginShimmingForReason:]
  -[SBOrientationLockManager deviceOrientationAsFarAsAppsAreConcerned]
  -[SBOrientationLockManager _endShimmingForReason:]
  -[SBOrientationLockManager updateLockOverrideForCurrentDeviceOrientation]
  -[SBOrientationLockManager _updateLockStateWithChanges:]
  -[SBOrientationLockManager restoreStateFromPrefs]
  -[SBOrientationLockManager lock:]
  -[SBOrientationLockManager _removeLockOverrideReason:]
  -[SBOrientationLockManager descriptionWithMultilinePrefix:]
  -[SBOrientationLockManager _handler_runLoopObserverDispose]
  -[SBOrientationLockManager effectiveLockedOrientation]
  -[SBOrientationLockManager descriptionBuilderWithMultilinePrefix:]


SBStashedHyperrectangle : _UIHyperrectangle /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBPIPInteractionController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIGestureRecognizerDelegate, PTSettingsKeyPathObserver>
 @property  BOOL enabled
 @property  {CGSize=dd} preferredContentSize
 @property  {UIEdgeInsets=dddd} edgeInsets
 @property  {CGSize=dd} containerSize
 @property  long long orientation
 @property  double preferredScale
 @property  double stashProgress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPInteractionController _updatePreferredContentSize]
  -[SBPIPInteractionController preferredScale]
  -[SBPIPInteractionController edgeInsets]
  -[SBPIPInteractionController containerSize]
  -[SBPIPInteractionController _removeGestureRecognizers]
  -[SBPIPInteractionController setEdgeInsets:]
  -[SBPIPInteractionController dealloc]
  -[SBPIPInteractionController .cxx_destruct]
  -[SBPIPInteractionController _setupStateCapture]
  -[SBPIPInteractionController _isRotating]
  -[SBPIPInteractionController preferredContentSize]
  -[SBPIPInteractionController _isInteractive]
  -[SBPIPInteractionController setPreferredScale:]
  -[SBPIPInteractionController isEnabled]
  -[SBPIPInteractionController setPreferredContentSize:]
  -[SBPIPInteractionController _currentPosition]
  -[SBPIPInteractionController settings:changedValueForKeyPath:]
  -[SBPIPInteractionController setEnabled:]
  -[SBPIPInteractionController _isPanning]
  -[SBPIPInteractionController initialFrame]
  -[SBPIPInteractionController _isPinching]
  -[SBPIPInteractionController _setDefaults]
  -[SBPIPInteractionController _currentRotation]
  -[SBPIPInteractionController _currentScale]
  -[SBPIPInteractionController orientation]
  -[SBPIPInteractionController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBPIPInteractionController _setupGestureRecognizers]
  -[SBPIPInteractionController handlePinchGesture:]
  -[SBPIPInteractionController handlePanGesture:]
  -[SBPIPInteractionController currentScale]
  -[SBPIPInteractionController _setupDefaultInteractorsAndHyperRegions]
  -[SBPIPInteractionController _setupForInitialFrame]
  -[SBPIPInteractionController _currentPositionForLayoutReason:]
  -[SBPIPInteractionController _currentSizeForLayoutReason:]
  -[SBPIPInteractionController _lastSteadySize]
  -[SBPIPInteractionController stashProgress]
  -[SBPIPInteractionController _hasValidInteractionTargetView]
  -[SBPIPInteractionController _updateInteractorsAndCommit:]
  -[SBPIPInteractionController handleRotationGesture:]
  -[SBPIPInteractionController _updateSettingsDrivenParameters]
  -[SBPIPInteractionController _setNeedsLayoutForTraits:withReason:behavior:completion:]
  -[SBPIPInteractionController _currentCornerPosition]
  -[SBPIPInteractionController __cornersForEdgeInsets:]
  -[SBPIPInteractionController _setPreferredNormalizedScale:animationBehavior:]
  -[SBPIPInteractionController _setPreferredScale:animationBehavior:]
  -[SBPIPInteractionController _applyPreferredScale]
  -[SBPIPInteractionController _cancelAllGestures]
  -[SBPIPInteractionController _hasInFlightLayoutAnimations]
  -[SBPIPInteractionController _performInitialLayoutIfNeeded]
  -[SBPIPInteractionController _isGesturing]
  -[SBPIPInteractionController _canonicalPositionForPoint:]
  -[SBPIPInteractionController _isPreferredContentSizeDirty]
  -[SBPIPInteractionController _noteStashProgress:withReason:]
  -[SBPIPInteractionController _stashTabCompensationTransformForStashProgress:reason:]
  -[SBPIPInteractionController _roundPosition:forSize:]
  -[SBPIPInteractionController _stashProgressForPosition:]
  -[SBPIPInteractionController __moveToAnchorPoint:reason:]
  -[SBPIPInteractionController _handleGestureBeganState:]
  -[SBPIPInteractionController _handleGestureEndedState:]
  -[SBPIPInteractionController _adjustContentViewAnchorPointForGestureRecognizer:]
  -[SBPIPInteractionController __handleGesturesEndedState:]
  -[SBPIPInteractionController _resetAnchorPoint]
  -[SBPIPInteractionController _inFlightHitTestPadding]
  -[SBPIPInteractionController __traitsForGesturesReasons:]
  -[SBPIPInteractionController _isSizeAffectedByLayoutReasons:]
  -[SBPIPInteractionController _sizeChangeBeganWithBehavior:]
  -[SBPIPInteractionController _sizeChangeEnded]
  -[SBPIPInteractionController _isGestureRecognizerRecognizing:]
  -[SBPIPInteractionController _scaleHyperregion]
  -[SBPIPInteractionController _rotationHyperregion]
  -[SBPIPInteractionController canonicalPosition]
  -[SBPIPInteractionController _positionHyperregionUnion]
  -[SBPIPInteractionController __interactivePositionHyperregionForEdgeInsets:]
  -[SBPIPInteractionController __stashedRegionsForEdgeInsets:]
  -[SBPIPInteractionController __steadyPositionHyperregionWithCorners:stashedRegions:]
  -[SBPIPInteractionController __validatedOnScreenInsetRectForEdgeInsets:]
  -[SBPIPInteractionController __shouldIgnoreInsetRect:]
  -[SBPIPInteractionController __minimumOnScreenInsetRect]
  -[SBPIPInteractionController initWithInteractionTargetView:delegate:preferredContentSize:]
  -[SBPIPInteractionController toggleUserPreferredScale]
  -[SBPIPInteractionController setContainerSize:withOrientation:]
  -[SBPIPInteractionController setStashed:]
  -[SBPIPInteractionController layoutInteractedTraits:withReason:source:]
  -[SBPIPInteractionController layoutWithFrame:reason:source:]


SBLockScreenPreviewView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBLockScreenPreviewView .cxx_destruct]
  -[SBLockScreenPreviewView _layoutQuickActionsView]
  -[SBLockScreenPreviewView _layoutPageControl]
  -[SBLockScreenPreviewView _layoutWallpaperView]
  -[SBLockScreenPreviewView _layoutDateView]
  -[SBLockScreenPreviewView layoutSubviews]
  -[SBLockScreenPreviewView _setupWallpaperViewWithImage:]
  -[SBLockScreenPreviewView _setupDateViewWithOptions:]
  -[SBLockScreenPreviewView _setupStatusBar]
  -[SBLockScreenPreviewView _setupPageControl]
  -[SBLockScreenPreviewView _setupCallToActionLabel]
  -[SBLockScreenPreviewView _setupProudLockIconView]
  -[SBLockScreenPreviewView _setupQuickActionView]
  -[SBLockScreenPreviewView _setupHomeGrabberView]
  -[SBLockScreenPreviewView _layoutStatusBar]
  -[SBLockScreenPreviewView _layoutCallToActionLabel]
  -[SBLockScreenPreviewView _layoutProudLockIconView]
  -[SBLockScreenPreviewView _layoutHomeGrabberView]
  -[SBLockScreenPreviewView initWithFrame:wallpaperController:options:wallpaperImage:]


SBSwitcherToAppExposeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSwitcherToAppExposeSwitcherModifier visibleAppLayouts]
  -[SBSwitcherToAppExposeSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSwitcherToAppExposeSwitcherModifier frameForIndex:]
  -[SBSwitcherToAppExposeSwitcherModifier .cxx_destruct]
  -[SBSwitcherToAppExposeSwitcherModifier transitionWillBegin]
  -[SBSwitcherToAppExposeSwitcherModifier transitionWillUpdate]
  -[SBSwitcherToAppExposeSwitcherModifier handleTimerEvent:]
  -[SBSwitcherToAppExposeSwitcherModifier initWithTransitionID:bundleIdentifier:appExposeModifier:]
  -[SBSwitcherToAppExposeSwitcherModifier _newAppExposeModifier]
  -[SBSwitcherToAppExposeSwitcherModifier _offsetForPushingCardsOffscreenAtIndex:]


SBSceneLayoutViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBSceneViewPresentationConfiguring, SBLayoutStateTransitionObserver, SBLayoutStateTransitionSceneEntityFrameProvider, BSDescriptionProviding, SBDisplayLayoutContext>
 @property  SBSceneManager *sceneManager
 @property  <SBSceneLayoutViewControllerDelegate> *delegate
 @property  BOOL userResizing
 @property  BOOL elementViewControllerUpdatesSuspended
 @property  UIView *sceneContainerView
 @property  SBLayoutState *_transitioningFromLayoutState
 @property  SBLayoutState *_transitioningToLayoutState
 @property  SBWorkspaceApplicationSceneTransitionContext *_transitionContext
 @property  SBWorkspaceApplicationSceneTransitionContext *_previousSuccessfulTransitionContext
 @property  BOOL _currentlyTransitioning
 @property  NSArray *_transitioningLayoutElementControllers
 @property  NSArray *_transitioningAppViewControllers
 @property  long long _layoutOrientation
 @property  long long _transitioningFromLayoutOrientation
 @property  long long _transitioningToLayoutOrientation
 @property  BOOL _currentlyRotating
 @property  NSArray *layoutElementControllers
 @property  NSArray *appViewControllers
 @property  BOOL hasVisibleElements
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  FBSDisplayIdentity *displayIdentity
 @property  SBLayoutState *layoutState

  // class methods
  +[SBSceneLayoutViewController mainDisplaySceneLayoutViewController]
  +[SBSceneLayoutViewController sceneLayoutViewControllerForDisplayIdentity:]

  // instance methods
  -[SBSceneLayoutViewController sceneManager]
  -[SBSceneLayoutViewController _transitionContext]
  -[SBSceneLayoutViewController initWithSceneManager:]
  -[SBSceneLayoutViewController _updateAuxiliaryViews]
  -[SBSceneLayoutViewController _transitioningFromLayoutElementControllerForLayoutRole:]
  -[SBSceneLayoutViewController _shouldAdjustViewAffordancesAfterTransition]
  -[SBSceneLayoutViewController _setElementViewControllerUpdatesSuspended:]
  -[SBSceneLayoutViewController convertPointToInterfaceOrientationCoordinateSpace:]
  -[SBSceneLayoutViewController animationControllerForRotatingWithTransitionRequest:]
  -[SBSceneLayoutViewController coordinateSpaceForLayoutState:]
  -[SBSceneLayoutViewController hasVisibleElements]
  -[SBSceneLayoutViewController _endLayoutStateTransitionForFailure]
  -[SBSceneLayoutViewController coordinateSpaceForInterfaceOrientation:]
  -[SBSceneLayoutViewController setUserResizing:]
  -[SBSceneLayoutViewController _overrideWindowActiveInterfaceOrientation]
  -[SBSceneLayoutViewController _isCurrentlyRotating]
  -[SBSceneLayoutViewController _addLayoutElementViewController:forLayoutElement:entity:]
  -[SBSceneLayoutViewController _layoutOrientation]
  -[SBSceneLayoutViewController sceneEntityFrameForWorkspaceEntity:inLayoutState:]
  -[SBSceneLayoutViewController layoutState]
  -[SBSceneLayoutViewController _isLayoutElementViewControllerOccluded:]
  -[SBSceneLayoutViewController _endLayoutStateTransitionWithInterruption:]
  -[SBSceneLayoutViewController referenceFrameForUniqueIdentifier:inLayoutState:]
  -[SBSceneLayoutViewController sceneContainerView]
  -[SBSceneLayoutViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBSceneLayoutViewController _previousLayoutElementControllerWithElementIdentifier:]
  -[SBSceneLayoutViewController init]
  -[SBSceneLayoutViewController referenceFrameForEntity:inLayoutState:]
  -[SBSceneLayoutViewController _verifyLayoutElementControllersAreValidForCurrentLayoutState]
  -[SBSceneLayoutViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBSceneLayoutViewController appViewForWorkspaceEntity:inLayoutRole:withLayoutState:]
  -[SBSceneLayoutViewController convertRectToInterfaceOrientationCoordinateSpace:]
  -[SBSceneLayoutViewController dealloc]
  -[SBSceneLayoutViewController sceneViewPresentationPriority:]
  -[SBSceneLayoutViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBSceneLayoutViewController shouldAutorotate]
  -[SBSceneLayoutViewController .cxx_destruct]
  -[SBSceneLayoutViewController _layoutElementControllerForLayoutRole:]
  -[SBSceneLayoutViewController _transitioningToLayoutState]
  -[SBSceneLayoutViewController _displayConfiguration]
  -[SBSceneLayoutViewController _transitioningFromLayoutState]
  -[SBSceneLayoutViewController _configureVisibilityForCurrentLayoutState]
  -[SBSceneLayoutViewController succinctDescriptionBuilder]
  -[SBSceneLayoutViewController _shouldRotateToLayoutOrientation:]
  -[SBSceneLayoutViewController layoutElementControllers]
  -[SBSceneLayoutViewController _invalidate]
  -[SBSceneLayoutViewController animationControllerForTransitionRequest:]
  -[SBSceneLayoutViewController convertRectFromInterfaceOrientationCoordinateSpace:]
  -[SBSceneLayoutViewController supportedInterfaceOrientations]
  -[SBSceneLayoutViewController _transitioningFromLayoutOrientation]
  -[SBSceneLayoutViewController displayIdentity]
  -[SBSceneLayoutViewController _areElementViewControllerUpdatesSuspended]
  -[SBSceneLayoutViewController initWithNibName:bundle:]
  -[SBSceneLayoutViewController _shouldRepositionViewAfterTransition]
  -[SBSceneLayoutViewController _enqueueLayoutViewControllerForReuse:]
  -[SBSceneLayoutViewController _transitioningAppViewControllers]
  -[SBSceneLayoutViewController succinctDescription]
  -[SBSceneLayoutViewController appViewForWorkspaceEntity:inLayoutRole:withLayoutState:hostRequester:]
  -[SBSceneLayoutViewController animationWrapperViewForLayoutState:roleMask:interfaceOrientation:]
  -[SBSceneLayoutViewController _transitioningLayoutElementControllers]
  -[SBSceneLayoutViewController _doCommonCleanupUponEndingLayoutTransitionWithInterruption:]
  -[SBSceneLayoutViewController sceneViewPresentationIdentifier:]
  -[SBSceneLayoutViewController isUserResizing]
  -[SBSceneLayoutViewController _isCurrentlyTransitioning]
  -[SBSceneLayoutViewController _transitioningToLayoutOrientation]
  -[SBSceneLayoutViewController setDelegate:]
  -[SBSceneLayoutViewController coordinateSpaceForLayoutElement:layoutState:]
  -[SBSceneLayoutViewController _shouldConsiderHomeScreenAsActive]
  -[SBSceneLayoutViewController _cleanupDisappearedLayoutElementController:]
  -[SBSceneLayoutViewController delegate]
  -[SBSceneLayoutViewController descriptionWithMultilinePrefix:]
  -[SBSceneLayoutViewController coordinateSpace]
  -[SBSceneLayoutViewController convertPointFromInterfaceOrientationCoordinateSpace:]
  -[SBSceneLayoutViewController loadView]
  -[SBSceneLayoutViewController initWithCoder:]
  -[SBSceneLayoutViewController _dequeueLayoutElementControllerForReuseOfClass:]
  -[SBSceneLayoutViewController _beginLayoutStateTransitionWithTransitionContext:]
  -[SBSceneLayoutViewController _willEndLayoutStateTransition]
  -[SBSceneLayoutViewController descriptionBuilderWithMultilinePrefix:]
  -[SBSceneLayoutViewController appViewControllers]
  -[SBSceneLayoutViewController animationWrapperViewForLayoutState:roleMask:interfaceOrientation:maskDisplayCorners:]
  -[SBSceneLayoutViewController _animationWrapperViewForElement:entity:layoutState:]
  -[SBSceneLayoutViewController _previousSuccessfulTransitionContext]


SBActivationFailedAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBActivationFailedAlertItem performUnlockAction]
  -[SBActivationFailedAlertItem configure:requirePasscodeForActions:]
  -[SBActivationFailedAlertItem initWithFailureCount:slot:]
  -[SBActivationFailedAlertItem suppressForKeynote]


SBAppExposeToHomeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBAppExposeToHomeSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBAppExposeToHomeSwitcherModifier .cxx_destruct]
  -[SBAppExposeToHomeSwitcherModifier transitionWillBegin]
  -[SBAppExposeToHomeSwitcherModifier transitionDidEnd]
  -[SBAppExposeToHomeSwitcherModifier plusButtonAlpha]
  -[SBAppExposeToHomeSwitcherModifier _isEffectivelyHome]
  -[SBAppExposeToHomeSwitcherModifier initWithTransitionID:direction:bundleIdentifier:appExposeModifier:]
  -[SBAppExposeToHomeSwitcherModifier _newAppExposeModifier]


SBBacklightIdleTimer : SBIdleTimerBase <ITIdleTimerDelegate, BSDescriptionProviding>
 @property  double timeMultiplier
 @property  unsigned long expectation
 @property  BOOL requiresManualReset
 @property  SBIdleTimerDescriptor *descriptor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBacklightIdleTimer isDisabled]
  -[SBBacklightIdleTimer isActivated]
  -[SBBacklightIdleTimer setActivated:]
  -[SBBacklightIdleTimer setDescriptor:]
  -[SBBacklightIdleTimer setTimeMultiplier:]
  -[SBBacklightIdleTimer init]
  -[SBBacklightIdleTimer idleTimerDidReset:forUserAttention:at:]
  -[SBBacklightIdleTimer .cxx_destruct]
  -[SBBacklightIdleTimer idleTimer:attentionLostTimeoutDidExpire:]
  -[SBBacklightIdleTimer succinctDescriptionBuilder]
  -[SBBacklightIdleTimer _effectiveWarnTimeoutDuration]
  -[SBBacklightIdleTimer expectation]
  -[SBBacklightIdleTimer descriptor]
  -[SBBacklightIdleTimer timeMultiplier]
  -[SBBacklightIdleTimer succinctDescription]
  -[SBBacklightIdleTimer _resetExpectation]
  -[SBBacklightIdleTimer reset]
  -[SBBacklightIdleTimer _reconfigureAttentionClientAndReset:]
  -[SBBacklightIdleTimer setExpectation:]
  -[SBBacklightIdleTimer _effectiveExpireTimeoutDuration]
  -[SBBacklightIdleTimer setRequiresManualReset:]
  -[SBBacklightIdleTimer _initWithAttentionAwareTimer:]
  -[SBBacklightIdleTimer _stopIfManual]
  -[SBBacklightIdleTimer _effectiveTimeoutForBaseTimeout:]
  -[SBBacklightIdleTimer requiresManualReset]
  -[SBBacklightIdleTimer _effectiveQuickUnwarnTimeoutDurationForWarnTimeout:]
  -[SBBacklightIdleTimer initWithConfigurationIdentifier:]
  -[SBBacklightIdleTimer descriptionWithMultilinePrefix:]
  -[SBBacklightIdleTimer descriptionBuilderWithMultilinePrefix:]


SBReachabilityDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBReachabilityDomain domainName]
  +[SBReachabilityDomain rootSettings]
  +[SBReachabilityDomain rootSettingsClass]
  +[SBReachabilityDomain domainGroupName]


SBIconVisibilityService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBIconVisibilityService iconStateDisplayIdentifiers]
  -[SBIconVisibilityService dealloc]
  -[SBIconVisibilityService .cxx_destruct]
  -[SBIconVisibilityService initWithIconModel:]
  -[SBIconVisibilityService _visibleIdentifiersChanged:]


SBIconStateArchiver : SBHIconStateArchiver /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
  // class methods
  +[SBIconStateArchiver _iTunesDictionaryForLeafIcon:withIdentifier:]
  +[SBIconStateArchiver modernizeRootArchive:]
  +[SBIconStateArchiver _modernIconCellForCell:allowFolders:]
  +[SBIconStateArchiver _iTunesDictionaryForLeafIdentifier:]
  +[SBIconStateArchiver _modernIconListForList:allowFolders:]
  +[SBIconStateArchiver _iTunesDictionaryForDownloadingIcon:]
  +[SBIconStateArchiver rootArchiveFromITunesRepresentation:]
  +[SBIconStateArchiver _iTunesIconCellForCell:preApex:pending:iconSource:]
  +[SBIconStateArchiver _migrateLeafIdentifierIfNecessary:]
  +[SBIconStateArchiver _iTunesIconListsForLists:preApex:pending:iconSource:]
  +[SBIconStateArchiver iTunesRepresentationFromRootArchive:preApex:pending:iconSource:]
  +[SBIconStateArchiver _iTunesIconListForList:preApex:pending:iconSource:]
  +[SBIconStateArchiver _modernIconListsForLists:allowFolders:]


SBFullScreenFluidSwitcherRootSwitcherModifier : SBFluidSwitcherRootSwitcherModifier
  // instance methods
  -[SBFullScreenFluidSwitcherRootSwitcherModifier _effectiveEnvironmentMode]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier gestureModifierForGestureEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier transitionModifierForMainTransitionEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier _newMultitaskingModifier]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier reduceMotionModifierForReduceMotionChangedEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier _defaultMultitaskingModifierClass]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier lowEndHardwareModifier]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBFullScreenFluidSwitcherRootSwitcherModifier _entityRemovalModifierForMainTransitionEvent:]


SBCoverSheetPresentationManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBCoverSheetSlidingViewControllerDelegate, SBCoverSheetGrabberDelegate, CSExternalAppearanceProviding, CSExternalBehaviorProviding, CSCoverSheetViewControllerObserver, SBFIdleTimerBehaviorProviding, SBSecureAppViewControllerDelegate, SBSecureAppObserver, SBAssistantObserver, PTSettingsKeyObserver, SBHomeGestureParticipantDelegate, SBCoverSheetSecureAppEnvironmentViewControllerDelegate, SBWallpaperOrientationProvider, SBPearlMatchingStateProviderDelegate>
 @property  SBWindow *coverSheetWindow
 @property  NSMutableSet *coverSheetWindowVisibleReasons
 @property  SBWindow *secureAppWindow
 @property  NSMutableSet *secureAppWindowVisibleReasons
 @property  SBCoverSheetSlidingViewController *secureAppSlidingViewController
 @property  SBCoverSheetSecureAppEnvironmentViewController *secureAppEnvironmentViewController
 @property  @? secureAppCleanupHandler
 @property  SBCoverSheetSceneManager *sceneManager
 @property  BSEventQueue *lockUnlockQueue
 @property  CSLockScreenSettings *lockScreenSettings
 @property  UIImpactFeedbackGenerator *rubberBandFeedbackGenerator
 @property  long long participantState
 @property  unsigned long transitionType
 @property  CSCoverSheetTransitionSettings *transitionSettings
 @property  unsigned long transitionOverrideOptions
 @property  BOOL shouldDisplayFakeStatusBar
 @property  BOOL needsFakeStatusBarUpdate
 @property  SBAsynchronousRenderingAssertion *asynchronousRenderingAssertion
 @property  SBDisableActiveInterfaceOrientationChangeAssertion *activeInterfaceOrientationChangeAssertion
 @property  <BSInvalidatable> *deferOrientationUpdatesAssertion
 @property  BOOL hasBeenDismissedSinceKeybagLock
 @property  BOOL hasBeenDismissedSinceBoot
 @property  SBCoverSheetIconFlyInAnimator *iconAnimator
 @property  BOOL dismissingCoverSheet
 @property  NSObject<OS_dispatch_group> *iconAnimatorCompletionGroup
 @property  @? iconAnimatorCompletionBlock
 @property  CSCoverSheetFlyInSettings *flyInSettings
 @property  BOOL centerFollowsFinger
 @property  BOOL animateIconsOnPresentationToo
 @property  double iconFlyInInteractiveResponseMin
 @property  double iconFlyInInteractiveResponseMax
 @property  double iconFlyInInteractiveDampingRatioMin
 @property  double iconFlyInInteractiveDampingRatioMax
 @property  double iconFlyInTension
 @property  double iconFlyInFriction
 @property  BOOL iconAnimatorNeedsAnimating
 @property  BOOL wantsHomeGestureOwnership
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  <BSInvalidatable> *suspendWallpaperAnimationAssertion
 @property  <BSInvalidatable> *requireWallpaperAssertion
 @property  @? ppt_transitionBeginsCallback
 @property  @? ppt_transitionEndsCallback
 @property  SBCoverSheetSlidingViewController *coverSheetSlidingViewController
 @property  <SBCoverSheetPresentationDelegate> *delegate
 @property  <SBUILockStateProvider> *uiLockStateProvider
 @property  <SBPearlMatchingStateProvider> *pearlMatchingStateProvider
 @property  <SBLockScreenEnvironment> *lockScreenEnvironment
 @property  SBDashBoardHostedAppViewController *secureAppViewController
 @property  BOOL coverSheetHostingAnApp
 @property  BOOL isCoverSheetHostingUnlockedEnvironmentWindows
 @property  SBDeviceApplicationSceneHandle *coverSheetHostedAppSceneHandle
 @property  SBMainWorkspace *mainWorkspace
 @property  BOOL activeInterfaceOrientationLocked
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *appearanceIdentifier
 @property  long long backgroundStyle
 @property  NSSet *components
 @property  _UILegibilitySettings *legibilitySettings
 @property  UIColor *backgroundColor
 @property  NSString *coverSheetIdentifier
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout

  // class methods
  +[SBCoverSheetPresentationManager sharedInstance]

  // instance methods
  -[SBCoverSheetPresentationManager sceneManager]
  -[SBCoverSheetPresentationManager isPresented]
  -[SBCoverSheetPresentationManager setDismissingCoverSheet:]
  -[SBCoverSheetPresentationManager coverSheetIdentifier]
  -[SBCoverSheetPresentationManager idleTimerDuration]
  -[SBCoverSheetPresentationManager _relinquishAsynchronousRenderingAssertion]
  -[SBCoverSheetPresentationManager setHomeGestureParticipant:]
  -[SBCoverSheetPresentationManager conformsToCSAppearanceProviding]
  -[SBCoverSheetPresentationManager asynchronousRenderingAssertion]
  -[SBCoverSheetPresentationManager transitionType]
  -[SBCoverSheetPresentationManager assistantDidDisappear:]
  -[SBCoverSheetPresentationManager setSecureAppCleanupHandler:]
  -[SBCoverSheetPresentationManager secureAppWindow]
  -[SBCoverSheetPresentationManager updateVisibilityForGrabberVisible:]
  -[SBCoverSheetPresentationManager setSuspendWallpaperAnimationAssertion:]
  -[SBCoverSheetPresentationManager homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBCoverSheetPresentationManager isTransitioning]
  -[SBCoverSheetPresentationManager scrollingStrategy]
  -[SBCoverSheetPresentationManager secureAppWindowVisibleReasons]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:animationTickedWithProgress:coverSheetFrame:gestureActive:forPresentationValue:]
  -[SBCoverSheetPresentationManager notificationBehavior]
  -[SBCoverSheetPresentationManager setSceneManager:]
  -[SBCoverSheetPresentationManager setSecureAppWindowVisibleReasons:]
  -[SBCoverSheetPresentationManager isAnyGestureActivelyRecognized]
  -[SBCoverSheetPresentationManager settings:changedValueForKey:]
  -[SBCoverSheetPresentationManager isVisible]
  -[SBCoverSheetPresentationManager conformsToCSBehaviorProviding]
  -[SBCoverSheetPresentationManager idleWarnMode]
  -[SBCoverSheetPresentationManager homeGestureParticipant]
  -[SBCoverSheetPresentationManager idleTimerMode]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerPrepareForRubberBandedPresentationTransition:]
  -[SBCoverSheetPresentationManager setTransitionSettings:]
  -[SBCoverSheetPresentationManager init]
  -[SBCoverSheetPresentationManager _clearSecureAppViewControllersIncludingWindow:]
  -[SBCoverSheetPresentationManager iconFlyInTension]
  -[SBCoverSheetPresentationManager _updateInterstitialTransitionForSlidingViewController:withProgress:]
  -[SBCoverSheetPresentationManager _enqueueBlock:withName:]
  -[SBCoverSheetPresentationManager restrictedCapabilities]
  -[SBCoverSheetPresentationManager suspendWallpaperAnimationAssertion]
  -[SBCoverSheetPresentationManager legibilitySettings]
  -[SBCoverSheetPresentationManager willUIUnlockWithPendingUnlockRequest:]
  -[SBCoverSheetPresentationManager _cleanupARubberBandTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager hasBeenDismissedSinceKeybagLock]
  -[SBCoverSheetPresentationManager lockScreenEnvironment]
  -[SBCoverSheetPresentationManager _prepareSecureAppWindowForDisplay]
  -[SBCoverSheetPresentationManager setCenterFollowsFinger:]
  -[SBCoverSheetPresentationManager _cleanupATransition]
  -[SBCoverSheetPresentationManager appearanceIdentifier]
  -[SBCoverSheetPresentationManager secureAppEnvironmentViewController]
  -[SBCoverSheetPresentationManager setCoverSheetPresented:animated:withCompletion:]
  -[SBCoverSheetPresentationManager setLockScreenSettings:]
  -[SBCoverSheetPresentationManager _prepareCoverSheetWindowForDisplay]
  -[SBCoverSheetPresentationManager hasFirstSwipeShowGrabberOverride]
  -[SBCoverSheetPresentationManager proximityDetectionMode]
  -[SBCoverSheetPresentationManager setIconFlyInInteractiveResponseMax:]
  -[SBCoverSheetPresentationManager backgroundStyle]
  -[SBCoverSheetPresentationManager iconFlyInInteractiveResponseMax]
  -[SBCoverSheetPresentationManager setIconFlyInTension:]
  -[SBCoverSheetPresentationManager _notifyDelegateDidPresent]
  -[SBCoverSheetPresentationManager _cleanupRubberBandPresentationTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager setCoverSheetPresented:animated:options:withCompletion:]
  -[SBCoverSheetPresentationManager iconFlyInInteractiveResponseMin]
  -[SBCoverSheetPresentationManager components]
  -[SBCoverSheetPresentationManager coverSheetViewController]
  -[SBCoverSheetPresentationManager isDismissGestureActive]
  -[SBCoverSheetPresentationManager conformsToCSExternalBehaviorProviding]
  -[SBCoverSheetPresentationManager setRubberBandFeedbackGenerator:]
  -[SBCoverSheetPresentationManager _tellDashBoardOurAppearanceAndBehaviorChanged]
  -[SBCoverSheetPresentationManager backgroundColor]
  -[SBCoverSheetPresentationManager lockScreenSettings]
  -[SBCoverSheetPresentationManager transitionSettings]
  -[SBCoverSheetPresentationManager .cxx_destruct]
  -[SBCoverSheetPresentationManager needsFakeStatusBarUpdate]
  -[SBCoverSheetPresentationManager noteDeviceDidLock]
  -[SBCoverSheetPresentationManager setFlyInSettings:]
  -[SBCoverSheetPresentationManager _animateForProgress:]
  -[SBCoverSheetPresentationManager setLockUnlockQueue:]
  -[SBCoverSheetPresentationManager setHasBeenDismissedSinceKeybagLock:]
  -[SBCoverSheetPresentationManager interfaceOrientationForWallpaperController:]
  -[SBCoverSheetPresentationManager _noteEffectiveLockStatusMayHaveChangedForUserNotification:canDismiss:]
  -[SBCoverSheetPresentationManager iconAnimatorNeedsAnimating]
  -[SBCoverSheetPresentationManager _prepareInterstitialTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager pearlMatchingStateProviderStateChangedForMatchFailure:]
  -[SBCoverSheetPresentationManager secureAppCleanupHandler]
  -[SBCoverSheetPresentationManager secureAppOfTypeDidBegin:]
  -[SBCoverSheetPresentationManager setIconFlyInInteractiveDampingRatioMin:]
  -[SBCoverSheetPresentationManager updateInterfaceOrientationToMatchOrientation:]
  -[SBCoverSheetPresentationManager shouldDisplayFakeStatusBar]
  -[SBCoverSheetPresentationManager noteScreenDidTurnOff]
  -[SBCoverSheetPresentationManager authenticationStateMayHaveChangedFromSource:]
  -[SBCoverSheetPresentationManager isActiveInterfaceOrientationLocked]
  -[SBCoverSheetPresentationManager activeInterfaceOrientationChangeAssertion]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerContentShouldAutoRotateWhenNotVisible:]
  -[SBCoverSheetPresentationManager _prepareForARubberBandTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager _requestHomeGestureOwnership]
  -[SBCoverSheetPresentationManager setActiveInterfaceOrientationChangeAssertion:]
  -[SBCoverSheetPresentationManager _prepareForDismissalTransition]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerDidPassRubberBandThreshold:]
  -[SBCoverSheetPresentationManager flyInSettings]
  -[SBCoverSheetPresentationManager ppt_transitionEndsCallback]
  -[SBCoverSheetPresentationManager _tellDashBoardOurAppearanceChanged]
  -[SBCoverSheetPresentationManager loadViewsIfNeeded]
  -[SBCoverSheetPresentationManager setPearlMatchingStateProvider:]
  -[SBCoverSheetPresentationManager setIconFlyInInteractiveDampingRatioMax:]
  -[SBCoverSheetPresentationManager _notifyDelegateWillDismiss]
  -[SBCoverSheetPresentationManager mainWorkspace]
  -[SBCoverSheetPresentationManager _transitionFromSecureAppToFullAppAndDismiss:preservingBanners:]
  -[SBCoverSheetPresentationManager _prepareForTransitionToSecureApp]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerIfLoaded]
  -[SBCoverSheetPresentationManager _setOrientationUpdatesDeferred:]
  -[SBCoverSheetPresentationManager participantState]
  -[SBCoverSheetPresentationManager centerFollowsFinger]
  -[SBCoverSheetPresentationManager iconFlyInInteractiveDampingRatioMin]
  -[SBCoverSheetPresentationManager _prepareForRubberBandDismissalTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager setLockScreenEnvironment:]
  -[SBCoverSheetPresentationManager isInSecureApp]
  -[SBCoverSheetPresentationManager setActiveInterfaceOrientationLocked:]
  -[SBCoverSheetPresentationManager hasBeenDismissedSinceBoot]
  -[SBCoverSheetPresentationManager setUILockStateProvider:]
  -[SBCoverSheetPresentationManager _setCoverSheet:windowVisible:forReason:]
  -[SBCoverSheetPresentationManager _notifyDelegateRequestsUnlock]
  -[SBCoverSheetPresentationManager _prepareSecureAppViewController]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerCleanupRubberBandedPresentationTransition:]
  -[SBCoverSheetPresentationManager setIconFlyInFriction:]
  -[SBCoverSheetPresentationManager _prepareForRubberBandPresentationTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager secureAppViewControllerDidAuthenticate:]
  -[SBCoverSheetPresentationManager setSecureAppWindow:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:animateForGestureActive:withProgress:beginBlock:endBlock:]
  -[SBCoverSheetPresentationManager secureAppOfTypeDidEnd:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:prepareForDismissalTransitionForReversingTransition:forUserGesture:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:prepareForPresentationTransitionForUserGesture:]
  -[SBCoverSheetPresentationManager _cleanupIconAnimator]
  -[SBCoverSheetPresentationManager iconAnimator]
  -[SBCoverSheetPresentationManager setCoverSheetWindow:]
  -[SBCoverSheetPresentationManager _updateIconsFlyInWithSettings:]
  -[SBCoverSheetPresentationManager hasContentUnderCoverSheetSlidingViewController:]
  -[SBCoverSheetPresentationManager _cleanupInterstitialTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager activeInterfaceOrientationLocked]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController]
  -[SBCoverSheetPresentationManager coverSheetHostedAppSceneHandle]
  -[SBCoverSheetPresentationManager setIconAnimator:]
  -[SBCoverSheetPresentationManager setParticipantState:]
  -[SBCoverSheetPresentationManager secureAppSlidingViewController]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerUserPresentGestureBegan:]
  -[SBCoverSheetPresentationManager _setTransitionProgress:animated:gestureActive:coverSheetProgress:completion:]
  -[SBCoverSheetPresentationManager _performAfterSecureAppCleanup:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerCleanupPresentationTransition:]
  -[SBCoverSheetPresentationManager _prepareIconAnimatorForPresenting:]
  -[SBCoverSheetPresentationManager coverSheetViewControllerExternalLockProviderStateDidChange:]
  -[SBCoverSheetPresentationManager secureAppEnvironmentViewControllerOwnsHomeGestureDidChange]
  -[SBCoverSheetPresentationManager _notifyDelegateWillPresent]
  -[SBCoverSheetPresentationManager setIconAnimatorNeedsAnimating:]
  -[SBCoverSheetPresentationManager setAnimateIconsOnPresentationToo:]
  -[SBCoverSheetPresentationManager setPpt_transitionBeginsCallback:]
  -[SBCoverSheetPresentationManager setWantsHomeGestureOwnership:]
  -[SBCoverSheetPresentationManager setDeferOrientationUpdatesAssertion:]
  -[SBCoverSheetPresentationManager setIconAnimatorCompletionBlock:]
  -[SBCoverSheetPresentationManager ppt_transitionBeginsCallback]
  -[SBCoverSheetPresentationManager iconAnimatorCompletionBlock]
  -[SBCoverSheetPresentationManager screenEdgesDeferringSystemGestures]
  -[SBCoverSheetPresentationManager setSecureAppSlidingViewController:]
  -[SBCoverSheetPresentationManager setPpt_transitionEndsCallback:]
  -[SBCoverSheetPresentationManager _cleanupRubberBandDismissalTransitionForSlidingViewController:]
  -[SBCoverSheetPresentationManager _isEffectivelyLocked]
  -[SBCoverSheetPresentationManager wantsHomeGestureOwnership]
  -[SBCoverSheetPresentationManager secureAppViewController]
  -[SBCoverSheetPresentationManager _cleanupPresentationTransition]
  -[SBCoverSheetPresentationManager setNeedsFakeStatusBarUpdate:]
  -[SBCoverSheetPresentationManager setMainWorkspace:]
  -[SBCoverSheetPresentationManager setSecureAppEnvironmentViewController:]
  -[SBCoverSheetPresentationManager setDelegate:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerCleanupInterstitialTransition:]
  -[SBCoverSheetPresentationManager _tellDashBoardOurBehaviorChanged]
  -[SBCoverSheetPresentationManager setRequireWallpaperAssertion:]
  -[SBCoverSheetPresentationManager setCoverSheetSlidingViewController:]
  -[SBCoverSheetPresentationManager _acquireAsynchronousRenderingAssertion]
  -[SBCoverSheetPresentationManager pearlMatchingStateProvider]
  -[SBCoverSheetPresentationManager _relinquishHomeGestureOwnership]
  -[SBCoverSheetPresentationManager isCoverSheetHostingUnlockedEnvironmentWindows]
  -[SBCoverSheetPresentationManager _authenticationChanged:]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewControllerCleanupDismissalTransition:]
  -[SBCoverSheetPresentationManager _updateVisibilityOfWindow:forReasons:]
  -[SBCoverSheetPresentationManager setTransitionOverrideOptions:]
  -[SBCoverSheetPresentationManager _prepareForPresentationTransitionForUserGesture:]
  -[SBCoverSheetPresentationManager setIconAnimatorCompletionGroup:]
  -[SBCoverSheetPresentationManager deferOrientationUpdatesAssertion]
  -[SBCoverSheetPresentationManager _prepareForATransition]
  -[SBCoverSheetPresentationManager setCoverSheetWindowVisibleReasons:]
  -[SBCoverSheetPresentationManager animateIconsOnPresentationToo]
  -[SBCoverSheetPresentationManager setTransitionType:]
  -[SBCoverSheetPresentationManager setIconFlyInInteractiveResponseMin:]
  -[SBCoverSheetPresentationManager _notifyDelegateDidDismiss]
  -[SBCoverSheetPresentationManager iconFlyInInteractiveDampingRatioMax]
  -[SBCoverSheetPresentationManager delegate]
  -[SBCoverSheetPresentationManager _setCoverSheetWindowVisible:forReason:]
  -[SBCoverSheetPresentationManager setShouldDisplayFakeStatusBar:]
  -[SBCoverSheetPresentationManager updateBecauseSecureAppChanged]
  -[SBCoverSheetPresentationManager isCoverSheetHostingAnApp]
  -[SBCoverSheetPresentationManager rubberBandFeedbackGenerator]
  -[SBCoverSheetPresentationManager iconFlyInFriction]
  -[SBCoverSheetPresentationManager uiLockStateProvider]
  -[SBCoverSheetPresentationManager coverSheetWindow]
  -[SBCoverSheetPresentationManager dismissingCoverSheet]
  -[SBCoverSheetPresentationManager iconAnimatorCompletionGroup]
  -[SBCoverSheetPresentationManager _updateProximitySensorState]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:dismissGestureChangedWithProgress:]
  -[SBCoverSheetPresentationManager coverSheetWindowVisibleReasons]
  -[SBCoverSheetPresentationManager secureAppSlidingViewControllerIfLoaded]
  -[SBCoverSheetPresentationManager _setSecureAppWindowVisible:forReason:]
  -[SBCoverSheetPresentationManager _cleanupDismissalTransition]
  -[SBCoverSheetPresentationManager lockUnlockQueue]
  -[SBCoverSheetPresentationManager setSecureAppViewController:]
  -[SBCoverSheetPresentationManager setAsynchronousRenderingAssertion:]
  -[SBCoverSheetPresentationManager requireWallpaperAssertion]
  -[SBCoverSheetPresentationManager transitionOverrideOptions]
  -[SBCoverSheetPresentationManager coverSheetSlidingViewController:committingToEndPresented:]
  -[SBCoverSheetPresentationManager setHasBeenDismissedSinceBoot:]


SBAppPlatterDragPreview : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBIconDragPreview, BSDescriptionProviding>
 @property  unsigned long mode
 @property  @? cleanUpHandler
 @property  UIView *sourceView
 @property  SBApplicationBlurContentView *platterView
 @property  BOOL animatingPlatterViewAlpha
 @property  @? platterViewAlphaAnimationCompletionBlock
 @property  {CGSize=dd} platterSize
 @property  double platterScale
 @property  {SBDragPreviewShadowParameters=dd{CGSize=dd}} diffuseShadowParameters
 @property  {SBDragPreviewShadowParameters=dd{CGSize=dd}} rimShadowParameters
 @property  NSArray *diffuseShadowFilters
 @property  NSArray *rimShadowFilters
 @property  BSCornerRadiusConfiguration *cornerRadiusConfiguration
 @property  {CGPoint=dd} anchorPoint
 @property  double rotation
 @property  unsigned long dragState
 @property  BOOL flocked
 @property  BOOL iconAllowsLabelArea
 @property  BOOL iconCanShowCloseBox
 @property  double iconContentScale
 @property  BOOL iconIsEditing
 @property  SBIcon *icon
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppPlatterDragPreview mode]
  -[SBAppPlatterDragPreview platterView]
  -[SBAppPlatterDragPreview setAnchorPoint:]
  -[SBAppPlatterDragPreview anchorPoint]
  -[SBAppPlatterDragPreview iconContentScale]
  -[SBAppPlatterDragPreview setIconContentScale:]
  -[SBAppPlatterDragPreview updateDestinationIconLocation:animated:]
  -[SBAppPlatterDragPreview setIconAllowsLabelArea:]
  -[SBAppPlatterDragPreview dropDestinationAnimationCompleted]
  -[SBAppPlatterDragPreview draggingSourceCancelAnimationCompleted]
  -[SBAppPlatterDragPreview draggingSourceDroppedWithOperation:]
  -[SBAppPlatterDragPreview setIconIsEditing:animated:]
  -[SBAppPlatterDragPreview rotation]
  -[SBAppPlatterDragPreview setRotation:]
  -[SBAppPlatterDragPreview sourceView]
  -[SBAppPlatterDragPreview .cxx_destruct]
  -[SBAppPlatterDragPreview icon]
  -[SBAppPlatterDragPreview succinctDescriptionBuilder]
  -[SBAppPlatterDragPreview _isDragging]
  -[SBAppPlatterDragPreview setMode:]
  -[SBAppPlatterDragPreview setIcon:]
  -[SBAppPlatterDragPreview setDragState:]
  -[SBAppPlatterDragPreview succinctDescription]
  -[SBAppPlatterDragPreview setIconCanShowCloseBox:]
  -[SBAppPlatterDragPreview _updateSubviewVisibility]
  -[SBAppPlatterDragPreview dragState]
  -[SBAppPlatterDragPreview cornerRadiusConfiguration]
  -[SBAppPlatterDragPreview descriptionWithMultilinePrefix:]
  -[SBAppPlatterDragPreview layoutSubviews]
  -[SBAppPlatterDragPreview descriptionBuilderWithMultilinePrefix:]
  -[SBAppPlatterDragPreview setCornerRadiusConfiguration:]
  -[SBAppPlatterDragPreview setFlocked:]
  -[SBAppPlatterDragPreview initWithReferenceIconView:sourceView:]
  -[SBAppPlatterDragPreview setCleanUpHandler:]
  -[SBAppPlatterDragPreview updateSourceView:]
  -[SBAppPlatterDragPreview _matchMoveView:toContainerView:]
  -[SBAppPlatterDragPreview _configureIconViewWithReferenceIconView:]
  -[SBAppPlatterDragPreview _updateIconViewComponentVisibility]
  -[SBAppPlatterDragPreview _updateShowDebugIconBorderWithColor:]
  -[SBAppPlatterDragPreview _effectiveIconViewFrame]
  -[SBAppPlatterDragPreview _getIconAlpha:platterAlpha:]
  -[SBAppPlatterDragPreview invalidateSourceView]
  -[SBAppPlatterDragPreview handleCleanup]
  -[SBAppPlatterDragPreview _effectiveIconContentScale]
  -[SBAppPlatterDragPreview _effectiveIconContainerCenter]
  -[SBAppPlatterDragPreview _effectivePlatterFrame]
  -[SBAppPlatterDragPreview _effectiveCornerRadiusConfiguration]
  -[SBAppPlatterDragPreview _effectiveCornerRadius]
  -[SBAppPlatterDragPreview _updateShadowView]
  -[SBAppPlatterDragPreview _updateContainerViewPositionForAnchorPoint]
  -[SBAppPlatterDragPreview _effectiveMode]
  -[SBAppPlatterDragPreview isFlocked]
  -[SBAppPlatterDragPreview iconDragAlpha]
  -[SBAppPlatterDragPreview _setSourcePortalViewHidden:]
  -[SBAppPlatterDragPreview _blurContentViewIconViewCenterYOffset]
  -[SBAppPlatterDragPreview _effectiveIconAccessoryAlpha]
  -[SBAppPlatterDragPreview _effectiveIconAllowsLabelArea]
  -[SBAppPlatterDragPreview _effectiveIconIsHighlighted]
  -[SBAppPlatterDragPreview _effectiveIconCanShowCloseBox]
  -[SBAppPlatterDragPreview platterSize]
  -[SBAppPlatterDragPreview platterScale]
  -[SBAppPlatterDragPreview iconAllowsLabelArea]
  -[SBAppPlatterDragPreview iconCanShowCloseBox]
  -[SBAppPlatterDragPreview iconIsEditing]
  -[SBAppPlatterDragPreview setIconIsEditing:]
  -[SBAppPlatterDragPreview isAnimatingPlatterViewAlpha]
  -[SBAppPlatterDragPreview configurePlatterForSceneHandle:withTargetView:completion:]
  -[SBAppPlatterDragPreview setPlatterSize:]
  -[SBAppPlatterDragPreview setDiffuseShadowParameters:]
  -[SBAppPlatterDragPreview setRimShadowParameters:]
  -[SBAppPlatterDragPreview setDiffuseShadowFilters:]
  -[SBAppPlatterDragPreview setRimShadowFilters:]
  -[SBAppPlatterDragPreview cleanUpHandler]
  -[SBAppPlatterDragPreview platterViewAlphaAnimationCompletionBlock]
  -[SBAppPlatterDragPreview setPlatterViewAlphaAnimationCompletionBlock:]
  -[SBAppPlatterDragPreview setPlatterScale:]
  -[SBAppPlatterDragPreview diffuseShadowParameters]
  -[SBAppPlatterDragPreview rimShadowParameters]
  -[SBAppPlatterDragPreview diffuseShadowFilters]
  -[SBAppPlatterDragPreview rimShadowFilters]


SBSplashBoardController : XBApplicationController /System/Library/PrivateFrameworks/IntlPreferences.framework/IntlPreferences
  // instance methods
  -[SBSplashBoardController dealloc]
  -[SBSplashBoardController configureForLocaleChanges]
  -[SBSplashBoardController _observeLocaleChanges]
  -[SBSplashBoardController _checkForChangedLocale]
  -[SBSplashBoardController _splashBoardApplicationForBundleID:]
  -[SBSplashBoardController _handleLocaleDidChangeNotification]


SBSwipeUpFloatingApplicationGestureWorkspaceTransaction : SBDeckSwitcherPanGestureWorkspaceTransaction
  // instance methods
  -[SBSwipeUpFloatingApplicationGestureWorkspaceTransaction _gestureType]
  -[SBSwipeUpFloatingApplicationGestureWorkspaceTransaction selectedAppLayoutForGestureRecognizer:]


SBScreenshotManagerDataSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBScreenshotManagerDataSource>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBScreenshotManagerDataSource screenshotManagerScreensToScreenshot:]


SBLiftToWakeStudyLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBLiftToWakeObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLiftToWakeStudyLogger dealloc]
  -[SBLiftToWakeStudyLogger .cxx_destruct]
  -[SBLiftToWakeStudyLogger initWithController:]
  -[SBLiftToWakeStudyLogger liftToWakeController:didObserveTransition:deviceOrientation:]


SBIconProfileModelMemoryStore : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIconModelStore>
 @property  NSDictionary *currentState
 @property  NSDictionary *desiredState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIconProfileModelMemoryStore setCurrentState:]
  -[SBIconProfileModelMemoryStore currentState]
  -[SBIconProfileModelMemoryStore init]
  -[SBIconProfileModelMemoryStore .cxx_destruct]
  -[SBIconProfileModelMemoryStore saveDesiredIconState:error:]
  -[SBIconProfileModelMemoryStore loadDesiredIconState:]
  -[SBIconProfileModelMemoryStore deleteDesiredIconStateWithOptions:error:]
  -[SBIconProfileModelMemoryStore deleteCurrentIconStateWithOptions:error:]
  -[SBIconProfileModelMemoryStore saveCurrentIconState:error:]
  -[SBIconProfileModelMemoryStore loadCurrentIconState:]
  -[SBIconProfileModelMemoryStore setDesiredState:]
  -[SBIconProfileModelMemoryStore desiredState]
  -[SBIconProfileModelMemoryStore initWithCurrentState:desiredState:]
  -[SBIconProfileModelMemoryStore initWithITunesRepresentation:]


SBCompleteGestureSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBCompleteGestureSwitcherEventResponse type]


_SBUIAnimationControllerCoordinatingChildRelationship : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BSTransaction<SBUIAnimationControllerCoordinating> *coordinatingChildTransaction
 @property  unsigned long schedulingPolicy

  // instance methods
  -[_SBUIAnimationControllerCoordinatingChildRelationship initWithCoordinatingChildTransaction:schedulingPolicy:]
  -[_SBUIAnimationControllerCoordinatingChildRelationship .cxx_destruct]
  -[_SBUIAnimationControllerCoordinatingChildRelationship schedulingPolicy]
  -[_SBUIAnimationControllerCoordinatingChildRelationship coordinatingChildTransaction]


SBUIAnimationController : SBTransaction <SBSceneHandleObserver, UIViewControllerInteractiveTransitioning, SBViewControllerTransitionContextDelegate, SBUIAnimationStepping, SBUIAnimationControllerCoordinating>
 @property  SBViewControllerTransitionContext *transition
 @property  <SBUIAnimationControllerTransitionContextProvider> *transitionContextProvider
 @property  @? animationTransactionCompletion
 @property  BSTransaction *animationTransaction
 @property  BSTransaction *notifyObserversTransaction
 @property  BSTransaction *cleanupTransaction
 @property  BOOL needsCATransactionActivate
 @property  UIView *containerView
 @property  NSSet *toApplicationSceneEntities
 @property  SBApplicationSceneEntity *toApplicationSceneEntity
 @property  NSSet *fromApplicationSceneEntities
 @property  SBApplicationSceneEntity *fromApplicationSceneEntity
 @property  BOOL transitionSupportsCancelling
 @property  BOOL transitionSupportsRestarting
 @property  BOOL transitionWasCancelled
 @property  BOOL transitionWasRestarted
 @property  BOOL interactive
 @property  <SBViewControllerTransitionCoordinator> *transitionCoordinator
 @property  BSAnimationSettings *animationSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double completionSpeed
 @property  long long completionCurve
 @property  BOOL wantsInteractiveStart
 @property  BOOL stepped
 @property  double stepPercentage

  // instance methods
  -[SBUIAnimationController transitionWasCancelled]
  -[SBUIAnimationController transitionWasRestarted]
  -[SBUIAnimationController setTransition:]
  -[SBUIAnimationController _animationState]
  -[SBUIAnimationController isInteractive]
  -[SBUIAnimationController cancelTransition]
  -[SBUIAnimationController _setAnimationState:]
  -[SBUIAnimationController init]
  -[SBUIAnimationController _setHidden:]
  -[SBUIAnimationController transitionDidFinish:]
  -[SBUIAnimationController _canBeInterrupted]
  -[SBUIAnimationController toApplicationSceneEntities]
  -[SBUIAnimationController fromApplicationSceneEntities]
  -[SBUIAnimationController transition]
  -[SBUIAnimationController _transitionAnimator]
  -[SBUIAnimationController animating]
  -[SBUIAnimationController dealloc]
  -[SBUIAnimationController _begin]
  -[SBUIAnimationController .cxx_destruct]
  -[SBUIAnimationController _shouldDismissBanner]
  -[SBUIAnimationController shouldResignActiveForAnimation]
  -[SBUIAnimationController restartTransition]
  -[SBUIAnimationController _addDebugLogCategory:]
  -[SBUIAnimationController transitionCoordinator]
  -[SBUIAnimationController containerView]
  -[SBUIAnimationController isFluidSwitcherAnimationController]
  -[SBUIAnimationController startInteractiveTransition:]
  -[SBUIAnimationController _prepareAnimation]
  -[SBUIAnimationController sceneHandle:didUpdateContentState:]
  -[SBUIAnimationController animationSettings]
  -[SBUIAnimationController removeObserver:]
  -[SBUIAnimationController _cleanupAnimation]
  -[SBUIAnimationController _startAnimation]
  -[SBUIAnimationController isReasonableMomentToInterrupt]
  -[SBUIAnimationController addObserver:]
  -[SBUIAnimationController _willComplete]
  -[SBUIAnimationController _animationIdentifier]
  -[SBUIAnimationController _didInterruptWithReason:]
  -[SBUIAnimationController initWithTransitionContextProvider:]
  -[SBUIAnimationController _willAnimate]
  -[SBUIAnimationController _enumerateCoordinatingAnimationsWithBlock:]
  -[SBUIAnimationController _getTransitionWindow]
  -[SBUIAnimationController _noteAnimationDidFinish]
  -[SBUIAnimationController _waitsForActivatingSceneContentAvailableIfNecessary]
  -[SBUIAnimationController addCoordinatingChildTransaction:withSchedulingPolicy:]
  -[SBUIAnimationController transitionContextProvider]
  -[SBUIAnimationController _noteAnimationDidFail]
  -[SBUIAnimationController __animationShouldStart]
  -[SBUIAnimationController setAnimationTransactionCompletion:]
  -[SBUIAnimationController __startAnimation]
  -[SBUIAnimationController __reportAnimationCompletion]
  -[SBUIAnimationController __cleanupAnimation]
  -[SBUIAnimationController _cleanupEntityObservers]
  -[SBUIAnimationController transitionSupportsCancelling]
  -[SBUIAnimationController _enumerateCoordinatingAnimationsWithSchedulingPolicy:block:]
  -[SBUIAnimationController transitionSupportsRestarting]
  -[SBUIAnimationController isStepped]
  -[SBUIAnimationController _abortAnimation]
  -[SBUIAnimationController coordinatingAnimationControllers]
  -[SBUIAnimationController _enumerateCoordinatingChildRelationshipsWithBlock:]
  -[SBUIAnimationController __alertItemsController]
  -[SBUIAnimationController _viewsForAnimationStepping]
  -[SBUIAnimationController _willSetupStartDependencies]
  -[SBUIAnimationController _progressDependencies]
  -[SBUIAnimationController __startTransactionDependencyForEntity:]
  -[SBUIAnimationController __wantsInitialProgressStateChange]
  -[SBUIAnimationController _application:processStateDidChange:]
  -[SBUIAnimationController _sceneHandle:didUpdateContentState:]
  -[SBUIAnimationController _willBeginWaitingForStartDependencies]
  -[SBUIAnimationController animationTransaction]
  -[SBUIAnimationController notifyObserversTransaction]
  -[SBUIAnimationController cleanupTransaction]
  -[SBUIAnimationController _registerEntityObserversIfNecessary]
  -[SBUIAnimationController __abortAnimation]
  -[SBUIAnimationController _notifyObserversOfAnimationCompletion]
  -[SBUIAnimationController _isNullAnimation]
  -[SBUIAnimationController _entityObserverProgressDidChange:waitForSceneContentAvailableTransactionBlock:]
  -[SBUIAnimationController __noteAnimationDidTerminate]
  -[SBUIAnimationController animationTransactionCompletion]
  -[SBUIAnimationController _processStateDidChange:]
  -[SBUIAnimationController stepPercentage]
  -[SBUIAnimationController setStepPercentage:]
  -[SBUIAnimationController finishSteppingForwardToEnd]
  -[SBUIAnimationController finishSteppingBackwardToStart]
  -[SBUIAnimationController toApplicationSceneEntity]
  -[SBUIAnimationController fromApplicationSceneEntity]
  -[SBUIAnimationController addSteppedCoordinatingChildAnimation:]
  -[SBUIAnimationController delayCleanupUntilTransactionFinishes:]
  -[SBUIAnimationController stopDelayingCleanupForTransaction:]
  -[SBUIAnimationController delayAnimationUntilTransactionFinishes:]
  -[SBUIAnimationController stopDelayingAnimationForTransaction:]
  -[SBUIAnimationController waitingToStart]
  -[SBUIAnimationController isFinishedAnimating]
  -[SBUIAnimationController enableSteppingWithAnimationSettings:]
  -[SBUIAnimationController _displayIdentity]
  -[SBUIAnimationController _noteAnimationDidRevealApplication]
  -[SBUIAnimationController setTransitionContextProvider:]
  -[SBUIAnimationController needsCATransactionActivate]
  -[SBUIAnimationController setNeedsCATransactionActivate:]


SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIAnimationControllerTransitionContextProvider>
 @property  SBApplicationSceneEntity *activatingAppSceneEntity
 @property  SBApplicationSceneEntity *deactivatingAppSceneEntity
 @property  NSSet *toApplicationSceneEntities
 @property  SBApplicationSceneEntity *toApplicationSceneEntity
 @property  NSSet *fromApplicationSceneEntities
 @property  SBApplicationSceneEntity *fromApplicationSceneEntity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider transitionContextProviderWithToApplicationSceneEntity:fromApplicationSceneEntity:]

  // instance methods
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider toApplicationSceneEntities]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider fromApplicationSceneEntities]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider .cxx_destruct]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider toApplicationSceneEntity]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider fromApplicationSceneEntity]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider initWithToApplicationSceneEntity:fromApplicationSceneEntity:]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider activatingAppSceneEntity]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider setActivatingAppSceneEntity:]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider deactivatingAppSceneEntity]
  -[SBUIAnimationControllerActivatingAndDeactivatingAppTransitionContextProvider setDeactivatingAppSceneEntity:]


SBSnapshotWindow : UIWindow /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // class methods
  +[SBSnapshotWindow _isSecure]

  // instance methods
  -[SBSnapshotWindow interfaceOrientation]
  -[SBSnapshotWindow initWithFrame:orientation:]


SBViewSnapshotProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  @? completionBlock

  // instance methods
  -[SBViewSnapshotProvider .cxx_destruct]
  -[SBViewSnapshotProvider snapshot]
  -[SBViewSnapshotProvider setCompletionBlock:]
  -[SBViewSnapshotProvider completionBlock]
  -[SBViewSnapshotProvider snapshotAsynchronously:withImageBlock:]
  -[SBViewSnapshotProvider initWithView:orientation:]
  -[SBViewSnapshotProvider snapshotWithImageBlock:]


SBChainableModifierEvent : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, NSCopying>
 @property  BOOL handled
 @property  NSString *handledReason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBChainableModifierEvent copyWithZone:]
  -[SBChainableModifierEvent loggingCategory]
  -[SBChainableModifierEvent .cxx_destruct]
  -[SBChainableModifierEvent succinctDescriptionBuilder]
  -[SBChainableModifierEvent succinctDescription]
  -[SBChainableModifierEvent descriptionWithMultilinePrefix:]
  -[SBChainableModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBChainableModifierEvent unhandledCopy]
  -[SBChainableModifierEvent isHandled]
  -[SBChainableModifierEvent handledReason]
  -[SBChainableModifierEvent handleWithReason:]


SBFluidSwitcherScreenEdgePanGestureRecognizer : SBHomeGesturePanGestureRecognizer
 @property  SBFluidSwitcherViewController *switcherViewController

  // instance methods
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer setState:]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer .cxx_destruct]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer _touchInterfaceOrientation]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer switcherViewController]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer setSwitcherViewController:]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer viewForTouchHistory]
  -[SBFluidSwitcherScreenEdgePanGestureRecognizer reset]


SBFluidSwitcherPanGestureRecognizer : SBPanSystemGestureRecognizer <SBGestureRecognizerPanGestureProviding, SBGestureRecognizerTouchHistoryProviding>
 @property  SBTouchHistory *touchHistory
 @property  SBFluidSwitcherViewController *switcherViewController
 @property  BOOL installedAsSystemGesture
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherPanGestureRecognizer peakSpeed]
  -[SBFluidSwitcherPanGestureRecognizer installedAsSystemGesture]
  -[SBFluidSwitcherPanGestureRecognizer touchesBegan:withEvent:]
  -[SBFluidSwitcherPanGestureRecognizer touchHistory]
  -[SBFluidSwitcherPanGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBFluidSwitcherPanGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBFluidSwitcherPanGestureRecognizer .cxx_destruct]
  -[SBFluidSwitcherPanGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBFluidSwitcherPanGestureRecognizer setInstalledAsSystemGesture:]
  -[SBFluidSwitcherPanGestureRecognizer switcherViewController]
  -[SBFluidSwitcherPanGestureRecognizer setSwitcherViewController:]
  -[SBFluidSwitcherPanGestureRecognizer setTouchHistory:]
  -[SBFluidSwitcherPanGestureRecognizer reset]
  -[SBFluidSwitcherPanGestureRecognizer initWithTarget:action:]
  -[SBFluidSwitcherPanGestureRecognizer touchesMoved:withEvent:]
  -[SBFluidSwitcherPanGestureRecognizer touchesEnded:withEvent:]


SBSwitcherToActiveFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBSwitcherToActiveFloatingSwitcherModifier visibleAppLayouts]
  -[SBSwitcherToActiveFloatingSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBSwitcherToActiveFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSwitcherToActiveFloatingSwitcherModifier opacityForIndex:]
  -[SBSwitcherToActiveFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBSwitcherToActiveFloatingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBSwitcherToActiveFloatingSwitcherModifier _layoutSettings]
  -[SBSwitcherToActiveFloatingSwitcherModifier .cxx_destruct]
  -[SBSwitcherToActiveFloatingSwitcherModifier transitionWillBegin]
  -[SBSwitcherToActiveFloatingSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBSwitcherToActiveFloatingSwitcherModifier wantsSwitcherDimmingView]
  -[SBSwitcherToActiveFloatingSwitcherModifier switcherBackdropBlurType]
  -[SBSwitcherToActiveFloatingSwitcherModifier transitionLiveContentRasterizationStyle]
  -[SBSwitcherToActiveFloatingSwitcherModifier initWithTransitionID:direction:fullScreenAppLayout:floatingDeckModifier:]


SBIdleTimerService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <ITIdleTimerStateServiceDelegate, SBIdleTimerIdleEventHandler>
 @property  <SBIdleTimerServiceDelegate> *delegate
 @property  SBIdleTimerAggregateClientConfiguration *aggregateClientConfiguration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerService sharedInstance]
  +[SBIdleTimerService registerServices]
  +[SBIdleTimerService _sharedIdleTimerStateServiceCreatingIfNeeded:]
  +[SBIdleTimerService _sharedIdleTimerStateServiceIfExists]

  // instance methods
  -[SBIdleTimerService _addStateCaptureHandlers]
  -[SBIdleTimerService dealloc]
  -[SBIdleTimerService _aggregateConfigurations]
  -[SBIdleTimerService .cxx_destruct]
  -[SBIdleTimerService handleIdleTimerDidExpire]
  -[SBIdleTimerService handleIdleTimerUserAttentionDidReset]
  -[SBIdleTimerService aggregateClientConfiguration]
  -[SBIdleTimerService _init]
  -[SBIdleTimerService acquireIdleTimerAssertionWithConfiguration:fromClient:forReason:]
  -[SBIdleTimerService _removeAssertionsForReason:]
  -[SBIdleTimerService setDelegate:]
  -[SBIdleTimerService _addConfigurationInfo:toSortedArray:]
  -[SBIdleTimerService _stateCaptureDescription]
  -[SBIdleTimerService delegate]
  -[SBIdleTimerService handleIdleTimerDidWarn]
  -[SBIdleTimerService _removeConfigurationInfoForReason:fromArray:]
  -[SBIdleTimerService _acquireIdleTimerDisableAssertionForReason:]


_SBIdleTimerConfigurationInfo : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBIdleTimerRequestConfiguration *configuration
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBIdleTimerConfigurationInfo .cxx_destruct]
  -[_SBIdleTimerConfigurationInfo succinctDescriptionBuilder]
  -[_SBIdleTimerConfigurationInfo succinctDescription]
  -[_SBIdleTimerConfigurationInfo configuration]
  -[_SBIdleTimerConfigurationInfo reason]
  -[_SBIdleTimerConfigurationInfo descriptionWithMultilinePrefix:]
  -[_SBIdleTimerConfigurationInfo descriptionBuilderWithMultilinePrefix:]
  -[_SBIdleTimerConfigurationInfo initWithConfiguration:reason:]


SBDropApplicationSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBDropApplicationSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDropApplicationSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBDropApplicationSwitcherModifier frameForIndex:]
  -[SBDropApplicationSwitcherModifier .cxx_destruct]
  -[SBDropApplicationSwitcherModifier appLayoutsToResignActive]
  -[SBDropApplicationSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBDropApplicationSwitcherModifier transitionWillBegin]
  -[SBDropApplicationSwitcherModifier keyboardSuppressionMode]
  -[SBDropApplicationSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]


SBNotificationBannerDestinationTestActionRunner : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NCNotificationActionRunner>
 @property  BOOL shouldForwardAction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNotificationBannerDestinationTestActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]
  -[SBNotificationBannerDestinationTestActionRunner shouldForwardAction]
  -[SBNotificationBannerDestinationTestActionRunner setShouldForwardAction:]


SBStashedFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBStashedFloatingSwitcherModifier visibleAppLayouts]
  -[SBStashedFloatingSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBStashedFloatingSwitcherModifier isSwitcherWindowVisible]
  -[SBStashedFloatingSwitcherModifier opacityForIndex:]
  -[SBStashedFloatingSwitcherModifier init]
  -[SBStashedFloatingSwitcherModifier .cxx_destruct]
  -[SBStashedFloatingSwitcherModifier shadowOpacityForIndex:]


SBActiveAppLayoutFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBActiveAppLayoutFloatingSwitcherModifier .cxx_destruct]
  -[SBActiveAppLayoutFloatingSwitcherModifier initWithActiveAppLayout:floatingConfiguration:]


_SBActiveAppFloorFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenBackdropBlurType]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsDockWindowLevelAssertion]
  -[_SBActiveAppFloorFloatingSwitcherModifier visibleAppLayouts]
  -[_SBActiveAppFloorFloatingSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier scaleForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isHomeScreenContentRequired]
  -[_SBActiveAppFloorFloatingSwitcherModifier topMostLayoutElements]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsDockBehaviorAssertion]
  -[_SBActiveAppFloorFloatingSwitcherModifier isSwitcherWindowVisible]
  -[_SBActiveAppFloorFloatingSwitcherModifier isScrollEnabled]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[_SBActiveAppFloorFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[_SBActiveAppFloorFloatingSwitcherModifier wallpaperStyle]
  -[_SBActiveAppFloorFloatingSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[_SBActiveAppFloorFloatingSwitcherModifier cardCornerRadiiForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier opacityForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[_SBActiveAppFloorFloatingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isWallpaperRequiredForSwitcher]
  -[_SBActiveAppFloorFloatingSwitcherModifier dockProgress]
  -[_SBActiveAppFloorFloatingSwitcherModifier frameForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenDimmingAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[_SBActiveAppFloorFloatingSwitcherModifier containerStatusBarAnimationDuration]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[_SBActiveAppFloorFloatingSwitcherModifier isIndexSelectable:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsHomeScreenPointerInteractions]
  -[_SBActiveAppFloorFloatingSwitcherModifier switcherDimmingAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenBackdropBlurProgress]
  -[_SBActiveAppFloorFloatingSwitcherModifier reopenClosedWindowsButtonScale]
  -[_SBActiveAppFloorFloatingSwitcherModifier .cxx_destruct]
  -[_SBActiveAppFloorFloatingSwitcherModifier titleAndIconOpacityForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[_SBActiveAppFloorFloatingSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier titleOpacityForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier dockUpdateMode]
  -[_SBActiveAppFloorFloatingSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shadowStyleForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier homeScreenScale]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[_SBActiveAppFloorFloatingSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutsToResignActive]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldAllowContentViewTouchesForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[_SBActiveAppFloorFloatingSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[_SBActiveAppFloorFloatingSwitcherModifier dockWindowLevel]
  -[_SBActiveAppFloorFloatingSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[_SBActiveAppFloorFloatingSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[_SBActiveAppFloorFloatingSwitcherModifier wallpaperScale]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[_SBActiveAppFloorFloatingSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isIndexKillable:]
  -[_SBActiveAppFloorFloatingSwitcherModifier darkeningAlphaForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier switcherDimmingViewBlocksTouches]
  -[_SBActiveAppFloorFloatingSwitcherModifier plusButtonAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[_SBActiveAppFloorFloatingSwitcherModifier shadowOffsetForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier lighteningAlphaForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier keyboardSuppressionMode]
  -[_SBActiveAppFloorFloatingSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier transactionCompletionOptions]
  -[_SBActiveAppFloorFloatingSwitcherModifier contentViewScale]
  -[_SBActiveAppFloorFloatingSwitcherModifier plusButtonStyle]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsSwitcherBackdropBlur]
  -[_SBActiveAppFloorFloatingSwitcherModifier wantsSwitcherDimmingView]
  -[_SBActiveAppFloorFloatingSwitcherModifier dockWindowLevelPriority]
  -[_SBActiveAppFloorFloatingSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isContainerStatusBarVisible]
  -[_SBActiveAppFloorFloatingSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier shadowOpacityForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier switcherBackdropBlurProgress]
  -[_SBActiveAppFloorFloatingSwitcherModifier rotationAngleForIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier _isActiveAppLayoutAtIndex:]
  -[_SBActiveAppFloorFloatingSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[_SBActiveAppFloorFloatingSwitcherModifier switcherBackdropBlurType]
  -[_SBActiveAppFloorFloatingSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[_SBActiveAppFloorFloatingSwitcherModifier initWithActiveAppLayout:floatingConfiguration:]


SBHomeGestureRootFloatingSwitcherModifier : SBGestureRootSwitcherModifier
  // instance methods
  -[SBHomeGestureRootFloatingSwitcherModifier .cxx_destruct]
  -[SBHomeGestureRootFloatingSwitcherModifier gestureType]
  -[SBHomeGestureRootFloatingSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBHomeGestureRootFloatingSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBHomeGestureRootFloatingSwitcherModifier _frameWithScaleAppliedForIndex:]
  -[SBHomeGestureRootFloatingSwitcherModifier initWithMultitaskingModifier:]


SBHardwareButtonActionList : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSMutableArray *actionBlocks
 @property  BOOL buttonDown

  // instance methods
  -[SBHardwareButtonActionList setActionBlocks:]
  -[SBHardwareButtonActionList .cxx_destruct]
  -[SBHardwareButtonActionList setButtonDown:]
  -[SBHardwareButtonActionList performQueuedButtonUpActions]
  -[SBHardwareButtonActionList scheduleButtonUpActionBlock:]
  -[SBHardwareButtonActionList actionBlocks]
  -[SBHardwareButtonActionList isButtonDown]


SBLockScreenActionContextFactory : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBLockScreenActionContextFactory sharedInstance]

  // instance methods
  -[SBLockScreenActionContextFactory lockScreenActionContextForAction:fromPlugin:]
  -[SBLockScreenActionContextFactory lockScreenActionContextForAlertItem:]
  -[SBLockScreenActionContextFactory lockScreenActionContextForPlugin:]


SBUserAgent : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIUserAgent_Internal>
 @property  SBIdleTimerPolicyAggregator *_idleTimerPolicyAggregator
 @property  long long softwareUpdatePasscodePolicyType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUserAgent setIdleText:]
  -[SBUserAgent _launchFromSource:withURL:bundleID:allowUnlock:animate:]
  -[SBUserAgent activeInterfaceOrientation]
  -[SBUserAgent isInternalInstall]
  -[SBUserAgent deviceIsTethered]
  -[SBUserAgent applicationInstalledForDisplayID:]
  -[SBUserAgent launchApplicationFromSource:withURL:options:]
  -[SBUserAgent init]
  -[SBUserAgent activateRemoteAlertService:options:]
  -[SBUserAgent deviceIsPasscodeLocked]
  -[SBUserAgent isScreenOn]
  -[SBUserAgent .cxx_destruct]
  -[SBUserAgent removeIdleTimerHandler:]
  -[SBUserAgent lockAndDimDeviceDisconnectingCallIfNecessary:andDimScreen:]
  -[SBUserAgent setMinimumBacklightLevel:animated:]
  -[SBUserAgent topSuspendedEventsOnlyDisplayID]
  -[SBUserAgent _cleanupFromBannerLaunch]
  -[SBUserAgent launchApplicationFromSource:withDisplayID:options:]
  -[SBUserAgent networkUsageTypeForAppWithDisplayID:]
  -[SBUserAgent addActiveInterfaceOrientationObserver:]
  -[SBUserAgent launchFromSource:withURL:bundleID:allowUnlock:]
  -[SBUserAgent foregroundApplicationDisplayID]
  -[SBUserAgent deviceIsPasscodeLockedRemotely]
  -[SBUserAgent updateInterfaceOrientationIfNecessary]
  -[SBUserAgent undimScreen]
  -[SBUserAgent setSoftwareUpdatePasscodePolicyType:]
  -[SBUserAgent folderNameForDisplayID:]
  -[SBUserAgent activateModalBulletinAlert:]
  -[SBUserAgent lockAndDimDevice]
  -[SBUserAgent isApplicationForegroundObscured:]
  -[SBUserAgent lockAndDimDeviceDisconnectingCallIfNecessary:]
  -[SBUserAgent isApplicationRestrictedOrHidden:]
  -[SBUserAgent removeActiveInterfaceOrientationObserver:]
  -[SBUserAgent isIdleTimerDisabledForReason:]
  -[SBUserAgent addIdleTimerHandler:]
  -[SBUserAgent setBadgeNumberOrString:forApplicationWithID:]
  -[SBUserAgent _openApplication:withURL:fromSource:animated:options:]
  -[SBUserAgent _idleTimerPolicyAggregator]
  -[SBUserAgent enableLockScreenBundleNamed:activationContext:]
  -[SBUserAgent openURL:allowUnlock:animated:]
  -[SBUserAgent lockScreenIsShowing]
  -[SBUserAgent deviceIsLocked]
  -[SBUserAgent isNamedRemoteAlertServiceActive:controllerClassName:]
  -[SBUserAgent disableLockScreenBundleNamed:deactivationContext:]
  -[SBUserAgent softwareUpdatePasscodePolicyType]
  -[SBUserAgent deviceIsBlocked]
  -[SBUserAgent wifiRunLoopRef]
  -[SBUserAgent setIdleTimerDisabled:forReason:]
  -[SBUserAgent _safeValue:forKey:ofType:]
  -[SBUserAgent notifyOnNextUserEvent]
  -[SBUserAgent springBoardIsActive]
  -[SBUserAgent _setIdleTimerPolicyAggregator:]
  -[SBUserAgent localizedDisplayNameForDisplayID:]
  -[SBUserAgent canLaunchFromSource:withURL:bundleID:]


SBPolygon : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSMutableArray *mutablePoints
 @property  {CGPoint=dd} centroid
 @property  double perimeter
 @property  NSMutableArray *weights
 @property  {CGPoint=dd} weightedCentroid
 @property  unsigned long pointCount
 @property  double distanceOfFarthestPointFromCentroid

  // class methods
  +[SBPolygon _sortPoints:]
  +[SBPolygon _pointAtIndex:ofPointArray:]

  // instance methods
  -[SBPolygon _points]
  -[SBPolygon .cxx_destruct]
  -[SBPolygon points]
  -[SBPolygon _centroid]
  -[SBPolygon _scale:]
  -[SBPolygon isEqual:]
  -[SBPolygon _weights]
  -[SBPolygon _updateProperties]
  -[SBPolygon initWithPoints:]
  -[SBPolygon pointCount]
  -[SBPolygon _rotate:]
  -[SBPolygon _applyTransform:]
  -[SBPolygon distanceOfFarthestPointFromCentroid]
  -[SBPolygon _pointAtIndex:]
  -[SBPolygon _setPoints:]
  -[SBPolygon _isLeftHanded]
  -[SBPolygon _thumbIndex]
  -[SBPolygon enumeratePointsUsingBlock:]
  -[SBPolygon _updateCentroid]
  -[SBPolygon _updateWeights]
  -[SBPolygon _updateWeightedCentroid]
  -[SBPolygon _setCentroid:]
  -[SBPolygon _setWeights:]
  -[SBPolygon _weightAtIndex:]
  -[SBPolygon _setWeightedCentroid:]
  -[SBPolygon _baseOrientation]
  -[SBPolygon initWithPoints:pointCount:]
  -[SBPolygon _perimeter]
  -[SBPolygon _flipHorizontally]
  -[SBPolygon _translate:]
  -[SBPolygon _meanFingertipRowAngle]
  -[SBPolygon _meanRadius]
  -[SBPolygon _weightedCentroid]


SBExternalSettingsDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL badgedForSoftwareUpdate

  // class methods
  +[SBExternalSettingsDefaults __useDynamicMethodResolution]

  // instance methods
  -[SBExternalSettingsDefaults init]
  -[SBExternalSettingsDefaults isBadgedForSoftwareUpdate]
  -[SBExternalSettingsDefaults setBadgedForSoftwareUpdate:]


SBHomeGesturePanGestureRecognizer : SBScreenEdgePanGestureRecognizer <PTSettingsKeyObserver, SBGestureRecognizerPanGestureProviding, SBGestureRecognizerTouchHistoryProviding>
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  SBFluidSwitcherGestureExclusionTrapezoid *portraitExclusionTrapezoid
 @property  SBFluidSwitcherGestureExclusionTrapezoid *landscapeExclusionTrapezoid
 @property  SBTouchHistory *touchHistory
 @property  <SBHomeGesturePanGestureRecognizerInterfaceDelegate> *interfaceDelegate
 @property  BOOL preventHorizontalSwipesOutsideTrapezoid
 @property  BOOL installedAsSystemGesture
 @property  UIView *viewForTouchHistory
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBHomeGesturePanGestureRecognizer homeGesturePanGestureRecognizerWithTarget:action:]

  // instance methods
  -[SBHomeGesturePanGestureRecognizer peakSpeed]
  -[SBHomeGesturePanGestureRecognizer _setUpExclusionTrapezoids]
  -[SBHomeGesturePanGestureRecognizer setInterfaceDelegate:]
  -[SBHomeGesturePanGestureRecognizer installedAsSystemGesture]
  -[SBHomeGesturePanGestureRecognizer settings:changedValueForKey:]
  -[SBHomeGesturePanGestureRecognizer _updateHomeGestureParameters]
  -[SBHomeGesturePanGestureRecognizer touchesBegan:withEvent:]
  -[SBHomeGesturePanGestureRecognizer touchHistory]
  -[SBHomeGesturePanGestureRecognizer setPreventHorizontalSwipesOutsideTrapezoid:]
  -[SBHomeGesturePanGestureRecognizer _currentKeyboardExclusionCompositeShape]
  -[SBHomeGesturePanGestureRecognizer preventHorizontalSwipesOutsideTrapezoid]
  -[SBHomeGesturePanGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBHomeGesturePanGestureRecognizer _isOutsideOfExclusionTrapezoid]
  -[SBHomeGesturePanGestureRecognizer _SBLogTouchesWithMethodName:withMethodName:]
  -[SBHomeGesturePanGestureRecognizer interfaceDelegate]
  -[SBHomeGesturePanGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBHomeGesturePanGestureRecognizer .cxx_destruct]
  -[SBHomeGesturePanGestureRecognizer _shouldBegin]
  -[SBHomeGesturePanGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBHomeGesturePanGestureRecognizer _touchInterfaceOrientation]
  -[SBHomeGesturePanGestureRecognizer landscapeExclusionTrapezoid]
  -[SBHomeGesturePanGestureRecognizer homeGestureSettings]
  -[SBHomeGesturePanGestureRecognizer sb_commonInitHomeGesturePanGestureRecognizer]
  -[SBHomeGesturePanGestureRecognizer setInstalledAsSystemGesture:]
  -[SBHomeGesturePanGestureRecognizer viewForTouchHistory]
  -[SBHomeGesturePanGestureRecognizer portraitExclusionTrapezoid]
  -[SBHomeGesturePanGestureRecognizer setPortraitExclusionTrapezoid:]
  -[SBHomeGesturePanGestureRecognizer _shouldBlockHomeGestureForKeyboardInputMode:]
  -[SBHomeGesturePanGestureRecognizer setTouchHistory:]
  -[SBHomeGesturePanGestureRecognizer _currentExclusionShapeForEdge:]
  -[SBHomeGesturePanGestureRecognizer setHomeGestureSettings:]
  -[SBHomeGesturePanGestureRecognizer setLandscapeExclusionTrapezoid:]
  -[SBHomeGesturePanGestureRecognizer initWithTarget:action:type:options:]
  -[SBHomeGesturePanGestureRecognizer reset]
  -[SBHomeGesturePanGestureRecognizer touchesMoved:withEvent:]
  -[SBHomeGesturePanGestureRecognizer touchesEnded:withEvent:]


SBTouchTemplate : SBPolygon
  // instance methods
  -[SBTouchTemplate matchesPolygon:matchTransformsAllowed:acceptanceFactor:outMorphedCandidate:]


SBDockInteractionMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBDockInteractionMetric init]
  -[SBDockInteractionMetric .cxx_destruct]


SBPIPRestoreToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBPIPRestoreToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBPIPRestoreToFullScreenSwitcherModifier scaleForIndex:]
  -[SBPIPRestoreToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBPIPRestoreToFullScreenSwitcherModifier opacityForIndex:]
  -[SBPIPRestoreToFullScreenSwitcherModifier _layoutSettings]
  -[SBPIPRestoreToFullScreenSwitcherModifier frameForIndex:]
  -[SBPIPRestoreToFullScreenSwitcherModifier .cxx_destruct]
  -[SBPIPRestoreToFullScreenSwitcherModifier transitionWillBegin]
  -[SBPIPRestoreToFullScreenSwitcherModifier completesWhenChildrenComplete]
  -[SBPIPRestoreToFullScreenSwitcherModifier initWithTransitionID:zoomModifier:fromAppLayout:toAppLayout:]
  -[SBPIPRestoreToFullScreenSwitcherModifier _isFromAppLayout:]
  -[SBPIPRestoreToFullScreenSwitcherModifier _isToAppLayout:]


SBAnimationUtilities : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBAnimationUtilities animationSettingsForRotationFromInterfaceOrientation:toInterfaceOrientation:]
  +[SBAnimationUtilities adjustedRotationAnimationDurationForDuration:fromOrientation:toOrientation:]


SBCAAnimationBlockDelegate : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CAAnimationDelegate>
 @property  @? animationDidStartHandler
 @property  @? animationDidStopHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCAAnimationBlockDelegate animationDidStop:finished:]
  -[SBCAAnimationBlockDelegate animationDidStart:]
  -[SBCAAnimationBlockDelegate .cxx_destruct]
  -[SBCAAnimationBlockDelegate animationDidStartHandler]
  -[SBCAAnimationBlockDelegate setAnimationDidStartHandler:]
  -[SBCAAnimationBlockDelegate animationDidStopHandler]
  -[SBCAAnimationBlockDelegate setAnimationDidStopHandler:]


SBBannerWindow : SBSecureMainScreenActiveInterfaceOrientationWindow
  // class methods
  +[SBBannerWindow layoutContentViewControllerWithConstraints]

  // instance methods
  -[SBBannerWindow canResignFirstResponder]
  -[SBBannerWindow becomeFirstResponder]
  -[SBBannerWindow resignFirstResponder]
  -[SBBannerWindow _canBecomeKeyWindow]
  -[SBBannerWindow init]
  -[SBBannerWindow setHidden:]


SBBackBoardServicesInterface : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBBackBoardServicesInterface setHitTestRegions:forDisplay:]


SBApplicationSupportServiceDelegate : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UISApplicationSupportServiceDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationSupportServiceDelegate requestPasscodeUnlockUIForClient:withCompletion:]
  -[SBApplicationSupportServiceDelegate init]
  -[SBApplicationSupportServiceDelegate dealloc]
  -[SBApplicationSupportServiceDelegate .cxx_destruct]
  -[SBApplicationSupportServiceDelegate service:initializeClient:]
  -[SBApplicationSupportServiceDelegate destroyScenesWithPersistentIdentifiers:animationType:destroySessions:forClient:completion:]
  -[SBApplicationSupportServiceDelegate service:overrideClientInitialization:]
  -[SBApplicationSupportServiceDelegate _rebuildDefaultContext]


SBApplicationSupportServiceSingleton : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBApplicationSupportServiceSingleton startService]


SBTouchRegionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBSDisplayLayoutObserver, PTSettingsKeyObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBTouchRegionManager sharedInstance]

  // instance methods
  -[SBTouchRegionManager settings:changedValueForKey:]
  -[SBTouchRegionManager init]
  -[SBTouchRegionManager _queue_calculateHitTestRegionsFromSceneRects:]
  -[SBTouchRegionManager displayLayoutMonitor]
  -[SBTouchRegionManager dealloc]
  -[SBTouchRegionManager .cxx_destruct]
  -[SBTouchRegionManager setTouchRegionBuffer:]
  -[SBTouchRegionManager setDisplayLayoutMonitor:]
  -[SBTouchRegionManager _initWithBKSInterface:displayLayoutMonitor:]
  -[SBTouchRegionManager touchRegionBuffer]
  -[SBTouchRegionManager layoutMonitor:didUpdateDisplayLayout:withContext:]
  -[SBTouchRegionManager _queue_displayLayoutDidUpdate:]
  -[SBTouchRegionManager _queue_floatingHitTestRegionForLayoutRect:]
  -[SBTouchRegionManager _queue_calculateTouchRegionsFromSceneRects:]


SBBarSwipeAffordanceViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBHomeGestureParticipantDelegate>
 @property  SBBarSwipeAffordanceView *view
 @property  BOOL wantsToBeActiveAffordance
 @property  BOOL suppressAffordance
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  <SBHomeGrabberPointerClickDelegate> *pointerClickDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBarSwipeAffordanceViewController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBBarSwipeAffordanceViewController homeGestureParticipant]
  -[SBBarSwipeAffordanceViewController .cxx_destruct]
  -[SBBarSwipeAffordanceViewController setPointerClickDelegate:]
  -[SBBarSwipeAffordanceViewController pointerClickDelegate]
  -[SBBarSwipeAffordanceViewController _canShowWhileLocked]
  -[SBBarSwipeAffordanceViewController _updateActiveState]
  -[SBBarSwipeAffordanceViewController loadView]
  -[SBBarSwipeAffordanceViewController setWantsToBeActiveAffordance:]
  -[SBBarSwipeAffordanceViewController initWithHomeGestureParticipantIdentifier:]
  -[SBBarSwipeAffordanceViewController _beginTryingToBecomeActiveAffordance]
  -[SBBarSwipeAffordanceViewController _stopTryingToBecomeActiveAffordance]
  -[SBBarSwipeAffordanceViewController suppressAffordance]
  -[SBBarSwipeAffordanceViewController setSuppressAffordance:]
  -[SBBarSwipeAffordanceViewController wantsToBeActiveAffordance]


SBBiometricKitDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL coachingHintsEnabled

  // instance methods
  -[SBBiometricKitDefaults init]
  -[SBBiometricKitDefaults _bindAndRegisterDefaults]


SBSetupWiFiScanner : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSThread *scanningThread
 @property  @? completionHandler
 @property  long long state

  // instance methods
  -[SBSetupWiFiScanner _setCompletionHandler:]
  -[SBSetupWiFiScanner _completionHandler]
  -[SBSetupWiFiScanner dealloc]
  -[SBSetupWiFiScanner .cxx_destruct]
  -[SBSetupWiFiScanner _setState:]
  -[SBSetupWiFiScanner _state]
  -[SBSetupWiFiScanner cancel]
  -[SBSetupWiFiScanner beginScanningWithCompletionHandler:]
  -[SBSetupWiFiScanner _thread_closeWifiConnection]
  -[SBSetupWiFiScanner _wifiScanningThread]
  -[SBSetupWiFiScanner _setScanningThread:]
  -[SBSetupWiFiScanner _thread_callCompletionHandlerWithGuessedCountries:]
  -[SBSetupWiFiScanner _scanningThread]
  -[SBSetupWiFiScanner _thread_cancelScanning]
  -[SBSetupWiFiScanner _thread_wifiScanComplete:error:]


SBTransientOverlayWindow : SBWindow
  // class methods
  +[SBTransientOverlayWindow _isSecure]
  +[SBTransientOverlayWindow sb_autorotates]

  // instance methods
  -[SBTransientOverlayWindow _canBecomeKeyWindow]


SBTransientOverlayBackgroundWindow : SBWindow
  // class methods
  +[SBTransientOverlayBackgroundWindow _isSecure]
  +[SBTransientOverlayBackgroundWindow sb_autorotates]

  // instance methods
  -[SBTransientOverlayBackgroundWindow _canBecomeKeyWindow]


SBHarmonyController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL supportsWhitePointAdaptation
 @property  BOOL whitePointAdaptationEnabled
 @property  long long whitePointAdaptivityStyle
 @property  BOOL supportsBlueLightReduction
 @property  SBHarmonySettings *harmonySettings

  // class methods
  +[SBHarmonyController sharedInstance]

  // instance methods
  -[SBHarmonyController init]
  -[SBHarmonyController .cxx_destruct]
  -[SBHarmonyController harmonySettings]
  -[SBHarmonyController isWhitePointAdaptationEnabled]
  -[SBHarmonyController transitionFromWhitePointAdaptivityStyleWithStyles:toWhitePointAdaptivityStyleWithStyles:fromPercentage:toPercentage:animationSettings:]
  -[SBHarmonyController setWhitePointAdaptivityStyle:animationSettings:]
  -[SBHarmonyController supportsBlueLightReduction]
  -[SBHarmonyController setWhitePointAdaptationStrength:forWhitePointAdaptivityStyle:]
  -[SBHarmonyController supportsWhitePointAdaptation]
  -[SBHarmonyController setWhitePointAdaptationEnabled:]
  -[SBHarmonyController whitePointAdaptivityStyle]
  -[SBHarmonyController _adaptationClient]
  -[SBHarmonyController whitePointAdaptationStrengthForWhitePointAdaptivityStyle:]
  -[SBHarmonyController setWhitePointAdaptivityStyle:]
  -[SBHarmonyController setWhitePointAdaptivityStyleWithStyles:animationSettings:]


SBExternalDuetDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  NSArray *duetAllowedApps

  // instance methods
  -[SBExternalDuetDefaults init]
  -[SBExternalDuetDefaults _bindAndRegisterDefaults]


_SBFloatingApplicationLiveContentContainerViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[_SBFloatingApplicationLiveContentContainerViewController supportedInterfaceOrientations]


SBFloatingApplicationLiveContentWindow : SBWindow
 @property  UIViewController *deviceApplicationSceneViewController
 @property  UIView *effectiveCoordinateSpace

  // class methods
  +[SBFloatingApplicationLiveContentWindow sb_autorotates]

  // instance methods
  -[SBFloatingApplicationLiveContentWindow convertPoint:fromView:]
  -[SBFloatingApplicationLiveContentWindow convertRect:toView:]
  -[SBFloatingApplicationLiveContentWindow convertPoint:toView:]
  -[SBFloatingApplicationLiveContentWindow _canBecomeKeyWindow]
  -[SBFloatingApplicationLiveContentWindow convertRect:fromCoordinateSpace:]
  -[SBFloatingApplicationLiveContentWindow convertRect:fromView:]
  -[SBFloatingApplicationLiveContentWindow .cxx_destruct]
  -[SBFloatingApplicationLiveContentWindow initWithDebugName:]
  -[SBFloatingApplicationLiveContentWindow convertRect:toCoordinateSpace:]
  -[SBFloatingApplicationLiveContentWindow setRootViewController:]
  -[SBFloatingApplicationLiveContentWindow convertPoint:fromCoordinateSpace:]
  -[SBFloatingApplicationLiveContentWindow setFrame:]
  -[SBFloatingApplicationLiveContentWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBFloatingApplicationLiveContentWindow convertPoint:toCoordinateSpace:]
  -[SBFloatingApplicationLiveContentWindow _usesWindowServerHitTesting]
  -[SBFloatingApplicationLiveContentWindow deviceApplicationSceneViewController]
  -[SBFloatingApplicationLiveContentWindow setDeviceApplicationSceneViewController:]
  -[SBFloatingApplicationLiveContentWindow effectiveCoordinateSpace]
  -[SBFloatingApplicationLiveContentWindow setEffectiveCoordinateSpace:]


SBBiometricMonitorTestRecipeDummyDataSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBBiometricMonitorDataSource>
 @property  BOOL presenceDetectRunning
 @property  BOOL matchRunning
 @property  BOOL poseIsMarginal
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBiometricMonitorTestRecipeDummyDataSource .cxx_destruct]
  -[SBBiometricMonitorTestRecipeDummyDataSource removeObserver:]
  -[SBBiometricMonitorTestRecipeDummyDataSource addObserver:]
  -[SBBiometricMonitorTestRecipeDummyDataSource matchRunning]
  -[SBBiometricMonitorTestRecipeDummyDataSource presenceDetectRunning]
  -[SBBiometricMonitorTestRecipeDummyDataSource poseIsMarginal]
  -[SBBiometricMonitorTestRecipeDummyDataSource cycleState]


SBBiometricMonitorTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBiometricMonitorTestRecipe load]

  // instance methods
  -[SBBiometricMonitorTestRecipe .cxx_destruct]
  -[SBBiometricMonitorTestRecipe title]
  -[SBBiometricMonitorTestRecipe handleVolumeIncrease]
  -[SBBiometricMonitorTestRecipe handleVolumeDecrease]


SBInsertionSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  SBAppLayout *appLayout
 @property  unsigned long index
 @property  unsigned long phase

  // instance methods
  -[SBInsertionSwitcherModifierEvent copyWithZone:]
  -[SBInsertionSwitcherModifierEvent index]
  -[SBInsertionSwitcherModifierEvent appLayout]
  -[SBInsertionSwitcherModifierEvent phase]
  -[SBInsertionSwitcherModifierEvent .cxx_destruct]
  -[SBInsertionSwitcherModifierEvent type]
  -[SBInsertionSwitcherModifierEvent initWithAppLayout:intoIndex:phase:]
  -[SBInsertionSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]


SBControlCenterWindow : SBIgnoredForAutorotationSecureWindow
  // instance methods
  -[SBControlCenterWindow _canBecomeKeyWindow]
  -[SBControlCenterWindow window]
  -[SBControlCenterWindow hitTest:withEvent:]
  -[SBControlCenterWindow _hitTest:withEvent:windowServerHitTestWindow:]


SBControlCenterController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CCUIModularControlCenterOverlayViewControllerDelegate, SBGrabberTongueDelegate, CSExternalBehaviorProviding, CSExternalPresentationProviding, CSExternalAppearanceProviding, UIGestureRecognizerDelegate, SBSystemGestureRecognizerDelegate, SBBarSwipeAffordanceObserver, SBBarSwipeAffordanceDelegate, SBFIdleTimerBehaviorProviding, CCUIHostStatusBarStyleProvider, SBReachabilityObserver, SBFSensorActivityObserver, SBIndirectPanGestureRecognizerOrientationProviding, SBHomeGrabberPointerClickDelegate, SBIdleTimerProviding, CSCoverSheetOverlaying>
 @property  SBControlCenterWindow *window
 @property  CCUIModularControlCenterOverlayViewController *viewController
 @property  SBBarSwipeAffordanceViewController *homeAffordanceViewController
 @property  SBControlCenterSystemAgent *systemAgent
 @property  BSSimpleAssertion *hideStatusBarAssertion
 @property  SBAppStatusBarSettingsAssertion *statusBarAssertion
 @property  SBAsynchronousRenderingAssertion *asynchronousRenderingAssertion
 @property  SBGrabberTongue *grabberTongue
 @property  UIPanGestureRecognizer *statusBarPullGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectStatusBarPullGestureRecognizer
 @property  BOOL indirectStatusBarPullGestureCalledBegin
 @property  UIApplicationSceneDeactivationAssertion *resignActiveAssertion
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  NSHashTable *observers
 @property  NSMutableArray *windowLevelAssertions
 @property  <BSInvalidatable> *idleTimerDisableAssertion
 @property  <BSInvalidatable> *bannerSuppressionAssertion
 @property  <BSInvalidatable> *deferOrientationUpdatesAssertion
 @property  PTSingleTestRecipe *presentModuleTestRecipe
 @property  PTSingleTestRecipe *userInterfaceStyleTestRecipe
 @property  BOOL presented
 @property  BOOL visible
 @property  BOOL allowGestureForContentBelow
 @property  unsigned long presentingEdge
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  <SBFSensorActivityDataProvider> *sensorActivityDataProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  <UICoordinateSpace> *presentationCoordinateSpace
 @property  NSArray *presentationRegions
 @property  NSString *appearanceIdentifier
 @property  long long backgroundStyle
 @property  NSSet *components
 @property  _UILegibilitySettings *legibilitySettings
 @property  UIColor *backgroundColor
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  CCUIStatusBarStyleSnapshot *hostStatusBarStyle

  // class methods
  +[SBControlCenterController sharedInstance]
  +[SBControlCenterController sharedInstanceIfExists]
  +[SBControlCenterController _sharedInstanceCreatingIfNeeded:]

  // instance methods
  -[SBControlCenterController isPresented]
  -[SBControlCenterController sensorActivityDataProvider]
  -[SBControlCenterController windowLevelAssertions]
  -[SBControlCenterController dismissAnimated:]
  -[SBControlCenterController coverSheetIdentifier]
  -[SBControlCenterController handleDidEndReachabilityAnimation]
  -[SBControlCenterController _willPresent]
  -[SBControlCenterController setWindowLevelAssertions:]
  -[SBControlCenterController idleTimerDuration]
  -[SBControlCenterController setGrabberTongue:]
  -[SBControlCenterController resignActiveAssertion]
  -[SBControlCenterController handleReachabilityModeActivated]
  -[SBControlCenterController _shouldShowGrabberOnFirstSwipe]
  -[SBControlCenterController _updateWindowVisibility]
  -[SBControlCenterController presentModuleTestRecipe]
  -[SBControlCenterController handleReachabilityYOffsetDidChange]
  -[SBControlCenterController presentAnimated:]
  -[SBControlCenterController conformsToCSAppearanceProviding]
  -[SBControlCenterController asynchronousRenderingAssertion]
  -[SBControlCenterController handleReachabilityModeDeactivated]
  -[SBControlCenterController controlCenterViewController:significantPresentationProgressChange:]
  -[SBControlCenterController systemAgent]
  -[SBControlCenterController grabberTongueUpdatedPulling:withDistance:andVelocity:andGesture:]
  -[SBControlCenterController grabberTongue:shouldReceiveTouch:]
  -[SBControlCenterController acquireWindowLevelAssertionWithPriority:windowLevel:reason:]
  -[SBControlCenterController _updateWindowLevel]
  -[SBControlCenterController viewController]
  -[SBControlCenterController setIdleTimerCoordinator:]
  -[SBControlCenterController grabberTongueOrPullEnabled:forGestureRecognizer:]
  -[SBControlCenterController scrollingStrategy]
  -[SBControlCenterController window]
  -[SBControlCenterController homeAffordanceViewController]
  -[SBControlCenterController notificationBehavior]
  -[SBControlCenterController grabberTongue:shouldShowTongueOnFirstSwipeWithEdgeLocation:]
  -[SBControlCenterController idleTimerCoordinator]
  -[SBControlCenterController _presentGestureTranslationInView:]
  -[SBControlCenterController grabberTongueBeganPulling:withDistance:andVelocity:andGesture:]
  -[SBControlCenterController grabberTongue:shouldAllowSecondSwipeWithEdgeLocation:]
  -[SBControlCenterController grabberTongueEndedPulling:withDistance:andVelocity:andGesture:]
  -[SBControlCenterController isVisible]
  -[SBControlCenterController displayLayoutElement]
  -[SBControlCenterController conformsToCSBehaviorProviding]
  -[SBControlCenterController idleWarnMode]
  -[SBControlCenterController viewForSystemGestureRecognizer:]
  -[SBControlCenterController idleTimerMode]
  -[SBControlCenterController init]
  -[SBControlCenterController _sensorActivityDataFromSensorActivityAttribution:]
  -[SBControlCenterController statusBarPullGestureRecognizer]
  -[SBControlCenterController willOpenExpandedModuleForControlCenterViewController:]
  -[SBControlCenterController customGestureRecognizerForGrabberTongue:]
  -[SBControlCenterController restrictedCapabilities]
  -[SBControlCenterController grabberTongueCanceledPulling:withDistance:andVelocity:andGesture:]
  -[SBControlCenterController setSensorActivityDataProvider:]
  -[SBControlCenterController legibilitySettings]
  -[SBControlCenterController dismissOverlayForDashBoardAnimated:]
  -[SBControlCenterController hideAnimationSettingsForBarSwipeAffordanceView:]
  -[SBControlCenterController grabberTongueWillPresent:]
  -[SBControlCenterController setObservers:]
  -[SBControlCenterController _updateWindowOrientation]
  -[SBControlCenterController isPresentedOrDismissing]
  -[SBControlCenterController appearanceIdentifier]
  -[SBControlCenterController handleIndirectStatusBarAction]
  -[SBControlCenterController proximityDetectionMode]
  -[SBControlCenterController backgroundStyle]
  -[SBControlCenterController hideStatusBarAssertion]
  -[SBControlCenterController _uiRelockedNotification:]
  -[SBControlCenterController _controlCenterWindow]
  -[SBControlCenterController dealloc]
  -[SBControlCenterController setWindow:]
  -[SBControlCenterController coordinatorRequestedIdleTimerBehavior:]
  -[SBControlCenterController components]
  -[SBControlCenterController conformsToCSExternalBehaviorProviding]
  -[SBControlCenterController backgroundColor]
  -[SBControlCenterController allowShowTransition]
  -[SBControlCenterController .cxx_destruct]
  -[SBControlCenterController _requireGestureRecognizerToFailForPresentGestureRecognizer:]
  -[SBControlCenterController activityDidChangeForSensorActivityDataProvider:]
  -[SBControlCenterController setHomeAffordanceViewController:]
  -[SBControlCenterController _reachabilityOffset]
  -[SBControlCenterController _presentGestureVelocityInView]
  -[SBControlCenterController gestureRecognizerShouldBegin:]
  -[SBControlCenterController setIdleTimerDisableAssertion:]
  -[SBControlCenterController controlCenterViewController:wantsHostStatusBarHidden:]
  -[SBControlCenterController observers]
  -[SBControlCenterController setIndirectStatusBarPullGestureCalledBegin:]
  -[SBControlCenterController _presentGestureLocationInView]
  -[SBControlCenterController _disableReachability]
  -[SBControlCenterController handleMenuButtonTap]
  -[SBControlCenterController unhideAnimationSettingsForBarSwipeAffordanceView:]
  -[SBControlCenterController presentationRegions]
  -[SBControlCenterController _isLocationXWithinTrailingStatusBarRegion:]
  -[SBControlCenterController participantState]
  -[SBControlCenterController userInterfaceStyleTestRecipe]
  -[SBControlCenterController homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBControlCenterController didCloseExpandedModuleForControlCenterViewController:]
  -[SBControlCenterController dismissAnimated:completion:]
  -[SBControlCenterController presentingEdge]
  -[SBControlCenterController homeGrabberViewDidReceiveClick:]
  -[SBControlCenterController reachabilityOffsetForControlCenterViewController:]
  -[SBControlCenterController setHideStatusBarAssertion:]
  -[SBControlCenterController grabberTongueDidDismiss:]
  -[SBControlCenterController _didEndTransition]
  -[SBControlCenterController _willBeginTransition]
  -[SBControlCenterController _locationOfTouchInActiveInterfaceOrientation:gestureRecognizer:]
  -[SBControlCenterController setBannerSuppressionAssertion:]
  -[SBControlCenterController reachabilitySpringAnimationBehaviorForControlCenterViewController:]
  -[SBControlCenterController _enumerateObservers:]
  -[SBControlCenterController isDismissedOrDismissing]
  -[SBControlCenterController setViewController:]
  -[SBControlCenterController hostStatusBarStyle]
  -[SBControlCenterController _shouldAllowControlCenterGesture]
  -[SBControlCenterController setDeferOrientationUpdatesAssertion:]
  -[SBControlCenterController _handleStatusBarPullDownGesture:]
  -[SBControlCenterController _trailingStatusBarRegionWidth]
  -[SBControlCenterController _setStatusBarHidden:]
  -[SBControlCenterController removeObserver:]
  -[SBControlCenterController indirectPanEffectiveInterfaceOrientation]
  -[SBControlCenterController _homeAffordanceAnimationDelay]
  -[SBControlCenterController allowGestureForContentBelow]
  -[SBControlCenterController bannerSuppressionAssertion]
  -[SBControlCenterController _willDismiss]
  -[SBControlCenterController setStatusBarPullGestureRecognizer:]
  -[SBControlCenterController setResignActiveAssertion:]
  -[SBControlCenterController grabberTongue]
  -[SBControlCenterController indirectStatusBarPullGestureRecognizer]
  -[SBControlCenterController setDisplayLayoutElement:]
  -[SBControlCenterController barSwipeAffordanceView:systemGestureTypeForType:]
  -[SBControlCenterController addObserver:]
  -[SBControlCenterController idleTimerDisableAssertion]
  -[SBControlCenterController presentationCoordinateSpace]
  -[SBControlCenterController _screenDidDim]
  -[SBControlCenterController deferOrientationUpdatesAssertion]
  -[SBControlCenterController _didDismiss]
  -[SBControlCenterController _didPresent]
  -[SBControlCenterController _requirePresentGestureRecognizerToFailForGestureRecognizer:]
  -[SBControlCenterController gestureRecognizer:shouldReceiveTouch:]
  -[SBControlCenterController setIndirectStatusBarPullGestureRecognizer:]
  -[SBControlCenterController grabberTongueHonorsAmbiguousActivationMargin:]
  -[SBControlCenterController setStatusBarAssertion:]
  -[SBControlCenterController _isStatusBarHiddenIgnoringControlCenter]
  -[SBControlCenterController controlCenterViewController:didChangePresentationState:]
  -[SBControlCenterController indirectStatusBarPullGestureCalledBegin]
  -[SBControlCenterController presentAnimated:completion:]
  -[SBControlCenterController setSystemAgent:]
  -[SBControlCenterController controlCenterViewController:didUpdateHomeGestureDismissalAllowed:]
  -[SBControlCenterController setAsynchronousRenderingAssertion:]
  -[SBControlCenterController allowShowTransitionSystemGesture]
  -[SBControlCenterController statusBarAssertion]


SBAnimationStepper : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CAAnimationDelegate, SBUIAnimationStepping>
 @property  double finishSpeed
 @property  NSArray *views
 @property  double duration
 @property  BOOL adjustsDurationForLongestAnimation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL stepped
 @property  double stepPercentage

  // instance methods
  -[SBAnimationStepper views]
  -[SBAnimationStepper animationDidStop:finished:]
  -[SBAnimationStepper init]
  -[SBAnimationStepper dealloc]
  -[SBAnimationStepper .cxx_destruct]
  -[SBAnimationStepper succinctDescriptionBuilder]
  -[SBAnimationStepper succinctDescription]
  -[SBAnimationStepper _displayLinkFired:]
  -[SBAnimationStepper invalidate]
  -[SBAnimationStepper descriptionWithMultilinePrefix:]
  -[SBAnimationStepper descriptionBuilderWithMultilinePrefix:]
  -[SBAnimationStepper duration]
  -[SBAnimationStepper initWithAnimationSettings:]
  -[SBAnimationStepper isStepped]
  -[SBAnimationStepper startSteppingAnimationsInView:]
  -[SBAnimationStepper stepPercentage]
  -[SBAnimationStepper setStepPercentage:]
  -[SBAnimationStepper finishSteppingForwardToEnd]
  -[SBAnimationStepper finishSteppingBackwardToStart]
  -[SBAnimationStepper _nextCommitTime]
  -[SBAnimationStepper adjustsDurationForLongestAnimation]
  -[SBAnimationStepper _adjustDurationForLongestAnimation]
  -[SBAnimationStepper _makeSubviewTree:fromView:]
  -[SBAnimationStepper _checkForCompletion]
  -[SBAnimationStepper _displayLinkFiredForBackwardToStart:]
  -[SBAnimationStepper _setStepPercentage:]
  -[SBAnimationStepper _updateAnimationSteppingTarget:]
  -[SBAnimationStepper finishSteppingForwardToEndWithCompletion:]
  -[SBAnimationStepper finishSteppingBackwardToStartWithCompletion:]
  -[SBAnimationStepper setAdjustsDurationForLongestAnimation:]
  -[SBAnimationStepper finishSpeed]
  -[SBAnimationStepper setFinishSpeed:]


SBHomeGrabberRotationView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBHomeGrabberView *grabberView
 @property  long long orientation

  // instance methods
  -[SBHomeGrabberRotationView initWithFrame:]
  -[SBHomeGrabberRotationView .cxx_destruct]
  -[SBHomeGrabberRotationView initWithFrame:settings:]
  -[SBHomeGrabberRotationView setOrientation:]
  -[SBHomeGrabberRotationView orientation]
  -[SBHomeGrabberRotationView grabberView]
  -[SBHomeGrabberRotationView layoutSubviews]
  -[SBHomeGrabberRotationView setOrientation:animated:rotationSettings:]
  -[SBHomeGrabberRotationView _addWrapperViewWithOrientation:]


SBWorkspaceApplicationSceneTransitionContext : SBWorkspaceTransitionContext <SBDisplayLayoutContext>
 @property  SBWorkspaceEntity *requestedActivatingWorkspaceEntity
 @property  BOOL _alreadyPopulatedRequestedWorkspaceEntities
 @property  SBMainWorkspaceTransitionRequest *request
 @property  BOOL background
 @property  BOOL fencesAnimations
 @property  BOOL alwaysRunsWatchdog
 @property  BOOL waitsForSceneUpdates
 @property  BOOL suspendsInlineAppExposeCancellation
 @property  BOOL prefersCrossfadeTransition
 @property  BOOL sceneless
 @property  @? resultBlock
 @property  NSSet *applicationSceneEntities
 @property  NSSet *previousApplicationSceneEntities
 @property  double watchdogScaleFactor
 @property  SBLayoutState *previousLayoutState
 @property  <SBWorkspaceApplicationSceneTransitionContextDelegate> *delegate
 @property  long long interfaceOrientation
 @property  BOOL prefersTouchCancellationDisabled
 @property  long long preferredInterfaceOrientation
 @property  SBWorkspaceEntity *activatingEntity
 @property  SBWorkspaceEntity *deactivatingEntity
 @property  long long requestedSpaceConfiguration
 @property  long long requestedFloatingConfiguration
 @property  long long requestedUnlockedEnvironmentMode
 @property  long long requestedFloatingSwitcherVisible
 @property  NSString *requestedAppExposeBundleID
 @property  NSArray *entitiesWithRemovalContexts
 @property  SBWorkspaceEntity *resolvedActivatingWorkspaceEntity
 @property  FBSDisplayIdentity *displayIdentity
 @property  SBLayoutState *layoutState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWorkspaceApplicationSceneTransitionContext previousLayoutState]
  -[SBWorkspaceApplicationSceneTransitionContext resolvedActivatingWorkspaceEntity]
  -[SBWorkspaceApplicationSceneTransitionContext setEntity:forLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext previousEntityForLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext layoutState]
  -[SBWorkspaceApplicationSceneTransitionContext previousAppClipPlaceholderEntities]
  -[SBWorkspaceApplicationSceneTransitionContext init]
  -[SBWorkspaceApplicationSceneTransitionContext _setRequestedWorkspaceEntity:forLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext prefersCrossfadeTransition]
  -[SBWorkspaceApplicationSceneTransitionContext activatingEntity]
  -[SBWorkspaceApplicationSceneTransitionContext suspendsInlineAppExposeCancellation]
  -[SBWorkspaceApplicationSceneTransitionContext interfaceOrientationOrPreferredOrientation]
  -[SBWorkspaceApplicationSceneTransitionContext setRemovalContext:forEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext _setRequestedActivatingWorkspaceEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext removalContextForEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext isBackground]
  -[SBWorkspaceApplicationSceneTransitionContext dealloc]
  -[SBWorkspaceApplicationSceneTransitionContext .cxx_destruct]
  -[SBWorkspaceApplicationSceneTransitionContext alwaysRunsWatchdog]
  -[SBWorkspaceApplicationSceneTransitionContext applicationSceneEntities]
  -[SBWorkspaceApplicationSceneTransitionContext resultBlock]
  -[SBWorkspaceApplicationSceneTransitionContext setFencesAnimations:]
  -[SBWorkspaceApplicationSceneTransitionContext _setAlreadyPopulatedRequestedWorkspaceEntities:]
  -[SBWorkspaceApplicationSceneTransitionContext _displayConfiguration]
  -[SBWorkspaceApplicationSceneTransitionContext setInterfaceOrientation:]
  -[SBWorkspaceApplicationSceneTransitionContext setActivatingEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext waitsForSceneUpdates]
  -[SBWorkspaceApplicationSceneTransitionContext succinctDescriptionBuilder]
  -[SBWorkspaceApplicationSceneTransitionContext requestedUnlockedEnvironmentMode]
  -[SBWorkspaceApplicationSceneTransitionContext setEntitiesWithRemovalContexts:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedFloatingConfiguration:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedFloatingConfiguration]
  -[SBWorkspaceApplicationSceneTransitionContext interfaceOrientation]
  -[SBWorkspaceApplicationSceneTransitionContext setPreviousEntity:forLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedFloatingSwitcherVisible]
  -[SBWorkspaceApplicationSceneTransitionContext previousApplicationSceneEntityForLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext setAlwaysRunsWatchdog:]
  -[SBWorkspaceApplicationSceneTransitionContext appClipPlaceholderEntityForBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext displayIdentity]
  -[SBWorkspaceApplicationSceneTransitionContext prefersTouchCancellationDisabled]
  -[SBWorkspaceApplicationSceneTransitionContext setResultBlock:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedWorkspaceEntityForLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext entityForLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext frameForApplicationSceneEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext _lockedInterfaceOrientation]
  -[SBWorkspaceApplicationSceneTransitionContext _alreadyPopulatedRequestedWorkspaceEntities]
  -[SBWorkspaceApplicationSceneTransitionContext setSuspendsInlineAppExposeCancellation:]
  -[SBWorkspaceApplicationSceneTransitionContext watchdogScaleFactor]
  -[SBWorkspaceApplicationSceneTransitionContext setBackground:]
  -[SBWorkspaceApplicationSceneTransitionContext setPrefersTouchCancellationDisabled:]
  -[SBWorkspaceApplicationSceneTransitionContext setDeactivatingEntity:]
  -[SBWorkspaceApplicationSceneTransitionContext applicationSceneEntityForLayoutRole:]
  -[SBWorkspaceApplicationSceneTransitionContext setPreferredInterfaceOrientation:]
  -[SBWorkspaceApplicationSceneTransitionContext fencesAnimations]
  -[SBWorkspaceApplicationSceneTransitionContext setWaitsForSceneUpdates:]
  -[SBWorkspaceApplicationSceneTransitionContext previousApplicationSceneEntityForBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext requestedActivatingWorkspaceEntity]
  -[SBWorkspaceApplicationSceneTransitionContext requestedAppExposeBundleID]
  -[SBWorkspaceApplicationSceneTransitionContext previousApplicationSceneEntities]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedAppExposeBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext isSceneless]
  -[SBWorkspaceApplicationSceneTransitionContext setPrefersCrossfadeTransition:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedUnlockedEnvironmentMode:]
  -[SBWorkspaceApplicationSceneTransitionContext deactivatingEntity]
  -[SBWorkspaceApplicationSceneTransitionContext finalize]
  -[SBWorkspaceApplicationSceneTransitionContext requestedSpaceConfiguration]
  -[SBWorkspaceApplicationSceneTransitionContext needsToSendActivationResult]
  -[SBWorkspaceApplicationSceneTransitionContext sendActivationResultError:]
  -[SBWorkspaceApplicationSceneTransitionContext setDelegate:]
  -[SBWorkspaceApplicationSceneTransitionContext previousAppClipPlaceholderEntityForBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedFloatingSwitcherVisible:]
  -[SBWorkspaceApplicationSceneTransitionContext entitiesWithRemovalContexts]
  -[SBWorkspaceApplicationSceneTransitionContext applicationSceneEntityForBundleID:]
  -[SBWorkspaceApplicationSceneTransitionContext preferredInterfaceOrientation]
  -[SBWorkspaceApplicationSceneTransitionContext delegate]
  -[SBWorkspaceApplicationSceneTransitionContext setSceneless:]
  -[SBWorkspaceApplicationSceneTransitionContext appClipPlaceholderEntities]
  -[SBWorkspaceApplicationSceneTransitionContext compactDescriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceApplicationSceneTransitionContext setRequestedSpaceConfiguration:]


SBExternalDisplayApplicationSceneEntity : SBApplicationSceneEntity
  // instance methods
  -[SBExternalDisplayApplicationSceneEntity viewControllerClass]
  -[SBExternalDisplayApplicationSceneEntity initWithApplicationSceneHandle:]


SBLockScreenOrientationManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBAssistantObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenOrientationManager init]
  -[SBLockScreenOrientationManager assistantDidAppear:]
  -[SBLockScreenOrientationManager .cxx_destruct]
  -[SBLockScreenOrientationManager _deviceOrientationChanged:]
  -[SBLockScreenOrientationManager _lockStateChanged:]
  -[SBLockScreenOrientationManager updateInterfaceOrientationWithRequestedOrientation:animated:]
  -[SBLockScreenOrientationManager _updateDeviceOrientationIfNeededForPhoneUnlockToOrientation:]
  -[SBLockScreenOrientationManager _updateCacheForDeviceOrientation:]


SBPearlInterlockAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBPearlInterlockAlertItem _title]
  -[SBPearlInterlockAlertItem _message]
  -[SBPearlInterlockAlertItem reappearsAfterLock]
  -[SBPearlInterlockAlertItem shouldShowInLockScreen]
  -[SBPearlInterlockAlertItem configure:requirePasscodeForActions:]


SBAppSwitcherDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBAppSwitcherDomain domainName]
  +[SBAppSwitcherDomain rootSettings]
  +[SBAppSwitcherDomain rootSettingsClass]
  +[SBAppSwitcherDomain domainGroupName]


SBInteractiveScreenshotScreenEdgePanGestureRecognizer : SBScreenEdgePanGestureRecognizer
  // class methods
  +[SBInteractiveScreenshotScreenEdgePanGestureRecognizer _shouldSupportStylusTouches]
  +[SBInteractiveScreenshotScreenEdgePanGestureRecognizer interactiveScreenshotScreenEdgePanGestureRecognizerWithTarget:action:]

  // instance methods
  -[SBInteractiveScreenshotScreenEdgePanGestureRecognizer setState:]
  -[SBInteractiveScreenshotScreenEdgePanGestureRecognizer .cxx_destruct]
  -[SBInteractiveScreenshotScreenEdgePanGestureRecognizer _touchInterfaceOrientation]
  -[SBInteractiveScreenshotScreenEdgePanGestureRecognizer _isOrientedLocation:inCorner:forOrientedBounds:withEdgeOffsets:]
  -[SBInteractiveScreenshotScreenEdgePanGestureRecognizer initWithTarget:action:type:options:]
  -[SBInteractiveScreenshotScreenEdgePanGestureRecognizer shouldReceiveTouch:]
  -[SBInteractiveScreenshotScreenEdgePanGestureRecognizer reset]


SBDashBoardEmergencyDialerViewController : SBHomeGestureDismissableCoverSheetViewController <SBLockScreenEmergencyDialerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardEmergencyDialerViewController presentationPriority]
  -[SBDashBoardEmergencyDialerViewController viewDidLoad]
  -[SBDashBoardEmergencyDialerViewController aggregateBehavior:]
  -[SBDashBoardEmergencyDialerViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBDashBoardEmergencyDialerViewController aggregateAppearance:]
  -[SBDashBoardEmergencyDialerViewController presentationType]
  -[SBDashBoardEmergencyDialerViewController dealloc]
  -[SBDashBoardEmergencyDialerViewController .cxx_destruct]
  -[SBDashBoardEmergencyDialerViewController handleEvent:]
  -[SBDashBoardEmergencyDialerViewController viewWillAppear:]
  -[SBDashBoardEmergencyDialerViewController viewDidDisappear:]
  -[SBDashBoardEmergencyDialerViewController _deactivateEmergencyDialerController]
  -[SBDashBoardEmergencyDialerViewController _activateEmergencyDialerController]
  -[SBDashBoardEmergencyDialerViewController _updateEmergencyCallMode:]
  -[SBDashBoardEmergencyDialerViewController emergencyDialer:willDeactivateWithError:]


SBSiriHardwareButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonInteraction>
 @property  long long siriButtonIdentifier
 @property  SiriLongPressButtonSource *siriActivationSource
 @property  double activationInterval
 @property  <SiriAssertion> *siriPreheatAssertion
 @property  <SiriAssertion> *siriButtonDownAssertion
 @property  double initialPressDownTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSiriHardwareButtonInteraction hardwareButtonInteractionForLockButton]
  +[SBSiriHardwareButtonInteraction hardwareButtonInteractionForHomeButton]
  +[SBSiriHardwareButtonInteraction dismissSiriTransientOverlayOnSinglePressUp:]

  // instance methods
  -[SBSiriHardwareButtonInteraction siriPreheatAssertion]
  -[SBSiriHardwareButtonInteraction setSiriButtonIdentifier:]
  -[SBSiriHardwareButtonInteraction siriButtonIdentifier]
  -[SBSiriHardwareButtonInteraction observeLongPressCanceled]
  -[SBSiriHardwareButtonInteraction observeFinalPressUp]
  -[SBSiriHardwareButtonInteraction setSiriActivationSource:]
  -[SBSiriHardwareButtonInteraction initWithSiriButton:]
  -[SBSiriHardwareButtonInteraction .cxx_destruct]
  -[SBSiriHardwareButtonInteraction setActivationInterval:]
  -[SBSiriHardwareButtonInteraction initialPressDownTime]
  -[SBSiriHardwareButtonInteraction setSiriButtonDownAssertion:]
  -[SBSiriHardwareButtonInteraction _siriHomeButtonPrefsDidChange:]
  -[SBSiriHardwareButtonInteraction siriActivationSource]
  -[SBSiriHardwareButtonInteraction _preheatSiriForPresentationAfterInterval:]
  -[SBSiriHardwareButtonInteraction setInitialPressDownTime:]
  -[SBSiriHardwareButtonInteraction _cancelPreheating]
  -[SBSiriHardwareButtonInteraction activationInterval]
  -[SBSiriHardwareButtonInteraction consumeInitialPressDown]
  -[SBSiriHardwareButtonInteraction siriButtonDownAssertion]
  -[SBSiriHardwareButtonInteraction consumeSinglePressUp]
  -[SBSiriHardwareButtonInteraction hardwareButtonGestureParameters]
  -[SBSiriHardwareButtonInteraction _cancelAllSiriActions]
  -[SBSiriHardwareButtonInteraction consumeLongPress]
  -[SBSiriHardwareButtonInteraction setSiriPreheatAssertion:]


SBSuspendedWorkspaceTransaction : SBMainWorkspaceTransaction <FBApplicationProcessLaunchTransactionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSuspendedWorkspaceTransaction _didComplete]
  -[SBSuspendedWorkspaceTransaction _sendActivationResultWithError:]
  -[SBSuspendedWorkspaceTransaction _childTransactionDidComplete:]
  -[SBSuspendedWorkspaceTransaction transaction:willLaunchProcess:]
  -[SBSuspendedWorkspaceTransaction _begin]
  -[SBSuspendedWorkspaceTransaction .cxx_destruct]


SBDosidoScaleAnimationSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout

  // instance methods
  -[SBDosidoScaleAnimationSwitcherEventResponse appLayout]
  -[SBDosidoScaleAnimationSwitcherEventResponse .cxx_destruct]
  -[SBDosidoScaleAnimationSwitcherEventResponse type]
  -[SBDosidoScaleAnimationSwitcherEventResponse initWithAppLayout:]


SBInCallPresentationManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBInCallPresentationSessionDelegate, SBInCallPresentationRequestServerDelegate, SBApplicationHosting>
 @property  SBInCallPresentationSession *_lastPresentationSession
 @property  <SBInCallPresentationManagerDelegate> *delegate
 @property  SBMainDisplaySceneManager *sceneManager
 @property  BOOL supportsBecomingVisibleWhenWakingDisplay
 @property  BOOL supportsHandlingDeviceLock
 @property  BOOL disallowsLockHardwareButtonDoublePress
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBInCallPresentationManager isSpecializedAPISupported]

  // instance methods
  -[SBInCallPresentationManager sceneManager]
  -[SBInCallPresentationManager isHostingAnApp]
  -[SBInCallPresentationManager hostedAppSceneHandle]
  -[SBInCallPresentationManager canHostAnApp]
  -[SBInCallPresentationManager conformsToSBApplicationHosting]
  -[SBInCallPresentationManager _dismissAllPresentations]
  -[SBInCallPresentationManager hostedAppWillRotateToInterfaceOrientation:]
  -[SBInCallPresentationManager hostedAppSceneHandles]
  -[SBInCallPresentationManager initWithSceneManager:applicationController:bannerManager:]
  -[SBInCallPresentationManager reactivateInCallForReason:]
  -[SBInCallPresentationManager handlePresentationForActivityContinuationIdentifier:]
  -[SBInCallPresentationManager .cxx_destruct]
  -[SBInCallPresentationManager _hostedPresentationSessions]
  -[SBInCallPresentationManager inCallClientPresentationSessionInterfaceOrientationForBannerPresentation:]
  -[SBInCallPresentationManager inCallClientPresentationSession:callConnectedStatusChangedForPresentableViewController:]
  -[SBInCallPresentationManager inCallPresentationRequestServer:clientWithIdentifier:requestsPresentationWithConfiguration:completion:]
  -[SBInCallPresentationManager supportsBecomingVisibleWhenWakingDisplay]
  -[SBInCallPresentationManager inCallClientPresentationSessionInterfaceOrientationForTransientOverlayPresentation:]
  -[SBInCallPresentationManager _dismissClientWithIdentifier:animated:shouldFinalizeSceneDestruction:shouldInvalidate:analyticsSource:completion:]
  -[SBInCallPresentationManager handleDeviceLockFromSource:]
  -[SBInCallPresentationManager inCallClientPresentationSession:handleDestroySceneActionWithReason:analyticsSource:completion:]
  -[SBInCallPresentationManager inCallPresentationRequestServer:clientWithIdentifierDidInvalidate:]
  -[SBInCallPresentationManager supportsHandlingDeviceLock]
  -[SBInCallPresentationManager inCallClientPresentationSessionSceneWasDestroyed:]
  -[SBInCallPresentationManager setDelegate:]
  -[SBInCallPresentationManager _newClientPresentationSessionWithSceneHandle:]
  -[SBInCallPresentationManager _sessionForSceneWithIdentifier:]
  -[SBInCallPresentationManager delegate]
  -[SBInCallPresentationManager _lastPresentationSession]
  -[SBInCallPresentationManager disallowsLockHardwareButtonDoublePress]


SBInCallBannerAuthority : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BNConsidering>
 @property  <BNConsideringDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInCallBannerAuthority .cxx_destruct]
  -[SBInCallBannerAuthority shouldOverlapPresentable:withPresentable:]
  -[SBInCallBannerAuthority setDelegate:]
  -[SBInCallBannerAuthority delegate]
  -[SBInCallBannerAuthority shouldPresentPresentable:withPresentedPresentables:responsiblePresentable:]
  -[SBInCallBannerAuthority mayChangeDecisionForResponsiblePresentable:]


SBDeactivationSettings : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSSettingDescriptionProvider, SBDeactivationSettings, NSCopying, BSDescriptionProviding>
 @property  BOOL empty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeactivationSettings copyWithZone:]
  -[SBDeactivationSettings init]
  -[SBDeactivationSettings objectForDeactivationSetting:]
  -[SBDeactivationSettings clearDeactivationSettings]
  -[SBDeactivationSettings setFlag:forDeactivationSetting:]
  -[SBDeactivationSettings setObject:forDeactivationSetting:]
  -[SBDeactivationSettings dealloc]
  -[SBDeactivationSettings copyDeactivationSettings]
  -[SBDeactivationSettings .cxx_destruct]
  -[SBDeactivationSettings flagForDeactivationSetting:]
  -[SBDeactivationSettings succinctDescriptionBuilder]
  -[SBDeactivationSettings boolForDeactivationSetting:]
  -[SBDeactivationSettings applyDeactivationSettings:]
  -[SBDeactivationSettings valueDescriptionForFlag:object:ofSetting:]
  -[SBDeactivationSettings succinctDescription]
  -[SBDeactivationSettings isEmpty]
  -[SBDeactivationSettings descriptionWithMultilinePrefix:]
  -[SBDeactivationSettings keyDescriptionForSetting:]
  -[SBDeactivationSettings descriptionBuilderWithMultilinePrefix:]


SBSaturatedIconView : UIImageView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBSaturatedIconView initWithImage:]
  -[SBSaturatedIconView sizeThatFits:]


SBReachabilityWindow : SBSecureWindow
  // instance methods
  -[SBReachabilityWindow initWithWallpaperVariant:]
  -[SBReachabilityWindow view]
  -[SBReachabilityWindow pointInside:withEvent:]


SBReachabilityBackgroundViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBReachabilityBackgroundViewController initWithWallpaperVariant:]
  -[SBReachabilityBackgroundViewController shouldAutorotate]
  -[SBReachabilityBackgroundViewController view]
  -[SBReachabilityBackgroundViewController _canShowWhileLocked]


SBReachabilityBackgroundView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBHomeGrabberDelegate>
 @property  long long wallpaperVariant
 @property  double containerViewYOffset
 @property  double homeGrabberAdditionalOffset
 @property  double homeGrabberAlpha
 @property  double chevronAlpha
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBReachabilityBackgroundView shouldAllowThinStyleForHomeGrabberView:]
  -[SBReachabilityBackgroundView shouldAllowAutoHideForHomeGrabberView:]
  -[SBReachabilityBackgroundView additionalEdgeSpacingForHomeGrabberView:]
  -[SBReachabilityBackgroundView chevronAlpha]
  -[SBReachabilityBackgroundView setChevronAlpha:]
  -[SBReachabilityBackgroundView .cxx_destruct]
  -[SBReachabilityBackgroundView layoutSubviews]
  -[SBReachabilityBackgroundView _displayCornerRadius]
  -[SBReachabilityBackgroundView setWallpaperVariant:]
  -[SBReachabilityBackgroundView setContainerViewYOffset:]
  -[SBReachabilityBackgroundView setHomeGrabberAdditionalOffset:]
  -[SBReachabilityBackgroundView setHomeGrabberAlpha:]
  -[SBReachabilityBackgroundView initWithFrame:wallpaperVariant:]
  -[SBReachabilityBackgroundView wallpaperVariant]
  -[SBReachabilityBackgroundView _setupHomeGrabberView]
  -[SBReachabilityBackgroundView _updateWallpaperEffectViewAnimated:]
  -[SBReachabilityBackgroundView _setupChevron]
  -[SBReachabilityBackgroundView _setupHitTestBlockerView]
  -[SBReachabilityBackgroundView _newWallpaperEffectViewForVariant:]
  -[SBReachabilityBackgroundView _setupCornerContentsImageForWallpaperEffectView:]
  -[SBReachabilityBackgroundView _updateChevronPathForUpFraction:]
  -[SBReachabilityBackgroundView homeGrabberAlpha]
  -[SBReachabilityBackgroundView containerViewYOffset]
  -[SBReachabilityBackgroundView homeGrabberAdditionalOffset]


SBLayoutStateTransitionContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBWorkspaceTransaction *workspaceTransaction
 @property  SBWorkspaceApplicationSceneTransitionContext *applicationTransitionContext
 @property  SBLayoutState *fromLayoutState
 @property  SBLayoutState *toLayoutState
 @property  BOOL complete
 @property  NSError *error
 @property  BOOL interrupted
 @property  BOOL animationsDisabled

  // instance methods
  -[SBLayoutStateTransitionContext isInterrupted]
  -[SBLayoutStateTransitionContext isComplete]
  -[SBLayoutStateTransitionContext init]
  -[SBLayoutStateTransitionContext fromLayoutState]
  -[SBLayoutStateTransitionContext transitionCompletedWithError:]
  -[SBLayoutStateTransitionContext .cxx_destruct]
  -[SBLayoutStateTransitionContext toLayoutState]
  -[SBLayoutStateTransitionContext error]
  -[SBLayoutStateTransitionContext initWithWorkspaceTransaction:]
  -[SBLayoutStateTransitionContext workspaceTransaction]
  -[SBLayoutStateTransitionContext animationsDisabled]
  -[SBLayoutStateTransitionContext applicationTransitionContext]


SBEmitStudyLogSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  NSString *name
 @property  NSDictionary *payload

  // instance methods
  -[SBEmitStudyLogSwitcherEventResponse payload]
  -[SBEmitStudyLogSwitcherEventResponse .cxx_destruct]
  -[SBEmitStudyLogSwitcherEventResponse name]
  -[SBEmitStudyLogSwitcherEventResponse type]
  -[SBEmitStudyLogSwitcherEventResponse initWithStudyLogWithName:payload:]


SBActivateApplicationTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBActivateApplicationTestRecipe load]

  // instance methods
  -[SBActivateApplicationTestRecipe title]
  -[SBActivateApplicationTestRecipe handleVolumeIncrease]
  -[SBActivateApplicationTestRecipe handleVolumeDecrease]


NCRevealWalletPassActionRunner : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NCNotificationActionRunner, SBLockScreenPluginLifecycleObserver>
 @property  BOOL shouldForwardAction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NCRevealWalletPassActionRunner .cxx_destruct]
  -[NCRevealWalletPassActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]
  -[NCRevealWalletPassActionRunner shouldForwardAction]
  -[NCRevealWalletPassActionRunner setShouldForwardAction:]
  -[NCRevealWalletPassActionRunner willPresentLockScreenPlugin:]
  -[NCRevealWalletPassActionRunner didPresentLockScreenPlugin:]
  -[NCRevealWalletPassActionRunner willDismissLockScreenPlugin:]
  -[NCRevealWalletPassActionRunner didDismissLockScreenPlugin:]


SBLayoutState : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  NSSet *elements
 @property  long long interfaceOrientation
 @property  long long elementInterfaceOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLayoutState _defaultInterfaceOrientation]

  // instance methods
  -[SBLayoutState appLayout]
  -[SBLayoutState displayItemFromLayoutElement:]
  -[SBLayoutState init]
  -[SBLayoutState elements]
  -[SBLayoutState elementWithRole:]
  -[SBLayoutState .cxx_destruct]
  -[SBLayoutState succinctDescriptionBuilder]
  -[SBLayoutState layoutContainsRole:]
  -[SBLayoutState interfaceOrientation]
  -[SBLayoutState elementInterfaceOrientation]
  -[SBLayoutState succinctDescription]
  -[SBLayoutState elementWithIdentifier:]
  -[SBLayoutState isEqual:]
  -[SBLayoutState isEqual:withRole:]
  -[SBLayoutState floatingAppLayout]
  -[SBLayoutState descriptionWithMultilinePrefix:]
  -[SBLayoutState _initWithLayoutElements:interfaceOrientation:elementInterfaceOrientation:]
  -[SBLayoutState descriptionBuilderWithMultilinePrefix:]


SBInteractiveScreenshotSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL enabled
 @property  double cornerHorizontalEdgeLength
 @property  double cornerVerticalEdgeLength
 @property  BOOL shouldAsynchronouslyRender
 @property  BOOL shouldPreheat
 @property  double applicationTouchDelayHysteresis
 @property  double cornerRadiusVisibleProgressThreshold
 @property  double cropCornersVisibleProgressThreshold
 @property  double cropLinesVisibleProgressThreshold
 @property  double baseCornerTranslationDegrees
 @property  double projectionDecelerationRate
 @property  double rubberbandingRange
 @property  double normalizedDistanceForCommitThreshold
 @property  double horizontalTranslationFactor
 @property  double verticalTranslationFactor
 @property  BOOL shouldInjectVelocity
 @property  double maximumInjectedVelocity
 @property  double disabledGestureCancellationDistance
 @property  double disabledGestureVelocityScale
 @property  SBFFluidBehaviorSettings *contentAnimationSettings
 @property  SBFFluidBehaviorSettings *disabledGestureContentAnimationSettings
 @property  SBFFluidBehaviorSettings *cropsAnimationSettings
 @property  SBFFluidBehaviorSettings *cropLinesAlphaAnimationSettings

  // class methods
  +[SBInteractiveScreenshotSettings settingsControllerModule]

  // instance methods
  -[SBInteractiveScreenshotSettings setDefaultValues]
  -[SBInteractiveScreenshotSettings .cxx_destruct]
  -[SBInteractiveScreenshotSettings isEnabled]
  -[SBInteractiveScreenshotSettings setEnabled:]
  -[SBInteractiveScreenshotSettings cornerHorizontalEdgeLength]
  -[SBInteractiveScreenshotSettings cornerVerticalEdgeLength]
  -[SBInteractiveScreenshotSettings setShouldPreheat:]
  -[SBInteractiveScreenshotSettings setShouldAsynchronouslyRender:]
  -[SBInteractiveScreenshotSettings setCornerRadiusVisibleProgressThreshold:]
  -[SBInteractiveScreenshotSettings setCornerHorizontalEdgeLength:]
  -[SBInteractiveScreenshotSettings setCornerVerticalEdgeLength:]
  -[SBInteractiveScreenshotSettings setApplicationTouchDelayHysteresis:]
  -[SBInteractiveScreenshotSettings setRubberbandingRange:]
  -[SBInteractiveScreenshotSettings setNormalizedDistanceForCommitThreshold:]
  -[SBInteractiveScreenshotSettings setProjectionDecelerationRate:]
  -[SBInteractiveScreenshotSettings setHorizontalTranslationFactor:]
  -[SBInteractiveScreenshotSettings setVerticalTranslationFactor:]
  -[SBInteractiveScreenshotSettings setBaseCornerTranslationDegrees:]
  -[SBInteractiveScreenshotSettings setCropCornersVisibleProgressThreshold:]
  -[SBInteractiveScreenshotSettings setCropLinesVisibleProgressThreshold:]
  -[SBInteractiveScreenshotSettings setDisabledGestureCancellationDistance:]
  -[SBInteractiveScreenshotSettings setShouldInjectVelocity:]
  -[SBInteractiveScreenshotSettings setMaximumInjectedVelocity:]
  -[SBInteractiveScreenshotSettings setDisabledGestureVelocityScale:]
  -[SBInteractiveScreenshotSettings shouldAsynchronouslyRender]
  -[SBInteractiveScreenshotSettings shouldPreheat]
  -[SBInteractiveScreenshotSettings applicationTouchDelayHysteresis]
  -[SBInteractiveScreenshotSettings cornerRadiusVisibleProgressThreshold]
  -[SBInteractiveScreenshotSettings cropCornersVisibleProgressThreshold]
  -[SBInteractiveScreenshotSettings cropLinesVisibleProgressThreshold]
  -[SBInteractiveScreenshotSettings baseCornerTranslationDegrees]
  -[SBInteractiveScreenshotSettings projectionDecelerationRate]
  -[SBInteractiveScreenshotSettings rubberbandingRange]
  -[SBInteractiveScreenshotSettings normalizedDistanceForCommitThreshold]
  -[SBInteractiveScreenshotSettings horizontalTranslationFactor]
  -[SBInteractiveScreenshotSettings verticalTranslationFactor]
  -[SBInteractiveScreenshotSettings shouldInjectVelocity]
  -[SBInteractiveScreenshotSettings maximumInjectedVelocity]
  -[SBInteractiveScreenshotSettings disabledGestureCancellationDistance]
  -[SBInteractiveScreenshotSettings disabledGestureVelocityScale]
  -[SBInteractiveScreenshotSettings contentAnimationSettings]
  -[SBInteractiveScreenshotSettings setContentAnimationSettings:]
  -[SBInteractiveScreenshotSettings disabledGestureContentAnimationSettings]
  -[SBInteractiveScreenshotSettings setDisabledGestureContentAnimationSettings:]
  -[SBInteractiveScreenshotSettings cropsAnimationSettings]
  -[SBInteractiveScreenshotSettings setCropsAnimationSettings:]
  -[SBInteractiveScreenshotSettings cropLinesAlphaAnimationSettings]
  -[SBInteractiveScreenshotSettings setCropLinesAlphaAnimationSettings:]


SBApplicationSceneRemovalAnimationDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBApplicationSceneRemovalAnimationDomain domainName]
  +[SBApplicationSceneRemovalAnimationDomain rootSettings]
  +[SBApplicationSceneRemovalAnimationDomain rootSettingsClass]
  +[SBApplicationSceneRemovalAnimationDomain domainGroupName]


SBAdvanceDateOverrideTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAdvanceDateOverrideTestRecipe load]

  // instance methods
  -[SBAdvanceDateOverrideTestRecipe title]
  -[SBAdvanceDateOverrideTestRecipe handleVolumeIncrease]
  -[SBAdvanceDateOverrideTestRecipe handleVolumeDecrease]
  -[SBAdvanceDateOverrideTestRecipe advanceOverrideDateByAmount:]


SBStartupTransitionFactory : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBStartupTransitionFactory .cxx_destruct]
  -[SBStartupTransitionFactory initWithInitialRestartState:]
  -[SBStartupTransitionFactory transitionForContext:outDestination:]
  -[SBStartupTransitionFactory _transactionForDestination:context:]


SBAnalyticsStateMachineEventHandler : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long currentState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAnalyticsStateMachineEventHandler addEdge:]
  -[SBAnalyticsStateMachineEventHandler currentState]
  -[SBAnalyticsStateMachineEventHandler init]
  -[SBAnalyticsStateMachineEventHandler handleEvent:withContext:]
  -[SBAnalyticsStateMachineEventHandler .cxx_destruct]


_SBPendingMesaUnlockBehaviorUnlockRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBBiometricUnlockBehavior> *behavior
 @property  id request
 @property  SBAuthenticationFeedback *feedback

  // instance methods
  -[_SBPendingMesaUnlockBehaviorUnlockRequest feedback]
  -[_SBPendingMesaUnlockBehaviorUnlockRequest behavior]
  -[_SBPendingMesaUnlockBehaviorUnlockRequest .cxx_destruct]
  -[_SBPendingMesaUnlockBehaviorUnlockRequest request]
  -[_SBPendingMesaUnlockBehaviorUnlockRequest initWithBehavior:request:feedback:]


SBLockScreenBiometricAuthenticationCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, SBUIBiometricResourceObserver, SBBiometricUnlockBehaviorDelegate, SBWalletPrearmRecognizerDelegate, PKPassLibraryDelegate, SBUIPasscodeBiometricMatchingAssertionFactory>
 @property  SBWalletPrearmRecognizer *walletPrearmRecognizer
 @property  unsigned long state
 @property  PKPassLibrary *passLibrary
 @property  <SBBiometricUnlockBehavior> *autoUnlockBehavior
 @property  <SBLockScreenBiometricAuthenticationCoordinatorDelegate> *delegate
 @property  BOOL bioAuthenticatedWhileMenuButtonDown
 @property  BOOL authenticated
 @property  BOOL enabled
 @property  BOOL walletPreArmDisabled
 @property  BOOL isUnlockingDisabled
 @property  BOOL autoUnlockingDisabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenBiometricAuthenticationCoordinator isAuthenticated]
  -[SBLockScreenBiometricAuthenticationCoordinator _pendUnlockRequest:]
  -[SBLockScreenBiometricAuthenticationCoordinator _getPassLibrary]
  -[SBLockScreenBiometricAuthenticationCoordinator isWalletPreArmDisabled]
  -[SBLockScreenBiometricAuthenticationCoordinator walletPrearmRecognizerDidRecognize:]
  -[SBLockScreenBiometricAuthenticationCoordinator isUnlockingDisabled]
  -[SBLockScreenBiometricAuthenticationCoordinator passLibraryReceivedInterruption]
  -[SBLockScreenBiometricAuthenticationCoordinator _isWalletPreArmAllowed]
  -[SBLockScreenBiometricAuthenticationCoordinator walletPrearmRecognizer:didFailToRecognizeForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireDisableCoordinatorAssertionForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _walletPreArmDisabledDidChange:]
  -[SBLockScreenBiometricAuthenticationCoordinator .cxx_destruct]
  -[SBLockScreenBiometricAuthenticationCoordinator _removePasscodeMatchingAssertion:]
  -[SBLockScreenBiometricAuthenticationCoordinator _setupPreArmRecognizerIfPossibleForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator setBioAuthenticatedWhileMenuButtonDown:]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireMatchingAssertionWithMode:reason:]
  -[SBLockScreenBiometricAuthenticationCoordinator biometricResource:observeEvent:]
  -[SBLockScreenBiometricAuthenticationCoordinator _invalidateWalletPreArmRecognizer]
  -[SBLockScreenBiometricAuthenticationCoordinator _resetStateForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator succinctDescriptionBuilder]
  -[SBLockScreenBiometricAuthenticationCoordinator _handlePassKitDismissalIfNecessaryWithReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _isMatchingEffectivelyDisabled]
  -[SBLockScreenBiometricAuthenticationCoordinator _stateWantsMatching:outMatchMode:]
  -[SBLockScreenBiometricAuthenticationCoordinator _addPasscodeMatchingAssertion:]
  -[SBLockScreenBiometricAuthenticationCoordinator _state]
  -[SBLockScreenBiometricAuthenticationCoordinator _clearPendingUnlockRequest]
  -[SBLockScreenBiometricAuthenticationCoordinator _setState:forReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _toggleAutoUnlockBehaviorEnabled:]
  -[SBLockScreenBiometricAuthenticationCoordinator _walletPrearmRecognizer]
  -[SBLockScreenBiometricAuthenticationCoordinator initWithBiometricResource:walletPreArmController:]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireDisableUnlockAssertionForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator setAuthenticated:]
  -[SBLockScreenBiometricAuthenticationCoordinator isEnabled]
  -[SBLockScreenBiometricAuthenticationCoordinator bioAuthenticatedWhileMenuButtonDown]
  -[SBLockScreenBiometricAuthenticationCoordinator succinctDescription]
  -[SBLockScreenBiometricAuthenticationCoordinator biometricResource:matchingAllowedDidChange:]
  -[SBLockScreenBiometricAuthenticationCoordinator isAutoUnlockingDisabled]
  -[SBLockScreenBiometricAuthenticationCoordinator _stateChangedFrom:to:]
  -[SBLockScreenBiometricAuthenticationCoordinator biometricUnlockBehavior:requestsUnlock:withFeedback:]
  -[SBLockScreenBiometricAuthenticationCoordinator _setPassLibrary:]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireDisableAutoUnlockAssertionForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator _setAutoUnlockBehavior:]
  -[SBLockScreenBiometricAuthenticationCoordinator _noteMenuButtonDoublePress]
  -[SBLockScreenBiometricAuthenticationCoordinator acquireDisableWalletPreArmAssertionForReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator biometricUnlockBehavior:requestsFeedback:]
  -[SBLockScreenBiometricAuthenticationCoordinator setDelegate:]
  -[SBLockScreenBiometricAuthenticationCoordinator _noteMenuButtonSinglePress]
  -[SBLockScreenBiometricAuthenticationCoordinator _createFingerDetectAssertion]
  -[SBLockScreenBiometricAuthenticationCoordinator _updateMatchingForState:forReason:]
  -[SBLockScreenBiometricAuthenticationCoordinator contactlessInterfaceDidDismissFromSource:]
  -[SBLockScreenBiometricAuthenticationCoordinator delegate]
  -[SBLockScreenBiometricAuthenticationCoordinator descriptionWithMultilinePrefix:]
  -[SBLockScreenBiometricAuthenticationCoordinator _setAutoUnlockBehavior]
  -[SBLockScreenBiometricAuthenticationCoordinator _hasActivePasscodeViews]
  -[SBLockScreenBiometricAuthenticationCoordinator descriptionBuilderWithMultilinePrefix:]
  -[SBLockScreenBiometricAuthenticationCoordinator _clearFingerDetectAssertion]


SBLayoutElementViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBAppPlatterDragSourceViewProviding>
 @property  UIView *_contentContainerView
 @property  BOOL _shouldDisplayLayoutElementBecomeActive
 @property  FBSDisplayIdentity *displayIdentity
 @property  SBLayoutElement *layoutElement
 @property  SBLayoutState *layoutState
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceFrame
 @property  unsigned long supportedContentInterfaceOrientations
 @property  long long contentWrapperInterfaceOrientation
 @property  BOOL supportsReuse
 @property  BOOL dragging
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLayoutElementViewController containerViewForBlurContentView]
  -[SBLayoutElementViewController layoutState]
  -[SBLayoutElementViewController _updateDisplayLayoutElementVisibility]
  -[SBLayoutElementViewController contentWrapperInterfaceOrientation]
  -[SBLayoutElementViewController initialRimShadowFilters]
  -[SBLayoutElementViewController initialCornerRadiusConfiguration]
  -[SBLayoutElementViewController setDragging:]
  -[SBLayoutElementViewController setContentWrapperInterfaceOrientation:]
  -[SBLayoutElementViewController _shouldDisplayLayoutElementBecomeActive]
  -[SBLayoutElementViewController layoutElement]
  -[SBLayoutElementViewController isDragging]
  -[SBLayoutElementViewController willBeginTransitionToVisible:]
  -[SBLayoutElementViewController sourceView]
  -[SBLayoutElementViewController dealloc]
  -[SBLayoutElementViewController configureWithWorkspaceEntity:forLayoutElement:layoutState:referenceFrame:]
  -[SBLayoutElementViewController .cxx_destruct]
  -[SBLayoutElementViewController initWithDisplayIdentity:]
  -[SBLayoutElementViewController mainWorkspaceApplicationSceneLayoutElementViewController]
  -[SBLayoutElementViewController _contentContainerView]
  -[SBLayoutElementViewController initialDiffuseShadowFilters]
  -[SBLayoutElementViewController prepareForReuse]
  -[SBLayoutElementViewController initialRimShadowParameters]
  -[SBLayoutElementViewController supportedContentInterfaceOrientations]
  -[SBLayoutElementViewController didEndTransitionToVisible:]
  -[SBLayoutElementViewController animationControllerForTransitionRequest:]
  -[SBLayoutElementViewController initialDiffuseShadowParameters]
  -[SBLayoutElementViewController _updateDisplayLayoutElementWithBuilder:]
  -[SBLayoutElementViewController _newDisplayLayoutElementForEntity:]
  -[SBLayoutElementViewController supportsReuse]
  -[SBLayoutElementViewController displayIdentity]
  -[SBLayoutElementViewController initWithNibName:bundle:]
  -[SBLayoutElementViewController referenceFrame]
  -[SBLayoutElementViewController invalidate]
  -[SBLayoutElementViewController loadView]
  -[SBLayoutElementViewController initWithCoder:]


SBSpotlightSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  SBFFluidBehaviorSettings *opacityAnimationSettings
 @property  SBFFluidBehaviorSettings *snappyOpacityAnimationSettings
 @property  SBFFluidBehaviorSettings *scaleAnimationSettings
 @property  SBFFluidBehaviorSettings *snappyScaleAnimationSettings
 @property  double anchorPointY
 @property  double hiddenScale
 @property  double hiddenBlurRadius
 @property  double minTranslationToShowSpotlight
 @property  double maxTranslationForSpotlightScale
 @property  double spotlightScaleRubberbandingMin
 @property  double spotlightScaleRubberbandingMax
 @property  double spotlightScaleRubberbandingRange
 @property  double maxTranslationForHomeScreenScale
 @property  double homeScreenScaleRubberbandingMin
 @property  double homeScreenScaleRubberbandingMax
 @property  double homeScreenScaleRubberbandingRange
 @property  double maxTranslationForDimmingView
 @property  double dimmingViewRubberbandingMin
 @property  double dimmingViewRubberbandingMax
 @property  double dimmingViewRubberbandingRange
 @property  double spotlightTranslationRubberbandingRange

  // class methods
  +[SBSpotlightSettings settingsControllerModule]

  // instance methods
  -[SBSpotlightSettings setDefaultValues]
  -[SBSpotlightSettings setAnchorPointY:]
  -[SBSpotlightSettings anchorPointY]
  -[SBSpotlightSettings .cxx_destruct]
  -[SBSpotlightSettings maxTranslationForHomeScreenScale]
  -[SBSpotlightSettings homeScreenScaleRubberbandingMin]
  -[SBSpotlightSettings homeScreenScaleRubberbandingMax]
  -[SBSpotlightSettings homeScreenScaleRubberbandingRange]
  -[SBSpotlightSettings maxTranslationForDimmingView]
  -[SBSpotlightSettings dimmingViewRubberbandingMin]
  -[SBSpotlightSettings dimmingViewRubberbandingMax]
  -[SBSpotlightSettings dimmingViewRubberbandingRange]
  -[SBSpotlightSettings setHiddenScale:]
  -[SBSpotlightSettings setHiddenBlurRadius:]
  -[SBSpotlightSettings setMinTranslationToShowSpotlight:]
  -[SBSpotlightSettings setMaxTranslationForSpotlightScale:]
  -[SBSpotlightSettings setSpotlightScaleRubberbandingMin:]
  -[SBSpotlightSettings hiddenScale]
  -[SBSpotlightSettings setSpotlightScaleRubberbandingMax:]
  -[SBSpotlightSettings setSpotlightScaleRubberbandingRange:]
  -[SBSpotlightSettings setMaxTranslationForHomeScreenScale:]
  -[SBSpotlightSettings setHomeScreenScaleRubberbandingMin:]
  -[SBSpotlightSettings setHomeScreenScaleRubberbandingMax:]
  -[SBSpotlightSettings setHomeScreenScaleRubberbandingRange:]
  -[SBSpotlightSettings setMaxTranslationForDimmingView:]
  -[SBSpotlightSettings setDimmingViewRubberbandingMin:]
  -[SBSpotlightSettings setDimmingViewRubberbandingMax:]
  -[SBSpotlightSettings setDimmingViewRubberbandingRange:]
  -[SBSpotlightSettings setSpotlightTranslationRubberbandingRange:]
  -[SBSpotlightSettings opacityAnimationSettings]
  -[SBSpotlightSettings setOpacityAnimationSettings:]
  -[SBSpotlightSettings snappyOpacityAnimationSettings]
  -[SBSpotlightSettings setSnappyOpacityAnimationSettings:]
  -[SBSpotlightSettings scaleAnimationSettings]
  -[SBSpotlightSettings setScaleAnimationSettings:]
  -[SBSpotlightSettings snappyScaleAnimationSettings]
  -[SBSpotlightSettings setSnappyScaleAnimationSettings:]
  -[SBSpotlightSettings hiddenBlurRadius]
  -[SBSpotlightSettings minTranslationToShowSpotlight]
  -[SBSpotlightSettings maxTranslationForSpotlightScale]
  -[SBSpotlightSettings spotlightScaleRubberbandingMin]
  -[SBSpotlightSettings spotlightScaleRubberbandingMax]
  -[SBSpotlightSettings spotlightScaleRubberbandingRange]
  -[SBSpotlightSettings spotlightTranslationRubberbandingRange]


SBFluidSwitcherRootSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBFluidSwitcherRootSwitcherModifier handleMainTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier gestureModifierForGestureEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _setup]
  -[SBFluidSwitcherRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBFluidSwitcherRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBFluidSwitcherRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleEvent:]
  -[SBFluidSwitcherRootSwitcherModifier transitionModifierForMainTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBFluidSwitcherRootSwitcherModifier didMoveToParentModifier:]
  -[SBFluidSwitcherRootSwitcherModifier handleScrollEvent:]
  -[SBFluidSwitcherRootSwitcherModifier reduceMotionModifierForReduceMotionChangedEvent:]
  -[SBFluidSwitcherRootSwitcherModifier lowEndHardwareModifier]
  -[SBFluidSwitcherRootSwitcherModifier setDelegate:]
  -[SBFluidSwitcherRootSwitcherModifier handleRemovalEvent:]
  -[SBFluidSwitcherRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier multitaskingModifier]
  -[SBFluidSwitcherRootSwitcherModifier _reduceMotionModifier]
  -[SBFluidSwitcherRootSwitcherModifier _handleTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleInlineTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleGestureEvent:]
  -[SBFluidSwitcherRootSwitcherModifier floorModifier]
  -[SBFluidSwitcherRootSwitcherModifier handleReduceMotionChangedEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateMultitaskingModifierWithEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateFloorModifierWithTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateReduceMotionModifierWithReduceMotionChangedEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _updateLowEndHardwareModifier]
  -[SBFluidSwitcherRootSwitcherModifier transitionModifierForInlineTransitionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier handleSwipeToKillEvent:]
  -[SBFluidSwitcherRootSwitcherModifier _swipeToKillModifierKeyForAppLayout:]
  -[SBFluidSwitcherRootSwitcherModifier handleInsertionEvent:]
  -[SBFluidSwitcherRootSwitcherModifier verifyInternalIntegrityAfterHandlingEvent:]


SBClawGestureMetric : SBAWDMetric
  // instance methods
  -[SBClawGestureMetric dataClass]
  -[SBClawGestureMetric metricID]
  -[SBClawGestureMetric postWithDataBuilder:]
  -[SBClawGestureMetric configureWithData:]


SBClawGestureMetricData : SBAWDMetricData

SBSceneManagerReference : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDebugDescriptionProviding>
 @property  FBSDisplayIdentity *displayIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneManagerReference setDisplayIdentity:]
  -[SBSceneManagerReference isDefunct]
  -[SBSceneManagerReference _updateRetainWithBlock:]
  -[SBSceneManagerReference debugDescriptionWithMultilinePrefix:]
  -[SBSceneManagerReference setDisplayIsConnected:]
  -[SBSceneManagerReference .cxx_destruct]
  -[SBSceneManagerReference initWithDisplayIdentity:]
  -[SBSceneManagerReference succinctDescriptionBuilder]
  -[SBSceneManagerReference displayIdentity]
  -[SBSceneManagerReference manager]
  -[SBSceneManagerReference succinctDescription]
  -[SBSceneManagerReference isRetaining]
  -[SBSceneManagerReference retainForScene:]
  -[SBSceneManagerReference setManager:]
  -[SBSceneManagerReference setDelegate:]
  -[SBSceneManagerReference _autoreleaseManager:]
  -[SBSceneManagerReference invalidate]
  -[SBSceneManagerReference releaseForScene:]
  -[SBSceneManagerReference delegate]
  -[SBSceneManagerReference descriptionWithMultilinePrefix:]
  -[SBSceneManagerReference descriptionBuilderWithMultilinePrefix:]


SBSnapshotDataProviderContext : XBSnapshotDataProviderContext /System/Library/PrivateFrameworks/IntlPreferences.framework/IntlPreferences
 @property  NSString *sceneID

  // instance methods
  -[SBSnapshotDataProviderContext sceneID]
  -[SBSnapshotDataProviderContext .cxx_destruct]
  -[SBSnapshotDataProviderContext setSceneID:]


SBSceneSnapshotDataProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <XBSnapshotDataProvider>
 @property  XBSnapshotDataProviderContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSceneSnapshotDataProvider hasProtectedContent]
  -[SBSceneSnapshotDataProvider context]
  -[SBSceneSnapshotDataProvider initWithSceneSnapshot:scaleFactor:]
  -[SBSceneSnapshotDataProvider .cxx_destruct]
  -[SBSceneSnapshotDataProvider IOSurfaceForFormat:]
  -[SBSceneSnapshotDataProvider fetchImageForFormat:]
  -[SBSceneSnapshotDataProvider _invalidateSnapshotData]
  -[SBSceneSnapshotDataProvider fallbackSnapshotDataProvider]


SBUIImageDataProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <XBSnapshotDataProvider>
 @property  XBSnapshotDataProviderContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIImageDataProvider context]
  -[SBUIImageDataProvider .cxx_destruct]
  -[SBUIImageDataProvider initWithImage:context:scaleFactor:]
  -[SBUIImageDataProvider fetchImageForFormat:]


SBFallbackSnapshotDataProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <XBSnapshotDataProvider>
 @property  XBSnapshotDataProviderContext *context
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFallbackSnapshotDataProvider context]
  -[SBFallbackSnapshotDataProvider initWithSceneSnapshot:scaleFactor:]
  -[SBFallbackSnapshotDataProvider .cxx_destruct]
  -[SBFallbackSnapshotDataProvider IOSurfaceForFormat:]
  -[SBFallbackSnapshotDataProvider fetchImageForFormat:]
  -[SBFallbackSnapshotDataProvider _invalidateSnapshotData]


SBClickGestureRecognizer : SBPressGestureRecognizer
 @property  unsigned long numberOfClicksRequired
 @property  BOOL allPressesUpRequired
 @property  double maximumClickFormationDuration
 @property  double maximumClickDownDuration
 @property  double maximumBetweenClicksDelay

  // instance methods
  -[SBClickGestureRecognizer setMaximumBetweenClicksDelay:]
  -[SBClickGestureRecognizer didReceiveRequiredPressEndedCount]
  -[SBClickGestureRecognizer maximumClickDownDuration]
  -[SBClickGestureRecognizer addShortcutWithPressTypes:]
  -[SBClickGestureRecognizer setMaximumClickDownDuration:]
  -[SBClickGestureRecognizer .cxx_destruct]
  -[SBClickGestureRecognizer setMaximumClickFormationDuration:]
  -[SBClickGestureRecognizer setAllPressesUpRequired:]
  -[SBClickGestureRecognizer numberOfClicksRequired]
  -[SBClickGestureRecognizer gestureStateInfoForUnbalancedPressBeganCount:previousCount:]
  -[SBClickGestureRecognizer maximumClickFormationDuration]
  -[SBClickGestureRecognizer reset]
  -[SBClickGestureRecognizer initWithTarget:action:]
  -[SBClickGestureRecognizer allPressesUpRequired]
  -[SBClickGestureRecognizer maximumBetweenClicksDelay]
  -[SBClickGestureRecognizer setNumberOfClicksRequired:]
  -[SBClickGestureRecognizer _areRequiredPressTypesContainedInSet:]
  -[SBClickGestureRecognizer resetShortcutsTracking]
  -[SBClickGestureRecognizer _notePressReceivedWithType:phase:]
  -[SBClickGestureRecognizer didReceiveRequiredPressBeganCount]


SBDeveloperBuildExpirationAlert : SBHomeScreenNagAlert
  // instance methods
  -[SBDeveloperBuildExpirationAlert init]
  -[SBDeveloperBuildExpirationAlert dismissButtonText]


SBWebApplication : SBApplication
  // class methods
  +[SBWebApplication _webAppIdentifierFromWebClipIdentifier:]
  +[SBWebApplication _webClipIdentifierFromWebAppIdentifier:]

  // instance methods
  -[SBWebApplication iconClass]
  -[SBWebApplication iconIdentifier]
  -[SBWebApplication isWebApplication]


SBModelessSyncController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL isAppSyncing
 @property  BOOL isSyncing
 @property  BOOL isRestoringFromICloud
 @property  BOOL isAutoSyncing
 @property  BOOL isWirelessSyncing

  // class methods
  +[SBModelessSyncController sharedInstance]

  // instance methods
  -[SBModelessSyncController isSyncing]
  -[SBModelessSyncController connectionWasInterrupted:]
  -[SBModelessSyncController init]
  -[SBModelessSyncController endMonitoring]
  -[SBModelessSyncController beginMonitoring]
  -[SBModelessSyncController dealloc]
  -[SBModelessSyncController gotLowBatteryWarning]
  -[SBModelessSyncController .cxx_destruct]
  -[SBModelessSyncController _beginObservingICloudRestoreStatus]
  -[SBModelessSyncController _appSyncStateChanged]
  -[SBModelessSyncController isWirelessSyncing]
  -[SBModelessSyncController _setAppSyncState:]
  -[SBModelessSyncController _iCloudStatusChanged]
  -[SBModelessSyncController _updateIconsForStateChange]
  -[SBModelessSyncController setIsSyncing:]
  -[SBModelessSyncController isAppSyncing]
  -[SBModelessSyncController connection:updatedProgress:]
  -[SBModelessSyncController _endObservingICloudRestoreStatus]
  -[SBModelessSyncController isAutoSyncing]
  -[SBModelessSyncController isRestoringFromICloud]


SBModelessSyncStubs : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBModelessSyncStubs iconState]


SBInCallTransientOverlayPresentationWorkspaceTransaction : SBMainWorkspaceTransaction
 @property  NSString *analyticsSource
 @property  SBInCallPresentationSession *sourcePresentationSession

  // instance methods
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction _begin]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction .cxx_destruct]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction analyticsSource]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction initWithTransitionRequest:sourcePresentationSession:analyticsSource:]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction _performInCallPresentationWithCompletion:]
  -[SBInCallTransientOverlayPresentationWorkspaceTransaction sourcePresentationSession]


SBAppStatusBarSettingsAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, BSInvalidatable>
 @property  unsigned long level
 @property  SBAppStatusBarSettings *settings
 @property  NSString *reason
 @property  NSDate *timestamp
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppStatusBarSettingsAssertion initWithSettings:atLevel:reason:]
  -[SBAppStatusBarSettingsAssertion level]
  -[SBAppStatusBarSettingsAssertion init]
  -[SBAppStatusBarSettingsAssertion modifySettingsWithBlock:animationParameters:]
  -[SBAppStatusBarSettingsAssertion modifySettingsWithBlock:]
  -[SBAppStatusBarSettingsAssertion dealloc]
  -[SBAppStatusBarSettingsAssertion .cxx_destruct]
  -[SBAppStatusBarSettingsAssertion timestamp]
  -[SBAppStatusBarSettingsAssertion succinctDescriptionBuilder]
  -[SBAppStatusBarSettingsAssertion acquire]
  -[SBAppStatusBarSettingsAssertion succinctDescription]
  -[SBAppStatusBarSettingsAssertion settings]
  -[SBAppStatusBarSettingsAssertion initWithStatusBarHidden:atLevel:reason:]
  -[SBAppStatusBarSettingsAssertion acquireWithAnimationParameters:]
  -[SBAppStatusBarSettingsAssertion invalidateWithAnimationParameters:]
  -[SBAppStatusBarSettingsAssertion invalidate]
  -[SBAppStatusBarSettingsAssertion reason]
  -[SBAppStatusBarSettingsAssertion descriptionWithMultilinePrefix:]
  -[SBAppStatusBarSettingsAssertion descriptionBuilderWithMultilinePrefix:]


SBAppUnderFloatingSwitcherSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBAppUnderFloatingSwitcherSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBAppUnderFloatingSwitcherSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBAppUnderFloatingSwitcherSwitcherModifier .cxx_destruct]
  -[SBAppUnderFloatingSwitcherSwitcherModifier appLayoutsToResignActive]
  -[SBAppUnderFloatingSwitcherSwitcherModifier initWithActiveAppLayout:]
  -[SBAppUnderFloatingSwitcherSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[SBAppUnderFloatingSwitcherSwitcherModifier keyboardSuppressionMode]


SBMainWorkspaceTransaction : SBWorkspaceTransaction
 @property  SBMainWorkspaceTransitionRequest *transitionRequest

  // instance methods
  -[SBMainWorkspaceTransaction _didComplete]
  -[SBMainWorkspaceTransaction initWithTransitionRequest:]


SBInteractiveScreenshotGestureRootViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <BSInvalidatable>
 @property  <SBInteractiveScreenshotGestureRootViewControllerDelegate> *delegate
 @property  unsigned int flashViewLayerContextID
 @property  unsigned long flashViewLayerRenderID
 @property  long long gestureStyle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInteractiveScreenshotGestureRootViewController viewDidLoad]
  -[SBInteractiveScreenshotGestureRootViewController _edgeInsetsForChildViewController:insetsAreAbsolute:]
  -[SBInteractiveScreenshotGestureRootViewController .cxx_destruct]
  -[SBInteractiveScreenshotGestureRootViewController supportedInterfaceOrientations]
  -[SBInteractiveScreenshotGestureRootViewController handlePanGestureRecognizerAction:]
  -[SBInteractiveScreenshotGestureRootViewController _canShowWhileLocked]
  -[SBInteractiveScreenshotGestureRootViewController setDelegate:]
  -[SBInteractiveScreenshotGestureRootViewController invalidate]
  -[SBInteractiveScreenshotGestureRootViewController viewDidLayoutSubviews]
  -[SBInteractiveScreenshotGestureRootViewController delegate]
  -[SBInteractiveScreenshotGestureRootViewController _createMaterialViewWithFrame:groupName:isCaptureOnly:]
  -[SBInteractiveScreenshotGestureRootViewController _createFlashViewWithFrame:]
  -[SBInteractiveScreenshotGestureRootViewController _updateContentTransformUsingPresentationValues:]
  -[SBInteractiveScreenshotGestureRootViewController _updateCropLinesMultiPartAnimationForCropsProgress]
  -[SBInteractiveScreenshotGestureRootViewController _currentCommitProgressVelocity]
  -[SBInteractiveScreenshotGestureRootViewController _injectCommitProgressVelocity:]
  -[SBInteractiveScreenshotGestureRootViewController _isGestureStyleReducedMotion:]
  -[SBInteractiveScreenshotGestureRootViewController _updateWithUpdateMode:contentAnimationSettings:commitProgress:additionalContentTranslation:completion:]
  -[SBInteractiveScreenshotGestureRootViewController _prepareViewHierarchyForCommittedScreenshot:gestureStyle:]
  -[SBInteractiveScreenshotGestureRootViewController _gestureCommitProgressUpdateVelocityOverTimeInterval:]
  -[SBInteractiveScreenshotGestureRootViewController _updateWithUpdateMode:commitProgress:additionalContentTranslation:completion:]
  -[SBInteractiveScreenshotGestureRootViewController _getDistanceTraveled:fullDistance:commitProgress:forTranslationFromCorner:bounds:]
  -[SBInteractiveScreenshotGestureRootViewController _addGestureUpdateWithCommitProgress:timestamp:]
  -[SBInteractiveScreenshotGestureRootViewController _isGestureStyleDisabled:]
  -[SBInteractiveScreenshotGestureRootViewController _getContentTranslation:scale:forCommitProgress:contentInsets:additionalContentTranslation:]
  -[SBInteractiveScreenshotGestureRootViewController _cancellationCommitProgressAnimatablePropertyPresentationValueDidChange]
  -[SBInteractiveScreenshotGestureRootViewController _createScreenshotImageViewWithFrame:]
  -[SBInteractiveScreenshotGestureRootViewController _contentTransformForCommitProgress:contentInsets:additionalContentTranslation:]
  -[SBInteractiveScreenshotGestureRootViewController _inverseContentTransformForCommitProgress:contentInsets:additionalContentTranslation:]
  -[SBInteractiveScreenshotGestureRootViewController _anchoredTransformForAnchorPoint:bounds:center:transform:]
  -[SBInteractiveScreenshotGestureRootViewController initWithSourceScene:]
  -[SBInteractiveScreenshotGestureRootViewController flashViewLayerContextID]
  -[SBInteractiveScreenshotGestureRootViewController flashViewLayerRenderID]
  -[SBInteractiveScreenshotGestureRootViewController gestureStyle]
  -[SBInteractiveScreenshotGestureRootViewController setGestureStyle:]
  -[SBInteractiveScreenshotGestureRootViewController cancelInteractionWithStyle:settlingCompletionHandler:]
  -[SBInteractiveScreenshotGestureRootViewController captureScreenshotWithInterfaceOrientation:completion:]
  -[SBInteractiveScreenshotGestureRootViewController commitInteractionWithScreenshotImage:screenshotInterfaceOrientation:settlingCompletionHandler:flashCompletionHandler:]
  -[SBInteractiveScreenshotGestureRootViewController removePlaceholderChrome]


_SBInteractiveScreenshotGestureBackdropView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  CABackdropLayer *backdropLayer

  // class methods
  +[_SBInteractiveScreenshotGestureBackdropView layerClass]

  // instance methods
  -[_SBInteractiveScreenshotGestureBackdropView backdropLayer]


_SBInteractiveScreenshotGestureReplicatorView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  CAReplicatorLayer *replicatorLayer

  // class methods
  +[_SBInteractiveScreenshotGestureReplicatorView layerClass]

  // instance methods
  -[_SBInteractiveScreenshotGestureReplicatorView replicatorLayer]


SBViewMorphAnimatorContentClippingView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBViewMorphAnimatorContentBlackCurtainView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBViewMorphAnimator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBViewMorphAnimatorObserver>
 @property  NSHashTable *observers
 @property  long long startedSourceAnimations
 @property  long long completedSourceAnimations
 @property  long long startedTargetAnimations
 @property  long long completedTargetAnimations
 @property  BOOL invalidated
 @property  BOOL sourceScaleAndPositionEnded
 @property  @? sourceAllAnimationsCompletionBlock
 @property  BSTimer *animationTimeoutTimer
 @property  BSTimer *sourceAnimationsCompletionContinueBlockTimeoutTimer
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  SBViewMorphAnimatorContentClippingView *sourceContentClippingView
 @property  SBViewMorphAnimatorContentBlackCurtainView *sourceBlackCurtainView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} sourceContentClippingViewInitialFrame
 @property  SBViewMorphAnimatorContentClippingView *targetContentClippingView
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} targetContentClippingViewInitialFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} sourceAppLayoutFrame
 @property  NSUUID *uuid
 @property  UIView *sourceView
 @property  UIView *sourceContentView
 @property  UIView *targetView
 @property  UIView *targetContentView
 @property  long long fromOrientation
 @property  long long toOrientation
 @property  <SBViewMorphAnimatorDataSource> *targetDataSource
 @property  BOOL automaticallyStartSourceAnimations
 @property  BOOL automaticallyStartTargetAnimations
 @property  long long direction
 @property  {CGPoint=dd} sourceFinalCenter
 @property  double sourceFinalScale
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} sourceContentFrame
 @property  double targetCornerRadius
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} targetSourcePinningFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} targetFinalFrame
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBViewMorphAnimator _reset]
  -[SBViewMorphAnimator setSourceView:]
  -[SBViewMorphAnimator init]
  -[SBViewMorphAnimator setObservers:]
  -[SBViewMorphAnimator setTargetView:]
  -[SBViewMorphAnimator direction]
  -[SBViewMorphAnimator setFromOrientation:]
  -[SBViewMorphAnimator sourceView]
  -[SBViewMorphAnimator uuid]
  -[SBViewMorphAnimator dealloc]
  -[SBViewMorphAnimator .cxx_destruct]
  -[SBViewMorphAnimator setDirection:]
  -[SBViewMorphAnimator _updateParameters]
  -[SBViewMorphAnimator homeGestureSettings]
  -[SBViewMorphAnimator _removeMatchMoveAnimation]
  -[SBViewMorphAnimator observers]
  -[SBViewMorphAnimator invalidated]
  -[SBViewMorphAnimator setHomeGestureSettings:]
  -[SBViewMorphAnimator setToOrientation:]
  -[SBViewMorphAnimator sourceContentFrame]
  -[SBViewMorphAnimator toOrientation]
  -[SBViewMorphAnimator setInvalidated:]
  -[SBViewMorphAnimator _isReversed]
  -[SBViewMorphAnimator addObserver:]
  -[SBViewMorphAnimator interrupt:]
  -[SBViewMorphAnimator targetView]
  -[SBViewMorphAnimator fromOrientation]
  -[SBViewMorphAnimator cancel:]
  -[SBViewMorphAnimator targetContentView]
  -[SBViewMorphAnimator setTargetContentView:]
  -[SBViewMorphAnimator sourceFinalCenter]
  -[SBViewMorphAnimator sourceFinalScale]
  -[SBViewMorphAnimator noteSourceAnimationsDidEnd:finished:continueBlock:]
  -[SBViewMorphAnimator setAutomaticallyStartSourceAnimations:]
  -[SBViewMorphAnimator setSourceContentView:]
  -[SBViewMorphAnimator startTargetAnimations:]
  -[SBViewMorphAnimator startSourceAnimations:]
  -[SBViewMorphAnimator willStartSourceAnimations:]
  -[SBViewMorphAnimator willStartTargetAnimations:]
  -[SBViewMorphAnimator didEndSourceAnimations:finished:continueBlock:]
  -[SBViewMorphAnimator didEndTargetAnimations:finished:continueBlock:]
  -[SBViewMorphAnimator _resetAllAnimations]
  -[SBViewMorphAnimator _noteAnimatorWasCanceled]
  -[SBViewMorphAnimator _continueSourceAnimationsCompletionPendingBlock]
  -[SBViewMorphAnimator _noteAnimatorWasInterrupted]
  -[SBViewMorphAnimator _removeSourceClippingView]
  -[SBViewMorphAnimator _removeTargetClippingView]
  -[SBViewMorphAnimator _removeBlackCurtainView]
  -[SBViewMorphAnimator noteTargetAnimationsDidEnd:finished:continueBlock:]
  -[SBViewMorphAnimator _sourceContentFrameForSourceView:withTargetDataSource:]
  -[SBViewMorphAnimator _sourceFinalScaleWithContentFrame:targetFinalFrame:]
  -[SBViewMorphAnimator _source:finalCenterWithFinalScale:contentFrame:targetFinalFrame:]
  -[SBViewMorphAnimator _targetSourcePinningFrameWithSourceContentFrame:targetFinalFrame:]
  -[SBViewMorphAnimator _sourceAppLayoutFrameForSourceView:withTargetDataSource:]
  -[SBViewMorphAnimator noteSourceAnimationsWillStart:]
  -[SBViewMorphAnimator _targetInitialClippingBoundsWithSourceContentFrame:sourceFinalScale:targetViewBounds:]
  -[SBViewMorphAnimator noteTargetAnimationsWillStart:]
  -[SBViewMorphAnimator _checkAnimationsDependencies:]
  -[SBViewMorphAnimator setSourceAllAnimationsCompletionBlock:]
  -[SBViewMorphAnimator _noteDidEndAllAnimations]
  -[SBViewMorphAnimator _handleHandoffTimeout]
  -[SBViewMorphAnimator initWithUUID:direction:]
  -[SBViewMorphAnimator preflightCheck]
  -[SBViewMorphAnimator setTargetDataSource:]
  -[SBViewMorphAnimator sourceContentView]
  -[SBViewMorphAnimator targetDataSource]
  -[SBViewMorphAnimator automaticallyStartSourceAnimations]
  -[SBViewMorphAnimator automaticallyStartTargetAnimations]
  -[SBViewMorphAnimator setAutomaticallyStartTargetAnimations:]
  -[SBViewMorphAnimator targetCornerRadius]
  -[SBViewMorphAnimator targetSourcePinningFrame]
  -[SBViewMorphAnimator targetFinalFrame]
  -[SBViewMorphAnimator startedSourceAnimations]
  -[SBViewMorphAnimator setStartedSourceAnimations:]
  -[SBViewMorphAnimator completedSourceAnimations]
  -[SBViewMorphAnimator setCompletedSourceAnimations:]
  -[SBViewMorphAnimator startedTargetAnimations]
  -[SBViewMorphAnimator setStartedTargetAnimations:]
  -[SBViewMorphAnimator completedTargetAnimations]
  -[SBViewMorphAnimator setCompletedTargetAnimations:]
  -[SBViewMorphAnimator sourceScaleAndPositionEnded]
  -[SBViewMorphAnimator setSourceScaleAndPositionEnded:]
  -[SBViewMorphAnimator sourceAllAnimationsCompletionBlock]
  -[SBViewMorphAnimator animationTimeoutTimer]
  -[SBViewMorphAnimator setAnimationTimeoutTimer:]
  -[SBViewMorphAnimator sourceAnimationsCompletionContinueBlockTimeoutTimer]
  -[SBViewMorphAnimator setSourceAnimationsCompletionContinueBlockTimeoutTimer:]
  -[SBViewMorphAnimator sourceContentClippingView]
  -[SBViewMorphAnimator setSourceContentClippingView:]
  -[SBViewMorphAnimator sourceBlackCurtainView]
  -[SBViewMorphAnimator setSourceBlackCurtainView:]
  -[SBViewMorphAnimator sourceContentClippingViewInitialFrame]
  -[SBViewMorphAnimator setSourceContentClippingViewInitialFrame:]
  -[SBViewMorphAnimator targetContentClippingView]
  -[SBViewMorphAnimator setTargetContentClippingView:]
  -[SBViewMorphAnimator targetContentClippingViewInitialFrame]
  -[SBViewMorphAnimator setTargetContentClippingViewInitialFrame:]
  -[SBViewMorphAnimator sourceAppLayoutFrame]
  -[SBViewMorphAnimator setSourceAppLayoutFrame:]


SBLogoutProgressView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  CNContact *userContact
 @property  NSArray *pendingApplications
 @property  _UILegibilitySettings *legibilitySettings
 @property  BOOL progressVisible

  // instance methods
  -[SBLogoutProgressView legibilitySettings]
  -[SBLogoutProgressView initWithFrame:]
  -[SBLogoutProgressView updateConstraints]
  -[SBLogoutProgressView .cxx_destruct]
  -[SBLogoutProgressView setLegibilitySettings:]
  -[SBLogoutProgressView _updateLegibility]
  -[SBLogoutProgressView _goodbyeLabelBaselineOffset]
  -[SBLogoutProgressView _userAvatarVerticalOffsetFromCenter]
  -[SBLogoutProgressView _moreDocumentsLabelBaselineOffset]
  -[SBLogoutProgressView _updateViewData]
  -[SBLogoutProgressView _updateUserAvatar]
  -[SBLogoutProgressView _updateUserAvatarLegibility]
  -[SBLogoutProgressView _updateGoodbye]
  -[SBLogoutProgressView _updateBlame]
  -[SBLogoutProgressView isProgressVisible]
  -[SBLogoutProgressView setProgressVisible:]
  -[SBLogoutProgressView setUserContact:]
  -[SBLogoutProgressView setPendingApplications:]
  -[SBLogoutProgressView userContact]
  -[SBLogoutProgressView pendingApplications]


SBMainSwitcherTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainSwitcherTestRecipe load]

  // instance methods
  -[SBMainSwitcherTestRecipe title]
  -[SBMainSwitcherTestRecipe handleVolumeIncrease]
  -[SBMainSwitcherTestRecipe handleVolumeDecrease]


SBNotificationBannerDestination : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NCNotificationViewControllerDelegatePrivate, CSExternalBehaviorProviding, SBFIdleTimerBehaviorProviding, SBFMotionGestureObserver, SBAssistantObserver, SBNotificationHomeAffordanceControllerClient, NCNotificationManagementContentProviderDelegate, NCNotificationManagementViewPresenterDelegate, NCNotificationPresentableViewControllerDelegate, SBUICoronaAnimationControllerParticipant, SBBacklightControllerObserver, NCNotificationAlertDestination, SBNotificationDestinationHomeButtonPressHandler, SBFNotificationExtensionVisibilityProviding, NCNotificationViewControllerDelegate, NCNotificationViewControllerObserving>
 @property  NCNotificationViewController *presentedBanner
 @property  SBNotificationPresentableViewController *presentedPresentableVC
 @property  NCNotificationViewController *notificationViewControllerForActiveDragSession
 @property  BOOL userInteractionInProgress
 @property  NSObject<OS_dispatch_source> *presentTimer
 @property  NSObject<OS_dispatch_source> *replaceTimer
 @property  NSObject<OS_dispatch_source> *dismissTimer
 @property  UIApplicationSceneDeactivationAssertion *resignActiveAssertion
 @property  SBAppStatusBarSettingsAssertion *systemStatusBarAssertion
 @property  SBInAppStatusBarHiddenAssertion *appsStatusBarAssertion
 @property  NSMutableSet *destinationObservers
 @property  <BSInvalidatable> *idleTimerDisableAssertion
 @property  <BSInvalidatable> *starModeDisableAssertion
 @property  <BSInvalidatable> *bannerGestureRecognizerPriorityAssertion
 @property  DNDEventBehaviorResolutionService *dndEventBehaviorResolutionService
 @property  NCNotificationManagementViewPresenter *notificationManagementPresenter
 @property  SBDashBoardLegibilityProvider *dashBoardLegibilityProvider
 @property  <BNPresentable> *presentablePendingSnapshot
 @property  SBAssistantController *assistantController
 @property  SBLockScreenManager *lockScreenManager
 @property  SBSetupManager *setupManager
 @property  BOOL presentingBanner
 @property  BOOL presentingStickyBanner
 @property  BOOL presentingBannerInLongLook
 @property  BOOL presentingEmergencyNotification
 @property  BOOL preventingAutomaticLock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  <NCNotificationAlertDestinationDelegate> *delegate
 @property  BOOL alertDestination
 @property  NSString *identifier
 @property  BSServiceConnectionEndpoint *endpoint

  // class methods
  +[SBNotificationBannerDestination _test_notificationRequestForBannerWithIcon]

  // instance methods
  -[SBNotificationBannerDestination handleHomeButtonPress]
  -[SBNotificationBannerDestination coronaAnimationController:willAnimateCoronaTransitionWithAnimator:]
  -[SBNotificationBannerDestination backlightController:didAnimateBacklightToFactor:source:]
  -[SBNotificationBannerDestination coverSheetIdentifier]
  -[SBNotificationBannerDestination setDndEventBehaviorResolutionService:]
  -[SBNotificationBannerDestination assistantController]
  -[SBNotificationBannerDestination setupManager]
  -[SBNotificationBannerDestination postNotificationRequest:]
  -[SBNotificationBannerDestination idleTimerDuration]
  -[SBNotificationBannerDestination resignActiveAssertion]
  -[SBNotificationBannerDestination presentTimer]
  -[SBNotificationBannerDestination notificationManagementViewPresenterWillPresentManagementView:]
  -[SBNotificationBannerDestination _performCancelAction]
  -[SBNotificationBannerDestination _lockStateChanged]
  -[SBNotificationBannerDestination presentedBanner]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:setAllowsCriticalAlerts:forNotificationRequest:withSectionIdentifier:]
  -[SBNotificationBannerDestination isNotificationContentExtensionVisible:]
  -[SBNotificationBannerDestination _setupModeChanged]
  -[SBNotificationBannerDestination setAssistantController:]
  -[SBNotificationBannerDestination _isPresentingBannerRequestingRaiseGesture]
  -[SBNotificationBannerDestination shouldDismissForReason:]
  -[SBNotificationBannerDestination assistantDidDisappear:]
  -[SBNotificationBannerDestination notificationViewController:dragInteraction:session:didEndWithOperation:]
  -[SBNotificationBannerDestination isAlertDestination]
  -[SBNotificationBannerDestination lockScreenManager]
  -[SBNotificationBannerDestination modifyNotificationRequest:]
  -[SBNotificationBannerDestination homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBNotificationBannerDestination withdrawNotificationRequest:]
  -[SBNotificationBannerDestination scrollingStrategy]
  -[SBNotificationBannerDestination notificationBehavior]
  -[SBNotificationBannerDestination registerNotificationBannerDestinationObserver:]
  -[SBNotificationBannerDestination setBannerGestureRecognizerPriorityAssertion:]
  -[SBNotificationBannerDestination canReceiveNotificationRequest:]
  -[SBNotificationBannerDestination _isDismissingLongLookForBanner]
  -[SBNotificationBannerDestination _setupTimers]
  -[SBNotificationBannerDestination conformsToCSBehaviorProviding]
  -[SBNotificationBannerDestination _setNotificationViewControllerForActiveDragSession:]
  -[SBNotificationBannerDestination idleWarnMode]
  -[SBNotificationBannerDestination notificationPresentableViewController:presentationSize:containerSize:]
  -[SBNotificationBannerDestination notificationViewController:executeAction:withParameters:completion:]
  -[SBNotificationBannerDestination idleTimerMode]
  -[SBNotificationBannerDestination replaceTimer]
  -[SBNotificationBannerDestination init]
  -[SBNotificationBannerDestination notificationViewControllerWillBeginUserInteraction:]
  -[SBNotificationBannerDestination _shouldScreenTimeSuppressNotificationRequest:]
  -[SBNotificationBannerDestination restrictedCapabilities]
  -[SBNotificationBannerDestination _updateMotionGestureObservation]
  -[SBNotificationBannerDestination destinationDidBecomeDisabled]
  -[SBNotificationBannerDestination _performSilenceAction]
  -[SBNotificationBannerDestination _isShowingShortLookAtRest]
  -[SBNotificationBannerDestination setSystemStatusBarAssertion:]
  -[SBNotificationBannerDestination presentableDidAppearAsBanner:]
  -[SBNotificationBannerDestination _isUILocked]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:setDeliverQuietly:forNotificationRequest:withSectionIdentifier:]
  -[SBNotificationBannerDestination proximityDetectionMode]
  -[SBNotificationBannerDestination notificationViewControllerDidEndUserInteraction:]
  -[SBNotificationBannerDestination _test_postNotificationRequest:completion:]
  -[SBNotificationBannerDestination endpoint]
  -[SBNotificationBannerDestination dealloc]
  -[SBNotificationBannerDestination isPreventingAutomaticLock]
  -[SBNotificationBannerDestination conformsToCSExternalBehaviorProviding]
  -[SBNotificationBannerDestination _dismissPresentedBannerOnly:reason:animated:forceIfSticky:]
  -[SBNotificationBannerDestination _cancelReplaceTimer]
  -[SBNotificationBannerDestination .cxx_destruct]
  -[SBNotificationBannerDestination dashBoardLegibilityProvider]
  -[SBNotificationBannerDestination notificationViewController:dragInteraction:session:willEndWithOperation:]
  -[SBNotificationBannerDestination _shouldScreenTimeSuppressNotificationsForBundleIdentifier:]
  -[SBNotificationBannerDestination _setupSystemStateChangeNotifications]
  -[SBNotificationBannerDestination notificationManagementContentProvider:requestsPresentingNotificationManagementViewType:forNotificationRequest:withPresentingView:]
  -[SBNotificationBannerDestination _cancelReplaceAndDismissTimers]
  -[SBNotificationBannerDestination _notificationViewControllerForActiveDragSession]
  -[SBNotificationBannerDestination _revokeAllPresentablesWithRequesterIdentifier:reason:options:]
  -[SBNotificationBannerDestination notificationViewController:requestPermissionToExecuteAction:withParameters:completion:]
  -[SBNotificationBannerDestination presentableDidDisappearAsBanner:withReason:]
  -[SBNotificationBannerDestination _postNotificationRequest:modal:completion:]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:setAllowsNotifications:forNotificationRequest:withSectionIdentifier:]
  -[SBNotificationBannerDestination _dismissPresentedBannerAnimated:reason:forceIfSticky:]
  -[SBNotificationBannerDestination _dismissPresentedBannerOnly:reason:animated:]
  -[SBNotificationBannerDestination _shouldDismissPresentedBannerPerformingPreludeForcingIfSticky:]
  -[SBNotificationBannerDestination _shouldAllowDragInteraction]
  -[SBNotificationBannerDestination _isPresentingBanner]
  -[SBNotificationBannerDestination prepareDestinationToReceiveCriticalNotificationRequest:]
  -[SBNotificationBannerDestination setIdleTimerDisableAssertion:]
  -[SBNotificationBannerDestination _isPresentingBannerPreventingAutomaticLock]
  -[SBNotificationBannerDestination notificationViewControllerWillDismissForCancelAction:]
  -[SBNotificationBannerDestination _dismissBannerCompleted:]
  -[SBNotificationBannerDestination userInteractionWillBeginForBannerForPresentable:]
  -[SBNotificationBannerDestination identifier]
  -[SBNotificationBannerDestination _notificationViewControllerForRequest:]
  -[SBNotificationBannerDestination userInteractionDidEndForBannerForPresentable:]
  -[SBNotificationBannerDestination longLookDidPresentForNotificationViewController:]
  -[SBNotificationBannerDestination notificationViewControllerShouldAllowDragInteraction:]
  -[SBNotificationBannerDestination presentedBannerScreenFrame]
  -[SBNotificationBannerDestination participantState]
  -[SBNotificationBannerDestination hideHomeAffordanceAnimationSettingsForNotificationViewController:]
  -[SBNotificationBannerDestination _cancelDismissTimer]
  -[SBNotificationBannerDestination _notificationSectionSettingsForSectionIdentifier:]
  -[SBNotificationBannerDestination appsStatusBarAssertion]
  -[SBNotificationBannerDestination notificationManagementPresenter]
  -[SBNotificationBannerDestination longLookWillDismissForNotificationViewController:]
  -[SBNotificationBannerDestination notificationViewControllerShouldAllowClickPresentationInteraction:]
  -[SBNotificationBannerDestination _setPresentedPresentableVC:]
  -[SBNotificationBannerDestination longLookDidDismissForNotificationViewController:]
  -[SBNotificationBannerDestination notificationViewController:auxiliaryOptionsContentProviderForNotificationRequest:withLongLook:]
  -[SBNotificationBannerDestination notificationViewController:dragInteraction:sessionWillBegin:]
  -[SBNotificationBannerDestination _presentNotificationViewController:modal:forRequest:completion:]
  -[SBNotificationBannerDestination _isPresentedBannerBeingDragged]
  -[SBNotificationBannerDestination _isBundleIdentifierBlockedForScreenTimeExpiration:]
  -[SBNotificationBannerDestination _startReplaceAndDismissTimersForRequest:]
  -[SBNotificationBannerDestination setUserInteractionInProgress:]
  -[SBNotificationBannerDestination settleHomeAffordanceAnimationBehaviorDescriptionForNotificationViewController:]
  -[SBNotificationBannerDestination presentModalBannerAndExpandForNotificationRequest:]
  -[SBNotificationBannerDestination _isContentSuppressedForNotificationRequest:]
  -[SBNotificationBannerDestination _setReadyForNotificationRequests]
  -[SBNotificationBannerDestination _shouldForceDismisssIfSticyForReason:]
  -[SBNotificationBannerDestination setDestinationObservers:]
  -[SBNotificationBannerDestination _isInSetupMode]
  -[SBNotificationBannerDestination setStarModeDisableAssertion:]
  -[SBNotificationBannerDestination _isBundleIdentifierBlockedForCommunicationPolicy:]
  -[SBNotificationBannerDestination isPresentingBanner]
  -[SBNotificationBannerDestination _publishDidPresentBannerForNotificationRequest:]
  -[SBNotificationBannerDestination _shouldHideStatusBar]
  -[SBNotificationBannerDestination _resetPresentTimer]
  -[SBNotificationBannerDestination setNotificationManagementPresenter:]
  -[SBNotificationBannerDestination dndEventBehaviorResolutionService]
  -[SBNotificationBannerDestination presentableWillDisappearAsBanner:withReason:]
  -[SBNotificationBannerDestination _isDeviceAuthenticated]
  -[SBNotificationBannerDestination _isPresentingBannerWithHiddenPreview]
  -[SBNotificationBannerDestination setSetupManager:]
  -[SBNotificationBannerDestination notificationUsageTrackingStateForNotificationViewController:]
  -[SBNotificationBannerDestination unregisterNotificationBannerDestinationObserver:]
  -[SBNotificationBannerDestination _startReplaceTimer]
  -[SBNotificationBannerDestination setDashBoardLegibilityProvider:]
  -[SBNotificationBannerDestination notificationViewController:shouldFinishLongLookTransitionForTrigger:withCompletionBlock:]
  -[SBNotificationBannerDestination setPresentTimer:]
  -[SBNotificationBannerDestination isUserInteractionInProgress]
  -[SBNotificationBannerDestination presentableWillAppearAsBanner:]
  -[SBNotificationBannerDestination notificationViewController:staticContentProviderForNotificationRequest:]
  -[SBNotificationBannerDestination presentedPresentableVC]
  -[SBNotificationBannerDestination setDelegate:]
  -[SBNotificationBannerDestination destinationObservers]
  -[SBNotificationBannerDestination isPresentingEmergencyNotification]
  -[SBNotificationBannerDestination _startTimerWithDelay:eventHandler:]
  -[SBNotificationBannerDestination notificationPresentableViewControllerShouldPresentLongLook:]
  -[SBNotificationBannerDestination _setStatusBarsHidden:withDuration:]
  -[SBNotificationBannerDestination setResignActiveAssertion:]
  -[SBNotificationBannerDestination _canReceiveNotificationRequestIfLocked:]
  -[SBNotificationBannerDestination _presentedBannerMatchesNotificationRequest:]
  -[SBNotificationBannerDestination _test_dismissNotificationRequest:]
  -[SBNotificationBannerDestination _isPresentingBannerInLongLook]
  -[SBNotificationBannerDestination dismissTimer]
  -[SBNotificationBannerDestination setPresentablePendingSnapshot:]
  -[SBNotificationBannerDestination idleTimerDisableAssertion]
  -[SBNotificationBannerDestination didReceiveRaiseGesture]
  -[SBNotificationBannerDestination notificationManagementViewPresenterDidDismissManagementView:]
  -[SBNotificationBannerDestination isPresentingBannerInLongLook]
  -[SBNotificationBannerDestination shouldAcquireWindowLevelAssertion]
  -[SBNotificationBannerDestination notificationViewControllerShouldInterpretTapAsDefaultAction:]
  -[SBNotificationBannerDestination _dashBoardLegibilitySettings]
  -[SBNotificationBannerDestination _setReadyForNotificationRequestsCoalescingWith:]
  -[SBNotificationBannerDestination delegate]
  -[SBNotificationBannerDestination systemStatusBarAssertion]
  -[SBNotificationBannerDestination presentablePendingSnapshot]
  -[SBNotificationBannerDestination setAppsStatusBarAssertion:]
  -[SBNotificationBannerDestination setReplaceTimer:]
  -[SBNotificationBannerDestination notificationViewController:keyboardAssertionForGestureWindow:]
  -[SBNotificationBannerDestination bannerGestureRecognizerPriorityAssertion]
  -[SBNotificationBannerDestination unhideHomeAffordanceAnimationSettingsForNotificationViewController:]
  -[SBNotificationBannerDestination setLockScreenManager:]
  -[SBNotificationBannerDestination isPresentingStickyBanner]
  -[SBNotificationBannerDestination notificationViewControllerShouldPan:]
  -[SBNotificationBannerDestination notificationViewControllerShouldSupportClickPresentationInteraction:]
  -[SBNotificationBannerDestination setDismissTimer:]
  -[SBNotificationBannerDestination _isPresentingStickyBanner]
  -[SBNotificationBannerDestination longLookWillPresentForNotificationViewController:]
  -[SBNotificationBannerDestination _startDismissTimer]
  -[SBNotificationBannerDestination starModeDisableAssertion]
  -[SBNotificationBannerDestination notificationManagementViewPresenter:sectionSettingsForSectionIdentifier:]


SBAttentionAwarenessSettings : SBUISettings <MCProfileConnectionObserver>
 @property  BOOL shouldUseAttentionSensor
 @property  double sampleInterval
 @property  double dimInterval
 @property  double sleepInterval
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAttentionAwarenessSettings settingsControllerModule]
  +[SBAttentionAwarenessSettings attentionSensorSupported]

  // instance methods
  -[SBAttentionAwarenessSettings setDefaultValues]
  -[SBAttentionAwarenessSettings profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[SBAttentionAwarenessSettings sampleInterval]
  -[SBAttentionAwarenessSettings setShouldUseAttentionSensor:]
  -[SBAttentionAwarenessSettings dealloc]
  -[SBAttentionAwarenessSettings dimInterval]
  -[SBAttentionAwarenessSettings sleepInterval]
  -[SBAttentionAwarenessSettings setDimInterval:]
  -[SBAttentionAwarenessSettings setSleepInterval:]
  -[SBAttentionAwarenessSettings setSampleInterval:]
  -[SBAttentionAwarenessSettings shouldUseAttentionSensor]


SBAnalyticsCoreAnalyticsEventHandler : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAnalyticsCoreAnalyticsEventHandler handleEvent:withContext:]


SBDashBoardHomeAffordanceControllerClientBridge : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBNotificationHomeAffordanceControllerClient>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardHomeAffordanceControllerClientBridge homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBDashBoardHomeAffordanceControllerClientBridge .cxx_destruct]
  -[SBDashBoardHomeAffordanceControllerClientBridge initWithCoverSheetHomeGestureParticipant:]


SBDashBoardHomeAffordanceController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSHomeAffordanceControlling>
 @property  UIPanGestureRecognizer *screenEdgePanGesture
 @property  BSAnimationSettings *hideHomeAffordanceAnimationSettings
 @property  BSAnimationSettings *unhideHomeAffordanceAnimationSettings
 @property  <UIViewSpringAnimationBehaviorDescribing> *settleHomeAffordanceAnimationBehaviorDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardHomeAffordanceController init]
  -[SBDashBoardHomeAffordanceController .cxx_destruct]
  -[SBDashBoardHomeAffordanceController hideHomeAffordanceAnimationSettings]
  -[SBDashBoardHomeAffordanceController unhideHomeAffordanceAnimationSettings]
  -[SBDashBoardHomeAffordanceController settleHomeAffordanceAnimationBehaviorDescription]
  -[SBDashBoardHomeAffordanceController screenEdgePanGesture]
  -[SBDashBoardHomeAffordanceController registerHomeGestureParticipant:withIdentifier:]
  -[SBDashBoardHomeAffordanceController unregisterHomeGestureParticipant:withIdentifier:]
  -[SBDashBoardHomeAffordanceController keyboardAssertionForGestureWindow:]


SBRecalibrateProximitySensorHardwareButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBProximitySensorManagerObserver, SBHardwareButtonInteraction>
 @property  SBProximitySensorManager *sensorManager
 @property  BOOL didResetProxCalibration
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecalibrateProximitySensorHardwareButtonInteraction .cxx_destruct]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction disallowsLongPressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction disallowsTriplePressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction disallowsDoublePressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction consumeInitialPressDown]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction disallowsSinglePressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction consumeSinglePressUp]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction hardwareButtonGestureParameters]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction descriptionBuilderWithMultilinePrefix:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction initWithProximitySensorManager:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction _disallowsAnyPressForReason:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction sensorManager]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction setSensorManager:]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction didResetProxCalibration]
  -[SBRecalibrateProximitySensorHardwareButtonInteraction setDidResetProxCalibration:]


SBRunWallpaperMigrationTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBRunWallpaperMigrationTestRecipe load]

  // instance methods
  -[SBRunWallpaperMigrationTestRecipe title]
  -[SBRunWallpaperMigrationTestRecipe handleVolumeIncrease]
  -[SBRunWallpaperMigrationTestRecipe handleVolumeDecrease]


SBTimerSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  NSString *reason

  // instance methods
  -[SBTimerSwitcherModifierEvent copyWithZone:]
  -[SBTimerSwitcherModifierEvent initWithReason:]
  -[SBTimerSwitcherModifierEvent .cxx_destruct]
  -[SBTimerSwitcherModifierEvent type]
  -[SBTimerSwitcherModifierEvent reason]
  -[SBTimerSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]


SBCarDoNotDisturbExitConfirmationAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib <SiriUICarDNDDelegate>
 @property  @? notDrivingActionHandler
 @property  BOOL showSiriHeaderViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCarDoNotDisturbExitConfirmationAlertItem forcesModalAlertAppearance]
  -[SBCarDoNotDisturbExitConfirmationAlertItem .cxx_destruct]
  -[SBCarDoNotDisturbExitConfirmationAlertItem reappearsAfterUnlock]
  -[SBCarDoNotDisturbExitConfirmationAlertItem shouldShowInLockScreen]
  -[SBCarDoNotDisturbExitConfirmationAlertItem configure:requirePasscodeForActions:]
  -[SBCarDoNotDisturbExitConfirmationAlertItem controllerDidProvideContext:]
  -[SBCarDoNotDisturbExitConfirmationAlertItem notDrivingActionHandler]
  -[SBCarDoNotDisturbExitConfirmationAlertItem showSiriHeaderViewController]
  -[SBCarDoNotDisturbExitConfirmationAlertItem setNotDrivingActionHandler:]
  -[SBCarDoNotDisturbExitConfirmationAlertItem setShowSiriHeaderViewController:]


SBActionHandler : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFActionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBActionHandler sharedInstance]

  // instance methods
  -[SBActionHandler _captureRadarAttachmentsWithCompletion:]
  -[SBActionHandler handleActions:origin:withResult:]
  -[SBActionHandler .cxx_destruct]
  -[SBActionHandler removeActionHandler:]
  -[SBActionHandler _reportAndKillInsecureProcesses:]
  -[SBActionHandler _executeRestartAction:fromProcess:]
  -[SBActionHandler _shouldPromptForSecureDrawViolations]
  -[SBActionHandler addActionHandler:]


SBPIPContainerViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <PGPictureInPictureViewControllerContentContainer, SBPIPInteractionControllerDelegate>
 @property  PGPictureInPictureViewController *pictureInPictureViewController
 @property  long long requiredInterfaceOrientation
 @property  double displayLayoutElementLevel
 @property  BOOL animateSafeAreaInsetsChanges
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPContainerViewController _currentInterfaceOrientation]
  -[SBPIPContainerViewController dealloc]
  -[SBPIPContainerViewController .cxx_destruct]
  -[SBPIPContainerViewController viewSafeAreaInsetsDidChange]
  -[SBPIPContainerViewController initWithNibName:bundle:]
  -[SBPIPContainerViewController viewDidAppear:]
  -[SBPIPContainerViewController removeObserver:]
  -[SBPIPContainerViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBPIPContainerViewController viewWillDisappear:]
  -[SBPIPContainerViewController addObserver:]
  -[SBPIPContainerViewController pictureInPictureViewController]
  -[SBPIPContainerViewController viewDidLayoutSubviews]
  -[SBPIPContainerViewController loadView]
  -[SBPIPContainerViewController initWithCoder:]
  -[SBPIPContainerViewController prepareStartAnimationWithInitialInterfaceOrientation:initialLayerFrame:completionHandler:]
  -[SBPIPContainerViewController performRotateAnimationWithRotation:completionHandler:]
  -[SBPIPContainerViewController setStashState:]
  -[SBPIPContainerViewController acquireInterfaceOrientationLock]
  -[SBPIPContainerViewController relinquishInterfaceOrientationLock]
  -[SBPIPContainerViewController handleTapWhileStashedGesture]
  -[SBPIPContainerViewController handleDoubleTapGesture]
  -[SBPIPContainerViewController preferredContentSizeDidChangeForPictureInPictureViewController]
  -[SBPIPContainerViewController performStartAnimationWithCompletionHandler:]
  -[SBPIPContainerViewController performStopAnimationWithFinalInterfaceOrientation:finalLayerFrame:completionHandler:]
  -[SBPIPContainerViewController interactionControllerDidUpdateEdgeInsets:]
  -[SBPIPContainerViewController interactionController:didUpdateStashProgress:]
  -[SBPIPContainerViewController interactionController:wantsStashTabHidden:left:]
  -[SBPIPContainerViewController interactionControllerDidBeginSizeChange:behavior:]
  -[SBPIPContainerViewController interactionControllerDidEndSizeChange:]
  -[SBPIPContainerViewController interactionControllerDidEndAllInteractions:]
  -[SBPIPContainerViewController interactionController:didSettleOnStashState:]
  -[SBPIPContainerViewController setNeedsLayoutForInteractionController:traits:withReason:behavior:completion:]
  -[SBPIPContainerViewController initWithPictureInPictureViewController:]
  -[SBPIPContainerViewController _updateContentPadding]
  -[SBPIPContainerViewController _updateContentViewFrame:reason:]
  -[SBPIPContainerViewController _contentViewFrameInDisplayReferenceSpace]
  -[SBPIPContainerViewController _updateDisplayLayoutElementReferenceFrame]
  -[SBPIPContainerViewController _setStashState:]
  -[SBPIPContainerViewController _contentViewFrameFromInterfaceOrientation:frameInFixedCoordinateSpace:]
  -[SBPIPContainerViewController _requireInterfaceOrientation:]
  -[SBPIPContainerViewController _isContentFromFillGravityWithInitialLayerFrame:]
  -[SBPIPContainerViewController _acquireInterfaceOrientationLock]
  -[SBPIPContainerViewController _relinquishInterfaceOrientationLock]
  -[SBPIPContainerViewController setInteractionControllerEnabled:]
  -[SBPIPContainerViewController setContentViewPadding:]
  -[SBPIPContainerViewController displayLayoutElementLevel]
  -[SBPIPContainerViewController setDisplayLayoutElementLevel:]
  -[SBPIPContainerViewController startResourcesUsageReductionAfterTimeout:]
  -[SBPIPContainerViewController stopResourcesUsageReduction]
  -[SBPIPContainerViewController forcePictureInPictureToFrame:]
  -[SBPIPContainerViewController requiredInterfaceOrientation]
  -[SBPIPContainerViewController animateSafeAreaInsetsChanges]
  -[SBPIPContainerViewController setAnimateSafeAreaInsetsChanges:]
  -[SBPIPContainerViewController SB_accessibilityContentViewScale]
  -[SBPIPContainerViewController SB_accessibilitySetContentViewScale:]


SBStartupTransitionToHome : SBBaseStartupTransition
  // instance methods
  -[SBStartupTransitionToHome performTransitionWithCompletionBlock:]


SBExternalDefaults : SBAbstractDefaults /usr/lib/libutil.dylib
 @property  SBExternalGlobalDefaults *globalDefaults
 @property  SBExternalDuetDefaults *duetDefaults
 @property  SBExternalDemoDefaults *demoDefaults
 @property  SBExternalSetupDefaults *setupDefaults
 @property  SBExternalSettingsDefaults *settingsDefaults
 @property  SBExternalPhoneDefaults *phoneDefaults
 @property  SBExternalWifiDefaults *networkDefaults
 @property  SBExternalSoundsDefaults *soundDefaults
 @property  SBExternalNotesDefaults *notesDefaults
 @property  SBBiometricKitDefaults *biometricKitDefaults

  // instance methods
  -[SBExternalDefaults duetDefaults]
  -[SBExternalDefaults .cxx_destruct]
  -[SBExternalDefaults soundDefaults]
  -[SBExternalDefaults phoneDefaults]
  -[SBExternalDefaults biometricKitDefaults]
  -[SBExternalDefaults settingsDefaults]
  -[SBExternalDefaults globalDefaults]
  -[SBExternalDefaults networkDefaults]
  -[SBExternalDefaults setupDefaults]
  -[SBExternalDefaults notesDefaults]
  -[SBExternalDefaults demoDefaults]


SBApplicationSceneViewStatusBarDescriptor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL forceHidden

  // class methods
  +[SBApplicationSceneViewStatusBarDescriptor statusBarDescriptorWithForceHidden:]

  // instance methods
  -[SBApplicationSceneViewStatusBarDescriptor isForcedHidden]
  -[SBApplicationSceneViewStatusBarDescriptor setForceHidden:]
  -[SBApplicationSceneViewStatusBarDescriptor initWithForceHidden:]


SBInvalidateAdjustedAppLayoutsSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBInvalidateAdjustedAppLayoutsSwitcherEventResponse type]


SBDeviceApplicationSceneHandle : SBApplicationSceneHandle <FBApplicationProcessObserver, SBIdleTimerProviding>
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  long long lastActivationSource
 @property  NSString *lastActivationIconLeafIdentifier
 @property  BOOL hasMainSceneBeenForegroundAtLeastOnce
 @property  int statusBarStyleOverridesToSuppress
 @property  long long whitePointAdaptivityStyle
 @property  long long statusBarParts
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} statusBarAvoidanceFrame
 @property  BOOL effectivelyForeground
 @property  BOOL reachabilitySupported
 @property  BOOL showingModalAlert
 @property  long long backgroundStyle
 @property  long long wallpaperStyle
 @property  BOOL translucent
 @property  unsigned long screenEdgesDeferringSystemGestures
 @property  SBDeviceApplicationSceneStatusBarBreadcrumbProvider *breadcrumbProvider
 @property  SBDeviceApplicationSceneStatusBarStateProvider *statusBarStateProvider
 @property  _UIStatusBarData *overlayStatusBarData
 @property  NSString *sceneTitle
 @property  NSData *activationConditionsData
 @property  long long activationBias
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneHandle _modifyApplicationTransitionContext:fromRequestContext:entity:]
  -[SBDeviceApplicationSceneHandle isTranslucent]
  -[SBDeviceApplicationSceneHandle statusBarOrientation]
  -[SBDeviceApplicationSceneHandle _modifyApplicationSceneSettings:fromRequestContext:entity:]
  -[SBDeviceApplicationSceneHandle newSceneViewController]
  -[SBDeviceApplicationSceneHandle wallpaperStyle]
  -[SBDeviceApplicationSceneHandle overlayStatusBarData]
  -[SBDeviceApplicationSceneHandle _idleTimerCoordinator]
  -[SBDeviceApplicationSceneHandle _mainSceneSupportedInterfaceOrientations]
  -[SBDeviceApplicationSceneHandle statusBarStateProvider]
  -[SBDeviceApplicationSceneHandle applicationProcessDidExit:withContext:]
  -[SBDeviceApplicationSceneHandle statusBarAvoidanceFrame]
  -[SBDeviceApplicationSceneHandle _commonInit]
  -[SBDeviceApplicationSceneHandle _modifyApplicationSceneClientSettings:fromRequestContext:entity:initialSceneSettings:]
  -[SBDeviceApplicationSceneHandle currentEffectiveStatusBarStyleRequest]
  -[SBDeviceApplicationSceneHandle isShowingModalAlert]
  -[SBDeviceApplicationSceneHandle _noteMainSceneBackgroundStyleChanged]
  -[SBDeviceApplicationSceneHandle hasMainSceneBeenForegroundAtLeastOnce]
  -[SBDeviceApplicationSceneHandle activationConditionsData]
  -[SBDeviceApplicationSceneHandle _setIdleTimerCoordinator:]
  -[SBDeviceApplicationSceneHandle statusBarAlpha]
  -[SBDeviceApplicationSceneHandle _resumingInterfaceOrientationForOrientation:]
  -[SBDeviceApplicationSceneHandle prefersKillingInSwitcherDisabled]
  -[SBDeviceApplicationSceneHandle setStatusBarStyleOverridesToSuppress:]
  -[SBDeviceApplicationSceneHandle isReachabilitySupported]
  -[SBDeviceApplicationSceneHandle _sceneCornerRadiusConfigurationFromRequestContext:forEntity:]
  -[SBDeviceApplicationSceneHandle backgroundStyle]
  -[SBDeviceApplicationSceneHandle lastActivationSource]
  -[SBDeviceApplicationSceneHandle setKeyboardContextMaskStyle:]
  -[SBDeviceApplicationSceneHandle _overriddenStatusBarStyleForApp:style:]
  -[SBDeviceApplicationSceneHandle dealloc]
  -[SBDeviceApplicationSceneHandle coordinatorRequestedIdleTimerBehavior:]
  -[SBDeviceApplicationSceneHandle handleHardwareButtonEventType:]
  -[SBDeviceApplicationSceneHandle _didCreateScene:]
  -[SBDeviceApplicationSceneHandle shouldPrioritizeForSwitcherOrdering]
  -[SBDeviceApplicationSceneHandle .cxx_destruct]
  -[SBDeviceApplicationSceneHandle isDeviceApplicationSceneHandle]
  -[SBDeviceApplicationSceneHandle isEdgeProtectEnabledForHomeGesture]
  -[SBDeviceApplicationSceneHandle _updateSceneHostingInfoForSnapshottingWithView:]
  -[SBDeviceApplicationSceneHandle sceneTitle]
  -[SBDeviceApplicationSceneHandle _launchingInterfaceOrientationForOrientation:]
  -[SBDeviceApplicationSceneHandle prefersHeaderHiddenInSwitcher]
  -[SBDeviceApplicationSceneHandle _mainSceneSupportsInterfaceOrientation:]
  -[SBDeviceApplicationSceneHandle _modifyProcessExecutionContext:fromRequestContext:entity:]
  -[SBDeviceApplicationSceneHandle activationInterfaceOrientationForOrientation:]
  -[SBDeviceApplicationSceneHandle defaultStatusBarHeightForOrientation:]
  -[SBDeviceApplicationSceneHandle wantsDeviceOrientationEventsEnabled]
  -[SBDeviceApplicationSceneHandle displayEdgeInfoForForLayoutEnvironment:isInsetForHomeAffordance:]
  -[SBDeviceApplicationSceneHandle _populateSettingsWithDefaultStatusBarHeight:]
  -[SBDeviceApplicationSceneHandle activationBias]
  -[SBDeviceApplicationSceneHandle shouldAlwaysDisplayLiveContent]
  -[SBDeviceApplicationSceneHandle additionalActionsForActivatingSceneEntity:withTransitionContext:]
  -[SBDeviceApplicationSceneHandle statusBarHeightForOrientation:]
  -[SBDeviceApplicationSceneHandle isAutoHideEnabledForHomeAffordance]
  -[SBDeviceApplicationSceneHandle _potentiallyJailedDisplayConfiguration]
  -[SBDeviceApplicationSceneHandle _currentClassicModeAllowsLaunchingToAnySupportedOrientation]
  -[SBDeviceApplicationSceneHandle statusBarEffectiveStyleRequestWithStyle:]
  -[SBDeviceApplicationSceneHandle _noteSceneTitleChanged]
  -[SBDeviceApplicationSceneHandle defaultStatusBarStyle]
  -[SBDeviceApplicationSceneHandle statusBarParts]
  -[SBDeviceApplicationSceneHandle currentInterfaceOrientation]
  -[SBDeviceApplicationSceneHandle mostRecentSceneSnapshotsForScale:launchingOrientation:]
  -[SBDeviceApplicationSceneHandle setLastActivationSource:]
  -[SBDeviceApplicationSceneHandle setStatusBarAvoidanceFrame:]
  -[SBDeviceApplicationSceneHandle newScenePlaceholderContentContextWithActivationSettings:]
  -[SBDeviceApplicationSceneHandle activationInterfaceOrientationForCurrentOrientation]
  -[SBDeviceApplicationSceneHandle statusBarStyleOverridesToSuppress]
  -[SBDeviceApplicationSceneHandle _modifySafeAreaInsetsOnApplicationSceneSettings:isInsetForHomeAffordance:isFloating:]
  -[SBDeviceApplicationSceneHandle effectiveStatusBarStyleOverrides]
  -[SBDeviceApplicationSceneHandle _statusBarStyleWithActivationSettings:]
  -[SBDeviceApplicationSceneHandle effectiveStatusBarStyleRequestForActivation:]
  -[SBDeviceApplicationSceneHandle _noteActivationConditionsChanged]
  -[SBDeviceApplicationSceneHandle _generateIdleTimerBehavior]
  -[SBDeviceApplicationSceneHandle defaultStatusBarHiddenForOrientation:]
  -[SBDeviceApplicationSceneHandle setLastActivationIconLeafIdentifier:]
  -[SBDeviceApplicationSceneHandle _initialMainSceneCompabilityMode:]
  -[SBDeviceApplicationSceneHandle _sceneDataStoreCreatingIfNecessary:]
  -[SBDeviceApplicationSceneHandle _didDestroyScene:]
  -[SBDeviceApplicationSceneHandle defaultInterfaceOrientation]
  -[SBDeviceApplicationSceneHandle _updateIdleTimerForReason:]
  -[SBDeviceApplicationSceneHandle breadcrumbProvider]
  -[SBDeviceApplicationSceneHandle _defaultStatusBarHeights]
  -[SBDeviceApplicationSceneHandle screenEdgesDeferringSystemGestures]
  -[SBDeviceApplicationSceneHandle shouldSuppressAlertForSuppressionContexts:sectionIdentifier:]
  -[SBDeviceApplicationSceneHandle _didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDeviceApplicationSceneHandle removeObserver:]
  -[SBDeviceApplicationSceneHandle _didUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationSceneHandle currentStatusBarStyle]
  -[SBDeviceApplicationSceneHandle isStatusBarForceHidden]
  -[SBDeviceApplicationSceneHandle setHasMainSceneBeenForegroundAtLeastOnce:]
  -[SBDeviceApplicationSceneHandle lastActivationIconLeafIdentifier]
  -[SBDeviceApplicationSceneHandle defaultStatusBarAlpha]
  -[SBDeviceApplicationSceneHandle setStatusBarForceHidden:forReason:animationSettings:]
  -[SBDeviceApplicationSceneHandle addObserver:]
  -[SBDeviceApplicationSceneHandle saveSuspendSnapshot:]
  -[SBDeviceApplicationSceneHandle isStatusBarForcedHiddenForOrientation:]
  -[SBDeviceApplicationSceneHandle isEffectivelyForeground]
  -[SBDeviceApplicationSceneHandle setStatusBarParts:]
  -[SBDeviceApplicationSceneHandle whitePointAdaptivityStyle]
  -[SBDeviceApplicationSceneHandle isCurrentStatusBarHiddenForOrientation:]
  -[SBDeviceApplicationSceneHandle newSceneViewWithReferenceSize:orientation:hostRequester:]
  -[SBDeviceApplicationSceneHandle setWhitePointAdaptivityStyle:]
  -[SBDeviceApplicationSceneHandle descriptionBuilderWithMultilinePrefix:]
  -[SBDeviceApplicationSceneHandle setAlertSuppressionContextsBySectionIdentifier:]
  -[SBDeviceApplicationSceneHandle forbidsActivationByBreadcrumbAction]
  -[SBDeviceApplicationSceneHandle isStatusBarHiddenForActivation:forOrientation:]
  -[SBDeviceApplicationSceneHandle preferredHardwareButtonEventTypes]


SBLockedPointerManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBMainDisplaySceneManagerObserver, SBLayoutStateTransitionObserver, SBDeviceApplicationSceneHandleObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockedPointerManager sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBLockedPointerManager initWithSceneManager:]
  -[SBLockedPointerManager _queue_prefersLockForSceneIdentifier:]
  -[SBLockedPointerManager _queue_lockPointerForSceneIdentifier:]
  -[SBLockedPointerManager layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBLockedPointerManager _queue_unlockPointer]
  -[SBLockedPointerManager _shouldAllowPointerLockedForScene:]
  -[SBLockedPointerManager layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBLockedPointerManager .cxx_destruct]
  -[SBLockedPointerManager sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBLockedPointerManager _setPointerLockStatus:forSceneWithIdentifier:]
  -[SBLockedPointerManager sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBLockedPointerManager _updateLockForLayoutState:]
  -[SBLockedPointerManager clientWithSceneIdentifier:prefersPointerLockStatus:]
  -[SBLockedPointerManager _queue_updateLockForLayoutState:]
  -[SBLockedPointerManager _possibleSceneHandleForLockingPointerFromLayoutState:]


SBSpotlightTransientOverlayViewController : SBTransientOverlayViewController <SPUIRemoteSearchViewDelegate>
 @property  SBSpotlightSettings *settings
 @property  UIView *scalingView
 @property  unsigned long animationCount
 @property  SBModalUIFluidDismissGestureManager *modalUIDismissGestureManager
 @property  UIPanGestureRecognizer *panGestureRecognizer
 @property  UITapGestureRecognizer *tapToDismissGestureRecognizer
 @property  <SBSpotlightTransientOverlayViewControllerDelegate> *delegate
 @property  unsigned long presentationSource
 @property  unsigned long dismissalSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpotlightTransientOverlayViewController viewDidLoad]
  -[SBSpotlightTransientOverlayViewController handleHomeButtonPress]
  -[SBSpotlightTransientOverlayViewController panGestureRecognizer]
  -[SBSpotlightTransientOverlayViewController _handlePanGestureRecognizer:]
  -[SBSpotlightTransientOverlayViewController setAnimationCount:]
  -[SBSpotlightTransientOverlayViewController tapToDismissGestureRecognizer]
  -[SBSpotlightTransientOverlayViewController setTapToDismissGestureRecognizer:]
  -[SBSpotlightTransientOverlayViewController dealloc]
  -[SBSpotlightTransientOverlayViewController shouldAutorotate]
  -[SBSpotlightTransientOverlayViewController .cxx_destruct]
  -[SBSpotlightTransientOverlayViewController setScalingView:]
  -[SBSpotlightTransientOverlayViewController _preferredStatusBarVisibility]
  -[SBSpotlightTransientOverlayViewController animationCount]
  -[SBSpotlightTransientOverlayViewController supportedInterfaceOrientations]
  -[SBSpotlightTransientOverlayViewController viewDidAppear:]
  -[SBSpotlightTransientOverlayViewController settings]
  -[SBSpotlightTransientOverlayViewController dismissSearchView]
  -[SBSpotlightTransientOverlayViewController setPanGestureRecognizer:]
  -[SBSpotlightTransientOverlayViewController _canShowWhileLocked]
  -[SBSpotlightTransientOverlayViewController isContentOpaque]
  -[SBSpotlightTransientOverlayViewController setDelegate:]
  -[SBSpotlightTransientOverlayViewController presentationSource]
  -[SBSpotlightTransientOverlayViewController viewWillDisappear:]
  -[SBSpotlightTransientOverlayViewController setSettings:]
  -[SBSpotlightTransientOverlayViewController viewDidLayoutSubviews]
  -[SBSpotlightTransientOverlayViewController delegate]
  -[SBSpotlightTransientOverlayViewController setPresentationSource:]
  -[SBSpotlightTransientOverlayViewController scalingView]
  -[SBSpotlightTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBSpotlightTransientOverlayViewController allowsStackingOverlayContentAbove]
  -[SBSpotlightTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBSpotlightTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBSpotlightTransientOverlayViewController setDismissalSource:]
  -[SBSpotlightTransientOverlayViewController initWithModalUIFluidDismissGestureManager:]
  -[SBSpotlightTransientOverlayViewController preservesAppSwitcherDuringPresentationAndDismissal]
  -[SBSpotlightTransientOverlayViewController dismissesSiriForPresentation]
  -[SBSpotlightTransientOverlayViewController beginInteractivePresentation]
  -[SBSpotlightTransientOverlayViewController updateInteractivePresentationWithProgress:translation:]
  -[SBSpotlightTransientOverlayViewController endInteractivePresentation:]
  -[SBSpotlightTransientOverlayViewController handleGestureDismissal]
  -[SBSpotlightTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBSpotlightTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBSpotlightTransientOverlayViewController sceneDeactivationPredicate]
  -[SBSpotlightTransientOverlayViewController dismissesForCoverSheetPresentation]
  -[SBSpotlightTransientOverlayViewController prefersWindowHitTestingDisabled]
  -[SBSpotlightTransientOverlayViewController homeAffordanceSuppression]
  -[SBSpotlightTransientOverlayViewController _handleTapToDismissGestureRecognizer:]
  -[SBSpotlightTransientOverlayViewController _setSpotlightPresented:withAnimationMode:alongsideAnimationBlock:completion:]
  -[SBSpotlightTransientOverlayViewController _isSpotlightVisible]
  -[SBSpotlightTransientOverlayViewController _setSpotlightAlpha:scale:blurProgress:translation:withAnimationMode:alongsideAnimationBlock:completion:]
  -[SBSpotlightTransientOverlayViewController _configureBlurFilterOnView:]
  -[SBSpotlightTransientOverlayViewController presentationDimmingViewColor]
  -[SBSpotlightTransientOverlayViewController dismissalSource]
  -[SBSpotlightTransientOverlayViewController modalUIDismissGestureManager]
  -[SBSpotlightTransientOverlayViewController setModalUIDismissGestureManager:]


SBSpotlightTransientOverlaySpotlightViewController : SBSpotlightMultiplexingViewController
 @property  unsigned long presentationSource

  // instance methods
  -[SBSpotlightTransientOverlaySpotlightViewController level]
  -[SBSpotlightTransientOverlaySpotlightViewController _canShowWhileLocked]
  -[SBSpotlightTransientOverlaySpotlightViewController presentationSource]
  -[SBSpotlightTransientOverlaySpotlightViewController remoteSearchViewPresentationSource]
  -[SBSpotlightTransientOverlaySpotlightViewController setPresentationSource:]


SBRenderImage : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBRenderImage CA_copyRenderValue]
  -[SBRenderImage dealloc]
  -[SBRenderImage initWithRenderImage:]


SBWakeToInCallWorkspaceTransaction : SBMainWorkspaceTransaction
  // instance methods
  -[SBWakeToInCallWorkspaceTransaction _begin]


SBAutoPiPWorkspaceTransaction : SBWorkspaceTransaction
 @property  SBWorkspaceEntity *entityToPiP
 @property  long long transitionStyle

  // class methods
  +[SBAutoPiPWorkspaceTransaction transitionStyleForProcessIdentifier:entityToPiP:withTransitionContext:request:]
  +[SBAutoPiPWorkspaceTransaction shouldAutoPiPEnteringBackgroundForRequest:entityFoundBlock:]
  +[SBAutoPiPWorkspaceTransaction shouldAutoPiPEnteringBackgroundForRequest:]

  // instance methods
  -[SBAutoPiPWorkspaceTransaction _customizedDescriptionProperties]
  -[SBAutoPiPWorkspaceTransaction _canBeInterrupted]
  -[SBAutoPiPWorkspaceTransaction _didComplete]
  -[SBAutoPiPWorkspaceTransaction initWithTransitionRequest:]
  -[SBAutoPiPWorkspaceTransaction _begin]
  -[SBAutoPiPWorkspaceTransaction .cxx_destruct]
  -[SBAutoPiPWorkspaceTransaction setTransitionStyle:]
  -[SBAutoPiPWorkspaceTransaction transitionStyle]
  -[SBAutoPiPWorkspaceTransaction entityToPiP]
  -[SBAutoPiPWorkspaceTransaction initWithTransitionRequest:includeActiveAppEntity:]


SBLockScreenService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSServiceConnectionListenerDelegate, SBSLockScreenServiceServerInterface>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenService .cxx_destruct]
  -[SBLockScreenService listener:didReceiveConnection:withContext:]
  -[SBLockScreenService setPreventSpuriousScreenUndim:]
  -[SBLockScreenService setPreventPasscodeLock:]
  -[SBLockScreenService launchEmergencyDialerWithCompletion:]
  -[SBLockScreenService requestPasscodeUnlockUIWithOptions:withCompletion:]
  -[SBLockScreenService initWithLockScreenManager:workspace:authenticationAssertionProvider:remoteTransientOverlaySessionManager:]
  -[SBLockScreenService requestPasscodeUnlockUIForClient:options:description:withCompletion:]


SBHideFolderContentsAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  SBIcon *icon
 @property  NSString *iconLocation

  // instance methods
  -[SBHideFolderContentsAlertItem forcesModalAlertAppearance]
  -[SBHideFolderContentsAlertItem dismissOnLock]
  -[SBHideFolderContentsAlertItem .cxx_destruct]
  -[SBHideFolderContentsAlertItem icon]
  -[SBHideFolderContentsAlertItem iconLocation]
  -[SBHideFolderContentsAlertItem shouldShowInLockScreen]
  -[SBHideFolderContentsAlertItem configure:requirePasscodeForActions:]
  -[SBHideFolderContentsAlertItem didActivate]
  -[SBHideFolderContentsAlertItem initWithIcon:location:]


SBInlineAppExposeContainerViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBSwitcherContentViewControllerDelegate, SBSwitcherContentViewControllerDataSource, SBLayoutStateTransitionObserver, SBAppPlatterDragSourceViewProviding>
 @property  <SBInlineAppExposeContainerViewControllerDelegate> *delegate
 @property  long long layoutRole
 @property  BOOL overlay
 @property  BSCornerRadiusConfiguration *cornerRadiusConfiguration
 @property  unsigned long maskedCorners
 @property  BOOL clipsToBounds
 @property  SBDeviceApplicationSceneViewController *deviceApplicationSceneViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL dragging

  // instance methods
  -[SBInlineAppExposeContainerViewController switcherContentController:transitionEventForContext:identifier:phase:animated:]
  -[SBInlineAppExposeContainerViewController containerViewForBlurContentView]
  -[SBInlineAppExposeContainerViewController switcherContentController:setContainerStatusBarHidden:animationDuration:]
  -[SBInlineAppExposeContainerViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBInlineAppExposeContainerViewController sbActiveInterfaceOrientation]
  -[SBInlineAppExposeContainerViewController _addAppLayoutToFront:]
  -[SBInlineAppExposeContainerViewController initialRimShadowFilters]
  -[SBInlineAppExposeContainerViewController initialCornerRadiusConfiguration]
  -[SBInlineAppExposeContainerViewController frameForInlineAppExposeItemAspectFill:]
  -[SBInlineAppExposeContainerViewController setDragging:]
  -[SBInlineAppExposeContainerViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBInlineAppExposeContainerViewController switcherContentController:deletedAppLayout:forReason:]
  -[SBInlineAppExposeContainerViewController switcherContentController:transitionEventForLayoutState:identifier:phase:animated:]
  -[SBInlineAppExposeContainerViewController isOverlay]
  -[SBInlineAppExposeContainerViewController isDragging]
  -[SBInlineAppExposeContainerViewController sourceView]
  -[SBInlineAppExposeContainerViewController cornerRadii]
  -[SBInlineAppExposeContainerViewController dealloc]
  -[SBInlineAppExposeContainerViewController setOverlay:]
  -[SBInlineAppExposeContainerViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBInlineAppExposeContainerViewController .cxx_destruct]
  -[SBInlineAppExposeContainerViewController setClipsToBounds:]
  -[SBInlineAppExposeContainerViewController initialDiffuseShadowFilters]
  -[SBInlineAppExposeContainerViewController initialRimShadowParameters]
  -[SBInlineAppExposeContainerViewController switcherInterfaceOrientationForContentController:]
  -[SBInlineAppExposeContainerViewController switcherContentController:setHomeScreenBackdropBlurProgress:withAnimationMode:completion:]
  -[SBInlineAppExposeContainerViewController switcherContentController:setHomeScreenBackdropBlurType:]
  -[SBInlineAppExposeContainerViewController animationControllerForTransitionRequest:]
  -[SBInlineAppExposeContainerViewController viewWillLayoutSubviews]
  -[SBInlineAppExposeContainerViewController setLayoutRole:]
  -[SBInlineAppExposeContainerViewController initialDiffuseShadowParameters]
  -[SBInlineAppExposeContainerViewController switcherContentController:performTransitionWithRequest:gestureInitiated:]
  -[SBInlineAppExposeContainerViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBInlineAppExposeContainerViewController switcherContentController:handlePlusButtonActionForBundleIdentifier:]
  -[SBInlineAppExposeContainerViewController maskedCorners]
  -[SBInlineAppExposeContainerViewController clipsToBounds]
  -[SBInlineAppExposeContainerViewController setMaskedCorners:]
  -[SBInlineAppExposeContainerViewController appLayoutsForSwitcherContentController:]
  -[SBInlineAppExposeContainerViewController setDelegate:]
  -[SBInlineAppExposeContainerViewController switcherContentController:setContentOrientation:]
  -[SBInlineAppExposeContainerViewController layoutRole]
  -[SBInlineAppExposeContainerViewController cornerRadiusConfiguration]
  -[SBInlineAppExposeContainerViewController delegate]
  -[SBInlineAppExposeContainerViewController loadView]
  -[SBInlineAppExposeContainerViewController setCornerRadiusConfiguration:]
  -[SBInlineAppExposeContainerViewController switcherContentController:setHomeScreenDimmingAlpha:withAnimationMode:completion:]
  -[SBInlineAppExposeContainerViewController initWithBundleID:layoutRole:overlay:]
  -[SBInlineAppExposeContainerViewController switcherContentControllerReloadsSnapshotsForActiveInterfaceOrientationChange:]
  -[SBInlineAppExposeContainerViewController backdropInterfaceStyleForContentController:]
  -[SBInlineAppExposeContainerViewController deviceApplicationSceneViewController]
  -[SBInlineAppExposeContainerViewController setDeviceApplicationSceneViewController:]
  -[SBInlineAppExposeContainerViewController _unfilteredAppLayoutsForBundleID:]
  -[SBInlineAppExposeContainerViewController _inlineAppLayoutForDisplayItem:]
  -[SBInlineAppExposeContainerViewController _insertAppLayout:atIndex:animated:modelMutation:]
  -[SBInlineAppExposeContainerViewController _updateContentViewControllerFrame]
  -[SBInlineAppExposeContainerViewController _liveSceneIDsExcludingCurrentRole:matchingBundleIdentifier:forTransitionContext:]
  -[SBInlineAppExposeContainerViewController _newInlineDisplayItemFromSceneHandle:]
  -[SBInlineAppExposeContainerViewController _frameForInlineAppExposeItemAspectFill:referenceSize:interfaceOrientation:scale:]
  -[SBInlineAppExposeContainerViewController _inlineDisplayItemInLayoutState:]


UIGestureRecognizerTransformAnalyzerInfo : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  {CGPoint=dd} translation
 @property  double translationMagnitude
 @property  {CGPoint=dd} absoluteTranslation
 @property  double scale
 @property  double rotation

  // instance methods
  -[UIGestureRecognizerTransformAnalyzerInfo _reset]
  -[UIGestureRecognizerTransformAnalyzerInfo translation]
  -[UIGestureRecognizerTransformAnalyzerInfo _setRotation:]
  -[UIGestureRecognizerTransformAnalyzerInfo rotation]
  -[UIGestureRecognizerTransformAnalyzerInfo absoluteTranslation]
  -[UIGestureRecognizerTransformAnalyzerInfo _setScale:]
  -[UIGestureRecognizerTransformAnalyzerInfo scale]
  -[UIGestureRecognizerTransformAnalyzerInfo _setTranslation:]
  -[UIGestureRecognizerTransformAnalyzerInfo _setTranslationMagnitude:]
  -[UIGestureRecognizerTransformAnalyzerInfo _setAbsoluteTranslation:]
  -[UIGestureRecognizerTransformAnalyzerInfo translationMagnitude]


UIGestureRecognizerTransformAnalyzer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  int dominantComponent
 @property  double translationWeight
 @property  double pinchingWeight
 @property  double rotationWeight
 @property  UIGestureRecognizerTransformAnalyzerInfo *smoothedInfo

  // instance methods
  -[UIGestureRecognizerTransformAnalyzer setRotationWeight:]
  -[UIGestureRecognizerTransformAnalyzer init]
  -[UIGestureRecognizerTransformAnalyzer setPinchingWeight:]
  -[UIGestureRecognizerTransformAnalyzer .cxx_destruct]
  -[UIGestureRecognizerTransformAnalyzer rotationWeight]
  -[UIGestureRecognizerTransformAnalyzer setTranslationWeight:]
  -[UIGestureRecognizerTransformAnalyzer analyzeTouches:]
  -[UIGestureRecognizerTransformAnalyzer reset]
  -[UIGestureRecognizerTransformAnalyzer translationWeight]
  -[UIGestureRecognizerTransformAnalyzer dominantComponent]
  -[UIGestureRecognizerTransformAnalyzer pinchingWeight]
  -[UIGestureRecognizerTransformAnalyzer smoothedInfo]


SBAppClipPlaceholderLayoutElementViewController : SBLayoutElementViewController <SBSceneViewStatusBarAssertionObserver, SBApplicationSceneStatusBarDescriberProviding, SBApplicationSceneStatusBarDescribing, SBSceneLayoutMedusaStatusBarAssertionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBApplicationSceneStatusBarDescribing> *statusBarDescriber
 @property  <SBDeviceApplicationSceneStatusBarStateObserver> *statusBarDelegate
 @property  long long statusBarStyle
 @property  BOOL statusBarHidden
 @property  double statusBarAlpha
 @property  long long statusBarOrientation
 @property  int statusBarStyleOverridesToSuppress
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} statusBarAvoidanceFrame
 @property  BOOL sceneWantsDeviceOrientationEventsEnabled
 @property  NSString *statusBarSceneIdentifier
 @property  _UIStatusBarData *overlayStatusBarData
 @property  SBDeviceApplicationSceneStatusBarBreadcrumbProvider *breadcrumbProvider
 @property  SBDeviceApplicationSceneHandle *classicApplicationSceneHandleIfExists
 @property  FBScene *sceneToHandleStatusBarTapIfExists

  // instance methods
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAssertionWithStatusBarHidden:atLevel:]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarDescriber]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarSceneIdentifier]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarOrientation]
  -[SBAppClipPlaceholderLayoutElementViewController viewDidLoad]
  -[SBAppClipPlaceholderLayoutElementViewController overlayStatusBarData]
  -[SBAppClipPlaceholderLayoutElementViewController sceneToHandleStatusBarTapIfExists]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAssertionDidUpdate:]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAvoidanceFrame]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAlpha]
  -[SBAppClipPlaceholderLayoutElementViewController _beginObservingApplicationInstalls]
  -[SBAppClipPlaceholderLayoutElementViewController _installedApplicationsDidChange:]
  -[SBAppClipPlaceholderLayoutElementViewController configureWithWorkspaceEntity:forLayoutElement:layoutState:referenceFrame:]
  -[SBAppClipPlaceholderLayoutElementViewController .cxx_destruct]
  -[SBAppClipPlaceholderLayoutElementViewController SB_conformsToSBApplicationSceneStatusBarDescriberProviding]
  -[SBAppClipPlaceholderLayoutElementViewController _statusBarAssertionDidUpdate]
  -[SBAppClipPlaceholderLayoutElementViewController sceneWantsDeviceOrientationEventsEnabled]
  -[SBAppClipPlaceholderLayoutElementViewController _stopObservingApplicationInstalls]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarHidden]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarStyle]
  -[SBAppClipPlaceholderLayoutElementViewController prepareForReuse]
  -[SBAppClipPlaceholderLayoutElementViewController supportedContentInterfaceOrientations]
  -[SBAppClipPlaceholderLayoutElementViewController _cleanup]
  -[SBAppClipPlaceholderLayoutElementViewController SB_conformsToSBApplicationSceneStatusBarDescribing]
  -[SBAppClipPlaceholderLayoutElementViewController _newDisplayLayoutElementForEntity:]
  -[SBAppClipPlaceholderLayoutElementViewController _launchApplication:]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAssertionDidInvalidate:]
  -[SBAppClipPlaceholderLayoutElementViewController setStatusBarDelegate:]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarStyleOverridesToSuppress]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarStyleForPartWithIdentifier:]
  -[SBAppClipPlaceholderLayoutElementViewController classicApplicationSceneHandleIfExists]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarDelegate]
  -[SBAppClipPlaceholderLayoutElementViewController viewWillAppear:]
  -[SBAppClipPlaceholderLayoutElementViewController breadcrumbProvider]
  -[SBAppClipPlaceholderLayoutElementViewController SB_conformsToSceneLayoutMedusaStatusBarAssertionProviding]
  -[SBAppClipPlaceholderLayoutElementViewController statusBarAssertionWithStatusBarHidden:nubViewHidden:atLevel:]
  -[SBAppClipPlaceholderLayoutElementViewController viewWillDisappear:]
  -[SBAppClipPlaceholderLayoutElementViewController invalidate]
  -[SBAppClipPlaceholderLayoutElementViewController viewDidLayoutSubviews]
  -[SBAppClipPlaceholderLayoutElementViewController _aggregateStatusBarOverrideSettings]
  -[SBAppClipPlaceholderLayoutElementViewController SB_conformsToSceneLayoutStatusBarAssertionProviding]


SBFakeiTunesRestoreTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFakeiTunesRestoreTestRecipe load]

  // instance methods
  -[SBFakeiTunesRestoreTestRecipe title]
  -[SBFakeiTunesRestoreTestRecipe handleVolumeIncrease]
  -[SBFakeiTunesRestoreTestRecipe handleVolumeDecrease]


SBVPPAppRequiresHealingAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBVPPAppRequiresHealingAlertItem initWithApplication:]
  -[SBVPPAppRequiresHealingAlertItem dismissOnLock]
  -[SBVPPAppRequiresHealingAlertItem .cxx_destruct]
  -[SBVPPAppRequiresHealingAlertItem shouldShowInLockScreen]
  -[SBVPPAppRequiresHealingAlertItem configure:requirePasscodeForActions:]


SBProactiveHomeScreenSuggestionProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <ATXHomeScreenSuggestionClientObserver>
 @property  SBHIconManager *iconManager
 @property  ATXHomeScreenPrediction *currentPrediction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProactiveHomeScreenSuggestionProvider rootFolder]
  -[SBProactiveHomeScreenSuggestionProvider initWithIconManager:]
  -[SBProactiveHomeScreenSuggestionProvider currentPrediction]
  -[SBProactiveHomeScreenSuggestionProvider iconManager]
  -[SBProactiveHomeScreenSuggestionProvider processUpdatedPredictions:]
  -[SBProactiveHomeScreenSuggestionProvider .cxx_destruct]
  -[SBProactiveHomeScreenSuggestionProvider suggestionClientDidRefreshSuggestions:]
  -[SBProactiveHomeScreenSuggestionProvider _iconDataSourceInIcon:withUniqueIdentifier:extensionBundleIdentifier:widgetKind:suggestion:]
  -[SBProactiveHomeScreenSuggestionProvider updatePredictions]
  -[SBProactiveHomeScreenSuggestionProvider iconModel]
  -[SBProactiveHomeScreenSuggestionProvider setCurrentPrediction:]
  -[SBProactiveHomeScreenSuggestionProvider removeObserver:]
  -[SBProactiveHomeScreenSuggestionProvider addObserver:]


SBMainSwitcherViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBSwitcherContentViewControllerDataSource, SBSwitcherContentViewControllerDelegate, SBSwitcherDemoFilteringControllerObserver, PTSettingsKeyObserver, SBLayoutStateTransitionObserver, SBLayoutStateTransitionSceneEntityFrameProvider, SBFluidSwitcherGestureManagerDelegate, SBWorkspaceKeyboardFocusControllerObserver, SBAppSwitcherModelDelegate, SBMainDisplayWorkspaceAppInteractionEventSourceObserving, SBButtonEventsHandler>
 @property  NSHashTable *_hideStatusBarAssertions
 @property  <BSInvalidatable> *suspendWallpaperAnimationAssertion
 @property  BOOL canInterruptActiveTransition
 @property  BSAnimationSettings *defaultTransitionAnimationSettings
 @property  SBAppLayout *activeTransientOverlayPresentedAppLayout
 @property  BOOL hasTransientOverlayAppLayouts
 @property  UIViewController<SBSwitcherContentViewControlling> *contentViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainSwitcherViewController sharedInstance]
  +[SBMainSwitcherViewController sharedInstanceIfExists]

  // instance methods
  -[SBMainSwitcherViewController viewDidLoad]
  -[SBMainSwitcherViewController handleHomeButtonPress]
  -[SBMainSwitcherViewController isMainSwitcherVisible]
  -[SBMainSwitcherViewController handleHeadsetButtonPress:]
  -[SBMainSwitcherViewController switcherContentController:transitionEventForContext:identifier:phase:animated:]
  -[SBMainSwitcherViewController defaultTransitionAnimationSettings]
  -[SBMainSwitcherViewController _overrideInterfaceOrientationMechanics]
  -[SBMainSwitcherViewController handleLockButtonPress]
  -[SBMainSwitcherViewController switcherContentController:hiddenAppLayoutsForBundleIdentifier:]
  -[SBMainSwitcherViewController handleHomeButtonLongPress]
  -[SBMainSwitcherViewController homeGestureBottomEdgeRecognizer]
  -[SBMainSwitcherViewController setSuspendWallpaperAnimationAssertion:]
  -[SBMainSwitcherViewController _switcherModelRemovalResultsForRequest:forReason:]
  -[SBMainSwitcherViewController handleVolumeDownButtonPress]
  -[SBMainSwitcherViewController matchingIconViewForIconView:]
  -[SBMainSwitcherViewController _evaluateAsynchronousRenderingEnablement]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenAlpha:withAnimationMode:completion:]
  -[SBMainSwitcherViewController handleVolumeUpButtonPress]
  -[SBMainSwitcherViewController _overrideWindowActiveInterfaceOrientation]
  -[SBMainSwitcherViewController sceneEntityFrameForWorkspaceEntity:inLayoutState:]
  -[SBMainSwitcherViewController handleHomeButtonDoublePress]
  -[SBMainSwitcherViewController _deleteAppLayoutsMatchingBundleIdentifier:]
  -[SBMainSwitcherViewController switcherContentController:setContainerStatusBarHidden:animationDuration:]
  -[SBMainSwitcherViewController settings:changedValueForKey:]
  -[SBMainSwitcherViewController _currentUnlockedEnvironmentMode]
  -[SBMainSwitcherViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMainSwitcherViewController _setContentOrientation:forContentViewController:]
  -[SBMainSwitcherViewController switcherContentController:shouldMorphFromPiPForTransitionContext:]
  -[SBMainSwitcherViewController _reqlinquishAssertion:]
  -[SBMainSwitcherViewController sbActiveInterfaceOrientation]
  -[SBMainSwitcherViewController _currentFloatingAppLayout]
  -[SBMainSwitcherViewController minimumHomeScreenScale]
  -[SBMainSwitcherViewController failMultitaskingGesturesForReason:]
  -[SBMainSwitcherViewController _cacheAppList]
  -[SBMainSwitcherViewController _addAppLayoutToFront:]
  -[SBMainSwitcherViewController switcherContentController:reopenHiddenAppLayoutsWithBundleIdentifier:]
  -[SBMainSwitcherViewController _hasAppLayoutBeenUserKilledWithinThresholdToCreateNewScene:]
  -[SBMainSwitcherViewController _warmAppInfoForAppsInList]
  -[SBMainSwitcherViewController suspendWallpaperAnimationAssertion]
  -[SBMainSwitcherViewController _noteUIWillLock]
  -[SBMainSwitcherViewController canInterruptActiveTransition]
  -[SBMainSwitcherViewController frameForInlineAppExposeItemAspectFill:]
  -[SBMainSwitcherViewController _releaseKeyboardFocus]
  -[SBMainSwitcherViewController _continuityAppSuggestionChanged:]
  -[SBMainSwitcherViewController shouldAcceleratedHomeButtonPressBegin]
  -[SBMainSwitcherViewController _configureRequest:forSwitcherTransitionRequest:withEventLabel:]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenScale:withAnimationMode:completion:]
  -[SBMainSwitcherViewController updateUserInteractionEnabledForSwitcherContentController:]
  -[SBMainSwitcherViewController switcherContentController:layoutStateTransitionDidEndWithTransitionContext:]
  -[SBMainSwitcherViewController switcherContentController:deletedAppLayout:forReason:]
  -[SBMainSwitcherViewController _performSceneDestructionForModelRemovalResults:]
  -[SBMainSwitcherViewController switcherContentController:bringAppLayoutToFront:]
  -[SBMainSwitcherViewController switcherContentController:transitionEventForLayoutState:identifier:phase:animated:]
  -[SBMainSwitcherViewController _isAcquiredTransientOverlayViewController:]
  -[SBMainSwitcherViewController dismissMainSwitcherNoninteractivelyAnimated:]
  -[SBMainSwitcherViewController isSlideOverSwitcherVisible]
  -[SBMainSwitcherViewController _currentVisibleFloatingItem]
  -[SBMainSwitcherViewController dealloc]
  -[SBMainSwitcherViewController _removeCardForDisplayIdentifier:]
  -[SBMainSwitcherViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:didBeginGesture:]
  -[SBMainSwitcherViewController _deviceApplicationSceneHandleForDisplayItem:creatingIfNeeded:]
  -[SBMainSwitcherViewController shouldAutorotate]
  -[SBMainSwitcherViewController recentAppLayouts]
  -[SBMainSwitcherViewController _shouldPrioritizeSortOrderForAppLayout:]
  -[SBMainSwitcherViewController homeScreenInterfaceOrientation]
  -[SBMainSwitcherViewController _isPerformingModelTransitionForReplacementAppLayout:]
  -[SBMainSwitcherViewController .cxx_destruct]
  -[SBMainSwitcherViewController switcherContentController:shouldMorphToPiPForTransitionContext:]
  -[SBMainSwitcherViewController requestInAppStatusBarHiddenAssertionForReason:animated:]
  -[SBMainSwitcherViewController frameForFloatingAppLayoutInInterfaceOrientation:floatingConfiguration:]
  -[SBMainSwitcherViewController dismissAllSwitchersNoninteractivelyAnimated:]
  -[SBMainSwitcherViewController _activateSwitcherValidatorWithEventLabel:animated:]
  -[SBMainSwitcherViewController _transientOverlayPesentationManager]
  -[SBMainSwitcherViewController activateMainSwitcherNoninteractivelyWithSource:animated:]
  -[SBMainSwitcherViewController _cancelPiPForDisplayItem:]
  -[SBMainSwitcherViewController switcherContentController:supportsHeaderItemsForAppLayout:]
  -[SBMainSwitcherViewController activeTransientOverlayPresentedAppLayoutForSwitcherContentController:]
  -[SBMainSwitcherViewController windowsToExcludeForCrossfadeSnapshotForSwitcherContentController:]
  -[SBMainSwitcherViewController isInAppStatusBarRequestedHiddenForSwitcherContentController:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:didEndGesture:]
  -[SBMainSwitcherViewController switcherContentController:setWallpaperScale:withAnimationMode:completion:]
  -[SBMainSwitcherViewController _insertAppLayouts:atIndexes:modelMutationBlock:completion:]
  -[SBMainSwitcherViewController switcherContentController:supportsKillingOfAppLayout:]
  -[SBMainSwitcherViewController viewControllerForTransientOverlayAppLayout:]
  -[SBMainSwitcherViewController _addAppLayoutToFront:removeAppLayout:]
  -[SBMainSwitcherViewController _displayItemForEntity:]
  -[SBMainSwitcherViewController switcherContentController:setWallpaperStyle:]
  -[SBMainSwitcherViewController _hideStatusBarAssertions]
  -[SBMainSwitcherViewController hasAppLayoutForTransientOverlayViewController:]
  -[SBMainSwitcherViewController deleteAppLayoutForDisplayItem:]
  -[SBMainSwitcherViewController acquireAllowHiddenAppAssertionForBundleIdentifier:reason:]
  -[SBMainSwitcherViewController _purgeHiddenAppLayoutsForUILock]
  -[SBMainSwitcherViewController _dismissSwitcherNoninteractivelyToAppLayout:dismissFloatingSwitcher:animated:]
  -[SBMainSwitcherViewController switcherInterfaceOrientationForContentController:]
  -[SBMainSwitcherViewController hasTransientOverlayAppLayouts]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenBackdropBlurProgress:withAnimationMode:completion:]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenBackdropBlurType:]
  -[SBMainSwitcherViewController animationControllerForTransitionRequest:]
  -[SBMainSwitcherViewController _init]
  -[SBMainSwitcherViewController activeTransientOverlayPresentedAppLayout]
  -[SBMainSwitcherViewController switcherContentController:shouldResignActiveForStartOfTransition:]
  -[SBMainSwitcherViewController _rebuildAppListCache]
  -[SBMainSwitcherViewController supportedInterfaceOrientations]
  -[SBMainSwitcherViewController _removeAcquiredTransientOverlayViewController:]
  -[SBMainSwitcherViewController _doUglySiriActivationThingsIfNecessary:]
  -[SBMainSwitcherViewController switcherContentControllerIsFloatingApplicationSupported:]
  -[SBMainSwitcherViewController _switcherServiceAdded:]
  -[SBMainSwitcherViewController switcherContentController:setCacheAsynchronousRenderingSurfaces:]
  -[SBMainSwitcherViewController eventSource:userTouchedApplication:]
  -[SBMainSwitcherViewController _hasAppLayoutContainingDisplayItem:]
  -[SBMainSwitcherViewController _insertAppLayout:atIndex:modelMutationBlock:completion:]
  -[SBMainSwitcherViewController _acquireAssertion:]
  -[SBMainSwitcherViewController switcherContentController:performTransitionWithRequest:gestureInitiated:]
  -[SBMainSwitcherViewController _lockKeyboardFocus]
  -[SBMainSwitcherViewController eventSource:userDeletedWebBookmark:]
  -[SBMainSwitcherViewController _insertCardForDisplayIdentifier:atIndex:]
  -[SBMainSwitcherViewController _switcherModelChanged:]
  -[SBMainSwitcherViewController _appLayoutFromPrimaryLayoutItem:sideLayoutElement:configuration:]
  -[SBMainSwitcherViewController updateWindowVisibilityForSwitcherContentController:]
  -[SBMainSwitcherViewController _persistenceIdentifiersForBundleIdentifier:]
  -[SBMainSwitcherViewController _entityForDisplayItem:]
  -[SBMainSwitcherViewController _switcherServiceRemoved:]
  -[SBMainSwitcherViewController cancelActiveGestureForSwitcherContentController:]
  -[SBMainSwitcherViewController hasAppLayoutForDisplayItem:]
  -[SBMainSwitcherViewController handleApplicationSceneEntityDestructionIntent:forEntities:]
  -[SBMainSwitcherViewController _updateAssertion:]
  -[SBMainSwitcherViewController frameForItemWithRole:inMainAppLayout:interfaceOrientation:]
  -[SBMainSwitcherViewController _lockOrientationForSwitcherWithLayoutState:]
  -[SBMainSwitcherViewController _setHideStatusBarAssertions:]
  -[SBMainSwitcherViewController _updateContentViewInterfaceOrientation:]
  -[SBMainSwitcherViewController _appForDisplayItem:]
  -[SBMainSwitcherViewController _shouldAddAppLayoutToFront:]
  -[SBMainSwitcherViewController switcherDemoFilteringControllerDidChangeHiddenApplicationBundleIDs:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManagerSupportsFloatingApplication:]
  -[SBMainSwitcherViewController _destroyAppListCache]
  -[SBMainSwitcherViewController isInAppStatusBarHidden]
  -[SBMainSwitcherViewController switcherContentController:handlePlusButtonActionForBundleIdentifier:]
  -[SBMainSwitcherViewController toggleMainSwitcherNoninteractivelyWithSource:animated:]
  -[SBMainSwitcherViewController _removeAppLayout:forReason:]
  -[SBMainSwitcherViewController _currentAppLayout]
  -[SBMainSwitcherViewController _setAsynchronousRenderingEnabled:withMinificationFilter:forLayerTarget:presentationManager:]
  -[SBMainSwitcherViewController _addAcquiredTransientOverlayViewController:forAppLayout:]
  -[SBMainSwitcherViewController programmaticSwitchAppGestureMoveToLeft]
  -[SBMainSwitcherViewController addAppLayoutForTransientOverlayViewController:]
  -[SBMainSwitcherViewController _toggleSwitcherTransitionValidatorAnimated:]
  -[SBMainSwitcherViewController viewWillAppear:]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:didBeginDraggingWindowWithSceneIdentifier:]
  -[SBMainSwitcherViewController _enumerateTransientOverlayViewControllersUsingBlock:]
  -[SBMainSwitcherViewController _updateBestAppSuggestion]
  -[SBMainSwitcherViewController appSwitcherModel:didRemoveAppLayoutForFallingOffList:]
  -[SBMainSwitcherViewController removeAppLayoutTransientOverlayViewController:]
  -[SBMainSwitcherViewController _dismissSwitcherValidatorToAppLayout:dismissFloatingSwitcher:withEventLabel:animated:]
  -[SBMainSwitcherViewController keyboardFocusController:didUpdateFocusToPID:sceneID:]
  -[SBMainSwitcherViewController appLayoutForWorkspaceTransientOverlay:]
  -[SBMainSwitcherViewController shouldPerformPreTransitionInsertionOfAppLayout:forTransitionWithContext:]
  -[SBMainSwitcherViewController appLayoutsForSwitcherContentController:]
  -[SBMainSwitcherViewController switcherContentController:setPointerInteractionsEnabled:]
  -[SBMainSwitcherViewController _modelRemovalRequestForDisplayItemResolutionResults:]
  -[SBMainSwitcherViewController _updateDisplayLayoutElementForLayoutState:]
  -[SBMainSwitcherViewController createWorkspaceTransientOverlayForAppLayout:]
  -[SBMainSwitcherViewController addAppLayoutForDisplayItem:completion:]
  -[SBMainSwitcherViewController _resultsForDisplayItemRemovalResolutionRequest:]
  -[SBMainSwitcherViewController switcherContentController:setContentOrientation:]
  -[SBMainSwitcherViewController handleHomeButtonSinglePressUp]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:willEndDraggingWindowWithSceneIdentifier:]
  -[SBMainSwitcherViewController _supportsFloatingApplication]
  -[SBMainSwitcherViewController _appLayoutContainingDisplayItem:]
  -[SBMainSwitcherViewController _releaseSwitcherOrientationLock]
  -[SBMainSwitcherViewController fluidSwitcherGestureManager:didUpdateGesture:]
  -[SBMainSwitcherViewController _loadContentViewControllerIfNecessary]
  -[SBMainSwitcherViewController switcherContentController:activatedBestAppSuggestion:]
  -[SBMainSwitcherViewController contentViewController]
  -[SBMainSwitcherViewController programmaticSwitchAppGestureMoveToRight]
  -[SBMainSwitcherViewController _applicationDidExit:]
  -[SBMainSwitcherViewController applicationSceneSettingsFrameForInterfaceOrientation:floatingConfiguration:]
  -[SBMainSwitcherViewController switcherContentController:setHomeScreenDimmingAlpha:withAnimationMode:completion:]
  -[SBMainSwitcherViewController _isBestAppSuggestionEligibleForSwitcher:]
  -[SBMainSwitcherViewController _recentAppLayoutsController]
  -[SBMainSwitcherViewController applicationSceneTransitionContextForDismissingFloatingInlineAppExpose]
  -[SBMainSwitcherViewController isAnySwitcherVisible]
  -[SBMainSwitcherViewController mainSwitcherWindow]
  -[SBMainSwitcherViewController scaleForDownscaledSnapshotGenerationForSceneHandle:]


SBSwipeToKillSwitcherModifierEvent : SBSwitcherModifierEvent
 @property  SBAppLayout *appLayout
 @property  double progress

  // instance methods
  -[SBSwipeToKillSwitcherModifierEvent copyWithZone:]
  -[SBSwipeToKillSwitcherModifierEvent appLayout]
  -[SBSwipeToKillSwitcherModifierEvent .cxx_destruct]
  -[SBSwipeToKillSwitcherModifierEvent type]
  -[SBSwipeToKillSwitcherModifierEvent progress]
  -[SBSwipeToKillSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBSwipeToKillSwitcherModifierEvent initWithAppLayout:progress:]


SBIconRelayoutRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIconRelayoutRecipe load]

  // instance methods
  -[SBIconRelayoutRecipe title]
  -[SBIconRelayoutRecipe handleVolumeIncrease]
  -[SBIconRelayoutRecipe handleVolumeDecrease]


SBInCallPresentationSceneUpdateContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *analyticsSource
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceFrame
 @property  long long executionTarget
 @property  @? completionHandler
 @property  @? postSceneUpdateHandler
 @property  @? transitionRequestBuilderBlock
 @property  @? validatorHandler

  // instance methods
  -[SBInCallPresentationSceneUpdateContext setReferenceFrame:]
  -[SBInCallPresentationSceneUpdateContext executionTarget]
  -[SBInCallPresentationSceneUpdateContext .cxx_destruct]
  -[SBInCallPresentationSceneUpdateContext referenceFrame]
  -[SBInCallPresentationSceneUpdateContext analyticsSource]
  -[SBInCallPresentationSceneUpdateContext setAnalyticsSource:]
  -[SBInCallPresentationSceneUpdateContext completionHandler]
  -[SBInCallPresentationSceneUpdateContext setCompletionHandler:]
  -[SBInCallPresentationSceneUpdateContext initWithReferenceFrame:analyticsSource:transitionRequestBuilderBlock:]
  -[SBInCallPresentationSceneUpdateContext setPostSceneUpdateHandler:]
  -[SBInCallPresentationSceneUpdateContext setExecutionTarget:]
  -[SBInCallPresentationSceneUpdateContext setValidatorHandler:]
  -[SBInCallPresentationSceneUpdateContext postSceneUpdateHandler]
  -[SBInCallPresentationSceneUpdateContext transitionRequestBuilderBlock]
  -[SBInCallPresentationSceneUpdateContext validatorHandler]
  -[SBInCallPresentationSceneUpdateContext setTransitionRequestBuilderBlock:]


SBInteractiveScreenshotCommitWorkspaceTransaction : SBMainWorkspaceTransaction <SBTransientOverlayPresentWorkspaceTransactionObserver>
 @property  NSUUID *gestureSessionID
 @property  BOOL hasFinishedFlashAnimation
 @property  BOOL hasFinishedSettlingAnimation
 @property  SBTransientOverlayViewController *screenshotMarkupTransientOverlayViewController
 @property  <SBInteractiveScreenshotCommitWorkspaceTransactionDelegate> *interactiveScreenshotCommitDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInteractiveScreenshotCommitWorkspaceTransaction _begin]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction .cxx_destruct]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction _updateState]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction transientOverlayPresentWorkspaceTransactionDidPerformPresentation:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction _handleWatchdogTimeout]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction initWithTransitionRequest:gestureSessionID:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction setHasFinishedFlashAnimation:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction setHasFinishedSettlingAnimation:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction setScreenshotMarkupTransientOverlayViewController:]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction gestureSessionID]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction hasFinishedFlashAnimation]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction hasFinishedSettlingAnimation]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction screenshotMarkupTransientOverlayViewController]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction interactiveScreenshotCommitDelegate]
  -[SBInteractiveScreenshotCommitWorkspaceTransaction setInteractiveScreenshotCommitDelegate:]


SBIdleTimerGlobalCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIdleTimerObserving, SBIdleTimerGlobalStateMonitorObserving, SBIdleTimerCoordinating>
 @property  <SBIdleTimer> *idleTimer
 @property  <SBIdleTimerProviding> *idleTimerProvider
 @property  NSMutableDictionary *idleTimerDisableAssertions
 @property  <SBIdleTimerGlobalCoordinatorDelegate> *delegate
 @property  BOOL idleTimerDisabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerGlobalCoordinator sharedInstance]
  +[SBIdleTimerGlobalCoordinator _sharedInstanceCreateIfNeeded:]
  +[SBIdleTimerGlobalCoordinator sharedInstanceIfExists]

  // instance methods
  -[SBIdleTimerGlobalCoordinator _addStateCaptureHandlers]
  -[SBIdleTimerGlobalCoordinator _idleTimerProvider]
  -[SBIdleTimerGlobalCoordinator idleTimerDidResetForUserAttention:]
  -[SBIdleTimerGlobalCoordinator _idleTimerPrefsChanged]
  -[SBIdleTimerGlobalCoordinator idleTimerDidRefresh:]
  -[SBIdleTimerGlobalCoordinator _areIdleTimerDisableAssertionsPrevented]
  -[SBIdleTimerGlobalCoordinator init]
  -[SBIdleTimerGlobalCoordinator resetIdleTimerForReason:]
  -[SBIdleTimerGlobalCoordinator idleTimerProvider:didProposeBehavior:forReason:]
  -[SBIdleTimerGlobalCoordinator idleTimer]
  -[SBIdleTimerGlobalCoordinator acquireIdleTimerDisableAssertionForReason:]
  -[SBIdleTimerGlobalCoordinator dealloc]
  -[SBIdleTimerGlobalCoordinator _activeIdleTimerProvider]
  -[SBIdleTimerGlobalCoordinator .cxx_destruct]
  -[SBIdleTimerGlobalCoordinator _logEffectiveLockTimeout]
  -[SBIdleTimerGlobalCoordinator _setIdleTimerProvider:]
  -[SBIdleTimerGlobalCoordinator _registerInternalDisableAssertionsTestRecipe]
  -[SBIdleTimerGlobalCoordinator _updateGlobalStateDisableAssertions]
  -[SBIdleTimerGlobalCoordinator _hasIdleTimerDisableAssertions]
  -[SBIdleTimerGlobalCoordinator _idleTimerDisableAssertions]
  -[SBIdleTimerGlobalCoordinator _updateIdleTimerForProvider:behavior:forReason:]
  -[SBIdleTimerGlobalCoordinator _updateIdleTimerForProvider:behavior:descriptor:forReason:]
  -[SBIdleTimerGlobalCoordinator idleTimerGlobalStateMonitor:changedForReason:]
  -[SBIdleTimerGlobalCoordinator _unregisterTestRecipes]
  -[SBIdleTimerGlobalCoordinator resetIdleTimerIfNonConsecutiveSource:forReason:]
  -[SBIdleTimerGlobalCoordinator _setIdleTimerSourceEnabled:forReason:]
  -[SBIdleTimerGlobalCoordinator _registerClientDisableAssertionsTestRecipe]
  -[SBIdleTimerGlobalCoordinator _updateIdleTimerForReason:]
  -[SBIdleTimerGlobalCoordinator layoutMonitor:didUpdateDisplayLayout:withContext:]
  -[SBIdleTimerGlobalCoordinator _setIdleTimerDisableAssertions:]
  -[SBIdleTimerGlobalCoordinator setDelegate:]
  -[SBIdleTimerGlobalCoordinator _setIdleTimerWithDescriptor:forReason:]
  -[SBIdleTimerGlobalCoordinator isIdleTimerDisabled]
  -[SBIdleTimerGlobalCoordinator _stateCaptureDescription]
  -[SBIdleTimerGlobalCoordinator delegate]
  -[SBIdleTimerGlobalCoordinator _registerTestRecipes]
  -[SBIdleTimerGlobalCoordinator resetIdleTimer]
  -[SBIdleTimerGlobalCoordinator _applyActiveIdleTimerDescriptorForReason:]
  -[SBIdleTimerGlobalCoordinator start]


SBDaemonHandler : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBDaemonHandler stateDescription]
  +[SBDaemonHandler initialize]
  +[SBDaemonHandler addRequest:forKey:forDaemonPid:]
  +[SBDaemonHandler noteDaemonCanceled:]
  +[SBDaemonHandler removeRequestForKey:forDaemonPid:]


SBDaemonRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  @? enabler
 @property  @? disabler

  // class methods
  +[SBDaemonRequest requestWithEnabler:disabler:]

  // instance methods
  -[SBDaemonRequest .cxx_destruct]
  -[SBDaemonRequest enabler]
  -[SBDaemonRequest disabler]
  -[SBDaemonRequest setEnabler:]
  -[SBDaemonRequest setDisabler:]
  -[SBDaemonRequest dispatchEnablerOnQueue:]
  -[SBDaemonRequest dispatchDisablerOnQueue:]


SBDaemonContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBDaemonContext .cxx_destruct]
  -[SBDaemonContext pid]
  -[SBDaemonContext initWithPid:queue:]
  -[SBDaemonContext addRequest:forKey:]
  -[SBDaemonContext removeRequestForKey:]
  -[SBDaemonContext _newDispatchSourceForPid:queue:]
  -[SBDaemonContext _handleCancelation]


SBWallpaperEffectViewBase : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <_SBFakeBlurObserver, SBWallpaperObserver>
 @property  UIView<_SBFakeBlur> *blurView
 @property  UIView *grayscaleTintView
 @property  UIView *colorTintView
 @property  UIView<_SBFakeBlur> *transitionBlurView
 @property  UIView *transitionGrayscaleTintView
 @property  UIView *transitionColorTintView
 @property  UIImageView *maskImageView
 @property  UIView *blurMaskingContainer
 @property  UIView *tintMaskingContainer
 @property  <SBWallpaperPresenting><SBWallpaperLegibilityProviding> *wallpaperPresenter
 @property  double zoomScale
 @property  BOOL fullscreen
 @property  BOOL forcesOpaque
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWallpaperEffectViewBase prepareToAnimateToTransitionState:]
  -[SBWallpaperEffectViewBase offsetWallpaperBy:]
  -[SBWallpaperEffectViewBase _needsBlurViewForStyle:]
  -[SBWallpaperEffectViewBase _isEffectivelyFullscreen]
  -[SBWallpaperEffectViewBase setWallpaperStyle:]
  -[SBWallpaperEffectViewBase forcesOpaque]
  -[SBWallpaperEffectViewBase _configureViewsForFullscreen:]
  -[SBWallpaperEffectViewBase currentTransitionStateIsOpaque]
  -[SBWallpaperEffectViewBase setFullscreen:]
  -[SBWallpaperEffectViewBase wallpaperStyle]
  -[SBWallpaperEffectViewBase _configureGrayscaleAndColorTintViewForStartStyle:]
  -[SBWallpaperEffectViewBase blurView]
  -[SBWallpaperEffectViewBase tintMaskingContainer]
  -[SBWallpaperEffectViewBase grayscaleTintView]
  -[SBWallpaperEffectViewBase maskImageView]
  -[SBWallpaperEffectViewBase _setFrame:forceUpdateBackgroundImage:]
  -[SBWallpaperEffectViewBase _accessibilityReduceTransparencyChanged:]
  -[SBWallpaperEffectViewBase setAppearanceStorage:]
  -[SBWallpaperEffectViewBase setTransitionBlurView:]
  -[SBWallpaperEffectViewBase setTintMaskingContainer:]
  -[SBWallpaperEffectViewBase _configureFromScratch]
  -[SBWallpaperEffectViewBase setBarTintColor:]
  -[SBWallpaperEffectViewBase setBlurView:]
  -[SBWallpaperEffectViewBase wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBWallpaperEffectViewBase setTransitionColorTintView:]
  -[SBWallpaperEffectViewBase setBlurMaskingContainer:]
  -[SBWallpaperEffectViewBase blurMaskingContainer]
  -[SBWallpaperEffectViewBase setZoomScale:]
  -[SBWallpaperEffectViewBase setBarStyle:]
  -[SBWallpaperEffectViewBase _configureViews]
  -[SBWallpaperEffectViewBase isFullscreen]
  -[SBWallpaperEffectViewBase _updateWallpaperAverageColor:]
  -[SBWallpaperEffectViewBase setForcesOpaque:]
  -[SBWallpaperEffectViewBase setTransitionState:]
  -[SBWallpaperEffectViewBase transitionBlurView]
  -[SBWallpaperEffectViewBase setTransitionGrayscaleTintView:]
  -[SBWallpaperEffectViewBase setMaskImage:masksBlur:masksTint:]
  -[SBWallpaperEffectViewBase transitionColorTintView]
  -[SBWallpaperEffectViewBase wallpaperPresenter]
  -[SBWallpaperEffectViewBase wallpaperDidChangeForVariant:]
  -[SBWallpaperEffectViewBase updateBackgroundImage]
  -[SBWallpaperEffectViewBase setBarWantsAdaptiveBackdrop:]
  -[SBWallpaperEffectViewBase zoomScale]
  -[SBWallpaperEffectViewBase setTranslucent:]
  -[SBWallpaperEffectViewBase transformOptions]
  -[SBWallpaperEffectViewBase _setTransitionFraction:]
  -[SBWallpaperEffectViewBase initWithWallpaperPresenter:variant:transformOptions:]
  -[SBWallpaperEffectViewBase transitionGrayscaleTintView]
  -[SBWallpaperEffectViewBase setMaskImageView:]
  -[SBWallpaperEffectViewBase _setIsContainedInPopover:]
  -[SBWallpaperEffectViewBase _configureForCurrentBlurStyle]
  -[SBWallpaperEffectViewBase initWithFrame:]
  -[SBWallpaperEffectViewBase appearanceStorage]
  -[SBWallpaperEffectViewBase setTransformOptions:]
  -[SBWallpaperEffectViewBase setColorTintView:]
  -[SBWallpaperEffectViewBase dealloc]
  -[SBWallpaperEffectViewBase .cxx_destruct]
  -[SBWallpaperEffectViewBase willMoveToWindow:]
  -[SBWallpaperEffectViewBase setGrayscaleTintView:]
  -[SBWallpaperEffectViewBase fakeBlurView:didChangeStyle:]
  -[SBWallpaperEffectViewBase colorTintView]
  -[SBWallpaperEffectViewBase setStyle:]
  -[SBWallpaperEffectViewBase setHidden:]
  -[SBWallpaperEffectViewBase layoutSubviews]
  -[SBWallpaperEffectViewBase initWithCoder:]


_SBMaskingContainerView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[_SBMaskingContainerView initWithFrame:]


_SBTintView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[_SBTintView initWithFrame:]


SBScreenWakeAnimationController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFScreenWakeAnimationControlling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBScreenWakeAnimationController sharedInstance]
  +[SBScreenWakeAnimationController _animationSpeedForBacklightChangeSource:isWake:]
  +[SBScreenWakeAnimationController backlightFadeDurationForSource:isWake:]

  // instance methods
  -[SBScreenWakeAnimationController init]
  -[SBScreenWakeAnimationController dealloc]
  -[SBScreenWakeAnimationController .cxx_destruct]
  -[SBScreenWakeAnimationController prepareToWakeForSource:timeAlpha:statusBarAlpha:target:completion:]
  -[SBScreenWakeAnimationController _setInteractionEventsIgnored:]
  -[SBScreenWakeAnimationController succinctDescriptionBuilder]
  -[SBScreenWakeAnimationController _setLastBacklightChangeSource:]
  -[SBScreenWakeAnimationController _runCompletionHandlerForWake:]
  -[SBScreenWakeAnimationController _setRelevantLockScreenViewsHidden:]
  -[SBScreenWakeAnimationController _handleAnimationCompletionIfNecessaryForWaking:]
  -[SBScreenWakeAnimationController _startWakeAnimationsForWaking:animationSettings:]
  -[SBScreenWakeAnimationController succinctDescription]
  -[SBScreenWakeAnimationController _startWakeIfNecessary]
  -[SBScreenWakeAnimationController _cleanupAnimationWhenInterruptingWaking:]
  -[SBScreenWakeAnimationController isWakeAnimationInProgressForSource:]
  -[SBScreenWakeAnimationController _animationSettingsForBacklightChangeSource:isWake:]
  -[SBScreenWakeAnimationController sleepForSource:completion:]
  -[SBScreenWakeAnimationController interruptSleepAnimationIfNeeded]
  -[SBScreenWakeAnimationController setScreenWakeTemporarilyDisabled:forReason:]
  -[SBScreenWakeAnimationController sleepForSource:target:completion:]
  -[SBScreenWakeAnimationController isWakeAnimationInProgress]
  -[SBScreenWakeAnimationController isSleepAnimationInProgress]
  -[SBScreenWakeAnimationController descriptionWithMultilinePrefix:]
  -[SBScreenWakeAnimationController descriptionBuilderWithMultilinePrefix:]


SBAlertItemPresentation : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBAlertItem *alertItem
 @property  <SBAlertItemPresenter> *presenter
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAlertItemPresentation setPresenter:]
  -[SBAlertItemPresentation .cxx_destruct]
  -[SBAlertItemPresentation alertItem]
  -[SBAlertItemPresentation setAlertItem:]
  -[SBAlertItemPresentation succinctDescriptionBuilder]
  -[SBAlertItemPresentation presenter]
  -[SBAlertItemPresentation succinctDescription]
  -[SBAlertItemPresentation isEqual:]
  -[SBAlertItemPresentation descriptionWithMultilinePrefix:]
  -[SBAlertItemPresentation descriptionBuilderWithMultilinePrefix:]
  -[SBAlertItemPresentation initWithAlertItem:presenter:]


SBFloatingDockController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFloatingDockRootViewControllerDelegate, SBFolderPresentationObserver, SBSystemGestureRecognizerDelegate, SBRootFolderPageStateObserver, SBAssistantObserver, BSDescriptionProviding, SBReusableViewMapDelegate, SBLayoutStateTransitionObserver, SBHomeGestureParticipantDelegate, SBIconViewQuerying, SBIconLocationPresenting, SBIconViewProviding>
 @property  SBFailingSystemGestureRecognizer *dismissFloatingDockSystemGestureRecognizer
 @property  SBIconController *iconController
 @property  SBMainScreenActiveInterfaceOrientationWindow *floatingDockWindow
 @property  SBFloatingDockBehaviorAssertion *activeAssertion
 @property  SBLayoutStateTransitionCoordinator *transitionCoordinator
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  BOOL presentingFolder
 @property  SBFolderController *presentedFolderController
 @property  SBFloatingDockViewController *floatingDockViewController
 @property  <SBFloatingDockControllerDelegate> *delegate
 @property  UIViewController *viewController
 @property  BOOL floatingDockPresented
 @property  BOOL floatingDockFullyPresented
 @property  BOOL wasFloatingDockPresentedByPointer
 @property  BOOL gesturePossible
 @property  SBIndirectPanGestureRecognizer *presentFloatingDockIndirectPanGestureRecognizer
 @property  UIHoverGestureRecognizer *dismissFloatingDockHoverGestureRecognizer
 @property  double maximumFloatingDockHeight
 @property  double floatingDockHeight
 @property  double effectiveFloatingDockHeight
 @property  double preferredVerticalMargin
 @property  double floatingDockViewTopMargin
 @property  double translationFromFullyPresentedFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} floatingDockScreenFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} floatingDockScreenPresentationFrame
 @property  double maximumDockContinuousCornerRadius
 @property  SBIconListView *userIconListView
 @property  SBIconListView *suggestionsIconListView
 @property  SBApplication *requestedSuggestedApplication
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *presentedIconLocations

  // class methods
  +[SBFloatingDockController isFloatingDockSupported]
  +[SBFloatingDockController initialize]

  // instance methods
  -[SBFloatingDockController configureIconView:forIcon:]
  -[SBFloatingDockController viewMap:maxRecycledViewsOfClass:]
  -[SBFloatingDockController iconController]
  -[SBFloatingDockController setHomeGestureParticipant:]
  -[SBFloatingDockController assistantDidDisappear:]
  -[SBFloatingDockController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBFloatingDockController viewController]
  -[SBFloatingDockController assistantWillAppear:]
  -[SBFloatingDockController iconViewForIcon:location:]
  -[SBFloatingDockController recycleIconView:]
  -[SBFloatingDockController setTransitionCoordinator:]
  -[SBFloatingDockController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFloatingDockController viewForSystemGestureRecognizer:]
  -[SBFloatingDockController homeGestureParticipant]
  -[SBFloatingDockController initWithIconController:]
  -[SBFloatingDockController init]
  -[SBFloatingDockController legibilitySettings]
  -[SBFloatingDockController isDisplayingIconView:inLocation:]
  -[SBFloatingDockController dealloc]
  -[SBFloatingDockController rootFolderPageStateProvider:willEndTransitionToState:successfully:]
  -[SBFloatingDockController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFloatingDockController .cxx_destruct]
  -[SBFloatingDockController iconManager:willPerformTransitionWithFolder:presenting:withTransitionCoordinator:]
  -[SBFloatingDockController translationFromFullyPresentedFrame]
  -[SBFloatingDockController userIconListView]
  -[SBFloatingDockController maximumDockContinuousCornerRadius]
  -[SBFloatingDockController presentedFolderController]
  -[SBFloatingDockController floatingDockScreenFrame]
  -[SBFloatingDockController isPresentingFolder]
  -[SBFloatingDockController firstIconViewForIcon:]
  -[SBFloatingDockController dismissPresentedFolderAnimated:completion:]
  -[SBFloatingDockController gestureRecognizerShouldBegin:]
  -[SBFloatingDockController preferredVerticalMargin]
  -[SBFloatingDockController floatingDockScreenPresentationFrame]
  -[SBFloatingDockController layoutUserControlledIconLists:animationType:forceRelayout:]
  -[SBFloatingDockController presentFolderForIcon:location:animated:completion:]
  -[SBFloatingDockController floatingDockViewController]
  -[SBFloatingDockController succinctDescriptionBuilder]
  -[SBFloatingDockController isFloatingDockFullyPresented]
  -[SBFloatingDockController firstIconViewForIcon:inLocations:]
  -[SBFloatingDockController isDisplayingIcon:inLocations:]
  -[SBFloatingDockController isDisplayingIconView:]
  -[SBFloatingDockController setLegibilitySettings:]
  -[SBFloatingDockController viewMap:shouldRecycleView:]
  -[SBFloatingDockController floatingDockHeight]
  -[SBFloatingDockController enumerateDisplayedIconViewsForIcon:usingBlock:]
  -[SBFloatingDockController transitionCoordinator]
  -[SBFloatingDockController succinctDescription]
  -[SBFloatingDockController rootFolderPageStateProvider:willBeginTransitionToState:animated:interactive:]
  -[SBFloatingDockController presentedIconLocations]
  -[SBFloatingDockController rootFolderPageStateProvider:didContinueTransitionToState:progress:]
  -[SBFloatingDockController enumerateDisplayedIconViewsUsingBlock:]
  -[SBFloatingDockController isIconViewRecycled:]
  -[SBFloatingDockController isDisplayingIcon:inLocation:]
  -[SBFloatingDockController rootFolderPageStateProvider:didEndTransitionFromState:toState:successfully:]
  -[SBFloatingDockController recycledViewsContainerProviderForViewMap:]
  -[SBFloatingDockController iconViewMap]
  -[SBFloatingDockController setDelegate:]
  -[SBFloatingDockController dequeueReusableIconViewOfClass:]
  -[SBFloatingDockController floatingDockViewTopMargin]
  -[SBFloatingDockController isDisplayingIcon:]
  -[SBFloatingDockController firstIconViewForIcon:excludingLocations:]
  -[SBFloatingDockController gestureRecognizer:shouldReceiveTouch:]
  -[SBFloatingDockController delegate]
  -[SBFloatingDockController descriptionWithMultilinePrefix:]
  -[SBFloatingDockController _setupStateDumper]
  -[SBFloatingDockController descriptionBuilderWithMultilinePrefix:]
  -[SBFloatingDockController _gestureRecognizerFailed:]
  -[SBFloatingDockController isPresentingIconLocation:]
  -[SBFloatingDockController isFloatingDockPresented]
  -[SBFloatingDockController presentFloatingDockIfDismissedAnimated:completionHandler:]
  -[SBFloatingDockController dismissFloatingDockIfPresentedAnimated:completionHandler:]
  -[SBFloatingDockController isGesturePossible]
  -[SBFloatingDockController floatingDockWindow]
  -[SBFloatingDockController registerAsSharedInstance]
  -[SBFloatingDockController shouldShowHideSuggestionForIconView:proposedValue:]
  -[SBFloatingDockController suggestionsIconListView]
  -[SBFloatingDockController shouldShowCloseBoxForIconView:proposedValue:]
  -[SBFloatingDockController handlePromptingUserToUninstallIcon:location:]
  -[SBFloatingDockController requestedSuggestedApplication]
  -[SBFloatingDockController setRequestedSuggestedApplication:]
  -[SBFloatingDockController handlePresentFloatingDockHoverGesture:]
  -[SBFloatingDockController _handleDismissFloatingDockHoverGesture:]
  -[SBFloatingDockController initWithIconController:applicationController:recentsController:recentsDataStore:transitionCoordinator:appSuggestionManager:analyticsClient:]
  -[SBFloatingDockController initWithIconController:analyticsClient:]
  -[SBFloatingDockController maximumFloatingDockHeight]
  -[SBFloatingDockController effectiveFloatingDockHeight]
  -[SBFloatingDockController _canPresentFloatingDock]
  -[SBFloatingDockController setWasFloatingDockPresentedByPointer:]
  -[SBFloatingDockController _presentFloatingDockIfDismissedAnimated:completionHandler:]
  -[SBFloatingDockController _dismissFloatingDockIfPresentedAnimated:completionHandler:]
  -[SBFloatingDockController dismissPresentedFolderAnimated:withTransitionContext:completion:]
  -[SBFloatingDockController _recalculateWindowLevelForWindowLevelAssertions]
  -[SBFloatingDockController _indexOfPointerArray:ofObject:]
  -[SBFloatingDockController _clearGestureAssertion]
  -[SBFloatingDockController _evaluateAssertions:interactive:withCompletion:]
  -[SBFloatingDockController _deriveActiveAssertion:dockProgress:]
  -[SBFloatingDockController wasFloatingDockPresentedByPointer]
  -[SBFloatingDockController _dockProgressForHoverTranslation:]
  -[SBFloatingDockController floatingDockRootViewController:modifyProgress:interactive:completion:]
  -[SBFloatingDockController dismissFloatingDockSystemGestureRecognizer]
  -[SBFloatingDockController presentFloatingDockIndirectPanGestureRecognizer]
  -[SBFloatingDockController dismissFloatingDockHoverGestureRecognizer]
  -[SBFloatingDockController _allowGestureRecognizers]
  -[SBFloatingDockController _handleTransitionForFolder:atLevel:presenting:withTransitionCoordinator:]
  -[SBFloatingDockController _configureFloatingDockBehaviorAssertionForOpenFolder:atLevel:]
  -[SBFloatingDockController floatingDockRootViewController:willChangeToHeight:]
  -[SBFloatingDockController floatingDockRootViewController:didChangeToFrame:]
  -[SBFloatingDockController floatingDockRootViewController:floatingDockWantsToBePresented:]
  -[SBFloatingDockController floatingDockRootViewControllerShouldHandlePanGestureRecognizer:]
  -[SBFloatingDockController floatingDockRootViewController:willPerformTransitionWithFolder:presenting:withTransitionCoordinator:]
  -[SBFloatingDockController floatingDockRootViewControllerDidEndPresentationTransition:]
  -[SBFloatingDockController minimumHomeScreenScaleForFloatingDockRootViewController:]
  -[SBFloatingDockController initWithAnalyticsClient:]
  -[SBFloatingDockController _addFloatingDockWindowLevelAssertion:]
  -[SBFloatingDockController _removeFloatingDockWindowLevelAssertion:]
  -[SBFloatingDockController _addFloatingDockBehaviorAssertion:withCompletion:]
  -[SBFloatingDockController _removeFloatingDockBehaviorAssertion:withCompletion:]
  -[SBFloatingDockController _updateFloatingDockBehaviorAssertionsInteractive:completion:]
  -[SBFloatingDockController _handleSystemGestureRecognizer:]
  -[SBFloatingDockController activeAssertion]
  -[SBFloatingDockController setActiveAssertion:]


SBPresentDockSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBPresentDockSwitcherEventResponse type]


SBLiquidDetectionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL accessoryPortWet
 @property  BOOL detectionEnabled
 @property  BOOL liquidDetected

  // class methods
  +[SBLiquidDetectionManager sharedInstance]
  +[SBLiquidDetectionManager showStatusBarIcon]

  // instance methods
  -[SBLiquidDetectionManager init]
  -[SBLiquidDetectionManager isLiquidDetected]
  -[SBLiquidDetectionManager dealloc]
  -[SBLiquidDetectionManager _updateWetState]
  -[SBLiquidDetectionManager succinctDescriptionBuilder]
  -[SBLiquidDetectionManager _showStatusBarIcon]
  -[SBLiquidDetectionManager isAccessoryPortWet]
  -[SBLiquidDetectionManager succinctDescription]
  -[SBLiquidDetectionManager _stateDidUpdate]
  -[SBLiquidDetectionManager _updateStatusBar]
  -[SBLiquidDetectionManager _finishInit]
  -[SBLiquidDetectionManager isDetectionEnabled]
  -[SBLiquidDetectionManager descriptionWithMultilinePrefix:]
  -[SBLiquidDetectionManager descriptionBuilderWithMultilinePrefix:]


SBAppRepairTransaction : SBTransaction
 @property  NSSet *appInfos

  // instance methods
  -[SBAppRepairTransaction _canBeInterrupted]
  -[SBAppRepairTransaction _didComplete]
  -[SBAppRepairTransaction _begin]
  -[SBAppRepairTransaction .cxx_destruct]
  -[SBAppRepairTransaction _evaluateCompletion]
  -[SBAppRepairTransaction appInfos]
  -[SBAppRepairTransaction _startAppRepairs]
  -[SBAppRepairTransaction _completeRequest:success:error:]
  -[SBAppRepairTransaction initWithApplicationInfos:]


SBReduceMotionForcePressGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBReduceMotionForcePressGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBReduceMotionForcePressGestureSwitcherModifier visibleAppLayouts]
  -[SBReduceMotionForcePressGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBReduceMotionForcePressGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBReduceMotionForcePressGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBReduceMotionForcePressGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBReduceMotionForcePressGestureSwitcherModifier wallpaperStyle]
  -[SBReduceMotionForcePressGestureSwitcherModifier cardCornerRadiiForIndex:]
  -[SBReduceMotionForcePressGestureSwitcherModifier opacityForIndex:]
  -[SBReduceMotionForcePressGestureSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBReduceMotionForcePressGestureSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBReduceMotionForcePressGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBReduceMotionForcePressGestureSwitcherModifier _layoutSettings]
  -[SBReduceMotionForcePressGestureSwitcherModifier frameForIndex:]
  -[SBReduceMotionForcePressGestureSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBReduceMotionForcePressGestureSwitcherModifier .cxx_destruct]
  -[SBReduceMotionForcePressGestureSwitcherModifier appLayoutsToResignActive]
  -[SBReduceMotionForcePressGestureSwitcherModifier didMoveToParentModifier:]
  -[SBReduceMotionForcePressGestureSwitcherModifier darkeningAlphaForIndex:]
  -[SBReduceMotionForcePressGestureSwitcherModifier keyboardSuppressionMode]
  -[SBReduceMotionForcePressGestureSwitcherModifier isContainerStatusBarVisible]
  -[SBReduceMotionForcePressGestureSwitcherModifier handleGestureEvent:]
  -[SBReduceMotionForcePressGestureSwitcherModifier _effectivePanProgress]
  -[SBReduceMotionForcePressGestureSwitcherModifier _indexOfSelectedAppLayout]
  -[SBReduceMotionForcePressGestureSwitcherModifier initialPanThreshold]
  -[SBReduceMotionForcePressGestureSwitcherModifier initWithGestureID:selectedAppLayout:effectiveStartingEnvironmentMode:]


SBMainDisplayLayoutStateManager : SBLayoutStateManager
 @property  SBPlatformController *_platformController
 @property  SBMainWorkspace *_mainWorkspace
 @property  SBMainDisplaySceneManager *_mainDisplaySceneManager
 @property  SBRecentAppLayouts *_recentAppLayouts

  // class methods
  +[SBMainDisplayLayoutStateManager _layoutStateClass]

  // instance methods
  -[SBMainDisplayLayoutStateManager _platformController]
  -[SBMainDisplayLayoutStateManager _doesSceneIDSpecifyPrimaryScene:forApplicationIdentifier:]
  -[SBMainDisplayLayoutStateManager _hasAppLayoutBeenUserKilledWithinThresholdToCreateNewScene:]
  -[SBMainDisplayLayoutStateManager _recentAppLayouts]
  -[SBMainDisplayLayoutStateManager primarySceneIdentifierForBundleIdentifier:]
  -[SBMainDisplayLayoutStateManager _applicationSceneEntityFromApplicationBundleIdentifier:uniqueIdentifier:]
  -[SBMainDisplayLayoutStateManager _mostRecentAppLayoutMatchingWorkspaceUniqueIdentifiers:]
  -[SBMainDisplayLayoutStateManager _sceneIDIfAppLayoutContainsPrimarySceneIDForBundleIdentifier:bundleIdentifier:]
  -[SBMainDisplayLayoutStateManager layoutStateForApplicationTransitionContext:]
  -[SBMainDisplayLayoutStateManager defaultSceneIdentifierForBundleIdentifier:targetContentIdentifier:allowCanMatches:preferNewScene:visibleSceneIdentifiers:excludingSceneIdentifiers:]
  -[SBMainDisplayLayoutStateManager _mainWorkspace]
  -[SBMainDisplayLayoutStateManager _mainDisplaySceneManager]
  -[SBMainDisplayLayoutStateManager _layoutStateForApplicationTransitionContext:]


SBDashBoardPearlUnlockBehavior : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBMesaUnlockTriggerDelegate, SBBiometricUnlockBehavior>
 @property  SBMesaUnlockTrigger *trigger
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate

  // instance methods
  -[SBDashBoardPearlUnlockBehavior biometricUnlockBehaviorDelegate]
  -[SBDashBoardPearlUnlockBehavior .cxx_destruct]
  -[SBDashBoardPearlUnlockBehavior succinctDescriptionBuilder]
  -[SBDashBoardPearlUnlockBehavior _setTrigger:]
  -[SBDashBoardPearlUnlockBehavior _feedbackForFailureSettings:]
  -[SBDashBoardPearlUnlockBehavior succinctDescription]
  -[SBDashBoardPearlUnlockBehavior setBiometricUnlockBehaviorDelegate:]
  -[SBDashBoardPearlUnlockBehavior mesaUnlockTriggerFired:]
  -[SBDashBoardPearlUnlockBehavior _feedbackForPasscodeEvent]
  -[SBDashBoardPearlUnlockBehavior _feedbackForBioUnlockEventThatWasSpontaneous:]
  -[SBDashBoardPearlUnlockBehavior handleBiometricEvent:]
  -[SBDashBoardPearlUnlockBehavior _trigger]
  -[SBDashBoardPearlUnlockBehavior descriptionWithMultilinePrefix:]
  -[SBDashBoardPearlUnlockBehavior descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardPearlUnlockBehavior initWithPearlSettings:andUnlockTrigger:]
  -[SBDashBoardPearlUnlockBehavior _handlePearlFailure]


SBTransientOverlayDismissalRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, NSMutableCopying>
 @property  BOOL animated
 @property  @? completionHandler
 @property  long long requestType
 @property  SBTransientOverlayViewController *viewController

  // class methods
  +[SBTransientOverlayDismissalRequest dismissalRequestForAllViewControllers]
  +[SBTransientOverlayDismissalRequest dismissalRequestForViewController:]

  // instance methods
  -[SBTransientOverlayDismissalRequest copyWithZone:]
  -[SBTransientOverlayDismissalRequest viewController]
  -[SBTransientOverlayDismissalRequest requestType]
  -[SBTransientOverlayDismissalRequest isAnimated]
  -[SBTransientOverlayDismissalRequest .cxx_destruct]
  -[SBTransientOverlayDismissalRequest _copyWithClass:]
  -[SBTransientOverlayDismissalRequest _init]
  -[SBTransientOverlayDismissalRequest completionHandler]
  -[SBTransientOverlayDismissalRequest mutableCopyWithZone:]


SBMutableTransientOverlayDismissalRequest : SBTransientOverlayDismissalRequest
 @property  BOOL animated
 @property  @? completionHandler

  // instance methods
  -[SBMutableTransientOverlayDismissalRequest copyWithZone:]
  -[SBMutableTransientOverlayDismissalRequest setAnimated:]
  -[SBMutableTransientOverlayDismissalRequest mutableCopyWithZone:]
  -[SBMutableTransientOverlayDismissalRequest setCompletionHandler:]


SBFluidSwitcherModifierTimelineViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <_SBFluidSwitcherModifierTimelineEntryViewDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherModifierTimelineViewController viewDidLoad]
  -[SBFluidSwitcherModifierTimelineViewController _reset:]
  -[SBFluidSwitcherModifierTimelineViewController addEntry:]
  -[SBFluidSwitcherModifierTimelineViewController .cxx_destruct]
  -[SBFluidSwitcherModifierTimelineViewController viewWillLayoutSubviews]
  -[SBFluidSwitcherModifierTimelineViewController didSelectEntryView:]


_SBFluidSwitcherModifierTimelineEntryView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBSwitcherModifierTimelineEntry *entry
 @property  <_SBFluidSwitcherModifierTimelineEntryViewDelegate> *delegate

  // instance methods
  -[_SBFluidSwitcherModifierTimelineEntryView _tap:]
  -[_SBFluidSwitcherModifierTimelineEntryView entry]
  -[_SBFluidSwitcherModifierTimelineEntryView .cxx_destruct]
  -[_SBFluidSwitcherModifierTimelineEntryView setDelegate:]
  -[_SBFluidSwitcherModifierTimelineEntryView setEntry:]
  -[_SBFluidSwitcherModifierTimelineEntryView delegate]
  -[_SBFluidSwitcherModifierTimelineEntryView layoutSubviews]
  -[_SBFluidSwitcherModifierTimelineEntryView initWithFrame:entry:]
  -[_SBFluidSwitcherModifierTimelineEntryView _stringForStack:]
  -[_SBFluidSwitcherModifierTimelineEntryView _appendRecursiveDescriptionToString:level:snapshot:]
  -[_SBFluidSwitcherModifierTimelineEntryView _randomColor]


_SBModifierTimelineDetailViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <UITableViewDelegate, UITableViewDataSource>
 @property  SBSwitcherModifierTimelineEntry *entry
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBModifierTimelineDetailViewController viewDidLoad]
  -[_SBModifierTimelineDetailViewController _done]
  -[_SBModifierTimelineDetailViewController tableView:numberOfRowsInSection:]
  -[_SBModifierTimelineDetailViewController tableView:didSelectRowAtIndexPath:]
  -[_SBModifierTimelineDetailViewController entry]
  -[_SBModifierTimelineDetailViewController .cxx_destruct]
  -[_SBModifierTimelineDetailViewController tableView:titleForHeaderInSection:]
  -[_SBModifierTimelineDetailViewController tableView:cellForRowAtIndexPath:]
  -[_SBModifierTimelineDetailViewController viewWillLayoutSubviews]
  -[_SBModifierTimelineDetailViewController numberOfSectionsInTableView:]
  -[_SBModifierTimelineDetailViewController tableView:titleForFooterInSection:]
  -[_SBModifierTimelineDetailViewController setEntry:]
  -[_SBModifierTimelineDetailViewController _numberOfModifiersInStackSnapshot:]
  -[_SBModifierTimelineDetailViewController _stackSnapshotAtIndex:]


_SBModifierTimelineModifierDetailViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <UITableViewDelegate, UITableViewDataSource>
 @property  SBSwitcherModifierStackSnapshot *stackSnapshot
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBModifierTimelineModifierDetailViewController viewDidLoad]
  -[_SBModifierTimelineModifierDetailViewController tableView:numberOfRowsInSection:]
  -[_SBModifierTimelineModifierDetailViewController tableView:didSelectRowAtIndexPath:]
  -[_SBModifierTimelineModifierDetailViewController .cxx_destruct]
  -[_SBModifierTimelineModifierDetailViewController tableView:titleForHeaderInSection:]
  -[_SBModifierTimelineModifierDetailViewController tableView:cellForRowAtIndexPath:]
  -[_SBModifierTimelineModifierDetailViewController viewWillLayoutSubviews]
  -[_SBModifierTimelineModifierDetailViewController numberOfSectionsInTableView:]
  -[_SBModifierTimelineModifierDetailViewController setStackSnapshot:]
  -[_SBModifierTimelineModifierDetailViewController stackSnapshot]


_SBModifierTimelineTextViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  NSString *text

  // instance methods
  -[_SBModifierTimelineTextViewController viewDidLoad]
  -[_SBModifierTimelineTextViewController text]
  -[_SBModifierTimelineTextViewController .cxx_destruct]
  -[_SBModifierTimelineTextViewController viewWillLayoutSubviews]
  -[_SBModifierTimelineTextViewController setText:]


SBLayoutElement : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, SBLayoutElementDescriptor, SBWorkspaceEntityGenerating>
 @property  @? entityGenerator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *uniqueIdentifier
 @property  long long layoutRole
 @property  unsigned long supportedLayoutRoles
 @property  unsigned long layoutAttributes
 @property  Class viewControllerClass

  // class methods
  +[SBLayoutElement elementWithDescriptor:layoutRole:]
  +[SBLayoutElement elementWithDescriptor:]

  // instance methods
  -[SBLayoutElement layoutAttributes]
  -[SBLayoutElement entityGenerator]
  -[SBLayoutElement supportsLayoutRole:]
  -[SBLayoutElement .cxx_destruct]
  -[SBLayoutElement succinctDescriptionBuilder]
  -[SBLayoutElement uniqueIdentifier]
  -[SBLayoutElement initWithIdentifier:layoutRole:supportedLayoutRoles:layoutAttributes:viewControllerClass:entityGenerator:]
  -[SBLayoutElement succinctDescription]
  -[SBLayoutElement setEntityGenerator:]
  -[SBLayoutElement isEqual:]
  -[SBLayoutElement supportedLayoutRoles]
  -[SBLayoutElement hasLayoutAttributes:]
  -[SBLayoutElement viewControllerClass]
  -[SBLayoutElement layoutRole]
  -[SBLayoutElement descriptionWithMultilinePrefix:]
  -[SBLayoutElement workspaceEntity]
  -[SBLayoutElement descriptionBuilderWithMultilinePrefix:]


SBStatusBarForcedHiddenTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBStatusBarForcedHiddenTestRecipe load]

  // instance methods
  -[SBStatusBarForcedHiddenTestRecipe title]
  -[SBStatusBarForcedHiddenTestRecipe handleVolumeIncrease]
  -[SBStatusBarForcedHiddenTestRecipe handleVolumeDecrease]
  -[SBStatusBarForcedHiddenTestRecipe _toggleWithAnimationSettings:]


SBDashBoardIdleTimerController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalEventHandling, SBDashBoardIdleTimerProviderDelegate, CSIdleTimerControlling, SBIdleTimerProviding, SBLockScreenIdleTimerControlling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator

  // instance methods
  -[SBDashBoardIdleTimerController coverSheetIdentifier]
  -[SBDashBoardIdleTimerController setIdleTimerCoordinator:]
  -[SBDashBoardIdleTimerController idleTimerCoordinator]
  -[SBDashBoardIdleTimerController idleTimerDidRefresh:]
  -[SBDashBoardIdleTimerController idleTimerDidWarn:]
  -[SBDashBoardIdleTimerController dashBoardIdleTimerProvider:didProposeBehavior:reason:]
  -[SBDashBoardIdleTimerController conformsToCSEventHandling]
  -[SBDashBoardIdleTimerController dealloc]
  -[SBDashBoardIdleTimerController coordinatorRequestedIdleTimerBehavior:]
  -[SBDashBoardIdleTimerController requestIdleTimerBehaviorForReason:]
  -[SBDashBoardIdleTimerController .cxx_destruct]
  -[SBDashBoardIdleTimerController idleTimerDidChange:]
  -[SBDashBoardIdleTimerController initWithCoverSheetViewController:]
  -[SBDashBoardIdleTimerController participantState]
  -[SBDashBoardIdleTimerController idleTimerWillRefresh:]
  -[SBDashBoardIdleTimerController idleTimerDidExpire:]
  -[SBDashBoardIdleTimerController handleEvent:]
  -[SBDashBoardIdleTimerController removeIdleTimerDisabledAssertionReason:]
  -[SBDashBoardIdleTimerController resetIdleTimerIfTopMost]
  -[SBDashBoardIdleTimerController addIdleTimerDisabledAssertionReason:]
  -[SBDashBoardIdleTimerController wouldHandleButtonEvent:]


SBLockScreenUnlockRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  NSString *name
 @property  int source
 @property  int intent
 @property  BSProcessHandle *process
 @property  SBApplication *destinationApplication
 @property  BOOL wantsBiometricPresentation
 @property  BOOL forceAlertAuthenticationUI
 @property  BOOL confirmedNotInPocket

  // instance methods
  -[SBLockScreenUnlockRequest process]
  -[SBLockScreenUnlockRequest copyWithZone:]
  -[SBLockScreenUnlockRequest setIntent:]
  -[SBLockScreenUnlockRequest setConfirmedNotInPocket:]
  -[SBLockScreenUnlockRequest intent]
  -[SBLockScreenUnlockRequest setSource:]
  -[SBLockScreenUnlockRequest source]
  -[SBLockScreenUnlockRequest .cxx_destruct]
  -[SBLockScreenUnlockRequest name]
  -[SBLockScreenUnlockRequest setProcess:]
  -[SBLockScreenUnlockRequest isEqual:]
  -[SBLockScreenUnlockRequest setName:]
  -[SBLockScreenUnlockRequest wantsBiometricPresentation]
  -[SBLockScreenUnlockRequest setWantsBiometricPresentation:]
  -[SBLockScreenUnlockRequest confirmedNotInPocket]
  -[SBLockScreenUnlockRequest setDestinationApplication:]
  -[SBLockScreenUnlockRequest setForceAlertAuthenticationUI:]
  -[SBLockScreenUnlockRequest destinationApplication]
  -[SBLockScreenUnlockRequest forceAlertAuthenticationUI]


SBPasscodeEntryTransientOverlayViewController : SBTransientOverlayViewController <PTSettingsKeyObserver, SBFAuthenticationResponder, SBUIPasscodeLockViewDelegate>
 @property  <SBPasscodeEntryTransientOverlayViewControllerDelegate> *delegate
 @property  BOOL showEmergencyCallButton
 @property  BOOL useBiometricPresentation
 @property  NSString *unlockDestination
 @property  int intent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPasscodeEntryTransientOverlayViewController viewDidLoad]
  -[SBPasscodeEntryTransientOverlayViewController idleTimerDuration]
  -[SBPasscodeEntryTransientOverlayViewController setIntent:]
  -[SBPasscodeEntryTransientOverlayViewController preferredStatusBarStyle]
  -[SBPasscodeEntryTransientOverlayViewController settings:changedValueForKey:]
  -[SBPasscodeEntryTransientOverlayViewController idleWarnMode]
  -[SBPasscodeEntryTransientOverlayViewController idleTimerMode]
  -[SBPasscodeEntryTransientOverlayViewController intent]
  -[SBPasscodeEntryTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBPasscodeEntryTransientOverlayViewController handleSuccessfulAuthenticationRequest:]
  -[SBPasscodeEntryTransientOverlayViewController .cxx_destruct]
  -[SBPasscodeEntryTransientOverlayViewController _preferredStatusBarVisibility]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewPasscodeEnteredViaMesa:]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewCancelButtonPressed:]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewEmergencyCallButtonPressed:]
  -[SBPasscodeEntryTransientOverlayViewController handleFailedAuthenticationRequest:error:]
  -[SBPasscodeEntryTransientOverlayViewController supportedInterfaceOrientations]
  -[SBPasscodeEntryTransientOverlayViewController handleInvalidAuthenticationRequest:]
  -[SBPasscodeEntryTransientOverlayViewController viewWillAppear:]
  -[SBPasscodeEntryTransientOverlayViewController _canShowWhileLocked]
  -[SBPasscodeEntryTransientOverlayViewController isContentOpaque]
  -[SBPasscodeEntryTransientOverlayViewController setDelegate:]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewPasscodeEntered:]
  -[SBPasscodeEntryTransientOverlayViewController passcodeLockViewPasscodeDidChange:]
  -[SBPasscodeEntryTransientOverlayViewController viewDidDisappear:]
  -[SBPasscodeEntryTransientOverlayViewController initWithAuthenticationController:]
  -[SBPasscodeEntryTransientOverlayViewController viewDidLayoutSubviews]
  -[SBPasscodeEntryTransientOverlayViewController delegate]
  -[SBPasscodeEntryTransientOverlayViewController unlockDestination]
  -[SBPasscodeEntryTransientOverlayViewController setUnlockDestination:]
  -[SBPasscodeEntryTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBPasscodeEntryTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBPasscodeEntryTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBPasscodeEntryTransientOverlayViewController _updatePrototypeSettings]
  -[SBPasscodeEntryTransientOverlayViewController _passcodeLockViewPasscodeEntered:viaMesa:]
  -[SBPasscodeEntryTransientOverlayViewController _attemptUnlock:passcode:]
  -[SBPasscodeEntryTransientOverlayViewController setShowEmergencyCallButton:]
  -[SBPasscodeEntryTransientOverlayViewController setUseBiometricPresentation:]
  -[SBPasscodeEntryTransientOverlayViewController showEmergencyCallButton]
  -[SBPasscodeEntryTransientOverlayViewController useBiometricPresentation]


SBExternalPhoneDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL hideMyPhoneNumber

  // instance methods
  -[SBExternalPhoneDefaults init]
  -[SBExternalPhoneDefaults _bindAndRegisterDefaults]


SBWaitForSceneContentAvailableTransaction : SBTransaction <SBSceneHandleObserver>
 @property  SBSceneHandle *sceneHandle
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWaitForSceneContentAvailableTransaction _canBeInterrupted]
  -[SBWaitForSceneContentAvailableTransaction _didComplete]
  -[SBWaitForSceneContentAvailableTransaction sceneHandle]
  -[SBWaitForSceneContentAvailableTransaction dealloc]
  -[SBWaitForSceneContentAvailableTransaction _begin]
  -[SBWaitForSceneContentAvailableTransaction .cxx_destruct]
  -[SBWaitForSceneContentAvailableTransaction setSceneHandle:]
  -[SBWaitForSceneContentAvailableTransaction sceneHandle:didDestroyScene:]
  -[SBWaitForSceneContentAvailableTransaction sceneHandle:didUpdateContentState:]
  -[SBWaitForSceneContentAvailableTransaction initWithSceneHandle:manualListener:]
  -[SBWaitForSceneContentAvailableTransaction noteSceneContentIsReady:]
  -[SBWaitForSceneContentAvailableTransaction _noteSceneContentReadinessDidChange:]


SBInitialRestartState : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  BOOL authenticated
 @property  BOOL inLostMode
 @property  BOOL blocked
 @property  BOOL hasPasscodeSet
 @property  BOOL requiresSetup
 @property  BOOL shouldNeverLock
 @property  BOOL loginSession
 @property  SBBootDefaults *bootDefaults
 @property  BOOL forSimulator
 @property  long long homeButtonType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInitialRestartState isAuthenticated]
  -[SBInitialRestartState isBlocked]
  -[SBInitialRestartState homeButtonType]
  -[SBInitialRestartState setHomeButtonType:]
  -[SBInitialRestartState .cxx_destruct]
  -[SBInitialRestartState shouldNeverLock]
  -[SBInitialRestartState succinctDescriptionBuilder]
  -[SBInitialRestartState bootDefaults]
  -[SBInitialRestartState setAuthenticated:]
  -[SBInitialRestartState succinctDescription]
  -[SBInitialRestartState hasPasscodeSet]
  -[SBInitialRestartState isLoginSession]
  -[SBInitialRestartState isInLostMode]
  -[SBInitialRestartState descriptionWithMultilinePrefix:]
  -[SBInitialRestartState setRequiresSetup:]
  -[SBInitialRestartState descriptionBuilderWithMultilinePrefix:]
  -[SBInitialRestartState requiresSetup]
  -[SBInitialRestartState setBlocked:]
  -[SBInitialRestartState setHasPasscodeSet:]
  -[SBInitialRestartState setInLostMode:]
  -[SBInitialRestartState setShouldNeverLock:]
  -[SBInitialRestartState setLoginSession:]
  -[SBInitialRestartState setBootDefaults:]
  -[SBInitialRestartState setForSimulator:]
  -[SBInitialRestartState isForSimulator]


SBMutableInitialRestartState : SBInitialRestartState
 @property  BOOL authenticated
 @property  BOOL inLostMode
 @property  BOOL blocked
 @property  BOOL requiresSetup
 @property  BOOL hasPasscodeSet
 @property  BOOL shouldNeverLock
 @property  BOOL loginSession
 @property  SBBootDefaults *bootDefaults
 @property  BOOL forSimulator
 @property  long long homeButtonType


SBInsecureDrawingAlertItemTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBInsecureDrawingAlertItemTestRecipe load]

  // instance methods
  -[SBInsecureDrawingAlertItemTestRecipe .cxx_destruct]
  -[SBInsecureDrawingAlertItemTestRecipe title]
  -[SBInsecureDrawingAlertItemTestRecipe handleVolumeIncrease]
  -[SBInsecureDrawingAlertItemTestRecipe handleVolumeDecrease]


SBAppSwitcherServiceSet : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  NSMutableArray *services

  // instance methods
  -[SBAppSwitcherServiceSet services]
  -[SBAppSwitcherServiceSet copyWithZone:]
  -[SBAppSwitcherServiceSet .cxx_destruct]
  -[SBAppSwitcherServiceSet count]
  -[SBAppSwitcherServiceSet appLayouts]
  -[SBAppSwitcherServiceSet removeService:]
  -[SBAppSwitcherServiceSet addService:]
  -[SBAppSwitcherServiceSet serviceBundleIdentifiers]
  -[SBAppSwitcherServiceSet serviceAtIndex:]
  -[SBAppSwitcherServiceSet initWithServices:zone:]
  -[SBAppSwitcherServiceSet serviceForBundleIdentifier:]


CSConcreteUnlockRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSUnlockRequest>
 @property  NSString *name
 @property  int source
 @property  int intent
 @property  BOOL wantsBiometricPresentation
 @property  BOOL confirmedNotInPocket
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[CSConcreteUnlockRequest setIntent:]
  -[CSConcreteUnlockRequest setConfirmedNotInPocket:]
  -[CSConcreteUnlockRequest intent]
  -[CSConcreteUnlockRequest setSource:]
  -[CSConcreteUnlockRequest source]
  -[CSConcreteUnlockRequest .cxx_destruct]
  -[CSConcreteUnlockRequest name]
  -[CSConcreteUnlockRequest setName:]
  -[CSConcreteUnlockRequest wantsBiometricPresentation]
  -[CSConcreteUnlockRequest setWantsBiometricPresentation:]
  -[CSConcreteUnlockRequest confirmedNotInPocket]


SBDefaultCoverSheetContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSAuthenticationManaging, CSCarPlayStatusProviding, CSMediaControlling, CSReachabilityControlling, CSResetRestoreStatusProviding, CSTelephonyStatusProviding, CSTouchEnvironmentStatusProviding, CSUnlockRequesting, CSUserSessionControlling, CSWallpaperLogging, CSOverlayProviding, CSAppHostConfiguring, CSSystemPointerInteractionManaging, CSProximitySensorProviding, CSDeviceOrientationProviding, SBProximitySensorManagerObserver, SBFOverlayObserving, CSCoverSheetContextProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL carPlayActiveForNotifications
 @property  BOOL restoring
 @property  long long restoreState
 @property  BOOL resetting
 @property  long long resetState
 @property  BOOL expectsPocketTouches
 @property  BOOL logoutSupported
 @property  BOOL wantsHomeScreenOverlay
 @property  BOOL objectInProximity
 @property  long long rawDeviceOrientationIgnoringOrientationLocks
 @property  <SBFAuthenticationAssertionProviding> *authenticationAssertionProvider
 @property  <SBFAuthenticationStatusProvider> *authenticationStatusProvider
 @property  <SBFPasscodeFieldChangeObserver> *passcodeFieldChangeObserver
 @property  <SBFLockOutStatusProvider> *lockOutStatusProvider
 @property  <SBFDateProviding> *dateProvider
 @property  <CSLegibilityProviding> *legibilityProvider
 @property  <CSPowerStatusProviding> *powerStatusProvider
 @property  NSString *powerStatusChangeNotificationName
 @property  <CSResetRestoreStatusProviding> *resetRestoreStatusProvider
 @property  <CSThermalStatusProviding> *thermalStatusProvider
 @property  <SBUIBiometricResource> *biometricResource
 @property  NSArray *dismissableOverlays
 @property  <CSScreenStateProviding> *screenStateProvider
 @property  <SBFScreenWakeAnimationControlling> *screenWakeAnimationController
 @property  <CSWallpaperViewProviding> *wallpaperViewProvider
 @property  <CSTelephonyStatusProviding> *telephonyStatusProvider
 @property  <CSAuthenticationManaging> *authenticationManager
 @property  <CSHomeAffordanceControlling> *homeAffordanceController
 @property  <CSModalHomeAffordanceControlling> *modalHomeAffordanceController
 @property  <CSStatusBarControlling> *statusBarController
 @property  <CSMediaControlling> *mediaController
 @property  <CSUnlockRequesting> *unlockRequester
 @property  <CSWallpaperLogging> *wallpaperLogger
 @property  <SBFActionProviding> *contentActionProvider
 @property  <CSApplicationInforming> *applicationInformer
 @property  <CSNotificationPresenting> *notificationPresenter
 @property  <CSTouchEnvironmentStatusProviding> *touchEnvironmentStatusProvider
 @property  <CSUserSessionControlling> *userSessionController
 @property  <CSReachabilityControlling> *reachabilityController
 @property  <CSCarPlayStatusProviding> *carPlayStatusProvider
 @property  <CSOverlayProviding> *homeScreenOverlayProvider
 @property  <CSAppHostConfiguring> *appHostConfiguring
 @property  <CSSystemPointerInteractionManaging> *systemPointerInteractionManager
 @property  <CSProximitySensorProviding> *proximitySensorProvider
 @property  <CSDeviceOrientationProviding> *deviceOrientationProvider

  // instance methods
  -[SBDefaultCoverSheetContext userSessionController]
  -[SBDefaultCoverSheetContext legibilityProvider]
  -[SBDefaultCoverSheetContext expectsPocketTouches]
  -[SBDefaultCoverSheetContext rawDeviceOrientationIgnoringOrientationLocks]
  -[SBDefaultCoverSheetContext restoreState]
  -[SBDefaultCoverSheetContext biometricResource]
  -[SBDefaultCoverSheetContext overlayController:didChangePresentationProgress:fromLeading:]
  -[SBDefaultCoverSheetContext carPlayStatusProvider]
  -[SBDefaultCoverSheetContext dateProvider]
  -[SBDefaultCoverSheetContext init]
  -[SBDefaultCoverSheetContext isObjectInProximity]
  -[SBDefaultCoverSheetContext applicationHosterForBundleIdentifier:]
  -[SBDefaultCoverSheetContext wallpaperViewProvider]
  -[SBDefaultCoverSheetContext isResetting]
  -[SBDefaultCoverSheetContext notificationPresenter]
  -[SBDefaultCoverSheetContext dismissModalContentIfVisibleAnimated:]
  -[SBDefaultCoverSheetContext isEmergencyCallSupported]
  -[SBDefaultCoverSheetContext telephonyStatusProvider]
  -[SBDefaultCoverSheetContext incrementIrisPlayCount]
  -[SBDefaultCoverSheetContext logout]
  -[SBDefaultCoverSheetContext .cxx_destruct]
  -[SBDefaultCoverSheetContext proximitySensorProvider]
  -[SBDefaultCoverSheetContext registerView:delegate:]
  -[SBDefaultCoverSheetContext deactivateReachability]
  -[SBDefaultCoverSheetContext systemPointerInteractionManager]
  -[SBDefaultCoverSheetContext powerStatusProvider]
  -[SBDefaultCoverSheetContext setPasscodeVisible:animated:]
  -[SBDefaultCoverSheetContext dismissableOverlays]
  -[SBDefaultCoverSheetContext wantsHomeScreenOverlay]
  -[SBDefaultCoverSheetContext unregisterView:]
  -[SBDefaultCoverSheetContext homeScreenOverlayProvider]
  -[SBDefaultCoverSheetContext isLogoutSupported]
  -[SBDefaultCoverSheetContext isRestoring]
  -[SBDefaultCoverSheetContext stopMediaPlaybackForSource:]
  -[SBDefaultCoverSheetContext createUnlockRequestForActionContext:]
  -[SBDefaultCoverSheetContext resetRestoreStatusProvider]
  -[SBDefaultCoverSheetContext screenStateProvider]
  -[SBDefaultCoverSheetContext thermalStatusProvider]
  -[SBDefaultCoverSheetContext passcodeFieldChangeObserver]
  -[SBDefaultCoverSheetContext modalHomeAffordanceController]
  -[SBDefaultCoverSheetContext touchEnvironmentStatusProvider]
  -[SBDefaultCoverSheetContext reachabilityController]
  -[SBDefaultCoverSheetContext wallpaperLogger]
  -[SBDefaultCoverSheetContext resetState]
  -[SBDefaultCoverSheetContext deviceOrientationProvider]
  -[SBDefaultCoverSheetContext overlayController:visibilityDidChange:]
  -[SBDefaultCoverSheetContext contentActionProvider]
  -[SBDefaultCoverSheetContext addProximitySensorProviderObserver:]
  -[SBDefaultCoverSheetContext appHostConfiguring]
  -[SBDefaultCoverSheetContext proximitySensorManager:crudeProximityDidChange:]
  -[SBDefaultCoverSheetContext unlockRequester]
  -[SBDefaultCoverSheetContext statusBarController]
  -[SBDefaultCoverSheetContext mediaController]
  -[SBDefaultCoverSheetContext screenWakeAnimationController]
  -[SBDefaultCoverSheetContext attemptUnlockWithPasscode:finishUIUnlock:completion:]
  -[SBDefaultCoverSheetContext lockOutStatusProvider]
  -[SBDefaultCoverSheetContext newOverlayController]
  -[SBDefaultCoverSheetContext homeAffordanceController]
  -[SBDefaultCoverSheetContext authenticationStatusProvider]
  -[SBDefaultCoverSheetContext setBiometricAutoUnlockingDisabled:forReason:]
  -[SBDefaultCoverSheetContext applicationInformer]
  -[SBDefaultCoverSheetContext isCarPlayActiveForNotifications]
  -[SBDefaultCoverSheetContext authenticationManager]
  -[SBDefaultCoverSheetContext powerStatusChangeNotificationName]
  -[SBDefaultCoverSheetContext removeProximitySensorProviderObserver:]
  -[SBDefaultCoverSheetContext unlockWithRequest:completion:]
  -[SBDefaultCoverSheetContext _todayViewControllerIfAvailable]
  -[SBDefaultCoverSheetContext authenticationAssertionProvider]
  -[SBDefaultCoverSheetContext overlayControllerDidBeginChangingPresentationProgress:]
  -[SBDefaultCoverSheetContext createUnlockRequest]


SBHIDValueModifyingButtonSetArbiter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHIDButtonStateDelegate>
 @property  double initialRepeatDelay
 @property  double subsequentRepeatDelay
 @property  <SBHIDValueModifyingButtonSetArbiterDelegate> *delegate

  // instance methods
  -[SBHIDValueModifyingButtonSetArbiter performActionsForButtonLongPress:]
  -[SBHIDValueModifyingButtonSetArbiter performActionsForButtonUp:]
  -[SBHIDValueModifyingButtonSetArbiter dealloc]
  -[SBHIDValueModifyingButtonSetArbiter .cxx_destruct]
  -[SBHIDValueModifyingButtonSetArbiter reset]
  -[SBHIDValueModifyingButtonSetArbiter performActionsForButtonDown:]
  -[SBHIDValueModifyingButtonSetArbiter setDelegate:]
  -[SBHIDValueModifyingButtonSetArbiter delegate]
  -[SBHIDValueModifyingButtonSetArbiter initWithHIDKeyPressEventUsages:initialRepeatDelay:subsequentRepeatDelay:]
  -[SBHIDValueModifyingButtonSetArbiter processKeyboardEvent:]
  -[SBHIDValueModifyingButtonSetArbiter _cancelRepeatingActionTimer]
  -[SBHIDValueModifyingButtonSetArbiter _performActionForButton:]
  -[SBHIDValueModifyingButtonSetArbiter _startRepeatingActionTimer]
  -[SBHIDValueModifyingButtonSetArbiter _fireRepeatingActionTimer]
  -[SBHIDValueModifyingButtonSetArbiter initialRepeatDelay]
  -[SBHIDValueModifyingButtonSetArbiter setInitialRepeatDelay:]
  -[SBHIDValueModifyingButtonSetArbiter subsequentRepeatDelay]
  -[SBHIDValueModifyingButtonSetArbiter setSubsequentRepeatDelay:]


SBAirplaneModeController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <RadiosPreferencesDelegate>
 @property  BOOL inAirplaneMode
 @property  <SBAirplaneModeDelegate> *delegate

  // class methods
  +[SBAirplaneModeController sharedInstance]

  // instance methods
  -[SBAirplaneModeController airplaneModeChanged]
  -[SBAirplaneModeController init]
  -[SBAirplaneModeController .cxx_destruct]
  -[SBAirplaneModeController setInAirplaneMode:]
  -[SBAirplaneModeController isInAirplaneMode]
  -[SBAirplaneModeController setDelegate:]
  -[SBAirplaneModeController delegate]


SBStartupTransitionContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  NSString *reason
 @property  NSURL *applicationLaunchURL
 @property  NSString *fromApplicationBundleID
 @property  BOOL fromLocked
 @property  BOOL fromUserPowerDown
 @property  BOOL dark
 @property  BOOL login
 @property  BOOL logout
 @property  BOOL hasUserSwitchOverlayMismatch
 @property  BKSDisplayRenderOverlay *overlay
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBStartupTransitionContext setLogin:]
  -[SBStartupTransitionContext isLogin]
  -[SBStartupTransitionContext overlay]
  -[SBStartupTransitionContext setReason:]
  -[SBStartupTransitionContext setApplicationLaunchURL:]
  -[SBStartupTransitionContext _representation]
  -[SBStartupTransitionContext fromUserPowerDown]
  -[SBStartupTransitionContext setHasUserSwitchOverlayMismatch:]
  -[SBStartupTransitionContext setOverlay:]
  -[SBStartupTransitionContext .cxx_destruct]
  -[SBStartupTransitionContext applicationLaunchURL]
  -[SBStartupTransitionContext fromLocked]
  -[SBStartupTransitionContext succinctDescriptionBuilder]
  -[SBStartupTransitionContext hasUserSwitchOverlayMismatch]
  -[SBStartupTransitionContext isDark]
  -[SBStartupTransitionContext setDark:]
  -[SBStartupTransitionContext succinctDescription]
  -[SBStartupTransitionContext setFromLocked:]
  -[SBStartupTransitionContext _initWithRestartRequest:fromLocked:fromApplication:]
  -[SBStartupTransitionContext setFromApplicationBundleID:]
  -[SBStartupTransitionContext isEqual:]
  -[SBStartupTransitionContext _reallyInitFromRepresentation:]
  -[SBStartupTransitionContext _initWithRepresentation:loginSession:]
  -[SBStartupTransitionContext setLogout:]
  -[SBStartupTransitionContext fromApplicationBundleID]
  -[SBStartupTransitionContext _initWithShutdownContext:]
  -[SBStartupTransitionContext reason]
  -[SBStartupTransitionContext setFromUserPowerDown:]
  -[SBStartupTransitionContext _initWithRebootContext:]
  -[SBStartupTransitionContext descriptionWithMultilinePrefix:]
  -[SBStartupTransitionContext descriptionBuilderWithMultilinePrefix:]
  -[SBStartupTransitionContext _parseOverlayInfo]
  -[SBStartupTransitionContext isLogout]


SBLayoutStateManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBLayoutStateManager _initialLayoutState]
  +[SBLayoutStateManager _layoutStateClass]

  // instance methods
  -[SBLayoutStateManager layoutStateForApplicationTransitionContext:]
  -[SBLayoutStateManager _layoutStateForApplicationTransitionContext:]


SBAnimationWrapperHostRequester : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSceneViewPresentationConfiguring>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAnimationWrapperHostRequester sharedRequester]

  // instance methods
  -[SBAnimationWrapperHostRequester sceneViewPresentationPriority:]
  -[SBAnimationWrapperHostRequester sceneViewPresentationIdentifier:]


SBDashBoardSetupController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalBehaviorProviding, CSExternalEventHandling>
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDashBoardSetupController coverSheetIdentifier]
  -[SBDashBoardSetupController scrollingStrategy]
  -[SBDashBoardSetupController notificationBehavior]
  -[SBDashBoardSetupController _addOrRemoveSetupViewIfNecessaryAnimated:]
  -[SBDashBoardSetupController conformsToCSBehaviorProviding]
  -[SBDashBoardSetupController init]
  -[SBDashBoardSetupController restrictedCapabilities]
  -[SBDashBoardSetupController conformsToCSEventHandling]
  -[SBDashBoardSetupController proximityDetectionMode]
  -[SBDashBoardSetupController dealloc]
  -[SBDashBoardSetupController _configureForCurrentSetupMode]
  -[SBDashBoardSetupController conformsToCSExternalBehaviorProviding]
  -[SBDashBoardSetupController .cxx_destruct]
  -[SBDashBoardSetupController _clearSetupViewIfNecessaryAnimated:]
  -[SBDashBoardSetupController participantState]
  -[SBDashBoardSetupController handleEvent:]
  -[SBDashBoardSetupController _setupModeChanged:]
  -[SBDashBoardSetupController initWithCoverSheetViewController:setupManager:]
  -[SBDashBoardSetupController wouldHandleButtonEvent:]


SBIdleTimerBase : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIdleTimerActivation, SBIdleTimer>
 @property  NSHashTable *observers
 @property  BOOL activated
 @property  BOOL disabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerBase copyWithZone:]
  -[SBIdleTimerBase isDisabled]
  -[SBIdleTimerBase isEqualToTimer:]
  -[SBIdleTimerBase isActivated]
  -[SBIdleTimerBase setActivated:]
  -[SBIdleTimerBase conformsToSBIdleTimerActivation]
  -[SBIdleTimerBase _makeObserversPerformSelector:]
  -[SBIdleTimerBase removeAllIdleTimerObservers]
  -[SBIdleTimerBase .cxx_destruct]
  -[SBIdleTimerBase removeIdleTimerObserver:]
  -[SBIdleTimerBase succinctDescriptionBuilder]
  -[SBIdleTimerBase _logExpirationTimeout:]
  -[SBIdleTimerBase observers]
  -[SBIdleTimerBase _enumerateObserversRespondingToSelector:usingBlock:]
  -[SBIdleTimerBase succinctDescription]
  -[SBIdleTimerBase reset]
  -[SBIdleTimerBase addIdleTimerObserver:]
  -[SBIdleTimerBase descriptionWithMultilinePrefix:]
  -[SBIdleTimerBase descriptionBuilderWithMultilinePrefix:]


SBReachabilityTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBReachabilityTestRecipe load]

  // instance methods
  -[SBReachabilityTestRecipe title]
  -[SBReachabilityTestRecipe handleVolumeIncrease]
  -[SBReachabilityTestRecipe handleVolumeDecrease]


SBGridToActiveAppLayoutsSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBGridToActiveAppLayoutsSwitcherModifier homeScreenBackdropBlurType]
  -[SBGridToActiveAppLayoutsSwitcherModifier visibleAppLayouts]
  -[SBGridToActiveAppLayoutsSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBGridToActiveAppLayoutsSwitcherModifier homeScreenAlpha]
  -[SBGridToActiveAppLayoutsSwitcherModifier scaleForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier isHomeScreenContentRequired]
  -[SBGridToActiveAppLayoutsSwitcherModifier topMostLayoutElements]
  -[SBGridToActiveAppLayoutsSwitcherModifier isSwitcherWindowVisible]
  -[SBGridToActiveAppLayoutsSwitcherModifier animationAttributesForLayoutElement:]
  -[SBGridToActiveAppLayoutsSwitcherModifier handleMainTransitionEvent:]
  -[SBGridToActiveAppLayoutsSwitcherModifier wallpaperStyle]
  -[SBGridToActiveAppLayoutsSwitcherModifier cardCornerRadiiForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier opacityForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBGridToActiveAppLayoutsSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBGridToActiveAppLayoutsSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBGridToActiveAppLayoutsSwitcherModifier _layoutSettings]
  -[SBGridToActiveAppLayoutsSwitcherModifier frameForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBGridToActiveAppLayoutsSwitcherModifier .cxx_destruct]
  -[SBGridToActiveAppLayoutsSwitcherModifier titleOpacityForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier homeScreenScale]
  -[SBGridToActiveAppLayoutsSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBGridToActiveAppLayoutsSwitcherModifier transitionWillBegin]
  -[SBGridToActiveAppLayoutsSwitcherModifier wallpaperScale]
  -[SBGridToActiveAppLayoutsSwitcherModifier darkeningAlphaForIndex:]
  -[SBGridToActiveAppLayoutsSwitcherModifier _unselectedCardScale]
  -[SBGridToActiveAppLayoutsSwitcherModifier _isEffectivelyFullScreen]
  -[SBGridToActiveAppLayoutsSwitcherModifier _isIndexActive:]
  -[SBGridToActiveAppLayoutsSwitcherModifier initWithTransitionID:direction:activeAppLayouts:gridModifier:]


SBAssistantController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFluidGestureDismissable, CSExternalBehaviorProviding, SBFIdleTimerBehaviorProviding, PTSettingsKeyObserver, SBHomeGestureParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBFAuthenticationResponder, SiriPresentationSpringBoardMainScreenViewControllerDelegate, UIGestureRecognizerDelegate, SBSystemGestureRecognizerDelegate, SBHomeGesturePanGestureRecognizerInterfaceDelegate, SBIdleTimerProviding, CSCoverSheetOverlaying>
 @property  SBFluidDismissalState *fluidDismissalState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <BSInvalidatable> *suspendWallpaperAnimationAssertion
 @property  BOOL enabled
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  BOOL unlockedDevice
 @property  BOOL visible
 @property  BOOL contentObscuresScreen
 @property  BOOL preventsCoverSheetPresentation
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout

  // class methods
  +[SBAssistantController sharedInstance]
  +[SBAssistantController isVisible]
  +[SBAssistantController bootstrapServices]
  +[SBAssistantController shouldDismissSiriForGestureTranslation:velocity:]
  +[SBAssistantController sharedInstanceIfExists]
  +[SBAssistantController shouldBreadcrumbLaunchedApplicationWithBundleIdentifier:]

  // instance methods
  -[SBAssistantController coverSheetIdentifier]
  -[SBAssistantController touchInterfaceOrientationForGestureRecognizer:]
  -[SBAssistantController idleTimerDuration]
  -[SBAssistantController _idleTimerCoordinator]
  -[SBAssistantController setSuspendWallpaperAnimationAssertion:]
  -[SBAssistantController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBAssistantController acquireWindowLevelAssertionWithPriority:windowLevel:reason:]
  -[SBAssistantController _updateWindowLevel]
  -[SBAssistantController _idleTimerBehavior]
  -[SBAssistantController scrollingStrategy]
  -[SBAssistantController window]
  -[SBAssistantController notificationBehavior]
  -[SBAssistantController settings:changedValueForKey:]
  -[SBAssistantController shouldShowLockStatusBarTime]
  -[SBAssistantController _updateOrientationLock]
  -[SBAssistantController _configurePanToDismissGestureDependencies]
  -[SBAssistantController rootViewController]
  -[SBAssistantController isVisible]
  -[SBAssistantController _updateOrbLocation:]
  -[SBAssistantController conformsToCSBehaviorProviding]
  -[SBAssistantController idleWarnMode]
  -[SBAssistantController viewForSystemGestureRecognizer:]
  -[SBAssistantController idleTimerMode]
  -[SBAssistantController setFluidDismissalState:]
  -[SBAssistantController init]
  -[SBAssistantController _setShareHomeGesture:]
  -[SBAssistantController _setIdleTimerCoordinator:]
  -[SBAssistantController restrictedCapabilities]
  -[SBAssistantController dismissAssistantViewIfNecessary]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithAnimation:factory:completion:]
  -[SBAssistantController _prototypeSettingsChanged]
  -[SBAssistantController suspendWallpaperAnimationAssertion]
  -[SBAssistantController dismissOverlayForDashBoardAnimated:]
  -[SBAssistantController _updateDockViewFrame:]
  -[SBAssistantController screenWakeIdleTimerResetRequested]
  -[SBAssistantController requestPasscodeUnlockWithCompletion:]
  -[SBAssistantController homeGestureParticipantResolvedHomeAffordanceSuppressionDidChange:]
  -[SBAssistantController _createTapToDimissSiriGestureRecognizer]
  -[SBAssistantController siriPresentation:didUpdateShouldDismissForTapsOutsideContent:]
  -[SBAssistantController proximityDetectionMode]
  -[SBAssistantController handleSuccessfulAuthenticationRequest:]
  -[SBAssistantController _createPanToDismissSiriGestureRecognizer]
  -[SBAssistantController siriPresentation:isEnabledDidChange:]
  -[SBAssistantController _resetSystemGestures]
  -[SBAssistantController dealloc]
  -[SBAssistantController dismissAssistantViewIfNecessaryForGestureTranslation:velocity:]
  -[SBAssistantController coordinatorRequestedIdleTimerBehavior:]
  -[SBAssistantController siriPresentation:setHomeAffordanceSuppression:]
  -[SBAssistantController siriPresentation:didUpdateShouldPassTouchesThroughToSpringBoard:]
  -[SBAssistantController conformsToCSExternalBehaviorProviding]
  -[SBAssistantController _deviceBlocked:]
  -[SBAssistantController .cxx_destruct]
  -[SBAssistantController _setupSystemGestures]
  -[SBAssistantController _noteDeviceLockedOrBlocked]
  -[SBAssistantController _createAssistantWindowIfNecessaryForSiriPresentationOptions:]
  -[SBAssistantController gestureRecognizerShouldBegin:]
  -[SBAssistantController _updateRootViewControllerShowsHomeAffordance:]
  -[SBAssistantController shouldShowSystemVolumeHUDForCategory:]
  -[SBAssistantController siriPresentation:requestsDeviceUnlockWithPassword:]
  -[SBAssistantController activationSettings]
  -[SBAssistantController unlockedDevice]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithAnimation:completion:]
  -[SBAssistantController _setUnlockedDevice:]
  -[SBAssistantController deviceUnlockRequestedWithPassword:]
  -[SBAssistantController _removeScreenEdgePanGestureRecognizerIfNecessary]
  -[SBAssistantController _commonHandlerForSiriDismissalGesture:]
  -[SBAssistantController siriPresentation:didUpdateAudioCategoriesDisablingVolumeHUD:]
  -[SBAssistantController _tearDownSystemGestures]
  -[SBAssistantController handleFailedAuthenticationRequest:error:]
  -[SBAssistantController siriPresentation:didUpdateShouldDismissForSwipesOutsideContent:]
  -[SBAssistantController _setTouchesPassThroughToSpringBoard:]
  -[SBAssistantController _init]
  -[SBAssistantController siriPresentation:didUpdateShouldPassTapsThroughTo:]
  -[SBAssistantController participantState]
  -[SBAssistantController fluidDismissalState]
  -[SBAssistantController _updateShouldPassTapsThrough]
  -[SBAssistantController isEnabled]
  -[SBAssistantController mainScreenView]
  -[SBAssistantController siriPresentation:requestsDismissalWithOptions:withHandler:]
  -[SBAssistantController _uiLocked:]
  -[SBAssistantController preventsCoverSheetPresentation]
  -[SBAssistantController homeGrabberViewDidReceiveClick:]
  -[SBAssistantController _remoteLocked:]
  -[SBAssistantController _bioAuthenticated:]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithDismissalOptions:]
  -[SBAssistantController _removeHomeGesture]
  -[SBAssistantController _restoreOrientation]
  -[SBAssistantController _pannedToDismissSiri:]
  -[SBAssistantController observeValueForKeyPath:ofObject:change:context:]
  -[SBAssistantController contentObscuresScreen]
  -[SBAssistantController _activationSettingsWithPunchoutStyle:]
  -[SBAssistantController handleInvalidAuthenticationRequest:]
  -[SBAssistantController siriPresentation:didUpdateHomeGestureSharing:]
  -[SBAssistantController _presentForMainScreenAnimated:options:completion:]
  -[SBAssistantController _dismissForMainScreenWithFactory:dismissalOptions:completion:]
  -[SBAssistantController overrideInterfaceOrientation:]
  -[SBAssistantController _updateSceneClientSettings]
  -[SBAssistantController _turnScreenOffWithCompletion:]
  -[SBAssistantController removeObserver:]
  -[SBAssistantController _tappedToDismissSiri:]
  -[SBAssistantController _viewDidDisappearOnMainScreen:]
  -[SBAssistantController _toggleModalAlertHidingAssertion:]
  -[SBAssistantController _setStatusBarHidden:animated:]
  -[SBAssistantController _viewWillAppearOnMainScreen:]
  -[SBAssistantController _dockFrameDidChange:]
  -[SBAssistantController _updateRootViewControllerOwnsHomeGesture]
  -[SBAssistantController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBAssistantController _handleBottomEdgeDismissGesture:]
  -[SBAssistantController _setVisible:]
  -[SBAssistantController _viewDidAppearOnMainScreen:]
  -[SBAssistantController siriPresentation:requestsPunchout:withHandler:]
  -[SBAssistantController _configureHomeGesture]
  -[SBAssistantController addObserver:]
  -[SBAssistantController _siriHomeAffordanceSuppressionAsString:]
  -[SBAssistantController siriPresentation:requestsPresentationWithOptions:withHandler:]
  -[SBAssistantController screenWakeRequested]
  -[SBAssistantController _defaultAnimatedDismissDurationForMainScreen]
  -[SBAssistantController _viewWillDisappearOnMainScreen:]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithAnimation:]
  -[SBAssistantController applicationProcessDidChangeState:]
  -[SBAssistantController dismissAssistantViewIfNecessaryWithAnimation:factory:dismissalOptions:completion:]
  -[SBAssistantController _updateHomeGestureParticipant]
  -[SBAssistantController _teardownWindowInUse]
  -[SBAssistantController siriPresentation:setShowsHomeAffordance:]


SBReachabilityMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBReachabilityMetric init]
  -[SBReachabilityMetric .cxx_destruct]


SBAppSwitcherScrollView : BSUIScrollView /System/Library/PrivateFrameworks/UserActivity.framework/UserActivity
  // instance methods
  -[SBAppSwitcherScrollView contentOffsetVelocityConsideringNextContentOffset:]
  -[SBAppSwitcherScrollView setContentOffset:]
  -[SBAppSwitcherScrollView contentOffsetVelocity]


SBCoverSheetAnimator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBLockToAppStatusBarAnimator *statusBarAnimator
 @property  SBIconZoomAnimator *iconAnimator
 @property  SBWindowSelfHostWrapper *coverSheetWindowHostWrapper
 @property  SBSceneManager *sceneManager
 @property  UIWindow *hostingWindow
 @property  UIWindow *switcherWindow
 @property  SBWallpaperController *wallpaperController
 @property  SBFolderController *folderController
 @property  SBHUnlockSettings *unlockSettings
 @property  BOOL transitioning
 @property  UIWindow *coverSheetWindow

  // instance methods
  -[SBCoverSheetAnimator sceneManager]
  -[SBCoverSheetAnimator isTransitioning]
  -[SBCoverSheetAnimator wallpaperController]
  -[SBCoverSheetAnimator setSceneManager:]
  -[SBCoverSheetAnimator setTransitioning:]
  -[SBCoverSheetAnimator hostingWindow]
  -[SBCoverSheetAnimator setHostingWindow:]
  -[SBCoverSheetAnimator .cxx_destruct]
  -[SBCoverSheetAnimator setUnlockSettings:]
  -[SBCoverSheetAnimator setWallpaperController:]
  -[SBCoverSheetAnimator folderController]
  -[SBCoverSheetAnimator iconAnimator]
  -[SBCoverSheetAnimator setCoverSheetWindow:]
  -[SBCoverSheetAnimator setIconAnimator:]
  -[SBCoverSheetAnimator switcherWindow]
  -[SBCoverSheetAnimator unlockSettings]
  -[SBCoverSheetAnimator coverSheetWindow]
  -[SBCoverSheetAnimator _prepareIconAnimatorIncludingLockScreen:]
  -[SBCoverSheetAnimator _setWallpaperToLocked:duration:]
  -[SBCoverSheetAnimator _updateCoverSheetHosting]
  -[SBCoverSheetAnimator initWithCoverSheetWindow:sceneManager:hostingWindow:switcherWindow:wallpaperController:folderController:unlockSettings:]
  -[SBCoverSheetAnimator animateToCoverSheet:animated:withCompletion:]
  -[SBCoverSheetAnimator statusBarAnimator]
  -[SBCoverSheetAnimator setStatusBarAnimator:]
  -[SBCoverSheetAnimator coverSheetWindowHostWrapper]
  -[SBCoverSheetAnimator setCoverSheetWindowHostWrapper:]
  -[SBCoverSheetAnimator setSwitcherWindow:]
  -[SBCoverSheetAnimator setFolderController:]


SBProximityBacklightPolicyFactory : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBProximityBacklightPolicyFactory createNewProximityBacklightPolicyWithBacklightController:]


SBBannerUnfurlSourceContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, NSMutableCopying>
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceCoordinateSpaceBounds
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceFrame
 @property  double cornerRadius
 @property  {CGPoint=dd} referenceVelocity

  // instance methods
  -[SBBannerUnfurlSourceContext copyWithZone:]
  -[SBBannerUnfurlSourceContext _copyWithClass:]
  -[SBBannerUnfurlSourceContext referenceFrame]
  -[SBBannerUnfurlSourceContext mutableCopyWithZone:]
  -[SBBannerUnfurlSourceContext cornerRadius]
  -[SBBannerUnfurlSourceContext referenceVelocity]
  -[SBBannerUnfurlSourceContext referenceCoordinateSpaceBounds]


SBMutableBannerUnfurlSourceContext : SBBannerUnfurlSourceContext
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceCoordinateSpaceBounds
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} referenceFrame
 @property  double cornerRadius
 @property  {CGPoint=dd} referenceVelocity

  // instance methods
  -[SBMutableBannerUnfurlSourceContext copyWithZone:]
  -[SBMutableBannerUnfurlSourceContext setReferenceFrame:]
  -[SBMutableBannerUnfurlSourceContext setCornerRadius:]
  -[SBMutableBannerUnfurlSourceContext mutableCopyWithZone:]
  -[SBMutableBannerUnfurlSourceContext setReferenceCoordinateSpaceBounds:]
  -[SBMutableBannerUnfurlSourceContext setReferenceVelocity:]


SBChronoHomeScreenUsageObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHHomeScreenUsageMonitorObserver>
 @property  SBHIconManager *iconManager
 @property  CHSConfiguredWidgetContainerConsumer *chronoConsumer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBChronoHomeScreenUsageObserver initWithIconManager:]
  -[SBChronoHomeScreenUsageObserver iconManager]
  -[SBChronoHomeScreenUsageObserver init]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserTappedWidgetIcon:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteWidgetIconStackChangedActiveWidget:]
  -[SBChronoHomeScreenUsageObserver .cxx_destruct]
  -[SBChronoHomeScreenUsageObserver _descriptionForArray:name:]
  -[SBChronoHomeScreenUsageObserver _rebuildAndTransmitConfiguredWidgetData:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteWidgetIconRemoved:]
  -[SBChronoHomeScreenUsageObserver chronoConsumer]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteWidgetIconAdded:]
  -[SBChronoHomeScreenUsageObserver _containerDescriptorForWidgetIcon:atLocation:page:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteUserDislikedWidgetIconStackSuggestion:]
  -[SBChronoHomeScreenUsageObserver homeScreenUsageAggregator:didNoteCurrentPageIndexChanged:]


SBModalAlertPresenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, FBSceneManagerObserver>
 @property  FBScene *scene
 @property  SBModalAlertPresentationCoordinator *modalAlertPresentationCoordinator
 @property  FBSceneManager *sceneManager
 @property  BOOL showingModalAlert
 @property  BOOL foreground
 @property  unsigned long visibleModalAlertCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBModalAlertPresenter sceneManager]
  -[SBModalAlertPresenter modalAlertPresentationCoordinator]
  -[SBModalAlertPresenter _setScene:]
  -[SBModalAlertPresenter setSceneManager:]
  -[SBModalAlertPresenter isShowingModalAlert]
  -[SBModalAlertPresenter sceneManager:willUpdateScene:withSettings:transitionContext:]
  -[SBModalAlertPresenter decrementVisibleModalAlertCount]
  -[SBModalAlertPresenter dealloc]
  -[SBModalAlertPresenter .cxx_destruct]
  -[SBModalAlertPresenter visibleModalAlertCount]
  -[SBModalAlertPresenter setModalAlertPresentationCoordinator:]
  -[SBModalAlertPresenter initForSystemApplication]
  -[SBModalAlertPresenter succinctDescriptionBuilder]
  -[SBModalAlertPresenter _initWithModalAlertPresentationCoordinator:sceneManager:scene:]
  -[SBModalAlertPresenter initWithScene:]
  -[SBModalAlertPresenter incrementVisibleModalAlertCount]
  -[SBModalAlertPresenter succinctDescription]
  -[SBModalAlertPresenter scene]
  -[SBModalAlertPresenter setVisibleModalAlertCount:]
  -[SBModalAlertPresenter acquireVisibleModalAlertAssertionWithDescription:]
  -[SBModalAlertPresenter isForeground]
  -[SBModalAlertPresenter _addOrRemoveModalAlertPresenterIfNecessary]
  -[SBModalAlertPresenter invalidate]
  -[SBModalAlertPresenter descriptionWithMultilinePrefix:]
  -[SBModalAlertPresenter descriptionBuilderWithMultilinePrefix:]
  -[SBModalAlertPresenter _addOrRemoveModalAlertPresenterIfNecessaryWithForegroundState:fromOrToTerminalState:]


SBAlertItemWindow : SBSecureMainScreenActiveInterfaceOrientationWindow
 @property  SBAlertLayoutPresentationVerifier *alertLayoutPresentationVerifier

  // instance methods
  -[SBAlertItemWindow setTransform:]
  -[SBAlertItemWindow _canBecomeKeyWindow]
  -[SBAlertItemWindow initWithDebugName:alertLayoutPresentationVerifier:]
  -[SBAlertItemWindow .cxx_destruct]
  -[SBAlertItemWindow setCenter:]
  -[SBAlertItemWindow setBounds:]
  -[SBAlertItemWindow setFrame:]
  -[SBAlertItemWindow alertLayoutPresentationVerifier]
  -[SBAlertItemWindow setAlertLayoutPresentationVerifier:]


SBSharedModalAlertItemPresenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <_SBAlertControllerDelegate, SBModalViewControllerStackDelegate, UIAlertControllerCoordinatedActionPerforming, SBBarSwipeAffordanceObserver, SBBarSwipeAffordanceDelegate, SBHomeGestureParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBReachabilityObserver>
 @property  SBModalViewControllerStack *modalViewControllerStack
 @property  SBAlertItem *currentlyPresentedAlertItem
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSharedModalAlertItemPresenter handleReachabilityYOffsetDidChange]
  -[SBSharedModalAlertItemPresenter homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBSharedModalAlertItemPresenter currentlyPresentedAlertItem]
  -[SBSharedModalAlertItemPresenter dealloc]
  -[SBSharedModalAlertItemPresenter dismissAlertItem:animated:completion:]
  -[SBSharedModalAlertItemPresenter _performActionForAlertController:invokeActionBlock:dismissControllerBlock:]
  -[SBSharedModalAlertItemPresenter .cxx_destruct]
  -[SBSharedModalAlertItemPresenter _modalViewControllerStack]
  -[SBSharedModalAlertItemPresenter modalViewControllerStack:didPresentViewController:]
  -[SBSharedModalAlertItemPresenter initWithLockOutProvider:systemGestureManager:homeGestureArbiter:reachabilityManager:alertLayoutPresentationVerifier:enableGestures:]
  -[SBSharedModalAlertItemPresenter homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBSharedModalAlertItemPresenter homeGrabberViewDidReceiveClick:]
  -[SBSharedModalAlertItemPresenter initWithLockOutProvider:systemGestureManager:homeGestureArbiter:reachabilityManager:alertLayoutPresentationVerifier:]
  -[SBSharedModalAlertItemPresenter alertControllerDidDisappear:]
  -[SBSharedModalAlertItemPresenter modalViewControllerStack:willPresentViewController:]
  -[SBSharedModalAlertItemPresenter _updateHomeGestureParticipantWithItemCountAdjustment:]
  -[SBSharedModalAlertItemPresenter modalViewControllerStack:willDismissViewController:animated:]
  -[SBSharedModalAlertItemPresenter _updateBarSwipeViewWithAlertController:]
  -[SBSharedModalAlertItemPresenter barSwipeAffordanceView:systemGestureTypeForType:]
  -[SBSharedModalAlertItemPresenter modalViewControllerStack:didDismissViewController:]
  -[SBSharedModalAlertItemPresenter presentAlertItem:isLocked:animated:completion:]
  -[SBSharedModalAlertItemPresenter _setModalViewControllerStack:]


SBPressSequenceSettings : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  unsigned long numberOfPresses
 @property  double maxDefaultPressDownDuration
 @property  double maxDefaultPressUpDuration
 @property  double maxDownToDownDuration
 @property  unsigned long indexOfPressDownToUseForVarianceAndGrowth
 @property  unsigned long numberOfPressDownGrowthTerms
 @property  unsigned long indexOfPressUpToUseForVarianceAndGrowth
 @property  unsigned long numberOfPressUpGrowthTerms
 @property  double pressDownVariance
 @property  double pressUpVariance

  // instance methods
  -[SBPressSequenceSettings numberOfPresses]
  -[SBPressSequenceSettings setNumberOfPresses:]
  -[SBPressSequenceSettings maxDefaultPressDownDuration]
  -[SBPressSequenceSettings setMaxDefaultPressDownDuration:]
  -[SBPressSequenceSettings maxDefaultPressUpDuration]
  -[SBPressSequenceSettings setMaxDefaultPressUpDuration:]
  -[SBPressSequenceSettings maxDownToDownDuration]
  -[SBPressSequenceSettings setMaxDownToDownDuration:]
  -[SBPressSequenceSettings indexOfPressDownToUseForVarianceAndGrowth]
  -[SBPressSequenceSettings setIndexOfPressDownToUseForVarianceAndGrowth:]
  -[SBPressSequenceSettings numberOfPressDownGrowthTerms]
  -[SBPressSequenceSettings setNumberOfPressDownGrowthTerms:]
  -[SBPressSequenceSettings indexOfPressUpToUseForVarianceAndGrowth]
  -[SBPressSequenceSettings setIndexOfPressUpToUseForVarianceAndGrowth:]
  -[SBPressSequenceSettings numberOfPressUpGrowthTerms]
  -[SBPressSequenceSettings setNumberOfPressUpGrowthTerms:]
  -[SBPressSequenceSettings pressDownVariance]
  -[SBPressSequenceSettings setPressDownVariance:]
  -[SBPressSequenceSettings pressUpVariance]
  -[SBPressSequenceSettings setPressUpVariance:]


SBSwipeUpFloatingSwitcherGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction
  // instance methods
  -[SBSwipeUpFloatingSwitcherGestureWorkspaceTransaction _gestureType]


SBDisableActiveInterfaceOrientationChangeAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDisableActiveInterfaceOrientationChangeAssertion dealloc]
  -[SBDisableActiveInterfaceOrientationChangeAssertion .cxx_destruct]
  -[SBDisableActiveInterfaceOrientationChangeAssertion initWithReason:nudgeOrientationOnInvalidate:]
  -[SBDisableActiveInterfaceOrientationChangeAssertion invalidate]


SBWallpaperLegibilitySettingsProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBWallpaperObserver, SBFLegibilitySettingsProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  _UILegibilitySettings *legibilitySettings
 @property  <SBFLegibilitySettingsProviderDelegate> *delegate

  // instance methods
  -[SBWallpaperLegibilitySettingsProvider wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBWallpaperLegibilitySettingsProvider wallpaperDidChangeForVariant:]
  -[SBWallpaperLegibilitySettingsProvider legibilitySettings]
  -[SBWallpaperLegibilitySettingsProvider dealloc]
  -[SBWallpaperLegibilitySettingsProvider .cxx_destruct]
  -[SBWallpaperLegibilitySettingsProvider initWithVariant:]
  -[SBWallpaperLegibilitySettingsProvider setDelegate:]
  -[SBWallpaperLegibilitySettingsProvider delegate]


SBApplicationWakeScheduler : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  <BSTimer> *wakeTimer
 @property  <BSTimer> *wakeSuspendTimer
 @property  NSDate *scheduledDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationWakeScheduler unschedule]
  -[SBApplicationWakeScheduler init]
  -[SBApplicationWakeScheduler dealloc]
  -[SBApplicationWakeScheduler .cxx_destruct]
  -[SBApplicationWakeScheduler _applicationProcessStateDidChange:]
  -[SBApplicationWakeScheduler scheduledDate]
  -[SBApplicationWakeScheduler invalidate]
  -[SBApplicationWakeScheduler wakeImmediately]
  -[SBApplicationWakeScheduler scheduleWakeForDate:]
  -[SBApplicationWakeScheduler wakeTimer]
  -[SBApplicationWakeScheduler _expectedFireDateForTimer:]
  -[SBApplicationWakeScheduler setWakeTimer:]
  -[SBApplicationWakeScheduler _safelyScheduleTimerForDate:persistent:handler:]
  -[SBApplicationWakeScheduler endResumeIfAwoken]
  -[SBApplicationWakeScheduler setWakeSuspendTimer:]
  -[SBApplicationWakeScheduler wakeSuspendTimer]
  -[SBApplicationWakeScheduler _createPersistentTimerWithFireDate:handler:]
  -[SBApplicationWakeScheduler _createTimerWithFireDate:handler:]
  -[SBApplicationWakeScheduler _initWithLifecycleTracker:forApplication:]
  -[SBApplicationWakeScheduler suspensionDate]
  -[SBApplicationWakeScheduler _forceInvalidate]


SBCoverSheetScreenEdgePanGestureRecognizer : SBHomeGesturePanGestureRecognizer

NCUserAlertActionRunner : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NCNotificationActionRunner>
 @property  SBAlertItem *alertItem
 @property  BOOL shouldForwardAction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[NCUserAlertActionRunner .cxx_destruct]
  -[NCUserAlertActionRunner alertItem]
  -[NCUserAlertActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]
  -[NCUserAlertActionRunner shouldForwardAction]
  -[NCUserAlertActionRunner setShouldForwardAction:]
  -[NCUserAlertActionRunner initWithSBAlertItem:]


NCUserAlertDefaultActionRunner : NCUserAlertActionRunner
  // instance methods
  -[NCUserAlertDefaultActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]


NCUserAlertDismissActionRunner : NCUserAlertActionRunner
  // instance methods
  -[NCUserAlertDismissActionRunner executeAction:fromOrigin:endpoint:withParameters:completion:]


SBCameraHardwareButtonSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  double shutterButtonLongPressTimeout
 @property  double shutterButtonLongPressCancellationTimeout
 @property  BOOL shutterButtonShouldUsePocketDetection

  // class methods
  +[SBCameraHardwareButtonSettings settingsControllerModule]

  // instance methods
  -[SBCameraHardwareButtonSettings setDefaultValues]
  -[SBCameraHardwareButtonSettings shutterButtonLongPressTimeout]
  -[SBCameraHardwareButtonSettings shutterButtonLongPressCancellationTimeout]
  -[SBCameraHardwareButtonSettings shutterButtonShouldUsePocketDetection]
  -[SBCameraHardwareButtonSettings setShutterButtonLongPressTimeout:]
  -[SBCameraHardwareButtonSettings setShutterButtonLongPressCancellationTimeout:]
  -[SBCameraHardwareButtonSettings setShutterButtonShouldUsePocketDetection:]


SBCoverSheetSecureAppEnvironmentViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBHomeGestureParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBSecureAppObserver, CSApplicationHosting, SBCoverSheetSlidingViewControllerContentViewController>
 @property  SBDashBoardHostedAppViewController *secureAppViewController
 @property  <SBCoverSheetSecureAppEnvironmentViewControllerDelegate> *delegate
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL contentOccludesBackground

  // instance methods
  -[SBCoverSheetSecureAppEnvironmentViewController viewDidLoad]
  -[SBCoverSheetSecureAppEnvironmentViewController isHostingAnApp]
  -[SBCoverSheetSecureAppEnvironmentViewController hostedAppSceneHandle]
  -[SBCoverSheetSecureAppEnvironmentViewController canHostAnApp]
  -[SBCoverSheetSecureAppEnvironmentViewController conformsToSBApplicationHosting]
  -[SBCoverSheetSecureAppEnvironmentViewController setHomeGestureParticipant:]
  -[SBCoverSheetSecureAppEnvironmentViewController hostedAppWillRotateToInterfaceOrientation:]
  -[SBCoverSheetSecureAppEnvironmentViewController hostedAppSceneHandles]
  -[SBCoverSheetSecureAppEnvironmentViewController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBCoverSheetSecureAppEnvironmentViewController homeGestureParticipant]
  -[SBCoverSheetSecureAppEnvironmentViewController handlesRotationIndependentOfCoverSheet]
  -[SBCoverSheetSecureAppEnvironmentViewController .cxx_destruct]
  -[SBCoverSheetSecureAppEnvironmentViewController secureAppOfTypeDidBegin:]
  -[SBCoverSheetSecureAppEnvironmentViewController supportedInterfaceOrientations]
  -[SBCoverSheetSecureAppEnvironmentViewController viewDidAppear:]
  -[SBCoverSheetSecureAppEnvironmentViewController homeGrabberViewDidReceiveClick:]
  -[SBCoverSheetSecureAppEnvironmentViewController conformsToCSApplicationHosting]
  -[SBCoverSheetSecureAppEnvironmentViewController viewWillAppear:]
  -[SBCoverSheetSecureAppEnvironmentViewController _canShowWhileLocked]
  -[SBCoverSheetSecureAppEnvironmentViewController secureAppViewController]
  -[SBCoverSheetSecureAppEnvironmentViewController setDelegate:]
  -[SBCoverSheetSecureAppEnvironmentViewController viewWillDisappear:]
  -[SBCoverSheetSecureAppEnvironmentViewController contentOccludesBackground]
  -[SBCoverSheetSecureAppEnvironmentViewController delegate]
  -[SBCoverSheetSecureAppEnvironmentViewController conformsToSBCoverSheetSlidingViewControllerContentViewController]
  -[SBCoverSheetSecureAppEnvironmentViewController initWithSecureAppViewController:]
  -[SBCoverSheetSecureAppEnvironmentViewController requestHomeGestureOwnership]
  -[SBCoverSheetSecureAppEnvironmentViewController relinquishHomeGesture]
  -[SBCoverSheetSecureAppEnvironmentViewController secureAppOfTypeDidTakeNewAssertion:]
  -[SBCoverSheetSecureAppEnvironmentViewController _updateSupportedOrientationsMaskForSecureAppAction]
  -[SBCoverSheetSecureAppEnvironmentViewController updateHomeGrabberHiddenAssertion:]
  -[SBCoverSheetSecureAppEnvironmentViewController _currentSecureAppAction]
  -[SBCoverSheetSecureAppEnvironmentViewController relinquishHiddenAssertionForHomeGrabber:animated:]
  -[SBCoverSheetSecureAppEnvironmentViewController takeHiddenAssertionForHomeGrabber:animated:]


SBMainDisplayLayoutState : SBLayoutState
 @property  long long spaceConfiguration
 @property  long long floatingConfiguration
 @property  long long unlockedEnvironmentMode
 @property  NSString *bundleIDShowingAppExpose
 @property  BOOL floatingSwitcherVisible
 @property  NSSet *inlineAppExposeOverlayElements

  // class methods
  +[SBMainDisplayLayoutState _defaultInterfaceOrientation]

  // instance methods
  -[SBMainDisplayLayoutState inlineAppExposeOverlayElementWithRole:]
  -[SBMainDisplayLayoutState _transitionContextForResizingToSpaceConfiguration:]
  -[SBMainDisplayLayoutState unlockedEnvironmentMode]
  -[SBMainDisplayLayoutState .cxx_destruct]
  -[SBMainDisplayLayoutState interfaceOrientation]
  -[SBMainDisplayLayoutState floatingConfiguration]
  -[SBMainDisplayLayoutState floatingItem]
  -[SBMainDisplayLayoutState _initWithLayoutElements:interfaceOrientation:elementInterfaceOrientation:spaceConfiguration:floatingConfiguration:unlockedEnvironmentMode:floatingSwitcherVisible:bundleIDShowingAppExpose:inlineAppExposeOverlayElements:]
  -[SBMainDisplayLayoutState inlineAppExposeOverlayElements]
  -[SBMainDisplayLayoutState isEqual:]
  -[SBMainDisplayLayoutState visibleFloatingItem]
  -[SBMainDisplayLayoutState isFloatingSwitcherVisible]
  -[SBMainDisplayLayoutState bundleIDShowingAppExpose]
  -[SBMainDisplayLayoutState spaceConfiguration]
  -[SBMainDisplayLayoutState _initWithLayoutElements:interfaceOrientation:elementInterfaceOrientation:]
  -[SBMainDisplayLayoutState _transitionContextForDismissingLeftApplication]
  -[SBMainDisplayLayoutState _transitionContextForDismissingRightApplication]
  -[SBMainDisplayLayoutState descriptionBuilderWithMultilinePrefix:]


SBSetupPiPMorphingSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBSetupPiPMorphingSwitcherEventResponse type]


SBAppLayout : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, BSDescriptionProviding, SBSwitcherLayoutElementProviding>
 @property  long long configuration
 @property  long long type
 @property  long long environment
 @property  BOOL insetForHomeAffordance
 @property  BOOL hidden
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAppLayout homeScreenAppLayout]
  +[SBAppLayout appLayoutWithProtobufRepresentation:]

  // instance methods
  -[SBAppLayout copyWithZone:]
  -[SBAppLayout initWithItemsForLayoutRoles:configuration:environment:hidden:]
  -[SBAppLayout initWithItemsForLayoutRoles:configuration:environment:]
  -[SBAppLayout switcherLayoutElementType]
  -[SBAppLayout init]
  -[SBAppLayout allItems]
  -[SBAppLayout compare:]
  -[SBAppLayout .cxx_destruct]
  -[SBAppLayout succinctDescriptionBuilder]
  -[SBAppLayout containsAnyItemFromSet:]
  -[SBAppLayout containsItem:]
  -[SBAppLayout layoutRoleForItem:]
  -[SBAppLayout frameOptions]
  -[SBAppLayout plistRepresentation]
  -[SBAppLayout type]
  -[SBAppLayout appLayoutWithItemsPassingTest:]
  -[SBAppLayout appLayoutByModifyingHiddenState:]
  -[SBAppLayout succinctDescription]
  -[SBAppLayout configuration]
  -[SBAppLayout isEqual:]
  -[SBAppLayout isInsetForHomeAffordance]
  -[SBAppLayout containsItemWithBundleIdentifier:]
  -[SBAppLayout containsItemWithUniqueIdentifier:]
  -[SBAppLayout itemForLayoutRole:]
  -[SBAppLayout environment]
  -[SBAppLayout enumerate:]
  -[SBAppLayout protobufRepresentation]
  -[SBAppLayout descriptionWithMultilinePrefix:]
  -[SBAppLayout initWithPlistRepresentation:]
  -[SBAppLayout descriptionBuilderWithMultilinePrefix:]
  -[SBAppLayout isHidden]


SBCoverSheetPrimarySlidingViewController : SBCoverSheetSlidingViewController <SBGrabberTongueDelegate, SBReachabilityObserver>
 @property  SBFTouchPassThroughView *unlockedContentOverlayView
 @property  SBCoverSheetPanelBackgroundContainerView *panelBackgroundContainerView
 @property  SBFTouchPassThroughView *parallaxClippingView
 @property  SBCoverSheetParallaxContainerView *parallaxContainerView
 @property  SBGrabberTongue *grabberTongue
 @property  SBCoverSheetBlurView *panelCoverSheetBlurView
 @property  SBWallpaperEffectView *panelWallpaperEffectView
 @property  SBWallpaperEffectView *panelFadeOutWallpaperEffectView
 @property  double defaultPresentGestureEdgeRegionSize
 @property  <SBCoverSheetGrabberDelegate> *grabberDelegate
 @property  UIGestureRecognizer *edgePullGestureRecognizer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetPrimarySlidingViewController setGrabberTongue:]
  -[SBCoverSheetPrimarySlidingViewController handleReachabilityModeActivated]
  -[SBCoverSheetPrimarySlidingViewController _shouldShowGrabberOnFirstSwipe]
  -[SBCoverSheetPrimarySlidingViewController _updateWindowVisibility]
  -[SBCoverSheetPrimarySlidingViewController handleReachabilityModeDeactivated]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueUpdatedPulling:withDistance:andVelocity:andGesture:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueOrPullEnabled:forGestureRecognizer:]
  -[SBCoverSheetPrimarySlidingViewController _endTransitionToAppeared:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongue:shouldShowTongueOnFirstSwipeWithEdgeLocation:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueBeganPulling:withDistance:andVelocity:andGesture:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueEndedPulling:withDistance:andVelocity:andGesture:]
  -[SBCoverSheetPrimarySlidingViewController setTransitionSettings:]
  -[SBCoverSheetPrimarySlidingViewController setGrabberDelegate:]
  -[SBCoverSheetPrimarySlidingViewController customGestureRecognizerForGrabberTongue:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueCanceledPulling:withDistance:andVelocity:andGesture:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueWillPresent:]
  -[SBCoverSheetPrimarySlidingViewController edgePullGestureRecognizer]
  -[SBCoverSheetPrimarySlidingViewController unlockedContentOverlayView]
  -[SBCoverSheetPrimarySlidingViewController _beginTransitionFromAppeared:]
  -[SBCoverSheetPrimarySlidingViewController _animationTickedWithProgress:forPresentationValue:]
  -[SBCoverSheetPrimarySlidingViewController setDefaultPresentGestureEdgeRegionSize:]
  -[SBCoverSheetPrimarySlidingViewController dealloc]
  -[SBCoverSheetPrimarySlidingViewController _positionSubviewsForContentFrame:forPresentationValue:]
  -[SBCoverSheetPrimarySlidingViewController _createFadeOutWallpaperEffectView]
  -[SBCoverSheetPrimarySlidingViewController shouldAutorotate]
  -[SBCoverSheetPrimarySlidingViewController .cxx_destruct]
  -[SBCoverSheetPrimarySlidingViewController setPanelCoverSheetBlurView:]
  -[SBCoverSheetPrimarySlidingViewController panelBackgroundContainerView]
  -[SBCoverSheetPrimarySlidingViewController _updatePanelWallpaperEffectView]
  -[SBCoverSheetPrimarySlidingViewController panelFadeOutWallpaperEffectView]
  -[SBCoverSheetPrimarySlidingViewController setPanelBackgroundContainerView:]
  -[SBCoverSheetPrimarySlidingViewController parallaxClippingView]
  -[SBCoverSheetPrimarySlidingViewController parallaxContainerView]
  -[SBCoverSheetPrimarySlidingViewController setUnlockedContentOverlayView:]
  -[SBCoverSheetPrimarySlidingViewController grabberTongueDidDismiss:]
  -[SBCoverSheetPrimarySlidingViewController defaultPresentGestureEdgeRegionSize]
  -[SBCoverSheetPrimarySlidingViewController panelWallpaperEffectView]
  -[SBCoverSheetPrimarySlidingViewController setPanelFadeOutWallpaperEffectView:]
  -[SBCoverSheetPrimarySlidingViewController _canShowWhileLocked]
  -[SBCoverSheetPrimarySlidingViewController grabberTongue]
  -[SBCoverSheetPrimarySlidingViewController setParallaxContainerView:]
  -[SBCoverSheetPrimarySlidingViewController viewDidLayoutSubviews]
  -[SBCoverSheetPrimarySlidingViewController grabberDelegate]
  -[SBCoverSheetPrimarySlidingViewController setPanelWallpaperEffectView:]
  -[SBCoverSheetPrimarySlidingViewController setParallaxClippingView:]
  -[SBCoverSheetPrimarySlidingViewController _createPanelWallpaperEffectViewIfNeeded]
  -[SBCoverSheetPrimarySlidingViewController loadView]
  -[SBCoverSheetPrimarySlidingViewController _setupPanelPartsIfNecessary]
  -[SBCoverSheetPrimarySlidingViewController panelCoverSheetBlurView]


SBRotateScenesWorkspaceTransaction : SBAppToAppWorkspaceTransaction
  // instance methods
  -[SBRotateScenesWorkspaceTransaction _shouldResignActiveForAnimation]
  -[SBRotateScenesWorkspaceTransaction synchronizedTransactionReadyToCommit:]
  -[SBRotateScenesWorkspaceTransaction _serialOverlayPreDismissalOptions]


SBInsecureDrawingAlertItem : SBDiagnosticRequestAlertItem
 @property  NSString *processName
 @property  NSSet *layerNames

  // instance methods
  -[SBInsecureDrawingAlertItem setProcessName:]
  -[SBInsecureDrawingAlertItem message]
  -[SBInsecureDrawingAlertItem setLayerNames:]
  -[SBInsecureDrawingAlertItem processName]
  -[SBInsecureDrawingAlertItem .cxx_destruct]
  -[SBInsecureDrawingAlertItem title]
  -[SBInsecureDrawingAlertItem radarDescription]
  -[SBInsecureDrawingAlertItem _buildVersion]
  -[SBInsecureDrawingAlertItem radarClassification]
  -[SBInsecureDrawingAlertItem layerNames]
  -[SBInsecureDrawingAlertItem shouldShowInLockScreen]
  -[SBInsecureDrawingAlertItem radarTitle]
  -[SBInsecureDrawingAlertItem ignoreIfAlreadyDisplaying]
  -[SBInsecureDrawingAlertItem radarReproducibility]


SBMedusaDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBMedusaDomain domainName]
  +[SBMedusaDomain rootSettings]
  +[SBMedusaDomain rootSettingsClass]
  +[SBMedusaDomain domainGroupName]


SBStartupTransitionToLockOut : SBBaseStartupTransition
 @property  SBLockScreenManager *lockScreenManager

  // instance methods
  -[SBStartupTransitionToLockOut lockScreenManager]
  -[SBStartupTransitionToLockOut performTransitionWithCompletionBlock:]
  -[SBStartupTransitionToLockOut .cxx_destruct]
  -[SBStartupTransitionToLockOut initWithDestination:context:]
  -[SBStartupTransitionToLockOut suggestedLockAnimationForTransitionRequest:]


SBDashBoardAnalyticsEmitter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDashBoardAnalyticsEmitter coverSheetIdentifier]
  -[SBDashBoardAnalyticsEmitter conformsToCSEventHandling]
  -[SBDashBoardAnalyticsEmitter dealloc]
  -[SBDashBoardAnalyticsEmitter .cxx_destruct]
  -[SBDashBoardAnalyticsEmitter initWithCoverSheetViewController:]
  -[SBDashBoardAnalyticsEmitter participantState]
  -[SBDashBoardAnalyticsEmitter handleEvent:]
  -[SBDashBoardAnalyticsEmitter wouldHandleButtonEvent:]


SBProcessSettings : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSSettingDescriptionProvider, SBProcessSettings, NSCopying, BSDescriptionProviding>
 @property  BOOL empty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProcessSettings flagForProcessSetting:]
  -[SBProcessSettings clearProcessSettings]
  -[SBProcessSettings copyProcessSettings]
  -[SBProcessSettings objectForProcessSetting:]
  -[SBProcessSettings setObject:forProcessSetting:]
  -[SBProcessSettings copyWithZone:]
  -[SBProcessSettings init]
  -[SBProcessSettings setFlag:forProcessSetting:]
  -[SBProcessSettings dealloc]
  -[SBProcessSettings .cxx_destruct]
  -[SBProcessSettings succinctDescriptionBuilder]
  -[SBProcessSettings applyProcessSettings:]
  -[SBProcessSettings valueDescriptionForFlag:object:ofSetting:]
  -[SBProcessSettings succinctDescription]
  -[SBProcessSettings boolForProcessSetting:]
  -[SBProcessSettings isEmpty]
  -[SBProcessSettings descriptionWithMultilinePrefix:]
  -[SBProcessSettings keyDescriptionForSetting:]
  -[SBProcessSettings descriptionBuilderWithMultilinePrefix:]


SBEmitSBEventSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  unsigned long eventType
 @property  NSDictionary *payload

  // instance methods
  -[SBEmitSBEventSwitcherEventResponse payload]
  -[SBEmitSBEventSwitcherEventResponse .cxx_destruct]
  -[SBEmitSBEventSwitcherEventResponse eventType]
  -[SBEmitSBEventSwitcherEventResponse type]
  -[SBEmitSBEventSwitcherEventResponse initWithSBEventWithEventType:payload:]


SBCoverSheetWindow : SBSecureWindow
  // class methods
  +[SBCoverSheetWindow sb_autorotates]

  // instance methods
  -[SBCoverSheetWindow becomeFirstResponder]
  -[SBCoverSheetWindow resignFirstResponder]
  -[SBCoverSheetWindow _canBecomeKeyWindow]
  -[SBCoverSheetWindow hitTest:withEvent:]


SBSecureAppWindow : SBCoverSheetWindow

SBStackedFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBStackedFloatingSwitcherModifier scaleForIndex:]
  -[SBStackedFloatingSwitcherModifier frameForIndex:]
  -[SBStackedFloatingSwitcherModifier darkeningAlphaForIndex:]
  -[SBStackedFloatingSwitcherModifier shadowOpacityForIndex:]


SBHomeScreenBackdropView : SBHomeScreenBackdropViewBase
  // instance methods
  -[SBHomeScreenBackdropView cancelInProcessAnimations]
  -[SBHomeScreenBackdropView _setupBackdropViewWithRecipe:scaleAdjustment:]
  -[SBHomeScreenBackdropView initWithFrame:]
  -[SBHomeScreenBackdropView .cxx_destruct]
  -[SBHomeScreenBackdropView endRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropView initWithFrame:materialRecipe:scaleAdjustment:]
  -[SBHomeScreenBackdropView _resetHomeScreenBlurredContentSnapshotImage]
  -[SBHomeScreenBackdropView endRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropView homeScreenBlurredContentSnapshotImage]
  -[SBHomeScreenBackdropView beginRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropView _configureBackdropAnimatableProperty]
  -[SBHomeScreenBackdropView isOpaque]
  -[SBHomeScreenBackdropView _updateBackdropViewIfNeededInvalidatingSnapshot:]
  -[SBHomeScreenBackdropView setBlurProgress:behaviorMode:completion:]
  -[SBHomeScreenBackdropView _invalidateBackdropSnapshot]
  -[SBHomeScreenBackdropView beginRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropView _updateBackdropViewIfNeeded]


SBTapOutsideToDismissSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBTapOutsideToDismissSwitcherModifierEvent type]


SBRemoteTransientOverlayHostViewController : _UIRemoteViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBUIRemoteAlertHostInterface_Internal, BSDescriptionProviding, SBButtonEventsHandler, SBFIdleTimerBehaviorProviding, SBIdleTimerProviding>
 @property  <SBRemoteTransientOverlayHostViewControllerDelegate> *delegate
 @property  BOOL activatingForSiri
 @property  BOOL allowsStackingOverlayContentAbove
 @property  BOOL contentOpaque
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  BOOL shouldEnableFadeInAnimation
 @property  BOOL shouldEnableFadeOutAnimation
 @property  long long preferredLockedGestureDismissalStyle
 @property  long long preferredUnlockedGestureDismissalStyle
 @property  long long preferredBackgroundStyle
 @property  NSNumber *preferredSceneDeactivationReasonValue
 @property  int preferredStatusBarStyleOverridesToCancel
 @property  _UILegibilitySettings *preferredStatusBarLegibilitySettings
 @property  BOOL shouldDisableOrientationUpdates
 @property  BOOL allowsCustomPresentationDismissalAnimations
 @property  BOOL shouldIgnoreContentOverlayInsetUpdates
 @property  BOOL shouldInvalidateWhenDeactivated
 @property  BOOL isScreenshotMarkup
 @property  BOOL switcherEligible
 @property  BOOL shouldDisableBanners
 @property  BOOL shouldDisableControlCenter
 @property  BOOL shouldDisableReachability
 @property  BOOL shouldDisableInteractiveScreenshotGesture
 @property  BOOL shouldDisableSiri
 @property  BOOL shouldPendAlertItems
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout

  // class methods
  +[SBRemoteTransientOverlayHostViewController exportedInterface]
  +[SBRemoteTransientOverlayHostViewController serviceViewControllerInterface]

  // instance methods
  -[SBRemoteTransientOverlayHostViewController handleHomeButtonPress]
  -[SBRemoteTransientOverlayHostViewController canResignFirstResponder]
  -[SBRemoteTransientOverlayHostViewController becomeFirstResponder]
  -[SBRemoteTransientOverlayHostViewController handleHeadsetButtonPress:]
  -[SBRemoteTransientOverlayHostViewController preferredWhitePointAdaptivityStyle]
  -[SBRemoteTransientOverlayHostViewController idleTimerDuration]
  -[SBRemoteTransientOverlayHostViewController handleLockButtonPress]
  -[SBRemoteTransientOverlayHostViewController handleHomeButtonLongPress]
  -[SBRemoteTransientOverlayHostViewController resignFirstResponder]
  -[SBRemoteTransientOverlayHostViewController handleVolumeDownButtonPress]
  -[SBRemoteTransientOverlayHostViewController preferredStatusBarStyle]
  -[SBRemoteTransientOverlayHostViewController setIdleTimerCoordinator:]
  -[SBRemoteTransientOverlayHostViewController handleVolumeUpButtonPress]
  -[SBRemoteTransientOverlayHostViewController handleHomeButtonDoublePress]
  -[SBRemoteTransientOverlayHostViewController idleTimerCoordinator]
  -[SBRemoteTransientOverlayHostViewController idleWarnMode]
  -[SBRemoteTransientOverlayHostViewController idleTimerMode]
  -[SBRemoteTransientOverlayHostViewController setActivatingForSiri:]
  -[SBRemoteTransientOverlayHostViewController isActivatingForSiri]
  -[SBRemoteTransientOverlayHostViewController shouldInvalidateWhenDeactivated]
  -[SBRemoteTransientOverlayHostViewController isSwitcherEligible]
  -[SBRemoteTransientOverlayHostViewController setSwitcherEligible:]
  -[SBRemoteTransientOverlayHostViewController setShouldDismissOnUILock:]
  -[SBRemoteTransientOverlayHostViewController preferredInterfaceOrientationForPresentation]
  -[SBRemoteTransientOverlayHostViewController dismiss]
  -[SBRemoteTransientOverlayHostViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBRemoteTransientOverlayHostViewController shouldDisableControlCenter]
  -[SBRemoteTransientOverlayHostViewController .cxx_destruct]
  -[SBRemoteTransientOverlayHostViewController _updateContentOverlayInsetsFromParentIfNecessary]
  -[SBRemoteTransientOverlayHostViewController canBecomeFirstResponder]
  -[SBRemoteTransientOverlayHostViewController _preferredStatusBarVisibility]
  -[SBRemoteTransientOverlayHostViewController succinctDescriptionBuilder]
  -[SBRemoteTransientOverlayHostViewController shouldDisableSiri]
  -[SBRemoteTransientOverlayHostViewController deactivate]
  -[SBRemoteTransientOverlayHostViewController customIdleExpirationTimeout]
  -[SBRemoteTransientOverlayHostViewController initWithNibName:bundle:]
  -[SBRemoteTransientOverlayHostViewController viewDidAppear:]
  -[SBRemoteTransientOverlayHostViewController succinctDescription]
  -[SBRemoteTransientOverlayHostViewController prepareForActivationWithContext:completion:]
  -[SBRemoteTransientOverlayHostViewController _participateInSystemAnimationFence:]
  -[SBRemoteTransientOverlayHostViewController setAllowsBanners:]
  -[SBRemoteTransientOverlayHostViewController setAllowsAlertItems:]
  -[SBRemoteTransientOverlayHostViewController setAllowsControlCenter:]
  -[SBRemoteTransientOverlayHostViewController setAllowsSiri:]
  -[SBRemoteTransientOverlayHostViewController setDesiredHardwareButtonEvents:]
  -[SBRemoteTransientOverlayHostViewController setAllowsMenuButtonDismissal:]
  -[SBRemoteTransientOverlayHostViewController setWallpaperTunnelActive:]
  -[SBRemoteTransientOverlayHostViewController setBackgroundStyle:withDuration:]
  -[SBRemoteTransientOverlayHostViewController setWallpaperStyle:withDuration:]
  -[SBRemoteTransientOverlayHostViewController setAllowsAlertStacking:]
  -[SBRemoteTransientOverlayHostViewController setDismissalAnimationStyle:]
  -[SBRemoteTransientOverlayHostViewController setSwipeDismissalStyle:]
  -[SBRemoteTransientOverlayHostViewController setDesiredStatusBarStyleOverrides:]
  -[SBRemoteTransientOverlayHostViewController setStyleOverridesToCancel:animationSettings:]
  -[SBRemoteTransientOverlayHostViewController setDesiredAutoLockDuration:]
  -[SBRemoteTransientOverlayHostViewController setDesiredIdleTimerSettings:]
  -[SBRemoteTransientOverlayHostViewController setInteractiveScreenshotGestureDisabled:]
  -[SBRemoteTransientOverlayHostViewController setReachabilityDisabled:]
  -[SBRemoteTransientOverlayHostViewController setStatusBarHidden:withDuration:]
  -[SBRemoteTransientOverlayHostViewController setShouldDisableFadeInAnimation:]
  -[SBRemoteTransientOverlayHostViewController setSupportedInterfaceOrientationOverride:]
  -[SBRemoteTransientOverlayHostViewController setLaunchingInterfaceOrientation:]
  -[SBRemoteTransientOverlayHostViewController setOrientationChangedEventsEnabled:]
  -[SBRemoteTransientOverlayHostViewController setSceneDeactivationReason:]
  -[SBRemoteTransientOverlayHostViewController configureWithContext:completion:]
  -[SBRemoteTransientOverlayHostViewController didInvalidateForRemoteAlert]
  -[SBRemoteTransientOverlayHostViewController viewWillAppear:]
  -[SBRemoteTransientOverlayHostViewController _canShowWhileLocked]
  -[SBRemoteTransientOverlayHostViewController isContentOpaque]
  -[SBRemoteTransientOverlayHostViewController handleDoubleHeightStatusBarTap]
  -[SBRemoteTransientOverlayHostViewController setDelegate:]
  -[SBRemoteTransientOverlayHostViewController viewDidDisappear:]
  -[SBRemoteTransientOverlayHostViewController viewWillDisappear:]
  -[SBRemoteTransientOverlayHostViewController invalidate]
  -[SBRemoteTransientOverlayHostViewController delegate]
  -[SBRemoteTransientOverlayHostViewController descriptionWithMultilinePrefix:]
  -[SBRemoteTransientOverlayHostViewController viewServiceDidTerminateWithError:]
  -[SBRemoteTransientOverlayHostViewController setIdleTimerDisabled:forReason:]
  -[SBRemoteTransientOverlayHostViewController setWhitePointAdaptivityStyle:]
  -[SBRemoteTransientOverlayHostViewController descriptionBuilderWithMultilinePrefix:]
  -[SBRemoteTransientOverlayHostViewController preferredUnlockedGestureDismissalStyle]
  -[SBRemoteTransientOverlayHostViewController allowsStackingOverlayContentAbove]
  -[SBRemoteTransientOverlayHostViewController shouldDisableBanners]
  -[SBRemoteTransientOverlayHostViewController shouldPendAlertItems]
  -[SBRemoteTransientOverlayHostViewController isScreenshotMarkup]
  -[SBRemoteTransientOverlayHostViewController setIsScreenshotMarkup:]
  -[SBRemoteTransientOverlayHostViewController preserveInputViewsAnimated:]
  -[SBRemoteTransientOverlayHostViewController restoreInputViewsAnimated:]
  -[SBRemoteTransientOverlayHostViewController handlePictureInPictureDidBegin]
  -[SBRemoteTransientOverlayHostViewController setShouldEnableFadeInAnimation:]
  -[SBRemoteTransientOverlayHostViewController setShouldEnableFadeOutAnimation:]
  -[SBRemoteTransientOverlayHostViewController setAllowsCustomPresentationDismissalAnimations:]
  -[SBRemoteTransientOverlayHostViewController shouldEnableFadeInAnimation]
  -[SBRemoteTransientOverlayHostViewController shouldEnableFadeOutAnimation]
  -[SBRemoteTransientOverlayHostViewController setShouldIgnoreContentOverlayInsetUpdates:]
  -[SBRemoteTransientOverlayHostViewController preferredLockedGestureDismissalStyle]
  -[SBRemoteTransientOverlayHostViewController preferredSceneDeactivationReasonValue]
  -[SBRemoteTransientOverlayHostViewController dismissForTransientOverlayAnimated:completion:]
  -[SBRemoteTransientOverlayHostViewController presentForTransientOverlayAnimated:completion:]
  -[SBRemoteTransientOverlayHostViewController preferredStatusBarStyleOverridesToCancel]
  -[SBRemoteTransientOverlayHostViewController shouldDisableReachability]
  -[SBRemoteTransientOverlayHostViewController shouldDisableOrientationUpdates]
  -[SBRemoteTransientOverlayHostViewController shouldDisableInteractiveScreenshotGesture]
  -[SBRemoteTransientOverlayHostViewController preferredBackgroundStyle]
  -[SBRemoteTransientOverlayHostViewController _performButtonEvents:]
  -[SBRemoteTransientOverlayHostViewController _updatePreferredGestureDismissalStyles]
  -[SBRemoteTransientOverlayHostViewController _updatePreferredBackgroundStyleWithAnimationSettings:]
  -[SBRemoteTransientOverlayHostViewController _updateContentOpaqueProperty]
  -[SBRemoteTransientOverlayHostViewController allowsCustomPresentationDismissalAnimations]
  -[SBRemoteTransientOverlayHostViewController preferredStatusBarLegibilitySettings]
  -[SBRemoteTransientOverlayHostViewController shouldIgnoreContentOverlayInsetUpdates]


SBPIPAnalytics : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <PGPictureInPictureAnalyticsDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPAnalytics .cxx_destruct]
  -[SBPIPAnalytics pictureInPictureDidDestroyAnalyticsSourceWithUUID:]
  -[SBPIPAnalytics pictureInPictureDidCreateAnalyticsSourceWithUUID:bundleIdentifier:contentType:]
  -[SBPIPAnalytics pictureInPictureDidChangeStashStateForAnalyticsSessionWithUUID:stashed:]
  -[SBPIPAnalytics pictureInPictureDidDeactivateAnalyticsSessionWithUUID:analyticsSourceUUID:appStoppedSession:restoredFullScreen:]
  -[SBPIPAnalytics pictureInPictureDidDestroyAnalyticsSessionWithUUID:]
  -[SBPIPAnalytics pictureInPictureDidCreateAnalyticsSessionWithUUID:bundleIdentifier:contentType:]
  -[SBPIPAnalytics pictureInPictureDidActivateAnalyticsSessionWithUUID:analyticsSourceUUID:automatically:]
  -[SBPIPAnalytics pictureInPictureAnalyticsSourceWithUUID:didBecomePossible:]
  -[SBPIPAnalytics assistantForUUID:]


SBPIPAnalyticsAssistant : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *analyticsIdentifier

  // instance methods
  -[SBPIPAnalyticsAssistant .cxx_destruct]
  -[SBPIPAnalyticsAssistant invalidate]
  -[SBPIPAnalyticsAssistant generateAnalyticsPayload]
  -[SBPIPAnalyticsAssistant initWithBundleIdentifier:contentType:isAutoPIPEnabled:invalidationBlock:]
  -[SBPIPAnalyticsAssistant noteBecameInactiveAtTime:]
  -[SBPIPAnalyticsAssistant noteBecameActiveAtTime:]
  -[SBPIPAnalyticsAssistant analyticsIdentifier]
  -[SBPIPAnalyticsAssistant _generateMutableAnalyticsPayload]


SBPIPAnalyticsSourceSummaryAssistant : SBPIPAnalyticsAssistant
  // instance methods
  -[SBPIPAnalyticsSourceSummaryAssistant invalidate]
  -[SBPIPAnalyticsSourceSummaryAssistant initWithBundleIdentifier:contentType:isAutoPIPEnabled:invalidationBlock:]
  -[SBPIPAnalyticsSourceSummaryAssistant notePIPBecameProhibitedAtTime:]
  -[SBPIPAnalyticsSourceSummaryAssistant notePIPBecamePossibleAtTime:]
  -[SBPIPAnalyticsSourceSummaryAssistant noteBecameActiveAtTime:]
  -[SBPIPAnalyticsSourceSummaryAssistant analyticsIdentifier]
  -[SBPIPAnalyticsSourceSummaryAssistant _generateMutableAnalyticsPayload]


SBPIPAnalyticsSessionSummaryAssistant : SBPIPAnalyticsAssistant
  // instance methods
  -[SBPIPAnalyticsSessionSummaryAssistant invalidate]
  -[SBPIPAnalyticsSessionSummaryAssistant initWithBundleIdentifier:contentType:isAutoPIPEnabled:invalidationBlock:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteStartedAutomatically:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteBecameUnstashedAtTime:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteAppStoppedSession:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteRestoredFullScreen:]
  -[SBPIPAnalyticsSessionSummaryAssistant noteBecameStashedAtTime:]
  -[SBPIPAnalyticsSessionSummaryAssistant analyticsIdentifier]
  -[SBPIPAnalyticsSessionSummaryAssistant _generateMutableAnalyticsPayload]


SBFluidSwitcherIconOverlayView : SBOrientationTransformWrapperView /usr/lib/libicucore.A.dylib
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} crossfadeViewFrame
 @property  SBIconView *iconView
 @property  double cornerRadius

  // instance methods
  -[SBFluidSwitcherIconOverlayView _applyIconOverlayViewOverlayScaleProperties]
  -[SBFluidSwitcherIconOverlayView crossfadeViewFrame]
  -[SBFluidSwitcherIconOverlayView iconView]
  -[SBFluidSwitcherIconOverlayView setCornerRadius:]
  -[SBFluidSwitcherIconOverlayView _setUpIconCrossfadeView]
  -[SBFluidSwitcherIconOverlayView dealloc]
  -[SBFluidSwitcherIconOverlayView .cxx_destruct]
  -[SBFluidSwitcherIconOverlayView _iconOverlayScale]
  -[SBFluidSwitcherIconOverlayView _currentFadeValue]
  -[SBFluidSwitcherIconOverlayView invalidate]
  -[SBFluidSwitcherIconOverlayView cornerRadius]
  -[SBFluidSwitcherIconOverlayView initWithIconView:crossfadeView:crossfadeViewFrame:contentOrientation:containerOrientation:]
  -[SBFluidSwitcherIconOverlayView layoutSubviews]
  -[SBFluidSwitcherIconOverlayView _setUpIconCrossfadeAnimatableProperty]


SBIdleTimerPolicyAggregator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIdleTimerObserving, SBIdleTimerGlobalCoordinatorDelegate>
 @property  <SBIdleTimer> *idleTimer
 @property  SBBacklightController *backlightController
 @property  SBDeviceUnlockAggdLogger *logger
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerPolicyAggregator idleTimerDidResetForUserAttention:]
  -[SBIdleTimerPolicyAggregator idleTimerDidRefresh:]
  -[SBIdleTimerPolicyAggregator idleTimerDidWarn:]
  -[SBIdleTimerPolicyAggregator idleTimer]
  -[SBIdleTimerPolicyAggregator _logger]
  -[SBIdleTimerPolicyAggregator .cxx_destruct]
  -[SBIdleTimerPolicyAggregator idleTimerDidExpire:]
  -[SBIdleTimerPolicyAggregator _backlightController]
  -[SBIdleTimerPolicyAggregator _setIdleTimer:]
  -[SBIdleTimerPolicyAggregator initWithBacklightController:proximitySensorManager:idleEventHandler:]
  -[SBIdleTimerPolicyAggregator _addIdleTimerHandler:]
  -[SBIdleTimerPolicyAggregator _removeIdleTimerHandler:]
  -[SBIdleTimerPolicyAggregator idleTimerGlobalCoordinator:didActivateIdleTimer:]
  -[SBIdleTimerPolicyAggregator _initWithBacklightController:proximitySensorManager:idleEventHandler:globalStateMonitor:unlockLogger:]


SBTransitionSwitcherModifierRemovalContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long actionType
 @property  long long animationStyle

  // instance methods
  -[SBTransitionSwitcherModifierRemovalContext actionType]
  -[SBTransitionSwitcherModifierRemovalContext animationStyle]
  -[SBTransitionSwitcherModifierRemovalContext initWithActionType:animationStyle:]


SBVoiceDisabledBundles : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBVoiceDisabledBundles setAppDisabledVoiceControl:bundleIdentifier:]
  +[SBVoiceDisabledBundles voiceControlDisabledByCurrentlyRunningApp]


SBPBAppLayout : PBCodable /System/Library/PrivateFrameworks/EmbeddedDataReset.framework/EmbeddedDataReset <NSCopying>
  // instance methods
  -[SBPBAppLayout copyWithZone:]
  -[SBPBAppLayout .cxx_destruct]
  -[SBPBAppLayout readFrom:]
  -[SBPBAppLayout writeTo:]
  -[SBPBAppLayout isEqual:]
  -[SBPBAppLayout dictionaryRepresentation]


SBSwitcherModifierEventResponse : SBChainableModifierEventResponse
  // class methods
  +[SBSwitcherModifierEventResponse newEventResponse]

  // instance methods
  -[SBSwitcherModifierEventResponse loggingCategory]
  -[SBSwitcherModifierEventResponse type]


SBInteractiveScreenshotGestureHostRootViewController : SBFTouchPassThroughViewController /usr/lib/libutil.dylib <BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInteractiveScreenshotGestureHostRootViewController viewDidLoad]
  -[SBInteractiveScreenshotGestureHostRootViewController .cxx_destruct]
  -[SBInteractiveScreenshotGestureHostRootViewController supportedInterfaceOrientations]
  -[SBInteractiveScreenshotGestureHostRootViewController _canShowWhileLocked]
  -[SBInteractiveScreenshotGestureHostRootViewController invalidate]
  -[SBInteractiveScreenshotGestureHostRootViewController initWithScreen:]
  -[SBInteractiveScreenshotGestureHostRootViewController _reloadLayerHostView]
  -[SBInteractiveScreenshotGestureHostRootViewController setHostingContextID:pid:]


SBSceneLayoutSynchronizeTransitionTransaction : BSTransaction /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
  // instance methods
  -[SBSceneLayoutSynchronizeTransitionTransaction synchronize]
  -[SBSceneLayoutSynchronizeTransitionTransaction init]
  -[SBSceneLayoutSynchronizeTransitionTransaction _canBeInterrupted]
  -[SBSceneLayoutSynchronizeTransitionTransaction _graphNodeDebugName]
  -[SBSceneLayoutSynchronizeTransitionTransaction .cxx_destruct]
  -[SBSceneLayoutSynchronizeTransitionTransaction initWithDebugName:]


SBSceneLayoutWorkspaceTransaction : SBWorkspaceTransaction <FBSynchronizedTransactionGroupDelegate, FBApplicationUpdateScenesTransactionObserver, FBSynchronizedTransaction>
 @property  <SBSceneLayoutWorkspaceTransactionDelegate> *delegate
 @property  unsigned long options
 @property  BOOL transitioning
 @property  SBWorkspaceApplicationSceneTransitionContext *transitionContext
 @property  NSSet *sceneUpdateTransactions
 @property  NSSet *toApplicationSceneEntities
 @property  NSSet *fromApplicationSceneEntities
 @property  NSSet *foregroundingApplicationSceneEntities
 @property  NSSet *backgroundingApplicationSceneEntities
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <FBSynchronizedTransactionDelegate> *synchronizationDelegate

  // instance methods
  -[SBSceneLayoutWorkspaceTransaction sceneManager]
  -[SBSceneLayoutWorkspaceTransaction transaction:didCommitSceneUpdate:]
  -[SBSceneLayoutWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBSceneLayoutWorkspaceTransaction synchronizedTransaction:didCommitSynchronizedTransactions:]
  -[SBSceneLayoutWorkspaceTransaction sceneUpdateTransactions]
  -[SBSceneLayoutWorkspaceTransaction isTransitioning]
  -[SBSceneLayoutWorkspaceTransaction synchronizationDelegate]
  -[SBSceneLayoutWorkspaceTransaction setSynchronizationDelegate:]
  -[SBSceneLayoutWorkspaceTransaction _captureAppsForTransition]
  -[SBSceneLayoutWorkspaceTransaction _willBegin]
  -[SBSceneLayoutWorkspaceTransaction _canBeInterrupted]
  -[SBSceneLayoutWorkspaceTransaction performSynchronizedCommit]
  -[SBSceneLayoutWorkspaceTransaction toApplicationSceneEntities]
  -[SBSceneLayoutWorkspaceTransaction synchronizedTransactionReadyToCommit:]
  -[SBSceneLayoutWorkspaceTransaction transaction:didLaunchProcess:]
  -[SBSceneLayoutWorkspaceTransaction _didComplete]
  -[SBSceneLayoutWorkspaceTransaction fromApplicationSceneEntities]
  -[SBSceneLayoutWorkspaceTransaction _sendActivationResultWithError:]
  -[SBSceneLayoutWorkspaceTransaction _childTransactionDidComplete:]
  -[SBSceneLayoutWorkspaceTransaction initWithTransitionRequest:]
  -[SBSceneLayoutWorkspaceTransaction isReadyForSynchronizedCommit]
  -[SBSceneLayoutWorkspaceTransaction transaction:willLaunchProcess:]
  -[SBSceneLayoutWorkspaceTransaction _prepareScenesForSceneUpdates]
  -[SBSceneLayoutWorkspaceTransaction _completeTransition]
  -[SBSceneLayoutWorkspaceTransaction _sceneEntities:hasEntityRepresentingSceneID:]
  -[SBSceneLayoutWorkspaceTransaction backgroundingApplicationSceneEntities]
  -[SBSceneLayoutWorkspaceTransaction _updateAggregateDictionary]
  -[SBSceneLayoutWorkspaceTransaction dealloc]
  -[SBSceneLayoutWorkspaceTransaction _begin]
  -[SBSceneLayoutWorkspaceTransaction synchronizedTransaction:willCommitSynchronizedTransactions:]
  -[SBSceneLayoutWorkspaceTransaction _willInterruptWithReason:]
  -[SBSceneLayoutWorkspaceTransaction _willFailWithReason:]
  -[SBSceneLayoutWorkspaceTransaction .cxx_destruct]
  -[SBSceneLayoutWorkspaceTransaction options]
  -[SBSceneLayoutWorkspaceTransaction _orientationForFollowOnRotationIfNeeded]
  -[SBSceneLayoutWorkspaceTransaction _overrideInterfaceOrientationForOrientationMismatch:]
  -[SBSceneLayoutWorkspaceTransaction _performTransition]
  -[SBSceneLayoutWorkspaceTransaction transitionContext]
  -[SBSceneLayoutWorkspaceTransaction transaction:didCreateScene:]
  -[SBSceneLayoutWorkspaceTransaction setOptions:]
  -[SBSceneLayoutWorkspaceTransaction _prepareScenesForTransition]
  -[SBSceneLayoutWorkspaceTransaction _mainDisplayUpdateAggregateDictionaryForLayoutRoleWithApplication:]
  -[SBSceneLayoutWorkspaceTransaction synchronizedTransactionGroup:shouldFailForSynchronizedTransaction:]
  -[SBSceneLayoutWorkspaceTransaction transaction:willUpdateScene:]
  -[SBSceneLayoutWorkspaceTransaction setDelegate:]
  -[SBSceneLayoutWorkspaceTransaction _beginLayoutTransition]
  -[SBSceneLayoutWorkspaceTransaction _updateKeyboardContextMaskStyles:]
  -[SBSceneLayoutWorkspaceTransaction delegate]
  -[SBSceneLayoutWorkspaceTransaction _evaluateTransitionCompletion]
  -[SBSceneLayoutWorkspaceTransaction foregroundingApplicationSceneEntities]
  -[SBSceneLayoutWorkspaceTransaction _prepareLayoutTransition]
  -[SBSceneLayoutWorkspaceTransaction _updateScenesForTransitionCompletion]
  -[SBSceneLayoutWorkspaceTransaction transaction:willCommitSceneUpdate:]


SBSceneClientRotationView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  long long rotation

  // instance methods
  -[SBSceneClientRotationView rotation]
  -[SBSceneClientRotationView setRotation:]


_SBDeviceApplicationSceneClassicHostWrapperView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

_SBDeviceApplicationSceneClassicHostPositioningView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBDeviceApplicationSceneView : SBApplicationSceneView <SBDeviceApplicationSceneClassicAccessoryViewDelegate, PTSettingsKeyObserver, SBAppSwitcherPageContentView>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL counterRotationViewTransformUpdatesPaused
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  UIView<SBApplicationSceneBackgroundView> *backgroundView
 @property  BOOL forcesStatusBarHidden
 @property  SBApplicationSceneViewStatusBarDescriptor *statusBarDescriptor
 @property  double statusBarAlpha
 @property  SBHomeGrabberView *homeGrabberView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double cornerRadius
 @property  long long orientation
 @property  BOOL contentRequiresGroupOpacity
 @property  BOOL active
 @property  BOOL visible

  // instance methods
  -[SBDeviceApplicationSceneView homeGrabberView]
  -[SBDeviceApplicationSceneView setVisible:]
  -[SBDeviceApplicationSceneView _sceneDrivesOwnRotation]
  -[SBDeviceApplicationSceneView _wallpaperStyle]
  -[SBDeviceApplicationSceneView setForcesStatusBarHidden:]
  -[SBDeviceApplicationSceneView initWithSceneHandle:referenceSize:orientation:hostRequester:]
  -[SBDeviceApplicationSceneView _refresh]
  -[SBDeviceApplicationSceneView settings:changedValueForKey:]
  -[SBDeviceApplicationSceneView setBackgroundView:]
  -[SBDeviceApplicationSceneView _updateReferenceSize:andOrientation:]
  -[SBDeviceApplicationSceneView isVisible]
  -[SBDeviceApplicationSceneView applicationSceneCompatibilityModeAnimatingChangeTo:]
  -[SBDeviceApplicationSceneView _updateEdgeProtectAndAutoHideOnHomeGrabberView]
  -[SBDeviceApplicationSceneView _effectiveSceneBounds]
  -[SBDeviceApplicationSceneView statusBarAlpha]
  -[SBDeviceApplicationSceneView _updateStatusBarVisibilityForHostView]
  -[SBDeviceApplicationSceneView _transitionViewForHostView]
  -[SBDeviceApplicationSceneView setCornerRadius:]
  -[SBDeviceApplicationSceneView addOverlayView:withPriority:]
  -[SBDeviceApplicationSceneView dealloc]
  -[SBDeviceApplicationSceneView .cxx_destruct]
  -[SBDeviceApplicationSceneView counterRotationViewTransformUpdatesPaused]
  -[SBDeviceApplicationSceneView _configureSceneLiveHostView:]
  -[SBDeviceApplicationSceneView _tearDownHostCounterRotationViewIfNecessary]
  -[SBDeviceApplicationSceneView setStatusBarDescriptor:]
  -[SBDeviceApplicationSceneView setActive:]
  -[SBDeviceApplicationSceneView isActive]
  -[SBDeviceApplicationSceneView setBounds:]
  -[SBDeviceApplicationSceneView setStatusBarAlpha:]
  -[SBDeviceApplicationSceneView createClassicAccesoryViewIfNecessary]
  -[SBDeviceApplicationSceneView _createHostCounterRotationViewIfNecessary]
  -[SBDeviceApplicationSceneView _invalidateSceneLiveHostView:]
  -[SBDeviceApplicationSceneView _createClassicWrapperViewIfNecessaryForHostView:]
  -[SBDeviceApplicationSceneView _configureSceneSnapshotContext:]
  -[SBDeviceApplicationSceneView _layoutLiveHostView:]
  -[SBDeviceApplicationSceneView _sceneHandleDidUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDeviceApplicationSceneView _sceneHandleDidUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationSceneView createHomeGrabberViewIfNecessaryWithSettings:]
  -[SBDeviceApplicationSceneView _representsTranslucentContent]
  -[SBDeviceApplicationSceneView tearDownHomeGrabberView]
  -[SBDeviceApplicationSceneView invalidate]
  -[SBDeviceApplicationSceneView _updateDragAndDropExclusionDebugViewsIfNecessary]
  -[SBDeviceApplicationSceneView cornerRadius]
  -[SBDeviceApplicationSceneView contentRequiresGroupOpacity]
  -[SBDeviceApplicationSceneView teardownClassicAccesoryViewIfNecessary]
  -[SBDeviceApplicationSceneView removeOverlayView:withPriority:]
  -[SBDeviceApplicationSceneView setCounterRotationViewTransformUpdatesPaused:]
  -[SBDeviceApplicationSceneView deviceApplicationSceneView]
  -[SBDeviceApplicationSceneView layoutSubviews]
  -[SBDeviceApplicationSceneView forcesStatusBarHidden]
  -[SBDeviceApplicationSceneView _maybeStartTrackingRotationForOverlay]
  -[SBDeviceApplicationSceneView statusBarDescriptor]


SBSoundController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBSoundController sharedInstance]

  // instance methods
  -[SBSoundController _cleanupToneAlertForSound:andKill:]
  -[SBSoundController init]
  -[SBSoundController _cleanupSystemSound:andKill:]
  -[SBSoundController _soundDidStartPlaying:]
  -[SBSoundController _beginPendingCallbacksBlock]
  -[SBSoundController stopSound:]
  -[SBSoundController .cxx_destruct]
  -[SBSoundController _playSystemSound:]
  -[SBSoundController _enqueueCallback:]
  -[SBSoundController isPlayingAnySound]
  -[SBSoundController isPlaying:]
  -[SBSoundController playSound:environments:completion:]
  -[SBSoundController _endPendingCallbacksBlock]
  -[SBSoundController _playFeedback:]
  -[SBSoundController _ringerStateChanged:]
  -[SBSoundController _soundDidFinishPlaying:]
  -[SBSoundController removeObserver:]
  -[SBSoundController handleVolumeButtonDownEvent]
  -[SBSoundController addObserver:]
  -[SBSoundController stopAllSounds]
  -[SBSoundController playSoundWithDefaultEnvironment:]
  -[SBSoundController _playToneAlert:]


SBApplicationBlurContentView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBSceneViewAppIconView *iconView

  // instance methods
  -[SBApplicationBlurContentView didMoveToWindow]
  -[SBApplicationBlurContentView iconView]
  -[SBApplicationBlurContentView initWithFrame:]
  -[SBApplicationBlurContentView dealloc]
  -[SBApplicationBlurContentView .cxx_destruct]
  -[SBApplicationBlurContentView _setState:]
  -[SBApplicationBlurContentView layoutSubviews]
  -[SBApplicationBlurContentView initWithCoder:]
  -[SBApplicationBlurContentView initWithFrame:deviceApplicationSceneHandle:targetViewToBlur:]
  -[SBApplicationBlurContentView generateBlurredSnapshotWithCompletion:]
  -[SBApplicationBlurContentView generateAndAnimateToBlurredSnapshotWithAnimationFactory:completion:]
  -[SBApplicationBlurContentView animateToBlurredSnapshotWithFactory:completion:]
  -[SBApplicationBlurContentView _iconViewForApplication]
  -[SBApplicationBlurContentView _fireCompletionBlocksForState:]
  -[SBApplicationBlurContentView _addCompletionBlock:forState:]
  -[SBApplicationBlurContentView _doBlurGenerationWithCompletion:]
  -[SBApplicationBlurContentView _doAnimationToBlurredSnapshotWithFactory:completion:]


SBApplicationBlurSnapshotGenerationContainerView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIView *wallpaperView
 @property  UIView *realSnapshotView
 @property  UIView *liveBlurView

  // instance methods
  -[SBApplicationBlurSnapshotGenerationContainerView .cxx_destruct]
  -[SBApplicationBlurSnapshotGenerationContainerView setWallpaperView:]
  -[SBApplicationBlurSnapshotGenerationContainerView wallpaperView]
  -[SBApplicationBlurSnapshotGenerationContainerView layoutSubviews]
  -[SBApplicationBlurSnapshotGenerationContainerView setLiveBlurView:]
  -[SBApplicationBlurSnapshotGenerationContainerView setRealSnapshotView:]
  -[SBApplicationBlurSnapshotGenerationContainerView realSnapshotView]
  -[SBApplicationBlurSnapshotGenerationContainerView liveBlurView]


SBApplicationBlurContentViewBackdropSettings : _UIBackdropViewSettings /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBApplicationBlurContentViewBackdropSettings setDefaultValues]


SBAlertImageHeaderViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBAlertImageHeaderViewController .cxx_destruct]
  -[SBAlertImageHeaderViewController loadView]
  -[SBAlertImageHeaderViewController initWithImage:height:]


SBImageHeaderAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBImageHeaderAlertItem dismissOnLock]
  -[SBImageHeaderAlertItem initWithType:]
  -[SBImageHeaderAlertItem configure:requirePasscodeForActions:]
  -[SBImageHeaderAlertItem ignoreIfAlreadyDisplaying]


SBDeviceApplicationAppClipOverlayViewProvider : SBDeviceApplicationSceneOverlayViewProvider <SBDeviceApplicationSceneHandleObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationAppClipOverlayViewProvider initWithSceneHandle:delegate:]
  -[SBDeviceApplicationAppClipOverlayViewProvider _deactivateIfPossible]
  -[SBDeviceApplicationAppClipOverlayViewProvider _activateIfPossible]
  -[SBDeviceApplicationAppClipOverlayViewProvider _updateOverlaySceneActivationState]
  -[SBDeviceApplicationAppClipOverlayViewProvider wantsResignActiveAssertion]
  -[SBDeviceApplicationAppClipOverlayViewProvider dealloc]
  -[SBDeviceApplicationAppClipOverlayViewProvider .cxx_destruct]
  -[SBDeviceApplicationAppClipOverlayViewProvider _realOverlayViewController]
  -[SBDeviceApplicationAppClipOverlayViewProvider sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBDeviceApplicationAppClipOverlayViewProvider sceneHandle:didCreateScene:]
  -[SBDeviceApplicationAppClipOverlayViewProvider sceneHandle:didChangeEffectiveForegroundness:]


SBCoverSheetSceneManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  UIApplicationSceneDeactivationAssertion *notificationCenterAssertion
 @property  UIApplicationSceneDeactivationAssertion *systemAnimationAssertion
 @property  NSMutableArray *pendingSceneUpdateBlocks
 @property  BOOL performingSceneUpdate
 @property  <BSInvalidatable> *stateCaptureInvalidatable
 @property  UIWindow *coverSheetWindow

  // instance methods
  -[SBCoverSheetSceneManager displayLayoutElement]
  -[SBCoverSheetSceneManager setPendingSceneUpdateBlocks:]
  -[SBCoverSheetSceneManager _performSceneUpdateBlock:]
  -[SBCoverSheetSceneManager systemAnimationAssertion]
  -[SBCoverSheetSceneManager setNotificationCenterAssertion:]
  -[SBCoverSheetSceneManager setPerformingSceneUpdate:]
  -[SBCoverSheetSceneManager _performNextSceneUpdateBlock]
  -[SBCoverSheetSceneManager stateCaptureInvalidatable]
  -[SBCoverSheetSceneManager _setDisplayLayoutElementActive:]
  -[SBCoverSheetSceneManager .cxx_destruct]
  -[SBCoverSheetSceneManager notificationCenterAssertion]
  -[SBCoverSheetSceneManager updateForegroundScenesForCoverSheetAnimationActive:]
  -[SBCoverSheetSceneManager isPerformingSceneUpdate]
  -[SBCoverSheetSceneManager setCoverSheetWindow:]
  -[SBCoverSheetSceneManager initWithCoverSheetWindow:]
  -[SBCoverSheetSceneManager _updateForegroundScenesForNotificationCenter:]
  -[SBCoverSheetSceneManager updateSceneManagerForPresented:suspendUnderLockEnvironment:]
  -[SBCoverSheetSceneManager _setSceneBackgrounded:suspendUnderLockEnvironment:]
  -[SBCoverSheetSceneManager setSystemAnimationAssertion:]
  -[SBCoverSheetSceneManager setDisplayLayoutElement:]
  -[SBCoverSheetSceneManager pendingSceneUpdateBlocks]
  -[SBCoverSheetSceneManager coverSheetWindow]
  -[SBCoverSheetSceneManager setStateCaptureInvalidatable:]


SBLoginAppContainerView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIView *contentView
 @property  CSBatteryChargingView *batteryChargingView
 @property  SBLoginAppContainerOverlayWrapperView *thermalWarningView
 @property  SBLockScreenDeviceInformationTextView *deviceInformationTextView
 @property  UIView *pluginView
 @property  _UILegibilitySettings *legibilitySettings

  // instance methods
  -[SBLoginAppContainerView setPluginView:]
  -[SBLoginAppContainerView legibilitySettings]
  -[SBLoginAppContainerView initWithFrame:]
  -[SBLoginAppContainerView contentView]
  -[SBLoginAppContainerView .cxx_destruct]
  -[SBLoginAppContainerView setLegibilitySettings:]
  -[SBLoginAppContainerView setContentView:]
  -[SBLoginAppContainerView pluginView]
  -[SBLoginAppContainerView layoutSubviews]
  -[SBLoginAppContainerView _showOrHidePluginViewAppropriately]
  -[SBLoginAppContainerView setBatteryChargingView:]
  -[SBLoginAppContainerView setThermalWarningView:]
  -[SBLoginAppContainerView setContentHidden:forRequester:]
  -[SBLoginAppContainerView batteryChargingView]
  -[SBLoginAppContainerView thermalWarningView]
  -[SBLoginAppContainerView deviceInformationTextView]
  -[SBLoginAppContainerView setDeviceInformationTextView:]


SBSpotlightDelegateManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SPUIRemoteSearchViewDelegate>
 @property  NSMutableDictionary *delegatesForLevel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSpotlightDelegateManager sharedInstance]

  // instance methods
  -[SBSpotlightDelegateManager .cxx_destruct]
  -[SBSpotlightDelegateManager delegatesForLevel]
  -[SBSpotlightDelegateManager setDelegatesForLevel:]
  -[SBSpotlightDelegateManager activeDelegate]
  -[SBSpotlightDelegateManager dismissSearchView]
  -[SBSpotlightDelegateManager removeSpotlightDelegate:forLevel:]
  -[SBSpotlightDelegateManager addSpotlightDelegate:forLevel:]
  -[SBSpotlightDelegateManager _modifyDelegatesWithBlock:]


SBSpotlightMultiplexingViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBMultiplexedSpotlightDelegate, FBSceneManagerObserver, SBScrollToTopSceneProxyViewDelegate>
 @property  BOOL activeDelegate
 @property  SBMedusaHostedKeyboardWindowLevelAssertion *medusaHostedKeyboardWindowLevelAssertion
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long level
 @property  <SPUIRemoteSearchViewDelegate> *spotlightDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSpotlightMultiplexingViewController sharedRemoteSearchViewController]
  +[SBSpotlightMultiplexingViewController sharedRemoteSearchViewControllerIfExists]

  // instance methods
  -[SBSpotlightMultiplexingViewController sceneManager:didCreateScene:]
  -[SBSpotlightMultiplexingViewController sceneManager:didDestroyScene:]
  -[SBSpotlightMultiplexingViewController level]
  -[SBSpotlightMultiplexingViewController legibilitySettings]
  -[SBSpotlightMultiplexingViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBSpotlightMultiplexingViewController dealloc]
  -[SBSpotlightMultiplexingViewController .cxx_destruct]
  -[SBSpotlightMultiplexingViewController setLegibilitySettings:]
  -[SBSpotlightMultiplexingViewController viewDidAppear:]
  -[SBSpotlightMultiplexingViewController dismissSearchView]
  -[SBSpotlightMultiplexingViewController viewWillAppear:]
  -[SBSpotlightMultiplexingViewController viewDidDisappear:]
  -[SBSpotlightMultiplexingViewController remoteSearchViewPresentationSource]
  -[SBSpotlightMultiplexingViewController viewWillDisappear:]
  -[SBSpotlightMultiplexingViewController _sceneHandle]
  -[SBSpotlightMultiplexingViewController setSpotlightDelegate:]
  -[SBSpotlightMultiplexingViewController scrollToTopSceneProxyViewWillExitViewHierarchy:rootedAtWindow:]
  -[SBSpotlightMultiplexingViewController scrollToTopSceneProxyViewDidEnterViewHierarchy:rootedAtWindow:]
  -[SBSpotlightMultiplexingViewController didBecomeActiveDelegate]
  -[SBSpotlightMultiplexingViewController didResignActiveDelegate]
  -[SBSpotlightMultiplexingViewController isActiveDelegate]
  -[SBSpotlightMultiplexingViewController _registerStatusBarScrollToTopView]
  -[SBSpotlightMultiplexingViewController _unregisterStatusBarScrollToTopView]
  -[SBSpotlightMultiplexingViewController spotlightDelegate]
  -[SBSpotlightMultiplexingViewController setActiveDelegate:]
  -[SBSpotlightMultiplexingViewController _configureStatusBarScrollToTopView]
  -[SBSpotlightMultiplexingViewController _spotlightSceneIdentifier]
  -[SBSpotlightMultiplexingViewController _registerStatusBarScrollToTopViewWithWindow:]
  -[SBSpotlightMultiplexingViewController _unregisterStatusBarScrollToTopViewWithWindow:]
  -[SBSpotlightMultiplexingViewController medusaHostedKeyboardWindowLevelAssertion]
  -[SBSpotlightMultiplexingViewController setMedusaHostedKeyboardWindowLevelAssertion:]


SBModifierCacheSelectorList : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBModifierCacheSelectorList initWithSelectors:count:]


SBModifierCacheCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBModifierCacheCoordinator performResponse:]


SBChainableModifierMethodCache : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  SBChainableModifier *modifier
 @property  SBModifierCacheCoordinator *cacheCoordinator
 @property  BOOL hasNonTrampolineIMPs

  // instance methods
  -[SBChainableModifierMethodCache copyWithZone:]
  -[SBChainableModifierMethodCache cacheCoordinator]
  -[SBChainableModifierMethodCache dealloc]
  -[SBChainableModifierMethodCache .cxx_destruct]
  -[SBChainableModifierMethodCache initWithIMPs:selectorList:subsequentMethodCacheFunc:]
  -[SBChainableModifierMethodCache setCacheCoordinator:]
  -[SBChainableModifierMethodCache setModifier:]
  -[SBChainableModifierMethodCache modifier]
  -[SBChainableModifierMethodCache hasNonTrampolineIMPs]


SBSOSLockGestureObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBPressSequenceRecognizerDelegate>
 @property  SBPressSequenceObserver *sosLockPressSequenceObserver
 @property  <SBSOSLockGestureObserverDelegate> *delegate
 @property  long long configuration
 @property  long long triggerMechanism
 @property  BOOL gestureLoggingEnabled
 @property  BOOL sosEnabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSOSLockGestureObserver _configure]
  -[SBSOSLockGestureObserver init]
  -[SBSOSLockGestureObserver _validator]
  -[SBSOSLockGestureObserver .cxx_destruct]
  -[SBSOSLockGestureObserver configuration]
  -[SBSOSLockGestureObserver initWithConfiguration:]
  -[SBSOSLockGestureObserver setDelegate:]
  -[SBSOSLockGestureObserver delegate]
  -[SBSOSLockGestureObserver isSOSEnabled]
  -[SBSOSLockGestureObserver isGestureLoggingEnabled]
  -[SBSOSLockGestureObserver setGestureLoggingEnabled:]
  -[SBSOSLockGestureObserver setSOSEnabled:]
  -[SBSOSLockGestureObserver resetWithNewConfiguration:]
  -[SBSOSLockGestureObserver registerPressDownWithTimestamp:]
  -[SBSOSLockGestureObserver registerPressUpWithTimestamp:]
  -[SBSOSLockGestureObserver triggerMechanism]
  -[SBSOSLockGestureObserver noteDidBeginSOSWithUUID:]
  -[SBSOSLockGestureObserver _watchdogInterval]
  -[SBSOSLockGestureObserver _noteTriggerActionRecievedResponse]
  -[SBSOSLockGestureObserver _noteTriggerDidBecomeActive]
  -[SBSOSLockGestureObserver _noteTriggerDidBecomeInactive]
  -[SBSOSLockGestureObserver _configureSettings]
  -[SBSOSLockGestureObserver _intervalThatSucceeds]
  -[SBSOSLockGestureObserver pressSequenceRecognizerDidCompleteSequence:]
  -[SBSOSLockGestureObserver pressSequenceRecognizer:didBeginPressDownAtIndex:]
  -[SBSOSLockGestureObserver pressSequenceRecognizerDidFail:]
  -[SBSOSLockGestureObserver _setRecognizer:]
  -[SBSOSLockGestureObserver _numberOfPressesThatTrigger]
  -[SBSOSLockGestureObserver _numberOfPressesThatActivate]
  -[SBSOSLockGestureObserver sosLockPressSequenceObserver]
  -[SBSOSLockGestureObserver setSosLockPressSequenceObserver:]


SBSensorActivityDataProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFSensorActivityDataProvider>
 @property  NSSet *activeSensorActivityAttributions
 @property  NSMutableArray *recentSensorActivityAttributions
 @property  NSMutableArray *recentAttributionExpirationTimers
 @property  STMediaStatusDomain *mediaDomain
 @property  NSMutableSet *observers
 @property  SBSensorActivityAttribution *mostRecentSensorActivityAttribution
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSensorActivityDataProvider init]
  -[SBSensorActivityDataProvider .cxx_destruct]
  -[SBSensorActivityDataProvider recentAttributionExpirationTimers]
  -[SBSensorActivityDataProvider setActiveSensorActivityAttributions:]
  -[SBSensorActivityDataProvider observers]
  -[SBSensorActivityDataProvider mostRecentSensorActivityAttribution]
  -[SBSensorActivityDataProvider _handleMediaDomainData:]
  -[SBSensorActivityDataProvider _updateStateForActiveAttributions:]
  -[SBSensorActivityDataProvider initWithSystemStatusServer:]
  -[SBSensorActivityDataProvider mediaDomain]
  -[SBSensorActivityDataProvider recentSensorActivityAttributions]
  -[SBSensorActivityDataProvider activeSensorActivityAttributions]
  -[SBSensorActivityDataProvider _notifyObserversOfActivityChange]
  -[SBSensorActivityDataProvider removeObserver:]
  -[SBSensorActivityDataProvider addObserver:]


SBMoveGestureRootFloatingSwitcherModifier : SBGestureRootSwitcherModifier
 @property  long long currentFloatingConfiguration
 @property  long long interfaceOrientation

  // instance methods
  -[SBMoveGestureRootFloatingSwitcherModifier handleMainTransitionEvent:]
  -[SBMoveGestureRootFloatingSwitcherModifier setInterfaceOrientation:]
  -[SBMoveGestureRootFloatingSwitcherModifier interfaceOrientation]
  -[SBMoveGestureRootFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBMoveGestureRootFloatingSwitcherModifier gestureType]
  -[SBMoveGestureRootFloatingSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBMoveGestureRootFloatingSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBMoveGestureRootFloatingSwitcherModifier initWithInitialFloatingConfiguration:interfaceOrientation:]
  -[SBMoveGestureRootFloatingSwitcherModifier currentFloatingConfiguration]
  -[SBMoveGestureRootFloatingSwitcherModifier setCurrentFloatingConfiguration:]


SBTouchTemplateGestureRecognizer : UIGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  NSMutableDictionary *templatesForTouchType
 @property  NSMapTable *initialTouchPointMap
 @property  unsigned long failedRecognitionAttempts
 @property  unsigned long trackingTouchCount
 @property  double cumulativeMotion
 @property  double cumulativeMotionEnvelope
 @property  double smoothedIncrementalMotion
 @property  NSTimer *_noChangeCancellationTimer
 @property  double animationDistance
 @property  long long requiredDirectionality
 @property  UIGestureRecognizerTransformAnalyzer *transformAnalyzer
 @property  SBTouchTemplate *matchedTemplate
 @property  SBPolygon *matchedPolygon
 @property  <SBTouchTemplateGestureRecognizerDelegate> *delegate
 @property  unsigned long sequenceNumber
 @property  double cumulativePercentage

  // instance methods
  -[SBTouchTemplateGestureRecognizer _reset]
  -[SBTouchTemplateGestureRecognizer _computeGestureMotionWithTouches:polygon:]
  -[SBTouchTemplateGestureRecognizer touchesBegan:withEvent:]
  -[SBTouchTemplateGestureRecognizer animationDistance]
  -[SBTouchTemplateGestureRecognizer transformAnalyzer]
  -[SBTouchTemplateGestureRecognizer sequenceNumber]
  -[SBTouchTemplateGestureRecognizer _log:]
  -[SBTouchTemplateGestureRecognizer setState:]
  -[SBTouchTemplateGestureRecognizer .cxx_destruct]
  -[SBTouchTemplateGestureRecognizer logCategory]
  -[SBTouchTemplateGestureRecognizer touchesCancelled:withEvent:]
  -[SBTouchTemplateGestureRecognizer log:]
  -[SBTouchTemplateGestureRecognizer reset]
  -[SBTouchTemplateGestureRecognizer initWithTarget:action:]
  -[SBTouchTemplateGestureRecognizer _setMatchedPolygon:]
  -[SBTouchTemplateGestureRecognizer incrementalGestureMotionForCandidate:withTransformAnalyzerInfo:]
  -[SBTouchTemplateGestureRecognizer touchesMoved:withEvent:]
  -[SBTouchTemplateGestureRecognizer _shouldAddNewTouchesAfterGestureRecognition]
  -[SBTouchTemplateGestureRecognizer touchesEnded:withEvent:]
  -[SBTouchTemplateGestureRecognizer _projectedMotionForInterval:]
  -[SBTouchTemplateGestureRecognizer _directionallyAcceptMotion:]
  -[SBTouchTemplateGestureRecognizer requiredDirectionality]
  -[SBTouchTemplateGestureRecognizer _matchedTemplate]
  -[SBTouchTemplateGestureRecognizer _updateMatchedTemplateForTouchesBeganOrEnded:]
  -[SBTouchTemplateGestureRecognizer _pingNoChangeCancellationTimer]
  -[SBTouchTemplateGestureRecognizer _updateForTouchesBeganOrMoved:]
  -[SBTouchTemplateGestureRecognizer _polygonForTouches:]
  -[SBTouchTemplateGestureRecognizer _updateForTouchesCancelledOrEnded:state:withEvent:]
  -[SBTouchTemplateGestureRecognizer _noChangeCancellationTimerFired:]
  -[SBTouchTemplateGestureRecognizer _failMeForReason:]
  -[SBTouchTemplateGestureRecognizer _attemptTemplateMatchWithTouches:polygon:]
  -[SBTouchTemplateGestureRecognizer templatesForTouchType:]
  -[SBTouchTemplateGestureRecognizer _failedRecognitionAttempts]
  -[SBTouchTemplateGestureRecognizer _touchesByFilteringRestingTrackpadTouches:]
  -[SBTouchTemplateGestureRecognizer _matchedTemplateForTouches:polygon:]
  -[SBTouchTemplateGestureRecognizer _setMatchedTemplate:]
  -[SBTouchTemplateGestureRecognizer _matchedPolygon]
  -[SBTouchTemplateGestureRecognizer hasSignificantMotionToBegin]
  -[SBTouchTemplateGestureRecognizer _invalidateNoChangeCancellationTimer]
  -[SBTouchTemplateGestureRecognizer _resetNoChangeCancellationTimer]
  -[SBTouchTemplateGestureRecognizer cumulativePercentage]
  -[SBTouchTemplateGestureRecognizer projectedCompletionTypeForInterval:]
  -[SBTouchTemplateGestureRecognizer setTemplates:forTouchType:]
  -[SBTouchTemplateGestureRecognizer _noChangeCancellationTimer]
  -[SBTouchTemplateGestureRecognizer _setNoChangeCancellationTimer:]
  -[SBTouchTemplateGestureRecognizer templatesForTouchType]
  -[SBTouchTemplateGestureRecognizer _initialTouchPointMap]
  -[SBTouchTemplateGestureRecognizer _setFailedRecognitionAttempts:]
  -[SBTouchTemplateGestureRecognizer _trackingTouchCount]
  -[SBTouchTemplateGestureRecognizer _setTrackingTouchCount:]
  -[SBTouchTemplateGestureRecognizer _cumulativeMotion]
  -[SBTouchTemplateGestureRecognizer _setCumulativeMotion:]
  -[SBTouchTemplateGestureRecognizer _cumulativeMotionEnvelope]
  -[SBTouchTemplateGestureRecognizer _setCumulativeMotionEnvelope:]
  -[SBTouchTemplateGestureRecognizer _smoothedIncrementalMotion]
  -[SBTouchTemplateGestureRecognizer _setSmoothedIncrementalMotion:]
  -[SBTouchTemplateGestureRecognizer setAnimationDistance:]
  -[SBTouchTemplateGestureRecognizer setRequiredDirectionality:]


SBTemplateAndMorph : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBPolygon *morphedCandidate
 @property  SBTouchTemplate *touchTemplate

  // instance methods
  -[SBTemplateAndMorph .cxx_destruct]
  -[SBTemplateAndMorph initWithTemplate:morph:]
  -[SBTemplateAndMorph morphedCandidate]
  -[SBTemplateAndMorph touchTemplate]


SBDashBoardNotificationPresenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSNotificationPresenting>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardNotificationPresenter presentModalBannerAndExpandForNotificationRequest:]


SBSpotlightLegibilityProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBWallpaperObserver, SBFLegibilitySettingsProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  _UILegibilitySettings *legibilitySettings
 @property  <SBFLegibilitySettingsProviderDelegate> *delegate

  // instance methods
  -[SBSpotlightLegibilityProvider wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBSpotlightLegibilityProvider wallpaperDidChangeForVariant:]
  -[SBSpotlightLegibilityProvider legibilitySettings]
  -[SBSpotlightLegibilityProvider _rectForSpotlightHeader]
  -[SBSpotlightLegibilityProvider dealloc]
  -[SBSpotlightLegibilityProvider .cxx_destruct]
  -[SBSpotlightLegibilityProvider _calculateLegibilitySettings]
  -[SBSpotlightLegibilityProvider wallpaperGeometryDidChangeForVariant:]
  -[SBSpotlightLegibilityProvider initWithVariant:wallpaperController:]
  -[SBSpotlightLegibilityProvider initWithVariant:]
  -[SBSpotlightLegibilityProvider setDelegate:]
  -[SBSpotlightLegibilityProvider delegate]


SBClockApplicationIcon : SBApplicationIcon
  // class methods
  +[SBClockApplicationIcon _shouldAnimateInLocation:]

  // instance methods
  -[SBClockApplicationIcon iconImageViewClassForLocation:]


SBAttentionAwarenessClient : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBAttentionAwarenessClientDelegate> *delegate
 @property  AWAttentionAwarenessConfiguration *configuration
 @property  BOOL enabled

  // instance methods
  -[SBAttentionAwarenessClient _suspend]
  -[SBAttentionAwarenessClient _resume]
  -[SBAttentionAwarenessClient init]
  -[SBAttentionAwarenessClient resetAttentionLostTimeout]
  -[SBAttentionAwarenessClient .cxx_destruct]
  -[SBAttentionAwarenessClient _handleAttentionAwarenessEvent:]
  -[SBAttentionAwarenessClient isEnabled]
  -[SBAttentionAwarenessClient setConfiguration:shouldReset:]
  -[SBAttentionAwarenessClient configuration]
  -[SBAttentionAwarenessClient _resetAttentionLostTimeout]
  -[SBAttentionAwarenessClient setEnabled:]
  -[SBAttentionAwarenessClient setDelegate:]
  -[SBAttentionAwarenessClient delegate]
  -[SBAttentionAwarenessClient setConfiguration:]


SBVolumeHUDSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  double minMaxXScaleSpringRetargetImpulse
 @property  double minMaxXScaleSpringDampingRatio
 @property  double minMaxXScaleSpringResponse
 @property  double minMaxXScaleSpringVolumeToMax
 @property  double minMaxXScaleSpringVolumeToMin
 @property  double minMaxYScaleSpringRetargetImpulse
 @property  double minMaxYScaleSpringDampingRatio
 @property  double minMaxYScaleSpringResponse
 @property  double minMaxYScaleSpringVolumeToMax
 @property  double minMaxYScaleSpringVolumeToMin
 @property  double deflatorTargetDownScale
 @property  double deflatorTargetCompleteDownScale
 @property  double deflatorTargetFudgeFactor
 @property  double deflatorTargetCompleteImpulse
 @property  double positionXSpringRetargetImpulse
 @property  double positionXSpringDampingRatio
 @property  double positionXSpringResponse
 @property  double positionXSpringResponseBeginDeflator
 @property  double positionXSpringResponseFinishDeflate
 @property  double positionYSpringRetargetImpulse
 @property  double positionYSpringDampingRatio
 @property  double positionYSpringResponse
 @property  double scaleSpringRetargetImpulse
 @property  double scaleSpringDampingRatio
 @property  double scaleSpringResponse
 @property  double scaleSpringResponseBeginDeflator
 @property  double scaleSpringResponseFinishDeflate
 @property  double scaleSpringBase
 @property  double scaleSpringTracking
 @property  double dimmingAlpha
 @property  double dismissalInterval
 @property  double legibilityStrength
 @property  double labelMargin
 @property  double onscreenTopMargin
 @property  double onscreenLeadingMargin
 @property  double offscreenTopMargin
 @property  double offscreenLeadingMargin
 @property  double landscapeScaleSpringVolumeDownInput
 @property  double landscapeScaleSpringVolumeUpInput
 @property  double portraitScaleSpringVolumeDownInput
 @property  double portraitScaleSpringVolumeUpInput
 @property  double landscapeState1CornerRadius
 @property  double landscapeState2CornerRadius
 @property  double landscapeState3CornerRadius
 @property  double landscapeStateBaseCornerRadius
 @property  double portraitState1CornerRadius
 @property  double portraitState2CornerRadius
 @property  double portraitState3CornerRadius
 @property  double portraitStateBaseCornerRadius
 @property  double landscapeState1Width
 @property  double landscapeState2Width
 @property  double landscapeState3Width
 @property  double landscapeState1Height
 @property  double landscapeState2Height
 @property  double landscapeState3Height
 @property  double portraitState1Width
 @property  double portraitState2Width
 @property  double portraitState3Width
 @property  double portraitState1Height
 @property  double portraitState2Height
 @property  double portraitState3Height
 @property  double volumeButtonsCenterY
 @property  BOOL showDebugUI
 @property  BOOL autoDismiss
 @property  BOOL forceEUVolumeMode
 @property  float EUVolumeLimit
 @property  float volumeStepDelta
 @property  BOOL rampTickHapticIntensity
 @property  float minimumTickHapticIntensity
 @property  float maximumTickHapticIntensity
 @property  BOOL shouldRouteChangeResultInPresentingVolumeHUD

  // class methods
  +[SBVolumeHUDSettings settingsControllerModule]

  // instance methods
  -[SBVolumeHUDSettings setDefaultValues]
  -[SBVolumeHUDSettings EUVolumeLimit]
  -[SBVolumeHUDSettings setMinMaxYScaleSpringRetargetImpulse:]
  -[SBVolumeHUDSettings portraitState1Height]
  -[SBVolumeHUDSettings setEUVolumeLimit:]
  -[SBVolumeHUDSettings setLandscapeScaleSpringVolumeDownInput:]
  -[SBVolumeHUDSettings setLandscapeStateBaseCornerRadius:]
  -[SBVolumeHUDSettings setPortraitState1Height:]
  -[SBVolumeHUDSettings portraitState2Width]
  -[SBVolumeHUDSettings setLandscapeState3Height:]
  -[SBVolumeHUDSettings minMaxXScaleSpringResponse]
  -[SBVolumeHUDSettings positionXSpringDampingRatio]
  -[SBVolumeHUDSettings setVolumeStepDelta:]
  -[SBVolumeHUDSettings landscapeScaleSpringVolumeDownInput]
  -[SBVolumeHUDSettings onscreenLeadingMargin]
  -[SBVolumeHUDSettings positionYSpringDampingRatio]
  -[SBVolumeHUDSettings deflatorTargetFudgeFactor]
  -[SBVolumeHUDSettings setMinMaxYScaleSpringResponse:]
  -[SBVolumeHUDSettings setPositionYSpringDampingRatio:]
  -[SBVolumeHUDSettings landscapeState2Width]
  -[SBVolumeHUDSettings setMinMaxYScaleSpringDampingRatio:]
  -[SBVolumeHUDSettings setMinimumTickHapticIntensity:]
  -[SBVolumeHUDSettings minimumTickHapticIntensity]
  -[SBVolumeHUDSettings volumeButtonsCenterY]
  -[SBVolumeHUDSettings minMaxYScaleSpringVolumeToMax]
  -[SBVolumeHUDSettings landscapeState1CornerRadius]
  -[SBVolumeHUDSettings landscapeState1Height]
  -[SBVolumeHUDSettings minMaxXScaleSpringDampingRatio]
  -[SBVolumeHUDSettings setOnscreenLeadingMargin:]
  -[SBVolumeHUDSettings setScaleSpringDampingRatio:]
  -[SBVolumeHUDSettings landscapeStateBaseCornerRadius]
  -[SBVolumeHUDSettings minMaxYScaleSpringVolumeToMin]
  -[SBVolumeHUDSettings setLabelMargin:]
  -[SBVolumeHUDSettings volumeStepDelta]
  -[SBVolumeHUDSettings setLandscapeState2CornerRadius:]
  -[SBVolumeHUDSettings setLandscapeState2Width:]
  -[SBVolumeHUDSettings showDebugUI]
  -[SBVolumeHUDSettings setLegibilityStrength:]
  -[SBVolumeHUDSettings autoDismiss]
  -[SBVolumeHUDSettings legibilityStrength]
  -[SBVolumeHUDSettings setPortraitState2CornerRadius:]
  -[SBVolumeHUDSettings scaleSpringBase]
  -[SBVolumeHUDSettings onscreenTopMargin]
  -[SBVolumeHUDSettings portraitState3Width]
  -[SBVolumeHUDSettings scaleSpringResponseFinishDeflate]
  -[SBVolumeHUDSettings minMaxXScaleSpringVolumeToMin]
  -[SBVolumeHUDSettings dismissalInterval]
  -[SBVolumeHUDSettings setOffscreenTopMargin:]
  -[SBVolumeHUDSettings setScaleSpringRetargetImpulse:]
  -[SBVolumeHUDSettings setPortraitState2Width:]
  -[SBVolumeHUDSettings deflatorTargetCompleteDownScale]
  -[SBVolumeHUDSettings setForceEUVolumeMode:]
  -[SBVolumeHUDSettings setAutoDismiss:]
  -[SBVolumeHUDSettings setPositionXSpringResponse:]
  -[SBVolumeHUDSettings setRampTickHapticIntensity:]
  -[SBVolumeHUDSettings setLandscapeState3CornerRadius:]
  -[SBVolumeHUDSettings setLandscapeState1Width:]
  -[SBVolumeHUDSettings setPortraitScaleSpringVolumeUpInput:]
  -[SBVolumeHUDSettings setPortraitState2Height:]
  -[SBVolumeHUDSettings setMinMaxYScaleSpringVolumeToMax:]
  -[SBVolumeHUDSettings setPortraitState3Width:]
  -[SBVolumeHUDSettings deflatorTargetDownScale]
  -[SBVolumeHUDSettings scaleSpringDampingRatio]
  -[SBVolumeHUDSettings portraitStateBaseCornerRadius]
  -[SBVolumeHUDSettings portraitScaleSpringVolumeUpInput]
  -[SBVolumeHUDSettings setPortraitStateBaseCornerRadius:]
  -[SBVolumeHUDSettings landscapeState1Width]
  -[SBVolumeHUDSettings offscreenLeadingMargin]
  -[SBVolumeHUDSettings setScaleSpringBase:]
  -[SBVolumeHUDSettings labelMargin]
  -[SBVolumeHUDSettings shouldRouteChangeResultInPresentingVolumeHUD]
  -[SBVolumeHUDSettings setLandscapeState1CornerRadius:]
  -[SBVolumeHUDSettings setMinMaxYScaleSpringVolumeToMin:]
  -[SBVolumeHUDSettings setShowDebugUI:]
  -[SBVolumeHUDSettings landscapeState2CornerRadius]
  -[SBVolumeHUDSettings setPositionXSpringResponseBeginDeflator:]
  -[SBVolumeHUDSettings portraitState2Height]
  -[SBVolumeHUDSettings setMinMaxXScaleSpringResponse:]
  -[SBVolumeHUDSettings maximumTickHapticIntensity]
  -[SBVolumeHUDSettings portraitState1CornerRadius]
  -[SBVolumeHUDSettings setLandscapeScaleSpringVolumeUpInput:]
  -[SBVolumeHUDSettings scaleSpringRetargetImpulse]
  -[SBVolumeHUDSettings positionYSpringResponse]
  -[SBVolumeHUDSettings positionYSpringRetargetImpulse]
  -[SBVolumeHUDSettings minMaxXScaleSpringRetargetImpulse]
  -[SBVolumeHUDSettings setLandscapeState1Height:]
  -[SBVolumeHUDSettings positionXSpringResponseBeginDeflator]
  -[SBVolumeHUDSettings setScaleSpringResponseFinishDeflate:]
  -[SBVolumeHUDSettings setVolumeButtonsCenterY:]
  -[SBVolumeHUDSettings setLandscapeState3Width:]
  -[SBVolumeHUDSettings setOnscreenTopMargin:]
  -[SBVolumeHUDSettings setPortraitState3CornerRadius:]
  -[SBVolumeHUDSettings setDeflatorTargetCompleteImpulse:]
  -[SBVolumeHUDSettings landscapeState3CornerRadius]
  -[SBVolumeHUDSettings landscapeState3Height]
  -[SBVolumeHUDSettings scaleSpringResponseBeginDeflator]
  -[SBVolumeHUDSettings setDeflatorTargetCompleteDownScale:]
  -[SBVolumeHUDSettings setMaximumTickHapticIntensity:]
  -[SBVolumeHUDSettings rampTickHapticIntensity]
  -[SBVolumeHUDSettings scaleSpringTracking]
  -[SBVolumeHUDSettings setPositionYSpringResponse:]
  -[SBVolumeHUDSettings positionXSpringResponseFinishDeflate]
  -[SBVolumeHUDSettings setDismissalInterval:]
  -[SBVolumeHUDSettings setPortraitState1CornerRadius:]
  -[SBVolumeHUDSettings setScaleSpringResponseBeginDeflator:]
  -[SBVolumeHUDSettings minMaxXScaleSpringVolumeToMax]
  -[SBVolumeHUDSettings setPortraitState1Width:]
  -[SBVolumeHUDSettings setDimmingAlpha:]
  -[SBVolumeHUDSettings positionXSpringResponse]
  -[SBVolumeHUDSettings portraitState3CornerRadius]
  -[SBVolumeHUDSettings setLandscapeState2Height:]
  -[SBVolumeHUDSettings scaleSpringResponse]
  -[SBVolumeHUDSettings portraitScaleSpringVolumeDownInput]
  -[SBVolumeHUDSettings setShouldRouteChangeResultInPresentingVolumeHUD:]
  -[SBVolumeHUDSettings setPortraitScaleSpringVolumeDownInput:]
  -[SBVolumeHUDSettings landscapeScaleSpringVolumeUpInput]
  -[SBVolumeHUDSettings setScaleSpringResponse:]
  -[SBVolumeHUDSettings setScaleSpringTracking:]
  -[SBVolumeHUDSettings setMinMaxXScaleSpringDampingRatio:]
  -[SBVolumeHUDSettings setDeflatorTargetFudgeFactor:]
  -[SBVolumeHUDSettings dimmingAlpha]
  -[SBVolumeHUDSettings portraitState3Height]
  -[SBVolumeHUDSettings setMinMaxXScaleSpringVolumeToMin:]
  -[SBVolumeHUDSettings positionXSpringRetargetImpulse]
  -[SBVolumeHUDSettings setMinMaxXScaleSpringVolumeToMax:]
  -[SBVolumeHUDSettings landscapeState3Width]
  -[SBVolumeHUDSettings minMaxYScaleSpringDampingRatio]
  -[SBVolumeHUDSettings offscreenTopMargin]
  -[SBVolumeHUDSettings setOffscreenLeadingMargin:]
  -[SBVolumeHUDSettings setMinMaxXScaleSpringRetargetImpulse:]
  -[SBVolumeHUDSettings setDeflatorTargetDownScale:]
  -[SBVolumeHUDSettings minMaxYScaleSpringResponse]
  -[SBVolumeHUDSettings landscapeState2Height]
  -[SBVolumeHUDSettings portraitState2CornerRadius]
  -[SBVolumeHUDSettings setPositionXSpringResponseFinishDeflate:]
  -[SBVolumeHUDSettings setPositionXSpringDampingRatio:]
  -[SBVolumeHUDSettings setPortraitState3Height:]
  -[SBVolumeHUDSettings portraitState1Width]
  -[SBVolumeHUDSettings forceEUVolumeMode]
  -[SBVolumeHUDSettings setPositionXSpringRetargetImpulse:]
  -[SBVolumeHUDSettings setPositionYSpringRetargetImpulse:]
  -[SBVolumeHUDSettings deflatorTargetCompleteImpulse]
  -[SBVolumeHUDSettings minMaxYScaleSpringRetargetImpulse]


SBTodayViewSpotlightPresenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SPUISearchBarDelegate, SPUIRemoteSearchViewDelegate, PTSettingsKeyObserver>
 @property  UIView *containerView
 @property  UIScrollView *scrollView
 @property  <SBTodayViewSpotlightPresenterDelegate> *delegate
 @property  SBFFluidBehaviorSettings *searchAnimationSettings
 @property  long long searchState
 @property  BOOL scrollViewBeganScrollingFromTop
 @property  SBHFeatherBlurView *featherBlurView
 @property  NSLayoutConstraint *featherBlurHeightConstraint
 @property  NSArray *searchBarGradientMaskLayers
 @property  MTMaterialView *searchBackdropView
 @property  _SBTodaySpotlightViewController *spotlightViewController
 @property  _UIPortalView *searchBarPortalView
 @property  NSLayoutConstraint *searchBarViewTopConstraint
 @property  NSMutableSet *searchBarPortalRequirementReasons
 @property  SPUISearchBarController *searchBarViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTodayViewSpotlightPresenter settings:changedValueForKey:]
  -[SBTodayViewSpotlightPresenter searchBarDidFocus]
  -[SBTodayViewSpotlightPresenter setContainerView:]
  -[SBTodayViewSpotlightPresenter .cxx_destruct]
  -[SBTodayViewSpotlightPresenter spotlightViewController]
  -[SBTodayViewSpotlightPresenter scrollView]
  -[SBTodayViewSpotlightPresenter _topOffset]
  -[SBTodayViewSpotlightPresenter scrollViewWillBeginDragging:]
  -[SBTodayViewSpotlightPresenter setScrollView:]
  -[SBTodayViewSpotlightPresenter searchBarViewController]
  -[SBTodayViewSpotlightPresenter containerView]
  -[SBTodayViewSpotlightPresenter dismissSearchView]
  -[SBTodayViewSpotlightPresenter scrollViewDidScroll:]
  -[SBTodayViewSpotlightPresenter searchBarGradientMaskLayers]
  -[SBTodayViewSpotlightPresenter setSearchBarGradientMaskLayers:]
  -[SBTodayViewSpotlightPresenter searchState]
  -[SBTodayViewSpotlightPresenter setSearchState:]
  -[SBTodayViewSpotlightPresenter setDelegate:]
  -[SBTodayViewSpotlightPresenter layout]
  -[SBTodayViewSpotlightPresenter isPresenting]
  -[SBTodayViewSpotlightPresenter searchBackdropView]
  -[SBTodayViewSpotlightPresenter delegate]
  -[SBTodayViewSpotlightPresenter _layoutSearchViewsWithMode:withCompletion:]
  -[SBTodayViewSpotlightPresenter _layoutSearchViews]
  -[SBTodayViewSpotlightPresenter _rubberbandingOffsetForContentOffset:]
  -[SBTodayViewSpotlightPresenter searchAnimationSettings]
  -[SBTodayViewSpotlightPresenter setSearchAnimationSettings:]
  -[SBTodayViewSpotlightPresenter scrollViewBeganScrollingFromTop]
  -[SBTodayViewSpotlightPresenter setScrollViewBeganScrollingFromTop:]
  -[SBTodayViewSpotlightPresenter dismissSpotlightAnimated:]
  -[SBTodayViewSpotlightPresenter setSpotlightViewController:]
  -[SBTodayViewSpotlightPresenter initWithSearchBarViewController:containerView:scrollView:delegate:]
  -[SBTodayViewSpotlightPresenter containerViewDidMoveToWindow:]
  -[SBTodayViewSpotlightPresenter containerViewWillTransitionToSize:withTransitionCoordinator:]
  -[SBTodayViewSpotlightPresenter scrollViewWillEndDragging:]
  -[SBTodayViewSpotlightPresenter _setUpSearchAnimationSettings]
  -[SBTodayViewSpotlightPresenter _setUpSearchBar]
  -[SBTodayViewSpotlightPresenter _setUpSearchBackdrop]
  -[SBTodayViewSpotlightPresenter _setUpSearchBackdropMatchMoveAnimation]
  -[SBTodayViewSpotlightPresenter _setUpFeatherBackgroundMatchMoveAnimations]
  -[SBTodayViewSpotlightPresenter _willPresentSpotlightAnimated:]
  -[SBTodayViewSpotlightPresenter _beginRequiringSearchBarPortalViewForReason:]
  -[SBTodayViewSpotlightPresenter _spotlightPresentationProgressForOffset:]
  -[SBTodayViewSpotlightPresenter _didPresentSpotlight]
  -[SBTodayViewSpotlightPresenter _willDismissSpotlightAnimated:]
  -[SBTodayViewSpotlightPresenter _endRequiringSearchBarPortalViewForReason:]
  -[SBTodayViewSpotlightPresenter _didDismissSpotlight]
  -[SBTodayViewSpotlightPresenter presentSpotlightAnimated:]
  -[SBTodayViewSpotlightPresenter featherBlurView]
  -[SBTodayViewSpotlightPresenter setFeatherBlurView:]
  -[SBTodayViewSpotlightPresenter featherBlurHeightConstraint]
  -[SBTodayViewSpotlightPresenter setFeatherBlurHeightConstraint:]
  -[SBTodayViewSpotlightPresenter setSearchBackdropView:]
  -[SBTodayViewSpotlightPresenter searchBarPortalView]
  -[SBTodayViewSpotlightPresenter setSearchBarPortalView:]
  -[SBTodayViewSpotlightPresenter searchBarViewTopConstraint]
  -[SBTodayViewSpotlightPresenter setSearchBarViewTopConstraint:]
  -[SBTodayViewSpotlightPresenter searchBarPortalRequirementReasons]
  -[SBTodayViewSpotlightPresenter setSearchBarPortalRequirementReasons:]


_SBTodaySpotlightViewController : SBSpotlightMultiplexingViewController
 @property  long long location

  // instance methods
  -[_SBTodaySpotlightViewController level]
  -[_SBTodaySpotlightViewController setLocation:]
  -[_SBTodaySpotlightViewController location]
  -[_SBTodaySpotlightViewController _canShowWhileLocked]
  -[_SBTodaySpotlightViewController remoteSearchViewPresentationSource]


SBCoverSheetBlurView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBWallpaperObserver>
 @property  double blurRadius
 @property  double weighting
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBCoverSheetBlurView layerClass]

  // instance methods
  -[SBCoverSheetBlurView weighting]
  -[SBCoverSheetBlurView wallpaperDidChangeForVariant:]
  -[SBCoverSheetBlurView _createReduceTransparencyView]
  -[SBCoverSheetBlurView _updateForBlurRadius:weighting:forPresentationValue:]
  -[SBCoverSheetBlurView dealloc]
  -[SBCoverSheetBlurView .cxx_destruct]
  -[SBCoverSheetBlurView backdropLayer]
  -[SBCoverSheetBlurView setWeighting:forPresentationValue:]
  -[SBCoverSheetBlurView _removeReduceTransparencyView]
  -[SBCoverSheetBlurView _reduceTransparencyEnabledStateDidChange:]
  -[SBCoverSheetBlurView setBlurRadius:]
  -[SBCoverSheetBlurView _configureForCurrentReduceTransparencySetting]
  -[SBCoverSheetBlurView setWeighting:]
  -[SBCoverSheetBlurView initWithFrame:scaleAdjustment:alphaAdjustment:]
  -[SBCoverSheetBlurView _createFilters]
  -[SBCoverSheetBlurView _removeFilters]
  -[SBCoverSheetBlurView _averageWallpaperColor]
  -[SBCoverSheetBlurView layoutSubviews]
  -[SBCoverSheetBlurView blurRadius]


SBWallpaperEffectView : SBWallpaperEffectViewBase <SBApplicationSceneBackgroundView>
 @property  SBWallpaperController *wallpaperController
 @property  BOOL fullscreen
 @property  long long wallpaperStyle
 @property  BOOL needsClassicModeBackground
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWallpaperEffectView initWithWallpaperVariant:transformOptions:]
  -[SBWallpaperEffectView initWithWallpaperVariant:]
  -[SBWallpaperEffectView wallpaperController]
  -[SBWallpaperEffectView initWithFrame:]


SBFluidSwitcherAnimationController : SBUIBlockAnimationController <SBUIAnimationControllerObserver>
 @property  @? animationCompletion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherAnimationController initWithWorkspaceTransitionRequest:animationSettings:animationBlock:]
  -[SBFluidSwitcherAnimationController setAnimationCompletion:]
  -[SBFluidSwitcherAnimationController .cxx_destruct]
  -[SBFluidSwitcherAnimationController animationCompletion]
  -[SBFluidSwitcherAnimationController isFluidSwitcherAnimationController]
  -[SBFluidSwitcherAnimationController animationControllerDidFinishAnimation:]


SBBulletinLocalObserverGateway : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BBObserverDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBulletinLocalObserverGateway sharedInstance]

  // instance methods
  -[SBBulletinLocalObserverGateway init]
  -[SBBulletinLocalObserverGateway .cxx_destruct]
  -[SBBulletinLocalObserverGateway observer:addBulletin:forFeed:playLightsAndSirens:withReply:]


SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationLaunchAlertEvaluator>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems init]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems .cxx_destruct]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems shouldShowLaunchAlertForApplication:]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems _airplaneModeController]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems _telephonyManager]
  -[SBApplicationLaunchAlertEvaluatorForNetworkBasedAlertItems initWithAirplaneModeController:telephonyManager:]


SBMainDisplaySystemGestureManager : SBSystemGestureManager
 @property  SBHomeGestureParticipant *accessibilityHomeGestureParticipant

  // class methods
  +[SBMainDisplaySystemGestureManager sharedInstance]

  // instance methods
  -[SBMainDisplaySystemGestureManager _evaluateEnablement]
  -[SBMainDisplaySystemGestureManager shouldSystemGestureReceiveTouchWithLocation:]
  -[SBMainDisplaySystemGestureManager dealloc]
  -[SBMainDisplaySystemGestureManager .cxx_destruct]
  -[SBMainDisplaySystemGestureManager accessibilityHomeGestureParticipant]
  -[SBMainDisplaySystemGestureManager _updateUserPreferences]
  -[SBMainDisplaySystemGestureManager _init]
  -[SBMainDisplaySystemGestureManager _isGestureWithTypeAllowed:]
  -[SBMainDisplaySystemGestureManager setSystemGesturesDisabledForAccessibility:]
  -[SBMainDisplaySystemGestureManager _isTouchGestureWithType:]
  -[SBMainDisplaySystemGestureManager _shouldEnableSystemGestureWithType:]
  -[SBMainDisplaySystemGestureManager _initWithDisplayIdentity:]
  -[SBMainDisplaySystemGestureManager _setupSystemGestureEventDeferringIfNeeded]
  -[SBMainDisplaySystemGestureManager setAccessibilityHomeGestureParticipant:]
  -[SBMainDisplaySystemGestureManager addGestureRecognizer:withType:]
  -[SBMainDisplaySystemGestureManager descriptionBuilderWithMultilinePrefix:]


SBBiometricMonitorViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBBiometricMonitorView *monitorView

  // instance methods
  -[SBBiometricMonitorViewController loadView]
  -[SBBiometricMonitorViewController monitorView]


SBMedusaSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  double vibrantColorMatrixM11
 @property  double vibrantColorMatrixM12
 @property  double vibrantColorMatrixM13
 @property  double vibrantColorMatrixM14
 @property  double vibrantColorMatrixM15
 @property  double vibrantColorMatrixM21
 @property  double vibrantColorMatrixM22
 @property  double vibrantColorMatrixM23
 @property  double vibrantColorMatrixM24
 @property  double vibrantColorMatrixM25
 @property  double vibrantColorMatrixM31
 @property  double vibrantColorMatrixM32
 @property  double vibrantColorMatrixM33
 @property  double vibrantColorMatrixM34
 @property  double vibrantColorMatrixM35
 @property  double vibrantColorMatrixM41
 @property  double vibrantColorMatrixM42
 @property  double vibrantColorMatrixM43
 @property  double vibrantColorMatrixM44
 @property  double vibrantColorMatrixM45
 @property  double medusaSeparatorCursorTopEdgeInset
 @property  double medusaSeparatorCursorBottomEdgeInset
 @property  double medusaSeparatorCursorLeftEdgeInset
 @property  double medusaSeparatorCursorRightEdgeInset
 @property  double medusaWindowDraggingCursorTopEdgeInset
 @property  double medusaWindowDraggingCursorBottomEdgeInset
 @property  double medusaWindowDraggingCursorLeftEdgeInset
 @property  double medusaWindowDraggingCursorRightEdgeInset
 @property  SBMedusa1oSettings *medusa1oSettings
 @property  BOOL persistentDock
 @property  double numberOfRecents
 @property  double dismissHitTestTopPadding
 @property  SBFFluidBehaviorSettings *dockAnimationSettings
 @property  SBFFluidBehaviorSettings *dockWithPresentedFolderAnimationSettings
 @property  double narrowEdgeSwipeHitTestWidth
 @property  double wideEdgeSwipeHitTestWidth
 @property  double rimShadowOpacity
 @property  double rimShadowRadius
 @property  double floatingAppCardScaleWhileTouched
 @property  double floatingAppCardScaleWhileCursorHovered
 @property  double diffuseShadowRadius
 @property  double diffuseShadowOpacity
 @property  double diffuseShadowOffsetHorizontal
 @property  double diffuseShadowOffsetVertical
 @property  double diffuseShadowRadiusWhileTouched
 @property  double diffuseShadowOpacityWhileTouched
 @property  double diffuseShadowOffsetHorizontalWhileTouched
 @property  double diffuseShadowOffsetVerticalWhileTouched
 @property  double coronaDiffuseShadowOpacity
 @property  double coronaDiffuseShadowOpacityWhileTouched
 @property  double coronaRimShadowOpacity
 @property  double blurFadeAnimationDuration
 @property  double reduceMotionBlurFadeAnimationDuration
 @property  SBFFluidBehaviorSettings *medusaAnimationSettings
 @property  SBFFluidBehaviorSettings *resizeAnimationSettings
 @property  SBFFluidBehaviorSettings *platterAnimationSettings
 @property  SBFFluidBehaviorSettings *dropAnimationSettings
 @property  double dropAnimationUnblurThresholdPercentage
 @property  double movePanGestureThresholdPercentage
 @property  double movePanGesturePositiveVelocityThreshold
 @property  double movePanGestureNegativeVelocityThreshold
 @property  double iconPlatterScale
 @property  double windowPlatterScale
 @property  double draggingPlatterSideActivationGutterPadding
 @property  double draggingPlatterFullscreenActivationRegionWidth
 @property  double draggingPlatterFullscreenActivationRegionHeight
 @property  BOOL showContentDragExclusionRects
 @property  double contentDraggingCommandeerGutterWidth
 @property  double contentDraggingSideActivationGutterWidth
 @property  double contentDraggingFloatingActivationGutterWidth
 @property  double windowTearOffDraggingSideActivationGutterWidth
 @property  double windowTearOffDraggingFloatingActivationGutterWidth
 @property  PTOutlet *killSpringBoardOutlet
 @property  double cornerRadiusForInnerCorners
 @property  double cornerRadiusForCompatibilityAppOuterCorners
 @property  double cornerRadiusForFloatingApps
 @property  double cornerRadiusFallbackForOldApps
 @property  BOOL statusBarDebugBackgroundColorsEnabled
 @property  BOOL statusBarDebugOffsettingEnabled

  // class methods
  +[SBMedusaSettings settingsControllerModule]

  // instance methods
  -[SBMedusaSettings dockAnimationSettings]
  -[SBMedusaSettings setDefaultValues]
  -[SBMedusaSettings vibrantColorMatrixM34]
  -[SBMedusaSettings setDiffuseShadowOpacity:]
  -[SBMedusaSettings setDockAnimationSettings:]
  -[SBMedusaSettings setMedusaSeparatorCursorTopEdgeInset:]
  -[SBMedusaSettings setDraggingPlatterSideActivationGutterPadding:]
  -[SBMedusaSettings windowPlatterScale]
  -[SBMedusaSettings statusBarDebugBackgroundColorsEnabled]
  -[SBMedusaSettings setCornerRadiusForCompatibilityAppOuterCorners:]
  -[SBMedusaSettings setMovePanGestureNegativeVelocityThreshold:]
  -[SBMedusaSettings setVibrantColorMatrixM42:]
  -[SBMedusaSettings setContentDraggingCommandeerGutterWidth:]
  -[SBMedusaSettings setMedusaSeparatorCursorRightEdgeInset:]
  -[SBMedusaSettings setCoronaDiffuseShadowOpacity:]
  -[SBMedusaSettings setVibrantColorMatrixM31:]
  -[SBMedusaSettings setVibrantColorMatrixM41:]
  -[SBMedusaSettings setDropAnimationUnblurThresholdPercentage:]
  -[SBMedusaSettings setDockWithPresentedFolderAnimationSettings:]
  -[SBMedusaSettings setVibrantColorMatrixM43:]
  -[SBMedusaSettings setMedusaWindowDraggingCursorTopEdgeInset:]
  -[SBMedusaSettings resizeAnimationSettings]
  -[SBMedusaSettings setVibrantColorMatrixM23:]
  -[SBMedusaSettings setRimShadowOpacity:]
  -[SBMedusaSettings vibrantColorMatrixM42]
  -[SBMedusaSettings diffuseShadowOpacity]
  -[SBMedusaSettings vibrantColorMatrixM45]
  -[SBMedusaSettings setMedusaAnimationSettings:]
  -[SBMedusaSettings vibrantColorMatrixM25]
  -[SBMedusaSettings setVibrantColorMatrixM35:]
  -[SBMedusaSettings diffuseShadowOffsetHorizontal]
  -[SBMedusaSettings setWindowTearOffDraggingFloatingActivationGutterWidth:]
  -[SBMedusaSettings setWindowPlatterScale:]
  -[SBMedusaSettings setCornerRadiusForInnerCorners:]
  -[SBMedusaSettings coronaDiffuseShadowOpacityWhileTouched]
  -[SBMedusaSettings medusaAnimationSettings]
  -[SBMedusaSettings medusaWindowDraggingCursorBottomEdgeInset]
  -[SBMedusaSettings vibrantColorMatrixM14]
  -[SBMedusaSettings setVibrantColorMatrixM14:]
  -[SBMedusaSettings vibrantColorMatrixM13]
  -[SBMedusaSettings medusaSeparatorCursorLeftEdgeInset]
  -[SBMedusaSettings .cxx_destruct]
  -[SBMedusaSettings setMedusaWindowDraggingCursorLeftEdgeInset:]
  -[SBMedusaSettings setVibrantColorMatrixM12:]
  -[SBMedusaSettings diffuseShadowRadius]
  -[SBMedusaSettings killSpringBoardOutlet]
  -[SBMedusaSettings windowTearOffDraggingSideActivationGutterWidth]
  -[SBMedusaSettings vibrantColorMatrixM11]
  -[SBMedusaSettings setVibrantColorMatrixM21:]
  -[SBMedusaSettings setVibrantColorMatrixM24:]
  -[SBMedusaSettings setFloatingAppCardScaleWhileCursorHovered:]
  -[SBMedusaSettings vibrantColorMatrixM31]
  -[SBMedusaSettings setDraggingPlatterFullscreenActivationRegionHeight:]
  -[SBMedusaSettings vibrantColorMatrixM33]
  -[SBMedusaSettings setKillSpringBoardOutlet:]
  -[SBMedusaSettings setMovePanGestureThresholdPercentage:]
  -[SBMedusaSettings setDiffuseShadowRadiusWhileTouched:]
  -[SBMedusaSettings vibrantColorMatrixM22]
  -[SBMedusaSettings movePanGesturePositiveVelocityThreshold]
  -[SBMedusaSettings medusaSeparatorCursorRightEdgeInset]
  -[SBMedusaSettings vibrantColorMatrixM12]
  -[SBMedusaSettings setDropAnimationSettings:]
  -[SBMedusaSettings setWideEdgeSwipeHitTestWidth:]
  -[SBMedusaSettings setVibrantColorMatrixM44:]
  -[SBMedusaSettings setDiffuseShadowRadius:]
  -[SBMedusaSettings coronaDiffuseShadowOpacity]
  -[SBMedusaSettings floatingAppCardScaleWhileCursorHovered]
  -[SBMedusaSettings medusaWindowDraggingCursorLeftEdgeInset]
  -[SBMedusaSettings setCoronaDiffuseShadowOpacityWhileTouched:]
  -[SBMedusaSettings setVibrantColorMatrixM11:]
  -[SBMedusaSettings persistentDock]
  -[SBMedusaSettings cornerRadiusForCompatibilityAppOuterCorners]
  -[SBMedusaSettings setVibrantColorMatrixM34:]
  -[SBMedusaSettings vibrantColorMatrixM41]
  -[SBMedusaSettings medusaWindowDraggingCursorEdgeInsets]
  -[SBMedusaSettings setVibrantColorMatrixM33:]
  -[SBMedusaSettings coronaRimShadowOpacity]
  -[SBMedusaSettings setNarrowEdgeSwipeHitTestWidth:]
  -[SBMedusaSettings contentDraggingSideActivationGutterWidth]
  -[SBMedusaSettings setNumberOfRecents:]
  -[SBMedusaSettings cornerRadiusFallbackForOldApps]
  -[SBMedusaSettings cornerRadiusForFloatingApps]
  -[SBMedusaSettings setWindowTearOffDraggingSideActivationGutterWidth:]
  -[SBMedusaSettings reduceMotionBlurFadeAnimationDuration]
  -[SBMedusaSettings iconPlatterScale]
  -[SBMedusaSettings dismissHitTestTopPadding]
  -[SBMedusaSettings setDiffuseShadowOffsetVertical:]
  -[SBMedusaSettings wideEdgeSwipeHitTestWidth]
  -[SBMedusaSettings medusaSeparatorCursorEdgeInsets]
  -[SBMedusaSettings setMovePanGesturePositiveVelocityThreshold:]
  -[SBMedusaSettings vibrantColorMatrixM35]
  -[SBMedusaSettings dockWithPresentedFolderAnimationSettings]
  -[SBMedusaSettings diffuseShadowOpacityWhileTouched]
  -[SBMedusaSettings setMedusaWindowDraggingCursorRightEdgeInset:]
  -[SBMedusaSettings numberOfRecents]
  -[SBMedusaSettings setBlurFadeAnimationDuration:]
  -[SBMedusaSettings setIconPlatterScale:]
  -[SBMedusaSettings draggingPlatterFullscreenActivationRegionHeight]
  -[SBMedusaSettings setContentDraggingSideActivationGutterWidth:]
  -[SBMedusaSettings setVibrantColorMatrixM13:]
  -[SBMedusaSettings setDiffuseShadowOffsetHorizontal:]
  -[SBMedusaSettings statusBarDebugOffsettingEnabled]
  -[SBMedusaSettings cornerRadiusForInnerCorners]
  -[SBMedusaSettings setStatusBarDebugBackgroundColorsEnabled:]
  -[SBMedusaSettings setCornerRadiusFallbackForOldApps:]
  -[SBMedusaSettings setReduceMotionBlurFadeAnimationDuration:]
  -[SBMedusaSettings setStatusBarDebugOffsettingEnabled:]
  -[SBMedusaSettings rimShadowRadius]
  -[SBMedusaSettings coronaVibrantColorMatrixInput]
  -[SBMedusaSettings medusaWindowDraggingCursorRightEdgeInset]
  -[SBMedusaSettings setDiffuseShadowOpacityWhileTouched:]
  -[SBMedusaSettings setMedusaSeparatorCursorBottomEdgeInset:]
  -[SBMedusaSettings setContentDraggingFloatingActivationGutterWidth:]
  -[SBMedusaSettings setDraggingPlatterFullscreenActivationRegionWidth:]
  -[SBMedusaSettings vibrantColorMatrixM44]
  -[SBMedusaSettings setMedusaWindowDraggingCursorBottomEdgeInset:]
  -[SBMedusaSettings medusaWindowDraggingCursorTopEdgeInset]
  -[SBMedusaSettings diffuseShadowOffsetHorizontalWhileTouched]
  -[SBMedusaSettings medusa1oSettings]
  -[SBMedusaSettings narrowEdgeSwipeHitTestWidth]
  -[SBMedusaSettings medusaSeparatorCursorBottomEdgeInset]
  -[SBMedusaSettings vibrantColorMatrixM15]
  -[SBMedusaSettings diffuseShadowOffsetVerticalWhileTouched]
  -[SBMedusaSettings diffuseShadowOffsetVertical]
  -[SBMedusaSettings contentDraggingFloatingActivationGutterWidth]
  -[SBMedusaSettings setResizeAnimationSettings:]
  -[SBMedusaSettings rimShadowOpacity]
  -[SBMedusaSettings setMedusaSeparatorCursorLeftEdgeInset:]
  -[SBMedusaSettings setCoronaRimShadowOpacity:]
  -[SBMedusaSettings diffuseShadowRadiusWhileTouched]
  -[SBMedusaSettings windowTearOffDraggingFloatingActivationGutterWidth]
  -[SBMedusaSettings draggingPlatterFullscreenActivationRegionWidth]
  -[SBMedusaSettings setPlatterAnimationSettings:]
  -[SBMedusaSettings vibrantColorMatrixM23]
  -[SBMedusaSettings setMedusa1oSettings:]
  -[SBMedusaSettings dropAnimationUnblurThresholdPercentage]
  -[SBMedusaSettings setCornerRadiusForFloatingApps:]
  -[SBMedusaSettings setDismissHitTestTopPadding:]
  -[SBMedusaSettings blurFadeAnimationDuration]
  -[SBMedusaSettings setRimShadowRadius:]
  -[SBMedusaSettings floatingAppCardScaleWhileTouched]
  -[SBMedusaSettings setShowContentDragExclusionRects:]
  -[SBMedusaSettings setFloatingAppCardScaleWhileTouched:]
  -[SBMedusaSettings movePanGestureThresholdPercentage]
  -[SBMedusaSettings medusaSeparatorCursorTopEdgeInset]
  -[SBMedusaSettings platterAnimationSettings]
  -[SBMedusaSettings setVibrantColorMatrixM25:]
  -[SBMedusaSettings setPersistentDock:]
  -[SBMedusaSettings setVibrantColorMatrixM22:]
  -[SBMedusaSettings vibrantColorMatrixM24]
  -[SBMedusaSettings vibrantColorMatrixM32]
  -[SBMedusaSettings setVibrantColorMatrixM45:]
  -[SBMedusaSettings showContentDragExclusionRects]
  -[SBMedusaSettings effectiveBlurFadeAnimationDuration]
  -[SBMedusaSettings setVibrantColorMatrixM32:]
  -[SBMedusaSettings draggingPlatterSideActivationGutterPadding]
  -[SBMedusaSettings vibrantColorMatrixM43]
  -[SBMedusaSettings dropAnimationSettings]
  -[SBMedusaSettings setDiffuseShadowOffsetVerticalWhileTouched:]
  -[SBMedusaSettings movePanGestureNegativeVelocityThreshold]
  -[SBMedusaSettings setVibrantColorMatrixM15:]
  -[SBMedusaSettings contentDraggingCommandeerGutterWidth]
  -[SBMedusaSettings setDiffuseShadowOffsetHorizontalWhileTouched:]
  -[SBMedusaSettings vibrantColorMatrixM21]


SBMedusa1oSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL debugRotationCenter
 @property  BOOL debugColorRotationRegions
 @property  BOOL clipRotationRegions
 @property  double zoomOutRotationFactor
 @property  double rotationSlowdownFactor
 @property  BOOL fencesRotation
 @property  unsigned long millisecondsBetweenResizeSteps
 @property  double gapSwipeBuffer

  // class methods
  +[SBMedusa1oSettings settingsControllerModule]

  // instance methods
  -[SBMedusa1oSettings setDefaultValues]
  -[SBMedusa1oSettings debugRotationCenter]
  -[SBMedusa1oSettings debugColorRotationRegions]
  -[SBMedusa1oSettings clipRotationRegions]
  -[SBMedusa1oSettings zoomOutRotationFactor]
  -[SBMedusa1oSettings rotationSlowdownFactor]
  -[SBMedusa1oSettings gapSwipeBuffer]
  -[SBMedusa1oSettings setDebugRotationCenter:]
  -[SBMedusa1oSettings setDebugColorRotationRegions:]
  -[SBMedusa1oSettings setClipRotationRegions:]
  -[SBMedusa1oSettings setZoomOutRotationFactor:]
  -[SBMedusa1oSettings setRotationSlowdownFactor:]
  -[SBMedusa1oSettings setFencesRotation:]
  -[SBMedusa1oSettings setGapSwipeBuffer:]
  -[SBMedusa1oSettings fencesRotation]
  -[SBMedusa1oSettings millisecondsBetweenResizeSteps]
  -[SBMedusa1oSettings setMillisecondsBetweenResizeSteps:]


SBLogoutProgressTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBLogoutProgressDataSource, SBTestRecipe>
 @property  SBLogoutProgressTransientOverlayViewController *logoutProgressTransientOverlayViewController
 @property  NSArray *remainingApplications
 @property  NSDictionary *remainingBlockingTasks
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLogoutProgressTestRecipe load]

  // instance methods
  -[SBLogoutProgressTestRecipe pendingApplicationsForLogoutProgressTransientOverlayViewController:]
  -[SBLogoutProgressTestRecipe .cxx_destruct]
  -[SBLogoutProgressTestRecipe title]
  -[SBLogoutProgressTestRecipe debugBlockingTasksForLogoutProgressTransientOverlayViewController:]
  -[SBLogoutProgressTestRecipe handleVolumeIncrease]
  -[SBLogoutProgressTestRecipe handleVolumeDecrease]
  -[SBLogoutProgressTestRecipe _defaultPendingApplications]
  -[SBLogoutProgressTestRecipe setRemainingApplications:]
  -[SBLogoutProgressTestRecipe _defaultBlockingTasks]
  -[SBLogoutProgressTestRecipe setRemainingBlockingTasks:]
  -[SBLogoutProgressTestRecipe remainingApplications]
  -[SBLogoutProgressTestRecipe remainingBlockingTasks]
  -[SBLogoutProgressTestRecipe logoutProgressTransientOverlayViewController]
  -[SBLogoutProgressTestRecipe setLogoutProgressTransientOverlayViewController:]


SBSwitcherKeyboardSuppressionMode : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long type
 @property  NSSet *appLayouts

  // class methods
  +[SBSwitcherKeyboardSuppressionMode suppressionModeNone]
  +[SBSwitcherKeyboardSuppressionMode suppressionModeForAllScenes]
  +[SBSwitcherKeyboardSuppressionMode newSuppressionModeForSwitcherScenesFromAppLayouts:]

  // instance methods
  -[SBSwitcherKeyboardSuppressionMode setType:]
  -[SBSwitcherKeyboardSuppressionMode .cxx_destruct]
  -[SBSwitcherKeyboardSuppressionMode type]
  -[SBSwitcherKeyboardSuppressionMode isEqual:]
  -[SBSwitcherKeyboardSuppressionMode appLayouts]
  -[SBSwitcherKeyboardSuppressionMode suppressesSwitcherScenesOnly]
  -[SBSwitcherKeyboardSuppressionMode suppressesAllScenes]
  -[SBSwitcherKeyboardSuppressionMode _initWithAppLayouts:suppressionType:]
  -[SBSwitcherKeyboardSuppressionMode suppressesNoScenes]


SBBuddyLockScreenDismissOnlyAlertItem : SBDismissOnlyAlertItem
  // instance methods
  -[SBBuddyLockScreenDismissOnlyAlertItem forcesModalAlertAppearance]
  -[SBBuddyLockScreenDismissOnlyAlertItem allowInSetup]


SBSecureAppViewController : SBDashBoardHostedAppViewController
 @property  <SBSecureAppViewControllerDelegate> *delegate

  // instance methods
  -[SBSecureAppViewController handleEvent:]
  -[SBSecureAppViewController configureDisplayLayoutElement:]


SBDismissEmergencyCallRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDismissEmergencyCallRecipe load]

  // instance methods
  -[SBDismissEmergencyCallRecipe title]
  -[SBDismissEmergencyCallRecipe handleVolumeIncrease]
  -[SBDismissEmergencyCallRecipe handleVolumeDecrease]


SBRemoteAlertHandleLocalClient : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBRemoteTransientOverlaySessionObserver, SBSRemoteAlertHandleClient>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRemoteAlertHandleLocalClient invalidateRemoteAlertHandle:]
  -[SBRemoteAlertHandleLocalClient remoteAlertHandlesForDefinition:allowsCreation:configurationContext:]
  -[SBRemoteAlertHandleLocalClient activateRemoteAlertHandle:withContext:]
  -[SBRemoteAlertHandleLocalClient createRemoteAlertHandleWithDefinition:configurationContext:]
  -[SBRemoteAlertHandleLocalClient .cxx_destruct]
  -[SBRemoteAlertHandleLocalClient remoteTransientOverlaySession:didInvalidateWithReason:error:]
  -[SBRemoteAlertHandleLocalClient initWithSessionManager:]
  -[SBRemoteAlertHandleLocalClient _registerHandle:forSession:]
  -[SBRemoteAlertHandleLocalClient _unregisterHandle:]
  -[SBRemoteAlertHandleLocalClient remoteTransientOverlaySessionDidActivate:]
  -[SBRemoteAlertHandleLocalClient remoteTransientOverlaySessionDidDeactivate:]


SBSecureAppManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSMutableDictionary *secureAppActions
 @property  NSMutableArray *remoteAlertActions
 @property  NSHashTable *observers
 @property  BOOL hasSecureApp
 @property  BOOL hasWakeDestinaton
 @property  SBWakeDestination *wakeDestinaton

  // class methods
  +[SBSecureAppManager sharedInstance]

  // instance methods
  -[SBSecureAppManager _addRemoteAlertLockScreenContentAction:]
  -[SBSecureAppManager init]
  -[SBSecureAppManager setObservers:]
  -[SBSecureAppManager _addSecureAppAction:]
  -[SBSecureAppManager secureAppActions]
  -[SBSecureAppManager .cxx_destruct]
  -[SBSecureAppManager remoteAlertActions]
  -[SBSecureAppManager hasWakeDestinaton]
  -[SBSecureAppManager setRemoteAlertActions:]
  -[SBSecureAppManager addLockScreenContentAction:]
  -[SBSecureAppManager observers]
  -[SBSecureAppManager hasSecureAppOfType:]
  -[SBSecureAppManager wakeDestinaton]
  -[SBSecureAppManager _applicationSceneEntityForAction:]
  -[SBSecureAppManager hasSecureApp]
  -[SBSecureAppManager secureAppAction]
  -[SBSecureAppManager newApplicationSceneEntityForCurrentSecureApp]
  -[SBSecureAppManager removeObserver:]
  -[SBSecureAppManager _enumerateSecureAppActionsByPriorityUsingBlock:]
  -[SBSecureAppManager _enumerateSecureAppActionsOfType:usingBlock:]
  -[SBSecureAppManager addObserver:]
  -[SBSecureAppManager _applicationForAction:]
  -[SBSecureAppManager setSecureAppActions:]


SBAutoPurgingImageView : UIImageView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBAutoPurgingImageView didMoveToWindow]
  -[SBAutoPurgingImageView .cxx_destruct]
  -[SBAutoPurgingImageView setImage:]
  -[SBAutoPurgingImageView initWithImageGenerationBlock:]


SBIdleTimerDescriptor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, NSCopying>
 @property  long long timerMode
 @property  double sampleInterval
 @property  double warnInterval
 @property  double quickUnwarnInterval
 @property  double totalInterval
 @property  BOOL shouldWarn
 @property  BOOL shouldExpireAfterWarn
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIdleTimerDescriptor copyWithZone:]
  -[SBIdleTimerDescriptor initWithTimerMode:warnInterval:totalInterval:]
  -[SBIdleTimerDescriptor sampleInterval]
  -[SBIdleTimerDescriptor setWarnInterval:]
  -[SBIdleTimerDescriptor quickUnwarnInterval]
  -[SBIdleTimerDescriptor setQuickUnwarnInterval:]
  -[SBIdleTimerDescriptor shouldWarn]
  -[SBIdleTimerDescriptor succinctDescriptionBuilder]
  -[SBIdleTimerDescriptor setTotalInterval:]
  -[SBIdleTimerDescriptor warnInterval]
  -[SBIdleTimerDescriptor totalInterval]
  -[SBIdleTimerDescriptor shouldExpireAfterWarn]
  -[SBIdleTimerDescriptor succinctDescription]
  -[SBIdleTimerDescriptor setTimerMode:]
  -[SBIdleTimerDescriptor isEqual:]
  -[SBIdleTimerDescriptor timerMode]
  -[SBIdleTimerDescriptor setSampleInterval:]
  -[SBIdleTimerDescriptor descriptionWithMultilinePrefix:]
  -[SBIdleTimerDescriptor descriptionBuilderWithMultilinePrefix:]


SBScrollingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBScrollingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBScrollingSwitcherModifier handleScrollEvent:]


SBBlockWorkspaceQueueTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  NSTimer *blockTimer
 @property  FBWorkspaceEventQueueLock *queueLock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBlockWorkspaceQueueTestRecipe load]

  // instance methods
  -[SBBlockWorkspaceQueueTestRecipe .cxx_destruct]
  -[SBBlockWorkspaceQueueTestRecipe title]
  -[SBBlockWorkspaceQueueTestRecipe handleVolumeIncrease]
  -[SBBlockWorkspaceQueueTestRecipe handleVolumeDecrease]
  -[SBBlockWorkspaceQueueTestRecipe queueLock]
  -[SBBlockWorkspaceQueueTestRecipe setQueueLock:]
  -[SBBlockWorkspaceQueueTestRecipe blockTimer]
  -[SBBlockWorkspaceQueueTestRecipe blockTimerDidFire:]
  -[SBBlockWorkspaceQueueTestRecipe setBlockTimer:]


SBDeviceApplicationScenePlaceholderContentContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBScenePlaceholderContentContext, NSMutableCopying>
 @property  <SBActivationSettings> *activationSettings
 @property  long long layoutEnvironment
 @property  NSString *requestedLaunchIdentifier
 @property  NSURL *url
 @property  BOOL prefersLiveXIB
 @property  unsigned long preferredContentType
 @property  BOOL canShowUserContent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationScenePlaceholderContentContext copyWithZone:]
  -[SBDeviceApplicationScenePlaceholderContentContext setActivationSettings:]
  -[SBDeviceApplicationScenePlaceholderContentContext init]
  -[SBDeviceApplicationScenePlaceholderContentContext url]
  -[SBDeviceApplicationScenePlaceholderContentContext setRequestedLaunchIdentifier:]
  -[SBDeviceApplicationScenePlaceholderContentContext setPrefersLiveXIB:]
  -[SBDeviceApplicationScenePlaceholderContentContext .cxx_destruct]
  -[SBDeviceApplicationScenePlaceholderContentContext initWithActivationSettings:]
  -[SBDeviceApplicationScenePlaceholderContentContext activationSettings]
  -[SBDeviceApplicationScenePlaceholderContentContext setPreferredContentType:]
  -[SBDeviceApplicationScenePlaceholderContentContext setUrl:]
  -[SBDeviceApplicationScenePlaceholderContentContext canShowUserContent]
  -[SBDeviceApplicationScenePlaceholderContentContext requestedLaunchIdentifier]
  -[SBDeviceApplicationScenePlaceholderContentContext layoutEnvironment]
  -[SBDeviceApplicationScenePlaceholderContentContext prefersLiveXIB]
  -[SBDeviceApplicationScenePlaceholderContentContext setLayoutEnvironment:]
  -[SBDeviceApplicationScenePlaceholderContentContext preferredContentType]
  -[SBDeviceApplicationScenePlaceholderContentContext mutableCopyWithZone:]


SBMutableDeviceApplicationScenePlaceholderContentContext : SBDeviceApplicationScenePlaceholderContentContext
 @property  BOOL prefersLiveXIB
 @property  long long layoutEnvironment
 @property  unsigned long preferredContentType
 @property  NSString *requestedLaunchIdentifier
 @property  NSURL *url


SBDefaultIconModelStore : SBIconModelPropertyListFileStore /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
  // class methods
  +[SBDefaultIconModelStore sharedInstance]

  // instance methods
  -[SBDefaultIconModelStore init]
  -[SBDefaultIconModelStore _deleteLegacyState]
  -[SBDefaultIconModelStore saveDesiredIconState:error:]
  -[SBDefaultIconModelStore loadDesiredIconState:]
  -[SBDefaultIconModelStore deleteDesiredIconStateWithOptions:error:]
  -[SBDefaultIconModelStore loadCurrentIconState:]


SBDefaultAutomaticIconModelStore : SBIconModelPropertyListFileStore /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
  // class methods
  +[SBDefaultAutomaticIconModelStore sharedInstance]

  // instance methods
  -[SBDefaultAutomaticIconModelStore init]


SBFullScreenOcclusionTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBSceneManagerObserver, SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFullScreenOcclusionTestRecipe load]

  // instance methods
  -[SBFullScreenOcclusionTestRecipe sceneManager:willDestroyScene:]
  -[SBFullScreenOcclusionTestRecipe sceneManager:didDestroyScene:]
  -[SBFullScreenOcclusionTestRecipe init]
  -[SBFullScreenOcclusionTestRecipe sceneManager:willUpdateScene:withSettings:transitionContext:]
  -[SBFullScreenOcclusionTestRecipe dealloc]
  -[SBFullScreenOcclusionTestRecipe .cxx_destruct]
  -[SBFullScreenOcclusionTestRecipe title]
  -[SBFullScreenOcclusionTestRecipe sceneManager:didCreateScene:withClient:]
  -[SBFullScreenOcclusionTestRecipe sceneManager:willCommitUpdateForScene:transactionID:]
  -[SBFullScreenOcclusionTestRecipe sceneManager:didCommitUpdateForScene:transactionID:]
  -[SBFullScreenOcclusionTestRecipe handleVolumeIncrease]
  -[SBFullScreenOcclusionTestRecipe handleVolumeDecrease]


SBActivationInfoViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <STTelephonyStateObserver, UITableViewDataSource, UITableViewDelegate>
 @property  UIButton *regulatoryInfoButton
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBActivationInfoViewController tableView:heightForRowAtIndexPath:]
  -[SBActivationInfoViewController tableView:viewForHeaderInSection:]
  -[SBActivationInfoViewController tableView:heightForFooterInSection:]
  -[SBActivationInfoViewController tableView:numberOfRowsInSection:]
  -[SBActivationInfoViewController dealloc]
  -[SBActivationInfoViewController .cxx_destruct]
  -[SBActivationInfoViewController subscriptionInfoDidChangeForStateProvider:slot:]
  -[SBActivationInfoViewController tableView:cellForRowAtIndexPath:]
  -[SBActivationInfoViewController numberOfSectionsInTableView:]
  -[SBActivationInfoViewController initWithNibName:bundle:]
  -[SBActivationInfoViewController _titleForHeaderInSection:]
  -[SBActivationInfoViewController viewWillAppear:]
  -[SBActivationInfoViewController _canShowWhileLocked]
  -[SBActivationInfoViewController viewDidLayoutSubviews]
  -[SBActivationInfoViewController mobileEquipmentInfoDidChangeForStateProvider:slot:]
  -[SBActivationInfoViewController loadView]
  -[SBActivationInfoViewController regulatoryInfoButton]
  -[SBActivationInfoViewController _updateMobileEquipmentInfo]
  -[SBActivationInfoViewController _telephonyStateChanged]
  -[SBActivationInfoViewController _activationInfoCell]
  -[SBActivationInfoViewController _backgroundViewForHeaderView:]
  -[SBActivationInfoViewController _processMobileEquipmentInfo:]
  -[SBActivationInfoViewController _processMobileSubscriptionInfo]
  -[SBActivationInfoViewController _processDeviceInfo]
  -[SBActivationInfoViewController _formattedIMEI:]
  -[SBActivationInfoViewController _formattedCSN:]
  -[SBActivationInfoViewController _formattedICCID:]
  -[SBActivationInfoViewController _formattedString:withSpaceAfterDigits:]


SBApplicationSceneHandleRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBApplication *application
 @property  FBScene *existingScene
 @property  FBSDisplayIdentity *displayIdentity
 @property  FBSSceneDefinition *sceneDefinition

  // class methods
  +[SBApplicationSceneHandleRequest defaultRequestForApplication:sceneIdentity:displayIdentity:]

  // instance methods
  -[SBApplicationSceneHandleRequest setDisplayIdentity:]
  -[SBApplicationSceneHandleRequest application]
  -[SBApplicationSceneHandleRequest existingScene]
  -[SBApplicationSceneHandleRequest .cxx_destruct]
  -[SBApplicationSceneHandleRequest displayIdentity]
  -[SBApplicationSceneHandleRequest setExistingScene:]
  -[SBApplicationSceneHandleRequest sceneDefinition]
  -[SBApplicationSceneHandleRequest setSceneDefinition:]
  -[SBApplicationSceneHandleRequest initWithApplication:sceneDefinition:displayIdentity:]
  -[SBApplicationSceneHandleRequest setApplication:]


SBAppClipOverlayViewController : SBFTouchPassThroughViewController /usr/lib/libutil.dylib <SBAppClipOverlayCoordinatorParticipant, SBAppClipOverlayViewDelegate, BSInvalidatable>
 @property  NSString *webClipIdentifier
 @property  SBAppClipOverlayCoordinator *coordinator
 @property  CPSClipOverlayViewController *overlayViewController
 @property  BOOL displayedOverPlaceholder
 @property  long long sceneActivationState
 @property  NSString *bundleIdentifier
 @property  NSString *sceneIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppClipOverlayViewController preferredStatusBarStyle]
  -[SBAppClipOverlayViewController overlayViewController]
  -[SBAppClipOverlayViewController coordinator]
  -[SBAppClipOverlayViewController .cxx_destruct]
  -[SBAppClipOverlayViewController setCoordinator:]
  -[SBAppClipOverlayViewController view]
  -[SBAppClipOverlayViewController initWithNibName:bundle:]
  -[SBAppClipOverlayViewController sceneIdentifier]
  -[SBAppClipOverlayViewController webClipIdentifier]
  -[SBAppClipOverlayViewController viewWillAppear:]
  -[SBAppClipOverlayViewController viewDidDisappear:]
  -[SBAppClipOverlayViewController bundleIdentifier]
  -[SBAppClipOverlayViewController invalidate]
  -[SBAppClipOverlayViewController viewDidLayoutSubviews]
  -[SBAppClipOverlayViewController loadView]
  -[SBAppClipOverlayViewController initWithCoder:]
  -[SBAppClipOverlayViewController initWithCoordinator:bundleIdentifier:sceneIdentifier:]
  -[SBAppClipOverlayViewController setDisplayedOverPlaceholder:animated:]
  -[SBAppClipOverlayViewController setSceneActivationState:animated:]
  -[SBAppClipOverlayViewController appClipOverlayCoordinator:requestsSurrenderOfViewController:]
  -[SBAppClipOverlayViewController participantName]
  -[SBAppClipOverlayViewController appClipPlaceholderViewDidInvalidate:]
  -[SBAppClipOverlayViewController setWebClipIdentifier:]
  -[SBAppClipOverlayViewController setOverlayViewController:]
  -[SBAppClipOverlayViewController displayedOverPlaceholder]
  -[SBAppClipOverlayViewController setDisplayedOverPlaceholder:]
  -[SBAppClipOverlayViewController sceneActivationState]
  -[SBAppClipOverlayViewController setSceneActivationState:]


SBAppClipOverlayView : SBFTouchPassThroughView /usr/lib/libutil.dylib <BSInvalidatable>
 @property  <SBAppClipOverlayViewDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppClipOverlayView initWithFrame:]
  -[SBAppClipOverlayView .cxx_destruct]
  -[SBAppClipOverlayView initWithFrame:delegate:]
  -[SBAppClipOverlayView setDelegate:]
  -[SBAppClipOverlayView invalidate]
  -[SBAppClipOverlayView delegate]
  -[SBAppClipOverlayView initWithCoder:]


SBRecordingIndicatorViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  BOOL isStatusBarPortal
 @property  UIView *indicatorView
 @property  UIColor *indicatorColor
 @property  unsigned long indicatorAnimationState
 @property  long long activeInterfaceOrientation

  // instance methods
  -[SBRecordingIndicatorViewController setActiveInterfaceOrientation:]
  -[SBRecordingIndicatorViewController activeInterfaceOrientation]
  -[SBRecordingIndicatorViewController _stopAllAnimations]
  -[SBRecordingIndicatorViewController .cxx_destruct]
  -[SBRecordingIndicatorViewController supportedInterfaceOrientations]
  -[SBRecordingIndicatorViewController _canShowWhileLocked]
  -[SBRecordingIndicatorViewController indicatorView]
  -[SBRecordingIndicatorViewController setIndicatorColor:]
  -[SBRecordingIndicatorViewController indicatorColor]
  -[SBRecordingIndicatorViewController initForPortalView:]
  -[SBRecordingIndicatorViewController animateIndicatorVisible:]
  -[SBRecordingIndicatorViewController indicatorAnimationState]
  -[SBRecordingIndicatorViewController animateIndicatorVisibleFastFade:]
  -[SBRecordingIndicatorViewController _configureRootLayer]
  -[SBRecordingIndicatorViewController calculateInitialIndicatorPositionAndSize]
  -[SBRecordingIndicatorViewController _updateToOrientation:]
  -[SBRecordingIndicatorViewController isStatusBarPortal]
  -[SBRecordingIndicatorViewController _updateIndicatorLayerWithBounds:andCenter:]
  -[SBRecordingIndicatorViewController _updateIndicatorLayerSize:opacity:]
  -[SBRecordingIndicatorViewController _updateIndicatorViewSize:alpha:]
  -[SBRecordingIndicatorViewController setIsStatusBarPortal:]


SBForcePressGestureRootSwitcherModifier : SBGestureRootSwitcherModifier
  // instance methods
  -[SBForcePressGestureRootSwitcherModifier .cxx_destruct]
  -[SBForcePressGestureRootSwitcherModifier gestureType]
  -[SBForcePressGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBForcePressGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBForcePressGestureRootSwitcherModifier initWithStartingEnvironmentMode:multitaskingModifier:]


SBPrototypeDumpingGround : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <PTSettingsKeyObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPrototypeDumpingGround settings:changedValueForKey:]
  -[SBPrototypeDumpingGround init]
  -[SBPrototypeDumpingGround dealloc]
  -[SBPrototypeDumpingGround .cxx_destruct]
  -[SBPrototypeDumpingGround _updatePearlDebugUI]


SBDashBoardPluginController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalAppearanceProviding, CSExternalBehaviorProviding, CSExternalEventHandling, SBLockScreenPluginManagerDelegate, SBLockScreenPluginPresenting>
 @property  <SBLockScreenActionProvider> *lockScreenActionProvider
 @property  NSString *appearanceIdentifier
 @property  long long backgroundStyle
 @property  NSSet *components
 @property  _UILegibilitySettings *legibilitySettings
 @property  UIColor *backgroundColor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode

  // instance methods
  -[SBDashBoardPluginController coverSheetIdentifier]
  -[SBDashBoardPluginController conformsToCSAppearanceProviding]
  -[SBDashBoardPluginController scrollingStrategy]
  -[SBDashBoardPluginController notificationBehavior]
  -[SBDashBoardPluginController conformsToCSBehaviorProviding]
  -[SBDashBoardPluginController _deactivate]
  -[SBDashBoardPluginController restrictedCapabilities]
  -[SBDashBoardPluginController disableLockScreenPluginWithContext:]
  -[SBDashBoardPluginController legibilitySettings]
  -[SBDashBoardPluginController conformsToCSEventHandling]
  -[SBDashBoardPluginController _dismissPluginViewController:withStyle:animated:completion:]
  -[SBDashBoardPluginController appearanceIdentifier]
  -[SBDashBoardPluginController proximityDetectionMode]
  -[SBDashBoardPluginController backgroundStyle]
  -[SBDashBoardPluginController dealloc]
  -[SBDashBoardPluginController components]
  -[SBDashBoardPluginController enableLockScreenPluginWithContext:]
  -[SBDashBoardPluginController conformsToCSExternalBehaviorProviding]
  -[SBDashBoardPluginController backgroundColor]
  -[SBDashBoardPluginController .cxx_destruct]
  -[SBDashBoardPluginController initWithCoverSheetViewController:]
  -[SBDashBoardPluginController _activate]
  -[SBDashBoardPluginController pluginManager:activePluginDidChange:]
  -[SBDashBoardPluginController pluginManager:displayedPluginDidChangeFromPlugin:toPlugin:]
  -[SBDashBoardPluginController pluginManager:displayedPluginDidUpdateAppearance:]
  -[SBDashBoardPluginController participantState]
  -[SBDashBoardPluginController handleEvent:]
  -[SBDashBoardPluginController pluginManager:didLoadPlugin:]
  -[SBDashBoardPluginController pluginManager:plugin:handleAction:]
  -[SBDashBoardPluginController _presentPluginViewController:withStyle:animated:completion:]
  -[SBDashBoardPluginController lockScreenActionProvider]
  -[SBDashBoardPluginController _setPluginViewController:]
  -[SBDashBoardPluginController pluginManager:willUnloadPlugin:]
  -[SBDashBoardPluginController wouldHandleButtonEvent:]


SBAppSuggestionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UABestAppSuggestionManagerDelegate, SBAttentionAwarenessClientDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAppSuggestionManager sharedInstance]

  // instance methods
  -[SBAppSuggestionManager init]
  -[SBAppSuggestionManager enableListeningForUpdatesForReason:]
  -[SBAppSuggestionManager bestAppSuggestionChanged:]
  -[SBAppSuggestionManager noteNotActivatingForAppSuggestion:fromSource:]
  -[SBAppSuggestionManager _stopListeningForNotifications]
  -[SBAppSuggestionManager _handleAppUninstall:]
  -[SBAppSuggestionManager dealloc]
  -[SBAppSuggestionManager clientDidResetForUserAttention:]
  -[SBAppSuggestionManager .cxx_destruct]
  -[SBAppSuggestionManager currentSuggestedApp]
  -[SBAppSuggestionManager _listenForNotifications]
  -[SBAppSuggestionManager client:attentionLostTimeoutDidExpire:forConfigurationGeneration:withAssociatedObject:]
  -[SBAppSuggestionManager _evaluateSuggestionUpdates:]
  -[SBAppSuggestionManager disableListeningForUpdatesForReason:]
  -[SBAppSuggestionManager _screenDidUndim:]
  -[SBAppSuggestionManager _handleInitialSpringBoardLaunch]
  -[SBAppSuggestionManager startFetchingPayloadForAppSuggestion:]
  -[SBAppSuggestionManager expertCenterSuggestionChanged:]
  -[SBAppSuggestionManager _createSuggestionSources]
  -[SBAppSuggestionManager _calculateBestSuggestionAndNotifyListeners]
  -[SBAppSuggestionManager noteActivatingForAppSuggestion:fromSource:]
  -[SBAppSuggestionManager _supportedExpertCenterCategories]
  -[SBAppSuggestionManager _destroySuggestionSources]
  -[SBAppSuggestionManager _setContinuitySuggestionUpdatesEnabled:expertCenterSuggestionUpdatesEnabled:]
  -[SBAppSuggestionManager performWithCurrentSuggestedAppAndApplication:]
  -[SBAppSuggestionManager _screenDidDim:]


_SBUABestAppSuggestion : SBBestAppSuggestion
  // instance methods
  -[_SBUABestAppSuggestion activityType]
  -[_SBUABestAppSuggestion .cxx_destruct]
  -[_SBUABestAppSuggestion uniqueIdentifier]
  -[_SBUABestAppSuggestion isLocationBasedSuggestion]
  -[_SBUABestAppSuggestion originatingDeviceType]
  -[_SBUABestAppSuggestion originatingDeviceName]
  -[_SBUABestAppSuggestion isEqual:]
  -[_SBUABestAppSuggestion originatingDeviceIdentifier]
  -[_SBUABestAppSuggestion bundleIdentifier]
  -[_SBUABestAppSuggestion lastUpdateTime]
  -[_SBUABestAppSuggestion isLocallyGeneratedSuggestion]
  -[_SBUABestAppSuggestion isCallContinuitySuggestion]
  -[_SBUABestAppSuggestion isNotificationSuggestion]
  -[_SBUABestAppSuggestion isOpenURLSuggestion]
  -[_SBUABestAppSuggestion isHandoff]


_SBExpertAppSuggestion : SBBestAppSuggestion
 @property  _DECAppItem *appSuggestion
 @property  _DECResult *result
 @property  NSUUID *resultUUID

  // instance methods
  -[_SBExpertAppSuggestion result]
  -[_SBExpertAppSuggestion .cxx_destruct]
  -[_SBExpertAppSuggestion isPrediction]
  -[_SBExpertAppSuggestion isLocationBasedSuggestion]
  -[_SBExpertAppSuggestion isBluetoothAudioPrediction]
  -[_SBExpertAppSuggestion isBluetoothPrediction]
  -[_SBExpertAppSuggestion isHeadphonesPrediction]
  -[_SBExpertAppSuggestion isFirstWakePrediction]
  -[_SBExpertAppSuggestion originatingDeviceName]
  -[_SBExpertAppSuggestion isEqual:]
  -[_SBExpertAppSuggestion bundleIdentifier]
  -[_SBExpertAppSuggestion appSuggestion]
  -[_SBExpertAppSuggestion isArrivedAtHomePrediction]
  -[_SBExpertAppSuggestion isArrivedAtWorkPrediction]
  -[_SBExpertAppSuggestion isLocallyGeneratedSuggestion]
  -[_SBExpertAppSuggestion isCarPlayPrediction]
  -[_SBExpertAppSuggestion initWithAppSuggestion:result:]
  -[_SBExpertAppSuggestion resultUUID]


_SBExpertLocationAppSuggestion : _SBExpertAppSuggestion
  // instance methods
  -[_SBExpertLocationAppSuggestion launchURL]
  -[_SBExpertLocationAppSuggestion originatingBundleIdentifier]
  -[_SBExpertLocationAppSuggestion suggestedLocationName]
  -[_SBExpertLocationAppSuggestion launchURLRequiresInboxCopy]
  -[_SBExpertLocationAppSuggestion makeInboxCopyOfLaunchURLToInboxURL:]
  -[_SBExpertLocationAppSuggestion isLocationPredictionOfType:]
  -[_SBExpertLocationAppSuggestion isLocationPredictionFromSource:]
  -[_SBExpertLocationAppSuggestion isEligibleForLockScreen]


SBUIAnimationPropertyAnimator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBViewControllerAnimatedTransitioning>
 @property  @? generator
 @property  UIViewPropertyAnimator *propertyAnimator
 @property  double duration
 @property  BOOL isReversed
 @property  BOOL wasReversed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIAnimationPropertyAnimator transitionDuration:]
  -[SBUIAnimationPropertyAnimator generator]
  -[SBUIAnimationPropertyAnimator addCompletion:]
  -[SBUIAnimationPropertyAnimator isReversed]
  -[SBUIAnimationPropertyAnimator cancelTransition:withCompletionSpeed:completionCurve:]
  -[SBUIAnimationPropertyAnimator .cxx_destruct]
  -[SBUIAnimationPropertyAnimator animateTransition:]
  -[SBUIAnimationPropertyAnimator propertyAnimator]
  -[SBUIAnimationPropertyAnimator duration]
  -[SBUIAnimationPropertyAnimator initWithPropertyAnimatorGenerator:]
  -[SBUIAnimationPropertyAnimator reverseAnimation]
  -[SBUIAnimationPropertyAnimator _executeGenerator:]
  -[SBUIAnimationPropertyAnimator prepareToRunAnimation:]
  -[SBUIAnimationPropertyAnimator initWithPropertyAnimator:duration:]
  -[SBUIAnimationPropertyAnimator wasReversed]


SBTimerEventSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  NSString *reason

  // instance methods
  -[SBTimerEventSwitcherEventResponse .cxx_destruct]
  -[SBTimerEventSwitcherEventResponse type]
  -[SBTimerEventSwitcherEventResponse initWithDelay:validator:reason:]
  -[SBTimerEventSwitcherEventResponse reason]
  -[SBTimerEventSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]


SBAppContainerViewController : SBLayoutElementViewController <SBDeviceApplicationSceneStatusBarStateObserver, SBApplicationSceneViewControllingStatusBarDelegate, SBSceneHandleObserver, SBApplicationSceneViewControlling, SBApplicationSceneStatusBarDescriberProviding>
 @property  UIViewController<SBApplicationSceneViewControlling> *_applicationSceneViewController
 @property  <SBDeviceApplicationSceneStatusBarStateObserver> *statusBarDelegate
 @property  <SBApplicationSceneStatusBarDescribing> *statusBarDescriber
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBApplicationSceneHandle *sceneHandle
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBAppContainerViewController statusBarDescriber]
  -[SBAppContainerViewController applicationSceneStatusBarDelegate]
  -[SBAppContainerViewController applicationSceneViewController:didUpdateStatusBarSettings:]
  -[SBAppContainerViewController _deviceApplicationSceneHandle]
  -[SBAppContainerViewController placeholderContentContext]
  -[SBAppContainerViewController contentInterfaceOrientation]
  -[SBAppContainerViewController setPlaceholderContentContext:]
  -[SBAppContainerViewController sceneWithIdentifier:didChangeSceneInterfaceOrientationTo:]
  -[SBAppContainerViewController customContentView]
  -[SBAppContainerViewController displayMode]
  -[SBAppContainerViewController overrideStatusBarStyle]
  -[SBAppContainerViewController contentReferenceSize]
  -[SBAppContainerViewController setDisplayMode:animationFactory:completion:]
  -[SBAppContainerViewController setApplicationSceneStatusBarDelegate:]
  -[SBAppContainerViewController statusBarAlpha]
  -[SBAppContainerViewController setContentWrapperInterfaceOrientation:]
  -[SBAppContainerViewController _applicationSceneViewControllerForSceneHandle:]
  -[SBAppContainerViewController sceneHandle]
  -[SBAppContainerViewController configureWithWorkspaceEntity:forLayoutElement:layoutState:referenceFrame:]
  -[SBAppContainerViewController .cxx_destruct]
  -[SBAppContainerViewController SB_conformsToSBApplicationSceneStatusBarDescriberProviding]
  -[SBAppContainerViewController initWithDisplayIdentity:]
  -[SBAppContainerViewController sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBAppContainerViewController containerContentWrapperInterfaceOrientationChangedTo:]
  -[SBAppContainerViewController prepareForReuse]
  -[SBAppContainerViewController sceneHandle:didUpdatePairingStatusForExternalSceneIdentifiers:]
  -[SBAppContainerViewController didEndTransitionToVisible:]
  -[SBAppContainerViewController _newDisplayLayoutElementForEntity:]
  -[SBAppContainerViewController _updateDisplayLayoutElementForSceneExistence:]
  -[SBAppContainerViewController _applicationSceneViewController]
  -[SBAppContainerViewController _configureViewController:]
  -[SBAppContainerViewController setStatusBarDelegate:]
  -[SBAppContainerViewController newSnapshotView]
  -[SBAppContainerViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBAppContainerViewController setCustomContentView:]
  -[SBAppContainerViewController _clearState]
  -[SBAppContainerViewController sceneHandle:didUpdateContentState:]
  -[SBAppContainerViewController statusBarDelegate]
  -[SBAppContainerViewController newSnapshotViewOnQueue:withCompletion:]
  -[SBAppContainerViewController newSnapshot]
  -[SBAppContainerViewController invalidate]
  -[SBAppContainerViewController sceneHandle:didCreateScene:]
  -[SBAppContainerViewController _overrideStatusBarOrientationGivenFallbackOrientation:]


_SBAppContainerStatusBarStateProxy : SBDeviceApplicationSceneStatusBarStateProxy
 @property  SBAppContainerViewController *appVCBackReference

  // instance methods
  -[_SBAppContainerStatusBarStateProxy _statusBarStyle]
  -[_SBAppContainerStatusBarStateProxy _fallbackInterfaceOrientation]
  -[_SBAppContainerStatusBarStateProxy overrideStatusBarStyle]
  -[_SBAppContainerStatusBarStateProxy .cxx_destruct]
  -[_SBAppContainerStatusBarStateProxy _statusBarOrientationGivenFallbackOrientation:]
  -[_SBAppContainerStatusBarStateProxy _statusBarStyleForPartWithIdentifier:suppressingInherited:]
  -[_SBAppContainerStatusBarStateProxy setAppVCBackReference:]
  -[_SBAppContainerStatusBarStateProxy appVCBackReference]
  -[_SBAppContainerStatusBarStateProxy _statusBarAppearsOutsideOfAJailedApp]
  -[_SBAppContainerStatusBarStateProxy _statusBarAlpha]


SBTransientOverlayPresentationRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, NSMutableCopying>
 @property  BOOL animated
 @property  @? completionHandler
 @property  BOOL shouldDismissSiri
 @property  SBTransientOverlayViewController *viewController

  // instance methods
  -[SBTransientOverlayPresentationRequest copyWithZone:]
  -[SBTransientOverlayPresentationRequest viewController]
  -[SBTransientOverlayPresentationRequest isAnimated]
  -[SBTransientOverlayPresentationRequest .cxx_destruct]
  -[SBTransientOverlayPresentationRequest _copyWithClass:]
  -[SBTransientOverlayPresentationRequest initWithViewController:]
  -[SBTransientOverlayPresentationRequest completionHandler]
  -[SBTransientOverlayPresentationRequest mutableCopyWithZone:]
  -[SBTransientOverlayPresentationRequest shouldDismissSiri]


SBMutableTransientOverlayPresentationRequest : SBTransientOverlayPresentationRequest
 @property  BOOL animated
 @property  @? completionHandler
 @property  BOOL shouldDismissSiri
 @property  SBTransientOverlayViewController *viewController

  // instance methods
  -[SBMutableTransientOverlayPresentationRequest copyWithZone:]
  -[SBMutableTransientOverlayPresentationRequest setAnimated:]
  -[SBMutableTransientOverlayPresentationRequest setViewController:]
  -[SBMutableTransientOverlayPresentationRequest mutableCopyWithZone:]
  -[SBMutableTransientOverlayPresentationRequest setCompletionHandler:]
  -[SBMutableTransientOverlayPresentationRequest setShouldDismissSiri:]


SBFluidSwitcherContentView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  BOOL passesTouchesThrough

  // instance methods
  -[SBFluidSwitcherContentView passesTouchesThrough]
  -[SBFluidSwitcherContentView hitTest:withEvent:]
  -[SBFluidSwitcherContentView setPassesTouchesThrough:]


SBIconOverlayVisibilitySwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  BOOL visible

  // instance methods
  -[SBIconOverlayVisibilitySwitcherEventResponse appLayout]
  -[SBIconOverlayVisibilitySwitcherEventResponse isVisible]
  -[SBIconOverlayVisibilitySwitcherEventResponse .cxx_destruct]
  -[SBIconOverlayVisibilitySwitcherEventResponse type]
  -[SBIconOverlayVisibilitySwitcherEventResponse initWithAppLayout:visible:]
  -[SBIconOverlayVisibilitySwitcherEventResponse descriptionBuilderWithMultilinePrefix:]


SBMainWorkspaceApplicationSceneLayoutElementViewController : SBAppContainerViewController <SBDeviceApplicationSceneHandleObserver, SBInlineAppExposeContainerViewControllerDelegate, SBMedusaDecoratedDeviceApplicationSceneViewControlling_Internal, SBMainDisplaySceneLayoutElementViewControlling, SBMedusaDecoratedDeviceApplicationSceneViewControlling>
 @property  BSCornerRadiusConfiguration *cornerRadiusConfiguration
 @property  double shadowOpacity
 @property  double shadowOffset
 @property  SBSceneViewStatusBarAssertion *inlineAppExposeContainerStatusBarAssertion
 @property  SBInlineAppExposeContainerViewController *inlineAppExposeContainerOverlayViewController
 @property  BOOL clipsToBounds
 @property  double darkenViewAlpha
 @property  UIDropInteraction *dropInteraction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL blurred
 @property  BOOL nubViewHidden
 @property  BOOL nubViewHighlighted
 @property  UIView<SBApplicationSceneBackgroundView> *backgroundView
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  SBHomeGrabberView *homeGrabberView
 @property  long long homeGrabberDisplayMode
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController statusBarAssertionWithStatusBarHidden:atLevel:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setShadowOffset:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setDropInteraction:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController homeGrabberView]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController containerViewForBlurContentView]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController homeGrabberDisplayMode]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController dropInteraction]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController backgroundView]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController shadowOffset]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setShadowOpacity:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController shadowOpacity]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setBackgroundView:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _beginRequiringSceneViewMatchMoveAnimationForReason:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController inlineContainerViewController:setStatusBarHidden:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController initialCornerRadiusConfiguration]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _shouldDisplayLayoutElementBecomeActive]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _applicationSceneViewControllerForSceneHandle:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setMaskDisplayCorners:forReason:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController isNubViewHighlighted]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController configureWithWorkspaceEntity:forLayoutElement:layoutState:referenceFrame:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController .cxx_destruct]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController initWithDisplayIdentity:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setClipsToBounds:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController mainWorkspaceApplicationSceneLayoutElementViewController]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _deviceApplicationSceneViewController:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setInlineAppExposeContainerStatusBarAssertion:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController darkenViewAlpha]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController inlineAppExposeContainerOverlayViewController]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController prepareForReuse]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController supportedContentInterfaceOrientations]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setHomeGrabberDisplayMode:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController animationControllerForTransitionRequest:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setNubViewHighlighted:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _applicationSceneViewController]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _configureViewController:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController isNubViewHidden]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController SB_conformsToMedusaDecoratedDeviceApplicationSceneViewControlling]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _deviceApplicationSceneViewController]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController blurApplicationContent:withAnimationFactory:completion:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController inlineAppExposeContainerStatusBarAssertion]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setInlineAppExposeContainerViewController:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController SB_conformsToMainDisplaySceneLayoutElementViewControlling]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController isBlurred]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController clipsToBounds]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _relinquishInlineAppExposeContainerViewController]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _medusaDecoratedVC:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController SB_conformsToSceneLayoutMedusaStatusBarAssertionProviding]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _endRequiringSceneViewMatchMoveAnimationForReason:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController statusBarAssertionWithStatusBarHidden:nubViewHidden:atLevel:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController sceneHandle:didCreateScene:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setNubViewHidden:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController cornerRadiusConfiguration]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _medusaDecoratedVC]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController SB_conformsToSceneLayoutStatusBarAssertionProviding]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController sceneHandle:didChangeEffectiveForegroundness:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setCornerRadiusConfiguration:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController _overrideStatusBarOrientationGivenFallbackOrientation:]
  -[SBMainWorkspaceApplicationSceneLayoutElementViewController setDarkenViewAlpha:]


SBLongPressDisambiguationAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  @? completion

  // instance methods
  -[SBLongPressDisambiguationAlertItem init]
  -[SBLongPressDisambiguationAlertItem completion]
  -[SBLongPressDisambiguationAlertItem dismissOnLock]
  -[SBLongPressDisambiguationAlertItem .cxx_destruct]
  -[SBLongPressDisambiguationAlertItem initWithCompletion:]
  -[SBLongPressDisambiguationAlertItem configure:requirePasscodeForActions:]
  -[SBLongPressDisambiguationAlertItem deactivateForButton]
  -[SBLongPressDisambiguationAlertItem ignoreIfAlreadyDisplaying]


SBSoftwareUpdatePasscodePolicyManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSoftLockoutControllerDelegate>
 @property  long long softwareUpdatePasscodePolicy
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSoftwareUpdatePasscodePolicyManager init]
  -[SBSoftwareUpdatePasscodePolicyManager consumePendingUnlock]
  -[SBSoftwareUpdatePasscodePolicyManager dealloc]
  -[SBSoftwareUpdatePasscodePolicyManager .cxx_destruct]
  -[SBSoftwareUpdatePasscodePolicyManager _effectiveSoftwareUpdatePasscodePolicy]
  -[SBSoftwareUpdatePasscodePolicyManager initWithLockScreenManager:mobileKeyBag:]
  -[SBSoftwareUpdatePasscodePolicyManager softwareUpdatePasscodePolicy]
  -[SBSoftwareUpdatePasscodePolicyManager noteAuthenticationSucceededWithPasscode:]
  -[SBSoftwareUpdatePasscodePolicyManager setSoftwareUpdatePasscodePolicy:]
  -[SBSoftwareUpdatePasscodePolicyManager _authRequestCompleted:]
  -[SBSoftwareUpdatePasscodePolicyManager requiresLockout]


SBRebootContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  NSString *reason
 @property  BOOL dark

  // instance methods
  -[SBRebootContext copyWithZone:]
  -[SBRebootContext initWithReason:]
  -[SBRebootContext .cxx_destruct]
  -[SBRebootContext isDark]
  -[SBRebootContext setDark:]
  -[SBRebootContext isEqual:]
  -[SBRebootContext reason]


SBSwipeMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBSwipeMetric init]


SBFloatingLowEndHardwareModifier : SBSwitcherModifier
  // instance methods
  -[SBFloatingLowEndHardwareModifier initWithOptions:]
  -[SBFloatingLowEndHardwareModifier handleMainTransitionEvent:]
  -[SBFloatingLowEndHardwareModifier switcherDimmingAlpha]
  -[SBFloatingLowEndHardwareModifier switcherDimmingViewBlocksTouches]
  -[SBFloatingLowEndHardwareModifier wantsSwitcherDimmingView]
  -[SBFloatingLowEndHardwareModifier handleTapOutsideToDismissEvent:]
  -[SBFloatingLowEndHardwareModifier _shouldDimAndBlockTouchesToAppsUnderFloating]


SBReverseCountedSemaphore : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBReverseCountedSemaphore decrement]
  -[SBReverseCountedSemaphore wait]
  -[SBReverseCountedSemaphore init]
  -[SBReverseCountedSemaphore .cxx_destruct]
  -[SBReverseCountedSemaphore increment]


SBDeviceApplicationSceneStatusBarStateProxy : SBDeviceApplicationSceneStatusBarStateProvider_Base <SBDeviceApplicationSceneStatusBarStateObserver, SBDeviceApplicationSceneStatusBarStateProviderBaseSubclassesMustOverride, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarAvoidanceFrameTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy statusBarSceneIdentifier]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarStyle]
  -[SBDeviceApplicationSceneStatusBarStateProxy initWithDeviceApplicationSceneHandle:]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarAlphaTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarStyleTo:forPartWithIdentifier:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _fallbackInterfaceOrientation]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarOrientationTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarHiddenTo:withAnimation:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarHiddenGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProxy overlayStatusBarData]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneToHandleStatusBarTapIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeSceneInterfaceOrientationTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy statusBarAvoidanceFrame]
  -[SBDeviceApplicationSceneStatusBarStateProxy .cxx_destruct]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWantsDeviceOrientationEventsEnabled]
  -[SBDeviceApplicationSceneStatusBarStateProxy didInvalidateStatusBarDescriptionForSceneWithIdentifier:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarOrientationGivenFallbackOrientation:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _suppressInheritedPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarPartStyles]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarStyleTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy sceneWithIdentifier:didChangeStatusBarStyleOverridesToSuppressTo:]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarStyleForPartWithIdentifier:suppressingInherited:]
  -[SBDeviceApplicationSceneStatusBarStateProxy statusBarStyleOverridesToSuppress]
  -[SBDeviceApplicationSceneStatusBarStateProxy classicApplicationSceneHandleIfExists]
  -[SBDeviceApplicationSceneStatusBarStateProxy _anyObserverWants:]
  -[SBDeviceApplicationSceneStatusBarStateProxy breadcrumbProvider]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarAppearsOutsideOfAJailedApp]
  -[SBDeviceApplicationSceneStatusBarStateProxy invalidate]
  -[SBDeviceApplicationSceneStatusBarStateProxy _statusBarAlpha]
  -[SBDeviceApplicationSceneStatusBarStateProxy invalidateStatusBarSettings]


SBDeveloperBuildExpirationTrigger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBMainDisplayWorkspaceAppInteractionEventSourceObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeveloperBuildExpirationTrigger dealloc]
  -[SBDeveloperBuildExpirationTrigger .cxx_destruct]
  -[SBDeveloperBuildExpirationTrigger initWithAlertItemsController:eventSource:]
  -[SBDeveloperBuildExpirationTrigger eventSource:didFinishTransitionToMode:withLayoutState:activatingElement:triggeredBy:]
  -[SBDeveloperBuildExpirationTrigger _coverSheetDidDismiss:]
  -[SBDeveloperBuildExpirationTrigger _initWithAlertItemsController:eventSource:expirationDate:]
  -[SBDeveloperBuildExpirationTrigger showDeveloperBuildExpirationAlertIfNecessaryFromLockscreen:toLauncher:]


SBRingerHUDViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <UIViewControllerTransitioningDelegate, SBHUDViewControlling>
 @property  SBRingerPillView *pillView
 @property  UIViewFloatAnimatableProperty *positionSpring
 @property  UIViewFloatAnimatableProperty *ringerValueSpring
 @property  NSTimer *dismissalTimer
 @property  BOOL lastEventIsAVolumeChange
 @property  double overshoot
 @property  BOOL ringerSilent
 @property  <SBRingerHUDViewControllerDelegate> *delegate
 @property  float volume
 @property  BOOL presented
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRingerHUDViewController isPresented]
  -[SBRingerHUDViewController viewDidLoad]
  -[SBRingerHUDViewController setPillView:]
  -[SBRingerHUDViewController volume]
  -[SBRingerHUDViewController setVolume:]
  -[SBRingerHUDViewController .cxx_destruct]
  -[SBRingerHUDViewController _dismiss]
  -[SBRingerHUDViewController viewWillAppear:]
  -[SBRingerHUDViewController _canShowWhileLocked]
  -[SBRingerHUDViewController pillView]
  -[SBRingerHUDViewController setDelegate:]
  -[SBRingerHUDViewController viewDidLayoutSubviews]
  -[SBRingerHUDViewController delegate]
  -[SBRingerHUDViewController loadView]
  -[SBRingerHUDViewController nudgeUp:]
  -[SBRingerHUDViewController definesAnimatedDismissal]
  -[SBRingerHUDViewController dismissAnimatedWithCompletion:]
  -[SBRingerHUDViewController noteVolumeUpWasHit:]
  -[SBRingerHUDViewController noteVolumeDownWasHit:]
  -[SBRingerHUDViewController buttonReleased]
  -[SBRingerHUDViewController noteVolumeDidChange:]
  -[SBRingerHUDViewController refreshAudioUI]
  -[SBRingerHUDViewController _createSprings]
  -[SBRingerHUDViewController ringerSilent]
  -[SBRingerHUDViewController setRingerSilent:]
  -[SBRingerHUDViewController setVolume:animated:forKeyPress:]
  -[SBRingerHUDViewController presentForMuteSwitch:]
  -[SBRingerHUDViewController _layoutPillView]
  -[SBRingerHUDViewController swipeGesture:]
  -[SBRingerHUDViewController _updateVolumeSliderAnimated:]
  -[SBRingerHUDViewController _updateStateAnimated:invert:]
  -[SBRingerHUDViewController _extendDismissalTimer]
  -[SBRingerHUDViewController _setPositionSpringValue:completion:]
  -[SBRingerHUDViewController setDismissalTimer:]
  -[SBRingerHUDViewController positionSpring]
  -[SBRingerHUDViewController setPositionSpring:]
  -[SBRingerHUDViewController ringerValueSpring]
  -[SBRingerHUDViewController setRingerValueSpring:]
  -[SBRingerHUDViewController dismissalTimer]
  -[SBRingerHUDViewController lastEventIsAVolumeChange]
  -[SBRingerHUDViewController setLastEventIsAVolumeChange:]
  -[SBRingerHUDViewController overshoot]
  -[SBRingerHUDViewController setOvershoot:]


SBBannerAuthority : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BNConsideringDelegate, BNConsidering>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <BNConsideringDelegate> *delegate

  // instance methods
  -[SBBannerAuthority .cxx_destruct]
  -[SBBannerAuthority bannerAuthority:mayChangeDecisionForResponsiblePresentable:]
  -[SBBannerAuthority shouldOverlapPresentable:withPresentable:]
  -[SBBannerAuthority registerAuthority:forRequesterIdentifier:]
  -[SBBannerAuthority setDelegate:]
  -[SBBannerAuthority delegate]
  -[SBBannerAuthority shouldPresentPresentable:withPresentedPresentables:responsiblePresentable:]
  -[SBBannerAuthority _mediatedDecisionFromDecisions:defaultDecision:]


SBExternalDemoDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL shouldLockIconsInStoreDemoMode

  // instance methods
  -[SBExternalDemoDefaults init]
  -[SBExternalDemoDefaults _bindAndRegisterDefaults]


SBUIFullscreenAnimationView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  <SBUIFullscreenAnimationViewDelegate> *delegate
 @property  BOOL animating

  // instance methods
  -[SBUIFullscreenAnimationView beginTransition]
  -[SBUIFullscreenAnimationView animating]
  -[SBUIFullscreenAnimationView .cxx_destruct]
  -[SBUIFullscreenAnimationView setToView:]
  -[SBUIFullscreenAnimationView endTransition]
  -[SBUIFullscreenAnimationView setFromView:]
  -[SBUIFullscreenAnimationView _animationEnded]
  -[SBUIFullscreenAnimationView setDelegate:]
  -[SBUIFullscreenAnimationView delegate]
  -[SBUIFullscreenAnimationView _animationBegan]
  -[SBUIFullscreenAnimationView _notifyDelegateAnimationBeganWithDuration:delay:]
  -[SBUIFullscreenAnimationView _notifyDelegateThatAnimationIsDone]


SBRootSettings : _UISettings /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBAttentionAwarenessSettings *attentionAwarenessSettings
 @property  SBProximitySettings *proximitySettings

  // instance methods
  -[SBRootSettings .cxx_destruct]
  -[SBRootSettings attentionAwarenessSettings]
  -[SBRootSettings proximitySettings]
  -[SBRootSettings setAttentionAwarenessSettings:]
  -[SBRootSettings setProximitySettings:]


SBScrollToAppLayoutSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout

  // instance methods
  -[SBScrollToAppLayoutSwitcherEventResponse appLayout]
  -[SBScrollToAppLayoutSwitcherEventResponse .cxx_destruct]
  -[SBScrollToAppLayoutSwitcherEventResponse type]
  -[SBScrollToAppLayoutSwitcherEventResponse initWithAppLayout:]
  -[SBScrollToAppLayoutSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]


SBVoiceControlController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBVoiceControlTransientOverlayViewControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBVoiceControlController sharedInstance]

  // instance methods
  -[SBVoiceControlController voiceControlTransientOverlayViewControllerDidDisappear:]
  -[SBVoiceControlController isVisible]
  -[SBVoiceControlController init]
  -[SBVoiceControlController _newVoiceControlTransientOverlayViewControllerWithSource:]
  -[SBVoiceControlController _performDelayedHeadsetActionForVoiceControl]
  -[SBVoiceControlController _prepareDelayedHeadsetAction]
  -[SBVoiceControlController _performDelayedHeadsetActionForAssistant]
  -[SBVoiceControlController .cxx_destruct]
  -[SBVoiceControlController dismissTransientOverlay]
  -[SBVoiceControlController handleHomeButtonHeld]
  -[SBVoiceControlController handleHeadsetButtonUp]
  -[SBVoiceControlController bluetoothDeviceEndedVoiceControl:]
  -[SBVoiceControlController handleHeadsetButtonUpNotInCall]
  -[SBVoiceControlController bluetoothDeviceInitiatedVoiceControl:]
  -[SBVoiceControlController voiceControlTransientOverlayViewControllerRequestsDismissal:]
  -[SBVoiceControlController _updateNextRecognitionAudioInputPaths:]
  -[SBVoiceControlController configureVoiceControl]
  -[SBVoiceControlController _shouldEnterVoiceControl]
  -[SBVoiceControlController _spokenLanguageDidChange:]
  -[SBVoiceControlController headsetAvailabilityChanged]
  -[SBVoiceControlController _assistantActivationSettingsDidChange:]
  -[SBVoiceControlController siriBluetoothDeviceSource:]
  -[SBVoiceControlController handleHeadsetButtonDownWithClickCount:]
  -[SBVoiceControlController _cancelDelayedHeadsetAction]


SBDismissOnlyAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBDismissOnlyAlertItem bodyText]
  -[SBDismissOnlyAlertItem .cxx_destruct]
  -[SBDismissOnlyAlertItem setTitle:]
  -[SBDismissOnlyAlertItem setBodyText:]
  -[SBDismissOnlyAlertItem title]
  -[SBDismissOnlyAlertItem performUnlockAction]
  -[SBDismissOnlyAlertItem configure:requirePasscodeForActions:]
  -[SBDismissOnlyAlertItem initWithTitle:body:]
  -[SBDismissOnlyAlertItem suppressForKeynote]
  -[SBDismissOnlyAlertItem dismissButtonText]


SBNotchedStatusBarProximityBacklightPolicyEnablementCondition : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBAppStatusBarAssertionManagerObserver, SBMainDisplaySceneManagerObserver, SBDeviceApplicationSceneHandleObserver, UIStatusBarServerClient, SBUIActiveOrientationObserver, BSInvalidatable>
 @property  <SBNotchedStatusBarProximityBacklightPolicyEnablementConditionDelegate> *delegate
 @property  BOOL enabled
 @property  double enabledStatusBarHeight
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition _evaluateEnablement]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarServer:didReceiveGlowAnimationState:forStyle:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition init]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition dealloc]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition .cxx_destruct]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarAssertionManager:statusBarSettingsDidChange:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition isEnabled]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarServer:didReceiveDoubleHeightStatusString:forStyle:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition setDelegate:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition invalidate]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarServer:didReceiveStatusBarData:withActions:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition statusBarServer:didReceiveStyleOverrides:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition delegate]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition activeInterfaceOrientationWillChangeToOrientation:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition enabledStatusBarHeight]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition initWithMainDisplaySceneManager:statusBarAssertionManager:statusBarServer:orientationProvider:]
  -[SBNotchedStatusBarProximityBacklightPolicyEnablementCondition _setEnabled:statusBarHeight:]


SBApplicationLaunchImageParameters : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *defaultPNGName
 @property  NSString *extension
 @property  NSString *minOSVersionString
 @property  {CGSize=dd} size
 @property  long long interfaceOrientation

  // class methods
  +[SBApplicationLaunchImageParameters launchImageParametersFromLaunchImagesInfo:withBundleIdentifier:isMonarchLinked:]
  +[SBApplicationLaunchImageParameters validInfoPlistOrientationKeys]

  // instance methods
  -[SBApplicationLaunchImageParameters extension]
  -[SBApplicationLaunchImageParameters init]
  -[SBApplicationLaunchImageParameters size]
  -[SBApplicationLaunchImageParameters .cxx_destruct]
  -[SBApplicationLaunchImageParameters interfaceOrientation]
  -[SBApplicationLaunchImageParameters defaultPNGName]
  -[SBApplicationLaunchImageParameters isEqual:]
  -[SBApplicationLaunchImageParameters minOSVersionString]


SBGridSwipeUpToSwitcherSwitcherModifier : SBTransitionSwitcherModifier

SBWallpaperPreviewSnapshotCache : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIconIndexNodeObserver, SBWallpaperObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWallpaperPreviewSnapshotCache sharedInstance]
  +[SBWallpaperPreviewSnapshotCache cacheKeyForVariant:options:scalingWidth:]
  +[SBWallpaperPreviewSnapshotCache cacheKeyForVariant:options:]

  // instance methods
  -[SBWallpaperPreviewSnapshotCache wallpaperDidChangeForVariant:]
  -[SBWallpaperPreviewSnapshotCache init]
  -[SBWallpaperPreviewSnapshotCache dealloc]
  -[SBWallpaperPreviewSnapshotCache .cxx_destruct]
  -[SBWallpaperPreviewSnapshotCache node:didRemoveContainedNodeIdentifiers:]
  -[SBWallpaperPreviewSnapshotCache nodeDidMoveContainedNodes:]
  -[SBWallpaperPreviewSnapshotCache node:didAddContainedNodeIdentifiers:]
  -[SBWallpaperPreviewSnapshotCache mappedWallpaperPreviewForKey:]
  -[SBWallpaperPreviewSnapshotCache snapshotProviderForVariant:options:wallpaperImage:]
  -[SBWallpaperPreviewSnapshotCache mappedWallpaperPreviewForScaledSnapshot:variant:cacheKey:]
  -[SBWallpaperPreviewSnapshotCache initWithImageCache:iconController:wallpaperController:]
  -[SBWallpaperPreviewSnapshotCache _switchToIconModel:]
  -[SBWallpaperPreviewSnapshotCache _backlightFadeFinished]
  -[SBWallpaperPreviewSnapshotCache _iconControllerDidChangeIconModel:]
  -[SBWallpaperPreviewSnapshotCache _modelWillLayout]
  -[SBWallpaperPreviewSnapshotCache _modelDidLayout]
  -[SBWallpaperPreviewSnapshotCache invalidateSnapshotsForLocations:]
  -[SBWallpaperPreviewSnapshotCache regenerateSnapshotsForLocations:]
  -[SBWallpaperPreviewSnapshotCache _orientationForOptions:]
  -[SBWallpaperPreviewSnapshotCache _homeScreenSnapshotProviderWithOptions:wallpaperImage:]
  -[SBWallpaperPreviewSnapshotCache _lockScreenSnapshotProviderWithOptions:wallpaperImage:]


SBModalUIFluidDismissGestureManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHomeGesturePanGestureRecognizerInterfaceDelegate, BSTransactionObserver, PTSettingsKeyObserver, SBHomeGestureInteractionDelegate>
 @property  SBTransientOverlayPresentationManager *transientOverlayPresentationManager
 @property  SBAssistantController *assistantController
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  SBHomeGestureInteraction *homeGestureInteraction
 @property  SBModalUIFluidDismissGestureWorkspaceTransaction *currentTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBModalUIFluidDismissGestureManager homeGestureInteraction]
  -[SBModalUIFluidDismissGestureManager assistantController]
  -[SBModalUIFluidDismissGestureManager touchInterfaceOrientationForGestureRecognizer:]
  -[SBModalUIFluidDismissGestureManager homeGestureInteraction:systemGestureTypeForType:]
  -[SBModalUIFluidDismissGestureManager handleGestureEnded:]
  -[SBModalUIFluidDismissGestureManager customScreenEdgePanGestureRecognizerForHomeGestureInteraction:]
  -[SBModalUIFluidDismissGestureManager setCurrentTransaction:]
  -[SBModalUIFluidDismissGestureManager transactionDidComplete:]
  -[SBModalUIFluidDismissGestureManager settings:changedValueForKey:]
  -[SBModalUIFluidDismissGestureManager _addOrRemoveGestureForCurrentSettings]
  -[SBModalUIFluidDismissGestureManager homeGestureInteraction:shouldReceiveTouch:]
  -[SBModalUIFluidDismissGestureManager transientOverlayPresentationManager]
  -[SBModalUIFluidDismissGestureManager viewForSystemGestureRecognizer:]
  -[SBModalUIFluidDismissGestureManager homeGestureInteractionChanged:]
  -[SBModalUIFluidDismissGestureManager homeGestureInteractionEnded:]
  -[SBModalUIFluidDismissGestureManager setHomeGestureInteraction:]
  -[SBModalUIFluidDismissGestureManager homeGestureInteractionBegan:]
  -[SBModalUIFluidDismissGestureManager homeGestureInteractionCancelled:]
  -[SBModalUIFluidDismissGestureManager _dismissalTypeForCurrentContext]
  -[SBModalUIFluidDismissGestureManager currentTransaction]
  -[SBModalUIFluidDismissGestureManager .cxx_destruct]
  -[SBModalUIFluidDismissGestureManager handleGestureBegan:initiatedFromBottomEdge:]
  -[SBModalUIFluidDismissGestureManager homeGestureSettings]
  -[SBModalUIFluidDismissGestureManager handleGestureBegan:initiatedFromBottomEdge:dismissalThreshold:initiatedFromIndirectEdge:]
  -[SBModalUIFluidDismissGestureManager setHomeGestureSettings:]
  -[SBModalUIFluidDismissGestureManager handleGestureChanged:]
  -[SBModalUIFluidDismissGestureManager initWithTransientOverlayPresentationManager:assistantController:]


SBLockStateAggregator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBLockStateAggregator sharedInstance]

  // instance methods
  -[SBLockStateAggregator _updateLockState]
  -[SBLockStateAggregator _descriptionForLockState:]
  -[SBLockStateAggregator init]
  -[SBLockStateAggregator dealloc]
  -[SBLockStateAggregator lockState]
  -[SBLockStateAggregator hasAnyLockState]


SBZionUnlockTrigger : SBMesaUnlockTrigger
  // instance methods
  -[SBZionUnlockTrigger screenOff]
  -[SBZionUnlockTrigger fingerOn]
  -[SBZionUnlockTrigger .cxx_destruct]
  -[SBZionUnlockTrigger succinctDescriptionBuilder]
  -[SBZionUnlockTrigger lockButtonDown]
  -[SBZionUnlockTrigger bioUnlock]
  -[SBZionUnlockTrigger fingerOff]
  -[SBZionUnlockTrigger initWithUnlockBehaviorConfigurationDelegate:]
  -[SBZionUnlockTrigger _isRestToOpenAvailable]
  -[SBZionUnlockTrigger _cancelMinTouchIDTimer]
  -[SBZionUnlockTrigger _startRestToOpenTimerWithDuration:]
  -[SBZionUnlockTrigger _startRestToOpenTimer]
  -[SBZionUnlockTrigger _cancelRestToOpenTimer]
  -[SBZionUnlockTrigger _evaluateRestToOpenTimer]


SBAuthenticationFeedback : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  unsigned long result
 @property  BOOL showPasscode
 @property  BOOL hintFailureText
 @property  BOOL vibrate
 @property  BOOL jiggleLock

  // instance methods
  -[SBAuthenticationFeedback showPasscode]
  -[SBAuthenticationFeedback result]
  -[SBAuthenticationFeedback vibrate]
  -[SBAuthenticationFeedback isEqual:]
  -[SBAuthenticationFeedback initForFailureWithFailureSettings:]
  -[SBAuthenticationFeedback initForSuccess]
  -[SBAuthenticationFeedback initForFailureShowingPasscode:]
  -[SBAuthenticationFeedback jiggleLock]
  -[SBAuthenticationFeedback hintFailureText]


SBGridSwitcherSwipeUpGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction
  // instance methods
  -[SBGridSwitcherSwipeUpGestureWorkspaceTransaction _gestureType]


SBLockScreenNowPlayingController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <PTSettingsKeyObserver>
 @property  <SBLockScreenNowPlayingControllerDelegate> *delegate
 @property  BOOL enabled
 @property  long long currentState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenNowPlayingController settings:changedValueForKey:]
  -[SBLockScreenNowPlayingController currentState]
  -[SBLockScreenNowPlayingController _addObservers]
  -[SBLockScreenNowPlayingController _removeObservers]
  -[SBLockScreenNowPlayingController dealloc]
  -[SBLockScreenNowPlayingController _timeoutInterval]
  -[SBLockScreenNowPlayingController .cxx_destruct]
  -[SBLockScreenNowPlayingController isEnabled]
  -[SBLockScreenNowPlayingController setEnabled:]
  -[SBLockScreenNowPlayingController setDelegate:]
  -[SBLockScreenNowPlayingController delegate]
  -[SBLockScreenNowPlayingController _updateNowPlayingPlugin]
  -[SBLockScreenNowPlayingController _invalidateDisableTimer]
  -[SBLockScreenNowPlayingController _updateToState:]
  -[SBLockScreenNowPlayingController _isMediaRecentlyActive]
  -[SBLockScreenNowPlayingController _startDisableTimer]
  -[SBLockScreenNowPlayingController _disableTimerFired]
  -[SBLockScreenNowPlayingController initWithMediaController:]
  -[SBLockScreenNowPlayingController isNowPlayingActive]


SBInteractiveScreenshotGestureManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSTransactionObserver, SBInteractiveScreenshotCommitWorkspaceTransactionDelegate, SBInteractiveScreenshotGestureRootViewControllerDelegate, SBMainDisplayWorkspaceAppInteractionEventSourceObserving, SBSystemGestureRecognizerDelegate>
 @property  <SBInteractiveScreenshotGestureManagerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInteractiveScreenshotGestureManager transactionDidComplete:]
  -[SBInteractiveScreenshotGestureManager viewForSystemGestureRecognizer:]
  -[SBInteractiveScreenshotGestureManager dealloc]
  -[SBInteractiveScreenshotGestureManager .cxx_destruct]
  -[SBInteractiveScreenshotGestureManager eventSource:userTouchedApplication:]
  -[SBInteractiveScreenshotGestureManager setDelegate:]
  -[SBInteractiveScreenshotGestureManager _invalidateSessionID:]
  -[SBInteractiveScreenshotGestureManager gestureRecognizer:shouldReceiveTouch:]
  -[SBInteractiveScreenshotGestureManager delegate]
  -[SBInteractiveScreenshotGestureManager initWithScreen:sourceScene:workspace:systemGestureManager:appInteractionEventSource:]
  -[SBInteractiveScreenshotGestureManager handleRemoteTransientOverlayPresentationRequest:forSession:]
  -[SBInteractiveScreenshotGestureManager acquireDisableGestureAssertionWithReason:]
  -[SBInteractiveScreenshotGestureManager interactiveScreenshotGestureRootViewController:gestureDidCompleteWithIntent:]
  -[SBInteractiveScreenshotGestureManager interactiveScreenshotGestureRootViewControllerRequestsGestureRecognizerCancellation:]
  -[SBInteractiveScreenshotGestureManager interactiveScreenshotCommitWorkspaceTransactionRequestsGestureWindowInvalidation:]
  -[SBInteractiveScreenshotGestureManager interactiveScreenshotCommitWorkspaceTransactionRequestsPlaceholderChromeRemoval:]
  -[SBInteractiveScreenshotGestureManager _handleInteractiveScreenshotGesture:]
  -[SBInteractiveScreenshotGestureManager _performPendingCommitWorkspaceTransactionBlocksWithTransaction:]
  -[SBInteractiveScreenshotGestureManager _screenshotPresentationOptions]
  -[SBInteractiveScreenshotGestureManager _performCommitWorkspaceTransactionBlock:]


_SBInteractiveScreenshotGestureSession : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSUUID *sessionID
 @property  SBInteractiveScreenshotGestureHostRootViewController *hostRootViewController
 @property  SBInteractiveScreenshotGestureRootViewController *rootViewController
 @property  SBInteractiveScreenshotGestureRootWindow *rootWindow
 @property  SBInteractiveScreenshotGestureHostWindow *hostWindow

  // instance methods
  -[_SBInteractiveScreenshotGestureSession sessionID]
  -[_SBInteractiveScreenshotGestureSession rootViewController]
  -[_SBInteractiveScreenshotGestureSession .cxx_destruct]
  -[_SBInteractiveScreenshotGestureSession rootWindow]
  -[_SBInteractiveScreenshotGestureSession initWithSessionID:]
  -[_SBInteractiveScreenshotGestureSession setRootWindow:]
  -[_SBInteractiveScreenshotGestureSession setHostWindow:]
  -[_SBInteractiveScreenshotGestureSession hostWindow]
  -[_SBInteractiveScreenshotGestureSession hostRootViewController]


SBLockScreenBatteryChargingViewController : CSCoverSheetViewControllerBase /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome <BCBatteryDeviceObserving>
 @property  <SBLockScreenBatteryChargingViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenBatteryChargingViewController chargingView]
  -[SBLockScreenBatteryChargingViewController presentationStyle]
  -[SBLockScreenBatteryChargingViewController dealloc]
  -[SBLockScreenBatteryChargingViewController .cxx_destruct]
  -[SBLockScreenBatteryChargingViewController setDelegate:]
  -[SBLockScreenBatteryChargingViewController connectedDevicesDidChange:]
  -[SBLockScreenBatteryChargingViewController delegate]
  -[SBLockScreenBatteryChargingViewController loadView]
  -[SBLockScreenBatteryChargingViewController batteryVisible]
  -[SBLockScreenBatteryChargingViewController _clearVisibilityTimer]
  -[SBLockScreenBatteryChargingViewController _visibilityTimerFired:]
  -[SBLockScreenBatteryChargingViewController initForDisplayOfBattery:]
  -[SBLockScreenBatteryChargingViewController presentWithAnimation:]
  -[SBLockScreenBatteryChargingViewController prepareForDismissalWithAnimation:]
  -[SBLockScreenBatteryChargingViewController showChargeLevelWithBatteryVisible:]


SBSystemServiceServer : FBSServiceFacility /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  <SBSystemServiceServerAppSwitcherDelegate> *appSwitcherDelegate
 @property  <SBSystemServiceServerBiometricsDelegate> *biometricsDelegate
 @property  <SBSystemServiceServerHardwareButtonDelegate> *hardwareButtonDelegate
 @property  <SBSystemServiceServerSoftwareUpdateDelegate> *softwareUpdateDelegate
 @property  <SBSystemServiceServerTestAutomationDelegate> *testAutomationDelegate
 @property  <SBSystemServiceServerStateDumpDelegate> *stateDumpDelegate

  // class methods
  +[SBSystemServiceServer sharedInstance]

  // instance methods
  -[SBSystemServiceServer hardwareButtonDelegate]
  -[SBSystemServiceServer _handleSoftwareUpdateSetPasscodePolicy:fromClient:]
  -[SBSystemServiceServer _handleHardwareButtonSetHapticType:fromClient:]
  -[SBSystemServiceServer setSoftwareUpdateDelegate:]
  -[SBSystemServiceServer setBiometricsDelegate:]
  -[SBSystemServiceServer _handleTestAutomationSetTestRunnerRecoveryApplicationBundleIdentifier:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationBlockApplicationForScreenTime:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetHiddenFeatureState:fromClient:]
  -[SBSystemServiceServer dealloc]
  -[SBSystemServiceServer _handleTestAutomationGetScencesForBundleIdentifier:fromClient:]
  -[SBSystemServiceServer .cxx_destruct]
  -[SBSystemServiceServer _handleTestAutomationRequestHUDHiddenAssertion:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationAddWidgetsToEachPage:fromClient:]
  -[SBSystemServiceServer noteDidReceiveMessage:withType:fromClient:]
  -[SBSystemServiceServer _handleStateDumpServiceClientMessageTypeDisableRemoteStateDump:fromClient:]
  -[SBSystemServiceServer setAppSwitcherDelegate:]
  -[SBSystemServiceServer _handleBiometricsFetchUnlockCredentialSetMessage:fromClient:]
  -[SBSystemServiceServer _handleLoadStashedSwitcherModelFromPath:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetAlertState:fromClient:]
  -[SBSystemServiceServer _init]
  -[SBSystemServiceServer _handleHardwareButtonSetPressEventMask:fromClient:]
  -[SBSystemServiceServer setTestAutomationDelegate:]
  -[SBSystemServiceServer _handleHardwareButtonGetHapticType:fromClient:]
  -[SBSystemServiceServer _handleRequestAppSwitcherAppearanceForHiddenApp:fromClient:]
  -[SBSystemServiceServer _handleHardwareButtonAcquireAssertionMessage:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetMallocStackLoggingState:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationAddSpecificWidgetToPageWithSize:fromClient:]
  -[SBSystemServiceServer appSwitcherDelegate]
  -[SBSystemServiceServer setHardwareButtonDelegate:]
  -[SBSystemServiceServer _handleStashSwitcherModelToPath:fromClient:]
  -[SBSystemServiceServer testAutomationDelegate]
  -[SBSystemServiceServer stateDumpDelegate]
  -[SBSystemServiceServer _handleHardwareButtonGetToggleButtonState:fromClient:]
  -[SBSystemServiceServer noteClientDidDisconnect:]
  -[SBSystemServiceServer _handleTestAutomationSuspendAllDisplays:fromClient:]
  -[SBSystemServiceServer _handleStateDumpServiceClientMessageTypeStateDump:fromClient:]
  -[SBSystemServiceServer setStateDumpDelegate:]
  -[SBSystemServiceServer _handleStateDumpServiceClientMessageTypeEnableRemoteStateDump:fromClient:]
  -[SBSystemServiceServer _handleHardwareButtonSetRequestsHIDEvents:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetOrientationLockState:fromClient:]
  -[SBSystemServiceServer _handleSoftwareUpdateGetPasscodePolicy:fromClient:]
  -[SBSystemServiceServer softwareUpdateDelegate]
  -[SBSystemServiceServer _handleTestAutomationResetToHomeScreen:fromClient:]
  -[SBSystemServiceServer _handleTestAutomationSetIdleTimerState:fromClient:]
  -[SBSystemServiceServer biometricsDelegate]


SBSwipeToKillSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBSwipeToKillSwitcherModifier visibleAppLayouts]
  -[SBSwipeToKillSwitcherModifier scaleForIndex:]
  -[SBSwipeToKillSwitcherModifier topMostLayoutElements]
  -[SBSwipeToKillSwitcherModifier animationAttributesForLayoutElement:]
  -[SBSwipeToKillSwitcherModifier opacityForIndex:]
  -[SBSwipeToKillSwitcherModifier frameForIndex:]
  -[SBSwipeToKillSwitcherModifier .cxx_destruct]
  -[SBSwipeToKillSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBSwipeToKillSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBSwipeToKillSwitcherModifier titleOpacityForIndex:]
  -[SBSwipeToKillSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBSwipeToKillSwitcherModifier darkeningAlphaForIndex:]
  -[SBSwipeToKillSwitcherModifier shadowOffsetForIndex:]
  -[SBSwipeToKillSwitcherModifier lighteningAlphaForIndex:]
  -[SBSwipeToKillSwitcherModifier shadowOpacityForIndex:]
  -[SBSwipeToKillSwitcherModifier initWithAppLayout:]
  -[SBSwipeToKillSwitcherModifier handleSwipeToKillEvent:]
  -[SBSwipeToKillSwitcherModifier _calculateInterpolationDirection]
  -[SBSwipeToKillSwitcherModifier _interpolatingAdjacentIndexForIndex:]
  -[SBSwipeToKillSwitcherModifier _performBlockWhileSimulatingPostRemovalAppLayoutState:]


SBLegacyLockScreenEnvironment : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, SBLockScreenEnvironment>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIViewController *rootViewController
 @property  <SBAutoUnlockRule> *autoUnlockRule
 @property  <SBBiometricUnlockBehavior> *biometricUnlockBehavior
 @property  <SBButtonEventsHandler> *buttonEventsHandler
 @property  <SBApplicationHosting> *applicationHoster
 @property  <SBIdleTimerProviding> *idleTimerProvider
 @property  <SBFScreenWakeAnimationTarget> *screenWakeAnimationTarget
 @property  <SBLockScreenApplicationLaunching> *applicationLauncher
 @property  <SBLockScreenBacklightControlling> *backlightController
 @property  <SBLockScreenBehaviorSuppressing> *behaviorSuppressor
 @property  <SBLockScreenBlockedStateObserving> *blockedStateObserver
 @property  <SBLockScreenButtonObserving> *buttonObserver
 @property  <SBLockScreenCallHandling> *callController
 @property  <SBLockScreenContentStateProviding> *contentStateProvider
 @property  <SBLockScreenCustomActionStoring> *customActionStore
 @property  <SBLockScreenIdleTimerControlling> *idleTimerController
 @property  <SBLockScreenLockingAndUnlocking> *lockController
 @property  <SBLockScreenMediaControlsPresenting> *mediaControlsPresenter
 @property  <SBLockScreenPasscodeViewPresenting> *passcodeViewPresenter
 @property  <SBLockScreenPluginPresenting> *pluginPresenter
 @property  <SBLockScreenProximityBehaviorProviding> *proximityBehaviorProvider
 @property  <SBLockScreenStatusBarTransitioning> *statusBarTransitionController

  // instance methods
  -[SBLegacyLockScreenEnvironment applicationLauncher]
  -[SBLegacyLockScreenEnvironment idleTimerController]
  -[SBLegacyLockScreenEnvironment rootViewController]
  -[SBLegacyLockScreenEnvironment callController]
  -[SBLegacyLockScreenEnvironment autoUnlockRule]
  -[SBLegacyLockScreenEnvironment buttonObserver]
  -[SBLegacyLockScreenEnvironment .cxx_destruct]
  -[SBLegacyLockScreenEnvironment statusBarTransitionController]
  -[SBLegacyLockScreenEnvironment succinctDescriptionBuilder]
  -[SBLegacyLockScreenEnvironment contentStateProvider]
  -[SBLegacyLockScreenEnvironment idleTimerProvider]
  -[SBLegacyLockScreenEnvironment behaviorSuppressor]
  -[SBLegacyLockScreenEnvironment succinctDescription]
  -[SBLegacyLockScreenEnvironment passcodeViewPresenter]
  -[SBLegacyLockScreenEnvironment buttonEventsHandler]
  -[SBLegacyLockScreenEnvironment customActionStore]
  -[SBLegacyLockScreenEnvironment applicationHoster]
  -[SBLegacyLockScreenEnvironment blockedStateObserver]
  -[SBLegacyLockScreenEnvironment lockController]
  -[SBLegacyLockScreenEnvironment biometricUnlockBehavior]
  -[SBLegacyLockScreenEnvironment mediaControlsPresenter]
  -[SBLegacyLockScreenEnvironment screenWakeAnimationTarget]
  -[SBLegacyLockScreenEnvironment descriptionWithMultilinePrefix:]
  -[SBLegacyLockScreenEnvironment proximityBehaviorProvider]
  -[SBLegacyLockScreenEnvironment descriptionBuilderWithMultilinePrefix:]
  -[SBLegacyLockScreenEnvironment backlightController]
  -[SBLegacyLockScreenEnvironment pluginPresenter]
  -[SBLegacyLockScreenEnvironment initWithLockScreenViewController:]


SBExternalInlineAppExposeTransitionSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBExternalInlineAppExposeTransitionSwitcherModifier opacityForIndex:]
  -[SBExternalInlineAppExposeTransitionSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBExternalInlineAppExposeTransitionSwitcherModifier frameForIndex:]
  -[SBExternalInlineAppExposeTransitionSwitcherModifier .cxx_destruct]
  -[SBExternalInlineAppExposeTransitionSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBExternalInlineAppExposeTransitionSwitcherModifier transitionWillBegin]
  -[SBExternalInlineAppExposeTransitionSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]


SBCoplanarSwitcherModifier : SBSwitcherModifier
 @property  double scale
 @property  long long spacingType

  // instance methods
  -[SBCoplanarSwitcherModifier scaleForIndex:]
  -[SBCoplanarSwitcherModifier _offscreenSpacing]
  -[SBCoplanarSwitcherModifier setSpacingType:]
  -[SBCoplanarSwitcherModifier frameForIndex:]
  -[SBCoplanarSwitcherModifier setScale:]
  -[SBCoplanarSwitcherModifier .cxx_destruct]
  -[SBCoplanarSwitcherModifier spacingType]
  -[SBCoplanarSwitcherModifier _indexOfActiveAppLayout]
  -[SBCoplanarSwitcherModifier initWithActiveAppLayout:]
  -[SBCoplanarSwitcherModifier scale]


SBHomeGestureSettingsChangedSwitcherModifierEvent : SBSwitcherModifierEvent
  // instance methods
  -[SBHomeGestureSettingsChangedSwitcherModifierEvent type]


SBCoverSheetPanelBackgroundContainerView : SBFTouchPassThroughView /usr/lib/libutil.dylib
  // instance methods
  -[SBCoverSheetPanelBackgroundContainerView _setPresentationValue:forKey:]


SBCoverSheetParallaxContainerView : SBFTouchPassThroughView /usr/lib/libutil.dylib
  // instance methods
  -[SBCoverSheetParallaxContainerView _setPresentationValue:forKey:]


_SBAppSwitcherSnapshotCacheKey : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  SBAppLayout *appLayout
 @property  SBDisplayItem *displayItem

  // instance methods
  -[_SBAppSwitcherSnapshotCacheKey copyWithZone:]
  -[_SBAppSwitcherSnapshotCacheKey appLayout]
  -[_SBAppSwitcherSnapshotCacheKey displayItem]
  -[_SBAppSwitcherSnapshotCacheKey .cxx_destruct]
  -[_SBAppSwitcherSnapshotCacheKey isEqual:]
  -[_SBAppSwitcherSnapshotCacheKey initWithDisplayItem:inAppLayout:]


SBAppSwitcherSnapshotCacheEntry : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBAppSwitcherSnapshotCacheEntry .cxx_destruct]


_SBAppSwitcherSnapshotImageCacheRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  unsigned long sequenceID
 @property  BOOL loadFullSizeSnapshot
 @property  SBAppLayout *appLayout
 @property  SBDisplayItem *displayItem
 @property  XBApplicationSnapshot *snapshot

  // instance methods
  -[_SBAppSwitcherSnapshotImageCacheRequest setAppLayout:]
  -[_SBAppSwitcherSnapshotImageCacheRequest appLayout]
  -[_SBAppSwitcherSnapshotImageCacheRequest setSnapshot:]
  -[_SBAppSwitcherSnapshotImageCacheRequest displayItem]
  -[_SBAppSwitcherSnapshotImageCacheRequest loadFullSizeSnapshot]
  -[_SBAppSwitcherSnapshotImageCacheRequest .cxx_destruct]
  -[_SBAppSwitcherSnapshotImageCacheRequest initWithSequenceID:]
  -[_SBAppSwitcherSnapshotImageCacheRequest snapshot]
  -[_SBAppSwitcherSnapshotImageCacheRequest sequenceID]
  -[_SBAppSwitcherSnapshotImageCacheRequest setDisplayItem:]
  -[_SBAppSwitcherSnapshotImageCacheRequest setLoadFullSizeSnapshot:]


SBAppSwitcherSnapshotImageCache : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIActiveOrientationObserver>
 @property  <SBAppSwitcherSnapshotImageCacheDelegate> *delegate
 @property  NSArray *cachableAppLayouts
 @property  NSArray *fullSizeCachableAppLayouts
 @property  BOOL reloadsSnapshotsForActiveInterfaceOrientationChange
 @property  NSString *debugName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherSnapshotImageCache debugName]
  -[SBAppSwitcherSnapshotImageCache activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBAppSwitcherSnapshotImageCache initWithDelegate:]
  -[SBAppSwitcherSnapshotImageCache _asynchronouslyLoadSnapshotFromRequest:]
  -[SBAppSwitcherSnapshotImageCache init]
  -[SBAppSwitcherSnapshotImageCache _enqueueSnapshotRequestsForCachableAppLayouts:forFullSizeSnapshots:]
  -[SBAppSwitcherSnapshotImageCache _updateCache]
  -[SBAppSwitcherSnapshotImageCache addSnapshotUpdateObserver:forDisplayItem:inAppLayout:]
  -[SBAppSwitcherSnapshotImageCache setFullSizeCachableAppLayouts:]
  -[SBAppSwitcherSnapshotImageCache _purgeLowPriorityFullSizeSnapshots]
  -[SBAppSwitcherSnapshotImageCache _setSnapshotNeedsUpdateForDisplayItem:]
  -[SBAppSwitcherSnapshotImageCache dealloc]
  -[SBAppSwitcherSnapshotImageCache _addObserver:forDisplayItem:inAppLayout:]
  -[SBAppSwitcherSnapshotImageCache .cxx_destruct]
  -[SBAppSwitcherSnapshotImageCache _purgeAllSnapshotRequests]
  -[SBAppSwitcherSnapshotImageCache _loadSnapshotForRequest:withDisplayItem:inAppLayout:]
  -[SBAppSwitcherSnapshotImageCache cachableAppLayouts]
  -[SBAppSwitcherSnapshotImageCache _appLayoutsInPriorityOrder]
  -[SBAppSwitcherSnapshotImageCache _purgeLowPrioritySnapshots]
  -[SBAppSwitcherSnapshotImageCache _enqueueNextSnapshotRequestIfNecessary]
  -[SBAppSwitcherSnapshotImageCache _setShouldPurgeNilEntry:]
  -[SBAppSwitcherSnapshotImageCache reloadsSnapshotsForActiveInterfaceOrientationChange]
  -[SBAppSwitcherSnapshotImageCache _purgeSnapshotsForKey:]
  -[SBAppSwitcherSnapshotImageCache _uiImageForCGImage:forSnapshotRequest:]
  -[SBAppSwitcherSnapshotImageCache _isValidSnapshotRequest:]
  -[SBAppSwitcherSnapshotImageCache _purgeSnapshotRequest:withReason:]
  -[SBAppSwitcherSnapshotImageCache _cacheSnapshotForRequest:withDisplayItem:inAppLayout:]
  -[SBAppSwitcherSnapshotImageCache _cachableAppLayoutsForTesting]
  -[SBAppSwitcherSnapshotImageCache _createSnapshotRequestWithDisplayItem:inAppLayout:forFullSizeSnapshot:]
  -[SBAppSwitcherSnapshotImageCache setDebugName:]
  -[SBAppSwitcherSnapshotImageCache _updateObserversForDisplayItem:inAppLayout:withCacheEntry:]
  -[SBAppSwitcherSnapshotImageCache _cachableAppLayoutsRequiringFullSizeSnapshots]
  -[SBAppSwitcherSnapshotImageCache setCachableAppLayouts:]
  -[SBAppSwitcherSnapshotImageCache _updateActiveOrientationObservingIfNeeded]
  -[SBAppSwitcherSnapshotImageCache _isValidAppLayout:withSnapshot:givenCachableAppLayouts:]
  -[SBAppSwitcherSnapshotImageCache _scaleForDownscaledSnapshotsForAppLayout:]
  -[SBAppSwitcherSnapshotImageCache _initWithDelegate:iconController:applicationController:orientationLockManager:settings:]
  -[SBAppSwitcherSnapshotImageCache _purgeSnapshotRequestsForDisplayItem:withReason:]
  -[SBAppSwitcherSnapshotImageCache _snapshotChanged:]
  -[SBAppSwitcherSnapshotImageCache setDelegate:]
  -[SBAppSwitcherSnapshotImageCache _purgeLowPriorityFullSizeSnapshotRequests]
  -[SBAppSwitcherSnapshotImageCache _updateCacheForDisplayItem:]
  -[SBAppSwitcherSnapshotImageCache _createDecodedImageIfPossible:]
  -[SBAppSwitcherSnapshotImageCache _representedApplicationSceneEntityForDisplayItem:]
  -[SBAppSwitcherSnapshotImageCache _keepGoingForRequest:]
  -[SBAppSwitcherSnapshotImageCache _purgeAllSnapshots]
  -[SBAppSwitcherSnapshotImageCache delegate]
  -[SBAppSwitcherSnapshotImageCache _addCacheEntryForImage:fromRequest:]
  -[SBAppSwitcherSnapshotImageCache activeInterfaceOrientationWillChangeToOrientation:]
  -[SBAppSwitcherSnapshotImageCache _purgeLowPrioritySnapshotRequests]
  -[SBAppSwitcherSnapshotImageCache _snapshotImage:finishedLoadingForRequest:]
  -[SBAppSwitcherSnapshotImageCache fullSizeCachableAppLayouts]
  -[SBAppSwitcherSnapshotImageCache _createDownscaledVariantForRequest:snapshot:displayItem:sceneHandle:application:]
  -[SBAppSwitcherSnapshotImageCache setReloadsSnapshotsForActiveInterfaceOrientationChange:]
  -[SBAppSwitcherSnapshotImageCache _orientationForAppLayout:]
  -[SBAppSwitcherSnapshotImageCache reloadSnapshotsForInterfaceStyleChange:]
  -[SBAppSwitcherSnapshotImageCache removeSnapshotObserver:]


SBIdleTimerSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL disableIdleTimer

  // class methods
  +[SBIdleTimerSettings settingsControllerModule]

  // instance methods
  -[SBIdleTimerSettings setDefaultValues]
  -[SBIdleTimerSettings disableIdleTimer]
  -[SBIdleTimerSettings setDisableIdleTimer:]


SBLockScreenPluginManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBLockScreenPluginAgent, PTSettingsKeyObserver, SBLockScreenActionProvider>
 @property  SBLockScreenPlugin *activePlugin
 @property  SBLockScreenPlugin *displayedPlugin
 @property  <SBLockScreenPluginManagerDelegate> *delegate
 @property  BOOL enabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenPluginManager _sendEventToPlugin:]
  -[SBLockScreenPluginManager _highestPriorityPluginIgnoringViewDisplay:]
  -[SBLockScreenPluginManager settings:changedValueForKey:]
  -[SBLockScreenPluginManager lockScreenActionContext]
  -[SBLockScreenPluginManager init]
  -[SBLockScreenPluginManager disableLockScreenPluginWithContext:]
  -[SBLockScreenPluginManager activatePluginController:]
  -[SBLockScreenPluginManager dealloc]
  -[SBLockScreenPluginManager enableLockScreenPluginWithContext:]
  -[SBLockScreenPluginManager .cxx_destruct]
  -[SBLockScreenPluginManager _setActivePlugin:displayedPlugin:]
  -[SBLockScreenPluginManager succinctDescriptionBuilder]
  -[SBLockScreenPluginManager _pluginForPluginController:]
  -[SBLockScreenPluginManager isEnabled]
  -[SBLockScreenPluginManager activePlugin]
  -[SBLockScreenPluginManager succinctDescription]
  -[SBLockScreenPluginManager handleEvent:]
  -[SBLockScreenPluginManager _refreshLockScreenPlugin]
  -[SBLockScreenPluginManager setEnabled:]
  -[SBLockScreenPluginManager deactivatePluginController:]
  -[SBLockScreenPluginManager _loadLockScreenPluginWithContext:]
  -[SBLockScreenPluginManager setDelegate:]
  -[SBLockScreenPluginManager _handlePluginDisabled:withContext:]
  -[SBLockScreenPluginManager _handleUIRelock]
  -[SBLockScreenPluginManager pluginController:sendAction:]
  -[SBLockScreenPluginManager displayedPlugin]
  -[SBLockScreenPluginManager delegate]
  -[SBLockScreenPluginManager descriptionWithMultilinePrefix:]
  -[SBLockScreenPluginManager pluginController:updateAppearance:]
  -[SBLockScreenPluginManager descriptionBuilderWithMultilinePrefix:]


SBDashBoardHostedAppViewController : SBDashBoardViewExternalControllerBase <SBAppViewControllerDelegate, SBSceneHandleObserver, SBMainDisplaySceneLayoutStatusBarViewDataSource, SBDeviceApplicationSceneStatusBarStateObserver, SBApplicationSceneViewControllingStatusBarDelegate, SBApplicationHosting, BSInvalidatable>
 @property  <SBApplicationSceneStatusBarDescribing> *statusBarDescriber
 @property  <SBDashBoardHostedAppViewControllerDelegate> *delegate
 @property  SBApplicationSceneHandle *applicationSceneHandle
 @property  SBApplicationSceneView *appView
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  long long mode
 @property  NSSet *actionsToDeliver
 @property  BOOL intentToTransitionFromSecureAppToFull
 @property  BOOL placeholderContentEnabled
 @property  BOOL interfaceOrientationLocked
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardHostedAppViewController statusBarDescriber]
  -[SBDashBoardHostedAppViewController applicationSceneViewController:didUpdateStatusBarSettings:]
  -[SBDashBoardHostedAppViewController _deviceApplicationSceneHandle]
  -[SBDashBoardHostedAppViewController statusBarOrientation]
  -[SBDashBoardHostedAppViewController presentationPriority]
  -[SBDashBoardHostedAppViewController setSupplementalActivationSettings:]
  -[SBDashBoardHostedAppViewController viewDidLoad]
  -[SBDashBoardHostedAppViewController placeholderContentContext]
  -[SBDashBoardHostedAppViewController actionsToDeliver]
  -[SBDashBoardHostedAppViewController contentInterfaceOrientation]
  -[SBDashBoardHostedAppViewController isHostingAnApp]
  -[SBDashBoardHostedAppViewController setPlaceholderContentEnabled:]
  -[SBDashBoardHostedAppViewController hostedAppSceneHandle]
  -[SBDashBoardHostedAppViewController setInterfaceOrientationLocked:]
  -[SBDashBoardHostedAppViewController statusBarDescribers]
  -[SBDashBoardHostedAppViewController sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBDashBoardHostedAppViewController canHostAnApp]
  -[SBDashBoardHostedAppViewController statusBarDescriberForStatusBarPart:]
  -[SBDashBoardHostedAppViewController setActionsToDeliver:]
  -[SBDashBoardHostedAppViewController setPlaceholderContentContext:]
  -[SBDashBoardHostedAppViewController sceneWithIdentifier:didChangeSceneInterfaceOrientationTo:]
  -[SBDashBoardHostedAppViewController conformsToSBApplicationHosting]
  -[SBDashBoardHostedAppViewController hostedAppWillRotateToInterfaceOrientation:]
  -[SBDashBoardHostedAppViewController hostedAppSceneHandles]
  -[SBDashBoardHostedAppViewController allowsConfiguringIndividualStatusBarParts]
  -[SBDashBoardHostedAppViewController willMoveToParentViewController:]
  -[SBDashBoardHostedAppViewController setIntentToTransitionFromSecureAppToFull:]
  -[SBDashBoardHostedAppViewController mode]
  -[SBDashBoardHostedAppViewController displayLayoutElementIdentifier]
  -[SBDashBoardHostedAppViewController intentToTransitionFromSecureAppToFull]
  -[SBDashBoardHostedAppViewController applicationSceneHandle]
  -[SBDashBoardHostedAppViewController _appViewController]
  -[SBDashBoardHostedAppViewController presentationStyle]
  -[SBDashBoardHostedAppViewController aggregateBehavior:]
  -[SBDashBoardHostedAppViewController appearanceIdentifier]
  -[SBDashBoardHostedAppViewController aggregateAppearance:]
  -[SBDashBoardHostedAppViewController appViewControllerShouldBackgroundApplicationOnDeactivate:]
  -[SBDashBoardHostedAppViewController presentationType]
  -[SBDashBoardHostedAppViewController dealloc]
  -[SBDashBoardHostedAppViewController interfaceOrientationLocked]
  -[SBDashBoardHostedAppViewController .cxx_destruct]
  -[SBDashBoardHostedAppViewController appViewController:didTransitionFromMode:toMode:]
  -[SBDashBoardHostedAppViewController _setResignActiveAssertionEnabled:]
  -[SBDashBoardHostedAppViewController appViewControllerWillActivateApplication:]
  -[SBDashBoardHostedAppViewController setMode:]
  -[SBDashBoardHostedAppViewController _addStatusBarViewIfNeeded]
  -[SBDashBoardHostedAppViewController viewDidAppear:]
  -[SBDashBoardHostedAppViewController appViewControllerDidDeactivateApplication:]
  -[SBDashBoardHostedAppViewController _setMode:fromClient:forReason:]
  -[SBDashBoardHostedAppViewController _endShowingStatusBarView]
  -[SBDashBoardHostedAppViewController initWithApplicationSceneEntity:]
  -[SBDashBoardHostedAppViewController handleEvent:]
  -[SBDashBoardHostedAppViewController placeholderContentEnabled]
  -[SBDashBoardHostedAppViewController configureDisplayLayoutElement:]
  -[SBDashBoardHostedAppViewController viewWillAppear:]
  -[SBDashBoardHostedAppViewController setDelegate:]
  -[SBDashBoardHostedAppViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBDashBoardHostedAppViewController viewDidDisappear:]
  -[SBDashBoardHostedAppViewController appView]
  -[SBDashBoardHostedAppViewController viewWillDisappear:]
  -[SBDashBoardHostedAppViewController invalidate]
  -[SBDashBoardHostedAppViewController delegate]
  -[SBDashBoardHostedAppViewController _beginShowingStatusBarView]
  -[SBDashBoardHostedAppViewController _updateStatusBarContainerOrientation]
  -[SBDashBoardHostedAppViewController containerInterfaceOrientation]


_SBDashBoardHostedAppStatusBarStateProxy : SBDeviceApplicationSceneStatusBarStateProxy
 @property  SBDashBoardHostedAppViewController *hostedAppVCBackReference

  // instance methods
  -[_SBDashBoardHostedAppStatusBarStateProxy _fallbackInterfaceOrientation]
  -[_SBDashBoardHostedAppStatusBarStateProxy .cxx_destruct]
  -[_SBDashBoardHostedAppStatusBarStateProxy _suppressInheritedPartStyles]
  -[_SBDashBoardHostedAppStatusBarStateProxy hostedAppVCBackReference]
  -[_SBDashBoardHostedAppStatusBarStateProxy setHostedAppVCBackReference:]
  -[_SBDashBoardHostedAppStatusBarStateProxy _statusBarAlpha]


SBHomeButtonPressSpeedMesaUnlockTrigger : SBMesaUnlockTrigger
 @property  BSTimer *slowPressTimer
 @property  double slowPressDuration

  // instance methods
  -[SBHomeButtonPressSpeedMesaUnlockTrigger screenOff]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _cancelTimer]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger init]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _timerFired]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger .cxx_destruct]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger succinctDescriptionBuilder]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger menuButtonDown]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger menuButtonUp]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _startTimer]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger bioUnlock]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger fingerOff]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger slowPressDuration]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _isTimerRunning]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _isPrimed]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _evaluateUnlock]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger setSlowPressDuration:]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _slowPressTimer]
  -[SBHomeButtonPressSpeedMesaUnlockTrigger _setSlowPressTimer:]


SBIdleTimerDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBIdleTimerDomain domainName]
  +[SBIdleTimerDomain rootSettings]
  +[SBIdleTimerDomain rootSettingsClass]
  +[SBIdleTimerDomain domainGroupName]


SBDashBoardMesaUnlockBehavior : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBMesaUnlockTriggerDelegate, SBBiometricUnlockBehavior>
 @property  SBHomeHardwareButton *homeHardwareButton
 @property  SBMesaUnlockTrigger *trigger
 @property  CSLockScreenMesaSettings *mesaSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate

  // instance methods
  -[SBDashBoardMesaUnlockBehavior screenOff]
  -[SBDashBoardMesaUnlockBehavior _setHomeHardwareButton:]
  -[SBDashBoardMesaUnlockBehavior biometricUnlockBehaviorDelegate]
  -[SBDashBoardMesaUnlockBehavior significantUserInteractionDidOccur]
  -[SBDashBoardMesaUnlockBehavior .cxx_destruct]
  -[SBDashBoardMesaUnlockBehavior _homeHardwareButton]
  -[SBDashBoardMesaUnlockBehavior succinctDescriptionBuilder]
  -[SBDashBoardMesaUnlockBehavior menuButtonDown]
  -[SBDashBoardMesaUnlockBehavior _setTrigger:]
  -[SBDashBoardMesaUnlockBehavior _feedbackForFailureSettings:]
  -[SBDashBoardMesaUnlockBehavior setAuthenticated:]
  -[SBDashBoardMesaUnlockBehavior succinctDescription]
  -[SBDashBoardMesaUnlockBehavior _mesaSettings]
  -[SBDashBoardMesaUnlockBehavior setBiometricUnlockBehaviorDelegate:]
  -[SBDashBoardMesaUnlockBehavior mesaUnlockTriggerFired:]
  -[SBDashBoardMesaUnlockBehavior _feedbackForPasscodeEvent]
  -[SBDashBoardMesaUnlockBehavior menuButtonUp]
  -[SBDashBoardMesaUnlockBehavior lockButtonDown]
  -[SBDashBoardMesaUnlockBehavior _feedbackForBioUnlockEventThatWasSpontaneous:]
  -[SBDashBoardMesaUnlockBehavior handleBiometricEvent:]
  -[SBDashBoardMesaUnlockBehavior _handleMesaFailure]
  -[SBDashBoardMesaUnlockBehavior initWithMesaSettings:andUnlockTrigger:]
  -[SBDashBoardMesaUnlockBehavior _getHomeHardwareButton]
  -[SBDashBoardMesaUnlockBehavior _trigger]
  -[SBDashBoardMesaUnlockBehavior descriptionWithMultilinePrefix:]
  -[SBDashBoardMesaUnlockBehavior descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardMesaUnlockBehavior _failureSettingsForFailAttempt:]


SBAppExposeGridSwitcherModifier : SBSwitcherModifier
 @property  BOOL disableFullScreenCardScaleRounding
 @property  NSString *bundleIdentifier
 @property  {CGSize=dd} fullScreenCardSize
 @property  {CGSize=dd} floatingCardSize
 @property  BOOL reversesFloatingCardDirection

  // instance methods
  -[SBAppExposeGridSwitcherModifier visibleAppLayouts]
  -[SBAppExposeGridSwitcherModifier _contentSize]
  -[SBAppExposeGridSwitcherModifier scaleForIndex:]
  -[SBAppExposeGridSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBAppExposeGridSwitcherModifier animationAttributesForLayoutElement:]
  -[SBAppExposeGridSwitcherModifier copyWithZone:]
  -[SBAppExposeGridSwitcherModifier handleMainTransitionEvent:]
  -[SBAppExposeGridSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBAppExposeGridSwitcherModifier cardCornerRadiiForIndex:]
  -[SBAppExposeGridSwitcherModifier opacityForIndex:]
  -[SBAppExposeGridSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBAppExposeGridSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBAppExposeGridSwitcherModifier _cardCornerRadiusInSwitcher]
  -[SBAppExposeGridSwitcherModifier frameForIndex:]
  -[SBAppExposeGridSwitcherModifier contentOffsetForIndex:centered:]
  -[SBAppExposeGridSwitcherModifier minimumTranslationToKillIndex:]
  -[SBAppExposeGridSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBAppExposeGridSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBAppExposeGridSwitcherModifier _visibleAppLayoutRangeForContentOffset:]
  -[SBAppExposeGridSwitcherModifier .cxx_destruct]
  -[SBAppExposeGridSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBAppExposeGridSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBAppExposeGridSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBAppExposeGridSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBAppExposeGridSwitcherModifier titleOpacityForIndex:]
  -[SBAppExposeGridSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBAppExposeGridSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBAppExposeGridSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBAppExposeGridSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBAppExposeGridSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBAppExposeGridSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBAppExposeGridSwitcherModifier didMoveToParentModifier:]
  -[SBAppExposeGridSwitcherModifier handleScrollEvent:]
  -[SBAppExposeGridSwitcherModifier _isIndexVisible:]
  -[SBAppExposeGridSwitcherModifier snapshotScaleForAppLayout:]
  -[SBAppExposeGridSwitcherModifier _verticalSpacing]
  -[SBAppExposeGridSwitcherModifier _updateReopenClosedWindowsButtonPresence]
  -[SBAppExposeGridSwitcherModifier resetAdjustedScrollingState]
  -[SBAppExposeGridSwitcherModifier _horizontalSpacing]
  -[SBAppExposeGridSwitcherModifier darkeningAlphaForIndex:]
  -[SBAppExposeGridSwitcherModifier plusButtonAlpha]
  -[SBAppExposeGridSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBAppExposeGridSwitcherModifier shadowOffsetForIndex:]
  -[SBAppExposeGridSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBAppExposeGridSwitcherModifier contentViewScale]
  -[SBAppExposeGridSwitcherModifier plusButtonStyle]
  -[SBAppExposeGridSwitcherModifier handleRemovalEvent:]
  -[SBAppExposeGridSwitcherModifier bundleIdentifier]
  -[SBAppExposeGridSwitcherModifier handleTimerEvent:]
  -[SBAppExposeGridSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[SBAppExposeGridSwitcherModifier scrollViewAttributes]
  -[SBAppExposeGridSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[SBAppExposeGridSwitcherModifier shadowOpacityForIndex:]
  -[SBAppExposeGridSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBAppExposeGridSwitcherModifier initWithBundleIdentifier:fullScreenCardSize:floatingCardSize:]
  -[SBAppExposeGridSwitcherModifier responseForProposedChildResponse:childModifier:event:]
  -[SBAppExposeGridSwitcherModifier handleInsertionEvent:]
  -[SBAppExposeGridSwitcherModifier reversesFloatingCardDirection]
  -[SBAppExposeGridSwitcherModifier _canShowReopenClosedWindowsButton]
  -[SBAppExposeGridSwitcherModifier _frameForIndex:applyScrollViewContentOffset:]
  -[SBAppExposeGridSwitcherModifier _isIndexFullScreen:]
  -[SBAppExposeGridSwitcherModifier _fullScreenCardScale]
  -[SBAppExposeGridSwitcherModifier _floatingCardScale]
  -[SBAppExposeGridSwitcherModifier _isDoubleStackingFullScreenCards]
  -[SBAppExposeGridSwitcherModifier _numberOfFloatingAppLayouts]
  -[SBAppExposeGridSwitcherModifier _indexOfFirstMainAppLayoutFromAppLayouts:]
  -[SBAppExposeGridSwitcherModifier _indexOfLeadingCard]
  -[SBAppExposeGridSwitcherModifier _fittedContentSize]
  -[SBAppExposeGridSwitcherModifier _fittedFullScreenContentSize]
  -[SBAppExposeGridSwitcherModifier _fittedFloatingContentSize]
  -[SBAppExposeGridSwitcherModifier _numberOfFullScreenAppLayouts]
  -[SBAppExposeGridSwitcherModifier _numberOfFullScreenColumns]
  -[SBAppExposeGridSwitcherModifier _numberOfFloatingColumns]
  -[SBAppExposeGridSwitcherModifier _scaledCardSizeForIndex:]
  -[SBAppExposeGridSwitcherModifier _numberOfOffScreenTrailingFloatingCardsForContentOffset:]
  -[SBAppExposeGridSwitcherModifier _numberOfOffScreenTrailingFullScreenCardsForContentOffset:]
  -[SBAppExposeGridSwitcherModifier _visibleAppLayoutRangeForContentOffset:lastVisibleIndex:]
  -[SBAppExposeGridSwitcherModifier disableFullScreenCardScaleRounding]
  -[SBAppExposeGridSwitcherModifier _subtreeIndexForIndex:indexOfFirstMainAppLayout:]
  -[SBAppExposeGridSwitcherModifier _unpaddedCoplanarFrameForIndex:doubleStack:count:cardSize:scale:contentWidth:]
  -[SBAppExposeGridSwitcherModifier _cardHeaderHeight]
  -[SBAppExposeGridSwitcherModifier _numberOfFullScreenRows]
  -[SBAppExposeGridSwitcherModifier fullScreenCardSize]
  -[SBAppExposeGridSwitcherModifier floatingCardSize]
  -[SBAppExposeGridSwitcherModifier setReversesFloatingCardDirection:]
  -[SBAppExposeGridSwitcherModifier setDisableFullScreenCardScaleRounding:]


SBSimScrollToIconTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSimScrollToIconTestRecipe load]

  // instance methods
  -[SBSimScrollToIconTestRecipe title]
  -[SBSimScrollToIconTestRecipe handleVolumeIncrease]
  -[SBSimScrollToIconTestRecipe handleVolumeDecrease]
  -[SBSimScrollToIconTestRecipe _simulateScrollToIconWithDisplayIdentifier:]


SBSceneManagerCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBSceneManagerDelegate_Private, FBSceneManagerObserver, FBSceneDelegate, FBProcessManagerObserver, FBWorkspaceDelegate, FBSDisplayObserving, SBSceneManagerReferenceDelegate>
 @property  UIApplicationSceneDeactivationManager *sceneDeactivationManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSceneManagerCoordinator sharedInstance]
  +[SBSceneManagerCoordinator secureMainDisplaySceneManager]
  +[SBSceneManagerCoordinator mainDisplaySceneManager]

  // instance methods
  -[SBSceneManagerCoordinator sceneManager:didCreateScene:]
  -[SBSceneManagerCoordinator processManager:didRemoveProcess:]
  -[SBSceneManagerCoordinator sceneManager:willDestroyScene:]
  -[SBSceneManagerCoordinator scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBSceneManagerCoordinator sceneManager:createDefaultTransitionContextForScene:]
  -[SBSceneManagerCoordinator processManager:didAddProcess:]
  -[SBSceneManagerCoordinator scene:didPrepareUpdateWithContext:]
  -[SBSceneManagerCoordinator scene:didApplyUpdateWithContext:]
  -[SBSceneManagerCoordinator sceneManager:interceptUpdateForScene:withNewSettings:]
  -[SBSceneManagerCoordinator scene:didReceiveActions:]
  -[SBSceneManagerCoordinator scene:didCompleteUpdateWithContext:error:]
  -[SBSceneManagerCoordinator sceneManager:didDestroyScene:]
  -[SBSceneManagerCoordinator init]
  -[SBSceneManagerCoordinator _referenceForDisplayIdentity:creatingIfNecessary:]
  -[SBSceneManagerCoordinator dealloc]
  -[SBSceneManagerCoordinator sceneManager:clientDidConnectWithHandshake:]
  -[SBSceneManagerCoordinator registerSceneWorkspaceIdentifierToIgnore:]
  -[SBSceneManagerCoordinator .cxx_destruct]
  -[SBSceneManagerCoordinator sceneManagerForDisplayIdentity:]
  -[SBSceneManagerCoordinator _sceneManagerForDisplayIdentity:creatingIfNecessary:]
  -[SBSceneManagerCoordinator sceneManagerDidInvalidateForReference:]
  -[SBSceneManagerCoordinator displayMonitor:didConnectIdentity:withConfiguration:]
  -[SBSceneManagerCoordinator sceneDeactivationManager]
  -[SBSceneManagerCoordinator sceneManager:scene:didReceiveActions:]
  -[SBSceneManagerCoordinator workspace:didReceiveSceneRequestWithOptions:completion:]
  -[SBSceneManagerCoordinator enumerateSceneManagersWithBlock:]
  -[SBSceneManagerCoordinator displayMonitor:willDisconnectIdentity:]


_SBSynchronizeOperation : NSOperation /System/Library/PrivateFrameworks/GraphicsServices.framework/GraphicsServices
 @property  NSString *humanReadableDescription

  // instance methods
  -[_SBSynchronizeOperation addTask:]
  -[_SBSynchronizeOperation init]
  -[_SBSynchronizeOperation main]
  -[_SBSynchronizeOperation .cxx_destruct]
  -[_SBSynchronizeOperation humanReadableDescription]
  -[_SBSynchronizeOperation setHumanReadableDescription:]


SBIPhotoLaunchDeniedAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  BOOL offersMigration

  // instance methods
  -[SBIPhotoLaunchDeniedAlertItem dismissOnLock]
  -[SBIPhotoLaunchDeniedAlertItem configure:requirePasscodeForActions:]
  -[SBIPhotoLaunchDeniedAlertItem setOffersMigration:]
  -[SBIPhotoLaunchDeniedAlertItem ignoreIfAlreadyDisplaying]
  -[SBIPhotoLaunchDeniedAlertItem offersMigration]


SBActivationSettings : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSSettingDescriptionProvider, SBActivationSettings, NSCopying, BSDescriptionProviding>
 @property  BOOL empty
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBActivationSettings copyWithZone:]
  -[SBActivationSettings copyActivationSettings]
  -[SBActivationSettings boolForActivationSetting:]
  -[SBActivationSettings init]
  -[SBActivationSettings setObject:forActivationSetting:]
  -[SBActivationSettings objectForActivationSetting:]
  -[SBActivationSettings dealloc]
  -[SBActivationSettings .cxx_destruct]
  -[SBActivationSettings flagForActivationSetting:]
  -[SBActivationSettings applyActivationSettings:]
  -[SBActivationSettings clearActivationSettings]
  -[SBActivationSettings succinctDescriptionBuilder]
  -[SBActivationSettings setFlag:forActivationSetting:]
  -[SBActivationSettings valueDescriptionForFlag:object:ofSetting:]
  -[SBActivationSettings succinctDescription]
  -[SBActivationSettings isEqual:]
  -[SBActivationSettings isEmpty]
  -[SBActivationSettings descriptionWithMultilinePrefix:]
  -[SBActivationSettings keyDescriptionForSetting:]
  -[SBActivationSettings descriptionBuilderWithMultilinePrefix:]
  -[SBActivationSettings copyActivationSettingsPassingFilter:]


SBCarDoNotDisturbController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalLockProviding, CSExternalEventHandling, CSExternalBehaviorProviding>
 @property  BOOL locked
 @property  BOOL showPasscode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode

  // instance methods
  -[SBCarDoNotDisturbController coverSheetIdentifier]
  -[SBCarDoNotDisturbController showPasscode]
  -[SBCarDoNotDisturbController scrollingStrategy]
  -[SBCarDoNotDisturbController notificationBehavior]
  -[SBCarDoNotDisturbController unlockFromSource:]
  -[SBCarDoNotDisturbController conformsToCSBehaviorProviding]
  -[SBCarDoNotDisturbController init]
  -[SBCarDoNotDisturbController initWithCARAutomaticDNDStatus:lockScreenManager:]
  -[SBCarDoNotDisturbController restrictedCapabilities]
  -[SBCarDoNotDisturbController _hasShownSiriHeaderViewControllerDuringCurrentCarDNDSession]
  -[SBCarDoNotDisturbController isLocked]
  -[SBCarDoNotDisturbController _setHasShownSiriHeaderViewControllerDuringCurrentCarDNDSession:]
  -[SBCarDoNotDisturbController conformsToCSEventHandling]
  -[SBCarDoNotDisturbController proximityDetectionMode]
  -[SBCarDoNotDisturbController dealloc]
  -[SBCarDoNotDisturbController conformsToCSExternalBehaviorProviding]
  -[SBCarDoNotDisturbController .cxx_destruct]
  -[SBCarDoNotDisturbController _queue_setScreenOn:]
  -[SBCarDoNotDisturbController _dismissAlertItemsAnimated:]
  -[SBCarDoNotDisturbController _queue_setExitConfirmationRequired:]
  -[SBCarDoNotDisturbController participantState]
  -[SBCarDoNotDisturbController handleEvent:]
  -[SBCarDoNotDisturbController _isExitConfirmationRequired]
  -[SBCarDoNotDisturbController _setScreenOn:]
  -[SBCarDoNotDisturbController wouldHandleButtonEvent:]


_SBMainScreenScreenshotProvider : _SBDefaultScreenshotProvider
  // instance methods
  -[_SBMainScreenScreenshotProvider flasher]
  -[_SBMainScreenScreenshotProvider captureScreenshot]


SBDashBoardWallpaperEffectView : SBWallpaperEffectView <CSWallpaperView>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardWallpaperEffectView initWithWallpaperVariant:transformOptions:]
  -[SBDashBoardWallpaperEffectView setBackgroundStyle:]
  -[SBDashBoardWallpaperEffectView setCoverSheetWallpaperStyle:]
  -[SBDashBoardWallpaperEffectView .cxx_destruct]
  -[SBDashBoardWallpaperEffectView didAddSubview:]
  -[SBDashBoardWallpaperEffectView layoutSubviews]


SBDeckFloatingSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBDeckFloatingSwitcherModifier homeScreenBackdropBlurType]
  -[SBDeckFloatingSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBDeckFloatingSwitcherModifier visibleAppLayouts]
  -[SBDeckFloatingSwitcherModifier _contentSize]
  -[SBDeckFloatingSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBDeckFloatingSwitcherModifier homeScreenAlpha]
  -[SBDeckFloatingSwitcherModifier scaleForIndex:]
  -[SBDeckFloatingSwitcherModifier isHomeScreenContentRequired]
  -[SBDeckFloatingSwitcherModifier topMostLayoutElements]
  -[SBDeckFloatingSwitcherModifier wantsDockBehaviorAssertion]
  -[SBDeckFloatingSwitcherModifier isSwitcherWindowVisible]
  -[SBDeckFloatingSwitcherModifier isScrollEnabled]
  -[SBDeckFloatingSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBDeckFloatingSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBDeckFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDeckFloatingSwitcherModifier handleMainTransitionEvent:]
  -[SBDeckFloatingSwitcherModifier wallpaperStyle]
  -[SBDeckFloatingSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBDeckFloatingSwitcherModifier cardCornerRadiiForIndex:]
  -[SBDeckFloatingSwitcherModifier opacityForIndex:]
  -[SBDeckFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBDeckFloatingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBDeckFloatingSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBDeckFloatingSwitcherModifier _cardCornerRadiusInSwitcher]
  -[SBDeckFloatingSwitcherModifier dockProgress]
  -[SBDeckFloatingSwitcherModifier frameForIndex:]
  -[SBDeckFloatingSwitcherModifier contentOffsetForIndex:centered:]
  -[SBDeckFloatingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBDeckFloatingSwitcherModifier homeScreenDimmingAlpha]
  -[SBDeckFloatingSwitcherModifier minimumTranslationToKillIndex:]
  -[SBDeckFloatingSwitcherModifier _indexForContentOffset:]
  -[SBDeckFloatingSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBDeckFloatingSwitcherModifier containerStatusBarAnimationDuration]
  -[SBDeckFloatingSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBDeckFloatingSwitcherModifier isIndexSelectable:]
  -[SBDeckFloatingSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[SBDeckFloatingSwitcherModifier wantsHomeScreenPointerInteractions]
  -[SBDeckFloatingSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBDeckFloatingSwitcherModifier switcherDimmingAlpha]
  -[SBDeckFloatingSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBDeckFloatingSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBDeckFloatingSwitcherModifier _visibleAppLayoutRangeForContentOffset:]
  -[SBDeckFloatingSwitcherModifier _numberOfItems]
  -[SBDeckFloatingSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBDeckFloatingSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBDeckFloatingSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBDeckFloatingSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBDeckFloatingSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBDeckFloatingSwitcherModifier titleOpacityForIndex:]
  -[SBDeckFloatingSwitcherModifier dockUpdateMode]
  -[SBDeckFloatingSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBDeckFloatingSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBDeckFloatingSwitcherModifier shadowStyleForAppLayout:]
  -[SBDeckFloatingSwitcherModifier homeScreenScale]
  -[SBDeckFloatingSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBDeckFloatingSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBDeckFloatingSwitcherModifier handleTapAppLayoutEvent:]
  -[SBDeckFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBDeckFloatingSwitcherModifier shouldAllowContentViewTouchesForIndex:]
  -[SBDeckFloatingSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBDeckFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBDeckFloatingSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[SBDeckFloatingSwitcherModifier dockWindowLevel]
  -[SBDeckFloatingSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBDeckFloatingSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBDeckFloatingSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBDeckFloatingSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBDeckFloatingSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBDeckFloatingSwitcherModifier didMoveToParentModifier:]
  -[SBDeckFloatingSwitcherModifier wallpaperScale]
  -[SBDeckFloatingSwitcherModifier handleScrollEvent:]
  -[SBDeckFloatingSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBDeckFloatingSwitcherModifier _isIndexVisible:]
  -[SBDeckFloatingSwitcherModifier snapshotScaleForAppLayout:]
  -[SBDeckFloatingSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBDeckFloatingSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[SBDeckFloatingSwitcherModifier resetAdjustedScrollingState]
  -[SBDeckFloatingSwitcherModifier _applyPrototypeSettings]
  -[SBDeckFloatingSwitcherModifier isIndexKillable:]
  -[SBDeckFloatingSwitcherModifier darkeningAlphaForIndex:]
  -[SBDeckFloatingSwitcherModifier switcherDimmingViewBlocksTouches]
  -[SBDeckFloatingSwitcherModifier plusButtonAlpha]
  -[SBDeckFloatingSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBDeckFloatingSwitcherModifier shadowOffsetForIndex:]
  -[SBDeckFloatingSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBDeckFloatingSwitcherModifier lighteningAlphaForIndex:]
  -[SBDeckFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBDeckFloatingSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[SBDeckFloatingSwitcherModifier transactionCompletionOptions]
  -[SBDeckFloatingSwitcherModifier contentViewScale]
  -[SBDeckFloatingSwitcherModifier plusButtonStyle]
  -[SBDeckFloatingSwitcherModifier handleRemovalEvent:]
  -[SBDeckFloatingSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBDeckFloatingSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBDeckFloatingSwitcherModifier wantsSwitcherDimmingView]
  -[SBDeckFloatingSwitcherModifier dockWindowLevelPriority]
  -[SBDeckFloatingSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[SBDeckFloatingSwitcherModifier scrollViewAttributes]
  -[SBDeckFloatingSwitcherModifier isContainerStatusBarVisible]
  -[SBDeckFloatingSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[SBDeckFloatingSwitcherModifier shadowOpacityForIndex:]
  -[SBDeckFloatingSwitcherModifier switcherBackdropBlurProgress]
  -[SBDeckFloatingSwitcherModifier rotationAngleForIndex:]
  -[SBDeckFloatingSwitcherModifier handleTapOutsideToDismissEvent:]
  -[SBDeckFloatingSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[SBDeckFloatingSwitcherModifier switcherBackdropBlurType]
  -[SBDeckFloatingSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBDeckFloatingSwitcherModifier _contentInsetsWithContainerViewBounds:switcherViewBounds:]
  -[SBDeckFloatingSwitcherModifier _contentSizeWithWithCardSize:contentInsets:switcherViewBounds:numberOfItems:]
  -[SBDeckFloatingSwitcherModifier _adjustedIndexForScaleForIndex:withCardSize:contentOffset:contentSize:contentInsets:switcherViewBounds:]
  -[SBDeckFloatingSwitcherModifier _scaleForScaleAdjustedIndex:]
  -[SBDeckFloatingSwitcherModifier _frameForIndex:withCardSize:scale:adjustedIndexForScale:contentOffset:contentSize:contentInsets:switcherViewBounds:]
  -[SBDeckFloatingSwitcherModifier _frameWithScaleAppliedForIndex:withCardSize:contentOffset:contentSize:contentInsets:switcherViewBounds:]
  -[SBDeckFloatingSwitcherModifier _distanceFromPreviousCardForCardAtIndex:]


SBFluidScrunchGestureRecognizer : SBTouchTemplateGestureRecognizer <SBGestureRecognizerTouchHistoryProviding, SBGestureRecognizerPanGestureProviding>
 @property  {CGPoint=dd} absoluteTranslation
 @property  double absoluteScale
 @property  {CGPoint=dd} additionalTranslationDueToChangingAnchorPoints
 @property  double lastPerimeter
 @property  {CGPoint=dd} initialCentroid
 @property  SBTouchHistory *touchHistory
 @property  {CGPoint=dd} centroid
 @property  long long recognizedTouchType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFluidScrunchGestureRecognizer _scrunchTemplatesForTouchType:]
  +[SBFluidScrunchGestureRecognizer _panTemplatesForTouchType:]

  // instance methods
  -[SBFluidScrunchGestureRecognizer centroid]
  -[SBFluidScrunchGestureRecognizer peakSpeed]
  -[SBFluidScrunchGestureRecognizer _hysteresis]
  -[SBFluidScrunchGestureRecognizer setAbsoluteTranslation:]
  -[SBFluidScrunchGestureRecognizer _computeGestureMotionWithTouches:polygon:]
  -[SBFluidScrunchGestureRecognizer lastPerimeter]
  -[SBFluidScrunchGestureRecognizer touchesBegan:withEvent:]
  -[SBFluidScrunchGestureRecognizer touchHistory]
  -[SBFluidScrunchGestureRecognizer setAbsoluteScale:]
  -[SBFluidScrunchGestureRecognizer locationInView:]
  -[SBFluidScrunchGestureRecognizer animationDistance]
  -[SBFluidScrunchGestureRecognizer _updateRecognizedTouchTypeIfNecessaryWithTouches:]
  -[SBFluidScrunchGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBFluidScrunchGestureRecognizer velocityInView:]
  -[SBFluidScrunchGestureRecognizer setState:]
  -[SBFluidScrunchGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBFluidScrunchGestureRecognizer .cxx_destruct]
  -[SBFluidScrunchGestureRecognizer absoluteTranslation]
  -[SBFluidScrunchGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBFluidScrunchGestureRecognizer _installTemplates]
  -[SBFluidScrunchGestureRecognizer logCategory]
  -[SBFluidScrunchGestureRecognizer _isMatchedTemplateScrunchTemplate]
  -[SBFluidScrunchGestureRecognizer setTouchHistory:]
  -[SBFluidScrunchGestureRecognizer touchesCancelled:withEvent:]
  -[SBFluidScrunchGestureRecognizer initialCentroid]
  -[SBFluidScrunchGestureRecognizer _gestureView]
  -[SBFluidScrunchGestureRecognizer reset]
  -[SBFluidScrunchGestureRecognizer initWithTarget:action:]
  -[SBFluidScrunchGestureRecognizer absoluteScale]
  -[SBFluidScrunchGestureRecognizer translationWithoutConsideringScaleInView:]
  -[SBFluidScrunchGestureRecognizer _setMatchedPolygon:]
  -[SBFluidScrunchGestureRecognizer setInitialCentroid:]
  -[SBFluidScrunchGestureRecognizer recognizedTouchType]
  -[SBFluidScrunchGestureRecognizer incrementalGestureMotionForCandidate:withTransformAnalyzerInfo:]
  -[SBFluidScrunchGestureRecognizer additionalTranslationDueToChangingAnchorPoints]
  -[SBFluidScrunchGestureRecognizer setLastPerimeter:]
  -[SBFluidScrunchGestureRecognizer touchesMoved:withEvent:]
  -[SBFluidScrunchGestureRecognizer _shouldAddNewTouchesAfterGestureRecognition]
  -[SBFluidScrunchGestureRecognizer touchesEnded:withEvent:]
  -[SBFluidScrunchGestureRecognizer setAllowedTouchTypes:]
  -[SBFluidScrunchGestureRecognizer _centroidInGestureViewForPolygon:]
  -[SBFluidScrunchGestureRecognizer translationInView:]
  -[SBFluidScrunchGestureRecognizer setAdditionalTranslationDueToChangingAnchorPoints:]


SBAppStatusBarTransitionInfo : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  UIStatusBarStyleRequest *startStyleRequest
 @property  long long startOrientation
 @property  UIStatusBarStyleRequest *endStyleRequest
 @property  long long endOrientation
 @property  int transition
 @property  BOOL zoomOther

  // instance methods
  -[SBAppStatusBarTransitionInfo setTransition:]
  -[SBAppStatusBarTransitionInfo transition]
  -[SBAppStatusBarTransitionInfo .cxx_destruct]
  -[SBAppStatusBarTransitionInfo endStyleRequest]
  -[SBAppStatusBarTransitionInfo startStyleRequest]
  -[SBAppStatusBarTransitionInfo setStartStyleRequest:]
  -[SBAppStatusBarTransitionInfo startOrientation]
  -[SBAppStatusBarTransitionInfo setStartOrientation:]
  -[SBAppStatusBarTransitionInfo setEndStyleRequest:]
  -[SBAppStatusBarTransitionInfo endOrientation]
  -[SBAppStatusBarTransitionInfo setEndOrientation:]
  -[SBAppStatusBarTransitionInfo zoomOther]
  -[SBAppStatusBarTransitionInfo setZoomOther:]


SBDesiredIconStateMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDesiredIconStateMetric init]
  -[SBDesiredIconStateMetric handleEvent:withContext:]
  -[SBDesiredIconStateMetric .cxx_destruct]


SBCancelableBlockOperation : NSOperation /System/Library/PrivateFrameworks/GraphicsServices.framework/GraphicsServices
  // instance methods
  -[SBCancelableBlockOperation init]
  -[SBCancelableBlockOperation main]
  -[SBCancelableBlockOperation .cxx_destruct]
  -[SBCancelableBlockOperation addBlock:]


SBDisableSystemGestureAssertion : BSSimpleAssertion /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  NSSet *exceptions

  // instance methods
  -[SBDisableSystemGestureAssertion .cxx_destruct]
  -[SBDisableSystemGestureAssertion exceptions]
  -[SBDisableSystemGestureAssertion setExceptions:]


SBStylusPriorityGestureRecognizer : UIGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBStylusPriorityGestureRecognizer touchesBegan:withEvent:]
  -[SBStylusPriorityGestureRecognizer touchesCancelled:withEvent:]
  -[SBStylusPriorityGestureRecognizer touchesEnded:withEvent:]


SBSystemGestureManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <UIGestureRecognizerDelegate, BSDescriptionProviding>
 @property  BOOL anyTouchGestureRunning
 @property  BOOL systemGesturesDisabledForAccessibility
 @property  NSSet *gesturesPreventedByStylus
 @property  SBIndirectTouchLifecycleMonitor *indirectTouchLifecycleMonitor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSystemGestureManager mainDisplayManager]

  // instance methods
  -[SBSystemGestureManager _evaluateEnablement]
  -[SBSystemGestureManager init]
  -[SBSystemGestureManager areSystemGesturesDisabledForAccessibility]
  -[SBSystemGestureManager dealloc]
  -[SBSystemGestureManager acquireSystemGestureDisableAssertionForReason:exceptSystemGestureTypes:]
  -[SBSystemGestureManager .cxx_destruct]
  -[SBSystemGestureManager isAnyTouchGestureRunning]
  -[SBSystemGestureManager setIndirectTouchLifecycleMonitor:]
  -[SBSystemGestureManager setGesturesPreventedByStylus:]
  -[SBSystemGestureManager succinctDescriptionBuilder]
  -[SBSystemGestureManager _recognitionEventForTouchGestureType:]
  -[SBSystemGestureManager windowForSystemGestures]
  -[SBSystemGestureManager _enableSystemGesture:withType:]
  -[SBSystemGestureManager shouldEnableSystemGestureWithType:]
  -[SBSystemGestureManager indirectTouchLifecycleMonitor]
  -[SBSystemGestureManager isGestureWithTypeAllowed:]
  -[SBSystemGestureManager succinctDescription]
  -[SBSystemGestureManager _isGestureWithTypeAllowed:]
  -[SBSystemGestureManager setSystemGesturesDisabledForAccessibility:]
  -[SBSystemGestureManager _disableSystemGesture:withType:]
  -[SBSystemGestureManager _isTouchGestureWithType:]
  -[SBSystemGestureManager gestureRecognizerOfType:shouldRequireFailureOfGestureRecognizer:]
  -[SBSystemGestureManager _shouldEnableSystemGestureWithType:]
  -[SBSystemGestureManager removeGestureRecognizer:]
  -[SBSystemGestureManager gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBSystemGestureManager gestureRecognizerOfType:shouldBeRequiredToFailByGestureRecognizer:]
  -[SBSystemGestureManager _initWithDisplayIdentity:]
  -[SBSystemGestureManager gesturesPreventedByStylus]
  -[SBSystemGestureManager descriptionWithMultilinePrefix:]
  -[SBSystemGestureManager ignoreScreenEdgeTouchWithIdentifier:]
  -[SBSystemGestureManager gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:]
  -[SBSystemGestureManager addGestureRecognizer:withType:]
  -[SBSystemGestureManager descriptionBuilderWithMultilinePrefix:]
  -[SBSystemGestureManager _systemGestureChanged:]


SBCoverSheetToAppsWorkspaceTransaction : SBToAppsWorkspaceTransaction
 @property  BOOL preservesBanners

  // instance methods
  -[SBCoverSheetToAppsWorkspaceTransaction _dismissOverlaysIfNeeded]
  -[SBCoverSheetToAppsWorkspaceTransaction _dismissOverlaysOptions]
  -[SBCoverSheetToAppsWorkspaceTransaction initWithTransitionRequest:]
  -[SBCoverSheetToAppsWorkspaceTransaction preservesBanners]
  -[SBCoverSheetToAppsWorkspaceTransaction _begin]
  -[SBCoverSheetToAppsWorkspaceTransaction .cxx_destruct]
  -[SBCoverSheetToAppsWorkspaceTransaction setPreservesBanners:]


SBWallpaperServer : FBSServiceFacility /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  <SBWallpaperServerDelegate> *delegate
 @property  FBServiceClientAuthenticator *accessAuthenticator

  // class methods
  +[SBWallpaperServer sharedInstance]

  // instance methods
  -[SBWallpaperServer _handleSetColorMessage:fromClient:]
  -[SBWallpaperServer _xpcObjectIsDictionary:]
  -[SBWallpaperServer _handleFetchOriginalImageMessage:fromClient:]
  -[SBWallpaperServer _handleSetGradientMessage:fromClient:]
  -[SBWallpaperServer .cxx_destruct]
  -[SBWallpaperServer noteDidReceiveMessage:withType:fromClient:]
  -[SBWallpaperServer accessAuthenticator]
  -[SBWallpaperServer _handleFetchOriginalVideoURLMessage:fromClient:]
  -[SBWallpaperServer _clientPermittedToModifyWallpaper:]
  -[SBWallpaperServer _init]
  -[SBWallpaperServer setAccessAuthenticator:]
  -[SBWallpaperServer _handleSetVideoMessageWithWallpaperMode:fromClient:]
  -[SBWallpaperServer _wallpaperModeFromXPCDictionary:]
  -[SBWallpaperServer _deviceOrientationFromXPCDictionary:]
  -[SBWallpaperServer _wallpaperVariantFromXPCDictionary:]
  -[SBWallpaperServer setDelegate:]
  -[SBWallpaperServer _handleSetColorNameMessage:fromClient:]
  -[SBWallpaperServer _handleRestoreDefaultWallpaperMessage:fromClient:]
  -[SBWallpaperServer _handleFetchContentCutoutBoundsMessage:fromClient:]
  -[SBWallpaperServer delegate]
  -[SBWallpaperServer _handleFetchThumbnailMessage:fromClient:]


SBFloatingSwitcherLiveContentOverlayCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSwitcherLiveContentOverlayCoordinating>
 @property  NSString *keyboardFocusSceneID
 @property  SBFloatingApplicationLiveContentWindow *recycledApplicationSceneLiveContentWindow
 @property  NSMutableDictionary *liveContentOverlays
 @property  BOOL liveContentOverlayUpdatesSuspended
 @property  long long containerOrientation
 @property  <SBSwitcherLiveContentOverlayCoordinatorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFloatingSwitcherLiveContentOverlayCoordinator areLiveContentOverlayUpdatesSuspended]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator init]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator noteKeyboardFocusDidChangeToSceneID:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator setLiveContentOverlayUpdatesSuspended:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator appLayoutDidBecomeHidden:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator recycledApplicationSceneLiveContentWindow]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator .cxx_destruct]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _newInlineLiveContentOverlayViewForTransitionContext:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _removeLiveContentOverlayForAppLayout:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator keyboardFocusSceneID]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _removeInlineAppExposeLiveContentOverlay:forAppLayout:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator setRecycledApplicationSceneLiveContentWindow:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _updateDisplayLayoutElementsForActiveAppLayout:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator animationControllerForTransitionRequest:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator setContainerOrientation:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _addInlineAppExposeLiveContentOverlay:forAppLayout:animated:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _removeApplicationSceneLiveContentOverlay:forAppLayout:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _newApplicationLiveContentOverlayViewForTransitionContext:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _newLiveContentOverlayViewForTransitionContext:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator setKeyboardFocusSceneID:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _shouldAnimateAddingLiveContentOverlayForTransitionContext:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator appLayoutWillBecomeVisible:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator setDelegate:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _addApplicationSceneLiveContentOverlay:forAppLayout:animated:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator containerOrientation]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator setLiveContentOverlays:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _addLiveContentOverlay:forAppLayout:animated:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _isLayoutElementBlockedForScreenTimeExpiration:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator delegate]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator _configureLiveContentOverlayView:forTransitionContext:]
  -[SBFloatingSwitcherLiveContentOverlayCoordinator liveContentOverlays]


SBFloatingApplicationSceneLiveContentOverlayView : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFloatingApplicationLiveContentOverlayView, SBDeviceApplicationSceneHandleObserver, SBUISizeObservingViewDelegate>
 @property  SBFloatingApplicationLiveContentWindow *window
 @property  SBWindowSelfHostWrapper *windowHostWrapper
 @property  SBUISizeObservingView *sizeObservingView
 @property  SBMedusaDecoratedDeviceApplicationSceneViewController *deviceApplicationSceneViewController
 @property  SBSceneViewStatusBarAssertion *statusBarAssertion
 @property  SBFHomeGrabberSettings *grabberSettings
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  long long rasterizationStyle
 @property  BOOL wantsMinificationFilter
 @property  BOOL liveContentRasterizationDisabled
 @property  BOOL asynchronousRenderingTemporarilyDisabled
 @property  UIView *contentOverlayView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFloatingApplicationSceneLiveContentOverlayView grabberSettings]
  -[SBFloatingApplicationSceneLiveContentOverlayView initWithWindow:]
  -[SBFloatingApplicationSceneLiveContentOverlayView setHomeGrabberHidden:animated:]
  -[SBFloatingApplicationSceneLiveContentOverlayView window]
  -[SBFloatingApplicationSceneLiveContentOverlayView displayLayoutElement]
  -[SBFloatingApplicationSceneLiveContentOverlayView noteKeyboardFocusDidChangeToSceneID:]
  -[SBFloatingApplicationSceneLiveContentOverlayView sizeObservingView:didChangeSize:]
  -[SBFloatingApplicationSceneLiveContentOverlayView setLiveContentRasterizationDisabled:]
  -[SBFloatingApplicationSceneLiveContentOverlayView dealloc]
  -[SBFloatingApplicationSceneLiveContentOverlayView setUsesBrightSceneViewBackgroundMaterial:]
  -[SBFloatingApplicationSceneLiveContentOverlayView .cxx_destruct]
  -[SBFloatingApplicationSceneLiveContentOverlayView disableAsynchronousRenderingForNextCommit]
  -[SBFloatingApplicationSceneLiveContentOverlayView asynchronousRenderingTemporarilyDisabled]
  -[SBFloatingApplicationSceneLiveContentOverlayView rasterizationStyle]
  -[SBFloatingApplicationSceneLiveContentOverlayView setStatusBarHidden:nubViewHidden:animator:]
  -[SBFloatingApplicationSceneLiveContentOverlayView invalidate]
  -[SBFloatingApplicationSceneLiveContentOverlayView sceneHandle:didCreateScene:]
  -[SBFloatingApplicationSceneLiveContentOverlayView wantsMinificationFilter]
  -[SBFloatingApplicationSceneLiveContentOverlayView _updateLiveContentRasterization]
  -[SBFloatingApplicationSceneLiveContentOverlayView contentViewController]
  -[SBFloatingApplicationSceneLiveContentOverlayView setRasterizationStyle:withMinificationFilterEnabled:]
  -[SBFloatingApplicationSceneLiveContentOverlayView contentOverlayView]
  -[SBFloatingApplicationSceneLiveContentOverlayView statusBarAssertion]
  -[SBFloatingApplicationSceneLiveContentOverlayView noteNeedsLayoutUpdateFor180DegreeRotation]
  -[SBFloatingApplicationSceneLiveContentOverlayView deviceApplicationSceneViewController]
  -[SBFloatingApplicationSceneLiveContentOverlayView configureWithWorkspaceEntity:referenceFrame:interfaceOrientation:]
  -[SBFloatingApplicationSceneLiveContentOverlayView _updateContentWindowFrameFromView:]
  -[SBFloatingApplicationSceneLiveContentOverlayView windowHostWrapper]
  -[SBFloatingApplicationSceneLiveContentOverlayView sizeObservingView]
  -[SBFloatingApplicationSceneLiveContentOverlayView liveContentRasterizationDisabled]


SBFloatingApplicationInlineAppExposeLiveContentOverlayView : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFloatingApplicationLiveContentOverlayView>
 @property  SBInlineAppExposeContainerViewController *inlineAppExposeContainerViewController
 @property  UIView *contentOverlayView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView setHomeGrabberHidden:animated:]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView noteKeyboardFocusDidChangeToSceneID:]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView setLiveContentRasterizationDisabled:]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView setUsesBrightSceneViewBackgroundMaterial:]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView .cxx_destruct]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView disableAsynchronousRenderingForNextCommit]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView rasterizationStyle]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView setStatusBarHidden:nubViewHidden:animator:]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView invalidate]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView contentViewController]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView setRasterizationStyle:withMinificationFilterEnabled:]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView contentOverlayView]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView inlineAppExposeContainerViewController]
  -[SBFloatingApplicationInlineAppExposeLiveContentOverlayView configureWithWorkspaceEntity:referenceFrame:interfaceOrientation:]


SBInlineAppExposeLiveContentOverlayCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSwitcherLiveContentOverlayCoordinating>
 @property  BOOL liveContentOverlayUpdatesSuspended
 @property  long long containerOrientation
 @property  <SBSwitcherLiveContentOverlayCoordinatorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInlineAppExposeLiveContentOverlayCoordinator areLiveContentOverlayUpdatesSuspended]
  -[SBInlineAppExposeLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator noteKeyboardFocusDidChangeToSceneID:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator setLiveContentOverlayUpdatesSuspended:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator appLayoutDidBecomeHidden:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator .cxx_destruct]
  -[SBInlineAppExposeLiveContentOverlayCoordinator animationControllerForTransitionRequest:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator setContainerOrientation:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator appLayoutWillBecomeVisible:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator setDelegate:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator containerOrientation]
  -[SBInlineAppExposeLiveContentOverlayCoordinator _addLiveContentOverlay:forAppLayout:animated:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator delegate]
  -[SBInlineAppExposeLiveContentOverlayCoordinator updateSceneViewController:environment:layoutRole:overlay:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator _appLayoutFromLayoutState:]
  -[SBInlineAppExposeLiveContentOverlayCoordinator _removeLiveContentOverlay]


SBInlineAppExposeLiveContentOverlayView : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSwitcherLiveContentOverlay>
 @property  SBDeviceApplicationSceneViewController *deviceApplicationSceneViewController
 @property  SBSceneViewStatusBarAssertion *statusBarAssertion
 @property  BOOL transitioning
 @property  UIView *contentOverlayView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBInlineAppExposeLiveContentOverlayView setHomeGrabberHidden:animated:]
  -[SBInlineAppExposeLiveContentOverlayView isTransitioning]
  -[SBInlineAppExposeLiveContentOverlayView setTransitioning:]
  -[SBInlineAppExposeLiveContentOverlayView noteKeyboardFocusDidChangeToSceneID:]
  -[SBInlineAppExposeLiveContentOverlayView dealloc]
  -[SBInlineAppExposeLiveContentOverlayView setUsesBrightSceneViewBackgroundMaterial:]
  -[SBInlineAppExposeLiveContentOverlayView .cxx_destruct]
  -[SBInlineAppExposeLiveContentOverlayView disableAsynchronousRenderingForNextCommit]
  -[SBInlineAppExposeLiveContentOverlayView rasterizationStyle]
  -[SBInlineAppExposeLiveContentOverlayView setStatusBarHidden:nubViewHidden:animator:]
  -[SBInlineAppExposeLiveContentOverlayView setRasterizationStyle:withMinificationFilterEnabled:]
  -[SBInlineAppExposeLiveContentOverlayView contentOverlayView]
  -[SBInlineAppExposeLiveContentOverlayView statusBarAssertion]
  -[SBInlineAppExposeLiveContentOverlayView deviceApplicationSceneViewController]
  -[SBInlineAppExposeLiveContentOverlayView initWithDeviceApplicationSceneViewController:]


SBCameraApplication : SBApplication
 @property  BOOL hasPreHeatInFlight

  // instance methods
  -[SBCameraApplication setHasPreHeatInFlight:]
  -[SBCameraApplication icon:launchFromLocation:context:]
  -[SBCameraApplication _cancelPreheatForUserLaunchIfNecessary]
  -[SBCameraApplication hasPreHeatInFlight]
  -[SBCameraApplication preHeatForUserLaunchIfNecessaryWithAbsoluteTime:andContinuousTime:]


SBKeyboardFocusRedirection : BSSimpleAssertion /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  int fromProcessIdentifier
 @property  BKSHIDEventDeferringToken *fromToken
 @property  int toProcessIdentifier
 @property  BKSHIDEventDeferringToken *toToken

  // instance methods
  -[SBKeyboardFocusRedirection .cxx_destruct]
  -[SBKeyboardFocusRedirection toToken]
  -[SBKeyboardFocusRedirection fromProcessIdentifier]
  -[SBKeyboardFocusRedirection setFromProcessIdentifier:]
  -[SBKeyboardFocusRedirection fromToken]
  -[SBKeyboardFocusRedirection setFromToken:]
  -[SBKeyboardFocusRedirection toProcessIdentifier]
  -[SBKeyboardFocusRedirection setToProcessIdentifier:]
  -[SBKeyboardFocusRedirection setToToken:]


SBKeyboardFocusHoldAssertion : BSSimpleAssertion /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI

SBWorkspaceKeyboardFocusController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBProcessManagerKeyboardFocusDelegate>
 @property  SBMainWorkspace *workspace
 @property  NSHashTable *observers
 @property  NSMutableArray *redirections
 @property  NSMutableArray *holdAssertions
 @property  BSCompoundAssertion *preventProcessFocusAssertion
 @property  <BSInvalidatable> *keyboardFocusRule
 @property  <BSInvalidatable> *compatibilityKeyboardFocusRule
 @property  BKSHIDEventDeferringToken *keyboardFocusToken
 @property  int keyboardFocusPID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWorkspaceKeyboardFocusController new]

  // instance methods
  -[SBWorkspaceKeyboardFocusController keyboardFocusPID]
  -[SBWorkspaceKeyboardFocusController init]
  -[SBWorkspaceKeyboardFocusController setKeyboardFocusPID:]
  -[SBWorkspaceKeyboardFocusController setObservers:]
  -[SBWorkspaceKeyboardFocusController updateKeyboardFocusDeferringRules]
  -[SBWorkspaceKeyboardFocusController setPreventProcessFocusAssertion:]
  -[SBWorkspaceKeyboardFocusController _getSceneKeyboardFocusOverridePID:token:]
  -[SBWorkspaceKeyboardFocusController setCompatibilityKeyboardFocusRule:]
  -[SBWorkspaceKeyboardFocusController .cxx_destruct]
  -[SBWorkspaceKeyboardFocusController lockFocusToSpringBoardForReason:]
  -[SBWorkspaceKeyboardFocusController setKeyboardFocusToken:]
  -[SBWorkspaceKeyboardFocusController initWithWorkspace:]
  -[SBWorkspaceKeyboardFocusController setHoldAssertions:]
  -[SBWorkspaceKeyboardFocusController keyboardFocusRule]
  -[SBWorkspaceKeyboardFocusController compatibilityKeyboardFocusRule]
  -[SBWorkspaceKeyboardFocusController observers]
  -[SBWorkspaceKeyboardFocusController redirections]
  -[SBWorkspaceKeyboardFocusController keyboardFocusToken]
  -[SBWorkspaceKeyboardFocusController setWorkspace:]
  -[SBWorkspaceKeyboardFocusController holdAssertions]
  -[SBWorkspaceKeyboardFocusController redirectFocusForReason:fromProcessIdentifier:fromDeferringToken:toProcessidentifier:toDeferringToken:]
  -[SBWorkspaceKeyboardFocusController removeObserver:]
  -[SBWorkspaceKeyboardFocusController _notifyObserversDidUpdateKeyboardFocusPID:token:]
  -[SBWorkspaceKeyboardFocusController addObserver:]
  -[SBWorkspaceKeyboardFocusController preventProcessFocusAssertion]
  -[SBWorkspaceKeyboardFocusController preventFocusForProcessIdentifier:reason:]
  -[SBWorkspaceKeyboardFocusController setKeyboardFocusRule:]
  -[SBWorkspaceKeyboardFocusController processManager:didSelectKeyboardFocusProcess:deferringToken:]
  -[SBWorkspaceKeyboardFocusController workspace]
  -[SBWorkspaceKeyboardFocusController setRedirections:]


SBDeckSwitcherViewController : SBFluidSwitcherViewController <SBSwitcherAppSuggestionViewControllerDelegate>
 @property  SBSwitcherAppSuggestionViewController *appSuggestionController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeckSwitcherViewController setBestAppSuggestion:]
  -[SBDeckSwitcherViewController bestAppSuggestion]
  -[SBDeckSwitcherViewController _setBestAppSuggestion:animationCompletion:]
  -[SBDeckSwitcherViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBDeckSwitcherViewController orientationForSuggestionViewController:]
  -[SBDeckSwitcherViewController suggestionViewController:activatedSuggestion:]
  -[SBDeckSwitcherViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBDeckSwitcherViewController .cxx_destruct]
  -[SBDeckSwitcherViewController setAppSuggestionController:]
  -[SBDeckSwitcherViewController viewWillLayoutSubviews]
  -[SBDeckSwitcherViewController handleGestureDidBegin:]
  -[SBDeckSwitcherViewController appSuggestionController]
  -[SBDeckSwitcherViewController performTransitionWithContext:animated:alongsideAnimationHandler:completion:]
  -[SBDeckSwitcherViewController initWithRootModifier:liveContentOverlayCoordinator:debugName:]


SBSceneBackgroundedStatusAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSSet *scenes

  // instance methods
  -[SBSceneBackgroundedStatusAssertion scenes]
  -[SBSceneBackgroundedStatusAssertion dealloc]
  -[SBSceneBackgroundedStatusAssertion .cxx_destruct]
  -[SBSceneBackgroundedStatusAssertion invalidate]
  -[SBSceneBackgroundedStatusAssertion initWithScenes:invalidationHandler:]


SBMedusaConfigurationUsageMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMedusaConfigurationUsageMetric init]
  -[SBMedusaConfigurationUsageMetric handleEvent:withContext:]
  -[SBMedusaConfigurationUsageMetric _floatingAppIsActiveForConfiguration:]
  -[SBMedusaConfigurationUsageMetric .cxx_destruct]
  -[SBMedusaConfigurationUsageMetric _trackMedusaConfigChange]


SBMainDisplayWorkspaceAppInteractionEventSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationRestrictionObserver, SBLayoutStateTransitionObserver, BKSTouchDeliveryObserving>
 @property  NSString *currentFocusedBundleID
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainDisplayWorkspaceAppInteractionEventSource sharedInstance]

  // instance methods
  -[SBMainDisplayWorkspaceAppInteractionEventSource _webBookmarkUninstalled:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _displayLayoutDidUpdate:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _userRemovedSuggestion:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource init]
  -[SBMainDisplayWorkspaceAppInteractionEventSource setCurrentFocusedBundleID:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource dealloc]
  -[SBMainDisplayWorkspaceAppInteractionEventSource layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource .cxx_destruct]
  -[SBMainDisplayWorkspaceAppInteractionEventSource touchUpOccuredForIdentifier:detached:context:pid:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource currentFocusedBundleID]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _noteTouchForProcess:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _installedAppsDidChange:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _bundleIDsForIcons:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _userQuitApplication:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource removeObserver:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource touchDetachedForIdentifier:context:pid:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _iconVisibilityDidChange:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource addObserver:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource applicationRestrictionController:didUpdateVisibleTags:hiddenTags:]
  -[SBMainDisplayWorkspaceAppInteractionEventSource _notifyTransition:beginning:]


SBMedusaDecoratedDeviceApplicationSceneViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBSceneViewStatusBarAssertionObserver, SBInlineAppExposeContainerViewControllerDelegate, SBSystemPointerInteractionDelegate, SBMedusaDecoratedDeviceApplicationSceneViewControlling_Internal, SBMedusaDecoratedDeviceApplicationSceneViewControlling>
 @property  UIView *_blurViewContainerView
 @property  BOOL blurred
 @property  double shadowOpacity
 @property  double shadowOffset
 @property  BSCornerRadiusConfiguration *cornerRadiusConfiguration
 @property  unsigned long maskedCorners
 @property  BOOL clipsToBounds
 @property  double darkenViewAlpha
 @property  long long layoutRole
 @property  BOOL shouldRasterizeSceneHostView
 @property  NSString *sceneHostViewMinificationFilter
 @property  MTLumaDodgePillSettings *homeGrabberPillSettings
 @property  UIDropInteraction *dropInteraction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL nubViewHidden
 @property  BOOL nubViewHighlighted
 @property  UIView<SBApplicationSceneBackgroundView> *backgroundView
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  SBHomeGrabberView *homeGrabberView
 @property  long long homeGrabberDisplayMode
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAssertionWithStatusBarHidden:atLevel:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController applicationSceneStatusBarDelegate]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController placeholderContentContext]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setShadowOffset:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setDropInteraction:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController contentInterfaceOrientation]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController homeGrabberView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setPlaceholderContentContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController customContentView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAssertionDidUpdate:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController homeGrabberPillSettings]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController homeGrabberDisplayMode]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setHomeGrabberPillSettings:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneHostViewMinificationFilter]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController willMoveToParentViewController:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController displayMode]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController shouldRasterizeSceneHostView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController dropInteraction]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController backgroundView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController overrideStatusBarStyle]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController shouldBeginPointerInteractionAtLocation:forView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController shadowOffset]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setShadowOpacity:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController shadowOpacity]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setBackgroundView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController contentReferenceSize]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setDisplayMode:animationFactory:completion:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setApplicationSceneStatusBarDelegate:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAlpha]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _beginRequiringSceneViewMatchMoveAnimationForReason:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController inlineContainerViewController:setStatusBarHidden:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController sceneHandle]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setShouldRasterizeSceneHostView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setSceneHostViewMinificationFilter:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController dealloc]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController isNubViewHighlighted]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController effectiveCornerRadius]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController .cxx_destruct]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setClipsToBounds:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController styleForRegion:forView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController darkenViewAlpha]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController containerContentWrapperInterfaceOrientationChangedTo:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setHomeGrabberDisplayMode:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController animationControllerForTransitionRequest:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController viewWillLayoutSubviews]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setLayoutRole:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setNubViewHighlighted:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAssertionDidInvalidate:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController isNubViewHidden]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController SB_conformsToMedusaDecoratedDeviceApplicationSceneViewControlling]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController newSnapshotView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController blurApplicationContent:withAnimationFactory:completion:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setInlineAppExposeContainerViewController:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController pointerInteractionHitTestInsetsForView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setCustomContentView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController isBlurred]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController maskedCorners]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController clipsToBounds]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setMaskedCorners:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController newSnapshotViewOnQueue:withCompletion:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController newSnapshot]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController SB_conformsToSceneLayoutMedusaStatusBarAssertionProviding]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _endRequiringSceneViewMatchMoveAnimationForReason:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController statusBarAssertionWithStatusBarHidden:nubViewHidden:atLevel:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController invalidate]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setNubViewHidden:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController layoutRole]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController cornerRadiusConfiguration]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController loadView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController initWithCoder:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController SB_conformsToSceneLayoutStatusBarAssertionProviding]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setCornerRadiusConfiguration:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController setDarkenViewAlpha:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController initWithDeviceApplicationSceneHandle:inlineContainerViewController:layoutRole:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _blurViewContainerView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _blurContentView]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _setBlurContentView:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _updateNubViewAlpha]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _sceneViewHasMatchMoveAnimation]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _handleNubTapGestureRecognizerAction:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _addSceneViewMatchMoveAnimation]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _removeSceneViewMatchMoveAnimation]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _setAbsoluteDiffuseShadowOpacity:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _setAbsoluteShadowOffset:]
  -[SBMedusaDecoratedDeviceApplicationSceneViewController _setAbsoluteShadowRadius:]


SBNubView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBDeviceApplicationSceneHandleObserver>
 @property  UIView *nubView
 @property  SBDeviceApplicationSceneHandle *deviceApplicationSceneHandle
 @property  BOOL highlighted
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBNubView hitTestWidth]
  +[SBNubView height]

  // instance methods
  -[SBNubView initWithDeviceApplicationSceneHandle:]
  -[SBNubView sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBNubView dealloc]
  -[SBNubView isHighlighted]
  -[SBNubView .cxx_destruct]
  -[SBNubView setHighlighted:]
  -[SBNubView intrinsicContentSize]
  -[SBNubView initWithNibName:bundle:]
  -[SBNubView traitCollectionDidChange:]
  -[SBNubView nubView]
  -[SBNubView sceneHandle:didCreateScene:]
  -[SBNubView initWithCoder:]
  -[SBNubView _updateNubViewOverrideUserInterfaceStyleAndBackgroundColor]
  -[SBNubView _updateNubViewBackgroundColor]
  -[SBNubView deviceApplicationSceneHandle]


SBArcSwipeFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBArcSwipeFloatingSwitcherModifier visibleAppLayouts]
  -[SBArcSwipeFloatingSwitcherModifier scaleForIndex:]
  -[SBArcSwipeFloatingSwitcherModifier topMostLayoutElements]
  -[SBArcSwipeFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBArcSwipeFloatingSwitcherModifier opacityForIndex:]
  -[SBArcSwipeFloatingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBArcSwipeFloatingSwitcherModifier _layoutSettings]
  -[SBArcSwipeFloatingSwitcherModifier frameForIndex:]
  -[SBArcSwipeFloatingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBArcSwipeFloatingSwitcherModifier .cxx_destruct]
  -[SBArcSwipeFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBArcSwipeFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBArcSwipeFloatingSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBArcSwipeFloatingSwitcherModifier transitionWillBegin]
  -[SBArcSwipeFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBArcSwipeFloatingSwitcherModifier transitionWillUpdate]
  -[SBArcSwipeFloatingSwitcherModifier handleTimerEvent:]
  -[SBArcSwipeFloatingSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:floatingConfiguration:direction:needsOvershoot:]


SBPolicyAggregator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBPolicyAggregator allowsTransitionRequest:]


SBPIPBehaviorOverrideAssertion : BSSimpleAssertion /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  NSString *cameraSensorAttributionBundleIdentifier

  // instance methods
  -[SBPIPBehaviorOverrideAssertion .cxx_destruct]
  -[SBPIPBehaviorOverrideAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBPIPBehaviorOverrideAssertion initWithReason:identifier:invalidationBlock:]
  -[SBPIPBehaviorOverrideAssertion cameraSensorAttributionBundleIdentifier]
  -[SBPIPBehaviorOverrideAssertion initWithReason:invalidationBlock:]
  -[SBPIPBehaviorOverrideAssertion initWithReason:identifier:cameraSensorAttributionBundleIdentifier:invalidationBlock:]
  -[SBPIPBehaviorOverrideAssertion behaviorOverrideReason]


SBPIPWindowLevelOverrideAssertion : SBPIPBehaviorOverrideAssertion
 @property  unsigned long windowLevel

  // instance methods
  -[SBPIPWindowLevelOverrideAssertion windowLevel]
  -[SBPIPWindowLevelOverrideAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBPIPWindowLevelOverrideAssertion initWithWindowLevel:reason:identifier:invalidationBlock:]


SBPIPEnvironmentDependentOverrideAssertion : SBPIPBehaviorOverrideAssertion <SBLayoutStateTransitionObserver>
 @property  BOOL invalidatesEarly
 @property  NSSet *allowedEnvironmentModes
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPEnvironmentDependentOverrideAssertion layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBPIPEnvironmentDependentOverrideAssertion dealloc]
  -[SBPIPEnvironmentDependentOverrideAssertion layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBPIPEnvironmentDependentOverrideAssertion .cxx_destruct]
  -[SBPIPEnvironmentDependentOverrideAssertion _layoutCoordinator]
  -[SBPIPEnvironmentDependentOverrideAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBPIPEnvironmentDependentOverrideAssertion initWithReason:identifier:invalidationBlock:]
  -[SBPIPEnvironmentDependentOverrideAssertion initWithReason:invalidationBlock:]
  -[SBPIPEnvironmentDependentOverrideAssertion _updateStateForTransitionWithContext:]
  -[SBPIPEnvironmentDependentOverrideAssertion invalidatesEarly]
  -[SBPIPEnvironmentDependentOverrideAssertion setInvalidatesEarly:]
  -[SBPIPEnvironmentDependentOverrideAssertion allowedEnvironmentModes]
  -[SBPIPEnvironmentDependentOverrideAssertion setAllowedEnvironmentModes:]


SBPIPStashAssertion : SBPIPEnvironmentDependentOverrideAssertion

SBPIPInterruptionAssertion : SBPIPBehaviorOverrideAssertion

SBDismissForEmptySwitcherSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBDismissForEmptySwitcherSwitcherEventResponse init]
  -[SBDismissForEmptySwitcherSwitcherEventResponse type]


SBReusableSnapshotItemContainer : SBFluidSwitcherItemContainer <SBFluidSwitcherItemContainerReusable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBReusableSnapshotItemContainer setAppLayout:]
  -[SBReusableSnapshotItemContainer _snapshotView]
  -[SBReusableSnapshotItemContainer prepareForReuse]
  -[SBReusableSnapshotItemContainer setContentView:]
  -[SBReusableSnapshotItemContainer conformsToProtocolSBFluidSwitcherItemContainerReusable]
  -[SBReusableSnapshotItemContainer initWithFrame:appLayout:delegate:active:]
  -[SBReusableSnapshotItemContainer _updateSnapshotViewWithAppLayout:]


_SBDMPolicyTestAppInfo : SBApplicationInfo
 @property  BOOL testAppBlocked

  // instance methods
  -[_SBDMPolicyTestAppInfo isBlockedForScreenTimeExpiration]
  -[_SBDMPolicyTestAppInfo screenTimePolicy]
  -[_SBDMPolicyTestAppInfo testAppBlocked]
  -[_SBDMPolicyTestAppInfo setTestAppBlocked:]


SBScreenTimeTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBScreenTimeTestRecipe load]
  +[SBScreenTimeTestRecipe _setApplicationBundleIdentifiers:blockedForScreenTimeExpiration:]

  // instance methods
  -[SBScreenTimeTestRecipe title]
  -[SBScreenTimeTestRecipe handleVolumeIncrease]
  -[SBScreenTimeTestRecipe handleVolumeDecrease]
  -[SBScreenTimeTestRecipe _defaultIdentifiers]


SBReduceMotionDeckSwitcherModifier : SBDeckSwitcherModifier
  // instance methods
  -[SBReduceMotionDeckSwitcherModifier homeScreenAlpha]
  -[SBReduceMotionDeckSwitcherModifier scrollProgressForIndex:displayItemsCount:frameOrigin:]
  -[SBReduceMotionDeckSwitcherModifier depthForIndex:displayItemsCount:scrollProgress:]
  -[SBReduceMotionDeckSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBReduceMotionDeckSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBReduceMotionDeckSwitcherModifier _interpageSpacingForPaging]
  -[SBReduceMotionDeckSwitcherModifier titleOpacityForIndex:scrollProgress:]
  -[SBReduceMotionDeckSwitcherModifier leadingOffsetForIndex:displayItemsCount:scrollProgress:]
  -[SBReduceMotionDeckSwitcherModifier homeScreenScale]
  -[SBReduceMotionDeckSwitcherModifier _switcherCardScale]
  -[SBReduceMotionDeckSwitcherModifier opacityForIndex:scrollProgress:]
  -[SBReduceMotionDeckSwitcherModifier _pagingOrigin]
  -[SBReduceMotionDeckSwitcherModifier wallpaperScale]
  -[SBReduceMotionDeckSwitcherModifier resetAdjustedScrollingState]
  -[SBReduceMotionDeckSwitcherModifier _cardWidth]
  -[SBReduceMotionDeckSwitcherModifier indexForScrollProgress:displayItemsCount:frameOrigin:]
  -[SBReduceMotionDeckSwitcherModifier scrollViewAttributes]
  -[SBReduceMotionDeckSwitcherModifier scrollProgressForIndex:]


SBApplicationLaunchAlertEvaluatorFactory : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBApplicationLaunchAlertEvaluatorFactory defaultApplicationLaunchAlertEvaluators]


SBFloatingDockRootViewController : SBFTouchPassThroughViewController /usr/lib/libutil.dylib <SBFloatingDockViewControllerDelegate, UIGestureRecognizerDelegate, SBIconViewQuerying, SBIconLocationPresenting>
 @property  SBIconController *iconController
 @property  SBApplicationController *applicationController
 @property  SBAppSuggestionManager *appSuggestionManager
 @property  SBFloatingDockViewController *floatingDockViewController
 @property  SBLayoutStateTransitionCoordinator *layoutStateTransitionCoordinator
 @property  SBRecentDisplayItemsController *recentsController
 @property  SBRecentDisplayItemsDataStore *recentsDataStore
 @property  BOOL transitioningPresentation
 @property  BOOL useDismissHitTestPadding
 @property  SBFAnalyticsClient *analyticsClient
 @property  SBWorkspaceApplicationSceneTransitionContext *currentTransitionContext
 @property  <SBIconViewProviding> *iconViewProvider
 @property  SBFloatingDockSuggestionsModel *suggestionsModel
 @property  <SBFloatingDockRootViewControllerDelegate> *delegate
 @property  BOOL floatingDockPresented
 @property  BOOL floatingDockFullyPresented
 @property  double presentedProgress
 @property  double maximumFloatingDockHeight
 @property  double floatingDockHeight
 @property  double effectiveFloatingDockHeight
 @property  double preferredVerticalMargin
 @property  double floatingDockViewTopMargin
 @property  double translationFromFullyPresentedFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} floatingDockScreenFrame
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} floatingDockScreenPresentationFrame
 @property  double maximumDockContinuousCornerRadius
 @property  SBApplication *requestedSuggestedApplication
 @property  BOOL presentingFolder
 @property  SBFolderController *presentedFolderController
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  _UILegibilitySettings *legibilitySettings
 @property  SBIconListView *userIconListView
 @property  SBIconListView *suggestionsIconListView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSSet *presentedIconLocations

  // instance methods
  -[SBFloatingDockRootViewController viewDidLoad]
  -[SBFloatingDockRootViewController iconController]
  -[SBFloatingDockRootViewController _handlePanGestureRecognizer:]
  -[SBFloatingDockRootViewController recentsController]
  -[SBFloatingDockRootViewController iconViewForIcon:location:]
  -[SBFloatingDockRootViewController displayLayoutElement]
  -[SBFloatingDockRootViewController legibilitySettings]
  -[SBFloatingDockRootViewController isDisplayingIconView:inLocation:]
  -[SBFloatingDockRootViewController _beginPresentationTransition]
  -[SBFloatingDockRootViewController .cxx_destruct]
  -[SBFloatingDockRootViewController translationFromFullyPresentedFrame]
  -[SBFloatingDockRootViewController floatingDockViewController:didChangeContentHeight:]
  -[SBFloatingDockRootViewController userIconListView]
  -[SBFloatingDockRootViewController maximumDockContinuousCornerRadius]
  -[SBFloatingDockRootViewController presentedFolderController]
  -[SBFloatingDockRootViewController floatingDockScreenFrame]
  -[SBFloatingDockRootViewController floatingDockViewController:didChangeContentFrame:]
  -[SBFloatingDockRootViewController isFloatingDockViewControllerPresentedOverTransitioningContent:]
  -[SBFloatingDockRootViewController isPresentingFolder]
  -[SBFloatingDockRootViewController firstIconViewForIcon:]
  -[SBFloatingDockRootViewController floatingDockViewController:willUseAnimator:forTransitioningWithFolder:presenting:]
  -[SBFloatingDockRootViewController floatingDockViewController:willPerformTransitionWithFolder:presenting:withTransitionCoordinator:]
  -[SBFloatingDockRootViewController minimumHomeScreenScaleForFloatingDockViewController:]
  -[SBFloatingDockRootViewController floatingDockViewController:wantsToBePresented:]
  -[SBFloatingDockRootViewController gestureRecognizerShouldBegin:]
  -[SBFloatingDockRootViewController preferredVerticalMargin]
  -[SBFloatingDockRootViewController floatingDockScreenPresentationFrame]
  -[SBFloatingDockRootViewController layoutUserControlledIconLists:animationType:forceRelayout:]
  -[SBFloatingDockRootViewController presentFolderForIcon:location:animated:completion:]
  -[SBFloatingDockRootViewController floatingDockViewController]
  -[SBFloatingDockRootViewController isFloatingDockFullyPresented]
  -[SBFloatingDockRootViewController firstIconViewForIcon:inLocations:]
  -[SBFloatingDockRootViewController isDisplayingIcon:inLocations:]
  -[SBFloatingDockRootViewController isDisplayingIconView:]
  -[SBFloatingDockRootViewController setLegibilitySettings:]
  -[SBFloatingDockRootViewController floatingDockHeight]
  -[SBFloatingDockRootViewController enumerateDisplayedIconViewsForIcon:usingBlock:]
  -[SBFloatingDockRootViewController initWithNibName:bundle:]
  -[SBFloatingDockRootViewController presentedIconLocations]
  -[SBFloatingDockRootViewController enumerateDisplayedIconViewsUsingBlock:]
  -[SBFloatingDockRootViewController isDisplayingIcon:inLocation:]
  -[SBFloatingDockRootViewController setDelegate:]
  -[SBFloatingDockRootViewController gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBFloatingDockRootViewController floatingDockViewTopMargin]
  -[SBFloatingDockRootViewController isDisplayingIcon:]
  -[SBFloatingDockRootViewController firstIconViewForIcon:excludingLocations:]
  -[SBFloatingDockRootViewController viewDidLayoutSubviews]
  -[SBFloatingDockRootViewController delegate]
  -[SBFloatingDockRootViewController iconViewProvider]
  -[SBFloatingDockRootViewController initWithCoder:]
  -[SBFloatingDockRootViewController isPresentingIconLocation:]
  -[SBFloatingDockRootViewController setFloatingDockViewController:]
  -[SBFloatingDockRootViewController applicationController]
  -[SBFloatingDockRootViewController layoutStateTransitionCoordinator]
  -[SBFloatingDockRootViewController isFloatingDockPresented]
  -[SBFloatingDockRootViewController registerAsSharedInstance]
  -[SBFloatingDockRootViewController suggestionsIconListView]
  -[SBFloatingDockRootViewController suggestionsModel]
  -[SBFloatingDockRootViewController requestedSuggestedApplication]
  -[SBFloatingDockRootViewController setRequestedSuggestedApplication:]
  -[SBFloatingDockRootViewController recentsDataStore]
  -[SBFloatingDockRootViewController appSuggestionManager]
  -[SBFloatingDockRootViewController setLayoutStateTransitionCoordinator:]
  -[SBFloatingDockRootViewController initWithIconController:applicationController:recentsController:recentsDataStore:appSuggestionManager:layoutStateTransitionCoordinator:iconViewProvider:analyticsClient:]
  -[SBFloatingDockRootViewController maximumFloatingDockHeight]
  -[SBFloatingDockRootViewController effectiveFloatingDockHeight]
  -[SBFloatingDockRootViewController dismissPresentedFolderAnimated:withTransitionContext:completion:]
  -[SBFloatingDockRootViewController setPresentationProgress:animated:interactive:withCompletion:]
  -[SBFloatingDockRootViewController presentedProgress]
  -[SBFloatingDockRootViewController isTransitioningPresentation]
  -[SBFloatingDockRootViewController prepareForTransitionToEnvironmentMode:fromDockVisible:toDockVisible:]
  -[SBFloatingDockRootViewController cleanupAfterTransitionToEnvironmentMode:]
  -[SBFloatingDockRootViewController setSuggestionsModel:]
  -[SBFloatingDockRootViewController _layoutFloatingDockViewWithProgress:]
  -[SBFloatingDockRootViewController setPresentationProgress:interactive:withCompletion:]
  -[SBFloatingDockRootViewController _setPresentedProgress:animated:interactive:completion:]
  -[SBFloatingDockRootViewController setPresentationProgress:interactive:]
  -[SBFloatingDockRootViewController setCurrentTransitionContext:]
  -[SBFloatingDockRootViewController setUseDismissHitTestPadding:]
  -[SBFloatingDockRootViewController useDismissHitTestPadding]
  -[SBFloatingDockRootViewController _calculateStandardDockFrame]
  -[SBFloatingDockRootViewController _endPresentationTransition]
  -[SBFloatingDockRootViewController setTransitioningPresentation:]
  -[SBFloatingDockRootViewController _floatingDockViewTranslation]
  -[SBFloatingDockRootViewController _floatingDockViewTranslationForHeight:]
  -[SBFloatingDockRootViewController currentTransitionContext]
  -[SBFloatingDockRootViewController setPresentationProgressInteractively:withCompletion:]
  -[SBFloatingDockRootViewController setPresentationProgressInteractively:]
  -[SBFloatingDockRootViewController setPresentationProgress:animated:interactive:]
  -[SBFloatingDockRootViewController setRecentsController:]
  -[SBFloatingDockRootViewController setRecentsDataStore:]
  -[SBFloatingDockRootViewController analyticsClient]
  -[SBFloatingDockRootViewController setAnalyticsClient:]


SBExternalDisplayManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBSDisplayObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBExternalDisplayManager init]
  -[SBExternalDisplayManager .cxx_destruct]
  -[SBExternalDisplayManager displayMonitor:didConnectIdentity:withConfiguration:]
  -[SBExternalDisplayManager displayMonitor:didUpdateIdentity:withConfiguration:]
  -[SBExternalDisplayManager initWithDisplayMonitor:mainWorkspace:userAuthenticationProvider:mainSceneManager:]
  -[SBExternalDisplayManager displayMonitor:willDisconnectIdentity:]


SBFullScreenToHomePiPSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBFullScreenToHomePiPSwitcherModifier homeScreenBackdropBlurType]
  -[SBFullScreenToHomePiPSwitcherModifier visibleAppLayouts]
  -[SBFullScreenToHomePiPSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBFullScreenToHomePiPSwitcherModifier scaleForIndex:]
  -[SBFullScreenToHomePiPSwitcherModifier isHomeScreenContentRequired]
  -[SBFullScreenToHomePiPSwitcherModifier topMostLayoutElements]
  -[SBFullScreenToHomePiPSwitcherModifier isSwitcherWindowVisible]
  -[SBFullScreenToHomePiPSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToHomePiPSwitcherModifier wallpaperStyle]
  -[SBFullScreenToHomePiPSwitcherModifier cardCornerRadiiForIndex:]
  -[SBFullScreenToHomePiPSwitcherModifier opacityForIndex:]
  -[SBFullScreenToHomePiPSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBFullScreenToHomePiPSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBFullScreenToHomePiPSwitcherModifier frameForIndex:]
  -[SBFullScreenToHomePiPSwitcherModifier .cxx_destruct]
  -[SBFullScreenToHomePiPSwitcherModifier transitionWillBegin]
  -[SBFullScreenToHomePiPSwitcherModifier didMoveToParentModifier:]
  -[SBFullScreenToHomePiPSwitcherModifier rotationAngleForIndex:]
  -[SBFullScreenToHomePiPSwitcherModifier completesWhenChildrenComplete]
  -[SBFullScreenToHomePiPSwitcherModifier initWithTransitionID:zoomModifier:appLayout:]
  -[SBFullScreenToHomePiPSwitcherModifier _shouldApplyMorphToPipToIndex:]
  -[SBFullScreenToHomePiPSwitcherModifier _isIndexSelectedAppLayout:]


SBApplicationHarmonyService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationServerHarmonyDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationHarmonyService sharedInstance]

  // instance methods
  -[SBApplicationHarmonyService init]
  -[SBApplicationHarmonyService applicationServer:client:fetchWhitePointAdaptivityStyleForDisplayId:withCompletion:]


SBLoginAppContainerViewController : SBLockScreenViewControllerBase <SBLockScreenBatteryChargingViewControllerDelegate, SBLoginAppSceneHosterDelegate, SBWallpaperObserver, SBLockScreenPluginManagerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLoginAppContainerViewController noteDeviceBlockedStatusUpdated]
  -[SBLoginAppContainerViewController willUIUnlockFromSource:]
  -[SBLoginAppContainerViewController shouldDisableALS]
  -[SBLoginAppContainerViewController suppressesControlCenter]
  -[SBLoginAppContainerViewController shouldAutoUnlockForSource:]
  -[SBLoginAppContainerViewController suppressesScreenshots]
  -[SBLoginAppContainerViewController prepareForUIUnlock]
  -[SBLoginAppContainerViewController canBeDeactivatedForUIUnlockFromSource:]
  -[SBLoginAppContainerViewController startLockScreenFadeInAnimationForSource:]
  -[SBLoginAppContainerViewController prepareForUILock]
  -[SBLoginAppContainerViewController wallpaperLegibilitySettingsDidChange:forVariant:]
  -[SBLoginAppContainerViewController handleVolumeDownButtonPress]
  -[SBLoginAppContainerViewController handleVolumeUpButtonPress]
  -[SBLoginAppContainerViewController wallpaperDidChangeForVariant:]
  -[SBLoginAppContainerViewController handleHomeButtonDoublePress]
  -[SBLoginAppContainerViewController shouldShowLockStatusBarTime]
  -[SBLoginAppContainerViewController disableLockScreenPluginWithContext:]
  -[SBLoginAppContainerViewController dealloc]
  -[SBLoginAppContainerViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBLoginAppContainerViewController enableLockScreenPluginWithContext:]
  -[SBLoginAppContainerViewController .cxx_destruct]
  -[SBLoginAppContainerViewController pluginManager:activePluginDidChange:]
  -[SBLoginAppContainerViewController pluginManager:displayedPluginDidChangeFromPlugin:toPlugin:]
  -[SBLoginAppContainerViewController pluginManager:displayedPluginDidUpdateAppearance:]
  -[SBLoginAppContainerViewController initWithNibName:bundle:]
  -[SBLoginAppContainerViewController _updateLegibility]
  -[SBLoginAppContainerViewController pluginManager:didLoadPlugin:]
  -[SBLoginAppContainerViewController viewWillAppear:]
  -[SBLoginAppContainerViewController pluginManager:plugin:handleAction:]
  -[SBLoginAppContainerViewController _canShowWhileLocked]
  -[SBLoginAppContainerViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBLoginAppContainerViewController viewWillDisappear:]
  -[SBLoginAppContainerViewController loadView]
  -[SBLoginAppContainerViewController pluginManager:willUnloadPlugin:]
  -[SBLoginAppContainerViewController sceneUpdatedIdleTimerMode:]
  -[SBLoginAppContainerViewController sceneUpdatedStatusBarUserName:]
  -[SBLoginAppContainerViewController sceneUpdatedRotationMode:]
  -[SBLoginAppContainerViewController sceneUpdatedWallpaperMode:]
  -[SBLoginAppContainerViewController sceneInvalidated]
  -[SBLoginAppContainerViewController _statusBarSettingsAssertion]
  -[SBLoginAppContainerViewController chargingViewControllerFadedOutContent:]
  -[SBLoginAppContainerViewController initWithNibName:bundle:sceneHoster:wallpaperController:]
  -[SBLoginAppContainerViewController _handleBacklightFadeEnded]
  -[SBLoginAppContainerViewController _reallyRelinquishStatusBarAssertion]
  -[SBLoginAppContainerViewController _showOrHideThermalTrapUIAnimated:]
  -[SBLoginAppContainerViewController _updateBatteryChargingViewAnimated:]
  -[SBLoginAppContainerViewController loginContainerView]
  -[SBLoginAppContainerViewController _setupLoginScene]
  -[SBLoginAppContainerViewController _cleanupBatteryChargingViewWithAnimationDuration:]
  -[SBLoginAppContainerViewController _addBatteryChargingView]
  -[SBLoginAppContainerViewController _fadeViewsForChargingViewVisible:]
  -[SBLoginAppContainerViewController _removeBatteryChargingView]
  -[SBLoginAppContainerViewController _initWithSceneHoster:wallpaperController:]
  -[SBLoginAppContainerViewController addLoginObserver:]
  -[SBLoginAppContainerViewController removeLoginObserver:]
  -[SBLoginAppContainerViewController requiresPasscodeInputForUIUnlockFromSource:withOptions:]
  -[SBLoginAppContainerViewController _displayLayoutElementIdentifier]
  -[SBLoginAppContainerViewController _setupLoginAppHosting]
  -[SBLoginAppContainerViewController _killLoginApp]
  -[SBLoginAppContainerViewController _hostedAppBundleID]
  -[SBLoginAppContainerViewController _hostedAppView]
  -[SBLoginAppContainerViewController _hostedSceneIdentifier]
  -[SBLoginAppContainerViewController _reallyAcquireStatusBarAssertionIfNecessaryInitiallyVisible:]


SBAnalyticsAggdInterface : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBAnalyticsAggdInterface sharedInstance]

  // instance methods
  -[SBAnalyticsAggdInterface addValue:forScalarKey:]
  -[SBAnalyticsAggdInterface setValue:forScalarKey:]


SBCardItemsController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBCardItemsControllerRemoteInterface, NSXPCListenerDelegate>
 @property  SBWalletNotificationSource *walletNotificationSource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCardItemsController init]
  -[SBCardItemsController setCardItems:forControllerWithIdentifier:]
  -[SBCardItemsController getCardItemsForControllerWithIdentifier:withHandler:]
  -[SBCardItemsController dealloc]
  -[SBCardItemsController .cxx_destruct]
  -[SBCardItemsController listener:shouldAcceptNewConnection:]
  -[SBCardItemsController walletNotificationSource]
  -[SBCardItemsController setWalletNotificationSource:]
  -[SBCardItemsController _updateRestrictions]
  -[SBCardItemsController _updateCardItem:]
  -[SBCardItemsController _updateThumbnailForCardItem:withSnapshotter:completion:]
  -[SBCardItemsController _activateCardItem:animated:]
  -[SBCardItemsController _deactivateCardItem:]


SBSwitcherDemoCommandsServer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSServiceConnectionListenerDelegate, SBSSwitcherDemoCommandsClientToServerInterface>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherDemoCommandsServer updateHiddenApplicationBundleIDs:]
  -[SBSwitcherDemoCommandsServer setShouldDisableSwitcherModelUpdates:]
  -[SBSwitcherDemoCommandsServer loadStashedSwitcherModelFromPath:]
  -[SBSwitcherDemoCommandsServer .cxx_destruct]
  -[SBSwitcherDemoCommandsServer listener:didReceiveConnection:withContext:]
  -[SBSwitcherDemoCommandsServer _queue_removeConnection:]
  -[SBSwitcherDemoCommandsServer stashSwitcherModelToPath:]
  -[SBSwitcherDemoCommandsServer _queue_addConnection:]
  -[SBSwitcherDemoCommandsServer initWithRecentAppLayouts:demoFilteringController:]


SBAlertLayoutPresentationVerifier : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIActiveOrientationObserver, SBReachabilityObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAlertLayoutPresentationVerifier activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBAlertLayoutPresentationVerifier handleReachabilityYOffsetDidChange]
  -[SBAlertLayoutPresentationVerifier init]
  -[SBAlertLayoutPresentationVerifier dealloc]
  -[SBAlertLayoutPresentationVerifier .cxx_destruct]
  -[SBAlertLayoutPresentationVerifier scheduleAlertLayoutVerificationForReason:]
  -[SBAlertLayoutPresentationVerifier setAlertPresenter:]
  -[SBAlertLayoutPresentationVerifier setAlertItemWindow:]
  -[SBAlertLayoutPresentationVerifier activeInterfaceOrientationWillChangeToOrientation:]


SBLockScreenTemperatureWarningView : SBLockOverlayView
  // instance methods
  -[SBLockScreenTemperatureWarningView _titleFont]
  -[SBLockScreenTemperatureWarningView initWithFrame:]
  -[SBLockScreenTemperatureWarningView _subtitleFont]
  -[SBLockScreenTemperatureWarningView .cxx_destruct]
  -[SBLockScreenTemperatureWarningView layoutSubviews]
  -[SBLockScreenTemperatureWarningView _titleBaseline]
  -[SBLockScreenTemperatureWarningView _subtitleBaseline]
  -[SBLockScreenTemperatureWarningView _iconYPosition]


SBBiometricMonitorView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  long long matchState
 @property  long long presenceDetectState
 @property  long long poseState

  // instance methods
  -[SBBiometricMonitorView initWithFrame:]
  -[SBBiometricMonitorView .cxx_destruct]
  -[SBBiometricMonitorView hitTest:withEvent:]
  -[SBBiometricMonitorView layoutSubviews]
  -[SBBiometricMonitorView setMatchState:]
  -[SBBiometricMonitorView setPresenceDetectState:]
  -[SBBiometricMonitorView setPoseState:]
  -[SBBiometricMonitorView matchState]
  -[SBBiometricMonitorView presenceDetectState]
  -[SBBiometricMonitorView poseState]


SBElasticSliderView : MediaControlsVolumeSliderView /System/Library/PrivateFrameworks/UserNotificationsTranslation.framework/UserNotificationsTranslation
 @property  double additiveGlyphScaleFactor

  // instance methods
  -[SBElasticSliderView glyphCenter]
  -[SBElasticSliderView setAxis:]
  -[SBElasticSliderView initWithFrame:]
  -[SBElasticSliderView createBackgroundView]
  -[SBElasticSliderView additiveGlyphScaleFactor]
  -[SBElasticSliderView setAdditiveGlyphScaleFactor:]
  -[SBElasticSliderView _updateGlyphScaleForAdditiveScaleOrAxisUpdate]
  -[SBElasticSliderView stopGlyphAnimations]


SBApplicationSupportServiceRequestContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  UISApplicationInitializationContext *applicationInitializationContext

  // class methods
  +[SBApplicationSupportServiceRequestContext hostingApplicationBundleIDForPid:]
  +[SBApplicationSupportServiceRequestContext _hostProcessForProcess:]
  +[SBApplicationSupportServiceRequestContext initializationContextForClient:]

  // instance methods
  -[SBApplicationSupportServiceRequestContext initWithApplication:]
  -[SBApplicationSupportServiceRequestContext _main_applicationInitializationContext]
  -[SBApplicationSupportServiceRequestContext _main_persistenceIDs]
  -[SBApplicationSupportServiceRequestContext .cxx_destruct]
  -[SBApplicationSupportServiceRequestContext _main_displayContext]
  -[SBApplicationSupportServiceRequestContext initWithClient:host:]
  -[SBApplicationSupportServiceRequestContext _main_effectiveClassicMode]
  -[SBApplicationSupportServiceRequestContext _main_effectiveScreenType]
  -[SBApplicationSupportServiceRequestContext _main_deviceContext]
  -[SBApplicationSupportServiceRequestContext applicationInitializationContext]


SBLockToAppStatusBarAnimator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBLockToAppStatusBarAnimator .cxx_destruct]
  -[SBLockToAppStatusBarAnimator animateStatusBarFromLockToHome]


SBSystemHapticsPreferencesMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemHapticsPreferencesMetric init]
  -[SBSystemHapticsPreferencesMetric handleEvent:withContext:]
  -[SBSystemHapticsPreferencesMetric .cxx_destruct]


SBHomeGestureFloatingSwitcherModifier : SBGestureSwitcherModifier <SBHomeGestureDockSwitcherModifierDelegate, SBHomeGestureFinalDestinationSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureFloatingSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureFloatingSwitcherModifier scaleForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier topMostLayoutElements]
  -[SBHomeGestureFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeGestureFloatingSwitcherModifier handleMainTransitionEvent:]
  -[SBHomeGestureFloatingSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBHomeGestureFloatingSwitcherModifier cardCornerRadiiForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier opacityForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureFloatingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBHomeGestureFloatingSwitcherModifier frameForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier .cxx_destruct]
  -[SBHomeGestureFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBHomeGestureFloatingSwitcherModifier didMoveToParentModifier:]
  -[SBHomeGestureFloatingSwitcherModifier darkeningAlphaForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier shadowOffsetForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBHomeGestureFloatingSwitcherModifier shadowOpacityForIndex:]
  -[SBHomeGestureFloatingSwitcherModifier handleGestureEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBHomeGestureFloatingSwitcherModifier currentFinalDestination]
  -[SBHomeGestureFloatingSwitcherModifier _responseForActivatingFinalDestination:]
  -[SBHomeGestureFloatingSwitcherModifier unconditionalDistanceThresholdForHome]
  -[SBHomeGestureFloatingSwitcherModifier initWithGestureID:selectedAppLayout:continuingGesture:lastGestureWasAnArcSwipe:]
  -[SBHomeGestureFloatingSwitcherModifier _updateGestureTranslationAndVelocityWithEvent:]
  -[SBHomeGestureFloatingSwitcherModifier _beginAnimatingRampingPropertyWithSettings:]


SBBiometricEventLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIBiometricResourceObserver>
 @property  unsigned long fingerOnTime
 @property  BOOL fingerOnWithScreenOn
 @property  unsigned long keybagUnlockTime
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBiometricEventLogger sharedInstance]
  +[SBBiometricEventLogger logEvent:]
  +[SBBiometricEventLogger logClass:code:]

  // instance methods
  -[SBBiometricEventLogger _clearEverything]
  -[SBBiometricEventLogger _passcodeAuthenticationSucceeded]
  -[SBBiometricEventLogger init]
  -[SBBiometricEventLogger _keybagBioUnlock:]
  -[SBBiometricEventLogger timestampEvent:]
  -[SBBiometricEventLogger _coversheetSwipedForDismissal:]
  -[SBBiometricEventLogger setKeybagUnlockTime:]
  -[SBBiometricEventLogger _shouldSyslogTimestamps]
  -[SBBiometricEventLogger _fingerOn:]
  -[SBBiometricEventLogger .cxx_destruct]
  -[SBBiometricEventLogger _backlightLevelChanged:]
  -[SBBiometricEventLogger biometricResource:observeEvent:]
  -[SBBiometricEventLogger _biometricAuthenticationFailed]
  -[SBBiometricEventLogger _biometricAuthenticationSucceeded]
  -[SBBiometricEventLogger _passcodeViewTransitionedToPasscode:]
  -[SBBiometricEventLogger fingerOnWithScreenOn]
  -[SBBiometricEventLogger fingerOnTime]
  -[SBBiometricEventLogger _machTimeInMilliseconds]
  -[SBBiometricEventLogger _unlockAnimationWillStart:]
  -[SBBiometricEventLogger _resetPasscodeStateMachine]
  -[SBBiometricEventLogger _prearmMatch:]
  -[SBBiometricEventLogger setFingerOnTime:]
  -[SBBiometricEventLogger _systemDidWakeFromSleep:]
  -[SBBiometricEventLogger keybagUnlockTime]
  -[SBBiometricEventLogger _screenTurnedOn:]
  -[SBBiometricEventLogger _authRequestCompleted:]
  -[SBBiometricEventLogger _tryAgain:]
  -[SBBiometricEventLogger setFingerOnWithScreenOn:]
  -[SBBiometricEventLogger _passcodePromptCancelled:]


SBEventObserverRegistry : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBEventObserverRegistry sharedInstance]

  // instance methods
  -[SBEventObserverRegistry .cxx_destruct]
  -[SBEventObserverRegistry handleEvent:token:action:]
  -[SBEventObserverRegistry setValue:forState:]
  -[SBEventObserverRegistry postEventToInterestedObservers:]
  -[SBEventObserverRegistry addObserverWithToken:forEvent:]
  -[SBEventObserverRegistry removeObserverWithToken:forEvent:]


SBSpotlightTransitionAnimator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <PTSettingsKeyObserver, SBViewControllerInteractiveAnimatedTransitioning>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpotlightTransitionAnimator supportsRestarting]
  -[SBSpotlightTransitionAnimator transitionDuration:]
  -[SBSpotlightTransitionAnimator updateTransition:withPercentComplete:]
  -[SBSpotlightTransitionAnimator settings:changedValueForKey:]
  -[SBSpotlightTransitionAnimator init]
  -[SBSpotlightTransitionAnimator _prototypeSettingsChanged]
  -[SBSpotlightTransitionAnimator _animateIntoSearch:]
  -[SBSpotlightTransitionAnimator cancelTransition:withCompletionSpeed:completionCurve:]
  -[SBSpotlightTransitionAnimator _animateInteractiveTransition:]
  -[SBSpotlightTransitionAnimator .cxx_destruct]
  -[SBSpotlightTransitionAnimator finishInteractiveTransition:withCompletionSpeed:completionCurve:]
  -[SBSpotlightTransitionAnimator _finishInteractiveTransition:withCompletionSpeed:completionCurve:]
  -[SBSpotlightTransitionAnimator animateTransition:]
  -[SBSpotlightTransitionAnimator _cancelInteractiveTransition:withCompletionSpeed:completionCurve:]
  -[SBSpotlightTransitionAnimator _restoreSpotlightHeaderToInitiatingViewController]
  -[SBSpotlightTransitionAnimator _updateTransitionIntoSearch:percentComplete:]
  -[SBSpotlightTransitionAnimator _restoreSpotlightHeaderToInitiatingViewControllerForCancellation:]
  -[SBSpotlightTransitionAnimator shouldMoveIntoSearchOnCancel]
  -[SBSpotlightTransitionAnimator _prepareToAnimate]
  -[SBSpotlightTransitionAnimator _percentVisibleForPercentComplete:]
  -[SBSpotlightTransitionAnimator percentComplete]
  -[SBSpotlightTransitionAnimator _cleanupAfterAnimating:]
  -[SBSpotlightTransitionAnimator shouldMoveIntoSearch]


SBSpotlightTransitionInteractor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBViewControllerInteractiveTransitioning>
 @property  double completionSpeed
 @property  long long completionCurve
 @property  BOOL wantsInteractiveStart
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSpotlightTransitionInteractor cancelTransition]
  -[SBSpotlightTransitionInteractor init]
  -[SBSpotlightTransitionInteractor setCompletionCurve:]
  -[SBSpotlightTransitionInteractor initWithAnimator:]
  -[SBSpotlightTransitionInteractor updateTransition:]
  -[SBSpotlightTransitionInteractor .cxx_destruct]
  -[SBSpotlightTransitionInteractor setCompletionSpeed:]
  -[SBSpotlightTransitionInteractor completionSpeed]
  -[SBSpotlightTransitionInteractor completionCurve]
  -[SBSpotlightTransitionInteractor startInteractiveTransition:]
  -[SBSpotlightTransitionInteractor finishInteractiveTransition]


SBAppClipOverlayCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBAppClipOverlayCoordinator init]
  -[SBAppClipOverlayCoordinator .cxx_destruct]
  -[SBAppClipOverlayCoordinator overlayViewControllerForBundleIdentifier:webClipIdentifier:participant:]
  -[SBAppClipOverlayCoordinator participant:didSurrenderViewController:]
  -[SBAppClipOverlayCoordinator _existingOverlayViewControllerForWebClipIdentifier:]


SBMatchMoveToIconViewSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  BOOL active

  // instance methods
  -[SBMatchMoveToIconViewSwitcherEventResponse appLayout]
  -[SBMatchMoveToIconViewSwitcherEventResponse .cxx_destruct]
  -[SBMatchMoveToIconViewSwitcherEventResponse type]
  -[SBMatchMoveToIconViewSwitcherEventResponse isActive]
  -[SBMatchMoveToIconViewSwitcherEventResponse initWithAppLayout:active:]
  -[SBMatchMoveToIconViewSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]


SBUIAnimationControllerAnimator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBViewControllerAnimatedTransitioning>
 @property  SBUIAnimationController *animationController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIAnimationControllerAnimator transitionDuration:]
  -[SBUIAnimationControllerAnimator init]
  -[SBUIAnimationControllerAnimator transitionAnimationFactory:]
  -[SBUIAnimationControllerAnimator .cxx_destruct]
  -[SBUIAnimationControllerAnimator animateTransition:]
  -[SBUIAnimationControllerAnimator animationController]
  -[SBUIAnimationControllerAnimator initWithAnimationController:]


SBHomeGestureDockSwitcherModifier : SBSwitcherModifier
 @property  BOOL currentlyTrackingDock

  // instance methods
  -[SBHomeGestureDockSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBHomeGestureDockSwitcherModifier wantsDockBehaviorAssertion]
  -[SBHomeGestureDockSwitcherModifier dockProgress]
  -[SBHomeGestureDockSwitcherModifier .cxx_destruct]
  -[SBHomeGestureDockSwitcherModifier dockUpdateMode]
  -[SBHomeGestureDockSwitcherModifier dockWindowLevel]
  -[SBHomeGestureDockSwitcherModifier didMoveToParentModifier:]
  -[SBHomeGestureDockSwitcherModifier _applyPrototypeSettings]
  -[SBHomeGestureDockSwitcherModifier dockWindowLevelPriority]
  -[SBHomeGestureDockSwitcherModifier studyLogData]
  -[SBHomeGestureDockSwitcherModifier handleGestureEvent:]
  -[SBHomeGestureDockSwitcherModifier initWithDelegate:startingEnvironmentMode:requireVerticalSwipeToTrackDock:]
  -[SBHomeGestureDockSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBHomeGestureDockSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBHomeGestureDockSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBHomeGestureDockSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBHomeGestureDockSwitcherModifier translationForAdjustedTranslation:]
  -[SBHomeGestureDockSwitcherModifier adjustedTranslationForTranslation:]
  -[SBHomeGestureDockSwitcherModifier isCurrentlyTrackingDock]
  -[SBHomeGestureDockSwitcherModifier _hasTraveledSufficientDistanceForHomeOrAppSwitcher]
  -[SBHomeGestureDockSwitcherModifier adjustedFinalDestinationForDestination:withTranslation:velocity:]
  -[SBHomeGestureDockSwitcherModifier _updateGestureTranslationAndVelocityWithEvent:]
  -[SBHomeGestureDockSwitcherModifier _rubberbandedOutOfDockHorizontally]
  -[SBHomeGestureDockSwitcherModifier _shouldPresentDockForFinalDestination:]


SBDeviceOrientationUpdateManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL currentlyDeferringOrientationUpdates
 @property  long long lastUpdatedDeviceOrientation

  // instance methods
  -[SBDeviceOrientationUpdateManager init]
  -[SBDeviceOrientationUpdateManager lastUpdatedDeviceOrientation]
  -[SBDeviceOrientationUpdateManager dealloc]
  -[SBDeviceOrientationUpdateManager .cxx_destruct]
  -[SBDeviceOrientationUpdateManager _deviceOrientationUpdateNeededForOrientation:]
  -[SBDeviceOrientationUpdateManager succinctDescriptionBuilder]
  -[SBDeviceOrientationUpdateManager isCurrentlyDeferringOrientationUpdates]
  -[SBDeviceOrientationUpdateManager setLastUpdatedDeviceOrientation:]
  -[SBDeviceOrientationUpdateManager deviceOrientationUpdateDeferralAssertionWithReason:]
  -[SBDeviceOrientationUpdateManager succinctDescription]
  -[SBDeviceOrientationUpdateManager _enqueueOrientationUpdateToDeviceOrientation:]
  -[SBDeviceOrientationUpdateManager _endDeferringOrientationUpdatesForAssertion:]
  -[SBDeviceOrientationUpdateManager descriptionWithMultilinePrefix:]
  -[SBDeviceOrientationUpdateManager descriptionBuilderWithMultilinePrefix:]


SBDeviceOrientationUpdateDeferralAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  SBDeviceOrientationUpdateManager *hackyBackReference
 @property  BOOL invalidated
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceOrientationUpdateDeferralAssertion initWithReason:]
  -[SBDeviceOrientationUpdateDeferralAssertion init]
  -[SBDeviceOrientationUpdateDeferralAssertion dealloc]
  -[SBDeviceOrientationUpdateDeferralAssertion .cxx_destruct]
  -[SBDeviceOrientationUpdateDeferralAssertion hackyBackReference]
  -[SBDeviceOrientationUpdateDeferralAssertion _setHackyBackReference:]
  -[SBDeviceOrientationUpdateDeferralAssertion isInvalidated]
  -[SBDeviceOrientationUpdateDeferralAssertion invalidate]
  -[SBDeviceOrientationUpdateDeferralAssertion reason]


SBVoiceControlPresentationSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long sourceType
 @property  BluetoothDevice *bluetoothDevice

  // class methods
  +[SBVoiceControlPresentationSource sourceFromHomeButton]
  +[SBVoiceControlPresentationSource sourceFromHeadsetButton]
  +[SBVoiceControlPresentationSource sourceFromBluetoothDevice:]

  // instance methods
  -[SBVoiceControlPresentationSource sourceType]
  -[SBVoiceControlPresentationSource .cxx_destruct]
  -[SBVoiceControlPresentationSource _initWithSourceType:]
  -[SBVoiceControlPresentationSource bluetoothDevice]


SBWindowScene : UIWindowScene /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBWindowScene _windowsIgnoreSceneClientOrientation]


SBApplicationSceneSpecification : UIApplicationSceneSpecification /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBApplicationSceneSpecification baseSceneComponentClassDictionary]
  -[SBApplicationSceneSpecification uiSceneMinimumClass]


SBCoverSheetBiometricResourceObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIBiometricResourceObserver, SBPearlMatchingStateProvider>
 @property  BOOL seenMatchResultSinceScreenOn
 @property  <SBUIBiometricResource> *biometricResource
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBPearlMatchingStateProviderDelegate> *delegate
 @property  BOOL pearlMatchEnabledAndPossible

  // instance methods
  -[SBCoverSheetBiometricResourceObserver seenMatchResultSinceScreenOn]
  -[SBCoverSheetBiometricResourceObserver biometricResource]
  -[SBCoverSheetBiometricResourceObserver setBiometricResource:]
  -[SBCoverSheetBiometricResourceObserver initWithBiometricResource:]
  -[SBCoverSheetBiometricResourceObserver .cxx_destruct]
  -[SBCoverSheetBiometricResourceObserver biometricResource:observeEvent:]
  -[SBCoverSheetBiometricResourceObserver setSeenMatchResultSinceScreenOn:]
  -[SBCoverSheetBiometricResourceObserver reset]
  -[SBCoverSheetBiometricResourceObserver pearlMatchEnabledAndPossible]
  -[SBCoverSheetBiometricResourceObserver setDelegate:]
  -[SBCoverSheetBiometricResourceObserver delegate]


SBSwitcherSnapshotImageView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIImage *image
 @property  double cornerRadius
 @property  unsigned long maskedCorners
 @property  BOOL usesNonuniformScaling
 @property  BOOL hasOpaqueContents
 @property  long long orientationForClassicLayout

  // instance methods
  -[SBSwitcherSnapshotImageView _updateCornerRadius]
  -[SBSwitcherSnapshotImageView initWithImage:]
  -[SBSwitcherSnapshotImageView setCornerRadius:]
  -[SBSwitcherSnapshotImageView .cxx_destruct]
  -[SBSwitcherSnapshotImageView setImage:]
  -[SBSwitcherSnapshotImageView scalingTransform]
  -[SBSwitcherSnapshotImageView image]
  -[SBSwitcherSnapshotImageView usesNonuniformScaling]
  -[SBSwitcherSnapshotImageView _transformVerticalScale]
  -[SBSwitcherSnapshotImageView _isUsingExternalClassicLayout]
  -[SBSwitcherSnapshotImageView maskedCorners]
  -[SBSwitcherSnapshotImageView _transformScale]
  -[SBSwitcherSnapshotImageView setMaskedCorners:]
  -[SBSwitcherSnapshotImageView setOrientationForClassicLayout:]
  -[SBSwitcherSnapshotImageView setUsesNonuniformScaling:]
  -[SBSwitcherSnapshotImageView setHasOpaqueContents:]
  -[SBSwitcherSnapshotImageView _transformHorizontalScale]
  -[SBSwitcherSnapshotImageView cornerRadius]
  -[SBSwitcherSnapshotImageView orientationForClassicLayout]
  -[SBSwitcherSnapshotImageView layoutSubviews]
  -[SBSwitcherSnapshotImageView hasOpaqueContents]


SBDeckSwitcherPanGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction <SBHomeGrabberDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeckSwitcherPanGestureWorkspaceTransaction shouldAllowThinStyleForHomeGrabberView:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction shouldAllowAutoHideForHomeGrabberView:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction additionalEdgeSpacingForHomeGrabberView:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _didComplete]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _begin]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _gestureType]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _removeHysteresisFromTranslation]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _beginWithGesture:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction _finishWithGesture:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction selectedAppLayoutForGestureRecognizer:]
  -[SBDeckSwitcherPanGestureWorkspaceTransaction touchHistoryProvidingGesture]


SBTestTransitionSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBTestTransitionSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBTestTransitionSwitcherModifier setShouldRasterizeLiveContentUntilDelay:]


SBSOSEventHandler : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SOSManagerClientObserver>
 @property  BOOL running
 @property  SBFUserAuthenticationController *authenticationController
 @property  SBBacklightController *backlightController
 @property  SOSManager *sosManager
 @property  SBLockScreenManager *lockScreenManager
 @property  BOOL SOSActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSOSEventHandler sharedInstance]

  // instance methods
  -[SBSOSEventHandler run]
  -[SBSOSEventHandler init]
  -[SBSOSEventHandler didDismissSOSBeforeSOSCall:]
  -[SBSOSEventHandler didUpdateCurrentSOSInitiationState:]
  -[SBSOSEventHandler dealloc]
  -[SBSOSEventHandler isSOSActive]
  -[SBSOSEventHandler .cxx_destruct]
  -[SBSOSEventHandler _sosManager]
  -[SBSOSEventHandler _lockScreenManager]
  -[SBSOSEventHandler _forceBioAuthenticationLockoutIfAvailableWithSource:showingPasscode:]
  -[SBSOSEventHandler _backlightController]
  -[SBSOSEventHandler _authenticationController]
  -[SBSOSEventHandler _isRunning]
  -[SBSOSEventHandler _setRunning:]


SBSceneDisconnectionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  unsigned long numberOfRecentScenesExcludedFromDisconnection
 @property  BOOL isExecuting

  // class methods
  +[SBSceneDisconnectionManager sharedManager]

  // instance methods
  -[SBSceneDisconnectionManager sceneManager]
  -[SBSceneDisconnectionManager init]
  -[SBSceneDisconnectionManager setNumberOfRecentScenesExcludedFromDisconnection:]
  -[SBSceneDisconnectionManager numberOfRecentScenesExcludedFromDisconnection]
  -[SBSceneDisconnectionManager isExecuting]
  -[SBSceneDisconnectionManager _beginSceneCleanupWithBackgroundedSceneEntities:]
  -[SBSceneDisconnectionManager setIsExecuting:]
  -[SBSceneDisconnectionManager liveScenesForApplication:]
  -[SBSceneDisconnectionManager disconnectScenes:completion:]
  -[SBSceneDisconnectionManager shouldDisconnectScene:inSwitcher:]
  -[SBSceneDisconnectionManager positionOf:inSwitcher:]


SBSceneLayoutTransitionAnimationController : SBUIWorkspaceAnimationController
  // instance methods
  -[SBSceneLayoutTransitionAnimationController _canBeInterrupted]
  -[SBSceneLayoutTransitionAnimationController _serialOverlayPreDismissalOptions]
  -[SBSceneLayoutTransitionAnimationController .cxx_destruct]
  -[SBSceneLayoutTransitionAnimationController containerView]
  -[SBSceneLayoutTransitionAnimationController animationSettings]
  -[SBSceneLayoutTransitionAnimationController _getTransitionWindow]
  -[SBSceneLayoutTransitionAnimationController initWithWorkspaceTransitionRequest:]
  -[SBSceneLayoutTransitionAnimationController initWithTransitionContextProvider:layoutController:animationSettings:animationBlock:]
  -[SBSceneLayoutTransitionAnimationController initWithTransitionContextProvider:layoutController:animationSettings:stepped:animationBlock:]


SBSceneRotationTransitionAnimationController : SBSceneLayoutTransitionAnimationController
  // instance methods
  -[SBSceneRotationTransitionAnimationController _serialOverlayPreDismissalOptions]


SBApplicationAutoLaunchService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, SBFMobileKeyBagObserver>
 @property  BOOL autoLaunchSynchronously
 @property  NSTimer *queuedApplicationsThrottledForRelaunchTimer
 @property  NSArray *queuedApplicationsThrottledForRelaunch
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationAutoLaunchService _queuedApplicationsThrottledForRelaunch]
  -[SBApplicationAutoLaunchService _invalidateQueuedApplicationsThrottledForRelaunchTimer]
  -[SBApplicationAutoLaunchService _noteKeybagDidUnlock]
  -[SBApplicationAutoLaunchService _shouldAutoLaunchApplication:forReason:]
  -[SBApplicationAutoLaunchService autoLaunchApplicationsIfNecessaryForStartup]
  -[SBApplicationAutoLaunchService _queuedApplicationsThrottledForRelaunchTimer]
  -[SBApplicationAutoLaunchService dealloc]
  -[SBApplicationAutoLaunchService _noteTerminationAssertionRemovedForApplication:]
  -[SBApplicationAutoLaunchService _installedApplicationsDidChange:]
  -[SBApplicationAutoLaunchService .cxx_destruct]
  -[SBApplicationAutoLaunchService _setAutoLaunchSynchronously:]
  -[SBApplicationAutoLaunchService _applicationProcessStateDidChange:]
  -[SBApplicationAutoLaunchService _memoryPressureWarn:]
  -[SBApplicationAutoLaunchService _launchNextQueuedApplicationThrottledForRelaunch]
  -[SBApplicationAutoLaunchService _scheduleThrottledApplicationRelaunchTimerIfNecessary]
  -[SBApplicationAutoLaunchService succinctDescriptionBuilder]
  -[SBApplicationAutoLaunchService _scheduleAutoLaunchForApplicationExited:withExitContext:]
  -[SBApplicationAutoLaunchService _autoLaunchAppsIfNecessaryAfterFirstUnlock]
  -[SBApplicationAutoLaunchService _autoLaunchSynchronously]
  -[SBApplicationAutoLaunchService _memoryPressureRelieved:]
  -[SBApplicationAutoLaunchService _recalculateVoIPBehaviorForApplication:withExitContext:]
  -[SBApplicationAutoLaunchService succinctDescription]
  -[SBApplicationAutoLaunchService _initWithWorkspace:applicationController:restartManager:syncController:keybag:]
  -[SBApplicationAutoLaunchService keybagDidUnlockForTheFirstTime:]
  -[SBApplicationAutoLaunchService _autoLaunchIfNecessary:forReason:]
  -[SBApplicationAutoLaunchService invalidate]
  -[SBApplicationAutoLaunchService descriptionWithMultilinePrefix:]
  -[SBApplicationAutoLaunchService descriptionBuilderWithMultilinePrefix:]
  -[SBApplicationAutoLaunchService _reallyDoAutoLaunchToBackground:]


SBApplicationDropSession : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  FBSSceneIdentity *sceneIdentity
 @property  NSString *targetContentIdentifier
 @property  SBApplication *application
 @property  <UIDragDropSession> *uiDragDropSession
 @property  UIDraggingSystemSession *systemSession
 @property  long long dropZones
 @property  BOOL notificationDrag
 @property  BOOL windowTearOff
 @property  SBSAppDragLocalContext *localContext
 @property  SBActivationSettings *activationSettings
 @property  NSSet *launchActions

  // class methods
  +[SBApplicationDropSession _dragItemRepresentsAcceptableFileDrag:]
  +[SBApplicationDropSession _getLocalAppDropSessionWithUIDragDropSession:dragItem:systemSession:completion:]
  +[SBApplicationDropSession _applicationForIconLeafIdentifier:]
  +[SBApplicationDropSession _getUserNotificationDropSessionWithUIDragDropSession:systemSession:dragItem:completion:]
  +[SBApplicationDropSession _getUserActivityDropSessionWithUIDragDropSession:dragItem:systemSession:targetApplication:completion:]
  +[SBApplicationDropSession _getFileDropSessionWithUIDragDropSession:dragItem:systemSession:targetApplication:completion:]
  +[SBApplicationDropSession _getURLDropSessionWithUIDragDropSession:dragItem:systemSession:targetApplication:completion:]
  +[SBApplicationDropSession _applicationProxyForIdentifiers:forURL:passingTest:error:]
  +[SBApplicationDropSession _itemProviderRequiresOpenInPlace:]
  +[SBApplicationDropSession _applicationForHandlingDragItem:URL:error:]
  +[SBApplicationDropSession canHandleUIDragDropSession:]
  +[SBApplicationDropSession dropSessionWithWindowUIDragSession:]
  +[SBApplicationDropSession getDropSessionWithUIDropSession:sceneProvider:completion:]

  // instance methods
  -[SBApplicationDropSession setSceneIdentity:]
  -[SBApplicationDropSession application]
  -[SBApplicationDropSession localContext]
  -[SBApplicationDropSession launchActions]
  -[SBApplicationDropSession .cxx_destruct]
  -[SBApplicationDropSession setTargetContentIdentifier:]
  -[SBApplicationDropSession activationSettings]
  -[SBApplicationDropSession targetContentIdentifier]
  -[SBApplicationDropSession initWithUIDragDropSession:systemSession:application:targetContentIdentifier:localContext:activity:activityData:]
  -[SBApplicationDropSession calculateSceneIdentityWithSceneProvider:completion:]
  -[SBApplicationDropSession initWithUIDragDropSession:systemSession:application:targetContentIdentifier:]
  -[SBApplicationDropSession initWithUIDragDropSession:systemSession:application:targetContentIdentifier:URL:requiresOpenInPlace:]
  -[SBApplicationDropSession initWithUIDragDropSession:systemSession:application:activity:activityData:]
  -[SBApplicationDropSession _initWithUIDragDropSession:application:targetContentIdentifier:]
  -[SBApplicationDropSession _isApplicationBoundToVisibleIcon]
  -[SBApplicationDropSession _activityContinuationActionFromActivity:activityData:]
  -[SBApplicationDropSession uiDragDropSession]
  -[SBApplicationDropSession systemSession]
  -[SBApplicationDropSession isNotificationDrag]
  -[SBApplicationDropSession isWindowTearOff]
  -[SBApplicationDropSession dropZones]
  -[SBApplicationDropSession sceneIdentity]


SBMainScreenActiveInterfaceOrientationWindow : SBWindow <BSDescriptionProviding, SBUIActiveOrientationObserver>
 @property  NSString *debugName
 @property  UIViewController *contentViewController
 @property  BOOL passesTouchesThrough
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainScreenActiveInterfaceOrientationWindow layoutContentViewControllerWithConstraints]

  // instance methods
  -[SBMainScreenActiveInterfaceOrientationWindow debugName]
  -[SBMainScreenActiveInterfaceOrientationWindow activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBMainScreenActiveInterfaceOrientationWindow _canBecomeKeyWindow]
  -[SBMainScreenActiveInterfaceOrientationWindow passesTouchesThrough]
  -[SBMainScreenActiveInterfaceOrientationWindow .cxx_destruct]
  -[SBMainScreenActiveInterfaceOrientationWindow hitTest:withEvent:]
  -[SBMainScreenActiveInterfaceOrientationWindow initWithDebugName:]
  -[SBMainScreenActiveInterfaceOrientationWindow succinctDescriptionBuilder]
  -[SBMainScreenActiveInterfaceOrientationWindow setContentViewController:]
  -[SBMainScreenActiveInterfaceOrientationWindow setRootViewController:]
  -[SBMainScreenActiveInterfaceOrientationWindow isActive]
  -[SBMainScreenActiveInterfaceOrientationWindow succinctDescription]
  -[SBMainScreenActiveInterfaceOrientationWindow setPassesTouchesThrough:]
  -[SBMainScreenActiveInterfaceOrientationWindow descriptionWithMultilinePrefix:]
  -[SBMainScreenActiveInterfaceOrientationWindow activeInterfaceOrientationWillChangeToOrientation:]
  -[SBMainScreenActiveInterfaceOrientationWindow contentViewController]
  -[SBMainScreenActiveInterfaceOrientationWindow setHidden:]
  -[SBMainScreenActiveInterfaceOrientationWindow descriptionBuilderWithMultilinePrefix:]
  -[SBMainScreenActiveInterfaceOrientationWindow isDisablingInterfaceOrientationChanges]
  -[SBMainScreenActiveInterfaceOrientationWindow disableInterfaceOrientationChangesForReason:]
  -[SBMainScreenActiveInterfaceOrientationWindow enableInterfaceOrientationChangesForReason:]
  -[SBMainScreenActiveInterfaceOrientationWindow _updateInterfaceOrientationToCurrentActiveInterfaceOrientationWithDuration:]
  -[SBMainScreenActiveInterfaceOrientationWindow effectiveRootViewControllerSupportedInterfaceOrientations]


SBSecureMainScreenActiveInterfaceOrientationWindow : SBMainScreenActiveInterfaceOrientationWindow
  // class methods
  +[SBSecureMainScreenActiveInterfaceOrientationWindow _isSecure]


_SBMainScreenActiveInterfaceOrientationWindowRootViewController : SBFTouchPassThroughViewController /usr/lib/libutil.dylib
 @property  unsigned long supportedInterfaceOrientations

  // instance methods
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController setSupportedInterfaceOrientations:]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController shouldAutorotate]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController supportedInterfaceOrientations]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController _canShowWhileLocked]
  -[_SBMainScreenActiveInterfaceOrientationWindowRootViewController _viewControllerForSupportedInterfaceOrientationsWithDismissCheck:]


SBWorkspaceTransientOverlayTransitionContext : SBWorkspaceTransitionContext
 @property  BOOL animated
 @property  BOOL shouldDismissSiriUponPresentation
 @property  BOOL shouldPreserveAppSwitcher
 @property  SBTransientOverlayPresentationManager *presentationManager
 @property  SBWorkspaceTransientOverlay *transientOverlay
 @property  long long transitionType

  // instance methods
  -[SBWorkspaceTransientOverlayTransitionContext transitionType]
  -[SBWorkspaceTransientOverlayTransitionContext setAnimated:]
  -[SBWorkspaceTransientOverlayTransitionContext init]
  -[SBWorkspaceTransientOverlayTransitionContext setShouldPreserveAppSwitcher:]
  -[SBWorkspaceTransientOverlayTransitionContext setShouldDismissSiriUponPresentation:]
  -[SBWorkspaceTransientOverlayTransitionContext setTransientOverlay:]
  -[SBWorkspaceTransientOverlayTransitionContext isAnimated]
  -[SBWorkspaceTransientOverlayTransitionContext .cxx_destruct]
  -[SBWorkspaceTransientOverlayTransitionContext setPresentationManager:]
  -[SBWorkspaceTransientOverlayTransitionContext presentationManager]
  -[SBWorkspaceTransientOverlayTransitionContext shouldPreserveAppSwitcher]
  -[SBWorkspaceTransientOverlayTransitionContext transientOverlay]
  -[SBWorkspaceTransientOverlayTransitionContext setTransitionType:]
  -[SBWorkspaceTransientOverlayTransitionContext descriptionBuilderWithMultilinePrefix:]
  -[SBWorkspaceTransientOverlayTransitionContext shouldDismissSiriUponPresentation]
  -[SBWorkspaceTransientOverlayTransitionContext compactDescriptionBuilderWithMultilinePrefix:]


_SBHomeScreenFolderDelegate : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBFolderControllerDelegate> *forwardingTarget

  // instance methods
  -[_SBHomeScreenFolderDelegate backgroundViewForDockForRootFolderController:]
  -[_SBHomeScreenFolderDelegate forwardingTargetForSelector:]
  -[_SBHomeScreenFolderDelegate respondsToSelector:]
  -[_SBHomeScreenFolderDelegate .cxx_destruct]
  -[_SBHomeScreenFolderDelegate forwardingTarget]
  -[_SBHomeScreenFolderDelegate setForwardingTarget:]


SBPreviewFloatingDockViewController : SBFloatingDockViewController /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
  // instance methods
  -[SBPreviewFloatingDockViewController _canShowWhileLocked]


SBHomeScreenPreviewView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBIconViewProviding, SBIconViewDelegate>
 @property  SBIconController *iconController
 @property  SBWallpaperController *wallpaperController
 @property  SBFloatingDockViewController *floatingDockViewController
 @property  unsigned long snapshotOptions
 @property  <SBDockOffscreenFractionModifying> *dockOffscreenModifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeScreenPreviewView configureIconView:forIcon:]
  -[SBHomeScreenPreviewView iconController]
  -[SBHomeScreenPreviewView wallpaperController]
  -[SBHomeScreenPreviewView recycleIconView:]
  -[SBHomeScreenPreviewView .cxx_destruct]
  -[SBHomeScreenPreviewView floatingDockViewController]
  -[SBHomeScreenPreviewView behaviorDelegateForIconView:]
  -[SBHomeScreenPreviewView isIconViewRecycled:]
  -[SBHomeScreenPreviewView backgroundViewForComponentsOfIconView:]
  -[SBHomeScreenPreviewView dequeueReusableIconViewOfClass:]
  -[SBHomeScreenPreviewView layoutSubviews]
  -[SBHomeScreenPreviewView initWithFrame:iconController:wallpaperController:options:wallpaperImage:]
  -[SBHomeScreenPreviewView snapshotOptions]
  -[SBHomeScreenPreviewView dockOffscreenModifier]


SBSiriHardwareButtonEventsOnlyButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBHardwareButtonInteraction>
 @property  long long siriButtonIdentifier
 @property  SBSiriHardwareButtonInteraction *parentSiriInteraction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSiriHardwareButtonEventsOnlyButtonInteraction hardwareButtonInteractionForHomeButtonForwardingToInteraction:]

  // instance methods
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction setSiriButtonIdentifier:]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction siriButtonIdentifier]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction .cxx_destruct]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction consumeSinglePressUp]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction setParentSiriInteraction:]
  -[SBSiriHardwareButtonEventsOnlyButtonInteraction parentSiriInteraction]


SBTodayIconListLayoutDelegate : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIconListLayoutDelegate>
 @property  NSMutableDictionary *catchupProperties
 @property  NSMutableDictionary *catchupTimers
 @property  SBIconListView *iconListView
 @property  UIView *containerView
 @property  UIScrollView *scrollView
 @property  BOOL carouselLayout
 @property  {UIEdgeInsets=dddd} carouselInsets
 @property  {UIEdgeInsets=dddd} additionalLayoutInsets
 @property  BOOL revealed
 @property  double revealProgress
 @property  double dismissProgress
 @property  BOOL visuallyRevealed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTodayIconListLayoutDelegate revealProgress]
  -[SBTodayIconListLayoutDelegate setAdditionalLayoutInsets:]
  -[SBTodayIconListLayoutDelegate isVisuallyRevealed]
  -[SBTodayIconListLayoutDelegate setContainerView:]
  -[SBTodayIconListLayoutDelegate .cxx_destruct]
  -[SBTodayIconListLayoutDelegate setRevealProgress:]
  -[SBTodayIconListLayoutDelegate setRevealed:]
  -[SBTodayIconListLayoutDelegate dismissProgress]
  -[SBTodayIconListLayoutDelegate iconListView:rowAtPoint:metrics:proposedRow:]
  -[SBTodayIconListLayoutDelegate iconListView:sizeThatFits:metrics:proposedSize:]
  -[SBTodayIconListLayoutDelegate iconListView:willLayoutIconView:]
  -[SBTodayIconListLayoutDelegate iconListViewDidLayoutIcons:]
  -[SBTodayIconListLayoutDelegate scrollView]
  -[SBTodayIconListLayoutDelegate setDismissProgress:]
  -[SBTodayIconListLayoutDelegate catchupTimers]
  -[SBTodayIconListLayoutDelegate setScrollView:]
  -[SBTodayIconListLayoutDelegate catchupProperties]
  -[SBTodayIconListLayoutDelegate setCatchupProperties:]
  -[SBTodayIconListLayoutDelegate containerView]
  -[SBTodayIconListLayoutDelegate iconListView]
  -[SBTodayIconListLayoutDelegate setVisuallyRevealed:]
  -[SBTodayIconListLayoutDelegate iconListView:originForIconCoordinate:metrics:proposedOrigin:]
  -[SBTodayIconListLayoutDelegate initWithIconListView:]
  -[SBTodayIconListLayoutDelegate additionalLayoutInsets]
  -[SBTodayIconListLayoutDelegate setCatchupTimers:]
  -[SBTodayIconListLayoutDelegate isRevealed]
  -[SBTodayIconListLayoutDelegate setVisuallyRevealed:animated:]
  -[SBTodayIconListLayoutDelegate setCarouselLayout:]
  -[SBTodayIconListLayoutDelegate setCarouselInsets:]
  -[SBTodayIconListLayoutDelegate unadjustedOriginYForIconCoordinate:]
  -[SBTodayIconListLayoutDelegate unadjustedBoundsForIconCoordinate:]
  -[SBTodayIconListLayoutDelegate carouselLayout]
  -[SBTodayIconListLayoutDelegate layoutAttributesForIconCoordinate:metrics:adjustedForRevealProgress:]
  -[SBTodayIconListLayoutDelegate _iconListView:originYForIconCoordinate:metrics:adjustedForRevealProgress:]
  -[SBTodayIconListLayoutDelegate carouselInsets]


SBReturnToLockscreenWorkspaceTransaction : SBActivateAppUnderLockScreenWorkspaceTransaction
  // instance methods
  -[SBReturnToLockscreenWorkspaceTransaction initWithTransitionRequest:toLockScreenEnvironment:]
  -[SBReturnToLockscreenWorkspaceTransaction _didComplete]
  -[SBReturnToLockscreenWorkspaceTransaction _serialOverlayPreDismissalOptions]
  -[SBReturnToLockscreenWorkspaceTransaction _setupAnimation]
  -[SBReturnToLockscreenWorkspaceTransaction .cxx_destruct]
  -[SBReturnToLockscreenWorkspaceTransaction _animationWillBegin:]
  -[SBReturnToLockscreenWorkspaceTransaction _animationDidFinish]


SBActivityAttribution : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, BSDescriptionProviding>
 @property  {?=[8I]} auditToken
 @property  NSString *bundleIdentifier
 @property  NSString *displayName
 @property  SBApplication *application
 @property  NSString *attributionGroup
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBActivityAttribution copyWithZone:]
  -[SBActivityAttribution auditToken]
  -[SBActivityAttribution application]
  -[SBActivityAttribution .cxx_destruct]
  -[SBActivityAttribution initWithSTActivityAttribution:]
  -[SBActivityAttribution succinctDescriptionBuilder]
  -[SBActivityAttribution attributionGroup]
  -[SBActivityAttribution succinctDescription]
  -[SBActivityAttribution isEqual:]
  -[SBActivityAttribution bundleIdentifier]
  -[SBActivityAttribution _prepareDisplayName]
  -[SBActivityAttribution displayName]
  -[SBActivityAttribution descriptionWithMultilinePrefix:]
  -[SBActivityAttribution descriptionBuilderWithMultilinePrefix:]


SBApplicationShortcutPolluterRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationShortcutPolluterRecipe load]

  // instance methods
  -[SBApplicationShortcutPolluterRecipe title]
  -[SBApplicationShortcutPolluterRecipe handleVolumeIncrease]
  -[SBApplicationShortcutPolluterRecipe handleVolumeDecrease]


SBHomeScreenBackdropDarkTintView : SBHomeScreenBackdropViewBase
  // instance methods
  -[SBHomeScreenBackdropDarkTintView initWithFrame:]
  -[SBHomeScreenBackdropDarkTintView .cxx_destruct]
  -[SBHomeScreenBackdropDarkTintView endRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropDarkTintView endRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropDarkTintView beginRequiringBackdropViewForReason:]
  -[SBHomeScreenBackdropDarkTintView isOpaque]
  -[SBHomeScreenBackdropDarkTintView setBlurProgress:behaviorMode:completion:]
  -[SBHomeScreenBackdropDarkTintView beginRequiringLiveBackdropViewForReason:]
  -[SBHomeScreenBackdropDarkTintView _updateDarkTintViewHidden]


SBAppViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBDeviceApplicationSceneHandleObserver, SBApplicationHosting, SBApplicationSceneViewControlling, BSInvalidatable>
 @property  <SBAppViewControllerDelegate> *delegate
 @property  BOOL automatesLifecycle
 @property  long long requestedMode
 @property  long long currentMode
 @property  SBApplicationSceneView *appView
 @property  BOOL ignoresOcclusions
 @property  NSSet *actionsToDeliver
 @property  BOOL wantsSecureRendering
 @property  BOOL placeholderContentEnabled
 @property  SBActivationSettings *supplementalActivationSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBApplicationSceneHandle *sceneHandle
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBAppViewController applicationSceneStatusBarDelegate]
  -[SBAppViewController setSupplementalActivationSettings:]
  -[SBAppViewController currentMode]
  -[SBAppViewController placeholderContentContext]
  -[SBAppViewController actionsToDeliver]
  -[SBAppViewController contentInterfaceOrientation]
  -[SBAppViewController isHostingAnApp]
  -[SBAppViewController _transformHostedAppViewForRotationToOrientation:]
  -[SBAppViewController setPlaceholderContentEnabled:]
  -[SBAppViewController hostedAppSceneHandle]
  -[SBAppViewController canHostAnApp]
  -[SBAppViewController setActionsToDeliver:]
  -[SBAppViewController setPlaceholderContentContext:]
  -[SBAppViewController conformsToSBApplicationHosting]
  -[SBAppViewController customContentView]
  -[SBAppViewController hostedAppWillRotateToInterfaceOrientation:]
  -[SBAppViewController hostedAppSceneHandles]
  -[SBAppViewController willMoveToParentViewController:]
  -[SBAppViewController displayMode]
  -[SBAppViewController overrideStatusBarStyle]
  -[SBAppViewController contentReferenceSize]
  -[SBAppViewController setDisplayMode:animationFactory:completion:]
  -[SBAppViewController setApplicationSceneStatusBarDelegate:]
  -[SBAppViewController statusBarAlpha]
  -[SBAppViewController _createSceneUpdateTransactionForApplicationSceneEntity:deliveringActions:]
  -[SBAppViewController requestedMode]
  -[SBAppViewController sceneHandle]
  -[SBAppViewController _sendActions:]
  -[SBAppViewController dealloc]
  -[SBAppViewController .cxx_destruct]
  -[SBAppViewController _configureApplicationSceneEntity:deliveringActions:]
  -[SBAppViewController sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBAppViewController _destroySceneViewController]
  -[SBAppViewController containerContentWrapperInterfaceOrientationChangedTo:]
  -[SBAppViewController setIgnoresOcclusions:]
  -[SBAppViewController setWantsSecureRendering:]
  -[SBAppViewController _activateApp]
  -[SBAppViewController _updateForAppearanceState:]
  -[SBAppViewController _installedAppsDidChange:]
  -[SBAppViewController viewDidAppear:]
  -[SBAppViewController sceneHandle:didDestroyScene:]
  -[SBAppViewController newSnapshotView]
  -[SBAppViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBAppViewController _setCurrentMode:]
  -[SBAppViewController wantsSecureRendering]
  -[SBAppViewController placeholderContentEnabled]
  -[SBAppViewController setCustomContentView:]
  -[SBAppViewController setAutomatesLifecycle:]
  -[SBAppViewController sceneHandle:didUpdateContentState:]
  -[SBAppViewController viewWillAppear:]
  -[SBAppViewController _deactivateHostedApp]
  -[SBAppViewController newSnapshotViewOnQueue:withCompletion:]
  -[SBAppViewController _canShowWhileLocked]
  -[SBAppViewController newSnapshot]
  -[SBAppViewController setDelegate:]
  -[SBAppViewController _createSceneViewController]
  -[SBAppViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBAppViewController viewDidDisappear:]
  -[SBAppViewController appView]
  -[SBAppViewController setRequestedMode:]
  -[SBAppViewController viewWillDisappear:]
  -[SBAppViewController initWithIdentifier:andApplicationSceneEntity:]
  -[SBAppViewController invalidate]
  -[SBAppViewController viewDidLayoutSubviews]
  -[SBAppViewController supplementalActivationSettings]
  -[SBAppViewController delegate]
  -[SBAppViewController automatesLifecycle]
  -[SBAppViewController ignoresOcclusions]


SBPriorityDeviceApplicationSceneViewController : SBDeviceApplicationSceneViewController
  // instance methods
  -[SBPriorityDeviceApplicationSceneViewController sceneViewPresentationPriority:]


SBTransientOverlayDefaultTransitionContextProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTransientOverlayTransitionContextProviding>
 @property  BOOL animated
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTransientOverlayDefaultTransitionContextProvider setAnimated:]
  -[SBTransientOverlayDefaultTransitionContextProvider isAnimated]
  -[SBTransientOverlayDefaultTransitionContextProvider .cxx_destruct]
  -[SBTransientOverlayDefaultTransitionContextProvider completeTransition:]
  -[SBTransientOverlayDefaultTransitionContextProvider performAlongsideTransitions]
  -[SBTransientOverlayDefaultTransitionContextProvider transitionAlongsideUsingBlock:completion:]


SBBadgeCountRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBadgeCountRecipe load]

  // instance methods
  -[SBBadgeCountRecipe title]
  -[SBBadgeCountRecipe handleVolumeIncrease]
  -[SBBadgeCountRecipe handleVolumeDecrease]
  -[SBBadgeCountRecipe _changeBadge:]


SBProactiveLibraryCategoryMapProviderSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHLibraryCategoryMapProviderSource>
 @property  <SBHLibraryCategoryMapProviderSourceDelegate> *delegate
 @property  NSString *sourceName
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProactiveLibraryCategoryMapProviderSource sourceName]
  -[SBProactiveLibraryCategoryMapProviderSource init]
  -[SBProactiveLibraryCategoryMapProviderSource .cxx_destruct]
  -[SBProactiveLibraryCategoryMapProviderSource requestLibraryCategoryMapWithOptions:existingLibraryCategoryMap:forbiddenApplicationIdentifiers:sessionId:queue:completion:]
  -[SBProactiveLibraryCategoryMapProviderSource setDelegate:]
  -[SBProactiveLibraryCategoryMapProviderSource delegate]
  -[SBProactiveLibraryCategoryMapProviderSource handleUpdateCategoriesNotification:]


SBWorkspaceTransientOverlay : SBWorkspaceEntity
 @property  SBTransientOverlayViewController *viewController

  // instance methods
  -[SBWorkspaceTransientOverlay copyWithZone:]
  -[SBWorkspaceTransientOverlay viewController]
  -[SBWorkspaceTransientOverlay _generator]
  -[SBWorkspaceTransientOverlay .cxx_destruct]
  -[SBWorkspaceTransientOverlay initWithViewController:]


SBWipeSnapshotManifestTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWipeSnapshotManifestTestRecipe load]

  // instance methods
  -[SBWipeSnapshotManifestTestRecipe title]
  -[SBWipeSnapshotManifestTestRecipe handleVolumeIncrease]
  -[SBWipeSnapshotManifestTestRecipe handleVolumeDecrease]


SBHomeScreenView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBFStatusBarLegibilityView *statusBarLegibilityView

  // instance methods
  -[SBHomeScreenView didMoveToWindow]
  -[SBHomeScreenView initWithFrame:]
  -[SBHomeScreenView .cxx_destruct]
  -[SBHomeScreenView setFrame:]
  -[SBHomeScreenView statusBarLegibilityView]
  -[SBHomeScreenView layoutSubviews]


SBHomeScreenViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBFloatingDockBehaviorAssertion *widgetEditFloatingDockAssertion
 @property  <BSInvalidatable> *widgetEditViewControllerOrientationUpdateDeferralAssertion
 @property  BOOL iconControllerHidden
 @property  SBIconController *iconController
 @property  SBHIconManager *iconManager
 @property  SBUIController *UIController
 @property  _UILegibilitySettings *legibilitySettings
 @property  BOOL homeScreenAutorotatesEvenWhenIconIsDragging

  // instance methods
  -[SBHomeScreenViewController setHomeScreenAutorotatesEvenWhenIconIsDragging:]
  -[SBHomeScreenViewController disableAnimationForNextIconRotation]
  -[SBHomeScreenViewController setAllowIconRotation:forReason:]
  -[SBHomeScreenViewController iconController]
  -[SBHomeScreenViewController _widgetEditViewWillAppear:]
  -[SBHomeScreenViewController setNeedsStatusBarAppearanceUpdate]
  -[SBHomeScreenViewController iconManager]
  -[SBHomeScreenViewController homeScreenAutorotatesEvenWhenIconIsDragging]
  -[SBHomeScreenViewController _widgetEditViewDidDisappearImplementation]
  -[SBHomeScreenViewController _acquireForceTouchWindowLevelAssertionForIconView:]
  -[SBHomeScreenViewController legibilitySettings]
  -[SBHomeScreenViewController _cleanupAfterTransitionToSize:fromInterfaceOrientation:withTransitionContext:]
  -[SBHomeScreenViewController _widgetEditViewDidDisappear:]
  -[SBHomeScreenViewController _acquireForceTouchOrientationUpdateDeferralAssertionForIconView:]
  -[SBHomeScreenViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBHomeScreenViewController homeScreenView]
  -[SBHomeScreenViewController _appIconForceTouchControllerDidDismissNotification:]
  -[SBHomeScreenViewController shouldAutorotate]
  -[SBHomeScreenViewController .cxx_destruct]
  -[SBHomeScreenViewController _dismissAllIconForceTouchControllersDidFire:]
  -[SBHomeScreenViewController initWithIconController:UIController:]
  -[SBHomeScreenViewController _relinquishForceTouchWindowLevelAssertionForIconView:]
  -[SBHomeScreenViewController setLegibilitySettings:]
  -[SBHomeScreenViewController supportedInterfaceOrientations]
  -[SBHomeScreenViewController _animateTransitionToSize:andInterfaceOrientation:withTransitionContext:]
  -[SBHomeScreenViewController initWithNibName:bundle:]
  -[SBHomeScreenViewController _relinquishForceTouchOrientationUpdateDeferralAssertionForIconView:]
  -[SBHomeScreenViewController widgetEditViewControllerOrientationUpdateDeferralAssertion]
  -[SBHomeScreenViewController viewDidAppear:]
  -[SBHomeScreenViewController _prepareForTransitionToSize:andInterfaceOrientation:withTransitionCoordinator:]
  -[SBHomeScreenViewController _appIconForceTouchControllerWillPresentNotification:]
  -[SBHomeScreenViewController UIController]
  -[SBHomeScreenViewController setWidgetEditViewControllerOrientationUpdateDeferralAssertion:]
  -[SBHomeScreenViewController viewWillAppear:]
  -[SBHomeScreenViewController widgetEditFloatingDockAssertion]
  -[SBHomeScreenViewController setIconControllerHidden:]
  -[SBHomeScreenViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBHomeScreenViewController viewDidDisappear:]
  -[SBHomeScreenViewController _autorotationPreventionReasons]
  -[SBHomeScreenViewController viewDidLayoutSubviews]
  -[SBHomeScreenViewController setWidgetEditFloatingDockAssertion:]
  -[SBHomeScreenViewController loadView]
  -[SBHomeScreenViewController initWithCoder:]
  -[SBHomeScreenViewController isIconControllerHidden]
  -[SBHomeScreenViewController nudgeIconInterfaceOrientation:duration:]


SBWorkspaceTransaction : SBTransaction
 @property  SBLayoutStateTransitionCoordinator *layoutStateTransitionCoordinator
 @property  SBSceneManager *sceneManager
 @property  BOOL clearsCompletionAsynchronously
 @property  FBSDisplayIdentity *displayIdentity
 @property  FBSDisplayConfiguration *displayConfiguration
 @property  SBWorkspaceTransitionRequest *transitionRequest
 @property  SBSceneLayoutViewController *layoutController
 @property  SBUIAnimationController *suggestedAnimationController

  // instance methods
  -[SBWorkspaceTransaction sceneManager]
  -[SBWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBWorkspaceTransaction _customizedDescriptionProperties]
  -[SBWorkspaceTransaction init]
  -[SBWorkspaceTransaction _didComplete]
  -[SBWorkspaceTransaction displayConfiguration]
  -[SBWorkspaceTransaction initWithTransitionRequest:]
  -[SBWorkspaceTransaction .cxx_destruct]
  -[SBWorkspaceTransaction displayIdentity]
  -[SBWorkspaceTransaction layoutController]
  -[SBWorkspaceTransaction transitionRequest]
  -[SBWorkspaceTransaction layoutStateTransitionCoordinator]
  -[SBWorkspaceTransaction _isInterruptingForTransitionRequest]
  -[SBWorkspaceTransaction interruptForTransitionRequest:]
  -[SBWorkspaceTransaction clearsCompletionAsynchronously]
  -[SBWorkspaceTransaction setSuggestedAnimationController:]
  -[SBWorkspaceTransaction _transitionRequestForInterruption]
  -[SBWorkspaceTransaction _willInterruptForTransitionRequest:]
  -[SBWorkspaceTransaction _didInterruptForTransitionRequest:]
  -[SBWorkspaceTransaction _performDeviceCoherencyCheck]
  -[SBWorkspaceTransaction _childWorkspaceTransactions]
  -[SBWorkspaceTransaction keepAliveForAsyncBlock:]
  -[SBWorkspaceTransaction suggestedAnimationController]
  -[SBWorkspaceTransaction setClearsCompletionAsynchronously:]


SBAppToAppWorkspaceTransaction : SBToAppsWorkspaceTransaction
 @property  BOOL preventWhitePointAdaptationStrengthUpdateOnComplete

  // instance methods
  -[SBAppToAppWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBAppToAppWorkspaceTransaction _cleanUpAfterAnimation]
  -[SBAppToAppWorkspaceTransaction _performPostAnimationTasksWithCompletion:]
  -[SBAppToAppWorkspaceTransaction _shouldResignActiveForAnimation]
  -[SBAppToAppWorkspaceTransaction _canBeInterrupted]
  -[SBAppToAppWorkspaceTransaction _handleApplicationDidNotChange:]
  -[SBAppToAppWorkspaceTransaction _didComplete]
  -[SBAppToAppWorkspaceTransaction initWithTransitionRequest:]
  -[SBAppToAppWorkspaceTransaction _serialOverlayPreDismissalOptions]
  -[SBAppToAppWorkspaceTransaction _setupAnimation]
  -[SBAppToAppWorkspaceTransaction dealloc]
  -[SBAppToAppWorkspaceTransaction _begin]
  -[SBAppToAppWorkspaceTransaction _animationDidRevealApplication]
  -[SBAppToAppWorkspaceTransaction .cxx_destruct]
  -[SBAppToAppWorkspaceTransaction shouldAnimateOrientationChangeOnCompletion]
  -[SBAppToAppWorkspaceTransaction _beginTransition]
  -[SBAppToAppWorkspaceTransaction _handleApplicationUpdateScenesTransactionFailed:]
  -[SBAppToAppWorkspaceTransaction _hasPostAnimationTasks]
  -[SBAppToAppWorkspaceTransaction _animationWillBegin:]
  -[SBAppToAppWorkspaceTransaction shouldPerformToAppStateCleanupOnCompletion]
  -[SBAppToAppWorkspaceTransaction setPreventWhitePointAdaptationStrengthUpdateOnComplete:]
  -[SBAppToAppWorkspaceTransaction _performPreAnimationTasksWithCompletion:]
  -[SBAppToAppWorkspaceTransaction _transitionWasCancelled]
  -[SBAppToAppWorkspaceTransaction _concurrentOverlayDismissalOptions]
  -[SBAppToAppWorkspaceTransaction _setupAnimationFrom:to:]
  -[SBAppToAppWorkspaceTransaction _hasPreAnimationTasks]
  -[SBAppToAppWorkspaceTransaction _clearAnimation]
  -[SBAppToAppWorkspaceTransaction preventWhitePointAdaptationStrengthUpdateOnComplete]


SBAnalyticsAggdSimpleEventHandler : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAnalyticsAggdSimpleEventHandler latchForEvent:aggdKey:]
  +[SBAnalyticsAggdSimpleEventHandler monotonicallyIncreasingForEvent:aggdKey:]
  +[SBAnalyticsAggdSimpleEventHandler setScalarForEvent:aggdKey:valueBlock:]

  // instance methods
  -[SBAnalyticsAggdSimpleEventHandler handleEvent:withContext:]
  -[SBAnalyticsAggdSimpleEventHandler .cxx_destruct]
  -[SBAnalyticsAggdSimpleEventHandler initWithEvent:emitBlock:]


SBStartupTransitionToApp : SBBaseStartupTransition
  // instance methods
  -[SBStartupTransitionToApp performTransitionWithCompletionBlock:]


SBDashBoardBiometricUnlockController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBBiometricUnlockBehaviorDelegate, SBBiometricUnlockBehaviorConfigurationDelegate, CSExternalEventHandling, SBBiometricUnlockBehavior>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate

  // instance methods
  -[SBDashBoardBiometricUnlockController coverSheetIdentifier]
  -[SBDashBoardBiometricUnlockController biometricUnlockBehaviorDelegate]
  -[SBDashBoardBiometricUnlockController isLockScreenShowingDefaultContent]
  -[SBDashBoardBiometricUnlockController conformsToCSEventHandling]
  -[SBDashBoardBiometricUnlockController dealloc]
  -[SBDashBoardBiometricUnlockController .cxx_destruct]
  -[SBDashBoardBiometricUnlockController initWithCoverSheetViewController:]
  -[SBDashBoardBiometricUnlockController succinctDescriptionBuilder]
  -[SBDashBoardBiometricUnlockController noteMenuButtonUp]
  -[SBDashBoardBiometricUnlockController _mesaUnlockBehavior]
  -[SBDashBoardBiometricUnlockController isRestToOpenAvailable]
  -[SBDashBoardBiometricUnlockController participantState]
  -[SBDashBoardBiometricUnlockController setAuthenticated:]
  -[SBDashBoardBiometricUnlockController succinctDescription]
  -[SBDashBoardBiometricUnlockController biometricUnlockBehaviorConfigurationDidChange:]
  -[SBDashBoardBiometricUnlockController handleEvent:]
  -[SBDashBoardBiometricUnlockController setBiometricUnlockBehaviorDelegate:]
  -[SBDashBoardBiometricUnlockController fillRestToOpenWithDuration:]
  -[SBDashBoardBiometricUnlockController biometricUnlockBehavior:requestsUnlock:withFeedback:]
  -[SBDashBoardBiometricUnlockController lockScreenWakeSource]
  -[SBDashBoardBiometricUnlockController handleBiometricEvent:]
  -[SBDashBoardBiometricUnlockController biometricUnlockBehavior:requestsFeedback:]
  -[SBDashBoardBiometricUnlockController noteMenuButtonDown]
  -[SBDashBoardBiometricUnlockController resetRestToOpen]
  -[SBDashBoardBiometricUnlockController noteLockButtonDown]
  -[SBDashBoardBiometricUnlockController descriptionWithMultilinePrefix:]
  -[SBDashBoardBiometricUnlockController startRestToOpenCoachingWithCompletion:]
  -[SBDashBoardBiometricUnlockController descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardBiometricUnlockController wouldHandleButtonEvent:]


SBLogoutProgressTransientOverlayViewController : SBTransientOverlayViewController <CSExternalBehaviorProviding>
 @property  <SBLogoutProgressDataSource> *dataSource
 @property  <SBLogoutProgressDelegate> *delegate
 @property  UMUser *user
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBLogoutProgressTransientOverlayViewController user]
  -[SBLogoutProgressTransientOverlayViewController viewDidLoad]
  -[SBLogoutProgressTransientOverlayViewController coverSheetIdentifier]
  -[SBLogoutProgressTransientOverlayViewController idleTimerDuration]
  -[SBLogoutProgressTransientOverlayViewController preferredStatusBarStyle]
  -[SBLogoutProgressTransientOverlayViewController scrollingStrategy]
  -[SBLogoutProgressTransientOverlayViewController notificationBehavior]
  -[SBLogoutProgressTransientOverlayViewController _legibilitySettings]
  -[SBLogoutProgressTransientOverlayViewController conformsToCSBehaviorProviding]
  -[SBLogoutProgressTransientOverlayViewController idleWarnMode]
  -[SBLogoutProgressTransientOverlayViewController setDataSource:]
  -[SBLogoutProgressTransientOverlayViewController idleTimerMode]
  -[SBLogoutProgressTransientOverlayViewController restrictedCapabilities]
  -[SBLogoutProgressTransientOverlayViewController proximityDetectionMode]
  -[SBLogoutProgressTransientOverlayViewController conformsToCSExternalBehaviorProviding]
  -[SBLogoutProgressTransientOverlayViewController .cxx_destruct]
  -[SBLogoutProgressTransientOverlayViewController setContainerOrientation:]
  -[SBLogoutProgressTransientOverlayViewController participantState]
  -[SBLogoutProgressTransientOverlayViewController dataSource]
  -[SBLogoutProgressTransientOverlayViewController _updateLegibility]
  -[SBLogoutProgressTransientOverlayViewController viewWillAppear:]
  -[SBLogoutProgressTransientOverlayViewController _updateData]
  -[SBLogoutProgressTransientOverlayViewController _canShowWhileLocked]
  -[SBLogoutProgressTransientOverlayViewController isContentOpaque]
  -[SBLogoutProgressTransientOverlayViewController setDelegate:]
  -[SBLogoutProgressTransientOverlayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBLogoutProgressTransientOverlayViewController viewDidDisappear:]
  -[SBLogoutProgressTransientOverlayViewController refreshData]
  -[SBLogoutProgressTransientOverlayViewController viewDidLayoutSubviews]
  -[SBLogoutProgressTransientOverlayViewController delegate]
  -[SBLogoutProgressTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBLogoutProgressTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBLogoutProgressTransientOverlayViewController prepareForRestart]
  -[SBLogoutProgressTransientOverlayViewController initWithUserAccount:]
  -[SBLogoutProgressTransientOverlayViewController _supportsDebugUI]
  -[SBLogoutProgressTransientOverlayViewController _updateDebugTasksViewControllerSizeFromSize:]


SBGestureSwitcherModifier : SBSwitcherModifier
 @property  unsigned long gesturePhase

  // instance methods
  -[SBGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBGestureSwitcherModifier handleMainTransitionEvent:]
  -[SBGestureSwitcherModifier .cxx_destruct]
  -[SBGestureSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBGestureSwitcherModifier handleEvent:]
  -[SBGestureSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBGestureSwitcherModifier descriptionBuilderWithMultilinePrefix:]
  -[SBGestureSwitcherModifier isPreparingLayout]
  -[SBGestureSwitcherModifier isUpdatingLayout]
  -[SBGestureSwitcherModifier handleGestureEvent:]
  -[SBGestureSwitcherModifier initWithGestureID:]
  -[SBGestureSwitcherModifier gesturePhase]


SBCoverSheetSystemGesturesDelegate : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemGestureRecognizerDelegate, SBTouchTemplateGestureRecognizerDelegate, SBIndirectPanGestureRecognizerOrientationProviding>
 @property  UIViewController *viewController
 @property  UIGestureRecognizer *dismissGestureRecognizer
 @property  UIGestureRecognizer *dismissAddendumGestureRecognizer
 @property  UIGestureRecognizer *preemptingGestureRecognizer
 @property  CSCoverSheetDismissGestureSettings *dismissGestureSettings
 @property  <SBCoverSheetSystemGestureDelegatePositionProviding> *positionProvider
 @property  UIPanGestureRecognizer *presentGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectPresentGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectDismissGestureRecognizer
 @property  SBFluidScrunchGestureRecognizer *scrunchDismissGestureRecognizer
 @property  int syntheticAppearState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCoverSheetSystemGesturesDelegate setPresentGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate setScrunchDismissGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate viewController]
  -[SBCoverSheetSystemGesturesDelegate isAnyGestureActivelyRecognized]
  -[SBCoverSheetSystemGesturesDelegate scrunchDismissGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate viewForSystemGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate dismissAddendumGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate indirectPresentGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate indirectDismissGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate setIndirectDismissGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate setDismissAddendumGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate dismissGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate setIndirectPresentGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate presentGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate setDismissGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate isDismissGestureActive]
  -[SBCoverSheetSystemGesturesDelegate isPresentGestureActive]
  -[SBCoverSheetSystemGesturesDelegate .cxx_destruct]
  -[SBCoverSheetSystemGesturesDelegate _isGestureAllowedByTransientOverlaysOrTopmostApp]
  -[SBCoverSheetSystemGesturesDelegate setPreemptingGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate initWithViewController:dismissGestureRecognizer:dismissAddendumGestureRecognizer:dismissalPreemptingGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate setDismissGestureSettings:]
  -[SBCoverSheetSystemGesturesDelegate gestureRecognizerShouldBegin:]
  -[SBCoverSheetSystemGesturesDelegate positionProvider]
  -[SBCoverSheetSystemGesturesDelegate setPositionProvider:]
  -[SBCoverSheetSystemGesturesDelegate _canDismissGestureBegin]
  -[SBCoverSheetSystemGesturesDelegate setSyntheticAppearState:]
  -[SBCoverSheetSystemGesturesDelegate _isGestureActivelyRecognized:]
  -[SBCoverSheetSystemGesturesDelegate dismissGestureSettings]
  -[SBCoverSheetSystemGesturesDelegate preemptingGestureRecognizer]
  -[SBCoverSheetSystemGesturesDelegate _canPresentGestureBegin]
  -[SBCoverSheetSystemGesturesDelegate setViewController:]
  -[SBCoverSheetSystemGesturesDelegate dismissGestures]
  -[SBCoverSheetSystemGesturesDelegate indirectPanEffectiveInterfaceOrientation]
  -[SBCoverSheetSystemGesturesDelegate setPresentGestureFailureRequirements:]
  -[SBCoverSheetSystemGesturesDelegate presentGestures]
  -[SBCoverSheetSystemGesturesDelegate gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBCoverSheetSystemGesturesDelegate gestureRecognizer:shouldReceiveTouch:]
  -[SBCoverSheetSystemGesturesDelegate syntheticAppearState]
  -[SBCoverSheetSystemGesturesDelegate _areAnyGesturesRecognizedInSet:]


SBAppSwitcherSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  long long simplicityOptions
 @property  BOOL simplicityOptionNoSnapshots
 @property  BOOL simplicityOptionNoCrossfade
 @property  BOOL simplicityOptionNoLabels
 @property  BOOL simplicityOptionNoIcons
 @property  BOOL simplicityOptionNoBlurs
 @property  BOOL simplicityOptionNoShadows
 @property  BOOL simplicityOptionNoControlCenter
 @property  BOOL simplicityOptionNoSnapshotBkg
 @property  BOOL showFloats
 @property  long long switcherStyle
 @property  BOOL useAsynchronousRendering
 @property  BOOL shouldRoundCornersDuringSwipeUp
 @property  double asynchronousRenderingDisableSurfaceCacheDelayDuration
 @property  double preventMedusaSnapshotsAfterTransitionDuration
 @property  SBFloatingSwitcherSettings *floatingSwitcherSettings
 @property  SBAppSwitcherOrbGestureSettings *orbGestureSettings
 @property  double mScale
 @property  double centerPoint
 @property  double maxScale
 @property  double mAlpha
 @property  double bAlpha
 @property  double mDarkening
 @property  double bDarkening
 @property  double maxDarkening
 @property  double tetheredInsertionRemovalInsetForDeterminingVisibility
 @property  double switcherCardScaleWhileTouched
 @property  double switcherCardScaleWhileCursorHovered
 @property  double switcherCardShadowRadius
 @property  double switcherCardShadowOpacity
 @property  double switcherCardShadowOffsetHorizontal
 @property  double switcherCardShadowOffsetVertical
 @property  double switcherCenterYOffsetPercentOfScreenHeight
 @property  double switcherCardShadowRadiusWhileTouched
 @property  double switcherCardShadowOpacityWhileTouched
 @property  double switcherCardShadowOffsetHorizontalWhileTouched
 @property  double switcherCardShadowOffsetVerticalWhileTouched
 @property  double cursorHoverShadowRadiusInterpolationAmount
 @property  double cursorHoverShadowOpacityInterpolationAmount
 @property  double cursorHoverShadowOffsetInterpolationAmount
 @property  double appExposeNonFloatingSingleRowScale
 @property  double appExposeNonFloatingDoubleRowScale
 @property  double appExposeFloatingDoubleRowScale
 @property  double gridSwitcherPageScale
 @property  double gridSwitcherHorizontalInterpageSpacingLandscape
 @property  double gridSwitcherVerticalNaturalSpacingLandscape
 @property  double gridSwitcherHorizontalInterpageSpacingPortrait
 @property  double gridSwitcherVerticalNaturalSpacingPortrait
 @property  double gridSwitcherSnapToControlCenterHeightSlop
 @property  double gridSwitcherSwipeUpNormalizedRubberbandingRange
 @property  double gridSwitcherSwipeUpNormalizedRubberbandedTranslationAtMinimumScale
 @property  double gridSwitcherSwipeUpMinimumScale
 @property  unsigned long numberOfSnapshotsToCacheInSwitcher
 @property  unsigned long numberOfSnapshotsToAlwaysKeepAround
 @property  double spacingBetweenLeadingEdgeAndIcon
 @property  double spacingBetweenTrailingEdgeAndLabels
 @property  double iconSideLength
 @property  double spacingBetweenSnapshotAndIcon
 @property  double spacingBetweenSnapshotAndDescriptionLabelBaseline
 @property  double spacingBetweenTitleAndSubtitleBaseline
 @property  double spacingBetweenIconAndLabel
 @property  double spacingBetweenLabelAndSecondIcon
 @property  double spacingBetweenBoundsCenterAndSecondIcon
 @property  double deckSwitcherPageScale
 @property  double deckSwitcherDecelerationRate
 @property  double aExpLayoutCoeff
 @property  double bExpLayoutCoeff
 @property  double depthPadding
 @property  double offscreenCardScaleForFlyIn
 @property  double coplanarSpacingPhone
 @property  double coplanarSpacingPad
 @property  BOOL useTitleOpacityPrototypeSettings
 @property  double titleOpacityACoeff
 @property  double titleOpacityBCoeff
 @property  double titleOpacityCCoeff
 @property  double titleOpacityDCoeff
 @property  BOOL showModifierDebugLabel
 @property  BOOL showMainModifierTimeline
 @property  BOOL showFloatingModifierTimeline
 @property  BOOL shouldDisableSwitcherModelUpdatesForDemo
 @property  SBFluidSwitcherAnimationSettings *animationSettings
 @property  PTOutlet *stashModelOutlet
 @property  PTOutlet *loadModelOutlet
 @property  PTOutlet *addAppsToModelOutlet
 @property  PTOutlet *addPPTAppsToModelOutlet

  // class methods
  +[SBAppSwitcherSettings settingsControllerModule]

  // instance methods
  -[SBAppSwitcherSettings mScale]
  -[SBAppSwitcherSettings setDefaultValues]
  -[SBAppSwitcherSettings spacingBetweenTrailingEdgeAndLabels]
  -[SBAppSwitcherSettings switcherCardShadowOffsetVertical]
  -[SBAppSwitcherSettings setUseAsynchronousRendering:]
  -[SBAppSwitcherSettings setSimplicityOptionNoShadows:]
  -[SBAppSwitcherSettings setSpacingBetweenLeadingEdgeAndIcon:]
  -[SBAppSwitcherSettings shouldRoundCornersDuringSwipeUp]
  -[SBAppSwitcherSettings setOffscreenCardScaleForFlyIn:]
  -[SBAppSwitcherSettings spacingBetweenLeadingEdgeAndIcon]
  -[SBAppSwitcherSettings setGridSwitcherHorizontalInterpageSpacingLandscape:]
  -[SBAppSwitcherSettings effectiveSwitcherStyle]
  -[SBAppSwitcherSettings setLoadModelOutlet:]
  -[SBAppSwitcherSettings simplicityOptions]
  -[SBAppSwitcherSettings setDeckSwitcherPageScale:]
  -[SBAppSwitcherSettings cursorHoverShadowOffsetInterpolationAmount]
  -[SBAppSwitcherSettings addPPTAppsToModelOutlet]
  -[SBAppSwitcherSettings deckSwitcherDecelerationRate]
  -[SBAppSwitcherSettings showFloatingModifierTimeline]
  -[SBAppSwitcherSettings setSwitcherCardShadowRadiusWhileTouched:]
  -[SBAppSwitcherSettings setNumberOfSnapshotsToCacheInSwitcher:]
  -[SBAppSwitcherSettings setAppExposeNonFloatingDoubleRowScale:]
  -[SBAppSwitcherSettings gridSwitcherSwipeUpMinimumScale]
  -[SBAppSwitcherSettings setSpacingBetweenSnapshotAndDescriptionLabelBaseline:]
  -[SBAppSwitcherSettings setBAlpha:]
  -[SBAppSwitcherSettings setSwitcherCardShadowOpacityWhileTouched:]
  -[SBAppSwitcherSettings spacingBetweenSnapshotAndDescriptionLabelBaseline]
  -[SBAppSwitcherSettings showModifierDebugLabel]
  -[SBAppSwitcherSettings setAddPPTAppsToModelOutlet:]
  -[SBAppSwitcherSettings coplanarSpacingPhone]
  -[SBAppSwitcherSettings setBDarkening:]
  -[SBAppSwitcherSettings setFloatingSwitcherSettings:]
  -[SBAppSwitcherSettings setIconSideLength:]
  -[SBAppSwitcherSettings setSpacingBetweenBoundsCenterAndSecondIcon:]
  -[SBAppSwitcherSettings spacingBetweenSnapshotAndIcon]
  -[SBAppSwitcherSettings setCursorHoverShadowOffsetInterpolationAmount:]
  -[SBAppSwitcherSettings switcherCardShadowOffsetHorizontal]
  -[SBAppSwitcherSettings setUseTitleOpacityPrototypeSettings:]
  -[SBAppSwitcherSettings setSwitcherStyle:]
  -[SBAppSwitcherSettings titleOpacityBCoeff]
  -[SBAppSwitcherSettings shouldDisableSwitcherModelUpdatesForDemo]
  -[SBAppSwitcherSettings .cxx_destruct]
  -[SBAppSwitcherSettings setMaxScale:]
  -[SBAppSwitcherSettings setGridSwitcherSwipeUpNormalizedRubberbandingRange:]
  -[SBAppSwitcherSettings setCenterPoint:]
  -[SBAppSwitcherSettings setShowFloats:]
  -[SBAppSwitcherSettings gridSwitcherPageScale]
  -[SBAppSwitcherSettings gridSwitcherSnapToControlCenterHeightSlop]
  -[SBAppSwitcherSettings appExposeNonFloatingSingleRowScale]
  -[SBAppSwitcherSettings maxDarkening]
  -[SBAppSwitcherSettings gridSwitcherHorizontalInterpageSpacingPortrait]
  -[SBAppSwitcherSettings maxScale]
  -[SBAppSwitcherSettings setSwitcherCenterYOffsetPercentOfScreenHeight:]
  -[SBAppSwitcherSettings titleOpacityCCoeff]
  -[SBAppSwitcherSettings setGridSwitcherVerticalNaturalSpacingLandscape:]
  -[SBAppSwitcherSettings gridSwitcherSwipeUpNormalizedRubberbandingRange]
  -[SBAppSwitcherSettings centerPoint]
  -[SBAppSwitcherSettings setSwitcherCardScaleWhileCursorHovered:]
  -[SBAppSwitcherSettings setCoplanarSpacingPhone:]
  -[SBAppSwitcherSettings setSimplicityOptionNoLabels:]
  -[SBAppSwitcherSettings setSpacingBetweenTitleAndSubtitleBaseline:]
  -[SBAppSwitcherSettings numberOfSnapshotsToCacheInSwitcher]
  -[SBAppSwitcherSettings setDeckSwitcherDecelerationRate:]
  -[SBAppSwitcherSettings numberOfSnapshotsToAlwaysKeepAround]
  -[SBAppSwitcherSettings addAppsToModelOutlet]
  -[SBAppSwitcherSettings gridSwitcherVerticalNaturalSpacingLandscape]
  -[SBAppSwitcherSettings switcherCardShadowOffsetHorizontalWhileTouched]
  -[SBAppSwitcherSettings switcherCardShadowOpacityWhileTouched]
  -[SBAppSwitcherSettings setSwitcherCardShadowOffsetVertical:]
  -[SBAppSwitcherSettings setStashModelOutlet:]
  -[SBAppSwitcherSettings setShouldRoundCornersDuringSwipeUp:]
  -[SBAppSwitcherSettings setSpacingBetweenTrailingEdgeAndLabels:]
  -[SBAppSwitcherSettings cursorHoverShadowOpacityInterpolationAmount]
  -[SBAppSwitcherSettings setMAlpha:]
  -[SBAppSwitcherSettings switcherCardShadowRadiusWhileTouched]
  -[SBAppSwitcherSettings setShowFloatingModifierTimeline:]
  -[SBAppSwitcherSettings setShowModifierDebugLabel:]
  -[SBAppSwitcherSettings setAsynchronousRenderingDisableSurfaceCacheDelayDuration:]
  -[SBAppSwitcherSettings simplicityOptionNoSnapshots]
  -[SBAppSwitcherSettings setOrbGestureSettings:]
  -[SBAppSwitcherSettings tetheredInsertionRemovalInsetForDeterminingVisibility]
  -[SBAppSwitcherSettings setDepthPadding:]
  -[SBAppSwitcherSettings offscreenCardScaleForFlyIn]
  -[SBAppSwitcherSettings cursorHoverShadowRadiusInterpolationAmount]
  -[SBAppSwitcherSettings simplicityOptionNoSnapshotBkg]
  -[SBAppSwitcherSettings setCoplanarSpacingPad:]
  -[SBAppSwitcherSettings stashModelOutlet]
  -[SBAppSwitcherSettings switcherStyle]
  -[SBAppSwitcherSettings setSwitcherCardShadowRadius:]
  -[SBAppSwitcherSettings gridSwitcherHorizontalInterpageSpacingLandscape]
  -[SBAppSwitcherSettings depthPadding]
  -[SBAppSwitcherSettings setTitleOpacityCCoeff:]
  -[SBAppSwitcherSettings deckSwitcherPageScale]
  -[SBAppSwitcherSettings shouldSimplifyForOptions:]
  -[SBAppSwitcherSettings asynchronousRenderingDisableSurfaceCacheDelayDuration]
  -[SBAppSwitcherSettings setMScale:]
  -[SBAppSwitcherSettings gridSwitcherSwipeUpNormalizedRubberbandedTranslationAtMinimumScale]
  -[SBAppSwitcherSettings setGridSwitcherSwipeUpNormalizedRubberbandedTranslationAtMinimumScale:]
  -[SBAppSwitcherSettings useAsynchronousRendering]
  -[SBAppSwitcherSettings setPreventMedusaSnapshotsAfterTransitionDuration:]
  -[SBAppSwitcherSettings setSimplicityOptionNoSnapshotBkg:]
  -[SBAppSwitcherSettings _spacingBetweenLeadingEdgeAndIcon]
  -[SBAppSwitcherSettings spacingBetweenTitleAndSubtitleBaseline]
  -[SBAppSwitcherSettings titleOpacityDCoeff]
  -[SBAppSwitcherSettings setShowMainModifierTimeline:]
  -[SBAppSwitcherSettings simplicityOptionNoBlurs]
  -[SBAppSwitcherSettings spacingBetweenIconAndLabel]
  -[SBAppSwitcherSettings switcherCardShadowOpacity]
  -[SBAppSwitcherSettings setSpacingBetweenSnapshotAndIcon:]
  -[SBAppSwitcherSettings setMaxDarkening:]
  -[SBAppSwitcherSettings setShouldDisableSwitcherModelUpdatesForDemo:]
  -[SBAppSwitcherSettings setAppExposeNonFloatingSingleRowScale:]
  -[SBAppSwitcherSettings setCursorHoverShadowRadiusInterpolationAmount:]
  -[SBAppSwitcherSettings setGridSwitcherHorizontalInterpageSpacingPortrait:]
  -[SBAppSwitcherSettings setSimplicityOptions:]
  -[SBAppSwitcherSettings setAnimationSettings:]
  -[SBAppSwitcherSettings showFloats]
  -[SBAppSwitcherSettings setNumberOfSnapshotsToAlwaysKeepAround:]
  -[SBAppSwitcherSettings gridSwitcherVerticalNaturalSpacingPortrait]
  -[SBAppSwitcherSettings setCursorHoverShadowOpacityInterpolationAmount:]
  -[SBAppSwitcherSettings setSwitcherCardScaleWhileTouched:]
  -[SBAppSwitcherSettings appExposeNonFloatingDoubleRowScale]
  -[SBAppSwitcherSettings bExpLayoutCoeff]
  -[SBAppSwitcherSettings animationSettings]
  -[SBAppSwitcherSettings setSimplicityOptionNoSnapshots:]
  -[SBAppSwitcherSettings bAlpha]
  -[SBAppSwitcherSettings setSimplicityOptionNoIcons:]
  -[SBAppSwitcherSettings setTitleOpacityDCoeff:]
  -[SBAppSwitcherSettings bDarkening]
  -[SBAppSwitcherSettings simplicityOptionNoCrossfade]
  -[SBAppSwitcherSettings setMDarkening:]
  -[SBAppSwitcherSettings simplicityOptionNoLabels]
  -[SBAppSwitcherSettings setSwitcherCardShadowOffsetVerticalWhileTouched:]
  -[SBAppSwitcherSettings orbGestureSettings]
  -[SBAppSwitcherSettings setSimplicityOptionNoControlCenter:]
  -[SBAppSwitcherSettings switcherCenterYOffsetPercentOfScreenHeight]
  -[SBAppSwitcherSettings simplicityOptionNoControlCenter]
  -[SBAppSwitcherSettings setGridSwitcherVerticalNaturalSpacingPortrait:]
  -[SBAppSwitcherSettings setTetheredInsertionRemovalInsetForDeterminingVisibility:]
  -[SBAppSwitcherSettings setSwitcherCardShadowOpacity:]
  -[SBAppSwitcherSettings appExposeFloatingDoubleRowScale]
  -[SBAppSwitcherSettings setAExpLayoutCoeff:]
  -[SBAppSwitcherSettings useTitleOpacityPrototypeSettings]
  -[SBAppSwitcherSettings setTitleOpacityBCoeff:]
  -[SBAppSwitcherSettings mDarkening]
  -[SBAppSwitcherSettings simplicityOptionNoShadows]
  -[SBAppSwitcherSettings setSpacingBetweenLabelAndSecondIcon:]
  -[SBAppSwitcherSettings setAppExposeFloatingDoubleRowScale:]
  -[SBAppSwitcherSettings spacingBetweenBoundsCenterAndSecondIcon]
  -[SBAppSwitcherSettings setBExpLayoutCoeff:]
  -[SBAppSwitcherSettings setSimplicityOptionNoBlurs:]
  -[SBAppSwitcherSettings coplanarSpacingPad]
  -[SBAppSwitcherSettings loadModelOutlet]
  -[SBAppSwitcherSettings setTitleOpacityACoeff:]
  -[SBAppSwitcherSettings iconSideLength]
  -[SBAppSwitcherSettings switcherCardShadowRadius]
  -[SBAppSwitcherSettings setSpacingBetweenIconAndLabel:]
  -[SBAppSwitcherSettings aExpLayoutCoeff]
  -[SBAppSwitcherSettings floatingSwitcherSettings]
  -[SBAppSwitcherSettings switcherCardScaleWhileTouched]
  -[SBAppSwitcherSettings archiveValueForKey:]
  -[SBAppSwitcherSettings simplicityOptionNoIcons]
  -[SBAppSwitcherSettings preventMedusaSnapshotsAfterTransitionDuration]
  -[SBAppSwitcherSettings switcherCardScaleWhileCursorHovered]
  -[SBAppSwitcherSettings showMainModifierTimeline]
  -[SBAppSwitcherSettings setGridSwitcherPageScale:]
  -[SBAppSwitcherSettings setAddAppsToModelOutlet:]
  -[SBAppSwitcherSettings setSwitcherCardShadowOffsetHorizontalWhileTouched:]
  -[SBAppSwitcherSettings mAlpha]
  -[SBAppSwitcherSettings spacingBetweenLabelAndSecondIcon]
  -[SBAppSwitcherSettings setSwitcherCardShadowOffsetHorizontal:]
  -[SBAppSwitcherSettings switcherCardShadowOffsetVerticalWhileTouched]
  -[SBAppSwitcherSettings titleOpacityACoeff]
  -[SBAppSwitcherSettings setSimplicityOptionNoCrossfade:]
  -[SBAppSwitcherSettings setGridSwitcherSnapToControlCenterHeightSlop:]
  -[SBAppSwitcherSettings setGridSwitcherSwipeUpMinimumScale:]


SBSystemGestureMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBSystemGestureMetric initForType:parentMetric:]
  -[SBSystemGestureMetric .cxx_destruct]


SBSystemGestureUsageMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long currentLocation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSystemGestureUsageMetric currentLocation]
  -[SBSystemGestureUsageMetric setCurrentLocation:]
  -[SBSystemGestureUsageMetric init]
  -[SBSystemGestureUsageMetric handleEvent:withContext:]
  -[SBSystemGestureUsageMetric .cxx_destruct]


SBHIDButtonStateArbiter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL longPressDisabled
 @property  double longPressTimeout
 @property  long long pressSequence
 @property  <SBHIDButtonStateDelegate> *delegate

  // instance methods
  -[SBHIDButtonStateArbiter .cxx_destruct]
  -[SBHIDButtonStateArbiter processEvent:]
  -[SBHIDButtonStateArbiter reset]
  -[SBHIDButtonStateArbiter setDelegate:]
  -[SBHIDButtonStateArbiter delegate]
  -[SBHIDButtonStateArbiter longPressTimeout]
  -[SBHIDButtonStateArbiter setLongPressTimeout:]
  -[SBHIDButtonStateArbiter isLongPressDisabled]
  -[SBHIDButtonStateArbiter _invalidateLongPressTimer]
  -[SBHIDButtonStateArbiter _longPressTimeoutDidOccur]
  -[SBHIDButtonStateArbiter _startLongPressTimerWithTimeout:]
  -[SBHIDButtonStateArbiter pressSequence]


SBOmnibusAlertItemTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBOmnibusAlertItemTestRecipe load]

  // instance methods
  -[SBOmnibusAlertItemTestRecipe .cxx_destruct]
  -[SBOmnibusAlertItemTestRecipe title]
  -[SBOmnibusAlertItemTestRecipe _mapsApp]
  -[SBOmnibusAlertItemTestRecipe handleVolumeIncrease]
  -[SBOmnibusAlertItemTestRecipe handleVolumeDecrease]
  -[SBOmnibusAlertItemTestRecipe _nextAlertItemToTest]
  -[SBOmnibusAlertItemTestRecipe _dismissCurrentItem]
  -[SBOmnibusAlertItemTestRecipe _anyAppIcon]
  -[SBOmnibusAlertItemTestRecipe _anyUserInstalledAppIcon]
  -[SBOmnibusAlertItemTestRecipe _anySUDescriptor]


SBAppResizeGestureWorkspaceTransaction : SBSystemGestureWorkspaceTransaction
 @property  SBMainDisplaySceneLayoutViewController *layoutViewController
 @property  SBLayoutElementViewController *primaryLayoutElementController
 @property  SBLayoutElementViewController *sideLayoutElementController
 @property  UIApplicationSceneDeactivationAssertion *appDeactivationAssertion
 @property  SBBlurViewCoordinator *blurCoordinator
 @property  SBMainWorkspaceTransaction *currentWorkspaceTransaction
 @property  unsigned long currentGestureIdentifier

  // class methods
  +[SBAppResizeGestureWorkspaceTransaction _rubberbandingStartScreenEdgeMarginInOrientation:]

  // instance methods
  -[SBAppResizeGestureWorkspaceTransaction _canBeInterrupted]
  -[SBAppResizeGestureWorkspaceTransaction _didComplete]
  -[SBAppResizeGestureWorkspaceTransaction _childTransactionDidComplete:]
  -[SBAppResizeGestureWorkspaceTransaction initWithTransitionRequest:]
  -[SBAppResizeGestureWorkspaceTransaction dealloc]
  -[SBAppResizeGestureWorkspaceTransaction _begin]
  -[SBAppResizeGestureWorkspaceTransaction .cxx_destruct]
  -[SBAppResizeGestureWorkspaceTransaction _rubberBandOffsetForOffset:maxOffset:minOffset:range:outside:]
  -[SBAppResizeGestureWorkspaceTransaction _convertRectFromReferenceCoordinateSpaceToContentViewCoordinateSpace:]
  -[SBAppResizeGestureWorkspaceTransaction _didInterruptWithReason:]
  -[SBAppResizeGestureWorkspaceTransaction _finishWithCompletionType:]
  -[SBAppResizeGestureWorkspaceTransaction systemGestureStateChanged:]
  -[SBAppResizeGestureWorkspaceTransaction _addChildWorkspaceTransaction:]
  -[SBAppResizeGestureWorkspaceTransaction initWithTransitionRequest:layoutViewController:]
  -[SBAppResizeGestureWorkspaceTransaction appDeactivationAssertion]
  -[SBAppResizeGestureWorkspaceTransaction blurCoordinator]
  -[SBAppResizeGestureWorkspaceTransaction _unhideLayoutElementViewControllerStatusBars]
  -[SBAppResizeGestureWorkspaceTransaction layoutViewController]
  -[SBAppResizeGestureWorkspaceTransaction _spaceConfigurationForGestureRegion:]
  -[SBAppResizeGestureWorkspaceTransaction _layoutModeForGestureRegion:]
  -[SBAppResizeGestureWorkspaceTransaction _maxRubberBandOffset]
  -[SBAppResizeGestureWorkspaceTransaction _canResizeToHalfHalf]
  -[SBAppResizeGestureWorkspaceTransaction _restartResizeUI]
  -[SBAppResizeGestureWorkspaceTransaction _updateResizeUIFromGestureRecognizer:]
  -[SBAppResizeGestureWorkspaceTransaction _dividerPositionFromPanGestureRecognizer:]
  -[SBAppResizeGestureWorkspaceTransaction _normalizedVelocityFromPanGestureRecognizer:]
  -[SBAppResizeGestureWorkspaceTransaction _resizeGestureFinishedWithState:gestureDividerPosition:normalizedVelocity:]
  -[SBAppResizeGestureWorkspaceTransaction currentGestureIdentifier]
  -[SBAppResizeGestureWorkspaceTransaction setCurrentGestureIdentifier:]
  -[SBAppResizeGestureWorkspaceTransaction setBlurCoordinator:]
  -[SBAppResizeGestureWorkspaceTransaction _hideLayoutElementViewControllerStatusBars]
  -[SBAppResizeGestureWorkspaceTransaction _pushInSceneLayoutViewController]
  -[SBAppResizeGestureWorkspaceTransaction primaryLayoutElementController]
  -[SBAppResizeGestureWorkspaceTransaction sideLayoutElementController]
  -[SBAppResizeGestureWorkspaceTransaction _resizeGestureRegionForLocation:velocity:]
  -[SBAppResizeGestureWorkspaceTransaction _getPrimaryLayoutElementViewFrame:sideLayoutElementViewFrame:separatorViewFrame:forResizeGestureRegion:location:allowRubberbanding:]
  -[SBAppResizeGestureWorkspaceTransaction _finalActionForGestureRegion:]
  -[SBAppResizeGestureWorkspaceTransaction _updateElementViewsAlphaAndGrabberForFinalAction:]
  -[SBAppResizeGestureWorkspaceTransaction _resizeGestureFinishedWithFinalAction:]
  -[SBAppResizeGestureWorkspaceTransaction _transitionContextForFinalAction:]
  -[SBAppResizeGestureWorkspaceTransaction _transactionForExecutingApplicationTransitionContext:eventLabel:]
  -[SBAppResizeGestureWorkspaceTransaction currentWorkspaceTransaction]
  -[SBAppResizeGestureWorkspaceTransaction _dismissResizeUIAnimated:]
  -[SBAppResizeGestureWorkspaceTransaction _animateElementViewsForFinalAction:forLayoutState:completionHandler:]
  -[SBAppResizeGestureWorkspaceTransaction _appFrameForElementWithRole:inLayoutState:spaceConfiguration:inCoordinateSpace:]
  -[SBAppResizeGestureWorkspaceTransaction _popOutSceneLayoutViewController]
  -[SBAppResizeGestureWorkspaceTransaction setCurrentWorkspaceTransaction:]
  -[SBAppResizeGestureWorkspaceTransaction _resizeGestureDidUpdate:]


SBApplicationSceneHandle : SBSceneHandle /usr/lib/libicucore.A.dylib
 @property  SBApplication *application
 @property  NSString *persistenceIdentifier
 @property  BOOL secure
 @property  long long layoutRole

  // class methods
  +[SBApplicationSceneHandle lookupOrCreatePersistenceIDFromApplication:sceneID:]

  // instance methods
  -[SBApplicationSceneHandle _modifyApplicationTransitionContext:fromRequestContext:entity:]
  -[SBApplicationSceneHandle persistenceIdentifier]
  -[SBApplicationSceneHandle _initWithScene:]
  -[SBApplicationSceneHandle _initWithDefinition:]
  -[SBApplicationSceneHandle _createParametersFromTransitionContext:entity:]
  -[SBApplicationSceneHandle _modifyApplicationSceneSettings:fromRequestContext:entity:]
  -[SBApplicationSceneHandle _applicationsDidChange:]
  -[SBApplicationSceneHandle displayItemRepresentation]
  -[SBApplicationSceneHandle _persistenceIdentifier]
  -[SBApplicationSceneHandle newSceneViewController]
  -[SBApplicationSceneHandle _initWithApplication:scene:displayIdentity:]
  -[SBApplicationSceneHandle removeSceneUpdateContributer:]
  -[SBApplicationSceneHandle application]
  -[SBApplicationSceneHandle _modifyApplicationSceneClientSettings:fromRequestContext:entity:initialSceneSettings:]
  -[SBApplicationSceneHandle isSecure]
  -[SBApplicationSceneHandle dealloc]
  -[SBApplicationSceneHandle _createProcessExecutionContextFromContext:entity:]
  -[SBApplicationSceneHandle .cxx_destruct]
  -[SBApplicationSceneHandle _modifyProcessExecutionContext:fromRequestContext:entity:]
  -[SBApplicationSceneHandle _initWithApplication:sceneDefinition:displayIdentity:]
  -[SBApplicationSceneHandle setLayoutRole:]
  -[SBApplicationSceneHandle _commonInitWithApplication:sceneIdentifier:displayIdentity:]
  -[SBApplicationSceneHandle addSceneUpdateContributer:]
  -[SBApplicationSceneHandle newScenePlaceholderContentContextWithActivationSettings:]
  -[SBApplicationSceneHandle _createApplicationSceneTransitionContextFromContext:entity:]
  -[SBApplicationSceneHandle layoutRole]
  -[SBApplicationSceneHandle _createApplicationSceneClientSettingsFromContext:entity:initialSceneSettings:]
  -[SBApplicationSceneHandle newSceneViewWithReferenceSize:orientation:hostRequester:]
  -[SBApplicationSceneHandle _createApplicationSceneSettingsFromContext:entity:]


SBUIStartupFromBlackAnimationController : SBUIMainScreenAnimationController
 @property  BSAnimationSettings *animationSettings
 @property  BOOL waitsForAppActivation

  // instance methods
  -[SBUIStartupFromBlackAnimationController _setHidden:]
  -[SBUIStartupFromBlackAnimationController .cxx_destruct]
  -[SBUIStartupFromBlackAnimationController _shouldDismissBanner]
  -[SBUIStartupFromBlackAnimationController setAnimationSettings:]
  -[SBUIStartupFromBlackAnimationController _prepareAnimation]
  -[SBUIStartupFromBlackAnimationController animationSettings]
  -[SBUIStartupFromBlackAnimationController _cleanupAnimation]
  -[SBUIStartupFromBlackAnimationController _startAnimation]
  -[SBUIStartupFromBlackAnimationController initWithTransitionContextProvider:]
  -[SBUIStartupFromBlackAnimationController _getTransitionWindow]
  -[SBUIStartupFromBlackAnimationController _waitsForActivatingSceneContentAvailableIfNecessary]
  -[SBUIStartupFromBlackAnimationController waitsForAppActivation]
  -[SBUIStartupFromBlackAnimationController setWaitsForAppActivation:]
  -[SBUIStartupFromBlackAnimationController _showBlackView]


SBUserAlertNotificationSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBAlertItemsControllerObserver, NCNotificationSource, SBAlertItemPresenter>
 @property  NCNotificationDispatcher *dispatcher
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUserAlertNotificationSource setDispatcher:]
  -[SBUserAlertNotificationSource dispatcher]
  -[SBUserAlertNotificationSource alertItemsController:willActivateAlertItem:]
  -[SBUserAlertNotificationSource presentAlertItem:animated:completion:]
  -[SBUserAlertNotificationSource initWithDispatcher:]
  -[SBUserAlertNotificationSource dealloc]
  -[SBUserAlertNotificationSource dismissAlertItem:animated:completion:]
  -[SBUserAlertNotificationSource .cxx_destruct]
  -[SBUserAlertNotificationSource alertItemsController:didDeactivateAlertItem:forReason:]
  -[SBUserAlertNotificationSource presentsAlertItemsModally]
  -[SBUserAlertNotificationSource alertItemsController:didActivateAlertItem:]
  -[SBUserAlertNotificationSource canPresentMultipleAlertItemsSimultaneously]


SBClientAlertItemTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBClientAlertItemTestRecipe load]

  // instance methods
  -[SBClientAlertItemTestRecipe .cxx_destruct]
  -[SBClientAlertItemTestRecipe title]
  -[SBClientAlertItemTestRecipe _mapsApp]
  -[SBClientAlertItemTestRecipe handleVolumeIncrease]
  -[SBClientAlertItemTestRecipe handleVolumeDecrease]
  -[SBClientAlertItemTestRecipe _nextAlertItemToTest]
  -[SBClientAlertItemTestRecipe _dismissCurrentItem]
  -[SBClientAlertItemTestRecipe _anySUDescriptor]
  -[SBClientAlertItemTestRecipe _chatCarrierSMSAlert]
  -[SBClientAlertItemTestRecipe _chatMMSDelayedDownloadAlert]
  -[SBClientAlertItemTestRecipe _chatMMSInformationMissingAlert]
  -[SBClientAlertItemTestRecipe _mapsThermalAlert]
  -[SBClientAlertItemTestRecipe _wifiBTSSPAlert]
  -[SBClientAlertItemTestRecipe _wifiDontAskAlert]
  -[SBClientAlertItemTestRecipe _wifiErrorAlert]
  -[SBClientAlertItemTestRecipe _wifiIsEnterpriseAlert]
  -[SBClientAlertItemTestRecipe _wifiPasswordAlert]
  -[SBClientAlertItemTestRecipe _wifiTrustAlert]
  -[SBClientAlertItemTestRecipe educationAlertWasDeactivated:]
  -[SBClientAlertItemTestRecipe _currentAssistantLanguage]


SBReachabilitySettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL allowOnAllDevices
 @property  double reachabilityDefaultKeepAlive
 @property  double reachabilityInteractiveKeepAlive
 @property  double yOffsetFactor
 @property  double homeGestureSwipeDownHysteresis
 @property  double homeGestureSwipeDownHeight
 @property  double systemWideSwipeDownHeight
 @property  SBFFluidBehaviorSettings *animationSettings

  // class methods
  +[SBReachabilitySettings settingsControllerModule]

  // instance methods
  -[SBReachabilitySettings setDefaultValues]
  -[SBReachabilitySettings yOffset]
  -[SBReachabilitySettings .cxx_destruct]
  -[SBReachabilitySettings setAnimationSettings:]
  -[SBReachabilitySettings animationSettings]
  -[SBReachabilitySettings allowOnAllDevices]
  -[SBReachabilitySettings reachabilityInteractiveKeepAlive]
  -[SBReachabilitySettings reachabilityDefaultKeepAlive]
  -[SBReachabilitySettings setAllowOnAllDevices:]
  -[SBReachabilitySettings setReachabilityDefaultKeepAlive:]
  -[SBReachabilitySettings setReachabilityInteractiveKeepAlive:]
  -[SBReachabilitySettings setYOffsetFactor:]
  -[SBReachabilitySettings setHomeGestureSwipeDownHysteresis:]
  -[SBReachabilitySettings setHomeGestureSwipeDownHeight:]
  -[SBReachabilitySettings setSystemWideSwipeDownHeight:]
  -[SBReachabilitySettings yOffsetFactor]
  -[SBReachabilitySettings homeGestureSwipeDownHysteresis]
  -[SBReachabilitySettings homeGestureSwipeDownHeight]
  -[SBReachabilitySettings systemWideSwipeDownHeight]


SBCameraHardwareButtonStudyLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBCameraHardwareButtonStudyLogger init]
  -[SBCameraHardwareButtonStudyLogger dealloc]
  -[SBCameraHardwareButtonStudyLogger .cxx_destruct]
  -[SBCameraHardwareButtonStudyLogger logButtonEvent:]
  -[SBCameraHardwareButtonStudyLogger logPocketState:]
  -[SBCameraHardwareButtonStudyLogger _startProcessMonitor]
  -[SBCameraHardwareButtonStudyLogger _stopProcessMonitor]


SBDashBoardPolicyBasedBehaviorProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalBehaviorProviding>
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBDashBoardPolicyBasedBehaviorProvider coverSheetIdentifier]
  -[SBDashBoardPolicyBasedBehaviorProvider scrollingStrategy]
  -[SBDashBoardPolicyBasedBehaviorProvider notificationBehavior]
  -[SBDashBoardPolicyBasedBehaviorProvider conformsToCSBehaviorProviding]
  -[SBDashBoardPolicyBasedBehaviorProvider restrictedCapabilities]
  -[SBDashBoardPolicyBasedBehaviorProvider proximityDetectionMode]
  -[SBDashBoardPolicyBasedBehaviorProvider dealloc]
  -[SBDashBoardPolicyBasedBehaviorProvider conformsToCSExternalBehaviorProviding]
  -[SBDashBoardPolicyBasedBehaviorProvider .cxx_destruct]
  -[SBDashBoardPolicyBasedBehaviorProvider _cameraRestrictions]
  -[SBDashBoardPolicyBasedBehaviorProvider participantState]
  -[SBDashBoardPolicyBasedBehaviorProvider initWithCoverSheetViewController:policyAggregator:]
  -[SBDashBoardPolicyBasedBehaviorProvider _restrictedCapability:forAggregatorCapability:]


SBRootSceneWindow : UIRootSceneWindow /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard

SBSpringBoardApplicationIcon : SBLeafIcon /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
  // instance methods
  -[SBSpringBoardApplicationIcon generateIconImageWithInfo:]
  -[SBSpringBoardApplicationIcon init]
  -[SBSpringBoardApplicationIcon displayNameForLocation:]
  -[SBSpringBoardApplicationIcon canTruncateLabel]
  -[SBSpringBoardApplicationIcon canTightenLabel]
  -[SBSpringBoardApplicationIcon initWithLeafIdentifier:applicationBundleID:]
  -[SBSpringBoardApplicationIcon isUninstallSupported]
  -[SBSpringBoardApplicationIcon initWithInterfaceStyle:]
  -[SBSpringBoardApplicationIcon _generateImageWithInfo:]


SBTransientOverlayBlockTransitionCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTransientOverlayTransitionCoordinating>
 @property  @? startTransitionHandler
 @property  @? finalizeTransitionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTransientOverlayBlockTransitionCoordinator .cxx_destruct]
  -[SBTransientOverlayBlockTransitionCoordinator setStartTransitionHandler:]
  -[SBTransientOverlayBlockTransitionCoordinator setFinalizeTransitionHandler:]
  -[SBTransientOverlayBlockTransitionCoordinator finalizeTransitionWithContextProvider:]
  -[SBTransientOverlayBlockTransitionCoordinator startTransitionWithContextProvider:]
  -[SBTransientOverlayBlockTransitionCoordinator startTransitionHandler]
  -[SBTransientOverlayBlockTransitionCoordinator finalizeTransitionHandler]


SBFullScreenToHomeCenterZoomDownSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier homeScreenBackdropBlurType]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier visibleAppLayouts]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier scaleForIndex:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier isHomeScreenContentRequired]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier topMostLayoutElements]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier isSwitcherWindowVisible]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier wallpaperStyle]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier cardCornerRadiiForIndex:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier _layoutSettings]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier frameForIndex:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier .cxx_destruct]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier transitionWillBegin]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier didMoveToParentModifier:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier _opacitySettings]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier initWithTransitionID:appLayout:offsetYPercentOfScreenHeight:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier _isIndexCenterZoomAppLayout:]
  -[SBFullScreenToHomeCenterZoomDownSwitcherModifier _offsetYForCenterZoom]


SBActivateAppUnderLockScreenWorkspaceTransaction : SBToAppsWorkspaceTransaction
  // instance methods
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _setupAndActivate]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _didComplete]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction initWithTransitionRequest:lockScreenEnvironment:]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction dealloc]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _begin]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _activateLockScreen]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction .cxx_destruct]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction shouldPlaceOutgoingScenesUnderLockOnCompletion]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction shouldPerformToAppStateCleanupOnCompletion]
  -[SBActivateAppUnderLockScreenWorkspaceTransaction _lockScreenDidActivate]


SBCrossfadeDosidoSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBCrossfadeDosidoSwitcherModifier homeScreenBackdropBlurType]
  -[SBCrossfadeDosidoSwitcherModifier visibleAppLayouts]
  -[SBCrossfadeDosidoSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBCrossfadeDosidoSwitcherModifier homeScreenAlpha]
  -[SBCrossfadeDosidoSwitcherModifier scaleForIndex:]
  -[SBCrossfadeDosidoSwitcherModifier isHomeScreenContentRequired]
  -[SBCrossfadeDosidoSwitcherModifier topMostLayoutElements]
  -[SBCrossfadeDosidoSwitcherModifier isSwitcherWindowVisible]
  -[SBCrossfadeDosidoSwitcherModifier animationAttributesForLayoutElement:]
  -[SBCrossfadeDosidoSwitcherModifier wallpaperStyle]
  -[SBCrossfadeDosidoSwitcherModifier opacityForIndex:]
  -[SBCrossfadeDosidoSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBCrossfadeDosidoSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBCrossfadeDosidoSwitcherModifier frameForIndex:]
  -[SBCrossfadeDosidoSwitcherModifier homeScreenDimmingAlpha]
  -[SBCrossfadeDosidoSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBCrossfadeDosidoSwitcherModifier .cxx_destruct]
  -[SBCrossfadeDosidoSwitcherModifier homeScreenScale]
  -[SBCrossfadeDosidoSwitcherModifier transitionWillBegin]
  -[SBCrossfadeDosidoSwitcherModifier wallpaperScale]
  -[SBCrossfadeDosidoSwitcherModifier transactionCompletionOptions]
  -[SBCrossfadeDosidoSwitcherModifier _isToAppLayoutAtIndex:]
  -[SBCrossfadeDosidoSwitcherModifier _opacitySettings]
  -[SBCrossfadeDosidoSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]
  -[SBCrossfadeDosidoSwitcherModifier _isFromAppLayoutAtIndex:]
  -[SBCrossfadeDosidoSwitcherModifier _shouldEnsureHomeScreenVisible]


SBMesaUnlockTrigger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBMesaUnlockTriggerDelegate> *delegate
 @property  BOOL authenticated

  // instance methods
  -[SBMesaUnlockTrigger screenOff]
  -[SBMesaUnlockTrigger fingerOn]
  -[SBMesaUnlockTrigger .cxx_destruct]
  -[SBMesaUnlockTrigger authenticated]
  -[SBMesaUnlockTrigger succinctDescriptionBuilder]
  -[SBMesaUnlockTrigger menuButtonDown]
  -[SBMesaUnlockTrigger setAuthenticated:]
  -[SBMesaUnlockTrigger succinctDescription]
  -[SBMesaUnlockTrigger menuButtonUp]
  -[SBMesaUnlockTrigger lockButtonDown]
  -[SBMesaUnlockTrigger setDelegate:]
  -[SBMesaUnlockTrigger significantUserInteractionOccurred]
  -[SBMesaUnlockTrigger delegate]
  -[SBMesaUnlockTrigger descriptionWithMultilinePrefix:]
  -[SBMesaUnlockTrigger descriptionBuilderWithMultilinePrefix:]
  -[SBMesaUnlockTrigger bioUnlock]
  -[SBMesaUnlockTrigger fingerOff]


SBMainDisplaySceneLayoutGestureManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSTransactionObserver, SBPanSystemGestureRecognizerDelegate>
 @property  SBMainDisplaySceneLayoutViewController *sceneLayoutViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMainDisplaySceneLayoutGestureManager transactionDidComplete:]
  -[SBMainDisplaySceneLayoutGestureManager viewForSystemGestureRecognizer:]
  -[SBMainDisplaySceneLayoutGestureManager init]
  -[SBMainDisplaySceneLayoutGestureManager sceneLayoutViewController]
  -[SBMainDisplaySceneLayoutGestureManager initWithSceneLayoutViewController:]
  -[SBMainDisplaySceneLayoutGestureManager .cxx_destruct]
  -[SBMainDisplaySceneLayoutGestureManager gestureRecognizer:shouldReceiveTouch:]
  -[SBMainDisplaySceneLayoutGestureManager _handleResizePanSystemGestureRecognizer:]
  -[SBMainDisplaySceneLayoutGestureManager _hasActiveModalFloatingApplication]
  -[SBMainDisplaySceneLayoutGestureManager _allowSystemGestureRecognizer:withSystemGestureType:toReceiveTouchAtLocation:]
  -[SBMainDisplaySceneLayoutGestureManager canBeginAppResizeGestureRecognizerAtLocation:]
  -[SBMainDisplaySceneLayoutGestureManager _createResizePanSystemGestureRecognizerWorkspaceTransactionForPanSystemGestureRecognizer:]
  -[SBMainDisplaySceneLayoutGestureManager _hasActiveSystemGestureRecognizerWorkspaceTransaction]


SBDashBoardApplicationInformer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSApplicationInforming>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardApplicationInformer init]
  -[SBDashBoardApplicationInformer dealloc]
  -[SBDashBoardApplicationInformer _installedApplicationsDidChange:]
  -[SBDashBoardApplicationInformer .cxx_destruct]
  -[SBDashBoardApplicationInformer _isBundleIdentifierBlockedForScreenTimeExpiration:]
  -[SBDashBoardApplicationInformer _isBundleIdentifierBlockedForCommunicationPolicy:]
  -[SBDashBoardApplicationInformer shouldScreenTimeSuppressNotificationsForBundleIdentifier:]
  -[SBDashBoardApplicationInformer _screenTimeNotificationPolicyDidChange:]
  -[SBDashBoardApplicationInformer isBundleIdentifierClock:]
  -[SBDashBoardApplicationInformer isBundleIdentifierWallet:]
  -[SBDashBoardApplicationInformer addApplicationInformationObserver:]
  -[SBDashBoardApplicationInformer removeApplicationInformationObserver:]


SBFullScreenToHomeSlideOverSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBFullScreenToHomeSlideOverSwitcherModifier homeScreenBackdropBlurType]
  -[SBFullScreenToHomeSlideOverSwitcherModifier visibleAppLayouts]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBFullScreenToHomeSlideOverSwitcherModifier homeScreenAlpha]
  -[SBFullScreenToHomeSlideOverSwitcherModifier scaleForIndex:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isHomeScreenContentRequired]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isSwitcherWindowVisible]
  -[SBFullScreenToHomeSlideOverSwitcherModifier animationAttributesForLayoutElement:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier wallpaperStyle]
  -[SBFullScreenToHomeSlideOverSwitcherModifier cardCornerRadiiForIndex:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier opacityForIndex:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBFullScreenToHomeSlideOverSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBFullScreenToHomeSlideOverSwitcherModifier frameForIndex:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier .cxx_destruct]
  -[SBFullScreenToHomeSlideOverSwitcherModifier initWithTransitionID:appLayout:direction:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier transitionWillBegin]
  -[SBFullScreenToHomeSlideOverSwitcherModifier _isIndexSlideOverAppLayout:]
  -[SBFullScreenToHomeSlideOverSwitcherModifier _shouldApplySlideOverLayoutToIndex:]


SBLockScreenEmergencyCallViewController : SBUIEmergencyCallHostViewController /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer
 @property  <SBLockScreenEmergencyCallViewControllerDelegate> *delegate

  // instance methods
  -[SBLockScreenEmergencyCallViewController setBackgroundStyle:]
  -[SBLockScreenEmergencyCallViewController dismiss]
  -[SBLockScreenEmergencyCallViewController .cxx_destruct]
  -[SBLockScreenEmergencyCallViewController tintColorForBackgroundStyle:outBlurRadius:]
  -[SBLockScreenEmergencyCallViewController _canShowWhileLocked]
  -[SBLockScreenEmergencyCallViewController setDelegate:]
  -[SBLockScreenEmergencyCallViewController delegate]
  -[SBLockScreenEmergencyCallViewController viewServiceDidTerminateWithError:]
  -[SBLockScreenEmergencyCallViewController _wallpaperStyleFromUIBackgroundStyle:]


SBSwitcherModelRemovalResults : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *appLayouts

  // instance methods
  -[SBSwitcherModelRemovalResults .cxx_destruct]
  -[SBSwitcherModelRemovalResults appLayouts]
  -[SBSwitcherModelRemovalResults actionForAppLayout:]
  -[SBSwitcherModelRemovalResults setAction:forAppLayout:]


SBSwitcherModelRemovalResultAction : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long actionType
 @property  SBAppLayout *replacementAppLayout

  // class methods
  +[SBSwitcherModelRemovalResultAction replacementActionWithAppLayout:mutationBlock:]
  +[SBSwitcherModelRemovalResultAction hideActionWithMutationBlock:]
  +[SBSwitcherModelRemovalResultAction removeActionWithMutationBlock:]

  // instance methods
  -[SBSwitcherModelRemovalResultAction actionType]
  -[SBSwitcherModelRemovalResultAction dealloc]
  -[SBSwitcherModelRemovalResultAction .cxx_destruct]
  -[SBSwitcherModelRemovalResultAction executeModelMutation]
  -[SBSwitcherModelRemovalResultAction replacementAppLayout]
  -[SBSwitcherModelRemovalResultAction _initWithActionType:modelMutationBlock:]


_SBStatusBarLocalDataOverridesWrapper : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  ^{?=[43B]b1b1b1b1b1b1b1b1b2b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1Ib1b1b1b1b1b1b1{?=[43B][64c][64c][256c]iiii[100c][100c][100c][100c][2[100c]][1024c]IIb1b1iib1IIiI[150c]iib1b1b1[256c]b1b1b1b1b2b1Ib1b1b1[256c][256c][100c]b1b1b1b1db1b1[100c][100c]}} overrides

  // instance methods
  -[_SBStatusBarLocalDataOverridesWrapper dealloc]
  -[_SBStatusBarLocalDataOverridesWrapper overrides]
  -[_SBStatusBarLocalDataOverridesWrapper setOverrides:]


SBUIStartupToHomescreenAnimationController : SBUIMainScreenAnimationController
  // instance methods
  -[SBUIStartupToHomescreenAnimationController _animationDelay]
  -[SBUIStartupToHomescreenAnimationController initWithTransitionContextProvider:overlay:]
  -[SBUIStartupToHomescreenAnimationController .cxx_destruct]
  -[SBUIStartupToHomescreenAnimationController _shouldDismissBanner]
  -[SBUIStartupToHomescreenAnimationController _prepareAnimation]
  -[SBUIStartupToHomescreenAnimationController animationSettings]
  -[SBUIStartupToHomescreenAnimationController _cleanupAnimation]
  -[SBUIStartupToHomescreenAnimationController _startAnimation]
  -[SBUIStartupToHomescreenAnimationController initWithTransitionContextProvider:]


SBControlCenterPresentationObservationToken : SBPresentationObservationToken
 @property  SBControlCenterController *controlCenterController

  // instance methods
  -[SBControlCenterPresentationObservationToken dealloc]
  -[SBControlCenterPresentationObservationToken .cxx_destruct]
  -[SBControlCenterPresentationObservationToken state]
  -[SBControlCenterPresentationObservationToken initWithControlCenterController:]
  -[SBControlCenterPresentationObservationToken controlCenterController]


SBBlurItemContainerSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBAppLayout *appLayout
 @property  BOOL shouldBlur

  // instance methods
  -[SBBlurItemContainerSwitcherEventResponse appLayout]
  -[SBBlurItemContainerSwitcherEventResponse .cxx_destruct]
  -[SBBlurItemContainerSwitcherEventResponse type]
  -[SBBlurItemContainerSwitcherEventResponse shouldBlur]
  -[SBBlurItemContainerSwitcherEventResponse initWithAppLayout:shouldBlur:]


SBVoiceControlTransientOverlayViewController : SBTransientOverlayViewController <SBVoiceControlViewControllerDelegate, CSExternalBehaviorProviding>
 @property  NSArray *nextRecognitionAudioInputPaths
 @property  BOOL shouldAllowSensitiveActions
 @property  BOOL shouldDisableHandlerActions
 @property  BOOL shouldDisableVoiceControlForBluetoothRequests
 @property  BOOL voiceControlLoggingEnabled
 @property  <SBVoiceControlTransientOverlayViewControllerDelegate> *voiceControlDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBVoiceControlTransientOverlayViewController viewDidLoad]
  -[SBVoiceControlTransientOverlayViewController handleHomeButtonPress]
  -[SBVoiceControlTransientOverlayViewController coverSheetIdentifier]
  -[SBVoiceControlTransientOverlayViewController canResignFirstResponder]
  -[SBVoiceControlTransientOverlayViewController becomeFirstResponder]
  -[SBVoiceControlTransientOverlayViewController initWithSource:]
  -[SBVoiceControlTransientOverlayViewController preferredWhitePointAdaptivityStyle]
  -[SBVoiceControlTransientOverlayViewController idleTimerDuration]
  -[SBVoiceControlTransientOverlayViewController childViewControllerForHomeIndicatorAutoHidden]
  -[SBVoiceControlTransientOverlayViewController resignFirstResponder]
  -[SBVoiceControlTransientOverlayViewController preferredStatusBarStyle]
  -[SBVoiceControlTransientOverlayViewController scrollingStrategy]
  -[SBVoiceControlTransientOverlayViewController notificationBehavior]
  -[SBVoiceControlTransientOverlayViewController conformsToCSBehaviorProviding]
  -[SBVoiceControlTransientOverlayViewController idleWarnMode]
  -[SBVoiceControlTransientOverlayViewController idleTimerMode]
  -[SBVoiceControlTransientOverlayViewController restrictedCapabilities]
  -[SBVoiceControlTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBVoiceControlTransientOverlayViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBVoiceControlTransientOverlayViewController proximityDetectionMode]
  -[SBVoiceControlTransientOverlayViewController dealloc]
  -[SBVoiceControlTransientOverlayViewController conformsToCSExternalBehaviorProviding]
  -[SBVoiceControlTransientOverlayViewController shouldAutorotate]
  -[SBVoiceControlTransientOverlayViewController .cxx_destruct]
  -[SBVoiceControlTransientOverlayViewController canBecomeFirstResponder]
  -[SBVoiceControlTransientOverlayViewController _preferredStatusBarVisibility]
  -[SBVoiceControlTransientOverlayViewController supportedInterfaceOrientations]
  -[SBVoiceControlTransientOverlayViewController setContainerOrientation:]
  -[SBVoiceControlTransientOverlayViewController participantState]
  -[SBVoiceControlTransientOverlayViewController viewDidAppear:]
  -[SBVoiceControlTransientOverlayViewController childViewControllerForScreenEdgesDeferringSystemGestures]
  -[SBVoiceControlTransientOverlayViewController viewWillAppear:]
  -[SBVoiceControlTransientOverlayViewController _canShowWhileLocked]
  -[SBVoiceControlTransientOverlayViewController viewDidDisappear:]
  -[SBVoiceControlTransientOverlayViewController viewWillDisappear:]
  -[SBVoiceControlTransientOverlayViewController viewDidLayoutSubviews]
  -[SBVoiceControlTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBVoiceControlTransientOverlayViewController beginIgnoringAppearanceUpdates]
  -[SBVoiceControlTransientOverlayViewController endIgnoringAppearanceUpdates]
  -[SBVoiceControlTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBVoiceControlTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBVoiceControlTransientOverlayViewController handleGestureDismissal]
  -[SBVoiceControlTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBVoiceControlTransientOverlayViewController shouldDisableOrientationUpdates]
  -[SBVoiceControlTransientOverlayViewController prefersProximityDetectionEnabled]
  -[SBVoiceControlTransientOverlayViewController resetSessionWithSource:]
  -[SBVoiceControlTransientOverlayViewController handleHeadsetButtonUpFromButtonDownSource:]
  -[SBVoiceControlTransientOverlayViewController setNextRecognitionAudioInputPaths:]
  -[SBVoiceControlTransientOverlayViewController setVoiceControlDelegate:]
  -[SBVoiceControlTransientOverlayViewController isVoiceControlLoggingEnabled]
  -[SBVoiceControlTransientOverlayViewController setVoiceControlLoggingEnabled:]
  -[SBVoiceControlTransientOverlayViewController setShouldDisableHandlerActions:]
  -[SBVoiceControlTransientOverlayViewController setShouldDisableVoiceControlForBluetoothRequests:]
  -[SBVoiceControlTransientOverlayViewController setShouldAllowSensitiveActions:]
  -[SBVoiceControlTransientOverlayViewController nextRecognitionAudioInputPaths]
  -[SBVoiceControlTransientOverlayViewController shouldAllowSensitiveActions]
  -[SBVoiceControlTransientOverlayViewController shouldDisableHandlerActions]
  -[SBVoiceControlTransientOverlayViewController shouldDisableVoiceControlForBluetoothRequests]
  -[SBVoiceControlTransientOverlayViewController voiceControlViewControllerPrefersProximityDetectionEnabledDidChange:]
  -[SBVoiceControlTransientOverlayViewController voiceControlViewControllerRequestsDismissal:]
  -[SBVoiceControlTransientOverlayViewController voiceControlDelegate]


SBIndirectPanGestureRecognizer : UIGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <_UIHoverEventRespondable, SBIndirectTouchLifecycleObserving, SBGestureRecognizerTouchHistoryProviding, SBGestureRecognizerPanGestureProviding>
 @property  {CGPoint=dd} origin
 @property  {CGPoint=dd} lastKnownPoint
 @property  unsigned long activatedEdge
 @property  BOOL shouldSwitchAxes
 @property  SBTouchHistory *touchHistory
 @property  UIEvent *currentHoverEvent
 @property  UITouch *currentTouch
 @property  BSMonotonicReferenceTime *lastKnownMouseEventTimestamp
 @property  NSTimer *mouseIdleTimer
 @property  NSValue *gestureStartLocation
 @property  BSMonotonicReferenceTime *mouseEnteredNearEdgeRegionTimestamp
 @property  BOOL gesturePassedThroughScreenCenterRegion
 @property  BSMonotonicReferenceTime *lastMouseActivationTimestamp
 @property  double trackpadHysteresis
 @property  double mouseHysteresis
 @property  {CGPoint=dd} translationWithinHysteresisRange
 @property  SBSystemGestureManager *systemGestureManager
 @property  unsigned long edges
 @property  BOOL shouldCancelAfterMovingAwayFromEdge
 @property  BOOL shouldInvertXAxis
 @property  BOOL shouldInvertYAxis
 @property  BOOL pausedUntilTouchedUpOrMovedAwayFromEdge
 @property  @? translationAdjustmentBlock
 @property  BOOL shouldActivateWithThreshold
 @property  double activationRecognitionDistance
 @property  BOOL shouldRequireGestureToStartAtEdge
 @property  unsigned long endReason
 @property  unsigned long currentInputType
 @property  <SBIndirectPanGestureRecognizerOrientationProviding> *orientationProvider
 @property  <SBSystemGestureRecognizerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBIndirectPanGestureRecognizer setOrigin:]
  -[SBIndirectPanGestureRecognizer _hoverEntered:withEvent:]
  -[SBIndirectPanGestureRecognizer peakSpeed]
  -[SBIndirectPanGestureRecognizer pausedUntilTouchedUpOrMovedAwayFromEdge]
  -[SBIndirectPanGestureRecognizer _hoverMoved:withEvent:]
  -[SBIndirectPanGestureRecognizer _hoverExited:withEvent:]
  -[SBIndirectPanGestureRecognizer canPreventGestureRecognizer:]
  -[SBIndirectPanGestureRecognizer currentInputType]
  -[SBIndirectPanGestureRecognizer touchHistory]
  -[SBIndirectPanGestureRecognizer _hasTranslationReachedThreshold:withTranslation:forEdge:]
  -[SBIndirectPanGestureRecognizer setTrackpadHysteresis:]
  -[SBIndirectPanGestureRecognizer locationInView:]
  -[SBIndirectPanGestureRecognizer origin]
  -[SBIndirectPanGestureRecognizer systemGestureManager]
  -[SBIndirectPanGestureRecognizer trackpadDidTouchUpWithEvent:]
  -[SBIndirectPanGestureRecognizer currentHoverEvent]
  -[SBIndirectPanGestureRecognizer translationAdjustmentBlock]
  -[SBIndirectPanGestureRecognizer setShouldActivateWithThreshold:]
  -[SBIndirectPanGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBIndirectPanGestureRecognizer setShouldCancelAfterMovingAwayFromEdge:]
  -[SBIndirectPanGestureRecognizer setCurrentTouch:]
  -[SBIndirectPanGestureRecognizer velocityInView:]
  -[SBIndirectPanGestureRecognizer dealloc]
  -[SBIndirectPanGestureRecognizer _updateTranslationWithPointerEventAttributes:activeEdge:]
  -[SBIndirectPanGestureRecognizer setLastKnownPoint:]
  -[SBIndirectPanGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBIndirectPanGestureRecognizer setMouseHysteresis:]
  -[SBIndirectPanGestureRecognizer .cxx_destruct]
  -[SBIndirectPanGestureRecognizer endReason]
  -[SBIndirectPanGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBIndirectPanGestureRecognizer setShouldSwitchAxes:]
  -[SBIndirectPanGestureRecognizer setActivatedEdge:]
  -[SBIndirectPanGestureRecognizer setTranslationAdjustmentBlock:]
  -[SBIndirectPanGestureRecognizer gestureStartLocation]
  -[SBIndirectPanGestureRecognizer _hoverCancelled:withEvent:]
  -[SBIndirectPanGestureRecognizer _resetTranslationState]
  -[SBIndirectPanGestureRecognizer canBePreventedByGestureRecognizer:]
  -[SBIndirectPanGestureRecognizer _mouseIdleTimerElapsed]
  -[SBIndirectPanGestureRecognizer setPausedUntilTouchedUpOrMovedAwayFromEdge:]
  -[SBIndirectPanGestureRecognizer setLastMouseActivationTimestamp:]
  -[SBIndirectPanGestureRecognizer orientationProvider]
  -[SBIndirectPanGestureRecognizer gesturePassedThroughScreenCenterRegion]
  -[SBIndirectPanGestureRecognizer shouldInvertXAxis]
  -[SBIndirectPanGestureRecognizer initWithTarget:action:edges:]
  -[SBIndirectPanGestureRecognizer trackpadHysteresis]
  -[SBIndirectPanGestureRecognizer mouseHysteresis]
  -[SBIndirectPanGestureRecognizer setShouldInvertXAxis:]
  -[SBIndirectPanGestureRecognizer edges]
  -[SBIndirectPanGestureRecognizer mouseIdleTimer]
  -[SBIndirectPanGestureRecognizer _shouldReceiveEvent:]
  -[SBIndirectPanGestureRecognizer setTouchHistory:]
  -[SBIndirectPanGestureRecognizer _convertPoint:fromView:toView:]
  -[SBIndirectPanGestureRecognizer setSystemGestureManager:]
  -[SBIndirectPanGestureRecognizer shouldRequireGestureToStartAtEdge]
  -[SBIndirectPanGestureRecognizer _pointerModelLocation]
  -[SBIndirectPanGestureRecognizer shouldInvertYAxis]
  -[SBIndirectPanGestureRecognizer _edgeForPointerModelLocation:inView:inset:]
  -[SBIndirectPanGestureRecognizer lastMouseActivationTimestamp]
  -[SBIndirectPanGestureRecognizer setMouseIdleTimer:]
  -[SBIndirectPanGestureRecognizer _isPointOnRoundedCorner:corner:radius:inView:]
  -[SBIndirectPanGestureRecognizer setOrientationProvider:]
  -[SBIndirectPanGestureRecognizer reset]
  -[SBIndirectPanGestureRecognizer translationWithinHysteresisRange]
  -[SBIndirectPanGestureRecognizer _isPointerOnTopScreenCorner:radius:]
  -[SBIndirectPanGestureRecognizer shouldSwitchAxes]
  -[SBIndirectPanGestureRecognizer containerView]
  -[SBIndirectPanGestureRecognizer _mouseIdleTimerFired:]
  -[SBIndirectPanGestureRecognizer currentTouch]
  -[SBIndirectPanGestureRecognizer setLastKnownMouseEventTimestamp:]
  -[SBIndirectPanGestureRecognizer setGesturePassedThroughScreenCenterRegion:]
  -[SBIndirectPanGestureRecognizer setGestureStartLocation:]
  -[SBIndirectPanGestureRecognizer hysteresisForInputType:]
  -[SBIndirectPanGestureRecognizer setHysteresis:forInputType:]
  -[SBIndirectPanGestureRecognizer setEdges:]
  -[SBIndirectPanGestureRecognizer shouldActivateWithThreshold]
  -[SBIndirectPanGestureRecognizer mouseEnteredNearEdgeRegionTimestamp]
  -[SBIndirectPanGestureRecognizer shouldCancelAfterMovingAwayFromEdge]
  -[SBIndirectPanGestureRecognizer activationRecognitionDistance]
  -[SBIndirectPanGestureRecognizer initWithTarget:action:edges:systemGestureManager:]
  -[SBIndirectPanGestureRecognizer updateTouchHistoryWithTouches:]
  -[SBIndirectPanGestureRecognizer setMouseEnteredNearEdgeRegionTimestamp:]
  -[SBIndirectPanGestureRecognizer setActivationRecognitionDistance:]
  -[SBIndirectPanGestureRecognizer activatedEdge]
  -[SBIndirectPanGestureRecognizer _axisForEdge:]
  -[SBIndirectPanGestureRecognizer setTranslationWithinHysteresisRange:]
  -[SBIndirectPanGestureRecognizer setShouldInvertYAxis:]
  -[SBIndirectPanGestureRecognizer setCurrentHoverEvent:]
  -[SBIndirectPanGestureRecognizer setAllowedTouchTypes:]
  -[SBIndirectPanGestureRecognizer lastKnownPoint]
  -[SBIndirectPanGestureRecognizer translationInView:]
  -[SBIndirectPanGestureRecognizer _centerOfCircleForRoundedCorner:radius:inView:]
  -[SBIndirectPanGestureRecognizer lastKnownMouseEventTimestamp]
  -[SBIndirectPanGestureRecognizer setShouldRequireGestureToStartAtEdge:]
  -[SBIndirectPanGestureRecognizer _shouldSwitchAxes]


SBAvocadoDebuggingController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBExtensionHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAvocadoDebuggingController init]
  -[SBAvocadoDebuggingController .cxx_destruct]
  -[SBAvocadoDebuggingController launchExtensionWithBundleID:options:completion:]
  -[SBAvocadoDebuggingController _descriptorForWidgetFromExtension:forRequestedKind:widgetFamily:toolService:error:]
  -[SBAvocadoDebuggingController reallyLaunchToWidgetOnHomeScreenForDescriptor:widgetFamily:]


SBWallpaperStyleRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWallpaperStyleRecipe load]

  // instance methods
  -[SBWallpaperStyleRecipe title]
  -[SBWallpaperStyleRecipe handleVolumeIncrease]
  -[SBWallpaperStyleRecipe handleVolumeDecrease]


SBAlertItemsObjectQueue : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, NSFastEnumeration>
 @property  NSMutableOrderedSet *objects
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAlertItemsObjectQueue hasObject]
  -[SBAlertItemsObjectQueue objects]
  -[SBAlertItemsObjectQueue setObjects:]
  -[SBAlertItemsObjectQueue init]
  -[SBAlertItemsObjectQueue appendObject:]
  -[SBAlertItemsObjectQueue removeObject:]
  -[SBAlertItemsObjectQueue .cxx_destruct]
  -[SBAlertItemsObjectQueue dequeueAllObjects]
  -[SBAlertItemsObjectQueue succinctDescriptionBuilder]
  -[SBAlertItemsObjectQueue countByEnumeratingWithState:objects:count:]
  -[SBAlertItemsObjectQueue succinctDescription]
  -[SBAlertItemsObjectQueue containsObject:]
  -[SBAlertItemsObjectQueue hasObjectOfClass:]
  -[SBAlertItemsObjectQueue prependObject:]
  -[SBAlertItemsObjectQueue descriptionWithMultilinePrefix:]
  -[SBAlertItemsObjectQueue objectsOfClass:]
  -[SBAlertItemsObjectQueue descriptionBuilderWithMultilinePrefix:]


SBSynchronizeCloudCriticalDataOperation : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL complete

  // instance methods
  -[SBSynchronizeCloudCriticalDataOperation isComplete]
  -[SBSynchronizeCloudCriticalDataOperation init]
  -[SBSynchronizeCloudCriticalDataOperation _pendingOperationCount]
  -[SBSynchronizeCloudCriticalDataOperation .cxx_destruct]
  -[SBSynchronizeCloudCriticalDataOperation startSynchronize]
  -[SBSynchronizeCloudCriticalDataOperation waitForSynchronizeToCompleteWithTimeout:]
  -[SBSynchronizeCloudCriticalDataOperation initWithDefaults:userManager:]
  -[SBSynchronizeCloudCriticalDataOperation _queue_isComplete]
  -[SBSynchronizeCloudCriticalDataOperation _queue_startFetchingCloudCriticalData]
  -[SBSynchronizeCloudCriticalDataOperation _queue_fetchCloudAccountOperation]
  -[SBSynchronizeCloudCriticalDataOperation _queue_fetchCloudDefaultsOperation]
  -[SBSynchronizeCloudCriticalDataOperation _queue_fetchMDMProfilesOperation]
  -[SBSynchronizeCloudCriticalDataOperation _queue_migrateSoundPreferencesOperation]
  -[SBSynchronizeCloudCriticalDataOperation _queue_addOperation:]
  -[SBSynchronizeCloudCriticalDataOperation _fetchDomains:fromIndex:queue:completion:]
  -[SBSynchronizeCloudCriticalDataOperation _addTestOperation:]


SBNotificationLongLookBannerPresentationObservationToken : SBPresentationObservationToken <SBNotificationBannerDestinationObserver>
 @property  SBNotificationBannerDestination *notificationBannerDestination
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNotificationLongLookBannerPresentationObservationToken dealloc]
  -[SBNotificationLongLookBannerPresentationObservationToken .cxx_destruct]
  -[SBNotificationLongLookBannerPresentationObservationToken state]
  -[SBNotificationLongLookBannerPresentationObservationToken initWithNotificationBannerDestination:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestinationWillPresentLongLook:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestinationDidPresentLongLook:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestinationWillDismissLongLook:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestinationDidDismissLongLook:]
  -[SBNotificationLongLookBannerPresentationObservationToken notificationBannerDestination]


SBInlineAppExposeRootSwitcherModifier : SBFluidSwitcherRootSwitcherModifier
 @property  NSString *bundleIdentifier
 @property  {UIRectCornerRadii=dddd} fullscreenCornerRadii

  // instance methods
  -[SBInlineAppExposeRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBInlineAppExposeRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBInlineAppExposeRootSwitcherModifier .cxx_destruct]
  -[SBInlineAppExposeRootSwitcherModifier floatingDockHeight]
  -[SBInlineAppExposeRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBInlineAppExposeRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBInlineAppExposeRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBInlineAppExposeRootSwitcherModifier _newMultitaskingModifier]
  -[SBInlineAppExposeRootSwitcherModifier bundleIdentifier]
  -[SBInlineAppExposeRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBInlineAppExposeRootSwitcherModifier transitionModifierForInlineTransitionEvent:]
  -[SBInlineAppExposeRootSwitcherModifier initWithBundleIdentifier:layoutRole:overlay:]
  -[SBInlineAppExposeRootSwitcherModifier setFullscreenCornerRadii:]
  -[SBInlineAppExposeRootSwitcherModifier fullscreenCornerRadii]


SBGrabberTongue : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemGestureRecognizerDelegate>
 @property  <SBGrabberTongueDelegate> *delegate
 @property  BOOL visible
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBGrabberTongue _willPresent]
  -[SBGrabberTongue _willPresentInteractively:]
  -[SBGrabberTongue presentAnimated:]
  -[SBGrabberTongue _dismissTongueWithStyle:animated:]
  -[SBGrabberTongue isVisible]
  -[SBGrabberTongue viewForSystemGestureRecognizer:]
  -[SBGrabberTongue init]
  -[SBGrabberTongue edgePullGestureRecognizer]
  -[SBGrabberTongue uninstall]
  -[SBGrabberTongue _presentTongueAnimated:]
  -[SBGrabberTongue dealloc]
  -[SBGrabberTongue _pullGestureBegan:]
  -[SBGrabberTongue _createTongueAndGestureRecognizersIfNecessaryWithColorStyle:]
  -[SBGrabberTongue .cxx_destruct]
  -[SBGrabberTongue _pullGestureEnded:]
  -[SBGrabberTongue _shouldShowTongueOnFirstSwipeWithRecognizer:]
  -[SBGrabberTongue _grabberTongueScreenInsets]
  -[SBGrabberTongue gestureRecognizerShouldBegin:]
  -[SBGrabberTongue _tongueOrPullEnabledForGestureRecognizer:]
  -[SBGrabberTongue _edgeOrientedVelocityForRecognizer:]
  -[SBGrabberTongue _pullGestureUpdated:]
  -[SBGrabberTongue edgeLocationForTouch:]
  -[SBGrabberTongue _updateCancelsTouchesWithRecognizer:]
  -[SBGrabberTongue _handlePullGesture:]
  -[SBGrabberTongue distanceFromEdge]
  -[SBGrabberTongue installInView:withColorStyle:]
  -[SBGrabberTongue initWithDelegate:edge:type:]
  -[SBGrabberTongue _pullGestureCanceled:]
  -[SBGrabberTongue _cancelPendingTongueDismissRequests]
  -[SBGrabberTongue _shouldReceiveTouch:]
  -[SBGrabberTongue _dismissTongue:]
  -[SBGrabberTongue _ambiguousActivationMargin]
  -[SBGrabberTongue _didPresentInteractively:]
  -[SBGrabberTongue _newBackdropViewWithColorStyle:]
  -[SBGrabberTongue _distanceFromEdgeForRecognizer:]
  -[SBGrabberTongue _frameForTongueWhenVisible:]
  -[SBGrabberTongue _centerOnScreenEdge]
  -[SBGrabberTongue _chevronFrameForTongueBounds:]
  -[SBGrabberTongue _willDismiss]
  -[SBGrabberTongue dismissWithStyle:animated:]
  -[SBGrabberTongue invalidate]
  -[SBGrabberTongue _shouldAllowSecondSwipeWithRecognizer:]
  -[SBGrabberTongue _ambiguousActivationMarginIfHonored]
  -[SBGrabberTongue _didDismiss]
  -[SBGrabberTongue gestureRecognizer:shouldReceiveTouch:]
  -[SBGrabberTongue _newChevronView]
  -[SBGrabberTongue delegate]
  -[SBGrabberTongue _createEdgePullGestureRecognizerWithAction:]
  -[SBGrabberTongue isEdgeLocationInGrabberRegion:]
  -[SBGrabberTongue _transformForTongueContainer]
  -[SBGrabberTongue indirectEdgePullGestureRecognizer]
  -[SBGrabberTongue edgeOrientedVelocity]


SBToAppsWorkspaceTransaction : SBMainWorkspaceTransaction <SBSceneLayoutWorkspaceTransactionDelegate, FBSynchronizedTransactionDelegate, SBUIAnimationControllerObserver>
 @property  SBFloatingDockBehaviorAssertion *floatingDockBehaviorAssertion
 @property  NSSet *toApplicationSceneEntities
 @property  NSSet *fromApplicationSceneEntities
 @property  SBSceneLayoutWorkspaceTransaction *layoutTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBToAppsWorkspaceTransaction canInterruptTransaction:forTransitionRequest:]

  // instance methods
  -[SBToAppsWorkspaceTransaction _transitionContext]
  -[SBToAppsWorkspaceTransaction _relinquishResignActiveAssertion]
  -[SBToAppsWorkspaceTransaction synchronizedTransaction:didCommitSynchronizedTransactions:]
  -[SBToAppsWorkspaceTransaction _shouldFailForChildTransaction:]
  -[SBToAppsWorkspaceTransaction _customizedDescriptionProperties]
  -[SBToAppsWorkspaceTransaction _willBegin]
  -[SBToAppsWorkspaceTransaction _performPostAnimationTasksWithCompletion:]
  -[SBToAppsWorkspaceTransaction _shouldResignActiveForAnimation]
  -[SBToAppsWorkspaceTransaction _canBeInterrupted]
  -[SBToAppsWorkspaceTransaction toApplicationSceneEntities]
  -[SBToAppsWorkspaceTransaction synchronizedTransactionReadyToCommit:]
  -[SBToAppsWorkspaceTransaction _stopDelayingTransitionCompletionForRequester:]
  -[SBToAppsWorkspaceTransaction _shouldSerialDismissOverlays]
  -[SBToAppsWorkspaceTransaction _handleApplicationDidNotChange:]
  -[SBToAppsWorkspaceTransaction _didComplete]
  -[SBToAppsWorkspaceTransaction fromApplicationSceneEntities]
  -[SBToAppsWorkspaceTransaction _childTransactionDidComplete:]
  -[SBToAppsWorkspaceTransaction initWithTransitionRequest:]
  -[SBToAppsWorkspaceTransaction _serialOverlayPreDismissalOptions]
  -[SBToAppsWorkspaceTransaction _scenesToBackground]
  -[SBToAppsWorkspaceTransaction _setupAnimation]
  -[SBToAppsWorkspaceTransaction dealloc]
  -[SBToAppsWorkspaceTransaction shouldWatchdog:]
  -[SBToAppsWorkspaceTransaction synchronizedTransaction:willCommitSynchronizedTransactions:]
  -[SBToAppsWorkspaceTransaction _animationDidRevealApplication]
  -[SBToAppsWorkspaceTransaction _willInterruptWithReason:]
  -[SBToAppsWorkspaceTransaction _willFailWithReason:]
  -[SBToAppsWorkspaceTransaction .cxx_destruct]
  -[SBToAppsWorkspaceTransaction _completeCurrentTransition]
  -[SBToAppsWorkspaceTransaction shouldAnimateOrientationChangeOnCompletion]
  -[SBToAppsWorkspaceTransaction _beginAnimation]
  -[SBToAppsWorkspaceTransaction _beginTransition]
  -[SBToAppsWorkspaceTransaction transaction:performTransitionWithCompletion:]
  -[SBToAppsWorkspaceTransaction _delayTransitionCompletionForRequester:]
  -[SBToAppsWorkspaceTransaction performToAppStateCleanup]
  -[SBToAppsWorkspaceTransaction layoutTransaction]
  -[SBToAppsWorkspaceTransaction isFromMainSwitcher]
  -[SBToAppsWorkspaceTransaction _fireAndClearResultBlockIfNecessaryForFailure:]
  -[SBToAppsWorkspaceTransaction _handleApplicationUpdateScenesTransactionFailed:]
  -[SBToAppsWorkspaceTransaction activateApplications]
  -[SBToAppsWorkspaceTransaction watchdogTimeout]
  -[SBToAppsWorkspaceTransaction animationController:willBeginAnimation:]
  -[SBToAppsWorkspaceTransaction _hasPostAnimationTasks]
  -[SBToAppsWorkspaceTransaction transactionWillBeginLayoutTransition:]
  -[SBToAppsWorkspaceTransaction _endTransition]
  -[SBToAppsWorkspaceTransaction toAndFromAppsDiffer]
  -[SBToAppsWorkspaceTransaction _configureAnimation]
  -[SBToAppsWorkspaceTransaction _animationWillBegin:]
  -[SBToAppsWorkspaceTransaction isGoingToCoverSheet]
  -[SBToAppsWorkspaceTransaction createSceneEntityForHandle:]
  -[SBToAppsWorkspaceTransaction floatingDockBehaviorAssertion]
  -[SBToAppsWorkspaceTransaction shouldPlaceOutgoingScenesUnderLockOnCompletion]
  -[SBToAppsWorkspaceTransaction animationControllerDidRevealApplication:]
  -[SBToAppsWorkspaceTransaction shouldPerformToAppStateCleanupOnCompletion]
  -[SBToAppsWorkspaceTransaction _setShouldSerialDismissOverlays:]
  -[SBToAppsWorkspaceTransaction _captureApplicationState]
  -[SBToAppsWorkspaceTransaction shouldRestoreSpringBoardContentOnCleanup]
  -[SBToAppsWorkspaceTransaction _synchronizeWithSceneUpdates]
  -[SBToAppsWorkspaceTransaction _beginAnimationIfNecessary]
  -[SBToAppsWorkspaceTransaction _performPreAnimationTasksWithCompletion:]
  -[SBToAppsWorkspaceTransaction _transitionWasCancelled]
  -[SBToAppsWorkspaceTransaction isGoingToLauncher]
  -[SBToAppsWorkspaceTransaction _concurrentOverlayDismissalOptions]
  -[SBToAppsWorkspaceTransaction _hasPreAnimationTasks]
  -[SBToAppsWorkspaceTransaction _clearAnimation]
  -[SBToAppsWorkspaceTransaction _animationDidFinish]
  -[SBToAppsWorkspaceTransaction _logForInterruptAttemptReason:]
  -[SBToAppsWorkspaceTransaction _acquireResignActiveAssertion]
  -[SBToAppsWorkspaceTransaction transaction:didEndLayoutTransitionWithContinuation:]
  -[SBToAppsWorkspaceTransaction animationController]
  -[SBToAppsWorkspaceTransaction animationControllerDidFinishAnimation:]
  -[SBToAppsWorkspaceTransaction _checkForAnimationCompletion]
  -[SBToAppsWorkspaceTransaction _didInterruptWithReason:]
  -[SBToAppsWorkspaceTransaction _noteAnimationFinished]
  -[SBToAppsWorkspaceTransaction setFloatingDockBehaviorAssertion:]
  -[SBToAppsWorkspaceTransaction isGoingToMainSwitcher]


SBLockHardwareButton : SBHardwareButtonGestureParametersProviderBase <UIGestureRecognizerDelegate, SBHardwareButtonGestureParametersObserver, SBPressPrecedenceArbiter>
 @property  SBLockHardwareButtonActions *buttonActions
 @property  SBHardwareButtonGestureParameters *buttonGestureParameters
 @property  SBPressGestureRecognizer *buttonDownGestureRecognizer
 @property  SBClickGestureRecognizer *singlePressGestureRecognizer
 @property  SBLongPressGestureRecognizer *longPressGestureRecognizer
 @property  SBClickGestureRecognizer *doublePressGestureRecognizer
 @property  SBClickGestureRecognizer *triplePressGestureRecognizer
 @property  SBClickGestureRecognizer *quadruplePressGestureRecognizer
 @property  UIGestureRecognizer *screenshotGestureRecognizer
 @property  SBLongPressGestureRecognizer *shutdownGestureRecognizer
 @property  SBHomeHardwareButton *homeHardwareButton
 @property  SBVolumeHardwareButton *volumeHardwareButton
 @property  long long homeButtonType
 @property  unsigned long configuredMaximumPressCount
 @property  unsigned long currentPressCount
 @property  BOOL isButtonDown
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockHardwareButton longPress:]
  -[SBLockHardwareButton _reportAggdLoggingForButtonEventIsDownEvent:]
  -[SBLockHardwareButton setLongPressGestureRecognizer:]
  -[SBLockHardwareButton provider:didUpdateButtonGestureParameters:]
  -[SBLockHardwareButton currentPressCount]
  -[SBLockHardwareButton homeButtonType]
  -[SBLockHardwareButton setHomeButtonType:]
  -[SBLockHardwareButton setHomeHardwareButton:]
  -[SBLockHardwareButton setDoublePressGestureRecognizer:]
  -[SBLockHardwareButton shutdownGestureRecognizer]
  -[SBLockHardwareButton dealloc]
  -[SBLockHardwareButton setCurrentPressCount:]
  -[SBLockHardwareButton .cxx_destruct]
  -[SBLockHardwareButton setScreenshotGestureRecognizer:]
  -[SBLockHardwareButton SOSTriggerMechanismDidChange]
  -[SBLockHardwareButton gestureRecognizerShouldBegin:]
  -[SBLockHardwareButton setButtonDownGestureRecognizer:]
  -[SBLockHardwareButton triplePress:]
  -[SBLockHardwareButton setVolumeHardwareButton:]
  -[SBLockHardwareButton initWithScreenshotGestureRecognizer:shutdownGestureRecognizer:proximitySensorManager:homeHardwareButton:volumeHardwareButton:buttonActions:homeButtonType:createGestures:]
  -[SBLockHardwareButton cancelLongPress]
  -[SBLockHardwareButton buttonDownGestureRecognizer]
  -[SBLockHardwareButton triplePressGestureRecognizer]
  -[SBLockHardwareButton setQuadruplePressGestureRecognizer:]
  -[SBLockHardwareButton configuredMaximumPressCount]
  -[SBLockHardwareButton buttonDown:]
  -[SBLockHardwareButton buttonActions]
  -[SBLockHardwareButton setButtonActions:]
  -[SBLockHardwareButton buttonGestureParameters]
  -[SBLockHardwareButton reverseFadeOutIfNeeded]
  -[SBLockHardwareButton screenshotRecognizerDidRecognize:]
  -[SBLockHardwareButton homeHardwareButton]
  -[SBLockHardwareButton setButtonGestureParameters:]
  -[SBLockHardwareButton singlePress:]
  -[SBLockHardwareButton forceResetSequenceDidBegin]
  -[SBLockHardwareButton _updatePressCountForDownEvent]
  -[SBLockHardwareButton initWithScreenshotGestureRecognizer:shutdownGestureRecognizer:proximitySensorManager:homeHardwareButton:volumeHardwareButton:homeButtonType:]
  -[SBLockHardwareButton quadruplePressGestureRecognizer]
  -[SBLockHardwareButton _reconfigureButtonGestureRecognizers]
  -[SBLockHardwareButton hardwareButtonGestureParameters]
  -[SBLockHardwareButton _createGestureRecognizers]
  -[SBLockHardwareButton screenshotGestureRecognizer]
  -[SBLockHardwareButton isButtonDown]
  -[SBLockHardwareButton gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]
  -[SBLockHardwareButton setConfiguredMaximumPressCount:]
  -[SBLockHardwareButton longPressGestureRecognizer]
  -[SBLockHardwareButton singlePressGestureRecognizer]
  -[SBLockHardwareButton doublePressGestureRecognizer]
  -[SBLockHardwareButton gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBLockHardwareButton quadruplePress:]
  -[SBLockHardwareButton setSinglePressGestureRecognizer:]
  -[SBLockHardwareButton setTriplePressGestureRecognizer:]
  -[SBLockHardwareButton setShutdownGestureRecognizer:]
  -[SBLockHardwareButton _gestureRecognizerFailed:]
  -[SBLockHardwareButton doublePress:]
  -[SBLockHardwareButton preemptablePressGestureRecognizers]
  -[SBLockHardwareButton volumeHardwareButton]


SBBulletinSystemStateAdapter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBBulletinSystemStateAdapter sharedInstance]
  +[SBBulletinSystemStateAdapter sharedInstanceIfExists]

  // instance methods
  -[SBBulletinSystemStateAdapter init]
  -[SBBulletinSystemStateAdapter dealloc]
  -[SBBulletinSystemStateAdapter _sendCurrentUILockedStatus]
  -[SBBulletinSystemStateAdapter _lockStateChanged:]


SBCommandTabViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBIconViewDelegate>
 @property  <SBCommandTabViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBCommandTabViewController canActivateWithRecentDisplayItems:]

  // instance methods
  -[SBCommandTabViewController viewDidLoad]
  -[SBCommandTabViewController icon:touchEnded:]
  -[SBCommandTabViewController next]
  -[SBCommandTabViewController previous]
  -[SBCommandTabViewController iconViewCanBeginDrags:]
  -[SBCommandTabViewController init]
  -[SBCommandTabViewController iconTapped:]
  -[SBCommandTabViewController dealloc]
  -[SBCommandTabViewController .cxx_destruct]
  -[SBCommandTabViewController iconViewDisplaysBadges:]
  -[SBCommandTabViewController canBecomeFirstResponder]
  -[SBCommandTabViewController iconTouchBegan:]
  -[SBCommandTabViewController traitCollectionDidChange:]
  -[SBCommandTabViewController _handleCommandTab:]
  -[SBCommandTabViewController _handleShiftCommandTab:]
  -[SBCommandTabViewController setDelegate:]
  -[SBCommandTabViewController delegate]
  -[SBCommandTabViewController removeDisplayItem:]
  -[SBCommandTabViewController selectedApplicationDisplayItem]
  -[SBCommandTabViewController indexOfDisplayItem:]
  -[SBCommandTabViewController showCommandTabBar]
  -[SBCommandTabViewController initWithRecentDisplayItems:]
  -[SBCommandTabViewController iconModelDidChange:]
  -[SBCommandTabViewController _handleUIGesture:]
  -[SBCommandTabViewController _handleTapDismissGesture:]
  -[SBCommandTabViewController _updateForUserInterfaceStyle]
  -[SBCommandTabViewController _moveSelectionSquareToIconAtIndex:]
  -[SBCommandTabViewController _updateIconSelectionPositionAndLabelText]


SBBaseStatusBarChangeAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *reason

  // instance methods
  -[SBBaseStatusBarChangeAssertion init]
  -[SBBaseStatusBarChangeAssertion .cxx_destruct]
  -[SBBaseStatusBarChangeAssertion invalidate]
  -[SBBaseStatusBarChangeAssertion reason]
  -[SBBaseStatusBarChangeAssertion _initWithReason:]


SBDisableAppStatusBarAlphaChangesAssertion : SBBaseStatusBarChangeAssertion
  // instance methods
  -[SBDisableAppStatusBarAlphaChangesAssertion initWithReason:]
  -[SBDisableAppStatusBarAlphaChangesAssertion dealloc]
  -[SBDisableAppStatusBarAlphaChangesAssertion invalidate]


SBDisableAppStatusBarUserInteractionChangesAssertion : SBBaseStatusBarChangeAssertion
  // instance methods
  -[SBDisableAppStatusBarUserInteractionChangesAssertion initWithReason:]
  -[SBDisableAppStatusBarUserInteractionChangesAssertion dealloc]
  -[SBDisableAppStatusBarUserInteractionChangesAssertion invalidate]


SBActivateReachabilitySwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  {SBReachabilityActivationContext={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGRect={CGPoint=dd}{CGSize=dd}}B} reachabilityActivationContext

  // instance methods
  -[SBActivateReachabilitySwitcherEventResponse type]
  -[SBActivateReachabilitySwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBActivateReachabilitySwitcherEventResponse reachabilityActivationContext]
  -[SBActivateReachabilitySwitcherEventResponse initWithReachabilityContext:]


SBMedusaDragAndDropMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBMedusaDragAndDropMetric init]
  -[SBMedusaDragAndDropMetric .cxx_destruct]


SBApplicationWakeSchedulerFactory : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBApplicationWakeSchedulerFactory newLegacyVOIPPeriodicWakeSchedulerForApplication:]


SBVolumeHUDDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBVolumeHUDDomain domainName]
  +[SBVolumeHUDDomain rootSettings]
  +[SBVolumeHUDDomain rootSettingsClass]
  +[SBVolumeHUDDomain domainGroupName]


SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction : SBHardwareButtonGestureParametersProviderBase <SBProximitySensorManagerObserver, SBHardwareButtonInteraction>
 @property  long long phase
 @property  SBProximitySensorManager *sensorManager
 @property  BSTimer *timer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction setPhase:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction phase]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction timer]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction dealloc]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction setTimer:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction .cxx_destruct]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction disallowsLongPressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction disallowsTriplePressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction disallowsDoublePressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction consumeInitialPressDown]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction disallowsSinglePressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction consumeSinglePressUp]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction hardwareButtonGestureParameters]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction _timerDidFire]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction descriptionBuilderWithMultilinePrefix:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction initWithProximitySensorManager:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction proximitySensorManager:objectWithinProximityDidChange:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction _disallowsAnyPressForReason:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction sensorManager]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction setSensorManager:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction _transitionToPhase:timeout:]
  -[SBRecalibrateProximitySensorMultiphaseHardwareButtonInteraction _transitionToPhase:]


SBLineFragment : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  unsigned long index
 @property  {_NSRange=QQ} range
 @property  double lineWidth

  // class methods
  +[SBLineFragment fragmentWithIndex:length:lineWidth:]

  // instance methods
  -[SBLineFragment setLineWidth:]
  -[SBLineFragment lineWidth]
  -[SBLineFragment range]
  -[SBLineFragment index]
  -[SBLineFragment setIndex:]
  -[SBLineFragment setRange:]


SBStringMetrics : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSFastEnumeration>
  // instance methods
  -[SBStringMetrics init]
  -[SBStringMetrics .cxx_destruct]
  -[SBStringMetrics countByEnumeratingWithState:objects:count:]
  -[SBStringMetrics fragments]
  -[SBStringMetrics fragmentCount]
  -[SBStringMetrics addFragment:]


SBFloatingFluidSwitcherRootSwitcherModifier : SBFluidSwitcherRootSwitcherModifier
 @property  SBAppLayout *activeAppLayout
 @property  long long interfaceOrientation
 @property  long long floatingConfiguration
 @property  BOOL floatingSwitcherVisible
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} containerViewBounds

  // instance methods
  -[SBFloatingFluidSwitcherRootSwitcherModifier topMostLayoutElements]
  -[SBFloatingFluidSwitcherRootSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier init]
  -[SBFloatingFluidSwitcherRootSwitcherModifier gestureModifierForGestureEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier multitaskingModifierForEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier insertionModifierForInsertionEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier .cxx_destruct]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setInterfaceOrientation:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier interfaceOrientation]
  -[SBFloatingFluidSwitcherRootSwitcherModifier floatingConfiguration]
  -[SBFloatingFluidSwitcherRootSwitcherModifier containerViewBounds]
  -[SBFloatingFluidSwitcherRootSwitcherModifier userScrollingModifierForScrollEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier removalModifierForRemovalEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier handleEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier transitionModifierForMainTransitionEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier swipeToKillModifierForSwipeToKillEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier _newMultitaskingModifier]
  -[SBFloatingFluidSwitcherRootSwitcherModifier isFloatingSwitcherVisible]
  -[SBFloatingFluidSwitcherRootSwitcherModifier _defaultMultitaskingModifierClass]
  -[SBFloatingFluidSwitcherRootSwitcherModifier lowEndHardwareModifier]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setDelegate:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier appLayoutsToEnsureExistForMainTransitionEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBFloatingFluidSwitcherRootSwitcherModifier floorModifierForTransitionEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setFloatingSwitcherVisible:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setFloatingConfiguration:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier _entityRemovalModifierForEvent:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier activeAppLayout]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setActiveAppLayout:]
  -[SBFloatingFluidSwitcherRootSwitcherModifier setContainerViewBounds:]


SBThermalController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFThermalBlockProvider>
 @property  long long level
 @property  BOOL inSunlight
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBThermalController sharedInstance]
  +[SBThermalController logThermalEvent:]

  // instance methods
  -[SBThermalController _isBlocked]
  -[SBThermalController level]
  -[SBThermalController init]
  -[SBThermalController _setBlocked:]
  -[SBThermalController dealloc]
  -[SBThermalController .cxx_destruct]
  -[SBThermalController _updateThermalJetsamCPUSamplingState]
  -[SBThermalController isInSunlight]
  -[SBThermalController removeThermalObserver:]
  -[SBThermalController isThermalBlocked]
  -[SBThermalController _respondToCurrentThermalCondition]
  -[SBThermalController addThermalObserver:]
  -[SBThermalController startListeningForThermalEvents]


SBMoveGestureFloatingSwitcherModifier : SBGestureSwitcherModifier
 @property  long long initialFloatingConfiguration
 @property  long long interfaceOrientation
 @property  {CGPoint=dd} translation

  // instance methods
  -[SBMoveGestureFloatingSwitcherModifier visibleAppLayouts]
  -[SBMoveGestureFloatingSwitcherModifier topMostLayoutElements]
  -[SBMoveGestureFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBMoveGestureFloatingSwitcherModifier handleMainTransitionEvent:]
  -[SBMoveGestureFloatingSwitcherModifier opacityForIndex:]
  -[SBMoveGestureFloatingSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBMoveGestureFloatingSwitcherModifier frameForIndex:]
  -[SBMoveGestureFloatingSwitcherModifier translation]
  -[SBMoveGestureFloatingSwitcherModifier setInterfaceOrientation:]
  -[SBMoveGestureFloatingSwitcherModifier interfaceOrientation]
  -[SBMoveGestureFloatingSwitcherModifier containerViewBounds]
  -[SBMoveGestureFloatingSwitcherModifier shadowOffsetForIndex:]
  -[SBMoveGestureFloatingSwitcherModifier setTranslation:]
  -[SBMoveGestureFloatingSwitcherModifier shadowOpacityForIndex:]
  -[SBMoveGestureFloatingSwitcherModifier handleGestureEvent:]
  -[SBMoveGestureFloatingSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBMoveGestureFloatingSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBMoveGestureFloatingSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBMoveGestureFloatingSwitcherModifier initWithGestureID:initialFloatingConfiguration:interfaceOrientation:]
  -[SBMoveGestureFloatingSwitcherModifier initialFloatingConfiguration]
  -[SBMoveGestureFloatingSwitcherModifier setInitialFloatingConfiguration:]


SBMainDisplaySceneLayoutDragAndDropInteractionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSTransactionObserver, SBApplicationDropSessionSceneProviding, UIDropInteractionDelegate_Private, UIDragInteractionDelegate_Private, UIDragInteractionDelegate_ForWebKitOnly, SBDragAndDropAppActivationWorkspaceTransactionDelegate>
 @property  SBFluidSwitcherViewController *mainSwitcherContentController
 @property  SBMainDisplaySceneLayoutViewController *sceneLayoutViewController
 @property  <SBMainDisplaySceneLayoutDragAndDropInteractionManagerDelegate> *delegate
 @property  UIDropInteraction *dropInteraction
 @property  SBDragAndDropAppActivationWorkspaceTransaction *activeTransaction
 @property  NSMapTable *activeDropSessions
 @property  SBWindowDragInteraction *windowDragInteraction
 @property  <UIDragSession> *windowDragSession
 @property  @? windowDragSessionPrepareCompletionBlock
 @property  NSString *windowDragSceneIdentifier
 @property  BOOL windowDragHandledByDruid
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction:sessionDidExit:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction:sessionDidEnter:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager setDropInteraction:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction:previewForDroppingItem:withDefault:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction:item:willAnimateDropWithAnimator:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction:concludeDrop:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction:performDrop:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction:sessionDidEnd:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction:sessionDidUpdate:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager transactionDidComplete:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dropInteraction:canHandleSession:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:session:didEndWithOperation:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager sceneLayoutViewController]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _dragInteraction:customSpringAnimationBehaviorForCancellingItem:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:session:willEndWithOperation:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:willAnimateLiftWithAnimator:session:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:sessionDidMove:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dealloc]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:sessionIsRestrictedToDraggingApplication:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:item:willAnimateCancelWithAnimator:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager .cxx_destruct]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:sessionWillBegin:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:previewForLiftingItem:session:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager mainSwitcherContentController]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:itemsForBeginningSession:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager initWithMainSwitcherContentController:sceneLayoutViewController:delegate:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragInteraction:previewForCancellingItem:withDefault:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _dropInteraction:customSpringAnimationBehaviorForDroppingItem:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _dragInteractionDidCancelLiftWithoutDragging:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _requiredContextIDsForDragSessionInView:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _dragInteraction:prepareForSession:completion:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager delegate]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager newSceneIdentityForApplication:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager preferredSceneIdentityForApplication:targetContentIdentifier:preferNewScene:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager mostRecentSceneIdentityExcludingLiveScenesForApplication:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager activeTransaction]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _beginTrackingDropSessionIfNeeded:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _windowDragSessionDidEnd]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _anyActiveAndVisibleSceneEntityMatches:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _activeAndVisibleSceneIdentifiersForApplication:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager activeDropSessions]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _dismissInlineAppExposeIfNeeded]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager _workspaceWouldAllowTransitionToApplication:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager setActiveTransaction:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager isApplicationActiveAndVisible:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragAndDropTransaction:didBeginGesture:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragAndDropTransaction:didUpdateGesture:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager dragAndDropTransaction:didEndGesture:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager shouldBeginWindowDragGesture]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager handleWindowDragGestureRecognizer:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager setActiveDropSessions:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager windowDragInteraction]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager setWindowDragInteraction:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager windowDragSession]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager setWindowDragSession:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager windowDragSessionPrepareCompletionBlock]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager setWindowDragSessionPrepareCompletionBlock:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager windowDragSceneIdentifier]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager setWindowDragSceneIdentifier:]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager windowDragHandledByDruid]
  -[SBMainDisplaySceneLayoutDragAndDropInteractionManager setWindowDragHandledByDruid:]


_SBModalViewControllerStackTransition : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[_SBModalViewControllerStackTransition .cxx_destruct]


SBModalViewControllerStack : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBModalViewControllerStackDelegate> *delegate
 @property  NSArray *viewControllers
 @property  UIViewController *topViewController

  // instance methods
  -[SBModalViewControllerStack viewControllers]
  -[SBModalViewControllerStack removeViewControllerAnimated:completion:]
  -[SBModalViewControllerStack _setCurrentTransition:]
  -[SBModalViewControllerStack .cxx_destruct]
  -[SBModalViewControllerStack _addViewController:completion:]
  -[SBModalViewControllerStack _removePendingTransition:forSuccess:]
  -[SBModalViewControllerStack _popNextPendingTransition]
  -[SBModalViewControllerStack _queuePendingTransition:]
  -[SBModalViewControllerStack _removeViewController:completion:]
  -[SBModalViewControllerStack _noteWillDismissViewController:animated:]
  -[SBModalViewControllerStack _noteDidPresentViewController:]
  -[SBModalViewControllerStack _performPendingTransitionIfNecessary]
  -[SBModalViewControllerStack _noteDidDismissViewController:]
  -[SBModalViewControllerStack topViewController]
  -[SBModalViewControllerStack setDelegate:]
  -[SBModalViewControllerStack _addPendingTransition:]
  -[SBModalViewControllerStack removeViewController:animated:completion:]
  -[SBModalViewControllerStack delegate]
  -[SBModalViewControllerStack initWithPresentingViewController:]
  -[SBModalViewControllerStack addViewController:animated:completion:]
  -[SBModalViewControllerStack _noteWillPresentViewController:]


SBPressSequenceRecognizer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBPressSequenceRecognizerDelegate> *delegate
 @property  SBPressSequenceValidator *validator
 @property  unsigned long numberOfPresses

  // instance methods
  -[SBPressSequenceRecognizer _reset]
  -[SBPressSequenceRecognizer init]
  -[SBPressSequenceRecognizer .cxx_destruct]
  -[SBPressSequenceRecognizer _complete]
  -[SBPressSequenceRecognizer setDelegate:]
  -[SBPressSequenceRecognizer validator]
  -[SBPressSequenceRecognizer delegate]
  -[SBPressSequenceRecognizer registerPressDownWithTimestamp:]
  -[SBPressSequenceRecognizer registerPressUpWithTimestamp:]
  -[SBPressSequenceRecognizer numberOfPresses]
  -[SBPressSequenceRecognizer resetWithNewValidator:numberOfPresses:]
  -[SBPressSequenceRecognizer initWithValidator:numberOfPresses:]
  -[SBPressSequenceRecognizer _handlePressDownWithTimestamp:]
  -[SBPressSequenceRecognizer _handlePressUpWithTimestamp:]
  -[SBPressSequenceRecognizer _resetAndNotify]
  -[SBPressSequenceRecognizer _resetWatchdogIfNecessary]
  -[SBPressSequenceRecognizer _resetAfterDelay:]
  -[SBPressSequenceRecognizer _watchdogTimeIntervalFromDelay:]


SBSwitcherModifierEvent : SBChainableModifierEvent
 @property  long long type

  // instance methods
  -[SBSwitcherModifierEvent loggingCategory]
  -[SBSwitcherModifierEvent type]
  -[SBSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBSwitcherModifierEvent isTransitionEvent]
  -[SBSwitcherModifierEvent isGestureEvent]


SBFluidSwitcherModifierTimelineController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL visible

  // instance methods
  -[SBFluidSwitcherModifierTimelineController setVisible:]
  -[SBFluidSwitcherModifierTimelineController isVisible]
  -[SBFluidSwitcherModifierTimelineController addEntry:]
  -[SBFluidSwitcherModifierTimelineController .cxx_destruct]


_SBDashBoardSpotlightViewController : SBSpotlightMultiplexingViewController
 @property  <_SBDashBoardSpotlightViewControllerDelegate> *delegate

  // instance methods
  -[_SBDashBoardSpotlightViewController level]
  -[_SBDashBoardSpotlightViewController .cxx_destruct]
  -[_SBDashBoardSpotlightViewController _canShowWhileLocked]
  -[_SBDashBoardSpotlightViewController setDelegate:]
  -[_SBDashBoardSpotlightViewController remoteSearchViewPresentationSource]
  -[_SBDashBoardSpotlightViewController delegate]


SBDashBoardSpotlightViewController : SBHomeGestureDismissableCoverSheetViewController <_SBDashBoardSpotlightViewControllerDelegate, SBViewControllerTransitionContextDelegate>
 @property  _SBDashBoardSpotlightViewController *spotlightViewController
 @property  FBDisplayLayoutTransition *displayLayoutTransition
 @property  _UILegibilitySettings *spotlightLegibilitySettings
 @property  <SPUIRemoteSearchViewDelegate> *spotlightDelegate
 @property  UIViewController<SBUISpotlightInitiating> *initiatingViewController
 @property  <SBDashBoardSpotlightViewControllerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardSpotlightViewController viewDidLoad]
  -[SBDashBoardSpotlightViewController displayLayoutElementIdentifier]
  -[SBDashBoardSpotlightViewController init]
  -[SBDashBoardSpotlightViewController transitionDidFinish:]
  -[SBDashBoardSpotlightViewController presentationStyle]
  -[SBDashBoardSpotlightViewController aggregateBehavior:]
  -[SBDashBoardSpotlightViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBDashBoardSpotlightViewController presentationType]
  -[SBDashBoardSpotlightViewController .cxx_destruct]
  -[SBDashBoardSpotlightViewController spotlightViewController]
  -[SBDashBoardSpotlightViewController _isTransitioning]
  -[SBDashBoardSpotlightViewController transitionDidReverse:]
  -[SBDashBoardSpotlightViewController transitionWillFinish:]
  -[SBDashBoardSpotlightViewController viewWillLayoutSubviews]
  -[SBDashBoardSpotlightViewController handleEvent:]
  -[SBDashBoardSpotlightViewController presentationTransition]
  -[SBDashBoardSpotlightViewController viewWillAppear:]
  -[SBDashBoardSpotlightViewController transitionWillBegin:]
  -[SBDashBoardSpotlightViewController setDelegate:]
  -[SBDashBoardSpotlightViewController delegate]
  -[SBDashBoardSpotlightViewController performCustomTransitionToVisible:withAnimationSettings:completion:]
  -[SBDashBoardSpotlightViewController wouldHandleButtonEvent:]
  -[SBDashBoardSpotlightViewController homeGestureParticipantIdentifier]
  -[SBDashBoardSpotlightViewController shouldDismissForHomeGestureRecognizer:]
  -[SBDashBoardSpotlightViewController displayLayoutTransition]
  -[SBDashBoardSpotlightViewController setDisplayLayoutTransition:]
  -[SBDashBoardSpotlightViewController setSpotlightViewController:]
  -[SBDashBoardSpotlightViewController setSpotlightDelegate:]
  -[SBDashBoardSpotlightViewController spotlightDelegate]
  -[SBDashBoardSpotlightViewController spotlightMultiplexingLevelForSpotlightViewController:]
  -[SBDashBoardSpotlightViewController remoteSearchViewPresentationSourceForSpotlightViewController:]
  -[SBDashBoardSpotlightViewController spotlightLegibilitySettings]
  -[SBDashBoardSpotlightViewController initiatingViewController]
  -[SBDashBoardSpotlightViewController transitionContextToShowSpotlight:animated:interactive:]
  -[SBDashBoardSpotlightViewController _transitioningIntoSpotlight:]
  -[SBDashBoardSpotlightViewController _initiallyTransitioningToSpotlight:]
  -[SBDashBoardSpotlightViewController _shouldCancelInteractiveDismissGesture:]
  -[SBDashBoardSpotlightViewController presentationCancelsTouches]
  -[SBDashBoardSpotlightViewController setSpotlightLegibilitySettings:]
  -[SBDashBoardSpotlightViewController setInitiatingViewController:]


_SBSUICFUserNotificationContentHostViewController : _UIRemoteViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <_SBSUICFUserNotificationContentExtensionHostInterface>
 @property  SBUserNotificationAlert *userNotification
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SBSUICFUserNotificationContentHostViewController exportedInterface]
  +[_SBSUICFUserNotificationContentHostViewController serviceViewControllerInterface]

  // instance methods
  -[_SBSUICFUserNotificationContentHostViewController invalidateWithCompletion:]
  -[_SBSUICFUserNotificationContentHostViewController userNotification]
  -[_SBSUICFUserNotificationContentHostViewController setUserNotification:]
  -[_SBSUICFUserNotificationContentHostViewController .cxx_destruct]
  -[_SBSUICFUserNotificationContentHostViewController configureWithCompletion:]
  -[_SBSUICFUserNotificationContentHostViewController _canShowWhileLocked]


SBPieChartSlice : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  double value
 @property  UIColor *fillColor

  // class methods
  +[SBPieChartSlice sliceWithValue:fillColor:]

  // instance methods
  -[SBPieChartSlice fillColor]
  -[SBPieChartSlice .cxx_destruct]
  -[SBPieChartSlice value]
  -[SBPieChartSlice initWithValue:fillColor:]


SBPieChartView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBPieChartView initWithFrame:]
  -[SBPieChartView .cxx_destruct]
  -[SBPieChartView drawRect:]
  -[SBPieChartView _updateMetrics]
  -[SBPieChartView _rotateContext]
  -[SBPieChartView _drawSlice:atValue:]
  -[SBPieChartView setSlices:]


SBSwitcherForcePressSystemGestureRecognizer : SBScreenEdgePanGestureRecognizer <PTSettingsKeyObserver, UIInteractionProgressObserver, SBGestureRecognizerTouchHistoryProviding>
 @property  SBTouchHistory *touchHistory
 @property  double forcePercent
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherForcePressSystemGestureRecognizer peakSpeed]
  -[SBSwitcherForcePressSystemGestureRecognizer settings:changedValueForKey:]
  -[SBSwitcherForcePressSystemGestureRecognizer touchesBegan:withEvent:]
  -[SBSwitcherForcePressSystemGestureRecognizer touchHistory]
  -[SBSwitcherForcePressSystemGestureRecognizer averageTouchVelocityOverTimeDuration:]
  -[SBSwitcherForcePressSystemGestureRecognizer dealloc]
  -[SBSwitcherForcePressSystemGestureRecognizer setState:]
  -[SBSwitcherForcePressSystemGestureRecognizer averageTouchPathAngleOverTimeDuration:]
  -[SBSwitcherForcePressSystemGestureRecognizer .cxx_destruct]
  -[SBSwitcherForcePressSystemGestureRecognizer conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBSwitcherForcePressSystemGestureRecognizer setTouchHistory:]
  -[SBSwitcherForcePressSystemGestureRecognizer reset]
  -[SBSwitcherForcePressSystemGestureRecognizer initWithTarget:action:]
  -[SBSwitcherForcePressSystemGestureRecognizer forcePercent]
  -[SBSwitcherForcePressSystemGestureRecognizer touchesMoved:withEvent:]
  -[SBSwitcherForcePressSystemGestureRecognizer touchesEnded:withEvent:]
  -[SBSwitcherForcePressSystemGestureRecognizer interactionProgressDidUpdate:]


SBUpdateLayoutSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  unsigned long options
 @property  long long updateMode

  // instance methods
  -[SBUpdateLayoutSwitcherEventResponse options]
  -[SBUpdateLayoutSwitcherEventResponse type]
  -[SBUpdateLayoutSwitcherEventResponse updateMode]
  -[SBUpdateLayoutSwitcherEventResponse initWithOptions:updateMode:]
  -[SBUpdateLayoutSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]


SBAppBrightnessChangeLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBAppBrightnessChangeLogger sharedInstance]

  // instance methods
  -[SBAppBrightnessChangeLogger init]
  -[SBAppBrightnessChangeLogger .cxx_destruct]
  -[SBAppBrightnessChangeLogger _screenLocked]
  -[SBAppBrightnessChangeLogger _publishMetricsIfNeeded]
  -[SBAppBrightnessChangeLogger _publishMetrics]
  -[SBAppBrightnessChangeLogger noteApp:setScreenBrightness:]


SBReduceMotionHomeGestureSwitcherModifier : SBGestureSwitcherModifier <SBHomeGestureDockSwitcherModifierDelegate, SBHomeGestureFinalDestinationSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBReduceMotionHomeGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBReduceMotionHomeGestureSwitcherModifier visibleAppLayouts]
  -[SBReduceMotionHomeGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBReduceMotionHomeGestureSwitcherModifier scaleForIndex:]
  -[SBReduceMotionHomeGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBReduceMotionHomeGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBReduceMotionHomeGestureSwitcherModifier handleMainTransitionEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier wallpaperStyle]
  -[SBReduceMotionHomeGestureSwitcherModifier cardCornerRadiiForIndex:]
  -[SBReduceMotionHomeGestureSwitcherModifier opacityForIndex:]
  -[SBReduceMotionHomeGestureSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBReduceMotionHomeGestureSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBReduceMotionHomeGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBReduceMotionHomeGestureSwitcherModifier frameForIndex:]
  -[SBReduceMotionHomeGestureSwitcherModifier .cxx_destruct]
  -[SBReduceMotionHomeGestureSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBReduceMotionHomeGestureSwitcherModifier appLayoutsToResignActive]
  -[SBReduceMotionHomeGestureSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBReduceMotionHomeGestureSwitcherModifier didMoveToParentModifier:]
  -[SBReduceMotionHomeGestureSwitcherModifier _applyPrototypeSettings]
  -[SBReduceMotionHomeGestureSwitcherModifier keyboardSuppressionMode]
  -[SBReduceMotionHomeGestureSwitcherModifier handleGestureEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier _newDockModifierRequiringVerticalSwipeToTrackDock:startingEnvironmentMode:]
  -[SBReduceMotionHomeGestureSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateForGestureDidBeginWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateForGestureDidChangeWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateForGestureDidEndWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier currentFinalDestination]
  -[SBReduceMotionHomeGestureSwitcherModifier _responseForActivatingFinalDestination:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateTranslationAdjustmentForGestureFromHomeScreenIfNeededWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier unconditionalDistanceThresholdForHome]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateGestureTranslationAndVelocityWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier _updateReduceMotionAxisIfNecessaryWithEvent:]
  -[SBReduceMotionHomeGestureSwitcherModifier initWithGestureID:selectedAppLayout:startingEnvironmentMode:scrunchInitiated:continuingGesture:lastGestureWasAnArcSwipe:]


SBAppStatusBarSettings : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSSettingDescriptionProvider, NSCopying, NSMutableCopying>
 @property  BSSettings *BSSettings
 @property  NSNumber *alpha
 @property  long long style
 @property  _UILegibilitySettings *legibilitySettings
 @property  int styleOverridesToCancel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppStatusBarSettings copyWithZone:]
  -[SBAppStatusBarSettings init]
  -[SBAppStatusBarSettings legibilitySettings]
  -[SBAppStatusBarSettings dealloc]
  -[SBAppStatusBarSettings .cxx_destruct]
  -[SBAppStatusBarSettings alpha]
  -[SBAppStatusBarSettings _BSSettings]
  -[SBAppStatusBarSettings _initWithBSSettings:]
  -[SBAppStatusBarSettings valueDescriptionForFlag:object:ofSetting:]
  -[SBAppStatusBarSettings isEqual:]
  -[SBAppStatusBarSettings styleOverridesToCancel]
  -[SBAppStatusBarSettings mutableCopyWithZone:]
  -[SBAppStatusBarSettings keyDescriptionForSetting:]
  -[SBAppStatusBarSettings style]


SBMutableAppStatusBarSettings : SBAppStatusBarSettings
 @property  NSNumber *alpha
 @property  long long style
 @property  _UILegibilitySettings *legibilitySettings
 @property  int styleOverridesToCancel

  // instance methods
  -[SBMutableAppStatusBarSettings copyWithZone:]
  -[SBMutableAppStatusBarSettings init]
  -[SBMutableAppStatusBarSettings applySettings:]
  -[SBMutableAppStatusBarSettings setLegibilitySettings:]
  -[SBMutableAppStatusBarSettings setStyleOverridesToCancel:]
  -[SBMutableAppStatusBarSettings setAlpha:]
  -[SBMutableAppStatusBarSettings setStyle:]


SBMainSwitcherWindow : SBWindow
  // class methods
  +[SBMainSwitcherWindow sb_autorotates]

  // instance methods
  -[SBMainSwitcherWindow _canBecomeKeyWindow]
  -[SBMainSwitcherWindow hitTest:withEvent:]
  -[SBMainSwitcherWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBMainSwitcherWindow _usesWindowServerHitTesting]
  -[SBMainSwitcherWindow _edgesForSystemGesturesTouchDelay]


SBRemoteTransientOverlaySession : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBRemoteTransientOverlayViewControllerDelegate>
 @property  <SBRemoteTransientOverlaySessionHostDelegate> *hostDelegate
 @property  SBSRemoteAlertDefinition *definition
 @property  NSError *error
 @property  NSString *sessionID
 @property  BOOL activated
 @property  BOOL prepared
 @property  BOOL switcherEligible
 @property  BOOL valid
 @property  BOOL pendingInvalidation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRemoteTransientOverlaySession sessionID]
  -[SBRemoteTransientOverlaySession isActivated]
  -[SBRemoteTransientOverlaySession _didActivate]
  -[SBRemoteTransientOverlaySession _didDeactivate]
  -[SBRemoteTransientOverlaySession isSwitcherEligible]
  -[SBRemoteTransientOverlaySession addSessionObserver:]
  -[SBRemoteTransientOverlaySession dealloc]
  -[SBRemoteTransientOverlaySession isPrepared]
  -[SBRemoteTransientOverlaySession .cxx_destruct]
  -[SBRemoteTransientOverlaySession deactivate]
  -[SBRemoteTransientOverlaySession definition]
  -[SBRemoteTransientOverlaySession isValid]
  -[SBRemoteTransientOverlaySession error]
  -[SBRemoteTransientOverlaySession removeSessionObserver:]
  -[SBRemoteTransientOverlaySession hostDelegate]
  -[SBRemoteTransientOverlaySession activateWithContext:]
  -[SBRemoteTransientOverlaySession invalidate]
  -[SBRemoteTransientOverlaySession hasPendingButtonEvents:]
  -[SBRemoteTransientOverlaySession hasServiceProcessIdentifier:]
  -[SBRemoteTransientOverlaySession _initWithSessionID:definition:]
  -[SBRemoteTransientOverlaySession setHostDelegate:]
  -[SBRemoteTransientOverlaySession isPendingInvalidation]
  -[SBRemoteTransientOverlaySession prepareWithConfigurationContext:]
  -[SBRemoteTransientOverlaySession getActionForHandlingButtonEvents:completion:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:didAppearAnimated:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:didDisappearAnimated:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:willAppearAnimated:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewControllerRequestsDeactivation:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewControllerRequestsInvalidation:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:didTerminateWithError:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:requestsActionForHandlingButtonEvents:]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewController:prefersStatusBarActivityItemVisibleForServiceBundleIdentifier:]
  -[SBRemoteTransientOverlaySession _actionForHandlingButtonEvents:]
  -[SBRemoteTransientOverlaySession _invalidateWithReason:error:]
  -[SBRemoteTransientOverlaySession _requestInvalidationWithReason:error:]
  -[SBRemoteTransientOverlaySession _addTransaction:]
  -[SBRemoteTransientOverlaySession _registerObserversForTransaction:]
  -[SBRemoteTransientOverlaySession _processPendingTransactions]
  -[SBRemoteTransientOverlaySession remoteTransientOverlayViewControllerDidInvalidate:]


SBLockScreenDisableAssertion : SBUILockScreenDisableAssertion /usr/lib/libicucore.A.dylib
  // class methods
  +[SBLockScreenDisableAssertion initialize]

  // instance methods
  -[SBLockScreenDisableAssertion dealloc]
  -[SBLockScreenDisableAssertion .cxx_destruct]
  -[SBLockScreenDisableAssertion initWithIdentifier:]
  -[SBLockScreenDisableAssertion invalidate]


SBFluidSwitcherGestureExclusionTrapezoid : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFluidSwitcherGestureExclusionShape>
 @property  double baseHeight
 @property  double trapezoidHeight
 @property  double adjacentBaseXDistanceFromEdge
 @property  double opposingBaseXDistanceFromEdge
 @property  BOOL allowHorizontalSwipesOutsideTrapezoid
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFluidSwitcherGestureExclusionTrapezoid exclusionTrapezoidWithBaseHeight:trapezoidHeight:adjacentBaseXDistanceFromEdge:opposingBaseXDistanceFromEdge:allowHorizontalSwipesOutsideTrapezoid:]

  // instance methods
  -[SBFluidSwitcherGestureExclusionTrapezoid debugView]
  -[SBFluidSwitcherGestureExclusionTrapezoid baseHeight]
  -[SBFluidSwitcherGestureExclusionTrapezoid shouldBeginGestureAtStartingPoint:velocity:bounds:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setBaseHeight:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setTrapezoidHeight:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setAdjacentBaseXDistanceFromEdge:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setOpposingBaseXDistanceFromEdge:]
  -[SBFluidSwitcherGestureExclusionTrapezoid setAllowHorizontalSwipesOutsideTrapezoid:]
  -[SBFluidSwitcherGestureExclusionTrapezoid trapezoidHeight]
  -[SBFluidSwitcherGestureExclusionTrapezoid adjacentBaseXDistanceFromEdge]
  -[SBFluidSwitcherGestureExclusionTrapezoid opposingBaseXDistanceFromEdge]
  -[SBFluidSwitcherGestureExclusionTrapezoid allowHorizontalSwipesOutsideTrapezoid]


SBFluidSwitcherGestureExclusionCompositeShape : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFluidSwitcherGestureExclusionShape>
 @property  NSArray *rects
 @property  BOOL allowHorizontalSwipesInsideShapes
 @property  double topEdgeY
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFluidSwitcherGestureExclusionCompositeShape exclusionCompositeShapeWithRects:allowHorizontalSwipes:]

  // instance methods
  -[SBFluidSwitcherGestureExclusionCompositeShape rects]
  -[SBFluidSwitcherGestureExclusionCompositeShape .cxx_destruct]
  -[SBFluidSwitcherGestureExclusionCompositeShape debugView]
  -[SBFluidSwitcherGestureExclusionCompositeShape setRects:]
  -[SBFluidSwitcherGestureExclusionCompositeShape topEdgeY]
  -[SBFluidSwitcherGestureExclusionCompositeShape shouldBeginGestureAtStartingPoint:velocity:bounds:]
  -[SBFluidSwitcherGestureExclusionCompositeShape setAllowHorizontalSwipesInsideShapes:]
  -[SBFluidSwitcherGestureExclusionCompositeShape allowHorizontalSwipesInsideShapes]
  -[SBFluidSwitcherGestureExclusionCompositeShape setTopEdgeY:]


_SBFluidSwitcherGestureExclusionTrapezoidDebugView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBFluidSwitcherGestureExclusionTrapezoid *exclusionTrapezoid

  // instance methods
  -[_SBFluidSwitcherGestureExclusionTrapezoidDebugView .cxx_destruct]
  -[_SBFluidSwitcherGestureExclusionTrapezoidDebugView drawRect:]
  -[_SBFluidSwitcherGestureExclusionTrapezoidDebugView setExclusionTrapezoid:]
  -[_SBFluidSwitcherGestureExclusionTrapezoidDebugView exclusionTrapezoid]


_SBFluidSwitcherGestureExclusionCompositeShapeDebugView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBFluidSwitcherGestureExclusionCompositeShape *compositeShape

  // instance methods
  -[_SBFluidSwitcherGestureExclusionCompositeShapeDebugView .cxx_destruct]
  -[_SBFluidSwitcherGestureExclusionCompositeShapeDebugView drawRect:]
  -[_SBFluidSwitcherGestureExclusionCompositeShapeDebugView setCompositeShape:]
  -[_SBFluidSwitcherGestureExclusionCompositeShapeDebugView compositeShape]


SBExternalNotesDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL quickNotesDisabled

  // instance methods
  -[SBExternalNotesDefaults init]
  -[SBExternalNotesDefaults _bindAndRegisterDefaults]


SBDiagnosticRequestAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  @? completionBlock
 @property  NSString *title
 @property  NSString *message
 @property  NSString *radarTitle
 @property  NSString *radarDescription
 @property  NSArray *radarAttachments
 @property  long long radarClassification
 @property  long long radarReproducibility

  // instance methods
  -[SBDiagnosticRequestAlertItem message]
  -[SBDiagnosticRequestAlertItem reappearsAfterLock]
  -[SBDiagnosticRequestAlertItem setMessage:]
  -[SBDiagnosticRequestAlertItem .cxx_destruct]
  -[SBDiagnosticRequestAlertItem setTitle:]
  -[SBDiagnosticRequestAlertItem title]
  -[SBDiagnosticRequestAlertItem radarDescription]
  -[SBDiagnosticRequestAlertItem setRadarDescription:]
  -[SBDiagnosticRequestAlertItem setRadarTitle:]
  -[SBDiagnosticRequestAlertItem setCompletionBlock:]
  -[SBDiagnosticRequestAlertItem completionBlock]
  -[SBDiagnosticRequestAlertItem performUnlockAction]
  -[SBDiagnosticRequestAlertItem reappearsAfterUnlock]
  -[SBDiagnosticRequestAlertItem _fileRadar]
  -[SBDiagnosticRequestAlertItem radarClassification]
  -[SBDiagnosticRequestAlertItem shouldShowInLockScreen]
  -[SBDiagnosticRequestAlertItem configure:requirePasscodeForActions:]
  -[SBDiagnosticRequestAlertItem radarTitle]
  -[SBDiagnosticRequestAlertItem setRadarAttachments:]
  -[SBDiagnosticRequestAlertItem radarAttachments]
  -[SBDiagnosticRequestAlertItem radarReproducibility]
  -[SBDiagnosticRequestAlertItem _yesButtonTitle]
  -[SBDiagnosticRequestAlertItem _noButtonTitle]
  -[SBDiagnosticRequestAlertItem _stringFromClassification:]
  -[SBDiagnosticRequestAlertItem _stringFromReproducibility:]
  -[SBDiagnosticRequestAlertItem setRadarClassification:]
  -[SBDiagnosticRequestAlertItem setRadarReproducibility:]


SBFluidSwitcherIconImageContainerView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIImage *image

  // instance methods
  -[SBFluidSwitcherIconImageContainerView _configureIconImageView:]
  -[SBFluidSwitcherIconImageContainerView initWithFrame:]
  -[SBFluidSwitcherIconImageContainerView _crossfadeToImage:]
  -[SBFluidSwitcherIconImageContainerView .cxx_destruct]
  -[SBFluidSwitcherIconImageContainerView setImage:]
  -[SBFluidSwitcherIconImageContainerView image]
  -[SBFluidSwitcherIconImageContainerView setImage:animated:]
  -[SBFluidSwitcherIconImageContainerView layoutSubviews]


SBGestureSwitcherModifierEvent : SBSwitcherModifierEvent <SBGestureRecognizerTouchHistoryProviding>
 @property  unsigned long phase
 @property  long long touchType
 @property  BOOL mouseEvent
 @property  BOOL pointerTouch
 @property  BOOL canceled
 @property  double lastTouchTimestamp
 @property  {CGPoint=dd} locationInContainerView
 @property  {CGPoint=dd} translationInContainerView
 @property  {CGPoint=dd} velocityInContainerView
 @property  double hysteresis
 @property  <SBGestureRecognizerTouchHistoryProviding> *touchHistoryProvider
 @property  NSUUID *gestureID
 @property  SBAppLayout *selectedAppLayout
 @property  long long gestureType
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBGestureSwitcherModifierEvent peakSpeed]
  -[SBGestureSwitcherModifierEvent copyWithZone:]
  -[SBGestureSwitcherModifierEvent setPhase:]
  -[SBGestureSwitcherModifierEvent setCanceled:]
  -[SBGestureSwitcherModifierEvent isCanceled]
  -[SBGestureSwitcherModifierEvent phase]
  -[SBGestureSwitcherModifierEvent averageTouchVelocityOverTimeDuration:]
  -[SBGestureSwitcherModifierEvent averageTouchPathAngleOverTimeDuration:]
  -[SBGestureSwitcherModifierEvent .cxx_destruct]
  -[SBGestureSwitcherModifierEvent conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBGestureSwitcherModifierEvent setHysteresis:]
  -[SBGestureSwitcherModifierEvent type]
  -[SBGestureSwitcherModifierEvent hysteresis]
  -[SBGestureSwitcherModifierEvent lastTouchTimestamp]
  -[SBGestureSwitcherModifierEvent gestureType]
  -[SBGestureSwitcherModifierEvent descriptionBuilderWithMultilinePrefix:]
  -[SBGestureSwitcherModifierEvent setLastTouchTimestamp:]
  -[SBGestureSwitcherModifierEvent selectedAppLayout]
  -[SBGestureSwitcherModifierEvent gestureID]
  -[SBGestureSwitcherModifierEvent initWithGestureID:selectedAppLayout:gestureType:phase:]
  -[SBGestureSwitcherModifierEvent setVelocityInContainerView:]
  -[SBGestureSwitcherModifierEvent setLocationInContainerView:]
  -[SBGestureSwitcherModifierEvent setTranslationInContainerView:]
  -[SBGestureSwitcherModifierEvent setMouseEvent:]
  -[SBGestureSwitcherModifierEvent setTouchHistoryProvider:]
  -[SBGestureSwitcherModifierEvent setTouchType:]
  -[SBGestureSwitcherModifierEvent setPointerTouch:]
  -[SBGestureSwitcherModifierEvent locationInContainerView]
  -[SBGestureSwitcherModifierEvent translationInContainerView]
  -[SBGestureSwitcherModifierEvent touchType]
  -[SBGestureSwitcherModifierEvent isPointerTouch]
  -[SBGestureSwitcherModifierEvent velocityInContainerView]
  -[SBGestureSwitcherModifierEvent isMouseEvent]
  -[SBGestureSwitcherModifierEvent isGestureEvent]
  -[SBGestureSwitcherModifierEvent touchHistoryProvider]


SBScrunchGestureSwitcherModifierEvent : SBGestureSwitcherModifierEvent
 @property  {CGPoint=dd} initialCentroid
 @property  {CGPoint=dd} centroid
 @property  double absoluteScale
 @property  {CGPoint=dd} translationWithoutScale

  // instance methods
  -[SBScrunchGestureSwitcherModifierEvent centroid]
  -[SBScrunchGestureSwitcherModifierEvent copyWithZone:]
  -[SBScrunchGestureSwitcherModifierEvent setAbsoluteScale:]
  -[SBScrunchGestureSwitcherModifierEvent type]
  -[SBScrunchGestureSwitcherModifierEvent setCentroid:]
  -[SBScrunchGestureSwitcherModifierEvent initialCentroid]
  -[SBScrunchGestureSwitcherModifierEvent absoluteScale]
  -[SBScrunchGestureSwitcherModifierEvent setInitialCentroid:]
  -[SBScrunchGestureSwitcherModifierEvent setTranslationWithoutScale:]
  -[SBScrunchGestureSwitcherModifierEvent translationWithoutScale]


SBForcePressGestureSwitcherModifierEvent : SBGestureSwitcherModifierEvent
 @property  double forcePercent

  // instance methods
  -[SBForcePressGestureSwitcherModifierEvent copyWithZone:]
  -[SBForcePressGestureSwitcherModifierEvent type]
  -[SBForcePressGestureSwitcherModifierEvent forcePercent]
  -[SBForcePressGestureSwitcherModifierEvent setForcePercent:]


SBDragAndDropGestureSwitcherModifierEvent : SBGestureSwitcherModifierEvent
 @property  long long dropAction
 @property  NSString *draggedSceneIdentifier
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} platterViewFrame
 @property  double platterScale

  // instance methods
  -[SBDragAndDropGestureSwitcherModifierEvent copyWithZone:]
  -[SBDragAndDropGestureSwitcherModifierEvent draggedSceneIdentifier]
  -[SBDragAndDropGestureSwitcherModifierEvent setDraggedSceneIdentifier:]
  -[SBDragAndDropGestureSwitcherModifierEvent .cxx_destruct]
  -[SBDragAndDropGestureSwitcherModifierEvent dropAction]
  -[SBDragAndDropGestureSwitcherModifierEvent platterViewFrame]
  -[SBDragAndDropGestureSwitcherModifierEvent setPlatterViewFrame:]
  -[SBDragAndDropGestureSwitcherModifierEvent type]
  -[SBDragAndDropGestureSwitcherModifierEvent setDropAction:]
  -[SBDragAndDropGestureSwitcherModifierEvent platterScale]
  -[SBDragAndDropGestureSwitcherModifierEvent setPlatterScale:]


SBIndirectPanGestureSwitcherModifierEvent : SBGestureSwitcherModifierEvent
 @property  unsigned long indirectPanEndReason

  // instance methods
  -[SBIndirectPanGestureSwitcherModifierEvent copyWithZone:]
  -[SBIndirectPanGestureSwitcherModifierEvent type]
  -[SBIndirectPanGestureSwitcherModifierEvent setIndirectPanEndReason:]
  -[SBIndirectPanGestureSwitcherModifierEvent indirectPanEndReason]


SBFluidSwitcherPageContentViewProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBAppSwitcherTransientOverlayPageContentViewDelegate>
 @property  <SBFluidSwitcherPageContentViewProviderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherPageContentViewProvider _relinquishTransientOverlayViewController:forPageContentView:]
  -[SBFluidSwitcherPageContentViewProvider _preferredContentInterfaceOrientationForViewController:preferredInterfaceOrientation:]
  -[SBFluidSwitcherPageContentViewProvider isSuitableForRecycledItemContainer:]
  -[SBFluidSwitcherPageContentViewProvider _snapshotViewDelegate]
  -[SBFluidSwitcherPageContentViewProvider init]
  -[SBFluidSwitcherPageContentViewProvider _snapshotViewForAppLayout:setActive:]
  -[SBFluidSwitcherPageContentViewProvider appSwitcherTransientOverlayPageContentViewDidChangeContainerOrientation:]
  -[SBFluidSwitcherPageContentViewProvider existingTransientOverlayViewControllerForAppLayout:]
  -[SBFluidSwitcherPageContentViewProvider _applyTransientOverlayViewController:toPageContentView:]
  -[SBFluidSwitcherPageContentViewProvider purgePageContentViewForAppLayout:]
  -[SBFluidSwitcherPageContentViewProvider _containerViewController]
  -[SBFluidSwitcherPageContentViewProvider _interfaceOrientation]
  -[SBFluidSwitcherPageContentViewProvider .cxx_destruct]
  -[SBFluidSwitcherPageContentViewProvider acquiredViewController:forTransientOverlayAppLayout:]
  -[SBFluidSwitcherPageContentViewProvider appSwitcherTransientOverlayPageContentViewDidChangeActive:]
  -[SBFluidSwitcherPageContentViewProvider pageContentViewForAppLayout:setActive:]
  -[SBFluidSwitcherPageContentViewProvider initWithDelegate:snapshotCache:lockoutViewProvider:]
  -[SBFluidSwitcherPageContentViewProvider _viewForService:appLayout:]
  -[SBFluidSwitcherPageContentViewProvider relinquishTransientOverlayViewController:]
  -[SBFluidSwitcherPageContentViewProvider setDelegate:]
  -[SBFluidSwitcherPageContentViewProvider delegate]
  -[SBFluidSwitcherPageContentViewProvider _pageViewSizeForAppLayout:]


SBWindowSelfHostWrapper : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *requester
 @property  UIWindow *window
 @property  UIView<UIScenePresentation> *hostView
 @property  <UIScenePresenter> *presenter
 @property  UIScenePresentationContext *presentationContext

  // class methods
  +[SBWindowSelfHostWrapper wrapperForWindow:orientation:hostRequester:sceneIdentifier:]
  +[SBWindowSelfHostWrapper wrapperForUseInWindow:hostRequester:sceneIdentifier:]

  // instance methods
  -[SBWindowSelfHostWrapper window]
  -[SBWindowSelfHostWrapper hostView]
  -[SBWindowSelfHostWrapper .cxx_destruct]
  -[SBWindowSelfHostWrapper presentationContext]
  -[SBWindowSelfHostWrapper stopHosting]
  -[SBWindowSelfHostWrapper presenter]
  -[SBWindowSelfHostWrapper requester]
  -[SBWindowSelfHostWrapper modifyPresentationContext:]


SBDirectToAirPlayController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBMainDisplaySceneManagerObserver, SBAVSystemControllerDirectToAirPlayObserver, SBControlCenterObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDirectToAirPlayController directToAirPlayIsAvailable]
  +[SBDirectToAirPlayController _mediaControllerSaysWeHaveAWiredRoute]

  // instance methods
  -[SBDirectToAirPlayController sceneManager:didAddExternalForegroundApplicationSceneHandle:]
  -[SBDirectToAirPlayController init]
  -[SBDirectToAirPlayController lockStateChanged:]
  -[SBDirectToAirPlayController _captureCurrentPolicyState]
  -[SBDirectToAirPlayController likelyExternalDestinationsDidChange:]
  -[SBDirectToAirPlayController _rollBannerActionForReadyBundleID:sceneHandle:]
  -[SBDirectToAirPlayController externalAirPlayVideoActiveDidChange:]
  -[SBDirectToAirPlayController .cxx_destruct]
  -[SBDirectToAirPlayController sceneManager:didRemoveExternalForegroundApplicationSceneHandle:]
  -[SBDirectToAirPlayController _acquireDirectToAirPlayStatusBarStyleOverrideForApplicationWithBundleID:playing:completion:]
  -[SBDirectToAirPlayController _main_evaluatePolicyForDirectToAirplayAlert]
  -[SBDirectToAirPlayController _evaluateDirectToAirPlayImplicationsOfAppBecomingBackground:]
  -[SBDirectToAirPlayController externalAirPlayVideoPlayingDidChange:]
  -[SBDirectToAirPlayController externalDisplayChanged:]
  -[SBDirectToAirPlayController controlCenterDidDismiss]
  -[SBDirectToAirPlayController currentExternalDestinationDidChange:]
  -[SBDirectToAirPlayController _currentExternalRouteNames]
  -[SBDirectToAirPlayController _clearDirectToAirPlayStatusBarAssertion]
  -[SBDirectToAirPlayController _evaluatePolicyForDirectToAirplayAlert]
  -[SBDirectToAirPlayController _evaluateDirectToAirPlayImplicationsOfAppBecomingForeground:]
  -[SBDirectToAirPlayController _updateRouteNamesForPlayingAndReadyApps]
  -[SBDirectToAirPlayController _externalRouteNamesForDestination:]
  -[SBDirectToAirPlayController controlCenterWillPresent]


_SBDirectToAirPlayPolicyState : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *routeName
 @property  NSSet *foregroundEligibleBundleIDs
 @property  NSSet *foregroundIneligibleBundleIDs
 @property  NSSet *foregroundReadyBundleIDs
 @property  NSSet *foregroundPlayingBundleIDs
 @property  NSSet *allForegroundBundleIDs
 @property  NSSet *allPlayingBundleIDs
 @property  BOOL currentRouteIsWired
 @property  BOOL playingAppIsActivelyPlaying
 @property  BOOL suppressReadyStateForLock
 @property  BOOL suppressStateChangesForObscured
 @property  BOOL anyEligibleAppIsForeground
 @property  BOOL anyReadyAppIsForeground
 @property  BOOL anyPlayingAppIsForeground
 @property  BOOL anyIneligibleAppIsForeground
 @property  BOOL anyAppIsPlaying
 @property  unsigned long policyStateSerialNumber

  // instance methods
  -[_SBDirectToAirPlayPolicyState routeName]
  -[_SBDirectToAirPlayPolicyState .cxx_destruct]
  -[_SBDirectToAirPlayPolicyState isEqual:]
  -[_SBDirectToAirPlayPolicyState anyEligibleAppIsForeground]
  -[_SBDirectToAirPlayPolicyState policyStateSerialNumber]
  -[_SBDirectToAirPlayPolicyState anyAppIsPlaying]
  -[_SBDirectToAirPlayPolicyState allForegroundBundleIDs]
  -[_SBDirectToAirPlayPolicyState anyReadyAppIsForeground]
  -[_SBDirectToAirPlayPolicyState playingAppIsActivelyPlaying]
  -[_SBDirectToAirPlayPolicyState suppressReadyStateForLock]
  -[_SBDirectToAirPlayPolicyState suppressStateChangesForObscured]
  -[_SBDirectToAirPlayPolicyState currentRouteIsWired]
  -[_SBDirectToAirPlayPolicyState foregroundEligibleBundleIDs]
  -[_SBDirectToAirPlayPolicyState foregroundReadyBundleIDs]
  -[_SBDirectToAirPlayPolicyState foregroundIneligibleBundleIDs]
  -[_SBDirectToAirPlayPolicyState foregroundPlayingBundleIDs]
  -[_SBDirectToAirPlayPolicyState allPlayingBundleIDs]
  -[_SBDirectToAirPlayPolicyState anyIneligibleAppIsForeground]
  -[_SBDirectToAirPlayPolicyState anyPlayingAppIsForeground]


_SBMutableDirectToAirPlayPolicyState : _SBDirectToAirPlayPolicyState
 @property  NSString *routeName
 @property  NSSet *foregroundEligibleBundleIDs
 @property  NSSet *foregroundIneligibleBundleIDs
 @property  NSSet *foregroundReadyBundleIDs
 @property  NSSet *foregroundPlayingBundleIDs
 @property  NSSet *allForegroundBundleIDs
 @property  NSSet *allPlayingBundleIDs
 @property  BOOL currentRouteIsWired
 @property  BOOL playingAppIsActivelyPlaying
 @property  BOOL suppressReadyStateForLock
 @property  BOOL suppressStateChangesForObscured
 @property  unsigned long policyStateSerialNumber

  // instance methods
  -[_SBMutableDirectToAirPlayPolicyState setPolicyStateSerialNumber:]
  -[_SBMutableDirectToAirPlayPolicyState setForegroundReadyBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setSuppressReadyStateForLock:]
  -[_SBMutableDirectToAirPlayPolicyState setAllPlayingBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setForegroundEligibleBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setForegroundIneligibleBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setAllForegroundBundleIDs:]
  -[_SBMutableDirectToAirPlayPolicyState setPlayingAppIsActivelyPlaying:]
  -[_SBMutableDirectToAirPlayPolicyState setCurrentRouteIsWired:]
  -[_SBMutableDirectToAirPlayPolicyState setRouteName:]
  -[_SBMutableDirectToAirPlayPolicyState setSuppressStateChangesForObscured:]
  -[_SBMutableDirectToAirPlayPolicyState setForegroundPlayingBundleIDs:]


SBSwitcherDisplayItemRemovalResolutionResults : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *displayItems

  // instance methods
  -[SBSwitcherDisplayItemRemovalResolutionResults .cxx_destruct]
  -[SBSwitcherDisplayItemRemovalResolutionResults displayItems]
  -[SBSwitcherDisplayItemRemovalResolutionResults actionsForDisplayItem:]
  -[SBSwitcherDisplayItemRemovalResolutionResults setActions:forDisplayItem:]


SBSwitcherDisplayItemRemovalResolutionResultAction : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long actionType
 @property  SBAppLayout *appLayout
 @property  SBAppLayout *replacementAppLayout

  // class methods
  +[SBSwitcherDisplayItemRemovalResolutionResultAction replacementActionWithAppLayout:replacementAppLayout:]
  +[SBSwitcherDisplayItemRemovalResolutionResultAction defaultRemovalPolicyActionWithAppLayout:]

  // instance methods
  -[SBSwitcherDisplayItemRemovalResolutionResultAction actionType]
  -[SBSwitcherDisplayItemRemovalResolutionResultAction appLayout]
  -[SBSwitcherDisplayItemRemovalResolutionResultAction .cxx_destruct]
  -[SBSwitcherDisplayItemRemovalResolutionResultAction replacementAppLayout]
  -[SBSwitcherDisplayItemRemovalResolutionResultAction _initWithAppLayout:actionType:]


SBMainDisplaySceneManager : SBSceneManager <SBIdleTimerCoordinating, SBSuspendedUnderLockManagerDelegate, SBIdleTimerProviding>
 @property  SBMainDisplayLayoutStateManager *_layoutStateManager
 @property  NSArray *_requiredContextIdentifiersForMedusaDraggingDestination
 @property  BOOL _isKeyboardVisibleForSpringBoard
 @property  BOOL _isUsingMedusaHostedKeyboardWindow
 @property  UIWindow *_medusaHostedKeyboardWindow
 @property  SBMainDisplayPolicyAggregator *policyAggregator
 @property  SBMainDisplayLayoutState *currentLayoutState
 @property  SBMainDisplaySceneLayoutViewController *sceneLayoutViewController
 @property  BOOL hasIdleTimerBehaviors
 @property  BOOL suspendedUnderLock
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainDisplaySceneManager _layoutStateManagerClass]
  +[SBMainDisplaySceneManager _sceneLayoutWindowClass]
  +[SBMainDisplaySceneManager _applicationSceneHandleClass]

  // instance methods
  -[SBMainDisplaySceneManager _noteDidCommitUpdateForScene:]
  -[SBMainDisplaySceneManager isSuspendedUnderLock]
  -[SBMainDisplaySceneManager sceneManager:didDestroyScene:]
  -[SBMainDisplaySceneManager setIdleTimerCoordinator:]
  -[SBMainDisplaySceneManager window]
  -[SBMainDisplaySceneManager idleTimerCoordinator]
  -[SBMainDisplaySceneManager _application:initiatedChangefromInterfaceOrientation:toInterfaceOrientation:scene:sceneSettings:transitionContext:]
  -[SBMainDisplaySceneManager hasIdleTimerBehaviors]
  -[SBMainDisplaySceneManager externalApplicationSceneHandles]
  -[SBMainDisplaySceneManager _isExternalForegroundScene:]
  -[SBMainDisplaySceneManager _shouldRequestSnapshotActionsForScene:]
  -[SBMainDisplaySceneManager policyAggregator]
  -[SBMainDisplaySceneManager suspendedUnderLockManager:shouldPreventSuspendUnderLockForScene:]
  -[SBMainDisplaySceneManager idleTimerProvider:didProposeBehavior:forReason:]
  -[SBMainDisplaySceneManager _requiredContextIdentifiersForMedusaDraggingDestination]
  -[SBMainDisplaySceneManager _updateExternalForegroundApplicationScenesToInterfaceOrientation:force:prefersTouchCancellationDisabled:validator:]
  -[SBMainDisplaySceneManager _updateLevelAndBackgroundSettingsForScene:transitionContext:]
  -[SBMainDisplaySceneManager existingSceneHandleForSceneIdentity:]
  -[SBMainDisplaySceneManager _internalClientSettingsDiffInspector]
  -[SBMainDisplaySceneManager createSceneForApplication:withOptions:completion:]
  -[SBMainDisplaySceneManager dealloc]
  -[SBMainDisplaySceneManager coordinatorRequestedIdleTimerBehavior:]
  -[SBMainDisplaySceneManager _handleAction:forScene:]
  -[SBMainDisplaySceneManager .cxx_destruct]
  -[SBMainDisplaySceneManager _sceneIdentifierForBundleIdentifier:uniqueIdentifier:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:uniqueIdentifier:]
  -[SBMainDisplaySceneManager _deviceOrientationChanged:]
  -[SBMainDisplaySceneManager _identifierForApplication:]
  -[SBMainDisplaySceneManager _sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:allowCanMatches:preferNewScene:visibleIdentifiers:excludingIdentifiers:]
  -[SBMainDisplaySceneManager _updateMedusaHostedKeyboardWindowForScene:isForeground:]
  -[SBMainDisplaySceneManager newMedusaHostedKeyboardWindowLevelAssertionWithPriority:windowLevel:]
  -[SBMainDisplaySceneManager _addMedusaDraggingDestinationWindow:]
  -[SBMainDisplaySceneManager _userInterfaceStyleArbiterStyleChanged:]
  -[SBMainDisplaySceneManager _attemptAutorotationOfExternalForegroundApplicationScenesToInterfaceOrientation:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:excludingIdentifiers:]
  -[SBMainDisplaySceneManager _animateGeometryChangesForExternalForegroundApplicationScenes]
  -[SBMainDisplaySceneManager externalForegroundApplicationSceneHandles]
  -[SBMainDisplaySceneManager suspendedUnderLockManagerVisibleScenesInLayoutState:]
  -[SBMainDisplaySceneManager _removeMedusaDraggingDestinationWindow:]
  -[SBMainDisplaySceneManager _shouldTrackScenesForDeactivation]
  -[SBMainDisplaySceneManager _appClientSettingsDiffInspector]
  -[SBMainDisplaySceneManager _isUsingMedusaHostedKeyboardWindow]
  -[SBMainDisplaySceneManager _updateMedusaHostedKeyboardWindow]
  -[SBMainDisplaySceneManager existingSceneHandleForScene:]
  -[SBMainDisplaySceneManager runningApplicationScenes:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:targetContentIdentifier:allowCanMatches:preferNewScene:visibleIdentifiers:]
  -[SBMainDisplaySceneManager _shouldAutoHostScene:]
  -[SBMainDisplaySceneManager suspendedUnderLockManager:sceneHandleForScene:]
  -[SBMainDisplaySceneManager _keyboardLayersClientSettingsDiffInspector]
  -[SBMainDisplaySceneManager _proposeIdleTimerBehaviorForReason:]
  -[SBMainDisplaySceneManager setSuspendedUnderLock:]
  -[SBMainDisplaySceneManager _sceneIdentityForApplication:createPrimaryIfRequired:]
  -[SBMainDisplaySceneManager _isKeyboardVisibleForSpringBoard]
  -[SBMainDisplaySceneManager removeObserver:]
  -[SBMainDisplaySceneManager _scene:didUpdateClientSettingsWithDiff:oldClientSettings:transitionContext:]
  -[SBMainDisplaySceneManager _medusaHostedKeyboardWindow]
  -[SBMainDisplaySceneManager _updateValidInterfaceOrientationForTransitionContext:]
  -[SBMainDisplaySceneManager setSuspendedUnderLock:alongsideWillChangeBlock:alongsideDidChangeBlock:]
  -[SBMainDisplaySceneManager _createRootWindowScenePresentationBinder]
  -[SBMainDisplaySceneManager _updateDeviceOrientation:ifNeededForScene:]
  -[SBMainDisplaySceneManager _newSceneIdentifierForBundleIdentifier:]
  -[SBMainDisplaySceneManager _externalClientSettingsDiffInspector]
  -[SBMainDisplaySceneManager _scene:interceptUpdateWithNewSettings:]
  -[SBMainDisplaySceneManager initWithReference:]
  -[SBMainDisplaySceneManager addObserver:]
  -[SBMainDisplaySceneManager _shouldFenceTransitionForScene:updatedClientSettingsDiff:oldClientSettings:transitionContext:]
  -[SBMainDisplaySceneManager _newSceneIdentifierForBundleIdentifier:supportsMultiwindow:]
  -[SBMainDisplaySceneManager fetchOrCreateApplicationSceneHandleForRequest:]
  -[SBMainDisplaySceneManager _scene:willUpdateWithSettings:transitionContext:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:targetContentIdentifier:]
  -[SBMainDisplaySceneManager preventTakingAdditionalMedusaSnapshotsForBackgroundingScenesWithReason:]
  -[SBMainDisplaySceneManager newSceneIdentityForApplication:]
  -[SBMainDisplaySceneManager existingSceneHandleForPersistenceIdentifier:]
  -[SBMainDisplaySceneManager acquireIgnoreSuspendedUnderLockAssertionForSceneIdentifier:reason:]
  -[SBMainDisplaySceneManager sceneIdentityForApplication:]
  -[SBMainDisplaySceneManager _newSceneLayoutViewController]
  -[SBMainDisplaySceneManager _snapshotRequestsForSceneHandle:settings:]
  -[SBMainDisplaySceneManager suspendedUnderLockManagerDisplayConfiguration:]
  -[SBMainDisplaySceneManager _noteDidChangeToVisibility:previouslyExisted:forScene:]


SBClientSettingObserverContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBClientSettingObserverContext .cxx_destruct]


SBAppClientSettingObserverContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBAppClientSettingObserverContext .cxx_destruct]


SBInternalClientSettingObserverContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  FBScene *scene
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  UIApplicationSceneClientSettings *oldClientSettings
 @property  UIApplicationSceneClientSettings *updatedClientSettings
 @property  FBSSceneTransitionContext *transition

  // instance methods
  -[SBInternalClientSettingObserverContext setTransition:]
  -[SBInternalClientSettingObserverContext transition]
  -[SBInternalClientSettingObserverContext sceneHandle]
  -[SBInternalClientSettingObserverContext .cxx_destruct]
  -[SBInternalClientSettingObserverContext setSceneHandle:]
  -[SBInternalClientSettingObserverContext scene]
  -[SBInternalClientSettingObserverContext setUpdatedClientSettings:]
  -[SBInternalClientSettingObserverContext oldClientSettings]
  -[SBInternalClientSettingObserverContext setOldClientSettings:]
  -[SBInternalClientSettingObserverContext updatedClientSettings]
  -[SBInternalClientSettingObserverContext setScene:]


SBLogWindowController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBMainScreenActiveInterfaceOrientationWindow *logWindow
 @property  UITextView *logTextView

  // class methods
  +[SBLogWindowController sharedInstance]
  +[SBLogWindowController sharedInstanceIfAvailable]

  // instance methods
  -[SBLogWindowController hide]
  -[SBLogWindowController .cxx_destruct]
  -[SBLogWindowController initWithNibName:bundle:]
  -[SBLogWindowController show]
  -[SBLogWindowController logTextView]
  -[SBLogWindowController setLogTextView:]
  -[SBLogWindowController logWindow]
  -[SBLogWindowController setLogWindow:]


SBLogWindowTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLogWindowTestRecipe load]

  // instance methods
  -[SBLogWindowTestRecipe title]
  -[SBLogWindowTestRecipe handleVolumeIncrease]
  -[SBLogWindowTestRecipe handleVolumeDecrease]


SBNotificationCarPlayDestination : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BNBannerHostMonitorListenerObserving, BNPresentableObserving, NCCarPlayBannerPresentableViewControllerDelegate, NCNotificationAlertDestination>
 @property  NCCarPlayBannerSource *carPlayBannerSource
 @property  BOOL active
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <NCNotificationAlertDestinationDelegate> *delegate
 @property  BOOL alertDestination
 @property  NSString *identifier
 @property  BSServiceConnectionEndpoint *endpoint

  // instance methods
  -[SBNotificationCarPlayDestination postNotificationRequest:]
  -[SBNotificationCarPlayDestination _addPresentable:]
  -[SBNotificationCarPlayDestination isAlertDestination]
  -[SBNotificationCarPlayDestination modifyNotificationRequest:]
  -[SBNotificationCarPlayDestination withdrawNotificationRequest:]
  -[SBNotificationCarPlayDestination keyWindowForScreen:]
  -[SBNotificationCarPlayDestination canReceiveNotificationRequest:]
  -[SBNotificationCarPlayDestination _removePresentable:]
  -[SBNotificationCarPlayDestination _allNotificationActionsForNotificationRequest:]
  -[SBNotificationCarPlayDestination init]
  -[SBNotificationCarPlayDestination _notificationRequestShouldShowModalSubActions:]
  -[SBNotificationCarPlayDestination didCancelBannerOfPresentableViewController:reason:]
  -[SBNotificationCarPlayDestination endpoint]
  -[SBNotificationCarPlayDestination dealloc]
  -[SBNotificationCarPlayDestination _defaultActionTypeForNotificationRequest:]
  -[SBNotificationCarPlayDestination _inCallOrFaceTime]
  -[SBNotificationCarPlayDestination .cxx_destruct]
  -[SBNotificationCarPlayDestination _effectiveDefaultActionTypeForNotificationRequest:]
  -[SBNotificationCarPlayDestination _subActionLabelsForNotificationRequest:]
  -[SBNotificationCarPlayDestination _carPlayBannerSource]
  -[SBNotificationCarPlayDestination presentableDidDisappearAsBanner:withReason:]
  -[SBNotificationCarPlayDestination _notificationRequestSupportsSubActions:]
  -[SBNotificationCarPlayDestination identifier]
  -[SBNotificationCarPlayDestination _closeNotificationActionForNotificationRequest:]
  -[SBNotificationCarPlayDestination presentableViewControllerClosesByDefault:]
  -[SBNotificationCarPlayDestination isActive]
  -[SBNotificationCarPlayDestination _policyForApp:]
  -[SBNotificationCarPlayDestination _bulletinForNotificationRequest:]
  -[SBNotificationCarPlayDestination didSelectBannerOfPresentableViewController:]
  -[SBNotificationCarPlayDestination bannerHostDidBecomeAvailableForMonitorListener:]
  -[SBNotificationCarPlayDestination _ignoreActionForNotificationRequest:]
  -[SBNotificationCarPlayDestination _callOrFaceTimeStateChanged]
  -[SBNotificationCarPlayDestination _presentablesWithRequestIdentifier:]
  -[SBNotificationCarPlayDestination _appPolicyEvaluator]
  -[SBNotificationCarPlayDestination presentableWillAppearAsBanner:]
  -[SBNotificationCarPlayDestination setDelegate:]
  -[SBNotificationCarPlayDestination _supplementaryActionsForNotificationRequest:]
  -[SBNotificationCarPlayDestination _newPresentableForNotificationRequest:layoutDescription:]
  -[SBNotificationCarPlayDestination delegate]
  -[SBNotificationCarPlayDestination _subActionsForNotificationRequest:]
  -[SBNotificationCarPlayDestination _actionForNotificationRequest:]
  -[SBNotificationCarPlayDestination bannerHostDidBecomeUnavailableForMonitorListener:]


SBForcePressToFullScreenAppLayoutSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier homeScreenBackdropBlurType]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier visibleAppLayouts]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isHomeScreenContentRequired]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isSwitcherWindowVisible]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier wallpaperStyle]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier opacityForIndex:]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier .cxx_destruct]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier isContainerStatusBarVisible]
  -[SBForcePressToFullScreenAppLayoutSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:effectiveStartingEnvironmentMode:]


SBHomeScreenSpotlightViewController : SBSpotlightMultiplexingViewController
 @property  <SBHomeScreenSpotlightDismissalDelegate> *homescreenSpotlightDelegate
 @property  FBDisplayLayoutElement *displayLayoutElement

  // instance methods
  -[SBHomeScreenSpotlightViewController initWithDelegate:]
  -[SBHomeScreenSpotlightViewController level]
  -[SBHomeScreenSpotlightViewController displayLayoutElement]
  -[SBHomeScreenSpotlightViewController homescreenSpotlightDelegate]
  -[SBHomeScreenSpotlightViewController .cxx_destruct]
  -[SBHomeScreenSpotlightViewController viewWillAppear:]
  -[SBHomeScreenSpotlightViewController viewDidDisappear:]
  -[SBHomeScreenSpotlightViewController remoteSearchViewPresentationSource]


SBSoftLockoutController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalLockProviding, CSCoverSheetViewControllerObserver>
 @property  <SBSoftLockoutControllerDelegate> *delegate
 @property  BOOL locked
 @property  BOOL showPasscode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBSoftLockoutController coverSheetIdentifier]
  -[SBSoftLockoutController showPasscode]
  -[SBSoftLockoutController reload]
  -[SBSoftLockoutController unlockFromSource:]
  -[SBSoftLockoutController isLocked]
  -[SBSoftLockoutController dealloc]
  -[SBSoftLockoutController .cxx_destruct]
  -[SBSoftLockoutController _clearPasscodeRequiredAssertion]
  -[SBSoftLockoutController participantState]
  -[SBSoftLockoutController _createPasscodeRequiredAssertion]
  -[SBSoftLockoutController initWithBiometricLockoutState:lockScreenManager:]
  -[SBSoftLockoutController setDelegate:]
  -[SBSoftLockoutController coverSheetViewControllerDidDismissPasscodeLockView:]
  -[SBSoftLockoutController initWithBiometricLockoutState:]
  -[SBSoftLockoutController delegate]


SBAppLibraryMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppLibraryMetric init]
  -[SBAppLibraryMetric handleEvent:withContext:]
  -[SBAppLibraryMetric .cxx_destruct]


SBCollectionViewCell : UICollectionViewCell /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  <SBCollectionViewCellDelegate> *delegate
 @property  BOOL protectDelayedUnhighlights

  // instance methods
  -[SBCollectionViewCell .cxx_destruct]
  -[SBCollectionViewCell setHighlighted:]
  -[SBCollectionViewCell prepareForReuse]
  -[SBCollectionViewCell setDelegate:]
  -[SBCollectionViewCell delegate]
  -[SBCollectionViewCell setHighlighted:afterDelay:]
  -[SBCollectionViewCell _performSetHighlighted]
  -[SBCollectionViewCell _didSetHighlighted:]
  -[SBCollectionViewCell protectDelayedUnhighlights]
  -[SBCollectionViewCell setProtectDelayedUnhighlights:]


SBForcePressToSwitcherSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBForcePressToSwitcherSwitcherModifier homeScreenBackdropBlurType]
  -[SBForcePressToSwitcherSwitcherModifier visibleAppLayouts]
  -[SBForcePressToSwitcherSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBForcePressToSwitcherSwitcherModifier isHomeScreenContentRequired]
  -[SBForcePressToSwitcherSwitcherModifier isSwitcherWindowVisible]
  -[SBForcePressToSwitcherSwitcherModifier animationAttributesForLayoutElement:]
  -[SBForcePressToSwitcherSwitcherModifier wallpaperStyle]
  -[SBForcePressToSwitcherSwitcherModifier opacityForIndex:]
  -[SBForcePressToSwitcherSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBForcePressToSwitcherSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBForcePressToSwitcherSwitcherModifier _layoutSettings]
  -[SBForcePressToSwitcherSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBForcePressToSwitcherSwitcherModifier containerStatusBarAnimationDuration]
  -[SBForcePressToSwitcherSwitcherModifier .cxx_destruct]
  -[SBForcePressToSwitcherSwitcherModifier transitionWillBegin]
  -[SBForcePressToSwitcherSwitcherModifier _appLayoutToScrollToDuringTransition]
  -[SBForcePressToSwitcherSwitcherModifier handleTimerEvent:]
  -[SBForcePressToSwitcherSwitcherModifier isContainerStatusBarVisible]
  -[SBForcePressToSwitcherSwitcherModifier _dismissForEmptySwitcherResponseName]
  -[SBForcePressToSwitcherSwitcherModifier _indexOfSelectedAppLayout]
  -[SBForcePressToSwitcherSwitcherModifier initWithTransitionID:selectedAppLayout:effectiveStartingEnvironmentMode:multitaskingModifier:]


SBMoveFloatingConfigurationFloatingSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier visibleAppLayouts]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier opacityForIndex:]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier _layoutSettings]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier transitionWillBegin]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier keyboardSuppressionMode]
  -[SBMoveFloatingConfigurationFloatingSwitcherModifier initWithTransitionID:fromFloatingConfiguration:toFloatingConfiguration:]


SBWidgetLaunchStatsTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWidgetLaunchStatsTestRecipe load]

  // instance methods
  -[SBWidgetLaunchStatsTestRecipe title]
  -[SBWidgetLaunchStatsTestRecipe handleVolumeIncrease]
  -[SBWidgetLaunchStatsTestRecipe handleVolumeDecrease]


SBGridToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBGridToFullScreenSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBGridToFullScreenSwitcherModifier .cxx_destruct]
  -[SBGridToFullScreenSwitcherModifier transitionWillBegin]
  -[SBGridToFullScreenSwitcherModifier initWithTransitionID:direction:fullScreenAppLayout:gridModifier:]


SBAWDMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBAWDMetricDelegate> *delegate

  // instance methods
  -[SBAWDMetric .cxx_destruct]
  -[SBAWDMetric dataClass]
  -[SBAWDMetric componentID]
  -[SBAWDMetric setDelegate:]
  -[SBAWDMetric delegate]
  -[SBAWDMetric metricID]
  -[SBAWDMetric postWithDataBuilder:]
  -[SBAWDMetric configureWithData:]
  -[SBAWDMetric _postMetric:withID:]


SBAWDMetricData : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation

SBLowBatteryLogTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLowBatteryLogTestRecipe load]

  // instance methods
  -[SBLowBatteryLogTestRecipe title]
  -[SBLowBatteryLogTestRecipe handleVolumeIncrease]
  -[SBLowBatteryLogTestRecipe handleVolumeDecrease]


SBFaceContactExpectationManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBFaceContactExpectationManager initWithSceneManager:]
  -[SBFaceContactExpectationManager .cxx_destruct]
  -[SBFaceContactExpectationManager initWithSceneManager:proximitySensorManager:]
  -[SBFaceContactExpectationManager _proximitySensorClientID]
  -[SBFaceContactExpectationManager _frontmostScenesExpectingFaceContact]
  -[SBFaceContactExpectationManager updateFaceContactExpectation]


SBStatusBarManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBStatusBarManager sharedInstance]

  // instance methods
  -[SBStatusBarManager init]
  -[SBStatusBarManager createStatusBarWithReason:]
  -[SBStatusBarManager isFrontmostStatusBarHidden]
  -[SBStatusBarManager isFrontmostStatusBarPartHidden:]
  -[SBStatusBarManager trailingStatusBarStyleRequest]
  -[SBStatusBarManager recycleStatusBar:]
  -[SBStatusBarManager .cxx_destruct]
  -[SBStatusBarManager acquireHideFrontmostStatusBarAssertionForReason:]
  -[SBStatusBarManager createStatusBarWithReason:withFrame:]
  -[SBStatusBarManager succinctDescriptionBuilder]
  -[SBStatusBarManager handleStatusBarTapWithEvent:]
  -[SBStatusBarManager succinctDescription]
  -[SBStatusBarManager _removeStatusBarContainer:]
  -[SBStatusBarManager frontmostStatusBarStyleRequest]
  -[SBStatusBarManager descriptionWithMultilinePrefix:]
  -[SBStatusBarManager descriptionBuilderWithMultilinePrefix:]


SBStatusBarContainer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  UIStatusBar *statusBar
 @property  NSString *reason

  // instance methods
  -[SBStatusBarContainer setStatusBar:]
  -[SBStatusBarContainer setReason:]
  -[SBStatusBarContainer statusBar]
  -[SBStatusBarContainer dealloc]
  -[SBStatusBarContainer .cxx_destruct]
  -[SBStatusBarContainer reason]


SBHapticSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  long long hapticType
 @property  long long phase

  // instance methods
  -[SBHapticSwitcherEventResponse phase]
  -[SBHapticSwitcherEventResponse hapticType]
  -[SBHapticSwitcherEventResponse type]
  -[SBHapticSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBHapticSwitcherEventResponse initWithHapticType:phase:]


SBLockOverlayView : SBUILockOverlayView /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer
  // instance methods
  -[SBLockOverlayView _legibilitySettingsForStyle:]


SBMainWorkspaceTransitionRequest : SBWorkspaceTransitionRequest
 @property  SBMainWorkspace *workspace
 @property  long long source
 @property  BOOL shouldPreventEmergencyNotificationBannerDismissal
 @property  BOOL shouldPreventAutoPiP
 @property  <SBBannerUnfurlSourceContextProviding> *bannerUnfurlSourceContextProvider
 @property  @? transactionProvider
 @property  @? transactionConfigurator
 @property  @? completionBlock

  // instance methods
  -[SBMainWorkspaceTransitionRequest compactDescriptionBuilder]
  -[SBMainWorkspaceTransitionRequest isMainWorkspaceTransitionRequest]
  -[SBMainWorkspaceTransitionRequest setSource:]
  -[SBMainWorkspaceTransitionRequest setTransientOverlayContext:]
  -[SBMainWorkspaceTransitionRequest declineWithReason:]
  -[SBMainWorkspaceTransitionRequest _initWithWorkspace:displayConfiguration:]
  -[SBMainWorkspaceTransitionRequest source]
  -[SBMainWorkspaceTransitionRequest .cxx_destruct]
  -[SBMainWorkspaceTransitionRequest setTransactionProvider:]
  -[SBMainWorkspaceTransitionRequest succinctDescriptionBuilder]
  -[SBMainWorkspaceTransitionRequest transactionConfigurator]
  -[SBMainWorkspaceTransitionRequest setCompletionBlock:]
  -[SBMainWorkspaceTransitionRequest completionBlock]
  -[SBMainWorkspaceTransitionRequest setTransactionConfigurator:]
  -[SBMainWorkspaceTransitionRequest setShouldPreventEmergencyNotificationBannerDismissal:]
  -[SBMainWorkspaceTransitionRequest shouldPreventEmergencyNotificationBannerDismissal]
  -[SBMainWorkspaceTransitionRequest bannerUnfurlSourceContextProvider]
  -[SBMainWorkspaceTransitionRequest setBannerUnfurlSourceContextProvider:]
  -[SBMainWorkspaceTransitionRequest finalize]
  -[SBMainWorkspaceTransitionRequest setShouldPreventAutoPiP:]
  -[SBMainWorkspaceTransitionRequest shouldPreventAutoPiP]
  -[SBMainWorkspaceTransitionRequest copyMainWorkspaceTransitionRequest]
  -[SBMainWorkspaceTransitionRequest transactionProvider]
  -[SBMainWorkspaceTransitionRequest initWithDisplayConfiguration:]


SBApplicationPlaceholderProxy : FBSApplicationPlaceholder /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  Class iconClass

  // instance methods
  -[SBApplicationPlaceholderProxy iconClass]


SBSuspendedUnderLockManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBSuspendedUnderLockManagerDelegate> *delegate
 @property  BOOL suspendedUnderLock

  // instance methods
  -[SBSuspendedUnderLockManager initWithDelegate:eventQueue:]
  -[SBSuspendedUnderLockManager isSuspendedUnderLock]
  -[SBSuspendedUnderLockManager .cxx_destruct]
  -[SBSuspendedUnderLockManager interceptUpdateForScene:withNewSettings:]
  -[SBSuspendedUnderLockManager _shouldBeBackgroundUnderLockForScene:withSettings:]
  -[SBSuspendedUnderLockManager setSuspendedUnderLock:]
  -[SBSuspendedUnderLockManager setSuspendedUnderLock:alongsideWillChangeBlock:alongsideDidChangeBlock:]
  -[SBSuspendedUnderLockManager setDelegate:]
  -[SBSuspendedUnderLockManager delegate]


SBSwitcherModifier : SBChainableModifier <SBSwitcherMultitaskingQueryProviding, SBSwitcherContextProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSwitcherModifier queryProtocol]
  +[SBSwitcherModifier contextProtocol]
  +[SBSwitcherModifier newEventResponse]

  // instance methods
  -[SBSwitcherModifier handleMainTransitionEvent:]
  -[SBSwitcherModifier loggingCategory]
  -[SBSwitcherModifier init]
  -[SBSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBSwitcherModifier handleTapAppLayoutEvent:]
  -[SBSwitcherModifier _handleEvent:]
  -[SBSwitcherModifier handleScrollEvent:]
  -[SBSwitcherModifier handleRemovalEvent:]
  -[SBSwitcherModifier handleTimerEvent:]
  -[SBSwitcherModifier handleTapOutsideToDismissEvent:]
  -[SBSwitcherModifier defaultAppLayoutsToCacheSnapshots]
  -[SBSwitcherModifier appLayoutsToCacheSnapshotsWithVisibleRange:numberOfSnapshotsToCache:biasForward:]
  -[SBSwitcherModifier handleInlineTransitionEvent:]
  -[SBSwitcherModifier handleGestureEvent:]
  -[SBSwitcherModifier handleHomeGestureSettingsChangedEvent:]
  -[SBSwitcherModifier handleReduceMotionChangedEvent:]
  -[SBSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:numberOfRows:padding:layoutDirection:]
  -[SBSwitcherModifier scaledFrameForIndex:]
  -[SBSwitcherModifier handleSwipeToKillEvent:]
  -[SBSwitcherModifier handleInsertionEvent:]
  -[SBSwitcherModifier handleMedusaSettingsChangedEvent:]
  -[SBSwitcherModifier runsInternalVerificationAfterEventDispatch]


SBHomeScreenWindow : SBWindow
 @property  SBHomeScreenViewController *homeScreenViewController

  // class methods
  +[SBHomeScreenWindow constrainFrameToScreen:]
  +[SBHomeScreenWindow sb_autorotates]

  // instance methods
  -[SBHomeScreenWindow _canBecomeKeyWindow]
  -[SBHomeScreenWindow hitTest:withEvent:]
  -[SBHomeScreenWindow homeScreenViewController]
  -[SBHomeScreenWindow _initWithScreen:layoutStrategy:debugName:rootViewController:scene:]


SBPortalView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIView *sourceView
 @property  BOOL hidesSourceView
 @property  BOOL matchesAlpha
 @property  BOOL matchesTransform
 @property  BOOL matchesPosition
 @property  BOOL allowsBackdropGroups
 @property  CAPortalLayer *portalLayer

  // class methods
  +[SBPortalView layerClass]

  // instance methods
  -[SBPortalView hidesSourceView]
  -[SBPortalView setSourceView:]
  -[SBPortalView setMatchesAlpha:]
  -[SBPortalView matchesAlpha]
  -[SBPortalView sourceView]
  -[SBPortalView .cxx_destruct]
  -[SBPortalView matchesPosition]
  -[SBPortalView portalLayer]
  -[SBPortalView allowsBackdropGroups]
  -[SBPortalView setMatchesPosition:]
  -[SBPortalView setHidesSourceView:]
  -[SBPortalView matchesTransform]
  -[SBPortalView setAllowsBackdropGroups:]
  -[SBPortalView setMatchesTransform:]


SBFMotionGestureController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBFMotionGestureController sharedInstance]

  // instance methods
  -[SBFMotionGestureController init]
  -[SBFMotionGestureController _observersForPriority:]
  -[SBFMotionGestureController dealloc]
  -[SBFMotionGestureController _removeGestureManager]
  -[SBFMotionGestureController addGestureObserver:withPriority:]
  -[SBFMotionGestureController _addGestureObserver:withPriority:]
  -[SBFMotionGestureController _updateGestureManager]
  -[SBFMotionGestureController _removeGestureObserver:]
  -[SBFMotionGestureController _highestPriorityObservers]
  -[SBFMotionGestureController .cxx_destruct]
  -[SBFMotionGestureController _hasObservers]
  -[SBFMotionGestureController _enumerateObserversByPriority:]
  -[SBFMotionGestureController _addGestureManager]
  -[SBFMotionGestureController _notifyObserversOfGesture:]
  -[SBFMotionGestureController addGestureObserver:]
  -[SBFMotionGestureController removeGestureObserver:]


SBSceneDataStore : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSDictionary *data
 @property  BOOL invalidated
 @property  NSString *identifier

  // instance methods
  -[SBSceneDataStore _isInvalidated]
  -[SBSceneDataStore setArchivedObject:forKey:]
  -[SBSceneDataStore removeObjectForKey:]
  -[SBSceneDataStore _data]
  -[SBSceneDataStore .cxx_destruct]
  -[SBSceneDataStore removeAllObjects]
  -[SBSceneDataStore setObject:forKey:]
  -[SBSceneDataStore objectForKey:]
  -[SBSceneDataStore identifier]
  -[SBSceneDataStore _invalidate]
  -[SBSceneDataStore safeObjectForKey:ofType:]
  -[SBSceneDataStore unarchivedObjectOfClass:forKey:]
  -[SBSceneDataStore _initWithIdentifier:data:changeHandler:]
  -[SBSceneDataStore _invokeChangeHandler]


SBPIPWindow : SBWindow
 @property  NSArray *containerViewControllers

  // instance methods
  -[SBPIPWindow init]
  -[SBPIPWindow hitTest:withEvent:]
  -[SBPIPWindow setRootViewController:]
  -[SBPIPWindow isActive]
  -[SBPIPWindow interfaceOrientationForContainerViewController:]
  -[SBPIPWindow _pipWindowRootVC]
  -[SBPIPWindow containerViewControllers]
  -[SBPIPWindow addContainerViewController:]
  -[SBPIPWindow removeContainerViewController:]
  -[SBPIPWindow containerViewControllerForPictureInPictureViewController:]
  -[SBPIPWindow updateActiveInterfaceOrientationForManualPictureInPictureStart]


SBPIPWindowRootViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBPIPContainerViewControllerObserver, SBUIActiveOrientationObserver>
 @property  long long activeInterfaceOrientation
 @property  NSArray *containerViewControllers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPWindowRootViewController setActiveInterfaceOrientation:]
  -[SBPIPWindowRootViewController _overrideInterfaceOrientationMechanics]
  -[SBPIPWindowRootViewController activeInterfaceOrientation]
  -[SBPIPWindowRootViewController activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBPIPWindowRootViewController _overrideWindowActiveInterfaceOrientation]
  -[SBPIPWindowRootViewController init]
  -[SBPIPWindowRootViewController dealloc]
  -[SBPIPWindowRootViewController shouldAutorotate]
  -[SBPIPWindowRootViewController .cxx_destruct]
  -[SBPIPWindowRootViewController viewDidLayoutSubviews]
  -[SBPIPWindowRootViewController activeInterfaceOrientationWillChangeToOrientation:]
  -[SBPIPWindowRootViewController interfaceOrientationForContainerViewController:]
  -[SBPIPWindowRootViewController containerViewControllerAcquireInterfaceOrientationLock:]
  -[SBPIPWindowRootViewController containerViewControllerRelinquishInterfaceOrientationLock:]
  -[SBPIPWindowRootViewController containerViewControllerRequiredInterfaceOrientationDidChange:]
  -[SBPIPWindowRootViewController containerViewControllers]
  -[SBPIPWindowRootViewController addContainerViewController:]
  -[SBPIPWindowRootViewController removeContainerViewController:]
  -[SBPIPWindowRootViewController containerViewControllerForPictureInPictureViewController:]
  -[SBPIPWindowRootViewController _layoutInterfaceOrientationUnlockedContainerViewControllers]
  -[SBPIPWindowRootViewController _requiredInterfaceOrientationForContainerViewController:]
  -[SBPIPWindowRootViewController _layoutContainerViewControllers:]
  -[SBPIPWindowRootViewController _hasOngoingMorphRestore]
  -[SBPIPWindowRootViewController _interfaceOrientationForContainerViewController:]


SBRemovalSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBRemovalSwitcherModifier visibleAppLayouts]
  -[SBRemovalSwitcherModifier topMostLayoutElements]
  -[SBRemovalSwitcherModifier animationAttributesForLayoutElement:]
  -[SBRemovalSwitcherModifier .cxx_destruct]
  -[SBRemovalSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBRemovalSwitcherModifier scrollViewContentOffset]
  -[SBRemovalSwitcherModifier handleRemovalEvent:]
  -[SBRemovalSwitcherModifier initWithAppLayout:reason:]
  -[SBRemovalSwitcherModifier handleInsertionEvent:]
  -[SBRemovalSwitcherModifier _performBlockWhileSimulatingPostRemovalAppLayoutState:]


SBScheduledAlarmObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBScheduledAlarmObserver sharedInstance]

  // instance methods
  -[SBScheduledAlarmObserver init]
  -[SBScheduledAlarmObserver .cxx_destruct]
  -[SBScheduledAlarmObserver _updateAlarmStatusBarItem]
  -[SBScheduledAlarmObserver _nextAlarmChanged:]


SBWorkspaceEntity : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, SBActivationSettings, SBDeactivationSettings, BSDescriptionProviding, SBLayoutElementDescriptor>
 @property  BOOL isPreviousWorkspaceEntity
 @property  BOOL isEmptyWorkspaceEntity
 @property  BOOL isHomeScreenEntity
 @property  long long _mainDisplayPreferredInterfaceOrientation
 @property  long long layoutRole
 @property  SBActivationSettings *activationSettings
 @property  SBDeactivationSettings *deactivationSettings
 @property  BOOL supportsPresentationAtAnySize
 @property  BOOL wantsExclusiveForeground
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *uniqueIdentifier
 @property  unsigned long supportedLayoutRoles
 @property  unsigned long layoutAttributes
 @property  Class viewControllerClass
 @property  @? entityGenerator

  // class methods
  +[SBWorkspaceEntity entity]

  // instance methods
  -[SBWorkspaceEntity layoutAttributes]
  -[SBWorkspaceEntity copyWithZone:]
  -[SBWorkspaceEntity _setMainDisplayPreferredInterfaceOrientation:]
  -[SBWorkspaceEntity copyActivationSettings]
  -[SBWorkspaceEntity isApplicationSceneEntity]
  -[SBWorkspaceEntity isEmptyWorkspaceEntity]
  -[SBWorkspaceEntity boolForActivationSetting:]
  -[SBWorkspaceEntity _generator]
  -[SBWorkspaceEntity init]
  -[SBWorkspaceEntity objectForDeactivationSetting:]
  -[SBWorkspaceEntity deviceApplicationSceneEntity]
  -[SBWorkspaceEntity clearDeactivationSettings]
  -[SBWorkspaceEntity isHomeScreenEntity]
  -[SBWorkspaceEntity initWithIdentifier:displayChangeSettings:]
  -[SBWorkspaceEntity setFlag:forDeactivationSetting:]
  -[SBWorkspaceEntity entityGenerator]
  -[SBWorkspaceEntity setObject:forDeactivationSetting:]
  -[SBWorkspaceEntity isAppClipPlaceholderEntity]
  -[SBWorkspaceEntity setObject:forActivationSetting:]
  -[SBWorkspaceEntity objectForActivationSetting:]
  -[SBWorkspaceEntity supportsLayoutRole:]
  -[SBWorkspaceEntity copyDeactivationSettings]
  -[SBWorkspaceEntity .cxx_destruct]
  -[SBWorkspaceEntity applicationSceneEntity]
  -[SBWorkspaceEntity flagForActivationSetting:]
  -[SBWorkspaceEntity isDeviceApplicationSceneEntity]
  -[SBWorkspaceEntity isAnalogousToEntity:]
  -[SBWorkspaceEntity flagForDeactivationSetting:]
  -[SBWorkspaceEntity applyActivationSettings:]
  -[SBWorkspaceEntity setPreferredInterfaceOrientation:onDisplayWithIdentity:]
  -[SBWorkspaceEntity _supportsLayoutRole:]
  -[SBWorkspaceEntity wantsExclusiveForeground]
  -[SBWorkspaceEntity clearActivationSettings]
  -[SBWorkspaceEntity succinctDescriptionBuilder]
  -[SBWorkspaceEntity activationSettings]
  -[SBWorkspaceEntity isInlineAppExposeWorkspaceEntity]
  -[SBWorkspaceEntity boolForDeactivationSetting:]
  -[SBWorkspaceEntity uniqueIdentifier]
  -[SBWorkspaceEntity deactivationSettings]
  -[SBWorkspaceEntity setFlag:forActivationSetting:]
  -[SBWorkspaceEntity setLayoutRole:]
  -[SBWorkspaceEntity supportsPresentationAtAnySize]
  -[SBWorkspaceEntity preferredInterfaceOrientationOnDisplayWithIdentity:]
  -[SBWorkspaceEntity appClipPlaceholderEntity]
  -[SBWorkspaceEntity _mainDisplayPreferredInterfaceOrientation]
  -[SBWorkspaceEntity isPreviousWorkspaceEntity]
  -[SBWorkspaceEntity applyDeactivationSettings:]
  -[SBWorkspaceEntity inlineAppExposeWorkspaceEntity]
  -[SBWorkspaceEntity succinctDescription]
  -[SBWorkspaceEntity supportedLayoutRoles]
  -[SBWorkspaceEntity hasLayoutAttributes:]
  -[SBWorkspaceEntity viewControllerClass]
  -[SBWorkspaceEntity layoutRole]
  -[SBWorkspaceEntity descriptionWithMultilinePrefix:]
  -[SBWorkspaceEntity descriptionBuilderWithMultilinePrefix:]


SBPreviousWorkspaceEntity : SBWorkspaceEntity
 @property  long long previousLayoutRole

  // class methods
  +[SBPreviousWorkspaceEntity entityWithPreviousLayoutRole:]

  // instance methods
  -[SBPreviousWorkspaceEntity initWithIdentifier:displayChangeSettings:]
  -[SBPreviousWorkspaceEntity isPreviousWorkspaceEntity]
  -[SBPreviousWorkspaceEntity initWithPreviousLayoutRole:]
  -[SBPreviousWorkspaceEntity previousLayoutRole]


SBEmptyWorkspaceEntity : SBWorkspaceEntity
  // instance methods
  -[SBEmptyWorkspaceEntity isEmptyWorkspaceEntity]
  -[SBEmptyWorkspaceEntity isAnalogousToEntity:]


SBHomeScreenEntity : SBWorkspaceEntity
  // instance methods
  -[SBHomeScreenEntity _setMainDisplayPreferredInterfaceOrientation:]
  -[SBHomeScreenEntity init]
  -[SBHomeScreenEntity isHomeScreenEntity]
  -[SBHomeScreenEntity _mainDisplayPreferredInterfaceOrientation]
  -[SBHomeScreenEntity layoutRole]


SBPocketStateMonitor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CMPocketStateDelegate>
 @property  long long pocketState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPocketStateMonitor sharedInstance]

  // instance methods
  -[SBPocketStateMonitor pocketState]
  -[SBPocketStateMonitor init]
  -[SBPocketStateMonitor dealloc]
  -[SBPocketStateMonitor .cxx_destruct]
  -[SBPocketStateMonitor pocketStateManager:didUpdateState:]
  -[SBPocketStateMonitor removeObserver:]
  -[SBPocketStateMonitor addObserver:]
  -[SBPocketStateMonitor initWithCMPocketStateManager:calloutQueue:]


SBInlineFullScreenSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBInlineFullScreenSwitcherModifier homeScreenBackdropBlurType]
  -[SBInlineFullScreenSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBInlineFullScreenSwitcherModifier visibleAppLayouts]
  -[SBInlineFullScreenSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBInlineFullScreenSwitcherModifier homeScreenAlpha]
  -[SBInlineFullScreenSwitcherModifier scaleForIndex:]
  -[SBInlineFullScreenSwitcherModifier isHomeScreenContentRequired]
  -[SBInlineFullScreenSwitcherModifier topMostLayoutElements]
  -[SBInlineFullScreenSwitcherModifier wantsDockBehaviorAssertion]
  -[SBInlineFullScreenSwitcherModifier isSwitcherWindowVisible]
  -[SBInlineFullScreenSwitcherModifier isScrollEnabled]
  -[SBInlineFullScreenSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBInlineFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBInlineFullScreenSwitcherModifier wallpaperStyle]
  -[SBInlineFullScreenSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBInlineFullScreenSwitcherModifier cardCornerRadiiForIndex:]
  -[SBInlineFullScreenSwitcherModifier opacityForIndex:]
  -[SBInlineFullScreenSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBInlineFullScreenSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBInlineFullScreenSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBInlineFullScreenSwitcherModifier dockProgress]
  -[SBInlineFullScreenSwitcherModifier frameForIndex:]
  -[SBInlineFullScreenSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBInlineFullScreenSwitcherModifier homeScreenDimmingAlpha]
  -[SBInlineFullScreenSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBInlineFullScreenSwitcherModifier containerStatusBarAnimationDuration]
  -[SBInlineFullScreenSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBInlineFullScreenSwitcherModifier isIndexSelectable:]
  -[SBInlineFullScreenSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[SBInlineFullScreenSwitcherModifier wantsHomeScreenPointerInteractions]
  -[SBInlineFullScreenSwitcherModifier switcherDimmingAlpha]
  -[SBInlineFullScreenSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBInlineFullScreenSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBInlineFullScreenSwitcherModifier .cxx_destruct]
  -[SBInlineFullScreenSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBInlineFullScreenSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBInlineFullScreenSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBInlineFullScreenSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBInlineFullScreenSwitcherModifier titleOpacityForIndex:]
  -[SBInlineFullScreenSwitcherModifier dockUpdateMode]
  -[SBInlineFullScreenSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBInlineFullScreenSwitcherModifier shadowStyleForAppLayout:]
  -[SBInlineFullScreenSwitcherModifier homeScreenScale]
  -[SBInlineFullScreenSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBInlineFullScreenSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBInlineFullScreenSwitcherModifier appLayoutsToResignActive]
  -[SBInlineFullScreenSwitcherModifier shouldAllowContentViewTouchesForIndex:]
  -[SBInlineFullScreenSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBInlineFullScreenSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBInlineFullScreenSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[SBInlineFullScreenSwitcherModifier dockWindowLevel]
  -[SBInlineFullScreenSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBInlineFullScreenSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBInlineFullScreenSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBInlineFullScreenSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBInlineFullScreenSwitcherModifier wallpaperScale]
  -[SBInlineFullScreenSwitcherModifier initWithActiveAppLayout:]
  -[SBInlineFullScreenSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBInlineFullScreenSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBInlineFullScreenSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[SBInlineFullScreenSwitcherModifier isIndexKillable:]
  -[SBInlineFullScreenSwitcherModifier darkeningAlphaForIndex:]
  -[SBInlineFullScreenSwitcherModifier switcherDimmingViewBlocksTouches]
  -[SBInlineFullScreenSwitcherModifier plusButtonAlpha]
  -[SBInlineFullScreenSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBInlineFullScreenSwitcherModifier shadowOffsetForIndex:]
  -[SBInlineFullScreenSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBInlineFullScreenSwitcherModifier lighteningAlphaForIndex:]
  -[SBInlineFullScreenSwitcherModifier keyboardSuppressionMode]
  -[SBInlineFullScreenSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[SBInlineFullScreenSwitcherModifier transactionCompletionOptions]
  -[SBInlineFullScreenSwitcherModifier contentViewScale]
  -[SBInlineFullScreenSwitcherModifier plusButtonStyle]
  -[SBInlineFullScreenSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBInlineFullScreenSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBInlineFullScreenSwitcherModifier wantsSwitcherDimmingView]
  -[SBInlineFullScreenSwitcherModifier dockWindowLevelPriority]
  -[SBInlineFullScreenSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[SBInlineFullScreenSwitcherModifier isContainerStatusBarVisible]
  -[SBInlineFullScreenSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[SBInlineFullScreenSwitcherModifier shadowOpacityForIndex:]
  -[SBInlineFullScreenSwitcherModifier switcherBackdropBlurProgress]
  -[SBInlineFullScreenSwitcherModifier rotationAngleForIndex:]
  -[SBInlineFullScreenSwitcherModifier _isActiveAppLayoutAtIndex:]
  -[SBInlineFullScreenSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[SBInlineFullScreenSwitcherModifier switcherBackdropBlurType]
  -[SBInlineFullScreenSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]


SBStatusBarTapManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBStatusBarTapManager _isUILocked]
  -[SBStatusBarTapManager .cxx_destruct]
  -[SBStatusBarTapManager _workspace]
  -[SBStatusBarTapManager handleTapForStyleOverrides:]
  -[SBStatusBarTapManager canHandleTapForStatusBarStyleOverrides:]
  -[SBStatusBarTapManager _handlerForStyleOverrides:]
  -[SBStatusBarTapManager _addRecentlyTappedApplicationDestinations:forStyleOverrides:]
  -[SBStatusBarTapManager _performAfterAttemptingUnlockForAppWithBundleIdentifier:completion:]
  -[SBStatusBarTapManager _handlerForStyleOverrides:orOutApplications:]
  -[SBStatusBarTapManager _allApplicationDestinationsForApplications:]
  -[SBStatusBarTapManager _foregroundApplicationDestinationsForApplications:]
  -[SBStatusBarTapManager _appDestinationForNextSceneToVisitForApps:styleOverrides:]
  -[SBStatusBarTapManager _recentlyTappedApplicationDestinationsForStyleOverrides:]
  -[SBStatusBarTapManager _resetRecentlyTappedSceneIdentifiersForStyleOverrides:]
  -[SBStatusBarTapManager _scheduleResetRecentlyTappedSceneIdentifiersForStyleOverrides:]


_SBStatusBarTapHandler : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[_SBStatusBarTapHandler .cxx_destruct]


_SBStatusBarTapApplicationDestination : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  NSString *bundleIdentifier
 @property  NSString *sceneIdentifier

  // instance methods
  -[_SBStatusBarTapApplicationDestination copyWithZone:]
  -[_SBStatusBarTapApplicationDestination application]
  -[_SBStatusBarTapApplicationDestination .cxx_destruct]
  -[_SBStatusBarTapApplicationDestination sceneIdentifier]
  -[_SBStatusBarTapApplicationDestination isEqual:]
  -[_SBStatusBarTapApplicationDestination bundleIdentifier]
  -[_SBStatusBarTapApplicationDestination initWithApplication:sceneIdentifier:]


SBCalendarIconImageProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBDateTimeOverrideObserver>
 @property  <SBCalendarIconImageProviderDelegate> *delegate
 @property  SBFDateTimeController *dateTimeController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBCalendarIconImageProvider localeChanged]
  -[SBCalendarIconImageProvider controller:didChangeOverrideDateFromDate:]
  -[SBCalendarIconImageProvider init]
  -[SBCalendarIconImageProvider dealloc]
  -[SBCalendarIconImageProvider .cxx_destruct]
  -[SBCalendarIconImageProvider dateTimeController]
  -[SBCalendarIconImageProvider reloadIconImage]
  -[SBCalendarIconImageProvider iconImageWithInfo:]
  -[SBCalendarIconImageProvider unmaskedIconImageWithInfo:]
  -[SBCalendarIconImageProvider setDelegate:]
  -[SBCalendarIconImageProvider delegate]
  -[SBCalendarIconImageProvider initWithDateTimeController:]
  -[SBCalendarIconImageProvider _startListeningForSignificantTimeChanges]
  -[SBCalendarIconImageProvider _stopListeningForSignificantTimeChanges]
  -[SBCalendarIconImageProvider preparedISIcon]


SBApplicationLaunchNotifyAirplaneModeAlertItem : SBApplicationLaunchNotifyAlertItem
  // instance methods
  -[SBApplicationLaunchNotifyAirplaneModeAlertItem initWithApplication:]
  -[SBApplicationLaunchNotifyAirplaneModeAlertItem configure:requirePasscodeForActions:]


SBStateDumpService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemServiceServerStateDumpDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBStateDumpService init]
  -[SBStateDumpService .cxx_destruct]
  -[SBStateDumpService _authenticateClient:]
  -[SBStateDumpService systemServiceServer:client:requestStateDump:withCompletion:]
  -[SBStateDumpService systemServiceServer:client:enableRemoteStateDumpWithTimeout:completion:]
  -[SBStateDumpService systemServiceServer:client:disableRemoteStateDumpWithCompletion:]


SBHomeGestureSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL homeGestureEnabled
 @property  double hysteresis
 @property  BOOL recognizeAlongEdge
 @property  double minimumYDistanceForHomeOrAppSwitcher
 @property  double minimumYDistanceToConsiderAccelerationDip
 @property  double minimumXDistanceForFirstArcSwipe
 @property  double minimumXDistanceToTriggerArcByDistancePortrait
 @property  double minimumXDistanceToTriggerArcByDistanceLandscape
 @property  double maximumYDistanceToTriggerArcByDistance
 @property  double maximumYDistanceToTriggerArcByFlick
 @property  double velocityYThresholdForUnconditionalHome
 @property  double minimumYVelocityForHome
 @property  double velocityXThresholdForUnconditionalArcSwipe
 @property  double minimumYVelocityForArcSwipe
 @property  double normalizedDistanceYThresholdForUnconditionalHome
 @property  double normalizedDistanceYThresholdRangeForUnconditionalHome
 @property  double pauseVelocityThresholdForAppSwitcher
 @property  double pauseVelocityThresholdForDefiniteAppSwitcher
 @property  double maximumAdaptivePauseVelocityThresholdForAppSwitcher
 @property  BOOL snapToMaxVelocityThresholdAfterAccelerationDip
 @property  double maximumAdaptiveVelocityThresholdForDock
 @property  double appSwitcherVelocityThresholdIncreasingRateFraction
 @property  double dockVelocityThresholdIncreasingRateFraction
 @property  double adaptiveThresholdsDecreasingRateFraction
 @property  double velocitySlopeThresholdForBottomSwipeUpArc
 @property  double velocitySlopeThresholdForScrunchArc
 @property  double velocitySlopeThresholdForCurrentLayout
 @property  double edgeDistanceToCorrectGestureFinalDestination
 @property  double edgeAngleWindow
 @property  double cardFlyInMaximumVelocityThreshold
 @property  double cardFlyInDelayAfterEnteringAppSwitcher
 @property  double maximumDistanceYThresholdToPresentDock
 @property  double homeGestureCenterZoomDownCenterYOffsetFactor
 @property  double verticalRubberbandStart
 @property  double verticalRubberbandEnd
 @property  double verticalRubberbandDistance
 @property  double verticalRubberbandExponent
 @property  double horizontalRubberbandStart
 @property  double horizontalRubberbandEnd
 @property  double horizontalRubberbandDistance
 @property  double horizontalRubberbandExponent
 @property  BOOL injectGestureVelocityForZoomDown
 @property  BOOL onlyInjectVelocityForShortFlicks
 @property  double positionVelocityXPercentOfGestureVelocityX
 @property  double positionVelocityYPercentOfGestureVelocityY
 @property  double scaleVelocityPercentOfGestureVelocityYDividedByViewHeight
 @property  double maximumScaleVelocity
 @property  double morphSourceClipDuration
 @property  double morphTargetUnclipDuration
 @property  double morphSourceUnclipDuration
 @property  double morphTargetClipDuration
 @property  BOOL morphShouldShowBlackCurtainOverSource
 @property  BOOL morphShouldMatchMove
 @property  double secondsToAllowMultipleEdges
 @property  BOOL preventMultipleEdgesAfterAppInteraction
 @property  double secondsToResetSwitcherListAfterTransition
 @property  BOOL resetSwitcherListAfterAppInteraction
 @property  double travelDistanceForTranslatingScreenHeight
 @property  double minimumDistanceThresholdToScaleMultiplier
 @property  SBHomeGestureExclusionTrapezoidSettings *exclusionTrapezoidSettings

  // class methods
  +[SBHomeGestureSettings settingsControllerModule]

  // instance methods
  -[SBHomeGestureSettings setDefaultValues]
  -[SBHomeGestureSettings isHomeGestureEnabled]
  -[SBHomeGestureSettings setEdgeAngleWindow:]
  -[SBHomeGestureSettings setMorphShouldMatchMove:]
  -[SBHomeGestureSettings setMinimumYDistanceToConsiderAccelerationDip:]
  -[SBHomeGestureSettings setVelocitySlopeThresholdForCurrentLayout:]
  -[SBHomeGestureSettings setMinimumXDistanceToTriggerArcByDistanceLandscape:]
  -[SBHomeGestureSettings adaptiveThresholdsDecreasingRateFraction]
  -[SBHomeGestureSettings recognizeAlongEdge]
  -[SBHomeGestureSettings setMaximumAdaptiveVelocityThresholdForDock:]
  -[SBHomeGestureSettings setHomeGestureCenterZoomDownCenterYOffsetFactor:]
  -[SBHomeGestureSettings setMinimumYVelocityForHome:]
  -[SBHomeGestureSettings resetSwitcherListAfterAppInteraction]
  -[SBHomeGestureSettings setMaximumAdaptivePauseVelocityThresholdForAppSwitcher:]
  -[SBHomeGestureSettings setPositionVelocityXPercentOfGestureVelocityX:]
  -[SBHomeGestureSettings setDockVelocityThresholdIncreasingRateFraction:]
  -[SBHomeGestureSettings velocityXThresholdForUnconditionalArcSwipe]
  -[SBHomeGestureSettings edgeDistanceToCorrectGestureFinalDestination]
  -[SBHomeGestureSettings morphTargetClipDuration]
  -[SBHomeGestureSettings setVerticalRubberbandDistance:]
  -[SBHomeGestureSettings maximumAdaptivePauseVelocityThresholdForAppSwitcher]
  -[SBHomeGestureSettings setExclusionTrapezoidSettings:]
  -[SBHomeGestureSettings injectGestureVelocityForZoomDown]
  -[SBHomeGestureSettings velocitySlopeThresholdForCurrentLayout]
  -[SBHomeGestureSettings setVelocitySlopeThresholdForBottomSwipeUpArc:]
  -[SBHomeGestureSettings exclusionTrapezoidSettings]
  -[SBHomeGestureSettings morphSourceClipDuration]
  -[SBHomeGestureSettings verticalRubberbandStart]
  -[SBHomeGestureSettings setVelocitySlopeThresholdForScrunchArc:]
  -[SBHomeGestureSettings minimumYVelocityForHome]
  -[SBHomeGestureSettings minimumYDistanceForHomeOrAppSwitcher]
  -[SBHomeGestureSettings travelDistanceForTranslatingScreenHeight]
  -[SBHomeGestureSettings dockVelocityThresholdIncreasingRateFraction]
  -[SBHomeGestureSettings setMaximumYDistanceToTriggerArcByDistance:]
  -[SBHomeGestureSettings setHorizontalRubberbandStart:]
  -[SBHomeGestureSettings .cxx_destruct]
  -[SBHomeGestureSettings setMorphTargetClipDuration:]
  -[SBHomeGestureSettings maximumYDistanceToTriggerArcByDistance]
  -[SBHomeGestureSettings verticalRubberbandEnd]
  -[SBHomeGestureSettings appSwitcherVelocityThresholdIncreasingRateFraction]
  -[SBHomeGestureSettings positionVelocityXPercentOfGestureVelocityX]
  -[SBHomeGestureSettings setHorizontalRubberbandDistance:]
  -[SBHomeGestureSettings setNormalizedDistanceYThresholdForUnconditionalHome:]
  -[SBHomeGestureSettings setResetSwitcherListAfterAppInteraction:]
  -[SBHomeGestureSettings setMorphSourceClipDuration:]
  -[SBHomeGestureSettings setVelocityXThresholdForUnconditionalArcSwipe:]
  -[SBHomeGestureSettings minimumYVelocityForArcSwipe]
  -[SBHomeGestureSettings setMorphTargetUnclipDuration:]
  -[SBHomeGestureSettings setScaleVelocityPercentOfGestureVelocityYDividedByViewHeight:]
  -[SBHomeGestureSettings setMinimumYDistanceForHomeOrAppSwitcher:]
  -[SBHomeGestureSettings setHysteresis:]
  -[SBHomeGestureSettings horizontalRubberbandDistance]
  -[SBHomeGestureSettings minimumXDistanceToTriggerArcByDistancePortrait]
  -[SBHomeGestureSettings minimumXDistanceToTriggerArcByDistanceLandscape]
  -[SBHomeGestureSettings setMorphShouldShowBlackCurtainOverSource:]
  -[SBHomeGestureSettings setPreventMultipleEdgesAfterAppInteraction:]
  -[SBHomeGestureSettings setPauseVelocityThresholdForDefiniteAppSwitcher:]
  -[SBHomeGestureSettings morphShouldShowBlackCurtainOverSource]
  -[SBHomeGestureSettings setCardFlyInDelayAfterEnteringAppSwitcher:]
  -[SBHomeGestureSettings horizontalRubberbandEnd]
  -[SBHomeGestureSettings setAdaptiveThresholdsDecreasingRateFraction:]
  -[SBHomeGestureSettings setMaximumDistanceYThresholdToPresentDock:]
  -[SBHomeGestureSettings setMorphSourceUnclipDuration:]
  -[SBHomeGestureSettings setVelocityYThresholdForUnconditionalHome:]
  -[SBHomeGestureSettings velocitySlopeThresholdForBottomSwipeUpArc]
  -[SBHomeGestureSettings morphSourceUnclipDuration]
  -[SBHomeGestureSettings setSnapToMaxVelocityThresholdAfterAccelerationDip:]
  -[SBHomeGestureSettings setMinimumDistanceThresholdToScaleMultiplier:]
  -[SBHomeGestureSettings maximumYDistanceToTriggerArcByFlick]
  -[SBHomeGestureSettings setNormalizedDistanceYThresholdRangeForUnconditionalHome:]
  -[SBHomeGestureSettings snapToMaxVelocityThresholdAfterAccelerationDip]
  -[SBHomeGestureSettings homeGestureCenterZoomDownCenterYOffsetFactor]
  -[SBHomeGestureSettings setVerticalRubberbandEnd:]
  -[SBHomeGestureSettings setLatchDefaults]
  -[SBHomeGestureSettings positionVelocityYPercentOfGestureVelocityY]
  -[SBHomeGestureSettings edgeAngleWindow]
  -[SBHomeGestureSettings setHorizontalRubberbandEnd:]
  -[SBHomeGestureSettings maximumAdaptiveVelocityThresholdForDock]
  -[SBHomeGestureSettings setOnlyInjectVelocityForShortFlicks:]
  -[SBHomeGestureSettings setVerticalRubberbandExponent:]
  -[SBHomeGestureSettings velocitySlopeThresholdForScrunchArc]
  -[SBHomeGestureSettings maximumScaleVelocity]
  -[SBHomeGestureSettings minimumYDistanceToConsiderAccelerationDip]
  -[SBHomeGestureSettings setEdgeDistanceToCorrectGestureFinalDestination:]
  -[SBHomeGestureSettings verticalRubberbandExponent]
  -[SBHomeGestureSettings hysteresis]
  -[SBHomeGestureSettings verticalRubberbandDistance]
  -[SBHomeGestureSettings setSecondsToResetSwitcherListAfterTransition:]
  -[SBHomeGestureSettings setMaximumYDistanceToTriggerArcByFlick:]
  -[SBHomeGestureSettings horizontalRubberbandStart]
  -[SBHomeGestureSettings setRecognizeAlongEdge:]
  -[SBHomeGestureSettings setHorizontalRubberbandExponent:]
  -[SBHomeGestureSettings pauseVelocityThresholdForDefiniteAppSwitcher]
  -[SBHomeGestureSettings setTravelDistanceForTranslatingScreenHeight:]
  -[SBHomeGestureSettings setAppSwitcherVelocityThresholdIncreasingRateFraction:]
  -[SBHomeGestureSettings minimumDistanceThresholdToScaleMultiplier]
  -[SBHomeGestureSettings normalizedDistanceYThresholdRangeForUnconditionalHome]
  -[SBHomeGestureSettings setMinimumXDistanceToTriggerArcByDistancePortrait:]
  -[SBHomeGestureSettings morphTargetUnclipDuration]
  -[SBHomeGestureSettings secondsToResetSwitcherListAfterTransition]
  -[SBHomeGestureSettings normalizedDistanceYThresholdForUnconditionalHome]
  -[SBHomeGestureSettings horizontalRubberbandExponent]
  -[SBHomeGestureSettings cardFlyInDelayAfterEnteringAppSwitcher]
  -[SBHomeGestureSettings scaleVelocityPercentOfGestureVelocityYDividedByViewHeight]
  -[SBHomeGestureSettings onlyInjectVelocityForShortFlicks]
  -[SBHomeGestureSettings setMinimumXDistanceForFirstArcSwipe:]
  -[SBHomeGestureSettings setMinimumYVelocityForArcSwipe:]
  -[SBHomeGestureSettings setHomeGestureEnabled:]
  -[SBHomeGestureSettings pauseVelocityThresholdForAppSwitcher]
  -[SBHomeGestureSettings minimumXDistanceForFirstArcSwipe]
  -[SBHomeGestureSettings setVerticalRubberbandStart:]
  -[SBHomeGestureSettings setCardFlyInMaximumVelocityThreshold:]
  -[SBHomeGestureSettings setPauseVelocityThresholdForAppSwitcher:]
  -[SBHomeGestureSettings velocityYThresholdForUnconditionalHome]
  -[SBHomeGestureSettings maximumDistanceYThresholdToPresentDock]
  -[SBHomeGestureSettings morphShouldMatchMove]
  -[SBHomeGestureSettings secondsToAllowMultipleEdges]
  -[SBHomeGestureSettings setSecondsToAllowMultipleEdges:]
  -[SBHomeGestureSettings setMaximumScaleVelocity:]
  -[SBHomeGestureSettings preventMultipleEdgesAfterAppInteraction]
  -[SBHomeGestureSettings cardFlyInMaximumVelocityThreshold]
  -[SBHomeGestureSettings setHomeGestureTuningDefaults]
  -[SBHomeGestureSettings setInjectGestureVelocityForZoomDown:]
  -[SBHomeGestureSettings setPositionVelocityYPercentOfGestureVelocityY:]


SBAppStatusBarAssertionManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, UIStatusBarManager>
 @property  {UIEdgeInsets=dddd} statusBarEdgeInsets
 @property  unsigned long topmostActiveLayoutLayer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBAppStatusBarAssertionManager sharedInstance]

  // instance methods
  -[SBAppStatusBarAssertionManager setDefaultWindowLevel:]
  -[SBAppStatusBarAssertionManager currentStatusBarSettings]
  -[SBAppStatusBarAssertionManager _updateWindowLevel]
  -[SBAppStatusBarAssertionManager removeActiveLayoutLayer:]
  -[SBAppStatusBarAssertionManager _modifiedStatusBarSettingsAssertion:withAnimationParameters:]
  -[SBAppStatusBarAssertionManager currentEffectiveStatusBarStyleRequest]
  -[SBAppStatusBarAssertionManager setStatusBarUserInteractionEnabled:]
  -[SBAppStatusBarAssertionManager _statusBarUpdatedFromSettings:toSettings:withAnimations:]
  -[SBAppStatusBarAssertionManager init]
  -[SBAppStatusBarAssertionManager _addDisableAppStatusBarUserInteractionChangesAssertion:]
  -[SBAppStatusBarAssertionManager setWindowLevel:forOverrideReason:]
  -[SBAppStatusBarAssertionManager dealloc]
  -[SBAppStatusBarAssertionManager statusBar:shouldSetAlpha:]
  -[SBAppStatusBarAssertionManager effectiveStatusBarStyleRequestForLevel:]
  -[SBAppStatusBarAssertionManager _enumerateAssertionsToLevel:withBlock:]
  -[SBAppStatusBarAssertionManager .cxx_destruct]
  -[SBAppStatusBarAssertionManager _modifiedStatusBarSettingsAssertion:]
  -[SBAppStatusBarAssertionManager _descriptionForPropertyWithAssertions:]
  -[SBAppStatusBarAssertionManager _cleanUpAllStatusBarSettingsAssertions]
  -[SBAppStatusBarAssertionManager isStatusBarUserInteractionEnabled]
  -[SBAppStatusBarAssertionManager _styleRequestForSettings:]
  -[SBAppStatusBarAssertionManager succinctDescriptionBuilder]
  -[SBAppStatusBarAssertionManager _addDisableAppStatusBarAlphaChangesAssertion:]
  -[SBAppStatusBarAssertionManager statusBarSettingsForLevel:]
  -[SBAppStatusBarAssertionManager statusBarEdgeInsets]
  -[SBAppStatusBarAssertionManager _removeStatusBarSettingsAssertion:withAnimationParameters:]
  -[SBAppStatusBarAssertionManager isStatusBarHidden]
  -[SBAppStatusBarAssertionManager effectiveStatusBarStyleRequestWithSettings:]
  -[SBAppStatusBarAssertionManager addActiveLayoutLayer:]
  -[SBAppStatusBarAssertionManager succinctDescription]
  -[SBAppStatusBarAssertionManager statusBarOrientationShouldFollowWindow:]
  -[SBAppStatusBarAssertionManager topmostActiveLayoutLayer]
  -[SBAppStatusBarAssertionManager _setStatusBarValueForPropertyWithAssertions:setter:]
  -[SBAppStatusBarAssertionManager statusBar:shouldRequestStyleAttributes:animationParameters:forced:]
  -[SBAppStatusBarAssertionManager setOrientationWindow:forStatusBarLayoutLayer:]
  -[SBAppStatusBarAssertionManager removeWindowLevelOverrideReason:]
  -[SBAppStatusBarAssertionManager _removeDisableAppStatusBarUserInteractionChangesAssertion:]
  -[SBAppStatusBarAssertionManager removeObserver:]
  -[SBAppStatusBarAssertionManager _evaluateSettingsWithStyleAnimations:]
  -[SBAppStatusBarAssertionManager orientationWindowForLayoutLayer:]
  -[SBAppStatusBarAssertionManager setStatusBarEdgeInsets:forLayoutLayer:]
  -[SBAppStatusBarAssertionManager statusBar:shouldRequestStyle:animationParameters:forced:]
  -[SBAppStatusBarAssertionManager _addStatusBarSettingsAssertion:withAnimationParameters:]
  -[SBAppStatusBarAssertionManager _removeStatusBarSettingsAssertion:]
  -[SBAppStatusBarAssertionManager _removeDisableAppStatusBarAlphaChangesAssertion:]
  -[SBAppStatusBarAssertionManager _addStatusBarSettingsAssertion:]
  -[SBAppStatusBarAssertionManager addObserver:]
  -[SBAppStatusBarAssertionManager _updateStatusBarOrientationForTopMostActiveLayer]
  -[SBAppStatusBarAssertionManager statusBar:effectiveStyleOverridesForRequestedStyle:overrides:]
  -[SBAppStatusBarAssertionManager _applyEdgeInsetsToStatusBar]
  -[SBAppStatusBarAssertionManager _resolveEffectiveStatusBarStyleForSettings:]
  -[SBAppStatusBarAssertionManager descriptionWithMultilinePrefix:]
  -[SBAppStatusBarAssertionManager descriptionBuilderWithMultilinePrefix:]


SBAWDQueryableMetric : SBAWDMetric
  // instance methods
  -[SBAWDQueryableMetric .cxx_destruct]
  -[SBAWDQueryableMetric _postQueryableMetric]
  -[SBAWDQueryableMetric registerWithDataBuilder:]


SBInlineRotationSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBInlineRotationSwitcherModifier animationAttributesForLayoutElement:]
  -[SBInlineRotationSwitcherModifier shouldPerformRotationAnimationForOrientationChange]


SBApplicationSceneViewController : SBSceneViewController <SBApplicationSceneViewControlling>
 @property  SBApplicationSceneView *sceneView
 @property  BOOL _applicationStatusBarHidden
 @property  SBAppStatusBarSettings *overrideStatusBarSettings
 @property  SBApplicationSceneHandle *sceneHandle
 @property  double statusBarAlpha
 @property  long long overrideStatusBarStyle
 @property  <SBApplicationSceneViewControllingStatusBarDelegate> *applicationSceneStatusBarDelegate
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationSceneViewController applicationSceneStatusBarDelegate]
  -[SBApplicationSceneViewController _overrideStatusBarSettings]
  -[SBApplicationSceneViewController _applicationStatusBarAlpha]
  -[SBApplicationSceneViewController _setOverrideStatusBarSettings:]
  -[SBApplicationSceneViewController overrideStatusBarStyle]
  -[SBApplicationSceneViewController initWithSceneHandle:]
  -[SBApplicationSceneViewController setApplicationSceneStatusBarDelegate:]
  -[SBApplicationSceneViewController statusBarAlpha]
  -[SBApplicationSceneViewController .cxx_destruct]
  -[SBApplicationSceneViewController _isApplicationStatusBarHidden]


SBAssistantRootViewController : SBFTouchPassThroughViewController /usr/lib/libutil.dylib <SBFluidGestureDismissable>
 @property  SBFluidDismissalState *fluidDismissalState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView *clippingView
 @property  UIView *contentView
 @property  SiriPresentationSpringBoardMainScreenViewController *assistantController
 @property  BOOL ownsHomeGesture
 @property  BOOL showsHomeAffordance

  // instance methods
  -[SBAssistantRootViewController assistantController]
  -[SBAssistantRootViewController childViewControllerForHomeIndicatorAutoHidden]
  -[SBAssistantRootViewController setAssistantController:]
  -[SBAssistantRootViewController setFluidDismissalState:]
  -[SBAssistantRootViewController willRotateToInterfaceOrientation:duration:]
  -[SBAssistantRootViewController _edgeInsetsForChildViewController:insetsAreAbsolute:]
  -[SBAssistantRootViewController wantsFullScreenLayout]
  -[SBAssistantRootViewController shouldAutomaticallyForwardRotationMethods]
  -[SBAssistantRootViewController shouldAutomaticallyForwardAppearanceMethods]
  -[SBAssistantRootViewController contentView]
  -[SBAssistantRootViewController shouldAutorotate]
  -[SBAssistantRootViewController .cxx_destruct]
  -[SBAssistantRootViewController setNeedsUpdateOfHomeIndicatorAutoHidden]
  -[SBAssistantRootViewController _updateHomeAffordance]
  -[SBAssistantRootViewController setNeedsUpdateOfScreenEdgesDeferringSystemGestures]
  -[SBAssistantRootViewController clippingView]
  -[SBAssistantRootViewController viewWillLayoutSubviews]
  -[SBAssistantRootViewController supportedInterfaceOrientations]
  -[SBAssistantRootViewController fluidDismissalState]
  -[SBAssistantRootViewController ownsHomeGesture]
  -[SBAssistantRootViewController childViewControllerForScreenEdgesDeferringSystemGestures]
  -[SBAssistantRootViewController hasContentAtPoint:completion:]
  -[SBAssistantRootViewController _canShowWhileLocked]
  -[SBAssistantRootViewController _keyboardWillShowNotification:]
  -[SBAssistantRootViewController loadView]
  -[SBAssistantRootViewController initWithScreen:]
  -[SBAssistantRootViewController _keyboardWillHideNotification:]
  -[SBAssistantRootViewController setHomeGrabberPointerClickDelegate:]
  -[SBAssistantRootViewController setOwnsHomeGesture:]
  -[SBAssistantRootViewController setShowsHomeAffordance:]
  -[SBAssistantRootViewController _updateKeyboardForHomeGesture]
  -[SBAssistantRootViewController showsHomeAffordance]


SBWebClipService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSServiceConnectionListenerDelegate, SBSWebClipServiceClientToServerInterface>
 @property  double pendingLaunchTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWebClipService bestWebClipForTargetContentIdentifier:fromWebClips:]

  // instance methods
  -[SBWebClipService _applicationsDidChange:]
  -[SBWebClipService updateWebClipPropertiesWithIdentifier:]
  -[SBWebClipService launchWebClipWithIdentifier:origin:]
  -[SBWebClipService .cxx_destruct]
  -[SBWebClipService listener:didReceiveConnection:withContext:]
  -[SBWebClipService _queue_removeConnection:]
  -[SBWebClipService _queue_addConnection:]
  -[SBWebClipService initWithWorkspace:sceneManager:placeholderController:applicationController:lockScreenManager:]
  -[SBWebClipService prepareToLaunchWebClipWithIdentifier:handler:]
  -[SBWebClipService _placeholdersDidChange:]
  -[SBWebClipService buildLaunchActionsForAppClipWithWebClipIdentifier:completion:]
  -[SBWebClipService _clearPendingLaunch]
  -[SBWebClipService _beginWaitingForBundleIdentifier:webClipIdentifier:launchOrigin:]
  -[SBWebClipService _generateUserActivityDataFromUserActivity:completion:]
  -[SBWebClipService initForTestingWithPlaceholderController:applicationController:]
  -[SBWebClipService pendingLaunchTimeout]
  -[SBWebClipService setPendingLaunchTimeout:]


SBWindowDragInteraction : UIDragInteraction /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIGestureRecognizer *gestureRecognizer
 @property  <SBAppPlatterDragSourceViewProviding> *sourceViewProvider
 @property  NSString *sceneIdentifier
 @property  NSString *bundleIdentifier

  // instance methods
  -[SBWindowDragInteraction gestureRecognizer]
  -[SBWindowDragInteraction setSourceViewProvider:]
  -[SBWindowDragInteraction .cxx_destruct]
  -[SBWindowDragInteraction initWithDelegate:gestureRecognizer:]
  -[SBWindowDragInteraction setBundleIdentifier:]
  -[SBWindowDragInteraction _locationInView:]
  -[SBWindowDragInteraction sceneIdentifier]
  -[SBWindowDragInteraction setSceneIdentifier:]
  -[SBWindowDragInteraction bundleIdentifier]
  -[SBWindowDragInteraction sourceViewProvider]


SBRemoveWidgetAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  <SBLeafIconDataSource> *widget
 @property  SBWidgetIcon *icon
 @property  NSString *iconLocation
 @property  SBHIconManager *iconManager

  // instance methods
  -[SBRemoveWidgetAlertItem iconManager]
  -[SBRemoveWidgetAlertItem widget]
  -[SBRemoveWidgetAlertItem forcesModalAlertAppearance]
  -[SBRemoveWidgetAlertItem dismissOnLock]
  -[SBRemoveWidgetAlertItem setWidget:]
  -[SBRemoveWidgetAlertItem .cxx_destruct]
  -[SBRemoveWidgetAlertItem icon]
  -[SBRemoveWidgetAlertItem setIcon:]
  -[SBRemoveWidgetAlertItem setIconManager:]
  -[SBRemoveWidgetAlertItem iconLocation]
  -[SBRemoveWidgetAlertItem shouldShowInLockScreen]
  -[SBRemoveWidgetAlertItem setIconLocation:]
  -[SBRemoveWidgetAlertItem configure:requirePasscodeForActions:]
  -[SBRemoveWidgetAlertItem didActivate]
  -[SBRemoveWidgetAlertItem initWithWidgetIcon:location:iconManager:]
  -[SBRemoveWidgetAlertItem initWithWidget:inIcon:location:iconManager:]


SBRebootRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBRebootRecipe load]

  // instance methods
  -[SBRebootRecipe title]
  -[SBRebootRecipe handleVolumeIncrease]
  -[SBRebootRecipe handleVolumeDecrease]


SBSystemAnimationSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  float assistantAnimationDuration
 @property  float assistantDismissAnimationDurationOverApp
 @property  float assistantBottomEdgeDismissThreshold
 @property  float assistantBottomEdgeDismissVelocity
 @property  float spotlightNoninteractiveAnimationDuration
 @property  SBFAnimationSettings *slideoverDosidoAnimationSettings
 @property  SBEntityRemovalAnimationSettings *entityRemovalAnimationSettings
 @property  SBFWakeAnimationSettings *wakeAnimationSettings

  // class methods
  +[SBSystemAnimationSettings settingsControllerModule]

  // instance methods
  -[SBSystemAnimationSettings setDefaultValues]
  -[SBSystemAnimationSettings assistantBottomEdgeDismissThreshold]
  -[SBSystemAnimationSettings setSlideoverDosidoAnimationSettings:]
  -[SBSystemAnimationSettings assistantBottomEdgeDismissVelocity]
  -[SBSystemAnimationSettings .cxx_destruct]
  -[SBSystemAnimationSettings assistantDismissAnimationDurationOverApp]
  -[SBSystemAnimationSettings entityRemovalAnimationSettings]
  -[SBSystemAnimationSettings setAssistantAnimationDuration:]
  -[SBSystemAnimationSettings setAssistantDismissAnimationDurationOverApp:]
  -[SBSystemAnimationSettings assistantAnimationDuration]
  -[SBSystemAnimationSettings slideoverDosidoAnimationSettings]
  -[SBSystemAnimationSettings setAssistantBottomEdgeDismissThreshold:]
  -[SBSystemAnimationSettings setSpotlightNoninteractiveAnimationDuration:]
  -[SBSystemAnimationSettings setAssistantBottomEdgeDismissVelocity:]
  -[SBSystemAnimationSettings setEntityRemovalAnimationSettings:]
  -[SBSystemAnimationSettings wakeAnimationSettings]
  -[SBSystemAnimationSettings setWakeAnimationSettings:]
  -[SBSystemAnimationSettings spotlightNoninteractiveAnimationDuration]


SBDeviceApplicationRemoteTransientOverlayContainerViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController preferredStatusBarStyle]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController preferredInterfaceOrientationForPresentation]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController .cxx_destruct]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController viewWillLayoutSubviews]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController supportedInterfaceOrientations]
  -[SBDeviceApplicationRemoteTransientOverlayContainerViewController initWithViewProvider:]


SBDeviceApplicationRemoteTransientOverlayPresentationContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBRemoteTransientOverlayViewController *remoteViewController
 @property  SBSRemoteAlertPresentationTarget *presentationTarget

  // instance methods
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext presentationTarget]
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext setPresentationTarget:]
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext .cxx_destruct]
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext setRemoteViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayPresentationContext remoteViewController]


SBDeviceApplicationRemoteTransientOverlayViewProvider : SBDeviceApplicationSceneOverlayViewProvider <SBTransientOverlayViewControllerDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider initWithSceneHandle:delegate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider preferredStatusBarStyle]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerDidEndRotation:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsWhitePointAdaptivityStyleUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _deactivateIfPossible]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsSceneDeactivationUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider defaultShouldAutorotateForTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider defaultPreferredInterfaceOrientationForPresentationForTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider isKeyboardVisibleForSpringBoardForTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _activateIfPossible]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider preferredInterfaceOrientationForPresentation]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsProximityDetectionUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsContentOpaqueUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsOrientationUpdatesDisabledUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider dealloc]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _handleCoverSheetDidPresent:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider defaultSupportedInterfaceOrientationsForTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsGestureDismissalStyleUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsWindowHitTestingUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider .cxx_destruct]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _realOverlayViewController]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsFeaturePolicyUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerWillBeginRotation:toInterfaceOrientation:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider supportedInterfaceOrientations]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _handleAppSwitcherWillPresent:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider transientOverlayViewControllerNeedsStatusBarAppearanceUpdate:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider presentRemoteTransientOverlayViewController:presentationTarget:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider dismissRemoteTransientOverlayViewController:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider _dismissRemoteOverlayVC:]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider shouldFollowSceneOrientation]
  -[SBDeviceApplicationRemoteTransientOverlayViewProvider isPresentingTransientOverlay:]


SBPressSequenceMetric : SBAWDMetric
  // instance methods
  -[SBPressSequenceMetric dataClass]
  -[SBPressSequenceMetric metricID]
  -[SBPressSequenceMetric postWithDataBuilder:]
  -[SBPressSequenceMetric configureWithData:]


SBPressSequenceMetricData : SBAWDMetricData
 @property  NSString *pressName
 @property  NSArray *pressSequence
 @property  BOOL didTriggerSOS
 @property  unsigned long clickMax
 @property  NSUUID *sosTriggerUUID

  // instance methods
  -[SBPressSequenceMetricData .cxx_destruct]
  -[SBPressSequenceMetricData clickMax]
  -[SBPressSequenceMetricData setDidTriggerSOS:]
  -[SBPressSequenceMetricData pressSequence]
  -[SBPressSequenceMetricData pressName]
  -[SBPressSequenceMetricData didTriggerSOS]
  -[SBPressSequenceMetricData setClickMax:]
  -[SBPressSequenceMetricData sosTriggerUUID]
  -[SBPressSequenceMetricData setPressName:]
  -[SBPressSequenceMetricData setPressSequence:]
  -[SBPressSequenceMetricData setSosTriggerUUID:]


SBRestartManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  <SBRestartManagerDelegate> *delegate
 @property  BSTransaction<SBStartupTransition> *startupTransition
 @property  SBRestartTransitionRequest *pendingRestartTransitionRequest
 @property  BOOL pendingExit

  // instance methods
  -[SBRestartManager startupTransition]
  -[SBRestartManager init]
  -[SBRestartManager rebootForReason:]
  -[SBRestartManager initializeAndRunStartupTransition:]
  -[SBRestartManager _addPendingExternallyControlledRestartReason:]
  -[SBRestartManager _doRestartForTransition:]
  -[SBRestartManager _postShutdownNotification]
  -[SBRestartManager .cxx_destruct]
  -[SBRestartManager isPendingExit]
  -[SBRestartManager succinctDescriptionBuilder]
  -[SBRestartManager _persistStartupTransitionContextFromRebootContext:]
  -[SBRestartManager ___waitForeverForRunningBoardKill]
  -[SBRestartManager _exitIsImminent]
  -[SBRestartManager initWithWorkspaceDataSource:initialRestartState:]
  -[SBRestartManager succinctDescription]
  -[SBRestartManager pendingRestartTransitionRequest]
  -[SBRestartManager shutdownForReason:]
  -[SBRestartManager _shutdownWithOptions:byUser:description:]
  -[SBRestartManager restartWithTransitionRequest:]
  -[SBRestartManager _reallyRestartWithTransitionRequest:]
  -[SBRestartManager _restartWithTransitionRequest:]
  -[SBRestartManager _persistStartupTransitionContextFromShutdownContext:]
  -[SBRestartManager setDelegate:]
  -[SBRestartManager _initWithWorkspaceDataSource:initialRestartState:startupController:systemService:]
  -[SBRestartManager shutdownWithContext:]
  -[SBRestartManager _killAllAppsForPendingExitWithReason:description:expiration:completion:]
  -[SBRestartManager _persistStartupTransitionContextFromRestartRequest:]
  -[SBRestartManager delegate]
  -[SBRestartManager descriptionWithMultilinePrefix:]
  -[SBRestartManager rebootWithContext:]
  -[SBRestartManager _removePendingExternallyControlledRestartReason:]
  -[SBRestartManager descriptionBuilderWithMultilinePrefix:]
  -[SBRestartManager _isPendingExitIncludingExternallyControlledReasons:]


SBHIDUILockAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable>
 @property  BOOL suspendProximitySensor
 @property  BOOL suspendMultitouch
 @property  BOOL pocketTouchesExpected
 @property  BOOL disableTapToWake
 @property  long long source
 @property  SBHIDInterface *HIDInterface
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHIDUILockAssertion setPocketTouchesExpected:]
  -[SBHIDUILockAssertion invalidateForSource:]
  -[SBHIDUILockAssertion setReason:]
  -[SBHIDUILockAssertion disableTapToWake]
  -[SBHIDUILockAssertion setSource:]
  -[SBHIDUILockAssertion source]
  -[SBHIDUILockAssertion HIDInterface]
  -[SBHIDUILockAssertion .cxx_destruct]
  -[SBHIDUILockAssertion succinctDescriptionBuilder]
  -[SBHIDUILockAssertion setSuspendMultitouch:]
  -[SBHIDUILockAssertion pocketTouchesExpected]
  -[SBHIDUILockAssertion succinctDescription]
  -[SBHIDUILockAssertion setHIDInterface:]
  -[SBHIDUILockAssertion suspendMultitouch]
  -[SBHIDUILockAssertion suspendProximitySensor]
  -[SBHIDUILockAssertion invalidate]
  -[SBHIDUILockAssertion reason]
  -[SBHIDUILockAssertion descriptionWithMultilinePrefix:]
  -[SBHIDUILockAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBHIDUILockAssertion setSuspendProximitySensor:]
  -[SBHIDUILockAssertion setDisableTapToWake:]


SBCenterAppIconZoomAnimator : SBCenterIconZoomAnimator /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices
 @property  SBReversibleLayerPropertyAnimator *appZoomAnimator
 @property  NSMutableArray *animationCompletions
 @property  SBHCenterAppZoomSettings *settings
 @property  double distantScale

  // instance methods
  -[SBCenterAppIconZoomAnimator _delayedForRotation]
  -[SBCenterAppIconZoomAnimator _numberOfSignificantAnimations]
  -[SBCenterAppIconZoomAnimator .cxx_destruct]
  -[SBCenterAppIconZoomAnimator cameraPosition]
  -[SBCenterAppIconZoomAnimator hintToFraction:]
  -[SBCenterAppIconZoomAnimator distantScale]
  -[SBCenterAppIconZoomAnimator _iconZoomDelay]
  -[SBCenterAppIconZoomAnimator _performAnimationToFraction:withCentralAnimationSettings:delay:alreadyAnimating:sharedCompletion:]
  -[SBCenterAppIconZoomAnimator appZoomAnimator]
  -[SBCenterAppIconZoomAnimator _prepareAnimation]
  -[SBCenterAppIconZoomAnimator animationCompletions]
  -[SBCenterAppIconZoomAnimator _appZPositionForZoomFraction:]
  -[SBCenterAppIconZoomAnimator setAnimationCompletions:]
  -[SBCenterAppIconZoomAnimator _cleanupAnimation]
  -[SBCenterAppIconZoomAnimator setDistantScale:]
  -[SBCenterAppIconZoomAnimator _appZoomDelay]
  -[SBCenterAppIconZoomAnimator _fadeAppForZoomFraction:]
  -[SBCenterAppIconZoomAnimator _translateAppForZoomFraction:]
  -[SBCenterAppIconZoomAnimator initWithFolderController:appView:]
  -[SBCenterAppIconZoomAnimator _zoomAppForZoomFraction:]
  -[SBCenterAppIconZoomAnimator setAppZoomAnimator:]
  -[SBCenterAppIconZoomAnimator _setAnimationFraction:]


SBSecureMainDisplaySceneManager : SBSceneManager <SBLayoutStateTransitionSceneEntityFrameProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBSecureMainDisplaySceneManager _applicationSceneHandleClass]

  // instance methods
  -[SBSecureMainDisplaySceneManager window]
  -[SBSecureMainDisplaySceneManager sceneEntityFrameForWorkspaceEntity:inLayoutState:]
  -[SBSecureMainDisplaySceneManager _sceneIdentifierForBundleIdentifier:]
  -[SBSecureMainDisplaySceneManager sceneLayoutViewController]
  -[SBSecureMainDisplaySceneManager sceneIdentityForApplication:uniqueIdentifier:]
  -[SBSecureMainDisplaySceneManager sceneIdentityForApplication:uniqueIdentifier:targetContentIdentifier:]
  -[SBSecureMainDisplaySceneManager _setupLayoutStateTransitionCoordinator:]
  -[SBSecureMainDisplaySceneManager _shouldTrackScenesForDeactivation]
  -[SBSecureMainDisplaySceneManager _shouldAutoHostScene:]
  -[SBSecureMainDisplaySceneManager _createRootWindowScenePresentationBinder]
  -[SBSecureMainDisplaySceneManager sceneIdentityForApplication:targetContentIdentifier:]
  -[SBSecureMainDisplaySceneManager newSceneIdentityForApplication:]
  -[SBSecureMainDisplaySceneManager sceneIdentityForApplication:]
  -[SBSecureMainDisplaySceneManager _noteDidChangeToVisibility:previouslyExisted:forScene:]


SBPressSequenceObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBPressCollectorDelegate, SBAWDMetricDelegate>
 @property  <SBPressSequenceObserverDelegate> *delegate
 @property  NSString *pressName
 @property  SBPressCollector *pressCollector
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPressSequenceObserver init]
  -[SBPressSequenceObserver dealloc]
  -[SBPressSequenceObserver .cxx_destruct]
  -[SBPressSequenceObserver setDelegate:]
  -[SBPressSequenceObserver delegate]
  -[SBPressSequenceObserver initWithPressName:]
  -[SBPressSequenceObserver pressCollector]
  -[SBPressSequenceObserver pressCollector:didCollectSequence:]
  -[SBPressSequenceObserver noteDidBeginSOSWithUUID:]
  -[SBPressSequenceObserver metricDidPost:data:]
  -[SBPressSequenceObserver pressName]
  -[SBPressSequenceObserver _notePowerDownImminent]
  -[SBPressSequenceObserver _setPressCollector:]


SBUIStartupToLoginWindowAnimationController : SBUIMainScreenAnimationController <SBLoginAppContainerViewControllerObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIStartupToLoginWindowAnimationController _setHidden:]
  -[SBUIStartupToLoginWindowAnimationController initWithTransitionContextProvider:overlay:]
  -[SBUIStartupToLoginWindowAnimationController .cxx_destruct]
  -[SBUIStartupToLoginWindowAnimationController _shouldDismissBanner]
  -[SBUIStartupToLoginWindowAnimationController animationSettings]
  -[SBUIStartupToLoginWindowAnimationController _cleanupAnimation]
  -[SBUIStartupToLoginWindowAnimationController _startAnimation]
  -[SBUIStartupToLoginWindowAnimationController initWithTransitionContextProvider:]
  -[SBUIStartupToLoginWindowAnimationController _getTransitionWindow]
  -[SBUIStartupToLoginWindowAnimationController loginAppDidFinishLaunching:]


SBDeckSwitcherForcePressGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction
  // instance methods
  -[SBDeckSwitcherForcePressGestureWorkspaceTransaction _gestureType]
  -[SBDeckSwitcherForcePressGestureWorkspaceTransaction _beginWithGesture:]


SBWaitForSceneLayoutTransitionTransaction : SBTransaction <SBLayoutStateTransitionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBWaitForSceneLayoutTransitionTransaction dealloc]
  -[SBWaitForSceneLayoutTransitionTransaction _begin]
  -[SBWaitForSceneLayoutTransitionTransaction layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBWaitForSceneLayoutTransitionTransaction .cxx_destruct]
  -[SBWaitForSceneLayoutTransitionTransaction initWithSceneLayoutTransitionCoordinator:]


SBPIPContentViewLayoutSettings : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  double defaultSize
 @property  double minimumSize
 @property  double maximumSize
 @property  double currentSize
 @property  double minimumSizePreference
 @property  double maximumSizePreference
 @property  double minimumSizeSpanBetweenPreferredSizes
 @property  double maximumSizeSpanForPreferredSizeTuning
 @property  unsigned long currentPosition
 @property  BOOL defaultToMinimumPreferredContentSize
 @property  BOOL sizeChanged

  // class methods
  +[SBPIPContentViewLayoutSettings setContentViewSize:]
  +[SBPIPContentViewLayoutSettings contentViewPadding]
  +[SBPIPContentViewLayoutSettings _maximumSize]
  +[SBPIPContentViewLayoutSettings _minimumSize]
  +[SBPIPContentViewLayoutSettings setContentViewPosition:]
  +[SBPIPContentViewLayoutSettings _defaultSize]
  +[SBPIPContentViewLayoutSettings _sharedInstance]
  +[SBPIPContentViewLayoutSettings minimumStashTabSize]
  +[SBPIPContentViewLayoutSettings defaultContentViewSizeForAspectRatio:]
  +[SBPIPContentViewLayoutSettings setMaximumSizeSpanForPreferredSizeTuning:]
  +[SBPIPContentViewLayoutSettings setMinimumSizeSpanBetweenPreferredSizes:]
  +[SBPIPContentViewLayoutSettings currentContentViewPosition]
  +[SBPIPContentViewLayoutSettings currentContentViewSizeForAspectRatio:]
  +[SBPIPContentViewLayoutSettings minimumPreferredContentViewSizeForAspectRatio:]
  +[SBPIPContentViewLayoutSettings maximumPreferredContentViewSizeForAspectRatio:]
  +[SBPIPContentViewLayoutSettings minimumPossibleContentViewSizeForAspectRatio:]
  +[SBPIPContentViewLayoutSettings maximumPossibleContentViewSizeForAspectRatio:]
  +[SBPIPContentViewLayoutSettings _contentViewSizeForAspectRatio:currentSize:]
  +[SBPIPContentViewLayoutSettings _minimumContentViewSizeForAspectRatio:minimumReferenceSize:]
  +[SBPIPContentViewLayoutSettings _maximumContentViewSizeForAspectRatio:maximumReferenceSize:]
  +[SBPIPContentViewLayoutSettings setShouldDefaultToMinimumPreferredContentSize:]

  // instance methods
  -[SBPIPContentViewLayoutSettings minimumSize]
  -[SBPIPContentViewLayoutSettings position]
  -[SBPIPContentViewLayoutSettings init]
  -[SBPIPContentViewLayoutSettings setPosition:]
  -[SBPIPContentViewLayoutSettings defaultSize]
  -[SBPIPContentViewLayoutSettings size]
  -[SBPIPContentViewLayoutSettings setCurrentPosition:]
  -[SBPIPContentViewLayoutSettings currentSize]
  -[SBPIPContentViewLayoutSettings currentPosition]
  -[SBPIPContentViewLayoutSettings setMinimumSize:]
  -[SBPIPContentViewLayoutSettings setMaximumSize:]
  -[SBPIPContentViewLayoutSettings setSize:]
  -[SBPIPContentViewLayoutSettings maximumSize]
  -[SBPIPContentViewLayoutSettings maximumSizeSpanForPreferredSizeTuning]
  -[SBPIPContentViewLayoutSettings setMaximumSizeSpanForPreferredSizeTuning:]
  -[SBPIPContentViewLayoutSettings minimumSizeSpanBetweenPreferredSizes]
  -[SBPIPContentViewLayoutSettings setMinimumSizeSpanBetweenPreferredSizes:]
  -[SBPIPContentViewLayoutSettings setDefaultToMinimumPreferredContentSize:]
  -[SBPIPContentViewLayoutSettings defaultToMinimumPreferredContentSize]
  -[SBPIPContentViewLayoutSettings minimumSizePreference]
  -[SBPIPContentViewLayoutSettings hasSizeChanged]
  -[SBPIPContentViewLayoutSettings maximumSizePreference]
  -[SBPIPContentViewLayoutSettings setDefaultSize:]
  -[SBPIPContentViewLayoutSettings setCurrentSize:]
  -[SBPIPContentViewLayoutSettings setMinimumSizePreference:]
  -[SBPIPContentViewLayoutSettings setMaximumSizePreference:]


SBGridSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBGridSwitcherModifier handleMainTransitionEvent:]
  -[SBGridSwitcherModifier .cxx_destruct]
  -[SBGridSwitcherModifier handleTapAppLayoutEvent:]
  -[SBGridSwitcherModifier didMoveToParentModifier:]
  -[SBGridSwitcherModifier numberOfRows]
  -[SBGridSwitcherModifier handleRemovalEvent:]
  -[SBGridSwitcherModifier handleTapOutsideToDismissEvent:]
  -[SBGridSwitcherModifier gridLayoutModifier]


_SBGridFloorSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[_SBGridFloorSwitcherModifier homeScreenBackdropBlurType]
  -[_SBGridFloorSwitcherModifier wantsDockWindowLevelAssertion]
  -[_SBGridFloorSwitcherModifier visibleAppLayouts]
  -[_SBGridFloorSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[_SBGridFloorSwitcherModifier homeScreenAlpha]
  -[_SBGridFloorSwitcherModifier scaleForIndex:]
  -[_SBGridFloorSwitcherModifier isHomeScreenContentRequired]
  -[_SBGridFloorSwitcherModifier topMostLayoutElements]
  -[_SBGridFloorSwitcherModifier wantsDockBehaviorAssertion]
  -[_SBGridFloorSwitcherModifier isSwitcherWindowVisible]
  -[_SBGridFloorSwitcherModifier isScrollEnabled]
  -[_SBGridFloorSwitcherModifier contentPageViewScaleForAppLayout:]
  -[_SBGridFloorSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[_SBGridFloorSwitcherModifier animationAttributesForLayoutElement:]
  -[_SBGridFloorSwitcherModifier wallpaperStyle]
  -[_SBGridFloorSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[_SBGridFloorSwitcherModifier cardCornerRadiiForIndex:]
  -[_SBGridFloorSwitcherModifier opacityForIndex:]
  -[_SBGridFloorSwitcherModifier appLayoutsToCacheSnapshots]
  -[_SBGridFloorSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[_SBGridFloorSwitcherModifier isWallpaperRequiredForSwitcher]
  -[_SBGridFloorSwitcherModifier dockProgress]
  -[_SBGridFloorSwitcherModifier frameForIndex:]
  -[_SBGridFloorSwitcherModifier contentOffsetForIndex:centered:]
  -[_SBGridFloorSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[_SBGridFloorSwitcherModifier homeScreenDimmingAlpha]
  -[_SBGridFloorSwitcherModifier minimumTranslationToKillIndex:]
  -[_SBGridFloorSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[_SBGridFloorSwitcherModifier containerStatusBarAnimationDuration]
  -[_SBGridFloorSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[_SBGridFloorSwitcherModifier isIndexSelectable:]
  -[_SBGridFloorSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[_SBGridFloorSwitcherModifier wantsHomeScreenPointerInteractions]
  -[_SBGridFloorSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[_SBGridFloorSwitcherModifier switcherDimmingAlpha]
  -[_SBGridFloorSwitcherModifier homeScreenBackdropBlurProgress]
  -[_SBGridFloorSwitcherModifier reopenClosedWindowsButtonScale]
  -[_SBGridFloorSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[_SBGridFloorSwitcherModifier titleAndIconOpacityForIndex:]
  -[_SBGridFloorSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[_SBGridFloorSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[_SBGridFloorSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[_SBGridFloorSwitcherModifier titleOpacityForIndex:]
  -[_SBGridFloorSwitcherModifier dockUpdateMode]
  -[_SBGridFloorSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[_SBGridFloorSwitcherModifier shadowStyleForAppLayout:]
  -[_SBGridFloorSwitcherModifier homeScreenScale]
  -[_SBGridFloorSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[_SBGridFloorSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[_SBGridFloorSwitcherModifier appLayoutsToResignActive]
  -[_SBGridFloorSwitcherModifier shouldAllowContentViewTouchesForIndex:]
  -[_SBGridFloorSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[_SBGridFloorSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[_SBGridFloorSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[_SBGridFloorSwitcherModifier dockWindowLevel]
  -[_SBGridFloorSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[_SBGridFloorSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[_SBGridFloorSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[_SBGridFloorSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[_SBGridFloorSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[_SBGridFloorSwitcherModifier wallpaperScale]
  -[_SBGridFloorSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[_SBGridFloorSwitcherModifier snapshotScaleForAppLayout:]
  -[_SBGridFloorSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[_SBGridFloorSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[_SBGridFloorSwitcherModifier resetAdjustedScrollingState]
  -[_SBGridFloorSwitcherModifier isIndexKillable:]
  -[_SBGridFloorSwitcherModifier darkeningAlphaForIndex:]
  -[_SBGridFloorSwitcherModifier switcherDimmingViewBlocksTouches]
  -[_SBGridFloorSwitcherModifier plusButtonAlpha]
  -[_SBGridFloorSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[_SBGridFloorSwitcherModifier shadowOffsetForIndex:]
  -[_SBGridFloorSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[_SBGridFloorSwitcherModifier lighteningAlphaForIndex:]
  -[_SBGridFloorSwitcherModifier keyboardSuppressionMode]
  -[_SBGridFloorSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[_SBGridFloorSwitcherModifier transactionCompletionOptions]
  -[_SBGridFloorSwitcherModifier contentViewScale]
  -[_SBGridFloorSwitcherModifier plusButtonStyle]
  -[_SBGridFloorSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[_SBGridFloorSwitcherModifier wantsSwitcherBackdropBlur]
  -[_SBGridFloorSwitcherModifier wantsSwitcherDimmingView]
  -[_SBGridFloorSwitcherModifier dockWindowLevelPriority]
  -[_SBGridFloorSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[_SBGridFloorSwitcherModifier scrollViewAttributes]
  -[_SBGridFloorSwitcherModifier isContainerStatusBarVisible]
  -[_SBGridFloorSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[_SBGridFloorSwitcherModifier shadowOpacityForIndex:]
  -[_SBGridFloorSwitcherModifier switcherBackdropBlurProgress]
  -[_SBGridFloorSwitcherModifier rotationAngleForIndex:]
  -[_SBGridFloorSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[_SBGridFloorSwitcherModifier switcherBackdropBlurType]
  -[_SBGridFloorSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]


SBMainDisplaySceneLayoutViewController : SBSceneLayoutViewController <SBMainDisplaySceneLayoutStatusBarViewDataSource, PTSettingsKeyObserver, SBSceneHandleObserver, TFBetaLaunchHandleActivationDelegate, SBDeviceApplicationSceneStatusBarBreadcrumbProviderObserver, SBSystemPointerInteractionDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <BSInvalidatable> *pushPopWallpaperRequireAssertion
 @property  SBHomeGrabberRotationView *homeGrabberRotationView
 @property  SBMainDisplayLayoutState *_transitioningFromLayoutState
 @property  SBMainDisplayLayoutState *_transitioningToLayoutState
 @property  NSArray *appViewControllers
 @property  NSArray *_transitioningAppViewControllers
 @property  UIView *_separatorView
 @property  BOOL _preventsCornerRadiusUpdate
 @property  double _separatorViewAlpha
 @property  double _separatorViewWidth
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} _separatorViewHitTestFrame
 @property  unsigned long _nubStyle
 @property  SBHomeGrabberView *_activeHomeGrabberView
 @property  NSString *keyboardFocusSceneID
 @property  SBMainDisplayLayoutState *layoutState
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBMainDisplaySceneLayoutViewController statusBarOrientation]
  -[SBMainDisplaySceneLayoutViewController viewDidLoad]
  -[SBMainDisplaySceneLayoutViewController statusBarDescribers]
  -[SBMainDisplaySceneLayoutViewController statusBarDescriberForStatusBarPart:]
  -[SBMainDisplaySceneLayoutViewController _overrideInterfaceOrientationMechanics]
  -[SBMainDisplaySceneLayoutViewController initWithSceneManager:]
  -[SBMainDisplaySceneLayoutViewController _statusBarAvoidanceFrameForLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _updateAuxiliaryViews]
  -[SBMainDisplaySceneLayoutViewController allowsConfiguringIndividualStatusBarParts]
  -[SBMainDisplaySceneLayoutViewController _layoutSpaceAnchorEdgeForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController _referenceFrameForLayoutRole:spaceConfiguration:interfaceOrientation:frameOptions:]
  -[SBMainDisplaySceneLayoutViewController _addSingleSceneForTransitionRequest:completion:]
  -[SBMainDisplaySceneLayoutViewController _convertPointFromContentViewCoordinateSpaceToReferenceCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController _separatorViewFrame]
  -[SBMainDisplaySceneLayoutViewController _shouldAdjustViewAffordancesAfterTransition]
  -[SBMainDisplaySceneLayoutViewController animationControllerForRotatingWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _keyboardWillShow:]
  -[SBMainDisplaySceneLayoutViewController statusBarDescriberAtPoint:inView:pointInSceneLayoutSpace:]
  -[SBMainDisplaySceneLayoutViewController _replaceSingleSceneForTransitionRequest:animationSettings:completion:]
  -[SBMainDisplaySceneLayoutViewController _fadeStatusBarStylesBetweenFromAndToViewControllersWithSettings:completion:]
  -[SBMainDisplaySceneLayoutViewController _nubStyle]
  -[SBMainDisplaySceneLayoutViewController pushPopWallpaperRequireAssertion]
  -[SBMainDisplaySceneLayoutViewController _shouldReverseLayoutDirection]
  -[SBMainDisplaySceneLayoutViewController _sceneHandleForBottomEdgeLocation:]
  -[SBMainDisplaySceneLayoutViewController _separatorView]
  -[SBMainDisplaySceneLayoutViewController statusBarAvoidanceFrame]
  -[SBMainDisplaySceneLayoutViewController _separatorViewReferenceFrameForSpaceConfiguration:interfaceOrientation:frameOptions:]
  -[SBMainDisplaySceneLayoutViewController _anchorEdgeForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController _setKeyboardFocusSceneID:]
  -[SBMainDisplaySceneLayoutViewController setUserResizing:]
  -[SBMainDisplaySceneLayoutViewController shouldBeginPointerInteractionAtLocation:forView:]
  -[SBMainDisplaySceneLayoutViewController _isCurrentlyRotating]
  -[SBMainDisplaySceneLayoutViewController _addLayoutElementViewController:forLayoutElement:entity:]
  -[SBMainDisplaySceneLayoutViewController _updateHomeGrabberEdgeProtectAndAutoHideWithResetDelay:unhideDelay:]
  -[SBMainDisplaySceneLayoutViewController statusBarPartsForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutViewController _orderFrontLayoutElementViewController:]
  -[SBMainDisplaySceneLayoutViewController _separatorViewWidth]
  -[SBMainDisplaySceneLayoutViewController _layoutSizeForLayoutRole:spaceConfiguration:interfaceOrientation:frameOptions:]
  -[SBMainDisplaySceneLayoutViewController _isLayoutElementViewControllerOccluded:]
  -[SBMainDisplaySceneLayoutViewController _configureHomeGrabberForSettingsChangeWithDiff:transitionContext:]
  -[SBMainDisplaySceneLayoutViewController referenceFrameForUniqueIdentifier:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _keyboardWillHide:]
  -[SBMainDisplaySceneLayoutViewController settings:changedValueForKey:]
  -[SBMainDisplaySceneLayoutViewController _sceneHandlesIntersectingHomeGrabber]
  -[SBMainDisplaySceneLayoutViewController setPushPopWallpaperRequireAssertion:]
  -[SBMainDisplaySceneLayoutViewController _isStatusBarHidden]
  -[SBMainDisplaySceneLayoutViewController _convertAnchorEdge:toLayoutOrientation:]
  -[SBMainDisplaySceneLayoutViewController _updateHomeGrabberEdgeProtectAndAutoHideForAppRequest]
  -[SBMainDisplaySceneLayoutViewController layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBMainDisplaySceneLayoutViewController _shouldTakeKeyboardHomeAffordanceAssertion]
  -[SBMainDisplaySceneLayoutViewController referenceFrameForEntity:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController layoutStateTransitionCoordinator:transitionWillEndWithTransitionContext:]
  -[SBMainDisplaySceneLayoutViewController _keyboardIsSuppressedForMedusaKeyboardScene]
  -[SBMainDisplaySceneLayoutViewController _convertTransformFromContentViewCoordinateSpaceToReferenceCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController normalizedHalfHalfLocation]
  -[SBMainDisplaySceneLayoutViewController _removeAppAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _sceneHandleForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController frameForSceneIdentifier:inView:]
  -[SBMainDisplaySceneLayoutViewController _createStatusBarWithFrame:interfaceOrientation:reason:]
  -[SBMainDisplaySceneLayoutViewController _layoutFrameForLayoutRole:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController dealloc]
  -[SBMainDisplaySceneLayoutViewController _pushedInTransform]
  -[SBMainDisplaySceneLayoutViewController _popOutForReason:animationFactory:]
  -[SBMainDisplaySceneLayoutViewController _setSeparatorViewAlpha:]
  -[SBMainDisplaySceneLayoutViewController _updateSuppressingHomeAffordanceBounce]
  -[SBMainDisplaySceneLayoutViewController layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBMainDisplaySceneLayoutViewController _convertTransformFromReferenceCoordinateSpaceToContentViewCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController .cxx_destruct]
  -[SBMainDisplaySceneLayoutViewController _fadeStatusBarStylesBetweenFromAndToViewControllersWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController styleForRegion:forView:]
  -[SBMainDisplaySceneLayoutViewController _resizeAppViewsWithAnimationSettings:completion:]
  -[SBMainDisplaySceneLayoutViewController normalizedNarrowWideLocation]
  -[SBMainDisplaySceneLayoutViewController normalizedDismissLeftLocation]
  -[SBMainDisplaySceneLayoutViewController _layoutSizeForLayoutRole:spaceConfiguration:layoutState:]
  -[SBMainDisplaySceneLayoutViewController _displayConfiguration]
  -[SBMainDisplaySceneLayoutViewController sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBMainDisplaySceneLayoutViewController _updateAuxiliaryViewsWhichWantToAnimateDuringRotation]
  -[SBMainDisplaySceneLayoutViewController _updateWallpaperStyleAndBackgroundColorWithAnimationFactory:]
  -[SBMainDisplaySceneLayoutViewController _shouldRotateToLayoutOrientation:]
  -[SBMainDisplaySceneLayoutViewController _resizeAppsAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _keyboardFocusSceneID]
  -[SBMainDisplaySceneLayoutViewController _orderFrontOverlayViews]
  -[SBMainDisplaySceneLayoutViewController _statusBarEdgeInsetsForLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _separatorViewAlpha]
  -[SBMainDisplaySceneLayoutViewController _bannerUnfurlAnimationControllerForTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController animationControllerForTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController normalizedWideNarrowLocation]
  -[SBMainDisplaySceneLayoutViewController _applicationSceneLayoutElementControllerForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController _beginRequiringPushedInWallpaperForReason:animationFactory:]
  -[SBMainDisplaySceneLayoutViewController _separatorViewHitTestFrame]
  -[SBMainDisplaySceneLayoutViewController _referenceFrameForLayoutElement:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _slideOverAndFadeElementOffscreenForTransitionRequest:completion:]
  -[SBMainDisplaySceneLayoutViewController _shouldRepositionViewAfterTransition]
  -[SBMainDisplaySceneLayoutViewController _transitioningAppViewControllers]
  -[SBMainDisplaySceneLayoutViewController _performJiggleHintAnimationForApplicationSceneHandle:completion:]
  -[SBMainDisplaySceneLayoutViewController _updateViewControllerNubViewHighlightState:forKeyboardFocusSceneID:]
  -[SBMainDisplaySceneLayoutViewController _layoutWidthForLayoutRole:inSpaceConfiguration:interfaceOrientation:]
  -[SBMainDisplaySceneLayoutViewController _rotateAppViewsWithAnimationSettings:completion:]
  -[SBMainDisplaySceneLayoutViewController _endRequiringPushedInWallpaperForReason:animationFactory:]
  -[SBMainDisplaySceneLayoutViewController _anchorEdgeForLayoutRole:inInterfaceOrientation:]
  -[SBMainDisplaySceneLayoutViewController homeGrabberRotationView]
  -[SBMainDisplaySceneLayoutViewController _createSlideOverAndFadeElementOffscreenWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController pointerInteractionHitTestInsetsForView:]
  -[SBMainDisplaySceneLayoutViewController _doCommonCleanupUponEndingLayoutTransitionWithInterruption:]
  -[SBMainDisplaySceneLayoutViewController _setMaskDisplayCorners:forReason:]
  -[SBMainDisplaySceneLayoutViewController _setNubStyle:]
  -[SBMainDisplaySceneLayoutViewController _updateKeyboardHomeAffordanceAssertion]
  -[SBMainDisplaySceneLayoutViewController _jiggleAppAnimationControllerForTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _setPreventsCornerRadiusUpdate:]
  -[SBMainDisplaySceneLayoutViewController _setUpObservationWithCurrentEntities:previousEntities:]
  -[SBMainDisplaySceneLayoutViewController _preventsCornerRadiusUpdate]
  -[SBMainDisplaySceneLayoutViewController _fadeOutInlineOverlayForTransitionRequest:completion:]
  -[SBMainDisplaySceneLayoutViewController _isTransitioningNoninteractivelyFromAppToApp]
  -[SBMainDisplaySceneLayoutViewController _leadingStatusBarStyleRequest]
  -[SBMainDisplaySceneLayoutViewController _removeAppForTransitionRequest:completion:]
  -[SBMainDisplaySceneLayoutViewController _isEdgeProtectedForHomeGestureAtEdgeLocation:]
  -[SBMainDisplaySceneLayoutViewController _replaceSingleAppAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _trailingStatusBarStyleRequest]
  -[SBMainDisplaySceneLayoutViewController _layoutElementForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutViewController _createFadeOutInlineOverlayWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _updateRectInReferenceCoordinateSpace:withBlock:]
  -[SBMainDisplaySceneLayoutViewController _createOrDestroyHomeGrabberRotationViewIfNecessary]
  -[SBMainDisplaySceneLayoutViewController _layoutFrameForSize:withRole:inInterfaceOrientation:frameOptions:]
  -[SBMainDisplaySceneLayoutViewController betaLaunchHandle:activateIfNeededEndedWithResult:]
  -[SBMainDisplaySceneLayoutViewController _convertRectFromContentViewCoordinateSpaceToReferenceCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController _shouldDrawHomeGrabber]
  -[SBMainDisplaySceneLayoutViewController _shouldConsiderHomeScreenAsActive]
  -[SBMainDisplaySceneLayoutViewController _configureHomeGrabberForLayoutStateTransition]
  -[SBMainDisplaySceneLayoutViewController _statusBarAvoidanceFrameForLayoutState:layoutRole:]
  -[SBMainDisplaySceneLayoutViewController _convertRectFromReferenceCoordinateSpaceToContentViewCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController _inlineAppExposeOverlayForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController _shouldNubViewBeVisibleForLayoutRole:inLayoutState:]
  -[SBMainDisplaySceneLayoutViewController _noteKeyboardIsForMedusaWithOwningScene:]
  -[SBMainDisplaySceneLayoutViewController _updatePointInReferenceCoordinateSpace:withBlock:]
  -[SBMainDisplaySceneLayoutViewController _layoutRoleForSceneWithIdentifier:]
  -[SBMainDisplaySceneLayoutViewController _orderFrontLayoutElementViewControllerForLayoutRole:]
  -[SBMainDisplaySceneLayoutViewController normalizedDismissRightLocation]
  -[SBMainDisplaySceneLayoutViewController _medusaKeyboardSceneHandle]
  -[SBMainDisplaySceneLayoutViewController _convertPointFromReferenceCoordinateSpaceToContentViewCoordinateSpace:]
  -[SBMainDisplaySceneLayoutViewController currentlyValidStatusBarPartIdentifiers]
  -[SBMainDisplaySceneLayoutViewController statusBarBreadcrumbProviderDidUpdateDisplayProperties:]
  -[SBMainDisplaySceneLayoutViewController _noteKeyboardIsNotForMedusa]
  -[SBMainDisplaySceneLayoutViewController _createSplitAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _beginLayoutStateTransitionWithTransitionContext:]
  -[SBMainDisplaySceneLayoutViewController appViewControllers]
  -[SBMainDisplaySceneLayoutViewController animationWrapperViewForLayoutState:roleMask:interfaceOrientation:maskDisplayCorners:]
  -[SBMainDisplaySceneLayoutViewController _activeHomeGrabberView]
  -[SBMainDisplaySceneLayoutViewController _animationWrapperViewForElement:entity:layoutState:]
  -[SBMainDisplaySceneLayoutViewController _rotateAppsAnimationControllerWithTransitionRequest:]
  -[SBMainDisplaySceneLayoutViewController _pushInForReason:animationFactory:]


SBSeparatorNubView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBSeparatorNubView traitCollection]


SBSeparatorView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBSeparatorNubView *nubView
 @property  unsigned long nubStyle
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} nubRect

  // instance methods
  -[SBSeparatorView initWithFrame:]
  -[SBSeparatorView .cxx_destruct]
  -[SBSeparatorView setBounds:]
  -[SBSeparatorView nubView]
  -[SBSeparatorView nubRect]
  -[SBSeparatorView setFrame:]
  -[SBSeparatorView layoutSubviews]
  -[SBSeparatorView nubStyle]
  -[SBSeparatorView setNubStyle:]
  -[SBSeparatorView _updateNubViewFrame]
  -[SBSeparatorView setNubView:]


SBBreadcrumbMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBreadcrumbMetric init]
  -[SBBreadcrumbMetric handleEvent:withContext:]
  -[SBBreadcrumbMetric .cxx_destruct]


SBPowerDownView : SBUIPowerDownView /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer
 @property  <SBPowerDownViewDelegate> *powerDownDelegate

  // instance methods
  -[SBPowerDownView _cancelButtonTapped]
  -[SBPowerDownView powerDownDelegate]
  -[SBPowerDownView setPowerDownDelegate:]
  -[SBPowerDownView _powerDownSliderDidBeginSlide]
  -[SBPowerDownView _powerDownSliderDidUpdateSlideWithValue:]
  -[SBPowerDownView _powerDownSliderDidCompleteSlide]
  -[SBPowerDownView _powerDownSliderDidCancelSlide]
  -[SBPowerDownView _idleTimerFired]


SBKeyboardHomeAffordanceController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHomeGrabberDelegate, SBSceneHandleObserver, SBUIActiveOrientationObserver, SBMainDisplaySceneManagerObserverPrivate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBKeyboardHomeAffordanceController sharedInstance]

  // instance methods
  -[SBKeyboardHomeAffordanceController activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBKeyboardHomeAffordanceController shouldAllowThinStyleForHomeGrabberView:]
  -[SBKeyboardHomeAffordanceController shouldAllowAutoHideForHomeGrabberView:]
  -[SBKeyboardHomeAffordanceController init]
  -[SBKeyboardHomeAffordanceController additionalEdgeSpacingForHomeGrabberView:]
  -[SBKeyboardHomeAffordanceController dealloc]
  -[SBKeyboardHomeAffordanceController .cxx_destruct]
  -[SBKeyboardHomeAffordanceController _updateHomeAffordance]
  -[SBKeyboardHomeAffordanceController activeInterfaceOrientationWillChangeToOrientation:]
  -[SBKeyboardHomeAffordanceController sceneManagerUsingMedusaHostedKeyboardWindowDidChange:]
  -[SBKeyboardHomeAffordanceController _updateTopMostAssertion]
  -[SBKeyboardHomeAffordanceController _getHomeGrabberContainingView:isAlwaysPortrait:]
  -[SBKeyboardHomeAffordanceController registerAssertion:]
  -[SBKeyboardHomeAffordanceController unregisterAssertion:]
  -[SBKeyboardHomeAffordanceController _didChangeAdditionalEdgeMarginForAssertion:]


SBKeyboardHomeAffordanceAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  UIWindow *sourceWindow
 @property  double additionalEdgeMargin

  // class methods
  +[SBKeyboardHomeAffordanceAssertion assertionForGestureWindow:]

  // instance methods
  -[SBKeyboardHomeAffordanceAssertion dealloc]
  -[SBKeyboardHomeAffordanceAssertion .cxx_destruct]
  -[SBKeyboardHomeAffordanceAssertion invalidate]
  -[SBKeyboardHomeAffordanceAssertion sourceWindow]
  -[SBKeyboardHomeAffordanceAssertion additionalEdgeMargin]
  -[SBKeyboardHomeAffordanceAssertion initWithGestureWindow:]
  -[SBKeyboardHomeAffordanceAssertion setAdditionalEdgeMargin:]
  -[SBKeyboardHomeAffordanceAssertion setSourceWindow:]


SBSleepWakeHardwareButtonInteraction : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHardwareButtonInteraction, SBHardwareButtonGestureParametersObserver>
 @property  SBBacklightController *backlightController
 @property  SBLockScreenManager *lockScreenManager
 @property  SBScreenWakeAnimationController *screenWakeAnimationController
 @property  SBSoundController *soundController
 @property  SBHIDInterface *HIDInterface
 @property  SpringBoard *SBApp
 @property  double multiplePressTimeInterval
 @property  BOOL fadeOutInProgressFromLockButtonWhileUnlocked
 @property  BOOL undidFadeOutFromLockButton
 @property  BOOL didPlayLockSound
 @property  <BSInvalidatable> *deferOrientationUpdatesAssertion
 @property  BOOL inhibitNextSinglePressUp
 @property  BOOL SOSGestureActive
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSleepWakeHardwareButtonInteraction provider:didUpdateButtonGestureParameters:]
  -[SBSleepWakeHardwareButtonInteraction lockScreenManager]
  -[SBSleepWakeHardwareButtonInteraction init]
  -[SBSleepWakeHardwareButtonInteraction SBApp]
  -[SBSleepWakeHardwareButtonInteraction HIDInterface]
  -[SBSleepWakeHardwareButtonInteraction .cxx_destruct]
  -[SBSleepWakeHardwareButtonInteraction soundController]
  -[SBSleepWakeHardwareButtonInteraction setHIDInterface:]
  -[SBSleepWakeHardwareButtonInteraction consumeInitialPressDown]
  -[SBSleepWakeHardwareButtonInteraction multiplePressTimeInterval]
  -[SBSleepWakeHardwareButtonInteraction consumeSinglePressUp]
  -[SBSleepWakeHardwareButtonInteraction setDeferOrientationUpdatesAssertion:]
  -[SBSleepWakeHardwareButtonInteraction screenWakeAnimationController]
  -[SBSleepWakeHardwareButtonInteraction deferOrientationUpdatesAssertion]
  -[SBSleepWakeHardwareButtonInteraction setMultiplePressTimeInterval:]
  -[SBSleepWakeHardwareButtonInteraction setSoundController:]
  -[SBSleepWakeHardwareButtonInteraction backlightController]
  -[SBSleepWakeHardwareButtonInteraction setLockScreenManager:]
  -[SBSleepWakeHardwareButtonInteraction reverseSleepIfNeededAndPossible]
  -[SBSleepWakeHardwareButtonInteraction setSOSGestureActive:]
  -[SBSleepWakeHardwareButtonInteraction setInhibitNextSinglePressUp:]
  -[SBSleepWakeHardwareButtonInteraction setBacklightController:]
  -[SBSleepWakeHardwareButtonInteraction _performWake]
  -[SBSleepWakeHardwareButtonInteraction _performSleep]
  -[SBSleepWakeHardwareButtonInteraction isSOSGestureActive]
  -[SBSleepWakeHardwareButtonInteraction _playLockSound]
  -[SBSleepWakeHardwareButtonInteraction setFadeOutInProgressFromLockButtonWhileUnlocked:]
  -[SBSleepWakeHardwareButtonInteraction undidFadeOutFromLockButton]
  -[SBSleepWakeHardwareButtonInteraction inhibitNextSinglePressUp]
  -[SBSleepWakeHardwareButtonInteraction setScreenWakeAnimationController:]
  -[SBSleepWakeHardwareButtonInteraction setSBApp:]
  -[SBSleepWakeHardwareButtonInteraction fadeOutInProgressFromLockButtonWhileUnlocked]
  -[SBSleepWakeHardwareButtonInteraction setUndidFadeOutFromLockButton:]
  -[SBSleepWakeHardwareButtonInteraction didPlayLockSound]
  -[SBSleepWakeHardwareButtonInteraction setDidPlayLockSound:]


SBDoubleClickSleepWakeHardwareButtonInteraction : SBSleepWakeHardwareButtonInteraction
 @property  SBHIDUILockAssertion *proxLockAssertion

  // instance methods
  -[SBDoubleClickSleepWakeHardwareButtonInteraction observeFinalPressUp]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction .cxx_destruct]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction consumeInitialPressDown]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction consumeInitialPressUp]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction consumeSecondPressDown]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction observeSinglePressDidFail]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _performWake]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _performSleep]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _resumeProxForReason:]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _suspendProx]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _resumeProxAfterMultiplePressIntervalForReason:]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction _cancelPreviousResumeProxRequests]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction proxLockAssertion]
  -[SBDoubleClickSleepWakeHardwareButtonInteraction setProxLockAssertion:]


SBScreenEdgePanGestureRecognizer : UIScreenEdgePanGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  double grabberActiveZoneWidth
 @property  <SBSystemGestureRecognizerDelegate> *delegate

  // instance methods
  -[SBScreenEdgePanGestureRecognizer setGrabberActiveZoneWidth:]
  -[SBScreenEdgePanGestureRecognizer isLocationWithinGrabberActiveZone]
  -[SBScreenEdgePanGestureRecognizer _touchInterfaceOrientation]
  -[SBScreenEdgePanGestureRecognizer sb_commonInitScreenEdgePanGestureRecognizer]
  -[SBScreenEdgePanGestureRecognizer initWithTarget:action:type:options:]
  -[SBScreenEdgePanGestureRecognizer initWithTarget:action:]
  -[SBScreenEdgePanGestureRecognizer grabberActiveZoneWidth]


SBPIPMorphAnimatorDataSource : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBViewMorphAnimatorDataSource>
 @property  int targetProcessIdentifier
 @property  NSString *scenePersistenceIdentifier
 @property  BOOL gestureInitiated
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPMorphAnimatorDataSource init]
  -[SBPIPMorphAnimatorDataSource .cxx_destruct]
  -[SBPIPMorphAnimatorDataSource isGestureInitiated]
  -[SBPIPMorphAnimatorDataSource sourceContentFrameForAnimator:]
  -[SBPIPMorphAnimatorDataSource targetFinalFrameForAnimator:]
  -[SBPIPMorphAnimatorDataSource targetFinalCornerRadiusForAnimator:]
  -[SBPIPMorphAnimatorDataSource sourceAppLayoutFrameForAnimator:]
  -[SBPIPMorphAnimatorDataSource initWithTargetProcessIdentifier:scenePersistenceIdentifier:gestureInitiated:]
  -[SBPIPMorphAnimatorDataSource isContentFromFillGravityForAnimator:]
  -[SBPIPMorphAnimatorDataSource targetProcessIdentifier]
  -[SBPIPMorphAnimatorDataSource scenePersistenceIdentifier]


SBPIPMorphAnimatorController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBViewMorphAnimatorObserver>
 @property  long long startedSourceAnimations
 @property  long long completedTargetAnimations
 @property  NSUUID *uuid
 @property  SBViewMorphAnimator *viewMorphAnimator
 @property  SBPIPMorphAnimatorDataSource *viewMorphAnimatorDataSource
 @property  PGPictureInPictureViewController *pictureInPictureViewController
 @property  <SBPIPMorphAnimatorControllerDelegate> *delegate
 @property  @? setupCompletionBlock
 @property  @? animatorWaitingForExternalAnimationActionBlock
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPIPMorphAnimatorController init]
  -[SBPIPMorphAnimatorController interrupt]
  -[SBPIPMorphAnimatorController uuid]
  -[SBPIPMorphAnimatorController .cxx_destruct]
  -[SBPIPMorphAnimatorController cancel]
  -[SBPIPMorphAnimatorController setDelegate:]
  -[SBPIPMorphAnimatorController pictureInPictureViewController]
  -[SBPIPMorphAnimatorController delegate]
  -[SBPIPMorphAnimatorController _terminate]
  -[SBPIPMorphAnimatorController viewMorphAnimator]
  -[SBPIPMorphAnimatorController isContentFromFillGravity]
  -[SBPIPMorphAnimatorController willStartSourceAnimations:]
  -[SBPIPMorphAnimatorController didEndSourceAnimations:finished:continueBlock:]
  -[SBPIPMorphAnimatorController didEndTargetAnimations:finished:continueBlock:]
  -[SBPIPMorphAnimatorController animatorWasInterrupted:]
  -[SBPIPMorphAnimatorController startedSourceAnimations]
  -[SBPIPMorphAnimatorController setStartedSourceAnimations:]
  -[SBPIPMorphAnimatorController completedTargetAnimations]
  -[SBPIPMorphAnimatorController setCompletedTargetAnimations:]
  -[SBPIPMorphAnimatorController targetProcessIdentifier]
  -[SBPIPMorphAnimatorController scenePersistenceIdentifier]
  -[SBPIPMorphAnimatorController _isWaitingForExternalAnimationCompletion]
  -[SBPIPMorphAnimatorController initWithTargetProcessIdentifier:uuid:scenePersistenceIdentifier:direction:gestureInitiated:]
  -[SBPIPMorphAnimatorController setPictureInPictureViewController:]
  -[SBPIPMorphAnimatorController setAnimatorWaitingForExternalAnimationActionBlock:]
  -[SBPIPMorphAnimatorController viewMorphAnimatorDataSource]
  -[SBPIPMorphAnimatorController setupCompletionBlock]
  -[SBPIPMorphAnimatorController setSetupCompletionBlock:]
  -[SBPIPMorphAnimatorController animatorWaitingForExternalAnimationActionBlock]


SBBannerManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BNPostingPrivate, BNPresentingDelegate, BNBannerSourceListenerDelegate, SBAssistantObserver, BNPosting, SBButtonEventsHandler>
 @property  UIWindow *bannerWindow
 @property  <BNLayoutManaging> *layoutManager
 @property  BOOL presentingBanner
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBannerManager _defaultAuthorizedBundleIDs]

  // instance methods
  -[SBBannerManager handleHomeButtonPress]
  -[SBBannerManager handleHeadsetButtonPress:]
  -[SBBannerManager handleLockButtonPress]
  -[SBBannerManager handleHomeButtonLongPress]
  -[SBBannerManager acquireWindowLevelAssertionWithPriority:windowLevel:reason:]
  -[SBBannerManager _updateWindowLevel]
  -[SBBannerManager handleVolumeDownButtonPress]
  -[SBBannerManager assistantWillAppear:]
  -[SBBannerManager presenter:gestureRecognizer:locationForEvent:inView:]
  -[SBBannerManager presenter:gestureRecognizer:locationForTouch:inView:]
  -[SBBannerManager handleVolumeUpButtonPress]
  -[SBBannerManager handleHomeButtonDoublePress]
  -[SBBannerManager _isPresentableHUD:]
  -[SBBannerManager init]
  -[SBBannerManager bannerSourceListener:presentationSize:containerSize:error:]
  -[SBBannerManager _bannerSuspensionReasonForSuppressionAssertionReason:]
  -[SBBannerManager layoutManager]
  -[SBBannerManager _statusBarAssertionReasonForPresentable:]
  -[SBBannerManager presenter:willDismissPresentable:withTransitionCoordinator:userInfo:]
  -[SBBannerManager .cxx_destruct]
  -[SBBannerManager _shouldHideStatusBarForPresentable:]
  -[SBBannerManager _invalidatePresenterVisibilityGestureRecognizerPriorityAssertion]
  -[SBBannerManager presenter:gestureRecognizer:translationInView:]
  -[SBBannerManager bannerSourceListener:layoutDescriptionWithError:]
  -[SBBannerManager presenter:willPresentPresentable:withTransitionCoordinator:userInfo:]
  -[SBBannerManager acquireBannerSuppressionAssertionForReason:]
  -[SBBannerManager revokePresentableWithRequestIdentifier:requesterIdentifier:reason:options:userInfo:error:]
  -[SBBannerManager bannerSourceListener:requestsRevokingAllPresentablesForRequesterWithIdentifier:reason:userInfo:error:]
  -[SBBannerManager _hideStatusIfNecessaryForPresentable:]
  -[SBBannerManager _acquireGestureRecognizerPriorityAssertionWithPriority:reason:]
  -[SBBannerManager _acquirePresenterVisibilityGestureRecognizerPriorityAssertion]
  -[SBBannerManager bannerWindow]
  -[SBBannerManager _updateGesturePriority]
  -[SBBannerManager _revealStatusIfNecessaryForPresentable:]
  -[SBBannerManager isPresentingBanner]
  -[SBBannerManager registerAuthority:forRequesterIdentifier:]
  -[SBBannerManager revokePresentableWithRequestIdentifier:requesterIdentifier:reason:options:animated:userInfo:error:]
  -[SBBannerManager userInterfaceStyleTransitionAnimationSettingsForPresentable:forTransitionToStyle:]
  -[SBBannerManager bannerSourceListener:requestsPostingPresentable:options:userInfo:error:]
  -[SBBannerManager presenter:gestureRecognizer:velocityInView:]
  -[SBBannerManager presenterRequestsVisibility:]
  -[SBBannerManager presenter:willTransitionToSize:withTransitionCoordinator:]
  -[SBBannerManager panGestureRecognizerForPresenter:]
  -[SBBannerManager bannerSourceListener:requestsRevokingPresentableWithRequestIdentifier:requesterIdentifier:animated:reason:userInfo:error:]
  -[SBBannerManager _layoutDescriptionWithBounds:]
  -[SBBannerManager setSuspended:forReason:]
  -[SBBannerManager postPresentable:withOptions:userInfo:error:]
  -[SBBannerManager revokeAllPresentablesWithRequesterIdentifier:reason:options:userInfo:error:]
  -[SBBannerManager _handleButtonEventWithTest:handler:]
  -[SBBannerManager acquireGestureRecognizerPriorityAssertionForPresentable:priority:reason:]
  -[SBBannerManager _newBannerWindow]
  -[SBBannerManager dismissAllBannersAnimated:reason:]
  -[SBBannerManager presenterRelinquishesVisibility:]
  -[SBBannerManager bannerSourceListener:recommendsSuspending:forReason:revokingCurrent:error:]


SBLiftToWakeManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSExternalEventHandling, SBLiftToWakeObserver, BSInvalidatable>
 @property  SBLiftToWakeController *liftToWakeController
 @property  SBMainDisplayPolicyAggregator *policyAggregator
 @property  SBLockScreenManager *lockScreenManager
 @property  SBBacklightController *backlightController
 @property  SBIdleTimerGlobalCoordinator *idleTimerCoordinator
 @property  BOOL gestureWokeScreen
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBLiftToWakeManager coverSheetIdentifier]
  -[SBLiftToWakeManager _idleTimerCoordinator]
  -[SBLiftToWakeManager init]
  -[SBLiftToWakeManager _setIdleTimerCoordinator:]
  -[SBLiftToWakeManager conformsToCSEventHandling]
  -[SBLiftToWakeManager dealloc]
  -[SBLiftToWakeManager .cxx_destruct]
  -[SBLiftToWakeManager _setLockScreenManager:]
  -[SBLiftToWakeManager _setPolicyAggregator:]
  -[SBLiftToWakeManager participantState]
  -[SBLiftToWakeManager _lockScreenManager]
  -[SBLiftToWakeManager handleEvent:]
  -[SBLiftToWakeManager _backlightController]
  -[SBLiftToWakeManager _setBacklightController:]
  -[SBLiftToWakeManager invalidate]
  -[SBLiftToWakeManager _policyAggregator]
  -[SBLiftToWakeManager wouldHandleButtonEvent:]
  -[SBLiftToWakeManager _setLiftToWakeController:]
  -[SBLiftToWakeManager liftToWakeController:didObserveTransition:deviceOrientation:]
  -[SBLiftToWakeManager _liftToWakeController]
  -[SBLiftToWakeManager _ignoredTransition:]
  -[SBLiftToWakeManager _initWithLiftToWakeController:]
  -[SBLiftToWakeManager _backlightWillTurnOn:]
  -[SBLiftToWakeManager _setGestureWokeScreen:]
  -[SBLiftToWakeManager _gestureWokeScreen]
  -[SBLiftToWakeManager _isLockScreenMainPageVisible]


SBWakeDestination : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  unsigned long type
 @property  NSString *identifier
 @property  SBSRemoteAlertDefinition *remoteAlertDefinition

  // instance methods
  -[SBWakeDestination setType:]
  -[SBWakeDestination .cxx_destruct]
  -[SBWakeDestination setIdentifier:]
  -[SBWakeDestination identifier]
  -[SBWakeDestination type]
  -[SBWakeDestination setRemoteAlertDefinition:]
  -[SBWakeDestination remoteAlertDefinition]


SBFaceIDCoachingConditionRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFaceIDCoachingConditionRecipe load]

  // instance methods
  -[SBFaceIDCoachingConditionRecipe title]
  -[SBFaceIDCoachingConditionRecipe handleVolumeIncrease]
  -[SBFaceIDCoachingConditionRecipe handleVolumeDecrease]
  -[SBFaceIDCoachingConditionRecipe _overrideCoachingConditionEnabled]
  -[SBFaceIDCoachingConditionRecipe _setOverrideCoachingConditionEnabled:]
  -[SBFaceIDCoachingConditionRecipe _setOverrideCoachingEvent:]


SBWorkItem : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSDate *creationDate
 @property  @? work

  // instance methods
  -[SBWorkItem creationDate]
  -[SBWorkItem .cxx_destruct]
  -[SBWorkItem work]
  -[SBWorkItem initWithWork:]


SBWorkStore : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSMutableDictionary *workItemsPerKey
 @property  NSMutableArray *observers
 @property  unsigned long maxWorkPerKey
 @property  NSArray *keysWithWork
 @property  double defaultWorkExpirationPeriod

  // instance methods
  -[SBWorkStore .cxx_destruct]
  -[SBWorkStore observers]
  -[SBWorkStore removeObserver:]
  -[SBWorkStore addObserver:]
  -[SBWorkStore _workQueue_expireWorkForKey:]
  -[SBWorkStore _notifyObserversWorkDidChange]
  -[SBWorkStore dequeueWorkForKey:]
  -[SBWorkStore initWithMaximumNumberOfWorkItemsPerKey:]
  -[SBWorkStore keysWithWork]
  -[SBWorkStore addWorkItem:forKey:]
  -[SBWorkStore purgeWorkForKey:]
  -[SBWorkStore setWorkExpirationPeriod:forKey:]
  -[SBWorkStore defaultWorkExpirationPeriod]
  -[SBWorkStore setDefaultWorkExpirationPeriod:]
  -[SBWorkStore workItemsPerKey]
  -[SBWorkStore maxWorkPerKey]


SBBestAppSuggestion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBIconContinuityInfo>
 @property  NSUUID *uniqueIdentifier
 @property  NSString *bundleIdentifier
 @property  NSString *activityType
 @property  NSDate *lastUpdateTime
 @property  NSString *originatingDeviceIdentifier
 @property  NSString *originatingDeviceName
 @property  NSString *originatingDeviceType
 @property  NSString *originatingBundleIdentifier
 @property  NSString *suggestedLocationName
 @property  NSURL *launchURL

  // instance methods
  -[SBBestAppSuggestion activityType]
  -[SBBestAppSuggestion isSiriSuggestion]
  -[SBBestAppSuggestion uniqueIdentifier]
  -[SBBestAppSuggestion isPrediction]
  -[SBBestAppSuggestion isLocationBasedSuggestion]
  -[SBBestAppSuggestion isBluetoothAudioPrediction]
  -[SBBestAppSuggestion isBluetoothPrediction]
  -[SBBestAppSuggestion isHeadphonesPrediction]
  -[SBBestAppSuggestion isFirstWakePrediction]
  -[SBBestAppSuggestion originatingDeviceType]
  -[SBBestAppSuggestion originatingDeviceName]
  -[SBBestAppSuggestion originatingDeviceIdentifier]
  -[SBBestAppSuggestion bundleIdentifier]
  -[SBBestAppSuggestion lastUpdateTime]
  -[SBBestAppSuggestion launchURL]
  -[SBBestAppSuggestion originatingBundleIdentifier]
  -[SBBestAppSuggestion suggestedLocationName]
  -[SBBestAppSuggestion launchURLRequiresInboxCopy]
  -[SBBestAppSuggestion makeInboxCopyOfLaunchURLToInboxURL:]
  -[SBBestAppSuggestion isLocationPredictionOfType:]
  -[SBBestAppSuggestion isArrivedAtHomePrediction]
  -[SBBestAppSuggestion isArrivedAtWorkPrediction]
  -[SBBestAppSuggestion isLocationPredictionFromSource:]
  -[SBBestAppSuggestion isLocallyGeneratedSuggestion]
  -[SBBestAppSuggestion isCarPlayPrediction]
  -[SBBestAppSuggestion isCallContinuitySuggestion]
  -[SBBestAppSuggestion isNotificationSuggestion]
  -[SBBestAppSuggestion isOpenURLSuggestion]
  -[SBBestAppSuggestion isHandoff]
  -[SBBestAppSuggestion isEligibleForLockScreen]


SBGridSwipeUpGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBGridSwipeUpGestureSwitcherModifier homeScreenBackdropBlurType]
  -[SBGridSwipeUpGestureSwitcherModifier visibleAppLayouts]
  -[SBGridSwipeUpGestureSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBGridSwipeUpGestureSwitcherModifier isHomeScreenContentRequired]
  -[SBGridSwipeUpGestureSwitcherModifier isSwitcherWindowVisible]
  -[SBGridSwipeUpGestureSwitcherModifier wallpaperStyle]
  -[SBGridSwipeUpGestureSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBGridSwipeUpGestureSwitcherModifier .cxx_destruct]
  -[SBGridSwipeUpGestureSwitcherModifier switcherViewBounds]
  -[SBGridSwipeUpGestureSwitcherModifier didMoveToParentModifier:]
  -[SBGridSwipeUpGestureSwitcherModifier _applyPrototypeSettings]
  -[SBGridSwipeUpGestureSwitcherModifier scrollViewContentOffset]
  -[SBGridSwipeUpGestureSwitcherModifier contentViewScale]
  -[SBGridSwipeUpGestureSwitcherModifier handleGestureEvent:]
  -[SBGridSwipeUpGestureSwitcherModifier initWithGestureID:]
  -[SBGridSwipeUpGestureSwitcherModifier _performBlockByApplyContentViewScaleToSwitcherViewBounds:]
  -[SBGridSwipeUpGestureSwitcherModifier finalResponseForGestureEvent:]


SBChainableModifier : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, SBChainableModifierQuery, SBChainableModifierContext, NSCopying>
 @property  SBChainableModifier *parentModifier
 @property  SBChainableModifier *previousContextModifier
 @property  SBChainableModifier *nextQueryModifier
 @property  SBModifierCacheCoordinator *queryCacheCoordinator
 @property  SBModifierCacheCoordinator *contextCacheCoordinator
 @property  long long state
 @property  long long modifierLevel
 @property  NSString *key
 @property  <SBChainableModifierDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBChainableModifier initialize]
  +[SBChainableModifier queryProtocol]
  +[SBChainableModifier makeDynamicSubclassWithDescriptor:implementation:forSelector:ofProtocol:]
  +[SBChainableModifier contextProtocol]
  +[SBChainableModifier baseClassForQueryProtocol]
  +[SBChainableModifier newEventResponse]
  +[SBChainableModifier _initalizeIMPCaching]
  +[SBChainableModifier newQueryCache]
  +[SBChainableModifier newContextCache]
  +[SBChainableModifier querySelectors]
  +[SBChainableModifier newCacheWithSelectorList:subsequentMethodCacheFunc:cachingDictionary:]
  +[SBChainableModifier contextSelectors]
  +[SBChainableModifier verifyModifierImplementsAllMethodsOfProtocol:]

  // instance methods
  -[SBChainableModifier copyWithZone:]
  -[SBChainableModifier loggingCategory]
  -[SBChainableModifier init]
  -[SBChainableModifier dealloc]
  -[SBChainableModifier setState:]
  -[SBChainableModifier .cxx_destruct]
  -[SBChainableModifier setKey:]
  -[SBChainableModifier succinctDescriptionBuilder]
  -[SBChainableModifier _handleEvent:]
  -[SBChainableModifier key]
  -[SBChainableModifier succinctDescription]
  -[SBChainableModifier handleEvent:]
  -[SBChainableModifier didMoveToParentModifier:]
  -[SBChainableModifier setDelegate:]
  -[SBChainableModifier state]
  -[SBChainableModifier delegate]
  -[SBChainableModifier descriptionWithMultilinePrefix:]
  -[SBChainableModifier descriptionBuilderWithMultilinePrefix:]
  -[SBChainableModifier performTransactionWithTemporaryChildModifier:usingBlock:]
  -[SBChainableModifier _insertModifier:afterModifier:queryResponse:contextResponse:]
  -[SBChainableModifier previousContextModifier]
  -[SBChainableModifier provideNextQueryImplementation:forSelector:]
  -[SBChainableModifier providePreviousContextImplementation:forSelector:]
  -[SBChainableModifier addChildModifier:]
  -[SBChainableModifier parentModifier]
  -[SBChainableModifier responseForProposedChildResponse:childModifier:event:]
  -[SBChainableModifier addChildModifier:atLevel:key:]
  -[SBChainableModifier childModifierByKey:]
  -[SBChainableModifier completesWhenChildrenComplete]
  -[SBChainableModifier containsChildModifier:]
  -[SBChainableModifier removeChildModifier:]
  -[SBChainableModifier verifyInternalIntegrityAfterHandlingEvent:]
  -[SBChainableModifier enumerateChildModifiersWithBlock:]
  -[SBChainableModifier runsInternalVerificationAfterEventDispatch]
  -[SBChainableModifier setParentModifier:]
  -[SBChainableModifier nextQueryModifier]
  -[SBChainableModifier setPreviousContextModifier:]
  -[SBChainableModifier _notifyChildrenDidMoveToParentIfNeeded]
  -[SBChainableModifier _forwardEvent:toChildModifier:]
  -[SBChainableModifier childModifierCount]
  -[SBChainableModifier _anyDescendentImplementsAnyQueryMethod]
  -[SBChainableModifier _anyDescendentImplementsAnyContextMethod]
  -[SBChainableModifier _addChildModifier:atLevel:key:queryResponse:contextResponse:]
  -[SBChainableModifier modifierLevel]
  -[SBChainableModifier setModifierLevel:]
  -[SBChainableModifier _lastDeepChildModifier]
  -[SBChainableModifier _removeChildModifier:queryResponse:contextResponse:]
  -[SBChainableModifier setNextQueryModifier:]
  -[SBChainableModifier queryCacheCoordinator]
  -[SBChainableModifier contextCacheCoordinator]
  -[SBChainableModifier setQueryCacheCoordinator:]
  -[SBChainableModifier setContextCacheCoordinator:]


SBPresentFloatingDockTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPresentFloatingDockTestRecipe load]

  // instance methods
  -[SBPresentFloatingDockTestRecipe title]
  -[SBPresentFloatingDockTestRecipe handleVolumeIncrease]
  -[SBPresentFloatingDockTestRecipe handleVolumeDecrease]


SBDeckSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBDeckSwitcherModifier homeScreenBackdropBlurType]
  -[SBDeckSwitcherModifier wantsDockWindowLevelAssertion]
  -[SBDeckSwitcherModifier visibleAppLayouts]
  -[SBDeckSwitcherModifier scrollRange]
  -[SBDeckSwitcherModifier _contentSize]
  -[SBDeckSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBDeckSwitcherModifier homeScreenAlpha]
  -[SBDeckSwitcherModifier scaleForIndex:]
  -[SBDeckSwitcherModifier isHomeScreenContentRequired]
  -[SBDeckSwitcherModifier topMostLayoutElements]
  -[SBDeckSwitcherModifier wantsDockBehaviorAssertion]
  -[SBDeckSwitcherModifier isSwitcherWindowVisible]
  -[SBDeckSwitcherModifier isScrollEnabled]
  -[SBDeckSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBDeckSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBDeckSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDeckSwitcherModifier handleMainTransitionEvent:]
  -[SBDeckSwitcherModifier wallpaperStyle]
  -[SBDeckSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBDeckSwitcherModifier cardCornerRadiiForIndex:]
  -[SBDeckSwitcherModifier _topIndexForLocationInContainerCoordinateSpace:]
  -[SBDeckSwitcherModifier opacityForIndex:]
  -[SBDeckSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBDeckSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBDeckSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBDeckSwitcherModifier numberOfItems]
  -[SBDeckSwitcherModifier scrollProgressForIndex:displayItemsCount:frameOrigin:]
  -[SBDeckSwitcherModifier _cardCornerRadiusInSwitcher]
  -[SBDeckSwitcherModifier _frameForIndex:displayItemsCount:scrollProgress:ignoringScrollOffset:]
  -[SBDeckSwitcherModifier dockProgress]
  -[SBDeckSwitcherModifier frameForIndex:]
  -[SBDeckSwitcherModifier contentOffsetForIndex:centered:]
  -[SBDeckSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBDeckSwitcherModifier homeScreenDimmingAlpha]
  -[SBDeckSwitcherModifier init]
  -[SBDeckSwitcherModifier minimumTranslationToKillIndex:]
  -[SBDeckSwitcherModifier _depthForFrameOrigin:]
  -[SBDeckSwitcherModifier _indexForContentOffset:]
  -[SBDeckSwitcherModifier depthForIndex:displayItemsCount:scrollProgress:]
  -[SBDeckSwitcherModifier shouldAcceleratedHomeButtonPressBegin]
  -[SBDeckSwitcherModifier containerStatusBarAnimationDuration]
  -[SBDeckSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBDeckSwitcherModifier isIndexSelectable:]
  -[SBDeckSwitcherModifier _restingScrollProgressForProgress:velocity:]
  -[SBDeckSwitcherModifier _contentOffsetForScrollProgress:]
  -[SBDeckSwitcherModifier shouldUseBrightMaterialForIndex:]
  -[SBDeckSwitcherModifier wantsHomeScreenPointerInteractions]
  -[SBDeckSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBDeckSwitcherModifier switcherDimmingAlpha]
  -[SBDeckSwitcherModifier _scrollMin]
  -[SBDeckSwitcherModifier homeScreenBackdropBlurProgress]
  -[SBDeckSwitcherModifier _preferredVisibleMarginForTopPage]
  -[SBDeckSwitcherModifier reopenClosedWindowsButtonScale]
  -[SBDeckSwitcherModifier _visibleAppLayoutRangeForContentOffset:]
  -[SBDeckSwitcherModifier _unscaledCardCornerRadius]
  -[SBDeckSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBDeckSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBDeckSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBDeckSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBDeckSwitcherModifier _scrollProgressForContentOffset:]
  -[SBDeckSwitcherModifier titleOpacityForIndex:scrollProgress:]
  -[SBDeckSwitcherModifier wallpaperOverlayAlphaForIndex:]
  -[SBDeckSwitcherModifier titleOpacityForIndex:]
  -[SBDeckSwitcherModifier _counteractScrollingForOffset:scrollProgress:]
  -[SBDeckSwitcherModifier dockUpdateMode]
  -[SBDeckSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBDeckSwitcherModifier leadingOffsetForIndex:displayItemsCount:scrollProgress:]
  -[SBDeckSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBDeckSwitcherModifier shadowStyleForAppLayout:]
  -[SBDeckSwitcherModifier homeScreenScale]
  -[SBDeckSwitcherModifier appLayoutToScrollToBeforeReopeningClosedWindows]
  -[SBDeckSwitcherModifier _scrollProgressForIndex:displayItemsCount:depth:]
  -[SBDeckSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBDeckSwitcherModifier handleTapAppLayoutEvent:]
  -[SBDeckSwitcherModifier appLayoutsToResignActive]
  -[SBDeckSwitcherModifier _switcherCardScale]
  -[SBDeckSwitcherModifier shouldAllowContentViewTouchesForIndex:]
  -[SBDeckSwitcherModifier shouldFireTransitionCompletionInDefaultRunLoopMode]
  -[SBDeckSwitcherModifier _directionForRemovingIndex:centeredIndex:]
  -[SBDeckSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBDeckSwitcherModifier appLayoutForReceivingHardwareButtonEvents]
  -[SBDeckSwitcherModifier dockWindowLevel]
  -[SBDeckSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBDeckSwitcherModifier _scrollProgress]
  -[SBDeckSwitcherModifier shouldPerformRotationAnimationForOrientationChange]
  -[SBDeckSwitcherModifier desiredXOriginForQuantizedTopPage]
  -[SBDeckSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBDeckSwitcherModifier opacityForIndex:scrollProgress:]
  -[SBDeckSwitcherModifier _scaleTransformedXOrigin:scrollProgress:]
  -[SBDeckSwitcherModifier _scaleInSwitcherViewForIndex:scrollProgress:]
  -[SBDeckSwitcherModifier _scaleTransformedFrameForIndex:withUntransformedFrame:scrollProgress:]
  -[SBDeckSwitcherModifier _scaleForTransformForIndex:scrollProgress:]
  -[SBDeckSwitcherModifier _valueAlongDepthCurveForIndex:scrollProgress:aCoefficient:bCoefficient:]
  -[SBDeckSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBDeckSwitcherModifier shouldRubberbandFullScreenHomeGrabberView]
  -[SBDeckSwitcherModifier didMoveToParentModifier:]
  -[SBDeckSwitcherModifier wallpaperScale]
  -[SBDeckSwitcherModifier handleScrollEvent:]
  -[SBDeckSwitcherModifier shouldUseBackgroundWallpaperTreatmentForIndex:]
  -[SBDeckSwitcherModifier _isIndexVisible:]
  -[SBDeckSwitcherModifier _indexOfCurrentCenteredCard]
  -[SBDeckSwitcherModifier snapshotScaleForAppLayout:]
  -[SBDeckSwitcherModifier shouldConfigureInAppDockHiddenAssertion]
  -[SBDeckSwitcherModifier isHomeGrabberVisibleForIndex:]
  -[SBDeckSwitcherModifier resetAdjustedScrollingState]
  -[SBDeckSwitcherModifier _applyPrototypeSettings]
  -[SBDeckSwitcherModifier isIndexKillable:]
  -[SBDeckSwitcherModifier darkeningAlphaForIndex:]
  -[SBDeckSwitcherModifier switcherDimmingViewBlocksTouches]
  -[SBDeckSwitcherModifier plusButtonAlpha]
  -[SBDeckSwitcherModifier reopenClosedWindowsButtonAlpha]
  -[SBDeckSwitcherModifier shadowOffsetForIndex:]
  -[SBDeckSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBDeckSwitcherModifier lighteningAlphaForIndex:]
  -[SBDeckSwitcherModifier _priorIndex:fullyObscuresCardForIndex:]
  -[SBDeckSwitcherModifier keyboardSuppressionMode]
  -[SBDeckSwitcherModifier preferredSnapshotOrientationForAppLayout:]
  -[SBDeckSwitcherModifier transactionCompletionOptions]
  -[SBDeckSwitcherModifier contentViewScale]
  -[SBDeckSwitcherModifier plusButtonStyle]
  -[SBDeckSwitcherModifier handleRemovalEvent:]
  -[SBDeckSwitcherModifier shouldScaleOverlayToFillBoundsAtIndex:]
  -[SBDeckSwitcherModifier wantsSwitcherBackdropBlur]
  -[SBDeckSwitcherModifier wantsSwitcherDimmingView]
  -[SBDeckSwitcherModifier dockWindowLevelPriority]
  -[SBDeckSwitcherModifier indexForScrollProgress:displayItemsCount:frameOrigin:]
  -[SBDeckSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[SBDeckSwitcherModifier scrollViewAttributes]
  -[SBDeckSwitcherModifier isContainerStatusBarVisible]
  -[SBDeckSwitcherModifier scrollProgressForIndex:]
  -[SBDeckSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[SBDeckSwitcherModifier _indexForScrollProgress:displayItemsCount:depth:]
  -[SBDeckSwitcherModifier _newIndexOfItemAtIndex:afterRemovingItemAtIndex:]
  -[SBDeckSwitcherModifier shadowOpacityForIndex:]
  -[SBDeckSwitcherModifier switcherBackdropBlurProgress]
  -[SBDeckSwitcherModifier rotationAngleForIndex:]
  -[SBDeckSwitcherModifier _adjustedOffsetForIndex:offset:start:originalLocationInView:locationInView:]
  -[SBDeckSwitcherModifier handleTapOutsideToDismissEvent:]
  -[SBDeckSwitcherModifier isItemContainerPointerInteractionEnabled]
  -[SBDeckSwitcherModifier switcherBackdropBlurType]
  -[SBDeckSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]


SBApplicationShortcutReportRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationShortcutReportRecipe load]

  // instance methods
  -[SBApplicationShortcutReportRecipe title]
  -[SBApplicationShortcutReportRecipe handleVolumeIncrease]
  -[SBApplicationShortcutReportRecipe handleVolumeDecrease]
  -[SBApplicationShortcutReportRecipe _dumpReport]


SBApplicationShortcutStore : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *bundleIdentifier
 @property  NSArray *applicationShortcutItems
 @property  NSArray *languages
 @property  unsigned long version

  // class methods
  +[SBApplicationShortcutStore clearStore]

  // instance methods
  -[SBApplicationShortcutStore initWithBundleIdentifier:]
  -[SBApplicationShortcutStore applicationShortcutItems]
  -[SBApplicationShortcutStore _plistArrayFromApplicationShortcutItems:]
  -[SBApplicationShortcutStore _saveQueue_save]
  -[SBApplicationShortcutStore _applicationShortcutItemsFromPlistArray:]
  -[SBApplicationShortcutStore .cxx_destruct]
  -[SBApplicationShortcutStore truncateIfNecessary]
  -[SBApplicationShortcutStore invalidateCache]
  -[SBApplicationShortcutStore _stateLock_truncateIfNeeded:]
  -[SBApplicationShortcutStore setApplicationShortcutItems:withLanguages:version:]
  -[SBApplicationShortcutStore saveSynchronously]
  -[SBApplicationShortcutStore _stateLock_markDirty]
  -[SBApplicationShortcutStore version]
  -[SBApplicationShortcutStore bundleIdentifier]
  -[SBApplicationShortcutStore languages]
  -[SBApplicationShortcutStore _stateLock_loadFromStoreIfNeeded]


SBInsertionSwitcherModifier : SBSwitcherModifier
 @property  unsigned long phase

  // instance methods
  -[SBInsertionSwitcherModifier visibleAppLayouts]
  -[SBInsertionSwitcherModifier animationAttributesForLayoutElement:]
  -[SBInsertionSwitcherModifier opacityForIndex:]
  -[SBInsertionSwitcherModifier phase]
  -[SBInsertionSwitcherModifier .cxx_destruct]
  -[SBInsertionSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBInsertionSwitcherModifier scrollViewContentOffset]
  -[SBInsertionSwitcherModifier initWithAppLayout:]
  -[SBInsertionSwitcherModifier handleInsertionEvent:]
  -[SBInsertionSwitcherModifier _performBlockBySimulatingPreInsertionState:]


SBIdleTimerGlobalStateMonitor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBPocketStateMonitorObserver, _SBIdleTimerGlobalSettingMonitorDelegate, SBIdleTimerServiceDelegate, SBFThermalConditionObserver>
 @property  long long pocketState
 @property  BOOL dontLockEver
 @property  BOOL dontDimOrLockOnAC
 @property  BOOL disableAttentionAwareness
 @property  double minimumLockscreenIdleTime
 @property  NSNumber *autoLockTimeout
 @property  BOOL batterySaverModeActive
 @property  BOOL onACPower
 @property  BOOL faceDownOnTable
 @property  BOOL autoDimDisabled
 @property  SBIdleTimerAggregateClientConfiguration *aggregateClientConfiguration
 @property  BOOL thermalBlocked
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerGlobalStateMonitor sharedInstance]

  // instance methods
  -[SBIdleTimerGlobalStateMonitor _addStateCaptureHandlers]
  -[SBIdleTimerGlobalStateMonitor isBatterySaverModeActive]
  -[SBIdleTimerGlobalStateMonitor _updateObserversForReason:]
  -[SBIdleTimerGlobalStateMonitor pocketState]
  -[SBIdleTimerGlobalStateMonitor dontLockEver]
  -[SBIdleTimerGlobalStateMonitor idleTimerGlobalSettingMonitor:changedForReason:]
  -[SBIdleTimerGlobalStateMonitor isAutoDimDisabled]
  -[SBIdleTimerGlobalStateMonitor isOnACPower]
  -[SBIdleTimerGlobalStateMonitor minimumLockscreenIdleTime]
  -[SBIdleTimerGlobalStateMonitor dealloc]
  -[SBIdleTimerGlobalStateMonitor dontDimOrLockOnAC]
  -[SBIdleTimerGlobalStateMonitor .cxx_destruct]
  -[SBIdleTimerGlobalStateMonitor _timeIntervalMonitorForProperty:inDefaults:fetchingWith:]
  -[SBIdleTimerGlobalStateMonitor isFaceDownOnTable]
  -[SBIdleTimerGlobalStateMonitor aggregateClientConfiguration]
  -[SBIdleTimerGlobalStateMonitor idleTimerServiceTimeoutAssertionsDidChange:]
  -[SBIdleTimerGlobalStateMonitor _init]
  -[SBIdleTimerGlobalStateMonitor autoLockTimeout]
  -[SBIdleTimerGlobalStateMonitor _boolMonitorForProperty:inDefaults:fetchingWith:]
  -[SBIdleTimerGlobalStateMonitor thermalBlockStatusChanged:]
  -[SBIdleTimerGlobalStateMonitor disableAttentionAwareness]
  -[SBIdleTimerGlobalStateMonitor isThermalBlocked]
  -[SBIdleTimerGlobalStateMonitor _updateAutoDimDisabled]
  -[SBIdleTimerGlobalStateMonitor removeObserver:]
  -[SBIdleTimerGlobalStateMonitor _updateFaceDownOnTable]
  -[SBIdleTimerGlobalStateMonitor pocketStateMonitor:pocketStateDidChangeFrom:to:]
  -[SBIdleTimerGlobalStateMonitor _initWithLocalDefaults:profileConnection:pocketStateMonitor:uiController:idleTimerService:thermalBlockProvider:]
  -[SBIdleTimerGlobalStateMonitor addObserver:]
  -[SBIdleTimerGlobalStateMonitor _stateCaptureDescription]


_SBIdleTimerGlobalSettingMonitor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *label
 @property  <_SBIdleTimerGlobalSettingMonitorDelegate> *delegate

  // instance methods
  -[_SBIdleTimerGlobalSettingMonitor _updateCache]
  -[_SBIdleTimerGlobalSettingMonitor .cxx_destruct]
  -[_SBIdleTimerGlobalSettingMonitor label]
  -[_SBIdleTimerGlobalSettingMonitor setDelegate:]
  -[_SBIdleTimerGlobalSettingMonitor formattedValue]
  -[_SBIdleTimerGlobalSettingMonitor delegate]
  -[_SBIdleTimerGlobalSettingMonitor initWithLabel:delegate:]


_SBIdleTimerGlobalNumericSettingMonitor : _SBIdleTimerGlobalSettingMonitor
 @property  NSNumber *numericValue

  // instance methods
  -[_SBIdleTimerGlobalNumericSettingMonitor numericValue]
  -[_SBIdleTimerGlobalNumericSettingMonitor _updateCache]
  -[_SBIdleTimerGlobalNumericSettingMonitor dealloc]
  -[_SBIdleTimerGlobalNumericSettingMonitor .cxx_destruct]
  -[_SBIdleTimerGlobalNumericSettingMonitor initWithLabel:delegate:updatingForNotification:fetchingWith:]
  -[_SBIdleTimerGlobalNumericSettingMonitor _settingChanged:]
  -[_SBIdleTimerGlobalNumericSettingMonitor formattedValue]


_SBIdleTimerGlobalBoolSettingMonitor : _SBIdleTimerGlobalNumericSettingMonitor
 @property  BOOL boolValue

  // instance methods
  -[_SBIdleTimerGlobalBoolSettingMonitor initWithLabel:delegate:updatingForNotification:fetchingWith:]
  -[_SBIdleTimerGlobalBoolSettingMonitor boolValue]
  -[_SBIdleTimerGlobalBoolSettingMonitor formattedValue]


SBSwitcherModelRemovalRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *appLayouts

  // instance methods
  -[SBSwitcherModelRemovalRequest .cxx_destruct]
  -[SBSwitcherModelRemovalRequest appLayouts]
  -[SBSwitcherModelRemovalRequest actionForAppLayout:]
  -[SBSwitcherModelRemovalRequest setAction:forAppLayout:]


SBSwitcherModelRemovalRequestAction : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long actionType
 @property  SBAppLayout *replacementAppLayout

  // class methods
  +[SBSwitcherModelRemovalRequestAction defaultRemovalPolicyAction]
  +[SBSwitcherModelRemovalRequestAction replacementActionWithAppLayout:]

  // instance methods
  -[SBSwitcherModelRemovalRequestAction actionType]
  -[SBSwitcherModelRemovalRequestAction .cxx_destruct]
  -[SBSwitcherModelRemovalRequestAction replacementAppLayout]
  -[SBSwitcherModelRemovalRequestAction _initWithActionType:]


SBHomeGestureRootSwitcherModifier : SBGestureRootSwitcherModifier
  // instance methods
  -[SBHomeGestureRootSwitcherModifier wantsAsynchronousSurfaceRetentionAssertion]
  -[SBHomeGestureRootSwitcherModifier .cxx_destruct]
  -[SBHomeGestureRootSwitcherModifier _newMultitaskingModifier]
  -[SBHomeGestureRootSwitcherModifier gestureType]
  -[SBHomeGestureRootSwitcherModifier transitionChildModifierForMainTransitionEvent:activeGestureModifier:]
  -[SBHomeGestureRootSwitcherModifier gestureChildModifierForGestureEvent:activeTransitionModifier:]
  -[SBHomeGestureRootSwitcherModifier initWithStartingEnvironmentMode:multitaskingModifier:]


SBDashBoardLockScreenEnvironment : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationHosting, SBAutoUnlockRule, SBBiometricUnlockBehavior, SBBiometricUnlockBehaviorDelegate, SBButtonEventsHandler, CSCoverSheetViewControllerObserver, SBLockScreenBacklightControlling, SBLockScreenBehaviorSuppressing, SBLockScreenBlockedStateObserving, SBLockScreenButtonObserving, SBLockScreenContentStateProviding, SBLockScreenCustomActionStoring, SBLockScreenLockingAndUnlocking, SBLockScreenMediaControlsPresenting, SBLockScreenPasscodeViewPresenting, SBLockScreenProximityBehaviorProviding, SBLockScreenStatusBarTransitioning, SBLockScreenEnvironment>
 @property  CSCoverSheetViewController *coverSheetViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate
 @property  double backlightLevel
 @property  SBFLockScreenActionContext *customLockScreenActionContext
 @property  BOOL authenticated
 @property  BOOL showingMediaControls
 @property  BOOL expectsFaceContact
 @property  BOOL shouldShowLockStatusBarTime
 @property  UIViewController *rootViewController
 @property  <SBAutoUnlockRule> *autoUnlockRule
 @property  <SBBiometricUnlockBehavior> *biometricUnlockBehavior
 @property  <SBButtonEventsHandler> *buttonEventsHandler
 @property  <SBApplicationHosting> *applicationHoster
 @property  <SBIdleTimerProviding> *idleTimerProvider
 @property  <SBFScreenWakeAnimationTarget> *screenWakeAnimationTarget
 @property  <SBLockScreenApplicationLaunching> *applicationLauncher
 @property  <SBLockScreenBacklightControlling> *backlightController
 @property  <SBLockScreenBehaviorSuppressing> *behaviorSuppressor
 @property  <SBLockScreenBlockedStateObserving> *blockedStateObserver
 @property  <SBLockScreenButtonObserving> *buttonObserver
 @property  <SBLockScreenCallHandling> *callController
 @property  <SBLockScreenContentStateProviding> *contentStateProvider
 @property  <SBLockScreenCustomActionStoring> *customActionStore
 @property  <SBLockScreenIdleTimerControlling> *idleTimerController
 @property  <SBLockScreenLockingAndUnlocking> *lockController
 @property  <SBLockScreenMediaControlsPresenting> *mediaControlsPresenter
 @property  <SBLockScreenPasscodeViewPresenting> *passcodeViewPresenter
 @property  <SBLockScreenPluginPresenting> *pluginPresenter
 @property  <SBLockScreenProximityBehaviorProviding> *proximityBehaviorProvider
 @property  <SBLockScreenStatusBarTransitioning> *statusBarTransitionController

  // instance methods
  -[SBDashBoardLockScreenEnvironment noteResetRestoreStateUpdated]
  -[SBDashBoardLockScreenEnvironment isPasscodeLockVisible]
  -[SBDashBoardLockScreenEnvironment noteDeviceBlockedStatusUpdated]
  -[SBDashBoardLockScreenEnvironment setInScreenOffMode:forAutoUnlock:fromUnlockSource:]
  -[SBDashBoardLockScreenEnvironment willUIUnlockFromSource:]
  -[SBDashBoardLockScreenEnvironment finishUIUnlockFromSource:]
  -[SBDashBoardLockScreenEnvironment isMainPageVisible]
  -[SBDashBoardLockScreenEnvironment shouldDisableALS]
  -[SBDashBoardLockScreenEnvironment handleHomeButtonPress]
  -[SBDashBoardLockScreenEnvironment isAuthenticated]
  -[SBDashBoardLockScreenEnvironment setPasscodeLockVisible:animated:]
  -[SBDashBoardLockScreenEnvironment setCustomLockScreenActionContext:]
  -[SBDashBoardLockScreenEnvironment createHomeButtonShowPasscodeRecognizerForHomeButtonPress]
  -[SBDashBoardLockScreenEnvironment isHostingAnApp]
  -[SBDashBoardLockScreenEnvironment setShowingMediaControls:]
  -[SBDashBoardLockScreenEnvironment handleHeadsetButtonPress:]
  -[SBDashBoardLockScreenEnvironment hostedAppSceneHandle]
  -[SBDashBoardLockScreenEnvironment suppressesControlCenter]
  -[SBDashBoardLockScreenEnvironment applicationLauncher]
  -[SBDashBoardLockScreenEnvironment shouldAutoUnlockForSource:]
  -[SBDashBoardLockScreenEnvironment suppressesScreenshots]
  -[SBDashBoardLockScreenEnvironment canHostAnApp]
  -[SBDashBoardLockScreenEnvironment updateStatusBarForLockScreenTeardown]
  -[SBDashBoardLockScreenEnvironment prepareForUIUnlock]
  -[SBDashBoardLockScreenEnvironment suppressesBanners]
  -[SBDashBoardLockScreenEnvironment updateStatusBarForLockScreenComeback]
  -[SBDashBoardLockScreenEnvironment isUnlockDisabled]
  -[SBDashBoardLockScreenEnvironment conformsToSBApplicationHosting]
  -[SBDashBoardLockScreenEnvironment setInScreenOffMode:]
  -[SBDashBoardLockScreenEnvironment shouldUnlockUIOnKeyDownEvent]
  -[SBDashBoardLockScreenEnvironment canBeDeactivatedForUIUnlockFromSource:]
  -[SBDashBoardLockScreenEnvironment setPasscodeLockVisible:animated:completion:]
  -[SBDashBoardLockScreenEnvironment _customLockScreenActionContext]
  -[SBDashBoardLockScreenEnvironment isInScreenOffMode]
  -[SBDashBoardLockScreenEnvironment handleLockButtonPress]
  -[SBDashBoardLockScreenEnvironment isShowingMediaControls]
  -[SBDashBoardLockScreenEnvironment startLockScreenFadeInAnimationForSource:]
  -[SBDashBoardLockScreenEnvironment expectsFaceContact]
  -[SBDashBoardLockScreenEnvironment idleTimerController]
  -[SBDashBoardLockScreenEnvironment prepareForUILock]
  -[SBDashBoardLockScreenEnvironment createHomeButtonSuppressAfterUnlockRecognizerForUnlockSource:]
  -[SBDashBoardLockScreenEnvironment hostedAppWillRotateToInterfaceOrientation:]
  -[SBDashBoardLockScreenEnvironment jiggleLockIcon]
  -[SBDashBoardLockScreenEnvironment handleHomeButtonLongPress]
  -[SBDashBoardLockScreenEnvironment hostedAppSceneHandles]
  -[SBDashBoardLockScreenEnvironment handleVolumeDownButtonPress]
  -[SBDashBoardLockScreenEnvironment handleVolumeUpButtonPress]
  -[SBDashBoardLockScreenEnvironment biometricUnlockBehaviorDelegate]
  -[SBDashBoardLockScreenEnvironment handleHomeButtonDoublePress]
  -[SBDashBoardLockScreenEnvironment shouldShowLockStatusBarTime]
  -[SBDashBoardLockScreenEnvironment rootViewController]
  -[SBDashBoardLockScreenEnvironment init]
  -[SBDashBoardLockScreenEnvironment callController]
  -[SBDashBoardLockScreenEnvironment autoUnlockRule]
  -[SBDashBoardLockScreenEnvironment coverSheetViewController]
  -[SBDashBoardLockScreenEnvironment buttonObserver]
  -[SBDashBoardLockScreenEnvironment .cxx_destruct]
  -[SBDashBoardLockScreenEnvironment statusBarTransitionController]
  -[SBDashBoardLockScreenEnvironment initWithCoverSheetViewController:]
  -[SBDashBoardLockScreenEnvironment succinctDescriptionBuilder]
  -[SBDashBoardLockScreenEnvironment noteMenuButtonUp]
  -[SBDashBoardLockScreenEnvironment contentStateProvider]
  -[SBDashBoardLockScreenEnvironment idleTimerProvider]
  -[SBDashBoardLockScreenEnvironment setAuthenticated:]
  -[SBDashBoardLockScreenEnvironment behaviorSuppressor]
  -[SBDashBoardLockScreenEnvironment succinctDescription]
  -[SBDashBoardLockScreenEnvironment passcodeViewPresenter]
  -[SBDashBoardLockScreenEnvironment coverSheetViewController:didChangeActiveBehavior:]
  -[SBDashBoardLockScreenEnvironment buttonEventsHandler]
  -[SBDashBoardLockScreenEnvironment setBiometricUnlockBehaviorDelegate:]
  -[SBDashBoardLockScreenEnvironment customActionStore]
  -[SBDashBoardLockScreenEnvironment backlightLevel]
  -[SBDashBoardLockScreenEnvironment applicationHoster]
  -[SBDashBoardLockScreenEnvironment biometricUnlockBehavior:requestsUnlock:withFeedback:]
  -[SBDashBoardLockScreenEnvironment blockedStateObserver]
  -[SBDashBoardLockScreenEnvironment lockController]
  -[SBDashBoardLockScreenEnvironment handleBiometricEvent:]
  -[SBDashBoardLockScreenEnvironment biometricUnlockBehavior:requestsFeedback:]
  -[SBDashBoardLockScreenEnvironment _setExpectsFaceContact:]
  -[SBDashBoardLockScreenEnvironment biometricUnlockBehavior]
  -[SBDashBoardLockScreenEnvironment noteMenuButtonDown]
  -[SBDashBoardLockScreenEnvironment mediaControlsPresenter]
  -[SBDashBoardLockScreenEnvironment screenWakeAnimationTarget]
  -[SBDashBoardLockScreenEnvironment descriptionWithMultilinePrefix:]
  -[SBDashBoardLockScreenEnvironment proximityBehaviorProvider]
  -[SBDashBoardLockScreenEnvironment setBacklightLevel:]
  -[SBDashBoardLockScreenEnvironment descriptionBuilderWithMultilinePrefix:]
  -[SBDashBoardLockScreenEnvironment backlightController]
  -[SBDashBoardLockScreenEnvironment pluginPresenter]


SBMainDisplayRootWindowScenePresentationBinder : UIRootWindowScenePresentationBinder /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBRootSceneWindow *rootWindow

  // class methods
  +[SBMainDisplayRootWindowScenePresentationBinder sharedInstance]

  // instance methods
  -[SBMainDisplayRootWindowScenePresentationBinder init]
  -[SBMainDisplayRootWindowScenePresentationBinder .cxx_destruct]
  -[SBMainDisplayRootWindowScenePresentationBinder assertDisconnectionFromRenderServerForReason:]
  -[SBMainDisplayRootWindowScenePresentationBinder rootWindow]
  -[SBMainDisplayRootWindowScenePresentationBinder _reconnectToRenderServer]
  -[SBMainDisplayRootWindowScenePresentationBinder _disconnectFromRenderServer]


SBFluidSwitcherGestureManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemGestureRecognizerDelegate, SBTouchTemplateGestureRecognizerDelegate, BSTransactionObserver, BSDescriptionProviding, PTSettingsKeyObserver, SBGrabberTongueDelegate, SBHomeGrabberDelegate, SBHomeGestureParticipantDelegate, SBHomeGrabberPointerClickDelegate, SBPanSystemGestureRecognizerDelegate, SBLayoutStateTransitionObserver, SBMainDisplaySceneLayoutDragAndDropInteractionManagerDelegate, SBFluidSwitcherGestureWorkspaceTransactionDelegate>
 @property  SBFluidSwitcherViewController *mainSwitcherContentController
 @property  SBMainDisplaySceneLayoutViewController *sceneLayoutViewController
 @property  <SBFluidSwitcherGestureManagerDelegate> *delegate
 @property  SBHomeGrabberView *currentHomeGrabberView
 @property  SBAppSwitcherDefaults *appSwitcherDefaults
 @property  SBAppSwitcherSettings *appSwitcherSettings
 @property  SBHomeGestureSettings *homeGestureSettings
 @property  SBFHomeGrabberSettings *homeGrabberSettings
 @property  SBReachabilitySettings *reachabilitySettings
 @property  SBHomeGestureParticipant *homeGestureParticipant
 @property  SBFluidSwitcherPanGestureRecognizer *deckInSwitcherPanGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectBottomEdgePanGestureRecognizer
 @property  SBGrabberTongue *deckGrabberTongue
 @property  SBFluidSwitcherPanGestureRecognizer *activateReachabilityGestureRecognizer
 @property  BOOL usesHomeAffordanceRulesForGrabberTongue
 @property  BOOL interactivelyPresentingTongue
 @property  BOOL playedEdgeProtectHaptic
 @property  UINotificationFeedbackGenerator *edgeProtectFeedbackGenerator
 @property  NSTimer *delayedHomeGrabberUpdateTimer
 @property  UIView *exclusionTrapezoidDebugView
 @property  BOOL shouldRubberbandGrabberViewForReduceMotion
 @property  SBSwitcherForcePressSystemGestureRecognizer *deckSwitcherForcePressRecognizer
 @property  SBFluidScrunchGestureRecognizer *fluidScrunchGestureRecognizer
 @property  SBFluidSwitcherPanGestureRecognizer *clickAndDragHomeGestureRecognizer
 @property  BSMonotonicReferenceTime *lastClickAndDragHomeGestureTimestamp
 @property  UIHoverGestureRecognizer *switcherHoverGestureRecognizer
 @property  SBGrabberTongue *floatingAppGrabberTongue
 @property  SBFluidSwitcherPanGestureRecognizer *swipeUpFloatingAppGestureRecognizer
 @property  SBFluidSwitcherPanGestureRecognizer *moveFloatingApplicationGestureRecognizer
 @property  SBIndirectPanGestureRecognizer *indirectDismissFloatingApplicationGestureRecognizer
 @property  SBFluidScrunchGestureRecognizer *indirectFloatingAppScrunchGestureRecognizer
 @property  SBPanSystemGestureRecognizer *pinFloatingApplicationGestureRecognizer
 @property  SBPanSystemGestureRecognizer *unpinSplitViewApplicationGestureRecognizer
 @property  SBMainDisplaySceneLayoutDragAndDropInteractionManager *dragAndDropInteractionManager
 @property  SBFluidSwitcherGestureWorkspaceTransaction *activeGestureTransaction
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherGestureManager _shouldBeginFloatingApplicationSwipeUpGesture:]
  -[SBFluidSwitcherGestureManager _shouldBeginIndirectHomePanGesture:]
  -[SBFluidSwitcherGestureManager setHomeGestureParticipant:]
  -[SBFluidSwitcherGestureManager _shouldBeginFluidScrunchGesture:]
  -[SBFluidSwitcherGestureManager homeGestureBottomEdgeRecognizer]
  -[SBFluidSwitcherGestureManager grabberTongueUpdatedPulling:withDistance:andVelocity:andGesture:]
  -[SBFluidSwitcherGestureManager pinFloatingApplicationGestureRecognizer]
  -[SBFluidSwitcherGestureManager homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBFluidSwitcherGestureManager grabberTongue:shouldReceiveTouch:]
  -[SBFluidSwitcherGestureManager _shouldFloatingApplicationSwipeUpGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager floatingAppGrabberTongue]
  -[SBFluidSwitcherGestureManager setAppSwitcherSettings:]
  -[SBFluidSwitcherGestureManager dragAndDropInteractionManager:willEndDraggingWindowWithSceneIdentifier:]
  -[SBFluidSwitcherGestureManager grabberTongueOrPullEnabled:forGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _shouldReachabilityGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager fluidSwitcherGestureTransaction:didBeginGesture:]
  -[SBFluidSwitcherGestureManager grabberTongueDidPresentInteractively:withDistance:andVelocity:]
  -[SBFluidSwitcherGestureManager grabberTongueWillPresentInteractively:withDistance:andVelocity:]
  -[SBFluidSwitcherGestureManager grabberTongue:shouldShowTongueOnFirstSwipeWithEdgeLocation:]
  -[SBFluidSwitcherGestureManager shouldSuppressTongueViewForGrabberTongue:]
  -[SBFluidSwitcherGestureManager appSwitcherDefaults]
  -[SBFluidSwitcherGestureManager transactionDidComplete:]
  -[SBFluidSwitcherGestureManager settings:changedValueForKey:]
  -[SBFluidSwitcherGestureManager shouldRubberbandGrabberViewForReduceMotion]
  -[SBFluidSwitcherGestureManager grabberTongueBeganPulling:withDistance:andVelocity:andGesture:]
  -[SBFluidSwitcherGestureManager grabberTongue:shouldAllowSecondSwipeWithEdgeLocation:]
  -[SBFluidSwitcherGestureManager grabberTongueEndedPulling:withDistance:andVelocity:andGesture:]
  -[SBFluidSwitcherGestureManager setIndirectDismissFloatingApplicationGestureRecognizer:]
  -[SBFluidSwitcherGestureManager shouldAllowThinStyleForHomeGrabberView:]
  -[SBFluidSwitcherGestureManager _startFluidSwitcherTransactionForGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _currentUnlockedEnvironmentMode]
  -[SBFluidSwitcherGestureManager setHomeGrabberSettings:]
  -[SBFluidSwitcherGestureManager interactivelyPresentingTongue]
  -[SBFluidSwitcherGestureManager setDeckSwitcherForcePressRecognizer:]
  -[SBFluidSwitcherGestureManager activeGestureTransaction]
  -[SBFluidSwitcherGestureManager fluidScrunchGestureRecognizer]
  -[SBFluidSwitcherGestureManager layoutStateTransitionCoordinator:transitionDidEndWithTransitionContext:]
  -[SBFluidSwitcherGestureManager setAppSwitcherDefaults:]
  -[SBFluidSwitcherGestureManager viewForSystemGestureRecognizer:]
  -[SBFluidSwitcherGestureManager homeGestureParticipant]
  -[SBFluidSwitcherGestureManager reachabilitySettings]
  -[SBFluidSwitcherGestureManager playedEdgeProtectHaptic]
  -[SBFluidSwitcherGestureManager setMoveFloatingApplicationGestureRecognizer:]
  -[SBFluidSwitcherGestureManager shouldAllowAutoHideForHomeGrabberView:]
  -[SBFluidSwitcherGestureManager delayedHomeGrabberUpdateTimer]
  -[SBFluidSwitcherGestureManager setEdgeProtectFeedbackGenerator:]
  -[SBFluidSwitcherGestureManager usesHomeAffordanceRulesForGrabberTongue]
  -[SBFluidSwitcherGestureManager setExclusionTrapezoidDebugView:]
  -[SBFluidSwitcherGestureManager sceneLayoutViewController]
  -[SBFluidSwitcherGestureManager indirectFloatingAppScrunchGestureRecognizer]
  -[SBFluidSwitcherGestureManager dragAndDropInteractionManager]
  -[SBFluidSwitcherGestureManager dragAndDropInteractionManager:didEndGesture:]
  -[SBFluidSwitcherGestureManager _shouldBeginSplitViewApplicationUnpinGesture:]
  -[SBFluidSwitcherGestureManager _currentFloatingAppLayout]
  -[SBFluidSwitcherGestureManager failMultitaskingGesturesForReason:]
  -[SBFluidSwitcherGestureManager setDragAndDropInteractionManager:]
  -[SBFluidSwitcherGestureManager customGestureRecognizerForGrabberTongue:]
  -[SBFluidSwitcherGestureManager _currentLayoutState]
  -[SBFluidSwitcherGestureManager _shouldBeginFloatingApplicationPresentGesture:]
  -[SBFluidSwitcherGestureManager homeGrabberSettings]
  -[SBFluidSwitcherGestureManager grabberTongueCanceledPulling:withDistance:andVelocity:andGesture:]
  -[SBFluidSwitcherGestureManager setPlayedEdgeProtectHaptic:]
  -[SBFluidSwitcherGestureManager setShouldRubberbandGrabberViewForReduceMotion:]
  -[SBFluidSwitcherGestureManager _configureScrunchGesture]
  -[SBFluidSwitcherGestureManager deckInSwitcherPanGestureRecognizer]
  -[SBFluidSwitcherGestureManager additionalEdgeSpacingForHomeGrabberView:]
  -[SBFluidSwitcherGestureManager setSwipeUpFloatingAppGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setUnpinSplitViewApplicationGestureRecognizer:]
  -[SBFluidSwitcherGestureManager activateReachabilityGestureRecognizer]
  -[SBFluidSwitcherGestureManager _updateHomeGrabberWithAnimationMode:]
  -[SBFluidSwitcherGestureManager setReachabilitySettings:]
  -[SBFluidSwitcherGestureManager _handleDeckSwitcherPanGesture:]
  -[SBFluidSwitcherGestureManager _shouldBeginFloatingApplicationMoveGesture:]
  -[SBFluidSwitcherGestureManager _handleDeckSwitcherForcePressGesture:]
  -[SBFluidSwitcherGestureManager _layoutElementViewControllerAtLocation:]
  -[SBFluidSwitcherGestureManager setSceneLayoutViewController:]
  -[SBFluidSwitcherGestureManager takeHiddenAssertionForHomeGrabber:]
  -[SBFluidSwitcherGestureManager completeGestureWithTransitionRequest:]
  -[SBFluidSwitcherGestureManager setActiveGestureTransaction:]
  -[SBFluidSwitcherGestureManager grabberTongueWillPresent:]
  -[SBFluidSwitcherGestureManager appSwitcherSettings]
  -[SBFluidSwitcherGestureManager swipeUpFloatingAppGestureRecognizer]
  -[SBFluidSwitcherGestureManager _isEdgeLocationInHomeAffordanceRegion:]
  -[SBFluidSwitcherGestureManager _handleSwitcherPanGestureBegan:]
  -[SBFluidSwitcherGestureManager _updateSwitcherBottomEdgeGesturePresence]
  -[SBFluidSwitcherGestureManager _shouldFloatingApplicationMoveGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager dragAndDropInteractionManager:didBeginGesture:]
  -[SBFluidSwitcherGestureManager _hideGrabberAnimated:]
  -[SBFluidSwitcherGestureManager _edgeLocationIsOutsideFloatingApplicationGrabberFreeRegion:]
  -[SBFluidSwitcherGestureManager _handleFluidGesture:]
  -[SBFluidSwitcherGestureManager _shouldSuppressEdgeProtect]
  -[SBFluidSwitcherGestureManager dealloc]
  -[SBFluidSwitcherGestureManager layoutStateTransitionCoordinator:transitionDidBeginWithTransitionContext:]
  -[SBFluidSwitcherGestureManager moveFloatingApplicationGestureRecognizer]
  -[SBFluidSwitcherGestureManager _shouldBeginIndirectFloatingAppScrunchGesture:]
  -[SBFluidSwitcherGestureManager .cxx_destruct]
  -[SBFluidSwitcherGestureManager switcherHoverGestureRecognizer]
  -[SBFluidSwitcherGestureManager _handleClickAndDragHomeGesture:]
  -[SBFluidSwitcherGestureManager relinquishHiddenAssertionForHomeGrabber:]
  -[SBFluidSwitcherGestureManager _shouldAllowDeckBottomEdgeGestureToRecognizeFromEdges:]
  -[SBFluidSwitcherGestureManager _shouldBeginFloatingApplicationPinGesture:]
  -[SBFluidSwitcherGestureManager currentHomeGrabberView]
  -[SBFluidSwitcherGestureManager _shouldSplitViewApplicationUnpinGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager fluidSwitcherGestureTransaction:didEndGesture:]
  -[SBFluidSwitcherGestureManager homeGestureSettings]
  -[SBFluidSwitcherGestureManager gestureRecognizerShouldBegin:]
  -[SBFluidSwitcherGestureManager indirectPanGestureRecognizerForGrabberTongue:]
  -[SBFluidSwitcherGestureManager mainSwitcherContentController]
  -[SBFluidSwitcherGestureManager configureIndirectBottomEdgePanGestureRecognizer]
  -[SBFluidSwitcherGestureManager succinctDescriptionBuilder]
  -[SBFluidSwitcherGestureManager _shouldBeginDeckForcePressGesture:]
  -[SBFluidSwitcherGestureManager _firstFloatingAppLayout]
  -[SBFluidSwitcherGestureManager _handleSwitcherPanGestureChanged:]
  -[SBFluidSwitcherGestureManager _shouldBeginReachabilityGesture:]
  -[SBFluidSwitcherGestureManager _updateExclusionTrapezoidDebugView]
  -[SBFluidSwitcherGestureManager _shouldFloatingApplicationPinGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager initWithMainSwitcherContentController:sceneLayoutViewController:delegate:]
  -[SBFluidSwitcherGestureManager _shouldAllowFloatingApplicationGesture:gestureType:failureReason:]
  -[SBFluidSwitcherGestureManager deckSwitcherForcePressRecognizer]
  -[SBFluidSwitcherGestureManager setDeckGrabberTongue:]
  -[SBFluidSwitcherGestureManager setFloatingAppGrabberTongue:]
  -[SBFluidSwitcherGestureManager _configureTransitionRequest:forGestureBegin:]
  -[SBFluidSwitcherGestureManager setIndirectFloatingAppScrunchGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setHomeGestureSettings:]
  -[SBFluidSwitcherGestureManager setInteractivelyPresentingTongue:]
  -[SBFluidSwitcherGestureManager setPinFloatingApplicationGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _gestureTypeForGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _handleFloatingAppPresentGesture:]
  -[SBFluidSwitcherGestureManager _fluidSwitcherGestureTransactionClassForGestureType:]
  -[SBFluidSwitcherGestureManager succinctDescription]
  -[SBFluidSwitcherGestureManager _handleSwitcherPanGestureEnded:]
  -[SBFluidSwitcherGestureManager homeGrabberViewDidReceiveClick:]
  -[SBFluidSwitcherGestureManager _shouldClickAndDragHomeGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager dragAndDropInteractionManager:displayItemForDraggingWindowWithGestureRecognizer:]
  -[SBFluidSwitcherGestureManager dragAndDropInteractionManager:sourceViewProviderForDraggingWindowWithGestureRecognizer:]
  -[SBFluidSwitcherGestureManager indirectPanSystemGestureTypeForGrabberTongue:]
  -[SBFluidSwitcherGestureManager _updateDeckSwitcherForcePressGesturePresence]
  -[SBFluidSwitcherGestureManager deckGrabberTongue]
  -[SBFluidSwitcherGestureManager _handleScrunchGesture:]
  -[SBFluidSwitcherGestureManager indirectBottomEdgePanGestureRecognizer]
  -[SBFluidSwitcherGestureManager _configureFloatingApplicationGestureRecognizers]
  -[SBFluidSwitcherGestureManager _shouldDeckInSwitcherPanGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager dragAndDropInteractionManager:didBeginDraggingWindowWithSceneIdentifier:]
  -[SBFluidSwitcherGestureManager dragAndDropInteractionManager:didUpdateGesture:]
  -[SBFluidSwitcherGestureManager lastClickAndDragHomeGestureTimestamp]
  -[SBFluidSwitcherGestureManager _handleSwitcherGestureBegan:]
  -[SBFluidSwitcherGestureManager _handleWindowDragGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setDeckInSwitcherPanGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _shouldBeginBottomEdgePanGesture:]
  -[SBFluidSwitcherGestureManager _deviceApplicationSceneEntityForFloatingApplicationGrabberTongue]
  -[SBFluidSwitcherGestureManager grabberTongueWillDismiss:]
  -[SBFluidSwitcherGestureManager _shouldBeginClickAndDragHomeGesture:]
  -[SBFluidSwitcherGestureManager setIndirectBottomEdgePanGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _shouldBeginDeckInSwitcherPanGesture:]
  -[SBFluidSwitcherGestureManager _shouldIndirectFloatingAppScrunchGesture:receiveTouch:]
  -[SBFluidSwitcherGestureManager _floatingApplicationBounds]
  -[SBFluidSwitcherGestureManager setDelegate:]
  -[SBFluidSwitcherGestureManager exclusionTrapezoidDebugView]
  -[SBFluidSwitcherGestureManager setClickAndDragHomeGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setDelayedHomeGrabberUpdateTimer:]
  -[SBFluidSwitcherGestureManager _isTransactionRunningForGestureRecognizer:]
  -[SBFluidSwitcherGestureManager indirectDismissFloatingApplicationGestureRecognizer]
  -[SBFluidSwitcherGestureManager _shouldProtectEdgeLocation:]
  -[SBFluidSwitcherGestureManager setFluidScrunchGestureRecognizer:]
  -[SBFluidSwitcherGestureManager invalidate]
  -[SBFluidSwitcherGestureManager setMainSwitcherContentController:]
  -[SBFluidSwitcherGestureManager setActivateReachabilityGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setSwitcherHoverGestureRecognizer:]
  -[SBFluidSwitcherGestureManager setUsesHomeAffordanceRulesForGrabberTongue:]
  -[SBFluidSwitcherGestureManager gestureRecognizer:shouldRequireFailureOfGestureRecognizer:]
  -[SBFluidSwitcherGestureManager _updateReachabilityGestureSettings]
  -[SBFluidSwitcherGestureManager unpinSplitViewApplicationGestureRecognizer]
  -[SBFluidSwitcherGestureManager gestureRecognizer:shouldReceiveTouch:]
  -[SBFluidSwitcherGestureManager _setUpGestureRecognizers]
  -[SBFluidSwitcherGestureManager delegate]
  -[SBFluidSwitcherGestureManager descriptionWithMultilinePrefix:]
  -[SBFluidSwitcherGestureManager edgeProtectFeedbackGenerator]
  -[SBFluidSwitcherGestureManager setCurrentHomeGrabberView:]
  -[SBFluidSwitcherGestureManager fluidSwitcherGestureTransaction:didUpdateGesture:]
  -[SBFluidSwitcherGestureManager descriptionBuilderWithMultilinePrefix:]
  -[SBFluidSwitcherGestureManager _updateDeckSwitcherInSwitcherAndReachabilityGesturePresence]
  -[SBFluidSwitcherGestureManager clickAndDragHomeGestureRecognizer]
  -[SBFluidSwitcherGestureManager setLastClickAndDragHomeGestureTimestamp:]
  -[SBFluidSwitcherGestureManager _updateHomeGestureParticipant]
  -[SBFluidSwitcherGestureManager _shouldSuppressEdgeProtectToAllowSwipesImmediatelyAfterTransition]


SBApplicationSceneUpdateTransaction : FBApplicationUpdateScenesTransaction /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  SBApplicationSceneEntity *applicationSceneEntity
 @property  NSString *sceneIdentifier
 @property  UIApplicationSceneSettings *sceneSettings
 @property  BOOL shouldSendActivationResult

  // instance methods
  -[SBApplicationSceneUpdateTransaction sceneSettings]
  -[SBApplicationSceneUpdateTransaction _performSynchronizedCommit:]
  -[SBApplicationSceneUpdateTransaction _customizedDescriptionProperties]
  -[SBApplicationSceneUpdateTransaction _didComplete]
  -[SBApplicationSceneUpdateTransaction _sendActivationResultWithError:]
  -[SBApplicationSceneUpdateTransaction .cxx_destruct]
  -[SBApplicationSceneUpdateTransaction shouldSendActivationResult]
  -[SBApplicationSceneUpdateTransaction applicationSceneEntity]
  -[SBApplicationSceneUpdateTransaction initWithApplicationSceneEntity:transitionRequest:]
  -[SBApplicationSceneUpdateTransaction sceneIdentifier]
  -[SBApplicationSceneUpdateTransaction setShouldSendActivationResult:]


SBDashBoardSetupView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <CAAnimationDelegate>
 @property  CSHomeAffordanceView *homeAffordanceView
 @property  UIView *activationInfoView
 @property  UIView *regulatoryInfoView
 @property  _UILegibilitySettings *legibilitySettings
 @property  UIButton *infoButton
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardSetupView animationDidStop:finished:]
  -[SBDashBoardSetupView _updateLegibilitySettings]
  -[SBDashBoardSetupView legibilitySettings]
  -[SBDashBoardSetupView _addTitleLabel]
  -[SBDashBoardSetupView initWithFrame:]
  -[SBDashBoardSetupView _setupConstraints]
  -[SBDashBoardSetupView dealloc]
  -[SBDashBoardSetupView .cxx_destruct]
  -[SBDashBoardSetupView setLegibilitySettings:]
  -[SBDashBoardSetupView infoButton]
  -[SBDashBoardSetupView layoutSubviews]
  -[SBDashBoardSetupView homeAffordanceView]
  -[SBDashBoardSetupView setInfoButtonVisible:animated:withDelay:]
  -[SBDashBoardSetupView initWithFrame:usingHomeAffordance:isStoreRestricted:isSecurityResearchDevice:]
  -[SBDashBoardSetupView animateComponents:toActive:withCompletion:]
  -[SBDashBoardSetupView setTitleString:forLanguage:]
  -[SBDashBoardSetupView setStoreRestrictedString:forLanguage:]
  -[SBDashBoardSetupView setCallToActionString:forLanguage:]
  -[SBDashBoardSetupView setActivationInfoView:]
  -[SBDashBoardSetupView setRegulatoryInfoView:]
  -[SBDashBoardSetupView _addSecurityResearchLabels]
  -[SBDashBoardSetupView _addInfoButton]
  -[SBDashBoardSetupView _addStoreRestrictedLabel]
  -[SBDashBoardSetupView _addHomeAffordanceCallToAction]
  -[SBDashBoardSetupView _addHomeAffordance]
  -[SBDashBoardSetupView _addHomeButtonCallToAction]
  -[SBDashBoardSetupView _adjustTitleVisibilityForInfoViews]
  -[SBDashBoardSetupView _setupActivationInfoConstraintsIfNeeded]
  -[SBDashBoardSetupView _animateView:toActive:withDispatchGroup:]
  -[SBDashBoardSetupView _animateHomeButtonCallToActionToActive:withDispatchGroup:]
  -[SBDashBoardSetupView _animateHomeAffordanceCallToActionToActive:withDispatchGroup:]
  -[SBDashBoardSetupView _animateHomeAffordanceToActive:withDispatchGroup:]
  -[SBDashBoardSetupView _layoutRegulatoryInfo]
  -[SBDashBoardSetupView _layoutActivationInfoView]
  -[SBDashBoardSetupView _layoutHomeButtonCallToAction]
  -[SBDashBoardSetupView _layoutHomeAffordanceCallToAction]
  -[SBDashBoardSetupView _layoutHomeAffordance]
  -[SBDashBoardSetupView _removeResetAnimationForKeyPath:onLayer:]
  -[SBDashBoardSetupView _removeNormalAnimationForKeyPath:onLayer:]
  -[SBDashBoardSetupView _addResetAnimationForKeyPath:onLayer:dispatchGroup:]
  -[SBDashBoardSetupView setHomeAffordanceView:]
  -[SBDashBoardSetupView activationInfoView]
  -[SBDashBoardSetupView regulatoryInfoView]


SBDismissSiriSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBDismissSiriSwitcherModifier handleGestureEvent:]
  -[SBDismissSiriSwitcherModifier _eventResponseForGestureModifierEvent:]


SBApplicationSceneEntity : SBWorkspaceEntity <SBProcessSettings>
 @property  SBProcessSettings *processSettings
 @property  SBApplicationSceneHandle *sceneHandle
 @property  SBApplication *application
 @property  NSSet *actions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationSceneEntity flagForProcessSetting:]
  -[SBApplicationSceneEntity clearProcessSettings]
  -[SBApplicationSceneEntity _initWithSceneHandle:]
  -[SBApplicationSceneEntity copyProcessSettings]
  -[SBApplicationSceneEntity objectForProcessSetting:]
  -[SBApplicationSceneEntity setObject:forProcessSetting:]
  -[SBApplicationSceneEntity copyWithZone:]
  -[SBApplicationSceneEntity actions]
  -[SBApplicationSceneEntity translateActivationSettingsToActions]
  -[SBApplicationSceneEntity application]
  -[SBApplicationSceneEntity isApplicationSceneEntity]
  -[SBApplicationSceneEntity entityGenerator]
  -[SBApplicationSceneEntity _initializeWithSceneHandle:]
  -[SBApplicationSceneEntity sceneHandle]
  -[SBApplicationSceneEntity setFlag:forProcessSetting:]
  -[SBApplicationSceneEntity processSettings]
  -[SBApplicationSceneEntity .cxx_destruct]
  -[SBApplicationSceneEntity applicationSceneEntity]
  -[SBApplicationSceneEntity removeAllActions]
  -[SBApplicationSceneEntity _supportsLayoutRole:]
  -[SBApplicationSceneEntity applyProcessSettings:]
  -[SBApplicationSceneEntity boolForProcessSetting:]
  -[SBApplicationSceneEntity isEqual:]
  -[SBApplicationSceneEntity viewControllerClass]
  -[SBApplicationSceneEntity removeActions:]
  -[SBApplicationSceneEntity addActions:]
  -[SBApplicationSceneEntity descriptionBuilderWithMultilinePrefix:]


SBPerformTransitionSwitcherEventResponse : SBSwitcherModifierEventResponse
 @property  SBSwitcherTransitionRequest *transitionRequest
 @property  BOOL gestureInitiated

  // instance methods
  -[SBPerformTransitionSwitcherEventResponse .cxx_destruct]
  -[SBPerformTransitionSwitcherEventResponse type]
  -[SBPerformTransitionSwitcherEventResponse isGestureInitiated]
  -[SBPerformTransitionSwitcherEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBPerformTransitionSwitcherEventResponse transitionRequest]
  -[SBPerformTransitionSwitcherEventResponse initWithTransitionRequest:gestureInitiated:]


SBSystemGestureWorkspaceTransaction : SBMainWorkspaceTransaction
 @property  UIGestureRecognizer *gestureRecognizer
 @property  long long completionType

  // instance methods
  -[SBSystemGestureWorkspaceTransaction setGestureRecognizer:]
  -[SBSystemGestureWorkspaceTransaction _didComplete]
  -[SBSystemGestureWorkspaceTransaction gestureRecognizer]
  -[SBSystemGestureWorkspaceTransaction initWithTransitionRequest:]
  -[SBSystemGestureWorkspaceTransaction completionType]
  -[SBSystemGestureWorkspaceTransaction _setupAnimation]
  -[SBSystemGestureWorkspaceTransaction _begin]
  -[SBSystemGestureWorkspaceTransaction .cxx_destruct]
  -[SBSystemGestureWorkspaceTransaction _beginAnimation]
  -[SBSystemGestureWorkspaceTransaction _finishWithCompletionType:]
  -[SBSystemGestureWorkspaceTransaction finishWithCompletionType:]
  -[SBSystemGestureWorkspaceTransaction systemGestureStateChanged:]
  -[SBSystemGestureWorkspaceTransaction shouldSuppressMedusaKeyboardDuringGesture]


SBMainWorkspaceLayoutStateContingencyPlan : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBMainWorkspaceLayoutStateContingencyPlan transitionContextForLayoutContext:failedEntities:]
  -[SBMainWorkspaceLayoutStateContingencyPlan transitionContextToUndoTransitionContext:]


SBDragAndDropGestureSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBDragAndDropGestureSwitcherModifier scaleForIndex:]
  -[SBDragAndDropGestureSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDragAndDropGestureSwitcherModifier handleMainTransitionEvent:]
  -[SBDragAndDropGestureSwitcherModifier frameForIndex:]
  -[SBDragAndDropGestureSwitcherModifier containerViewBounds]
  -[SBDragAndDropGestureSwitcherModifier darkeningAlphaForIndex:]
  -[SBDragAndDropGestureSwitcherModifier handleGestureEvent:]
  -[SBDragAndDropGestureSwitcherModifier initWithGestureID:floatingSwitcherVisible:floatingConfiguration:interfaceOrientation:]
  -[SBDragAndDropGestureSwitcherModifier _isPlatterPreviewIntersectingFloatingApplication]


SBUIMainScreenAnimationController : SBUIWorkspaceAnimationController
 @property  <BSInvalidatable> *colorSamplingAssertion
 @property  <BSInvalidatable> *wallpaperRequiredAssertion
 @property  <BSInvalidatable> *bannerSuppressionAssertion
 @property  SBWorkspaceTransitionRequest *transitionRequest
 @property  NSSet *toApplicationSceneEntities
 @property  SBDeviceApplicationSceneEntity *toApplicationSceneEntity
 @property  NSSet *fromApplicationSceneEntities
 @property  SBDeviceApplicationSceneEntity *fromApplicationSceneEntity

  // instance methods
  -[SBUIMainScreenAnimationController _begin]
  -[SBUIMainScreenAnimationController .cxx_destruct]
  -[SBUIMainScreenAnimationController _shouldDismissBanner]
  -[SBUIMainScreenAnimationController setBannerSuppressionAssertion:]
  -[SBUIMainScreenAnimationController _cleanupAnimation]
  -[SBUIMainScreenAnimationController bannerSuppressionAssertion]
  -[SBUIMainScreenAnimationController initWithTransitionContextProvider:]
  -[SBUIMainScreenAnimationController transitionRequest]
  -[SBUIMainScreenAnimationController _getTransitionWindow]
  -[SBUIMainScreenAnimationController initWithWorkspaceTransitionRequest:]
  -[SBUIMainScreenAnimationController __startAnimation]
  -[SBUIMainScreenAnimationController __wantsInitialProgressStateChange]
  -[SBUIMainScreenAnimationController toApplicationSceneEntity]
  -[SBUIMainScreenAnimationController fromApplicationSceneEntity]
  -[SBUIMainScreenAnimationController _primaryAppOrAnyAppFromSet:]
  -[SBUIMainScreenAnimationController _dismissBannerAnimated:]
  -[SBUIMainScreenAnimationController setColorSamplingAssertion:]
  -[SBUIMainScreenAnimationController setWallpaperRequiredAssertion:]
  -[SBUIMainScreenAnimationController colorSamplingAssertion]
  -[SBUIMainScreenAnimationController wallpaperRequiredAssertion]


SBProximitySensorManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIActiveOrientationObserver>
 @property  BOOL objectInProximity
 @property  BOOL proximityDetectionEnabled
 @property  BOOL proximityDetectionPermitted
 @property  SpringBoard *interfaceOrientationProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBProximitySensorManager _interfaceOrientationProvider]
  -[SBProximitySensorManager activeInterfaceOrientationDidChangeToOrientation:willAnimateWithDuration:fromOrientation:]
  -[SBProximitySensorManager _clientsWantDetectionEnabled]
  -[SBProximitySensorManager init]
  -[SBProximitySensorManager isObjectInProximity]
  -[SBProximitySensorManager _reloadDefaults]
  -[SBProximitySensorManager _proximityDidChange:]
  -[SBProximitySensorManager initWithHIDInterface:hardwareDefaults:interfaceOrientationProvider:]
  -[SBProximitySensorManager .cxx_destruct]
  -[SBProximitySensorManager _setProximityDetectionPermitted:]
  -[SBProximitySensorManager _updateProxState]
  -[SBProximitySensorManager processHIDEvent:]
  -[SBProximitySensorManager _enableProx]
  -[SBProximitySensorManager _destroy]
  -[SBProximitySensorManager isProximityDetectionEnabled]
  -[SBProximitySensorManager _setInterfaceOrientationProvider:]
  -[SBProximitySensorManager removeObserver:]
  -[SBProximitySensorManager _setProximityDetectionEnabled:]
  -[SBProximitySensorManager addObserver:]
  -[SBProximitySensorManager client:wantsProximityDetectionEnabled:]
  -[SBProximitySensorManager activeInterfaceOrientationWillChangeToOrientation:]
  -[SBProximitySensorManager _disableProx]
  -[SBProximitySensorManager _setObjectInProximity:]
  -[SBProximitySensorManager resetProximityCalibration]
  -[SBProximitySensorManager isProximityDetectionPermitted]


SBVolumeHardwareButtonActions : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBVolumeHardwareButtonActions removeVolumePressBandit:]
  -[SBVolumeHardwareButtonActions .cxx_destruct]
  -[SBVolumeHardwareButtonActions cancelVolumePress]
  -[SBVolumeHardwareButtonActions addVolumePressBandit:]
  -[SBVolumeHardwareButtonActions volumeIncreasePressDownWithModifiers:]
  -[SBVolumeHardwareButtonActions volumeIncreasePressUp]
  -[SBVolumeHardwareButtonActions volumeDecreasePressDownWithModifiers:]
  -[SBVolumeHardwareButtonActions volumeDecreasePressUp]
  -[SBVolumeHardwareButtonActions _handleVolumeButtonDownForIncrease:modifiers:]
  -[SBVolumeHardwareButtonActions _handleVolumeButtonUpForIncrease:]
  -[SBVolumeHardwareButtonActions _handleVolumeIncreaseUp]
  -[SBVolumeHardwareButtonActions _handleVolumeDecreaseUp]
  -[SBVolumeHardwareButtonActions _sendVolumeButtonToSBUIControllerForIncrease:down:]
  -[SBVolumeHardwareButtonActions _launchVolumeSettings]
  -[SBVolumeHardwareButtonActions _sendBanditsVolumeIncreased]
  -[SBVolumeHardwareButtonActions _sendBanditsVolumeDecreased]
  -[SBVolumeHardwareButtonActions _sendVolumeButtonDownToSpringBoardInternalUIForIncrease:]
  -[SBVolumeHardwareButtonActions _sendVolumeButtonDownToLegacyRegisteredClientsForIncrease:]
  -[SBVolumeHardwareButtonActions _sendVolumeButtonDownToSBUIControllerForIncrease:]


SBDashBoardSpotlightPresenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SPUIRemoteSearchViewDelegate, SBFLegibilitySettingsProviderDelegate, SBDashBoardSpotlightViewControllerDelegate, CSSpotlightPresenting>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardSpotlightPresenter .cxx_destruct]
  -[SBDashBoardSpotlightPresenter dismissSearchView]
  -[SBDashBoardSpotlightPresenter providerLegibilitySettingsChanged:]
  -[SBDashBoardSpotlightPresenter dismissSpotlightWithCompletion:]
  -[SBDashBoardSpotlightPresenter launchSpotlightForSourceViewController:interactive:completion:]
  -[SBDashBoardSpotlightPresenter spotlightMultiplexingLevelForSpotlightViewController:]
  -[SBDashBoardSpotlightPresenter remoteSearchViewPresentationSourceForSpotlightViewController:]
  -[SBDashBoardSpotlightPresenter homeGestureParticipantIdentifierForSpotlightViewController:]
  -[SBDashBoardSpotlightPresenter initWithPresenterViewController:spotlightMultiplexingLevel:remoteSearchViewPresentationSource:homeGestureParticipantIdentifier:]
  -[SBDashBoardSpotlightPresenter createSpotlightLegiblitySettingsProvider]
  -[SBDashBoardSpotlightPresenter dismissSpotlight]
  -[SBDashBoardSpotlightPresenter launchSpotlightForSourceViewController:interactive:]


SBHomeScreenNagAlert : SBDismissOnlyAlertItem
  // instance methods
  -[SBHomeScreenNagAlert dismissOnLock]
  -[SBHomeScreenNagAlert shouldShowInLockScreen]


SBFloatingDockWindowLevelAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  unsigned long priority
 @property  double level
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFloatingDockWindowLevelAssertion level]
  -[SBFloatingDockWindowLevelAssertion dealloc]
  -[SBFloatingDockWindowLevelAssertion .cxx_destruct]
  -[SBFloatingDockWindowLevelAssertion succinctDescriptionBuilder]
  -[SBFloatingDockWindowLevelAssertion succinctDescription]
  -[SBFloatingDockWindowLevelAssertion priority]
  -[SBFloatingDockWindowLevelAssertion invalidate]
  -[SBFloatingDockWindowLevelAssertion reason]
  -[SBFloatingDockWindowLevelAssertion descriptionWithMultilinePrefix:]
  -[SBFloatingDockWindowLevelAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBFloatingDockWindowLevelAssertion initWithPriority:level:reason:]


SBInlineAppExposeWorkspaceEntity : SBWorkspaceEntity
 @property  NSString *bundleIdentifier

  // instance methods
  -[SBInlineAppExposeWorkspaceEntity initWithBundleIdentifier:]
  -[SBInlineAppExposeWorkspaceEntity copyWithZone:]
  -[SBInlineAppExposeWorkspaceEntity entityGenerator]
  -[SBInlineAppExposeWorkspaceEntity .cxx_destruct]
  -[SBInlineAppExposeWorkspaceEntity _supportsLayoutRole:]
  -[SBInlineAppExposeWorkspaceEntity wantsExclusiveForeground]
  -[SBInlineAppExposeWorkspaceEntity isInlineAppExposeWorkspaceEntity]
  -[SBInlineAppExposeWorkspaceEntity supportsPresentationAtAnySize]
  -[SBInlineAppExposeWorkspaceEntity inlineAppExposeWorkspaceEntity]
  -[SBInlineAppExposeWorkspaceEntity isEqual:]
  -[SBInlineAppExposeWorkspaceEntity viewControllerClass]
  -[SBInlineAppExposeWorkspaceEntity bundleIdentifier]


SBBookmark : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBLeafIconDataSource>
 @property  UIWebClip *webClip
 @property  NSString *identifier
 @property  NSURL *launchURL
 @property  NSString *uniqueIdentifier
 @property  NSString *configurationStorageIdentifier
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBookmark bookmarkWithWebClip:]

  // instance methods
  -[SBBookmark iconCompleteUninstall:]
  -[SBBookmark priorityForIcon:]
  -[SBBookmark icon:launchFromLocation:context:]
  -[SBBookmark icon:imageWithInfo:]
  -[SBBookmark isTimedOutForIcon:]
  -[SBBookmark icon:displayNameForLocation:]
  -[SBBookmark supportedGridSizeClassesForIcon:]
  -[SBBookmark dealloc]
  -[SBBookmark .cxx_destruct]
  -[SBBookmark identifier]
  -[SBBookmark uniqueIdentifier]
  -[SBBookmark webClip]
  -[SBBookmark icon:unmaskedImageWithInfo:]
  -[SBBookmark iconSupportsUninstall:]
  -[SBBookmark isUninstallSupported]
  -[SBBookmark launchURL]
  -[SBBookmark initWithWebClip:]
  -[SBBookmark _deviceUnlockedForFirstTime:]


SBTodayWidgetXCodeDebuggingUtility : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBTodayWidgetXCodeDebuggingUtility init]
  -[SBTodayWidgetXCodeDebuggingUtility .cxx_destruct]
  -[SBTodayWidgetXCodeDebuggingUtility launchTodayViewFromCurrentContextWithCompletion:]
  -[SBTodayWidgetXCodeDebuggingUtility _reallyLaunchTodayViewFromCurrentContextWithCompletion:]


SBRoundedRectBorderView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UIColor *borderColor
 @property  double borderWidth
 @property  double cornerRadius

  // instance methods
  -[SBRoundedRectBorderView setBorderColor:]
  -[SBRoundedRectBorderView initWithFrame:]
  -[SBRoundedRectBorderView setCornerRadius:]
  -[SBRoundedRectBorderView borderWidth]
  -[SBRoundedRectBorderView setBorderWidth:]
  -[SBRoundedRectBorderView borderColor]
  -[SBRoundedRectBorderView cornerRadius]


SBSceneViewAppIconView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UILabel *label
 @property  PLPlatterView *shadowView
 @property  SBIconImageView *imageView

  // instance methods
  -[SBSceneViewAppIconView imageView]
  -[SBSceneViewAppIconView .cxx_destruct]
  -[SBSceneViewAppIconView label]
  -[SBSceneViewAppIconView shadowView]
  -[SBSceneViewAppIconView sizeThatFits:]
  -[SBSceneViewAppIconView layoutSubviews]
  -[SBSceneViewAppIconView initWithIcon:]


SBGridSwitcherViewController : SBFluidSwitcherViewController <SBFSpringLoadedInteractionBehaviorDelegate, SBFSpringLoadedInteractionEffectDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBGridSwitcherViewController viewDidLoad]
  -[SBGridSwitcherViewController targetViewForSpringLoadingEffectForView:]
  -[SBGridSwitcherViewController _setupSpringLoadingSupport]
  -[SBGridSwitcherViewController targetItemForSpringLoadingInteractionInView:atLocation:forDropSession:]


SBDashBoardPluginView : CSCoverSheetViewBase /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} presentationRegion

  // instance methods
  -[SBDashBoardPluginView presentationRegions]
  -[SBDashBoardPluginView presentationRegion]
  -[SBDashBoardPluginView setPresentationRegion:]


SBDashBoardOrientationController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSOrientationUpdateControlling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardOrientationController cancelOrientationUpdateDeferral]
  -[SBDashBoardOrientationController .cxx_destruct]
  -[SBDashBoardOrientationController deferOrientationUpdatesWithReason:]
  -[SBDashBoardOrientationController noteInterfaceOrientationChanged:duration:logMessage:]


SBSpuriousScreenUndimmingAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBSpuriousScreenUndimmingAssertion _accessListWithBlock:]
  +[SBSpuriousScreenUndimmingAssertion isAnyActive]

  // instance methods
  -[SBSpuriousScreenUndimmingAssertion dealloc]
  -[SBSpuriousScreenUndimmingAssertion .cxx_destruct]
  -[SBSpuriousScreenUndimmingAssertion initWithIdentifier:]
  -[SBSpuriousScreenUndimmingAssertion invalidate]


SBPanSystemGestureRecognizer : UIPanGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  NSTimer *noHysterisisCancellationTimer
 @property  <SBPanSystemGestureRecognizerDelegate> *delegate
 @property  BOOL failsPastMaximumPressDurationWithoutHysteresis
 @property  double maximumPressDuration

  // instance methods
  -[SBPanSystemGestureRecognizer touchesBegan:withEvent:]
  -[SBPanSystemGestureRecognizer dealloc]
  -[SBPanSystemGestureRecognizer setState:]
  -[SBPanSystemGestureRecognizer .cxx_destruct]
  -[SBPanSystemGestureRecognizer reset]
  -[SBPanSystemGestureRecognizer initWithTarget:action:]
  -[SBPanSystemGestureRecognizer maximumPressDuration]
  -[SBPanSystemGestureRecognizer setMaximumPressDuration:]
  -[SBPanSystemGestureRecognizer setFailsPastMaximumPressDurationWithoutHysteresis:]
  -[SBPanSystemGestureRecognizer invalidateNoHysterisisCancellationTimer]
  -[SBPanSystemGestureRecognizer failsPastMaximumPressDurationWithoutHysteresis]
  -[SBPanSystemGestureRecognizer setupNoHysterisisCancellationTimerIfNeeded]
  -[SBPanSystemGestureRecognizer noHysterisisCancellationTimer]
  -[SBPanSystemGestureRecognizer setNoHysterisisCancellationTimer:]


SBRemoteAlertHandleServer : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSServiceConnectionListenerDelegate, SBSRemoteAlertHandleServiceServerInterface, SBRemoteTransientOverlaySessionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRemoteAlertHandleServer activate]
  -[SBRemoteAlertHandleServer dealloc]
  -[SBRemoteAlertHandleServer .cxx_destruct]
  -[SBRemoteAlertHandleServer listener:didReceiveConnection:withContext:]
  -[SBRemoteAlertHandleServer remoteTransientOverlaySession:didInvalidateWithReason:error:]
  -[SBRemoteAlertHandleServer activateRemoteAlertHandleWithID:activationContext:]
  -[SBRemoteAlertHandleServer remoteAlertHandleContextsForDefinition:allowsCreationValue:configurationContext:]
  -[SBRemoteAlertHandleServer createRemoteAlertHandleContextWithDefinition:configurationContext:]
  -[SBRemoteAlertHandleServer invalidateRemoteAlertHandleWithID:]
  -[SBRemoteAlertHandleServer initWithSessionManager:]
  -[SBRemoteAlertHandleServer _handleDisconnectForServiceConnection:]
  -[SBRemoteAlertHandleServer remoteTransientOverlaySessionDidActivate:]
  -[SBRemoteAlertHandleServer remoteTransientOverlaySessionDidDeactivate:]
  -[SBRemoteAlertHandleServer _shouldAllowAuditToken:forDefinition:]
  -[SBRemoteAlertHandleServer _addConnection:forSession:]
  -[SBRemoteAlertHandleServer _removeConnection:forSession:]


_SBRemoteAlertHandleServerTarget : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSRemoteAlertHandleServiceServerInterface>
 @property  BSServiceConnection *connection
 @property  <SBSRemoteAlertHandleServiceServerInterface> *proxyInterface

  // class methods
  +[_SBRemoteAlertHandleServerTarget currentTarget]

  // instance methods
  -[_SBRemoteAlertHandleServerTarget .cxx_destruct]
  -[_SBRemoteAlertHandleServerTarget _performBlock:]
  -[_SBRemoteAlertHandleServerTarget proxyInterface]
  -[_SBRemoteAlertHandleServerTarget setProxyInterface:]
  -[_SBRemoteAlertHandleServerTarget connection]
  -[_SBRemoteAlertHandleServerTarget activateRemoteAlertHandleWithID:activationContext:]
  -[_SBRemoteAlertHandleServerTarget remoteAlertHandleContextsForDefinition:allowsCreationValue:configurationContext:]
  -[_SBRemoteAlertHandleServerTarget createRemoteAlertHandleContextWithDefinition:configurationContext:]
  -[_SBRemoteAlertHandleServerTarget invalidateRemoteAlertHandleWithID:]
  -[_SBRemoteAlertHandleServerTarget initWithConnection:proxyInterface:]


SBIconBlurryBackgroundView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBIconBlurryBackgroundView initWithFrame:]
  -[SBIconBlurryBackgroundView .cxx_destruct]
  -[SBIconBlurryBackgroundView didAddSubview:]
  -[SBIconBlurryBackgroundView layoutSubviews]


SBClawGestureLogger : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBClawGestureLogger init]
  -[SBClawGestureLogger .cxx_destruct]
  -[SBClawGestureLogger noteActiveGesturePressTypes:wasClawGestureActive:isClawGestureActive:]
  -[SBClawGestureLogger noteSOSTriggered]
  -[SBClawGestureLogger _publishLoggedData]
  -[SBClawGestureLogger _resetLoggedData]


SBAppSwitcherSnapshotViewState : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBAppSwitcherSnapshotViewState .cxx_destruct]


SBAppSwitcherReusableSnapshotView : SBSwitcherWallpaperPageContentView <SBAppSwitcherSnapshotImageCacheObserver, SBReusableView, SBAppSwitcherPageContentView>
 @property  SBAppLayout *appLayout
 @property  BOOL shouldUseBrightMaterial
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double cornerRadius
 @property  long long orientation
 @property  BOOL contentRequiresGroupOpacity
 @property  BOOL active
 @property  BOOL visible

  // instance methods
  -[SBAppSwitcherReusableSnapshotView setAppLayout:]
  -[SBAppSwitcherReusableSnapshotView setVisible:]
  -[SBAppSwitcherReusableSnapshotView _frameInLayoutSpaceForRole:inAppLayout:inOrientation:]
  -[SBAppSwitcherReusableSnapshotView appLayout]
  -[SBAppSwitcherReusableSnapshotView isVisible]
  -[SBAppSwitcherReusableSnapshotView _addAppClipOverlayForRole:bundleIdentifier:sceneIdentifier:]
  -[SBAppSwitcherReusableSnapshotView setCornerRadius:]
  -[SBAppSwitcherReusableSnapshotView _setAnimatingTransition:forRole:]
  -[SBAppSwitcherReusableSnapshotView setShowingIconOverlayView:]
  -[SBAppSwitcherReusableSnapshotView hasSceneOverlayView]
  -[SBAppSwitcherReusableSnapshotView .cxx_destruct]
  -[SBAppSwitcherReusableSnapshotView _setCacheEntry:forRole:]
  -[SBAppSwitcherReusableSnapshotView _orientationWrapperForRole:]
  -[SBAppSwitcherReusableSnapshotView _updateCornerRadiusIfNecessaryForSnapshotImageView:cacheEntry:]
  -[SBAppSwitcherReusableSnapshotView _applicationForRole:]
  -[SBAppSwitcherReusableSnapshotView _sceneHandleForRole:]
  -[SBAppSwitcherReusableSnapshotView _updateTranslucency]
  -[SBAppSwitcherReusableSnapshotView prepareForReuse]
  -[SBAppSwitcherReusableSnapshotView _updateDivider]
  -[SBAppSwitcherReusableSnapshotView _performDeferredSnapshotUpdatesIfNecessaryForRole:]
  -[SBAppSwitcherReusableSnapshotView _snapshotImageFrameForCacheEntry:]
  -[SBAppSwitcherReusableSnapshotView _handleInstalledAppsChanged:]
  -[SBAppSwitcherReusableSnapshotView setActive:]
  -[SBAppSwitcherReusableSnapshotView isActive]
  -[SBAppSwitcherReusableSnapshotView initWithDelegate:snapshotCache:lockoutVCProvider:appClipOverlayCoordinator:containerViewController:]
  -[SBAppSwitcherReusableSnapshotView _updateToNewSnapshotImageUsingCacheEntry:]
  -[SBAppSwitcherReusableSnapshotView _setSceneHandle:forRole:]
  -[SBAppSwitcherReusableSnapshotView _updateCornerRadiusIfNecessaryForOverlayView:matchingSnapshotImage:]
  -[SBAppSwitcherReusableSnapshotView _frameForBackstopLayer]
  -[SBAppSwitcherReusableSnapshotView _removeAppLockoutOverlayForRole:]
  -[SBAppSwitcherReusableSnapshotView _updateSceneHandleForRole:]
  -[SBAppSwitcherReusableSnapshotView _removeAppClipOverlayForRole:]
  -[SBAppSwitcherReusableSnapshotView _updateContentOrientationForRole:]
  -[SBAppSwitcherReusableSnapshotView _contentOrientationForSnapshotOrientation:]
  -[SBAppSwitcherReusableSnapshotView _cacheEntryForRole:]
  -[SBAppSwitcherReusableSnapshotView setOrientation:]
  -[SBAppSwitcherReusableSnapshotView _configureSnapshotImageView:cacheEntry:]
  -[SBAppSwitcherReusableSnapshotView _requestFreshImages]
  -[SBAppSwitcherReusableSnapshotView didUpdateCacheEntry:]
  -[SBAppSwitcherReusableSnapshotView _addAppLockoutOverlayIfNecessaryForRole:]
  -[SBAppSwitcherReusableSnapshotView invalidate]
  -[SBAppSwitcherReusableSnapshotView _isAnimatingTransitionForRole:]
  -[SBAppSwitcherReusableSnapshotView _imageViewForRole:]
  -[SBAppSwitcherReusableSnapshotView contentRequiresGroupOpacity]
  -[SBAppSwitcherReusableSnapshotView setShouldUseBrightMaterial:]
  -[SBAppSwitcherReusableSnapshotView _addOverlayViewController:toOrientationWrapperForRole:]
  -[SBAppSwitcherReusableSnapshotView shouldUseBrightMaterial]
  -[SBAppSwitcherReusableSnapshotView layoutSubviews]


SBDeviceApplicationSceneViewPlaceholderContentViewProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBScenePlaceholderContentViewProvider>
 @property  <SBScenePlaceholderContentViewProviderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider initWithApplication:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider sceneView:requestsPlaceholderContentViewWithContext:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _checkApplicationRestorationState:useSnapshot:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider dealloc]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider .cxx_destruct]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _initWithApplication:userInterfaceStyleArbiter:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _contentViewFromSceneHandle:displayConfiguration:orientation:snapshot:size:statusBarDescriptor:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _snapshotsDidChange:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _loadLiveXIBViewForApplication:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _naturalSizeForOrientation:referenceSize:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider setDelegate:]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider delegate]
  -[SBDeviceApplicationSceneViewPlaceholderContentViewProvider _contentTypeToSearchFromSceneHandle:withContext:]


_SBDeviceApplicationSceneViewPlaceholderContentView : SBOrientationTransformWrapperView /usr/lib/libicucore.A.dylib <SBScenePlaceholderContentView>
 @property  long long statusBarStyle
 @property  long long containerOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBDeviceApplicationSceneViewPlaceholderContentView statusBarStyle]
  -[_SBDeviceApplicationSceneViewPlaceholderContentView setStatusBarStyle:]


SBSwitcherPresentationInteractionMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBSwitcherPresentationInteractionMetric init]
  -[SBSwitcherPresentationInteractionMetric handleEvent:withContext:]
  -[SBSwitcherPresentationInteractionMetric .cxx_destruct]


SBAsymmetricalCornerRadiusWrapperView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  BSCornerRadiusConfiguration *cornerRadiusConfiguration
 @property  unsigned long maskedCorners

  // instance methods
  -[SBAsymmetricalCornerRadiusWrapperView _updateCornerRadius]
  -[SBAsymmetricalCornerRadiusWrapperView initWithFrame:]
  -[SBAsymmetricalCornerRadiusWrapperView .cxx_destruct]
  -[SBAsymmetricalCornerRadiusWrapperView setClipsToBounds:]
  -[SBAsymmetricalCornerRadiusWrapperView maskedCorners]
  -[SBAsymmetricalCornerRadiusWrapperView setMaskedCorners:]
  -[SBAsymmetricalCornerRadiusWrapperView addContentView:]
  -[SBAsymmetricalCornerRadiusWrapperView cornerRadiusConfiguration]
  -[SBAsymmetricalCornerRadiusWrapperView setCornerRadiusConfiguration:]
  -[SBAsymmetricalCornerRadiusWrapperView bringContentViewToFront:]
  -[SBAsymmetricalCornerRadiusWrapperView sendContentViewToBack:]
  -[SBAsymmetricalCornerRadiusWrapperView _updateMaskedCorners]


SBRouteToAppExposeSwitcherModifier : SBTransitionSwitcherModifier
 @property  BOOL reversesFloatingCardDirection

  // instance methods
  -[SBRouteToAppExposeSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBRouteToAppExposeSwitcherModifier handleMainTransitionEvent:]
  -[SBRouteToAppExposeSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBRouteToAppExposeSwitcherModifier contentOffsetForIndex:centered:]
  -[SBRouteToAppExposeSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBRouteToAppExposeSwitcherModifier .cxx_destruct]
  -[SBRouteToAppExposeSwitcherModifier appExposeAccessoryButtonsOverrideUserInterfaceStyle]
  -[SBRouteToAppExposeSwitcherModifier snapshotScaleForAppLayout:]
  -[SBRouteToAppExposeSwitcherModifier plusButtonStyle]
  -[SBRouteToAppExposeSwitcherModifier scrollViewAttributes]
  -[SBRouteToAppExposeSwitcherModifier appExposeAccessoryButtonsBundleIdentifier]
  -[SBRouteToAppExposeSwitcherModifier initWithTransitionID:appExposeModifier:]
  -[SBRouteToAppExposeSwitcherModifier reversesFloatingCardDirection]
  -[SBRouteToAppExposeSwitcherModifier setReversesFloatingCardDirection:]


SBTouchHistory : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBGestureRecognizerTouchHistoryProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBTouchHistory peakSpeed]
  -[SBTouchHistory touchHistoryDepthForTimeDuration:forComputingDerivative:]
  -[SBTouchHistory init]
  -[SBTouchHistory averageTouchVelocityOverTimeDuration:]
  -[SBTouchHistory updateWithLocation:timestamp:]
  -[SBTouchHistory averageTouchPathAngleOverTimeDuration:]
  -[SBTouchHistory .cxx_destruct]
  -[SBTouchHistory conformsToSBGestureRecognizerTouchHistoryProviding]
  -[SBTouchHistory initWithDepth:]
  -[SBTouchHistory reset]


SBHomeGestureToZoomDownSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBHomeGestureToZoomDownSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeGestureToZoomDownSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeGestureToZoomDownSwitcherModifier scaleForIndex:]
  -[SBHomeGestureToZoomDownSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeGestureToZoomDownSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeGestureToZoomDownSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeGestureToZoomDownSwitcherModifier wallpaperStyle]
  -[SBHomeGestureToZoomDownSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureToZoomDownSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeGestureToZoomDownSwitcherModifier _layoutSettings]
  -[SBHomeGestureToZoomDownSwitcherModifier _settingsByInterpolatingBetween:and:progress:]
  -[SBHomeGestureToZoomDownSwitcherModifier .cxx_destruct]
  -[SBHomeGestureToZoomDownSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBHomeGestureToZoomDownSwitcherModifier transitionWillUpdate]
  -[SBHomeGestureToZoomDownSwitcherModifier handleTimerEvent:]
  -[SBHomeGestureToZoomDownSwitcherModifier _scaleSettings]
  -[SBHomeGestureToZoomDownSwitcherModifier responseForProposedChildResponse:childModifier:event:]
  -[SBHomeGestureToZoomDownSwitcherModifier completesWhenChildrenComplete]
  -[SBHomeGestureToZoomDownSwitcherModifier initWithTransitionID:appLayout:nonGestureInitiatedZoomModifier:effectiveStartingEnvironmentMode:liftOffVelocity:]
  -[SBHomeGestureToZoomDownSwitcherModifier _positionSettings]
  -[SBHomeGestureToZoomDownSwitcherModifier _normalizedHomeScreenIconZoomPercentBetweenTopAndBottom]


SBReachabilityGestureRecognizer : UIGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  SBTouchHistory *touchHistory
 @property  UITouch *activeTouch
 @property  {CGPoint=dd} initialTouchLocation
 @property  BOOL everTranslatedUpwards
 @property  BOOL movedPastHysteresis
 @property  SBReachabilitySettings *settings

  // instance methods
  -[SBReachabilityGestureRecognizer touchesBegan:withEvent:]
  -[SBReachabilityGestureRecognizer touchHistory]
  -[SBReachabilityGestureRecognizer .cxx_destruct]
  -[SBReachabilityGestureRecognizer setTouchHistory:]
  -[SBReachabilityGestureRecognizer touchesCancelled:withEvent:]
  -[SBReachabilityGestureRecognizer settings]
  -[SBReachabilityGestureRecognizer activeTouch]
  -[SBReachabilityGestureRecognizer reset]
  -[SBReachabilityGestureRecognizer initWithTarget:action:]
  -[SBReachabilityGestureRecognizer setSettings:]
  -[SBReachabilityGestureRecognizer touchesMoved:withEvent:]
  -[SBReachabilityGestureRecognizer touchesEnded:withEvent:]
  -[SBReachabilityGestureRecognizer setActiveTouch:]
  -[SBReachabilityGestureRecognizer initialTouchLocation]
  -[SBReachabilityGestureRecognizer setInitialTouchLocation:]
  -[SBReachabilityGestureRecognizer everTranslatedUpwards]
  -[SBReachabilityGestureRecognizer setEverTranslatedUpwards:]
  -[SBReachabilityGestureRecognizer movedPastHysteresis]
  -[SBReachabilityGestureRecognizer setMovedPastHysteresis:]


SBPIPInterruptionDebouncingTimer : BSTimer /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  SBPIPInterruptionAssertion *debouncedAssertion

  // instance methods
  -[SBPIPInterruptionDebouncingTimer .cxx_destruct]
  -[SBPIPInterruptionDebouncingTimer debouncedAssertion]
  -[SBPIPInterruptionDebouncingTimer setDebouncedAssertion:]


SBPIPController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <PGPictureInPictureControllerDelegate, SBPIPContainerViewControllerObserver, SBAlertItemsControllerObserver, SBAssistantObserver, SBSensorActivityObserver, SBPIPMorphAnimatorControllerDelegate, SBWorkspaceKeyboardFocusControllerObserver, SBIdleTimerProviding>
 @property  BOOL hasIdleTimerBehaviors
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPIPController sharedInstance]
  +[SBPIPController isAutoPictureInPictureSupported]
  +[SBPIPController sharedInstanceIfLoaded]
  +[SBPIPController isPictureInPictureSupported]

  // instance methods
  -[SBPIPController _lockStateDidChange:]
  -[SBPIPController acquireInterruptionAssertionForReason:identifier:cameraSensorBundleIdentifier:]
  -[SBPIPController endPiPInterruptionForAssertion:]
  -[SBPIPController alertItemsController:willActivateAlertItem:]
  -[SBPIPController assistantDidDisappear:]
  -[SBPIPController pictureInPictureController:willDestroyPictureInPictureViewController:]
  -[SBPIPController assistantWillAppear:]
  -[SBPIPController setIdleTimerCoordinator:]
  -[SBPIPController idleTimerCoordinator]
  -[SBPIPController hasIdleTimerBehaviors]
  -[SBPIPController startPictureInPictureForApplicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:animated:completionHandler:]
  -[SBPIPController _pictureInPictureWindowMargins]
  -[SBPIPController _isContentViewAlignedTopWithPosition:orientation:]
  -[SBPIPController init]
  -[SBPIPController _updateHasIdleTimerBehaviors]
  -[SBPIPController _currentLayoutState]
  -[SBPIPController _keyboardFrameInScreenSpaceFromNotification:]
  -[SBPIPController _updateContainerViewControllersContentPadding]
  -[SBPIPController isPictureInPictureWindowVisible]
  -[SBPIPController defaultHomeScreenInitialPiPFrame:withPreferredContentSize:fromOrientation:toOrientation:shouldUpdate:gestureInitiated:]
  -[SBPIPController preferredContentSizeForActivePictureInPictureWithApplicationWithProcessIdentifier:scenePersistenceIdentifier:]
  -[SBPIPController _overrideInsetsForReason:withIdentifier:]
  -[SBPIPController _destroyWindowAndRootViewControllerIfPossible]
  -[SBPIPController _setPictureInPictureWindowMargin:]
  -[SBPIPController _morphAnimatorControllerForProcessIdentifier:]
  -[SBPIPController dealloc]
  -[SBPIPController coordinatorRequestedIdleTimerBehavior:]
  -[SBPIPController isPictureInPictureContentInFillGravity]
  -[SBPIPController _adjustPIPInsetsForKeyboardFrameChangeNotification:]
  -[SBPIPController _managePictureInPictureWindowVisibilityAnimated:]
  -[SBPIPController .cxx_destruct]
  -[SBPIPController activityDidChangeForSensorActivityDataProvider:]
  -[SBPIPController pictureInPictureController:didCreatePictureInPictureViewController:]
  -[SBPIPController _updatePictureInPictureOverlayInsetsWithCurrentLayoutState:shouldUpdate:]
  -[SBPIPController _reasonForAssertion:]
  -[SBPIPController containerViewControllerUserMayUpdateStashState:]
  -[SBPIPController _updateFloatingDockInsetsWithHeight:]
  -[SBPIPController _addPictureInPictureMorphAnimatorController:]
  -[SBPIPController setLastPictureInPictureContentWasFromFillGravity:]
  -[SBPIPController acquireInterruptionAssertionForReason:identifier:]
  -[SBPIPController _isContentViewAlignedLeftWithPosition:orientation:]
  -[SBPIPController containerViewController:userDidUpdateStashState:]
  -[SBPIPController pictureInPictureController:shouldDenyNewConnection:]
  -[SBPIPController setPictureInPictureWindowHidden:withReason:]
  -[SBPIPController updatePictureInPictureWindowLevel]
  -[SBPIPController containerViewControllerStopReducingResourcesUsage:]
  -[SBPIPController _visualizeKeyboardFrameIfNeeded:]
  -[SBPIPController _floatingDockHeightWillChange:]
  -[SBPIPController _updatePictureInPictureOverlayInsetsWithCurrentLayoutState:]
  -[SBPIPController acquirePictureInPictureWindowLevelOverrideAssertionForWindowLevel:withReason:identifier:]
  -[SBPIPController containerViewController:didFinishStartAnimationWithInitialInterfaceOrientation:]
  -[SBPIPController pictureInPictureController:didHidePictureInPictureViewController:]
  -[SBPIPController preferredContentSizeForInteractivelyEnteringBackgroundForApplicationWithProcessIdentifier:scenePersistenceIdentifier:]
  -[SBPIPController pictureInPictureController:didRequestStopForPictureInPictureViewController:sourceSceneSessionIdentifier:animated:]
  -[SBPIPController observeValueForKeyPath:ofObject:change:context:]
  -[SBPIPController shouldStartPictureInPictureForApplicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:]
  -[SBPIPController createAndRegisterPictureInPictureMorphAnimatorControllerWithTargetProcessIdentifier:uuid:scenePersistenceIdentifier:direction:gestureInitiated:]
  -[SBPIPController initialFrameForInteractivePictureInPictureAnimationEnteringBackgroundForApplicationWithProcessIdentifier:scenePersistenceIdentifier:]
  -[SBPIPController _pictureInPictureApplicationForProcessIdentifier:]
  -[SBPIPController _pipWindow]
  -[SBPIPController _setContainersStashState:]
  -[SBPIPController displayLayoutMonitor:didUpdateDisplayLayout:withContext:]
  -[SBPIPController _keyboardWillShowOrHide:]
  -[SBPIPController morphAnimatorControllerDidTerminate:]
  -[SBPIPController alertItemsController:didDeactivateAlertItem:forReason:]
  -[SBPIPController _appSwitcherWillQuitApp:]
  -[SBPIPController _cancelInterruptionDebouncingTimer]
  -[SBPIPController keyboardFocusController:didUpdateFocusToPID:sceneID:]
  -[SBPIPController _createWindowAndRootViewControllerIfNeeded]
  -[SBPIPController _managePictureInPictureWindowLevel]
  -[SBPIPController alertItemsController:didActivateAlertItem:]
  -[SBPIPController _updateFloatingDockInsets]
  -[SBPIPController _keyboardWillRotate:]
  -[SBPIPController pictureInPictureMorphAnimatorControllerForProcessIdentifier:]
  -[SBPIPController _keyboardWillChangeFrame:]
  -[SBPIPController _pointInside:]
  -[SBPIPController _removePictureInPictureMorphAnimatorController:]
  -[SBPIPController forcePictureInPictureContainerWithView:toFrame:]
  -[SBPIPController cancelPictureInPictureForApplicationWithProcessIdentifierEnteringBackground:scenePersistenceIdentifier:]
  -[SBPIPController pictureInPictureController:willHidePictureInPictureViewController:]
  -[SBPIPController applyPictureInPictureInsets:forSource:]
  -[SBPIPController beginPiPInterruptionForAssertion:]
  -[SBPIPController acquireStashAssertionForReason:identifier:]
  -[SBPIPController containerViewControllerStartReducingResourcesUsage:]


SBInProcessSecureAppAction : SBSLockScreenContentAction /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI
 @property  SBApplicationSceneEntity *applicationSceneEntity

  // instance methods
  -[SBInProcessSecureAppAction .cxx_destruct]
  -[SBInProcessSecureAppAction applicationSceneEntity]
  -[SBInProcessSecureAppAction initWithType:applicationSceneEntity:handler:]
  -[SBInProcessSecureAppAction isInProcessAction]
  -[SBInProcessSecureAppAction setApplicationSceneEntity:]


SBExternalSetupDefaults : BSAbstractDefaultDomain /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL deviceSetup
 @property  NSString *setupState

  // instance methods
  -[SBExternalSetupDefaults init]
  -[SBExternalSetupDefaults _bindAndRegisterDefaults]


SBUIAnimationControllerSteppedAnimator : SBUIAnimationControllerAnimator <SBViewControllerInteractiveAnimatedTransitioning>
 @property  SBAnimationStepper *stepper
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBUIAnimationControllerSteppedAnimator updateTransition:withPercentComplete:]
  -[SBUIAnimationControllerSteppedAnimator cancelTransition:withCompletionSpeed:completionCurve:]
  -[SBUIAnimationControllerSteppedAnimator .cxx_destruct]
  -[SBUIAnimationControllerSteppedAnimator finishInteractiveTransition:withCompletionSpeed:completionCurve:]
  -[SBUIAnimationControllerSteppedAnimator stepper]
  -[SBUIAnimationControllerSteppedAnimator initWithAnimationController:stepper:]
  -[SBUIAnimationControllerSteppedAnimator percentComplete]
  -[SBUIAnimationControllerSteppedAnimator initWithAnimationController:]


SBRecentDisplayItemsDataStore : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSOrderedSet *displayItems
 @property  <SBRecentDisplayItemsPersistenceDelegate> *persistenceDelegate

  // instance methods
  -[SBRecentDisplayItemsDataStore init]
  -[SBRecentDisplayItemsDataStore .cxx_destruct]
  -[SBRecentDisplayItemsDataStore setDisplayItems:]
  -[SBRecentDisplayItemsDataStore displayItems]
  -[SBRecentDisplayItemsDataStore setPersistenceDelegate:]
  -[SBRecentDisplayItemsDataStore initWithRecentLayouts:fallbackToRecentAppLayouts:]
  -[SBRecentDisplayItemsDataStore _displayItemsFromRecentAppLayouts:]
  -[SBRecentDisplayItemsDataStore persistenceDelegate]


SBBatteryDeviceChargeTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBatteryDeviceChargeTestRecipe title]
  -[SBBatteryDeviceChargeTestRecipe handleVolumeIncrease]
  -[SBBatteryDeviceChargeTestRecipe handleVolumeDecrease]


_SBDeviceApplicationSceneStatusBarStateProviderObserverRecord : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[_SBDeviceApplicationSceneStatusBarStateProviderObserverRecord .cxx_destruct]


SBFloatingDockWindow : SBMainScreenActiveInterfaceOrientationWindow
  // instance methods
  -[SBFloatingDockWindow _canBecomeKeyWindow]
  -[SBFloatingDockWindow hitTest:withEvent:]
  -[SBFloatingDockWindow floatingDockRootViewController]


SBStatusBarStateAggregator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBDateTimeOverrideObserver, DNDStateUpdateListener, SBAVSystemControllerCacheObserver>
 @property  SBSystemStatusBatteryDataProvider *batteryDataProvider
 @property  STTelephonyStatusDomainDataProvider *telephonyDataProvider
 @property  SBSystemStatusWifiDataProvider *wifiDataProvider
 @property  STBatteryStatusDomain *batteryDomain
 @property  STCallingStatusDomain *callingDomain
 @property  STTelephonyStatusDomain *telephonyDomain
 @property  STVoiceControlStatusDomain *voiceControlDomain
 @property  STWifiStatusDomain *wifiDomain
 @property  SBTelephonyManager *telephonyManager
 @property  SBUserSessionController *userSessionController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBStatusBarStateAggregator sharedInstance]
  +[SBStatusBarStateAggregator _thermalColorForLevel:]

  // instance methods
  -[SBStatusBarStateAggregator _registerForNotifications]
  -[SBStatusBarStateAggregator _batteryDomain]
  -[SBStatusBarStateAggregator _updateTTYItem]
  -[SBStatusBarStateAggregator setShowsOverridesForRecording:]
  -[SBStatusBarStateAggregator _updateThermalColorItem]
  -[SBStatusBarStateAggregator controller:didChangeOverrideDateFromDate:]
  -[SBStatusBarStateAggregator _updateVPNItem]
  -[SBStatusBarStateAggregator cache:didUpdateActiveAudioRoute:]
  -[SBStatusBarStateAggregator _setTelephonyDomain:]
  -[SBStatusBarStateAggregator init]
  -[SBStatusBarStateAggregator telephonyDataProvider]
  -[SBStatusBarStateAggregator _noteAirplaneModeChanged]
  -[SBStatusBarStateAggregator _setUserSessionController:]
  -[SBStatusBarStateAggregator _setItem:enabled:]
  -[SBStatusBarStateAggregator setUserNameOverride:]
  -[SBStatusBarStateAggregator _updateLocationState]
  -[SBStatusBarStateAggregator dealloc]
  -[SBStatusBarStateAggregator _resetTimeItemFormatter]
  -[SBStatusBarStateAggregator _updateBluetoothHeadphonesItem]
  -[SBStatusBarStateAggregator _updateCallForwardingItem]
  -[SBStatusBarStateAggregator .cxx_destruct]
  -[SBStatusBarStateAggregator _updateDataNetworkItem]
  -[SBStatusBarStateAggregator _restartTimeItemTimer]
  -[SBStatusBarStateAggregator batteryDataProvider]
  -[SBStatusBarStateAggregator sendStatusBarActions:]
  -[SBStatusBarStateAggregator _updateSensorActivityItem]
  -[SBStatusBarStateAggregator _notifyNonItemDataChanged]
  -[SBStatusBarStateAggregator _updateTetheringState]
  -[SBStatusBarStateAggregator _userSessionController]
  -[SBStatusBarStateAggregator _updateSecondarySignalStrengthItem]
  -[SBStatusBarStateAggregator _updateSignalStrengthItem]
  -[SBStatusBarStateAggregator _callingDomain]
  -[SBStatusBarStateAggregator _updateQuietModeItem]
  -[SBStatusBarStateAggregator _updateSecondaryCallForwardingItem]
  -[SBStatusBarStateAggregator _setBatteryDomain:]
  -[SBStatusBarStateAggregator _updateRotationLockItem]
  -[SBStatusBarStateAggregator _updateVoiceControlItem]
  -[SBStatusBarStateAggregator _updateCarPlayItem]
  -[SBStatusBarStateAggregator _removeTetheringStatusBarStyleOverrideAssertion]
  -[SBStatusBarStateAggregator _updateLiquidDetectionItem]
  -[SBStatusBarStateAggregator _stopTimeItemTimer]
  -[SBStatusBarStateAggregator setAlarmEnabled:]
  -[SBStatusBarStateAggregator _updateAirplayItem]
  -[SBStatusBarStateAggregator _setCallingDomain:]
  -[SBStatusBarStateAggregator _tickRefCount:up:withTransitionBlock:]
  -[SBStatusBarStateAggregator _updateLockItem]
  -[SBStatusBarStateAggregator setShowsActivityIndicatorOnHomeScreen:]
  -[SBStatusBarStateAggregator _statusBarData]
  -[SBStatusBarStateAggregator _updateBluetoothBatteryItem]
  -[SBStatusBarStateAggregator endCoalescentBlock]
  -[SBStatusBarStateAggregator _updateSecondaryDataNetworkItem]
  -[SBStatusBarStateAggregator _setItem:enabled:inList:itemPostState:]
  -[SBStatusBarStateAggregator _updatePersonNameItem]
  -[SBStatusBarStateAggregator _shouldShowPersonName]
  -[SBStatusBarStateAggregator _buildLocationState]
  -[SBStatusBarStateAggregator beginCoalescentBlock]
  -[SBStatusBarStateAggregator _wifiDomain]
  -[SBStatusBarStateAggregator _updateSignalStrengthItem:withData:SIMInfo:barsGetter:barsSetter:]
  -[SBStatusBarStateAggregator _updateBluetoothItem]
  -[SBStatusBarStateAggregator _updateTimeItems]
  -[SBStatusBarStateAggregator _postItem:withState:inList:]
  -[SBStatusBarStateAggregator _statusBarBatteryStateForSystemStatusChargingState:]
  -[SBStatusBarStateAggregator _setWifiDomain:]
  -[SBStatusBarStateAggregator _telephonyDomain]
  -[SBStatusBarStateAggregator _requestActions:]
  -[SBStatusBarStateAggregator _updateAlarmItem]
  -[SBStatusBarStateAggregator setShowsSyncActivityIndicator:]
  -[SBStatusBarStateAggregator setShouldShowBluetoothHeadphoneGlyph:andShouldShowBluetoothHeadphoneBatteryPercent:]
  -[SBStatusBarStateAggregator _updateBatteryItems]
  -[SBStatusBarStateAggregator _updateCallingStatusBarStyleOverrideAssertionsForStyleOverride:callingAttributions:]
  -[SBStatusBarStateAggregator _updateStateAtomicallyWithoutAnimationUsingBlock:]
  -[SBStatusBarStateAggregator addPostingObserver:]
  -[SBStatusBarStateAggregator _updateCallForwardingItem:withInfo:]
  -[SBStatusBarStateAggregator _updateAirplaneMode]
  -[SBStatusBarStateAggregator _updateActivityItem]
  -[SBStatusBarStateAggregator _notifyItemChanged:]
  -[SBStatusBarStateAggregator wifiDataProvider]
  -[SBStatusBarStateAggregator _setVoiceControlDomain:]
  -[SBStatusBarStateAggregator setShowsActivityIndicatorEverywhere:]
  -[SBStatusBarStateAggregator _voiceControlDomain]
  -[SBStatusBarStateAggregator _updateServiceItem]
  -[SBStatusBarStateAggregator _updateLocationItem]
  -[SBStatusBarStateAggregator _updateSecondaryServiceItem]
  -[SBStatusBarStateAggregator _telephonyManager]
  -[SBStatusBarStateAggregator _shouldShowEmergencyOnlyStatusForInfo:]
  -[SBStatusBarStateAggregator removePostingObserver:]
  -[SBStatusBarStateAggregator _updateServiceItem:withData:SIMInfo:otherSIMInfo:serviceStringGetter:serviceStringSetter:serviceCrossfadeStringGetter:serviceCrossfadeStringSetter:serviceContentTypeGetter:serviceContentTypeSetter:serviceBadgeStringGetter:serviceBadgeStringSetter:]
  -[SBStatusBarStateAggregator stateService:didReceiveDoNotDisturbStateUpdate:]
  -[SBStatusBarStateAggregator updateStatusBarItem:]
  -[SBStatusBarStateAggregator _setTelephonyManager:]
  -[SBStatusBarStateAggregator _updateDataNetworkItem:withData:primary:dataNetworkTypeGetter:dataNetworkTypeSetter:]
  -[SBStatusBarStateAggregator cache:didUpdatePickableRoutes:]


SBAppSwitcherSnapshotLockoutViewControllerProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider init]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider dealloc]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider .cxx_destruct]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider _receivedMemoryWarning:]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider blockingViewControllerForBundleIdentifier:screenTimePolicy:]
  -[SBAppSwitcherSnapshotLockoutViewControllerProvider recycleBlockingViewController:]


SBMainStatusBarStateProvider : SBStatusBarStateProvider <UIStatusBarStateObserver>
 @property  NSHashTable *contentAssertions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainStatusBarStateProvider sharedInstance]

  // instance methods
  -[SBMainStatusBarStateProvider enableTime:crossfade:crossfadeDuration:]
  -[SBMainStatusBarStateProvider init]
  -[SBMainStatusBarStateProvider _shouldPostForVisitedItem:withUpdates:toAggregatorData:lastPost:]
  -[SBMainStatusBarStateProvider setTelephonyAndBluetoothItemsCloaked:]
  -[SBMainStatusBarStateProvider didUpdateContentAssertion:]
  -[SBMainStatusBarStateProvider updateTimeEnabledImmediately:]
  -[SBMainStatusBarStateProvider stopDisablingDataUpdateAnimationsForRequestor:]
  -[SBMainStatusBarStateProvider acquireContentAssertion:]
  -[SBMainStatusBarStateProvider dealloc]
  -[SBMainStatusBarStateProvider .cxx_destruct]
  -[SBMainStatusBarStateProvider isTimeEnabled]
  -[SBMainStatusBarStateProvider forceUpdateLocalStatusBarData]
  -[SBMainStatusBarStateProvider contentAssertions]
  -[SBMainStatusBarStateProvider setContentAssertions:]
  -[SBMainStatusBarStateProvider enableStatusBarItem:requestor:]
  -[SBMainStatusBarStateProvider statusBarStateAggregatorDidRequestImmediateUpdates:]
  -[SBMainStatusBarStateProvider contentAssertionsWantTimeEnabledAnimated:duration:]
  -[SBMainStatusBarStateProvider _identifierForStateAggregator:]
  -[SBMainStatusBarStateProvider setTimeCloaked:]
  -[SBMainStatusBarStateProvider disableStatusBarItem:requestor:]
  -[SBMainStatusBarStateProvider statusBarStateProvider:didPostStatusBarData:withActions:]
  -[SBMainStatusBarStateProvider statusBarStateAggregatorDidStopRequestingImmediateUpdates:]
  -[SBMainStatusBarStateProvider setAllItemsExceptBatteryCloaked:]
  -[SBMainStatusBarStateProvider _composePostDataFromAggregatorData:]
  -[SBMainStatusBarStateProvider _enableTime:crossfade:crossfadeDuration:immediately:]
  -[SBMainStatusBarStateProvider updateTimeEnabled]
  -[SBMainStatusBarStateProvider enableTime:]
  -[SBMainStatusBarStateProvider relinquishContentAssertion:]
  -[SBMainStatusBarStateProvider _updateDisabledItems]
  -[SBMainStatusBarStateProvider disableDataUpdateAnimationsForRequestor:]


SBMainStatusBarContentAssertion : BSSimpleAssertion /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
 @property  BOOL animated
 @property  double duration
 @property  BOOL dateAndTimeVisible

  // instance methods
  -[SBMainStatusBarContentAssertion animated]
  -[SBMainStatusBarContentAssertion setAnimated:]
  -[SBMainStatusBarContentAssertion dateAndTimeVisible]
  -[SBMainStatusBarContentAssertion setDateAndTimeVisible:]
  -[SBMainStatusBarContentAssertion setDuration:]
  -[SBMainStatusBarContentAssertion duration]
  -[SBMainStatusBarContentAssertion initWithIdentifier:forReason:]


SBPIPInteractionSettingsDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBPIPInteractionSettingsDomain domainName]
  +[SBPIPInteractionSettingsDomain rootSettings]
  +[SBPIPInteractionSettingsDomain rootSettingsClass]
  +[SBPIPInteractionSettingsDomain domainGroupName]


SBPIPInteractionSettings : PTSettings /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 @property  BOOL alwaysStartAtSmallestSize
 @property  BOOL freelyPositionable
 @property  BOOL panGestureEnabled
 @property  BOOL pinchGestureEnabled
 @property  BOOL rotationGestureEnabled
 @property  double defaultContentSizeResetTimeout
 @property  double inFlightHitTestPadding
 @property  double maximumSizeSpanForPreferredSizeTuning
 @property  double minimumSizeSpanBetweenPreferredSizes
 @property  double positionDecelerationRate
 @property  double positionExtenderMaximumDistance
 @property  double positionVelocityYWeightOverVelocityX
 @property  double rotationExtenderMaximumDistance
 @property  double rotationPreRecognitionWeight
 @property  double rotationRubberBandCoefficient
 @property  double scaleDecelerationRate
 @property  double scaleExtenderMaximumDistance
 @property  double scaleLowPassFilterPreviousWeight
 @property  double stashProgressTabAppearanceThresholdX
 @property  SBFFluidBehaviorSettings *interactiveFluidBehavior
 @property  SBFFluidBehaviorSettings *stashTabFluidBehavior

  // class methods
  +[SBPIPInteractionSettings settingsControllerModule]

  // instance methods
  -[SBPIPInteractionSettings setDefaultValues]
  -[SBPIPInteractionSettings .cxx_destruct]
  -[SBPIPInteractionSettings positionExtenderMaximumDistance]
  -[SBPIPInteractionSettings rotationExtenderMaximumDistance]
  -[SBPIPInteractionSettings scaleExtenderMaximumDistance]
  -[SBPIPInteractionSettings maximumSizeSpanForPreferredSizeTuning]
  -[SBPIPInteractionSettings setMaximumSizeSpanForPreferredSizeTuning:]
  -[SBPIPInteractionSettings minimumSizeSpanBetweenPreferredSizes]
  -[SBPIPInteractionSettings setMinimumSizeSpanBetweenPreferredSizes:]
  -[SBPIPInteractionSettings panGestureEnabled]
  -[SBPIPInteractionSettings pinchGestureEnabled]
  -[SBPIPInteractionSettings positionDecelerationRate]
  -[SBPIPInteractionSettings rotationPreRecognitionWeight]
  -[SBPIPInteractionSettings rotationGestureEnabled]
  -[SBPIPInteractionSettings rotationRubberBandCoefficient]
  -[SBPIPInteractionSettings scaleDecelerationRate]
  -[SBPIPInteractionSettings stashProgressTabAppearanceThresholdX]
  -[SBPIPInteractionSettings inFlightHitTestPadding]
  -[SBPIPInteractionSettings freelyPositionable]
  -[SBPIPInteractionSettings interactiveFluidBehavior]
  -[SBPIPInteractionSettings stashTabFluidBehavior]
  -[SBPIPInteractionSettings alwaysStartAtSmallestSize]
  -[SBPIPInteractionSettings defaultContentSizeResetTimeout]
  -[SBPIPInteractionSettings setAlwaysStartAtSmallestSize:]
  -[SBPIPInteractionSettings setFreelyPositionable:]
  -[SBPIPInteractionSettings setPanGestureEnabled:]
  -[SBPIPInteractionSettings setPinchGestureEnabled:]
  -[SBPIPInteractionSettings setRotationGestureEnabled:]
  -[SBPIPInteractionSettings setInteractiveFluidBehavior:]
  -[SBPIPInteractionSettings setStashTabFluidBehavior:]
  -[SBPIPInteractionSettings setDefaultContentSizeResetTimeout:]
  -[SBPIPInteractionSettings setInFlightHitTestPadding:]
  -[SBPIPInteractionSettings setPositionDecelerationRate:]
  -[SBPIPInteractionSettings setPositionExtenderMaximumDistance:]
  -[SBPIPInteractionSettings setPositionVelocityYWeightOverVelocityX:]
  -[SBPIPInteractionSettings setRotationExtenderMaximumDistance:]
  -[SBPIPInteractionSettings setRotationPreRecognitionWeight:]
  -[SBPIPInteractionSettings setRotationRubberBandCoefficient:]
  -[SBPIPInteractionSettings setScaleDecelerationRate:]
  -[SBPIPInteractionSettings setScaleExtenderMaximumDistance:]
  -[SBPIPInteractionSettings setScaleLowPassFilterPreviousWeight:]
  -[SBPIPInteractionSettings setStashProgressTabAppearanceThresholdX:]
  -[SBPIPInteractionSettings positionVelocityYWeightOverVelocityX]
  -[SBPIPInteractionSettings scaleLowPassFilterPreviousWeight]


SBStatusBarStateProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBStatusBarStateAggregatorPosting, UIStatusBarStateProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBStatusBarStateProvider init]
  -[SBStatusBarStateProvider _shouldPostForVisitedItem:withUpdates:toAggregatorData:lastPost:]
  -[SBStatusBarStateProvider dealloc]
  -[SBStatusBarStateProvider .cxx_destruct]
  -[SBStatusBarStateProvider endCoalescentBlock]
  -[SBStatusBarStateProvider beginCoalescentBlock]
  -[SBStatusBarStateProvider _composePostDataFromAggregatorData:]
  -[SBStatusBarStateProvider getStatusBarData:]
  -[SBStatusBarStateProvider addStatusBarStateObserver:]
  -[SBStatusBarStateProvider removeStatusBarStateObserver:]
  -[SBStatusBarStateProvider updateStatusBarItem:]
  -[SBStatusBarStateProvider statusBarStateAggregatorDidStartPost:]
  -[SBStatusBarStateProvider statusBarStateAggregator:didVisitItem:withUpdates:toData:]
  -[SBStatusBarStateProvider statusBarStateAggregatorDidFinishPost:withData:actions:]
  -[SBStatusBarStateProvider statusBarStateAggregator:didUpdateNonItemData:]
  -[SBStatusBarStateProvider _composePostActionsFromAggregatorActions:]
  -[SBStatusBarStateProvider _didFinishPost]
  -[SBStatusBarStateProvider _shouldPostForUpdatesToNonItemData:]
  -[SBStatusBarStateProvider _didChangeDoubleHeightStatusStringForStyle:]


SBControlCenterRingerSwitchController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBControlCenterRingerSwitchController sharedInstance]

  // instance methods
  -[SBControlCenterRingerSwitchController init]
  -[SBControlCenterRingerSwitchController dealloc]
  -[SBControlCenterRingerSwitchController _updateState]


SBDockSuggestionsMetric : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDockSuggestionsMetric init]
  -[SBDockSuggestionsMetric handleEvent:withContext:]
  -[SBDockSuggestionsMetric .cxx_destruct]
  -[SBDockSuggestionsMetric _trackEvent:withPayload:]


SBArcSwipeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBArcSwipeSwitcherModifier homeScreenBackdropBlurType]
  -[SBArcSwipeSwitcherModifier visibleAppLayouts]
  -[SBArcSwipeSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBArcSwipeSwitcherModifier isHomeScreenContentRequired]
  -[SBArcSwipeSwitcherModifier isSwitcherWindowVisible]
  -[SBArcSwipeSwitcherModifier animationAttributesForLayoutElement:]
  -[SBArcSwipeSwitcherModifier wallpaperStyle]
  -[SBArcSwipeSwitcherModifier cardCornerRadiiForIndex:]
  -[SBArcSwipeSwitcherModifier opacityForIndex:]
  -[SBArcSwipeSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBArcSwipeSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBArcSwipeSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBArcSwipeSwitcherModifier _layoutSettings]
  -[SBArcSwipeSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBArcSwipeSwitcherModifier .cxx_destruct]
  -[SBArcSwipeSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBArcSwipeSwitcherModifier appLayoutsToResignActive]
  -[SBArcSwipeSwitcherModifier shouldPerformCrossfadeForReduceMotion]
  -[SBArcSwipeSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBArcSwipeSwitcherModifier transitionWillBegin]
  -[SBArcSwipeSwitcherModifier keyboardSuppressionMode]
  -[SBArcSwipeSwitcherModifier initWithTransitionID:fromAppLayout:toAppLayout:]


SBChainableModifierEventResponse : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  BOOL valid
 @property  double delay
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBChainableModifierEventResponse responseByAppendingResponse:toResponse:]
  +[SBChainableModifierEventResponse newEventResponse]

  // instance methods
  -[SBChainableModifierEventResponse delay]
  -[SBChainableModifierEventResponse loggingCategory]
  -[SBChainableModifierEventResponse init]
  -[SBChainableModifierEventResponse .cxx_destruct]
  -[SBChainableModifierEventResponse succinctDescriptionBuilder]
  -[SBChainableModifierEventResponse isValid]
  -[SBChainableModifierEventResponse succinctDescription]
  -[SBChainableModifierEventResponse descriptionWithMultilinePrefix:]
  -[SBChainableModifierEventResponse descriptionBuilderWithMultilinePrefix:]
  -[SBChainableModifierEventResponse addChildResponse:]
  -[SBChainableModifierEventResponse enumerateChildResponsesUsingBlock:]
  -[SBChainableModifierEventResponse addChildResponses:]
  -[SBChainableModifierEventResponse setDelay:withValidator:]
  -[SBChainableModifierEventResponse responseByTransformingResponseWithTransformer:]
  -[SBChainableModifierEventResponse insertChildResponse:atIndex:]
  -[SBChainableModifierEventResponse _initWithChildResponses:]
  -[SBChainableModifierEventResponse enumerateResponseTreeUsingBlock:stop:]
  -[SBChainableModifierEventResponse consumeWithReason:]
  -[SBChainableModifierEventResponse enumerateResponseTreeUsingBlock:]


SBChainableModifierTitledEventResponse : SBChainableModifierEventResponse
 @property  NSString *title

  // class methods
  +[SBChainableModifierTitledEventResponse responseWithTitle:]

  // instance methods
  -[SBChainableModifierTitledEventResponse .cxx_destruct]
  -[SBChainableModifierTitledEventResponse title]
  -[SBChainableModifierTitledEventResponse descriptionBuilderWithMultilinePrefix:]


SBFloatingDockBehaviorAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBFloatingDockController *floatingDockController
 @property  unsigned long level
 @property  BOOL animated
 @property  BOOL pinned
 @property  BOOL gesturePossible
 @property  double progress
 @property  NSString *reason
 @property  NSDate *timestamp
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFloatingDockBehaviorAssertion level]
  -[SBFloatingDockBehaviorAssertion invalidateWithCompletion:]
  -[SBFloatingDockBehaviorAssertion init]
  -[SBFloatingDockBehaviorAssertion isPinned]
  -[SBFloatingDockBehaviorAssertion dealloc]
  -[SBFloatingDockBehaviorAssertion isAnimated]
  -[SBFloatingDockBehaviorAssertion .cxx_destruct]
  -[SBFloatingDockBehaviorAssertion timestamp]
  -[SBFloatingDockBehaviorAssertion succinctDescriptionBuilder]
  -[SBFloatingDockBehaviorAssertion succinctDescription]
  -[SBFloatingDockBehaviorAssertion progress]
  -[SBFloatingDockBehaviorAssertion invalidate]
  -[SBFloatingDockBehaviorAssertion reason]
  -[SBFloatingDockBehaviorAssertion descriptionWithMultilinePrefix:]
  -[SBFloatingDockBehaviorAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBFloatingDockBehaviorAssertion floatingDockController]
  -[SBFloatingDockBehaviorAssertion initWithPinned:gesturePossible:atLevel:reason:withCompletion:]
  -[SBFloatingDockBehaviorAssertion initWithFloatingDockController:visibleProgress:animated:gesturePossible:atLevel:reason:withCompletion:]
  -[SBFloatingDockBehaviorAssertion modifyProgress:interactive:completion:]
  -[SBFloatingDockBehaviorAssertion gesturePossible]
  -[SBFloatingDockBehaviorAssertion initWithVisibleProgress:gesturePossible:atLevel:reason:withCompletion:]


SBPressTuple : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  double durationDown
 @property  double durationUp
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBPressTuple succinctDescriptionBuilder]
  -[SBPressTuple succinctDescription]
  -[SBPressTuple isEqual:]
  -[SBPressTuple descriptionWithMultilinePrefix:]
  -[SBPressTuple descriptionBuilderWithMultilinePrefix:]
  -[SBPressTuple setDurationUp:]
  -[SBPressTuple initWithDurationDown:durationUp:]
  -[SBPressTuple durationDown]
  -[SBPressTuple durationUp]
  -[SBPressTuple setDurationDown:]


SBDefaultProximityBacklightPolicy : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBProximityBacklightPolicy>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDefaultProximityBacklightPolicy dealloc]
  -[SBDefaultProximityBacklightPolicy .cxx_destruct]
  -[SBDefaultProximityBacklightPolicy initWithBacklightController:]
  -[SBDefaultProximityBacklightPolicy _scheduleBacklightFactorToZeroAfterDebounceDuration:]
  -[SBDefaultProximityBacklightPolicy _scheduleBacklightFactorToZeroAfterDefaultDuration]
  -[SBDefaultProximityBacklightPolicy _restoreBacklightFactor]
  -[SBDefaultProximityBacklightPolicy proximitySensorManager:objectWithinProximityDidChange:]
  -[SBDefaultProximityBacklightPolicy _backlightWillUndim:]
  -[SBDefaultProximityBacklightPolicy _cancelScheduledBacklightFactorToZero]
  -[SBDefaultProximityBacklightPolicy _turnBacklightOff]


SBInteractionAfterWakeMetric : SBAnalyticsStateMachineEventHandler
  // instance methods
  -[SBInteractionAfterWakeMetric _trackUnlockConversion:]
  -[SBInteractionAfterWakeMetric init]
  -[SBInteractionAfterWakeMetric .cxx_destruct]
  -[SBInteractionAfterWakeMetric _determineIfShouldReport]
  -[SBInteractionAfterWakeMetric _trackUnlockOpportunity]
  -[SBInteractionAfterWakeMetric _trackSessionWithDuration:]


SBWalletPreArmController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL preArmAvailable
 @property  BOOL preArmAllowed
 @property  BOOL preArmTriggeredByLockButtonDoublePress
 @property  BOOL preArmTriggeredByHomeButtonDoublePress
 @property  BOOL preArmSuppressed
 @property  BOOL preArmExternallySuppressed

  // class methods
  +[SBWalletPreArmController sharedInstance]

  // instance methods
  -[SBWalletPreArmController isPreArmTriggeredByHomeButtonDoublePress]
  -[SBWalletPreArmController init]
  -[SBWalletPreArmController .cxx_destruct]
  -[SBWalletPreArmController _contactlessInterfaceSourceForTriggerSource:]
  -[SBWalletPreArmController isPreArmAvailable]
  -[SBWalletPreArmController _computeTriggerSource]
  -[SBWalletPreArmController acquireSuppressPreArmAssertionForReason:]
  -[SBWalletPreArmController initWithPassLibrary:biometricResource:]
  -[SBWalletPreArmController isPreArmExternallySuppressed]
  -[SBWalletPreArmController acquireSuppressPreArmAssertionOfType:forReason:]
  -[SBWalletPreArmController isPreArmTriggeredByLockButtonDoublePress]
  -[SBWalletPreArmController presentPreArmInterfaceForTriggerSource:completion:]
  -[SBWalletPreArmController isPreArmAllowed]
  -[SBWalletPreArmController isPreArmSuppressed]


SBFluidSwitcherAppLayoutHeaderItemController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBDeviceApplicationSceneHandleObserver, SBIconObserver, BSInvalidatable>
 @property  BOOL useDarkLabels
 @property  @? updateHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFluidSwitcherAppLayoutHeaderItemController _updateDisplayItemIcons]
  -[SBFluidSwitcherAppLayoutHeaderItemController isUsingDarkLabels]
  -[SBFluidSwitcherAppLayoutHeaderItemController iconImageDidUpdate:]
  -[SBFluidSwitcherAppLayoutHeaderItemController updateHandler]
  -[SBFluidSwitcherAppLayoutHeaderItemController _performUpdateHandler]
  -[SBFluidSwitcherAppLayoutHeaderItemController dealloc]
  -[SBFluidSwitcherAppLayoutHeaderItemController _startTrackingDownloadingIcon:]
  -[SBFluidSwitcherAppLayoutHeaderItemController .cxx_destruct]
  -[SBFluidSwitcherAppLayoutHeaderItemController _stopTrackingDownloadingIcon:]
  -[SBFluidSwitcherAppLayoutHeaderItemController setUseDarkLabels:]
  -[SBFluidSwitcherAppLayoutHeaderItemController _iconForDisplayItem:]
  -[SBFluidSwitcherAppLayoutHeaderItemController _loadIconForDisplayItem:]
  -[SBFluidSwitcherAppLayoutHeaderItemController initWithAppLayout:applicationSceneHandleProvider:displayIdentity:showCanvasTitles:]
  -[SBFluidSwitcherAppLayoutHeaderItemController _handleDidReplaceDownloadingIconNotification:]
  -[SBFluidSwitcherAppLayoutHeaderItemController sceneHandle:didChangeSceneTitle:]
  -[SBFluidSwitcherAppLayoutHeaderItemController setUpdateHandler:]
  -[SBFluidSwitcherAppLayoutHeaderItemController invalidate]
  -[SBFluidSwitcherAppLayoutHeaderItemController _computeHeaderItems]


SBClockApplicationIconImageView : SBHClockApplicationIconImageView /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices <SBDateTimeOverrideObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBClockApplicationIconImageView initialize]

  // instance methods
  -[SBClockApplicationIconImageView setIcon:location:animated:]
  -[SBClockApplicationIconImageView controller:didChangeOverrideDateFromDate:]


SBVolumeControlState : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  NSString *activeVolumeCategoryName
 @property  BOOL isAudioPlayingSomewhere
 @property  BOOL isCallOrFaceTimeActive
 @property  BOOL currentRouteHasVolumeControl
 @property  BOOL isFullyMuted
 @property  BOOL isRingerMuted
 @property  BOOL isUILocked
 @property  BOOL isHostingAppOnLockScreen
 @property  BOOL isShowingLockScreenMediaControls

  // instance methods
  -[SBVolumeControlState copyWithZone:]
  -[SBVolumeControlState isFullyMuted]
  -[SBVolumeControlState setCurrentRouteHasVolumeControl:]
  -[SBVolumeControlState .cxx_destruct]
  -[SBVolumeControlState isRingerMuted]
  -[SBVolumeControlState setRingerMuted:]
  -[SBVolumeControlState isUILocked]
  -[SBVolumeControlState currentRouteHasVolumeControl]
  -[SBVolumeControlState isHostingAppOnLockScreen]
  -[SBVolumeControlState isAudioPlayingSomewhere]
  -[SBVolumeControlState isCallOrFaceTimeActive]
  -[SBVolumeControlState isShowingLockScreenMediaControls]
  -[SBVolumeControlState setAudioPlayingSomewhere:]
  -[SBVolumeControlState setCallOrFaceTimeActive:]
  -[SBVolumeControlState setFullyMuted:]
  -[SBVolumeControlState setActiveVolumeCategoryName:]
  -[SBVolumeControlState setUILocked:]
  -[SBVolumeControlState setHostingAppOnLockScreen:]
  -[SBVolumeControlState setShowingLockScreenMediaControls:]
  -[SBVolumeControlState activeVolumeCategoryName]


SBDefaults : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBDefaults localDefaults]
  +[SBDefaults externalDefaults]


SBDeckToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBDeckToFullScreenSwitcherModifier homeScreenBackdropBlurType]
  -[SBDeckToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBDeckToFullScreenSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBDeckToFullScreenSwitcherModifier isHomeScreenContentRequired]
  -[SBDeckToFullScreenSwitcherModifier topMostLayoutElements]
  -[SBDeckToFullScreenSwitcherModifier isSwitcherWindowVisible]
  -[SBDeckToFullScreenSwitcherModifier appLayoutToScrollToBeforeTransitioning]
  -[SBDeckToFullScreenSwitcherModifier animationAttributesForLayoutElement:]
  -[SBDeckToFullScreenSwitcherModifier handleMainTransitionEvent:]
  -[SBDeckToFullScreenSwitcherModifier wallpaperStyle]
  -[SBDeckToFullScreenSwitcherModifier cardCornerRadiiForIndex:]
  -[SBDeckToFullScreenSwitcherModifier opacityForIndex:]
  -[SBDeckToFullScreenSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBDeckToFullScreenSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBDeckToFullScreenSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBDeckToFullScreenSwitcherModifier _layoutSettings]
  -[SBDeckToFullScreenSwitcherModifier .cxx_destruct]
  -[SBDeckToFullScreenSwitcherModifier initWithTransitionID:direction:fullScreenAppLayout:deckModifier:]
  -[SBDeckToFullScreenSwitcherModifier shouldRasterizeLiveContentUntilDelay:]
  -[SBDeckToFullScreenSwitcherModifier transitionWillBegin]
  -[SBDeckToFullScreenSwitcherModifier _appLayoutToScrollToDuringTransition]


SBDragAndDropAppActivationWorkspaceTransaction : SBMainWorkspaceTransaction <SBWorkspaceApplicationSceneTransitionContextDelegate, SBSceneLayoutWorkspaceTransactionObserver, UIDragInteractionDelegate_Private, UIDropInteractionDelegate_Private>
 @property  BOOL dragging
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDragAndDropAppActivationWorkspaceTransaction shouldTrackLocationOfDropSession:inSceneLayoutViewController:]
  +[SBDragAndDropAppActivationWorkspaceTransaction shouldTrackLocationOfDropSession:inSceneLayoutViewController:isCurrentlyTracking:]
  +[SBDragAndDropAppActivationWorkspaceTransaction isDragOverFullscreenRegionAtLocation:inBounds:]
  +[SBDragAndDropAppActivationWorkspaceTransaction isDragOverSideGutterRegionsAtLocation:inBounds:totalContentDragGutterWidth:]
  +[SBDragAndDropAppActivationWorkspaceTransaction prototypeSettingsContentDraggingSideActivationWidth]
  +[SBDragAndDropAppActivationWorkspaceTransaction prototypeSettingsContentDraggingFloatingActivationWidth]
  +[SBDragAndDropAppActivationWorkspaceTransaction prototypeSettingsContentDraggingCommandeerWidth]
  +[SBDragAndDropAppActivationWorkspaceTransaction prototypeSettingsWindowTearOffDraggingSideActivationWidth]
  +[SBDragAndDropAppActivationWorkspaceTransaction prototypeSettingsWindowTearOffDraggingFloatingActivationWidth]
  +[SBDragAndDropAppActivationWorkspaceTransaction sourceSceneInterfaceOrientedBoundsForDropSession:inSceneLayoutViewController:]
  +[SBDragAndDropAppActivationWorkspaceTransaction prototypeSettingsFullscreenActivationRegionSize]
  +[SBDragAndDropAppActivationWorkspaceTransaction prototypeSettingsSideActivationGutterSize]

  // instance methods
  -[SBDragAndDropAppActivationWorkspaceTransaction dropInteraction:sessionDidExit:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dropInteraction:sessionDidEnter:]
  -[SBDragAndDropAppActivationWorkspaceTransaction transaction:didCommitSceneUpdate:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dropInteraction:previewForDroppingItem:withDefault:]
  -[SBDragAndDropAppActivationWorkspaceTransaction canInterruptForTransitionRequest:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dropInteraction:item:willAnimateDropWithAnimator:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dropInteraction:concludeDrop:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dropInteraction:performDrop:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dropInteraction:sessionDidEnd:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dropInteraction:sessionDidUpdate:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dragInteraction:session:didEndWithOperation:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _dragInteraction:customSpringAnimationBehaviorForCancellingItem:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _canBeInterrupted]
  -[SBDragAndDropAppActivationWorkspaceTransaction dragInteraction:session:willEndWithOperation:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _didComplete]
  -[SBDragAndDropAppActivationWorkspaceTransaction dragInteraction:willAnimateLiftWithAnimator:session:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dragInteraction:sessionDidMove:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _childTransactionDidComplete:]
  -[SBDragAndDropAppActivationWorkspaceTransaction previousLayoutStateForApplicationTransitionContext:]
  -[SBDragAndDropAppActivationWorkspaceTransaction isDragging]
  -[SBDragAndDropAppActivationWorkspaceTransaction _begin]
  -[SBDragAndDropAppActivationWorkspaceTransaction dragInteraction:item:willAnimateCancelWithAnimator:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _willInterruptWithReason:]
  -[SBDragAndDropAppActivationWorkspaceTransaction .cxx_destruct]
  -[SBDragAndDropAppActivationWorkspaceTransaction dragInteraction:sessionWillBegin:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dragInteraction:previewForLiftingItem:session:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _gestureType]
  -[SBDragAndDropAppActivationWorkspaceTransaction dragInteraction:itemsForBeginningSession:]
  -[SBDragAndDropAppActivationWorkspaceTransaction dragInteraction:previewForCancellingItem:withDefault:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _dropInteraction:customSpringAnimationBehaviorForDroppingItem:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _invalidateStatusBarAssertions]
  -[SBDragAndDropAppActivationWorkspaceTransaction _shouldComplete]
  -[SBDragAndDropAppActivationWorkspaceTransaction applicationTransitionContext:frameForApplicationSceneEntity:]
  -[SBDragAndDropAppActivationWorkspaceTransaction layoutStateForApplicationTransitionContext:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _dragInteractionDidCancelLiftWithoutDragging:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _didInterruptWithReason:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _currentGestureEventForGesture:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _addChildWorkspaceTransaction:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _platterScale]
  -[SBDragAndDropAppActivationWorkspaceTransaction _willInterruptForTransitionRequest:]
  -[SBDragAndDropAppActivationWorkspaceTransaction matchesUIDragDropSession:]
  -[SBDragAndDropAppActivationWorkspaceTransaction matchesApplicationDropSession:]
  -[SBDragAndDropAppActivationWorkspaceTransaction initWithTransitionRequest:mainSwitcherContentController:sceneLayoutViewController:dropSession:delegate:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _setupPlatterPreviewForContentDrag]
  -[SBDragAndDropAppActivationWorkspaceTransaction _createPlatterPreviewForApplication:withSourceView:dropSession:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _configurePlatterPreview:forSceneHandle:completion:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateActiveSourceViewProviderWithDragState:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateAnchorPointForPlatterPreview:dragPreview:withSourceViewBounds:location:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updatePlatterPreviewForSetDown:animated:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _handleSessionDidUpdate:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _handleSessionDidPerformDrop:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _handleSessionDidEnd:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _layoutRoleForDropAction:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _dragPreviewForDroppingItem:withDefault:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _handleWillAnimateDropWithAnimator:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateCurrentDropActionProposedLayoutState]
  -[SBDragAndDropAppActivationWorkspaceTransaction _cleanUpAndCompleteTransactionIfNecessary]
  -[SBDragAndDropAppActivationWorkspaceTransaction _interruptForDragExitedDropZoneIfNecessary]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateForWindowDragForSession:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateCurrentDropActionForSession:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateLayoutElementViewControllersWithCompletion:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _transitionRequestForDropAction:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _shouldFailLayoutStateTransitionForWindowDrag]
  -[SBDragAndDropAppActivationWorkspaceTransaction _fadeOutPreviousLayoutElementViewControllersIfNecessary]
  -[SBDragAndDropAppActivationWorkspaceTransaction _runFinalLayoutStateTransaction]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateLayoutElementViewControllerForDropCompletion]
  -[SBDragAndDropAppActivationWorkspaceTransaction _uncommandeerContentDrag]
  -[SBDragAndDropAppActivationWorkspaceTransaction resizeUIAnimationFactory]
  -[SBDragAndDropAppActivationWorkspaceTransaction _displayLinkDidUpdate:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _shouldPushInSceneLayoutViewControllerForDropAction:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _setStatusBarsHidden:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateLayoutElementViewControllerDarkeningWithCompletion:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateLayoutElementViewControllerCornerRadiusWithCompletion:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateLayoutElementViewControllerBlurringWithCompletion:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateLayoutElementViewControllerStatusBars]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateSeparatorViewWithCompletion:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _primaryApplicationLayoutElementViewController]
  -[SBDragAndDropAppActivationWorkspaceTransaction _sideApplicationLayoutElementViewController]
  -[SBDragAndDropAppActivationWorkspaceTransaction _showResizeUI]
  -[SBDragAndDropAppActivationWorkspaceTransaction _areLayoutElementViewControllersCorrectlySizedForDropAction:proposedDropLayoutState:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _setupResizeAnimatableProperty]
  -[SBDragAndDropAppActivationWorkspaceTransaction _beginRequiringSceneViewMatchMoveAnimation]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updateLayoutElementViewControllerFrames]
  -[SBDragAndDropAppActivationWorkspaceTransaction _endRequiringSceneViewMatchMoveAnimation]
  -[SBDragAndDropAppActivationWorkspaceTransaction _primaryLayoutElementViewController]
  -[SBDragAndDropAppActivationWorkspaceTransaction _sideLayoutElementViewController]
  -[SBDragAndDropAppActivationWorkspaceTransaction _getPrimaryLayoutElementViewFrame:sideLayoutElementViewFrame:separatorViewFrame:forDropAction:proposedDropLayoutState:state:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _getPrimaryLayoutElementViewFrame:sideLayoutElementViewFrame:separatorViewFrame:forDropAction:proposedDropLayoutState:state:spaceConfiguration:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _sizeForFloatingApplication]
  -[SBDragAndDropAppActivationWorkspaceTransaction _platterSizeForDropAction:proposedDropLayoutState:setDown:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _cornerRadiusConfigurationForDropAction:proposedDropLayoutState:setDown:mode:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _getPlatterDiffuseShadowParameters:rimShadowParameters:diffuseFilters:rimFilters:forDropAction:setDown:mode:userInterfaceStyle:]
  -[SBDragAndDropAppActivationWorkspaceTransaction _endDragAndDropFluidGesture]
  -[SBDragAndDropAppActivationWorkspaceTransaction _acquireStatusBarAssertions]
  -[SBDragAndDropAppActivationWorkspaceTransaction _updatePlatterPreviewWithUpdatedSourceView]
  -[SBDragAndDropAppActivationWorkspaceTransaction _platterFrameInSwitcherView]
  -[SBDragAndDropAppActivationWorkspaceTransaction _canInterruptForCurrentDropAction]
  -[SBDragAndDropAppActivationWorkspaceTransaction _areLayoutElementViewControllersBlurred]
  -[SBDragAndDropAppActivationWorkspaceTransaction _gestureModifierPhaseForGestureState:]


SBHomeGestureToSwitcherFloatingSwitcherModifier : SBTransitionSwitcherModifier
 @property  SBSwitcherModifier *multitaskingModifier
 @property  SBAppLayout *selectedAppLayout
 @property  SBFluidSwitcherAnimationSettings *animationSettings

  // instance methods
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier _layoutSettings]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier .cxx_destruct]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier transitionWillBegin]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier setAnimationSettings:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier animationSettings]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier multitaskingModifier]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier selectedAppLayout]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier setSelectedAppLayout:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier initWithTransitionID:multitaskingModifier:selectedAppLayout:]
  -[SBHomeGestureToSwitcherFloatingSwitcherModifier setMultitaskingModifier:]


SBActivateHomeButtonSwitcherEventResponse : SBSwitcherModifierEventResponse
  // instance methods
  -[SBActivateHomeButtonSwitcherEventResponse type]


SBLockScreenContentAssertionTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLockScreenContentAssertionTestRecipe load]

  // instance methods
  -[SBLockScreenContentAssertionTestRecipe .cxx_destruct]
  -[SBLockScreenContentAssertionTestRecipe title]
  -[SBLockScreenContentAssertionTestRecipe handleVolumeIncrease]
  -[SBLockScreenContentAssertionTestRecipe handleVolumeDecrease]


SBTripleClickSOSMigrationAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
  // instance methods
  -[SBTripleClickSOSMigrationAlertItem forcesModalAlertAppearance]
  -[SBTripleClickSOSMigrationAlertItem shouldShowInLockScreen]
  -[SBTripleClickSOSMigrationAlertItem configure:requirePasscodeForActions:]
  -[SBTripleClickSOSMigrationAlertItem allowInSetup]


SBHomeGestureToSwitcherSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBHomeGestureToSwitcherSwitcherModifier homeScreenBackdropBlurType]
  -[SBHomeGestureToSwitcherSwitcherModifier visibleAppLayouts]
  -[SBHomeGestureToSwitcherSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBHomeGestureToSwitcherSwitcherModifier isHomeScreenContentRequired]
  -[SBHomeGestureToSwitcherSwitcherModifier isSwitcherWindowVisible]
  -[SBHomeGestureToSwitcherSwitcherModifier animationAttributesForLayoutElement:]
  -[SBHomeGestureToSwitcherSwitcherModifier wallpaperStyle]
  -[SBHomeGestureToSwitcherSwitcherModifier cardCornerRadiiForIndex:]
  -[SBHomeGestureToSwitcherSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBHomeGestureToSwitcherSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBHomeGestureToSwitcherSwitcherModifier _layoutSettings]
  -[SBHomeGestureToSwitcherSwitcherModifier containerStatusBarAnimationDuration]
  -[SBHomeGestureToSwitcherSwitcherModifier .cxx_destruct]
  -[SBHomeGestureToSwitcherSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBHomeGestureToSwitcherSwitcherModifier transitionWillBegin]
  -[SBHomeGestureToSwitcherSwitcherModifier _appLayoutToScrollToDuringTransition]
  -[SBHomeGestureToSwitcherSwitcherModifier handleTimerEvent:]
  -[SBHomeGestureToSwitcherSwitcherModifier _dismissForEmptySwitcherResponseName]
  -[SBHomeGestureToSwitcherSwitcherModifier initWithTransitionID:multitaskingModifier:selectedAppLayout:startingEnvironmentMode:liftOfVelocity:liftOffTranslation:]


SBApplicationShortcutStoreManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBApplicationShortcutStoreManager sharedManager]

  // instance methods
  -[SBApplicationShortcutStoreManager init]
  -[SBApplicationShortcutStoreManager applicationShortcutItemsForBundleIdentifier:withVersion:]
  -[SBApplicationShortcutStoreManager _stateLock_storeForBundleIdentifier:]
  -[SBApplicationShortcutStoreManager dealloc]
  -[SBApplicationShortcutStoreManager .cxx_destruct]
  -[SBApplicationShortcutStoreManager invalidateCache]
  -[SBApplicationShortcutStoreManager setApplicationShortcutItems:forBundleIdentifier:withVersion:]
  -[SBApplicationShortcutStoreManager _installedAppsDidChange:]
  -[SBApplicationShortcutStoreManager saveSynchronously]


SBInteractiveScreenshotDomain : PTDomain /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
  // class methods
  +[SBInteractiveScreenshotDomain domainName]
  +[SBInteractiveScreenshotDomain rootSettings]
  +[SBInteractiveScreenshotDomain rootSettingsClass]
  +[SBInteractiveScreenshotDomain domainGroupName]


SBDeviceApplicationSceneOverlayViewProvider : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBDeviceApplicationSceneHandle *sceneHandle
 @property  <SBDeviceApplicationSceneOverlayViewProviderDelegate> *delegate
 @property  UIViewController<SBDeviceApplicationSceneOverlayViewController> *overlayViewController
 @property  long long preferredStatusBarStyle
 @property  BOOL wantsResignActiveAssertion
 @property  long long priority

  // instance methods
  -[SBDeviceApplicationSceneOverlayViewProvider initWithSceneHandle:delegate:]
  -[SBDeviceApplicationSceneOverlayViewProvider preferredStatusBarStyle]
  -[SBDeviceApplicationSceneOverlayViewProvider showContentWithAnimation:completionHandler:]
  -[SBDeviceApplicationSceneOverlayViewProvider _deactivateIfPossible]
  -[SBDeviceApplicationSceneOverlayViewProvider overlayViewController]
  -[SBDeviceApplicationSceneOverlayViewProvider _activateIfPossible]
  -[SBDeviceApplicationSceneOverlayViewProvider preferredInterfaceOrientationForPresentation]
  -[SBDeviceApplicationSceneOverlayViewProvider hideContentWithAnimation:completionHandler:]
  -[SBDeviceApplicationSceneOverlayViewProvider wantsResignActiveAssertion]
  -[SBDeviceApplicationSceneOverlayViewProvider sceneHandle]
  -[SBDeviceApplicationSceneOverlayViewProvider dealloc]
  -[SBDeviceApplicationSceneOverlayViewProvider .cxx_destruct]
  -[SBDeviceApplicationSceneOverlayViewProvider _realOverlayViewController]
  -[SBDeviceApplicationSceneOverlayViewProvider setSceneHandle:]
  -[SBDeviceApplicationSceneOverlayViewProvider supportedInterfaceOrientations]
  -[SBDeviceApplicationSceneOverlayViewProvider priority]
  -[SBDeviceApplicationSceneOverlayViewProvider delegate]
  -[SBDeviceApplicationSceneOverlayViewProvider shouldFollowSceneOrientation]


SBExternalDisplayPresenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSceneHandleObserver, BSInvalidatable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBExternalDisplayPresenter sceneHandle:didUpdateClientSettingsWithDiff:transitionContext:]
  -[SBExternalDisplayPresenter dealloc]
  -[SBExternalDisplayPresenter .cxx_destruct]
  -[SBExternalDisplayPresenter observeValueForKeyPath:ofObject:change:context:]
  -[SBExternalDisplayPresenter invalidate]
  -[SBExternalDisplayPresenter initWithLayoutPublisher:displayConfiguration:]
  -[SBExternalDisplayPresenter updateToConfiguration:withForegroundApp:]
  -[SBExternalDisplayPresenter _setPreventIdleSleepForApp:presenting:]
  -[SBExternalDisplayPresenter _createUpdateTransaction]
  -[SBExternalDisplayPresenter _enqueuePresentationUpdate]
  -[SBExternalDisplayPresenter _ensureMode:overscanCompensation:]
  -[SBExternalDisplayPresenter _updateHostingIfNecessary]


SBLowEndHardwareSwitcherModifier : SBSwitcherModifier
  // instance methods
  -[SBLowEndHardwareSwitcherModifier homeScreenAlpha]
  -[SBLowEndHardwareSwitcherModifier handleMainTransitionEvent:]
  -[SBLowEndHardwareSwitcherModifier _shouldSimplifyForWidgetCenterAndLibrary]
  -[SBLowEndHardwareSwitcherModifier initWithSimplificationOptions:]
  -[SBLowEndHardwareSwitcherModifier _shouldSimplifyForOpenFolder]
  -[SBLowEndHardwareSwitcherModifier homeScreenScale]
  -[SBLowEndHardwareSwitcherModifier _shouldResignActiveAppsUnderFloatingApp]
  -[SBLowEndHardwareSwitcherModifier appLayoutsToResignActive]
  -[SBLowEndHardwareSwitcherModifier wallpaperScale]
  -[SBLowEndHardwareSwitcherModifier keyboardSuppressionMode]


SBReorderInfoAlert : SBHomeScreenNagAlert
  // instance methods
  -[SBReorderInfoAlert init]
  -[SBReorderInfoAlert didDeactivateForReason:]


SBAssistantActiveInterfaceOrientationWindow : SBSecureMainScreenActiveInterfaceOrientationWindow
 @property  BOOL touchesPassThroughToSpringBoard
 @property  SBAssistantRootViewController *assistantRootViewController

  // class methods
  +[SBAssistantActiveInterfaceOrientationWindow _isSecure]
  +[SBAssistantActiveInterfaceOrientationWindow sb_autorotates]
  +[SBAssistantActiveInterfaceOrientationWindow defaultLayoutStrategy]

  // instance methods
  -[SBAssistantActiveInterfaceOrientationWindow _canBecomeKeyWindow]
  -[SBAssistantActiveInterfaceOrientationWindow hitTest:withEvent:]
  -[SBAssistantActiveInterfaceOrientationWindow initWithDebugName:]
  -[SBAssistantActiveInterfaceOrientationWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBAssistantActiveInterfaceOrientationWindow _usesWindowServerHitTesting]
  -[SBAssistantActiveInterfaceOrientationWindow isOpaque]
  -[SBAssistantActiveInterfaceOrientationWindow setTouchesPassThroughToSpringBoard:]
  -[SBAssistantActiveInterfaceOrientationWindow assistantRootViewController]
  -[SBAssistantActiveInterfaceOrientationWindow touchesPassThroughToSpringBoard]


SBAssistantWindow : SBWindow
 @property  BOOL touchesPassThroughToSpringBoard
 @property  SBAssistantRootViewController *assistantRootViewController

  // class methods
  +[SBAssistantWindow _isSecure]
  +[SBAssistantWindow sb_autorotates]
  +[SBAssistantWindow defaultLayoutStrategy]

  // instance methods
  -[SBAssistantWindow _canBecomeKeyWindow]
  -[SBAssistantWindow dealloc]
  -[SBAssistantWindow hitTest:withEvent:]
  -[SBAssistantWindow _hitTest:withEvent:windowServerHitTestWindow:]
  -[SBAssistantWindow isOpaque]
  -[SBAssistantWindow setTouchesPassThroughToSpringBoard:]
  -[SBAssistantWindow assistantRootViewController]
  -[SBAssistantWindow initWithScreen:layoutStrategy:debugName:scene:]
  -[SBAssistantWindow touchesPassThroughToSpringBoard]


SBSwitcherScrollViewAttributes : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, NSMutableCopying>
 @property  {CGSize=dd} contentSize
 @property  double decelerationRate
 @property  BOOL scrollViewPagingEnabled
 @property  unsigned long scrollAxis
 @property  {CGSize=dd} interpageSpacingForPaging
 @property  {CGPoint=dd} pagingOrigin
 @property  BOOL interpolatesDuringSwipeToKill

  // instance methods
  -[SBSwitcherScrollViewAttributes copyWithZone:]
  -[SBSwitcherScrollViewAttributes setScrollAxis:]
  -[SBSwitcherScrollViewAttributes decelerationRate]
  -[SBSwitcherScrollViewAttributes _copyWithClass:]
  -[SBSwitcherScrollViewAttributes setPagingOrigin:]
  -[SBSwitcherScrollViewAttributes setDecelerationRate:]
  -[SBSwitcherScrollViewAttributes contentSize]
  -[SBSwitcherScrollViewAttributes scrollAxis]
  -[SBSwitcherScrollViewAttributes pagingOrigin]
  -[SBSwitcherScrollViewAttributes setContentSize:]
  -[SBSwitcherScrollViewAttributes mutableCopyWithZone:]
  -[SBSwitcherScrollViewAttributes scrollViewPagingEnabled]
  -[SBSwitcherScrollViewAttributes interpageSpacingForPaging]
  -[SBSwitcherScrollViewAttributes interpolatesDuringSwipeToKill]
  -[SBSwitcherScrollViewAttributes setScrollViewPagingEnabled:]
  -[SBSwitcherScrollViewAttributes setInterpageSpacingForPaging:]
  -[SBSwitcherScrollViewAttributes setInterpolatesDuringSwipeToKill:]


SBMutableSwitcherScrollViewAttributes : SBSwitcherScrollViewAttributes
 @property  {CGSize=dd} contentSize
 @property  double decelerationRate
 @property  BOOL scrollViewPagingEnabled
 @property  unsigned long scrollAxis
 @property  {CGSize=dd} interpageSpacingForPaging
 @property  {CGPoint=dd} pagingOrigin
 @property  BOOL interpolatesDuringSwipeToKill


SBSwitcherAnimationAttributes : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, NSMutableCopying>
 @property  long long updateMode
 @property  SBFFluidBehaviorSettings *layoutSettings
 @property  SBFFluidBehaviorSettings *positionSettings
 @property  SBFFluidBehaviorSettings *scaleSettings
 @property  SBFFluidBehaviorSettings *opacitySettings
 @property  SBFFluidBehaviorSettings *cornerRadiusSettings

  // instance methods
  -[SBSwitcherAnimationAttributes copyWithZone:]
  -[SBSwitcherAnimationAttributes setLayoutSettings:]
  -[SBSwitcherAnimationAttributes setScaleSettings:]
  -[SBSwitcherAnimationAttributes opacitySettings]
  -[SBSwitcherAnimationAttributes .cxx_destruct]
  -[SBSwitcherAnimationAttributes _copyWithClass:]
  -[SBSwitcherAnimationAttributes updateMode]
  -[SBSwitcherAnimationAttributes setOpacitySettings:]
  -[SBSwitcherAnimationAttributes scaleSettings]
  -[SBSwitcherAnimationAttributes mutableCopyWithZone:]
  -[SBSwitcherAnimationAttributes layoutSettings]
  -[SBSwitcherAnimationAttributes positionSettings]
  -[SBSwitcherAnimationAttributes cornerRadiusSettings]
  -[SBSwitcherAnimationAttributes setUpdateMode:]
  -[SBSwitcherAnimationAttributes setCornerRadiusSettings:]
  -[SBSwitcherAnimationAttributes setPositionSettings:]


SBMutableSwitcherAnimationAttributes : SBSwitcherAnimationAttributes
 @property  long long updateMode
 @property  SBFFluidBehaviorSettings *layoutSettings
 @property  SBFFluidBehaviorSettings *positionSettings
 @property  SBFFluidBehaviorSettings *scaleSettings
 @property  SBFFluidBehaviorSettings *opacitySettings
 @property  SBFFluidBehaviorSettings *cornerRadiusSettings


SBSwitcherLiveContentRasterizationAttributes : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying, NSMutableCopying>
 @property  long long rasterizationStyle
 @property  BOOL wantsMinificationFilter

  // instance methods
  -[SBSwitcherLiveContentRasterizationAttributes copyWithZone:]
  -[SBSwitcherLiveContentRasterizationAttributes setWantsMinificationFilter:]
  -[SBSwitcherLiveContentRasterizationAttributes _copyWithClass:]
  -[SBSwitcherLiveContentRasterizationAttributes rasterizationStyle]
  -[SBSwitcherLiveContentRasterizationAttributes mutableCopyWithZone:]
  -[SBSwitcherLiveContentRasterizationAttributes wantsMinificationFilter]
  -[SBSwitcherLiveContentRasterizationAttributes setRasterizationStyle:]
  -[SBSwitcherLiveContentRasterizationAttributes attributesByModifyingAttributesWithBlock:]


SBMutableSwitcherLiveContentRasterizationAttributes : SBSwitcherLiveContentRasterizationAttributes
 @property  long long rasterizationStyle
 @property  BOOL wantsMinificationFilter


SBBlurViewCoordinator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *viewControllers
 @property  BOOL blurred
 @property  unsigned long state

  // instance methods
  -[SBBlurViewCoordinator init]
  -[SBBlurViewCoordinator viewControllers]
  -[SBBlurViewCoordinator .cxx_destruct]
  -[SBBlurViewCoordinator _setState:]
  -[SBBlurViewCoordinator isBlurred]
  -[SBBlurViewCoordinator state]
  -[SBBlurViewCoordinator initWithElementViewControllers:]
  -[SBBlurViewCoordinator setBlurred:withAnimationFactory:completion:]
  -[SBBlurViewCoordinator _fireBlocksForState:]
  -[SBBlurViewCoordinator addNotifyBlock:forState:]
  -[SBBlurViewCoordinator removeNotifyBlock:forState:]


SBBacklightController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL isPendingScreenUnblankAfterCACommit
 @property  BOOL screenIsOn
 @property  BOOL screenIsDim
 @property  long long lastBacklightChangeSource
 @property  SBHIDUILockAssertion *currentHIDUILockAssertion
 @property  double backlightFactor

  // class methods
  +[SBBacklightController sharedInstance]
  +[SBBacklightController _sharedInstanceCreateIfNeeded:]
  +[SBBacklightController sharedInstanceIfExists]

  // instance methods
  -[SBBacklightController preventIdleSleep]
  -[SBBacklightController init]
  -[SBBacklightController _deferredScreenUnblankDone]
  -[SBBacklightController setBacklightFactorPending:]
  -[SBBacklightController allowIdleSleep]
  -[SBBacklightController screenIsDim]
  -[SBBacklightController screenIsOn]
  -[SBBacklightController defaultLockScreenDimIntervalWhenNotificationsPresent]
  -[SBBacklightController _notifyObserversDidAnimateToFactor:source:]
  -[SBBacklightController .cxx_destruct]
  -[SBBacklightController turnOnScreenFullyWithBacklightSource:]
  -[SBBacklightController setCurrentHIDUILockAssertion:]
  -[SBBacklightController currentHIDUILockAssertion]
  -[SBBacklightController _notifyObserversWillAnimateToFactor:source:]
  -[SBBacklightController unregisterInformer:]
  -[SBBacklightController backlightFactor]
  -[SBBacklightController reloadDefaults]
  -[SBBacklightController _startFadeOutAnimationFromLockSource:]
  -[SBBacklightController registerInformer:]
  -[SBBacklightController shouldTurnOnScreenForBacklightSource:]
  -[SBBacklightController animateBacklightToFactor:duration:source:completion:]
  -[SBBacklightController _animateBacklightToFactor:duration:source:silently:completion:]
  -[SBBacklightController isPendingScreenUnblankAfterCACommit]
  -[SBBacklightController lastBacklightChangeSource]
  -[SBBacklightController _suspendProxAndMultitouch:source:]
  -[SBBacklightController removeObserver:]
  -[SBBacklightController _performDeferredBacklightRampWorkWithInfo:]
  -[SBBacklightController addObserver:]
  -[SBBacklightController setBacklightFactor:source:]
  -[SBBacklightController defaultLockScreenDimInterval]
  -[SBBacklightController _undimFromSource:]
  -[SBBacklightController preventIdleSleepForNumberOfSeconds:]


SBShutdownContext : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <NSCopying>
 @property  NSString *reason
 @property  BOOL fromUserPowerDown

  // instance methods
  -[SBShutdownContext copyWithZone:]
  -[SBShutdownContext initWithReason:]
  -[SBShutdownContext fromUserPowerDown]
  -[SBShutdownContext .cxx_destruct]
  -[SBShutdownContext isEqual:]
  -[SBShutdownContext reason]
  -[SBShutdownContext setFromUserPowerDown:]


SBApplicationRestrictionController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <STTelephonyStateObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationRestrictionController initWithDataSource:]
  -[SBApplicationRestrictionController isApplicationIdentifierRestricted:]
  -[SBApplicationRestrictionController init]
  -[SBApplicationRestrictionController noteApplicationIdentifiersDidChangeWithAdded:replaced:removed:]
  -[SBApplicationRestrictionController dealloc]
  -[SBApplicationRestrictionController .cxx_destruct]
  -[SBApplicationRestrictionController beginPostingChanges]
  -[SBApplicationRestrictionController removeObserver:]
  -[SBApplicationRestrictionController addObserver:]
  -[SBApplicationRestrictionController carrierBundleInfoDidChangeForStateProvider:slot:]
  -[SBApplicationRestrictionController noteVisibilityOverridesDidChange]
  -[SBApplicationRestrictionController noteRestrictionsMayHaveChanged]


SBTodayKeepOnHomeScreenPlatterView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  UILabel *titleLabel
 @property  UILabel *descriptionLabel
 @property  UISwitch *pinnedSwitch
 @property  MTMaterialView *backgroundView
 @property  BOOL pinned

  // instance methods
  -[SBTodayKeepOnHomeScreenPlatterView traitCollection]
  -[SBTodayKeepOnHomeScreenPlatterView backgroundView]
  -[SBTodayKeepOnHomeScreenPlatterView setTitleLabel:]
  -[SBTodayKeepOnHomeScreenPlatterView setBackgroundView:]
  -[SBTodayKeepOnHomeScreenPlatterView titleLabel]
  -[SBTodayKeepOnHomeScreenPlatterView setPinned:]
  -[SBTodayKeepOnHomeScreenPlatterView initWithFrame:]
  -[SBTodayKeepOnHomeScreenPlatterView isPinned]
  -[SBTodayKeepOnHomeScreenPlatterView .cxx_destruct]
  -[SBTodayKeepOnHomeScreenPlatterView descriptionLabel]
  -[SBTodayKeepOnHomeScreenPlatterView setDescriptionLabel:]
  -[SBTodayKeepOnHomeScreenPlatterView _pinnedSwitchValueChanged:]
  -[SBTodayKeepOnHomeScreenPlatterView pinnedSwitch]
  -[SBTodayKeepOnHomeScreenPlatterView setPinnedSwitch:]


SBSnapshotSlotIdWrapper : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  unsigned int slotId
 @property  CAContext *context

  // instance methods
  -[SBSnapshotSlotIdWrapper context]
  -[SBSnapshotSlotIdWrapper init]
  -[SBSnapshotSlotIdWrapper dealloc]
  -[SBSnapshotSlotIdWrapper .cxx_destruct]
  -[SBSnapshotSlotIdWrapper slotId]
  -[SBSnapshotSlotIdWrapper initWithContext:slotId:]


SBFloatingDockSuggestionsModel : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBRecentDisplayItemsPersistenceDelegate, SBRecentDisplayItemsControllerDelegate, SBIconListModelObserver>
 @property  unsigned long maxSuggestions
 @property  SBAppSuggestionManager *appSuggestionManager
 @property  SBRecentDisplayItemsController *recentsController
 @property  SBRecentDisplayItemsDataStore *recentsDataStore
 @property  SBRecentDisplayItemsDefaults *recentsDefaults
 @property  SBIconListModel *userDockListModel
 @property  SBIconController *iconController
 @property  SBApplicationController *applicationController
 @property  SBIconModel *iconModel
 @property  SBFloatingDockDefaults *floatingDockDefaults
 @property  BOOL recentsEnabled
 @property  SBFAnalyticsClient *analyticsClient
 @property  NSMutableSet *pendingSuggestionUpdateReasons
 @property  NSMutableOrderedSet *currentRecentDisplayItems
 @property  NSMutableOrderedSet *currentRecentDisplayItemsSortedByRecency
 @property  NSOrderedSet *currentDisplayItems
 @property  PTSingleTestRecipe *stressTestRecipe
 @property  SBBestAppSuggestion *currentAppSuggestion
 @property  SBApplication *requestedSuggestedApplication
 @property  <SBFloatingDockSuggestionsModelDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFloatingDockSuggestionsModel _addStateCaptureHandlers]
  -[SBFloatingDockSuggestionsModel setIconModel:]
  -[SBFloatingDockSuggestionsModel iconController]
  -[SBFloatingDockSuggestionsModel recentsController]
  -[SBFloatingDockSuggestionsModel init]
  -[SBFloatingDockSuggestionsModel floatingDockDefaults]
  -[SBFloatingDockSuggestionsModel dealloc]
  -[SBFloatingDockSuggestionsModel _initializeAndObserveDefaults]
  -[SBFloatingDockSuggestionsModel .cxx_destruct]
  -[SBFloatingDockSuggestionsModel dockViewDidResignVisible]
  -[SBFloatingDockSuggestionsModel dockViewDidBecomeVisible]
  -[SBFloatingDockSuggestionsModel iconList:didReplaceIcon:withIcon:]
  -[SBFloatingDockSuggestionsModel _iconModelDidLayout:]
  -[SBFloatingDockSuggestionsModel iconModel]
  -[SBFloatingDockSuggestionsModel iconList:didAddIcon:]
  -[SBFloatingDockSuggestionsModel setDelegate:]
  -[SBFloatingDockSuggestionsModel delegate]
  -[SBFloatingDockSuggestionsModel applicationController]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsControllerShouldRepresentAppClipsAsWebClips:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:shouldAddItem:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:didAddItem:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:didAddItem:andDropItem:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:didMoveItemToFront:]
  -[SBFloatingDockSuggestionsModel recentDisplayItemsController:didRemoveItem:]
  -[SBFloatingDockSuggestionsModel _runStressTestWithCompletion:]
  -[SBFloatingDockSuggestionsModel requestedSuggestedApplication]
  -[SBFloatingDockSuggestionsModel setRequestedSuggestedApplication:]
  -[SBFloatingDockSuggestionsModel _iconModelDidChange:]
  -[SBFloatingDockSuggestionsModel currentDisplayItems]
  -[SBFloatingDockSuggestionsModel beginPendingUpdatesForReason:]
  -[SBFloatingDockSuggestionsModel endPendingUpdatesForReason:]
  -[SBFloatingDockSuggestionsModel currentAppSuggestion]
  -[SBFloatingDockSuggestionsModel recentsDataStore]
  -[SBFloatingDockSuggestionsModel recentsDefaults]
  -[SBFloatingDockSuggestionsModel appSuggestionManager]
  -[SBFloatingDockSuggestionsModel persistedDisplayItemsForDataStore:]
  -[SBFloatingDockSuggestionsModel dataStore:persistDisplayItems:]
  -[SBFloatingDockSuggestionsModel dataStore:shouldRestorePersistedDisplayItem:]
  -[SBFloatingDockSuggestionsModel initWithMaximumNumberOfSuggestions:iconController:recentsController:recentsDataStore:recentsDefaults:floatingDockDefaults:appSuggestionManager:analyticsClient:applicationController:]
  -[SBFloatingDockSuggestionsModel analyticsClient]
  -[SBFloatingDockSuggestionsModel setAnalyticsClient:]
  -[SBFloatingDockSuggestionsModel recentsEnabled]
  -[SBFloatingDockSuggestionsModel _setRecentsEnabled:]
  -[SBFloatingDockSuggestionsModel _dockListModelFromIconController]
  -[SBFloatingDockSuggestionsModel setUserDockListModel:]
  -[SBFloatingDockSuggestionsModel _reloadRecentsAndSuggestions]
  -[SBFloatingDockSuggestionsModel _appSuggestionsChanged:]
  -[SBFloatingDockSuggestionsModel _isPendingAppSuggestionsUpdate]
  -[SBFloatingDockSuggestionsModel _performAppSuggestionChangedWithNewSuggestion:]
  -[SBFloatingDockSuggestionsModel _updateCurrentDisplayItemsAfterContinuityChange:notifyDelegate:]
  -[SBFloatingDockSuggestionsModel _moveOrAddRecentThenCull:]
  -[SBFloatingDockSuggestionsModel _displayItemForAppSuggestion:]
  -[SBFloatingDockSuggestionsModel _indexForAppSuggestion:]
  -[SBFloatingDockSuggestionsModel _oldestRecent]
  -[SBFloatingDockSuggestionsModel _displayItemContainedInUserDock:]
  -[SBFloatingDockSuggestionsModel _handleNewRecentItem:]
  -[SBFloatingDockSuggestionsModel setCurrentDisplayItems:]
  -[SBFloatingDockSuggestionsModel _filterRecentDisplayItems:filteredOutItems:]
  -[SBFloatingDockSuggestionsModel _shouldProcessAppSuggestion:]
  -[SBFloatingDockSuggestionsModel maxSuggestions]
  -[SBFloatingDockSuggestionsModel userDockListModel]
  -[SBFloatingDockSuggestionsModel setRecentsEnabled:]
  -[SBFloatingDockSuggestionsModel pendingSuggestionUpdateReasons]
  -[SBFloatingDockSuggestionsModel currentRecentDisplayItems]
  -[SBFloatingDockSuggestionsModel currentRecentDisplayItemsSortedByRecency]
  -[SBFloatingDockSuggestionsModel stressTestRecipe]


SBStartupTransitionToLoginWindow : SBStartupTransitionToLockOut
  // instance methods
  -[SBStartupTransitionToLoginWindow suggestedLockAnimationForTransitionRequest:]


SBPrototypeController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <PTUIClient>
 @property  SBRestartManager *restartManager
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPrototypeController sharedInstance]

  // instance methods
  -[SBPrototypeController init]
  -[SBPrototypeController rootSettings]
  -[SBPrototypeController .cxx_destruct]
  -[SBPrototypeController restartSpringBoard]
  -[SBPrototypeController _createConnection]
  -[SBPrototypeController _acquireRemotePrototypingAssertion]
  -[SBPrototypeController _handlePrototypingEvent:]
  -[SBPrototypeController _shouldSendEvent:]
  -[SBPrototypeController killSpringBoard]
  -[SBPrototypeController _invalidateRemotePrototypingAssertion]
  -[SBPrototypeController _updateKeyHIDEventRouters]
  -[SBPrototypeController _updateRemoteEditingState]
  -[SBPrototypeController handleKeyHIDEvent:]
  -[SBPrototypeController _sendEvent:]
  -[SBPrototypeController restartManager]
  -[SBPrototypeController handleVolumeIncreaseEvent]
  -[SBPrototypeController handleRingerSwitchEvent]
  -[SBPrototypeController setRestartManager:]
  -[SBPrototypeController _handleKeyHIDEvent:]
  -[SBPrototypeController handleVolumeDecreaseEvent]


SBApplicationSceneView : SBSceneView /usr/lib/libicucore.A.dylib
 @property  SBApplicationSceneHandle *sceneHandle
 @property  SBApplication *application

  // instance methods
  -[SBApplicationSceneView application]
  -[SBApplicationSceneView initWithSceneHandle:referenceSize:orientation:hostRequester:]
  -[SBApplicationSceneView deviceApplicationSceneView]


SBHomeGestureArbiter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, SBHardwareButtonServiceObserver>
 @property  <BSInvalidatable> *stateCaptureHandle
 @property  NSMutableArray *participants
 @property  NSArray *owningParticipants
 @property  SBHomeGestureParticipant *hardwareButtonServiceParticipant
 @property  <BSInvalidatable> *hardwareButtonObserverAssertion
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureArbiter init]
  -[SBHomeGestureArbiter setStateCaptureHandle:]
  -[SBHomeGestureArbiter stateCaptureHandle]
  -[SBHomeGestureArbiter dealloc]
  -[SBHomeGestureArbiter .cxx_destruct]
  -[SBHomeGestureArbiter setParticipants:]
  -[SBHomeGestureArbiter succinctDescriptionBuilder]
  -[SBHomeGestureArbiter succinctDescription]
  -[SBHomeGestureArbiter participants]
  -[SBHomeGestureArbiter descriptionWithMultilinePrefix:]
  -[SBHomeGestureArbiter descriptionBuilderWithMultilinePrefix:]
  -[SBHomeGestureArbiter participantWithIdentifier:delegate:]
  -[SBHomeGestureArbiter buttonService:buttonKind:eventsConsumedDidChange:]
  -[SBHomeGestureArbiter _updateHardwareButtonServiceParticipant]
  -[SBHomeGestureArbiter _unregisterParticipant:]
  -[SBHomeGestureArbiter _registerParticipant:]
  -[SBHomeGestureArbiter _updateOwningParticipants]
  -[SBHomeGestureArbiter _setOwningParticipants:]
  -[SBHomeGestureArbiter hardwareButtonServiceParticipant]
  -[SBHomeGestureArbiter setHardwareButtonServiceParticipant:]
  -[SBHomeGestureArbiter _owningParticipants]
  -[SBHomeGestureArbiter hardwareButtonObserverAssertion]
  -[SBHomeGestureArbiter setHardwareButtonObserverAssertion:]


SBHomeGestureParticipant : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  SBHomeGestureArbiter *arbiter
 @property  BOOL ownsHomeGesture
 @property  long long resolvedHomeAffordanceSuppression
 @property  long long identifier
 @property  <SBHomeGestureParticipantDelegate> *delegate
 @property  BOOL canShareOwnershipWithNextParticipant
 @property  long long homeAffordanceSuppression
 @property  NSIndexSet *trumpsAdditionalIdentifiers
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBHomeGestureParticipant dealloc]
  -[SBHomeGestureParticipant .cxx_destruct]
  -[SBHomeGestureParticipant initWithIdentifier:]
  -[SBHomeGestureParticipant succinctDescriptionBuilder]
  -[SBHomeGestureParticipant setIdentifier:]
  -[SBHomeGestureParticipant identifier]
  -[SBHomeGestureParticipant ownsHomeGesture]
  -[SBHomeGestureParticipant succinctDescription]
  -[SBHomeGestureParticipant arbiter]
  -[SBHomeGestureParticipant setDelegate:]
  -[SBHomeGestureParticipant invalidate]
  -[SBHomeGestureParticipant delegate]
  -[SBHomeGestureParticipant descriptionWithMultilinePrefix:]
  -[SBHomeGestureParticipant descriptionBuilderWithMultilinePrefix:]
  -[SBHomeGestureParticipant homeAffordanceSuppression]
  -[SBHomeGestureParticipant setHomeAffordanceSuppression:]
  -[SBHomeGestureParticipant setTrumpsAdditionalIdentifiers:]
  -[SBHomeGestureParticipant resolvedHomeAffordanceSuppression]
  -[SBHomeGestureParticipant setCanShareOwnershipWithNextParticipant:]
  -[SBHomeGestureParticipant canShareOwnershipWithNextParticipant]
  -[SBHomeGestureParticipant setOwnsHomeGesture:]
  -[SBHomeGestureParticipant setArbiter:]
  -[SBHomeGestureParticipant trumpsAdditionalIdentifiers]
  -[SBHomeGestureParticipant setResolvedHomeAffordanceSuppression:]


SBLockScreenEmergencyDialerController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBLockScreenEmergencyCallViewControllerDelegate>
 @property  BOOL active
 @property  UIViewController *viewController
 @property  <SBLockScreenEmergencyDialerDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockScreenEmergencyDialerController viewController]
  -[SBLockScreenEmergencyDialerController .cxx_destruct]
  -[SBLockScreenEmergencyDialerController deactivate]
  -[SBLockScreenEmergencyDialerController isActive]
  -[SBLockScreenEmergencyDialerController setDelegate:]
  -[SBLockScreenEmergencyDialerController activateWithCompletion:]
  -[SBLockScreenEmergencyDialerController delegate]
  -[SBLockScreenEmergencyDialerController emergencyCallViewController:didExitWithError:]
  -[SBLockScreenEmergencyDialerController dismissEmergencyCallViewController:]


SBSlideUpAppGrabberView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <_SBFVibrantView, SBUILegibility>
 @property  {UIEdgeInsets=dddd} hitTestEdgeInsets
 @property  BOOL vibrancyAllowed
 @property  _SBFVibrantSettings *vibrantSettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double strength
 @property  _UILegibilitySettings *legibilitySettings

  // instance methods
  -[SBSlideUpAppGrabberView setStrength:]
  -[SBSlideUpAppGrabberView setBackgroundColor:]
  -[SBSlideUpAppGrabberView setBackgroundView:]
  -[SBSlideUpAppGrabberView legibilitySettings]
  -[SBSlideUpAppGrabberView setVibrantSettings:]
  -[SBSlideUpAppGrabberView .cxx_destruct]
  -[SBSlideUpAppGrabberView strength]
  -[SBSlideUpAppGrabberView setLegibilitySettings:]
  -[SBSlideUpAppGrabberView vibrantSettings]
  -[SBSlideUpAppGrabberView pointInside:withEvent:]
  -[SBSlideUpAppGrabberView sizeThatFits:]
  -[SBSlideUpAppGrabberView _shouldUseVibrancy]
  -[SBSlideUpAppGrabberView isVibrancyAllowed]
  -[SBSlideUpAppGrabberView setVibrancyAllowed:]
  -[SBSlideUpAppGrabberView layoutSubviews]
  -[SBSlideUpAppGrabberView hitTestEdgeInsets]
  -[SBSlideUpAppGrabberView setAppStyleGrabberImage:]
  -[SBSlideUpAppGrabberView _lazyLegibilityView]
  -[SBSlideUpAppGrabberView initWithAdditionalTopPadding:invertVerticalInsets:]
  -[SBSlideUpAppGrabberView setGrabberImageFromAppWithBundleIdentifier:]


SBNotificationHomeAffordanceController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBHomeGestureParticipantDelegate>
 @property  SBScreenEdgePanGestureRecognizer *screenEdgePanGesture
 @property  BSAnimationSettings *hideHomeAffordanceAnimationSettings
 @property  BSAnimationSettings *unhideHomeAffordanceAnimationSettings
 @property  <UIViewSpringAnimationBehaviorDescribing> *settleHomeAffordanceAnimationBehaviorDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBNotificationHomeAffordanceController sharedInstance]

  // instance methods
  -[SBNotificationHomeAffordanceController homeGestureParticipantOwningHomeGestureDidChange:]
  -[SBNotificationHomeAffordanceController .cxx_destruct]
  -[SBNotificationHomeAffordanceController unregisterClient:withIdentifier:]
  -[SBNotificationHomeAffordanceController registerClient:withIdentifier:]
  -[SBNotificationHomeAffordanceController hideHomeAffordanceAnimationSettings]
  -[SBNotificationHomeAffordanceController unhideHomeAffordanceAnimationSettings]
  -[SBNotificationHomeAffordanceController settleHomeAffordanceAnimationBehaviorDescription]
  -[SBNotificationHomeAffordanceController screenEdgePanGesture]


SBNotificationKeyboardHomeAffordanceAssertion : SBKeyboardHomeAffordanceAssertion <PLKeyboardHomeAffordanceAssertion>
 @property  double additionalEdgeMargin
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription


SBSceneViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBSceneViewPresentationConfiguring, SBSceneViewControlling>
 @property  SBSceneView *sceneView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBSceneHandle *sceneHandle
 @property  long long displayMode
 @property  <SBScenePlaceholderContentContext> *placeholderContentContext
 @property  UIView *customContentView
 @property  {CGSize=dd} contentReferenceSize
 @property  long long contentInterfaceOrientation

  // instance methods
  -[SBSceneViewController viewDidLoad]
  -[SBSceneViewController placeholderContentContext]
  -[SBSceneViewController contentInterfaceOrientation]
  -[SBSceneViewController setPlaceholderContentContext:]
  -[SBSceneViewController customContentView]
  -[SBSceneViewController displayMode]
  -[SBSceneViewController initWithSceneHandle:]
  -[SBSceneViewController contentReferenceSize]
  -[SBSceneViewController setDisplayMode:animationFactory:completion:]
  -[SBSceneViewController sceneHandle]
  -[SBSceneViewController dealloc]
  -[SBSceneViewController sceneViewPresentationPriority:]
  -[SBSceneViewController .cxx_destruct]
  -[SBSceneViewController containerContentWrapperInterfaceOrientationChangedTo:]
  -[SBSceneViewController initWithNibName:bundle:]
  -[SBSceneViewController newSnapshotView]
  -[SBSceneViewController setContentReferenceSize:withInterfaceOrientation:]
  -[SBSceneViewController setCustomContentView:]
  -[SBSceneViewController sceneViewPresentationIdentifier:]
  -[SBSceneViewController newSnapshotViewOnQueue:withCompletion:]
  -[SBSceneViewController newSnapshot]
  -[SBSceneViewController invalidate]
  -[SBSceneViewController initWithCoder:]
  -[SBSceneViewController _sceneView]
  -[SBSceneViewController _setSceneView:]


SBRecycledViewsContainer : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBRecycledViewsContainer tintColor]


SBMainDisplayWindowLayoutStrategy : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBWindowLayoutStrategy>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBMainDisplayWindowLayoutStrategy clipStrategy]
  +[SBMainDisplayWindowLayoutStrategy _strategyWithClipping:]
  +[SBMainDisplayWindowLayoutStrategy noClipStrategy]

  // instance methods
  -[SBMainDisplayWindowLayoutStrategy _init]
  -[SBMainDisplayWindowLayoutStrategy frameWithInterfaceOrientation:]
  -[SBMainDisplayWindowLayoutStrategy removeObserver:]
  -[SBMainDisplayWindowLayoutStrategy addObserver:]
  -[SBMainDisplayWindowLayoutStrategy shouldClipForWindow:]


SBWindow : SBFWindow /usr/lib/libutil.dylib <SBMainDisplayInterfaceOrientationSource, SBRecycledViewsContainerProviding, SBWindowLayoutStrategyObserving>
 @property  <SBWindowLayoutStrategy> *layoutStrategy
 @property  long long activeInterfaceOrientation
 @property  BOOL active
 @property  double orientationSourceLevel
 @property  NSString *orientationSourceDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIView *recycledViewsContainer

  // class methods
  +[SBWindow sb_autorotates]
  +[SBWindow defaultLayoutStrategy]
  +[SBWindow sb_disableStatusBarHeightChanges]

  // instance methods
  -[SBWindow activeInterfaceOrientation]
  -[SBWindow initWithFrame:]
  -[SBWindow dealloc]
  -[SBWindow .cxx_destruct]
  -[SBWindow recycledViewsContainer]
  -[SBWindow layoutStrategy]
  -[SBWindow setAutorotates:forceUpdateInterfaceOrientation:]
  -[SBWindow makeKeyAndVisible]
  -[SBWindow isActive]
  -[SBWindow traitCollectionDidChange:]
  -[SBWindow _shouldResizeWithScene]
  -[SBWindow _initWithScreen:layoutStrategy:debugName:rootViewController:scene:]
  -[SBWindow handleStatusBarChangeFromHeight:toHeight:]
  -[SBWindow initWithScreen:debugName:]
  -[SBWindow setHidden:]
  -[SBWindow initWithScreen:debugName:rootViewController:]
  -[SBWindow orientationSourceLevel]
  -[SBWindow sb_coronaAnimationController]
  -[SBWindow initWithScreen:layoutStrategy:debugName:scene:]
  -[SBWindow initWithScreen:layoutStrategy:debugName:]
  -[SBWindow _willEnableSecureRendering:]
  -[SBWindow _didDisableSecureRendering:]
  -[SBWindow _updateHidingForSecureRendering:]
  -[SBWindow _updateRealIsHidden]
  -[SBWindow _addHiddenReason:]
  -[SBWindow _removeHiddenReason:]
  -[SBWindow orientationSourceDescription]
  -[SBWindow layoutStrategyFrameOnScreenDidChange:]
  -[SBWindow setAlphaAndObeyBecauseIAmTheWindowManager:]


SBSecureWindow : SBWindow
  // class methods
  +[SBSecureWindow _isSecure]


SBIgnoredForAutorotationSecureWindow : SBSecureWindow
  // instance methods
  -[SBIgnoredForAutorotationSecureWindow _shouldControlAutorotation]


SBFluidSwitcherItemContainerHeaderView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <PTSettingsKeyObserver>
 @property  double preferredHeaderHeight
 @property  double textAlpha
 @property  NSArray *headerItems
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFluidSwitcherItemContainerHeaderView distanceFromBoundingLeadingEdgeToIconTrailingEdge]

  // instance methods
  -[SBFluidSwitcherItemContainerHeaderView _titleLabelFont]
  -[SBFluidSwitcherItemContainerHeaderView setHeaderItems:animated:]
  -[SBFluidSwitcherItemContainerHeaderView settings:changedValueForKey:]
  -[SBFluidSwitcherItemContainerHeaderView initWithFrame:]
  -[SBFluidSwitcherItemContainerHeaderView dealloc]
  -[SBFluidSwitcherItemContainerHeaderView _updateVisualStylingWithHeaderItems:]
  -[SBFluidSwitcherItemContainerHeaderView .cxx_destruct]
  -[SBFluidSwitcherItemContainerHeaderView textAlpha]
  -[SBFluidSwitcherItemContainerHeaderView preferredHeaderHeight]
  -[SBFluidSwitcherItemContainerHeaderView _contentSizeCategoryDidChangeNotification:]
  -[SBFluidSwitcherItemContainerHeaderView setHeaderItems:]
  -[SBFluidSwitcherItemContainerHeaderView _updateTitleAlpha]
  -[SBFluidSwitcherItemContainerHeaderView _applyPrototypeSettings]
  -[SBFluidSwitcherItemContainerHeaderView setTextAlpha:]
  -[SBFluidSwitcherItemContainerHeaderView headerItems]
  -[SBFluidSwitcherItemContainerHeaderView _subtitleLabelFont]
  -[SBFluidSwitcherItemContainerHeaderView layoutSubviews]


SBIdleTimerBehavior : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBFIdleTimerBehaviorProviding, BSDescriptionProviding>
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBIdleTimerBehavior disabledBehavior]
  +[SBIdleTimerBehavior behaviorWithDuration:mode:warnMode:]
  +[SBIdleTimerBehavior autoLockBehavior]
  +[SBIdleTimerBehavior defaultBehavior]
  +[SBIdleTimerBehavior lockScreenBehavior]
  +[SBIdleTimerBehavior behaviorForBehaviorProvider:]

  // instance methods
  -[SBIdleTimerBehavior idleTimerDuration]
  -[SBIdleTimerBehavior _initWithDuration:mode:warnMode:]
  -[SBIdleTimerBehavior idleWarnMode]
  -[SBIdleTimerBehavior idleTimerMode]
  -[SBIdleTimerBehavior customIdleWarningTimeout]
  -[SBIdleTimerBehavior succinctDescriptionBuilder]
  -[SBIdleTimerBehavior customIdleExpirationTimeout]
  -[SBIdleTimerBehavior succinctDescription]
  -[SBIdleTimerBehavior _initWithBehaviorProvider:]
  -[SBIdleTimerBehavior descriptionWithMultilinePrefix:]
  -[SBIdleTimerBehavior descriptionBuilderWithMultilinePrefix:]


SBNCSoundController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBLockScreenManager *lockScreenManager
 @property  SBLockStateAggregator *lockStateAggregator
 @property  NSMutableDictionary *playingSounds
 @property  NSMutableSet *requestsRequiringExplicitKill
 @property  DNDEventBehaviorResolutionService *dndEventBehaviorResolutionService

  // instance methods
  -[SBNCSoundController setDndEventBehaviorResolutionService:]
  -[SBNCSoundController lockScreenManager]
  -[SBNCSoundController setRequestsRequiringExplicitKill:]
  -[SBNCSoundController init]
  -[SBNCSoundController setPlayingSounds:]
  -[SBNCSoundController canPlaySoundForNotificationRequest:]
  -[SBNCSoundController _killSounds]
  -[SBNCSoundController .cxx_destruct]
  -[SBNCSoundController playSoundForNotificationRequest:presentingDestination:]
  -[SBNCSoundController playSoundIfPossibleForNotificationRequest:presentingDestination:]
  -[SBNCSoundController stopSoundForNotificationRequest:]
  -[SBNCSoundController lockStateAggregator]
  -[SBNCSoundController _lockStateChanged:]
  -[SBNCSoundController dndEventBehaviorResolutionService]
  -[SBNCSoundController playingSounds]
  -[SBNCSoundController initWithLockScreenManager:lockStateAggregator:]
  -[SBNCSoundController requestsRequiringExplicitKill]
  -[SBNCSoundController _hardwareButtonPressed:]
  -[SBNCSoundController setLockStateAggregator:]
  -[SBNCSoundController _isDeviceUILocked]
  -[SBNCSoundController setLockScreenManager:]


SBHomeScreenTodayViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <WGWidgetGroupViewControllerDelegate, SPUISearchBarDelegate, SBUICoronaAnimationControllerParticipant, SBUISpotlightInitiating, SBHLegibility, SBHOccludable>
 @property  <SBHomeScreenTodayViewControllerDelegate> *delegate
 @property  long long pullToSearchState
 @property  BOOL ignoresScrolling
 @property  _UILegibilitySettings *legibilitySettings
 @property  UIViewController *spotlightViewController
 @property  BOOL showsSearchBar
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SBViewControllerTransitionContext *transitionContext
 @property  BOOL occluded

  // class methods
  +[SBHomeScreenTodayViewController _verticalSpacingBetweenWidgets]

  // instance methods
  -[SBHomeScreenTodayViewController viewDidLoad]
  -[SBHomeScreenTodayViewController coronaAnimationController:willAnimateCoronaTransitionWithAnimator:]
  -[SBHomeScreenTodayViewController _widgetEditViewWillAppear:]
  -[SBHomeScreenTodayViewController initWithDelegate:]
  -[SBHomeScreenTodayViewController pullDownSearchGesturePercentComplete]
  -[SBHomeScreenTodayViewController _widgetEditViewDidDisappearImplementation]
  -[SBHomeScreenTodayViewController pullDownSearchGestureYOffset]
  -[SBHomeScreenTodayViewController handleScrollingEnded:]
  -[SBHomeScreenTodayViewController _majorScrollView]
  -[SBHomeScreenTodayViewController _coverSheetDidPresent:]
  -[SBHomeScreenTodayViewController pullDownSearchGestureDraggingFromTopOfScrollView:]
  -[SBHomeScreenTodayViewController widgetListViewEdgeInsetsIncludingSearchHeader:]
  -[SBHomeScreenTodayViewController cleanupAfterSpotlightDismissal]
  -[SBHomeScreenTodayViewController _updateLegibilitySettings]
  -[SBHomeScreenTodayViewController widgetGroupViewController:contentOccludingInsetsForInterfaceOrientation:]
  -[SBHomeScreenTodayViewController searchBarDidFocus]
  -[SBHomeScreenTodayViewController widgetGroupViewController:sizeForInterfaceOrientation:]
  -[SBHomeScreenTodayViewController legibilitySettings]
  -[SBHomeScreenTodayViewController _topContentInsetForNavigationBar:]
  -[SBHomeScreenTodayViewController _maxClippingOffset]
  -[SBHomeScreenTodayViewController _widgetEditViewDidDisappear:]
  -[SBHomeScreenTodayViewController resetForSpotlightDismissalAnimated:]
  -[SBHomeScreenTodayViewController _resetScrollViewInsets]
  -[SBHomeScreenTodayViewController _updateScrollViewContentInsetAndOffsetIfNecessary]
  -[SBHomeScreenTodayViewController ignoresScrolling]
  -[SBHomeScreenTodayViewController scrollViewWillEndDragging:withVelocity:targetContentOffset:]
  -[SBHomeScreenTodayViewController .cxx_destruct]
  -[SBHomeScreenTodayViewController spotlightViewController]
  -[SBHomeScreenTodayViewController _setRequestDisableRootFolderParallax:reason:]
  -[SBHomeScreenTodayViewController _statusBarHeightDidChange:]
  -[SBHomeScreenTodayViewController spotlightHeaderAcquiringViewController]
  -[SBHomeScreenTodayViewController transitionContext]
  -[SBHomeScreenTodayViewController showsSearchBar]
  -[SBHomeScreenTodayViewController pullToSearchState]
  -[SBHomeScreenTodayViewController setLegibilitySettings:]
  -[SBHomeScreenTodayViewController viewWillLayoutSubviews]
  -[SBHomeScreenTodayViewController _eligibleScrollViews]
  -[SBHomeScreenTodayViewController _setRequestDisableRootFolderScrolling:reason:]
  -[SBHomeScreenTodayViewController scrollViewDidEndDecelerating:]
  -[SBHomeScreenTodayViewController setIgnoresScrolling:]
  -[SBHomeScreenTodayViewController setTransitionContext:]
  -[SBHomeScreenTodayViewController scrollViewWillBeginDragging:]
  -[SBHomeScreenTodayViewController viewDidAppear:]
  -[SBHomeScreenTodayViewController _applyScaleOnlyMatchMoveToView:withSourceView:animationKey:]
  -[SBHomeScreenTodayViewController _configureOuterMatchMoveAnimation]
  -[SBHomeScreenTodayViewController _suggestedTodayViewFrameForBounds:]
  -[SBHomeScreenTodayViewController canBeginPullDownSearchGesture]
  -[SBHomeScreenTodayViewController setDisplayLayoutElementActive:]
  -[SBHomeScreenTodayViewController setPullToSearchState:]
  -[SBHomeScreenTodayViewController setShowsSearchBar:]
  -[SBHomeScreenTodayViewController scrollViewDidScroll:]
  -[SBHomeScreenTodayViewController _configureInnerMatchMoveAnimation]
  -[SBHomeScreenTodayViewController viewWillAppear:]
  -[SBHomeScreenTodayViewController handleDraggingWillEndWithTargetContentOffset:withVelocity:forScrollView:]
  -[SBHomeScreenTodayViewController scrollViewDidEndScrollingAnimation:]
  -[SBHomeScreenTodayViewController setDelegate:]
  -[SBHomeScreenTodayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBHomeScreenTodayViewController viewDidDisappear:]
  -[SBHomeScreenTodayViewController _removeMatchMoveAnimations]
  -[SBHomeScreenTodayViewController _widgetGroupViewController]
  -[SBHomeScreenTodayViewController defaultTodayViewContentInsets]
  -[SBHomeScreenTodayViewController viewWillDisappear:]
  -[SBHomeScreenTodayViewController delegate]
  -[SBHomeScreenTodayViewController _configureMatchMoveAnimations]
  -[SBHomeScreenTodayViewController setOccluded:]
  -[SBHomeScreenTodayViewController isOccluded]
  -[SBHomeScreenTodayViewController scrollViewDidEndDragging:willDecelerate:]


SBHomeScreenOverlayController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBBarSwipeAffordanceDelegate, SBBarSwipeAffordanceObserver, SBHomeScreenOverlayViewControllerDelegate, UIGestureRecognizerDelegate, SBFOverlayControlling, SBFIdleTimerBehaviorProviding, CSExternalBehaviorProviding, CSExternalEventHandling, BSDescriptionProviding, SBFOverlayDismissalDelegate>
 @property  SBMainScreenActiveInterfaceOrientationWindow *window
 @property  SBBarSwipeAffordanceViewController *homeAffordanceViewController
 @property  SBHomeScreenOverlayViewController *overlayViewController
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  SBAppStatusBarContentAssertion *statusBarContentAssertion
 @property  BOOL dismissing
 @property  unsigned long screenEdgeSystemGestureType
 @property  UIPanGestureRecognizer *dismissPanGestureRecognizer
 @property  unsigned long indirectScreenEdgeSystemGestureType
 @property  unsigned long scrunchSystemGestureType
 @property  BOOL animatingPresentationProgress
 @property  double initialPresentationProgress
 @property  BOOL shouldUseReducedMotionAnimation
 @property  <SBHomeScreenOverlayControllerDelegate> *delegate
 @property  UIViewController<SBHWidgetSheetViewControllerPresenter> *viewController
 @property  UIViewController<SBHOccludable> *leftSidebarViewController
 @property  UIViewController<SBHOccludable> *rightSidebarViewController
 @property  UIViewController *activeSidebarViewController
 @property  UITapGestureRecognizer *dismissTapGestureRecognizer
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double contentWidth
 @property  double presentationProgress
 @property  BOOL presented
 @property  <SBFOverlayDismissalDelegate> *dismissalDelegate
 @property  BOOL occluded
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout
 @property  long long scrollingStrategy
 @property  long long notificationBehavior
 @property  unsigned long restrictedCapabilities
 @property  long long proximityDetectionMode
 @property  NSString *coverSheetIdentifier
 @property  long long participantState

  // instance methods
  -[SBHomeScreenOverlayController isPresented]
  -[SBHomeScreenOverlayController coverSheetIdentifier]
  -[SBHomeScreenOverlayController idleTimerDuration]
  -[SBHomeScreenOverlayController presentAnimated:]
  -[SBHomeScreenOverlayController viewController]
  -[SBHomeScreenOverlayController scrollingStrategy]
  -[SBHomeScreenOverlayController window]
  -[SBHomeScreenOverlayController homeAffordanceViewController]
  -[SBHomeScreenOverlayController notificationBehavior]
  -[SBHomeScreenOverlayController displayLayoutElement]
  -[SBHomeScreenOverlayController conformsToCSBehaviorProviding]
  -[SBHomeScreenOverlayController idleWarnMode]
  -[SBHomeScreenOverlayController idleTimerMode]
  -[SBHomeScreenOverlayController overlayViewController]
  -[SBHomeScreenOverlayController init]
  -[SBHomeScreenOverlayController _setHidden:]
  -[SBHomeScreenOverlayController restrictedCapabilities]
  -[SBHomeScreenOverlayController conformsToCSEventHandling]
  -[SBHomeScreenOverlayController proximityDetectionMode]
  -[SBHomeScreenOverlayController conformsToCSExternalBehaviorProviding]
  -[SBHomeScreenOverlayController dismissPanGestureRecognizer]
  -[SBHomeScreenOverlayController setDismissPanGestureRecognizer:]
  -[SBHomeScreenOverlayController _setDisplayLayoutElementActive:]
  -[SBHomeScreenOverlayController .cxx_destruct]
  -[SBHomeScreenOverlayController gestureRecognizerShouldBegin:]
  -[SBHomeScreenOverlayController presentationProgress]
  -[SBHomeScreenOverlayController succinctDescriptionBuilder]
  -[SBHomeScreenOverlayController setDismissing:]
  -[SBHomeScreenOverlayController dismissAnimated:completionHandler:]
  -[SBHomeScreenOverlayController participantState]
  -[SBHomeScreenOverlayController homeGesturePerformedForBarSwipeAffordanceView:]
  -[SBHomeScreenOverlayController succinctDescription]
  -[SBHomeScreenOverlayController interceptDismissalGestureForOverlayController:]
  -[SBHomeScreenOverlayController handleEvent:]
  -[SBHomeScreenOverlayController _rootViewController]
  -[SBHomeScreenOverlayController updateExtraButtonVisibilityAnimated:]
  -[SBHomeScreenOverlayController overlayControllerRequestsDismissal:]
  -[SBHomeScreenOverlayController contentWidth]
  -[SBHomeScreenOverlayController setDelegate:]
  -[SBHomeScreenOverlayController setDisplayLayoutElement:]
  -[SBHomeScreenOverlayController barSwipeAffordanceView:systemGestureTypeForType:]
  -[SBHomeScreenOverlayController presentAnimated:completionHandler:]
  -[SBHomeScreenOverlayController gestureRecognizer:shouldReceiveTouch:]
  -[SBHomeScreenOverlayController delegate]
  -[SBHomeScreenOverlayController isDismissing]
  -[SBHomeScreenOverlayController descriptionWithMultilinePrefix:]
  -[SBHomeScreenOverlayController descriptionBuilderWithMultilinePrefix:]
  -[SBHomeScreenOverlayController setOccluded:]
  -[SBHomeScreenOverlayController isOccluded]
  -[SBHomeScreenOverlayController wouldHandleButtonEvent:]
  -[SBHomeScreenOverlayController setDismissalDelegate:]
  -[SBHomeScreenOverlayController dismissalDelegate]
  -[SBHomeScreenOverlayController testScrollView]
  -[SBHomeScreenOverlayController setPresentationProgress:interactive:animated:completionHandler:]
  -[SBHomeScreenOverlayController setShouldUseReducedMotionAnimation:]
  -[SBHomeScreenOverlayController dismissUsingViewControllerTransitionCoordinator:]
  -[SBHomeScreenOverlayController activeSidebarViewController]
  -[SBHomeScreenOverlayController addHomeScreenOverlayObserver:]
  -[SBHomeScreenOverlayController dismissTapGestureRecognizer]
  -[SBHomeScreenOverlayController setLeftSidebarViewController:]
  -[SBHomeScreenOverlayController setRightSidebarViewController:]
  -[SBHomeScreenOverlayController setPresentationProgress:fromLeading:]
  -[SBHomeScreenOverlayController layerPresentationProgress]
  -[SBHomeScreenOverlayController presentationProgressForTranslation:initialPresentationProgress:fromLeading:]
  -[SBHomeScreenOverlayController setPresentationProgress:fromLeading:interactive:animated:completionHandler:]
  -[SBHomeScreenOverlayController finalPresentationProgressForTranslation:velocity:initialPresentationProgress:fromLeading:]
  -[SBHomeScreenOverlayController animatePresentationProgress:withGestureLiftOffVelocity:completionHandler:]
  -[SBHomeScreenOverlayController isAnimatingPresentationProgress]
  -[SBHomeScreenOverlayController presentAnimated:fromLeading:]
  -[SBHomeScreenOverlayController addReasonToDisableDismissGestureRecognizer:]
  -[SBHomeScreenOverlayController removeReasonToDisableDismissGestureRecognizer:]
  -[SBHomeScreenOverlayController statusBarContentAssertion]
  -[SBHomeScreenOverlayController setStatusBarContentAssertion:]
  -[SBHomeScreenOverlayController initWithWindowLevel:homeGestureParticipantIdentifier:screenEdgeSystemGestureType:indirectScreenEdgeSystemGestureType:scrunchSystemGestureType:secure:]
  -[SBHomeScreenOverlayController _configureOverlayViewController]
  -[SBHomeScreenOverlayController _configureDismissGestureRecognizer]
  -[SBHomeScreenOverlayController dismissTapGestureUpdated:]
  -[SBHomeScreenOverlayController dismissScrollGestureUpdated:]
  -[SBHomeScreenOverlayController leftSidebarViewController]
  -[SBHomeScreenOverlayController rightSidebarViewController]
  -[SBHomeScreenOverlayController setAnimatingPresentationProgress:]
  -[SBHomeScreenOverlayController prepareToSetPresentationProgress:fromPresentationProgress:]
  -[SBHomeScreenOverlayController cleanUpAfterSettingPresentationProgress:]
  -[SBHomeScreenOverlayController _enumerateHomeScreenOverlayObserversUsingBlock:]
  -[SBHomeScreenOverlayController shouldUseReducedMotionAnimation]
  -[SBHomeScreenOverlayController _addSystemGestureRecognizer]
  -[SBHomeScreenOverlayController _removeSystemGestureRecognizer]
  -[SBHomeScreenOverlayController _setHitTestingDisabled:]
  -[SBHomeScreenOverlayController setPresentationProgress:]
  -[SBHomeScreenOverlayController _dismissScrollGestureBegan:]
  -[SBHomeScreenOverlayController _dismissScrollGestureChanged:]
  -[SBHomeScreenOverlayController _dismissScrollGestureEndedOrCancelled:]
  -[SBHomeScreenOverlayController _dismissLevelAnimated:completionHandler:]
  -[SBHomeScreenOverlayController backgroundViewForEditingDoneButtonForHomeScreenOverlayViewController:]
  -[SBHomeScreenOverlayController homeScreenOverlayViewWantsToEndEditing:]
  -[SBHomeScreenOverlayController homeScreenOverlayViewWantsWidgetEditingViewControllerPresented:]
  -[SBHomeScreenOverlayController showsAddWidgetButtonWhileEditingForHomeScreenOverlayViewController:]
  -[SBHomeScreenOverlayController showsDoneButtonWhileEditingForHomeScreenOverlayViewController:]
  -[SBHomeScreenOverlayController isEditingForHomeScreenOverlayViewController:]
  -[SBHomeScreenOverlayController homeScreenOverlayViewController:setSuppressesEditingStateForListView:]
  -[SBHomeScreenOverlayController removeHomeScreenOverlayObserver:]
  -[SBHomeScreenOverlayController _directionCoefficient]
  -[SBHomeScreenOverlayController homeScreenOverlayViewControllerRequestsDismissal:]
  -[SBHomeScreenOverlayController screenEdgeSystemGestureType]
  -[SBHomeScreenOverlayController indirectScreenEdgeSystemGestureType]
  -[SBHomeScreenOverlayController scrunchSystemGestureType]
  -[SBHomeScreenOverlayController initialPresentationProgress]
  -[SBHomeScreenOverlayController setInitialPresentationProgress:]


SBMoveFloatingApplicationGestureWorkspaceTransaction : SBFluidSwitcherGestureWorkspaceTransaction
  // instance methods
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _didComplete]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _begin]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction .cxx_destruct]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _gestureType]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _invalidateStatusBarAssertions]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _beginWithGesture:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _updateWithGesture:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _finishWithGesture:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _acquireStatusBarAssertions]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _startSuppressingKeyboardForFloatingApplication]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _stopSuppressingKeyboard]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _tryPreemptiveFloatingApplicationActivationIfNecessaryWithGesture:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _updateStatusBarAssertionsForGesture]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _performBlockWithLiveContentOverlayUpdatesSuspended:]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _updateStatusBarAssertionsForLayoutState]
  -[SBMoveFloatingApplicationGestureWorkspaceTransaction _transitionRequestForPreemptiveFloatingApplicationActivation]


SBMainDisplayPolicyAggregator : SBPolicyAggregator
 @property  MCProfileConnection *profileConnection
 @property  SBSetupManager *setupManager
 @property  SBAlertItemsController *alertItemsController
 @property  SBApplicationController *applicationController
 @property  SBAssistantController *assistantController
 @property  SBCommandTabController *commandTabController
 @property  SBConferenceManager *conferenceManager
 @property  SBRemoteTransientOverlaySessionManager *remoteTransientOverlaySessionManager
 @property  SBLockScreenManager *lockScreenManager
 @property  SBLockStateAggregator *lockStateAggregator
 @property  SBTelephonyManager *telephonyManager
 @property  SBMainWorkspace *mainWorkspace
 @property  SBBannerManager *bannerManager

  // instance methods
  -[SBMainDisplayPolicyAggregator _setLockStateAggregator:]
  -[SBMainDisplayPolicyAggregator _dictationInfoOnScreen]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenCameraWithExplanation:]
  -[SBMainDisplayPolicyAggregator _assistantController]
  -[SBMainDisplayPolicyAggregator _setConferenceManager:]
  -[SBMainDisplayPolicyAggregator init]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityAssistantWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityQuickNoteWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenBulletinWithExplanation:]
  -[SBMainDisplayPolicyAggregator _lockStateAggregator]
  -[SBMainDisplayPolicyAggregator _hasFullySetUpUserWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityTodayViewWithExplanation:]
  -[SBMainDisplayPolicyAggregator _bannerManager]
  -[SBMainDisplayPolicyAggregator _initWithDefaults:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLiftToWakeWithExplanation:]
  -[SBMainDisplayPolicyAggregator .cxx_destruct]
  -[SBMainDisplayPolicyAggregator _setRemoteTransientOverlaySessionManager:]
  -[SBMainDisplayPolicyAggregator _remoteTransientOverlaySessionManager]
  -[SBMainDisplayPolicyAggregator allowsCapability:explanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityScreenshotWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityDismissCoverSheetWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenNotificationCenterWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLogoutWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setLockScreenManager:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityUnlockToPluginSpecifiedApplicationWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setCommandTabController:]
  -[SBMainDisplayPolicyAggregator _setProfileConnection:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLoginWindowWithExplanation:]
  -[SBMainDisplayPolicyAggregator _profileConnection]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenControlCenterWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityCoverSheetWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenTodayViewWithExplanation:]
  -[SBMainDisplayPolicyAggregator reloadDemoDefaults]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityLockScreenCameraSupportedWithExplanation:]
  -[SBMainDisplayPolicyAggregator _commandTabController]
  -[SBMainDisplayPolicyAggregator allowsCapability:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityCommandTabWithExplanation:]
  -[SBMainDisplayPolicyAggregator _lockScreenManager]
  -[SBMainDisplayPolicyAggregator allowsTransitionRequest:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityHomeScreenEditingWithExplanation:]
  -[SBMainDisplayPolicyAggregator _conferenceManager]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityControlCenterWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setSetupManager:]
  -[SBMainDisplayPolicyAggregator _setupManager]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityAssistantEnabledWithExplanation:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilitySystemGestureWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setAlertItemsController:]
  -[SBMainDisplayPolicyAggregator _alertItemsController]
  -[SBMainDisplayPolicyAggregator _allowsCapabilityVoiceControlWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setMainWorkspace:]
  -[SBMainDisplayPolicyAggregator _applicationController]
  -[SBMainDisplayPolicyAggregator _allowsCapabilitySpotlightWithExplanation:]
  -[SBMainDisplayPolicyAggregator _mainWorkspace]
  -[SBMainDisplayPolicyAggregator _allowsNotificationOrControlCenterWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setApplicationController:]
  -[SBMainDisplayPolicyAggregator _setAssistantController:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilitySendMediaCommandWithExplanation:]
  -[SBMainDisplayPolicyAggregator _telephonyManager]
  -[SBMainDisplayPolicyAggregator _setTelephonyManager:]
  -[SBMainDisplayPolicyAggregator _allowsCapabilitySuggestedApplicationWithExplanation:]
  -[SBMainDisplayPolicyAggregator _setBannerManager:]


SBControlCenterSystemAgent : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CCUIControlCenterSystemAgent>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBControlCenterSystemAgent isOrientationLocked]
  -[SBControlCenterSystemAgent unlockOrientation]
  -[SBControlCenterSystemAgent isRingerMuted]
  -[SBControlCenterSystemAgent lockOrientation]
  -[SBControlCenterSystemAgent setRingerMuted:]
  -[SBControlCenterSystemAgent isUILocked]


SBAppSwitcherTransientOverlayPageContentView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBAppSwitcherPageContentView>
 @property  SBAppLayout *appLayout
 @property  BOOL active
 @property  BOOL visible
 @property  long long contentOrientation
 @property  UIView *contentView
 @property  <SBAppSwitcherTransientOverlayPageContentViewDelegate> *delegate
 @property  double cornerRadius
 @property  long long orientation
 @property  BOOL contentRequiresGroupOpacity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAppSwitcherTransientOverlayPageContentView setVisible:]
  -[SBAppSwitcherTransientOverlayPageContentView appLayout]
  -[SBAppSwitcherTransientOverlayPageContentView isVisible]
  -[SBAppSwitcherTransientOverlayPageContentView setCornerRadius:]
  -[SBAppSwitcherTransientOverlayPageContentView contentView]
  -[SBAppSwitcherTransientOverlayPageContentView .cxx_destruct]
  -[SBAppSwitcherTransientOverlayPageContentView contentOrientation]
  -[SBAppSwitcherTransientOverlayPageContentView setActive:]
  -[SBAppSwitcherTransientOverlayPageContentView isActive]
  -[SBAppSwitcherTransientOverlayPageContentView setContentView:]
  -[SBAppSwitcherTransientOverlayPageContentView setContentOrientation:]
  -[SBAppSwitcherTransientOverlayPageContentView setOrientation:]
  -[SBAppSwitcherTransientOverlayPageContentView orientation]
  -[SBAppSwitcherTransientOverlayPageContentView setDelegate:]
  -[SBAppSwitcherTransientOverlayPageContentView invalidate]
  -[SBAppSwitcherTransientOverlayPageContentView cornerRadius]
  -[SBAppSwitcherTransientOverlayPageContentView contentRequiresGroupOpacity]
  -[SBAppSwitcherTransientOverlayPageContentView delegate]
  -[SBAppSwitcherTransientOverlayPageContentView layoutSubviews]
  -[SBAppSwitcherTransientOverlayPageContentView initWithFrame:appLayout:]


SBHistorianSwitcherModifier : SBSwitcherModifier
 @property  <SBHistorianSwitcherModifierDelegate> *historianDelegate
 @property  SBSwitcherModifier *rootModifier

  // class methods
  +[SBHistorianSwitcherModifier canLogEvent:]

  // instance methods
  -[SBHistorianSwitcherModifier .cxx_destruct]
  -[SBHistorianSwitcherModifier rootModifier]
  -[SBHistorianSwitcherModifier handleEvent:]
  -[SBHistorianSwitcherModifier setDelegate:]
  -[SBHistorianSwitcherModifier initWithRootModifier:]
  -[SBHistorianSwitcherModifier setHistorianDelegate:]
  -[SBHistorianSwitcherModifier _eventSnapshotFromEvent:]
  -[SBHistorianSwitcherModifier _responseSnapshotFromResponse:]
  -[SBHistorianSwitcherModifier _modifierStackSnapshotFromModifier:]
  -[SBHistorianSwitcherModifier historianDelegate]
  -[SBHistorianSwitcherModifier _querySnapshotFromModifier:]
  -[SBHistorianSwitcherModifier _populateQueryMethodDescription:fromModifier:queryName:descriptionProvider:appLayouts:]
  -[SBHistorianSwitcherModifier _populateIndexedQueryMethodDescription:fromModifier:queryName:descriptionProvider:appLayouts:]
  -[SBHistorianSwitcherModifier _populateAppLayoutQueryMethodDescription:fromModifier:queryName:descriptionProvider:]


SBSwitcherModifierTimelineEntry : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBSwitcherModifierEventSnapshot *eventSnapshot
 @property  SBSwitcherModifierStackSnapshot *postEventStackSnapshot
 @property  SBSwitcherModifierEventResponseSnapshot *responseSnapshot

  // instance methods
  -[SBSwitcherModifierTimelineEntry .cxx_destruct]
  -[SBSwitcherModifierTimelineEntry eventSnapshot]
  -[SBSwitcherModifierTimelineEntry responseSnapshot]
  -[SBSwitcherModifierTimelineEntry postEventStackSnapshot]
  -[SBSwitcherModifierTimelineEntry setEventSnapshot:]
  -[SBSwitcherModifierTimelineEntry setPostEventStackSnapshot:]
  -[SBSwitcherModifierTimelineEntry setResponseSnapshot:]


SBSwitcherModifierStackSnapshot : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *modifierName
 @property  SBSwitcherModifierQuerySnapshot *querySnapshot
 @property  NSArray *childSnapshots

  // instance methods
  -[SBSwitcherModifierStackSnapshot .cxx_destruct]
  -[SBSwitcherModifierStackSnapshot modifierName]
  -[SBSwitcherModifierStackSnapshot childSnapshots]
  -[SBSwitcherModifierStackSnapshot enumerateModifierSnapshots:]
  -[SBSwitcherModifierStackSnapshot querySnapshot]
  -[SBSwitcherModifierStackSnapshot setModifierName:]
  -[SBSwitcherModifierStackSnapshot setQuerySnapshot:]
  -[SBSwitcherModifierStackSnapshot setChildSnapshots:]
  -[SBSwitcherModifierStackSnapshot _enumerateModifierSnapshots:stop:]


SBSwitcherModifierEventResponseSnapshot : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *responseNames
 @property  NSArray *responseDescriptions

  // instance methods
  -[SBSwitcherModifierEventResponseSnapshot .cxx_destruct]
  -[SBSwitcherModifierEventResponseSnapshot responseNames]
  -[SBSwitcherModifierEventResponseSnapshot responseDescriptions]
  -[SBSwitcherModifierEventResponseSnapshot setResponseNames:]
  -[SBSwitcherModifierEventResponseSnapshot setResponseDescriptions:]


SBSwitcherModifierEventSnapshot : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSString *eventName
 @property  NSString *eventDescription

  // instance methods
  -[SBSwitcherModifierEventSnapshot setEventName:]
  -[SBSwitcherModifierEventSnapshot eventName]
  -[SBSwitcherModifierEventSnapshot .cxx_destruct]
  -[SBSwitcherModifierEventSnapshot eventDescription]
  -[SBSwitcherModifierEventSnapshot setEventDescription:]


SBSwitcherModifierQuerySnapshot : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  NSArray *implementingQueryMethods
 @property  NSArray *nonImplementingQueryMethods
 @property  NSDictionary *queryMethodsToDescriptions

  // instance methods
  -[SBSwitcherModifierQuerySnapshot .cxx_destruct]
  -[SBSwitcherModifierQuerySnapshot implementingQueryMethods]
  -[SBSwitcherModifierQuerySnapshot nonImplementingQueryMethods]
  -[SBSwitcherModifierQuerySnapshot queryMethodsToDescriptions]
  -[SBSwitcherModifierQuerySnapshot setQueryMethodsToDescriptions:]
  -[SBSwitcherModifierQuerySnapshot setImplementingQueryMethods:]
  -[SBSwitcherModifierQuerySnapshot setNonImplementingQueryMethods:]


SBNewsstandMonitor : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBProcessManagerObserver, FBProcessObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBNewsstandMonitor sharedInstance]
  +[SBNewsstandMonitor _deniedBundleIdentifiers]

  // instance methods
  -[SBNewsstandMonitor processManager:didRemoveProcess:]
  -[SBNewsstandMonitor processManager:didAddProcess:]
  -[SBNewsstandMonitor process:stateDidChangeFromState:toState:]
  -[SBNewsstandMonitor init]
  -[SBNewsstandMonitor .cxx_destruct]
  -[SBNewsstandMonitor _addObserverForBackgroundUpdateDenyListChange]
  -[SBNewsstandMonitor _handleBackgroundUpdateDenyListChange]


SBPressSequenceValidator : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  SBPressSequenceSettings *settings

  // instance methods
  -[SBPressSequenceValidator init]
  -[SBPressSequenceValidator .cxx_destruct]
  -[SBPressSequenceValidator initWithSettings:]
  -[SBPressSequenceValidator settings]
  -[SBPressSequenceValidator pressEventIsValidInSequence:endingDownEvent:duration:]
  -[SBPressSequenceValidator timeUntilNextPressEventIsInValidInSequence:lastPressEventInSequenceIsDown:]
  -[SBPressSequenceValidator _pressDownBoundsForDesiredIndex:sequence:]
  -[SBPressSequenceValidator _pressUpBoundsForDesiredIndex:sequence:]
  -[SBPressSequenceValidator _modeForDesiredIndex:isDownEvent:]


SBNCNotificationDispatcher : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSCoverSheetViewControllerObserver, SBFNotificationExtensionVisibilityProviding>
 @property  NCNotificationDispatcher *dispatcher
 @property  SBNCNotificationDispatcherDelegate *dispatcherDelegate
 @property  NCBulletinNotificationSource *notificationSource
 @property  SBUserAlertNotificationSource *userNotificationAlertSource
 @property  SBLockScreenManager *lockScreenManager
 @property  SBLockStateAggregator *lockStateAggregator
 @property  <NCNotificationAlertDestination> *carDestination
 @property  SBCommunicationPolicyManager *communicationPolicyManager
 @property  SBNCAlertingController *alertingController
 @property  SBNotificationBannerDestination *bannerDestination
 @property  <SBNotificationDestination> *dashBoardDestination
 @property  SBWalletNotificationSource *walletNotificationSource
 @property  SBNotificationCenterDestination *notificationCenterDestination
 @property  BOOL isCarDestinationActive
 @property  BSServiceConnectionEndpoint *carOpenServiceEndpoint
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBNCNotificationDispatcher alertingController]
  -[SBNCNotificationDispatcher setAlertingController:]
  -[SBNCNotificationDispatcher setDispatcher:]
  -[SBNCNotificationDispatcher dispatcher]
  -[SBNCNotificationDispatcher isNotificationContentExtensionVisible:]
  -[SBNCNotificationDispatcher lockScreenManager]
  -[SBNCNotificationDispatcher keyWindowForScreen:]
  -[SBNCNotificationDispatcher init]
  -[SBNCNotificationDispatcher setNotificationSource:]
  -[SBNCNotificationDispatcher setUserNotificationAlertSource:]
  -[SBNCNotificationDispatcher dashBoardDestination]
  -[SBNCNotificationDispatcher carOpenServiceEndpoint]
  -[SBNCNotificationDispatcher .cxx_destruct]
  -[SBNCNotificationDispatcher notificationCenterDestination]
  -[SBNCNotificationDispatcher dispatcherDelegate]
  -[SBNCNotificationDispatcher communicationPolicyManager]
  -[SBNCNotificationDispatcher setDispatcherDelegate:]
  -[SBNCNotificationDispatcher setCommunicationPolicyManager:]
  -[SBNCNotificationDispatcher setCarDestination:]
  -[SBNCNotificationDispatcher bannerDestination]
  -[SBNCNotificationDispatcher lockStateAggregator]
  -[SBNCNotificationDispatcher _setupNewDestinationsForDispatcher:]
  -[SBNCNotificationDispatcher coverSheetViewController:didChangeActiveBehavior:]
  -[SBNCNotificationDispatcher _carPlayDestinationAvailabilityDidChange]
  -[SBNCNotificationDispatcher userNotificationAlertSource]
  -[SBNCNotificationDispatcher notificationSource]
  -[SBNCNotificationDispatcher setLockStateAggregator:]
  -[SBNCNotificationDispatcher carDestination]
  -[SBNCNotificationDispatcher isCarDestinationActive]
  -[SBNCNotificationDispatcher walletNotificationSource]
  -[SBNCNotificationDispatcher _lockScreenWantsBanners]
  -[SBNCNotificationDispatcher _updateActiveDestinations]
  -[SBNCNotificationDispatcher setLockScreenManager:]
  -[SBNCNotificationDispatcher _aggregateLockStateDidChange]


SBProximitySettings : SBUISettings
 @property  double initialBacklightDebounceDuration
 @property  double subsequentBacklightDebounceDuration

  // class methods
  +[SBProximitySettings settingsControllerModule]

  // instance methods
  -[SBProximitySettings setDefaultValues]
  -[SBProximitySettings initialBacklightDebounceDuration]
  -[SBProximitySettings subsequentBacklightDebounceDuration]
  -[SBProximitySettings setInitialBacklightDebounceDuration:]
  -[SBProximitySettings setSubsequentBacklightDebounceDuration:]


SBVoiceControlViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SiriUISuggestionsViewDelegate, SUICFlamesViewDelegate, VSRecognitionSessionDelegate, VSSpeechSynthesizerDelegate>
 @property  NSArray *nextRecognitionAudioInputPaths
 @property  BOOL prefersProximityDetectionEnabled
 @property  BOOL shouldAllowSensitiveActions
 @property  BOOL shouldDisableHandlerActions
 @property  BOOL shouldDisableVoiceControlForBluetoothRequests
 @property  BOOL voiceControlLoggingEnabled
 @property  <SBVoiceControlViewControllerDelegate> *voiceControlDelegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBVoiceControlViewController viewDidLoad]
  -[SBVoiceControlViewController handleHomeButtonPress]
  -[SBVoiceControlViewController initWithSource:]
  -[SBVoiceControlViewController dealloc]
  -[SBVoiceControlViewController .cxx_destruct]
  -[SBVoiceControlViewController _localizedStringForKey:]
  -[SBVoiceControlViewController _resetSession]
  -[SBVoiceControlViewController _setStatusText:]
  -[SBVoiceControlViewController _setSession:]
  -[SBVoiceControlViewController viewWillAppear:]
  -[SBVoiceControlViewController recognitionSessionDidBeginAction:]
  -[SBVoiceControlViewController recognitionSessionWillBeginAction:]
  -[SBVoiceControlViewController recognitionSession:openURL:]
  -[SBVoiceControlViewController recognitionSession:didCompleteActionWithError:]
  -[SBVoiceControlViewController recognitionSession:didFinishSpeakingFeedbackStringWithError:]
  -[SBVoiceControlViewController _canShowWhileLocked]
  -[SBVoiceControlViewController _requestDismissal]
  -[SBVoiceControlViewController viewWillDisappear:]
  -[SBVoiceControlViewController viewDidLayoutSubviews]
  -[SBVoiceControlViewController audioLevelForFlamesView:]
  -[SBVoiceControlViewController _flamesViewFrame]
  -[SBVoiceControlViewController nextSuggestionsForSuggestionsView:maxSuggestions:]
  -[SBVoiceControlViewController _setTitleText:]
  -[SBVoiceControlViewController prefersProximityDetectionEnabled]
  -[SBVoiceControlViewController resetSessionWithSource:]
  -[SBVoiceControlViewController handleHeadsetButtonUpFromButtonDownSource:]
  -[SBVoiceControlViewController setNextRecognitionAudioInputPaths:]
  -[SBVoiceControlViewController setVoiceControlDelegate:]
  -[SBVoiceControlViewController isVoiceControlLoggingEnabled]
  -[SBVoiceControlViewController setVoiceControlLoggingEnabled:]
  -[SBVoiceControlViewController setShouldDisableHandlerActions:]
  -[SBVoiceControlViewController setShouldDisableVoiceControlForBluetoothRequests:]
  -[SBVoiceControlViewController setShouldAllowSensitiveActions:]
  -[SBVoiceControlViewController _titleBaseline]
  -[SBVoiceControlViewController _subtitleBaseline]
  -[SBVoiceControlViewController performDismissalTransitionAnimated:completionHandler:]
  -[SBVoiceControlViewController performPresentationTransitionAnimated:completionHandler:]
  -[SBVoiceControlViewController nextRecognitionAudioInputPaths]
  -[SBVoiceControlViewController shouldAllowSensitiveActions]
  -[SBVoiceControlViewController shouldDisableHandlerActions]
  -[SBVoiceControlViewController shouldDisableVoiceControlForBluetoothRequests]
  -[SBVoiceControlViewController voiceControlDelegate]
  -[SBVoiceControlViewController _setPrefersProximityDetectionEnabled:]
  -[SBVoiceControlViewController _setAVAudioRouteUID:]
  -[SBVoiceControlViewController _deviceProximityStateDidChangeNotification:]
  -[SBVoiceControlViewController _setFeedbackVisible:animated:]
  -[SBVoiceControlViewController _newRecognitionSession]
  -[SBVoiceControlViewController _startSession]
  -[SBVoiceControlViewController _performNoMatchFound]
  -[SBVoiceControlViewController _handleButtonUpCancel]
  -[SBVoiceControlViewController _configureRoutingIfNeeded]
  -[SBVoiceControlViewController _speakFeedbackText]
  -[SBVoiceControlViewController _continueWithRecognitionAction]
  -[SBVoiceControlViewController _openDialRequest:]
  -[SBVoiceControlViewController _continueRecognitionAction]
  -[SBVoiceControlViewController _currentPreferredRouteDictionary]
  -[SBVoiceControlViewController _setNeedsRoutingUpdate]
  -[SBVoiceControlViewController _avSystemControllerPickableRoutesDidChangeNotification:]
  -[SBVoiceControlViewController _avSystemControllerHeadphoneJackIsConnectedDidChangeNotification:]
  -[SBVoiceControlViewController _popNextRecognitionAudioInputPath]
  -[SBVoiceControlViewController _performConfirmationAction]
  -[SBVoiceControlViewController _availableRouteDictionaries]
  -[SBVoiceControlViewController _preferredRouteDictionaryWithAvailableRouteDictionaries:preferredAVAudioRouteName:preferredAVAudioRouteUID:shouldPreferBluetooth:]
  -[SBVoiceControlViewController _hasPickableBluetoothDevice]
  -[SBVoiceControlViewController _speakText:]
  -[SBVoiceControlViewController _recognitionSessionKeywordsDidChangeNotification:]


SBGridLayoutSwitcherModifier : SBSwitcherModifier <PTSettingsKeyObserver>
 @property  unsigned long alignment
 @property  unsigned long layoutDirection
 @property  unsigned long scrollAxis
 @property  unsigned long fixedGroupingSize
 @property  double cardScale
 @property  BOOL usesFixedCardSize
 @property  {CGSize=dd} fixedCardSize
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBGridLayoutSwitcherModifier visibleAppLayouts]
  -[SBGridLayoutSwitcherModifier _contentSize]
  -[SBGridLayoutSwitcherModifier scaleForIndex:]
  -[SBGridLayoutSwitcherModifier contentPageViewScaleForAppLayout:]
  -[SBGridLayoutSwitcherModifier animationAttributesForLayoutElement:]
  -[SBGridLayoutSwitcherModifier handleMainTransitionEvent:]
  -[SBGridLayoutSwitcherModifier setLayoutDirection:]
  -[SBGridLayoutSwitcherModifier cardCornerRadiiForIndex:]
  -[SBGridLayoutSwitcherModifier opacityForIndex:]
  -[SBGridLayoutSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBGridLayoutSwitcherModifier _cardCornerRadiusInSwitcher]
  -[SBGridLayoutSwitcherModifier frameForIndex:]
  -[SBGridLayoutSwitcherModifier contentOffsetForIndex:centered:]
  -[SBGridLayoutSwitcherModifier minimumTranslationToKillIndex:]
  -[SBGridLayoutSwitcherModifier layoutDirection]
  -[SBGridLayoutSwitcherModifier restingOffsetForScrollOffset:velocity:]
  -[SBGridLayoutSwitcherModifier _visibleAppLayoutRangeForContentOffset:]
  -[SBGridLayoutSwitcherModifier adjustedOffsetForOffset:translation:startPoint:locationInView:horizontalVelocity:verticalVelocity:]
  -[SBGridLayoutSwitcherModifier titleAndIconOpacityForIndex:]
  -[SBGridLayoutSwitcherModifier appLayoutsToCacheFullsizeSnapshots]
  -[SBGridLayoutSwitcherModifier shouldBringCardToFrontDuringInsertionOrRemoval]
  -[SBGridLayoutSwitcherModifier alignment]
  -[SBGridLayoutSwitcherModifier titleOpacityForIndex:]
  -[SBGridLayoutSwitcherModifier setScrollAxis:]
  -[SBGridLayoutSwitcherModifier clipsToUnobscuredMarginAtIndex:]
  -[SBGridLayoutSwitcherModifier handleSwitcherSettingsChangedEvent:]
  -[SBGridLayoutSwitcherModifier indexToScrollToAfterRemovingIndex:]
  -[SBGridLayoutSwitcherModifier distanceToLeadingEdgeOfLeadingCardFromTrailingEdgeOfScreenWithVisibleIndexToStartSearch:]
  -[SBGridLayoutSwitcherModifier _numberOfRows]
  -[SBGridLayoutSwitcherModifier scrollAxis]
  -[SBGridLayoutSwitcherModifier visibleMarginForItemContainerAtIndex:]
  -[SBGridLayoutSwitcherModifier didMoveToParentModifier:]
  -[SBGridLayoutSwitcherModifier handleScrollEvent:]
  -[SBGridLayoutSwitcherModifier _isIndexVisible:]
  -[SBGridLayoutSwitcherModifier numberOfRows]
  -[SBGridLayoutSwitcherModifier snapshotScaleForAppLayout:]
  -[SBGridLayoutSwitcherModifier _numberOfColumns]
  -[SBGridLayoutSwitcherModifier _verticalSpacing]
  -[SBGridLayoutSwitcherModifier resetAdjustedScrollingState]
  -[SBGridLayoutSwitcherModifier _applyPrototypeSettings]
  -[SBGridLayoutSwitcherModifier _horizontalSpacing]
  -[SBGridLayoutSwitcherModifier darkeningAlphaForIndex:]
  -[SBGridLayoutSwitcherModifier shadowOffsetForIndex:]
  -[SBGridLayoutSwitcherModifier indexToScrollToAfterInsertingAtIndex:]
  -[SBGridLayoutSwitcherModifier contentViewScale]
  -[SBGridLayoutSwitcherModifier setAlignment:]
  -[SBGridLayoutSwitcherModifier fullyPresentedFrameForAppLayout:]
  -[SBGridLayoutSwitcherModifier scrollViewAttributes]
  -[SBGridLayoutSwitcherModifier shouldAnimateInsertionOrRemovalAtIndex:]
  -[SBGridLayoutSwitcherModifier shadowOpacityForIndex:]
  -[SBGridLayoutSwitcherModifier rotationAngleForIndex:]
  -[SBGridLayoutSwitcherModifier cardScale]
  -[SBGridLayoutSwitcherModifier setCardScale:]
  -[SBGridLayoutSwitcherModifier fixedCardSize]
  -[SBGridLayoutSwitcherModifier setFixedCardSize:]
  -[SBGridLayoutSwitcherModifier _handleTransitionEvent:]
  -[SBGridLayoutSwitcherModifier handleInlineTransitionEvent:]
  -[SBGridLayoutSwitcherModifier initWithScrollAxis:fixedGroupingSize:cardScale:alignment:layoutDirection:]
  -[SBGridLayoutSwitcherModifier setUsesFixedCardSize:]
  -[SBGridLayoutSwitcherModifier _indexOfLeadingCard]
  -[SBGridLayoutSwitcherModifier _fittedContentSize]
  -[SBGridLayoutSwitcherModifier _cardHeaderHeight]
  -[SBGridLayoutSwitcherModifier _gridSwitcherPageScale]
  -[SBGridLayoutSwitcherModifier _frameForIndex:ignoringScrollOffset:]
  -[SBGridLayoutSwitcherModifier _frameWithScaleAppliedForIndex:ignoringScrollOffset:]
  -[SBGridLayoutSwitcherModifier _trailingPadding]
  -[SBGridLayoutSwitcherModifier _leadingPadding]
  -[SBGridLayoutSwitcherModifier _scaledCardSize]
  -[SBGridLayoutSwitcherModifier _firstTrailingIndexForContentOffset:]
  -[SBGridLayoutSwitcherModifier _rowForIndex:]
  -[SBGridLayoutSwitcherModifier _columnForIndex:]
  -[SBGridLayoutSwitcherModifier _cardSize]
  -[SBGridLayoutSwitcherModifier isUsingFixedCardSize]
  -[SBGridLayoutSwitcherModifier fixedGroupingSize]
  -[SBGridLayoutSwitcherModifier setFixedGroupingSize:]


SBApplicationProcessState : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding>
 @property  int pid
 @property  BOOL running
 @property  BOOL foreground
 @property  long long taskState
 @property  long long visibility
 @property  BOOL isBeingDebugged
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBApplicationProcessState visibility]
  -[SBApplicationProcessState isBeingDebugged]
  -[SBApplicationProcessState .cxx_destruct]
  -[SBApplicationProcessState succinctDescriptionBuilder]
  -[SBApplicationProcessState taskState]
  -[SBApplicationProcessState pid]
  -[SBApplicationProcessState succinctDescription]
  -[SBApplicationProcessState isEqual:]
  -[SBApplicationProcessState isRunning]
  -[SBApplicationProcessState isForeground]
  -[SBApplicationProcessState _initWithProcess:stateSnapshot:]
  -[SBApplicationProcessState descriptionWithMultilinePrefix:]
  -[SBApplicationProcessState descriptionBuilderWithMultilinePrefix:]


SBWallpaperViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBFWallpaperConfigurationManagerDelegate, SBFLegibilitySettingsProviderDelegate, SBFWallpaperViewInternalObserver, PTSettingsKeyObserver, BSDescriptionProviding, SBFWallpaperViewDelegate, SBWallpaperPresenting, SBWallpaperLegibilityProviding>
 @property  SBFWallpaperView *lockscreenWallpaperView
 @property  SBFWallpaperView *homescreenWallpaperView
 @property  SBFWallpaperView *sharedWallpaperView
 @property  SBWallpaperStyleInfo *homescreenStyleInfo
 @property  SBWallpaperStyleInfo *lockscreenStyleInfo
 @property  <BSInvalidatable> *wallpaperStyleAnimationAssertion
 @property  UITraitCollection *fakeBlurViewOverrideTraitCollection
 @property  SBFWallpaperConfigurationManager *wallpaperConfigurationManager
 @property  NSString *cachingIdentifier
 @property  <SBWallpaperReachabilityCoordinating> *reachabilityCoordinator
 @property  BOOL fixedOrientation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBWallpaperPresentingDelegate> *wallpaperPresentingDelegate
 @property  long long variant
 @property  double homescreenWallpaperScale
 @property  double minimumHomescreenWallpaperScale
 @property  double lockscreenWallpaperScale
 @property  double minimumLockscreenWallpaperScale
 @property  <SBFIrisWallpaperView> *irisWallpaperView
 @property  {?=qqd} currentHomescreenStyleTransitionState

  // class methods
  +[SBWallpaperViewController substitutionFlatColorForWallpaperName:]

  // instance methods
  -[SBWallpaperViewController wallpaperConfigurationManager]
  -[SBWallpaperViewController setLockscreenWallpaperContentsRect:]
  -[SBWallpaperViewController suspendWallpaperAnimationForReason:]
  -[SBWallpaperViewController wallpaperView:didChangeZoomFactor:]
  -[SBWallpaperViewController viewDidLoad]
  -[SBWallpaperViewController cancelInProcessAnimations]
  -[SBWallpaperViewController wallpaperView:wallpaperConfigurationIncludingValueTypes:]
  -[SBWallpaperViewController setVariant:withOutAnimationFactory:inAnimationFactory:completion:]
  -[SBWallpaperViewController setLockscreenWallpaperScale:withAnimationFactory:]
  -[SBWallpaperViewController updateIrisWallpaperForStaticMode]
  -[SBWallpaperViewController currentHomescreenStyleTransitionState]
  -[SBWallpaperViewController setLockscreenWallpaperScale:]
  -[SBWallpaperViewController setWallpaperStyleAnimationAssertion:]
  -[SBWallpaperViewController wallpaperViewDidInvalidateBlurs:]
  -[SBWallpaperViewController beginRequiringWithReason:]
  -[SBWallpaperViewController cachingIdentifier]
  -[SBWallpaperViewController setHomescreenWallpaperScale:withAnimationFactory:]
  -[SBWallpaperViewController contrastInRect:forVariant:]
  -[SBWallpaperViewController contrastForVariant:]
  -[SBWallpaperViewController wallpaperPresentingDelegate]
  -[SBWallpaperViewController endDelayingHomescreenStyleChangesForReason:animationFactory:]
  -[SBWallpaperViewController irisWallpaperView]
  -[SBWallpaperViewController updateWallpaperForLocations:withCompletion:]
  -[SBWallpaperViewController preheatWallpaperForVariant:]
  -[SBWallpaperViewController suspendColorSamplingForReason:]
  -[SBWallpaperViewController lockscreenWallpaperScale]
  -[SBWallpaperViewController _accessibilityReduceTransparencyChanged:]
  -[SBWallpaperViewController setWallpaperStyle:forPriority:forVariant:withAnimationFactory:]
  -[SBWallpaperViewController minimumLockscreenWallpaperScale]
  -[SBWallpaperViewController legibilitySettingsForVariant:]
  -[SBWallpaperViewController averageColorForVariant:]
  -[SBWallpaperViewController newFakeBlurViewForVariant:style:transformOptions:]
  -[SBWallpaperViewController setAlpha:forWallpaperVariant:]
  -[SBWallpaperViewController wallpaperViewDidChangeWantsRasterization:]
  -[SBWallpaperViewController setLockscreenOnlyWallpaperAlpha:]
  -[SBWallpaperViewController addObserver:forVariant:]
  -[SBWallpaperViewController homescreenWallpaperView]
  -[SBWallpaperViewController wallpaperStyleInfoForVariant:]
  -[SBWallpaperViewController substitutionWallpaperConfigurationForWallpaperConfiguration:]
  -[SBWallpaperViewController settings:changedValueForKey:]
  -[SBWallpaperViewController setFakeBlurViewOverrideTraitCollection:]
  -[SBWallpaperViewController reachabilityCoordinator]
  -[SBWallpaperViewController _suspendOrResumeColorSampling]
  -[SBWallpaperViewController _suspendOrResumeWallpaperAnimation]
  -[SBWallpaperViewController homescreenWallpaperScale]
  -[SBWallpaperViewController setWallpaperPresentingDelegate:]
  -[SBWallpaperViewController _beginDisallowRasterizationBlock]
  -[SBWallpaperViewController setSharedWallpaperView:]
  -[SBWallpaperViewController _updateBlurImagesForVariant:]
  -[SBWallpaperViewController _updateSharedWallpaperWithOptions:wallpaperMode:]
  -[SBWallpaperViewController _vendWallpaperViewForConfiguration:forVariant:shared:options:]
  -[SBWallpaperViewController _endDisallowRasterizationBlock]
  -[SBWallpaperViewController setVariant:]
  -[SBWallpaperViewController _updateHomeScreenWallpaperScaleWithAnimationFactory:]
  -[SBWallpaperViewController _newWallpaperEffectViewForVariant:transitionState:]
  -[SBWallpaperViewController setDisallowsRasterization:forVariant:withReason:]
  -[SBWallpaperViewController _handleWallpaperLegibilitySettingsChanged:forVariant:]
  -[SBWallpaperViewController _updateRasterizationState]
  -[SBWallpaperViewController dealloc]
  -[SBWallpaperViewController shouldAutorotate]
  -[SBWallpaperViewController .cxx_destruct]
  -[SBWallpaperViewController updateWallpaperForLocations:wallpaperMode:withCompletion:]
  -[SBWallpaperViewController _activeWallpaperView]
  -[SBWallpaperViewController minimumHomescreenWallpaperScale]
  -[SBWallpaperViewController lockscreenStyleInfo]
  -[SBWallpaperViewController _reconfigureBlurViewsForVariant:]
  -[SBWallpaperViewController _updateWallpaperForWallpaperDimming:]
  -[SBWallpaperViewController _sourceForFakeBlurView:]
  -[SBWallpaperViewController succinctDescriptionBuilder]
  -[SBWallpaperViewController beginDelayingHomescreenStyleChangesForReason:]
  -[SBWallpaperViewController _isWallpaperView:displayingWallpaperWithConfiguration:forVariant:]
  -[SBWallpaperViewController wallpaperStyleAnimationAssertion]
  -[SBWallpaperViewController noteWillAnimateToInterfaceOrientation:]
  -[SBWallpaperViewController wallpaperConfigurationManager:didChangeWallpaperConfigurationForVariants:]
  -[SBWallpaperViewController _bestWallpaperViewInitializationOptionsForVariant:shared:wallpaperOptions:options:]
  -[SBWallpaperViewController wallpaperDataTypesToRequestForUpdatingWallpaperViews]
  -[SBWallpaperViewController _setDisallowRasterization:withReason:reasons:]
  -[SBWallpaperViewController removeObserver:forVariant:]
  -[SBWallpaperViewController variant]
  -[SBWallpaperViewController setCachingIdentifier:]
  -[SBWallpaperViewController wallpaperConfigurationForVariant:includingValuesForTypes:wallpaperMode:]
  -[SBWallpaperViewController updateIrisWallpaperForInteractiveMode]
  -[SBWallpaperViewController _updateWallpaperHidden]
  -[SBWallpaperViewController _updateSeparateWallpaperForVariants:options:wallpaperMode:]
  -[SBWallpaperViewController _updateEffectViewForVariant:withFactory:]
  -[SBWallpaperViewController initWithNibName:bundle:]
  -[SBWallpaperViewController traitCollectionDidChange:]
  -[SBWallpaperViewController homescreenStyleInfo]
  -[SBWallpaperViewController _wallpaperViewForVariant:]
  -[SBWallpaperViewController _endSuspendingMotionEffectsForStyleIfNeeded]
  -[SBWallpaperViewController succinctDescription]
  -[SBWallpaperViewController _removeColorSamplingAssertion:]
  -[SBWallpaperViewController _updateWallpaperParallax]
  -[SBWallpaperViewController _updateMotionEffectsForState:]
  -[SBWallpaperViewController shouldDelayHomescreenStyleUpdates]
  -[SBWallpaperViewController _setWallpaperHidden:variant:reason:]
  -[SBWallpaperViewController removeWallpaperRequiredAssertion:]
  -[SBWallpaperViewController setWallpaperHidden:variant:reason:]
  -[SBWallpaperViewController variantsShareWallpaper]
  -[SBWallpaperViewController averageColorInRect:forVariant:withSmudgeRadius:]
  -[SBWallpaperViewController _clearWallpaperView:]
  -[SBWallpaperViewController setReachabilityCoordinator:]
  -[SBWallpaperViewController _isRasterizationDisallowedForCurrentVariant]
  -[SBWallpaperViewController setHomescreenWallpaperView:]
  -[SBWallpaperViewController _registerFakeBlurView:]
  -[SBWallpaperViewController _beginSuspendingMotionEffectsForStyleIfNeeded]
  -[SBWallpaperViewController _shouldSuspendMotionEffectsForState:]
  -[SBWallpaperViewController setLockscreenWallpaperView:]
  -[SBWallpaperViewController _updateEffectViewForVariant:oldState:newState:oldEffectView:newEffectView:]
  -[SBWallpaperViewController fakeBlurViewOverrideTraitCollection]
  -[SBWallpaperViewController _wallpaperViewClassForType:]
  -[SBWallpaperViewController _removeWallpaperScaleAssertion:withAnimationFactory:]
  -[SBWallpaperViewController _observersForVariant:]
  -[SBWallpaperViewController _precacheStyles:usingTraitCollection:]
  -[SBWallpaperViewController fixedOrientation]
  -[SBWallpaperViewController _canShowWhileLocked]
  -[SBWallpaperViewController setFixedOrientation:]
  -[SBWallpaperViewController _blurViewsForVariant:]
  -[SBWallpaperViewController _unregisterFakeBlurView:]
  -[SBWallpaperViewController sharedWallpaperView]
  -[SBWallpaperViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBWallpaperViewController noteDidRotateFromInterfaceOrientation:]
  -[SBWallpaperViewController _updateAndPrewarmWallpapers]
  -[SBWallpaperViewController _clearWallpaperEffectView:]
  -[SBWallpaperViewController cleanupOldSharedWallpaper:lockSreenWallpaper:homeScreenWallpaper:]
  -[SBWallpaperViewController setWallpaperConfigurationManager:]
  -[SBWallpaperViewController averageColorInRect:forVariant:]
  -[SBWallpaperViewController setWallpaperStyleTransitionState:forPriority:forVariant:withAnimationFactory:]
  -[SBWallpaperViewController minimumWallpaperScaleForVariant:]
  -[SBWallpaperViewController _isWallpaperHiddenForVariant:]
  -[SBWallpaperViewController providerLegibilitySettingsChanged:]
  -[SBWallpaperViewController _removeWallpaperAnimationAssertion:]
  -[SBWallpaperViewController removeWallpaperStyleForPriority:forVariant:withAnimationFactory:]
  -[SBWallpaperViewController lockscreenWallpaperView]
  -[SBWallpaperViewController descriptionWithMultilinePrefix:]
  -[SBWallpaperViewController _handleWallpaperChangedForVariant:]
  -[SBWallpaperViewController _updateWallpaperForLocations:options:wallpaperMode:withCompletion:]
  -[SBWallpaperViewController _makeWallpaperViewWithConfiguration:forVariant:shared:options:]
  -[SBWallpaperViewController _shouldSuspendMotionEffectsForStyle:]
  -[SBWallpaperViewController descriptionBuilderWithMultilinePrefix:]
  -[SBWallpaperViewController wallpaperConfigurationForUpdatingWallpaperViewsForVariant:wallpaperMode:]
  -[SBWallpaperViewController _invalidateWallpaperAssertion:]
  -[SBWallpaperViewController _updateBlurGeneration]
  -[SBWallpaperViewController _updateWallpaperForWallpaperMode:]


_SBWallpaperViewControllerAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSInvalidatable, BSDescriptionProviding>
 @property  BOOL invalidated
 @property  SBWallpaperViewController *wallpaperViewController
 @property  long long type
 @property  NSString *reason
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBWallpaperViewControllerAssertion wallpaperViewController]
  -[_SBWallpaperViewControllerAssertion initWithWallpaperViewController:type:reason:]
  -[_SBWallpaperViewControllerAssertion dealloc]
  -[_SBWallpaperViewControllerAssertion .cxx_destruct]
  -[_SBWallpaperViewControllerAssertion succinctDescriptionBuilder]
  -[_SBWallpaperViewControllerAssertion type]
  -[_SBWallpaperViewControllerAssertion succinctDescription]
  -[_SBWallpaperViewControllerAssertion isInvalidated]
  -[_SBWallpaperViewControllerAssertion setInvalidated:]
  -[_SBWallpaperViewControllerAssertion invalidate]
  -[_SBWallpaperViewControllerAssertion reason]
  -[_SBWallpaperViewControllerAssertion descriptionWithMultilinePrefix:]
  -[_SBWallpaperViewControllerAssertion descriptionBuilderWithMultilinePrefix:]


_SBWallpaperViewControllerScaleAssertion : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBWallpaperScaleInvalidating, BSDescriptionProviding>
 @property  BOOL invalidated
 @property  SBWallpaperViewController *wallpaperViewController
 @property  double scale
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBWallpaperViewControllerScaleAssertion wallpaperViewController]
  -[_SBWallpaperViewControllerScaleAssertion dealloc]
  -[_SBWallpaperViewControllerScaleAssertion .cxx_destruct]
  -[_SBWallpaperViewControllerScaleAssertion succinctDescriptionBuilder]
  -[_SBWallpaperViewControllerScaleAssertion succinctDescription]
  -[_SBWallpaperViewControllerScaleAssertion isInvalidated]
  -[_SBWallpaperViewControllerScaleAssertion setInvalidated:]
  -[_SBWallpaperViewControllerScaleAssertion invalidate]
  -[_SBWallpaperViewControllerScaleAssertion descriptionWithMultilinePrefix:]
  -[_SBWallpaperViewControllerScaleAssertion scale]
  -[_SBWallpaperViewControllerScaleAssertion descriptionBuilderWithMultilinePrefix:]
  -[_SBWallpaperViewControllerScaleAssertion initWithWallpaperViewController:scale:]
  -[_SBWallpaperViewControllerScaleAssertion invalidateWithAnimationFactory:]


SBActivateAppClipFromPlaceholderWorkspaceTransaction : SBAppToAppWorkspaceTransaction <BSTransactionObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction transactionDidComplete:]
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction _serialOverlayPreDismissalOptions]
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction _begin]
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction .cxx_destruct]
  -[SBActivateAppClipFromPlaceholderWorkspaceTransaction _concurrentOverlayDismissalOptions]


SBApplicationLibraryObserver : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <MCProfileConnectionObserver>
 @property  NSArray *placeholders
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationLibraryObserver new]

  // instance methods
  -[SBApplicationLibraryObserver initWithAppLibrary:splashBoardController:]
  -[SBApplicationLibraryObserver profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:]
  -[SBApplicationLibraryObserver init]
  -[SBApplicationLibraryObserver addApplicationLifecycleObserver:]
  -[SBApplicationLibraryObserver _didCancelPlaceholders:]
  -[SBApplicationLibraryObserver removeApplicationLifecycleObserver:]
  -[SBApplicationLibraryObserver .cxx_destruct]
  -[SBApplicationLibraryObserver _didRemoveApplications:]
  -[SBApplicationLibraryObserver addPlaceholderLifecycleObserver:]
  -[SBApplicationLibraryObserver removePlaceholderLifecycleObserver:]
  -[SBApplicationLibraryObserver _didUpdateApplications:]
  -[SBApplicationLibraryObserver _didReplaceApplications:]
  -[SBApplicationLibraryObserver _didAddApplications:]
  -[SBApplicationLibraryObserver _didAddPlaceholders:]
  -[SBApplicationLibraryObserver _didDemoteApplications:]
  -[SBApplicationLibraryObserver placeholders]
  -[SBApplicationLibraryObserver _addObserver:table:]
  -[SBApplicationLibraryObserver _removeObserver:table:]
  -[SBApplicationLibraryObserver _waitForLaunchImageGenerationForApplications:]
  -[SBApplicationLibraryObserver profileConnectionDidReceiveProfileListChangedNotification:userInfo:]
  -[SBApplicationLibraryObserver suspendCalloutsAssertionWithReason:]
  -[SBApplicationLibraryObserver _didChangeNetworkUsage:]
  -[SBApplicationLibraryObserver _appBundleIDsForApplications:]


SBBackgroundFetchTask : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBBackgroundFetchTask _nextSequenceNumber]

  // instance methods
  -[SBBackgroundFetchTask execute]
  -[SBBackgroundFetchTask dealloc]
  -[SBBackgroundFetchTask .cxx_destruct]


SBBackgroundMultitaskingManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // class methods
  +[SBBackgroundMultitaskingManager sharedInstance]

  // instance methods
  -[SBBackgroundMultitaskingManager init]
  -[SBBackgroundMultitaskingManager _backgroundTaskFinished:forApplication:]
  -[SBBackgroundMultitaskingManager .cxx_destruct]
  -[SBBackgroundMultitaskingManager _appProcessStateDidChange:]
  -[SBBackgroundMultitaskingManager _createBackgroundFetchTaskForApplication:]


SBBackgroundFetchExternalRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBBackgroundFetchExternalRequest dealloc]
  -[SBBackgroundFetchExternalRequest .cxx_destruct]


SBStartupTransitionContextPersistence : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBStartupTransitionContextPersistence .cxx_destruct]
  -[SBStartupTransitionContextPersistence initWithBootDefaults:loginSession:]
  -[SBStartupTransitionContextPersistence readTransitionContext]
  -[SBStartupTransitionContextPersistence saveContext:]


SBRecordingIndicatorView : UIView /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
  // instance methods
  -[SBRecordingIndicatorView init]
  -[SBRecordingIndicatorView layoutSubviews]


SBTransientOverlayViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBHomeGrabberDelegate, BSDescriptionProviding, SBButtonEventsHandler, SBFIdleTimerBehaviorProviding, SBIdleTimerProviding>
 @property  <SBTransientOverlayViewControllerDelegate> *transientOverlayDelegate
 @property  UIStatusBarStyleRequest *currentStatusBarStyleRequest
 @property  BOOL hasVisibleStatusBar
 @property  SBHomeGrabberView *grabberView
 @property  BOOL presentationAllowsHomeGrabberAutoHide
 @property  double presentationContentCornerRadius
 @property  {CGAffineTransform=dddddd} presentationContentTransform
 @property  {CGAffineTransform=dddddd} presentationHomeGrabberTransform
 @property  double presentationHomeGrabberAlpha
 @property  double presentationHomeGrabberAdditionalEdgeSpacing
 @property  BOOL presentationDimmingViewHidden
 @property  double presentationDimmingAlpha
 @property  BOOL presentationPrefersStatusBarHidden
 @property  BOOL dismissesForCoverSheetPresentation
 @property  long long homeAffordanceSuppression
 @property  BOOL preservesAppSwitcherDuringPresentationAndDismissal
 @property  UIColor *presentationDimmingViewColor
 @property  UIView *backgroundView
 @property  UIView *contentView
 @property  BOOL allowsStackingOverlayContentAbove
 @property  NSNumber *preferredSceneDeactivationReasonValue
 @property  @? sceneDeactivationPredicate
 @property  BOOL contentOpaque
 @property  BOOL prefersProximityDetectionEnabled
 @property  _UILegibilitySettings *preferredStatusBarLegibilitySettings
 @property  int preferredStatusBarStyleOverridesToCancel
 @property  BOOL prefersStatusBarActivityItemVisible
 @property  BOOL shouldDisableBanners
 @property  BOOL shouldDisableControlCenter
 @property  BOOL shouldDisableReachability
 @property  BOOL shouldDisableInteractiveScreenshotGesture
 @property  BOOL shouldDisableSiri
 @property  BOOL shouldPendAlertItems
 @property  BOOL dismissesSiriForPresentation
 @property  BOOL shouldUseSceneBasedKeyboardFocus
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  long long containerOrientation
 @property  BOOL shouldDisableOrientationUpdates
 @property  BOOL isIgnoringAppearanceUpdates
 @property  BOOL isIgnoringContentOverlayInsetUpdates
 @property  long long preferredLockedGestureDismissalStyle
 @property  long long preferredUnlockedGestureDismissalStyle
 @property  SBDisplayItem *representedDisplayItem
 @property  NSString *preferredDisplayLayoutElementIdentifier
 @property  FBDisplayLayoutElement *displayLayoutElement
 @property  int pictureInPictureProcessIdentifier
 @property  BOOL prefersWindowHitTestingDisabled
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long idleTimerDuration
 @property  long long idleTimerMode
 @property  long long idleWarnMode
 @property  double customIdleExpirationTimeout
 @property  double customIdleWarningTimeout

  // instance methods
  -[SBTransientOverlayViewController viewDidLoad]
  -[SBTransientOverlayViewController handleHomeButtonPress]
  -[SBTransientOverlayViewController handleHeadsetButtonPress:]
  -[SBTransientOverlayViewController idleTimerDuration]
  -[SBTransientOverlayViewController setNeedsStatusBarAppearanceUpdate]
  -[SBTransientOverlayViewController handleLockButtonPress]
  -[SBTransientOverlayViewController handleHomeButtonLongPress]
  -[SBTransientOverlayViewController handleVolumeDownButtonPress]
  -[SBTransientOverlayViewController setIdleTimerCoordinator:]
  -[SBTransientOverlayViewController handleVolumeUpButtonPress]
  -[SBTransientOverlayViewController backgroundView]
  -[SBTransientOverlayViewController handleHomeButtonDoublePress]
  -[SBTransientOverlayViewController idleTimerCoordinator]
  -[SBTransientOverlayViewController shouldAllowThinStyleForHomeGrabberView:]
  -[SBTransientOverlayViewController displayLayoutElement]
  -[SBTransientOverlayViewController idleWarnMode]
  -[SBTransientOverlayViewController idleTimerMode]
  -[SBTransientOverlayViewController shouldAllowAutoHideForHomeGrabberView:]
  -[SBTransientOverlayViewController _edgeInsetsForChildViewController:insetsAreAbsolute:]
  -[SBTransientOverlayViewController additionalEdgeSpacingForHomeGrabberView:]
  -[SBTransientOverlayViewController setNeedsWhitePointAdaptivityStyleUpdate]
  -[SBTransientOverlayViewController preferredInterfaceOrientationForPresentation]
  -[SBTransientOverlayViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[SBTransientOverlayViewController dealloc]
  -[SBTransientOverlayViewController contentView]
  -[SBTransientOverlayViewController coordinatorRequestedIdleTimerBehavior:]
  -[SBTransientOverlayViewController shouldAutorotate]
  -[SBTransientOverlayViewController shouldDisableControlCenter]
  -[SBTransientOverlayViewController _setDisplayLayoutElementActive:]
  -[SBTransientOverlayViewController .cxx_destruct]
  -[SBTransientOverlayViewController hasVisibleStatusBar]
  -[SBTransientOverlayViewController setNeedsUpdateOfHomeIndicatorAutoHidden]
  -[SBTransientOverlayViewController currentStatusBarStyleRequest]
  -[SBTransientOverlayViewController succinctDescriptionBuilder]
  -[SBTransientOverlayViewController shouldDisableSiri]
  -[SBTransientOverlayViewController setNeedsUpdateOfScreenEdgesDeferringSystemGestures]
  -[SBTransientOverlayViewController supportedInterfaceOrientations]
  -[SBTransientOverlayViewController setContainerOrientation:]
  -[SBTransientOverlayViewController initWithNibName:bundle:]
  -[SBTransientOverlayViewController viewDidAppear:]
  -[SBTransientOverlayViewController succinctDescription]
  -[SBTransientOverlayViewController prefersStatusBarActivityItemVisible]
  -[SBTransientOverlayViewController _isKeyboardVisibleForSpringBoard]
  -[SBTransientOverlayViewController isContentOpaque]
  -[SBTransientOverlayViewController handleDoubleHeightStatusBarTap]
  -[SBTransientOverlayViewController _keyboardWillShowNotification:]
  -[SBTransientOverlayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBTransientOverlayViewController viewDidDisappear:]
  -[SBTransientOverlayViewController grabberView]
  -[SBTransientOverlayViewController containerOrientation]
  -[SBTransientOverlayViewController setDisplayLayoutElement:]
  -[SBTransientOverlayViewController viewDidLayoutSubviews]
  -[SBTransientOverlayViewController descriptionWithMultilinePrefix:]
  -[SBTransientOverlayViewController descriptionBuilderWithMultilinePrefix:]
  -[SBTransientOverlayViewController setGrabberView:]
  -[SBTransientOverlayViewController _keyboardWillHideNotification:]
  -[SBTransientOverlayViewController preferredUnlockedGestureDismissalStyle]
  -[SBTransientOverlayViewController beginIgnoringAppearanceUpdates]
  -[SBTransientOverlayViewController beginIgnoringContentOverlayInsetUpdates]
  -[SBTransientOverlayViewController endIgnoringAppearanceUpdates]
  -[SBTransientOverlayViewController endIgnoringContentOverlayInsetUpdates]
  -[SBTransientOverlayViewController allowsStackingOverlayContentAbove]
  -[SBTransientOverlayViewController newTransientOverlayDismissalTransitionCoordinator]
  -[SBTransientOverlayViewController newTransientOverlayPresentationTransitionCoordinator]
  -[SBTransientOverlayViewController shouldDisableBanners]
  -[SBTransientOverlayViewController shouldPendAlertItems]
  -[SBTransientOverlayViewController preservesAppSwitcherDuringPresentationAndDismissal]
  -[SBTransientOverlayViewController dismissesSiriForPresentation]
  -[SBTransientOverlayViewController setPresentationPrefersStatusBarHidden:initialStatusBarSettings:]
  -[SBTransientOverlayViewController setPresentationPrefersHomeGrabberHidden:animated:]
  -[SBTransientOverlayViewController preserveInputViewsAnimated:]
  -[SBTransientOverlayViewController handleGestureDismissal]
  -[SBTransientOverlayViewController restoreInputViewsAnimated:]
  -[SBTransientOverlayViewController handlePictureInPictureDidBegin]
  -[SBTransientOverlayViewController isIgnoringAppearanceUpdates]
  -[SBTransientOverlayViewController setNeedsContentOpaqueUpdate]
  -[SBTransientOverlayViewController setNeedsGestureDismissalStyleUpdate]
  -[SBTransientOverlayViewController setNeedsFeaturePolicyUpdate]
  -[SBTransientOverlayViewController setNeedsSceneDeactivationUpdate]
  -[SBTransientOverlayViewController setNeedsOrientationUpdatesDisabledUpdate]
  -[SBTransientOverlayViewController isIgnoringContentOverlayInsetUpdates]
  -[SBTransientOverlayViewController preferredLockedGestureDismissalStyle]
  -[SBTransientOverlayViewController preferredSceneDeactivationReasonValue]
  -[SBTransientOverlayViewController preferredStatusBarStyleOverridesToCancel]
  -[SBTransientOverlayViewController shouldDisableReachability]
  -[SBTransientOverlayViewController shouldDisableOrientationUpdates]
  -[SBTransientOverlayViewController shouldDisableInteractiveScreenshotGesture]
  -[SBTransientOverlayViewController pictureInPictureProcessIdentifier]
  -[SBTransientOverlayViewController preferredDisplayLayoutElementIdentifier]
  -[SBTransientOverlayViewController representedDisplayItem]
  -[SBTransientOverlayViewController sceneDeactivationPredicate]
  -[SBTransientOverlayViewController shouldUseSceneBasedKeyboardFocus]
  -[SBTransientOverlayViewController setTransientOverlayDelegate:]
  -[SBTransientOverlayViewController dismissesForCoverSheetPresentation]
  -[SBTransientOverlayViewController setPresentationDimmingViewHidden:]
  -[SBTransientOverlayViewController setPresentationDimmingAlpha:]
  -[SBTransientOverlayViewController setPresentationContentTransform:]
  -[SBTransientOverlayViewController setPresentationHomeGrabberTransform:]
  -[SBTransientOverlayViewController setPresentationHomeGrabberAlpha:]
  -[SBTransientOverlayViewController setPresentationHomeGrabberAdditionalEdgeSpacing:]
  -[SBTransientOverlayViewController setPresentationContentCornerRadius:]
  -[SBTransientOverlayViewController prefersProximityDetectionEnabled]
  -[SBTransientOverlayViewController transientOverlayDelegate]
  -[SBTransientOverlayViewController prefersWindowHitTestingDisabled]
  -[SBTransientOverlayViewController homeAffordanceSuppression]
  -[SBTransientOverlayViewController setHomeGrabberPointerClickDelegate:]
  -[SBTransientOverlayViewController setNeedsWindowHitTestingUpdate]
  -[SBTransientOverlayViewController presentationDimmingViewColor]
  -[SBTransientOverlayViewController setNeedsIdleTimerReset]
  -[SBTransientOverlayViewController preferredStatusBarLegibilitySettings]
  -[SBTransientOverlayViewController setNeedsProximityDetectionUpdate]
  -[SBTransientOverlayViewController _invalidateKeyboardHomeAffordanceAssertion]
  -[SBTransientOverlayViewController _applyStatusBarStyleRequestWithInitialStatusBarSettings:]
  -[SBTransientOverlayViewController _updateGrabberViewConfiguration]
  -[SBTransientOverlayViewController _currentStatusBarFrameForStyle:]
  -[SBTransientOverlayViewController _newHomeGrabberViewWithFrame:]
  -[SBTransientOverlayViewController addPresentationBackgroundView:]
  -[SBTransientOverlayViewController removePresentationBackgroundView:]
  -[SBTransientOverlayViewController _updateGrabberViewHiddenConfigurationAnimated:]
  -[SBTransientOverlayViewController presentationDimmingAlpha]
  -[SBTransientOverlayViewController presentationAllowsHomeGrabberAutoHide]
  -[SBTransientOverlayViewController setPresentationAllowsHomeGrabberAutoHide:]
  -[SBTransientOverlayViewController presentationContentCornerRadius]
  -[SBTransientOverlayViewController presentationContentTransform]
  -[SBTransientOverlayViewController presentationHomeGrabberTransform]
  -[SBTransientOverlayViewController presentationHomeGrabberAlpha]
  -[SBTransientOverlayViewController presentationHomeGrabberAdditionalEdgeSpacing]
  -[SBTransientOverlayViewController presentationDimmingViewHidden]
  -[SBTransientOverlayViewController presentationPrefersStatusBarHidden]


SBExternalHomeGestureFloatingSwitcherModifier : SBGestureSwitcherModifier <SBHomeGestureDockSwitcherModifierDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBExternalHomeGestureFloatingSwitcherModifier animationAttributesForLayoutElement:]
  -[SBExternalHomeGestureFloatingSwitcherModifier .cxx_destruct]
  -[SBExternalHomeGestureFloatingSwitcherModifier appLayoutsToResignActive]
  -[SBExternalHomeGestureFloatingSwitcherModifier containerViewBounds]
  -[SBExternalHomeGestureFloatingSwitcherModifier didMoveToParentModifier:]
  -[SBExternalHomeGestureFloatingSwitcherModifier isFloatingDockGesturePossible]
  -[SBExternalHomeGestureFloatingSwitcherModifier handleGestureEvent:]
  -[SBExternalHomeGestureFloatingSwitcherModifier currentFinalDestination]
  -[SBExternalHomeGestureFloatingSwitcherModifier initWithGestureID:initialFloatingConfiguration:interfaceOrientation:]
  -[SBExternalHomeGestureFloatingSwitcherModifier _updateForGestureDidBeginOrChangeWithEvent:]


SBEDUTemporarySessionLogoutWarningAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  @? logoutActionHandler

  // instance methods
  -[SBEDUTemporarySessionLogoutWarningAlertItem forcesModalAlertAppearance]
  -[SBEDUTemporarySessionLogoutWarningAlertItem .cxx_destruct]
  -[SBEDUTemporarySessionLogoutWarningAlertItem shouldShowInLockScreen]
  -[SBEDUTemporarySessionLogoutWarningAlertItem configure:requirePasscodeForActions:]
  -[SBEDUTemporarySessionLogoutWarningAlertItem setLogoutActionHandler:]
  -[SBEDUTemporarySessionLogoutWarningAlertItem logoutActionHandler]


SBSceneLayoutCoordinateSpace : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, UICoordinateSpace>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} bounds

  // class methods
  +[SBSceneLayoutCoordinateSpace coordinateSpaceForInterfaceOrientation:withReferenceCoordinateSpace:inOrientation:]
  +[SBSceneLayoutCoordinateSpace coordinateSpaceForFrame:withinCoordinateSpace:]

  // instance methods
  -[SBSceneLayoutCoordinateSpace convertRect:fromCoordinateSpace:]
  -[SBSceneLayoutCoordinateSpace .cxx_destruct]
  -[SBSceneLayoutCoordinateSpace succinctDescriptionBuilder]
  -[SBSceneLayoutCoordinateSpace convertRect:toCoordinateSpace:]
  -[SBSceneLayoutCoordinateSpace convertPoint:fromCoordinateSpace:]
  -[SBSceneLayoutCoordinateSpace succinctDescription]
  -[SBSceneLayoutCoordinateSpace bounds]
  -[SBSceneLayoutCoordinateSpace convertPoint:toCoordinateSpace:]
  -[SBSceneLayoutCoordinateSpace descriptionWithMultilinePrefix:]
  -[SBSceneLayoutCoordinateSpace descriptionBuilderWithMultilinePrefix:]
  -[SBSceneLayoutCoordinateSpace initWithParentCoordinateSpace:]


SBSceneLayoutOrientationCoordinateSpace : SBSceneLayoutCoordinateSpace
  // instance methods
  -[SBSceneLayoutOrientationCoordinateSpace convertRect:fromCoordinateSpace:]
  -[SBSceneLayoutOrientationCoordinateSpace convertRect:toCoordinateSpace:]
  -[SBSceneLayoutOrientationCoordinateSpace bounds]
  -[SBSceneLayoutOrientationCoordinateSpace initWithInterfaceOrientation:withReferenceCoordinateSpace:inOrientation:]
  -[SBSceneLayoutOrientationCoordinateSpace descriptionBuilderWithMultilinePrefix:]


SBSceneLayoutFrameCoordinateSpace : SBSceneLayoutCoordinateSpace
  // instance methods
  -[SBSceneLayoutFrameCoordinateSpace convertRect:fromCoordinateSpace:]
  -[SBSceneLayoutFrameCoordinateSpace .cxx_destruct]
  -[SBSceneLayoutFrameCoordinateSpace convertRect:toCoordinateSpace:]
  -[SBSceneLayoutFrameCoordinateSpace bounds]
  -[SBSceneLayoutFrameCoordinateSpace initWithFrame:withinCoordinateSpace:]
  -[SBSceneLayoutFrameCoordinateSpace descriptionBuilderWithMultilinePrefix:]


SBLockScreenViewControllerBase : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <SBApplicationHosting, SBAutoUnlockRule, SBBiometricUnlockBehavior, SBButtonEventsHandler, SBCoverSheetSlidingViewControllerContentViewController, SBIdleTimerProviding, SBLockScreenBacklightControlling, SBLockScreenBehaviorSuppressing, SBLockScreenBlockedStateObserving, SBLockScreenButtonObserving, SBLockScreenCallHandling, SBLockScreenContentStateProviding, SBLockScreenCustomActionStoring, SBLockScreenIdleTimerControlling, SBLockScreenLockingAndUnlocking, SBLockScreenMediaControlsPresenting, SBLockScreenPasscodeViewPresenting, SBLockScreenPluginPresenting, SBLockScreenProximityBehaviorProviding, SBLockScreenStatusBarTransitioning>
 @property  UIVisualEffectView *wakeEffectView
 @property  SBFLockScreenWakeAnimator *lockScreenWakeAnimator
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBBiometricUnlockBehaviorDelegate> *biometricUnlockBehaviorDelegate
 @property  BOOL contentOccludesBackground
 @property  double backlightLevel
 @property  SBFLockScreenActionContext *customLockScreenActionContext
 @property  <SBIdleTimerCoordinating> *idleTimerCoordinator
 @property  BOOL authenticated
 @property  BOOL showingMediaControls
 @property  BOOL expectsFaceContact
 @property  BOOL shouldShowLockStatusBarTime

  // instance methods
  -[SBLockScreenViewControllerBase noteResetRestoreStateUpdated]
  -[SBLockScreenViewControllerBase isPasscodeLockVisible]
  -[SBLockScreenViewControllerBase noteDeviceBlockedStatusUpdated]
  -[SBLockScreenViewControllerBase setInScreenOffMode:forAutoUnlock:fromUnlockSource:]
  -[SBLockScreenViewControllerBase willUIUnlockFromSource:]
  -[SBLockScreenViewControllerBase finishUIUnlockFromSource:]
  -[SBLockScreenViewControllerBase isMainPageVisible]
  -[SBLockScreenViewControllerBase shouldDisableALS]
  -[SBLockScreenViewControllerBase viewDidLoad]
  -[SBLockScreenViewControllerBase handleHomeButtonPress]
  -[SBLockScreenViewControllerBase isAuthenticated]
  -[SBLockScreenViewControllerBase setPasscodeLockVisible:animated:]
  -[SBLockScreenViewControllerBase setCustomLockScreenActionContext:]
  -[SBLockScreenViewControllerBase createHomeButtonShowPasscodeRecognizerForHomeButtonPress]
  -[SBLockScreenViewControllerBase isHostingAnApp]
  -[SBLockScreenViewControllerBase setShowingMediaControls:]
  -[SBLockScreenViewControllerBase handleHeadsetButtonPress:]
  -[SBLockScreenViewControllerBase hostedAppSceneHandle]
  -[SBLockScreenViewControllerBase suppressesControlCenter]
  -[SBLockScreenViewControllerBase shouldAutoUnlockForSource:]
  -[SBLockScreenViewControllerBase suppressesScreenshots]
  -[SBLockScreenViewControllerBase canHostAnApp]
  -[SBLockScreenViewControllerBase updateStatusBarForLockScreenTeardown]
  -[SBLockScreenViewControllerBase prepareForUIUnlock]
  -[SBLockScreenViewControllerBase suppressesBanners]
  -[SBLockScreenViewControllerBase updateStatusBarForLockScreenComeback]
  -[SBLockScreenViewControllerBase isUnlockDisabled]
  -[SBLockScreenViewControllerBase conformsToSBApplicationHosting]
  -[SBLockScreenViewControllerBase setInScreenOffMode:]
  -[SBLockScreenViewControllerBase shouldUnlockUIOnKeyDownEvent]
  -[SBLockScreenViewControllerBase canBeDeactivatedForUIUnlockFromSource:]
  -[SBLockScreenViewControllerBase setPasscodeLockVisible:animated:completion:]
  -[SBLockScreenViewControllerBase _customLockScreenActionContext]
  -[SBLockScreenViewControllerBase isInScreenOffMode]
  -[SBLockScreenViewControllerBase handleLockButtonPress]
  -[SBLockScreenViewControllerBase isShowingMediaControls]
  -[SBLockScreenViewControllerBase startLockScreenFadeInAnimationForSource:]
  -[SBLockScreenViewControllerBase expectsFaceContact]
  -[SBLockScreenViewControllerBase prepareForUILock]
  -[SBLockScreenViewControllerBase createHomeButtonSuppressAfterUnlockRecognizerForUnlockSource:]
  -[SBLockScreenViewControllerBase hostedAppWillRotateToInterfaceOrientation:]
  -[SBLockScreenViewControllerBase jiggleLockIcon]
  -[SBLockScreenViewControllerBase handleHomeButtonLongPress]
  -[SBLockScreenViewControllerBase hostedAppSceneHandles]
  -[SBLockScreenViewControllerBase handleVolumeDownButtonPress]
  -[SBLockScreenViewControllerBase setIdleTimerCoordinator:]
  -[SBLockScreenViewControllerBase handleVolumeUpButtonPress]
  -[SBLockScreenViewControllerBase biometricUnlockBehaviorDelegate]
  -[SBLockScreenViewControllerBase handleHomeButtonDoublePress]
  -[SBLockScreenViewControllerBase idleTimerCoordinator]
  -[SBLockScreenViewControllerBase shouldShowLockStatusBarTime]
  -[SBLockScreenViewControllerBase disableLockScreenPluginWithContext:]
  -[SBLockScreenViewControllerBase setWakeEffectView:]
  -[SBLockScreenViewControllerBase isMakingEmergencyCall]
  -[SBLockScreenViewControllerBase launchEmergencyDialer]
  -[SBLockScreenViewControllerBase coordinatorRequestedIdleTimerBehavior:]
  -[SBLockScreenViewControllerBase enableLockScreenPluginWithContext:]
  -[SBLockScreenViewControllerBase .cxx_destruct]
  -[SBLockScreenViewControllerBase succinctDescriptionBuilder]
  -[SBLockScreenViewControllerBase noteMenuButtonUp]
  -[SBLockScreenViewControllerBase wakeEffectView]
  -[SBLockScreenViewControllerBase setAuthenticated:]
  -[SBLockScreenViewControllerBase succinctDescription]
  -[SBLockScreenViewControllerBase lockScreenWakeAnimator]
  -[SBLockScreenViewControllerBase setBiometricUnlockBehaviorDelegate:]
  -[SBLockScreenViewControllerBase backlightLevel]
  -[SBLockScreenViewControllerBase exitEmergencyDialerAnimated:]
  -[SBLockScreenViewControllerBase handleBiometricEvent:]
  -[SBLockScreenViewControllerBase launchEmergencyDialerAnimated:]
  -[SBLockScreenViewControllerBase viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBLockScreenViewControllerBase noteMenuButtonDown]
  -[SBLockScreenViewControllerBase contentOccludesBackground]
  -[SBLockScreenViewControllerBase emergencyDialerExitedWithError:]
  -[SBLockScreenViewControllerBase descriptionWithMultilinePrefix:]
  -[SBLockScreenViewControllerBase setBacklightLevel:]
  -[SBLockScreenViewControllerBase descriptionBuilderWithMultilinePrefix:]
  -[SBLockScreenViewControllerBase conformsToSBCoverSheetSlidingViewControllerContentViewController]


SBLockScreenManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <BSDescriptionProviding, SBPasscodeEntryTransientOverlayViewControllerDelegate, SBFPrivateAuthenticationObserver, CSCoverSheetViewControllerDelegate, CSWallpaperColorProvider, SBLockScreenBiometricAuthenticationCoordinatorDelegate, SBHomeButtonShowPasscodeRecognizerDelegate, SBHomeButtonSuppressAfterUnlockRecognizerDelegate, SBWallpaperObserver, SBCoverSheetPresentationDelegate, SBUILockStateProvider, SBTapToWakeDelegate, SBSRemoteAlertHandleObserver, SBIdleTimerProviding, SBIdleTimerCoordinating>
 @property  BOOL UIUnlocking
 @property  <SBFLockOutStatusProvider> *lockOutController
 @property  SBFUserAuthenticationController *userAuthController
 @property  SBLiftToWakeManager *liftToWakeManager
 @property  SBTapToWakeController *tapToWakeController
 @property  @? unlockActionBlock
 @property  <SBLockScreenEnvironment> *lockScreenEnvironment
 @property  CSCoverSheetViewController *coverSheetViewController
 @property  <SBNotificationDestination> *notificationDestination
 @property  SBLockScreenOrientationManager *lockScreenOrientationManager
 @property  BOOL isUILocked
 @property  BOOL isWaitingToLockUI
 @property  BOOL shouldHandlePocketStateChanges
 @property  BOOL shouldTapToWake
 @property  BOOL shouldPlayLockSound
 @property  BOOL isLockScreenActive
 @property  BOOL isLockScreenVisible
 @property  BOOL bioAuthenticatedWhileMenuButtonDown
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBLockScreenManager sharedInstance]
  +[SBLockScreenManager _sharedInstanceCreateIfNeeded:]
  +[SBLockScreenManager sharedInstanceIfExists]

  // instance methods
  -[SBLockScreenManager lockScreenViewControllerWillDismiss]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerRequestsDismissal:]
  -[SBLockScreenManager _reallySetUILocked:]
  -[SBLockScreenManager coverSheetViewController:requestsTouchIDDisabled:forReason:]
  -[SBLockScreenManager _setupModeChanged]
  -[SBLockScreenManager _clearAuthenticationLockAssertion]
  -[SBLockScreenManager wallpaperDidChangeForVariant:]
  -[SBLockScreenManager _runUnlockActionBlock:]
  -[SBLockScreenManager startUIUnlockFromSource:withOptions:]
  -[SBLockScreenManager _setUserAuthController:]
  -[SBLockScreenManager averageColorForCurrentWallpaperInScreenRect:]
  -[SBLockScreenManager coverSheetViewController:unlockWithRequest:completion:]
  -[SBLockScreenManager remoteAlertHandleDidActivate:]
  -[SBLockScreenManager init]
  -[SBLockScreenManager removeLockScreenDisableAssertion:]
  -[SBLockScreenManager noteMenuButtonSinglePress]
  -[SBLockScreenManager _setIdleTimerCoordinator:]
  -[SBLockScreenManager _lockScreenDimmed:]
  -[SBLockScreenManager tapToWakeControllerDidRecognizePencilWakeGesture:]
  -[SBLockScreenManager idleTimerProvider:didProposeBehavior:forReason:]
  -[SBLockScreenManager remoteLock:]
  -[SBLockScreenManager lockScreenEnvironment]
  -[SBLockScreenManager lockScreenViewControllerDidPresent]
  -[SBLockScreenManager _canAttemptRealUIUnlockIgnoringBacklightNonsenseWithReason:]
  -[SBLockScreenManager coverSheetViewControllerShouldDismissContextMenu:]
  -[SBLockScreenManager homeButtonShowPasscodeRecognizerDidFailToRecognize:]
  -[SBLockScreenManager hasUIEverBeenLocked]
  -[SBLockScreenManager _canHandleTransitionRequest:]
  -[SBLockScreenManager setUIUnlocking:]
  -[SBLockScreenManager coordinatorRequestedIdleTimerBehavior:]
  -[SBLockScreenManager coverSheetViewController]
  -[SBLockScreenManager .cxx_destruct]
  -[SBLockScreenManager extendedKeybagLockStateChanged:]
  -[SBLockScreenManager _prepareWallpaperForStaticMode]
  -[SBLockScreenManager _noteStartupTransitionWillBegin]
  -[SBLockScreenManager _setMesaCoordinatorDisabled:forReason:]
  -[SBLockScreenManager _finishUIUnlockFromSource:withOptions:]
  -[SBLockScreenManager _setMesaUnlockingDisabled:forReason:]
  -[SBLockScreenManager _postLockCompletedNotification:]
  -[SBLockScreenManager _isPasscodeVisible]
  -[SBLockScreenManager _noteStartupTransitionDidBegin]
  -[SBLockScreenManager lockScreenViewControllerDidDismiss]
  -[SBLockScreenManager updateSpringBoardStatusBarForLockScreenTeardown]
  -[SBLockScreenManager setPasscodeVisible:animated:]
  -[SBLockScreenManager lockScreenViewControllerRequestsUnlock]
  -[SBLockScreenManager succinctDescriptionBuilder]
  -[SBLockScreenManager _liftToWakeManager]
  -[SBLockScreenManager _setMesaAutoUnlockingDisabled:forReason:]
  -[SBLockScreenManager shouldPlayLockSound]
  -[SBLockScreenManager isPasscodeEntryTransientOverlayVisible]
  -[SBLockScreenManager _shouldLockAfterEndingTelephonyCall]
  -[SBLockScreenManager isLockScreenDisabledForAssertion]
  -[SBLockScreenManager _handleAuthenticationFeedback:]
  -[SBLockScreenManager shouldHandlePocketStateChanges]
  -[SBLockScreenManager _authenticationStateChanged:]
  -[SBLockScreenManager exitLostModeIfNecessaryFromRemoteRequest:]
  -[SBLockScreenManager _attemptUnlockWithPasscode:mesa:finishUIUnlock:completion:]
  -[SBLockScreenManager coverSheetViewControllerIrisPlayingDidFinish:]
  -[SBLockScreenManager lockUIFromSource:withOptions:]
  -[SBLockScreenManager activateLostModeForRemoteLock:]
  -[SBLockScreenManager isLockScreenVisible]
  -[SBLockScreenManager unlockActionBlock]
  -[SBLockScreenManager _newLockScreenEnvironment]
  -[SBLockScreenManager loadViewsIfNeeded]
  -[SBLockScreenManager _handleBacklightDidTurnOff:]
  -[SBLockScreenManager _setLiftToWakeManager:]
  -[SBLockScreenManager _setUILocked:]
  -[SBLockScreenManager _setTapToWakeController:]
  -[SBLockScreenManager tapToWakeControllerDidRecognizeWakeGesture:]
  -[SBLockScreenManager _shouldUnlockUIOnKeyDownEvent]
  -[SBLockScreenManager _evaluatePreArmDisabledAssertions]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerRequestsEmergencyCall:]
  -[SBLockScreenManager _activeCallStateChanged]
  -[SBLockScreenManager _setWalletPreArmDisabled:forReason:]
  -[SBLockScreenManager _specifiesTransientPresentationForMode:]
  -[SBLockScreenManager _shouldLockAfterEndingFaceTimeCall]
  -[SBLockScreenManager enableLostModePlugin]
  -[SBLockScreenManager bioAuthenticatedWhileMenuButtonDown]
  -[SBLockScreenManager _setHomeButtonShowPasscodeRecognizer:]
  -[SBLockScreenManager _shouldEmulateInterstitialPresentation]
  -[SBLockScreenManager handleKeyHIDEvent:]
  -[SBLockScreenManager isWaitingToLockUI]
  -[SBLockScreenManager _setHomeButtonSuppressAfterUnlockRecognizer:]
  -[SBLockScreenManager succinctDescription]
  -[SBLockScreenManager setUnlockActionBlock:]
  -[SBLockScreenManager coverSheetPresentationManager:unlockWithRequest:completion:]
  -[SBLockScreenManager lockScreenOrientationManager]
  -[SBLockScreenManager _sendUILockStateChangedNotification]
  -[SBLockScreenManager shouldTapToWake]
  -[SBLockScreenManager _evaluateWallpaperMode]
  -[SBLockScreenManager isLockScreenActive]
  -[SBLockScreenManager newLegibilitySettingsProvider]
  -[SBLockScreenManager _emulateInterstitialPasscodePresentation]
  -[SBLockScreenManager biometricAuthenticationCoordinator:requestsAuthenticationFeedback:]
  -[SBLockScreenManager contrastForCurrentWallpaper]
  -[SBLockScreenManager biometricAuthenticationCoordinator:requestsUnlockWithIntent:]
  -[SBLockScreenManager _tapToWakeController]
  -[SBLockScreenManager addLockScreenDisableAssertion:]
  -[SBLockScreenManager _wakeScreenForTapToWake]
  -[SBLockScreenManager attemptUnlockWithPasscode:]
  -[SBLockScreenManager _lockFeaturesForRemoteLock:]
  -[SBLockScreenManager _lockUI]
  -[SBLockScreenManager _setPasscodeVisible:animated:]
  -[SBLockScreenManager isUIUnlocking]
  -[SBLockScreenManager _unlockWithRequest:cancelPendingRequests:completion:]
  -[SBLockScreenManager _attemptUnlockWithPasscode:mesa:finishUIUnlock:]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewControllerDidDisappear:]
  -[SBLockScreenManager noteMenuButtonDoublePress]
  -[SBLockScreenManager _isUnlockDisabled]
  -[SBLockScreenManager _deviceBlockedChanged:]
  -[SBLockScreenManager passcodeEntryTransientOverlayViewController:authenticatePasscode:]
  -[SBLockScreenManager _disconnectActiveCallIfNeededFromSource:]
  -[SBLockScreenManager handleTransitionRequest:]
  -[SBLockScreenManager isInLostMode]
  -[SBLockScreenManager biometricAuthenticationCoordinator]
  -[SBLockScreenManager _setLockOutController:]
  -[SBLockScreenManager homeButtonSuppressAfterUnlockRecognizerRequestsEndOfSuppression:]
  -[SBLockScreenManager lockUIFromSource:withOptions:completion:]
  -[SBLockScreenManager _lockOutController]
  -[SBLockScreenManager _relockUIForButtonlikeSource:]
  -[SBLockScreenManager coverSheetViewController:setMesaUnlockingDisabled:forReason:]
  -[SBLockScreenManager _createAuthenticationAssertion]
  -[SBLockScreenManager _attemptUnlockWithPasscode:finishUIUnlock:]
  -[SBLockScreenManager _activateLockScreenAnimated:animationProvider:automatically:inScreenOffMode:dismissNotificationCenter:completion:]
  -[SBLockScreenManager attemptUnlockWithPasscode:finishUIUnlock:completion:]
  -[SBLockScreenManager _maybeLaunchSetupForcingCheckIfNotBricked:]
  -[SBLockScreenManager notificationDestination]
  -[SBLockScreenManager _prepareWallpaperForInteractiveMode]
  -[SBLockScreenManager isUILocked]
  -[SBLockScreenManager averageColorForCurrentWallpaper]
  -[SBLockScreenManager lockScreenViewControllerWillPresent]
  -[SBLockScreenManager shouldLockUIAfterEndingCall]
  -[SBLockScreenManager setBiometricAutoUnlockingDisabled:forReason:]
  -[SBLockScreenManager unlockUIFromSource:withOptions:]
  -[SBLockScreenManager _resetOrRestoreStateChanged:]
  -[SBLockScreenManager descriptionWithMultilinePrefix:]
  -[SBLockScreenManager _wakeScreenForMouseButtonDown:]
  -[SBLockScreenManager _shouldBeInSetupMode]
  -[SBLockScreenManager homeButtonShowPasscodeRecognizerRequestsPasscodeUIToBeShown:]
  -[SBLockScreenManager _userAuthController]
  -[SBLockScreenManager attemptUnlockWithMesa]
  -[SBLockScreenManager descriptionBuilderWithMultilinePrefix:]
  -[SBLockScreenManager _shouldDisconnectCallWhenLockingForActiveAudioRoute]
  -[SBLockScreenManager activationChanged:]
  -[SBLockScreenManager unlockWithRequest:completion:]
  -[SBLockScreenManager _handleBacklightLevelWillChange:]
  -[SBLockScreenManager handlesHomeButtonSinglePresses]


SBWindowHideRequest : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  {SBWindowLevelRange_struct=dd} windowLevelRange
 @property  NSString *reason

  // class methods
  +[SBWindowHideRequest hideRequestWithWindowLevelRange:reason:]

  // instance methods
  -[SBWindowHideRequest setReason:]
  -[SBWindowHideRequest .cxx_destruct]
  -[SBWindowHideRequest reason]
  -[SBWindowHideRequest setWindowLevelRange:]
  -[SBWindowHideRequest windowLevelRange]


SBWindowHideState : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL hidden
 @property  double desiredAlpha

  // instance methods
  -[SBWindowHideState setDesiredAlpha:]
  -[SBWindowHideState desiredAlpha]
  -[SBWindowHideState setHidden:]
  -[SBWindowHideState isHidden]


SBWindowHidingManager : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSceneHandleObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBWindowHidingManager sharedInstance]
  +[SBWindowHidingManager start]

  // instance methods
  -[SBWindowHidingManager _takeNoteOfWindow:onScreen:]
  -[SBWindowHidingManager init]
  -[SBWindowHidingManager _captureWindow:]
  -[SBWindowHidingManager _adjustWindowsForActiveHideRange]
  -[SBWindowHidingManager _recomputeHideRangeAndAdjustWindows]
  -[SBWindowHidingManager dumpHidingState]
  -[SBWindowHidingManager .cxx_destruct]
  -[SBWindowHidingManager sceneHandle:didUpdateSettingsWithDiff:previousSettings:]
  -[SBWindowHidingManager _isHidingWindows]
  -[SBWindowHidingManager _releaseWindow:]
  -[SBWindowHidingManager setAlpha:forWindow:]
  -[SBWindowHidingManager startHidingWindowsExclusivelyFromLevel:toLevel:forContext:reason:]
  -[SBWindowHidingManager stopHidingWindowsForContext:]
  -[SBWindowHidingManager dumpKnownWindows]
  -[SBWindowHidingManager _isHidingWindowLevel:]


SBStartupTransitionToSetup : SBBaseStartupTransition
  // instance methods
  -[SBStartupTransitionToSetup performTransitionWithCompletionBlock:]
  -[SBStartupTransitionToSetup .cxx_destruct]
  -[SBStartupTransitionToSetup initWithDestination:context:]
  -[SBStartupTransitionToSetup initWithDestination:context:initialRestartState:]
  -[SBStartupTransitionToSetup _activateSetupWithCompletion:underLock:fromSnapshot:]


SBTransaction : BSTransaction /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI
  // instance methods
  -[SBTransaction init]
  -[SBTransaction queue]


SBDashBoardStatusBarController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CSStatusBarControlling>
 @property  NSNumber *statusBarAlpha
 @property  long long statusBarStyle
 @property  _UILegibilitySettings *statusBarLegibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBDashBoardStatusBarController init]
  -[SBDashBoardStatusBarController statusBarAlpha]
  -[SBDashBoardStatusBarController effectiveStatusBarStyleRequestForAlpha:style:legibilitySettings:]
  -[SBDashBoardStatusBarController destroyFakeStatusBar:]
  -[SBDashBoardStatusBarController dealloc]
  -[SBDashBoardStatusBarController .cxx_destruct]
  -[SBDashBoardStatusBarController createFakeStatusBarWithReason:withFrame:]
  -[SBDashBoardStatusBarController statusBarStyle]
  -[SBDashBoardStatusBarController statusBarLegibilitySettings]
  -[SBDashBoardStatusBarController enableStatusBarItem:requestor:]
  -[SBDashBoardStatusBarController disableStatusBarItem:requestor:]
  -[SBDashBoardStatusBarController setStatusBarAlpha:style:legibilitySettings:]
  -[SBDashBoardStatusBarController updateStatusBarTimeEnabled]
  -[SBDashBoardStatusBarController setStatusBarHidden:forReason:]
  -[SBDashBoardStatusBarController enableStatusBarTime:crossfade:crossfadeDuration:]
  -[SBDashBoardStatusBarController _stateProvider]
  -[SBDashBoardStatusBarController clearStatusBarParameters]


SBRecentAppLayouts : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBApplicationRestrictionObserver>
 @property  <SBRecentAppLayoutsDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBRecentAppLayouts remove:]
  -[SBRecentAppLayouts initWithUserDefaults:persister:iconController:applicationController:placeholderController:sceneManager:]
  -[SBRecentAppLayouts _persistSoon]
  -[SBRecentAppLayouts _changeDescriptionForFilteringAppLayouts:withDisplayItemTest:]
  -[SBRecentAppLayouts removeAppLayouts:]
  -[SBRecentAppLayouts _setRecents:notifyForChangeDescription:]
  -[SBRecentAppLayouts init]
  -[SBRecentAppLayouts _isExistingSceneIdentifierValidForClaimedMultiwindowSupportInDisplayItem:]
  -[SBRecentAppLayouts hide:]
  -[SBRecentAppLayouts recentsForBundleIdentifier:includingHiddenAppLayouts:]
  -[SBRecentAppLayouts _isApplicationSupported:]
  -[SBRecentAppLayouts _isDisplayItemRestrictedOrUnsupported:]
  -[SBRecentAppLayouts _initializeRecents]
  -[SBRecentAppLayouts dealloc]
  -[SBRecentAppLayouts _stashModelToPath:]
  -[SBRecentAppLayouts _installedApplicationsDidChange:]
  -[SBRecentAppLayouts .cxx_destruct]
  -[SBRecentAppLayouts _loadStashedModelAtPath:]
  -[SBRecentAppLayouts _displayItemLayoutRolesFromLegacyPrefsForLoadedDisplayItems:]
  -[SBRecentAppLayouts replaceAppLayout:withAppLayout:]
  -[SBRecentAppLayouts _acquireAllowHiddenAppAssertionForBundleIdentifier:reason:]
  -[SBRecentAppLayouts recentDisplayItemsForBundleIdentifier:includingHiddenAppLayouts:]
  -[SBRecentAppLayouts _addAllAppsToModel]
  -[SBRecentAppLayouts _recentsFromPrefs]
  -[SBRecentAppLayouts _filterRestrictedUnsupportedAndInvalidAppsFromRecents]
  -[SBRecentAppLayouts addToFront:]
  -[SBRecentAppLayouts _persistSynchronously]
  -[SBRecentAppLayouts _validateAndUpdateRecents:]
  -[SBRecentAppLayouts _setUpStashedModelSettingsOutlets]
  -[SBRecentAppLayouts _migrateDisplayItemIfNeeded:]
  -[SBRecentAppLayouts _ppt_currentModel]
  -[SBRecentAppLayouts _ppt_setModel:]
  -[SBRecentAppLayouts _legacyAppLayoutForItem:layoutRole:]
  -[SBRecentAppLayouts _removeAllowHiddenAppAssertionForBundleIdentifier:requestIdentifier:]
  -[SBRecentAppLayouts _changeDescriptionForFilteringRestrictedOrUnsupportedAppsFromAppLayouts:]
  -[SBRecentAppLayouts _recentDisplayItemsFromLegacyPrefs]
  -[SBRecentAppLayouts _addAllowHiddenAppAssertionForBundleIdentifier:requestIdentifier:]
  -[SBRecentAppLayouts _saveRecents]
  -[SBRecentAppLayouts _ignoresAppHiddenForDisplayItem:]
  -[SBRecentAppLayouts _filterRestrictedOrUnsupportedAppsFromRecents]
  -[SBRecentAppLayouts setDelegate:]
  -[SBRecentAppLayouts recentsIncludingHiddenAppLayouts:]
  -[SBRecentAppLayouts _iconVisibilityDidChange:]
  -[SBRecentAppLayouts _changeDescriptionForFilteringRestrictedUnsupportedAndInvalidAppsFromAppLayouts:]
  -[SBRecentAppLayouts _ppt_loadStashedModel]
  -[SBRecentAppLayouts delegate]
  -[SBRecentAppLayouts applicationRestrictionController:didUpdateVisibleTags:hiddenTags:]
  -[SBRecentAppLayouts _legacyAppLayoutsForDisplayItems:layoutRolesMapping:]


SBSwitcherSwipeUpGestureFloatingSwitcherModifier : SBGestureSwitcherModifier
  // instance methods
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier scaleForIndex:]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier frameForIndex:]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier .cxx_destruct]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier contentViewScale]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier handleGestureEvent:]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier initWithGestureID:]
  -[SBSwitcherSwipeUpGestureFloatingSwitcherModifier responseForProposedChildResponse:childModifier:event:]


SBLockedModalAlertItemPresenter : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBAlertItemPresenter, SBLockScreenActionProvider>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBLockedModalAlertItemPresenter lockScreenActionContext]
  -[SBLockedModalAlertItemPresenter presentAlertItem:animated:completion:]
  -[SBLockedModalAlertItemPresenter initWithSharedModalAlertItemPresenter:]
  -[SBLockedModalAlertItemPresenter dismissAlertItem:animated:completion:]
  -[SBLockedModalAlertItemPresenter .cxx_destruct]
  -[SBLockedModalAlertItemPresenter presentsAlertItemsModally]
  -[SBLockedModalAlertItemPresenter canPresentMultipleAlertItemsSimultaneously]


SBCombinationHardwareButtonActions : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
  // instance methods
  -[SBCombinationHardwareButtonActions performTakeScreenshotAction]
  -[SBCombinationHardwareButtonActions performPresentPowerDownTransientOverlayAction]


SBCoverSheetPositionView : SBFTouchPassThroughView /usr/lib/libutil.dylib
 @property  double progress
 @property  UIView *contentView

  // instance methods
  -[SBCoverSheetPositionView _progressForTouchLocation:]
  -[SBCoverSheetPositionView initWithFrame:]
  -[SBCoverSheetPositionView contentView]
  -[SBCoverSheetPositionView .cxx_destruct]
  -[SBCoverSheetPositionView _createContentView]
  -[SBCoverSheetPositionView _transformForLocation:transformMode:]
  -[SBCoverSheetPositionView setFrame:]
  -[SBCoverSheetPositionView positionContentForTouchAtLocation:]
  -[SBCoverSheetPositionView setProgress:]
  -[SBCoverSheetPositionView positionContentForTouchAtLocation:withTransformMode:forPresentationValue:]
  -[SBCoverSheetPositionView progress]
  -[SBCoverSheetPositionView _simulatedTouchLocationForProgress]
  -[SBCoverSheetPositionView _progressFromContenViewFrame:]


SBLockScreenTemperatureWarningViewController : SBLockOverlayViewController
 @property  NSString *slideToUnlockText

  // instance methods
  -[SBLockScreenTemperatureWarningViewController .cxx_destruct]
  -[SBLockScreenTemperatureWarningViewController initWithNibName:bundle:]
  -[SBLockScreenTemperatureWarningViewController loadView]
  -[SBLockScreenTemperatureWarningViewController slideToUnlockText]


SBAppExposeToFullScreenSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBAppExposeToFullScreenSwitcherModifier visibleAppLayouts]
  -[SBAppExposeToFullScreenSwitcherModifier scaleForIndex:]
  -[SBAppExposeToFullScreenSwitcherModifier adjustedAppLayoutsForAppLayouts:]
  -[SBAppExposeToFullScreenSwitcherModifier opacityForIndex:]
  -[SBAppExposeToFullScreenSwitcherModifier liveContentRasterizationAttributesForAppLayout:]
  -[SBAppExposeToFullScreenSwitcherModifier frameForIndex:]
  -[SBAppExposeToFullScreenSwitcherModifier .cxx_destruct]
  -[SBAppExposeToFullScreenSwitcherModifier transitionWillBegin]
  -[SBAppExposeToFullScreenSwitcherModifier transitionDidEnd]
  -[SBAppExposeToFullScreenSwitcherModifier appLayouts]
  -[SBAppExposeToFullScreenSwitcherModifier plusButtonAlpha]
  -[SBAppExposeToFullScreenSwitcherModifier initWithTransitionID:direction:fullScreenAppLayout:floatingAppLayout:bundleIdentifier:appExposeModifier:fullScreenModifier:]
  -[SBAppExposeToFullScreenSwitcherModifier _newAppExposeModifier]
  -[SBAppExposeToFullScreenSwitcherModifier _isEffectivelyFullScreen]
  -[SBAppExposeToFullScreenSwitcherModifier _isIndexActive:]
  -[SBAppExposeToFullScreenSwitcherModifier _performBlockBySimulatingPreTransitionState:]


SBDirectToAirPlayTestRecipe : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBTestRecipe>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBDirectToAirPlayTestRecipe load]

  // instance methods
  -[SBDirectToAirPlayTestRecipe .cxx_destruct]
  -[SBDirectToAirPlayTestRecipe title]
  -[SBDirectToAirPlayTestRecipe handleVolumeIncrease]
  -[SBDirectToAirPlayTestRecipe handleVolumeDecrease]
  -[SBDirectToAirPlayTestRecipe _claimForegroundAppIsPlayingVideo]
  -[SBDirectToAirPlayTestRecipe _clearPlayingApp]
  -[SBDirectToAirPlayTestRecipe _anyForegroundApplication]


SBPPTBlockOperation : SBPPTOperation
 @property  @? timeoutBlock
 @property  unsigned long state
 @property  @? block
 @property  double timeoutInterval

  // class methods
  +[SBPPTBlockOperation keyPathsForValuesAffectingIsExecuting]
  +[SBPPTBlockOperation keyPathsForValuesAffectingIsFinished]
  +[SBPPTBlockOperation operationWithBlock:]

  // instance methods
  -[SBPPTBlockOperation isAsynchronous]
  -[SBPPTBlockOperation init]
  -[SBPPTBlockOperation main]
  -[SBPPTBlockOperation initWithBlock:]
  -[SBPPTBlockOperation timeoutBlock]
  -[SBPPTBlockOperation setState:]
  -[SBPPTBlockOperation .cxx_destruct]
  -[SBPPTBlockOperation block]
  -[SBPPTBlockOperation isExecuting]
  -[SBPPTBlockOperation isFinished]
  -[SBPPTBlockOperation cancel]
  -[SBPPTBlockOperation setTimeoutInterval:]
  -[SBPPTBlockOperation timeoutInterval]
  -[SBPPTBlockOperation finish]
  -[SBPPTBlockOperation state]
  -[SBPPTBlockOperation start]
  -[SBPPTBlockOperation cancelAndFailTestWithReason:]
  -[SBPPTBlockOperation setTimeoutBlock:]


SBBiometricsService : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBSystemServiceServerBiometricsDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBBiometricsService sharedInstance]

  // instance methods
  -[SBBiometricsService init]
  -[SBBiometricsService .cxx_destruct]
  -[SBBiometricsService systemServiceServer:client:fetchUnlockCredentialSet:]


SBHomeScreenOverlayViewController : UIViewController /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard <WGWidgetGroupViewControllerDelegate, SBHWidgetSheetViewControllerPresenter, SBHOccludable>
 @property  MTMaterialView *backgroundView
 @property  SBHRootFolderVisualConfiguration *rootFolderVisualConfiguration
 @property  NSLayoutConstraint *contentLeadingConstraint
 @property  NSLayoutConstraint *contentWidthConstraint
 @property  SBTitledHomeScreenButton *doneButton
 @property  SBTitledHomeScreenButton *widgetButton
 @property  BOOL showsDoneButton
 @property  BOOL showsAddWidgetButton
 @property  SBFTodayGestureSettings *gestureSettings
 @property  UIViewFloatAnimatableProperty *overlayPresentationFloatAnimatableProperty
 @property  <SBHomeScreenOverlayViewControllerDelegate> *delegate
 @property  double presentationProgress
 @property  double layerPresentationProgress
 @property  BOOL fromLeading
 @property  double contentWidth
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} contentRect
 @property  BOOL shouldUseReducedMotionAnimation
 @property  BOOL headerVisible
 @property  SBHRootSidebarController *contentViewController
 @property  UIViewController<SBHOccludable> *leftSidebarViewController
 @property  UIViewController<SBHOccludable> *rightSidebarViewController
 @property  BOOL suppressesExtraEditingButtons
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  double titledButtonsAlpha
 @property  BOOL occluded

  // instance methods
  -[SBHomeScreenOverlayViewController setTitledButtonsAlpha:]
  -[SBHomeScreenOverlayViewController viewDidLoad]
  -[SBHomeScreenOverlayViewController isHeaderVisible]
  -[SBHomeScreenOverlayViewController setDoneButton:]
  -[SBHomeScreenOverlayViewController doneButton]
  -[SBHomeScreenOverlayViewController backgroundView]
  -[SBHomeScreenOverlayViewController widgetGroupViewController:sizeForInterfaceOrientation:]
  -[SBHomeScreenOverlayViewController setShowsAddWidgetButton:animated:]
  -[SBHomeScreenOverlayViewController viewDidMoveToWindow:shouldAppearOrDisappear:]
  -[SBHomeScreenOverlayViewController setWidgetButton:]
  -[SBHomeScreenOverlayViewController rootFolderVisualConfiguration]
  -[SBHomeScreenOverlayViewController .cxx_destruct]
  -[SBHomeScreenOverlayViewController widgetButtonTriggered:]
  -[SBHomeScreenOverlayViewController widgetButton]
  -[SBHomeScreenOverlayViewController showsAddWidgetButton]
  -[SBHomeScreenOverlayViewController presentationProgress]
  -[SBHomeScreenOverlayViewController contentWidthConstraint]
  -[SBHomeScreenOverlayViewController setContentWidthConstraint:]
  -[SBHomeScreenOverlayViewController bs_beginAppearanceTransition:animated:]
  -[SBHomeScreenOverlayViewController bs_endAppearanceTransition:]
  -[SBHomeScreenOverlayViewController showsDoneButton]
  -[SBHomeScreenOverlayViewController setShowsDoneButton:animated:]
  -[SBHomeScreenOverlayViewController bs_endAppearanceTransition]
  -[SBHomeScreenOverlayViewController titledButtonsAlpha]
  -[SBHomeScreenOverlayViewController setShowsDoneButton:]
  -[SBHomeScreenOverlayViewController initWithNibName:bundle:]
  -[SBHomeScreenOverlayViewController viewDidAppear:]
  -[SBHomeScreenOverlayViewController doneButtonTriggered:]
  -[SBHomeScreenOverlayViewController presenterType]
  -[SBHomeScreenOverlayViewController setSuppressesEditingStateForListView:]
  -[SBHomeScreenOverlayViewController viewWillAppear:]
  -[SBHomeScreenOverlayViewController updateExtraButtonVisibilityAnimated:]
  -[SBHomeScreenOverlayViewController _canShowWhileLocked]
  -[SBHomeScreenOverlayViewController contentWidth]
  -[SBHomeScreenOverlayViewController setDelegate:]
  -[SBHomeScreenOverlayViewController viewWillTransitionToSize:withTransitionCoordinator:]
  -[SBHomeScreenOverlayViewController makeTitledButtonOfClass:]
  -[SBHomeScreenOverlayViewController viewDidDisappear:]
  -[SBHomeScreenOverlayViewController newHomeScreenButtonBackgroundView]
  -[SBHomeScreenOverlayViewController setSuppressesExtraEditingButtons:]
  -[SBHomeScreenOverlayViewController suppressesExtraEditingButtons]
  -[SBHomeScreenOverlayViewController viewWillDisappear:]
  -[SBHomeScreenOverlayViewController setContentLeadingConstraint:]
  -[SBHomeScreenOverlayViewController contentLeadingConstraint]
  -[SBHomeScreenOverlayViewController delegate]
  -[SBHomeScreenOverlayViewController contentViewController]
  -[SBHomeScreenOverlayViewController contentRect]
  -[SBHomeScreenOverlayViewController setShowsAddWidgetButton:]
  -[SBHomeScreenOverlayViewController setOccluded:]
  -[SBHomeScreenOverlayViewController isOccluded]
  -[SBHomeScreenOverlayViewController setPresentationProgress:interactive:animated:completionHandler:]
  -[SBHomeScreenOverlayViewController setShouldUseReducedMotionAnimation:]
  -[SBHomeScreenOverlayViewController _suggestedTodayViewSizeForBounds:]
  -[SBHomeScreenOverlayViewController setLeftSidebarViewController:]
  -[SBHomeScreenOverlayViewController setRightSidebarViewController:]
  -[SBHomeScreenOverlayViewController layerPresentationProgress]
  -[SBHomeScreenOverlayViewController animatePresentationProgress:withGestureLiftOffVelocity:completionHandler:]
  -[SBHomeScreenOverlayViewController leftSidebarViewController]
  -[SBHomeScreenOverlayViewController rightSidebarViewController]
  -[SBHomeScreenOverlayViewController isFromLeading]
  -[SBHomeScreenOverlayViewController shouldUseReducedMotionAnimation]
  -[SBHomeScreenOverlayViewController setFromLeading:]
  -[SBHomeScreenOverlayViewController setPresentationProgress:]
  -[SBHomeScreenOverlayViewController contentWidthWithContainerWidth:]
  -[SBHomeScreenOverlayViewController _updateConstraintsForPresentationProgress:]
  -[SBHomeScreenOverlayViewController _configureMatchMoveAnimationForBackgroundView:withSourceView:]
  -[SBHomeScreenOverlayViewController setPresentationProgress:withAnimationUpdateMode:overrideAnimationSettings:completionHandler:]
  -[SBHomeScreenOverlayViewController _updateLayoutForEditButtons]
  -[SBHomeScreenOverlayViewController _button:appearAnimated:]
  -[SBHomeScreenOverlayViewController _button:disappearAnimated:completion:]
  -[SBHomeScreenOverlayViewController gestureSettings]
  -[SBHomeScreenOverlayViewController setGestureSettings:]
  -[SBHomeScreenOverlayViewController overlayPresentationFloatAnimatableProperty]
  -[SBHomeScreenOverlayViewController setOverlayPresentationFloatAnimatableProperty:]


SBBiometricAuthenticationPolicy : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBUIBiometricAuthenticationPolicy>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBBiometricAuthenticationPolicy .cxx_destruct]
  -[SBBiometricAuthenticationPolicy shouldRelockAfterBioUnlock]
  -[SBBiometricAuthenticationPolicy initWithLockOutProvider:]


SBApplicationPlaceholder : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <FBSApplicationPlaceholderObserver, SBDownloadingIconDataSource, BSInvalidatable>
 @property  FBSApplicationPlaceholder *placeholderProxy
 @property  <SBApplicationPlaceholderDelegate> *delegate
 @property  BOOL appClip
 @property  Class iconClass
 @property  BOOL prioritizable
 @property  BOOL pausable
 @property  BOOL cancelable
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *applicationBundleID
 @property  NSString *applicationDisplayName
 @property  BOOL active
 @property  BOOL waiting
 @property  BOOL paused
 @property  BOOL failed
 @property  BOOL installing
 @property  BOOL downloading
 @property  BOOL cloudDemoted
 @property  NSString *uniqueIdentifier
 @property  NSString *configurationStorageIdentifier

  // class methods
  +[SBApplicationPlaceholder backgroundQueue]

  // instance methods
  -[SBApplicationPlaceholder isPausable]
  -[SBApplicationPlaceholder installType]
  -[SBApplicationPlaceholder isCancelable]
  -[SBApplicationPlaceholder iconClass]
  -[SBApplicationPlaceholder iconCompleteUninstall:]
  -[SBApplicationPlaceholder isAppClip]
  -[SBApplicationPlaceholder iconCanTightenLabel:]
  -[SBApplicationPlaceholder isPrioritizable]
  -[SBApplicationPlaceholder priorityForIcon:]
  -[SBApplicationPlaceholder icon:launchFromLocation:context:]
  -[SBApplicationPlaceholder pause]
  -[SBApplicationPlaceholder icon:imageWithInfo:]
  -[SBApplicationPlaceholder icon:displayNameForLocation:]
  -[SBApplicationPlaceholder isFailed]
  -[SBApplicationPlaceholder resume]
  -[SBApplicationPlaceholder dealloc]
  -[SBApplicationPlaceholder progressStateForIcon:]
  -[SBApplicationPlaceholder progressPercentForIcon:]
  -[SBApplicationPlaceholder isProgressPausedForIcon:]
  -[SBApplicationPlaceholder iconCanTruncateLabel:]
  -[SBApplicationPlaceholder .cxx_destruct]
  -[SBApplicationPlaceholder accessoryTypeForIcon:]
  -[SBApplicationPlaceholder prioritize]
  -[SBApplicationPlaceholder uniqueIdentifier]
  -[SBApplicationPlaceholder applicationDisplayName]
  -[SBApplicationPlaceholder isActive]
  -[SBApplicationPlaceholder cancel]
  -[SBApplicationPlaceholder labelAccessoryTypeForIcon:]
  -[SBApplicationPlaceholder iconSupportsUninstall:]
  -[SBApplicationPlaceholder isPaused]
  -[SBApplicationPlaceholder formattedAccessoryStringForIcon:]
  -[SBApplicationPlaceholder isInstalling]
  -[SBApplicationPlaceholder isEqual:]
  -[SBApplicationPlaceholder isDownloading]
  -[SBApplicationPlaceholder setDelegate:]
  -[SBApplicationPlaceholder badgeNumberOrStringForIcon:]
  -[SBApplicationPlaceholder isCloudDemoted]
  -[SBApplicationPlaceholder invalidate]
  -[SBApplicationPlaceholder placeholderProgressDidUpdate:]
  -[SBApplicationPlaceholder placeholderDidChangeSignificantly:]
  -[SBApplicationPlaceholder isDone]
  -[SBApplicationPlaceholder applicationBundleID]
  -[SBApplicationPlaceholder delegate]
  -[SBApplicationPlaceholder isWaiting]
  -[SBApplicationPlaceholder _progressChanged]
  -[SBApplicationPlaceholder _shouldDisplayAppName]
  -[SBApplicationPlaceholder placeholderProxy]
  -[SBApplicationPlaceholder _reloadThumbnailImage]
  -[SBApplicationPlaceholder _iconImageKeyForBundleID:info:]
  -[SBApplicationPlaceholder _generateIconImageWithInfo:]
  -[SBApplicationPlaceholder _generatePendingIconFormats]
  -[SBApplicationPlaceholder _shouldDisplayAppNameAtIconLocation:]
  -[SBApplicationPlaceholder _getOrGenerateIconImageWithInfo:]
  -[SBApplicationPlaceholder initWithPlaceholderProxy:]
  -[SBApplicationPlaceholder isStoreDownload]


SBForcePressToHomeSwitcherModifier : SBTransitionSwitcherModifier
  // instance methods
  -[SBForcePressToHomeSwitcherModifier homeScreenBackdropBlurType]
  -[SBForcePressToHomeSwitcherModifier visibleAppLayouts]
  -[SBForcePressToHomeSwitcherModifier isSwitcherWindowUserInteractionEnabled]
  -[SBForcePressToHomeSwitcherModifier scaleForIndex:]
  -[SBForcePressToHomeSwitcherModifier isHomeScreenContentRequired]
  -[SBForcePressToHomeSwitcherModifier isSwitcherWindowVisible]
  -[SBForcePressToHomeSwitcherModifier wallpaperStyle]
  -[SBForcePressToHomeSwitcherModifier cardCornerRadiiForIndex:]
  -[SBForcePressToHomeSwitcherModifier opacityForIndex:]
  -[SBForcePressToHomeSwitcherModifier appLayoutsToCacheSnapshots]
  -[SBForcePressToHomeSwitcherModifier isWallpaperRequiredForSwitcher]
  -[SBForcePressToHomeSwitcherModifier isContentStatusBarVisibleForIndex:]
  -[SBForcePressToHomeSwitcherModifier .cxx_destruct]
  -[SBForcePressToHomeSwitcherModifier _switcherCardScale]
  -[SBForcePressToHomeSwitcherModifier isContainerStatusBarVisible]
  -[SBForcePressToHomeSwitcherModifier initWithTransitionID:selectedAppLayout:effectiveStartingEnvironmentMode:initialPanThreshold:multitaskingModifier:]


SBDataRecoveryController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  BOOL dataRecoveryRequired

  // instance methods
  -[SBDataRecoveryController init]
  -[SBDataRecoveryController .cxx_destruct]
  -[SBDataRecoveryController dataRecoveryRequired]
  -[SBDataRecoveryController performDataRecovery]
  -[SBDataRecoveryController initWithMobileKeyBag:]


SBApplicationPlaceholderController : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <SBLeafIconObserver, SBApplicationPlaceholderLifecycleObserver, SBApplicationPlaceholderDelegate>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBApplicationPlaceholderController sharedInstance]

  // instance methods
  -[SBApplicationPlaceholderController isUsingNetwork]
  -[SBApplicationPlaceholderController init]
  -[SBApplicationPlaceholderController hasDownloadedStoreApplication]
  -[SBApplicationPlaceholderController placeholderForDisplayID:]
  -[SBApplicationPlaceholderController iconAccessoriesDidUpdate:]
  -[SBApplicationPlaceholderController applicationPlaceholdersInstalled:]
  -[SBApplicationPlaceholderController applicationPlaceholdersAdded:]
  -[SBApplicationPlaceholderController dealloc]
  -[SBApplicationPlaceholderController .cxx_destruct]
  -[SBApplicationPlaceholderController _addPlaceholders:]
  -[SBApplicationPlaceholderController _finishPlaceholder:]
  -[SBApplicationPlaceholderController applicationPlaceholdersCancelled:]
  -[SBApplicationPlaceholderController _processPendingProxies]
  -[SBApplicationPlaceholderController placeholderShouldAllowPausing:]
  -[SBApplicationPlaceholderController applicationPlaceholdersNetworkUsageChanged:]
  -[SBApplicationPlaceholderController _postPlaceholdersDidChangeForAdded:modified:removed:]
  -[SBApplicationPlaceholderController _removePlaceholders:forInstall:]
  -[SBApplicationPlaceholderController placeholdersByDisplayID]
  -[SBApplicationPlaceholderController placeholderWantsUninstall:]


SBDelayedPressInfo : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long type
 @property  long long phase
 @property  double timestamp

  // instance methods
  -[SBDelayedPressInfo setPhase:]
  -[SBDelayedPressInfo phase]
  -[SBDelayedPressInfo setType:]
  -[SBDelayedPressInfo timestamp]
  -[SBDelayedPressInfo setTimestamp:]
  -[SBDelayedPressInfo type]


SBPressGestureStateInfo : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 @property  long long state
 @property  BOOL isCoalescing
 @property  double expirationTime
 @property  long long stateUponExpiration

  // instance methods
  -[SBPressGestureStateInfo setStateUponExpiration:]
  -[SBPressGestureStateInfo init]
  -[SBPressGestureStateInfo setState:]
  -[SBPressGestureStateInfo stateUponExpiration]
  -[SBPressGestureStateInfo expirationTime]
  -[SBPressGestureStateInfo state]
  -[SBPressGestureStateInfo setIsCoalescing:]
  -[SBPressGestureStateInfo isCoalescing]
  -[SBPressGestureStateInfo setExpirationTime:]


SBPressGestureRecognizer : UIGestureRecognizer /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard
 @property  NSArray *pressTypesWithPrecedence

  // instance methods
  -[SBPressGestureRecognizer pressesBegan:withEvent:]
  -[SBPressGestureRecognizer setAllowedPressTypes:]
  -[SBPressGestureRecognizer _resetState]
  -[SBPressGestureRecognizer _isGestureFailedOrCancelled]
  -[SBPressGestureRecognizer _startDispatchingDelayedPresses]
  -[SBPressGestureRecognizer _resetPublishedPressInfo]
  -[SBPressGestureRecognizer pressesChanged:withEvent:]
  -[SBPressGestureRecognizer latestPressPhase]
  -[SBPressGestureRecognizer pressesCancelled:withEvent:]
  -[SBPressGestureRecognizer pressesEnded:withEvent:]
  -[SBPressGestureRecognizer waitForPreemptionTimeInterval]
  -[SBPressGestureRecognizer _reallyStartDispatchingDelayedPresses]
  -[SBPressGestureRecognizer .cxx_destruct]
  -[SBPressGestureRecognizer _processDelayablePresses:]
  -[SBPressGestureRecognizer name]
  -[SBPressGestureRecognizer _waitGestureStateExpirationWithFireInterval:timerExpiredActionBlock:]
  -[SBPressGestureRecognizer latestPressType]
  -[SBPressGestureRecognizer pressTypesWithPrecedence]
  -[SBPressGestureRecognizer _isDispatchingDelayedPresses]
  -[SBPressGestureRecognizer _updatePublicPressInfo:]
  -[SBPressGestureRecognizer setPressTypesWithPrecedence:]
  -[SBPressGestureRecognizer gestureStateInfoForUnbalancedPressBeganCount:previousCount:]
  -[SBPressGestureRecognizer _gestureStateInfoForPressInfo:]
  -[SBPressGestureRecognizer _processPrecedencePresses:]
  -[SBPressGestureRecognizer setWaitForPreemptionTimeInterval:]
  -[SBPressGestureRecognizer reset]
  -[SBPressGestureRecognizer _delayedPressesCount]
  -[SBPressGestureRecognizer initWithTarget:action:]
  -[SBPressGestureRecognizer _addDelayedPress:]
  -[SBPressGestureRecognizer _updateUnbalancedPressBeganTypesWithCurrentPressType:andPhase:result:]
  -[SBPressGestureRecognizer _stopWaitingGestureStateExpiration]
  -[SBPressGestureRecognizer _allowedPressTypes]
  -[SBPressGestureRecognizer _processPresses:]
  -[SBPressGestureRecognizer _shouldStopDispatching]
  -[SBPressGestureRecognizer requiredPressTypesCount]
  -[SBPressGestureRecognizer latestPressTimestamp]
  -[SBPressGestureRecognizer _applyGestureStateInfo:]
  -[SBPressGestureRecognizer _didGestureBegin]
  -[SBPressGestureRecognizer _resetDelayedPresses]
  -[SBPressGestureRecognizer _cancelGesture]


SBHideAppIconAlertItem : SBAlertItem /usr/lib/libicucore.A.dylib
 @property  SBIcon *icon
 @property  NSString *iconLocation

  // instance methods
  -[SBHideAppIconAlertItem forcesModalAlertAppearance]
  -[SBHideAppIconAlertItem dismissOnLock]
  -[SBHideAppIconAlertItem .cxx_destruct]
  -[SBHideAppIconAlertItem icon]
  -[SBHideAppIconAlertItem iconLocation]
  -[SBHideAppIconAlertItem shouldShowInLockScreen]
  -[SBHideAppIconAlertItem configure:requirePasscodeForActions:]
  -[SBHideAppIconAlertItem didActivate]
  -[SBHideAppIconAlertItem initWithIcon:location:]


SBPPTRunner : NSObject /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation <CCUIPPTHostDelegate, NCNotificationViewControllerObserving>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBPPTRunner sharedInstance]

  // instance methods
  -[SBPPTRunner assistantWillAppear:]
  -[SBPPTRunner assistantDidAppear:]
  -[SBPPTRunner longLookDidPresentForNotificationViewController:]
  -[SBPPTRunner longLookWillDismissForNotificationViewController:]
  -[SBPPTRunner longLookDidDismissForNotificationViewController:]
  -[SBPPTRunner longLookWillPresentForNotificationViewController:]
  -[SBPPTRunner prepareForControlCenterPPTHostState:completionHandler:]
  -[SBPPTRunner runTestWithName:options:]
  -[SBPPTRunner _runFloatingDockBringupTestWithOptions:]
  -[SBPPTRunner _runFloatingDockDismissTestWithOptions:]
  -[SBPPTRunner _runNotificationShortToLongLookTransitionTestWithOptions:]
  -[SBPPTRunner _runNotificationReParkLongLookTransitionTestWithOptions:]
  -[SBPPTRunner _runNotificationClearLongLookTransitionTestWithOptions:]
  -[SBPPTRunner _runNotificationBannerTransitionTestWithOptions:]
  -[SBPPTRunner _runSiriTestWithName:options:]
  -[SBPPTRunner _operationToPresentCoverSheetForTestWithName:]
  -[SBPPTRunner _operationToDismissCoverSheetForTestWithName:]
  -[SBPPTRunner _setCoverSheetPresentationManagerTransitionCallbacksForTestName:operation:]
  -[SBPPTRunner _runCoverSheetPresentTestWithOptions:]
  -[SBPPTRunner _runCoverSheetDismissTestWithOptions:]
  -[SBPPTRunner _runCoverSheetPresentOverSafariTestWithOptions:]
  -[SBPPTRunner _runCoverSheetDismissToSafariTestWithOptions:]


SBIcon(SBApplicationIcon)
	// instance methods
	-[SBIcon(SBApplicationIcon) application]
	-[SBIcon(SBApplicationIcon) isBookmarkIcon]
	-[SBIcon(SBApplicationIcon) iTunesCategoriesOrderedByRelevancy]
	-[SBIcon(SBApplicationIcon) isApplicationIcon]

FBSApplicationDataStore(SceneStorage)
	// instance methods
	-[FBSApplicationDataStore(SceneStorage) sceneStoreForIdentifier:creatingIfNecessary:]
	-[FBSApplicationDataStore(SceneStorage) removeSceneStoreForIdentifier:]
	-[FBSApplicationDataStore(SceneStorage) _cachedSceneDataStores]
	-[FBSApplicationDataStore(SceneStorage) _fetchPersistedSceneDataStores]
	-[FBSApplicationDataStore(SceneStorage) _createSceneStoreWithIdentifier:data:]
	-[FBSApplicationDataStore(SceneStorage) _modifyPersistentSceneData:identifier:data:]
	-[FBSApplicationDataStore(SceneStorage) _setCachedSceneDataStores:]
	-[FBSApplicationDataStore(SceneStorage) _removeAllPersistentSceneData]
	-[FBSApplicationDataStore(SceneStorage) removeAllSceneDataStores]
	-[FBSApplicationDataStore(SceneStorage) enumerateSceneStoresUsingBlock:]

(SBSceneLayoutStatusBarAssertionProvidingAdditions)
	// instance methods
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToSBApplicationSceneStatusBarDescriberProviding]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToSBApplicationSceneStatusBarDescribing]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToMedusaDecoratedDeviceApplicationSceneViewControlling]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToMainDisplaySceneLayoutElementViewControlling]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToSceneLayoutMedusaStatusBarAssertionProviding]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) SB_conformsToSceneLayoutStatusBarAssertionProviding]
	-[(SBSceneLayoutStatusBarAssertionProvidingAdditions) sb_historianDescription]

NSMutableArray(SpringBoard)
	// instance methods
	-[NSMutableArray(SpringBoard) _sb_peek]
	-[NSMutableArray(SpringBoard) _sb_safeAddObject:]
	-[NSMutableArray(SpringBoard) _sb_enqueue:]
	-[NSMutableArray(SpringBoard) _sb_dequeue]

UITextField(SpringBoardUserNotification)
	// instance methods
	-[UITextField(SpringBoardUserNotification) sb_setMaxInputLength:]
	-[UITextField(SpringBoardUserNotification) sb_maxInputLength]

UIImage(_SBUserNotificationAlert)
	// instance methods
	-[UIImage(_SBUserNotificationAlert) pixelSize]
	-[UIImage(_SBUserNotificationAlert) isAnimated]
	-[UIImage(_SBUserNotificationAlert) sbs_hasAlpha]
	-[UIImage(_SBUserNotificationAlert) _sbSetAssociatedAssetManager:]
	-[UIImage(_SBUserNotificationAlert) _thumbnailFitToSize:]
	-[UIImage(_SBUserNotificationAlert) _newThumbnailWithJPEG:forMaxPixelDimension:]
	-[UIImage(_SBUserNotificationAlert) _newSource]
	-[UIImage(_SBUserNotificationAlert) _newThumbnailWithImageSource:forMaxPixelDimension:]
	-[UIImage(_SBUserNotificationAlert) sbg_thumbnailFitToSize:]
	-[UIImage(_SBUserNotificationAlert) sbg_squareImage]

NSUbiquitousKeyValueStore(SBKnownKeyFiltering)
	// class methods
	+[NSUbiquitousKeyValueStore(SBKnownKeyFiltering) load]

	// instance methods
	-[NSUbiquitousKeyValueStore(SBKnownKeyFiltering) sb_setObject:forKey:]

FBSExtensionInfo(SpringBoard)
	// instance methods
	-[FBSExtensionInfo(SpringBoard) sb_type]

DNDEventBehaviorResolutionService(SpringBoard)
	// instance methods
	-[DNDEventBehaviorResolutionService(SpringBoard) sb_shouldSuppressNotificationRequest:]
	-[DNDEventBehaviorResolutionService(SpringBoard) sb_checkSuppressionForNotificationRequest:andPerformBlockOnMainThread:]

FBSDisplayIdentity(SpringBoard)
	// instance methods
	-[FBSDisplayIdentity(SpringBoard) currentConfiguration]
	-[FBSDisplayIdentity(SpringBoard) UIScreen]

UIView(SBClassicLayout)
	// class methods
	+[UIView(SBClassicLayout) sb_firstDescendantOfViews:passingTest:]

	// instance methods
	-[UIView(SBClassicLayout) setAnchorPoint:]
	-[UIView(SBClassicLayout) anchorPoint]
	-[UIView(SBClassicLayout) sbClassicLayout_applyTransformsForClassicPresentationInReferenceSpaceForInterfaceOrientation:]
	-[UIView(SBClassicLayout) _sbClassicLayout_applyTransformsForClassicPresentationInReferenceSpace:forInterfaceOrientation:withInheritedScaleFromContainer:applyInheritedScaleToTranslationAndCorners:]
	-[UIView(SBClassicLayout) sbClassicLayout_applyTransformsForClassicPresentationInLayoutSpaceForInterfaceOrientation:withInheritedScaleFromContainer:applyInheritedScaleToTranslationAndCorners:]
	-[UIView(SBClassicLayout) sb_firstDescendantPassingTest:]
	-[UIView(SBClassicLayout) sb_firstDescendantOfClass:]
	-[UIView(SBClassicLayout) sb_firstDescendantOfClassNamed:]
	-[UIView(SBClassicLayout) sb_snapshotImage]
	-[UIView(SBClassicLayout) sb_removeAnimationsIncludingSubviews:predicate:]
	-[UIView(SBClassicLayout) sb_generateSnapshotContentsSynchronously]
	-[UIView(SBClassicLayout) _printLayer:level:]
	-[UIView(SBClassicLayout) sb_hasActiveKeyboardOnScreen]
	-[UIView(SBClassicLayout) sb_printLayerHierarchy]
	-[UIView(SBClassicLayout) sb_removeAllSubviews]
	-[UIView(SBClassicLayout) sb_removeAnimationsForKeys:update:]
	-[UIView(SBClassicLayout) _generateSnapshotOnQueue:completionHandler:]
	-[UIView(SBClassicLayout) sb_generateSnapshotContentsAsynchronouslyOnQueue:completionHandler:]

NCNotificationRequest(AlertSuppression)
	// class methods
	+[NCNotificationRequest(AlertSuppression) notificationRequestWithCardItem:]
	+[NCNotificationRequest(AlertSuppression) notificationRequestForLockScreenWithAlertItem:]
	+[NCNotificationRequest(AlertSuppression) notificationRequestForCarPlayWithAlertItem:]
	+[NCNotificationRequest(AlertSuppression) _notificationRequestForDestinations:withAlertItem:identifier:]
	+[NCNotificationRequest(AlertSuppression) _notificationOptionsForAlertController:item:]
	+[NCNotificationRequest(AlertSuppression) _soundTypeForSBSoundType:]
	+[NCNotificationRequest(AlertSuppression) _notificationSoundFromSound:]

	// instance methods
	-[NCNotificationRequest(AlertSuppression) sb_shouldSuppressAlert]

UIViewController(UIViewController_SpringBoard)
	// class methods
	+[UIViewController(UIViewController_SpringBoard) sb_firstDescendantOfViewControllers:passingTest:]

	// instance methods
	-[UIViewController(UIViewController_SpringBoard) sb_firstDescendantPassingTest:]
	-[UIViewController(UIViewController_SpringBoard) sb_firstDescendantOfClass:]
	-[UIViewController(UIViewController_SpringBoard) sb_beginAppearanceTransitionIfNecessary:animated:]
	-[UIViewController(UIViewController_SpringBoard) sb_endAppearanceTransitionIfNecessary]
	-[UIViewController(UIViewController_SpringBoard) sb_firstDescendantOfClassNamed:]
	-[UIViewController(UIViewController_SpringBoard) sb_childOrPresentedViewControllerStatusBarSettings]

UIColor(SBWallpaper)
	// class methods
	+[UIColor(SBWallpaper) sb_colorWithRGBHexString:]

	// instance methods
	-[UIColor(SBWallpaper) sb_RGBHexString]

SBSceneHandle(SceneViewControlling)
	// instance methods
	-[SBSceneHandle(SceneViewControlling) newSceneViewController]
	-[SBSceneHandle(SceneViewControlling) isDeviceApplicationSceneHandle]
	-[SBSceneHandle(SceneViewControlling) newScenePlaceholderContentContextWithActivationSettings:]
	-[SBSceneHandle(SceneViewControlling) isEffectivelyForeground]
	-[SBSceneHandle(SceneViewControlling) newSceneViewWithReferenceSize:orientation:hostRequester:]

UIActivityContinuationAction(AppSuggestion)
	// instance methods
	-[UIActivityContinuationAction(AppSuggestion) initWithIdentifier:activityTypeIdentifier:appSuggestion:]

ATXHomeScreenStackConfig(SBAdditions)
	// instance methods
	-[ATXHomeScreenStackConfig(SBAdditions) sb_isAppPredictionStack]

_UIHyperInteractor(SBAdditions)
	// instance methods
	-[_UIHyperInteractor(SBAdditions) sbpip_isRubberBanding]
	-[_UIHyperInteractor(SBAdditions) sbpip_setInteractive:]
	-[_UIHyperInteractor(SBAdditions) sbpip_isInteractive]

XBApplicationSnapshotManifest(Capture)
	// instance methods
	-[XBApplicationSnapshotManifest(Capture) createSnapshotForSceneSnapshot:withName:]

SBIconModelMemoryStore(SBIconModelITunesRepresentation)
	// instance methods
	-[SBIconModelMemoryStore(SBIconModelITunesRepresentation) initWithITunesRepresentation:]

NCNotificationAction(Wallet)
	// class methods
	+[NCNotificationAction(Wallet) revealWalletPassNotificationActionForCardItem:]
	+[NCNotificationAction(Wallet) defaultNotificationActionForSBAlertItem:]
	+[NCNotificationAction(Wallet) dismissNotificationActionForSBAlertItem:]

BSTransaction(SBUIAnimationControllerAdditions)
	// instance methods
	-[BSTransaction(SBUIAnimationControllerAdditions) coordinatingAnimationControllers]

FBSSceneTransitionContext(SBLocalTransientSettings)
	// instance methods
	-[FBSSceneTransitionContext(SBLocalTransientSettings) watchdogScaleFactor]
	-[FBSSceneTransitionContext(SBLocalTransientSettings) setWatchdogScaleFactor:]

UIApplication(SBUIApplicationAdditions)
	// instance methods
	-[UIApplication(SBUIApplicationAdditions) sb_performBlockAfterCATransactionSynchronizedCommit:]

NCNotificationViewController(SBPPTRunnerAdditions)
	// instance methods
	-[NCNotificationViewController(SBPPTRunnerAdditions) setPPTLongLookWillPresentBlock:]
	-[NCNotificationViewController(SBPPTRunnerAdditions) _recapDismissLongLookViaDismissButton]
	-[NCNotificationViewController(SBPPTRunnerAdditions) setPPTLongLookDidPresentBlock:]
	-[NCNotificationViewController(SBPPTRunnerAdditions) setPPTLongLookDidDismissBlock:]
	-[NCNotificationViewController(SBPPTRunnerAdditions) _recapSwipePresentLongLook]
	-[NCNotificationViewController(SBPPTRunnerAdditions) _recapDismissLongLookViaTapOutside]
	-[NCNotificationViewController(SBPPTRunnerAdditions) _recapDismissLongLookViaPullDown]
	-[NCNotificationViewController(SBPPTRunnerAdditions) pptLongLookWillPresentBlock]
	-[NCNotificationViewController(SBPPTRunnerAdditions) pptLongLookDidPresentBlock]
	-[NCNotificationViewController(SBPPTRunnerAdditions) pptLongLookWillDismissBlock]
	-[NCNotificationViewController(SBPPTRunnerAdditions) setPPTLongLookWillDismissBlock:]
	-[NCNotificationViewController(SBPPTRunnerAdditions) pptLongLookDidDismissBlock]
	-[NCNotificationViewController(SBPPTRunnerAdditions) _dismissControlOfPresentedLongLook]

UILabel(SpringBoard)
	// instance methods
	-[UILabel(SpringBoard) sb_yPositionForLabelWithContainerBounds:lineHeight:baselineOffset:font:]
	-[UILabel(SpringBoard) sb_yPositionForLabelWithContainerBounds:baselineOffset:font:]
	-[UILabel(SpringBoard) sb_yPositionForLayoutAfterLabel:baselineOffset:]
	-[UILabel(SpringBoard) stringMetricsForFirstLineWidth:]
	-[UILabel(SpringBoard) drawWithMetrics:inContext:]

SBSLockScreenContentAction(SupportedInterfaceOrientations)
	// instance methods
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) applicationSceneEntity]
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) supportedInterfaceOrientations]
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) specifiesSupportedInterfaceOrientations]
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) isInProcessAction]
	-[SBSLockScreenContentAction(SupportedInterfaceOrientations) setApplicationSceneEntity:]

BSDescriptionBuilder(SBIdleTimerDescriptor)
	// instance methods
	-[BSDescriptionBuilder(SBIdleTimerDescriptor) sbidletimerdescriptor_appendTimeInterval:withName:]

BluetoothDevice(SpringBoardExtensions)
	// instance methods
	-[BluetoothDevice(SpringBoardExtensions) sb_siriBluetoothDeviceSource]
	-[BluetoothDevice(SpringBoardExtensions) sb_setSiriBluetoothDeviceSource:]

SBHFloatingDockStyleConfiguration(SBAppAdditions)
	// class methods
	+[SBHFloatingDockStyleConfiguration(SBAppAdditions) configurationWithEnvironmentMode:]

FBProcess(SBHelpers)
	// instance methods
	-[FBProcess(SBHelpers) sb_bundleIdentifierWithFallback]
	-[FBProcess(SBHelpers) sb_isProbablyUIApplication]

FBExtensionProcess(SBHelpers)
	// instance methods
	-[FBExtensionProcess(SBHelpers) sb_bundleIdentifierWithFallback]

UISDeviceContext(SpringBoard)
	// class methods
	+[UISDeviceContext(SpringBoard) sb_defaultContext]

UISDisplayContext(SpringBoard)
	// class methods
	+[UISDisplayContext(SpringBoard) sb_defaultContext]

UISApplicationInitializationContext(SpringBoard)
	// class methods
	+[UISApplicationInitializationContext(SpringBoard) sb_defaultContext]

BCBatteryDeviceController(SpringBoard)
	// instance methods
	-[BCBatteryDeviceController(SpringBoard) sb_deviceInternalBattery]

CMPocketStateManager(SpringBoard)
	// class methods
	+[CMPocketStateManager(SpringBoard) _sb_isScreenObscuredInPocketState:]

SBHLibraryMutableCategoryMap(ProactiveSourceAdditions)
	// instance methods
	-[SBHLibraryMutableCategoryMap(ProactiveSourceAdditions) sb_removeCategoryWithIdentifier:]
	-[SBHLibraryMutableCategoryMap(ProactiveSourceAdditions) sb_hasAppsPopulatedForCategoriesOtherThanProactive]
	-[SBHLibraryMutableCategoryMap(ProactiveSourceAdditions) sb_stripCategoriesThatArentFromProactive]
	-[SBHLibraryMutableCategoryMap(ProactiveSourceAdditions) sb_stripCategoriesWhichAreFromProactive]

UIStatusBar_Base(Snapshots)
	// instance methods
	-[UIStatusBar_Base(Snapshots) sb_setOverrideBreadcrumbTitle:secondaryTitle:]
	-[UIStatusBar_Base(Snapshots) sb_setEnabledStatusBarPartIdentifiersForStatusBarParts:]
	-[UIStatusBar_Base(Snapshots) sb_setSnapshotOverridesWithTimeEnabled:overriddenDate:]
	-[UIStatusBar_Base(Snapshots) sb_getLocalDataOverrides:]
	-[UIStatusBar_Base(Snapshots) sb_setLocalDataOverrides:]

UIStatusBar_Modern(StatusBarOverrides)
	// instance methods
	-[UIStatusBar_Modern(StatusBarOverrides) sb_setOverrideBreadcrumbTitle:secondaryTitle:]

UIWindow(SelfHosting)
	// instance methods
	-[UIWindow(SelfHosting) sb_updateInterfaceOrientationFromActiveInterfaceOrientation]
	-[UIWindow(SelfHosting) sb_hostWrapperForUseInOrientation:hostRequester:]
	-[UIWindow(SelfHosting) sb_hostWrapperForUseInWindow:hostRequester:]
	-[UIWindow(SelfHosting) sb_updateInterfaceOrientationFromActiveInterfaceOrientation:]

UISApplicationSupportDisplayEdgeInfo(SpringBoard)
	// class methods
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_thisDeviceDisplayEdgeInfo]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_displayEdgeInfoForApplication:]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_insetForHomeAffordanceApplicationDisplayEdgeInfo]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_floatingApplicationDisplayEdgeInfo]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_legacy_homeButtonDeviceDisplayEdgeInfo]
	+[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_legacy_roundCornerPadDisplayEdgeInfo]

	// instance methods
	-[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_displayEdgeInfoWithSafeAreaInsetsForStatusBarHeight:]
	-[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_applyDisplayEdgeInfoToSceneSettings:]
	-[UISApplicationSupportDisplayEdgeInfo(SpringBoard) sb_orientedEdgeInsetsForInterfaceOrientation:traitCollection:]

UIGestureRecognizer(UIGestureRecognizer_SpringBoard)
	// instance methods
	-[UIGestureRecognizer(UIGestureRecognizer_SpringBoard) sb_stringForState]
	-[UIGestureRecognizer(UIGestureRecognizer_SpringBoard) sb_briefDescription]

BCBatteryDevice(SpringBoard)
	// instance methods
	-[BCBatteryDevice(SpringBoard) sb_supportsDetailedBatteryMetrics]

CSCoverSheetViewController(SpringBoardGlue)
	// instance methods
	-[CSCoverSheetViewController(SpringBoardGlue) conformsToSBCoverSheetSlidingViewControllerContentViewController]

SBSRemoteAlertDefinition(SBAdditions)
	// class methods
	+[SBSRemoteAlertDefinition(SBAdditions) definitionWithServiceName:legacyAlertOptions:]

FBDisplayManager(SpringBoard)
	// class methods
	+[FBDisplayManager(SpringBoard) sb_secureMainConfiguration]
	+[FBDisplayManager(SpringBoard) sb_secureMainIdentity]

UIScreen(SBSnapshotExtensions)
	// instance methods
	-[UIScreen(SBSnapshotExtensions) sb_snapshotViewImmediatelyFramedForPortrait]

(SBFloatingDockSuggestions)
	// instance methods
	-[(SBFloatingDockSuggestions) sb_indexOfFloatingDockSuggestionDisplayItem:]
	-[(SBFloatingDockSuggestions) sb_containsFloatingDockSuggestionDisplayItem:]

SBFFluidBehaviorSettings(SBHistorianDescription)
	// instance methods
	-[SBFFluidBehaviorSettings(SBHistorianDescription) sb_historianDescription]

SBFMappedImageCache(SBMappedImageCacheAdditions)
	// class methods
	+[SBFMappedImageCache(SBMappedImageCacheAdditions) sessionCache]

FBSSceneSettings(SBApplicationSceneHandle)
	// instance methods
	-[FBSSceneSettings(SBApplicationSceneHandle) sb_isEligbleForDeviceOrientationUpdates]

UIApplicationSceneSettings(SBApplicationSceneHandle)
	// instance methods
	-[UIApplicationSceneSettings(SBApplicationSceneHandle) sb_isEligbleForDeviceOrientationUpdates]

UIMutableApplicationSceneSettings(SBApplicationSceneHandle)
	// instance methods
	-[UIMutableApplicationSceneSettings(SBApplicationSceneHandle) sb_isEligbleForDeviceOrientationUpdates]

FBSSceneClientSettings(SBApplicationSceneHandle)
	// instance methods
	-[FBSSceneClientSettings(SBApplicationSceneHandle) sb_effectiveInterfaceOrientation]

UIApplicationSceneClientSettings(SBApplicationSceneHandle)
	// instance methods
	-[UIApplicationSceneClientSettings(SBApplicationSceneHandle) sb_effectiveInterfaceOrientation]

UIMutableApplicationSceneClientSettings(SBApplicationSceneHandle)
	// instance methods
	-[UIMutableApplicationSceneClientSettings(SBApplicationSceneHandle) sb_effectiveInterfaceOrientation]

01 00 8900 /System/Library/Frameworks/Accounts.framework/Accounts: ACAccountStore 
01 00 1140 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriUserNotificationRequest 
01 00 1140 /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices: AFSiriUserNotificationRequestCapabilityManager 
01 00 a600 /System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation: AITransactionLog 
01 00 2d00 /System/Library/PrivateFrameworks/AppPredictionUIWidget.framework/AppPredictionUIWidget: APUIAppPredictionViewController 
01 00 2d00 /System/Library/PrivateFrameworks/AppPredictionUIWidget.framework/AppPredictionUIWidget: APUISuggestionsWidgetViewController 
01 00 3900 /System/Library/PrivateFrameworks/AppStoreDaemon.framework/AppStoreDaemon: ASDRepairOptions 
01 00 3900 /System/Library/PrivateFrameworks/AppStoreDaemon.framework/AppStoreDaemon: ASDRepairService 
01 00 0200 /System/Library/PrivateFrameworks/AirTraffic.framework/AirTraffic: ATConnection 
01 00 3f00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXAppDirectoryClient 
01 00 3f00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXDefaultHomeScreenItemManager 
01 00 3f00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXHomeScreenPage 
01 00 3f00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXHomeScreenStackConfig 
01 00 3f00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXHomeScreenSuggestionClient 
01 00 3f00 /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient: ATXHomeScreenWidgetIdentifiable 
01 00 8640 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAudioPlayer 
01 00 8640 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVExternalPlaybackMonitor 
01 00 8640 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVOutputContext 
01 00 8640 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVRoutingSessionManager 
01 00 9f00 /System/Library/PrivateFrameworks/Celestial.framework/Celestial: AVSystemController 
01 00 5200 /System/Library/PrivateFrameworks/AttentionAwareness.framework/AttentionAwareness: AWAttentionAwarenessClient 
01 00 5200 /System/Library/PrivateFrameworks/AttentionAwareness.framework/AttentionAwareness: AWAttentionAwarenessConfiguration 
01 00 5200 /System/Library/PrivateFrameworks/AttentionAwareness.framework/AttentionAwareness: AWAttentionLostEvent 
01 00 5700 /System/Library/PrivateFrameworks/WirelessDiagnostics.framework/WirelessDiagnostics: AWDServerConnection 
01 00 c400 /usr/lib/libAWDSupportFramework.dylib: AWDSpringBoardAppBrightness 
01 00 c400 /usr/lib/libAWDSupportFramework.dylib: AWDSpringBoardBiometricUnlock 
01 00 c400 /usr/lib/libAWDSupportFramework.dylib: AWDSpringBoardClawGesture 
01 00 c400 /usr/lib/libAWDSupportFramework.dylib: AWDSpringBoardPressSequence 
01 00 c400 /usr/lib/libAWDSupportFramework.dylib: AWDTuple 
01 00 aa00 /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard: BBBulletinRequest 
01 00 aa00 /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard: BBObserver 
01 00 7a00 /System/Library/PrivateFrameworks/BatteryCenter.framework/BatteryCenter: BCBatteryDevice 
01 00 7a00 /System/Library/PrivateFrameworks/BatteryCenter.framework/BatteryCenter: BCBatteryDeviceController 
01 00 2500 /System/Library/PrivateFrameworks/BatteryCenterUI.framework/BatteryCenterUI: BCUIBatteryAvocadoViewController 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSApplicationStateMonitor 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSButtonHapticsController 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSButtonHapticsDefinition 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSDisplayProgressIndicatorProperties 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSDisplayRenderOverlay 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSDisplayRenderOverlayDescriptor 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSEventFocusDeferralProperties 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSEventFocusManager 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDeferringEnvironment 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDeferringToken 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDeliveryManager 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDescriptor 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDiscreteDispatchingRule 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDispatchingTarget 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventDisplay 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventKeyboardDescriptor 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHIDEventSenderDescriptor 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSHitTestRegion 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSInsecureDrawingAction 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSMousePointerService 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSMutableHIDEventDeferringPredicate 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSMutableHIDEventDeferringTarget 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSMutableHIDEventDiscreteDispatchingPredicate 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSProcessAssertion 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSRestartAction 
01 00 6e00 /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices: BKSTouchDeliveryObservationService 
01 00 3000 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerController 
01 00 3000 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerHostMonitorListener 
01 00 3000 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerSource 
01 00 3000 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerSourceLayoutDescription 
01 00 3000 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNBannerSourceListener 
01 00 3000 /System/Library/PrivateFrameworks/BannerKit.framework/BannerKit: BNContentViewController 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAbstractDefaultDomain 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAction 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSActionResponse 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAnimationSettings 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAtomicSignal 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSAuditToken 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSBlockSentinel 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSBlockTransaction 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSCFBundle 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSCompoundAssertion 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSCopyingCacheSet 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSCornerRadiusConfiguration 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDateFormatterCache 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDateTimeCache 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDescriptionBuilder 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDescriptionStream 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSDispatchQueueAttributes 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSEqualsBuilder 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSEventQueue 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSEventQueueEvent 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSEventQueueLock 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSHashBuilder 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSMachPortSendRight 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSMonotonicReferenceTime 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSMutableIntegerMap 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSMutableSettings 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPathProviderFactory 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPersistentTimer 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPlatform 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPluginManager 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPortDeathSentinel 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSPowerMonitor 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSProcessHandle 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSServiceConnection 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSServiceConnectionListener 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSServiceQuality 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSSettings 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSSimpleAssertion 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSSpringAnimationSettings 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSTimer 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSTransaction 
01 00 7500 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIAnimationFactory 
01 00 7500 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUICAPackageView 
01 00 7500 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIEmojiLabelView 
01 00 7500 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIFontProvider 
01 00 7500 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIScrollView 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: BSWatchdog 
01 00 0700 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothDevice 
01 00 0700 /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager: BluetoothManager 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAAnimation 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABackdropLayer 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAContext 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplay 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayModeCriteria 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayProperties 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADistanceFieldLayer 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAFilter 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAKeyframeAnimation 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMatchMoveAnimation 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMediaTimingFunction 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAPortalLayer 
01 00 7800 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CARAutomaticDNDStatus 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAReplicatorLayer 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAShapeLayer 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CASpringAnimation 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 a200 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransition 
01 00 5f00 /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness: CBAdaptationClient 
01 00 5f00 /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness: CBBlueLightClient 
01 00 5f00 /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness: CBClient 
01 00 4d00 /System/Library/PrivateFrameworks/ControlCenterServices.framework/ControlCenterServices: CCSModulePresentationOptions 
01 00 4d00 /System/Library/PrivateFrameworks/ControlCenterServices.framework/ControlCenterServices: CCSRemoteServiceProvider 
01 00 6300 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUICAPackageDescription 
01 00 6300 /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit: CCUIContinuousSliderView 
01 00 6200 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUIControlCenterDefaults 
01 00 6200 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUIModularControlCenterOverlayViewController 
01 00 6200 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUIModuleAlertViewController 
01 00 6200 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUISensorActivityData 
01 00 6200 /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI: CCUIStatusBarStyleSnapshot 
01 00 2e00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSApplicationProcessStateChangeConsumer 
01 00 2e00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSConfiguredWidgetContainerConsumer 
01 00 2e00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSConfiguredWidgetContainerDescriptor 
01 00 2e00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSConfiguredWidgetDescriptor 
01 00 2e00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSTimelineController 
01 00 2e00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSToolSupportService 
01 00 2e00 /System/Library/PrivateFrameworks/ChronoServices.framework/ChronoServices: CHSWidget 
01 00 bf00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMDeviceOrientationManager 
01 00 bf00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMGestureManager 
01 00 bf00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMPocketStateManager 
01 00 bf00 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMWakeGestureManager 
01 00 7000 /System/Library/Frameworks/Contacts.framework/Contacts: CNContact 
01 00 7000 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactFormatter 
01 00 7000 /System/Library/Frameworks/Contacts.framework/Contacts: CNContactStore 
01 00 7200 /System/Library/Frameworks/ContactsUI.framework/ContactsUI: CNMonogrammer 
01 00 2000 /System/Library/PrivateFrameworks/CPMS.framework/CPMS: CPMSAgent 
01 00 2000 /System/Library/PrivateFrameworks/CPMS.framework/CPMS: CPMSStateReader 
01 00 2f00 /System/Library/PrivateFrameworks/ClipUIServices.framework/ClipUIServices: CPSClipOverlayViewController 
01 00 7800 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CRCarPlayAppDeclaration 
01 00 7800 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CRCarPlayAppPolicyEvaluator 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSAction 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSAppearance 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSBatteryChargingView 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSBehavior 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSComponent 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSContentCutoutBoundsCalculator 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSCoverSheetViewBase 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSCoverSheetViewController 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSCoverSheetViewControllerBase 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSEvent 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSHomeAffordanceView 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSLockScreenDomain 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSMainPageContentViewController 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSModalView 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSPageControl 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSPageViewController 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSPoseidonViewController 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSPreciseDateProvider 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSQuickActionsViewController 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSRegion 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSSimpleLockScreenActionProvider 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSTodayPageViewController 
01 00 4000 /System/Library/PrivateFrameworks/CoverSheet.framework/CoverSheet: CSVibrancyUtility 
01 00 9900 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CTTelephonyNetworkInfo 
01 00 9900 /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony: CoreTelephonyClient 
01 00 ac00 /System/Library/PrivateFrameworks/DataAccessExpress.framework/DataAccessExpress: DADConnection 
01 00 3c00 /System/Library/PrivateFrameworks/EmbeddedDataReset.framework/EmbeddedDataReset: DDRResetOptions 
01 00 3c00 /System/Library/PrivateFrameworks/EmbeddedDataReset.framework/EmbeddedDataReset: DDRResetRequest 
01 00 3c00 /System/Library/PrivateFrameworks/EmbeddedDataReset.framework/EmbeddedDataReset: DDRResetService 
01 00 3400 /System/Library/PrivateFrameworks/DeviceManagement.framework/DeviceManagement: DMFCommunicationPolicyMonitor 
01 00 4600 /System/Library/PrivateFrameworks/DoNotDisturbKit.framework/DoNotDisturbKit: DNDAWDMetricsService 
01 00 4500 /System/Library/PrivateFrameworks/DoNotDisturb.framework/DoNotDisturb: DNDEventBehaviorResolutionService 
01 00 4500 /System/Library/PrivateFrameworks/DoNotDisturb.framework/DoNotDisturb: DNDMutableClientEventDetails 
01 00 4600 /System/Library/PrivateFrameworks/DoNotDisturbKit.framework/DoNotDisturbKit: DNDNotificationsService 
01 00 4500 /System/Library/PrivateFrameworks/DoNotDisturb.framework/DoNotDisturb: DNDStateService 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBApplicationProcess 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBApplicationProcessLaunchTransaction 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBApplicationProcessWatchdogPolicy 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBApplicationUpdateScenesTransaction 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBDisplayLayoutElement 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBDisplayLayoutTransition 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBDisplayManager 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBExtensionProcess 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBLocalSynchronousSceneClientProvider 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBMainDisplayLayoutPublisher 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBMutableProcessExecutionContext 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBProcess 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBProcessManager 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationDataStore 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationInfo 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationLibrary 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationLibraryConfiguration 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationPlaceholder 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSApplicationUninstallOptions 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSCAContextSceneLayer 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayConfiguration 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayIdentity 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayLayoutMonitor 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayLayoutMonitorConfiguration 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayLayoutPublisher 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSDisplayLayoutPublisherConfiguration 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSExtensionInfo 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSMutableDisplayConfigurationRequest 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSMutableSceneDefinition 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSMutableSceneParameters 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSMutableSceneSettings 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSOpenApplicationService 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSProcessResourceProvision 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSProcessWatchdogPolicy 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneClientIdentity 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneClientSettings 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneClientSettingsDiffInspector 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneIdentity 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSettings 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSnapshotContext 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSnapshotRequest 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSnapshotRequestAction 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneSpecification 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSceneTransitionContext 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSerialQueue 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSServiceFacility 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSSystemService 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSXPCMessage 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSceneManager 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSceneSnapshotAction 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSceneSnapshotContext 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBServiceClientAuthenticator 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSynchronizedTransactionGroup 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSystemService 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBSystemShell 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBUpdateSceneTransaction 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBWorkspaceEvent 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBWorkspaceEventQueue 
01 00 8200 /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard: FBWorkspaceEventQueueLock 
01 00 8100 /System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice: FMDFMIPManager 
01 00 be00 /System/Library/PrivateFrameworks/FTClientServices.framework/FTClientServices: FTCServiceAvailabilityCenter 
01 00 8700 /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices: GEOCountryConfiguration 
01 00 2700 /System/Library/Frameworks/Intents.framework/Intents: INIntent 
01 00 4800 /System/Library/Frameworks/IOSurface.framework/IOSurface: IOSurface 
01 00 3a00 /System/Library/PrivateFrameworks/IconServices.framework/IconServices: ISIcon 
01 00 3a00 /System/Library/PrivateFrameworks/IconServices.framework/IconServices: ISImage 
01 00 3a00 /System/Library/PrivateFrameworks/IconServices.framework/IconServices: ISImageDescriptor 
01 00 3100 /System/Library/PrivateFrameworks/IdleTimerHosting.framework/IdleTimerHosting: ITAttentionAwareIdleTimer 
01 00 3100 /System/Library/PrivateFrameworks/IdleTimerHosting.framework/IdleTimerHosting: ITIdleTimeout 
01 00 3100 /System/Library/PrivateFrameworks/IdleTimerHosting.framework/IdleTimerHosting: ITIdleTimerDescriptor 
01 00 4400 /System/Library/PrivateFrameworks/IdleTimerServices.framework/IdleTimerServices: ITIdleTimerState 
01 00 4400 /System/Library/PrivateFrameworks/IdleTimerServices.framework/IdleTimerServices: ITIdleTimerStateService 
01 00 7e00 /System/Library/PrivateFrameworks/IntlPreferences.framework/IntlPreferences: IntlUtility 
01 00 5f00 /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness: KeyboardBrightnessClient 
01 00 4f00 /System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication: LAContext 
01 00 a500 /System/Library/PrivateFrameworks/LoginKit.framework/LoginKit: LKLogoutSupport 
01 00 a500 /System/Library/PrivateFrameworks/LoginKit.framework/LoginKit: LKStartupSupport 
01 00 ae00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSAppLink 
01 00 ae00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 ae00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationRecord 
01 00 ae00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 ae00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSDocumentProxy 
01 00 ae00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSPlugInKitProxy 
01 00 a400 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 ab00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPAVRoutingController 
01 00 ab00 /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer: MPMediaControlsStatusBarStyleOverridesCoordinator 
01 00 1f00 /System/Library/PrivateFrameworks/MobileStoreDemoKit.framework/MobileStoreDemoKit: MSDKManagedDevice 
01 00 9000 /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer: MTAlarm 
01 00 9000 /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer: MTAlarmManager 
01 00 5300 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTLumaDodgePillSettings 
01 00 5300 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTLumaDodgePillView 
01 00 5300 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTMaterialShadowView 
01 00 5300 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTMaterialView 
01 00 5300 /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit: MTVisualStylingProvider 
01 00 3200 /System/Library/PrivateFrameworks/MediaControls.framework/MediaControls: MediaControlsVolumeController 
01 00 3200 /System/Library/PrivateFrameworks/MediaControls.framework/MediaControls: MediaControlsVolumeSliderView 
01 00 6a00 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCBulletinNotificationSource 
01 00 6a00 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCCarPlayBannerPresentableViewController 
01 00 6a00 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCCarPlayBannerSource 
01 00 6700 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationAction 
01 00 6700 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationContent 
01 00 6700 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationOptions 
01 00 6700 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationRequest 
01 00 6700 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCMutableNotificationSound 
01 00 6700 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCNotificationAction 
01 00 6a00 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationBannerAuthority 
01 00 6700 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCNotificationDispatcher 
01 00 6a00 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationManagementLongLookContentProvider 
01 00 6a00 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationManagementViewPresenter 
01 00 6a00 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationPresentableViewController 
01 00 6700 /System/Library/PrivateFrameworks/UserNotificationsKit.framework/UserNotificationsKit: NCNotificationRequest 
01 00 6a00 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationRequestHiddenPreviewContentProvider 
01 00 6a00 /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit: NCNotificationViewController 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDateComponents 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSDistributedNotificationCenter 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtension 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSExtensionItem 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileHandle 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexPath 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSItemProvider 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSJSONSerialization 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSLayoutConstraint 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMachPort 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: NSMutableParagraphStyle 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 c100 /usr/lib/libobjc.A.dylib: NSObject 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerArray 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSPointerFunctions 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSRecursiveLock 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSScanner 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLComponents 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLQueryItem 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSUbiquitousKeyValueStore 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSUserActivity 
01 00 c200 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 9700 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCListener 
01 00 5c00 /System/Library/Frameworks/Network.framework/Network: NWSystemPathMonitor 
01 00 3b00 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 3b00 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBDataReader 
01 00 3b00 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBDataWriter 
01 00 b100 /System/Library/PrivateFrameworks/PersistentConnection.framework/PersistentConnection: PCPersistentInterfaceManager 
01 00 b100 /System/Library/PrivateFrameworks/PersistentConnection.framework/PersistentConnection: PCPersistentTimer 
01 00 5500 /System/Library/PrivateFrameworks/ProactiveEventTracker.framework/ProactiveEventTracker: PETDistributionEventTracker 
01 00 5500 /System/Library/PrivateFrameworks/ProactiveEventTracker.framework/ProactiveEventTracker: PETEventProperty 
01 00 5500 /System/Library/PrivateFrameworks/ProactiveEventTracker.framework/ProactiveEventTracker: PETGoalConversionEventTracker 
01 00 5500 /System/Library/PrivateFrameworks/ProactiveEventTracker.framework/ProactiveEventTracker: PETScalarEventTracker 
01 00 7900 /System/Library/PrivateFrameworks/Pegasus.framework/Pegasus: PGPictureInPictureController 
01 00 7900 /System/Library/PrivateFrameworks/Pegasus.framework/Pegasus: PGPictureInPictureViewController 
01 00 6600 /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore: PKPassLibrary 
01 00 6500 /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI: PKPassSnapshotter 
01 00 4700 /System/Library/PrivateFrameworks/PlatterKit.framework/PlatterKit: PLPlatterView 
01 00 b000 /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary: PLiPhotoMigrationSupport 
01 00 2400 /System/Library/PrivateFrameworks/PointerUIServices.framework/PointerUIServices: PSPointerClientController 
01 00 9b00 /System/Library/PrivateFrameworks/Preferences.framework/Preferences: PSSpecifier 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTButtonRow 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTChoiceRow 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDefaults 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDomain 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDoubleTestRecipe 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDrillDownRow 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTEditFloatRow 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTModule 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTRestoreDefaultSettingsRowAction 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSSliderRow 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSettings 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSingleTestRecipe 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSliderRow 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSwitchRow 
01 00 8d40 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTToggleTestRecipe 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSAssertion 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSCPUAccessGrant 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSDurationAttribute 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSGPUAccessGrant 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSJetsamPriorityGrant 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSPreventIdleSleepGrant 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessHandle 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessIdentity 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessMonitor 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessPredicate 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSProcessStateDescriptor 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSResistTerminationGrant 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSRunningReasonAttribute 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSTarget 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSTerminateContext 
01 00 4200 /System/Library/PrivateFrameworks/RunningBoardServices.framework/RunningBoardServices: RBSTerminateRequest 
01 00 4300 /System/Library/PrivateFrameworks/RemoteStateDumpKit.framework/RemoteStateDumpKit: RSPeerToPeerServerController 
01 00 4300 /System/Library/PrivateFrameworks/RemoteStateDumpKit.framework/RemoteStateDumpKit: RSStateInfo 
01 00 9e00 /System/Library/PrivateFrameworks/AppSupport.framework/AppSupport: RadiosPreferences 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SASPresentationConnectionListener 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SASSignalConnectionListener 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBAbstractDefaults 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBAlertControllerVisualStyle 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBAlertItem 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBC2GroupCompletion 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBCenterIconZoomAnimator 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBCrossfadeIconZoomAnimator 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBCrossfadeView 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBDockIconListView 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBDownloadingIcon 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAnalyticsBackend 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAnalyticsClient 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAnimationSettings 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAuthenticationAssertionManager 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFAuthenticationRequest 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFBackdropLegibilitySettingsProvider 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFBuildVersion 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFCARenderer 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFCredentialSet 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFDashBoardViewMetrics 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFDateTimeController 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFDeviceLockOutController 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFFluidBehaviorSettings 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFGradient 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFHomeGrabberDomain 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFIrisWallpaperView 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLegibilityDomain 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLockScreenDateSubtitleView 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLockScreenDateView 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLockScreenMetrics 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFLockScreenWakeAnimator 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFMappedImageCache 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFMobileKeyBag 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFMouseButtonDownGestureRecognizer 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFMutableLockScreenActionContext 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFOverridableDateProvider 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFSpringLoadedInteractionBehavior 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFSpringLoadedInteractionEffect 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFStatusBarLegibilityView 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTapToWakeGestureRecognizer 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTapticEngine 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTodayGestureDomain 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTouchPassThroughView 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTouchPassThroughViewController 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFTouchPassThroughWindow 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFUserAuthenticationController 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFUserAuthenticationModelEducationalMode 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFUserAuthenticationResponder 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFView 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWakeAnimationDomain 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperCache 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperConfiguration 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperConfigurationManager 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperDomain 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperOptions 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperParallaxSettings 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWallpaperView 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWebClipUtilities 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBFWindow 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFloatingDockIconListView 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFloatingDockViewController 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderBackgroundView 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderController 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderControllerAnimationContext 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderIcon 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderIconZoomAnimator 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBFolderTitleTextField 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHAppPredictionsElement 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHAvocadoFileWidgetExtensionProvider 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHBatteriesElement 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHClockApplicationIconImageView 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHCustomIconElement 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHDateHeaderViewController 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHDefaultIconListLayoutProvider 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHEditingDoneButton 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHEditingWidgetButton 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHFeatherBlurView 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHFilesElement 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHFloatingDockStyleConfiguration 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHHomeScreenDomain 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconApplicationShortcutListComposer 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconImageCache 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconManager 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconModel 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconStateArchiver 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconStateBuilder 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHIconViewContextMenuStateController 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryAdditionalItemsIndicatorIcon 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryCategoryIconViewController 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryCategoryIdentifier 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryCategoryMapProvider 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryMutableCategoryMap 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryPodFadeAnimator 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryPodIconZoomAnimator 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHLibraryViewController 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHMappedIconListLayoutProvider 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHRootFolderVisualConfiguration 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHRootSidebarController 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHShortcutsFolderElement 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHShortcutsSingleElement 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHSidebarVisualConfiguration 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHSidebarWidgetBootstrappingAdvisor 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHSiriSuggestionsElement 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHSpecialAvocadoDescriptor 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHWidget 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBHomeScreenIconTransitionAnimator 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIcon 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconBadgeView 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconFadeAnimator 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconImageView 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconListModel 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconListView 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconModelMemoryStore 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconModelPropertyListFileStore 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBIconView 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBIdleTimerRequestConfiguration 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBLeafIcon 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBLegacyServices 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBLocalDefaults 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBLockScreenDefaults 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBLockScreenLegibilitySettings 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBLockScreenPluginAppearanceContext 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBLockScreenPluginContext 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBMutableLockScreenPluginPresentation 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBOrientationTransformWrapperView 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBReusableViewMap 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBReversibleLayerPropertyAnimator 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBRootFolderController 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBRootFolderControllerConfiguration 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBRootFolderView 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSAccessibilityWindowHostingSpecification 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSAppDragLocalContext 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationShortcutContactIcon 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationShortcutCustomImageIcon 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationShortcutItem 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationShortcutServiceFetchResult 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationUserQuitMonitorSessionSpecification 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSDisplayLayoutElement 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSExternalDisplayLayoutElement 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSHomeScreenServiceSpecification 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSInCallPresentationConfiguration 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSInCallPresentationRequest 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSInCallPresentationServiceInterfaceSpecification 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSLockScreenContentAction 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSLockScreenRemoteContentAssertion 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSLockScreenServiceSpecification 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSMutableUserNotificationButtonDefinition 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSMutableUserNotificationTextFieldDefinition 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRelaunchAction 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertActivationContext 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertConfigurationContext 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertDefinition 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertHandle 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertHandleContext 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteAlertHandleServiceSpecification 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSRemoteContentDefinition 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSStatusBarStyleOverridesAssertion 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSStatusBarTapContextImpl 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSSwitcherDemoCommandsSessionSpecification 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIHandleDeviceLockSceneAction 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIHardwareButtonEventSceneAction 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallDestroySceneAction 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallRequestPresentationModeAction 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallSceneClientSettings 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallSceneClientSettingsDiffInspector 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUIInCallSceneSpecification 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUILoginUISceneClientSettings 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUILoginUISceneClientSettingsDiffInspector 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBSUILoginUISceneSpecification 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSWebClipServiceSessionSpecification 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSWidgetMetricsServiceInterfaceSpecification 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBSceneHandle 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBSceneHandleBlockObserver 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBSceneView 
01 00 a700 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBScreenTimeTrackingController 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBSearchBackdropView 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUIBackgroundView 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIBiometricResource 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUICallToActionLabel 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUIChevronView 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUICoronaAnimationController 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIEmergencyCallHostViewController 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUILegibilityLabel 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUILegibilityView 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUILockOverlayView 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUILockScreenDisableAssertion 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIPasscodeBiometricResource 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIPasscodeLockViewFactory 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIPowerDownView 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIProudLockIconView 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUIRemoteAlertButtonAction 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUISearchUtilities 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUISizeObservingView 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUISound 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: SBUISpotlightBarNavigationController 
01 00 a800 /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI: SBUIViewFloatSpringProperty 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBViewControllerTransitionContext 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBWakeLogger 
01 00 8a00 /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation: SBWallpaperDefaults 
01 00 4100 /System/Library/PrivateFrameworks/SpringBoardHome.framework/SpringBoardHome: SBWidgetIcon 
01 00 5b00 /System/Library/Frameworks/StoreKit.framework/StoreKit: SKStoreProductActivityViewController 
01 00 1a00 /System/Library/PrivateFrameworks/StudyLog.framework/StudyLog: SLGActivatableLogger 
01 00 1a00 /System/Library/PrivateFrameworks/StudyLog.framework/StudyLog: SLGLog 
01 00 1a00 /System/Library/PrivateFrameworks/StudyLog.framework/StudyLog: SLGNotificationActivatedLogger 
01 00 5100 /System/Library/PrivateFrameworks/SOS.framework/SOS: SOSManager 
01 00 5100 /System/Library/PrivateFrameworks/SOS.framework/SOS: SOSUtilities 
01 00 7700 /System/Library/PrivateFrameworks/SpotlightUI.framework/SpotlightUI: SPUIAppService 
01 00 7700 /System/Library/PrivateFrameworks/SpotlightUI.framework/SpotlightUI: SPUIDefaults 
01 00 7700 /System/Library/PrivateFrameworks/SpotlightUI.framework/SpotlightUI: SPUIRemoteSearchViewController 
01 00 7700 /System/Library/PrivateFrameworks/SpotlightUI.framework/SpotlightUI: SPUISearchBarController 
01 00 5600 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSChromePlaceholderViewController 
01 00 0e00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSDownloadManager 
01 00 5600 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSFlashView 
01 00 5600 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSScreenCapturer 
01 00 5600 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSScreenCapturerPresentationOptions 
01 00 5600 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSScreenCapturerScreenshotOptions 
01 00 5600 /System/Library/PrivateFrameworks/ScreenshotServices.framework/ScreenshotServices: SSScreenCapturerScreenshotOptionsCollection 
01 00 0e00 /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices: SSSoftwareUpdatesRequest 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STBatteryStatusDomain 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STBatteryStatusDomainPublisher 
01 00 2900 /System/Library/PrivateFrameworks/ScreenTimeUI.framework/ScreenTimeUI: STBlockingViewController 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STCallingStatusDomain 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STCallingStatusDomainUserInteraction 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STDynamicActivityAttributionManager 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STMediaStatusDomain 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STMutableCallingStatusDomainData 
01 00 3700 /System/Library/PrivateFrameworks/SystemStatusServer.framework/SystemStatusServer: STStatusServer 
01 00 3700 /System/Library/PrivateFrameworks/SystemStatusServer.framework/SystemStatusServer: STTelephonyStateProvider 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STTelephonyStatusDomain 
01 00 3700 /System/Library/PrivateFrameworks/SystemStatusServer.framework/SystemStatusServer: STTelephonyStatusDomainDataProvider 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STVoiceControlStatusDomain 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STWifiStatusDomain 
01 00 3600 /System/Library/PrivateFrameworks/SystemStatus.framework/SystemStatus: STWifiStatusDomainPublisher 
01 00 bb00 /System/Library/PrivateFrameworks/SoftwareUpdateServices.framework/SoftwareUpdateServices: SUDescriptor 
01 00 7140 /System/Library/PrivateFrameworks/SiriUICore.framework/SiriUICore: SUICFlamesView 
01 00 8800 /System/Library/PrivateFrameworks/CloudServices.framework/CloudServices: SecureBackup 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriBluetoothDeviceSource 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriBreadcrumbSource 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriContinuityContext 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriContinuitySource 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriDirectActionContext 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriDirectActionSource 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriDismissalOptions 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriLongPressButtonSource 
01 00 3d00 /System/Library/PrivateFrameworks/SiriUIActivation.framework/SiriUIActivation: SiriPresentationSpringBoardMainScreenViewController 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriSimpleActivationSource 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriTestingContext 
01 00 3e00 /System/Library/PrivateFrameworks/SiriActivation.framework/SiriActivation: SiriTestingSource 
01 00 8c40 /System/Library/PrivateFrameworks/SiriUI.framework/SiriUI: SiriUICarDNDUseSiriHeaderViewController 
01 00 8c40 /System/Library/PrivateFrameworks/SiriUI.framework/SiriUI: SiriUISuggestionsView 
01 00 3800 /System/Library/PrivateFrameworks/TestFlightCore.framework/TestFlightCore: TFBetaLaunchHandle 
01 00 2300 /System/Library/PrivateFrameworks/TextInput.framework/TextInput: TIPreferencesController 
01 00 bd00 /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary: TLAlert 
01 00 bd00 /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary: TLAlertConfiguration 
01 00 bd00 /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary: TLToneManager 
01 00 9400 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUAudioRoute 
01 00 9400 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUCallCapabilities 
01 00 9400 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUCallCenter 
01 00 9400 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUDialRequest 
01 00 7600 /System/Library/PrivateFrameworks/UserActivity.framework/UserActivity: UABestAppSuggestionManager 
01 00 7600 /System/Library/PrivateFrameworks/UserActivity.framework/UserActivity: UAUserActivity 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityContinuationAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityIndicatorView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIActivityViewController 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationCoverSheetSceneSpecification 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationExternalScreenSceneSpecification 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationLegacyVOIPKeepAliveAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneClientSettings 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneClientSettingsDiffInspector 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneDeactivationManager 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneSettings 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneSettingsDiffInspector 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneSpecification 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplicationSceneTransitionContext 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBannerAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBarButtonItem 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIBlurEffect 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UICollectionViewCell 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIControl 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDestroySceneAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDestroySceneActionResponse 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDidTakeScreenshotAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDismissSceneAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragInteraction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragItem 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragPreview 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDragPreviewTarget 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDraggingSystemMonitor 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDraggingSystemTouchRoutingPolicy 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDropInteraction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDropProposal 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFetchContentInBackgroundAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFetchContentInBackgroundActionResponse 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFontDescriptor 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIForceStageInteractionProgress 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRenderer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRendererFormat 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIHBClickGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIHBLongClickGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIHandleBackgroundURLSessionAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIHoverGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIImpactFeedbackGenerator 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyCommand 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboard 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIKeyboardInputModeController 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UILabel 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UILongPressGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIMutableApplicationSceneClientSettings 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIMutableApplicationSceneSettings 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIMutableTransformer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationController 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UINib 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UINotificationFeedbackGenerator 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIOpenURLAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPanGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPeripheralHost 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPinchGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerEffect 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerHighlightEffect 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerInteraction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerLiftEffect 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerRegion 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerShape 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPointerStyle 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewForceInteractionProgress 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPreviewParameters 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIRootSceneWindow 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIRootWindowScenePresentationBinder 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIRotationGestureRecognizer 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationInitializationContext 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationStateService 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationSupportDisplayEdgeInfo 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationSupportDisplayEdgeInsetsWrapper 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISApplicationSupportService 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISDeviceContext 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISDisplayContext 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISMutableApplicationInitializationContext 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISMutableDeviceContext 
01 00 4b00 /System/Library/PrivateFrameworks/UIKitServices.framework/UIKitServices: UISMutableDisplayContext 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISceneActivationConditions 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISceneLayerTargetFactory 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISceneRequestOptions 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreenEdgePanGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollEvent 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISegmentedControl 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISlider 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISpringLoadedInteraction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStackView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBar 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarHideAnimationParameters 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarHoverRegionAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarManager 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarServer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarStyleAnimationParameters 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarStyleRequest 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarTapAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBarWindow 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBar_Base 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBar_Modern 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISwipeGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISwitch 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISystemNavigationAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISystemNavigationActionDestinationContext 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UISystemShellApplication 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCell 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewController 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewHeaderFooterView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITapGestureRecognizer 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedDragPreview 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITargetedPreview 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITextEffectsWindow 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITextField 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITextView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UITransform 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIUserInterfaceStyleArbiter 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewFloatAnimatableProperty 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewPropertyAnimator 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIVisualEffectView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWebClip 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindow 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindowScene 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindowSceneSpecification 
01 00 6c00 /System/Library/PrivateFrameworks/UserManagement.framework/UserManagement: UMUserManager 
01 00 6c00 /System/Library/PrivateFrameworks/UserManagement.framework/UserManagement: UMUserSwitchBlockingTask 
01 00 6800 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNMutableNotificationContent 
01 00 6800 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotification 
01 00 6800 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNNotificationRequest 
01 00 6800 /System/Library/Frameworks/UserNotifications.framework/UserNotifications: UNUserNotificationCenter 
01 00 0d40 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSCacheUpdateListener 
01 00 0d40 /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices: VSRecognitionSession 
01 00 2c00 /System/Library/PrivateFrameworks/WorkflowUIServices.framework/WorkflowUIServices: WFWidgetOptions 
01 00 2c00 /System/Library/PrivateFrameworks/WorkflowUIServices.framework/WorkflowUIServices: WFWidgetViewController 
01 00 6000 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGCarouselListViewController 
01 00 6000 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGMajorListViewController 
01 00 6000 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGWidgetDiscoveryController 
01 00 6000 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGWidgetGroupViewController 
01 00 6000 /System/Library/PrivateFrameworks/Widgets.framework/Widgets: WGWidgetListHeaderView 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationController 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationLaunchCompatibilityInfo 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshot 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotFetchRequest 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotGenerationContext 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotManifest 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotPredicate 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBApplicationSnapshotSortDescriptor 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBDisplayEdgeInsetsWrapper 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBLaunchImageProvider 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBLaunchStateRequest 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBMutableStatusBarSettings 
01 00 7d00 /System/Library/PrivateFrameworks/SplashBoard.framework/SplashBoard: XBSnapshotDataProviderContext 
01 00 1800 /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet: _CDBatterySaver 
01 00 1700 /System/Library/PrivateFrameworks/DuetExpertCenter.framework/DuetExpertCenter: _DECConsumer 
01 00 1700 /System/Library/PrivateFrameworks/DuetExpertCenter.framework/DuetExpertCenter: _DECFeedbackProvider 
01 00 1700 /System/Library/PrivateFrameworks/DuetExpertCenter.framework/DuetExpertCenter: _DECLocationAppItem 
01 00 ae00 /System/Library/Frameworks/CoreServices.framework/CoreServices: _LSOpenConfiguration 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: _SBUIBiometricKitInterface 
01 00 8f00 /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices: _SBUIBiometricMatchingAssertion 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIApplicationInfo 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIAssetManager 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIBackdropView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIBackdropViewSettings 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIBannerContent 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIDirectionalRotationView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIDiscreteFeedback 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIEdgeFeedbackGenerator 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIEdgeFeedbackGeneratorConfiguration 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIFeedbackEngine 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperConstantExtender 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperInteractor 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperpoint 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperrectangle 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIHyperregionUnion 
01 00 6f00 /System/Library/PrivateFrameworks/KeyboardArbiter.framework/KeyboardArbiter: _UIKeyboardArbiter_ForSpringBoard 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UILayerHostView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UILegibilityLabel 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UILegibilitySettings 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UINotificationFeedbackGeneratorConfiguration 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIPortalView 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRemoteKeyboards 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRemoteViewController 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIRootWindow 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UISettings 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIStatusBarAction 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIStatusBarData 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIStatusBarDataStringEntry 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UISystemGestureManager 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIVibrantSettings 
01 00 7c00 /System/Library/Frameworks/UIKit.framework/UIKit: _UIViewControllerTransitionContext 
