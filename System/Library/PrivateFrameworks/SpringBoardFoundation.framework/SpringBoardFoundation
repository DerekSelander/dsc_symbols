|| __DATA.__common _gLastAllocatedBytes
|| __DATA.__data _SBFWallpaperViewUnknownContrast
|| __DATA.__objc_data _OBJC_CLASS_$_SBAppIconForceTouchDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBFBokehWallpaperCircle
|| __DATA.__objc_data _OBJC_CLASS_$_SBFBokehWallpaperColorArbiter
|| __DATA.__objc_data _OBJC_CLASS_$_SBFBokehWallpaperView
|| __DATA.__objc_data _OBJC_CLASS_$_SBFButton
|| __DATA.__objc_data _OBJC_CLASS_$_SBFCARendererImpl
|| __DATA.__objc_data _OBJC_CLASS_$_SBFCancelationToken
|| __DATA.__objc_data _OBJC_CLASS_$_SBFColorWallpaperView
|| __DATA.__objc_data _OBJC_CLASS_$_SBFDeviceBlockTimer
|| __DATA.__objc_data _OBJC_CLASS_$_SBFFileCache
|| __DATA.__objc_data _OBJC_CLASS_$_SBFFileCacheFileStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBFFileCacheMemoryStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBFFileCacheURLFaultHandler
|| __DATA.__objc_data _OBJC_CLASS_$_SBFGradient
|| __DATA.__objc_data _OBJC_CLASS_$_SBFGradientWallpaperView
|| __DATA.__objc_data _OBJC_CLASS_$_SBFInfiniteImpulseResponseFilter
|| __DATA.__objc_data _OBJC_CLASS_$_SBFLayerSnapshot
|| __DATA.__objc_data _OBJC_CLASS_$_SBFLazyObjectProvider
|| __DATA.__objc_data _OBJC_CLASS_$_SBFMotionManager
|| __DATA.__objc_data _OBJC_CLASS_$_SBFMutableMobileKeyBagState
|| __DATA.__objc_data _OBJC_CLASS_$_SBFObliterationController
|| __DATA.__objc_data _OBJC_CLASS_$_SBFObservable
|| __DATA.__objc_data _OBJC_CLASS_$_SBFObserver
|| __DATA.__objc_data _OBJC_CLASS_$_SBFProceduralWallpaper
|| __DATA.__objc_data _OBJC_CLASS_$_SBFScheduler
|| __DATA.__objc_data _OBJC_CLASS_$_SBFScrollableIrisWallpaperView
|| __DATA.__objc_data _OBJC_CLASS_$_SBFScrollableStaticWallpaperView
|| __DATA.__objc_data _OBJC_CLASS_$_SBFSecureWindow
|| __DATA.__objc_data _OBJC_CLASS_$_SBFShamMobileKeyBag
|| __DATA.__objc_data _OBJC_CLASS_$_SBFSubject
|| __DATA.__objc_data _OBJC_CLASS_$_SBFTapticEngine
|| __DATA.__objc_data _OBJC_CLASS_$_SBFUserAuthenticationModelEducationalMode
|| __DATA.__objc_data _OBJC_CLASS_$_SBFUserAuthenticationModelJournaledDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBFUserAuthenticationResponder
|| __DATA.__objc_data _OBJC_CLASS_$_SBFWallpaperDefaultConfiguration
|| __DATA.__objc_data _OBJC_CLASS_$_SBFWallpaperMemoryDataStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBFWallpaperSharedDirectoryDataStore
|| __DATA.__objc_data _OBJC_CLASS_$_SBFWebClipSanitationReport
|| __DATA.__objc_data _OBJC_CLASS_$_SBFloatingDockDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBReadonlyRow
|| __DATA.__objc_data _OBJC_CLASS_$_SBReadonlyTableViewCell
|| __DATA.__objc_data _OBJC_CLASS_$_SBRecentDisplayItemsDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBSoftwareUpdateDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBVoiceControlDefaults
|| __DATA.__objc_data _OBJC_CLASS_$_SBWallpaperLegacyDefaults
|| __DATA.__objc_data _OBJC_CLASS_$__SBFAccumulatingObserver
|| __DATA.__objc_data _OBJC_CLASS_$__SBFBlockObservable
|| __DATA.__objc_data _OBJC_CLASS_$__SBFBlockObserver
|| __DATA.__objc_data _OBJC_CLASS_$__SBFForkJoinObservable
|| __DATA.__objc_data _OBJC_CLASS_$__SBFImmediateScheduler
|| __DATA.__objc_data _OBJC_CLASS_$__SBFQueueScheduler
|| __DATA.__objc_data _OBJC_CLASS_$__SBFScheduledObservable
|| __DATA.__objc_data _OBJC_CLASS_$__SBFThrottledObservable
|| __DATA.__objc_data _OBJC_CLASS_$__SBFVibrantSettings
|| __DATA.__objc_data _OBJC_METACLASS_$_SBAppIconForceTouchDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFBokehWallpaperCircle
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFBokehWallpaperColorArbiter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFBokehWallpaperView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFButton
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFCARendererImpl
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFCancelationToken
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFColorWallpaperView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFDeviceBlockTimer
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFFileCache
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFFileCacheFileStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFFileCacheMemoryStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFFileCacheURLFaultHandler
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFGradient
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFGradientWallpaperView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFInfiniteImpulseResponseFilter
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFLayerSnapshot
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFLazyObjectProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFMotionManager
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFMutableMobileKeyBagState
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFObliterationController
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFObservable
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFProceduralWallpaper
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFScrollableIrisWallpaperView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFScrollableStaticWallpaperView
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFSecureWindow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFShamMobileKeyBag
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFSubject
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFTapticEngine
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFUserAuthenticationModelEducationalMode
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFUserAuthenticationModelJournaledDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFUserAuthenticationResponder
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFWallpaperDefaultConfiguration
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFWallpaperMemoryDataStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFWallpaperSharedDirectoryDataStore
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFWebClipSanitationReport
|| __DATA.__objc_data _OBJC_METACLASS_$_SBFloatingDockDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReadonlyRow
|| __DATA.__objc_data _OBJC_METACLASS_$_SBReadonlyTableViewCell
|| __DATA.__objc_data _OBJC_METACLASS_$_SBRecentDisplayItemsDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBSoftwareUpdateDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBVoiceControlDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$_SBWallpaperLegacyDefaults
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFAccumulatingObserver
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFBlockObservable
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFBlockObserver
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFForkJoinObservable
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFImmediateScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFQueueScheduler
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFScheduledObservable
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFThrottledObservable
|| __DATA.__objc_data _OBJC_METACLASS_$__SBFVibrantSettings
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAnalyticsContextProvider._backend
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBAnalyticsContextProvider._eventPayload
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFAuthenticationAssertionTracker._assertions
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFAuthenticationAssertionTracker._mkbAssertion
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFMobileKeyBagState._state
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBFWallpaperView._wallpaperSettings
|| __DATA.__objc_ivar _OBJC_IVAR_$_SBReusableViewMap._recycledViewsByClass
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFAccumulatingObserver._didComplete
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFAccumulatingObserver._error
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFAccumulatingObserver._results
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFAccumulatingObserver._semaphore
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFBlockObservable._block
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFBlockObserver._completionBlock
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFBlockObserver._failureBlock
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFBlockObserver._resultBlock
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFForkJoinObservable._observables
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFForkJoinObservable._results
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFForkJoinObservable._uncompletedObservableCount
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFScheduledObservable._observable
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFScheduledObservable._scheduler
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFThrottledObservable._delayToken
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFThrottledObservable._hasResult
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFThrottledObservable._interval
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFThrottledObservable._observable
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFThrottledObservable._result
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFThrottledObservable._resultCounter
|| __DATA.__objc_ivar _OBJC_IVAR_$__SBFThrottledObservable._scheduler
|| __DATA_CONST.__const _SBDefaultKeyBlockedForPasscode
|| __DATA_CONST.__const _SBDefaultKeyDeviceLockBlockStateGeneration
|| __DATA_CONST.__const _SBDefaultKeyDeviceLockPendingWipe
|| __DATA_CONST.__const _SBDefaultKeyNumberOfFailedPasscodeAttempts
|| __DATA_CONST.__const _SBDefaultKeyStatusBarishLogOptions
|| __DATA_CONST.__const _SBDefaultKeySystemGestureLoggingOptions
|| __DATA_CONST.__const _SBDefaultKeyUnblockTimeIntervalSinceReferenceDate
|| __DATA_CONST.__const _SBDeviceDidDisableDisplaySecureModeNotification
|| __DATA_CONST.__const _SBDeviceDidEnableDisplaySecureModeNotification
|| __DATA_CONST.__const _SBDeviceWillDisableDisplaySecureModeNotification
|| __DATA_CONST.__const _SBDeviceWillEnableDisplaySecureModeNotification
|| __DATA_CONST.__const _SBFDeviceBlockStateDidChangeNotification
|| __DATA_CONST.__const _SBFMKBErrorDomain
|| __DATA_CONST.__const _SBFRemoteBasebandLogCollectionEnabledText
|| __DATA_CONST.__const _SBFSetupBuddyCompletedNotification
|| __DATA_CONST.__const _SBFUserAuthenticatedForFirstTimeNotification
|| __DATA_CONST.__const _SBFUserAuthenticationRequestCompletedAuthenticationTypeKey
|| __DATA_CONST.__const _SBFUserAuthenticationRequestCompletedNotification
|| __DATA_CONST.__const _SBFUserAuthenticationRequestCompletedResultFailure
|| __DATA_CONST.__const _SBFUserAuthenticationRequestCompletedResultInvalid
|| __DATA_CONST.__const _SBFUserAuthenticationRequestCompletedResultKey
|| __DATA_CONST.__const _SBFUserAuthenticationRequestCompletedResultSuccess
|| __DATA_CONST.__const _SBFUserAuthenticationStateDidChangeNotification
|| __DATA_CONST.__const _SBFUserAuthenticationStateWasAuthenticatedKey
|| __DATA_CONST.__const _SBFWallpaperDidChangeNotification
|| __DATA_CONST.__const _SBFWebClipUtilitiesErrorDomain
|| __DATA_CONST.__const _SBFWebClipUtilitiesLastSanitizedBuildVersionUserDefaultsKey
|| __DATA_CONST.__const _SBScreenTimeCategoryKey
|| __DATA_CONST.__const _SBScreenTimeTrackingChangedNotification
|| __DATA_CONST.__const _SBWorkspaceDefaultsInternalSettingsChangedDarwinNotificationName
|| __DATA_CONST.__const _kSBFMagicWallpaper360VRSectionKey
|| __DATA_CONST.__const _kSBFMagicWallpaperBundlePathKey
|| __DATA_CONST.__const _kSBFMagicWallpaperDynamicSectionKey
|| __DATA_CONST.__const _kSBFMagicWallpaperIdentifierKey
|| __DATA_CONST.__const _kSBFMagicWallpaperPanoVRSectionKey
|| __DATA_CONST.__const _kSBFMagicWallpaperPresetOptionsBokehVariantKey
|| __DATA_CONST.__const _kSBFMagicWallpaperPresetOptionsKey
|| __DATA_CONST.__const _kSBFMagicWallpaperSmallThumbnailDataKey
|| __DATA_CONST.__const _kSBFMagicWallpaperThumbnailNameKey
|| __DATA_CONST.__const _kSBFMagicWallpaperThumbnailPathKey
|| __DATA_CONST.__const _kSBFSyncSessionBegan
|| __DATA_CONST.__const _kSBSOSTriggerMechanismChangedNotification
|| __DATA_DIRTY.__common _gAllocatedBytes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAbstractDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAbstractSpringBoardDefaultDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAccessibilityDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAnalyticsContextProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBAppSwitcherDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBApplicationDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBiometricAuthenticationDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBBootDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBC2GroupCompletion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBCameraHardwareButtonDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBDemoDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFAnalyticsBackend
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFAnalyticsClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFApplication
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFAuthenticationAssertion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFAuthenticationAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFAuthenticationAssertionTracker
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFAuthenticationRequest
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFBackdropLegibilitySettingsProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFBuildVersion
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFCARenderer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFCARendererImageRepresentation
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFColorBoxes
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFCredentialSet
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFDashBoardViewMetrics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFDateTimeController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFDefaultDateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFDeviceLockOutController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFFluidBehaviorSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFHomeGrabberDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFHomeGrabberSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFIrisWallpaperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLegibilityDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLegibilitySettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLockScreenActionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLockScreenAlternateDateLabel
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLockScreenDateSubtitleDateView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLockScreenDateSubtitleView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLockScreenDateView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLockScreenDateViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLockScreenMetrics
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFLockScreenWakeAnimator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMagnifyMode
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMappedImageCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMobileKeyBag
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMobileKeyBagState
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMotionGestureController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMouseButtonDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFMutableLockScreenActionContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFOverridableDateProvider
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFPagedScrollView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFParallaxSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFPasscodeLockTrackerForPreventLockAssertions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFPasscodeLockTrackerForTransientAssertions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFRemoteBasebandLoggingManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFSecureDisplayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFSpringLoadedInteractionBehavior
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFSpringLoadedInteractionEffect
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFStaticWallpaperImageView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFStaticWallpaperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFStatusBarLegibilityView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFSteppedAnimationTimingFunctionCalculator
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFTapToWakeGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFTodayGestureDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFTodayGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFTouchPassThroughView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFTouchPassThroughViewController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFTouchPassThroughWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFUserAuthenticationController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFUserAuthenticationModelSEP
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWakeAnimationDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWakeAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperCache
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperConfigurationManager
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperDefaultsWrapper
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperDirectoryDataStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperOptions
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperParallaxSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperSettings
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperUserDefaultsDataStore
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWallpaperView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWebClipUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBFWindow
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBGestureDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHardwareDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBHomeScreenDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIconDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBIdleTimerDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLocalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBLockScreenDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMiscellaneousDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBMultiUserDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationCenterDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBNotificationDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPIPDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBPowerDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBReusableViewMap
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBRotationDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSOSDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSecurityDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSetupDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBSoundDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStateDumpDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBStatusBarLegibilityGradientView
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBTestingDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBThermalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBUsageDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWakeEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWakeLogger
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWallpaperImage
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_SBWorkspaceDefaults
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBFKeyWindowStack
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBSteppedAnimationTimingFunction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$__SBWindowReference
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAbstractDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAbstractSpringBoardDefaultDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAccessibilityDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAnalyticsContextProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBAppSwitcherDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBApplicationDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBiometricAuthenticationDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBBootDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBC2GroupCompletion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBCameraHardwareButtonDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBDemoDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFAnalyticsBackend
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFAnalyticsClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFApplication
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFAuthenticationAssertion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFAuthenticationAssertionManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFAuthenticationAssertionTracker
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFAuthenticationRequest
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFBackdropLegibilitySettingsProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFBuildVersion
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFCARenderer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFCARendererImageRepresentation
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFColorBoxes
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFCredentialSet
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFDashBoardViewMetrics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFDateTimeController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFDefaultDateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFDeviceLockOutController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFFluidBehaviorSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFHomeGrabberDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFHomeGrabberSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFIrisWallpaperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLegibilityDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLegibilitySettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLockScreenActionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLockScreenAlternateDateLabel
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLockScreenDateSubtitleDateView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLockScreenDateSubtitleView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLockScreenDateView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLockScreenDateViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLockScreenMetrics
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFLockScreenWakeAnimator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMagnifyMode
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMappedImageCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMobileKeyBag
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMobileKeyBagState
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMotionGestureController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMouseButtonDownGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFMutableLockScreenActionContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFOverridableDateProvider
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFPagedScrollView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFParallaxSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFPasscodeLockTrackerForPreventLockAssertions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFPasscodeLockTrackerForTransientAssertions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFRemoteBasebandLoggingManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFSecureDisplayCoordinator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFSpringLoadedInteractionBehavior
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFSpringLoadedInteractionEffect
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFStaticWallpaperImageView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFStaticWallpaperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFStatusBarLegibilityView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFSteppedAnimationTimingFunctionCalculator
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFTapToWakeGestureRecognizer
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFTodayGestureDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFTodayGestureSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFTouchPassThroughView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFTouchPassThroughViewController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFTouchPassThroughWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFUserAuthenticationController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFUserAuthenticationModelSEP
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWakeAnimationDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWakeAnimationSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperCache
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperConfiguration
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperConfigurationManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperDefaultsWrapper
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperDirectoryDataStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperDomain
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperOptions
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperParallaxSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperSettings
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperUserDefaultsDataStore
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWallpaperView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWebClipUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBFWindow
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBGestureDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHardwareDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBHomeScreenDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIconDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBIdleTimerDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLocalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBLockScreenDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMiscellaneousDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBMultiUserDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationCenterDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBNotificationDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPIPDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBPowerDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBReusableViewMap
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBRotationDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSOSDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSecurityDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSetupDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBSoundDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStateDumpDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBStatusBarLegibilityGradientView
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBTestingDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBThermalDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBUsageDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWakeEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWakeLogger
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWallpaperImage
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_SBWorkspaceDefaults
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBFKeyWindowStack
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBSteppedAnimationTimingFunction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$__SBWindowReference
|| __TEXT.__const _SBFFontMetricsZero
|| __TEXT.__const _SBFMKBErrorCodePolicy
|| __TEXT.__const _SBFPinNumberPadButtonOuterCircleDiameter
|| __TEXT.__const _SBFPinNumberPadButtonPaddingHeight
|| __TEXT.__const _SBFPinNumberPadButtonPaddingWidth
|| __TEXT.__const _SBFProudLockAssetHeight
|| __TEXT.__const _SBFProudLockAssetWidth
|| __TEXT.__const _SBFProudLockCenterFromTopOfScreen
|| __TEXT.__const _kBaseiPadSize
|| __TEXT.__const _kBaseiPhoneSize
|| __TEXT.__text _ACMContextAddCredential
|| __TEXT.__text _ACMContextAddCredentialWithScope
|| __TEXT.__text _ACMContextAppendData
|| __TEXT.__text _ACMContextContainsCredentialType
|| __TEXT.__text _ACMContextContainsCredentialTypeEx
|| __TEXT.__text _ACMContextContainsPassphraseCredentialWithPurpose
|| __TEXT.__text _ACMContextCreate
|| __TEXT.__text _ACMContextCreateWithExternalForm
|| __TEXT.__text _ACMContextCredentialGetProperty
|| __TEXT.__text _ACMContextDelete
|| __TEXT.__text _ACMContextGetData
|| __TEXT.__text _ACMContextGetExternalForm
|| __TEXT.__text _ACMContextGetInfo
|| __TEXT.__text _ACMContextGetTrackingNumber
|| __TEXT.__text _ACMContextRemoveCredentialsByType
|| __TEXT.__text _ACMContextRemoveCredentialsByTypeAndScope
|| __TEXT.__text _ACMContextRemoveCredentialsByValue
|| __TEXT.__text _ACMContextRemoveCredentialsByValueAndScope
|| __TEXT.__text _ACMContextRemovePassphraseCredentialsByPurposeAndScope
|| __TEXT.__text _ACMContextReplacePassphraseCredentialsWithScope
|| __TEXT.__text _ACMContextSetData
|| __TEXT.__text _ACMContextVerifyAclConstraint
|| __TEXT.__text _ACMContextVerifyAclConstraintForOperation
|| __TEXT.__text _ACMContextVerifyPolicy
|| __TEXT.__text _ACMContextVerifyPolicyEx
|| __TEXT.__text _ACMContextVerifyPolicyWithPreflight
|| __TEXT.__text _ACMCredentialCreate
|| __TEXT.__text _ACMCredentialDelete
|| __TEXT.__text _ACMCredentialGetProperty
|| __TEXT.__text _ACMCredentialGetPropertyData
|| __TEXT.__text _ACMCredentialGetType
|| __TEXT.__text _ACMCredentialSetProperty
|| __TEXT.__text _ACMGetAclAuthMethod
|| __TEXT.__text _ACMGetEnvironmentVariable
|| __TEXT.__text _ACMGlobalContextAddCredential
|| __TEXT.__text _ACMGlobalContextCredentialGetProperty
|| __TEXT.__text _ACMGlobalContextRemoveCredentialsByType
|| __TEXT.__text _ACMGlobalContextVerifyPolicy
|| __TEXT.__text _ACMKernelControl
|| __TEXT.__text _ACMParseAclAndCopyConstraintCharacteristics
|| __TEXT.__text _ACMPing
|| __TEXT.__text _ACMRequirementGetPriority
|| __TEXT.__text _ACMRequirementGetProperties
|| __TEXT.__text _ACMRequirementGetProperty
|| __TEXT.__text _ACMRequirementGetPropertyData
|| __TEXT.__text _ACMRequirementGetState
|| __TEXT.__text _ACMRequirementGetSubrequirements
|| __TEXT.__text _ACMRequirementGetType
|| __TEXT.__text _ACMSetEnvironmentVariable
|| __TEXT.__text _ACMSetEnvironmentVariableWithAccessPolicy
|| __TEXT.__text _CompareCredentials
|| __TEXT.__text _CopyCredential
|| __TEXT.__text _DeallocCredential
|| __TEXT.__text _DeallocCredentialList
|| __TEXT.__text _DeallocRequirement
|| __TEXT.__text _DeserializeAddCredential
|| __TEXT.__text _DeserializeAddCredentialType
|| __TEXT.__text _DeserializeCredential
|| __TEXT.__text _DeserializeCredentialList
|| __TEXT.__text _DeserializeGetContextProperty
|| __TEXT.__text _DeserializeProcessAcl
|| __TEXT.__text _DeserializeRemoveCredential
|| __TEXT.__text _DeserializeReplacePassphraseCredential
|| __TEXT.__text _DeserializeRequirement
|| __TEXT.__text _DeserializeVerifyAclConstraint
|| __TEXT.__text _DeserializeVerifyPolicy
|| __TEXT.__text _GetSerializedAddCredentialSize
|| __TEXT.__text _GetSerializedCredentialSize
|| __TEXT.__text _GetSerializedGetContextPropertySize
|| __TEXT.__text _GetSerializedProcessAclSize
|| __TEXT.__text _GetSerializedRemoveCredentialSize
|| __TEXT.__text _GetSerializedReplacePassphraseCredentialSize
|| __TEXT.__text _GetSerializedRequirementSize
|| __TEXT.__text _GetSerializedVerifyAclConstraintSize
|| __TEXT.__text _GetSerializedVerifyPolicySize
|| __TEXT.__text _LibCall_ACMContexAddCredentialWithScope
|| __TEXT.__text _LibCall_ACMContexRemoveCredentialsByTypeAndScope
|| __TEXT.__text _LibCall_ACMContextAppendData
|| __TEXT.__text _LibCall_ACMContextCreate
|| __TEXT.__text _LibCall_ACMContextCreateWithExternalForm
|| __TEXT.__text _LibCall_ACMContextCredentialGetProperty
|| __TEXT.__text _LibCall_ACMContextDelete
|| __TEXT.__text _LibCall_ACMContextGetData
|| __TEXT.__text _LibCall_ACMContextGetInfo
|| __TEXT.__text _LibCall_ACMContextSetData
|| __TEXT.__text _LibCall_ACMContextVerifyPolicyAndCopyRequirementEx
|| __TEXT.__text _LibCall_ACMCredentialCreate
|| __TEXT.__text _LibCall_ACMCredentialDelete
|| __TEXT.__text _LibCall_ACMCredentialGetPropertyData
|| __TEXT.__text _LibCall_ACMCredentialGetType
|| __TEXT.__text _LibCall_ACMCredentialSetProperty
|| __TEXT.__text _LibCall_ACMGetAclAuthMethod_Block
|| __TEXT.__text _LibCall_ACMGetEnvironmentVariable
|| __TEXT.__text _LibCall_ACMGetEnvironmentVariable_Block
|| __TEXT.__text _LibCall_ACMGlobalContextCredentialGetProperty
|| __TEXT.__text _LibCall_ACMGlobalContextCredentialGetProperty_Block
|| __TEXT.__text _LibCall_ACMKernDoubleClickNotify
|| __TEXT.__text _LibCall_ACMKernelControl
|| __TEXT.__text _LibCall_ACMKernelControl_Block
|| __TEXT.__text _LibCall_ACMPing
|| __TEXT.__text _LibCall_ACMPublishTrustedAccessories
|| __TEXT.__text _LibCall_ACMRequirementDelete
|| __TEXT.__text _LibCall_ACMRequirementGetPriority
|| __TEXT.__text _LibCall_ACMRequirementGetPropertyData
|| __TEXT.__text _LibCall_ACMRequirementGetState
|| __TEXT.__text _LibCall_ACMRequirementGetType
|| __TEXT.__text _LibCall_ACMSetEnvironmentVariable
|| __TEXT.__text _LibCall_ACMTRMLoadState
|| __TEXT.__text _LibCall_ACMTRMLoadState_Block
|| __TEXT.__text _LibCall_ACMTRMSaveState
|| __TEXT.__text _LibCall_BuildCommand
|| __TEXT.__text _LibSer_ContextCredentialGetProperty_Deserialize
|| __TEXT.__text _LibSer_ContextCredentialGetProperty_GetSize
|| __TEXT.__text _LibSer_ContextCredentialGetProperty_Serialize
|| __TEXT.__text _LibSer_DeleteContext_Deserialize
|| __TEXT.__text _LibSer_DeleteContext_GetSize
|| __TEXT.__text _LibSer_DeleteContext_Serialize
|| __TEXT.__text _LibSer_GetAclAuthMethod_Deserialize
|| __TEXT.__text _LibSer_GetAclAuthMethod_GetSize
|| __TEXT.__text _LibSer_GetAclAuthMethod_Serialize
|| __TEXT.__text _LibSer_GlobalContextCredentialGetProperty_Deserialize
|| __TEXT.__text _LibSer_GlobalContextCredentialGetProperty_GetSize
|| __TEXT.__text _LibSer_GlobalContextCredentialGetProperty_Serialize
|| __TEXT.__text _LibSer_RemoveCredentialByType_Deserialize
|| __TEXT.__text _LibSer_RemoveCredentialByType_GetSize
|| __TEXT.__text _LibSer_RemoveCredentialByType_Serialize
|| __TEXT.__text _LibSer_StorageAppendData_Deserialize
|| __TEXT.__text _LibSer_StorageAppendData_GetSize
|| __TEXT.__text _LibSer_StorageAppendData_Serialize
|| __TEXT.__text _LibSer_StorageGetData_Deserialize
|| __TEXT.__text _LibSer_StorageGetData_GetSize
|| __TEXT.__text _LibSer_StorageGetData_Serialize
|| __TEXT.__text _LibSer_StorageSetData_Deserialize
|| __TEXT.__text _LibSer_StorageSetData_GetSize
|| __TEXT.__text _LibSer_StorageSetData_Serialize
|| __TEXT.__text _NSStringFromIdleTimerDuration
|| __TEXT.__text _NSStringFromIdleWarnMode
|| __TEXT.__text _NSStringFromSBFAuthenticationAssertionType
|| __TEXT.__text _NSStringFromSBFAuthenticationState
|| __TEXT.__text _NSStringFromSBFIdleTimerMode
|| __TEXT.__text _NSStringFromSBFWebClipSanitizationError
|| __TEXT.__text _NSStringFromSBFWebClipSanitizationResult
|| __TEXT.__text _SBCompletionBlockBSToC2
|| __TEXT.__text _SBCompletionBlockC2ToBS
|| __TEXT.__text _SBFAngleForRotationFromInterfaceOrientationToInterfaceOrientation
|| __TEXT.__text _SBFApplyParallaxSettingsToView
|| __TEXT.__text _SBFApplyParallaxSettingsToViewWithFactor
|| __TEXT.__text _SBFAverageColorFromColorBoxes
|| __TEXT.__text _SBFBackdropInputSettingsForWallpaperBackdropParameters
|| __TEXT.__text _SBFBackdropOutputSettingsForWallpaperBackdropParameters
|| __TEXT.__text _SBFBoolEquals
|| __TEXT.__text _SBFBoundPoint
|| __TEXT.__text _SBFBundle
|| __TEXT.__text _SBFCachedNSHomeDirectory
|| __TEXT.__text _SBFCachesPathForSandboxPath
|| __TEXT.__text _SBFCalculateContrastFromColorBoxes
|| __TEXT.__text _SBFCenterRectInRect
|| __TEXT.__text _SBFCompareIntegers
|| __TEXT.__text _SBFComposedColor
|| __TEXT.__text _SBFCreateIOSurfaceForImage
|| __TEXT.__text _SBFCurrentDeviceWallpaperSizeType
|| __TEXT.__text _SBFCurrentParallaxDeviceType
|| __TEXT.__text _SBFDashBoardOrientationLeadingInsetsMake
|| __TEXT.__text _SBFDashBoardPadPageInsetsMake
|| __TEXT.__text _SBFDescriptionForSensorType
|| __TEXT.__text _SBFEdgeInsetsRelativeToRectEdge
|| __TEXT.__text _SBFEdgeInsetsRotateToInterfaceOrientation
|| __TEXT.__text _SBFEffectiveArtworkSubtype
|| __TEXT.__text _SBFEffectiveDeviceClass
|| __TEXT.__text _SBFEffectiveHomeButtonType
|| __TEXT.__text _SBFEnsureDirectoryExistsAtPath
|| __TEXT.__text _SBFEqualStrings
|| __TEXT.__text _SBFFirstInterfaceOrientationInInterfaceOrientationMask
|| __TEXT.__text _SBFFloatCeilForScale
|| __TEXT.__text _SBFFloatEqualsFloat
|| __TEXT.__text _SBFFloatFloorForScale
|| __TEXT.__text _SBFFloatRoundForMainScreenScale
|| __TEXT.__text _SBFFloatRoundForScale
|| __TEXT.__text _SBFGetProceduralWallpaper
|| __TEXT.__text _SBFGraphicsContextTypeDescription
|| __TEXT.__text _SBFImageNameModifierSuffix
|| __TEXT.__text _SBFInterfaceOrientationMaskContainsInterfaceOrientation
|| __TEXT.__text _SBFIrisPlayerStateDescription
|| __TEXT.__text _SBFIrisWallpaperPlaybackStateDescription
|| __TEXT.__text _SBFIrisWallpaperPlaybackStateForISPlaybackState
|| __TEXT.__text _SBFIrisWallpaperViewModeDescription
|| __TEXT.__text _SBFIsSymbolicLinkAtPath
|| __TEXT.__text _SBFLocalizedStringForKey
|| __TEXT.__text _SBFMagicWallpaperEnumeration
|| __TEXT.__text _SBFMagicWallpaperRepresentativeThumbnailForClass
|| __TEXT.__text _SBFMagicWallpaperThumbnail
|| __TEXT.__text _SBFMainScreenScale
|| __TEXT.__text _SBFModificationDateForPath
|| __TEXT.__text _SBFModifiedFullscreenImageNameForName
|| __TEXT.__text _SBFModifiedImageNameForName
|| __TEXT.__text _SBFPointEqualToPointAtScale
|| __TEXT.__text _SBFPointLessThanEqualToPoint
|| __TEXT.__text _SBFPointRoundForMainScreenScale
|| __TEXT.__text _SBFPointRoundForScale
|| __TEXT.__text _SBFPreheatImageData
|| __TEXT.__text _SBFRectRoundForMainScreenScale
|| __TEXT.__text _SBFRectRoundForScale
|| __TEXT.__text _SBFSafeCast
|| __TEXT.__text _SBFSafeProtocolCast
|| __TEXT.__text _SBFStringForAppearState
|| __TEXT.__text _SBFStringForWallpaperLocations
|| __TEXT.__text _SBFStringForWallpaperMode
|| __TEXT.__text _SBFStringForWallpaperTransformOptions
|| __TEXT.__text _SBFStringForWallpaperType
|| __TEXT.__text _SBFStringForWallpaperVariant
|| __TEXT.__text _SBFThumbnailWidth
|| __TEXT.__text _SBFTransformFromOrientationToOrientation
|| __TEXT.__text _SBFWallpaperApplyParallax
|| __TEXT.__text _SBFWallpaperBackdropParametersMake
|| __TEXT.__text _SBFWallpaperBackdropParametersMakeIdentity
|| __TEXT.__text _SBFWallpaperColorForName
|| __TEXT.__text _SBFWallpaperDataForFileURL
|| __TEXT.__text _SBFWallpaperEnumerateVariantsForLocations
|| __TEXT.__text _SBFWallpaperImageWithFlatColor
|| __TEXT.__text _SBFWallpaperImageWithGradient
|| __TEXT.__text _SBFWallpaperLocationForVariant
|| __TEXT.__text _SBFWallpaperLoggableNameForVariant
|| __TEXT.__text _SBFWallpaperMinimumZoomScale
|| __TEXT.__text _SBFWallpaperMinimumZoomScaleForParallax
|| __TEXT.__text _SBFWallpaperModeForString
|| __TEXT.__text _SBFWallpaperTransformOptionsShouldIgnoreRotation
|| __TEXT.__text _SBFWallpaperTransformOptionsShouldIgnoreZoom
|| __TEXT.__text _SBFWallpaperTypeForString
|| __TEXT.__text _SBFWallpaperVariantForString
|| __TEXT.__text _SBFWindowForViewControllerTransition
|| __TEXT.__text _SBLogAnimation
|| __TEXT.__text _SBLogCellularLogCollection
|| __TEXT.__text _SBLogKeyWindow
|| __TEXT.__text _SBLogReusableViewCache
|| __TEXT.__text _SBLogTailspinSignposts
|| __TEXT.__text _SBLogWallpaper
|| __TEXT.__text _SBLogWebClip
|| __TEXT.__text _SBStringFromAnimationUpdateMode
|| __TEXT.__text _SBWakeLoggerSourceFromBacklightChangeSource
|| __TEXT.__text _SB_NSStringFromUIPressType
|| __TEXT.__text _SerializeAddCredential
|| __TEXT.__text _SerializeCredential
|| __TEXT.__text _SerializeCredentialList
|| __TEXT.__text _SerializeGetContextProperty
|| __TEXT.__text _SerializeProcessAcl
|| __TEXT.__text _SerializeRemoveCredential
|| __TEXT.__text _SerializeReplacePassphraseCredential
|| __TEXT.__text _SerializeRequirement
|| __TEXT.__text _SerializeVerifyAclConstraint
|| __TEXT.__text _SerializeVerifyPolicy
|| __TEXT.__text _Util_GetBitCount
|| __TEXT.__text _Util_hexDumpToStrHelper
|| __TEXT.__text _Util_isNullOrZeroMemory
|| __TEXT.__text __SBFBundlePathForWallpaperIdentifier
|| __TEXT.__text __SBFGetHSBAValuesForColor
|| __TEXT.__text __SBFGetHSBValuesForColor
|| __TEXT.__text __SBFGetRGBAValuesForColor
|| __TEXT.__text __SBFGetRGBValuesForColor
|| __TEXT.__text __SBFLockScreenDateViewShouldRoundFramesForAlignmentPercent
|| __TEXT.__text __SBFLockScreenFloatFloorForMainScreenScale
|| __TEXT.__text __SBFLoggingMethodProem
|| __TEXT.__text __SBFMagicWallpaperClassForIdentifier
|| __TEXT.__text __SBFMagicWallpaperOptionsDictionary
|| __TEXT.__text __SBFScreenTimeNameForCategory
|| __TEXT.__text __SBFScreenTimePostExternalChangeNotification
|| __TEXT.__text __SBFScreenTimeRegisterForExternalChangeNotification
|| __TEXT.__text __SBFWallpaperPostExternalChangeNotificationBecauseIAmSpringBoard
|| __TEXT.__text __SBFWallpaperRegisterForExternalChangeNotification
|| __TEXT.__text __SBFWallpaperRegisterForExternalChangeNotificationWithHandler
|| __TEXT.__text __SBF_Private_IsD33OrSimilarDevice
|| __TEXT.__text __SBF_Private_IsN84
|| __TEXT.__text ___hasEnoughFreeSpaceToSetWallpaper
|| __TEXT.__text ___wallpaperImageFilename
|| __TEXT.__text ___wallpaperOriginalImageFilename
|| __TEXT.__text ___wallpaperOriginalVideoFilename
|| __TEXT.__text ___wallpaperThumbnailFilename
|| __TEXT.__text ___wallpaperVideoFilename
|| __TEXT.__text _convertDampingRatioAndResponseToTensionAndFriction
|| __TEXT.__text _convertTensionAndFrictionToDampingRatioAndResponse
__ AVFoundation: _AVAssetExportPresetICPLAuxHD
__ AVFoundation: _AVFileTypeQuickTimeMovie
__ AVFoundation: _AVFoundationErrorDomain
__ AVFoundation: _AVMediaTypeVideo
__ AVFoundation: _OBJC_CLASS_$_AVAsset
__ AVFoundation: _OBJC_CLASS_$_AVAssetExportSession
__ AVFoundation: _OBJC_CLASS_$_AVMutableVideoComposition
__ AVFoundation: _OBJC_CLASS_$_AVMutableVideoCompositionInstruction
__ AVFoundation: _OBJC_CLASS_$_AVMutableVideoCompositionLayerInstruction
__ AVFoundation: _OBJC_CLASS_$_AVURLAsset
__ AggregateDictionary: _ADClientAddValueForScalarKey
__ AppSupport: _CPBitmapCreateImagesFromData
__ AppSupport: _CPBitmapCreateMappedDataFromPath
__ AppSupport: _CPSharedResourcesDirectory
__ BackBoardServices: _BKSDisplaySetSecureMode
__ BackBoardServices: _BKSHIDEventMatchingPredicate
__ BaseBoardUI: _BSUISurfaceWithColorSpaceAndDrawBlock
__ BaseBoardUI: _OBJC_CLASS_$_BSUIAnimationFactory
__ BaseBoardUI: _OBJC_CLASS_$_BSUIMappedImageCache
__ BaseBoardUI: _OBJC_CLASS_$_BSUIMappedImageCacheOptions
__ BaseBoardUI: _OBJC_CLASS_$_BSUIScrollView
__ BaseBoardUI: _OBJC_METACLASS_$_BSUIMappedImageCache
__ BaseBoardUI: _OBJC_METACLASS_$_BSUIScrollView
__ CoreAnalytics: _AnalyticsSetCallbackForQueriedEventWithQueue
__ CoreEmoji: _CEMStringContainsEmoji
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFDataGetBytePtr
__ CoreFoundation: _CFDataGetLength
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFFileSecuritySetMode
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNotificationCenterAddObserver
__ CoreFoundation: _CFNotificationCenterGetDarwinNotifyCenter
__ CoreFoundation: _CFNotificationCenterPostNotification
__ CoreFoundation: _CFNumberGetTypeID
__ CoreFoundation: _CFNumberGetValue
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddObserver
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFRunLoopObserverCreateWithHandler
__ CoreFoundation: _CFRunLoopPerformBlock
__ CoreFoundation: _CFRunLoopRemoveObserver
__ CoreFoundation: _CFStringCompare
__ CoreFoundation: _NSGenericException
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSInvalidArgumentException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _NSStreamDataWrittenToMemoryStreamKey
__ CoreFoundation: _NSSystemTimeZoneDidChangeNotification
__ CoreFoundation: _NSURLFileProtectionKey
__ CoreFoundation: _NSURLFileProtectionNone
__ CoreFoundation: _NSURLFileSecurityKey
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSCalendar
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSInputStream
__ CoreFoundation: _OBJC_CLASS_$_NSLocale
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSNull
__ CoreFoundation: _OBJC_CLASS_$_NSOutputStream
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimeZone
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: _OBJC_CLASS_$_NSUserDefaults
__ CoreFoundation: __CFCopySystemVersionDictionaryValue
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___NSDictionary0__struct
__ CoreFoundation: ___kCFBooleanFalse
__ CoreFoundation: ___kCFBooleanTrue
__ CoreFoundation: __kCFSystemVersionBuildVersionKey
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreGraphics: _CGAffineTransformIdentity
__ CoreGraphics: _CGAffineTransformInvert
__ CoreGraphics: _CGAffineTransformMakeRotation
__ CoreGraphics: _CGAffineTransformMakeScale
__ CoreGraphics: _CGAffineTransformTranslate
__ CoreGraphics: _CGBitmapAllocateData
__ CoreGraphics: _CGBitmapContextCreate
__ CoreGraphics: _CGBitmapContextCreateImage
__ CoreGraphics: _CGBitmapContextGetData
__ CoreGraphics: _CGBitmapFreeData
__ CoreGraphics: _CGBitmapGetAlignedBytesPerRow
__ CoreGraphics: _CGColorCreate
__ CoreGraphics: _CGColorCreateSRGB
__ CoreGraphics: _CGColorGetColorSpace
__ CoreGraphics: _CGColorGetNumberOfComponents
__ CoreGraphics: _CGColorRelease
__ CoreGraphics: _CGColorSpaceCopyName
__ CoreGraphics: _CGColorSpaceCopyPropertyList
__ CoreGraphics: _CGColorSpaceCreateDeviceCMYK
__ CoreGraphics: _CGColorSpaceCreateDeviceGray
__ CoreGraphics: _CGColorSpaceCreateDeviceRGB
__ CoreGraphics: _CGColorSpaceCreateWithName
__ CoreGraphics: _CGColorSpaceCreateWithPropertyList
__ CoreGraphics: _CGColorSpaceEqualToColorSpace
__ CoreGraphics: _CGColorSpaceGetModel
__ CoreGraphics: _CGColorSpaceGetNumberOfComponents
__ CoreGraphics: _CGColorSpaceGetType
__ CoreGraphics: _CGColorSpaceIsICCCompatible
__ CoreGraphics: _CGColorSpaceIsWideGamutRGB
__ CoreGraphics: _CGColorSpaceRelease
__ CoreGraphics: _CGColorSpaceRetain
__ CoreGraphics: _CGColorSpaceUsesExtendedRange
__ CoreGraphics: _CGContextClearRect
__ CoreGraphics: _CGContextDrawImage
__ CoreGraphics: _CGContextDrawLinearGradient
__ CoreGraphics: _CGContextFillRect
__ CoreGraphics: _CGContextGetCTM
__ CoreGraphics: _CGContextRelease
__ CoreGraphics: _CGContextScaleCTM
__ CoreGraphics: _CGContextSetBaseCTM
__ CoreGraphics: _CGContextSetFillColorWithColor
__ CoreGraphics: _CGContextSetInterpolationQuality
__ CoreGraphics: _CGContextTranslateCTM
__ CoreGraphics: _CGDataProviderCopyData
__ CoreGraphics: _CGDataProviderCreateWithCFData
__ CoreGraphics: _CGDataProviderCreateWithData
__ CoreGraphics: _CGDataProviderCreateWithFilename
__ CoreGraphics: _CGDataProviderRelease
__ CoreGraphics: _CGGradientCreateWithColors
__ CoreGraphics: _CGGradientRelease
__ CoreGraphics: _CGImageBlockGetBytesPerRow
__ CoreGraphics: _CGImageBlockGetData
__ CoreGraphics: _CGImageBlockSetGetImageBlock
__ CoreGraphics: _CGImageBlockSetRelease
__ CoreGraphics: _CGImageCreate
__ CoreGraphics: _CGImageCreateCopyWithColorSpace
__ CoreGraphics: _CGImageCreateWithImageInRect
__ CoreGraphics: _CGImageGetBitmapInfo
__ CoreGraphics: _CGImageGetBitsPerComponent
__ CoreGraphics: _CGImageGetBitsPerPixel
__ CoreGraphics: _CGImageGetBytesPerRow
__ CoreGraphics: _CGImageGetColorSpace
__ CoreGraphics: _CGImageGetDataProvider
__ CoreGraphics: _CGImageGetHeight
__ CoreGraphics: _CGImageGetImageProvider
__ CoreGraphics: _CGImageGetWidth
__ CoreGraphics: _CGImageMaskCreate
__ CoreGraphics: _CGImageProviderCopyImageBlockSetWithOptions
__ CoreGraphics: _CGImageProviderGetColorSpace
__ CoreGraphics: _CGImageRelease
__ CoreGraphics: _CGImageSetProperty
__ CoreGraphics: _CGPointZero
__ CoreGraphics: _CGRectApplyAffineTransform
__ CoreGraphics: _CGRectCreateDictionaryRepresentation
__ CoreGraphics: _CGRectDivide
__ CoreGraphics: _CGRectEqualToRect
__ CoreGraphics: _CGRectGetHeight
__ CoreGraphics: _CGRectGetMaxX
__ CoreGraphics: _CGRectGetMaxY
__ CoreGraphics: _CGRectGetMidX
__ CoreGraphics: _CGRectGetMidY
__ CoreGraphics: _CGRectGetMinX
__ CoreGraphics: _CGRectGetMinY
__ CoreGraphics: _CGRectGetWidth
__ CoreGraphics: _CGRectInset
__ CoreGraphics: _CGRectIntersection
__ CoreGraphics: _CGRectIntersectsRect
__ CoreGraphics: _CGRectIsEmpty
__ CoreGraphics: _CGRectNull
__ CoreGraphics: _CGRectUnion
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreGraphics: _kCGColorSpaceDisplayP3
__ CoreGraphics: _kCGColorSpaceExtendedSRGB
__ CoreGraphics: _kCGColorSpaceGenericGrayGamma2_2
__ CoreGraphics: _kCGColorSpaceSRGB
__ CoreGraphics: _kCGImageBlockFormatBGRx8
__ CoreGraphics: _kCGImageBlockFormatRequest
__ CoreGraphics: _kCGImageBlockMarkAsReadOnlyRequest
__ CoreGraphics: _kCGImageBlockSingletonRequest
__ CoreGraphics: _kCGImagePropertyIOSurface
__ CoreMedia: _CMTimeRangeMake
__ CoreMedia: _kCMTimeZero
__ CoreMotion: _OBJC_CLASS_$_CMGestureManager
__ CoreMotion: _OBJC_CLASS_$_CMMotionManager
__ CoreServices: _OBJC_CLASS_$_LSApplicationProxy
__ CoreServices: _kUTTypePNG
__ CoreText: _CTFontCreateCopyWithAttributes
__ CoreText: _CTFontCreateUIFontForLanguage
__ CoreText: _CTFontDescriptorCreateWithAttributes
__ CoreText: _kCTFontGradeTrait
__ CoreText: _kCTFontTraitsAttribute
__ CoreText: _kCTFontUIFontDesignSoft
__ CoreText: _kCTFontUIFontDesignTrait
__ CoreVideo: _CVPixelBufferCreateWithIOSurface
__ CoreVideo: _CVPixelBufferGetIOSurface
__ CoreVideo: _CVPixelBufferRelease
__ EventKitUI: _CalendarPreferencesNotification_OverlayCalendarID
__ EventKitUI: _OBJC_CLASS_$_CalendarPreferences
__ Foundation: _NSCocoaErrorDomain
__ Foundation: _NSFilePosixPermissions
__ Foundation: _NSFileProtectionKey
__ Foundation: _NSFileProtectionNone
__ Foundation: _NSHomeDirectory
__ Foundation: _NSLog
__ Foundation: _NSPOSIXErrorDomain
__ Foundation: _NSProcessInfoPowerStateDidChangeNotification
__ Foundation: _NSProcessInfoThermalStateDidChangeNotification
__ Foundation: _NSSearchPathForDirectoriesInDomains
__ Foundation: _NSSelectorFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSStringFromRect
__ Foundation: _NSStringFromSize
__ Foundation: _NSTemporaryDirectory
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSConstantDoubleNumber
__ Foundation: _OBJC_CLASS_$_NSConstantIntegerNumber
__ Foundation: _OBJC_CLASS_$_NSDateComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSFileManager
__ Foundation: _OBJC_CLASS_$_NSFileWrapper
__ Foundation: _OBJC_CLASS_$_NSHashTable
__ Foundation: _OBJC_CLASS_$_NSIndexSet
__ Foundation: _OBJC_CLASS_$_NSKeyedArchiver
__ Foundation: _OBJC_CLASS_$_NSKeyedUnarchiver
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableIndexSet
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSNumberFormatter
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSURLSession
__ Foundation: _OBJC_CLASS_$_NSURLSessionConfiguration
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: __NSFullMethodName
__ FrontBoardServices: _BSDateTimeCacheChangedNotification
__ FrontBoardServices: _BSDegreesToRadians
__ FrontBoardServices: _BSDispatchMain
__ FrontBoardServices: _BSDispatchQueueAssert
__ FrontBoardServices: _BSDispatchQueueAssertMain
__ FrontBoardServices: _BSDispatchQueueAssertNot
__ FrontBoardServices: _BSDispatchQueueCreate
__ FrontBoardServices: _BSDispatchQueueCreateSerial
__ FrontBoardServices: _BSDispatchQueueCreateWithQualityOfService
__ FrontBoardServices: _BSEqualBools
__ FrontBoardServices: _BSEqualObjects
__ FrontBoardServices: _BSFloatApproximatelyEqualToFloat
__ FrontBoardServices: _BSFloatEqualToFloat
__ FrontBoardServices: _BSFloatIsZero
__ FrontBoardServices: _BSFloatLessThanOrEqualToFloat
__ FrontBoardServices: _BSFloatRoundForScale
__ FrontBoardServices: _BSIntervalZero
__ FrontBoardServices: _BSRectRoundForScale
__ FrontBoardServices: _BSRunLoopPerformAfterCACommit
__ FrontBoardServices: _BSSettingFlagForBool
__ FrontBoardServices: _BSSettingFlagIsYes
__ FrontBoardServices: _BSStringFromBOOL
__ FrontBoardServices: _BSSystemSharedResourcesDirectoryForIdentifier
__ FrontBoardServices: _OBJC_CLASS_$_BSAbstractDefaultDomain
__ FrontBoardServices: _OBJC_CLASS_$_BSAnimationSettings
__ FrontBoardServices: _OBJC_CLASS_$_BSDateFormatterCache
__ FrontBoardServices: _OBJC_CLASS_$_BSDescriptionBuilder
__ FrontBoardServices: _OBJC_CLASS_$_BSDispatchQueueAttributes
__ FrontBoardServices: _OBJC_CLASS_$_BSHashBuilder
__ FrontBoardServices: _OBJC_CLASS_$_BSMonotonicReferenceTime
__ FrontBoardServices: _OBJC_CLASS_$_BSMutableAnimationSettings
__ FrontBoardServices: _OBJC_CLASS_$_BSMutableSpringAnimationSettings
__ FrontBoardServices: _OBJC_CLASS_$_BSPathProviderFactory
__ FrontBoardServices: _OBJC_CLASS_$_BSPlatform
__ FrontBoardServices: _OBJC_METACLASS_$_BSAbstractDefaultDomain
__ IOKit: _IOConnectCallScalarMethod
__ IOKit: _IOConnectCallStructMethod
__ IOKit: _IOHIDEventGetIntegerValue
__ IOKit: _IOHIDEventGetTimeStamp
__ IOKit: _IOHIDEventGetType
__ IOKit: _IOObjectRelease
__ IOKit: _IORegistryEntryCreateCFProperty
__ IOKit: _IORegistryEntrySearchCFProperty
__ IOKit: _IOServiceGetMatchingService
__ IOKit: _IOServiceMatching
__ IOKit: _IOServiceOpen
__ IOKit: _kIOMasterPortDefault
__ IOMobileFramebuffer: _IOMobileFramebufferGetCanvasSizes
__ IOMobileFramebuffer: _IOMobileFramebufferOpenByName
__ IOSurface: _IOSurfaceCopyValue
__ IOSurface: _IOSurfaceCreate
__ IOSurface: _IOSurfaceGetHeight
__ IOSurface: _IOSurfaceGetPixelFormat
__ IOSurface: _IOSurfaceGetPropertyMaximum
__ IOSurface: _IOSurfaceGetWidth
__ IOSurface: _IOSurfaceSetValue
__ IOSurface: _IOSurfaceWrapClientImage
__ IOSurface: _OBJC_CLASS_$_IOSurface
__ IOSurface: _kIOSurfaceBytesPerElement
__ IOSurface: _kIOSurfaceCacheMode
__ IOSurface: _kIOSurfaceColorSpace
__ IOSurface: _kIOSurfaceHeight
__ IOSurface: _kIOSurfacePixelFormat
__ IOSurface: _kIOSurfaceWidth
__ ImageIO: _CGImageCopySourceData
__ ImageIO: _CGImageCreateFromIOSurface
__ ImageIO: _CGImageDestinationAddImage
__ ImageIO: _CGImageDestinationCreateWithURL
__ ImageIO: _CGImageDestinationFinalize
__ ImageIO: _CGImageSourceCopyPropertiesAtIndex
__ ImageIO: _CGImageSourceCreateImageAtIndex
__ ImageIO: _CGImageSourceCreateThumbnailAtIndex
__ ImageIO: _CGImageSourceCreateWithData
__ ImageIO: _CGImageSourceCreateWithDataProvider
__ ImageIO: _CGImageSourceCreateWithURL
__ ImageIO: _CGImageSourceGetCount
__ ImageIO: _kCGImageComponentTypeRequest
__ ImageIO: _kCGImagePreferredColorConversionMode
__ ImageIO: _kCGImagePropertyPixelHeight
__ ImageIO: _kCGImagePropertyPixelWidth
__ ImageIO: _kCGImageSkipCIF10SRGBCheck
__ ImageIO: _kCGImageSourceCreateThumbnailFromImageAlways
__ ImageIO: _kCGImageSourceShouldCache
__ ImageIO: _kCGImageSourceThumbnailMaxPixelSize
__ IntlPreferences: _OBJC_CLASS_$_IntlUtility
__ ManagedConfiguration: _MCFeatureEraseContentAndSettingsAllowed
__ ManagedConfiguration: _MCFeatureMaximumFailedPasscodeAttempts
__ ManagedConfiguration: _OBJC_CLASS_$_MCProfileConnection
__ Metal: _MTLCreateSystemDefaultDevice
__ Metal: _OBJC_CLASS_$_MTLTextureDescriptor
__ MobileKeyBag: _MKBDeviceLockAssertion
__ MobileKeyBag: _MKBDeviceUnlockedSinceBoot
__ MobileKeyBag: _MKBEventsRegister
__ MobileKeyBag: _MKBEventsUnregister
__ MobileKeyBag: _MKBGetDeviceConfigurations
__ MobileKeyBag: _MKBGetDeviceLockState
__ MobileKeyBag: _MKBGetDeviceLockStateInfo
__ MobileKeyBag: _MKBKeyBagKeyStashCommit
__ MobileKeyBag: _MKBKeyBagKeyStashCreate
__ MobileKeyBag: _MKBKeyBagKeyStashVerify
__ MobileKeyBag: _MKBKeyBagPerformRecovery
__ MobileKeyBag: _MKBLockDevice
__ MobileKeyBag: _MKBUnlockDevice
__ MobileKeyBag: _kMKBConfigMaxUnlockAttempts
__ MobileKeyBag: _kMKBInfoBackOff
__ MobileKeyBag: _kMKBInfoBagState
__ MobileKeyBag: _kMKBInfoFailedAttempts
__ MobileKeyBag: _kMKBInfoLockState
__ MobileKeyBag: _kMKBInfoPermanentlyBlocked
__ MobileKeyBag: _kMKBInfoRecoveryCountdown
__ MobileKeyBag: _kMKBInfoShouldWipe
__ MobileObliteration: _Mobile_Obliterate
__ MobileObliteration: _kDisplayProgressBarKey
__ MobileObliteration: _kObliterateDataPartition
__ MobileObliteration: _kObliterationMessageKey
__ MobileObliteration: _kObliterationTypeKey
__ MobileObliteration: _kObliterationTypeMarkStart
__ MobileObliteration: _kObliterationTypeWipeAndBrick
__ MobileObliteration: _kSkipDataObliteration
__ PersistentConnection: _OBJC_CLASS_$_PCPersistentTimer
__ PrototypeTools: _OBJC_CLASS_$_PTButtonRow
__ PrototypeTools: _OBJC_CLASS_$_PTChoiceRow
__ PrototypeTools: _OBJC_CLASS_$_PTDomain
__ PrototypeTools: _OBJC_CLASS_$_PTDrillDownRow
__ PrototypeTools: _OBJC_CLASS_$_PTEditFloatRow
__ PrototypeTools: _OBJC_CLASS_$_PTModule
__ PrototypeTools: _OBJC_CLASS_$_PTRestoreDefaultSettingsRowAction
__ PrototypeTools: _OBJC_CLASS_$_PTRow
__ PrototypeTools: _OBJC_CLASS_$_PTSettings
__ PrototypeTools: _OBJC_CLASS_$_PTSliderRow
__ PrototypeTools: _OBJC_CLASS_$_PTSwitchRow
__ PrototypeTools: _OBJC_METACLASS_$_PTDomain
__ PrototypeTools: _OBJC_METACLASS_$_PTRow
__ PrototypeTools: _OBJC_METACLASS_$_PTSettings
__ PrototypeToolsUI: _OBJC_CLASS_$_PTUIRowTableViewCell
__ PrototypeToolsUI: _OBJC_METACLASS_$_PTUIRowTableViewCell
__ QuartzCore: _CACurrentMediaTime
__ QuartzCore: _CARenderServerRenderLayer
__ QuartzCore: _CATransform3DIdentity
__ QuartzCore: _CATransform3DMakeScale
__ QuartzCore: _OBJC_CLASS_$_CABackdropLayer
__ QuartzCore: _OBJC_CLASS_$_CABasicAnimation
__ QuartzCore: _OBJC_CLASS_$_CADisplayLink
__ QuartzCore: _OBJC_CLASS_$_CAFilter
__ QuartzCore: _OBJC_CLASS_$_CAGradientLayer
__ QuartzCore: _OBJC_CLASS_$_CALayer
__ QuartzCore: _OBJC_CLASS_$_CAMediaTimingFunction
__ QuartzCore: _OBJC_CLASS_$_CARenderer
__ QuartzCore: _OBJC_CLASS_$_CASpringAnimation
__ QuartzCore: _OBJC_CLASS_$_CATransaction
__ QuartzCore: _OBJC_METACLASS_$_CALayer
__ QuartzCore: _kCAFilterColorDodgeBlendMode
__ QuartzCore: _kCAFilterColorSaturate
__ QuartzCore: _kCAFilterDarkenBlendMode
__ QuartzCore: _kCAFilterDarkenSourceOver
__ QuartzCore: _kCAFilterLightenBlendMode
__ QuartzCore: _kCAFilterLuminanceMap
__ QuartzCore: _kCAFilterMultiplyBlendMode
__ QuartzCore: _kCAGradientLayerAxial
__ QuartzCore: _kCAMediaTimingFunctionEaseIn
__ QuartzCore: _kCAMediaTimingFunctionEaseInEaseOut
__ QuartzCore: _kCAMediaTimingFunctionEaseOut
__ QuartzCore: _kCAMediaTimingFunctionLinear
__ QuartzCore: _kCARendererColorSpace
__ QuartzCore: _kCARendererMetalCommandQueue
__ SoftLinking: __sl_dlopen_audited
__ SpringBoardServices: _NSStringFromAnalyticsQueryName
__ SpringBoardServices: _OBJC_CLASS_$_SBSAnalyticsState
__ SpringBoardServices: _OBJC_CLASS_$_SBSApplicationShortcutService
__ SpringBoardServices: _SBDisplayMetrics
__ SpringBoardServices: _SBLogAuthenticationAssertions
__ SpringBoardServices: _SBLogAuthenticationController
__ SpringBoardServices: _SBLogAuthenticationKeybag
__ SpringBoardServices: _SBLogAuthenticationModel
__ SpringBoardServices: _SBLogAuthenticationRequests
__ SpringBoardServices: _SBLogCommon
__ SpringBoardServices: _SBLogDashBoard
__ SpringBoardServices: _SBLogMotionGesture
__ SpringBoardServices: _SBLoggingSubsystem
__ SpringBoardServices: ___sb__mainScreenReferenceBounds
__ SpringBoardServices: ___sb__runningInSpringBoard
__ SpringBoardServices: _kSBSAnalyticsTimestampKey
__ UIKit: _CGRectFromString
__ UIKit: _NSFontAttributeName
__ UIKit: _NSStringFromCGPoint
__ UIKit: _NSStringFromCGRect
__ UIKit: _NSStringFromCGSize
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIButton
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIColorEffect
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRenderer
__ UIKit: _OBJC_CLASS_$_UIGraphicsImageRendererFormat
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageView
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UIScrollView
__ UIKit: _OBJC_CLASS_$_UISpringLoadedInteraction
__ UIKit: _OBJC_CLASS_$_UIStatusBar
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _OBJC_CLASS_$_UIUserInterfaceStyleArbiter
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_CLASS_$_UIViewController
__ UIKit: _OBJC_CLASS_$_UIWebClip
__ UIKit: _OBJC_CLASS_$_UIWindow
__ UIKit: _OBJC_CLASS_$__UIBackdropViewSettings
__ UIKit: _OBJC_CLASS_$__UILegibilitySettings
__ UIKit: _OBJC_CLASS_$__UILegibilitySettingsProvider
__ UIKit: _OBJC_CLASS_$__UIParallaxMotionEffect
__ UIKit: _OBJC_CLASS_$__UISettings
__ UIKit: _OBJC_METACLASS_$_UIButton
__ UIKit: _OBJC_METACLASS_$_UIGestureRecognizer
__ UIKit: _OBJC_METACLASS_$_UIImage
__ UIKit: _OBJC_METACLASS_$_UIImageView
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UIViewController
__ UIKit: _OBJC_METACLASS_$_UIWindow
__ UIKit: _OBJC_METACLASS_$__UISettings
__ UIKit: _UIAccessibilityBoldTextStatusDidChangeNotification
__ UIKit: _UIAccessibilityIsReduceTransparencyEnabled
__ UIKit: _UIAccessibilityLargeTextChangedNotification
__ UIKit: _UIApp
__ UIKit: _UIContentSizeCategoryAccessibilityExtraExtraLarge
__ UIKit: _UIContentSizeCategoryAccessibilityExtraLarge
__ UIKit: _UIContentSizeCategoryAccessibilityLarge
__ UIKit: _UIContentSizeCategoryAccessibilityMedium
__ UIKit: _UIContentSizeCategoryCompareToCategory
__ UIKit: _UIContentSizeCategoryDidChangeNotification
__ UIKit: _UIContentSizeCategoryExtraExtraExtraLarge
__ UIKit: _UIContentSizeCategoryExtraExtraLarge
__ UIKit: _UIContentSizeCategoryExtraLarge
__ UIKit: _UIContentSizeCategoryExtraSmall
__ UIKit: _UIContentSizeCategoryIsAccessibilityCategory
__ UIKit: _UIContentSizeCategoryLarge
__ UIKit: _UIContentSizeCategoryMedium
__ UIKit: _UIContentSizeCategorySmall
__ UIKit: _UICreateCGImageFromIOSurface
__ UIKit: _UIEdgeInsetsRotate
__ UIKit: _UIEdgeInsetsZero
__ UIKit: _UIFloorToScale
__ UIKit: _UIFontTextStyleBody
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetCurrentContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ UIKit: _UIGraphicsPopContext
__ UIKit: _UIGraphicsPushContext
__ UIKit: _UIImageJPEGRepresentation
__ UIKit: _UIImagePNGRepresentation
__ UIKit: _UIIntegralTransform
__ UIKit: _UIRectCenteredIntegralRect
__ UIKit: _UIRectCenteredXInRect
__ UIKit: _UIRectCenteredXInRectScale
__ UIKit: _UIRectCenteredYInRectScale
__ UIKit: _UIRectFill
__ UIKit: _UIRectGetCenter
__ UIKit: _UIRectInset
__ UIKit: _UIRectIntegralWithScale
__ UIKit: _UIRoundToScreenScale
__ UIKit: _UISystemRootDirectory
__ UIKit: _UIWindowDidBecomeKeyNotification
__ UIKit: __EXIFOrientationForUIImageOrientation
__ UIKit: __UIAngleInRadiansForRotationBetweenAngleAndAngleInDirection
__ UIKit: __UIBackdropViewSettingsStackingLevelDefault
__ UIKit: __UIInterfaceOrientationRotationDirectionForRotationFromInterfaceOrientationToInterfaceOrientation
__ UIKit: __UILegibilityStrengthLow
__ UIKit: __UIMotionEffectsEnabledDidChangeNotification
__ UIKit: __UISystemApplicationDidUnlockNotification
__ UIKit: __UISystemApplicationWillLockNotification
__ VideoToolbox: _FigCreateIOSurfaceBackedCVPixelBufferWithAttributes
__ VideoToolbox: _VTPixelTransferSessionCreate
__ VideoToolbox: _VTPixelTransferSessionInvalidate
__ VideoToolbox: _VTPixelTransferSessionTransferImage
__ VideoToolbox: _VTSessionSetProperty
__ VideoToolbox: _kVTPixelTransferPropertyKey_AllowLowQualityScaling
__ VideoToolbox: _kVTPixelTransferPropertyKey_SourceCropRectangle
__ libMobileGestalt.dylib: _MGCopyAnswer
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libMobileGestalt.dylib: _MGGetSInt32Answer
__ libSystem.B.dylib: _CC_SHA1
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___chkstk_darwin
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___sincos_stret
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __os_signpost_emit_with_name_impl
__ libSystem.B.dylib: _arc4random
__ libSystem.B.dylib: _arc4random_uniform
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _calloc
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_group_create
__ libSystem.B.dylib: _dispatch_group_enter
__ libSystem.B.dylib: _dispatch_group_leave
__ libSystem.B.dylib: _dispatch_group_notify
__ libSystem.B.dylib: _dispatch_group_wait
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _kdebug_trace
__ libSystem.B.dylib: _lstat
__ libSystem.B.dylib: _mach_continuous_time
__ libSystem.B.dylib: _mach_get_times
__ libSystem.B.dylib: _mach_task_self_
__ libSystem.B.dylib: _mach_timebase_info
__ libSystem.B.dylib: _madvise
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memcmp
__ libSystem.B.dylib: _memcpy
__ libSystem.B.dylib: _memmove
__ libSystem.B.dylib: _mkdir
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_get_state
__ libSystem.B.dylib: _notify_post
__ libSystem.B.dylib: _notify_register_check
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _notify_set_state
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_signpost_enabled
__ libSystem.B.dylib: _os_transaction_create
__ libSystem.B.dylib: _os_unfair_lock_assert_not_owner
__ libSystem.B.dylib: _os_unfair_lock_assert_owner
__ libSystem.B.dylib: _os_unfair_lock_lock
__ libSystem.B.dylib: _os_unfair_lock_unlock
__ libSystem.B.dylib: _printf
__ libSystem.B.dylib: _stat
__ libSystem.B.dylib: _statfs
__ libSystem.B.dylib: _strnlen
__ libSystem.B.dylib: _sync
__ libSystem.B.dylib: _tan
__ libSystem.B.dylib: _usleep
__ libSystem.B.dylib: dyld_stub_binder
__ libicucore.A.dylib: _u_errorName
__ libicucore.A.dylib: _uset_freeze
__ libicucore.A.dylib: _uset_openPattern
__ libicucore.A.dylib: _uset_span
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _class_copyPropertyList
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_opt_self
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_sync_enter
__ libobjc.A.dylib: _objc_sync_exit
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
__ libobjc.A.dylib: _property_copyAttributeValue
__ libobjc.A.dylib: _property_getName
SBFTodayGestureSettings : PTSettings /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
 @property  double sideSpringTension
 @property  double sideSpringFriction
 @property  double interactiveSideSpringTension
 @property  double interactiveSideSpringFriction
 @property  SBFFluidBehaviorSettings *overlayPositionSettings
 @property  SBFFluidBehaviorSettings *overlayBackdropSettings
 @property  BOOL scaleAnimationSettingsWithGestureVelocity
 @property  double minimumVelocity
 @property  double maximumVelocity
 @property  double dampingRatioAtMinimumVelocity
 @property  double dampingRatioAtMaximumVelocity
 @property  double responseAtMinimumVelocity
 @property  double responseAtMaximumVelocity

  // class methods
  +[SBFTodayGestureSettings settingsControllerModule]

  // instance methods
  -[SBFTodayGestureSettings setDefaultValues]
  -[SBFTodayGestureSettings .cxx_destruct]
  -[SBFTodayGestureSettings setSideSpringTension:]
  -[SBFTodayGestureSettings setSideSpringFriction:]
  -[SBFTodayGestureSettings setInteractiveSideSpringTension:]
  -[SBFTodayGestureSettings setInteractiveSideSpringFriction:]
  -[SBFTodayGestureSettings overlayPositionSettings]
  -[SBFTodayGestureSettings overlayBackdropSettings]
  -[SBFTodayGestureSettings setScaleAnimationSettingsWithGestureVelocity:]
  -[SBFTodayGestureSettings setMinimumVelocity:]
  -[SBFTodayGestureSettings setMaximumVelocity:]
  -[SBFTodayGestureSettings setDampingRatioAtMinimumVelocity:]
  -[SBFTodayGestureSettings setDampingRatioAtMaximumVelocity:]
  -[SBFTodayGestureSettings setResponseAtMinimumVelocity:]
  -[SBFTodayGestureSettings setResponseAtMaximumVelocity:]
  -[SBFTodayGestureSettings setOverlayPositionSettings:]
  -[SBFTodayGestureSettings setOverlayBackdropSettings:]
  -[SBFTodayGestureSettings scaleAnimationSettingsWithGestureVelocity]
  -[SBFTodayGestureSettings minimumVelocity]
  -[SBFTodayGestureSettings maximumVelocity]
  -[SBFTodayGestureSettings dampingRatioAtMinimumVelocity]
  -[SBFTodayGestureSettings dampingRatioAtMaximumVelocity]
  -[SBFTodayGestureSettings responseAtMinimumVelocity]
  -[SBFTodayGestureSettings responseAtMaximumVelocity]
  -[SBFTodayGestureSettings sideSpringTension]
  -[SBFTodayGestureSettings sideSpringFriction]
  -[SBFTodayGestureSettings interactiveSideSpringTension]
  -[SBFTodayGestureSettings interactiveSideSpringFriction]


SBFPagedScrollView : BSUIScrollView /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 @property  unsigned long currentPageIndex
 @property  {_NSRange=QQ} visiblePageRange
 @property  NSArray *pageViews
 @property  BOOL gestureEnabled

  // instance methods
  -[SBFPagedScrollView _bs_willBeginScrolling]
  -[SBFPagedScrollView initWithFrame:]
  -[SBFPagedScrollView contentOffsetForPageAtIndex:]
  -[SBFPagedScrollView scrollToPageAtIndex:withAnimationSettings:withCompletion:]
  -[SBFPagedScrollView _bs_didEndScrolling]
  -[SBFPagedScrollView visiblePageRange]
  -[SBFPagedScrollView currentScrollInterval]
  -[SBFPagedScrollView .cxx_destruct]
  -[SBFPagedScrollView setVisiblePageRange:]
  -[SBFPagedScrollView pageRelativeScrollOffset]
  -[SBFPagedScrollView _updateVisiblePages]
  -[SBFPagedScrollView scrollToPageAtIndex:animated:withCompletion:]
  -[SBFPagedScrollView resetContentOffsetToCurrentPage]
  -[SBFPagedScrollView pageViews]
  -[SBFPagedScrollView scrollToPageAtIndex:animated:]
  -[SBFPagedScrollView setGestureEnabled:]
  -[SBFPagedScrollView setPageViews:]
  -[SBFPagedScrollView layoutPages]
  -[SBFPagedScrollView currentPageIndex]
  -[SBFPagedScrollView gestureEnabled]
  -[SBFPagedScrollView _bs_didScrollWithContext:]
  -[SBFPagedScrollView _updateCurrentPageForScrollOffset]
  -[SBFPagedScrollView _layoutScrollView]
  -[SBFPagedScrollView unclippedPageRelativeScrollOffset]
  -[SBFPagedScrollView setFrame:]
  -[SBFPagedScrollView gestureRecognizer:shouldReceiveTouch:]
  -[SBFPagedScrollView setCurrentPageIndex:]
  -[SBFPagedScrollView layoutSubviews]


SBFObliterationController : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFObliterationController sharedInstance]

  // instance methods
  -[SBFObliterationController wipeAndBrickShowingProgress:reason:]
  -[SBFObliterationController _doObliterateWithType:eraseDataPlan:showingProgress:options:]
  -[SBFObliterationController obliterateDataPartitionShowingProgress:skipDataObliteration:eraseDataPlan:reason:]
  -[SBFObliterationController markObliterationStart]


SBFRemoteBasebandLoggingManager : NSObject /usr/lib/libSystem.B.dylib
 @property  CellularLogging *cellularLogging
 @property  NSHashTable *observers

  // class methods
  +[SBFRemoteBasebandLoggingManager sharedInstance]

  // instance methods
  -[SBFRemoteBasebandLoggingManager init]
  -[SBFRemoteBasebandLoggingManager setObservers:]
  -[SBFRemoteBasebandLoggingManager .cxx_destruct]
  -[SBFRemoteBasebandLoggingManager observers]
  -[SBFRemoteBasebandLoggingManager removeObserver:]
  -[SBFRemoteBasebandLoggingManager cellularLogging]
  -[SBFRemoteBasebandLoggingManager setCellularLogging:]
  -[SBFRemoteBasebandLoggingManager addObserver:]
  -[SBFRemoteBasebandLoggingManager _notifyObservers]
  -[SBFRemoteBasebandLoggingManager isLogCollectionEnabled]


SBSoftwareUpdateDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL developerInstallBrickAlertShown7DayWarning
 @property  BOOL developerInstallBrickAlertShown3DayWarning
 @property  BOOL developerInstallBrickAlertShownTomorrowWarning

  // instance methods
  -[SBSoftwareUpdateDefaults clearDeveloperInstallBrickAlerts]
  -[SBSoftwareUpdateDefaults _bindAndRegisterDefaults]


SBFLayerSnapshot : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFLayerSnapshot createSnapshotFromLayer:buffer:]


SBIconDefaults : SBAbstractSpringBoardDefaultDomain
 @property  long long maxIconListCount
 @property  BOOL didShowIconReorderAlert
 @property  BOOL shouldDisableLiveIcons
 @property  BOOL suppressSetCurrentPage
 @property  BOOL suppressAppShortcutTruncation
 @property  NSDictionary *legacyIconState
 @property  NSDictionary *legacyIconState2

  // instance methods
  -[SBIconDefaults clearLegacyDefaults]
  -[SBIconDefaults _bindAndRegisterDefaults]


SBFSpringLoadedInteractionBehavior : NSObject /usr/lib/libSystem.B.dylib <UISpringLoadedInteractionBehavior>
 @property  <SBFSpringLoadedInteractionBehaviorDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFSpringLoadedInteractionBehavior .cxx_destruct]
  -[SBFSpringLoadedInteractionBehavior interactionDidFinish:]
  -[SBFSpringLoadedInteractionBehavior setDelegate:]
  -[SBFSpringLoadedInteractionBehavior delegate]
  -[SBFSpringLoadedInteractionBehavior shouldAllowInteraction:withContext:]


SBFSpringLoadedInteractionEffect : NSObject /usr/lib/libSystem.B.dylib <UISpringLoadedInteractionEffect>
 @property  BOOL useFastBlinkAnimation
 @property  <SBFSpringLoadedInteractionEffectDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFSpringLoadedInteractionEffect init]
  -[SBFSpringLoadedInteractionEffect fastBlinkAnimation]
  -[SBFSpringLoadedInteractionEffect .cxx_destruct]
  -[SBFSpringLoadedInteractionEffect interaction:didChangeWithContext:]
  -[SBFSpringLoadedInteractionEffect useFastBlinkAnimation]
  -[SBFSpringLoadedInteractionEffect setDelegate:]
  -[SBFSpringLoadedInteractionEffect setUseFastBlinkAnimation:]
  -[SBFSpringLoadedInteractionEffect delegate]


SBPowerDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL disableIdleSleep
 @property  BOOL hideACPower
 @property  BOOL hideLowPowerAlerts
 @property  long long lowBatteryLevel
 @property  BOOL trackPowerEvents

  // instance methods
  -[SBPowerDefaults _bindAndRegisterDefaults]


SBMultiUserDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL forceLoginWindow
 @property  BOOL disablesInternalDebugBlockingTasksUI

  // instance methods
  -[SBMultiUserDefaults _bindAndRegisterDefaults]


SBFMobileKeyBag : NSObject /usr/lib/libSystem.B.dylib
 @property  SBFMobileKeyBagState *state
 @property  SBFMobileKeyBagState *extendedState
 @property  BOOL hasBeenUnlockedSinceBoot
 @property  BOOL hasPasscodeSet
 @property  long long maxUnlockAttempts

  // class methods
  +[SBFMobileKeyBag sharedInstance]

  // instance methods
  -[SBFMobileKeyBag hasBeenUnlockedSinceBoot]
  -[SBFMobileKeyBag init]
  -[SBFMobileKeyBag _queue_createStashBag:]
  -[SBFMobileKeyBag unlockWithPasscode:error:]
  -[SBFMobileKeyBag dealloc]
  -[SBFMobileKeyBag createStashBag:completion:completionQueue:]
  -[SBFMobileKeyBag .cxx_destruct]
  -[SBFMobileKeyBag performAfterFirstUnlockSinceBootUsingBlock:]
  -[SBFMobileKeyBag maxUnlockAttempts]
  -[SBFMobileKeyBag beginRecovery:error:]
  -[SBFMobileKeyBag lockSkippingGracePeriod:]
  -[SBFMobileKeyBag waitForUnlockWithTimeout:]
  -[SBFMobileKeyBag _queue_lockStateExtended:]
  -[SBFMobileKeyBag _queue_setHasPasscodeIfNecessary:]
  -[SBFMobileKeyBag hasPasscodeSet]
  -[SBFMobileKeyBag createStashBag:completion:]
  -[SBFMobileKeyBag extendedState]
  -[SBFMobileKeyBag removeObserver:]
  -[SBFMobileKeyBag state]
  -[SBFMobileKeyBag _queue_verifyExpectedStashState:]
  -[SBFMobileKeyBag addObserver:]
  -[SBFMobileKeyBag _queue_firstUnlockOccurred]
  -[SBFMobileKeyBag _queue_handleKeybagStatusChanged]


SBSecurityDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL blockedForThermal
 @property  NSNumber *pendingDeviceWipe
 @property  NSNumber *blockedForPasscode
 @property  NSNumber *numberOfFailedPasscodeAttempts
 @property  NSNumber *unblockTimeFromReferenceDate
 @property  NSNumber *blockStateGeneration
 @property  BOOL deviceWipeEnabled
 @property  BOOL dontLockEver
 @property  BOOL allowLockAndUnlockWithCase
 @property  BOOL enableLayerBasedViewSecurity
 @property  BOOL reportSecureDrawViolations

  // instance methods
  -[SBSecurityDefaults deviceLockDefaultForKey:]
  -[SBSecurityDefaults setDeviceLockDefault:forKey:]
  -[SBSecurityDefaults _bindAndRegisterDefaults]


SBFLockScreenDateSubtitleDateView : SBFLockScreenDateSubtitleView
 @property  SBFLockScreenAlternateDateLabel *alternateDateLabel
 @property  double alignmentPercent
 @property  NSDate *date
 @property  BOOL useCompactDateFormat

  // class methods
  +[SBFLockScreenDateSubtitleDateView subtitleLabelToLunarDateLabelBaselineDifferenceY]
  +[SBFLockScreenDateSubtitleDateView scaledFontSize:withMaximumFontSizeCategory:]
  +[SBFLockScreenDateSubtitleDateView dateTimeLunarDateFontMetrics]
  +[SBFLockScreenDateSubtitleDateView dateTimeLunarDateFont]

  // instance methods
  -[SBFLockScreenDateSubtitleDateView setStrength:]
  -[SBFLockScreenDateSubtitleDateView _lunarDateLabelYOffsetFromDateLabel]
  -[SBFLockScreenDateSubtitleDateView subtitleLabelFrame]
  -[SBFLockScreenDateSubtitleDateView initWithDate:]
  -[SBFLockScreenDateSubtitleDateView dealloc]
  -[SBFLockScreenDateSubtitleDateView .cxx_destruct]
  -[SBFLockScreenDateSubtitleDateView date]
  -[SBFLockScreenDateSubtitleDateView setDate:]
  -[SBFLockScreenDateSubtitleDateView _setupAlternateDateLabel]
  -[SBFLockScreenDateSubtitleDateView useCompactDateFormat]
  -[SBFLockScreenDateSubtitleDateView setLegibilitySettings:]
  -[SBFLockScreenDateSubtitleDateView traitCollectionDidChange:]
  -[SBFLockScreenDateSubtitleDateView setUseCompactDateFormat:]
  -[SBFLockScreenDateSubtitleDateView setAlignmentPercent:]
  -[SBFLockScreenDateSubtitleDateView sizeThatFits:]
  -[SBFLockScreenDateSubtitleDateView alignmentPercent]
  -[SBFLockScreenDateSubtitleDateView _overlayCalendarDidChange]
  -[SBFLockScreenDateSubtitleDateView alternateDateLabel]
  -[SBFLockScreenDateSubtitleDateView alternateDateLabelFrame]
  -[SBFLockScreenDateSubtitleDateView _setDate:inTimeZone:]
  -[SBFLockScreenDateSubtitleDateView setAlternateDateLabel:]
  -[SBFLockScreenDateSubtitleDateView _updateDateLabelForCompact]
  -[SBFLockScreenDateSubtitleDateView layoutSubviews]


SBAccessibilityDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL allowReachability
 @property  BOOL reallyDisableReachability

  // instance methods
  -[SBAccessibilityDefaults _bindAndRegisterDefaults]


SBLockScreenDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL limitFeaturesForRemoteLock
 @property  BOOL showLegalText
 @property  BOOL showAuthenticationEngineeringUI
 @property  BOOL showSupervisionText
 @property  BOOL showQuickNoteFingerGestureRecognizer
 @property  BOOL forceWakeToMaps
 @property  double nowPlayingTimeout
 @property  BOOL weDontNeedNoEducation
 @property  BOOL useDefaultsValuesForCameraPrewarm
 @property  BOOL prewarmCameraOnSwipe
 @property  double cameraSwipePrewarmThreshold
 @property  BOOL prelaunchCameraOnSwipe
 @property  double cameraSwipePrelaunchThreshold
 @property  BOOL prewarmCameraOnButtonTouch
 @property  BOOL prelaunchCameraOnButtonTouch

  // instance methods
  -[SBLockScreenDefaults _bindAndRegisterDefaults]


SBFWallpaperOptions : NSObject /usr/lib/libSystem.B.dylib <NSCopying, BSDescriptionProviding, NSSecureCoding>
 @property  NSString *name
 @property  BOOL parallaxEnabled
 @property  double parallaxFactor
 @property  BOOL magnifyEnabled
 @property  double zoomScale
 @property  BOOL supportsCropping
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} cropRect
 @property  BOOL supportsRotation
 @property  double rotationAngle
 @property  BOOL portrait
 @property  BOOL hasVideo
 @property  double stillTimeInVideo
 @property  long long wallpaperMode
 @property  long long wallpaperStatus
 @property  NSDictionary *wallpaperKitData
 @property  NSData *persistentDataRepresentation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFWallpaperOptions supportsSecureCoding]
  +[SBFWallpaperOptions optionsWithName:parallaxFactor:zoomScale:supportsCropping:cropRect:portrait:]
  +[SBFWallpaperOptions optionsWithName:parallaxFactor:zoomScale:supportsCropping:cropRect:portrait:hasVideo:stillTimeInVideo:]
  +[SBFWallpaperOptions optionsWithName:parallaxFactor:zoomScale:supportsCropping:cropRect:portrait:hasVideo:stillTimeInVideo:wallpaperKitData:]
  +[SBFWallpaperOptions optionsWithName:parallaxFactor:zoomScale:supportsCropping:cropRect:portrait:hasVideo:stillTimeInVideo:wallpaperMode:wallpaperStatus:]
  +[SBFWallpaperOptions optionsWithName:parallaxFactor:zoomScale:supportsCropping:cropRect:supportsRotation:rotationAngle:portrait:hasVideo:stillTimeInVideo:wallpaperMode:wallpaperStatus:]
  +[SBFWallpaperOptions optionsWithName:parallaxFactor:zoomScale:supportsCropping:cropRect:portrait:hasVideo:stillTimeInVideo:wallpaperMode:wallpaperStatus:wallpaperKitData:]

  // instance methods
  -[SBFWallpaperOptions setWallpaperMode:]
  -[SBFWallpaperOptions setSupportsCropping:]
  -[SBFWallpaperOptions copyWithZone:]
  -[SBFWallpaperOptions setHasVideo:]
  -[SBFWallpaperOptions persistentPropertyList]
  -[SBFWallpaperOptions rotationAngle]
  -[SBFWallpaperOptions setMagnifyEnabled:]
  -[SBFWallpaperOptions wallpaperKitData]
  -[SBFWallpaperOptions setStillTimeInVideo:]
  -[SBFWallpaperOptions wallpaperMode]
  -[SBFWallpaperOptions setZoomScale:]
  -[SBFWallpaperOptions writeToURL:error:]
  -[SBFWallpaperOptions zoomScale]
  -[SBFWallpaperOptions init]
  -[SBFWallpaperOptions initWithContentsOfURL:]
  -[SBFWallpaperOptions initWithStream:]
  -[SBFWallpaperOptions supportsCropping]
  -[SBFWallpaperOptions cropRect]
  -[SBFWallpaperOptions stillTimeInVideo]
  -[SBFWallpaperOptions setWallpaperStatus:]
  -[SBFWallpaperOptions setParallaxFactor:]
  -[SBFWallpaperOptions isLooselyEqualToWallpaperOptions:]
  -[SBFWallpaperOptions setRotationAngle:]
  -[SBFWallpaperOptions supportsRotation]
  -[SBFWallpaperOptions hasVideo]
  -[SBFWallpaperOptions parallaxEnabled]
  -[SBFWallpaperOptions parallaxFactor]
  -[SBFWallpaperOptions setWallpaperKitData:]
  -[SBFWallpaperOptions .cxx_destruct]
  -[SBFWallpaperOptions name]
  -[SBFWallpaperOptions initWithPersistentDataRepresentation:]
  -[SBFWallpaperOptions succinctDescriptionBuilder]
  -[SBFWallpaperOptions setCropRect:]
  -[SBFWallpaperOptions encodeWithCoder:]
  -[SBFWallpaperOptions bestWallpaperSizeForWallpaperSize:wallpaperScale:deviceType:imageScale:]
  -[SBFWallpaperOptions isMagnifyEnabled]
  -[SBFWallpaperOptions succinctDescription]
  -[SBFWallpaperOptions isPortrait]
  -[SBFWallpaperOptions isEqual:]
  -[SBFWallpaperOptions wallpaperStatus]
  -[SBFWallpaperOptions initWithName:parallaxFactor:zoomScale:supportsCropping:cropRect:supportsRotation:rotationAngle:portrait:hasVideo:stillTimeInVideo:wallpaperMode:wallpaperStatus:wallpaperKitData:]
  -[SBFWallpaperOptions persistentDataRepresentation]
  -[SBFWallpaperOptions setName:]
  -[SBFWallpaperOptions descriptionWithMultilinePrefix:]
  -[SBFWallpaperOptions setSupportsRotation:]
  -[SBFWallpaperOptions initWithCoder:]
  -[SBFWallpaperOptions descriptionBuilderWithMultilinePrefix:]
  -[SBFWallpaperOptions setPortrait:]


SBFWallpaperUserDefaultsDataStore : NSObject /usr/lib/libSystem.B.dylib <SBFWallpaperDataStore, BSDescriptionProviding>
 @property  SBFWallpaperDefaults *wallpaperOptionsDefaults
 @property  SBWallpaperDefaults *userDefaults
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFWallpaperUserDefaultsDataStore removeWallpaperColorForVariants:]
  -[SBFWallpaperUserDefaultsDataStore proceduralWallpaperInfoForVariant:]
  -[SBFWallpaperUserDefaultsDataStore removeWallpaperImageDataTypes:forVariants:]
  -[SBFWallpaperUserDefaultsDataStore removeWallpaperGradientForVariants:]
  -[SBFWallpaperUserDefaultsDataStore setWallpaperOptions:forVariants:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore wallpaperImageForVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore setWallpaperImageHashData:forVariants:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore setWallpaperColor:forVariants:]
  -[SBFWallpaperUserDefaultsDataStore hasWallpaperImageForVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore setWallpaperThumbnailData:forVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore wallpaperOptionsForVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore setOriginalVideoURL:forVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore wallpaperImageHashDataForVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore wallpaperOriginalImageForVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore removeWallpaperImageHashDataForVariants:]
  -[SBFWallpaperUserDefaultsDataStore setWallpaperColorName:forVariants:]
  -[SBFWallpaperUserDefaultsDataStore removeWallpaperOptionsForVariants:]
  -[SBFWallpaperUserDefaultsDataStore userDefaults]
  -[SBFWallpaperUserDefaultsDataStore setWallpaperGradient:forVariants:]
  -[SBFWallpaperUserDefaultsDataStore init]
  -[SBFWallpaperUserDefaultsDataStore wallpaperThumbnailDataForVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore wallpaperGradientForVariant:]
  -[SBFWallpaperUserDefaultsDataStore verifiedOriginalVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore unverifiedVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore setWallpaperImage:forVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore removeProceduralWallpaperForVariants:]
  -[SBFWallpaperUserDefaultsDataStore .cxx_destruct]
  -[SBFWallpaperUserDefaultsDataStore setProceduralWallpaperInfo:forVariants:]
  -[SBFWallpaperUserDefaultsDataStore succinctDescriptionBuilder]
  -[SBFWallpaperUserDefaultsDataStore wallpaperOptionsDefaults]
  -[SBFWallpaperUserDefaultsDataStore initWithUserDefaults:]
  -[SBFWallpaperUserDefaultsDataStore wallpaperColorForVariant:]
  -[SBFWallpaperUserDefaultsDataStore succinctDescription]
  -[SBFWallpaperUserDefaultsDataStore setWallpaperOriginalImage:forVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore updateProceduralWallpaperDefaultsWithIdentifier:options:forVariant:]
  -[SBFWallpaperUserDefaultsDataStore removeVideoForVariant:]
  -[SBFWallpaperUserDefaultsDataStore moveWallpaperImageDataTypes:fromVariant:toVariant:]
  -[SBFWallpaperUserDefaultsDataStore wallpaperColorNameForVariant:]
  -[SBFWallpaperUserDefaultsDataStore descriptionWithMultilinePrefix:]
  -[SBFWallpaperUserDefaultsDataStore verifiedVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperUserDefaultsDataStore descriptionBuilderWithMultilinePrefix:]
  -[SBFWallpaperUserDefaultsDataStore setVideoURL:forVariant:wallpaperMode:]


SBFLockScreenDateView : UIView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
 @property  BOOL subtitleHidden
 @property  BOOL useCompactDateFormat
 @property  NSDate *date
 @property  UIColor *textColor
 @property  _UILegibilitySettings *legibilitySettings
 @property  double timeLegibilityStrength
 @property  double subtitleLegibilityStrength
 @property  double alignmentPercent
 @property  double dateToTimeStretch
 @property  double maximumSubtitleWidth
 @property  double timeBaselineOffsetFromOrigin
 @property  double subtitleBaselineOffsetFromOrigin
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} restingFrame
 @property  double contentAlpha
 @property  SBFLockScreenDateSubtitleView *customSubtitleView

  // class methods
  +[SBFLockScreenDateView defaultHeight]
  +[SBFLockScreenDateView timeFont]
  +[SBFLockScreenDateView timeFontMetrics]

  // instance methods
  -[SBFLockScreenDateView _timeLabel]
  -[SBFLockScreenDateView contentAlpha]
  -[SBFLockScreenDateView setCustomSubtitleView:]
  -[SBFLockScreenDateView setContentAlpha:withSubtitleVisible:]
  -[SBFLockScreenDateView setSubtitleHidden:]
  -[SBFLockScreenDateView legibilitySettings]
  -[SBFLockScreenDateView isSubtitleHidden]
  -[SBFLockScreenDateView initWithFrame:]
  -[SBFLockScreenDateView _setSubtitleAlpha:]
  -[SBFLockScreenDateView chargingVisualInformationTimeFrame]
  -[SBFLockScreenDateView timeLegibilityStrength]
  -[SBFLockScreenDateView restingFrame]
  -[SBFLockScreenDateView setMaximumSubtitleWidth:]
  -[SBFLockScreenDateView customSubtitleView]
  -[SBFLockScreenDateView chargingVisualInformationTimeSubtitleFrame]
  -[SBFLockScreenDateView _updateLabels]
  -[SBFLockScreenDateView .cxx_destruct]
  -[SBFLockScreenDateView date]
  -[SBFLockScreenDateView setDate:]
  -[SBFLockScreenDateView textColor]
  -[SBFLockScreenDateView useCompactDateFormat]
  -[SBFLockScreenDateView presentationExtentForAlignmentPercent:]
  -[SBFLockScreenDateView setTimeLegibilityStrength:]
  -[SBFLockScreenDateView maximumSubtitleWidth]
  -[SBFLockScreenDateView updateFormat]
  -[SBFLockScreenDateView setLegibilitySettings:]
  -[SBFLockScreenDateView subtitleBaselineOffsetFromOrigin]
  -[SBFLockScreenDateView _updateUsesCompactDateFormat]
  -[SBFLockScreenDateView setRestingFrame:]
  -[SBFLockScreenDateView traitCollectionDidChange:]
  -[SBFLockScreenDateView setUseCompactDateFormat:]
  -[SBFLockScreenDateView setAlignmentPercent:]
  -[SBFLockScreenDateView setDateToTimeStretch:]
  -[SBFLockScreenDateView _timeLabelInsetsForTimeString:]
  -[SBFLockScreenDateView setTextColor:]
  -[SBFLockScreenDateView alignmentPercent]
  -[SBFLockScreenDateView setSubtitleLegibilityStrength:]
  -[SBFLockScreenDateView _subtitleViewFrameForView:alignmentPercent:]
  -[SBFLockScreenDateView _timeLabelFrameForAlignmentPercent:]
  -[SBFLockScreenDateView _setDate:inTimeZone:]
  -[SBFLockScreenDateView _updateLabelAlpha]
  -[SBFLockScreenDateView dateToTimeStretch]
  -[SBFLockScreenDateView layoutSubviews]
  -[SBFLockScreenDateView _cachedGlyphInsetsTimeFontForString:]
  -[SBFLockScreenDateView subtitleLegibilityStrength]
  -[SBFLockScreenDateView timeBaselineOffsetFromOrigin]


SBFAnalyticsBackend : NSObject /usr/lib/libSystem.B.dylib <SBFAnalyticsBackendEventHandling>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFAnalyticsBackend sharedInstance]

  // instance methods
  -[SBFAnalyticsBackend init]
  -[SBFAnalyticsBackend handleEvent:withContext:]
  -[SBFAnalyticsBackend .cxx_destruct]
  -[SBFAnalyticsBackend registerForQueryName:handler:]
  -[SBFAnalyticsBackend registerSynchronousEventHandler:]
  -[SBFAnalyticsBackend stateForQueryName:completion:]
  -[SBFAnalyticsBackend registerEventHandler:]


SBRotationDefaults : SBAbstractSpringBoardDefaultDomain
 @property  long long lastLockedOrientation
 @property  BOOL videoRotationEnabled

  // instance methods
  -[SBRotationDefaults _bindAndRegisterDefaults]


SBFDefaultDateProvider : NSObject /usr/lib/libSystem.B.dylib <SBFDateProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFDefaultDateProvider init]
  -[SBFDefaultDateProvider .cxx_destruct]
  -[SBFDefaultDateProvider date]
  -[SBFDefaultDateProvider removeMinuteUpdateHandler:]
  -[SBFDefaultDateProvider observeMinuteUpdatesWithHandler:]
  -[SBFDefaultDateProvider _updateMinuteTimer]
  -[SBFDefaultDateProvider _scheduleNextMinuteTimer]
  -[SBFDefaultDateProvider _minuteTimerFired]


_SBFBlockObserver : NSObject /usr/lib/libSystem.B.dylib <SBFObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBFBlockObserver initWithResultBlock:completionBlock:failureBlock:]
  -[_SBFBlockObserver observerDidComplete]
  -[_SBFBlockObserver .cxx_destruct]
  -[_SBFBlockObserver observerDidFailWithError:]
  -[_SBFBlockObserver observerDidReceiveResult:]


SBFObserver : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFObserver sendObserver:resultsOfBlock:]
  +[SBFObserver observerWithResultBlock:]
  +[SBFObserver sendArray:error:toObserver:]
  +[SBFObserver observerWithResultBlock:completionBlock:failureBlock:]


SBFloatingDockDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL recentsEnabled

  // instance methods
  -[SBFloatingDockDefaults _bindAndRegisterDefaults]


SBFLegibilitySettings : PTSettings /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
 @property  double slideToUnlockDarkShadowStrength
 @property  double slideToUnlockLightShadowStrength
 @property  double appIconGrabberDarkShadowStrength
 @property  double appIconGrabberLightShadowStrength
 @property  double timeDarkShadowStrength
 @property  double timeLightShadowStrength
 @property  double dateDarkShadowStrength
 @property  double dateLightShadowStrength
 @property  double statusTextDarkShadowStrength
 @property  double statusTextLightShadowStrength
 @property  double iconLabelDarkShadowStrength
 @property  double iconLabelLightShadowStrength
 @property  double folderTitleDarkShadowStrength
 @property  double folderTitleLightShadowStrength
 @property  double timerTextDarkShadowStrength
 @property  double timerTextLightShadowStrength
 @property  double timerDialDarkShadowStrength
 @property  double timerDialLightShadowStrength
 @property  double logoutButtonGlyphDarkShadowStrength
 @property  double logoutButtonGlyphLightShadowStrength
 @property  double logoutButtonTextDarkShadowStrength
 @property  double logoutButtonTextLightShadowStrength
 @property  double userPictureDarkShadowStrength
 @property  double userPictureLightShadowStrength

  // class methods
  +[SBFLegibilitySettings settingsControllerModule]

  // instance methods
  -[SBFLegibilitySettings setDefaultValues]
  -[SBFLegibilitySettings folderTitleStrengthForStyle:]
  -[SBFLegibilitySettings timerDialDarkShadowStrength]
  -[SBFLegibilitySettings setIconLabelDarkShadowStrength:]
  -[SBFLegibilitySettings logoutButtonTextDarkShadowStrength]
  -[SBFLegibilitySettings setDateDarkShadowStrength:]
  -[SBFLegibilitySettings timerTextLightShadowStrength]
  -[SBFLegibilitySettings timeLightShadowStrength]
  -[SBFLegibilitySettings slideToUnlockDarkShadowStrength]
  -[SBFLegibilitySettings userPictureStrengthForStyle:]
  -[SBFLegibilitySettings appIconGrabberDarkShadowStrength]
  -[SBFLegibilitySettings setUserPictureLightShadowStrength:]
  -[SBFLegibilitySettings setAppIconGrabberLightShadowStrength:]
  -[SBFLegibilitySettings statusTextLightShadowStrength]
  -[SBFLegibilitySettings setSlideToUnlockLightShadowStrength:]
  -[SBFLegibilitySettings statusTextStrengthForStyle:]
  -[SBFLegibilitySettings setUserPictureDarkShadowStrength:]
  -[SBFLegibilitySettings appIconGrabberLightShadowStrength]
  -[SBFLegibilitySettings setStatusTextLightShadowStrength:]
  -[SBFLegibilitySettings timerDialStrengthForStyle:]
  -[SBFLegibilitySettings setLogoutButtonTextLightShadowStrength:]
  -[SBFLegibilitySettings slideToUnlockStrengthForStyle:]
  -[SBFLegibilitySettings setTimeLightShadowStrength:]
  -[SBFLegibilitySettings setDateLightShadowStrength:]
  -[SBFLegibilitySettings setFolderTitleLightShadowStrength:]
  -[SBFLegibilitySettings logoutButtonGlyphLightShadowStrength]
  -[SBFLegibilitySettings iconLabelStrengthForStyle:]
  -[SBFLegibilitySettings statusTextDarkShadowStrength]
  -[SBFLegibilitySettings folderTitleLightShadowStrength]
  -[SBFLegibilitySettings setStatusTextDarkShadowStrength:]
  -[SBFLegibilitySettings logoutButtonGlyphStrengthForStyle:]
  -[SBFLegibilitySettings setFolderTitleDarkShadowStrength:]
  -[SBFLegibilitySettings timerTextDarkShadowStrength]
  -[SBFLegibilitySettings timerTextStrengthForStyle:]
  -[SBFLegibilitySettings folderTitleDarkShadowStrength]
  -[SBFLegibilitySettings setTimeDarkShadowStrength:]
  -[SBFLegibilitySettings logoutButtonTextLightShadowStrength]
  -[SBFLegibilitySettings setTimerTextDarkShadowStrength:]
  -[SBFLegibilitySettings setLogoutButtonTextDarkShadowStrength:]
  -[SBFLegibilitySettings userPictureLightShadowStrength]
  -[SBFLegibilitySettings setIconLabelLightShadowStrength:]
  -[SBFLegibilitySettings timeStrengthForStyle:]
  -[SBFLegibilitySettings timeDarkShadowStrength]
  -[SBFLegibilitySettings setTimerTextLightShadowStrength:]
  -[SBFLegibilitySettings setLogoutButtonGlyphDarkShadowStrength:]
  -[SBFLegibilitySettings dateLightShadowStrength]
  -[SBFLegibilitySettings slideToUnlockLightShadowStrength]
  -[SBFLegibilitySettings setTimerDialDarkShadowStrength:]
  -[SBFLegibilitySettings timerDialLightShadowStrength]
  -[SBFLegibilitySettings setLogoutButtonGlyphLightShadowStrength:]
  -[SBFLegibilitySettings setSlideToUnlockDarkShadowStrength:]
  -[SBFLegibilitySettings dateDarkShadowStrength]
  -[SBFLegibilitySettings setTimerDialLightShadowStrength:]
  -[SBFLegibilitySettings iconLabelDarkShadowStrength]
  -[SBFLegibilitySettings logoutButtonTextStrengthForStyle:]
  -[SBFLegibilitySettings logoutButtonGlyphDarkShadowStrength]
  -[SBFLegibilitySettings userPictureDarkShadowStrength]
  -[SBFLegibilitySettings iconLabelLightShadowStrength]
  -[SBFLegibilitySettings dateStrengthForStyle:]
  -[SBFLegibilitySettings setAppIconGrabberDarkShadowStrength:]
  -[SBFLegibilitySettings appIconGrabberStrengthForStyle:]


SBFWallpaperConfiguration : NSObject /usr/lib/libSystem.B.dylib <NSCopying, BSDescriptionProviding, NSSecureCoding>
 @property  long long variant
 @property  BOOL needsWallpaperDimmingTreatment
 @property  SBWallpaperImage *wallpaperImage
 @property  UIImage *wallpaperOriginalImage
 @property  UIImage *wallpaperThumbnailImage
 @property  NSData *wallpaperThumbnailImageData
 @property  NSData *wallpaperImageHashData
 @property  NSDictionary *proceduralWallpaperInfo
 @property  NSURL *videoURL
 @property  NSURL *originalVideoURL
 @property  SBFWallpaperOptions *wallpaperOptions
 @property  UIColor *wallpaperColor
 @property  NSString *wallpaperColorName
 @property  SBFGradient *wallpaperGradient
 @property  long long wallpaperType
 @property  NSString *proceduralWallpaperIdentifier
 @property  NSDictionary *proceduralWallpaperOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFWallpaperConfiguration supportsSecureCoding]

  // instance methods
  -[SBFWallpaperConfiguration copyWithZone:]
  -[SBFWallpaperConfiguration setWallpaperOptions:]
  -[SBFWallpaperConfiguration videoURL]
  -[SBFWallpaperConfiguration wallpaperType]
  -[SBFWallpaperConfiguration originalVideoURL]
  -[SBFWallpaperConfiguration needsWallpaperDimmingTreatment]
  -[SBFWallpaperConfiguration setVideoURL:]
  -[SBFWallpaperConfiguration wallpaperImage]
  -[SBFWallpaperConfiguration init]
  -[SBFWallpaperConfiguration proceduralWallpaperOptions]
  -[SBFWallpaperConfiguration wallpaperColor]
  -[SBFWallpaperConfiguration wallpaperOriginalImage]
  -[SBFWallpaperConfiguration wallpaperGradient]
  -[SBFWallpaperConfiguration .cxx_destruct]
  -[SBFWallpaperConfiguration wallpaperColorName]
  -[SBFWallpaperConfiguration setWallpaperThumbnailImageData:]
  -[SBFWallpaperConfiguration succinctDescriptionBuilder]
  -[SBFWallpaperConfiguration encodeWithCoder:]
  -[SBFWallpaperConfiguration variant]
  -[SBFWallpaperConfiguration setOriginalVideoURL:]
  -[SBFWallpaperConfiguration wallpaperThumbnailImage]
  -[SBFWallpaperConfiguration initWithVariant:type:]
  -[SBFWallpaperConfiguration proceduralWallpaperIdentifier]
  -[SBFWallpaperConfiguration succinctDescription]
  -[SBFWallpaperConfiguration setWallpaperThumbnailImage:]
  -[SBFWallpaperConfiguration setNeedsWallpaperDimmingTreatment:]
  -[SBFWallpaperConfiguration setWallpaperOriginalImage:]
  -[SBFWallpaperConfiguration isEqual:]
  -[SBFWallpaperConfiguration wallpaperImageHashData]
  -[SBFWallpaperConfiguration setWallpaperGradient:]
  -[SBFWallpaperConfiguration wallpaperThumbnailImageData]
  -[SBFWallpaperConfiguration setWallpaperImage:]
  -[SBFWallpaperConfiguration wallpaperOptions]
  -[SBFWallpaperConfiguration setWallpaperColor:]
  -[SBFWallpaperConfiguration descriptionWithMultilinePrefix:]
  -[SBFWallpaperConfiguration setWallpaperImageHashData:]
  -[SBFWallpaperConfiguration proceduralWallpaperInfo]
  -[SBFWallpaperConfiguration initWithCoder:]
  -[SBFWallpaperConfiguration descriptionBuilderWithMultilinePrefix:]
  -[SBFWallpaperConfiguration setProceduralWallpaperInfo:]
  -[SBFWallpaperConfiguration setWallpaperColorName:]


SBFCancelationToken : NSObject /usr/lib/libSystem.B.dylib <SBFCancelable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFCancelationToken tokenWithCancelationBlock:]
  +[SBFCancelationToken tokenWrappingCancelable:]

  // instance methods
  -[SBFCancelationToken isCanceled]
  -[SBFCancelationToken init]
  -[SBFCancelationToken .cxx_destruct]
  -[SBFCancelationToken addCancelationBlock:]
  -[SBFCancelationToken cancel]
  -[SBFCancelationToken nts_cancel]
  -[SBFCancelationToken callCancelationBlocks:]


SBStatusBarDefaults : SBAbstractSpringBoardDefaultDomain
 @property  NSArray *countryCodesShowingEmergencyOnlyStatus
 @property  BOOL showBatteryLevel
 @property  BOOL showBatteryPercentage
 @property  BOOL suppressStatusBarOverrideForScreenSharing
 @property  BOOL showOptimalCellDataForCarPlay
 @property  BOOL showRSSI
 @property  unsigned long statusBarLogLevel
 @property  BOOL showThermalWarning

  // instance methods
  -[SBStatusBarDefaults _bindAndRegisterDefaults]


SBFUserAuthenticationController : NSObject /usr/lib/libSystem.B.dylib <SBFMobileKeyBagObserver, SBFUserAuthenticationModelDelegate, SBFAuthenticationAssertionProviding, SBFAuthenticationStatusProvider, SBFPasscodeFieldChangeObserver>
 @property  <SBFAuthenticationPolicy> *policy
 @property  NSDate *lastRevokedAuthenticationDate
 @property  BOOL inSecureDisplayMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFUserAuthenticationController isAuthenticated]
  -[SBFUserAuthenticationController _addAuthenticationAssertion:]
  -[SBFUserAuthenticationController _setAuthState:]
  -[SBFUserAuthenticationController _isUserAuthenticated]
  -[SBFUserAuthenticationController removeResponder:]
  -[SBFUserAuthenticationController _invalidateCachedPasscodeLockState]
  -[SBFUserAuthenticationController deviceLockStateMayHaveChangedForModel:]
  -[SBFUserAuthenticationController revokeAuthenticationIfNecessaryForPublicReason:]
  -[SBFUserAuthenticationController isAuthenticatedCached]
  -[SBFUserAuthenticationController _clearBlockedState]
  -[SBFUserAuthenticationController _policy]
  -[SBFUserAuthenticationController addAsFirstResponder:]
  -[SBFUserAuthenticationController _notifyAboutTemporaryBlockStatusChanged]
  -[SBFUserAuthenticationController createGracePeriodAssertionWithReason:]
  -[SBFUserAuthenticationController dealloc]
  -[SBFUserAuthenticationController _clearUnblockTimer]
  -[SBFUserAuthenticationController _removeAuthResponder:]
  -[SBFUserAuthenticationController _timeUntilUnblockedSinceReferenceDate]
  -[SBFUserAuthenticationController notePasscodeEntryBegan]
  -[SBFUserAuthenticationController .cxx_destruct]
  -[SBFUserAuthenticationController _updateAuthenticationStateForPublicReason:]
  -[SBFUserAuthenticationController _isTemporarilyBlocked]
  -[SBFUserAuthenticationController hasAuthenticatedAtLeastOnceSinceBoot]
  -[SBFUserAuthenticationController _noteDeviceLockStateMayHaveChangedForExternalReasons]
  -[SBFUserAuthenticationController _removePrivateAuthenticationObserver:]
  -[SBFUserAuthenticationController _evaluatePasscodeAttempt:outError:]
  -[SBFUserAuthenticationController _removeAuthenticationAssertion:]
  -[SBFUserAuthenticationController _handleSuccessfulAuthentication:responder:]
  -[SBFUserAuthenticationController _evaluateBiometricAttempt:]
  -[SBFUserAuthenticationController _addAsFirstResponder:]
  -[SBFUserAuthenticationController publicDescription]
  -[SBFUserAuthenticationController succinctDescriptionBuilder]
  -[SBFUserAuthenticationController _handleFailedAuthentication:error:responder:]
  -[SBFUserAuthenticationController _addPrivateAuthenticationObserver:]
  -[SBFUserAuthenticationController _boolForAuthenticationResult:]
  -[SBFUserAuthenticationController lastRevokedAuthenticationDate]
  -[SBFUserAuthenticationController _shouldRevokeAuthenticationNow]
  -[SBFUserAuthenticationController _refreshModelCacheIfNeeded]
  -[SBFUserAuthenticationController revokeAuthenticationImmediatelyForPublicReason:]
  -[SBFUserAuthenticationController _cachedLockStateExtended]
  -[SBFUserAuthenticationController _revokeAuthenticationImmediately:forPublicReason:]
  -[SBFUserAuthenticationController _unblockTimerFired]
  -[SBFUserAuthenticationController _handleInvalidAuthentication:responder:]
  -[SBFUserAuthenticationController processAuthenticationRequest:]
  -[SBFUserAuthenticationController notePasscodeEntryCancelled]
  -[SBFUserAuthenticationController _isInGracePeriodState]
  -[SBFUserAuthenticationController initWithAssertionManager:policy:keybag:model:]
  -[SBFUserAuthenticationController succinctDescription]
  -[SBFUserAuthenticationController _notifyClientsOfAuthenticationResult:forRequest:error:withResponder:]
  -[SBFUserAuthenticationController initWithAssertionManager:policy:]
  -[SBFUserAuthenticationController hasPasscodeSet]
  -[SBFUserAuthenticationController _scheduleUnblockTimer]
  -[SBFUserAuthenticationController _updateAuthenticationStateAndDateForLockState:]
  -[SBFUserAuthenticationController _isInBioUnlockState]
  -[SBFUserAuthenticationController _isAssertionValid:]
  -[SBFUserAuthenticationController keybagDidUnlockForTheFirstTime:]
  -[SBFUserAuthenticationController _setup_runLoopObserverIfNecessary]
  -[SBFUserAuthenticationController _uncachePasscodeIfNecessary]
  -[SBFUserAuthenticationController _authenticateIfInGracePeriod]
  -[SBFUserAuthenticationController _setupPolicy:]
  -[SBFUserAuthenticationController _evaluateAuthenticationAttempt:outError:]
  -[SBFUserAuthenticationController _setPolicy:]
  -[SBFUserAuthenticationController inSecureDisplayMode]
  -[SBFUserAuthenticationController revokeAuthenticationImmediatelyIfNecessaryForPublicReason:]
  -[SBFUserAuthenticationController createKeybagUnlockAssertionWithReason:]
  -[SBFUserAuthenticationController _setModel:]
  -[SBFUserAuthenticationController deviceLockModelRequestsDeviceWipe:]
  -[SBFUserAuthenticationController _processAuthenticationRequest:responder:]
  -[SBFUserAuthenticationController descriptionWithMultilinePrefix:]
  -[SBFUserAuthenticationController processAuthenticationRequest:responder:]
  -[SBFUserAuthenticationController _performNilPasscodeCheck]
  -[SBFUserAuthenticationController descriptionBuilderWithMultilinePrefix:]
  -[SBFUserAuthenticationController _isPermanentlyBlocked]
  -[SBFUserAuthenticationController keybag:extendedStateDidChange:]
  -[SBFUserAuthenticationController _updateSecureModeIfNecessaryForNewAuthState]
  -[SBFUserAuthenticationController _updateAuthenticationStateImmediately:forPublicReason:]


SBRecentDisplayItemsDefaults : SBAbstractSpringBoardDefaultDomain
 @property  NSArray *commandTabPlistRepresentation
 @property  NSArray *dockRecentsPlistRepresentation

  // instance methods
  -[SBRecentDisplayItemsDefaults _bindAndRegisterDefaults]


SBMiscellaneousDefaults : SBAbstractSpringBoardDefaultDomain
 @property  long long dataPlanActivationPromptCount
 @property  BOOL suppressNoSimAlert
 @property  BOOL walletPreArmForceLockButton
 @property  BOOL suppressAlertsForKeynote
 @property  BOOL disableAsyncRenderingSurfaceRetention
 @property  BOOL launchWithMallocStackLogging
 @property  BOOL disableAutomaticMallocStackLogging
 @property  BOOL enableDynamicJetsamLimits
 @property  float backlightLevel

  // instance methods
  -[SBMiscellaneousDefaults _bindAndRegisterDefaults]


SBFLockScreenActionContext : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *identifier
 @property  NSString *lockLabel
 @property  NSString *shortLockLabel
 @property  NSString *unlockDestination
 @property  @? action
 @property  BOOL requiresUIUnlock
 @property  BOOL deactivateAwayController
 @property  BOOL canBypassPinLock
 @property  BOOL requiresAuthentication
 @property  BOOL wantsBiometricPresentation
 @property  BOOL confirmedNotInPocket
 @property  int source
 @property  int intent
 @property  BOOL hasCustomUnlockLabel

  // instance methods
  -[SBFLockScreenActionContext setIntent:]
  -[SBFLockScreenActionContext setConfirmedNotInPocket:]
  -[SBFLockScreenActionContext requiresAuthentication]
  -[SBFLockScreenActionContext intent]
  -[SBFLockScreenActionContext setSource:]
  -[SBFLockScreenActionContext setAction:]
  -[SBFLockScreenActionContext source]
  -[SBFLockScreenActionContext .cxx_destruct]
  -[SBFLockScreenActionContext action]
  -[SBFLockScreenActionContext setIdentifier:]
  -[SBFLockScreenActionContext identifier]
  -[SBFLockScreenActionContext setRequiresAuthentication:]
  -[SBFLockScreenActionContext lockLabel]
  -[SBFLockScreenActionContext shortLockLabel]
  -[SBFLockScreenActionContext hasCustomUnlockLabel]
  -[SBFLockScreenActionContext initWithLockLabel:shortLockLabel:action:identifier:]
  -[SBFLockScreenActionContext setLockLabel:]
  -[SBFLockScreenActionContext setShortLockLabel:]
  -[SBFLockScreenActionContext unlockDestination]
  -[SBFLockScreenActionContext setUnlockDestination:]
  -[SBFLockScreenActionContext requiresUIUnlock]
  -[SBFLockScreenActionContext setRequiresUIUnlock:]
  -[SBFLockScreenActionContext deactivateAwayController]
  -[SBFLockScreenActionContext setDeactivateAwayController:]
  -[SBFLockScreenActionContext canBypassPinLock]
  -[SBFLockScreenActionContext setCanBypassPinLock:]
  -[SBFLockScreenActionContext wantsBiometricPresentation]
  -[SBFLockScreenActionContext setWantsBiometricPresentation:]
  -[SBFLockScreenActionContext confirmedNotInPocket]


SBFMutableLockScreenActionContext : SBFLockScreenActionContext
 @property  NSString *identifier
 @property  NSString *lockLabel
 @property  NSString *shortLockLabel
 @property  NSString *unlockDestination
 @property  @? action
 @property  BOOL requiresUIUnlock
 @property  BOOL deactivateAwayController
 @property  BOOL canBypassPinLock
 @property  BOOL requiresAuthentication
 @property  BOOL wantsBiometricPresentation
 @property  BOOL confirmedNotInPocket
 @property  int source
 @property  int intent


SBFApplication : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *applicationBundleIdentifier
 @property  NSString *displayName
 @property  NSURL *bundleURL
 @property  BOOL systemOrInternalApplication
 @property  NSNumber *appStoreItemID
 @property  NSString *applicationShortcutWidgetBundleIdentifier
 @property  NSArray *staticApplicationShortcutItems
 @property  NSArray *dynamicApplicationShortcutItems

  // instance methods
  -[SBFApplication applicationShortcutWidgetBundleIdentifier]
  -[SBFApplication init]
  -[SBFApplication dealloc]
  -[SBFApplication staticApplicationShortcutItems]
  -[SBFApplication .cxx_destruct]
  -[SBFApplication bundleURL]
  -[SBFApplication _updateApplicationShortcutServiceFetchResult]
  -[SBFApplication applicationBundleIdentifier]
  -[SBFApplication appStoreItemID]
  -[SBFApplication isSystemOrInternalApplication]
  -[SBFApplication dynamicApplicationShortcutItems]
  -[SBFApplication initWithApplicationBundleIdentifier:]
  -[SBFApplication displayName]


SBPIPDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL allowAutoPIP
 @property  BOOL visualizeKeyboardFrame

  // instance methods
  -[SBPIPDefaults _bindAndRegisterDefaults]


SBFOverridableDateProvider : NSObject /usr/lib/libSystem.B.dylib <SBDateTimeOverrideObserver, SBFDateProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFOverridableDateProvider controller:didChangeOverrideDateFromDate:]
  -[SBFOverridableDateProvider init]
  -[SBFOverridableDateProvider _updateForOverrides]
  -[SBFOverridableDateProvider _updateUnderlyingProvider]
  -[SBFOverridableDateProvider _fireHandlersForDate:]
  -[SBFOverridableDateProvider .cxx_destruct]
  -[SBFOverridableDateProvider date]
  -[SBFOverridableDateProvider removeMinuteUpdateHandler:]
  -[SBFOverridableDateProvider initWithDateProvider:]
  -[SBFOverridableDateProvider observeMinuteUpdatesWithHandler:]


SBBiometricAuthenticationDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL logTimestampsEnabled

  // instance methods
  -[SBBiometricAuthenticationDefaults _bindAndRegisterDefaults]


SBFColorWallpaperView : SBFWallpaperView
 @property  UIImage *cachedSnapshotImage
 @property  UIColor *wallpaperColor

  // instance methods
  -[SBFColorWallpaperView averageColorInRect:withSmudgeRadius:]
  -[SBFColorWallpaperView wallpaperType]
  -[SBFColorWallpaperView initWithFrame:configuration:variant:cacheGroup:delegate:options:]
  -[SBFColorWallpaperView _computeAverageColor]
  -[SBFColorWallpaperView snapshotImage]
  -[SBFColorWallpaperView contrastInRect:contrastWithinBoxes:contrastBetweenBoxes:]
  -[SBFColorWallpaperView isDisplayingWallpaperWithConfiguration:forVariant:]
  -[SBFColorWallpaperView wallpaperColor]
  -[SBFColorWallpaperView .cxx_destruct]
  -[SBFColorWallpaperView setCachedSnapshotImage:]
  -[SBFColorWallpaperView cachedSnapshotImage]


SBStateDumpDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL remoteDumpEnabled
 @property  NSNumber *remoteDumpTimeout

  // instance methods
  -[SBStateDumpDefaults _bindAndRegisterDefaults]


SBTestingDefaults : SBAbstractSpringBoardDefaultDomain
 @property  NSString *testRunnerRecoveryApplicationBundleIdentifier

  // instance methods
  -[SBTestingDefaults _bindAndRegisterDefaults]


SBFLegibilityDomain : PTDomain /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
  // class methods
  +[SBFLegibilityDomain domainName]
  +[SBFLegibilityDomain rootSettings]
  +[SBFLegibilityDomain rootSettingsClass]
  +[SBFLegibilityDomain domainGroupName]


SBFAuthenticationAssertion : NSObject /usr/lib/libSystem.B.dylib <BSDescriptionProviding>
 @property  BOOL valid
 @property  long long type
 @property  NSString *identifier
 @property  SBFUserAuthenticationController *controller
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFAuthenticationAssertion activate]
  -[SBFAuthenticationAssertion dealloc]
  -[SBFAuthenticationAssertion .cxx_destruct]
  -[SBFAuthenticationAssertion publicDescription]
  -[SBFAuthenticationAssertion succinctDescriptionBuilder]
  -[SBFAuthenticationAssertion identifier]
  -[SBFAuthenticationAssertion isValid]
  -[SBFAuthenticationAssertion type]
  -[SBFAuthenticationAssertion succinctDescription]
  -[SBFAuthenticationAssertion controller]
  -[SBFAuthenticationAssertion invalidate]
  -[SBFAuthenticationAssertion descriptionWithMultilinePrefix:]
  -[SBFAuthenticationAssertion descriptionBuilderWithMultilinePrefix:]
  -[SBFAuthenticationAssertion initWithIdentifier:type:withController:]


SBFWallpaperDefaultConfiguration : NSObject /usr/lib/libSystem.B.dylib <NSCopying, BSDescriptionProviding, NSSecureCoding>
 @property  long long wallpaperType
 @property  NSURL *staticImageURL
 @property  NSURL *videoURL
 @property  NSString *proceduralWallpaperIdentifier
 @property  NSDictionary *proceduralWallpaperOptions
 @property  UIColor *wallpaperColor
 @property  NSString *wallpaperColorName
 @property  SBFGradient *wallpaperGradient
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFWallpaperDefaultConfiguration supportsSecureCoding]

  // instance methods
  -[SBFWallpaperDefaultConfiguration copyWithZone:]
  -[SBFWallpaperDefaultConfiguration videoURL]
  -[SBFWallpaperDefaultConfiguration wallpaperType]
  -[SBFWallpaperDefaultConfiguration init]
  -[SBFWallpaperDefaultConfiguration staticImageURL]
  -[SBFWallpaperDefaultConfiguration initStaticWithImageURL:]
  -[SBFWallpaperDefaultConfiguration initVideoWithStaticImageURL:videoURL:]
  -[SBFWallpaperDefaultConfiguration initProceduralWithIdentifier:options:]
  -[SBFWallpaperDefaultConfiguration initColorWithColor:]
  -[SBFWallpaperDefaultConfiguration initColorWithColorName:]
  -[SBFWallpaperDefaultConfiguration proceduralWallpaperOptions]
  -[SBFWallpaperDefaultConfiguration initGradientWithGradient:]
  -[SBFWallpaperDefaultConfiguration wallpaperColor]
  -[SBFWallpaperDefaultConfiguration wallpaperGradient]
  -[SBFWallpaperDefaultConfiguration .cxx_destruct]
  -[SBFWallpaperDefaultConfiguration wallpaperColorName]
  -[SBFWallpaperDefaultConfiguration succinctDescriptionBuilder]
  -[SBFWallpaperDefaultConfiguration encodeWithCoder:]
  -[SBFWallpaperDefaultConfiguration proceduralWallpaperIdentifier]
  -[SBFWallpaperDefaultConfiguration succinctDescription]
  -[SBFWallpaperDefaultConfiguration isEqual:]
  -[SBFWallpaperDefaultConfiguration descriptionWithMultilinePrefix:]
  -[SBFWallpaperDefaultConfiguration initWithCoder:]
  -[SBFWallpaperDefaultConfiguration descriptionBuilderWithMultilinePrefix:]


SBFStatusBarLegibilityView : UIView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools <SBUILegibility>
 @property  UIView *statusBarGradientView
 @property  UIImageView *leftCornerView
 @property  UIImageView *rightCornerView
 @property  BOOL forceLegibilityGradientHidden
 @property  double strength
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFStatusBarLegibilityView gradientViewWithOpacities:locations:]
  +[SBFStatusBarLegibilityView statusBarGradientView]

  // instance methods
  -[SBFStatusBarLegibilityView setStrength:]
  -[SBFStatusBarLegibilityView setLeftCornerView:]
  -[SBFStatusBarLegibilityView legibilitySettings]
  -[SBFStatusBarLegibilityView setForceLegibilityGradientHidden:]
  -[SBFStatusBarLegibilityView .cxx_destruct]
  -[SBFStatusBarLegibilityView strength]
  -[SBFStatusBarLegibilityView _configureAsPhone]
  -[SBFStatusBarLegibilityView setLegibilitySettings:]
  -[SBFStatusBarLegibilityView rightCornerView]
  -[SBFStatusBarLegibilityView leftCornerView]
  -[SBFStatusBarLegibilityView forceLegibilityGradientHidden]
  -[SBFStatusBarLegibilityView _configureAsPad]
  -[SBFStatusBarLegibilityView setStatusBarGradientView:]
  -[SBFStatusBarLegibilityView _configureWithLegibilitySettings:forceLegibilityGradientHidden:]
  -[SBFStatusBarLegibilityView setRightCornerView:]
  -[SBFStatusBarLegibilityView layoutSubviews]
  -[SBFStatusBarLegibilityView statusBarGradientView]


SBStatusBarLegibilityGradientView : UIView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
  // class methods
  +[SBStatusBarLegibilityGradientView layerClass]


SBFFileCache : NSObject /usr/lib/libSystem.B.dylib
 @property  double accessDateTimeAdjustment
 @property  <SBFFileCacheStore> *store
 @property  <SBFFileCacheFaultHandler> *faultHandler
 @property  <SBFFileCacheDelegate> *delegate
 @property  unsigned long maxTotalFileSize
 @property  unsigned long maxTotalFileCount
 @property  double maxAllowedTimeSinceLastAccess
 @property  double maxAllowedTimeSinceGeneration

  // instance methods
  -[SBFFileCache faultHandler]
  -[SBFFileCache init]
  -[SBFFileCache callbackQueue]
  -[SBFFileCache maxTotalFileCount]
  -[SBFFileCache maxTotalFileSize]
  -[SBFFileCache fileNameForIdentifier:]
  -[SBFFileCache _queue_updateManifestForLoadedFileWrapper:filename:usingStore:]
  -[SBFFileCache store]
  -[SBFFileCache _queue_createManifestEntryForGeneratedFileWrapper:filename:usingStore:]
  -[SBFFileCache performOnWorkQueueUsingBlock:]
  -[SBFFileCache _queue_removeManifestEntryForFilename:usingStore:]
  -[SBFFileCache _queue_resetManifestUsingStore:]
  -[SBFFileCache _queue_loadManifestUsingStore:]
  -[SBFFileCache accessDateTimeAdjustment]
  -[SBFFileCache _queue_evictIfNeededUsingStore:]
  -[SBFFileCache _queue_saveManifestUsingStore:]
  -[SBFFileCache _queue_evictFilesAtManifestIndexes:usingStore:]
  -[SBFFileCache maxAllowedTimeSinceLastAccess]
  -[SBFFileCache maxAllowedTimeSinceGeneration]
  -[SBFFileCache _queue_evictFileWithInfo:usingStore:]
  -[SBFFileCache initWithStore:faultHandler:]
  -[SBFFileCache loadFileWithIdentifier:completionHandler:]
  -[SBFFileCache removeFileWithIdentifier:]
  -[SBFFileCache setMaxTotalFileSize:]
  -[SBFFileCache setMaxTotalFileCount:]
  -[SBFFileCache setMaxAllowedTimeSinceLastAccess:]
  -[SBFFileCache setMaxAllowedTimeSinceGeneration:]
  -[SBFFileCache setAccessDateTimeAdjustment:]
  -[SBFFileCache .cxx_destruct]
  -[SBFFileCache removeAllFiles]
  -[SBFFileCache setDelegate:]
  -[SBFFileCache delegate]


SBFFileCacheFileStore : NSObject /usr/lib/libSystem.B.dylib <SBFFileCacheStore>
 @property  NSURL *directoryURL
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFFileCacheFileStore init]
  -[SBFFileCacheFileStore fileCache:loadFileWrapperNamed:]
  -[SBFFileCacheFileStore fileCache:storeFileWrapper:]
  -[SBFFileCacheFileStore fileCache:removeFileWrapperNamed:]
  -[SBFFileCacheFileStore removeAllFileWrappersForFileCache:]
  -[SBFFileCacheFileStore fileURLForFileNamed:]
  -[SBFFileCacheFileStore .cxx_destruct]
  -[SBFFileCacheFileStore directoryURL]
  -[SBFFileCacheFileStore initWithDirectoryURL:]


SBFFileCacheMemoryStore : NSObject /usr/lib/libSystem.B.dylib <SBFFileCacheStore>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFFileCacheMemoryStore fileCache:loadFileWrapperNamed:]
  -[SBFFileCacheMemoryStore fileCache:storeFileWrapper:]
  -[SBFFileCacheMemoryStore fileCache:removeFileWrapperNamed:]
  -[SBFFileCacheMemoryStore removeAllFileWrappersForFileCache:]
  -[SBFFileCacheMemoryStore .cxx_destruct]


SBFFileCacheURLFaultHandler : NSObject /usr/lib/libSystem.B.dylib <SBFFileCacheFaultHandler>
 @property  NSURLSession *urlSession
 @property  NSArray *retryIntervals
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFFileCacheURLFaultHandler setUrlSession:]
  -[SBFFileCacheURLFaultHandler urlSession]
  -[SBFFileCacheURLFaultHandler init]
  -[SBFFileCacheURLFaultHandler fileCache:loadFileForIdentifier:completionHandler:]
  -[SBFFileCacheURLFaultHandler retryIntervals]
  -[SBFFileCacheURLFaultHandler attemptLoadFromURL:session:retryIntervalEnumerator:completionHandler:]
  -[SBFFileCacheURLFaultHandler performLoadFromURL:session:completionHandler:]
  -[SBFFileCacheURLFaultHandler setRetryIntervals:]
  -[SBFFileCacheURLFaultHandler .cxx_destruct]


SBFMappedImageCache : BSUIMappedImageCache /System/Library/PrivateFrameworks/Celestial.framework/Celestial
  // class methods
  +[SBFMappedImageCache systemAppPersistenteCache]

  // instance methods
  -[SBFMappedImageCache initWithDescription:]
  -[SBFMappedImageCache imageForKey:options:]
  -[SBFMappedImageCache imageForKey:options:generateImageWithBlockIfNecessary:]
  -[SBFMappedImageCache imageForKey:cacheOptions:generateImageWithBlockIfNecessary:]
  -[SBFMappedImageCache warmupImageForKey:]
  -[SBFMappedImageCache imageForKey:generateImageWithBlockIfNecessary:]


SBUsageDefaults : BSAbstractDefaultDomain /System/Library/Frameworks/VideoToolbox.framework/VideoToolbox
 @property  NSNumber *standbyTime
 @property  NSNumber *batteryUsageTime
 @property  BOOL hasChargedPartially

  // instance methods
  -[SBUsageDefaults clearUsageDefaults]
  -[SBUsageDefaults _bindAndRegisterDefaults]


SBAppIconForceTouchDefaults : SBAbstractSpringBoardDefaultDomain
 @property  float animationDurationMultiplier
 @property  BOOL enableUIPreviewInteractionAnimations
 @property  float quickActionAnimationDuration

  // instance methods
  -[SBAppIconForceTouchDefaults _bindAndRegisterDefaults]


SBFButton : UIButton /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
  // instance methods
  -[SBFButton initWithFrame:]
  -[SBFButton _touchUpInside]
  -[SBFButton setSelected:]
  -[SBFButton setHighlighted:]
  -[SBFButton _drawingAsSelected]
  -[SBFButton _updateSelected:highlighted:]
  -[SBFButton _updateForStateChange]


SBFUserAuthenticationModelEducationalMode : NSObject /usr/lib/libSystem.B.dylib <SBFUserAuthenticationModel>
 @property  <SBFUserAuthenticationModelDelegate> *delegate
 @property  BOOL temporarilyBlocked
 @property  BOOL permanentlyBlocked
 @property  double timeUntilUnblockedSinceReferenceDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFUserAuthenticationModelEducationalMode isPermanentlyBlocked]
  -[SBFUserAuthenticationModelEducationalMode synchronize]
  -[SBFUserAuthenticationModelEducationalMode notePasscodeEntryBegan]
  -[SBFUserAuthenticationModelEducationalMode .cxx_destruct]
  -[SBFUserAuthenticationModelEducationalMode notePasscodeUnlockSucceeded]
  -[SBFUserAuthenticationModelEducationalMode noteNewMkbDeviceLockState:]
  -[SBFUserAuthenticationModelEducationalMode notePasscodeEntryCancelled]
  -[SBFUserAuthenticationModelEducationalMode _refreshStateAndNotify:]
  -[SBFUserAuthenticationModelEducationalMode performPasswordTest:]
  -[SBFUserAuthenticationModelEducationalMode isTemporarilyBlocked]
  -[SBFUserAuthenticationModelEducationalMode setDelegate:]
  -[SBFUserAuthenticationModelEducationalMode timeUntilUnblockedSinceReferenceDate]
  -[SBFUserAuthenticationModelEducationalMode delegate]
  -[SBFUserAuthenticationModelEducationalMode notePasscodeUnlockFailedWithError:]
  -[SBFUserAuthenticationModelEducationalMode initWithKeyBag:]
  -[SBFUserAuthenticationModelEducationalMode _refreshStateForMkbState:notify:]


SBWorkspaceDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL medusaEnabled
 @property  long long medusaDeviceSimulation
 @property  BOOL breadcrumbDisabled

  // instance methods
  -[SBWorkspaceDefaults _bindAndRegisterDefaults]


SBWallpaperImage : UIImage /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
 @property  NSURL *wallpaperFileURL

  // class methods
  +[SBWallpaperImage supportsSecureCoding]

  // instance methods
  -[SBWallpaperImage initWithCGImage:scale:orientation:wallpaperFileURL:]
  -[SBWallpaperImage wallpaperFileURL]
  -[SBWallpaperImage initWithFlatColor:size:scale:]
  -[SBWallpaperImage .cxx_destruct]
  -[SBWallpaperImage encodeWithCoder:]
  -[SBWallpaperImage isEqual:]
  -[SBWallpaperImage initWithFlatColor:]
  -[SBWallpaperImage initWithCoder:]


SBFWallpaperDomain : PTDomain /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
  // class methods
  +[SBFWallpaperDomain domainName]
  +[SBFWallpaperDomain rootSettings]
  +[SBFWallpaperDomain rootSettingsClass]
  +[SBFWallpaperDomain domainGroupName]


SBFIrisWallpaperView : SBFStaticWallpaperView <ISPlayerViewDelegatePrivate, SBFIrisWallpaperView>
 @property  long long currentIrisMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBFIrisWallpaperViewDelegate> *irisDelegate
 @property  long long irisPlaybackState
 @property  BOOL isIrisInteracting
 @property  NSURL *videoFileURL
 @property  double stillTimeInVideo

  // class methods
  +[SBFIrisWallpaperView initialize]

  // instance methods
  -[SBFIrisWallpaperView irisDelegate]
  -[SBFIrisWallpaperView switchToIrisMode:]
  -[SBFIrisWallpaperView _setImage:]
  -[SBFIrisWallpaperView videoFileURL]
  -[SBFIrisWallpaperView wallpaperType]
  -[SBFIrisWallpaperView initWithFrame:configuration:variant:cacheGroup:delegate:options:]
  -[SBFIrisWallpaperView _setupContentViewForMode:]
  -[SBFIrisWallpaperView stillTimeInVideo]
  -[SBFIrisWallpaperView playerViewIsInteractingDidChange:]
  -[SBFIrisWallpaperView _populateContentView]
  -[SBFIrisWallpaperView isIrisInteracting]
  -[SBFIrisWallpaperView dealloc]
  -[SBFIrisWallpaperView playerViewPlaybackStateDidChange:]
  -[SBFIrisWallpaperView _setupContentViewWithOptions:]
  -[SBFIrisWallpaperView irisPlaybackState]
  -[SBFIrisWallpaperView irisGestureRecognizer]
  -[SBFIrisWallpaperView setIrisDelegate:]
  -[SBFIrisWallpaperView _setPlayerGestureRecognizer:]
  -[SBFIrisWallpaperView currentIrisMode]
  -[SBFIrisWallpaperView .cxx_destruct]
  -[SBFIrisWallpaperView videoPlayerForPlayerView:]
  -[SBFIrisWallpaperView playerViewGestureRecognizerDidChange:]
  -[SBFIrisWallpaperView _resetPrewiredAVPlayer]


SBAnalyticsContextProvider : NSObject /usr/lib/libSystem.B.dylib <SBFAnalyticsBackendEventContextProviding>
 @property  SBSAnalyticsState *eventPayload
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAnalyticsContextProvider initWithEventPayload:backend:]
  -[SBAnalyticsContextProvider eventPayload]
  -[SBAnalyticsContextProvider .cxx_destruct]
  -[SBAnalyticsContextProvider stateForQueryName:completion:]


SBFAnalyticsClient : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *significantTimeChangedNotificationName

  // class methods
  +[SBFAnalyticsClient sharedInstance]

  // instance methods
  -[SBFAnalyticsClient _noteSignificantTimeChanged:]
  -[SBFAnalyticsClient significantTimeChangedNotificationName]
  -[SBFAnalyticsClient .cxx_destruct]
  -[SBFAnalyticsClient registerForQueryName:handler:]
  -[SBFAnalyticsClient emitEvent:withPayload:]
  -[SBFAnalyticsClient setSignificantTimeChangedNotificationName:]
  -[SBFAnalyticsClient initWithBackend:]
  -[SBFAnalyticsClient emitEvent:]


SBFParallaxSettings : _UISettings /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
 @property  BOOL slideEnabled
 @property  long long slideDirectionX
 @property  long long slideDirectionY
 @property  double slidePixelsX
 @property  double slidePixelsY
 @property  BOOL tiltEnabled
 @property  long long tiltDirectionX
 @property  long long tiltDirectionY
 @property  double tiltDegreesX
 @property  double tiltDegreesY
 @property  long long distanceFromScreen
 @property  BOOL increaseEnabled
 @property  double slideIncreaseX
 @property  double slideIncreaseY

  // class methods
  +[SBFParallaxSettings settingsControllerModule]

  // instance methods
  -[SBFParallaxSettings setDefaultValues]
  -[SBFParallaxSettings setTiltEnabled:]
  -[SBFParallaxSettings setTiltDirectionX:]
  -[SBFParallaxSettings setTiltDirectionY:]
  -[SBFParallaxSettings setTiltDegreesX:]
  -[SBFParallaxSettings setTiltDegreesY:]
  -[SBFParallaxSettings setDistanceFromScreen:]
  -[SBFParallaxSettings setIncreaseEnabled:]
  -[SBFParallaxSettings setSlideIncreaseX:]
  -[SBFParallaxSettings setSlideIncreaseY:]
  -[SBFParallaxSettings slideEnabled]
  -[SBFParallaxSettings tiltEnabled]
  -[SBFParallaxSettings tiltDirectionX]
  -[SBFParallaxSettings tiltDirectionY]
  -[SBFParallaxSettings tiltDegreesX]
  -[SBFParallaxSettings tiltDegreesY]
  -[SBFParallaxSettings distanceFromScreen]
  -[SBFParallaxSettings increaseEnabled]
  -[SBFParallaxSettings slideIncreaseX]
  -[SBFParallaxSettings slideIncreaseY]
  -[SBFParallaxSettings setSlideEnabled:]
  -[SBFParallaxSettings setSlideDirectionX:]
  -[SBFParallaxSettings setSlideDirectionY:]
  -[SBFParallaxSettings setSlidePixelsX:]
  -[SBFParallaxSettings setSlidePixelsY:]
  -[SBFParallaxSettings slidePixelsX]
  -[SBFParallaxSettings slideDirectionX]
  -[SBFParallaxSettings slidePixelsY]
  -[SBFParallaxSettings slideDirectionY]


SBFWallpaperParallaxSettings : SBFParallaxSettings
 @property  double overhangX
 @property  double overhangY
 @property  double perspectiveTransform

  // class methods
  +[SBFWallpaperParallaxSettings minimumWallpaperSizeForWallpaperSize:deviceType:]
  +[SBFWallpaperParallaxSettings minimumWallpaperSizeForCurrentDevice]
  +[SBFWallpaperParallaxSettings _currentDeviceType]
  +[SBFWallpaperParallaxSettings _requiredOverhangSizeForDeviceType:]
  +[SBFWallpaperParallaxSettings _requiredOverhangSizeForCurrentDevice]
  +[SBFWallpaperParallaxSettings bestWallpaperSizeForParallaxFactor:portrait:]
  +[SBFWallpaperParallaxSettings overhangSizeForDeviceType:]
  +[SBFWallpaperParallaxSettings minimumZoomScaleForWallpaperSize:parallaxFactor:deviceType:]
  +[SBFWallpaperParallaxSettings bestWallpaperSizeForParallaxFactor:]
  +[SBFWallpaperParallaxSettings overhangSizeForCurrentDevice]
  +[SBFWallpaperParallaxSettings minimumZoomScaleForCurrentDeviceForWallpaperSize:parallaxFactor:]
  +[SBFWallpaperParallaxSettings settingsControllerModule]
  +[SBFWallpaperParallaxSettings bestWallpaperSizeForWallpaperSize:deviceType:parallaxFactor:portrait:]

  // instance methods
  -[SBFWallpaperParallaxSettings setDefaultValues]
  -[SBFWallpaperParallaxSettings overhangX]
  -[SBFWallpaperParallaxSettings overhangY]
  -[SBFWallpaperParallaxSettings setOverhangY:]
  -[SBFWallpaperParallaxSettings setOverhangX:]
  -[SBFWallpaperParallaxSettings setPerspectiveTransform:]
  -[SBFWallpaperParallaxSettings perspectiveTransform]


SBFSecureDisplayCoordinator : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL secureMode

  // instance methods
  -[SBFSecureDisplayCoordinator setSecureMode:]
  -[SBFSecureDisplayCoordinator setSecureMode:postNotification:]
  -[SBFSecureDisplayCoordinator inSecureMode]


SBFWallpaperDefaultsWrapper : NSObject /usr/lib/libSystem.B.dylib
 @property  double parallaxFactor
 @property  double zoomScale
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} cropRect
 @property  BOOL supportsCropping
 @property  BOOL magnifyEnabled
 @property  BOOL portrait
 @property  NSString *wallpaperName
 @property  NSData *imageHashData
 @property  long long wallpaperMode
 @property  NSDictionary *wallpaperKitData
 @property  BOOL hasVideo
 @property  double stillTimeInVideo
 @property  NSString *wallpaperIdentifier
 @property  NSDictionary *wallpaperOptions
 @property  BOOL wallpaperWasUserSet
 @property  NSData *colorData
 @property  NSString *colorName
 @property  NSData *gradientData

  // class methods
  +[SBFWallpaperDefaultsWrapper lockScreenWrapperForLegacyDefaults:]
  +[SBFWallpaperDefaultsWrapper homeScreenWrapperForLegacyDefaults:]

  // instance methods
  -[SBFWallpaperDefaultsWrapper setWallpaperMode:]
  -[SBFWallpaperDefaultsWrapper setSupportsCropping:]
  -[SBFWallpaperDefaultsWrapper wallpaperName]
  -[SBFWallpaperDefaultsWrapper setHasVideo:]
  -[SBFWallpaperDefaultsWrapper setMagnifyEnabled:]
  -[SBFWallpaperDefaultsWrapper wallpaperKitData]
  -[SBFWallpaperDefaultsWrapper setStillTimeInVideo:]
  -[SBFWallpaperDefaultsWrapper colorName]
  -[SBFWallpaperDefaultsWrapper setWallpaperOptions:]
  -[SBFWallpaperDefaultsWrapper wallpaperMode]
  -[SBFWallpaperDefaultsWrapper setZoomScale:]
  -[SBFWallpaperDefaultsWrapper zoomScale]
  -[SBFWallpaperDefaultsWrapper setColorData:]
  -[SBFWallpaperDefaultsWrapper supportsCropping]
  -[SBFWallpaperDefaultsWrapper cropRect]
  -[SBFWallpaperDefaultsWrapper stillTimeInVideo]
  -[SBFWallpaperDefaultsWrapper setParallaxFactor:]
  -[SBFWallpaperDefaultsWrapper magnifyEnabled]
  -[SBFWallpaperDefaultsWrapper initWithWallpaperDefaultsDict:]
  -[SBFWallpaperDefaultsWrapper hasVideo]
  -[SBFWallpaperDefaultsWrapper parallaxFactor]
  -[SBFWallpaperDefaultsWrapper setWallpaperKitData:]
  -[SBFWallpaperDefaultsWrapper wallpaperDefaultsDict]
  -[SBFWallpaperDefaultsWrapper .cxx_destruct]
  -[SBFWallpaperDefaultsWrapper gradientData]
  -[SBFWallpaperDefaultsWrapper setImageHashData:]
  -[SBFWallpaperDefaultsWrapper setWallpaperIdentifier:]
  -[SBFWallpaperDefaultsWrapper setCropRect:]
  -[SBFWallpaperDefaultsWrapper colorData]
  -[SBFWallpaperDefaultsWrapper portrait]
  -[SBFWallpaperDefaultsWrapper setWallpaperWasUserSet:]
  -[SBFWallpaperDefaultsWrapper wallpaperWasUserSet]
  -[SBFWallpaperDefaultsWrapper setWallpaperName:]
  -[SBFWallpaperDefaultsWrapper imageHashData]
  -[SBFWallpaperDefaultsWrapper wallpaperOptions]
  -[SBFWallpaperDefaultsWrapper wallpaperIdentifier]
  -[SBFWallpaperDefaultsWrapper setColorName:]
  -[SBFWallpaperDefaultsWrapper setGradientData:]
  -[SBFWallpaperDefaultsWrapper setPortrait:]


SBFMotionGestureController : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFMotionGestureController sharedInstance]

  // instance methods
  -[SBFMotionGestureController init]
  -[SBFMotionGestureController _observersForPriority:]
  -[SBFMotionGestureController dealloc]
  -[SBFMotionGestureController _removeGestureManager]
  -[SBFMotionGestureController addGestureObserver:withPriority:]
  -[SBFMotionGestureController _addGestureObserver:withPriority:]
  -[SBFMotionGestureController _updateGestureManager]
  -[SBFMotionGestureController _removeGestureObserver:]
  -[SBFMotionGestureController _highestPriorityObservers]
  -[SBFMotionGestureController .cxx_destruct]
  -[SBFMotionGestureController _hasObservers]
  -[SBFMotionGestureController _enumerateObserversByPriority:]
  -[SBFMotionGestureController _addGestureManager]
  -[SBFMotionGestureController _notifyObserversOfGesture:]
  -[SBFMotionGestureController addGestureObserver:]
  -[SBFMotionGestureController removeGestureObserver:]


SBHomeScreenDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL sidebarVisible
 @property  BOOL sidebarPinned
 @property  BOOL layoutLowDensity
 @property  BOOL shouldFudgeShortcutsToCauseMaximumPain
 @property  BOOL sidebarEverBeenVisible
 @property  NSDate *sidebarLearningCadenceCommenceDate
 @property  long long sidebarLearningCadenceEpoch
 @property  BOOL shouldAutoFillFavoriteList
 @property  BOOL shouldPrepareDefaultTodayList
 @property  BOOL shouldPrepareStackForDefaultTodayList
 @property  NSString *overriddenScreenType
 @property  BOOL automaticallyAddsNewApplications
 @property  BOOL showsBadgesInAppLibrary
 @property  BOOL pagesHaveEverBeenHidden
 @property  BOOL pageHidingUIEverEntered
 @property  BOOL shouldShowLibraryEducationView
 @property  BOOL shouldShowAppLibraryOnBoardingAlert
 @property  BOOL shouldShowPageHidingOnBoardingAlert
 @property  BOOL shouldShowAvocadoWidgetsOnBoardingAlert

  // instance methods
  -[SBHomeScreenDefaults automaticallyAddsNewApplicationsExists]
  -[SBHomeScreenDefaults _bindAndRegisterDefaults]


SBSoundDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL ringerMuted
 @property  NSString *calendarAlarmPath
 @property  BOOL vibrateWhenRinging
 @property  BOOL vibrateWhenSilent
 @property  BOOL playSoundOnDeviceWake
 @property  BOOL debugEUVolumeLimit

  // instance methods
  -[SBSoundDefaults _bindAndRegisterDefaults]


SBApplicationDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL forcesMedusaAdoption
 @property  BOOL ignoresDeclaredNetworkUsage
 @property  BOOL shouldAllowScreenshotsInLoginWindow
 @property  NSString *bundleIdentifierToForceHomeAffordanceInset
 @property  BOOL shouldAllowUseOfNonRecapPPT
 @property  BOOL laserForLaunchPPT
 @property  BOOL shouldShowInternalApplications
 @property  BOOL shouldShowNonDefaultSystemApplications

  // instance methods
  -[SBApplicationDefaults _bindAndRegisterDefaults]


SBFWallpaperSettings : PTSettings /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
 @property  PTOutlet *resetWallpaperOutlet
 @property  SBFWallpaperParallaxSettings *homeScreenParallaxSettings
 @property  SBFWallpaperParallaxSettings *lockScreenParallaxSettings

  // class methods
  +[SBFWallpaperSettings settingsControllerModule]

  // instance methods
  -[SBFWallpaperSettings setDefaultValues]
  -[SBFWallpaperSettings lockScreenParallaxSettings]
  -[SBFWallpaperSettings setHomeScreenParallaxSettings:]
  -[SBFWallpaperSettings setLockScreenParallaxSettings:]
  -[SBFWallpaperSettings .cxx_destruct]
  -[SBFWallpaperSettings setResetWallpaperOutlet:]
  -[SBFWallpaperSettings parallaxSettingsForVariant:]
  -[SBFWallpaperSettings resetWallpaperOutlet]
  -[SBFWallpaperSettings homeScreenParallaxSettings]


SBReusableViewMap : NSObject /usr/lib/libSystem.B.dylib <BSDescriptionProviding>
 @property  <SBReusableViewMapDelegate> *delegate
 @property  unsigned long recycledViewCount
 @property  unsigned long viewRecyclingCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBReusableViewMap initWithDelegate:]
  -[SBReusableViewMap recycleView:]
  -[SBReusableViewMap init]
  -[SBReusableViewMap dealloc]
  -[SBReusableViewMap .cxx_destruct]
  -[SBReusableViewMap viewRecyclingCount]
  -[SBReusableViewMap succinctDescriptionBuilder]
  -[SBReusableViewMap purgeAllViews]
  -[SBReusableViewMap isViewRecycled:]
  -[SBReusableViewMap succinctDescription]
  -[SBReusableViewMap recycledViewCount]
  -[SBReusableViewMap purgeViewsForClass:]
  -[SBReusableViewMap viewOfClass:]
  -[SBReusableViewMap addRecycledViewsOfClass:upToCount:]
  -[SBReusableViewMap setDelegate:]
  -[SBReusableViewMap dequeueReusableViewOfClass:]
  -[SBReusableViewMap invalidate]
  -[SBReusableViewMap enumerateRecycledViewsUsingBlock:]
  -[SBReusableViewMap newViewOfClass:]
  -[SBReusableViewMap delegate]
  -[SBReusableViewMap descriptionWithMultilinePrefix:]
  -[SBReusableViewMap descriptionBuilderWithMultilinePrefix:]


SBWallpaperDefaults : SBAbstractSpringBoardDefaultDomain
 @property  NSDictionary *homeScreenWallpapers
 @property  NSDictionary *lockScreenWallpapers
 @property  BOOL enableWallpaperDimming
 @property  NSDate *dateIrisWallpaperLastPlayed
 @property  unsigned long irisWallpaperPlayCount
 @property  BOOL legacyUsesUniqueHomeScreenWallpaper

  // instance methods
  -[SBWallpaperDefaults clearLegacyDefaults]
  -[SBWallpaperDefaults _bindAndRegisterDefaults]


SBThermalDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL wasConnectedToWiFiWhenBrickedForThermalConditions

  // instance methods
  -[SBThermalDefaults _bindAndRegisterDefaults]


SBFWallpaperDirectoryDataStore : NSObject /usr/lib/libSystem.B.dylib <SBFWallpaperDataStore, BSDescriptionProviding>
 @property  NSDictionary *directoryCreationAttributes
 @property  NSURL *directoryURL
 @property  BOOL supportsWallpaperOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFWallpaperDirectoryDataStore defaultDirectoryURL]

  // instance methods
  -[SBFWallpaperDirectoryDataStore removeWallpaperColorForVariants:]
  -[SBFWallpaperDirectoryDataStore proceduralWallpaperInfoForVariant:]
  -[SBFWallpaperDirectoryDataStore removeWallpaperImageDataTypes:forVariants:]
  -[SBFWallpaperDirectoryDataStore removeWallpaperGradientForVariants:]
  -[SBFWallpaperDirectoryDataStore setWallpaperOptions:forVariants:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore wallpaperImageForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore setWallpaperImageHashData:forVariants:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore setWallpaperColor:forVariants:]
  -[SBFWallpaperDirectoryDataStore hasWallpaperImageForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore setWallpaperThumbnailData:forVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore wallpaperOptionsForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore setOriginalVideoURL:forVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore wallpaperImageHashDataForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore wallpaperOriginalImageForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore removeWallpaperImageHashDataForVariants:]
  -[SBFWallpaperDirectoryDataStore setWallpaperColorName:forVariants:]
  -[SBFWallpaperDirectoryDataStore removeWallpaperOptionsForVariants:]
  -[SBFWallpaperDirectoryDataStore supportsWallpaperOptions]
  -[SBFWallpaperDirectoryDataStore wallpaperVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore setWallpaperGradient:forVariants:]
  -[SBFWallpaperDirectoryDataStore init]
  -[SBFWallpaperDirectoryDataStore wallpaperImageURLForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore copyVideoAtURL:toURL:]
  -[SBFWallpaperDirectoryDataStore wallpaperThumbnailDataForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore wallpaperGradientForVariant:]
  -[SBFWallpaperDirectoryDataStore verifiedOriginalVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore unverifiedVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore setWallpaperImage:forVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore removeProceduralWallpaperForVariants:]
  -[SBFWallpaperDirectoryDataStore .cxx_destruct]
  -[SBFWallpaperDirectoryDataStore setProceduralWallpaperInfo:forVariants:]
  -[SBFWallpaperDirectoryDataStore directoryCreationAttributes]
  -[SBFWallpaperDirectoryDataStore wallpaperThumbnailURLForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore succinctDescriptionBuilder]
  -[SBFWallpaperDirectoryDataStore setSupportsWallpaperOptions:]
  -[SBFWallpaperDirectoryDataStore wallpaperColorForVariant:]
  -[SBFWallpaperDirectoryDataStore succinctDescription]
  -[SBFWallpaperDirectoryDataStore didWriteFileToURL:]
  -[SBFWallpaperDirectoryDataStore setWallpaperOriginalImage:forVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore directoryURL]
  -[SBFWallpaperDirectoryDataStore removeVideoForVariant:]
  -[SBFWallpaperDirectoryDataStore moveWallpaperImageDataTypes:fromVariant:toVariant:]
  -[SBFWallpaperDirectoryDataStore wallpaperColorNameForVariant:]
  -[SBFWallpaperDirectoryDataStore initWithDirectoryURL:]
  -[SBFWallpaperDirectoryDataStore wallpaperOriginalVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore createDirectory]
  -[SBFWallpaperDirectoryDataStore wallpaperOptionsURLForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore descriptionWithMultilinePrefix:]
  -[SBFWallpaperDirectoryDataStore verifiedVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore descriptionBuilderWithMultilinePrefix:]
  -[SBFWallpaperDirectoryDataStore setVideoURL:forVariant:wallpaperMode:]
  -[SBFWallpaperDirectoryDataStore wallpaperOriginalImageURLForVariant:wallpaperMode:]


SBFWallpaperSharedDirectoryDataStore : SBFWallpaperDirectoryDataStore
  // class methods
  +[SBFWallpaperSharedDirectoryDataStore defaultDirectoryURL]

  // instance methods
  -[SBFWallpaperSharedDirectoryDataStore directoryCreationAttributes]
  -[SBFWallpaperSharedDirectoryDataStore didWriteFileToURL:]
  -[SBFWallpaperSharedDirectoryDataStore initWithDirectoryURL:]


SBFCARendererImpl : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFCARendererImpl luminanceTreatmentFilters]
  +[SBFCARendererImpl _actuallyRenderImage:requiresBGRA:downsampleFactor:layerCustomizer:]
  +[SBFCARendererImpl renderTreatedWallpaperImage:needsLuminanceTreatment:needsDimmingTreatment:downsampleFactor:averageColor:]
  +[SBFCARendererImpl renderMaterialImage:recipeName:containingBundle:weighting:downsampleFactor:]


SBFWallpaperCache : NSObject /usr/lib/libSystem.B.dylib
 @property  SBFMappedImageCache *imageCache

  // class methods
  +[SBFWallpaperCache wallpaperCache]

  // instance methods
  -[SBFWallpaperCache initWithOptions:]
  -[SBFWallpaperCache imageForKey:generatingIfNecessaryWithBlock:completion:]
  -[SBFWallpaperCache imageForKey:generatingIfNecessaryWithBlock:]
  -[SBFWallpaperCache .cxx_destruct]
  -[SBFWallpaperCache imageCache]
  -[SBFWallpaperCache warmupForKey:]
  -[SBFWallpaperCache colorBoxesForKey:generatingIfNeceesaryFromImage:]
  -[SBFWallpaperCache removeEverythingWithCompletion:]


SBFSubject : SBFObservable <SBFObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFSubject _observers]
  -[SBFSubject subscribe:]
  -[SBFSubject init]
  -[SBFSubject observerDidComplete]
  -[SBFSubject .cxx_destruct]
  -[SBFSubject observerDidFailWithError:]
  -[SBFSubject observerDidReceiveResult:]


SBVoiceControlDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL disableVoiceControlForBluetoothRequests
 @property  BOOL disableHandlerActions
 @property  BOOL voiceControlLoggingEnabled

  // instance methods
  -[SBVoiceControlDefaults _bindAndRegisterDefaults]


SBFTouchPassThroughViewController : UIViewController /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
  // instance methods
  -[SBFTouchPassThroughViewController configureTouchPassThroughView:]
  -[SBFTouchPassThroughViewController loadView]


SBFPasscodeLockTrackerForTransientAssertions : SBFAuthenticationAssertionTracker
  // instance methods
  -[SBFPasscodeLockTrackerForTransientAssertions mkbAssertionOptions]
  -[SBFPasscodeLockTrackerForTransientAssertions isAssertionValid:]


SBFPasscodeLockTrackerForPreventLockAssertions : SBFAuthenticationAssertionTracker

SBFAuthenticationAssertionTracker : NSObject /usr/lib/libSystem.B.dylib <BSDescriptionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFAuthenticationAssertionTracker addAssertion:]
  -[SBFAuthenticationAssertionTracker init]
  -[SBFAuthenticationAssertionTracker removeAssertion:]
  -[SBFAuthenticationAssertionTracker dealloc]
  -[SBFAuthenticationAssertionTracker .cxx_destruct]
  -[SBFAuthenticationAssertionTracker mkbAssertionOptions]
  -[SBFAuthenticationAssertionTracker succinctDescriptionBuilder]
  -[SBFAuthenticationAssertionTracker succinctDescription]
  -[SBFAuthenticationAssertionTracker hasActiveAssertions]
  -[SBFAuthenticationAssertionTracker descriptionWithMultilinePrefix:]
  -[SBFAuthenticationAssertionTracker descriptionBuilderWithMultilinePrefix:]
  -[SBFAuthenticationAssertionTracker isAssertionValid:]


SBFAuthenticationAssertionManager : NSObject /usr/lib/libSystem.B.dylib <BSDescriptionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFAuthenticationAssertionManager addAssertion:]
  -[SBFAuthenticationAssertionManager init]
  -[SBFAuthenticationAssertionManager removeAssertion:]
  -[SBFAuthenticationAssertionManager .cxx_destruct]
  -[SBFAuthenticationAssertionManager succinctDescriptionBuilder]
  -[SBFAuthenticationAssertionManager succinctDescription]
  -[SBFAuthenticationAssertionManager hasActiveAssertions]
  -[SBFAuthenticationAssertionManager descriptionWithMultilinePrefix:]
  -[SBFAuthenticationAssertionManager descriptionBuilderWithMultilinePrefix:]
  -[SBFAuthenticationAssertionManager isAssertionValid:]


SBFTouchPassThroughView : UIView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
  // instance methods
  -[SBFTouchPassThroughView hitTest:withEvent:]


SBFView : UIView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
 @property  {CGSize=dd} intrinsicContentSize
 @property  NSArray *animatedLayerProperties
 @property  @? didMoveToWindowHandler

  // instance methods
  -[SBFView didMoveToWindow]
  -[SBFView _shouldAnimatePropertyWithKey:]
  -[SBFView .cxx_destruct]
  -[SBFView didMoveToWindowHandler]
  -[SBFView animatedLayerProperties]
  -[SBFView setAnimatedLayerProperties:]
  -[SBFView setDidMoveToWindowHandler:]
  -[SBFView intrinsicContentSize]
  -[SBFView setIntrinsicContentSize:]


SBFCredentialSet : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
  // class methods
  +[SBFCredentialSet supportsSecureCoding]

  // instance methods
  -[SBFCredentialSet init]
  -[SBFCredentialSet dealloc]
  -[SBFCredentialSet .cxx_destruct]
  -[SBFCredentialSet initWithSerializedCredentialSet:]
  -[SBFCredentialSet serializedCredentialSet]
  -[SBFCredentialSet encodeWithCoder:]
  -[SBFCredentialSet initWithCoder:]


SBSetupDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL inSetupModeForActivationChange

  // instance methods
  -[SBSetupDefaults _bindAndRegisterDefaults]


SBFWallpaperDefaults : NSObject /usr/lib/libSystem.B.dylib
 @property  SBWallpaperDefaults *defaultsStore
 @property  NSMutableDictionary *lockScreenDefaultsStoreWrapper
 @property  NSMutableDictionary *homeScreenDefaultsStoreWrapper

  // class methods
  +[SBFWallpaperDefaults defaults]

  // instance methods
  -[SBFWallpaperDefaults wallpaperOptionsForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults setHasVideo:]
  -[SBFWallpaperDefaults _updateDefaultsForVariant:wallpaperMode:updater:]
  -[SBFWallpaperDefaults lockScreenDefaultsStoreWrapper]
  -[SBFWallpaperDefaults setStillTimeInVideo:]
  -[SBFWallpaperDefaults imageHashForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults cropRectForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults proceduralUserSetForVariant:]
  -[SBFWallpaperDefaults setGradientData:forLocations:]
  -[SBFWallpaperDefaults resetMagnifyDefaults]
  -[SBFWallpaperDefaults stillTimeInVideoForVariant:]
  -[SBFWallpaperDefaults init]
  -[SBFWallpaperDefaults wallpaperGradientDataForVariant:]
  -[SBFWallpaperDefaults stillTimeInVideo]
  -[SBFWallpaperDefaults hasVideo]
  -[SBFWallpaperDefaults .cxx_destruct]
  -[SBFWallpaperDefaults homeScreenDefaultsStoreWrapper]
  -[SBFWallpaperDefaults setColorData:forLocations:]
  -[SBFWallpaperDefaults setWallpaperOptions:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults parallaxFactorForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults _setDefaultsWithDictionary:variant:wallpaperMode:]
  -[SBFWallpaperDefaults resetNameDefaults]
  -[SBFWallpaperDefaults resetZoomScaleDefaults]
  -[SBFWallpaperDefaults setParallaxFactor:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults proceduralIdentifierForVariant:]
  -[SBFWallpaperDefaults resetCroppingDefaults]
  -[SBFWallpaperDefaults resetPortraitDefaults]
  -[SBFWallpaperDefaults magnifyEnabledForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults setProceduralUserSet:forLocations:]
  -[SBFWallpaperDefaults setPortrait:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults updateDefaultsForLocations:updater:]
  -[SBFWallpaperDefaults setZoomScale:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults zoomScaleForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults setMagnifyEnabled:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults setWallpaperKitData:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults setSupportsCropping:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults wallpaperColorDataForVariant:]
  -[SBFWallpaperDefaults proceduralOptionsForVariant:]
  -[SBFWallpaperDefaults resetDefaults]
  -[SBFWallpaperDefaults resetHasVideoDefaults]
  -[SBFWallpaperDefaults resetImageHashDefaults]
  -[SBFWallpaperDefaults isPortraitForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults defaultsStore]
  -[SBFWallpaperDefaults supportsCroppingForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults _defaultsWrapperForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults resetWallpaperKitDataDefaults]
  -[SBFWallpaperDefaults setProceduralOptions:forLocations:]
  -[SBFWallpaperDefaults _keyForWallpaperMode:]
  -[SBFWallpaperDefaults wallpaperColorNameForVariant:]
  -[SBFWallpaperDefaults setColorName:forLocations:]
  -[SBFWallpaperDefaults setProceduralIdentifier:forLocations:]
  -[SBFWallpaperDefaults nameForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults initWithDefaultsStore:]
  -[SBFWallpaperDefaults wallpaperKitDataForVariant:wallpaperMode:]
  -[SBFWallpaperDefaults resetParallaxFactorDefaults]
  -[SBFWallpaperDefaults setCropRect:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults setName:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults resetStillTimeInVideoDefaults]
  -[SBFWallpaperDefaults setImageHash:forLocations:wallpaperMode:]
  -[SBFWallpaperDefaults hasVideoForVariant:]


SBFDateTimeController : NSObject /usr/lib/libSystem.B.dylib
 @property  NSDate *currentDate
 @property  NSDate *overrideDate
 @property  double overrideDateOffset

  // class methods
  +[SBFDateTimeController sharedInstance]

  // instance methods
  -[SBFDateTimeController currentDate]
  -[SBFDateTimeController .cxx_destruct]
  -[SBFDateTimeController overrideDate]
  -[SBFDateTimeController overrideDateOffset]
  -[SBFDateTimeController setOverrideDate:]
  -[SBFDateTimeController setOverrideDateOffset:]
  -[SBFDateTimeController removeObserver:]
  -[SBFDateTimeController addObserver:]


SBFFluidBehaviorSettings : PTSettings /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard <UIViewSpringAnimationBehaviorDescribing>
 @property  long long behaviorType
 @property  NSString *name
 @property  double deceleration
 @property  double dampingRatio
 @property  double response
 @property  double retargetImpulse
 @property  double trackingDampingRatio
 @property  double trackingResponse
 @property  double trackingRetargetImpulse
 @property  BOOL smoothingAndProjectionEnabled
 @property  double dampingRatioSmoothing
 @property  double responseSmoothing
 @property  double trackingDampingRatioSmoothing
 @property  double trackingResponseSmoothing
 @property  double inertialTargetSmoothingRatio
 @property  double inertialProjectionDeceleration

  // class methods
  +[SBFFluidBehaviorSettings _moduleWithSectionTitle:]
  +[SBFFluidBehaviorSettings settingsControllerModule]

  // instance methods
  -[SBFFluidBehaviorSettings setDefaultValues]
  -[SBFFluidBehaviorSettings setDampingRatio:]
  -[SBFFluidBehaviorSettings .cxx_destruct]
  -[SBFFluidBehaviorSettings name]
  -[SBFFluidBehaviorSettings dampingRatioSmoothing]
  -[SBFFluidBehaviorSettings setBehaviorType:]
  -[SBFFluidBehaviorSettings setDeceleration:]
  -[SBFFluidBehaviorSettings setTrackingRetargetImpulse:]
  -[SBFFluidBehaviorSettings setTrackingDampingRatioSmoothing:]
  -[SBFFluidBehaviorSettings setTrackingResponseSmoothing:]
  -[SBFFluidBehaviorSettings setSmoothingAndProjectionEnabled:]
  -[SBFFluidBehaviorSettings _effectiveTrackingDampingRatio]
  -[SBFFluidBehaviorSettings _effectiveTrackingResponse]
  -[SBFFluidBehaviorSettings _effectiveTrackingRetargetImpulse]
  -[SBFFluidBehaviorSettings smoothingAndProjectionEnabled]
  -[SBFFluidBehaviorSettings trackingDampingRatio]
  -[SBFFluidBehaviorSettings trackingResponse]
  -[SBFFluidBehaviorSettings retargetImpulse]
  -[SBFFluidBehaviorSettings trackingRetargetImpulse]
  -[SBFFluidBehaviorSettings setDefaultCriticallyDampedValues]
  -[SBFFluidBehaviorSettings deceleration]
  -[SBFFluidBehaviorSettings trackingDampingRatioSmoothing]
  -[SBFFluidBehaviorSettings trackingResponseSmoothing]
  -[SBFFluidBehaviorSettings inertialTargetSmoothingRatio]
  -[SBFFluidBehaviorSettings setInertialTargetSmoothingRatio:]
  -[SBFFluidBehaviorSettings setResponseSmoothing:]
  -[SBFFluidBehaviorSettings setDampingRatioSmoothing:]
  -[SBFFluidBehaviorSettings setTrackingDampingRatio:]
  -[SBFFluidBehaviorSettings setTrackingResponse:]
  -[SBFFluidBehaviorSettings behaviorType]
  -[SBFFluidBehaviorSettings dampingRatio]
  -[SBFFluidBehaviorSettings parametersForTransitionFromState:toState:]
  -[SBFFluidBehaviorSettings settlingDuration]
  -[SBFFluidBehaviorSettings setInertialProjectionDeceleration:]
  -[SBFFluidBehaviorSettings setRetargetImpulse:]
  -[SBFFluidBehaviorSettings setResponse:]
  -[SBFFluidBehaviorSettings responseSmoothing]
  -[SBFFluidBehaviorSettings inertialProjectionDeceleration]
  -[SBFFluidBehaviorSettings setName:]
  -[SBFFluidBehaviorSettings response]


SBFBokehWallpaperView : SBFWallpaperView
 @property  CAGradientLayer *layer

  // class methods
  +[SBFBokehWallpaperView _allowsParallax]
  +[SBFBokehWallpaperView purpleGradient]
  +[SBFBokehWallpaperView layerClass]
  +[SBFBokehWallpaperView blueGradient]
  +[SBFBokehWallpaperView silverGradient]
  +[SBFBokehWallpaperView defaultGradientSilver]
  +[SBFBokehWallpaperView defaultGradient]
  +[SBFBokehWallpaperView greenGradient]
  +[SBFBokehWallpaperView redGradient]
  +[SBFBokehWallpaperView yellowGradient]
  +[SBFBokehWallpaperView orangeGradient]

  // instance methods
  -[SBFBokehWallpaperView setWallpaperAnimationEnabled:]
  -[SBFBokehWallpaperView _imageForBackdropParameters:includeTint:overrideTraitCollection:]
  -[SBFBokehWallpaperView wallpaperType]
  -[SBFBokehWallpaperView cacheGroup]
  -[SBFBokehWallpaperView initWithFrame:configuration:variant:cacheGroup:delegate:options:]
  -[SBFBokehWallpaperView _computeAverageColor]
  -[SBFBokehWallpaperView _imageFromColor:]
  -[SBFBokehWallpaperView snapshotImage]
  -[SBFBokehWallpaperView _screenDimmed:]
  -[SBFBokehWallpaperView _screenUndimmed:]
  -[SBFBokehWallpaperView isDisplayingWallpaperWithConfiguration:forVariant:]
  -[SBFBokehWallpaperView layer]
  -[SBFBokehWallpaperView _lowPowerModeIsEnabled]
  -[SBFBokehWallpaperView dealloc]
  -[SBFBokehWallpaperView _layerIsOutOfBounds:]
  -[SBFBokehWallpaperView _updateVariantStatus]
  -[SBFBokehWallpaperView _needsFallbackImageForBackdropGeneratedImage:]
  -[SBFBokehWallpaperView _toggleCircleAnimations:]
  -[SBFBokehWallpaperView _styleModeChanged:]
  -[SBFBokehWallpaperView _wallpaperDidChange:]
  -[SBFBokehWallpaperView _thermalStateDidChange:]
  -[SBFBokehWallpaperView _updateGradientAndFillColor]
  -[SBFBokehWallpaperView _addBokehCircles:]
  -[SBFBokehWallpaperView userInterfaceStyle]
  -[SBFBokehWallpaperView .cxx_destruct]
  -[SBFBokehWallpaperView _handleVariantChange]
  -[SBFBokehWallpaperView _destroyDisplayLink]
  -[SBFBokehWallpaperView _updateCircleFillColor]
  -[SBFBokehWallpaperView _updateOrientationIfNeeded]
  -[SBFBokehWallpaperView newRectForCircle:potentialX:potentialY:]
  -[SBFBokehWallpaperView _createSnapshotBuffer]
  -[SBFBokehWallpaperView invalidate]
  -[SBFBokehWallpaperView _correctGyroValues:y:]
  -[SBFBokehWallpaperView _folderBlurImage]
  -[SBFBokehWallpaperView _initDisplayLink]
  -[SBFBokehWallpaperView _screenDidUpdate]
  -[SBFBokehWallpaperView _thermalStateIsCritical]


SBFColorBoxes : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  {CGSize=dd} imageSize
 @property  unsigned long downsampledBoxSize
 @property  unsigned long effectiveDownsampleFactor
 @property  unsigned long pixelHeight
 @property  unsigned long pixelWidth
 @property  unsigned char totalContrast8
 @property  ^{?=CCCC} colorBoxesRowMajor
 @property  unsigned long rowCount
 @property  unsigned long columnCount
 @property  unsigned long size

  // class methods
  +[SBFColorBoxes supportsSecureCoding]
  +[SBFColorBoxes colorBoxesForImage:]

  // instance methods
  -[SBFColorBoxes pixelHeight]
  -[SBFColorBoxes columnCount]
  -[SBFColorBoxes imageSize]
  -[SBFColorBoxes contrast]
  -[SBFColorBoxes effectiveDownsampleFactor]
  -[SBFColorBoxes dealloc]
  -[SBFColorBoxes size]
  -[SBFColorBoxes rectForColorBoxAtRow:col:]
  -[SBFColorBoxes colorBoxAtRow:col:]
  -[SBFColorBoxes encodeWithCoder:]
  -[SBFColorBoxes colorBoxesRowMajor]
  -[SBFColorBoxes pixelWidth]
  -[SBFColorBoxes totalContrast8]
  -[SBFColorBoxes initWithColorBoxes:size:rowCount:columnCount:totalContrast8:imageSize:downsampledBoxSize:effectiveDownsampleFactor:pixelHeight:pixelWidth:]
  -[SBFColorBoxes initWithCoder:]
  -[SBFColorBoxes downsampledBoxSize]
  -[SBFColorBoxes rowCount]


SBFWallpaperMemoryDataStore : NSObject /usr/lib/libSystem.B.dylib <SBFWallpaperDataStore, BSDescriptionProviding>
 @property  unsigned long numberOfStoredImages
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFWallpaperMemoryDataStore removeWallpaperColorForVariants:]
  -[SBFWallpaperMemoryDataStore proceduralWallpaperInfoForVariant:]
  -[SBFWallpaperMemoryDataStore removeWallpaperImageDataTypes:forVariants:]
  -[SBFWallpaperMemoryDataStore removeWallpaperGradientForVariants:]
  -[SBFWallpaperMemoryDataStore setWallpaperOptions:forVariants:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore wallpaperImageForVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore setWallpaperImageHashData:forVariants:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore setWallpaperColor:forVariants:]
  -[SBFWallpaperMemoryDataStore hasWallpaperImageForVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore setWallpaperThumbnailData:forVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore wallpaperOptionsForVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore setOriginalVideoURL:forVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore wallpaperImageHashDataForVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore wallpaperOriginalImageForVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore removeWallpaperImageHashDataForVariants:]
  -[SBFWallpaperMemoryDataStore setWallpaperColorName:forVariants:]
  -[SBFWallpaperMemoryDataStore removeWallpaperOptionsForVariants:]
  -[SBFWallpaperMemoryDataStore setWallpaperGradient:forVariants:]
  -[SBFWallpaperMemoryDataStore init]
  -[SBFWallpaperMemoryDataStore wallpaperThumbnailDataForVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore wallpaperGradientForVariant:]
  -[SBFWallpaperMemoryDataStore verifiedOriginalVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore unverifiedVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore setWallpaperImage:forVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore removeProceduralWallpaperForVariants:]
  -[SBFWallpaperMemoryDataStore .cxx_destruct]
  -[SBFWallpaperMemoryDataStore setProceduralWallpaperInfo:forVariants:]
  -[SBFWallpaperMemoryDataStore succinctDescriptionBuilder]
  -[SBFWallpaperMemoryDataStore numberOfStoredImages]
  -[SBFWallpaperMemoryDataStore wallpaperColorForVariant:]
  -[SBFWallpaperMemoryDataStore succinctDescription]
  -[SBFWallpaperMemoryDataStore setWallpaperOriginalImage:forVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore removeVideoForVariant:]
  -[SBFWallpaperMemoryDataStore moveWallpaperImageDataTypes:fromVariant:toVariant:]
  -[SBFWallpaperMemoryDataStore wallpaperColorNameForVariant:]
  -[SBFWallpaperMemoryDataStore descriptionWithMultilinePrefix:]
  -[SBFWallpaperMemoryDataStore verifiedVideoURLForVariant:wallpaperMode:]
  -[SBFWallpaperMemoryDataStore descriptionBuilderWithMultilinePrefix:]
  -[SBFWallpaperMemoryDataStore setVideoURL:forVariant:wallpaperMode:]


SBAppSwitcherDefaults : SBAbstractSpringBoardDefaultDomain
 @property  NSArray *recentsPlistRepresentation
 @property  unsigned long bottomEdgeGestureSwipeCount
 @property  BOOL springBoardKillable
 @property  BOOL trackpadSwitcherGesturesEnabled
 @property  NSArray *legacyRecentApplications
 @property  NSArray *legacyRecentDisplayItems
 @property  NSArray *legacyRecentDisplayItemRoles

  // instance methods
  -[SBAppSwitcherDefaults clearLegacyDefaults]
  -[SBAppSwitcherDefaults _bindAndRegisterDefaults]


SBFBackdropLegibilitySettingsProvider : NSObject /usr/lib/libSystem.B.dylib <_UIBackdropViewObserver, SBFLegibilitySettingsProvider>
 @property  _UILegibilitySettings *legibilitySettings
 @property  <SBFLegibilitySettingsProviderDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFBackdropLegibilitySettingsProvider legibilitySettings]
  -[SBFBackdropLegibilitySettingsProvider dealloc]
  -[SBFBackdropLegibilitySettingsProvider .cxx_destruct]
  -[SBFBackdropLegibilitySettingsProvider initWithBackdropView:]
  -[SBFBackdropLegibilitySettingsProvider setDelegate:]
  -[SBFBackdropLegibilitySettingsProvider delegate]
  -[SBFBackdropLegibilitySettingsProvider backdropViewDidChange:]


SBFWakeAnimationSettings : PTSettings /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
 @property  double backlightFadeDuration
 @property  double speedMultiplierForWake
 @property  double speedMultiplierForLiftToWake
 @property  SBFAnimationSettings *dateWakeSettings
 @property  SBFAnimationSettings *contentWakeSettings
 @property  double awakeColorBrightness
 @property  double awakeDateAlpha
 @property  SBFAnimationSettings *awakeWallpaperFilterSettings
 @property  SBFAnimationSettings *dateSleepSettings
 @property  double sleepColorBrightness
 @property  SBFAnimationSettings *sleepWallpaperFilterSettings

  // class methods
  +[SBFWakeAnimationSettings settingsControllerModule]

  // instance methods
  -[SBFWakeAnimationSettings setDefaultValues]
  -[SBFWakeAnimationSettings setAwakeColorBrightness:]
  -[SBFWakeAnimationSettings awakeColorBrightness]
  -[SBFWakeAnimationSettings speedMultiplierForLiftToWake]
  -[SBFWakeAnimationSettings setSpeedMultiplierForLiftToWake:]
  -[SBFWakeAnimationSettings setDateSleepSettings:]
  -[SBFWakeAnimationSettings setSleepColorBrightness:]
  -[SBFWakeAnimationSettings .cxx_destruct]
  -[SBFWakeAnimationSettings dateWakeSettings]
  -[SBFWakeAnimationSettings setContentWakeSettings:]
  -[SBFWakeAnimationSettings setDateWakeSettings:]
  -[SBFWakeAnimationSettings contentWakeSettings]
  -[SBFWakeAnimationSettings setSpeedMultiplierForWake:]
  -[SBFWakeAnimationSettings setAwakeWallpaperFilterSettings:]
  -[SBFWakeAnimationSettings setSleepWallpaperFilterSettings:]
  -[SBFWakeAnimationSettings backlightFadeDuration]
  -[SBFWakeAnimationSettings dateSleepSettings]
  -[SBFWakeAnimationSettings setAwakeDateAlpha:]
  -[SBFWakeAnimationSettings awakeWallpaperFilterSettings]
  -[SBFWakeAnimationSettings sleepColorBrightness]
  -[SBFWakeAnimationSettings speedMultiplierForWake]
  -[SBFWakeAnimationSettings sleepWallpaperFilterSettings]
  -[SBFWakeAnimationSettings setBacklightFadeDuration:]
  -[SBFWakeAnimationSettings awakeDateAlpha]


SBFWakeAnimationDomain : PTDomain /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
  // class methods
  +[SBFWakeAnimationDomain domainName]
  +[SBFWakeAnimationDomain rootSettings]
  +[SBFWakeAnimationDomain rootSettingsClass]
  +[SBFWakeAnimationDomain domainGroupName]


SBFScrollableIrisWallpaperView : SBFScrollableStaticWallpaperView <UIGestureRecognizerDelegate, ISPlayerViewDelegate, SBFIrisWallpaperView>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <SBFIrisWallpaperViewDelegate> *irisDelegate
 @property  long long irisPlaybackState
 @property  BOOL isIrisInteracting
 @property  NSURL *videoFileURL
 @property  double stillTimeInVideo

  // instance methods
  -[SBFScrollableIrisWallpaperView irisDelegate]
  -[SBFScrollableIrisWallpaperView videoFileURL]
  -[SBFScrollableIrisWallpaperView stillTimeInVideo]
  -[SBFScrollableIrisWallpaperView playerViewIsInteractingDidChange:]
  -[SBFScrollableIrisWallpaperView isIrisInteracting]
  -[SBFScrollableIrisWallpaperView dealloc]
  -[SBFScrollableIrisWallpaperView playerViewPlaybackStateDidChange:]
  -[SBFScrollableIrisWallpaperView irisPlaybackState]
  -[SBFScrollableIrisWallpaperView irisGestureRecognizer]
  -[SBFScrollableIrisWallpaperView setIrisDelegate:]
  -[SBFScrollableIrisWallpaperView .cxx_destruct]
  -[SBFScrollableIrisWallpaperView initWithFrame:configuration:wallpaperVideo:variant:]
  -[SBFScrollableIrisWallpaperView _newImageView]
  -[SBFScrollableIrisWallpaperView gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]


SBCameraHardwareButtonDefaults : SBAbstractSpringBoardDefaultDomain
 @property  double shutterButtonLongPressTimeout
 @property  double shutterButtonLongPressCancellationTimeout
 @property  BOOL shutterButtonShouldUsePocketDetection

  // instance methods
  -[SBCameraHardwareButtonDefaults _bindAndRegisterDefaults]


SBFUserAuthenticationResponder : NSObject /usr/lib/libSystem.B.dylib <SBFAuthenticationResponder>
 @property  @? successHandler
 @property  @? failureHandler
 @property  @? invalidHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFUserAuthenticationResponder responderWithSuccessHandler:failureHandler:invalidHandler:]

  // instance methods
  -[SBFUserAuthenticationResponder handleSuccessfulAuthenticationRequest:]
  -[SBFUserAuthenticationResponder .cxx_destruct]
  -[SBFUserAuthenticationResponder successHandler]
  -[SBFUserAuthenticationResponder initWithSuccessHandler:failureHandler:invalidHandler:]
  -[SBFUserAuthenticationResponder setSuccessHandler:]
  -[SBFUserAuthenticationResponder failureHandler]
  -[SBFUserAuthenticationResponder setFailureHandler:]
  -[SBFUserAuthenticationResponder invalidHandler]
  -[SBFUserAuthenticationResponder setInvalidHandler:]
  -[SBFUserAuthenticationResponder handleFailedAuthenticationRequest:error:]
  -[SBFUserAuthenticationResponder handleInvalidAuthenticationRequest:]


SBGestureDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL systemGesturesAllowed
 @property  NSArray *systemGestureLoggingOptions

  // instance methods
  -[SBGestureDefaults _bindAndRegisterDefaults]


SBFTodayGestureDomain : PTDomain /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
  // class methods
  +[SBFTodayGestureDomain domainName]
  +[SBFTodayGestureDomain rootSettings]
  +[SBFTodayGestureDomain rootSettingsClass]
  +[SBFTodayGestureDomain domainGroupName]


SBWallpaperLegacyDefaults : SBAbstractSpringBoardDefaultDomain
 @property  NSString *homeScreenWallpaperIdentifier
 @property  NSDictionary *homeScreenWallpaperOptions
 @property  BOOL homeScreenWallpaperWasUserSet
 @property  NSString *lockScreenWallpaperIdentifier
 @property  NSDictionary *lockScreenWallpaperOptions
 @property  BOOL lockScreenWallpaperWasUserSet
 @property  double homeScreenParallaxFactor
 @property  double homeScreenZoomScale
 @property  NSString *homeScreenCropRectString
 @property  BOOL homeScreenSupportsCropping
 @property  BOOL homeScreenMagnifyEnabled
 @property  BOOL homeScreenPortrait
 @property  NSString *homeScreenWallpaperName
 @property  NSDictionary *homeScreenWallpaperKitData
 @property  double lockScreenParallaxFactor
 @property  double lockScreenZoomScale
 @property  NSString *lockScreenCropRectString
 @property  BOOL lockScreenSupportsCropping
 @property  BOOL lockScreenMagnifyEnabled
 @property  BOOL lockScreenPortrait
 @property  BOOL lockScreenHasVideo
 @property  double lockScreenStillTimeInVideo
 @property  NSString *lockScreenWallpaperName
 @property  NSDictionary *lockScreenWallpaperKitData
 @property  NSData *lockScreenColorData
 @property  NSData *homeScreenColorData
 @property  NSString *lockScreenColorName
 @property  NSString *homeScreenColorName
 @property  NSData *lockScreenImageHashData
 @property  NSData *homeScreenImageHashData
 @property  NSData *lockScreenGradientData
 @property  NSData *homeScreenGradientData

  // instance methods
  -[SBWallpaperLegacyDefaults _bindAndRegisterDefaults]


SBFCARenderer : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFCARenderer sharedInstance]
  +[SBFCARenderer shouldUseXPCServiceForRendering]

  // instance methods
  -[SBFCARenderer warmup]
  -[SBFCARenderer .cxx_destruct]
  -[SBFCARenderer _createConnection]
  -[SBFCARenderer treatWallpaperImage:needsLuminanceTreatment:needsDimmingTreatment:downsampleFactor:averageColor:]
  -[SBFCARenderer applyMaterialRecipe:recipeName:containingBundle:weighting:downsampleFactor:]
  -[SBFCARenderer _remoteObjectProxy]


SBFSteppedAnimationTimingFunctionCalculator : NSObject /usr/lib/libSystem.B.dylib
 @property  double percentComplete

  // instance methods
  -[SBFSteppedAnimationTimingFunctionCalculator init]
  -[SBFSteppedAnimationTimingFunctionCalculator addTimingFunctionWithName:fromNormalizedAnimationSettings:]
  -[SBFSteppedAnimationTimingFunctionCalculator valueForFunctionWithName:]
  -[SBFSteppedAnimationTimingFunctionCalculator .cxx_destruct]
  -[SBFSteppedAnimationTimingFunctionCalculator addTimingFunction:withName:constrainedToIntervalBetween:and:]
  -[SBFSteppedAnimationTimingFunctionCalculator addTimingFunction:withName:]
  -[SBFSteppedAnimationTimingFunctionCalculator timingFunctionNames]
  -[SBFSteppedAnimationTimingFunctionCalculator setPercentComplete:]
  -[SBFSteppedAnimationTimingFunctionCalculator percentComplete]


_SBSteppedAnimationTimingFunction : NSObject /usr/lib/libSystem.B.dylib
 @property  CAMediaTimingFunction *timingFunction
 @property  {SBNormalizedTransitionInterval=dd} constrainedRange

  // class methods
  +[_SBSteppedAnimationTimingFunction timingFunctionWithTimingFunction:constrainedToIntervalBetween:and:]

  // instance methods
  -[_SBSteppedAnimationTimingFunction timingFunction]
  -[_SBSteppedAnimationTimingFunction .cxx_destruct]
  -[_SBSteppedAnimationTimingFunction constrainedRange]
  -[_SBSteppedAnimationTimingFunction initWithTimingFunction:constrainedToIntervalBetween:and:]
  -[_SBSteppedAnimationTimingFunction valueAtPercentage:]


SBFTapticEngine : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL supportsFeedbackActuation

  // class methods
  +[SBFTapticEngine sharedInstance]

  // instance methods
  -[SBFTapticEngine init]
  -[SBFTapticEngine .cxx_destruct]
  -[SBFTapticEngine supportsFeedbackActuation]
  -[SBFTapticEngine warmUpForFeedback:withReason:]
  -[SBFTapticEngine coolDownForFeedback:withReason:]
  -[SBFTapticEngine actuateFeedback:]


SBFWallpaperView : UIView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools <PTSettingsKeyObserver, SBFLegibilitySettingsProvider>
 @property  UIImage *untreatedWallpaperImage
 @property  NSString *cacheGroup
 @property  NSString *variantCacheIdentifier
 @property  NSString *cacheUniqueIdentifier
 @property  <SBFWallpaperViewInternalObserver> *internalObserver
 @property  BOOL needsImmediateLayoutBeforeRotation
 @property  UIView *contentView
 @property  long long variant
 @property  long long wallpaperType
 @property  long long wallpaperMode
 @property  BOOL needsWallpaperDimmingTreatment
 @property  <SBFWallpaperViewDelegate> *wallpaperDelegate
 @property  UIImage *wallpaperImage
 @property  double zoomFactor
 @property  BOOL parallaxEnabled
 @property  double parallaxFactor
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} cropRect
 @property  double cropZoomScale
 @property  BOOL supportsCropping
 @property  BOOL continuousColorSamplingEnabled
 @property  BOOL wallpaperAnimationEnabled
 @property  BOOL rotating
 @property  NSString *wallpaperName
 @property  BOOL hasVideo
 @property  BOOL sharesContentsAcrossVariants
 @property  BOOL hasContentOutsideVisibleBounds
 @property  unsigned long transformOptions
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  _UILegibilitySettings *legibilitySettings
 @property  <SBFLegibilitySettingsProviderDelegate> *delegate

  // class methods
  +[SBFWallpaperView _allowsParallax]
  +[SBFWallpaperView _shouldScaleForParallax]
  +[SBFWallpaperView wallpaperViewClassForConfiguration:]
  +[SBFWallpaperView _allowsRasterization]
  +[SBFWallpaperView wallpaperViewClassForWallpaperType:]

  // instance methods
  -[SBFWallpaperView setWallpaperAnimationEnabled:]
  -[SBFWallpaperView _imageForBackdropParameters:includeTint:overrideTraitCollection:]
  -[SBFWallpaperView _handleVisibilityChange]
  -[SBFWallpaperView wallpaperName]
  -[SBFWallpaperView setInternalObserver:]
  -[SBFWallpaperView _notifyBlursInvalidated]
  -[SBFWallpaperView _addParallax]
  -[SBFWallpaperView untreatedWallpaperImage]
  -[SBFWallpaperView averageColorInRect:withSmudgeRadius:]
  -[SBFWallpaperView setZoomFactor:withAnimationFactory:]
  -[SBFWallpaperView wallpaperMode]
  -[SBFWallpaperView contrastInRect:]
  -[SBFWallpaperView _blurredImage]
  -[SBFWallpaperView _stopGeneratingBlurredImages]
  -[SBFWallpaperView imageForBackdropParameters:includeTint:overrideTraitCollection:]
  -[SBFWallpaperView didMoveToWindow]
  -[SBFWallpaperView wallpaperType]
  -[SBFWallpaperView updateLegibilitySettingsForAverageColor:]
  -[SBFWallpaperView cacheGroup]
  -[SBFWallpaperView prepareToAppear]
  -[SBFWallpaperView transformOptions]
  -[SBFWallpaperView needsWallpaperDimmingTreatment]
  -[SBFWallpaperView _setLegibilitySettings:notify:]
  -[SBFWallpaperView settings:changedValueForKey:]
  -[SBFWallpaperView wallpaperDelegate]
  -[SBFWallpaperView wallpaperImage]
  -[SBFWallpaperView _isParallaxEnabled]
  -[SBFWallpaperView initWithFrame:configuration:variant:cacheGroup:delegate:options:]
  -[SBFWallpaperView _backdrop_generateImageFromImage:forBackdropParameters:includeTint:traitCollection:]
  -[SBFWallpaperView _cacheKeyForParameters:includingTint:downsampleFactor:traitCollection:]
  -[SBFWallpaperView _computeAverageColor]
  -[SBFWallpaperView contentScaleFactor]
  -[SBFWallpaperView _displayedImage]
  -[SBFWallpaperView _applyParallaxSettings]
  -[SBFWallpaperView _isVisible]
  -[SBFWallpaperView setUntreatedWallpaperImage:]
  -[SBFWallpaperView _beginDisallowRasterizationBlock]
  -[SBFWallpaperView _isParallaxActive]
  -[SBFWallpaperView setVariant:withAnimationFactory:]
  -[SBFWallpaperView _contrastInContentViewRect:contrastWithinBoxes:contrastBetweenBoxes:]
  -[SBFWallpaperView supportsCropping]
  -[SBFWallpaperView wantsRasterization]
  -[SBFWallpaperView snapshotImage]
  -[SBFWallpaperView setZoomFactor:]
  -[SBFWallpaperView legibilitySettings]
  -[SBFWallpaperView _updateScaleFactor]
  -[SBFWallpaperView continuousColorSamplingEnabled]
  -[SBFWallpaperView _updateParallax]
  -[SBFWallpaperView internalObserver]
  -[SBFWallpaperView _startGeneratingBlurredImages]
  -[SBFWallpaperView _endDisallowRasterizationBlock]
  -[SBFWallpaperView setVariant:]
  -[SBFWallpaperView resetLegibilitySettingsForAverageColor:]
  -[SBFWallpaperView sharesContentsAcrossVariants]
  -[SBFWallpaperView setContentsRect:]
  -[SBFWallpaperView needsImmediateLayoutBeforeRotation]
  -[SBFWallpaperView cacheUniqueIdentifier]
  -[SBFWallpaperView wallpaperAnimationEnabled]
  -[SBFWallpaperView _generateImageFromImage:forBackdropParameters:includeTint:traitCollection:]
  -[SBFWallpaperView contrastInRect:contrastWithinBoxes:contrastBetweenBoxes:]
  -[SBFWallpaperView cropRect]
  -[SBFWallpaperView blurredImage]
  -[SBFWallpaperView variantCacheIdentifier]
  -[SBFWallpaperView setParallaxFactor:]
  -[SBFWallpaperView setCropRect:zoomScale:]
  -[SBFWallpaperView isDisplayingWallpaperWithConfiguration:forVariant:]
  -[SBFWallpaperView zoomFactor]
  -[SBFWallpaperView _primaryColorOverride]
  -[SBFWallpaperView _dontUseShadow]
  -[SBFWallpaperView _updateLegibilitySettingsForAverageColor:force:notify:]
  -[SBFWallpaperView prepareToDisappear]
  -[SBFWallpaperView _removeParallax]
  -[SBFWallpaperView _updateRasterizationState]
  -[SBFWallpaperView setGeneratesBlurredImages:]
  -[SBFWallpaperView contrast]
  -[SBFWallpaperView setTransformOptions:]
  -[SBFWallpaperView preheatImageData]
  -[SBFWallpaperView hasContentOutsideVisibleBounds]
  -[SBFWallpaperView _fallbackImageWithOriginalSize:]
  -[SBFWallpaperView setContinuousColorSamplingEnabled:]
  -[SBFWallpaperView hasVideo]
  -[SBFWallpaperView dealloc]
  -[SBFWallpaperView contentView]
  -[SBFWallpaperView legibilitySettingsDidChange]
  -[SBFWallpaperView setParallaxEnabled:]
  -[SBFWallpaperView parallaxEnabled]
  -[SBFWallpaperView parallaxFactor]
  -[SBFWallpaperView _needsFallbackImageForBackdropGeneratedImage:]
  -[SBFWallpaperView cropZoomScale]
  -[SBFWallpaperView .cxx_destruct]
  -[SBFWallpaperView _updateGeneratingBlurs]
  -[SBFWallpaperView setWallpaperDelegate:]
  -[SBFWallpaperView _updateContentViewScale]
  -[SBFWallpaperView _material_generateImageFromImage:forBackdropParameters:traitCollection:]
  -[SBFWallpaperView _handleVariantChange]
  -[SBFWallpaperView _averageColorInContentViewRect:smudgeRadius:]
  -[SBFWallpaperView setSharesContentsAcrossVariants:]
  -[SBFWallpaperView variant]
  -[SBFWallpaperView setLegibilitySettings:]
  -[SBFWallpaperView setContentView:]
  -[SBFWallpaperView setRotating:]
  -[SBFWallpaperView setDelegate:]
  -[SBFWallpaperView invalidate]
  -[SBFWallpaperView delegate]
  -[SBFWallpaperView isRotating]
  -[SBFWallpaperView setHidden:]
  -[SBFWallpaperView layoutSubviews]


SBFScrollableStaticWallpaperView : SBFStaticWallpaperView <UIScrollViewDelegate>
 @property  BOOL automaticallyEnablesParallax
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFScrollableStaticWallpaperView _shouldScaleForParallax]
  +[SBFScrollableStaticWallpaperView _canCacheImages]
  +[SBFScrollableStaticWallpaperView _canDownscaleSampleImage]

  // instance methods
  -[SBFScrollableStaticWallpaperView viewForZoomingInScrollView:]
  -[SBFScrollableStaticWallpaperView scrollViewDidChangeAdjustedContentInset:]
  -[SBFScrollableStaticWallpaperView setAutomaticallyEnablesParallax:]
  -[SBFScrollableStaticWallpaperView didMoveToWindow]
  -[SBFScrollableStaticWallpaperView initWithFrame:configuration:variant:cacheGroup:delegate:options:]
  -[SBFScrollableStaticWallpaperView scrollViewDidEndZooming:withView:atScale:]
  -[SBFScrollableStaticWallpaperView supportsCropping]
  -[SBFScrollableStaticWallpaperView _setupScrollViewObserver]
  -[SBFScrollableStaticWallpaperView _minimumContentOffsetForOverhang]
  -[SBFScrollableStaticWallpaperView _parallaxFactorWithZoomScale:contentOffset:]
  -[SBFScrollableStaticWallpaperView cropRect]
  -[SBFScrollableStaticWallpaperView _setupScrollView]
  -[SBFScrollableStaticWallpaperView setCropRect:zoomScale:]
  -[SBFScrollableStaticWallpaperView _setupParallaxObserver]
  -[SBFScrollableStaticWallpaperView _scrollView]
  -[SBFScrollableStaticWallpaperView _boundedContentOffsetForOverhang]
  -[SBFScrollableStaticWallpaperView dealloc]
  -[SBFScrollableStaticWallpaperView _wallpaperImageForAnalysis]
  -[SBFScrollableStaticWallpaperView setParallaxEnabled:]
  -[SBFScrollableStaticWallpaperView parallaxFactor]
  -[SBFScrollableStaticWallpaperView cropZoomScale]
  -[SBFScrollableStaticWallpaperView _setupContentViewWithOptions:]
  -[SBFScrollableStaticWallpaperView _updateScrollViewZoomScales]
  -[SBFScrollableStaticWallpaperView _imageSize]
  -[SBFScrollableStaticWallpaperView automaticallyEnablesParallax]
  -[SBFScrollableStaticWallpaperView .cxx_destruct]
  -[SBFScrollableStaticWallpaperView _setupColorBoxObserver]
  -[SBFScrollableStaticWallpaperView _throttleDuration]
  -[SBFScrollableStaticWallpaperView scrollViewDidEndDecelerating:]
  -[SBFScrollableStaticWallpaperView _cropRect]
  -[SBFScrollableStaticWallpaperView setContentView:]
  -[SBFScrollableStaticWallpaperView _newImageView]
  -[SBFScrollableStaticWallpaperView _resetColorBoxes]
  -[SBFScrollableStaticWallpaperView layoutSubviews]
  -[SBFScrollableStaticWallpaperView _updateParallaxForScroll]
  -[SBFScrollableStaticWallpaperView _scrollViewParallaxFactor]
  -[SBFScrollableStaticWallpaperView _maximumContentOffsetForOverhang]
  -[SBFScrollableStaticWallpaperView scrollViewDidEndDragging:willDecelerate:]


SBFDashBoardViewMetrics : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFDashBoardViewMetrics _reducedPageBoundsFromBounds:forPage:]
  +[SBFDashBoardViewMetrics dateBaselineToListY]
  +[SBFDashBoardViewMetrics _isPortrait]
  +[SBFDashBoardViewMetrics searchBarWidth]
  +[SBFDashBoardViewMetrics _cachedGlyphInsetsForString:withFont:]
  +[SBFDashBoardViewMetrics _presentsListBelowDateTime]
  +[SBFDashBoardViewMetrics _padSpecificValueJ99:otherPad:]
  +[SBFDashBoardViewMetrics layoutUsesMargin:]
  +[SBFDashBoardViewMetrics singleLineDateViewBaselineDifferenceY]
  +[SBFDashBoardViewMetrics suggestedFrameForDateTimeViewInScreenCoordinates:centeredX:]
  +[SBFDashBoardViewMetrics listWidthForPage:]
  +[SBFDashBoardViewMetrics dateTimeLayoutForPage:]
  +[SBFDashBoardViewMetrics suggestedContentInsetsForListForPage:pageBounds:scrollsDateTime:]
  +[SBFDashBoardViewMetrics dateFont]
  +[SBFDashBoardViewMetrics timeToSubtitleLabelBaselineDifferenceY]
  +[SBFDashBoardViewMetrics timeLabelBaselineY]
  +[SBFDashBoardViewMetrics scaledFontSize:withMaximumFontSizeCategory:]
  +[SBFDashBoardViewMetrics timeSubtitleBaselineY]
  +[SBFDashBoardViewMetrics suggestedContentInsetsForListForPage:pageBounds:]
  +[SBFDashBoardViewMetrics _phoneSpecificValueN56:n61:n69:d22:]
  +[SBFDashBoardViewMetrics suggestedFrameForStatusView:inView:withInsets:]
  +[SBFDashBoardViewMetrics dateOnlyLabelToLunarDateLabelBaselineDifferenceY]
  +[SBFDashBoardViewMetrics dateOnlyLunarDateFont]
  +[SBFDashBoardViewMetrics layoutCentersContent:]
  +[SBFDashBoardViewMetrics timeToListInsetXforPage:]
  +[SBFDashBoardViewMetrics _phoneSpecificValueN56:n61:n69:]
  +[SBFDashBoardViewMetrics suggestedFrameForCallToActionLabel:yOffset:inBounds:]
  +[SBFDashBoardViewMetrics timeLabelToLunarDateLabelDifferenceY]
  +[SBFDashBoardViewMetrics _padSpecificInsets:leading:]
  +[SBFDashBoardViewMetrics searchClippingLineMaxY]
  +[SBFDashBoardViewMetrics listInsetXForPage:]
  +[SBFDashBoardViewMetrics _dateTimeMinXForReducedBounds:forPage:]
  +[SBFDashBoardViewMetrics suggestedFrameForListForPage:pageBounds:]
  +[SBFDashBoardViewMetrics listLayoutForPage:]
  +[SBFDashBoardViewMetrics timeLabelScrollPercentForPage:]
  +[SBFDashBoardViewMetrics suggestedFrameForListForPage:pageBounds:insets:]
  +[SBFDashBoardViewMetrics listScrollsDateTime]
  +[SBFDashBoardViewMetrics suggestedFrameForMediaArtworkForControlsFrame:bottomInset:inPageBounds:]
  +[SBFDashBoardViewMetrics listMinYForPage:]
  +[SBFDashBoardViewMetrics listInsetXForPage:leading:]
  +[SBFDashBoardViewMetrics suggestedFrameForListForPage:pageBounds:insets:scrollsDateTime:]
  +[SBFDashBoardViewMetrics suggestedFrameForMediaControlsForPageBounds:]
  +[SBFDashBoardViewMetrics timeLabelToSubtitleLabelDifferenceY]
  +[SBFDashBoardViewMetrics _padSpecificValueForDevice:leading:]


SBFMobileKeyBagState : NSObject /usr/lib/libSystem.B.dylib <BSDescriptionProviding, NSCopying, NSMutableCopying>
 @property  long long lockState
 @property  double backOffTime
 @property  unsigned long failedAttemptCount
 @property  BOOL permanentlyBlocked
 @property  BOOL shouldWipe
 @property  BOOL recoveryEnabled
 @property  BOOL recoveryRequired
 @property  BOOL recoveryPossible
 @property  long long escrowCount
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFMobileKeyBagState copyWithZone:]
  -[SBFMobileKeyBagState isEffectivelyLocked]
  -[SBFMobileKeyBagState shouldWipe]
  -[SBFMobileKeyBagState init]
  -[SBFMobileKeyBagState recoveryPossible]
  -[SBFMobileKeyBagState .cxx_destruct]
  -[SBFMobileKeyBagState lockState]
  -[SBFMobileKeyBagState failedAttemptCount]
  -[SBFMobileKeyBagState publicDescription]
  -[SBFMobileKeyBagState succinctDescriptionBuilder]
  -[SBFMobileKeyBagState initWithMKBLockStateInfo:]
  -[SBFMobileKeyBagState permanentlyBlocked]
  -[SBFMobileKeyBagState succinctDescription]
  -[SBFMobileKeyBagState isEqual:]
  -[SBFMobileKeyBagState backOffTime]
  -[SBFMobileKeyBagState mutableCopyWithZone:]
  -[SBFMobileKeyBagState descriptionWithMultilinePrefix:]
  -[SBFMobileKeyBagState recoveryRequired]
  -[SBFMobileKeyBagState descriptionBuilderWithMultilinePrefix:]
  -[SBFMobileKeyBagState escrowCount]
  -[SBFMobileKeyBagState recoveryEnabled]


SBFMutableMobileKeyBagState : SBFMobileKeyBagState
 @property  long long lockState
 @property  double backOffTime
 @property  unsigned long failedAttemptCount
 @property  BOOL permanentlyBlocked
 @property  BOOL shouldWipe
 @property  BOOL recoveryEnabled
 @property  BOOL recoveryRequired
 @property  BOOL recoveryPossible
 @property  long long escrowCount

  // instance methods
  -[SBFMutableMobileKeyBagState copyWithZone:]
  -[SBFMutableMobileKeyBagState _mutableState]
  -[SBFMutableMobileKeyBagState setFailedAttemptCount:]
  -[SBFMutableMobileKeyBagState init]
  -[SBFMutableMobileKeyBagState setEscrowCount:]
  -[SBFMutableMobileKeyBagState initWithMKBLockStateInfo:]
  -[SBFMutableMobileKeyBagState setRecoveryEnabled:]
  -[SBFMutableMobileKeyBagState setRecoveryPossible:]
  -[SBFMutableMobileKeyBagState setBackOffTime:]
  -[SBFMutableMobileKeyBagState setPermanentlyBlocked:]
  -[SBFMutableMobileKeyBagState setLockState:]
  -[SBFMutableMobileKeyBagState setShouldWipe:]
  -[SBFMutableMobileKeyBagState setRecoveryRequired:]


SBFLockScreenWakeAnimator : NSObject /usr/lib/libSystem.B.dylib <SBFScreenWakeAnimationTarget>
 @property  long long wakeState
 @property  UIVisualEffectView *wakeEffectView
 @property  UIView *superviewForDateViewAnimation
 @property  SBFLockScreenDateView *dateView
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFLockScreenWakeAnimator setDateView:]
  -[SBFLockScreenWakeAnimator dateView]
  -[SBFLockScreenWakeAnimator setWakeEffectView:]
  -[SBFLockScreenWakeAnimator .cxx_destruct]
  -[SBFLockScreenWakeAnimator wakeEffectView]
  -[SBFLockScreenWakeAnimator wakeState]
  -[SBFLockScreenWakeAnimator _targetWakeStateForFadeIn:]
  -[SBFLockScreenWakeAnimator updateWakeEffectsForWake:animated:completion:]
  -[SBFLockScreenWakeAnimator setWakeState:]
  -[SBFLockScreenWakeAnimator _wakeEffectsForAnimatingWakeState:]
  -[SBFLockScreenWakeAnimator _wakeEffectsForPersistentWakeState:]
  -[SBFLockScreenWakeAnimator updateWakeEffectsForWake:]
  -[SBFLockScreenWakeAnimator setSuperviewForDateViewAnimation:]
  -[SBFLockScreenWakeAnimator superviewForDateViewAnimation]


SBLocalDefaults : SBAbstractDefaults
 @property  SBAccessibilityDefaults *accessibilityDefaults
 @property  SBAppIconForceTouchDefaults *appIconForceTouchDefaults
 @property  SBApplicationDefaults *applicationDefaults
 @property  SBAppSwitcherDefaults *appSwitcherDefaults
 @property  SBBootDefaults *bootDefaults
 @property  SBCameraHardwareButtonDefaults *cameraHardwareButtonDefaults
 @property  SBRecentDisplayItemsDefaults *recentDisplayItemsDefaults
 @property  SBDemoDefaults *demoDefaults
 @property  SBGestureDefaults *gestureDefaults
 @property  SBHardwareDefaults *hardwareDefaults
 @property  SBIconDefaults *iconDefaults
 @property  SBIdleTimerDefaults *idleTimerDefaults
 @property  SBLockScreenDefaults *lockScreenDefaults
 @property  SBBiometricAuthenticationDefaults *biometricAuthenticationDefaults
 @property  SBMiscellaneousDefaults *miscellaneousDefaults
 @property  SBMultiUserDefaults *multiUserDefaults
 @property  SBNotificationDefaults *notificationDefaults
 @property  SBNotificationCenterDefaults *notificationCenterDefaults
 @property  SBPIPDefaults *pipDefaults
 @property  SBPowerDefaults *powerDefaults
 @property  SBRotationDefaults *rotationDefaults
 @property  SBSecurityDefaults *securityDefaults
 @property  SBSetupDefaults *setupDefaults
 @property  SBSoftwareUpdateDefaults *softwareUpdateDefaults
 @property  SBSOSDefaults *sosDefaults
 @property  SBSoundDefaults *soundDefaults
 @property  SBStatusBarDefaults *statusBarDefaults
 @property  SBThermalDefaults *thermalDefaults
 @property  SBUsageDefaults *usageDefaults
 @property  SBVoiceControlDefaults *voiceControlDefaults
 @property  SBWallpaperDefaults *wallpaperDefaults
 @property  SBWorkspaceDefaults *workspaceDefaults
 @property  SBFloatingDockDefaults *floatingDockDefaults
 @property  SBTestingDefaults *testingDefaults
 @property  SBHomeScreenDefaults *homeScreenDefaults
 @property  SBStateDumpDefaults *stateDumpDefaults

  // instance methods
  -[SBLocalDefaults stateDumpDefaults]
  -[SBLocalDefaults applicationDefaults]
  -[SBLocalDefaults appSwitcherDefaults]
  -[SBLocalDefaults statusBarDefaults]
  -[SBLocalDefaults securityDefaults]
  -[SBLocalDefaults idleTimerDefaults]
  -[SBLocalDefaults floatingDockDefaults]
  -[SBLocalDefaults .cxx_destruct]
  -[SBLocalDefaults soundDefaults]
  -[SBLocalDefaults miscellaneousDefaults]
  -[SBLocalDefaults sosDefaults]
  -[SBLocalDefaults iconDefaults]
  -[SBLocalDefaults bootDefaults]
  -[SBLocalDefaults wallpaperDefaults]
  -[SBLocalDefaults homeScreenDefaults]
  -[SBLocalDefaults voiceControlDefaults]
  -[SBLocalDefaults hardwareDefaults]
  -[SBLocalDefaults biometricAuthenticationDefaults]
  -[SBLocalDefaults gestureDefaults]
  -[SBLocalDefaults usageDefaults]
  -[SBLocalDefaults accessibilityDefaults]
  -[SBLocalDefaults notificationCenterDefaults]
  -[SBLocalDefaults testingDefaults]
  -[SBLocalDefaults migrateAndRemoveOldDefaults]
  -[SBLocalDefaults powerDefaults]
  -[SBLocalDefaults recentDisplayItemsDefaults]
  -[SBLocalDefaults appIconForceTouchDefaults]
  -[SBLocalDefaults rotationDefaults]
  -[SBLocalDefaults cameraHardwareButtonDefaults]
  -[SBLocalDefaults multiUserDefaults]
  -[SBLocalDefaults setupDefaults]
  -[SBLocalDefaults pipDefaults]
  -[SBLocalDefaults notificationDefaults]
  -[SBLocalDefaults softwareUpdateDefaults]
  -[SBLocalDefaults demoDefaults]
  -[SBLocalDefaults workspaceDefaults]
  -[SBLocalDefaults lockScreenDefaults]
  -[SBLocalDefaults thermalDefaults]


_SBFBlockObservable : SBFObservable
  // instance methods
  -[_SBFBlockObservable subscribe:]
  -[_SBFBlockObservable initWithBlock:]
  -[_SBFBlockObservable .cxx_destruct]


_SBFScheduledObservable : SBFObservable
  // instance methods
  -[_SBFScheduledObservable subscribe:]
  -[_SBFScheduledObservable initWithObservable:scheduler:]
  -[_SBFScheduledObservable .cxx_destruct]


_SBFAccumulatingObserver : NSObject /usr/lib/libSystem.B.dylib <SBFObserver>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBFAccumulatingObserver init]
  -[_SBFAccumulatingObserver observerDidComplete]
  -[_SBFAccumulatingObserver .cxx_destruct]
  -[_SBFAccumulatingObserver waitForResults:]
  -[_SBFAccumulatingObserver observerDidFailWithError:]
  -[_SBFAccumulatingObserver observerDidReceiveResult:]


_SBFThrottledObservable : SBFObservable
  // instance methods
  -[_SBFThrottledObservable subscribe:]
  -[_SBFThrottledObservable dealloc]
  -[_SBFThrottledObservable .cxx_destruct]
  -[_SBFThrottledObservable _cancel]
  -[_SBFThrottledObservable _clearResult]
  -[_SBFThrottledObservable _setDelayToken:]
  -[_SBFThrottledObservable _setResult:]
  -[_SBFThrottledObservable _sendResultToObserver:withIdentifier:]
  -[_SBFThrottledObservable _sendCompletionToObsever:]
  -[_SBFThrottledObservable initWithInterval:observable:scheduler:]


_SBFForkJoinObservable : SBFObservable
  // instance methods
  -[_SBFForkJoinObservable subscribe:]
  -[_SBFForkJoinObservable .cxx_destruct]
  -[_SBFForkJoinObservable _setResult:atIndex:]
  -[_SBFForkJoinObservable _observableFinishedForObserver:]
  -[_SBFForkJoinObservable initWithWithObservables:]


SBFObservable : NSObject /usr/lib/libSystem.B.dylib <SBFObservable>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFObservable forkJoin:]
  +[SBFObservable observableWithBlock:]

  // instance methods
  -[SBFObservable subscribe:]
  -[SBFObservable generate:]
  -[SBFObservable map:]
  -[SBFObservable throttle:onScheduler:]
  -[SBFObservable observeOn:]
  -[SBFObservable waitForResults:]
  -[SBFObservable subscribeWithResultBlock:completionBlock:failureBlock:]
  -[SBFObservable subscribeOn:]
  -[SBFObservable subscribeWithResultBlock:]


SBFAnimationSettings : PTSettings /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard <PTSettingsKeyPathObserver>
 @property  long long animationType
 @property  double delay
 @property  unsigned long frameRate
 @property  unsigned long curve
 @property  PTPointSettings *controlPoint1Settings
 @property  PTPointSettings *controlPoint2Settings
 @property  double duration
 @property  double mass
 @property  double stiffness
 @property  double damping
 @property  double epsilon
 @property  double calculatedDuration
 @property  double speed
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFAnimationSettings ignoresKey:]
  +[SBFAnimationSettings _moduleWithSectionTitle:]
  +[SBFAnimationSettings settingsControllerModule]
  +[SBFAnimationSettings _moduleWithSectionTitle:delay:frameRate:]

  // instance methods
  -[SBFAnimationSettings setDefaultValues]
  -[SBFAnimationSettings initWithDefaultValues]
  -[SBFAnimationSettings curve]
  -[SBFAnimationSettings damping]
  -[SBFAnimationSettings setControlPoint2Settings:]
  -[SBFAnimationSettings setDelay:]
  -[SBFAnimationSettings setStiffness:]
  -[SBFAnimationSettings setCurve:]
  -[SBFAnimationSettings BSAnimationSettings]
  -[SBFAnimationSettings setSpeed:]
  -[SBFAnimationSettings delay]
  -[SBFAnimationSettings mass]
  -[SBFAnimationSettings stiffness]
  -[SBFAnimationSettings epsilon]
  -[SBFAnimationSettings setDamping:]
  -[SBFAnimationSettings setMass:]
  -[SBFAnimationSettings speed]
  -[SBFAnimationSettings dealloc]
  -[SBFAnimationSettings .cxx_destruct]
  -[SBFAnimationSettings setEpsilon:]
  -[SBFAnimationSettings frameRate]
  -[SBFAnimationSettings setControlPoint1Settings:]
  -[SBFAnimationSettings controlPoint1Settings]
  -[SBFAnimationSettings setFrameRate:]
  -[SBFAnimationSettings settings:changedValueForKeyPath:]
  -[SBFAnimationSettings animationType]
  -[SBFAnimationSettings calculatedDuration]
  -[SBFAnimationSettings setDuration:]
  -[SBFAnimationSettings setAnimationType:]
  -[SBFAnimationSettings controlPoint2Settings]
  -[SBFAnimationSettings duration]


SBReadonlyRow : PTRow /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
  // instance methods
  -[SBReadonlyRow tableViewCellClass]


SBReadonlyTableViewCell : PTUIRowTableViewCell /System/Library/Frameworks/IOSurface.framework/IOSurface
  // class methods
  +[SBReadonlyTableViewCell cellStyleForRow:]

  // instance methods
  -[SBReadonlyTableViewCell updateDisplayedValue]


SBFWindow : UIWindow /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
 @property  _SBFKeyWindowStack *_keyWindowStack

  // instance methods
  -[SBFWindow _canBecomeKeyWindow]
  -[SBFWindow dealloc]
  -[SBFWindow .cxx_destruct]
  -[SBFWindow makeKeyWindow]
  -[SBFWindow _keyWindowStack]
  -[SBFWindow resignAsKeyWindow]
  -[SBFWindow _isEffectivelyHiddenForKeyWindowStack]
  -[SBFWindow _makeKeyFromKeyWindowStack]
  -[SBFWindow _setKeyWindowStack:]
  -[SBFWindow _resignKeyFromKeyWindowStack]
  -[SBFWindow setHidden:]


SBFSecureWindow : SBFWindow
  // class methods
  +[SBFSecureWindow _isSecure]


SBFProceduralWallpaper : UIView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
  // class methods
  +[SBFProceduralWallpaper identifier]

  // instance methods
  -[SBFProceduralWallpaper view]
  -[SBFProceduralWallpaper setAnimating:]


_SBFVibrantSettings : NSObject /usr/lib/libSystem.B.dylib
 @property  UIColor *highlightLimitingColor
 @property  UIColor *shimmerColor
 @property  UIColor *chevronShimmerColor
 @property  UIColor *highlightColor
 @property  UIColor *tintColor
 @property  UIColor *referenceColor
 @property  double referenceContrast
 @property  _UILegibilitySettings *legibilitySettings
 @property  long long style

  // class methods
  +[_SBFVibrantSettings vibrantSettingsWithReferenceColor:referenceContrast:legibilitySettings:]

  // instance methods
  -[_SBFVibrantSettings _style]
  -[_SBFVibrantSettings setTintColor:]
  -[_SBFVibrantSettings legibilitySettings]
  -[_SBFVibrantSettings setHighlightColor:]
  -[_SBFVibrantSettings tintColor]
  -[_SBFVibrantSettings shimmerColor]
  -[_SBFVibrantSettings referenceColor]
  -[_SBFVibrantSettings initWithReferenceColor:referenceContrast:legibilitySettings:]
  -[_SBFVibrantSettings _computeSourceColorDodgeColorForDestinationColor:producingLuminanceChange:]
  -[_SBFVibrantSettings highlightLimitingColor]
  -[_SBFVibrantSettings chevronShimmerColor]
  -[_SBFVibrantSettings tintViewWithFrame:]
  -[_SBFVibrantSettings highlightLimitingViewWithFrame:]
  -[_SBFVibrantSettings referenceContrast]
  -[_SBFVibrantSettings setShimmerColor:]
  -[_SBFVibrantSettings setHighlightLimitingColor:]
  -[_SBFVibrantSettings setChevronShimmerColor:]
  -[_SBFVibrantSettings .cxx_destruct]
  -[_SBFVibrantSettings highlightColor]
  -[_SBFVibrantSettings isEqual:]
  -[_SBFVibrantSettings style]


SBFMotionManager : NSObject /usr/lib/libSystem.B.dylib
 @property  double x
 @property  double y
 @property  double z
 @property  double roll
 @property  double pitch
 @property  double yaw
 @property  {?=dddd} attitude
 @property  SBFInfiniteImpulseResponseFilter *motionFilterX
 @property  SBFInfiniteImpulseResponseFilter *motionFilterY
 @property  SBFInfiniteImpulseResponseFilter *motionFilterZ
 @property  double deviceMotionUpdateInterval
 @property  double accelerometerUpdateInterval

  // instance methods
  -[SBFMotionManager pitch]
  -[SBFMotionManager attitude]
  -[SBFMotionManager isDeviceMotionAvailable]
  -[SBFMotionManager z]
  -[SBFMotionManager roll]
  -[SBFMotionManager init]
  -[SBFMotionManager setAccelerometerUpdateInterval:]
  -[SBFMotionManager yaw]
  -[SBFMotionManager x]
  -[SBFMotionManager .cxx_destruct]
  -[SBFMotionManager initWithCoefficient:threshold:]
  -[SBFMotionManager motionFilterX]
  -[SBFMotionManager setDeviceMotionUpdateInterval:]
  -[SBFMotionManager motionFilterY]
  -[SBFMotionManager y]
  -[SBFMotionManager stopDeviceMotionUpdates]
  -[SBFMotionManager deviceMotionUpdateInterval]
  -[SBFMotionManager accelerometerUpdateInterval]
  -[SBFMotionManager createMotionManager]
  -[SBFMotionManager motionFilterZ]
  -[SBFMotionManager zeroMovementSinceLastFrame]
  -[SBFMotionManager startDeviceAccelerometerUpdates]
  -[SBFMotionManager initWithCoefficient:]
  -[SBFMotionManager pauseDeviceMotionUpdates]
  -[SBFMotionManager stopDeviceAccelerometerUpdates]
  -[SBFMotionManager startDeviceMotionUpdates]
  -[SBFMotionManager _createFilters]


SBFGradientWallpaperView : SBFWallpaperView
 @property  SBFGradient *wallpaperGradient

  // class methods
  +[SBFGradientWallpaperView layerClass]

  // instance methods
  -[SBFGradientWallpaperView averageColorInRect:withSmudgeRadius:]
  -[SBFGradientWallpaperView wallpaperType]
  -[SBFGradientWallpaperView initWithFrame:configuration:variant:cacheGroup:delegate:options:]
  -[SBFGradientWallpaperView _computeAverageColor]
  -[SBFGradientWallpaperView contrastInRect:contrastWithinBoxes:contrastBetweenBoxes:]
  -[SBFGradientWallpaperView isDisplayingWallpaperWithConfiguration:forVariant:]
  -[SBFGradientWallpaperView wallpaperGradient]
  -[SBFGradientWallpaperView .cxx_destruct]


SBFAuthenticationRequest : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long type
 @property  long long source
 @property  NSString *passcode
 @property  @? handler

  // instance methods
  -[SBFAuthenticationRequest passcode]
  -[SBFAuthenticationRequest source]
  -[SBFAuthenticationRequest .cxx_destruct]
  -[SBFAuthenticationRequest handler]
  -[SBFAuthenticationRequest publicDescription]
  -[SBFAuthenticationRequest succinctDescriptionBuilder]
  -[SBFAuthenticationRequest type]
  -[SBFAuthenticationRequest succinctDescription]
  -[SBFAuthenticationRequest _initWithType:source:passcode:handler:]
  -[SBFAuthenticationRequest initForPasscode:source:handler:]
  -[SBFAuthenticationRequest initForPasscode:source:]
  -[SBFAuthenticationRequest initForBiometricAuthenticationWithSource:handler:]
  -[SBFAuthenticationRequest initForBiometricAuthenticationWithSource:]
  -[SBFAuthenticationRequest descriptionWithMultilinePrefix:]
  -[SBFAuthenticationRequest descriptionBuilderWithMultilinePrefix:]


SBFGradient : NSObject /usr/lib/libSystem.B.dylib <NSCopying, NSSecureCoding, BSDescriptionProviding>
 @property  NSArray *colors
 @property  NSArray *locations
 @property  {CGPoint=dd} startPoint
 @property  {CGPoint=dd} endPoint
 @property  NSString *type
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFGradient supportsSecureCoding]

  // instance methods
  -[SBFGradient colors]
  -[SBFGradient locations]
  -[SBFGradient setLocations:]
  -[SBFGradient setStartPoint:]
  -[SBFGradient copyWithZone:]
  -[SBFGradient endPoint]
  -[SBFGradient setEndPoint:]
  -[SBFGradient setColors:]
  -[SBFGradient startPoint]
  -[SBFGradient init]
  -[SBFGradient cgColors]
  -[SBFGradient copyCGGradient]
  -[SBFGradient setType:]
  -[SBFGradient .cxx_destruct]
  -[SBFGradient succinctDescriptionBuilder]
  -[SBFGradient encodeWithCoder:]
  -[SBFGradient type]
  -[SBFGradient succinctDescription]
  -[SBFGradient configureLayer:]
  -[SBFGradient isEqual:]
  -[SBFGradient descriptionWithMultilinePrefix:]
  -[SBFGradient initWithCoder:]
  -[SBFGradient descriptionBuilderWithMultilinePrefix:]


SBFUserAuthenticationModelSEP : NSObject /usr/lib/libSystem.B.dylib <SBFUserAuthenticationModel>
 @property  <SBFUserAuthenticationModelDelegate> *delegate
 @property  BOOL temporarilyBlocked
 @property  BOOL permanentlyBlocked
 @property  double timeUntilUnblockedSinceReferenceDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFUserAuthenticationModelSEP isPermanentlyBlocked]
  -[SBFUserAuthenticationModelSEP synchronize]
  -[SBFUserAuthenticationModelSEP notePasscodeEntryBegan]
  -[SBFUserAuthenticationModelSEP .cxx_destruct]
  -[SBFUserAuthenticationModelSEP descriptionBuilder]
  -[SBFUserAuthenticationModelSEP notePasscodeUnlockSucceeded]
  -[SBFUserAuthenticationModelSEP noteNewMkbDeviceLockState:]
  -[SBFUserAuthenticationModelSEP notePasscodeEntryCancelled]
  -[SBFUserAuthenticationModelSEP _initWithKeyBag:profileConnection:]
  -[SBFUserAuthenticationModelSEP _refreshStateAndNotify:]
  -[SBFUserAuthenticationModelSEP performPasswordTest:]
  -[SBFUserAuthenticationModelSEP isTemporarilyBlocked]
  -[SBFUserAuthenticationModelSEP _isDeviceWipePreferenceEnabled]
  -[SBFUserAuthenticationModelSEP setDelegate:]
  -[SBFUserAuthenticationModelSEP clearBlockedState]
  -[SBFUserAuthenticationModelSEP timeUntilUnblockedSinceReferenceDate]
  -[SBFUserAuthenticationModelSEP delegate]
  -[SBFUserAuthenticationModelSEP notePasscodeUnlockFailedWithError:]
  -[SBFUserAuthenticationModelSEP refreshBlockedState]
  -[SBFUserAuthenticationModelSEP initWithKeyBag:]
  -[SBFUserAuthenticationModelSEP _refreshStateForMkbState:notify:]


_SBFImmediateScheduler : NSObject /usr/lib/libSystem.B.dylib <SBFScheduler>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBFImmediateScheduler afterDelay:performBlock:]
  -[_SBFImmediateScheduler performBlock:]
  -[_SBFImmediateScheduler performCancelableBlock:]


_SBFQueueScheduler : NSObject /usr/lib/libSystem.B.dylib <SBFScheduler>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[_SBFQueueScheduler afterDelay:performBlock:]
  -[_SBFQueueScheduler performBlock:]
  -[_SBFQueueScheduler performCancelableBlock:]
  -[_SBFQueueScheduler .cxx_destruct]
  -[_SBFQueueScheduler initWithQueue:]


SBFScheduler : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFScheduler mainScheduler]
  +[SBFScheduler immediateScheduler]
  +[SBFScheduler globalAsyncScheduler]


SBFMagnifyMode : NSObject /usr/lib/libSystem.B.dylib <NSCopying, BSDescriptionProviding>
 @property  {CGSize=dd} size
 @property  NSString *name
 @property  float zoomFactor
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFMagnifyMode currentMagnifyMode]
  +[SBFMagnifyMode magnifyModeWithSize:name:]

  // instance methods
  -[SBFMagnifyMode copyWithZone:]
  -[SBFMagnifyMode init]
  -[SBFMagnifyMode setZoomFactor:]
  -[SBFMagnifyMode zoomFactor]
  -[SBFMagnifyMode size]
  -[SBFMagnifyMode .cxx_destruct]
  -[SBFMagnifyMode name]
  -[SBFMagnifyMode succinctDescriptionBuilder]
  -[SBFMagnifyMode succinctDescription]
  -[SBFMagnifyMode isEqual:]
  -[SBFMagnifyMode setSize:]
  -[SBFMagnifyMode setName:]
  -[SBFMagnifyMode descriptionWithMultilinePrefix:]
  -[SBFMagnifyMode descriptionBuilderWithMultilinePrefix:]


SBC2GroupCompletion : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBC2GroupCompletion perform:finalCompletion:]
  +[SBC2GroupCompletion perform:finalCompletion:options:delegate:]


SBAbstractSpringBoardDefaultDomain : BSAbstractDefaultDomain /System/Library/Frameworks/VideoToolbox.framework/VideoToolbox
  // instance methods
  -[SBAbstractSpringBoardDefaultDomain init]


SBFWebClipSanitationReport : NSObject /usr/lib/libSystem.B.dylib
 @property  UIWebClip *webClip
 @property  long long result
 @property  NSError *error

  // instance methods
  -[SBFWebClipSanitationReport result]
  -[SBFWebClipSanitationReport .cxx_destruct]
  -[SBFWebClipSanitationReport webClip]
  -[SBFWebClipSanitationReport error]
  -[SBFWebClipSanitationReport initWithWebClip:result:error:]


SBFWebClipUtilities : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFWebClipUtilities sanitizeWebClips:]
  +[SBFWebClipUtilities sanitizeWebClip:]
  +[SBFWebClipUtilities sanitizeWebClipsIfNeeded]


SBFTapToWakeGestureRecognizer : UIGestureRecognizer /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
  // instance methods
  -[SBFTapToWakeGestureRecognizer _isTapEvent:]
  -[SBFTapToWakeGestureRecognizer _succesfullyRecognizeFromEvent:]
  -[SBFTapToWakeGestureRecognizer touchesEnded:withEvent:]


SBBootDefaults : SBAbstractSpringBoardDefaultDomain
 @property  NSString *lastSystemBuildVersion
 @property  NSString *lastRestoreIdentifier
 @property  BOOL hasCompletedSynchronizingCloudCriticalData
 @property  NSDictionary *bootTransitionContext
 @property  BOOL dontLockAfterCrash
 @property  BOOL recordBootTimeTillDidFinishLaunching

  // instance methods
  -[SBBootDefaults _bindAndRegisterDefaults]


SBIdleTimerDefaults : SBAbstractSpringBoardDefaultDomain
 @property  double minimumLockscreenIdleTime
 @property  BOOL disableAutoDim
 @property  BOOL dontDimOrLockWhileConnectedToPower
 @property  BOOL supportLiftToWake
 @property  BOOL supportTapToWake
 @property  BOOL disableAttentionAwareness
 @property  BOOL backlightLoggingEnabled

  // instance methods
  -[SBIdleTimerDefaults disableAutoDimExists]
  -[SBIdleTimerDefaults disableAutoDim]
  -[SBIdleTimerDefaults _bindAndRegisterDefaults]


SBHardwareDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL hasSeenACaseLatchCoverOnce
 @property  BOOL disableHomeButton
 @property  BOOL useHardwareSwitchAsOrientationLock
 @property  BOOL disableProximitySensor
 @property  BOOL disableHomeButtonDoublePress
 @property  long long homeButtonHapticType

  // instance methods
  -[SBHardwareDefaults _bindAndRegisterDefaults]


SBWakeEvent : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long eventAbsTimestamp
 @property  unsigned long eventRecvContTimestamp

  // instance methods
  -[SBWakeEvent eventAbsTimestamp]
  -[SBWakeEvent setEventAbsTimestamp:]
  -[SBWakeEvent setEventRecvContTimestamp:]
  -[SBWakeEvent eventRecvContTimestamp]
  -[SBWakeEvent initWithTimestamp:]


SBWakeLogger : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL trackingWake
 @property  long long homeButtonType
 @property  unsigned int timesyncService
 @property  unsigned int backlightService
 @property  NSMutableDictionary *wakeSouceToEventDict
 @property  long long activeWakeLoggerSource
 @property  NSString *activeWakeSourceDescription

  // class methods
  +[SBWakeLogger sharedInstance]

  // instance methods
  -[SBWakeLogger wakeDidBegin:]
  -[SBWakeLogger lockDidBegin]
  -[SBWakeLogger init]
  -[SBWakeLogger homeButtonType]
  -[SBWakeLogger setHomeButtonType:]
  -[SBWakeLogger activeWakeSourceDescription]
  -[SBWakeLogger dealloc]
  -[SBWakeLogger setTimesyncService:]
  -[SBWakeLogger .cxx_destruct]
  -[SBWakeLogger setTrackingWake:]
  -[SBWakeLogger setWakeSouceToEventDict:]
  -[SBWakeLogger backlightService]
  -[SBWakeLogger wakeMayBegin:withTimestamp:]
  -[SBWakeLogger wakeDidEnd]
  -[SBWakeLogger activeWakeLoggerSource]
  -[SBWakeLogger timesyncService]
  -[SBWakeLogger wakeSouceToEventDict]
  -[SBWakeLogger setActiveWakeLoggerSource:]
  -[SBWakeLogger trackingWake]
  -[SBWakeLogger _lock_wakeDidBegin:]
  -[SBWakeLogger setBacklightService:]


SBFLockScreenDateSubtitleView : UIView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
 @property  _UILegibilitySettings *legibilitySettings
 @property  double strength
 @property  UIFont *font
 @property  double baselineOffsetFromOrigin
 @property  double baselineOffsetFromBottom
 @property  NSString *string
 @property  UIView *accessoryView

  // class methods
  +[SBFLockScreenDateSubtitleView labelFont]
  +[SBFLockScreenDateSubtitleView scaledFontSize:withMaximumFontSizeCategory:]
  +[SBFLockScreenDateSubtitleView labelFontMetrics]

  // instance methods
  -[SBFLockScreenDateSubtitleView setStrength:]
  -[SBFLockScreenDateSubtitleView subtitleLabelFrame]
  -[SBFLockScreenDateSubtitleView accessoryViewFrame]
  -[SBFLockScreenDateSubtitleView baselineOffsetFromBottom]
  -[SBFLockScreenDateSubtitleView init]
  -[SBFLockScreenDateSubtitleView legibilitySettings]
  -[SBFLockScreenDateSubtitleView dealloc]
  -[SBFLockScreenDateSubtitleView .cxx_destruct]
  -[SBFLockScreenDateSubtitleView strength]
  -[SBFLockScreenDateSubtitleView setAccessoryView:]
  -[SBFLockScreenDateSubtitleView setLegibilitySettings:]
  -[SBFLockScreenDateSubtitleView interItemSpacing]
  -[SBFLockScreenDateSubtitleView setString:]
  -[SBFLockScreenDateSubtitleView sizeThatFits:]
  -[SBFLockScreenDateSubtitleView string]
  -[SBFLockScreenDateSubtitleView setFont:]
  -[SBFLockScreenDateSubtitleView _updateForCurrentSizeCategory]
  -[SBFLockScreenDateSubtitleView initWithString:accessoryView:]
  -[SBFLockScreenDateSubtitleView baselineOffsetFromOrigin]
  -[SBFLockScreenDateSubtitleView font]
  -[SBFLockScreenDateSubtitleView accessoryView]
  -[SBFLockScreenDateSubtitleView layoutSubviews]


SBFLazyObjectProvider : NSObject /usr/lib/libSystem.B.dylib
 @property  id object
 @property  @? generator

  // instance methods
  -[SBFLazyObjectProvider generator]
  -[SBFLazyObjectProvider object]
  -[SBFLazyObjectProvider setGenerator:]
  -[SBFLazyObjectProvider .cxx_destruct]
  -[SBFLazyObjectProvider setObject:]
  -[SBFLazyObjectProvider initWithGenerator:]


SBFBuildVersion : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *stringRepresentation
 @property  long long majorBuildNumber
 @property  NSString *majorBuildLetterString
 @property  long long minorBuildNumber
 @property  NSString *minorBuildLetterString

  // instance methods
  -[SBFBuildVersion stringRepresentation]
  -[SBFBuildVersion minorBuildNumber]
  -[SBFBuildVersion majorBuildLetterString]
  -[SBFBuildVersion initWithString:]
  -[SBFBuildVersion .cxx_destruct]
  -[SBFBuildVersion majorBuildNumber]
  -[SBFBuildVersion isEqual:]
  -[SBFBuildVersion minorBuildLetterString]
  -[SBFBuildVersion compareBuildVersion:withPrecision:]
  -[SBFBuildVersion compareBuildVersionString:withPrecision:]


SBAbstractDefaults : NSObject /usr/lib/libSystem.B.dylib <BSDescriptionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBAbstractDefaults succinctDescriptionBuilder]
  -[SBAbstractDefaults succinctDescription]
  -[SBAbstractDefaults descriptionWithMultilinePrefix:]
  -[SBAbstractDefaults descriptionBuilderWithMultilinePrefix:]


SBFLockScreenMetrics : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFLockScreenMetrics scaledFontSize:withMaximumFontSizeCategory:]
  +[SBFLockScreenMetrics logoutInsets]
  +[SBFLockScreenMetrics _notificationListBottomOffset]
  +[SBFLockScreenMetrics _notificationListSideOffset]
  +[SBFLockScreenMetrics dateViewBaselineY]
  +[SBFLockScreenMetrics dateBaselineOffsetFromTime]
  +[SBFLockScreenMetrics _notificationListTopPadding]
  +[SBFLockScreenMetrics proudLockAssetSize]
  +[SBFLockScreenMetrics dateViewSideMargin]
  +[SBFLockScreenMetrics subtitleBaselineOffsetFromTopOfScreen]
  +[SBFLockScreenMetrics dateLabelFontSize]
  +[SBFLockScreenMetrics slideUpGrabberInset]
  +[SBFLockScreenMetrics slideToUnlockFontSize]
  +[SBFLockScreenMetrics slideToUnlockOverlayMargin]
  +[SBFLockScreenMetrics slideToUnlockInsets]
  +[SBFLockScreenMetrics _subTitleHeight]
  +[SBFLockScreenMetrics notificationListInsets]
  +[SBFLockScreenMetrics logoutLabelFontSize]
  +[SBFLockScreenMetrics deviceInformationLabelFontSize]
  +[SBFLockScreenMetrics deviceInformationLabelFontLeading]
  +[SBFLockScreenMetrics deviceInformationParagraphSpacing]
  +[SBFLockScreenMetrics deviceInformationInsets]
  +[SBFLockScreenMetrics proudLockOffsetFromTopOfScreen]
  +[SBFLockScreenMetrics pinKeypadStatusTitleBaselineOffsetFromEntryField]
  +[SBFLockScreenMetrics pinNumberPadBaseOffsetFromTopOfScreen:]
  +[SBFLockScreenMetrics pinFixedDigitEntryFieldBottomYDistanceFromNumberPadTopButton:]
  +[SBFLockScreenMetrics pinFixedDigitEntryFieldIndicatorDiameter]
  +[SBFLockScreenMetrics pinFixedDigitEntryFieldIndicatorStrokeSize]
  +[SBFLockScreenMetrics pinFixedDigitEntryFieldIndicatorPaddingWidth]
  +[SBFLockScreenMetrics pinNumberPadWidth]
  +[SBFLockScreenMetrics pinNumberPadBottomPaddingHeight]
  +[SBFLockScreenMetrics pinNumberPadAncillaryButtonOffset]
  +[SBFLockScreenMetrics pinNumberPadButtonPaddingHeight]
  +[SBFLockScreenMetrics pinNumberPadButtonPaddingWidth]
  +[SBFLockScreenMetrics pinNumberPadButtonOuterCircleDiameter]
  +[SBFLockScreenMetrics pinKeypadStatusTitleViewTitleFont]
  +[SBFLockScreenMetrics pinLongNumericEntryFieldBottomYDistanceFromNumberPadTopButton]
  +[SBFLockScreenMetrics pinKeypadStatusSubtitleViewTitleFont]
  +[SBFLockScreenMetrics pinKeypadEntryFieldOffsetForSubtitle]
  +[SBFLockScreenMetrics pinKeypadStatusTitleBaselineOffsetFromTitle]
  +[SBFLockScreenMetrics pinKeypadStatusTitleExtraOffsetIncludingSubtitle]
  +[SBFLockScreenMetrics pinKeypadStatusSubtitleTitleExtraOffset]
  +[SBFLockScreenMetrics pinKeypadStatusTitleBaselineOffsetFromEntryFieldIncludingSubtitle]
  +[SBFLockScreenMetrics pinKeyboardEntryFieldOffset:]


SBSOSDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL disablesForAccessibility
 @property  BOOL performedCheckForTripleClickSOSMigrationAlert

  // instance methods
  -[SBSOSDefaults isAutomaticCallCountdownEnabled]
  -[SBSOSDefaults lockButtonSOSTriggerCount]
  -[SBSOSDefaults clawCanTriggerSOS]
  -[SBSOSDefaults _bindAndRegisterDefaults]


SBFLockScreenAlternateDateLabel : UIView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools <SBUILegibility>
 @property  SBUILegibilityLabel *label
 @property  NSDate *date
 @property  UIFont *font
 @property  {UIEdgeInsets=dddd} characterOverflowInsets
 @property  double strength
 @property  _UILegibilitySettings *legibilitySettings
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFLockScreenAlternateDateLabel showAlternateDate]
  +[SBFLockScreenAlternateDateLabel _lunarCalendarIdentifier]

  // instance methods
  -[SBFLockScreenAlternateDateLabel setStrength:]
  -[SBFLockScreenAlternateDateLabel legibilitySettings]
  -[SBFLockScreenAlternateDateLabel .cxx_destruct]
  -[SBFLockScreenAlternateDateLabel date]
  -[SBFLockScreenAlternateDateLabel setDate:]
  -[SBFLockScreenAlternateDateLabel label]
  -[SBFLockScreenAlternateDateLabel strength]
  -[SBFLockScreenAlternateDateLabel characterOverflowInsets]
  -[SBFLockScreenAlternateDateLabel setLegibilitySettings:]
  -[SBFLockScreenAlternateDateLabel sizeThatFits:]
  -[SBFLockScreenAlternateDateLabel setLabel:]
  -[SBFLockScreenAlternateDateLabel setFont:]
  -[SBFLockScreenAlternateDateLabel _alternateDateString]
  -[SBFLockScreenAlternateDateLabel initWithSettings:strength:font:]
  -[SBFLockScreenAlternateDateLabel font]
  -[SBFLockScreenAlternateDateLabel layoutSubviews]


SBNotificationCenterDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL useDuetRecommendations
 @property  BOOL batteryWidgetAlwaysAvailable
 @property  BOOL showInternalWidgets
 @property  BOOL widgetSnapshottingEnabled
 @property  BOOL didPurgeNonCAMLSnapshots
 @property  BOOL didPurgeNonASTCSnapshots
 @property  BOOL widgetLoggingEnabled
 @property  BOOL showWidgetSnapshotDebugLabels

  // instance methods
  -[SBNotificationCenterDefaults _bindAndRegisterDefaults]


SBFHomeGrabberSettings : PTSettings /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
 @property  double coverSheetHomeAffordanceCursorTopEdgeInset
 @property  double coverSheetHomeAffordanceCursorBottomEdgeInset
 @property  double coverSheetHomeAffordanceCursorLeftEdgeInset
 @property  double coverSheetHomeAffordanceCursorRightEdgeInset
 @property  double coverSheetSuppressAnimationForPointerTopEdgeInset
 @property  double coverSheetSuppressAnimationForPointerBottomEdgeInset
 @property  double coverSheetSuppressAnimationForPointerLeftEdgeInset
 @property  double coverSheetSuppressAnimationForPointerRightEdgeInset
 @property  BOOL enabled
 @property  long long initializationStyle
 @property  BOOL removeViewOnHide
 @property  long long edgeProtectOverride
 @property  long long autoHideOverride
 @property  double autoHideTime
 @property  double autoHideTimeOnAppRequest
 @property  BOOL resetAutoHideTimeOnRotation
 @property  double delayForUnhideOnTouch
 @property  double delayForUnhideOnAppRequest
 @property  double bounceHitTestOutsetTop
 @property  double bounceHitTestOutsetSides
 @property  SBFAnimationSettings *hideAnimationSettings
 @property  SBFAnimationSettings *unhideAnimationSettings
 @property  SBFAnimationSettings *hideForHomeGestureOwnershipAnimationSettings
 @property  SBFAnimationSettings *unhideForHomeGestureOwnershipAnimationSettings
 @property  SBFAnimationSettings *thinToProminentAnimationSettings
 @property  SBFAnimationSettings *prominentToThinAnimationSettings
 @property  SBFAnimationSettings *forcedProminentToThinAnimationSettings
 @property  SBFAnimationSettings *lumaResponseAnimationSettings
 @property  SBFAnimationSettings *initialLumaResponseAnimationSettings
 @property  SBFAnimationSettings *rotationFadeOutAnimationSettings
 @property  SBFAnimationSettings *rotationFadeInAnimationSettings
 @property  SBFFluidBehaviorSettings *edgeProtectAnimationSettings

  // class methods
  +[SBFHomeGrabberSettings settingsControllerModule]

  // instance methods
  -[SBFHomeGrabberSettings setDefaultValues]
  -[SBFHomeGrabberSettings autoHideOverride]
  -[SBFHomeGrabberSettings setEdgeProtectAnimationSettings:]
  -[SBFHomeGrabberSettings setLumaResponseAnimationSettings:]
  -[SBFHomeGrabberSettings coverSheetHomeAffordanceCursorBottomEdgeInset]
  -[SBFHomeGrabberSettings setCoverSheetSuppressAnimationForPointerLeftEdgeInset:]
  -[SBFHomeGrabberSettings setRotationFadeOutAnimationSettings:]
  -[SBFHomeGrabberSettings setDelayForUnhideOnTouch:]
  -[SBFHomeGrabberSettings coverSheetHomeAffordanceCursorEdgeInsets]
  -[SBFHomeGrabberSettings coverSheetSuppressAnimationForPointerRightEdgeInset]
  -[SBFHomeGrabberSettings setResetAutoHideTimeOnRotation:]
  -[SBFHomeGrabberSettings resetAutoHideTimeOnRotation]
  -[SBFHomeGrabberSettings setThinToProminentAnimationSettings:]
  -[SBFHomeGrabberSettings coverSheetSuppressAnimationForPointerLeftEdgeInset]
  -[SBFHomeGrabberSettings autoHideTimeOnAppRequest]
  -[SBFHomeGrabberSettings setCoverSheetSuppressAnimationForPointerTopEdgeInset:]
  -[SBFHomeGrabberSettings setCoverSheetHomeAffordanceCursorRightEdgeInset:]
  -[SBFHomeGrabberSettings setEdgeProtectOverride:]
  -[SBFHomeGrabberSettings unhideAnimationSettings]
  -[SBFHomeGrabberSettings .cxx_destruct]
  -[SBFHomeGrabberSettings setCoverSheetHomeAffordanceCursorLeftEdgeInset:]
  -[SBFHomeGrabberSettings setRemoveViewOnHide:]
  -[SBFHomeGrabberSettings edgeProtectAnimationSettings]
  -[SBFHomeGrabberSettings setBounceHitTestOutsetSides:]
  -[SBFHomeGrabberSettings autoHideTime]
  -[SBFHomeGrabberSettings edgeProtectOverride]
  -[SBFHomeGrabberSettings prominentToThinAnimationSettings]
  -[SBFHomeGrabberSettings setHideAnimationSettings:]
  -[SBFHomeGrabberSettings initialLumaResponseAnimationSettings]
  -[SBFHomeGrabberSettings bounceHitTestOutsetTop]
  -[SBFHomeGrabberSettings setAutoHideOverride:]
  -[SBFHomeGrabberSettings coverSheetSuppressAnimationForPointerTopEdgeInset]
  -[SBFHomeGrabberSettings isEnabled]
  -[SBFHomeGrabberSettings setHideForHomeGestureOwnershipAnimationSettings:]
  -[SBFHomeGrabberSettings rotationFadeInAnimationSettings]
  -[SBFHomeGrabberSettings setCoverSheetSuppressAnimationForPointerBottomEdgeInset:]
  -[SBFHomeGrabberSettings setAutoHideTimeOnAppRequest:]
  -[SBFHomeGrabberSettings removeViewOnHide]
  -[SBFHomeGrabberSettings setEnabled:]
  -[SBFHomeGrabberSettings coverSheetSuppressAnimationForPointerBottomEdgeInset]
  -[SBFHomeGrabberSettings setInitialLumaResponseAnimationSettings:]
  -[SBFHomeGrabberSettings delayForUnhideOnTouch]
  -[SBFHomeGrabberSettings rotationFadeOutAnimationSettings]
  -[SBFHomeGrabberSettings coverSheetSuppressAnimationForPointerInsets]
  -[SBFHomeGrabberSettings setInitializationStyle:]
  -[SBFHomeGrabberSettings setCoverSheetHomeAffordanceCursorTopEdgeInset:]
  -[SBFHomeGrabberSettings setProminentToThinAnimationSettings:]
  -[SBFHomeGrabberSettings setUnhideForHomeGestureOwnershipAnimationSettings:]
  -[SBFHomeGrabberSettings hideAnimationSettings]
  -[SBFHomeGrabberSettings lumaResponseAnimationSettings]
  -[SBFHomeGrabberSettings setCoverSheetSuppressAnimationForPointerRightEdgeInset:]
  -[SBFHomeGrabberSettings setDelayForUnhideOnAppRequest:]
  -[SBFHomeGrabberSettings coverSheetHomeAffordanceCursorTopEdgeInset]
  -[SBFHomeGrabberSettings setUnhideAnimationSettings:]
  -[SBFHomeGrabberSettings bounceHitTestOutsetSides]
  -[SBFHomeGrabberSettings initializationStyle]
  -[SBFHomeGrabberSettings setRotationFadeInAnimationSettings:]
  -[SBFHomeGrabberSettings setCoverSheetHomeAffordanceCursorBottomEdgeInset:]
  -[SBFHomeGrabberSettings hideForHomeGestureOwnershipAnimationSettings]
  -[SBFHomeGrabberSettings thinToProminentAnimationSettings]
  -[SBFHomeGrabberSettings coverSheetHomeAffordanceCursorLeftEdgeInset]
  -[SBFHomeGrabberSettings forcedProminentToThinAnimationSettings]
  -[SBFHomeGrabberSettings setAutoHideTime:]
  -[SBFHomeGrabberSettings delayForUnhideOnAppRequest]
  -[SBFHomeGrabberSettings setBounceHitTestOutsetTop:]
  -[SBFHomeGrabberSettings setForcedProminentToThinAnimationSettings:]
  -[SBFHomeGrabberSettings unhideForHomeGestureOwnershipAnimationSettings]
  -[SBFHomeGrabberSettings coverSheetHomeAffordanceCursorRightEdgeInset]


SBFHomeGrabberDomain : PTDomain /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard
  // class methods
  +[SBFHomeGrabberDomain domainName]
  +[SBFHomeGrabberDomain rootSettings]
  +[SBFHomeGrabberDomain rootSettingsClass]
  +[SBFHomeGrabberDomain domainGroupName]


_SBWindowReference : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  unsigned long pointer
 @property  id object

  // class methods
  +[_SBWindowReference referenceForObject:]

  // instance methods
  -[_SBWindowReference copyWithZone:]
  -[_SBWindowReference object]
  -[_SBWindowReference initWithObject:]
  -[_SBWindowReference pointer]
  -[_SBWindowReference isEqual:]


_SBFKeyWindowStack : NSObject /usr/lib/libSystem.B.dylib <BSDescriptionProviding>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[_SBFKeyWindowStack sharedInstance]

  // instance methods
  -[_SBFKeyWindowStack init]
  -[_SBFKeyWindowStack popKeyWindow:reason:]
  -[_SBFKeyWindowStack noteWindowHidden:]
  -[_SBFKeyWindowStack _evaluateForNewKeyWindowWithReason:]
  -[_SBFKeyWindowStack dealloc]
  -[_SBFKeyWindowStack .cxx_destruct]
  -[_SBFKeyWindowStack popKeyWindow:]
  -[_SBFKeyWindowStack succinctDescriptionBuilder]
  -[_SBFKeyWindowStack _keyWindowDidChangeNotification:]
  -[_SBFKeyWindowStack succinctDescription]
  -[_SBFKeyWindowStack _isWindowEligibleForKeyness:]
  -[_SBFKeyWindowStack noteWindowDeallocated:]
  -[_SBFKeyWindowStack pushKeyWindow:]
  -[_SBFKeyWindowStack noteWindowUnhidden:]
  -[_SBFKeyWindowStack descriptionWithMultilinePrefix:]
  -[_SBFKeyWindowStack descriptionBuilderWithMultilinePrefix:]
  -[_SBFKeyWindowStack expectedKeyWindow]


SBFDeviceBlockTimer : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *titleText
 @property  NSString *subtitleText
 @property  <SBFBlockStatusProvider> *blockStatusProvider
 @property  NSTimer *timer
 @property  BOOL enabled
 @property  @? handler

  // instance methods
  -[SBFDeviceBlockTimer setTitleText:]
  -[SBFDeviceBlockTimer timer]
  -[SBFDeviceBlockTimer titleText]
  -[SBFDeviceBlockTimer dealloc]
  -[SBFDeviceBlockTimer .cxx_destruct]
  -[SBFDeviceBlockTimer handler]
  -[SBFDeviceBlockTimer setHandler:]
  -[SBFDeviceBlockTimer _setTimer:]
  -[SBFDeviceBlockTimer subtitleText]
  -[SBFDeviceBlockTimer _setEnabled:]
  -[SBFDeviceBlockTimer _isEnabled]
  -[SBFDeviceBlockTimer _setBlockStatusProvider:]
  -[SBFDeviceBlockTimer _scheduleTimerIfNecessaryAndUpdateState]
  -[SBFDeviceBlockTimer initWithDeviceBlockStatusProvider:]
  -[SBFDeviceBlockTimer blockStatusProvider]
  -[SBFDeviceBlockTimer setSubtitleText:]
  -[SBFDeviceBlockTimer _clearTimer]
  -[SBFDeviceBlockTimer invalidate]
  -[SBFDeviceBlockTimer start]


SBFTouchPassThroughWindow : UIWindow /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
  // class methods
  +[SBFTouchPassThroughWindow touchPassThroughRootViewControllerClass]

  // instance methods
  -[SBFTouchPassThroughWindow initWithFrame:]
  -[SBFTouchPassThroughWindow hitTest:withEvent:]
  -[SBFTouchPassThroughWindow initWithScreen:debugName:]


SBFBokehWallpaperCircle : CALayer /System/Library/Frameworks/UIKit.framework/UIKit
 @property  BOOL fadingOut
 @property  {CGRect={CGPoint=dd}{CGSize=dd}} superviewBounds
 @property  BOOL shouldPause
 @property  BOOL isPulsating

  // instance methods
  -[SBFBokehWallpaperCircle _timerFired]
  -[SBFBokehWallpaperCircle .cxx_destruct]
  -[SBFBokehWallpaperCircle isFadingOut]
  -[SBFBokehWallpaperCircle setSuperviewBounds:]
  -[SBFBokehWallpaperCircle desiredOpacity]
  -[SBFBokehWallpaperCircle desiredPositionDeltaForX:y:lockScreen:]
  -[SBFBokehWallpaperCircle setCircleColor:]
  -[SBFBokehWallpaperCircle prepareForReuse]
  -[SBFBokehWallpaperCircle initWithFrame:fillColor:]
  -[SBFBokehWallpaperCircle setAnimationsEnabled:]
  -[SBFBokehWallpaperCircle startPulsatingCircle]
  -[SBFBokehWallpaperCircle setIsPulsating:]
  -[SBFBokehWallpaperCircle shouldPause]
  -[SBFBokehWallpaperCircle setFadingOut:]
  -[SBFBokehWallpaperCircle _animateInNewCircle]
  -[SBFBokehWallpaperCircle superviewBounds]
  -[SBFBokehWallpaperCircle randomOpacity]
  -[SBFBokehWallpaperCircle _resumeAnimations]
  -[SBFBokehWallpaperCircle _pauseAnimations]
  -[SBFBokehWallpaperCircle setShouldPause:]
  -[SBFBokehWallpaperCircle isPulsating]


SBFCARendererImageRepresentation : NSObject /usr/lib/libSystem.B.dylib <NSSecureCoding>
 @property  long long representationType
 @property  NSURL *fileURL
 @property  NSData *imageData
 @property  long long imageOrientation
 @property  IOSurface *surface

  // class methods
  +[SBFCARendererImageRepresentation supportsSecureCoding]
  +[SBFCARendererImageRepresentation representationWithImage:]
  +[SBFCARendererImageRepresentation representationWithIOSurface:imageOrientation:]
  +[SBFCARendererImageRepresentation representationWithFileURL:imageOrientation:]
  +[SBFCARendererImageRepresentation representationWithImageData:imageOrientation:]

  // instance methods
  -[SBFCARendererImageRepresentation fileURL]
  -[SBFCARendererImageRepresentation imageData]
  -[SBFCARendererImageRepresentation .cxx_destruct]
  -[SBFCARendererImageRepresentation encodeWithCoder:]
  -[SBFCARendererImageRepresentation surface]
  -[SBFCARendererImageRepresentation imageOrientation]
  -[SBFCARendererImageRepresentation createCGImageReturningScale:]
  -[SBFCARendererImageRepresentation representationType]
  -[SBFCARendererImageRepresentation initWithCoder:]


SBFMouseButtonDownGestureRecognizer : UIGestureRecognizer /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools
  // instance methods
  -[SBFMouseButtonDownGestureRecognizer touchesBegan:withEvent:]
  -[SBFMouseButtonDownGestureRecognizer _succesfullyRecognizeFromEvent:]
  -[SBFMouseButtonDownGestureRecognizer _isMouseButtonClickEvent:]


SBFLockScreenDateViewController : UIViewController /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools <PTSettingsKeyObserver>
 @property  BOOL screenOff
 @property  BOOL subtitleHidden
 @property  _UILegibilitySettings *legibilitySettings
 @property  <SBFDateProviding> *dateProvider
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFLockScreenDateViewController screenOff]
  -[SBFLockScreenDateViewController setView:]
  -[SBFLockScreenDateViewController willMoveToParentViewController:]
  -[SBFLockScreenDateViewController settings:changedValueForKey:]
  -[SBFLockScreenDateViewController setCustomSubtitleView:]
  -[SBFLockScreenDateViewController _stopUpdateTimer]
  -[SBFLockScreenDateViewController _addObservers]
  -[SBFLockScreenDateViewController dateProvider]
  -[SBFLockScreenDateViewController setContentAlpha:withSubtitleVisible:]
  -[SBFLockScreenDateViewController setScreenOff:]
  -[SBFLockScreenDateViewController setSubtitleHidden:]
  -[SBFLockScreenDateViewController dateView]
  -[SBFLockScreenDateViewController legibilitySettings]
  -[SBFLockScreenDateViewController isSubtitleHidden]
  -[SBFLockScreenDateViewController _updateLegibilityStrength]
  -[SBFLockScreenDateViewController dealloc]
  -[SBFLockScreenDateViewController _updateFormat]
  -[SBFLockScreenDateViewController .cxx_destruct]
  -[SBFLockScreenDateViewController _updateFormatIfEnabled]
  -[SBFLockScreenDateViewController dateViewIfExists]
  -[SBFLockScreenDateViewController setLegibilitySettings:]
  -[SBFLockScreenDateViewController _handleTimeZoneChange]
  -[SBFLockScreenDateViewController initWithNibName:bundle:]
  -[SBFLockScreenDateViewController setDateProvider:]
  -[SBFLockScreenDateViewController viewWillAppear:]
  -[SBFLockScreenDateViewController _canShowWhileLocked]
  -[SBFLockScreenDateViewController viewDidDisappear:]
  -[SBFLockScreenDateViewController updateTimeNow]
  -[SBFLockScreenDateViewController _updateView]
  -[SBFLockScreenDateViewController _updateState]
  -[SBFLockScreenDateViewController loadView]
  -[SBFLockScreenDateViewController _startUpdateTimer]


SBFBokehWallpaperColorArbiter : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFBokehWallpaperColorArbiter subColorsForMainColor:]


SBFInfiniteImpulseResponseFilter : NSObject /usr/lib/libSystem.B.dylib
 @property  double zeroGradientThreshold

  // class methods
  +[SBFInfiniteImpulseResponseFilter lowpassInertiaFilterWithCoefficient:]
  +[SBFInfiniteImpulseResponseFilter lowpassFilterWithCoefficient:]

  // instance methods
  -[SBFInfiniteImpulseResponseFilter output]
  -[SBFInfiniteImpulseResponseFilter dealloc]
  -[SBFInfiniteImpulseResponseFilter outputGradient]
  -[SBFInfiniteImpulseResponseFilter zeroGradient]
  -[SBFInfiniteImpulseResponseFilter filterWithInput:]
  -[SBFInfiniteImpulseResponseFilter setZeroGradientThreshold:]
  -[SBFInfiniteImpulseResponseFilter initWithCount:feedforwardCoefficients:feedbackCoefficients:]
  -[SBFInfiniteImpulseResponseFilter resetToValue:]
  -[SBFInfiniteImpulseResponseFilter setLowpassInertiaFilterCoefficient:]
  -[SBFInfiniteImpulseResponseFilter zeroGradientThreshold]


SBFDeviceLockOutController : NSObject /usr/lib/libSystem.B.dylib <BSDescriptionProviding, SBFThermalConditionObserver, SBFPrivateAuthenticationObserver, SBFLockOutStatusProvider>
 @property  SBFUserAuthenticationController *authenticationController
 @property  <SBFThermalBlockProvider> *thermalProvider
 @property  BOOL lockedOutCached
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[SBFDeviceLockOutController isPermanentlyBlocked]
  -[SBFDeviceLockOutController isBlocked]
  -[SBFDeviceLockOutController _setAuthenticationController:]
  -[SBFDeviceLockOutController deviceBlockStatus]
  -[SBFDeviceLockOutController dealloc]
  -[SBFDeviceLockOutController .cxx_destruct]
  -[SBFDeviceLockOutController succinctDescriptionBuilder]
  -[SBFDeviceLockOutController _isLockedOutCached]
  -[SBFDeviceLockOutController isThermallyBlocked]
  -[SBFDeviceLockOutController _setThermalProvider:]
  -[SBFDeviceLockOutController temporaryBlockStatusChanged]
  -[SBFDeviceLockOutController succinctDescription]
  -[SBFDeviceLockOutController _noteLockedOutStateMayHaveChanged:]
  -[SBFDeviceLockOutController isTemporarilyBlocked]
  -[SBFDeviceLockOutController thermalBlockStatusChanged:]
  -[SBFDeviceLockOutController _setLockedOutCached:]
  -[SBFDeviceLockOutController _thermalProvider]
  -[SBFDeviceLockOutController _authenticationController]
  -[SBFDeviceLockOutController _noteLockedOutReasonsMayHaveChanged]
  -[SBFDeviceLockOutController initWithThermalController:authenticationController:]
  -[SBFDeviceLockOutController isLockedOut]
  -[SBFDeviceLockOutController descriptionWithMultilinePrefix:]
  -[SBFDeviceLockOutController descriptionBuilderWithMultilinePrefix:]
  -[SBFDeviceLockOutController timeIntervalUntilUnblockedSinceReferenceDate]


SBFWallpaperConfigurationManager : NSObject /usr/lib/libSystem.B.dylib <BSDescriptionProviding>
 @property  BOOL cachedVariantsShareWallpaperConfiguration
 @property  BOOL cachedVariantsShareWallpaperConfigurationValid
 @property  NSArray *dataStores
 @property  <SBFWallpaperConfigurationManagerDelegate> *delegate
 @property  {CGSize=dd} wallpaperSize
 @property  {CGSize=dd} wallpaperSizeIncludingParallaxOverhang
 @property  double wallpaperScale
 @property  long long wallpaperMode
 @property  BOOL enableWallpaperDimming
 @property  long long wallpaperSizeType
 @property  long long parallaxDeviceType
 @property  SBFWallpaperConfiguration *lockScreenWallpaperConfiguration
 @property  SBFWallpaperConfiguration *homeScreenWallpaperConfiguration
 @property  BOOL variantsShareWallpaperConfiguration
 @property  unsigned long numberOfCachedStaticImages
 @property  <SBFProceduralWallpaperProvider> *proceduralWallpaperProvider
 @property  SBFMagnifyMode *magnifyMode
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFWallpaperConfigurationManager initialize]

  // instance methods
  -[SBFWallpaperConfigurationManager removeWallpaperColorForVariants:]
  -[SBFWallpaperConfigurationManager proceduralWallpaperInfoForVariant:]
  -[SBFWallpaperConfigurationManager removeWallpaperImageDataTypes:forVariants:]
  -[SBFWallpaperConfigurationManager removeWallpaperGradientForVariants:]
  -[SBFWallpaperConfigurationManager setWallpaperOptions:forVariants:wallpaperMode:]
  -[SBFWallpaperConfigurationManager wallpaperImageForVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager setWallpaperMode:]
  -[SBFWallpaperConfigurationManager setWallpaperImageHashData:forVariants:wallpaperMode:]
  -[SBFWallpaperConfigurationManager setWallpaperColor:forVariants:]
  -[SBFWallpaperConfigurationManager hasWallpaperImageForVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager setWallpaperThumbnailData:forVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager wallpaperOptionsForVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager wallpaperImageHashDataForVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager wallpaperOriginalImageForVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager removeWallpaperImageHashDataForVariants:]
  -[SBFWallpaperConfigurationManager setWallpaperImage:originalImage:thumbnailData:imageHashData:wallpaperOptions:forVariants:options:wallpaperMode:isMigrating:]
  -[SBFWallpaperConfigurationManager setWallpaperColorName:forVariants:]
  -[SBFWallpaperConfigurationManager removeWallpaperOptionsForVariants:]
  -[SBFWallpaperConfigurationManager setWallpaperImage:adjustedImage:thumbnailData:imageHashData:wallpaperOptions:forVariants:wallpaperMode:]
  -[SBFWallpaperConfigurationManager wallpaperMode]
  -[SBFWallpaperConfigurationManager setProceduralWallpaperIdentifier:options:forVariants:]
  -[SBFWallpaperConfigurationManager wallpaperThumbnailImageDataForFulfillingLookupForConfiguration:]
  -[SBFWallpaperConfigurationManager dataStores]
  -[SBFWallpaperConfigurationManager numberOfCachedStaticImages]
  -[SBFWallpaperConfigurationManager setWallpaperGradient:forVariants:]
  -[SBFWallpaperConfigurationManager wallpaperThumbnailImageForVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager videoURLForVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager fallbackWallpaperConfigurationForVarient:]
  -[SBFWallpaperConfigurationManager regenerateThumbnailIfNecessaryForVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager setCachedVariantsShareWallpaperConfiguration:]
  -[SBFWallpaperConfigurationManager init]
  -[SBFWallpaperConfigurationManager removeWallpaperImagesForVariants:]
  -[SBFWallpaperConfigurationManager migratedWallpaperOptionsForWallpaperOptions:originalImageSize:]
  -[SBFWallpaperConfigurationManager clearDelayedChangeNotifications]
  -[SBFWallpaperConfigurationManager effectiveSharedVariantForVariants:]
  -[SBFWallpaperConfigurationManager clearCacheForVariants:]
  -[SBFWallpaperConfigurationManager setProceduralWallpaperProvider:]
  -[SBFWallpaperConfigurationManager parallaxDeviceType]
  -[SBFWallpaperConfigurationManager homeScreenWallpaperConfiguration]
  -[SBFWallpaperConfigurationManager endChangeBatch]
  -[SBFWallpaperConfigurationManager dealloc]
  -[SBFWallpaperConfigurationManager removeProceduralWallpaperForVariants:]
  -[SBFWallpaperConfigurationManager homeScreenWallpaperConfigurationIncludingValuesForTypes:]
  -[SBFWallpaperConfigurationManager .cxx_destruct]
  -[SBFWallpaperConfigurationManager beginChangeBatch]
  -[SBFWallpaperConfigurationManager setWallpaperImage:wallpaperOptions:forVariants:]
  -[SBFWallpaperConfigurationManager cleanedProceduralWallpaperInfo:]
  -[SBFWallpaperConfigurationManager thumbnailWidth]
  -[SBFWallpaperConfigurationManager migrateWallpaperOptionsForImageIfNecessaryForVariant:representingVariants:]
  -[SBFWallpaperConfigurationManager regenerateThumbnailsIfNecessary]
  -[SBFWallpaperConfigurationManager regenerateStaticWallpaperThumbnailImages]
  -[SBFWallpaperConfigurationManager isVideoSupportedForVariant:]
  -[SBFWallpaperConfigurationManager succinctDescriptionBuilder]
  -[SBFWallpaperConfigurationManager lockScreenWallpaperConfiguration]
  -[SBFWallpaperConfigurationManager isCachedVariantsShareWallpaperConfigurationValid]
  -[SBFWallpaperConfigurationManager setWallpaperOptions:forVariants:]
  -[SBFWallpaperConfigurationManager safeMigrateWallpaperImageIfNecessaryForVariant:representingVariants:wallpaperMode:]
  -[SBFWallpaperConfigurationManager wallpaperSize]
  -[SBFWallpaperConfigurationManager restoreDefaultWallpaperForAllVariantsAndNotify:]
  -[SBFWallpaperConfigurationManager wallpaperColorForVariant:fromDataStore:colorName:]
  -[SBFWallpaperConfigurationManager wallpaperSizeType]
  -[SBFWallpaperConfigurationManager wallpaperThumbnailImageForFulfillingLookupForConfiguration:]
  -[SBFWallpaperConfigurationManager variantsShareWallpaperConfiguration]
  -[SBFWallpaperConfigurationManager thumbnailDataForImage:]
  -[SBFWallpaperConfigurationManager setWallpaperBundle:appearance:]
  -[SBFWallpaperConfigurationManager wallpaperConfigurationForVariant:includingValuesForTypes:wallpaperMode:]
  -[SBFWallpaperConfigurationManager initWithWallpaperDataStores:wallpaperSize:scale:sizeType:]
  -[SBFWallpaperConfigurationManager cropRectForViewPort:portrait:zoomScale:parallaxFactor:forImageSize:contentScaleFactor:]
  -[SBFWallpaperConfigurationManager isInChangeBatch]
  -[SBFWallpaperConfigurationManager setWallpaperConfigurationFromDefaultWallpaperConfiguration:forVariants:wallpaperMode:name:]
  -[SBFWallpaperConfigurationManager wallpaperThumbnailImageDataForVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager succinctDescription]
  -[SBFWallpaperConfigurationManager isVideoSupportedByDefaultForVariant:]
  -[SBFWallpaperConfigurationManager safeMigrateWallpaperImageIfNecessary]
  -[SBFWallpaperConfigurationManager normalizeImage:]
  -[SBFWallpaperConfigurationManager removeDataForTypes:variants:variantsShareWallpaperConfiguration:]
  -[SBFWallpaperConfigurationManager removeVideoForVariants:]
  -[SBFWallpaperConfigurationManager setEnableWallpaperDimming:]
  -[SBFWallpaperConfigurationManager clearCacheForVariants:memoryOnly:]
  -[SBFWallpaperConfigurationManager cachedVariantsShareWallpaperConfiguration]
  -[SBFWallpaperConfigurationManager getBestCropRect:zoomScale:forImageSize:portrait:parallaxFactor:]
  -[SBFWallpaperConfigurationManager removeWallpaperImagesForVariants:variantsShareWallpaperConfiguration:]
  -[SBFWallpaperConfigurationManager wallpaperScale]
  -[SBFWallpaperConfigurationManager isProceduralWallpaperInfoValid:]
  -[SBFWallpaperConfigurationManager initWithWallpaperDataStores:]
  -[SBFWallpaperConfigurationManager wallpaperDidChangeForVariants:shouldNotify:]
  -[SBFWallpaperConfigurationManager setWallpaperThumbnailFromFullsizeImage:forVariant:wallpaperMode:]
  -[SBFWallpaperConfigurationManager wallpaperWillChangeForVariants:]
  -[SBFWallpaperConfigurationManager removeAllDataExceptForTypes:variants:variantsShareWallpaperConfiguration:]
  -[SBFWallpaperConfigurationManager wallpaperConfigurationForVariant:]
  -[SBFWallpaperConfigurationManager wallpaperConfigurationForVariant:includingValuesForTypes:]
  -[SBFWallpaperConfigurationManager setWallpaperThumbnailData:forVariant:]
  -[SBFWallpaperConfigurationManager removeAllDataExceptForType:variants:variantsShareWallpaperConfiguration:]
  -[SBFWallpaperConfigurationManager notifyDelegateOfChangesToVariants:]
  -[SBFWallpaperConfigurationManager enableWallpaperDimming]
  -[SBFWallpaperConfigurationManager parallaxFactorForCropRect:portrait:forImageSize:zoomScale:]
  -[SBFWallpaperConfigurationManager setMagnifyMode:]
  -[SBFWallpaperConfigurationManager performMigrationWithFailureHandler:]
  -[SBFWallpaperConfigurationManager setDelegate:]
  -[SBFWallpaperConfigurationManager magnifyMode]
  -[SBFWallpaperConfigurationManager setVideoURL:forVariant:shoudCrop:relativeCropRect:wallpaperMode:]
  -[SBFWallpaperConfigurationManager proceduralWallpaperProvider]
  -[SBFWallpaperConfigurationManager delayNotifyingChangeForVariants:]
  -[SBFWallpaperConfigurationManager wallpaperTypeForSharedWallpaperConfigurationForTypes:]
  -[SBFWallpaperConfigurationManager variantsShareWallpaperConfigurationForTypes:]
  -[SBFWallpaperConfigurationManager proceduralWallpaperClassForIdentifier:]
  -[SBFWallpaperConfigurationManager saveCroppedVideo:toURL:cropRect:completionHandler:]
  -[SBFWallpaperConfigurationManager delegate]
  -[SBFWallpaperConfigurationManager descriptionWithMultilinePrefix:]
  -[SBFWallpaperConfigurationManager lockScreenWallpaperConfigurationIncludingValuesForTypes:]
  -[SBFWallpaperConfigurationManager wallpaperSizeIncludingParallaxOverhang]
  -[SBFWallpaperConfigurationManager cropRectForOldCropRect:portrait:zoomScale:oldParallaxFactor:forImageSize:newZoomScale:]
  -[SBFWallpaperConfigurationManager setCachedVariantsShareWallpaperConfigurationValid:]
  -[SBFWallpaperConfigurationManager descriptionBuilderWithMultilinePrefix:]
  -[SBFWallpaperConfigurationManager setWallpaperImage:originalImage:forVariants:options:]


SBFShamMobileKeyBag : NSObject /usr/lib/libSystem.B.dylib
  // class methods
  +[SBFShamMobileKeyBag shamKeyBagWithRecoveryRequired:correctPasscode:]
  +[SBFShamMobileKeyBag shamKeyBagWithRecoveryRequired:recoveryPossible:timeScaleFactor:correctPasscode:]

  // instance methods
  -[SBFShamMobileKeyBag createStashBag:completion:completionQueue:]
  -[SBFShamMobileKeyBag .cxx_destruct]
  -[SBFShamMobileKeyBag lock]
  -[SBFShamMobileKeyBag beginRecovery:error:]
  -[SBFShamMobileKeyBag waitForUnlockWithTimeout:]
  -[SBFShamMobileKeyBag createStashBag:completion:]
  -[SBFShamMobileKeyBag extendedState]
  -[SBFShamMobileKeyBag initWithRecoveryRequired:correctPasscode:]
  -[SBFShamMobileKeyBag initWithRecoveryRequired:recoveryPossible:timeScaleFactor:correctPasscode:]
  -[SBFShamMobileKeyBag _queue_initializeSecretChangeMachine:]
  -[SBFShamMobileKeyBag _simplifiedLockStateForLockState:]
  -[SBFShamMobileKeyBag _queue_stepSecretChangeMachine]
  -[SBFShamMobileKeyBag state]


SBDemoDefaults : SBAbstractSpringBoardDefaultDomain
 @property  BOOL storeDemoApplicationLockEnabled

  // instance methods
  -[SBDemoDefaults _bindAndRegisterDefaults]


SBFStaticWallpaperView : SBFWallpaperView
 @property  UIImage *displayedImage
 @property  UIImage *sampleImage
 @property  NSData *displayedImageHashData
 @property  NSString *displayedImageHashString
 @property  SBFColorBoxes *colorBoxes

  // class methods
  +[SBFStaticWallpaperView _allowsParallax]
  +[SBFStaticWallpaperView _canCacheImages]
  +[SBFStaticWallpaperView _canDownscaleSampleImage]
  +[SBFStaticWallpaperView _allowsRasterization]

  // instance methods
  -[SBFStaticWallpaperView setDisplayedImageHashData:]
  -[SBFStaticWallpaperView imageRequiresLuminanceTreatment]
  -[SBFStaticWallpaperView setDisplayedImageHashString:]
  -[SBFStaticWallpaperView displayedImageHashData]
  -[SBFStaticWallpaperView wallpaperType]
  -[SBFStaticWallpaperView _setupWallpaperImageFromConfiguration:options:]
  -[SBFStaticWallpaperView wallpaperImage]
  -[SBFStaticWallpaperView initWithFrame:configuration:variant:cacheGroup:delegate:options:]
  -[SBFStaticWallpaperView _computeAverageColor]
  -[SBFStaticWallpaperView _displayedImage]
  -[SBFStaticWallpaperView _zoomScale]
  -[SBFStaticWallpaperView colorBoxes]
  -[SBFStaticWallpaperView _updateColorBoxesWithKey:image:]
  -[SBFStaticWallpaperView _contrastInContentViewRect:contrastWithinBoxes:contrastBetweenBoxes:]
  -[SBFStaticWallpaperView snapshotImage]
  -[SBFStaticWallpaperView _setUpStaticImageContentView:]
  -[SBFStaticWallpaperView setContentsRect:]
  -[SBFStaticWallpaperView cacheUniqueIdentifier]
  -[SBFStaticWallpaperView contrastInRect:contrastWithinBoxes:contrastBetweenBoxes:]
  -[SBFStaticWallpaperView _displayImage:]
  -[SBFStaticWallpaperView setCropRect:zoomScale:]
  -[SBFStaticWallpaperView isDisplayingWallpaperWithConfiguration:forVariant:]
  -[SBFStaticWallpaperView _sampleImage]
  -[SBFStaticWallpaperView _setDisplayedImage:]
  -[SBFStaticWallpaperView contrast]
  -[SBFStaticWallpaperView _createColorBoxes]
  -[SBFStaticWallpaperView preheatImageData]
  -[SBFStaticWallpaperView hasContentOutsideVisibleBounds]
  -[SBFStaticWallpaperView displayedImageHashString]
  -[SBFStaticWallpaperView setColorBoxes:]
  -[SBFStaticWallpaperView _wallpaperImageForAnalysis]
  -[SBFStaticWallpaperView cropZoomScale]
  -[SBFStaticWallpaperView _setSampleImage:]
  -[SBFStaticWallpaperView _setupContentViewWithOptions:]
  -[SBFStaticWallpaperView _imageSize]
  -[SBFStaticWallpaperView _generateImageForImage:cacheKey:options:downsampleFactor:needsDimmingTreatment:averageColor:generationHandler:]
  -[SBFStaticWallpaperView .cxx_destruct]
  -[SBFStaticWallpaperView _averageColorInContentViewRect:smudgeRadius:]


SBFStaticWallpaperImageView : UIImageView /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools

SBFUserAuthenticationModelJournaledDefaults : NSObject /usr/lib/libSystem.B.dylib <SBFUserAuthenticationModel>
 @property  <SBFUserAuthenticationModelDelegate> *delegate
 @property  BOOL temporarilyBlocked
 @property  BOOL permanentlyBlocked
 @property  double timeUntilUnblockedSinceReferenceDate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[SBFUserAuthenticationModelJournaledDefaults _journaledDefaultsAndTypes]

  // instance methods
  -[SBFUserAuthenticationModelJournaledDefaults isPermanentlyBlocked]
  -[SBFUserAuthenticationModelJournaledDefaults synchronize]
  -[SBFUserAuthenticationModelJournaledDefaults init]
  -[SBFUserAuthenticationModelJournaledDefaults notePasscodeEntryBegan]
  -[SBFUserAuthenticationModelJournaledDefaults .cxx_destruct]
  -[SBFUserAuthenticationModelJournaledDefaults notePasscodeUnlockSucceeded]
  -[SBFUserAuthenticationModelJournaledDefaults notePasscodeEntryCancelled]
  -[SBFUserAuthenticationModelJournaledDefaults performPasswordTest:]
  -[SBFUserAuthenticationModelJournaledDefaults isTemporarilyBlocked]
  -[SBFUserAuthenticationModelJournaledDefaults _isDeviceWipePreferenceEnabled]
  -[SBFUserAuthenticationModelJournaledDefaults setDelegate:]
  -[SBFUserAuthenticationModelJournaledDefaults _initWithJournalPath:securityDefaults:profileConnection:]
  -[SBFUserAuthenticationModelJournaledDefaults _loadLockControllerDefaultsJournalIfNecessary]
  -[SBFUserAuthenticationModelJournaledDefaults _persistentStateQueue_loadLockState]
  -[SBFUserAuthenticationModelJournaledDefaults _persistentStateQueue_beginSpeculativeFailureCharge]
  -[SBFUserAuthenticationModelJournaledDefaults _persistentStateQueue_cancelSpeculativeFailureCharge]
  -[SBFUserAuthenticationModelJournaledDefaults _persistentStateQueue_unlockSucceeded]
  -[SBFUserAuthenticationModelJournaledDefaults _persistentStateQueue_unlockFailedWithError:]
  -[SBFUserAuthenticationModelJournaledDefaults _persistentStateQueue_clearBlockedState]
  -[SBFUserAuthenticationModelJournaledDefaults _evaluatePendingWipe]
  -[SBFUserAuthenticationModelJournaledDefaults _persistentStateQueue_evaluatePendingWipe]
  -[SBFUserAuthenticationModelJournaledDefaults updateLockControllerDefaultsWithBlock:journaled:]
  -[SBFUserAuthenticationModelJournaledDefaults _loadLockControllerDefaults:]
  -[SBFUserAuthenticationModelJournaledDefaults _copyLockControllerDefaults]
  -[SBFUserAuthenticationModelJournaledDefaults _updateLockControllerDefaultsJournal]
  -[SBFUserAuthenticationModelJournaledDefaults test_reloadState]
  -[SBFUserAuthenticationModelJournaledDefaults clearBlockedState]
  -[SBFUserAuthenticationModelJournaledDefaults timeUntilUnblockedSinceReferenceDate]
  -[SBFUserAuthenticationModelJournaledDefaults delegate]
  -[SBFUserAuthenticationModelJournaledDefaults notePasscodeUnlockFailedWithError:]


SBNotificationDefaults : SBAbstractSpringBoardDefaultDomain
 @property  NSArray *displayIDsWithBadgingEnabled
 @property  BOOL alwaysAllowDefaultAction
 @property  BOOL alwaysAllowLongLookGesture
 @property  BOOL dontSuppressForPrivacyWhenUnlocked
 @property  BOOL shouldTestBannerPlayTextTone
 @property  BOOL alwaysSpeakNotifications
 @property  NSArray *legacyAlarmList

  // class methods
  +[SBNotificationDefaults standardDefaults]

  // instance methods
  -[SBNotificationDefaults _bindAndRegisterDefaults]


UIViewController(SpringBoardFoundation)
_UILegibilitySettings(SpringBoard)
	// instance methods
	-[_UILegibilitySettings(SpringBoard) succinctDescriptionBuilder]
	-[_UILegibilitySettings(SpringBoard) sb_copy]
	-[_UILegibilitySettings(SpringBoard) succinctDescription]
	-[_UILegibilitySettings(SpringBoard) sb_isEqualToLegibilitySettings:]
	-[_UILegibilitySettings(SpringBoard) sb_styleString]
	-[_UILegibilitySettings(SpringBoard) sb_description]
	-[_UILegibilitySettings(SpringBoard) descriptionWithMultilinePrefix:]
	-[_UILegibilitySettings(SpringBoard) descriptionBuilderWithMultilinePrefix:]

NSFileWrapper(SBFFileSizeCalculation)
	// instance methods
	-[NSFileWrapper(SBFFileSizeCalculation) sb_fileSize]

(SBFFileCache)
	// instance methods
	-[(SBFFileCache) fileCacheStableDataRepresentation]
	-[(SBFFileCache) sb_isEntirelyCharactersInSet:]
	-[(SBFFileCache) _isEntirelyCommon]
	-[(SBFFileCache) _adjustedFontForScripts:forFont:withPointAdjustment:ignoringContent:]
	-[(SBFFileCache) _isEntirelyCharactersInScript:]
	-[(SBFFileCache) _isInScript:useLocaleOnly:]
	-[(SBFFileCache) _adjustedFontForScripts:forFont:withPointAdjustment:]
	-[(SBFFileCache) _adjustedFontForScripts:forFont:ignoringContent:]
	-[(SBFFileCache) sb_containsEmoji]
	-[(SBFFileCache) _adjustedFontForScripts:forFont:]

(SBFFileCache)
	// instance methods
	-[(SBFFileCache) fileCacheStableDataRepresentation]

UIImage(SBFWallpaperHelpers)
	// class methods
	+[UIImage(SBFWallpaperHelpers) sbf_thumbnailImageForImage:]
	+[UIImage(SBFWallpaperHelpers) sbf_bytesNeededForSize:scale:withContextType:]
	+[UIImage(SBFWallpaperHelpers) sbf_imageWithIOSurface:scale:orientation:]
	+[UIImage(SBFWallpaperHelpers) sbf_imageFromBGRAContextWithSize:scale:colorSpace:withAlpha:pool:drawing:encapsulation:]
	+[UIImage(SBFWallpaperHelpers) sbf_imageFromContextWithSize:scale:type:pool:drawing:encapsulation:]
	+[UIImage(SBFWallpaperHelpers) sbf_imageFromContextWithSize:scale:type:pool:drawing:]

	// instance methods
	-[UIImage(SBFWallpaperHelpers) sbf_cropImageWithRect:outputSize:preservingAspectRatio:]
	-[UIImage(SBFWallpaperHelpers) sbf_EXIFOrientation]
	-[UIImage(SBFWallpaperHelpers) sbf_cropImageWithRect:outputSize:]
	-[UIImage(SBFWallpaperHelpers) sbf_colorSpace]
	-[UIImage(SBFWallpaperHelpers) sbf_imageMaskedByColor:]
	-[UIImage(SBFWallpaperHelpers) sbf_cropImageWithRect:outputSize:canUseIOSurface:]
	-[UIImage(SBFWallpaperHelpers) sbf_cropImageWithRect:outputSize:preservingAspectRatio:canUseIOSurface:]
	-[UIImage(SBFWallpaperHelpers) sbf_resizeImageToSize:preservingAspectRatio:]
	-[UIImage(SBFWallpaperHelpers) sbf_scaleImage:canUseIOSurface:]
	-[UIImage(SBFWallpaperHelpers) sbf_scaleImage:]
	-[UIImage(SBFWallpaperHelpers) sbf_imageHashData]
	-[UIImage(SBFWallpaperHelpers) sbf_imageByConvertingToColorSpace:type:]
	-[UIImage(SBFWallpaperHelpers) sbf_CGImageBackedImageWithMaximumBitsPerComponent:skipCIF10FitsInSRGBCheck:]
	-[UIImage(SBFWallpaperHelpers) sbf_imageByManipulatingInDeviceColorSpaceWithBlock:]
	-[UIImage(SBFWallpaperHelpers) sbf_imageUsingContextType:]
	-[UIImage(SBFWallpaperHelpers) sbf_ATXSafeCGImageBackedImage]
	-[UIImage(SBFWallpaperHelpers) sbf_downscaledImageByDrawingIntoContextOfType:downscaleFactor:]
	-[UIImage(SBFWallpaperHelpers) sbf_imageByDrawingIntoContextOfType:]
	-[UIImage(SBFWallpaperHelpers) sbf_CGImageBackedImageWithMaximumBitsPerComponent:]
	-[UIImage(SBFWallpaperHelpers) sbf_memoryMappedImageWithPool:]
	-[UIImage(SBFWallpaperHelpers) sbf_imageByTilingCenterPixel]
	-[UIImage(SBFWallpaperHelpers) sbf_resizedImageForCurrentMagnifyMode]
	-[UIImage(SBFWallpaperHelpers) sbf_CGImageBackedImage]
	-[UIImage(SBFWallpaperHelpers) sbf_resizeImageToSize:]

(SBFWallpaper)
	// instance methods
	-[(SBFWallpaper) sbf_isFileNotFoundError]

UIDevice(ControlCenter)
	// instance methods
	-[UIDevice(ControlCenter) _currentProduct]
	-[UIDevice(ControlCenter) _lowQualityDevicesForFeatherBlur]
	-[UIDevice(ControlCenter) _mediumQualityDevicesForHomeScreenBlur]
	-[UIDevice(ControlCenter) sbf_homeGrabberGraphicsQuality]
	-[UIDevice(ControlCenter) sbf_featherBlurGraphicsQuality]
	-[UIDevice(ControlCenter) _deviceInfoForKey:]
	-[UIDevice(ControlCenter) sbf_animatedBlurRadiusGraphicsQuality]

UIGestureRecognizer(SpringBoardFoundation)
	// instance methods
	-[UIGestureRecognizer(SpringBoardFoundation) sbf_setStylusTouchesAllowed:]

UIView(SBFFluidBehaviorSettings)
	// class methods
	+[UIView(SBFFluidBehaviorSettings) sb_animateWithSettings:interactive:animations:completion:]
	+[UIView(SBFFluidBehaviorSettings) sb_animateWithSettings:mode:animations:completion:]

	// instance methods
	-[UIView(SBFFluidBehaviorSettings) sbf_setBoundsAndPositionFromFrame:]

UIWebClip(SBAdditions)
	// instance methods
	-[UIWebClip(SBAdditions) sb_iconImageFileProtectionType]
	-[UIWebClip(SBAdditions) sb_markIconImageFileProtectionTypeAsNone]

(SBFCacheInstances)
	// class methods
	+[(SBFCacheInstances) sbf_cachedDecimalNumberFormatter]

(SBHexRepresentation)
	// instance methods
	-[(SBHexRepresentation) sbf_hexadecimalEncodedString]

01 00 1200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAsset 
01 00 1200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVAssetExportSession 
01 00 1200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableVideoComposition 
01 00 1200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableVideoCompositionInstruction 
01 00 1200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVMutableVideoCompositionLayerInstruction 
01 00 1200 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVURLAsset 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSAbstractDefaultDomain 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSAnimationSettings 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSDateFormatterCache 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSDescriptionBuilder 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSDispatchQueueAttributes 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSHashBuilder 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSMonotonicReferenceTime 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSMutableAnimationSettings 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSMutableSpringAnimationSettings 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSPathProviderFactory 
01 00 1600 /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices: BSPlatform 
01 00 1300 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIAnimationFactory 
01 00 1300 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIMappedImageCache 
01 00 1300 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIMappedImageCacheOptions 
01 00 1300 /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI: BSUIScrollView 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABackdropLayer 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CABasicAnimation 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CADisplayLink 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAFilter 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAGradientLayer 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CALayer 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CAMediaTimingFunction 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CARenderer 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CASpringAnimation 
01 00 1f00 /System/Library/Frameworks/QuartzCore.framework/QuartzCore: CATransaction 
01 00 0800 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMGestureManager 
01 00 0800 /System/Library/Frameworks/CoreMotion.framework/CoreMotion: CMMotionManager 
01 00 0400 /System/Library/Frameworks/EventKitUI.framework/EventKitUI: CalendarPreferences 
01 00 0b00 /System/Library/Frameworks/IOSurface.framework/IOSurface: IOSurface 
01 00 0d00 /System/Library/PrivateFrameworks/IntlPreferences.framework/IntlPreferences: IntlUtility 
01 00 0e00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationProxy 
01 00 2300 /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration: MCProfileConnection 
01 00 0c00 /System/Library/Frameworks/Metal.framework/Metal: MTLTextureDescriptor 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSCalendar 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantDictionary 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantDoubleNumber 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSConstantIntegerNumber 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateComponentsFormatter 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileManager 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSFileWrapper 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSHashTable 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSIndexSet 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSInputStream 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedArchiver 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSKeyedUnarchiver 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSLocale 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableIndexSet 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSNull 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumberFormatter 
01 00 2600 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOutputStream 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimeZone 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSession 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSURLSessionConfiguration 
01 00 2800 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSUserDefaults 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 1d00 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 2500 /System/Library/PrivateFrameworks/PersistentConnection.framework/PersistentConnection: PCPersistentTimer 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTButtonRow 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTChoiceRow 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDomain 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTDrillDownRow 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTEditFloatRow 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTModule 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTRestoreDefaultSettingsRowAction 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTRow 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSettings 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSliderRow 
01 00 2140 /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools: PTSwitchRow 
01 00 0a00 /System/Library/PrivateFrameworks/PrototypeToolsUI.framework/PrototypeToolsUI: PTUIRowTableViewCell 
01 00 1000 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSAnalyticsState 
01 00 1000 /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices: SBSApplicationShortcutService 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIButton 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIColorEffect 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIGestureRecognizer 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRenderer 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIGraphicsImageRendererFormat 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageView 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIScrollView 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UISpringLoadedInteraction 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIStatusBar 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIUserInterfaceStyleArbiter 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIViewController 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIWebClip 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: UIWindow 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: _UIBackdropViewSettings 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: _UILegibilitySettings 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: _UILegibilitySettingsProvider 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: _UIParallaxMotionEffect 
01 00 2000 /System/Library/Frameworks/UIKit.framework/UIKit: _UISettings 
