|| __DATA.__data _netrbClientAnyExternal
|| __DATA.__data _netrbClientDeviceType
|| __DATA.__data _netrbClientDns64Prefix
|| __DATA.__data _netrbClientForwardedHighPort
|| __DATA.__data _netrbClientForwardedLowPort
|| __DATA.__data _netrbClientInterfaceEndAddress
|| __DATA.__data _netrbClientInterfaceInstance
|| __DATA.__data _netrbClientInterfaceMTU
|| __DATA.__data _netrbClientInterfaceName
|| __DATA.__data _netrbClientInterfaceNetworkMask
|| __DATA.__data _netrbClientInterfaceSpeed
|| __DATA.__data _netrbClientInterfaceStartAddress
|| __DATA.__data _netrbClientNat64Param
|| __DATA.__data _netrbClientNat66Param
|| __DATA.__data _netrbClientNatType
|| __DATA.__data _netrbClientNotificationKey
|| __DATA.__data _netrbClientRaPrefix
|| __DATA.__data _netrbClientRaPrefixLen
|| __DATA.__objc_data _OBJC_CLASS_$_WFANQPQueryResponse
|| __DATA.__objc_data _OBJC_CLASS_$_WFAssociationContext
|| __DATA.__objc_data _OBJC_CLASS_$_WFCaptiveContext
|| __DATA.__objc_data _OBJC_CLASS_$_WFCaptiveObserver
|| __DATA.__objc_data _OBJC_CLASS_$_WFCarPlayDisablePromptOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFCertificateContext
|| __DATA.__objc_data _OBJC_CLASS_$_WFCredentialsContext
|| __DATA.__objc_data _OBJC_CLASS_$_WFDetailsContext
|| __DATA.__objc_data _OBJC_CLASS_$_WFDiagnosticsContext
|| __DATA.__objc_data _OBJC_CLASS_$_WFDiagnosticsTableViewController
|| __DATA.__objc_data _OBJC_CLASS_$_WFEnterpriseJoinOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFEnterpriseJoinPromptOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFErrorContext
|| __DATA.__objc_data _OBJC_CLASS_$_WFErrorPromptOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFGasOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFGasQueryController
|| __DATA.__objc_data _OBJC_CLASS_$_WFGasQueryProxy
|| __DATA.__objc_data _OBJC_CLASS_$_WFGetSettingsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFHealthIssueOverrides
|| __DATA.__objc_data _OBJC_CLASS_$_WFHealthManager
|| __DATA.__objc_data _OBJC_CLASS_$_WFHealthUIEvent
|| __DATA.__objc_data _OBJC_CLASS_$_WFHotspotHelperNetwork
|| __DATA.__objc_data _OBJC_CLASS_$_WFHotspotInterface
|| __DATA.__objc_data _OBJC_CLASS_$_WFHotspotProfile
|| __DATA.__objc_data _OBJC_CLASS_$_WFHyperlinkFooterView
|| __DATA.__objc_data _OBJC_CLASS_$_WFJoinOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFJoinProxy
|| __DATA.__objc_data _OBJC_CLASS_$_WFKnownNetworkStore
|| __DATA.__objc_data _OBJC_CLASS_$_WFKnownNetworksListController
|| __DATA.__objc_data _OBJC_CLASS_$_WFMISDisablePromptOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFMetricsManager
|| __DATA.__objc_data _OBJC_CLASS_$_WFMutableNetworkProfile
|| __DATA.__objc_data _OBJC_CLASS_$_WFNetworkProfile
|| __DATA.__objc_data _OBJC_CLASS_$_WFNetworkSettingsCellFactory
|| __DATA.__objc_data _OBJC_CLASS_$_WFOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFOtherNetworkContext
|| __DATA.__objc_data _OBJC_CLASS_$_WFPasswordPromptOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFPersonalHotspotStateMonitor
|| __DATA.__objc_data _OBJC_CLASS_$_WFPickerViewProvider
|| __DATA.__objc_data _OBJC_CLASS_$_WFProxyKeychainOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFSaveLogsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFSaveSettingsOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFScanChannel
|| __DATA.__objc_data _OBJC_CLASS_$_WFScanManager
|| __DATA.__objc_data _OBJC_CLASS_$_WFScanMetricsManager
|| __DATA.__objc_data _OBJC_CLASS_$_WFScanOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFScanRequest
|| __DATA.__objc_data _OBJC_CLASS_$_WFScanSessionEvent
|| __DATA.__objc_data _OBJC_CLASS_$_WFSettingsController
|| __DATA.__objc_data _OBJC_CLASS_$_WFSettingsDNS
|| __DATA.__objc_data _OBJC_CLASS_$_WFSettingsIPV4
|| __DATA.__objc_data _OBJC_CLASS_$_WFSettingsIPV6
|| __DATA.__objc_data _OBJC_CLASS_$_WFSettingsProxy
|| __DATA.__objc_data _OBJC_CLASS_$_WFSettingsViewProvider
|| __DATA.__objc_data _OBJC_CLASS_$_WFSetupViewProvider
|| __DATA.__objc_data _OBJC_CLASS_$_WFStubInterface
|| __DATA.__objc_data _OBJC_CLASS_$_WFTrustCertificateOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFUnconfiguredJoinOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFUserConfigureEvent
|| __DATA.__objc_data _OBJC_CLASS_$_WFUserEvent
|| __DATA.__objc_data _OBJC_CLASS_$_WFUserJoinEvent
|| __DATA.__objc_data _OBJC_CLASS_$_WFUserPromptOperation
|| __DATA.__objc_data _OBJC_CLASS_$_WFUserSuppliedNetwork
|| __DATA.__objc_data _OBJC_CLASS_$_WFWAPICertificatePromptOperation
|| __DATA.__objc_data _OBJC_CLASS_$__AWDWiFiUIJoinEvent
|| __DATA.__objc_data _OBJC_CLASS_$__AWDWiFiUIScanCount
|| __DATA.__objc_data _OBJC_CLASS_$__AWDWiFiUIScanSession
|| __DATA.__objc_data _OBJC_METACLASS_$_WFANQPQueryResponse
|| __DATA.__objc_data _OBJC_METACLASS_$_WFAssociationContext
|| __DATA.__objc_data _OBJC_METACLASS_$_WFCaptiveContext
|| __DATA.__objc_data _OBJC_METACLASS_$_WFCaptiveObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_WFCarPlayDisablePromptOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFCertificateContext
|| __DATA.__objc_data _OBJC_METACLASS_$_WFCredentialsContext
|| __DATA.__objc_data _OBJC_METACLASS_$_WFDetailsContext
|| __DATA.__objc_data _OBJC_METACLASS_$_WFDiagnosticsContext
|| __DATA.__objc_data _OBJC_METACLASS_$_WFDiagnosticsTableViewController
|| __DATA.__objc_data _OBJC_METACLASS_$_WFEnterpriseJoinOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFEnterpriseJoinPromptOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFErrorContext
|| __DATA.__objc_data _OBJC_METACLASS_$_WFErrorPromptOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFGasOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFGasQueryController
|| __DATA.__objc_data _OBJC_METACLASS_$_WFGasQueryProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_WFGetSettingsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFHealthIssueOverrides
|| __DATA.__objc_data _OBJC_METACLASS_$_WFHealthManager
|| __DATA.__objc_data _OBJC_METACLASS_$_WFHealthUIEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_WFHotspotHelperNetwork
|| __DATA.__objc_data _OBJC_METACLASS_$_WFHotspotInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_WFHotspotProfile
|| __DATA.__objc_data _OBJC_METACLASS_$_WFHyperlinkFooterView
|| __DATA.__objc_data _OBJC_METACLASS_$_WFJoinOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFJoinProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_WFKnownNetworkStore
|| __DATA.__objc_data _OBJC_METACLASS_$_WFKnownNetworksListController
|| __DATA.__objc_data _OBJC_METACLASS_$_WFMISDisablePromptOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFMetricsManager
|| __DATA.__objc_data _OBJC_METACLASS_$_WFMutableNetworkProfile
|| __DATA.__objc_data _OBJC_METACLASS_$_WFNetworkProfile
|| __DATA.__objc_data _OBJC_METACLASS_$_WFNetworkSettingsCellFactory
|| __DATA.__objc_data _OBJC_METACLASS_$_WFOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFOtherNetworkContext
|| __DATA.__objc_data _OBJC_METACLASS_$_WFPasswordPromptOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFPersonalHotspotStateMonitor
|| __DATA.__objc_data _OBJC_METACLASS_$_WFPickerViewProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_WFProxyKeychainOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFSaveLogsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFSaveSettingsOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFScanChannel
|| __DATA.__objc_data _OBJC_METACLASS_$_WFScanManager
|| __DATA.__objc_data _OBJC_METACLASS_$_WFScanMetricsManager
|| __DATA.__objc_data _OBJC_METACLASS_$_WFScanOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFScanRequest
|| __DATA.__objc_data _OBJC_METACLASS_$_WFScanSessionEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_WFSettingsController
|| __DATA.__objc_data _OBJC_METACLASS_$_WFSettingsDNS
|| __DATA.__objc_data _OBJC_METACLASS_$_WFSettingsIPV4
|| __DATA.__objc_data _OBJC_METACLASS_$_WFSettingsIPV6
|| __DATA.__objc_data _OBJC_METACLASS_$_WFSettingsProxy
|| __DATA.__objc_data _OBJC_METACLASS_$_WFSettingsViewProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_WFSetupViewProvider
|| __DATA.__objc_data _OBJC_METACLASS_$_WFStubInterface
|| __DATA.__objc_data _OBJC_METACLASS_$_WFTrustCertificateOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFUnconfiguredJoinOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFUserConfigureEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_WFUserEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_WFUserJoinEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_WFUserPromptOperation
|| __DATA.__objc_data _OBJC_METACLASS_$_WFUserSuppliedNetwork
|| __DATA.__objc_data _OBJC_METACLASS_$_WFWAPICertificatePromptOperation
|| __DATA.__objc_data _OBJC_METACLASS_$__AWDWiFiUIJoinEvent
|| __DATA.__objc_data _OBJC_METACLASS_$__AWDWiFiUIScanCount
|| __DATA.__objc_data _OBJC_METACLASS_$__AWDWiFiUIScanSession
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIJoinEvent._error
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIJoinEvent._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIJoinEvent._process
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIJoinEvent._section
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIJoinEvent._sectionCounts
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIJoinEvent._securityType
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIJoinEvent._timestamp
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIScanCount._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIScanCount._max
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIScanCount._section
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIScanSession._counts
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIScanSession._duration
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIScanSession._has
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIScanSession._process
|| __DATA.__objc_ivar _OBJC_IVAR_$__AWDWiFiUIScanSession._timestamp
|| __DATA_CONST.__const _WFClientAskToJoinNotification
|| __DATA_CONST.__const _WFClientEAPTrustNotification
|| __DATA_CONST.__const _WFClientInterfaceAvailableNotification
|| __DATA_CONST.__const _WFClientJoinRecommendationNotification
|| __DATA_CONST.__const _WFClientManagedAppleIDStateChangedNotification
|| __DATA_CONST.__const _WFClientNetworkRestrictionPolicyDidChangeNotification
|| __DATA_CONST.__const _WFClientPowerModificationStateChangedNotification
|| __DATA_CONST.__const _WFClientPowerStateChangedNotification
|| __DATA_CONST.__const _WFClientPreferredNetworksDidChangeNotification
|| __DATA_CONST.__const _WFClientServerRestartedNotification
|| __DATA_CONST.__const _WFClientUserAutoJoinStateChangedNotification
|| __DATA_CONST.__const _WFClientWiFiPropertyChangedNotification
|| __DATA_CONST.__const _WFHealthManagerHealthIssuesDidChangeNotification
|| __DATA_CONST.__const _WFIPMonitorStateChangedNotification
|| __DATA_CONST.__const _WFInterfaceHostAPStateChangeNotification
|| __DATA_CONST.__const _WFInterfaceLinkQualityChangedNotification
|| __DATA_CONST.__const _WFInterfaceNetworkChangedNotification
|| __DATA_CONST.__const _WFNetworkListControllerAssociationDidFinishNotification
|| __DATA_CONST.__const _WFNetworkListControllerAssociationDidStartNotification
|| __DATA_CONST.__const _WFNetworkListControllerAssociationErrorKey
|| __DATA_CONST.__const _WFNetworkListControllerAssociationNetworkKey
|| __DATA_CONST.__const _WFNetworkListControllerScanDidFinishNotification
|| __DATA_CONST.__const _kWFAssociationCertificateChainKey
|| __DATA_CONST.__const _kWFAssociationPasswordRequiredKey
|| __DATA_CONST.__const _kWFAssociationUsernameRequiredKey
|| __DATA_CONST.__const _kWFAutoJoinCellIdentifier
|| __DATA_CONST.__const _kWFAutoLoginCellIdentifier
|| __DATA_CONST.__const _kWFClientEAPTrustNotificationRequestedDataKey
|| __DATA_CONST.__const _kWFClientLinkQualityKey
|| __DATA_CONST.__const _kWFClientNotificationIdKey
|| __DATA_CONST.__const _kWFClientNotificationNetworkKey
|| __DATA_CONST.__const _kWFClientNotificationNetworkProfileKey
|| __DATA_CONST.__const _kWFClientWiFiPropertyATJKey
|| __DATA_CONST.__const _kWFClientWiFiPropertyHotspotAJKey
|| __DATA_CONST.__const _kWFCredentialsURLPath
|| __DATA_CONST.__const _kWFDNSCellIdentifier
|| __DATA_CONST.__const _kWFEnterpriseNetworkArchivePath
|| __DATA_CONST.__const _kWFForgetCellIdentifier
|| __DATA_CONST.__const _kWFInterfaceLinkQualityKey
|| __DATA_CONST.__const _kWFInterfaceNetworkChangeReasonKey
|| __DATA_CONST.__const _kWFInterfaceNetworkKey
|| __DATA_CONST.__const _kWFInterfacePreviousNetworkKey
|| __DATA_CONST.__const _kWFJoinCellIdentifier
|| __DATA_CONST.__const _kWFJoinEnterprisePath
|| __DATA_CONST.__const _kWFManageCellIdentifier
|| __DATA_CONST.__const _kWFPriorityCellIdentifier
|| __DATA_CONST.__const _kWFRecommendationCellIdentifier
|| __DATA_CONST.__const _kWFSaveDataModeCellIdentifier
|| __DATA_CONST.__const _kWFSegmentedCellIdentifier
|| __DATA_CONST.__const _kWFTextFieldCellIdentifier
|| __DATA_CONST.__const _kWFTrustEnterpriseURLPath
|| __DATA_CONST.__const _kWiFiKitErrorDomain
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFControlCenterStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFHotspotDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFIPMonitor
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFInterface
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFLinkQuality
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFNetworkListController
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFNetworkScanRecord
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFTextFieldCell
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_WFWiFiStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFControlCenterStateMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFHotspotDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFIPMonitor
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFInterface
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFLinkQuality
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFNetworkListController
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFNetworkScanRecord
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFTextFieldCell
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_WFWiFiStateMonitor
|| __TEXT.__const _WiFiKitVersionNumber
|| __TEXT.__const _WiFiKitVersionString
|| __TEXT.__text _AWDWiFiUIJoinEventReadFrom
|| __TEXT.__text _AWDWiFiUIScanCountReadFrom
|| __TEXT.__text _AWDWiFiUIScanSessionReadFrom
|| __TEXT.__text _NETRBClientSendNotification
|| __TEXT.__text _NETRBDebugLog
|| __TEXT.__text _NETRBEndPointCleanup
|| __TEXT.__text _NETRBErrorLog
|| __TEXT.__text _NETRBInfoLog
|| __TEXT.__text _NETRBLogCreate
|| __TEXT.__text _NETRBNoticeLog
|| __TEXT.__text _NETRBXPCCleanup
|| __TEXT.__text _NETRBXPCCreate
|| __TEXT.__text _NETRBXPCEndPointCreate
|| __TEXT.__text _NETRBXPCSetupAndSend
|| __TEXT.__text _NetworkRefIsEqualToNetwork
|| __TEXT.__text _OSLogForWFLogLevel
|| __TEXT.__text _WFANQPElementsFromBitMask
|| __TEXT.__text _WFAllIdentities
|| __TEXT.__text _WFAssociationErrorCodeToString
|| __TEXT.__text _WFBase64Encode
|| __TEXT.__text _WFCaptiveEventToString
|| __TEXT.__text _WFCopyProcessIdentifier
|| __TEXT.__text _WFCreateSecTrustFromCertificateChain
|| __TEXT.__text _WFCurrentLogLevel
|| __TEXT.__text _WFGetCarNameFromCarPlayNetworkUUID
|| __TEXT.__text _WFIsValidIPv4Address
|| __TEXT.__text _WFIsValidIPv6Address
|| __TEXT.__text _WFLogForCategory
|| __TEXT.__text _WFOpenSettingsURLWithType
|| __TEXT.__text _WFSSIDIsValid
|| __TEXT.__text _WFScaleRSSI
|| __TEXT.__text _WFScanRecordArchiveToEnterprisePath
|| __TEXT.__text _WFSecurityModeFromScanDictionary
|| __TEXT.__text _WFSecurityModeIsEnterprise
|| __TEXT.__text _WFSecurityModeIsEquivalentEAPEncryption
|| __TEXT.__text _WFSecurityModeIsEquivalentWPA
|| __TEXT.__text _WFSecurityModeIsWPAEnterprise
|| __TEXT.__text _WFSecurityModeIsWPAPersonal
|| __TEXT.__text _WFSecurityModeRequiresPasswordOnly
|| __TEXT.__text _WFSetExtraLoggingEnabled
|| __TEXT.__text _WFSettingsURLPathForType
|| __TEXT.__text _WFSplitChannelsBetweenBands
|| __TEXT.__text _WFStringFromWFSecurityMode
|| __TEXT.__text _WFUserNameFromEnterpriseProfile
|| __TEXT.__text _WFValidPasswordForSecurityMode
|| __TEXT.__text _WFWAPICertificateBlobString
|| __TEXT.__text _WFWAPIIdentityListCreate
|| __TEXT.__text _WFWAPIRootCertificateListCreate
|| __TEXT.__text _WFWiFiNetworkRefIsEnterprise
|| __TEXT.__text _WFWiFiSecurityModeFromOtherSecurityMode
|| __TEXT.__text _WFWiFiStateMonitorStringForState
|| __TEXT.__text _WiFiManagerGasQueryCallback
|| __TEXT.__text __MISAddHost
|| __TEXT.__text __MISAttach
|| __TEXT.__text __MISDetach
|| __TEXT.__text __MISGetDynamicStoreKey
|| __TEXT.__text __MISGetExt
|| __TEXT.__text __MISGetFixtureForwardedPorts
|| __TEXT.__text __MISGetGlobalServiceState
|| __TEXT.__text __MISGetHostCount
|| __TEXT.__text __MISIsAllowedMoreHost
|| __TEXT.__text __MISIsServiceAvailable
|| __TEXT.__text __MISRemoveHost
|| __TEXT.__text __MISSetFixtureForwardedPorts
|| __TEXT.__text __MISSetGlobalServiceState
|| __TEXT.__text __MISSetHostCount
|| __TEXT.__text __MISStartServiceDHCP
|| __TEXT.__text __MISStartServiceDHCPCustom
|| __TEXT.__text __MISStartServiceDHCPLocal
|| __TEXT.__text __MISStartServiceDHCPWithOptions
|| __TEXT.__text __MISStopService
|| __TEXT.__text __NETRBClientAddHost
|| __TEXT.__text __NETRBClientCopyFixtureForwardedPorts
|| __TEXT.__text __NETRBClientCreate
|| __TEXT.__text __NETRBClientDestroy
|| __TEXT.__text __NETRBClientGetDynamicStoreKey
|| __TEXT.__text __NETRBClientGetExtName
|| __TEXT.__text __NETRBClientGetGlobalServiceState
|| __TEXT.__text __NETRBClientGetHostCount
|| __TEXT.__text __NETRBClientIsAllowedMoreHost
|| __TEXT.__text __NETRBClientRemoveHost
|| __TEXT.__text __NETRBClientSetFixtureForwardedPorts
|| __TEXT.__text __NETRBClientSetGlobalServiceState
|| __TEXT.__text __NETRBClientSetHostCount
|| __TEXT.__text __NETRBClientStartService
|| __TEXT.__text __NETRBClientStopService
|| __TEXT.__text __WFOpenSettingsPathWithPathType
|| __TEXT.__text __WFScanningStateToString
|| __TEXT.__text ___WFAssociationOriginatorToString
|| __TEXT.__text ___WFAssociationStateToString
__ AVFoundation: _OBJC_CLASS_$_AVExternalDevice
__ AirPortAssistant: _OBJC_CLASS_$_AirPortAssistantController
__ AirPortAssistant: _kAirPortAssistantCurrentWiFiScanKey
__ AirPortAssistant: _kAirPortAssistantScanRecordKey
__ CFNetwork: _NSURLAuthenticationMethodDefault
__ CFNetwork: _NSURLProtectionSpaceHTTPProxy
__ CFNetwork: _NSURLProtectionSpaceHTTPSProxy
__ CFNetwork: _OBJC_CLASS_$_NSURLCredential
__ CFNetwork: _OBJC_CLASS_$_NSURLCredentialStorage
__ CFNetwork: _OBJC_CLASS_$_NSURLProtectionSpace
__ CaptiveNetwork: _CNNetworkCopyPluginNames
__ CaptiveNetwork: _CNNetworkGetPassword
__ CaptiveNetwork: _CNNetworkGetPluginBundleID
__ CaptiveNetwork: _CNNetworkGetSSIDString
__ CaptiveNetwork: _CNScanListFilterStart
__ CaptiveNetwork: _CNScanListFilterStop
__ CaptiveNetwork: _kCNSCaptiveBypassProperty
__ CaptiveNetwork: _kCNSCaptiveNetworkProperty
__ CarKit: _OBJC_CLASS_$_CRPairedVehicleManager
__ CertInfo: _OBJC_CLASS_$_TrustCertificateViewController
__ CoreFoundation: _CFArrayAppendValue
__ CoreFoundation: _CFArrayCreateMutable
__ CoreFoundation: _CFArrayCreateMutableCopy
__ CoreFoundation: _CFArrayGetCount
__ CoreFoundation: _CFArrayGetFirstIndexOfValue
__ CoreFoundation: _CFArrayGetTypeID
__ CoreFoundation: _CFArrayGetValueAtIndex
__ CoreFoundation: _CFArrayRemoveValueAtIndex
__ CoreFoundation: _CFArraySetValueAtIndex
__ CoreFoundation: _CFBooleanGetTypeID
__ CoreFoundation: _CFBooleanGetValue
__ CoreFoundation: _CFBundleGetIdentifier
__ CoreFoundation: _CFBundleGetMainBundle
__ CoreFoundation: _CFDictionaryCreate
__ CoreFoundation: _CFDictionaryGetValue
__ CoreFoundation: _CFEqual
__ CoreFoundation: _CFGetTypeID
__ CoreFoundation: _CFNumberCreate
__ CoreFoundation: _CFPreferencesAppValueIsForced
__ CoreFoundation: _CFPreferencesCopyAppValue
__ CoreFoundation: _CFPreferencesGetAppBooleanValue
__ CoreFoundation: _CFPropertyListCreateWithData
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopAddSource
__ CoreFoundation: _CFRunLoopGetMain
__ CoreFoundation: _CFStringCreateWithFormat
__ CoreFoundation: _CFStringGetCString
__ CoreFoundation: _CFUserNotificationCreate
__ CoreFoundation: _CFUserNotificationCreateRunLoopSource
__ CoreFoundation: _CFUserNotificationGetResponseDictionary
__ CoreFoundation: _NSInternalInconsistencyException
__ CoreFoundation: _NSRunLoopCommonModes
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableSet
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_CLASS_$_NSSet
__ CoreFoundation: _OBJC_CLASS_$_NSTimer
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: __CFRuntimeCreateInstance
__ CoreFoundation: __CFRuntimeRegisterClass
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSDictionary0__
__ CoreFoundation: _kCFAllocatorDefault
__ CoreFoundation: _kCFBooleanFalse
__ CoreFoundation: _kCFBooleanTrue
__ CoreFoundation: _kCFRunLoopCommonModes
__ CoreFoundation: _kCFRunLoopDefaultMode
__ CoreFoundation: _kCFTypeArrayCallBacks
__ CoreFoundation: _kCFTypeDictionaryKeyCallBacks
__ CoreFoundation: _kCFTypeDictionaryValueCallBacks
__ CoreFoundation: _kCFUserNotificationAlertHeaderKey
__ CoreFoundation: _kCFUserNotificationAlertMessageKey
__ CoreFoundation: _kCFUserNotificationAlternateButtonTitleKey
__ CoreFoundation: _kCFUserNotificationDefaultButtonTitleKey
__ CoreFoundation: _kCFUserNotificationTextFieldTitlesKey
__ CoreFoundation: _kCFUserNotificationTextFieldValuesKey
__ CoreGraphics: _CGRectZero
__ CoreGraphics: _CGSizeZero
__ CoreServices: _OBJC_CLASS_$_LSApplicationWorkspace
__ EAP8021X: _EAPSecIdentityHandleCreate
__ EAP8021X: _EAPSecIdentityHandleCreateSecIdentity
__ Foundation: _NSClassFromString
__ Foundation: _NSDebugDescriptionErrorKey
__ Foundation: _NSKeyValueChangeNewKey
__ Foundation: _NSKeyValueChangeOldKey
__ Foundation: _NSLocalizedDescriptionKey
__ Foundation: _NSLocalizedRecoveryOptionsErrorKey
__ Foundation: _NSLocalizedRecoverySuggestionErrorKey
__ Foundation: _NSLog
__ Foundation: _NSProtocolFromString
__ Foundation: _NSStringFromClass
__ Foundation: _NSUnderlyingErrorKey
__ Foundation: _OBJC_CLASS_$_NSBlockOperation
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSCountedSet
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSMachPort
__ Foundation: _OBJC_CLASS_$_NSMapTable
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotification
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSOperation
__ Foundation: _OBJC_CLASS_$_NSOperationQueue
__ Foundation: _OBJC_CLASS_$_NSPredicate
__ Foundation: _OBJC_CLASS_$_NSPropertyListSerialization
__ Foundation: _OBJC_CLASS_$_NSSortDescriptor
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_METACLASS_$_NSOperation
__ ManagedConfiguration: _MCEffectiveSettingsChangedNotification
__ MobileWiFi: _WiFiDeviceClientAssociateAsync
__ MobileWiFi: _WiFiDeviceClientCopyCurrentNetwork
__ MobileWiFi: _WiFiDeviceClientCopyProperty
__ MobileWiFi: _WiFiDeviceClientDisassociate
__ MobileWiFi: _WiFiDeviceClientGasStartAsync
__ MobileWiFi: _WiFiDeviceClientGetInterfaceName
__ MobileWiFi: _WiFiDeviceClientNotifySoftError
__ MobileWiFi: _WiFiDeviceClientRegisterDiagnosticsCallback
__ MobileWiFi: _WiFiDeviceClientRegisterExtendedLinkCallback
__ MobileWiFi: _WiFiDeviceClientRegisterHostApStateChangedCallback
__ MobileWiFi: _WiFiDeviceClientRegisterLQMCallback
__ MobileWiFi: _WiFiDeviceClientRegisterPowerCallback
__ MobileWiFi: _WiFiDeviceClientScanAsync
__ MobileWiFi: _WiFiManagerClientAddNetwork
__ MobileWiFi: _WiFiManagerClientCopyDevices
__ MobileWiFi: _WiFiManagerClientCopyGeoTagsForNetwork
__ MobileWiFi: _WiFiManagerClientCopyNetworks
__ MobileWiFi: _WiFiManagerClientCopyProperty
__ MobileWiFi: _WiFiManagerClientCopyScoreForNetwork
__ MobileWiFi: _WiFiManagerClientCreate
__ MobileWiFi: _WiFiManagerClientDisable
__ MobileWiFi: _WiFiManagerClientDisableNetwork
__ MobileWiFi: _WiFiManagerClientDisableUserAutoJoin
__ MobileWiFi: _WiFiManagerClientDispatchNotificationResponse
__ MobileWiFi: _WiFiManagerClientEnable
__ MobileWiFi: _WiFiManagerClientEnableNetwork
__ MobileWiFi: _WiFiManagerClientEnableUserAutoJoin
__ MobileWiFi: _WiFiManagerClientGetAutoInstantHotspotMode
__ MobileWiFi: _WiFiManagerClientGetMISDiscoveryState
__ MobileWiFi: _WiFiManagerClientGetMISState
__ MobileWiFi: _WiFiManagerClientGetPower
__ MobileWiFi: _WiFiManagerClientGetUserAutoJoinState
__ MobileWiFi: _WiFiManagerClientIsInfraAllowed
__ MobileWiFi: _WiFiManagerClientIsManagedAppleID
__ MobileWiFi: _WiFiManagerClientIsMfpCapableDevice
__ MobileWiFi: _WiFiManagerClientIsPowerModificationDisabled
__ MobileWiFi: _WiFiManagerClientIsRestrictionPolicyActive
__ MobileWiFi: _WiFiManagerClientIsWPA3EnterpriseSupported
__ MobileWiFi: _WiFiManagerClientIsWPA3PersonalSupported
__ MobileWiFi: _WiFiManagerClientRegisterDeviceAttachmentCallback
__ MobileWiFi: _WiFiManagerClientRegisterManagedAppleIDStateChangedCallback
__ MobileWiFi: _WiFiManagerClientRegisterNotificationCallback
__ MobileWiFi: _WiFiManagerClientRegisterPreferredNetworksChangedCallback
__ MobileWiFi: _WiFiManagerClientRegisterServerRestartCallback
__ MobileWiFi: _WiFiManagerClientRegisterUserAutoJoinStateChangedCallback
__ MobileWiFi: _WiFiManagerClientRemoveNetwork
__ MobileWiFi: _WiFiManagerClientScheduleWithRunLoop
__ MobileWiFi: _WiFiManagerClientSetAutoInstantHotspotMode
__ MobileWiFi: _WiFiManagerClientSetMISDiscoveryState
__ MobileWiFi: _WiFiManagerClientSetMISState
__ MobileWiFi: _WiFiManagerClientSetPower
__ MobileWiFi: _WiFiManagerClientSetProperty
__ MobileWiFi: _WiFiManagerClientSetType
__ MobileWiFi: _WiFiManagerClientUnscheduleFromRunLoop
__ MobileWiFi: _WiFiManagerClientUpdateNetwork
__ MobileWiFi: _WiFiNetworkArchiveToPath
__ MobileWiFi: _WiFiNetworkCanExposeIMSI
__ MobileWiFi: _WiFiNetworkCopyPassword
__ MobileWiFi: _WiFiNetworkCopyRecord
__ MobileWiFi: _WiFiNetworkCreate
__ MobileWiFi: _WiFiNetworkCreateCopy
__ MobileWiFi: _WiFiNetworkDisableAutoJoinUntilFirstUserJoin
__ MobileWiFi: _WiFiNetworkGetAPEnv
__ MobileWiFi: _WiFiNetworkGetAssociationDate
__ MobileWiFi: _WiFiNetworkGetBundleIdentifier
__ MobileWiFi: _WiFiNetworkGetChannel
__ MobileWiFi: _WiFiNetworkGetChannelWidthInMHz
__ MobileWiFi: _WiFiNetworkGetDirectedState
__ MobileWiFi: _WiFiNetworkGetGasResponse
__ MobileWiFi: _WiFiNetworkGetHS2NetworkBadge
__ MobileWiFi: _WiFiNetworkGetIntProperty
__ MobileWiFi: _WiFiNetworkGetPhyMode
__ MobileWiFi: _WiFiNetworkGetProperty
__ MobileWiFi: _WiFiNetworkGetRSSI
__ MobileWiFi: _WiFiNetworkGetSSID
__ MobileWiFi: _WiFiNetworkGetType
__ MobileWiFi: _WiFiNetworkIsAdHoc
__ MobileWiFi: _WiFiNetworkIsApplePersonalHotspot
__ MobileWiFi: _WiFiNetworkIsAutoJoinDisabledUntilFirstUserJoin
__ MobileWiFi: _WiFiNetworkIsCarPlay
__ MobileWiFi: _WiFiNetworkIsCarrierBundleBased
__ MobileWiFi: _WiFiNetworkIsEnabled
__ MobileWiFi: _WiFiNetworkIsHotspot20
__ MobileWiFi: _WiFiNetworkIsInSaveDataMode
__ MobileWiFi: _WiFiNetworkIsProvisionedHS20Network
__ MobileWiFi: _WiFiNetworkIsSSIDAmbiguous
__ MobileWiFi: _WiFiNetworkIsWAPICERT
__ MobileWiFi: _WiFiNetworkIsWAPIPSK
__ MobileWiFi: _WiFiNetworkMerge
__ MobileWiFi: _WiFiNetworkMergeForAssociation
__ MobileWiFi: _WiFiNetworkRemovePassword
__ MobileWiFi: _WiFiNetworkRequiresOneTimePassword
__ MobileWiFi: _WiFiNetworkRequiresPassword
__ MobileWiFi: _WiFiNetworkRequiresUsername
__ MobileWiFi: _WiFiNetworkSetAssociationDate
__ MobileWiFi: _WiFiNetworkSetPassword
__ MobileWiFi: _WiFiNetworkSetProperty
__ MobileWiFi: _kWiFiATJPreferenceKey
__ MobileWiFi: _kWiFiDeviceScanRequestClientName
__ MobileWiFi: _kWiFiDeviceScanRequestReceiptTimestamp
__ MobileWiFi: _kWiFiDiagnosticsKeyAWDL
__ MobileWiFi: _kWiFiDiagnosticsKeyBluetooth
__ MobileWiFi: _kWiFiDiagnosticsKeyLQM
__ MobileWiFi: _kWiFiDiagnosticsKeyMotion
__ MobileWiFi: _kWiFiDiagnosticsKeyProbeGateway
__ MobileWiFi: _kWiFiDiagnosticsKeyProbeInternet
__ MobileWiFi: _kWiFiDiagnosticsKeyScan
__ MobileWiFi: _kWiFiDiagnosticsKeyScanDone
__ MobileWiFi: _kWiFiHasNoGatewayIPKey
__ MobileWiFi: _kWiFiIPStateKey
__ MobileWiFi: _kWiFiInstantHotspotJoining
__ MobileWiFi: _kWiFiJoiningFromUI
__ MobileWiFi: _kWiFiLoggingSettingsEnabledKey
__ MobileWiFi: _kWiFiNetworkAttributeIsKnown
__ MobileWiFi: _kWiFiNetworkAttributeIsPublic
__ MobileWiFi: _kWiFiNetworkAttributePopularityScore
__ MobileWiFi: _kWiFiNetworkBundleIdentifierKey
__ MobileWiFi: _kWiFiNetworkChangeEventAddKey
__ MobileWiFi: _kWiFiNetworkChangeEventModifyKey
__ MobileWiFi: _kWiFiNetworkChangeEventRemoveKey
__ MobileWiFi: _kWiFiNetworkDisabledUntilDateKey
__ MobileWiFi: _kWiFiNetworkEnterpriseProfile
__ MobileWiFi: _kWiFiNetworkPayloadUUIDKey
__ MobileWiFi: _kWiFiNetworkSaveDataModeKey
__ MobileWiFi: _kWiFiPreferenceCustomNetworksSettingsKey
__ MobileWiFi: _kWiFiSBPickerDontAskShownKey
__ MobileWiFi: _kWiFiShowKnownNetworksUI
__ MobileWiFi: _kWiFiShowUnprovisionedHS20Networks
__ MobileWiFi: _kWiFiWhitelistingUUIDKey
__ Network: _OBJC_CLASS_$_NWInterface
__ Network: _OBJC_CLASS_$_NWParameters
__ Network: _OBJC_CLASS_$_NWPathEvaluator
__ ProtocolBuffer: _OBJC_CLASS_$_PBCodable
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._bytes
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._error
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._length
__ ProtocolBuffer: _OBJC_IVAR_$_PBDataReader._pos
__ ProtocolBuffer: _OBJC_METACLASS_$_PBCodable
__ ProtocolBuffer: _PBDataWriterWriteStringField
__ ProtocolBuffer: _PBDataWriterWriteSubmessage
__ ProtocolBuffer: _PBDataWriterWriteUint32Field
__ ProtocolBuffer: _PBDataWriterWriteUint64Field
__ ProtocolBuffer: _PBReaderPlaceMark
__ ProtocolBuffer: _PBReaderReadString
__ ProtocolBuffer: _PBReaderRecallMark
__ ProtocolBuffer: _PBReaderSkipValueWithTag
__ Security: _SecCertificateCopyData
__ Security: _SecCertificateCreateWithData
__ Security: _SecCertificateGetTypeID
__ Security: _SecIdentityCopyCertificate
__ Security: _SecIdentityGetTypeID
__ Security: _SecItemCopyMatching
__ Security: _SecTrustCreateWithCertificates
__ Security: _kSecAttrAccessGroup
__ Security: _kSecAttrService
__ Security: _kSecClass
__ Security: _kSecClassCertificate
__ Security: _kSecClassGenericPassword
__ Security: _kSecClassIdentity
__ Security: _kSecMatchLimit
__ Security: _kSecMatchLimitAll
__ Security: _kSecReturnData
__ Security: _kSecReturnRef
__ Security: _kSecUseSystemKeychain
__ SettingsCellularUI: _OBJC_CLASS_$_CTUIWirelessUsageAndAppPolicyController
__ Sharing: _OBJC_CLASS_$_SFPasswordSharingService
__ Sharing: _OBJC_CLASS_$_SFRemoteHotspotDevice
__ Sharing: _OBJC_CLASS_$_SFRemoteHotspotSession
__ SystemConfiguration: _DHCPInfoGetLeaseExpirationTime
__ SystemConfiguration: _SCDynamicStoreCopyDHCPInfo
__ SystemConfiguration: _SCDynamicStoreCopyValue
__ SystemConfiguration: _SCDynamicStoreCreate
__ SystemConfiguration: _SCDynamicStoreKeyCreate
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkInterfaceEntity
__ SystemConfiguration: _SCDynamicStoreKeyCreateNetworkServiceEntity
__ SystemConfiguration: _SCDynamicStoreSetDispatchQueue
__ SystemConfiguration: _SCDynamicStoreSetNotificationKeys
__ SystemConfiguration: _SCError
__ SystemConfiguration: _SCErrorString
__ SystemConfiguration: _SCNetworkInterfaceForceConfigurationRefresh
__ SystemConfiguration: _SCNetworkInterfaceGetBSDName
__ SystemConfiguration: _SCNetworkInterfaceGetInterface
__ SystemConfiguration: _SCNetworkInterfaceGetInterfaceType
__ SystemConfiguration: _SCNetworkProtocolGetConfiguration
__ SystemConfiguration: _SCNetworkProtocolSetConfiguration
__ SystemConfiguration: _SCNetworkServiceCopyProtocol
__ SystemConfiguration: _SCNetworkServiceCreate
__ SystemConfiguration: _SCNetworkServiceEstablishDefaultConfiguration
__ SystemConfiguration: _SCNetworkServiceGetEnabled
__ SystemConfiguration: _SCNetworkServiceGetInterface
__ SystemConfiguration: _SCNetworkServiceGetServiceID
__ SystemConfiguration: _SCNetworkServiceRemove
__ SystemConfiguration: _SCNetworkSetAddService
__ SystemConfiguration: _SCNetworkSetCopyAll
__ SystemConfiguration: _SCNetworkSetCopyCurrent
__ SystemConfiguration: _SCNetworkSetCopyServices
__ SystemConfiguration: _SCNetworkSetCreate
__ SystemConfiguration: _SCNetworkSetGetName
__ SystemConfiguration: _SCNetworkSetGetServiceOrder
__ SystemConfiguration: _SCNetworkSetGetSetID
__ SystemConfiguration: _SCNetworkSetRemove
__ SystemConfiguration: _SCNetworkSetSetCurrent
__ SystemConfiguration: _SCNetworkSetSetName
__ SystemConfiguration: _SCNetworkSetSetServiceOrder
__ SystemConfiguration: _SCPreferencesApplyChanges
__ SystemConfiguration: _SCPreferencesCommitChanges
__ SystemConfiguration: _SCPreferencesCreate
__ SystemConfiguration: _SCPreferencesCreateWithAuthorization
__ SystemConfiguration: _SCPreferencesGetValue
__ SystemConfiguration: _SCPreferencesLock
__ SystemConfiguration: _SCPreferencesSynchronize
__ SystemConfiguration: _SCPreferencesUnlock
__ SystemConfiguration: _kSCCompAnyRegex
__ SystemConfiguration: _kSCDynamicStoreDomainSetup
__ SystemConfiguration: _kSCDynamicStoreDomainState
__ SystemConfiguration: _kSCEntNetDHCP
__ SystemConfiguration: _kSCEntNetDNS
__ SystemConfiguration: _kSCEntNetIPv4
__ SystemConfiguration: _kSCEntNetIPv6
__ SystemConfiguration: _kSCEntNetProxies
__ SystemConfiguration: _kSCNetworkInterfaceTypeIEEE80211
__ SystemConfiguration: _kSCPropNetDNSDomainName
__ SystemConfiguration: _kSCPropNetDNSSearchDomains
__ SystemConfiguration: _kSCPropNetDNSServerAddresses
__ SystemConfiguration: _kSCPropNetIPv4Addresses
__ SystemConfiguration: _kSCPropNetIPv4ConfigMethod
__ SystemConfiguration: _kSCPropNetIPv4DHCPClientID
__ SystemConfiguration: _kSCPropNetIPv4Router
__ SystemConfiguration: _kSCPropNetIPv4SubnetMasks
__ SystemConfiguration: _kSCPropNetIPv6Addresses
__ SystemConfiguration: _kSCPropNetIPv6ConfigMethod
__ SystemConfiguration: _kSCPropNetIPv6PrefixLength
__ SystemConfiguration: _kSCPropNetIPv6Router
__ SystemConfiguration: _kSCPropNetProxiesExceptionsList
__ SystemConfiguration: _kSCPropNetProxiesFTPPassive
__ SystemConfiguration: _kSCPropNetProxiesHTTPEnable
__ SystemConfiguration: _kSCPropNetProxiesHTTPPort
__ SystemConfiguration: _kSCPropNetProxiesHTTPProxy
__ SystemConfiguration: _kSCPropNetProxiesHTTPSEnable
__ SystemConfiguration: _kSCPropNetProxiesHTTPSPort
__ SystemConfiguration: _kSCPropNetProxiesHTTPSProxy
__ SystemConfiguration: _kSCPropNetProxiesProxyAutoConfigEnable
__ SystemConfiguration: _kSCPropNetProxiesProxyAutoConfigURLString
__ SystemConfiguration: _kSCPropNetProxiesProxyAutoDiscoveryEnable
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodAutomatic
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodBOOTP
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodDHCP
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodINFORM
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodLinkLocal
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodManual
__ SystemConfiguration: _kSCValNetIPv4ConfigMethodPPP
__ SystemConfiguration: _kSCValNetIPv6ConfigMethod6to4
__ SystemConfiguration: _kSCValNetIPv6ConfigMethodAutomatic
__ SystemConfiguration: _kSCValNetIPv6ConfigMethodLinkLocal
__ SystemConfiguration: _kSCValNetIPv6ConfigMethodManual
__ SystemConfiguration: _kSCValNetIPv6ConfigMethodRouterAdvertisement
__ UIKit: _NSFontAttributeName
__ UIKit: _NSForegroundColorAttributeName
__ UIKit: _NSLinkAttributeName
__ UIKit: _NSUnderlineStyleAttributeName
__ UIKit: _OBJC_CLASS_$_UIAlertAction
__ UIKit: _OBJC_CLASS_$_UIAlertController
__ UIKit: _OBJC_CLASS_$_UIApplication
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIDevice
__ UIKit: _OBJC_CLASS_$_UIFont
__ UIKit: _OBJC_CLASS_$_UINavigationController
__ UIKit: _OBJC_CLASS_$_UINib
__ UIKit: _OBJC_CLASS_$_UIPasteboard
__ UIKit: _OBJC_CLASS_$_UITableViewCell
__ UIKit: _OBJC_CLASS_$_UITableViewController
__ UIKit: _OBJC_CLASS_$_UITextView
__ UIKit: _OBJC_CLASS_$_UIView
__ UIKit: _OBJC_METACLASS_$_UITableViewCell
__ UIKit: _OBJC_METACLASS_$_UITableViewController
__ UIKit: _OBJC_METACLASS_$_UIView
__ UIKit: _UIApplicationDidBecomeActiveNotification
__ UIKit: _UIApplicationDidEnterBackgroundNotification
__ UIKit: _UIApplicationWillEnterForegroundNotification
__ UIKit: _UIApplicationWillResignActiveNotification
__ UIKit: _UIFontTextStyleFootnote
__ UIKit: _UITextContentTypePassword
__ UIKit: _UITextContentTypeUsername
__ WiFiCloudSyncEngine: _WiFiCloudSyncEngineIsRunning
__ WiFiKitUI: _OBJC_CLASS_$_WFAirportViewController
__ WiFiKitUI: _OBJC_CLASS_$_WFBuddyViewController
__ WiFiKitUI: _OBJC_CLASS_$_WFCarPlayAlertController
__ WiFiKitUI: _OBJC_CLASS_$_WFDiagnosticsViewController
__ WiFiKitUI: _OBJC_CLASS_$_WFErrorAlertController
__ WiFiKitUI: _OBJC_CLASS_$_WFHealthIssue
__ WiFiKitUI: _OBJC_CLASS_$_WFHotspotAlertController
__ WiFiKitUI: _OBJC_CLASS_$_WFKnownNetworksViewController
__ WiFiKitUI: _OBJC_CLASS_$_WFNetworkSettingsConfig
__ WiFiKitUI: _OBJC_CLASS_$_WFNetworkSettingsViewController
__ WiFiKitUI: _OBJC_CLASS_$_WFOtherNetworkViewController
__ WiFiKitUI: _OBJC_CLASS_$_WFTrustCertificateViewController
__ WiFiKitUI: _OBJC_CLASS_$_WFWebSheetViewController
__ WiFiKitUI: _WFCapabilityIsChinaDevice
__ WiFiKitUI: _WFCurrentDeviceCapability
__ WiFiKitUI: _WFHasWAPICapability
__ WiFiKitUI: _WFSignalBarsFromScaledRSSI
__ WiFiKitUI: _kWFDNSChangesKey
__ WiFiKitUI: _kWFIPv4ChangesKey
__ WiFiKitUI: _kWFIPv6ChangesKey
__ WiFiKitUI: _kWFProxyChangesKey
__ WirelessDiagnostics: _OBJC_CLASS_$_AWDServerConnection
__ libMobileGestalt.dylib: _MGGetBoolAnswer
__ libSystem.B.dylib: _CCHmac
__ libSystem.B.dylib: __Block_copy
__ libSystem.B.dylib: __Block_object_assign
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __Block_release
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___error
__ libSystem.B.dylib: ___snprintf_chk
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __dispatch_queue_attr_concurrent
__ libSystem.B.dylib: __os_log_default
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: __xpc_error_connection_invalid
__ libSystem.B.dylib: __xpc_error_key_description
__ libSystem.B.dylib: __xpc_error_termination_imminent
__ libSystem.B.dylib: __xpc_type_connection
__ libSystem.B.dylib: __xpc_type_dictionary
__ libSystem.B.dylib: __xpc_type_error
__ libSystem.B.dylib: __xpc_type_string
__ libSystem.B.dylib: __xpc_type_uint64
__ libSystem.B.dylib: _bzero
__ libSystem.B.dylib: _dispatch_after
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_barrier_async
__ libSystem.B.dylib: _dispatch_block_cancel
__ libSystem.B.dylib: _dispatch_block_create
__ libSystem.B.dylib: _dispatch_get_context
__ libSystem.B.dylib: _dispatch_get_global_queue
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_release
__ libSystem.B.dylib: _dispatch_retain
__ libSystem.B.dylib: _dispatch_semaphore_create
__ libSystem.B.dylib: _dispatch_semaphore_signal
__ libSystem.B.dylib: _dispatch_semaphore_wait
__ libSystem.B.dylib: _dispatch_set_context
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dispatch_time
__ libSystem.B.dylib: _dlopen
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _getpid
__ libSystem.B.dylib: _getprogname
__ libSystem.B.dylib: _if_nametoindex
__ libSystem.B.dylib: _inet_pton
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _notify_cancel
__ libSystem.B.dylib: _notify_register_dispatch
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libSystem.B.dylib: _os_log_with_args
__ libSystem.B.dylib: _strerror
__ libSystem.B.dylib: _strlen
__ libSystem.B.dylib: _strncmp
__ libSystem.B.dylib: _xpc_connection_cancel
__ libSystem.B.dylib: _xpc_connection_create
__ libSystem.B.dylib: _xpc_connection_create_mach_service
__ libSystem.B.dylib: _xpc_connection_resume
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply
__ libSystem.B.dylib: _xpc_connection_send_message_with_reply_sync
__ libSystem.B.dylib: _xpc_connection_set_event_handler
__ libSystem.B.dylib: _xpc_connection_set_target_queue
__ libSystem.B.dylib: _xpc_copy_description
__ libSystem.B.dylib: _xpc_dictionary_create
__ libSystem.B.dylib: _xpc_dictionary_get_string
__ libSystem.B.dylib: _xpc_dictionary_get_uint64
__ libSystem.B.dylib: _xpc_dictionary_get_value
__ libSystem.B.dylib: _xpc_dictionary_set_connection
__ libSystem.B.dylib: _xpc_dictionary_set_string
__ libSystem.B.dylib: _xpc_dictionary_set_uint64
__ libSystem.B.dylib: _xpc_dictionary_set_value
__ libSystem.B.dylib: _xpc_get_type
__ libSystem.B.dylib: _xpc_release
__ libSystem.B.dylib: _xpc_retain
__ libSystem.B.dylib: _xpc_string_get_string_ptr
__ libSystem.B.dylib: _xpc_uint64_get_value
__ libSystem.B.dylib: dyld_stub_binder
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_autorelease
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_exception_throw
__ libobjc.A.dylib: _objc_getClass
__ libobjc.A.dylib: _objc_getProperty
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_moveWeak
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setProperty_atomic
__ libobjc.A.dylib: _objc_setProperty_atomic_copy
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
WFTextFieldCell : UITableViewCell /usr/lib/libMobileGestalt.dylib <UITextFieldDelegate>
 @property  NSLayoutConstraint *trailingMarginConstraint
 @property  NSLayoutConstraint *labelWidthConstraint
 @property  UIStackView *stackView
 @property  NSLayoutConstraint *stackViewTopConstraint
 @property  NSLayoutConstraint *stackViewBottomConstraint
 @property  NSLayoutConstraint *stackViewLeadingConstraint
 @property  UILabel *label
 @property  UITextField *textField
 @property  @? textChangeHandler
 @property  @? returnKeyHandler
 @property  BOOL editable
 @property  BOOL hideLabel
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFTextFieldCell dealloc]
  -[WFTextFieldCell .cxx_destruct]
  -[WFTextFieldCell prepareForReuse]
  -[WFTextFieldCell setLabel:]
  -[WFTextFieldCell label]
  -[WFTextFieldCell traitCollectionDidChange:]
  -[WFTextFieldCell textField]
  -[WFTextFieldCell becomeFirstResponder]
  -[WFTextFieldCell stackView]
  -[WFTextFieldCell canPerformAction:withSender:]
  -[WFTextFieldCell canBecomeFirstResponder]
  -[WFTextFieldCell copy:]
  -[WFTextFieldCell setEditable:]
  -[WFTextFieldCell setAccessoryType:]
  -[WFTextFieldCell awakeFromNib]
  -[WFTextFieldCell setSelected:animated:]
  -[WFTextFieldCell setEditing:animated:]
  -[WFTextFieldCell setStackView:]
  -[WFTextFieldCell textFieldShouldBeginEditing:]
  -[WFTextFieldCell editable]
  -[WFTextFieldCell setStackViewTopConstraint:]
  -[WFTextFieldCell setStackViewBottomConstraint:]
  -[WFTextFieldCell setStackViewLeadingConstraint:]
  -[WFTextFieldCell stackViewTopConstraint]
  -[WFTextFieldCell stackViewBottomConstraint]
  -[WFTextFieldCell stackViewLeadingConstraint]
  -[WFTextFieldCell setTextField:]
  -[WFTextFieldCell textFieldDidChange:]
  -[WFTextFieldCell _verticalPadding]
  -[WFTextFieldCell textFieldDidEndEditingExit:]
  -[WFTextFieldCell _adjustStackViewPadding]
  -[WFTextFieldCell _updateStackViewForTraitCollection]
  -[WFTextFieldCell labelWidthConstraint]
  -[WFTextFieldCell textChangeHandler]
  -[WFTextFieldCell returnKeyHandler]
  -[WFTextFieldCell trailingMarginConstraint]
  -[WFTextFieldCell setHideLabel:]
  -[WFTextFieldCell setTextChangeHandler:]
  -[WFTextFieldCell setReturnKeyHandler:]
  -[WFTextFieldCell hideLabel]
  -[WFTextFieldCell setTrailingMarginConstraint:]
  -[WFTextFieldCell setLabelWidthConstraint:]


WFNetworkSettingsCellFactory : NSObject /usr/lib/libSystem.B.dylib
 @property  UITableView *tableView

  // instance methods
  -[WFNetworkSettingsCellFactory .cxx_destruct]
  -[WFNetworkSettingsCellFactory tableView]
  -[WFNetworkSettingsCellFactory initWithTableView:]
  -[WFNetworkSettingsCellFactory setTableView:]
  -[WFNetworkSettingsCellFactory _registerCells]
  -[WFNetworkSettingsCellFactory segmentedCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory recommendationCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory joinCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory forgetCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory manageCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory priorityCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory autoJoinCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory autoLoginCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory saveDataModeCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv4AddressConfigCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv4AddressCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv4SubnetMaskCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv4RouterCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory dhcpClientIDCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory renewLeaseCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv6AddressConfigCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv6AddressCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv6RouterCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory dnsConfigureCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory httpProxyConfigCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory dnsSearchDomainsCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory dnsServerAddressesCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv4AddressTextCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv4SubnetMaskTextCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory ipv4RouterTextCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory dhcpClientIDTextCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory httpProxyURLTextCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory httpProxyServerTextCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory httpProxyPortTextCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory httpProxyUserTextCellAtIndexPath:]
  -[WFNetworkSettingsCellFactory httpProxyPasswordTextCellAtIndexPath:]


WFHyperlinkFooterView : UIView /usr/lib/libMobileGestalt.dylib <UITextViewDelegate>
 @property  NSString *text
 @property  {_NSRange=QQ} linkRange
 @property  id target
 @property  SEL action
 @property  NSURL *URL
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFHyperlinkFooterView init]
  -[WFHyperlinkFooterView .cxx_destruct]
  -[WFHyperlinkFooterView setTarget:]
  -[WFHyperlinkFooterView target]
  -[WFHyperlinkFooterView setURL:]
  -[WFHyperlinkFooterView URL]
  -[WFHyperlinkFooterView action]
  -[WFHyperlinkFooterView text]
  -[WFHyperlinkFooterView setText:]
  -[WFHyperlinkFooterView sizeThatFits:]
  -[WFHyperlinkFooterView layoutSubviews]
  -[WFHyperlinkFooterView setAction:]
  -[WFHyperlinkFooterView textView:shouldInteractWithURL:inRange:interaction:]
  -[WFHyperlinkFooterView preferredHeightForWidth:]
  -[WFHyperlinkFooterView setLinkRange:]
  -[WFHyperlinkFooterView _linkify]
  -[WFHyperlinkFooterView linkRange]
  -[WFHyperlinkFooterView textInsets]


WFMutableNetworkProfile : WFNetworkProfile
 @property  NSArray *certificateChain
 @property  NSDictionary *enterpriseProfile
 @property  NSString *username
 @property  NSString *password
 @property  NSString *bssid
 @property  NSString *ssid
 @property  NSDictionary *scanAttributes
 @property  BOOL managed
 @property  BOOL captive
 @property  BOOL hidden
 @property  BOOL autoJoinEnabled
 @property  BOOL autoLoginEnabled
 @property  BOOL isInSaveDataMode
 @property  NSDate *lastAssociationDate
 @property  long long securityMode
 @property  ^{__SecIdentity=} TLSIdentity
 @property  NSString *originatorBundleIdentifier
 @property  BOOL HS20Network
 @property  BOOL HS20NetworkProvisioned
 @property  BOOL userProvidedPassword
 @property  NSString *previousPassword
 @property  BOOL instantHotspotJoin
 @property  NSString *hotspotDeviceIdentifier

  // class methods
  +[WFMutableNetworkProfile mutableProfileForNetwork:]

  // instance methods
  -[WFMutableNetworkProfile dealloc]
  -[WFMutableNetworkProfile password]
  -[WFMutableNetworkProfile .cxx_destruct]
  -[WFMutableNetworkProfile setPassword:]
  -[WFMutableNetworkProfile isHidden]
  -[WFMutableNetworkProfile username]
  -[WFMutableNetworkProfile setUsername:]
  -[WFMutableNetworkProfile ssid]
  -[WFMutableNetworkProfile setSsid:]
  -[WFMutableNetworkProfile setHidden:]
  -[WFMutableNetworkProfile setSecurityMode:]
  -[WFMutableNetworkProfile initWithNetwork:]
  -[WFMutableNetworkProfile setBssid:]
  -[WFMutableNetworkProfile bssid]
  -[WFMutableNetworkProfile securityMode]
  -[WFMutableNetworkProfile certificateChain]
  -[WFMutableNetworkProfile isManaged]
  -[WFMutableNetworkProfile setManaged:]
  -[WFMutableNetworkProfile removePassword]
  -[WFMutableNetworkProfile enterpriseProfile]
  -[WFMutableNetworkProfile scanAttributes]
  -[WFMutableNetworkProfile setTLSIdentity:]
  -[WFMutableNetworkProfile setEnterpriseProfile:]
  -[WFMutableNetworkProfile setCertificateChain:]
  -[WFMutableNetworkProfile setScanAttributes:]
  -[WFMutableNetworkProfile isAdhoc]
  -[WFMutableNetworkProfile isCaptive]
  -[WFMutableNetworkProfile setCaptive:]
  -[WFMutableNetworkProfile isHS20Network]
  -[WFMutableNetworkProfile setHS20Network:]
  -[WFMutableNetworkProfile isHS20NetworkProvisioned]
  -[WFMutableNetworkProfile setHS20NetworkProvisioned:]
  -[WFMutableNetworkProfile isAutoJoinEnabled]
  -[WFMutableNetworkProfile setAutoJoinEnabled:]
  -[WFMutableNetworkProfile isAutoLoginEnabled]
  -[WFMutableNetworkProfile setAutoLoginEnabled:]
  -[WFMutableNetworkProfile isInSaveDataMode]
  -[WFMutableNetworkProfile setIsInSaveDataMode:]
  -[WFMutableNetworkProfile lastAssociationDate]
  -[WFMutableNetworkProfile setLastAssociationDate:]
  -[WFMutableNetworkProfile TLSIdentity]
  -[WFMutableNetworkProfile originatorBundleIdentifier]
  -[WFMutableNetworkProfile setOriginatorBundleIdentifier:]
  -[WFMutableNetworkProfile isCarrierBased]
  -[WFMutableNetworkProfile HS20AccountName]
  -[WFMutableNetworkProfile HS20Badge]
  -[WFMutableNetworkProfile userProvidedPassword]
  -[WFMutableNetworkProfile setUserProvidedPassword:]
  -[WFMutableNetworkProfile previousPassword]
  -[WFMutableNetworkProfile setPreviousPassword:]
  -[WFMutableNetworkProfile isPersonalHotspot]
  -[WFMutableNetworkProfile isInstantHotspotJoin]
  -[WFMutableNetworkProfile setInstantHotspotJoin:]
  -[WFMutableNetworkProfile hotspotDeviceIdentifier]
  -[WFMutableNetworkProfile setHotspotDeviceIdentifier:]


WFUserConfigureEvent : NSObject /usr/lib/libSystem.B.dylib <WFAWDEvent>
 @property  unsigned int metricIdentifier
 @property  PBCodable *metric
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[WFUserConfigureEvent configureEventWithType:new:old:]

  // instance methods
  -[WFUserConfigureEvent .cxx_destruct]
  -[WFUserConfigureEvent metric]
  -[WFUserConfigureEvent setMetric:]
  -[WFUserConfigureEvent initWithType:new:old:]
  -[WFUserConfigureEvent _metricIdForType:]
  -[WFUserConfigureEvent metricIdentifier]
  -[WFUserConfigureEvent setMetricIdentifier:]


WFLinkQuality : NSObject /usr/lib/libSystem.B.dylib <NSCopying>
 @property  NSString *ssid
 @property  long long rssi
 @property  float scaledRssi

  // instance methods
  -[WFLinkQuality init]
  -[WFLinkQuality copyWithZone:]
  -[WFLinkQuality .cxx_destruct]
  -[WFLinkQuality ssid]
  -[WFLinkQuality setSsid:]
  -[WFLinkQuality rssi]
  -[WFLinkQuality setRssi:]
  -[WFLinkQuality scaledRssi]
  -[WFLinkQuality initWithSSID:rssi:scaledRSSI:]
  -[WFLinkQuality setScaledRssi:]


WFSaveLogsOperation : WFOperation
 @property  NSString *comments

  // instance methods
  -[WFSaveLogsOperation .cxx_destruct]
  -[WFSaveLogsOperation start]
  -[WFSaveLogsOperation comments]
  -[WFSaveLogsOperation setComments:]
  -[WFSaveLogsOperation initWithComments:]


WFSaveSettingsOperation : WFOperation
 @property  NSString *ssid
 @property  ^{__SCPreferences=} prefs
 @property  NSArray *settings
 @property  NSOperationQueue *keychainQueue
 @property  BOOL currentNetwork

  // instance methods
  -[WFSaveSettingsOperation dealloc]
  -[WFSaveSettingsOperation .cxx_destruct]
  -[WFSaveSettingsOperation prefs]
  -[WFSaveSettingsOperation start]
  -[WFSaveSettingsOperation settings]
  -[WFSaveSettingsOperation setSettings:]
  -[WFSaveSettingsOperation ssid]
  -[WFSaveSettingsOperation setSsid:]
  -[WFSaveSettingsOperation setCurrentNetwork:]
  -[WFSaveSettingsOperation setPrefs:]
  -[WFSaveSettingsOperation keychainQueue]
  -[WFSaveSettingsOperation setKeychainQueue:]
  -[WFSaveSettingsOperation initWithSSID:settings:]
  -[WFSaveSettingsOperation _createNewSetForNetworkNamed:]
  -[WFSaveSettingsOperation _applyProxySettings:service:]
  -[WFSaveSettingsOperation isCurrentNetwork]
  -[WFSaveSettingsOperation _defaultSetRetained]
  -[WFSaveSettingsOperation initWithNetworkProfile:settings:]


WFDiagnosticsContext : NSObject /usr/lib/libSystem.B.dylib <WFDiagnosticsProviderContext>
 @property  WFNetworkScanRecord *network
 @property  WFNetworkProfile *profile
 @property  ^{__WiFiManagerClient=} manager
 @property  ^{__WiFiDeviceClient=} device
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long requestedFields
 @property  @? refreshHandler
 @property  NSString *security
 @property  NSString *securityAdvice
 @property  NSString *BSSID
 @property  NSNumber *channel
 @property  NSString *channelString
 @property  NSString *channelWidth
 @property  NSString *channelPerformance
 @property  NSString *rssi
 @property  NSString *cca
 @property  NSString *adviceString
 @property  NSString *beaconPER
 @property  NSString *transmitPER
 @property  NSString *recvFrames
 @property  NSString *rssiPerformance
 @property  BOOL captive
 @property  BOOL managed
 @property  BOOL multiAP
 @property  NSString *deployment
 @property  NSString *motion
 @property  NSString *gateway
 @property  NSString *internet
 @property  NSString *probeFooter
 @property  NSString *awdl
 @property  NSString *bluetooth
 @property  NSString *scan
 @property  NSString *coexFooter

  // instance methods
  -[WFDiagnosticsContext managed]
  -[WFDiagnosticsContext .cxx_destruct]
  -[WFDiagnosticsContext cancel]
  -[WFDiagnosticsContext manager]
  -[WFDiagnosticsContext device]
  -[WFDiagnosticsContext network]
  -[WFDiagnosticsContext setNetwork:]
  -[WFDiagnosticsContext profile]
  -[WFDiagnosticsContext setProfile:]
  -[WFDiagnosticsContext channel]
  -[WFDiagnosticsContext setManager:]
  -[WFDiagnosticsContext rssi]
  -[WFDiagnosticsContext channelWidth]
  -[WFDiagnosticsContext cca]
  -[WFDiagnosticsContext setDevice:]
  -[WFDiagnosticsContext requestedFields]
  -[WFDiagnosticsContext BSSID]
  -[WFDiagnosticsContext motion]
  -[WFDiagnosticsContext gateway]
  -[WFDiagnosticsContext refreshHandler]
  -[WFDiagnosticsContext setRefreshHandler:]
  -[WFDiagnosticsContext security]
  -[WFDiagnosticsContext securityAdvice]
  -[WFDiagnosticsContext channelString]
  -[WFDiagnosticsContext channelPerformance]
  -[WFDiagnosticsContext adviceString]
  -[WFDiagnosticsContext beaconPER]
  -[WFDiagnosticsContext transmitPER]
  -[WFDiagnosticsContext recvFrames]
  -[WFDiagnosticsContext rssiPerformance]
  -[WFDiagnosticsContext captive]
  -[WFDiagnosticsContext multiAP]
  -[WFDiagnosticsContext deployment]
  -[WFDiagnosticsContext internet]
  -[WFDiagnosticsContext probeFooter]
  -[WFDiagnosticsContext awdl]
  -[WFDiagnosticsContext bluetooth]
  -[WFDiagnosticsContext scan]
  -[WFDiagnosticsContext coexFooter]
  -[WFDiagnosticsContext initWithNetwork:profile:]
  -[WFDiagnosticsContext updateInfo:]


WFCaptiveContext : NSObject /usr/lib/libSystem.B.dylib <WFWebSheetViewControllerDelegate, WFProviderContext>
 @property  WFWebSheetViewController *webSheetViewController
 @property  NSTimer *timer
 @property  BOOL readyForPresentation
 @property  @? readyForPresentationHandler
 @property  @? completionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  <WFNetworkListRecord> *network
 @property  long long requestedFields

  // instance methods
  -[WFCaptiveContext init]
  -[WFCaptiveContext .cxx_destruct]
  -[WFCaptiveContext cancel]
  -[WFCaptiveContext timer]
  -[WFCaptiveContext setTimer:]
  -[WFCaptiveContext network]
  -[WFCaptiveContext completionHandler]
  -[WFCaptiveContext setCompletionHandler:]
  -[WFCaptiveContext requestedFields]
  -[WFCaptiveContext setReadyForPresentation:]
  -[WFCaptiveContext readyForPresentation]
  -[WFCaptiveContext _presentationTimerFired:]
  -[WFCaptiveContext webSheetViewController]
  -[WFCaptiveContext _readyForPresentation:]
  -[WFCaptiveContext readyForPresentationHandler]
  -[WFCaptiveContext webSheetViewController:didTerminateWithError:]
  -[WFCaptiveContext webSheetViewControllerContentReadyForPresentation:]
  -[WFCaptiveContext setReadyForPresentationHandler:]
  -[WFCaptiveContext setWebSheetViewController:]


WFHotspotDevice : NSObject /usr/lib/libSystem.B.dylib <WFNetworkListRecord>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  SFRemoteHotspotDevice *hotspotDevice
 @property  NSString *ssid

  // instance methods
  -[WFHotspotDevice init]
  -[WFHotspotDevice isEqual:]
  -[WFHotspotDevice .cxx_destruct]
  -[WFHotspotDevice title]
  -[WFHotspotDevice uniqueIdentifier]
  -[WFHotspotDevice subtitle]
  -[WFHotspotDevice ssid]
  -[WFHotspotDevice rssi]
  -[WFHotspotDevice isSecure]
  -[WFHotspotDevice isKnown]
  -[WFHotspotDevice securityMode]
  -[WFHotspotDevice isAdhoc]
  -[WFHotspotDevice hotspotDevice]
  -[WFHotspotDevice _isEqualToHotspotDevice:]
  -[WFHotspotDevice _isEqualToNetwork:]
  -[WFHotspotDevice iOSHotspot]
  -[WFHotspotDevice initWithHotspotDevice:]
  -[WFHotspotDevice setHotspotDevice:]
  -[WFHotspotDevice isHotspot20]
  -[WFHotspotDevice scaledRSSI]
  -[WFHotspotDevice isUnconfiguredAccessory]
  -[WFHotspotDevice isEnterprise]
  -[WFHotspotDevice signalBars]
  -[WFHotspotDevice setScaledRSSI:]
  -[WFHotspotDevice isPopular]
  -[WFHotspotDevice prominentDisplay]
  -[WFHotspotDevice isInstantHotspot]
  -[WFHotspotDevice hotspotBatteryLife]
  -[WFHotspotDevice hotspotSignalStrength]
  -[WFHotspotDevice hotspotCellularProtocol]
  -[WFHotspotDevice canBeDisplayedAsCurrent]


WFPasswordPromptOperation : WFUserPromptOperation <WFCredentialsProvider>
 @property  <WFCredentialsProviderContext> *credentialsProviderContext
 @property  NSString *password
 @property  BOOL wantsModalPresentation
 @property  ^{__SecIdentity=} TLSIdentity
 @property  NSString *username

  // class methods
  +[WFPasswordPromptOperation passwordPromptOperationWithCredentialsContext:]

  // instance methods
  -[WFPasswordPromptOperation password]
  -[WFPasswordPromptOperation .cxx_destruct]
  -[WFPasswordPromptOperation setPassword:]
  -[WFPasswordPromptOperation username]
  -[WFPasswordPromptOperation TLSIdentity]
  -[WFPasswordPromptOperation setCredentialsProviderContext:]
  -[WFPasswordPromptOperation credentialsProviderContext]


WFEnterpriseJoinOperation : WFOperation
 @property  WFNetworkProfile *profile
 @property  WFNetworkScanRecord *network
 @property  <WFWiFiJoinProxy> *joinProxy

  // instance methods
  -[WFEnterpriseJoinOperation .cxx_destruct]
  -[WFEnterpriseJoinOperation start]
  -[WFEnterpriseJoinOperation network]
  -[WFEnterpriseJoinOperation setNetwork:]
  -[WFEnterpriseJoinOperation profile]
  -[WFEnterpriseJoinOperation setProfile:]
  -[WFEnterpriseJoinOperation joinNetworkRef:]
  -[WFEnterpriseJoinOperation _handleEnterpriseJoinResult:userInfo:]
  -[WFEnterpriseJoinOperation joinProxy]
  -[WFEnterpriseJoinOperation initWithJoinProxy:network:profile:]
  -[WFEnterpriseJoinOperation _joinComplete:network:]
  -[WFEnterpriseJoinOperation setJoinProxy:]


WFKnownNetworkStore : NSObject /usr/lib/libSystem.B.dylib
 @property  NSObject<OS_dispatch_queue> *knownNetworksQueue
 @property  NSSet *knownNetworks
 @property  NSSet *managedNetworkNames
 @property  BOOL hasHS20Networks
 @property  WFClient *wifiClient

  // class methods
  +[WFKnownNetworkStore sharedInstance]

  // instance methods
  -[WFKnownNetworkStore init]
  -[WFKnownNetworkStore .cxx_destruct]
  -[WFKnownNetworkStore initWithClient:]
  -[WFKnownNetworkStore knownNetworks]
  -[WFKnownNetworkStore _forceUpdateKnownNetworksAndWait:]
  -[WFKnownNetworkStore _clientServerRestarted:]
  -[WFKnownNetworkStore _preferredNetworksDidChange:]
  -[WFKnownNetworkStore _networkProfileFromNetworkAttributes:]
  -[WFKnownNetworkStore _forceUpdateKnownNetworks]
  -[WFKnownNetworkStore wifiClient]
  -[WFKnownNetworkStore managedNetworkNames]
  -[WFKnownNetworkStore setManagedNetworkNames:]
  -[WFKnownNetworkStore setKnownNetworks:]
  -[WFKnownNetworkStore setHasHS20Networks:]
  -[WFKnownNetworkStore hasHS20Networks]
  -[WFKnownNetworkStore knownNetworksQueue]
  -[WFKnownNetworkStore networkProfileWithSSID:securityMode:]
  -[WFKnownNetworkStore updateKnownNetworks]
  -[WFKnownNetworkStore networkProfileForNetwork:]
  -[WFKnownNetworkStore networkProfileWithSSID:]
  -[WFKnownNetworkStore saveNetworkProfile:forReason:error:]
  -[WFKnownNetworkStore removeNetworkProfile:error:]
  -[WFKnownNetworkStore setAutoJoinEnabled:forProfile:error:]
  -[WFKnownNetworkStore networkMatchesManagedProfile:]
  -[WFKnownNetworkStore getGeoTagsForNetworkProfile:]
  -[WFKnownNetworkStore getScoreForNetworkProfile:]
  -[WFKnownNetworkStore setKnownNetworksQueue:]
  -[WFKnownNetworkStore setWifiClient:]


WFScanSessionEvent : NSObject /usr/lib/libSystem.B.dylib <WFAWDEvent>
 @property  PBCodable<WFAWDWiFiUIScanSessionMetric> *metric
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[WFScanSessionEvent scanSessionEventWithSectionCounts:duration:]

  // instance methods
  -[WFScanSessionEvent .cxx_destruct]
  -[WFScanSessionEvent metric]
  -[WFScanSessionEvent setMetric:]
  -[WFScanSessionEvent metricIdentifier]
  -[WFScanSessionEvent initWithScanSectionCounts:duration:]
  -[WFScanSessionEvent _durationBucketFromTimeInterval:]
  -[WFScanSessionEvent _countMetricsFromSectionCounts:]


WFProxyKeychainOperation : WFOperation
 @property  long long type
 @property  NSString *password
 @property  NSString *host
 @property  NSString *username
 @property  NSString *port

  // class methods
  +[WFProxyKeychainOperation removePasswordOperationForHost:port:username:]
  +[WFProxyKeychainOperation savePassswordOperationForHost:port:username:password:]
  +[WFProxyKeychainOperation getPasswordOperationForHost:port:username:]

  // instance methods
  -[WFProxyKeychainOperation type]
  -[WFProxyKeychainOperation setType:]
  -[WFProxyKeychainOperation host]
  -[WFProxyKeychainOperation port]
  -[WFProxyKeychainOperation password]
  -[WFProxyKeychainOperation .cxx_destruct]
  -[WFProxyKeychainOperation setPort:]
  -[WFProxyKeychainOperation start]
  -[WFProxyKeychainOperation setPassword:]
  -[WFProxyKeychainOperation setHost:]
  -[WFProxyKeychainOperation username]
  -[WFProxyKeychainOperation setUsername:]
  -[WFProxyKeychainOperation initWithHost:port:username:password:type:]
  -[WFProxyKeychainOperation _credentialsForProtectionSpace:]


WFHotspotHelperNetwork : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *ssid
 @property  NSString *password
 @property  NSString *label
 @property  NSString *bundleIdentifier

  // instance methods
  -[WFHotspotHelperNetwork password]
  -[WFHotspotHelperNetwork .cxx_destruct]
  -[WFHotspotHelperNetwork bundleIdentifier]
  -[WFHotspotHelperNetwork setPassword:]
  -[WFHotspotHelperNetwork setBundleIdentifier:]
  -[WFHotspotHelperNetwork setLabel:]
  -[WFHotspotHelperNetwork label]
  -[WFHotspotHelperNetwork ssid]
  -[WFHotspotHelperNetwork setSsid:]
  -[WFHotspotHelperNetwork initWithSSID:bundleIdentifier:password:label:]


WFNetworkListController : NSObject /usr/lib/libSystem.B.dylib <WFHotspotInterfaceDelegate, WFNetworkListDelegate, WFAirportViewControllerDelegate, WFScanManagerDelegate, WFGasQueryControllerDelegate, WFHealthManagerDelegate>
 @property  UIViewController<WFNetworkListing> *viewController
 @property  WFHotspotInterface *hotspotInterface
 @property  NSSet *networks
 @property  WFInterface *interface
 @property  <WFNetworkListRecord> *associatingNetwork
 @property  BOOL associatingToOtherNetwork
 @property  UIViewController<WFOtherNetworkProvider> *otherNetworkVC
 @property  NSOperationQueue *backgroundQueue
 @property  WFHealthIssueOverrides *healthRecommendationOverrides
 @property  WFScanManager *scanManager
 @property  WFLinkQuality *latestLinkQuality
 @property  WFHealthManager *healthManager
 @property  WFKnownNetworksListController *knownNetworksListController
 @property  BOOL viewControllerSupportsCurrentNetworkSubtitle
 @property  BOOL powered
 @property  BOOL canScanForPersonalHotspots
 @property  WFGasQueryController *gasController
 @property  WFWiFiStateMonitor *stateMonitor
 @property  BOOL refreshedKnownNetworks
 @property  WFClient *wifiClient
 @property  <WFNetworkViewProvider> *viewProvider
 @property  WFDetailsContext *detailsContext
 @property  WFCredentialsContext *credentialsContext
 @property  WFKnownNetworkStore *knownNetworkStore
 @property  WFCertificateContext *certificateContext
 @property  <WFContextPresenting> *visibleContext
 @property  WFAssociationContext *associationContext
 @property  WFScanMetricsManager *scanMetricsManager
 @property  BOOL HS20Supported
 @property  BOOL scanForPersonalHotspots
 @property  BOOL scanning
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFNetworkListController init]
  -[WFNetworkListController dealloc]
  -[WFNetworkListController .cxx_destruct]
  -[WFNetworkListController interface]
  -[WFNetworkListController setInterface:]
  -[WFNetworkListController setViewController:]
  -[WFNetworkListController handleURL:]
  -[WFNetworkListController viewController]
  -[WFNetworkListController initWithViewController:]
  -[WFNetworkListController _applicationWillResignActive:]
  -[WFNetworkListController _applicationDidBecomeActive:]
  -[WFNetworkListController isSetup]
  -[WFNetworkListController _applicationDidEnterBackground:]
  -[WFNetworkListController _applicationWillEnterForeground:]
  -[WFNetworkListController networks]
  -[WFNetworkListController setNetworks:]
  -[WFNetworkListController hotspotInterface]
  -[WFNetworkListController keyValueDictionaryForURL:]
  -[WFNetworkListController backgroundQueue]
  -[WFNetworkListController setBackgroundQueue:]
  -[WFNetworkListController startScanning]
  -[WFNetworkListController stopScanning]
  -[WFNetworkListController viewProvider]
  -[WFNetworkListController setViewProvider:]
  -[WFNetworkListController powered]
  -[WFNetworkListController setPowered:]
  -[WFNetworkListController isScanning]
  -[WFNetworkListController _powerStateChanged]
  -[WFNetworkListController _preferredNetworksDidChange:]
  -[WFNetworkListController wifiClient]
  -[WFNetworkListController setWifiClient:]
  -[WFNetworkListController initWithViewController:viewProvider:client:]
  -[WFNetworkListController _setupWithInterface:]
  -[WFNetworkListController _setupWithoutInterface]
  -[WFNetworkListController _interfaceDidBecomeAvailable:]
  -[WFNetworkListController _clientRestartedNotification:]
  -[WFNetworkListController _stateMonitorChangedStates:oldState:]
  -[WFNetworkListController _setupGASControllerWithInterface:]
  -[WFNetworkListController isAirPortSettings]
  -[WFNetworkListController _registerForApplicationNotifications]
  -[WFNetworkListController _ipStateDidChange:]
  -[WFNetworkListController _powerDidChangeNotification:]
  -[WFNetworkListController _networkDidChangeNotification:]
  -[WFNetworkListController _networkLinkQualityDidChangeNotification:]
  -[WFNetworkListController _networkRestrictionStateDidChange:]
  -[WFNetworkListController _networkHealthIssuesDidChange:]
  -[WFNetworkListController _powerModificationDisableStateDidChange:]
  -[WFNetworkListController _managedAppleIDStateDidChange:]
  -[WFNetworkListController _wifiPropertyDidChanged:]
  -[WFNetworkListController setViewControllerSupportsCurrentNetworkSubtitle:]
  -[WFNetworkListController viewControllerSupportsCurrentNetworkSubtitle]
  -[WFNetworkListController _updateViewControllerDisabled]
  -[WFNetworkListController setHS20Supported:]
  -[WFNetworkListController knownNetworkStore]
  -[WFNetworkListController scanMetricsManager]
  -[WFNetworkListController _cleanUpStatesForDismissal]
  -[WFNetworkListController setRefreshedKnownNetworks:]
  -[WFNetworkListController _stopHotspotScan]
  -[WFNetworkListController _updatePowerState]
  -[WFNetworkListController _shouldPauseScanning]
  -[WFNetworkListController _pauseScanning]
  -[WFNetworkListController removeScanCache]
  -[WFNetworkListController _dismissVisibleContext]
  -[WFNetworkListController associationContext]
  -[WFNetworkListController associatingNetwork]
  -[WFNetworkListController _associationDidFinish:error:]
  -[WFNetworkListController scanManager]
  -[WFNetworkListController gasController]
  -[WFNetworkListController scanManager:filterScanResults:]
  -[WFNetworkListController setCanScanForPersonalHotspots:]
  -[WFNetworkListController _startHotspotScan]
  -[WFNetworkListController _resumeScanning]
  -[WFNetworkListController isHS20Supported]
  -[WFNetworkListController scanForPersonalHotspots]
  -[WFNetworkListController canScanForPersonalHotspots]
  -[WFNetworkListController isAssociating]
  -[WFNetworkListController _updateViewControllerScanResults]
  -[WFNetworkListController _updateViewsForNetworks:]
  -[WFNetworkListController _canStartAssociationToNetwork:]
  -[WFNetworkListController _associateToScanRecord:profile:]
  -[WFNetworkListController _associateToHotspotDevice:]
  -[WFNetworkListController _associateToUnconfiguredAccessory:]
  -[WFNetworkListController _associateToHS20Network:]
  -[WFNetworkListController _associateToEnterpriseNetwork:profile:]
  -[WFNetworkListController _associateToNetwork:profile:]
  -[WFNetworkListController _associationWillStart:]
  -[WFNetworkListController _presentHotspotErrorContextWithDevice:hotspotError:failure:]
  -[WFNetworkListController _handleAssociationResult:error:network:profile:shouldSaveProfile:]
  -[WFNetworkListController _promptCredentialsForNetwork:profile:]
  -[WFNetworkListController otherNetworkVC]
  -[WFNetworkListController _promptForSecureWACDevice:]
  -[WFNetworkListController _runUnconfiguredJoinOperationForNetwork:]
  -[WFNetworkListController _openHomeAppForNetwork:]
  -[WFNetworkListController credentialsContext]
  -[WFNetworkListController _dismissErrorViewControllerWithContext:]
  -[WFNetworkListController _presentErrorContext:]
  -[WFNetworkListController _scanNetworkForAssociation:profile:]
  -[WFNetworkListController _handleAssociationError:network:profile:]
  -[WFNetworkListController _dismissOtherNetworkViewControllerWithContext:]
  -[WFNetworkListController _promptTrustCertificateForNetwork:certificateChain:profile:autoJoin:]
  -[WFNetworkListController setOtherNetworkVC:]
  -[WFNetworkListController _defaultAuthTraits]
  -[WFNetworkListController _supportsWiFiPasswordSharing]
  -[WFNetworkListController associatingToOtherNetwork]
  -[WFNetworkListController setCredentialsContext:]
  -[WFNetworkListController setVisibleContext:]
  -[WFNetworkListController _dismissCredentialsViewControllerWithContext:]
  -[WFNetworkListController setCertificateContext:]
  -[WFNetworkListController _dismissTrustViewControllerWithContext:]
  -[WFNetworkListController _canPromptForInstantHotspot]
  -[WFNetworkListController _disablePersonalHotspot]
  -[WFNetworkListController _canPromptForCarPlay]
  -[WFNetworkListController _isActiveCarPlaySession]
  -[WFNetworkListController _promptToDisableCarPlayForNetworkName:handler:]
  -[WFNetworkListController _associateToUserSuppliedNetwork:]
  -[WFNetworkListController setAssociatingNetwork:]
  -[WFNetworkListController setAssociationContext:]
  -[WFNetworkListController _updateViewControllerConnectedNetwork]
  -[WFNetworkListController setAssociatingToOtherNetwork:]
  -[WFNetworkListController latestLinkQuality]
  -[WFNetworkListController _updateCurrentNetworkIPState]
  -[WFNetworkListController _updateHealthSubtitle]
  -[WFNetworkListController healthRecommendations]
  -[WFNetworkListController healthManager]
  -[WFNetworkListController healthRecommendationOverrides]
  -[WFNetworkListController _associateToScanRecord:]
  -[WFNetworkListController _canStartAssociationToUserSuppliedNetwork:]
  -[WFNetworkListController refreshedKnownNetworks]
  -[WFNetworkListController _sortedHealthRecommendations]
  -[WFNetworkListController _dismissDetailsViewControllerWithContext:]
  -[WFNetworkListController setDetailsContext:]
  -[WFNetworkListController _saveLogsWithComment:diagnosticsViewController:]
  -[WFNetworkListController pushDataUsageViewController]
  -[WFNetworkListController knownNetworksListController]
  -[WFNetworkListController setKnownNetworksListController:]
  -[WFNetworkListController detailsContext]
  -[WFNetworkListController setLatestLinkQuality:]
  -[WFNetworkListController _dismissViewControllerForContext:]
  -[WFNetworkListController visibleContext]
  -[WFNetworkListController _handleCurrentNetworkDetailsURL]
  -[WFNetworkListController networkListViewController:showSettingsForNetwork:]
  -[WFNetworkListController hotspotInterfaceDidUpdateNetworks:]
  -[WFNetworkListController networkListViewController:didTapRecord:]
  -[WFNetworkListController networkListViewControllerDidTapOtherNetwork:]
  -[WFNetworkListController networkListViewControllerCurrentPowerState:]
  -[WFNetworkListController networkListViewController:userDidChangePower:]
  -[WFNetworkListController networkListViewControllerDidAppear:]
  -[WFNetworkListController networkListViewControllerDidDisappear:]
  -[WFNetworkListController networkListViewControllerDidFinish:]
  -[WFNetworkListController networkListViewControllerWAPIEnabled:]
  -[WFNetworkListController networkListViewController:setWAPIEnabled:]
  -[WFNetworkListController networkListViewControllerNetworkRestrictionActive:]
  -[WFNetworkListController networkListViewController:setAutoInstantOption:]
  -[WFNetworkListController networkListViewControllerAutoInstantHotspotOption:]
  -[WFNetworkListController networkListViewControllerPowerModificationDisabled:]
  -[WFNetworkListController networkListViewControllerIsManagedAppleID:]
  -[WFNetworkListController airportSettingsViewController:unconfiguredAccessoriesGroupHeaderTitle:]
  -[WFNetworkListController airportSettingsViewControllerAskToJoinMode:]
  -[WFNetworkListController airportSettingsViewController:setAskToJoinMode:]
  -[WFNetworkListController airportSettingsViewControllerShouldShowDiagnosticsMode:]
  -[WFNetworkListController airportSettingsViewControllerDidTapDiagnosticsMode:]
  -[WFNetworkListController airportSettingsViewControllerCurrentNetworkConnectionIsProblematic:]
  -[WFNetworkListController airportSettingsViewControllerDidTapDataUsage:]
  -[WFNetworkListController airportSettingsViewControllerShouldShowKnownNetworks:]
  -[WFNetworkListController airportSettingsViewControllerDidTapKnownNetworks:]
  -[WFNetworkListController scanManager:updatedPartialResults:]
  -[WFNetworkListController scanManagerScanningDidFinish:withResults:error:]
  -[WFNetworkListController scanManagerScanningWillStart:]
  -[WFNetworkListController scanManager:stateDidChange:]
  -[WFNetworkListController scanManager:didFindHotspotHelperNetworks:]
  -[WFNetworkListController scanManagerShouldSupportHotspotHelper:]
  -[WFNetworkListController scanManagerShouldSupportUnfilteredScanning:]
  -[WFNetworkListController scanManagerKnownNetworks:]
  -[WFNetworkListController existingProfileWithSSID:]
  -[WFNetworkListController gasQueryController:didUpdateProfiles:]
  -[WFNetworkListController healthManager:existingProfileForNetwork:]
  -[WFNetworkListController initWithViewController:viewProvider:]
  -[WFNetworkListController _downloadHomeApp]
  -[WFNetworkListController associateToEnterpriseNetwork:profile:]
  -[WFNetworkListController presentTrustCertificateForNetwork:profile:]
  -[WFNetworkListController _useLegacySettingsUI]
  -[WFNetworkListController setScanForPersonalHotspots:]
  -[WFNetworkListController setHotspotInterface:]
  -[WFNetworkListController setHealthRecommendationOverrides:]
  -[WFNetworkListController setScanManager:]
  -[WFNetworkListController setHealthManager:]
  -[WFNetworkListController setGasController:]
  -[WFNetworkListController stateMonitor]
  -[WFNetworkListController setStateMonitor:]
  -[WFNetworkListController setKnownNetworkStore:]
  -[WFNetworkListController certificateContext]
  -[WFNetworkListController setScanMetricsManager:]


WFInterface : NSObject /usr/lib/libSystem.B.dylib
 @property  NSSet *currentNetworkIssues
 @property  WFNetworkScanRecord *currentNetwork
 @property  NSString *interfaceName
 @property  WFIPMonitor *ipMonitor
 @property  NSObject<OS_dispatch_queue> *currentNetworkQueue
 @property  NSObject<OS_dispatch_queue> *scanQueueDispatchQueue
 @property  ^{__WiFiDeviceClient=} device
 @property  NSOperationQueue *gasQueue
 @property  NSOperationQueue *scanQueue
 @property  NSOperationQueue *joinQueue
 @property  NSArray *deviceScanChannels
 @property  NSNumber *rssiThreshold
 @property  int ipState
 @property  BOOL ipv4SelfAssigned
 @property  BOOL hasNoGatewayIP
 @property  BOOL currentNetworkIsDirected
 @property  NSThread *callbackThread
 @property  NSRunLoop *callbackRunLoop
 @property  BOOL monitoringEvents
 @property  BOOL scanning
 @property  WFClient *wifiClient

  // instance methods
  -[WFInterface dealloc]
  -[WFInterface .cxx_destruct]
  -[WFInterface observeValueForKeyPath:ofObject:change:context:]
  -[WFInterface device]
  -[WFInterface initWithDevice:]
  -[WFInterface setCurrentNetwork:]
  -[WFInterface currentNetwork]
  -[WFInterface interfaceName]
  -[WFInterface setInterfaceName:]
  -[WFInterface rssiThreshold]
  -[WFInterface setRssiThreshold:]
  -[WFInterface setDevice:]
  -[WFInterface setScanning:]
  -[WFInterface scanning]
  -[WFInterface scanQueue]
  -[WFInterface setScanQueue:]
  -[WFInterface wifiClient]
  -[WFInterface setWifiClient:]
  -[WFInterface asyncHS20Supported:]
  -[WFInterface cancelAllScans]
  -[WFInterface asyncCurrentNetwork:]
  -[WFInterface deviceScanChannels]
  -[WFInterface asyncScanRequest:reply:]
  -[WFInterface asyncAssociateToNetwork:profile:reply:]
  -[WFInterface ipMonitor]
  -[WFInterface disassociateFromCurrentNetwork]
  -[WFInterface currentNetworkIssues]
  -[WFInterface disassociateFromCarPlayUserConfiguredNetwork]
  -[WFInterface ipv4SelfAssigned]
  -[WFInterface _startMonitoringWiFiEvents]
  -[WFInterface _updateCurrentNetworkWithNetwork:callback:]
  -[WFInterface gasQueue]
  -[WFInterface _stopMonitoringWiFiEvents]
  -[WFInterface monitoringEvents]
  -[WFInterface setMonitoringEvents:]
  -[WFInterface _wifiManagerRestarted:]
  -[WFInterface _updateCurrentNetworkWithNetwork:forceUpdateNetwork:callback:userInfo:]
  -[WFInterface _debugLQMString:]
  -[WFInterface currentNetworkQueue]
  -[WFInterface _resetCurrentNetworkStates]
  -[WFInterface _currentNetworkDidChangeWithReason:previousNetwork:]
  -[WFInterface _wifiScanComplete:error:]
  -[WFInterface asyncAssociateToNetwork:password:reply:]
  -[WFInterface joinQueue]
  -[WFInterface _startScanOperation:]
  -[WFInterface _linkChangedWithInfo:]
  -[WFInterface _linkQualityChanged:]
  -[WFInterface asyncGASQueryForNetworks:elements:reply:]
  -[WFInterface notifyNoNetworksFound]
  -[WFInterface _hostAPStateDidChange:]
  -[WFInterface setIpMonitor:]
  -[WFInterface setCurrentNetworkIssues:]
  -[WFInterface setCurrentNetworkQueue:]
  -[WFInterface scanQueueDispatchQueue]
  -[WFInterface setScanQueueDispatchQueue:]
  -[WFInterface setGasQueue:]
  -[WFInterface setJoinQueue:]
  -[WFInterface setDeviceScanChannels:]
  -[WFInterface ipState]
  -[WFInterface setIpState:]
  -[WFInterface setIpv4SelfAssigned:]
  -[WFInterface hasNoGatewayIP]
  -[WFInterface setHasNoGatewayIP:]
  -[WFInterface currentNetworkIsDirected]
  -[WFInterface setCurrentNetworkIsDirected:]
  -[WFInterface callbackThread]
  -[WFInterface setCallbackThread:]
  -[WFInterface callbackRunLoop]
  -[WFInterface setCallbackRunLoop:]


WFOtherNetworkContext : WFCredentialsContext <WFContextPresenting, WFOtherNetworkProviderContext, WFOtherNetworkViewControllerDelegate>
 @property  NSArray *WAPIRootCertificates
 @property  NSArray *WAPIIdentities
 @property  NSArray *availableTLSIdentities
 @property  long long requestedFields
 @property  WFNetworkProfile *profile
 @property  WFNetworkScanRecord *network
 @property  unsigned long type
 @property  long long availableAuthTraits
 @property  WFUserSuppliedNetwork *userSuppliedNetwork
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIViewController<WFNetworkView> *provider
 @property  BOOL needsDismissal
 @property  BOOL passwordSharingSupported
 @property  NSString *username
 @property  BOOL enterprise
 @property  BOOL weakSecurity
 @property  BOOL WAPIEnabled

  // instance methods
  -[WFOtherNetworkContext type]
  -[WFOtherNetworkContext setType:]
  -[WFOtherNetworkContext .cxx_destruct]
  -[WFOtherNetworkContext initWithType:]
  -[WFOtherNetworkContext network]
  -[WFOtherNetworkContext setNetwork:]
  -[WFOtherNetworkContext profile]
  -[WFOtherNetworkContext setProfile:]
  -[WFOtherNetworkContext username]
  -[WFOtherNetworkContext securityMode]
  -[WFOtherNetworkContext requestedFields]
  -[WFOtherNetworkContext setRequestedFields:]
  -[WFOtherNetworkContext gatherCredentials:]
  -[WFOtherNetworkContext isEnterprise]
  -[WFOtherNetworkContext finishWithError:forNetwork:profile:]
  -[WFOtherNetworkContext initWithType:authTraits:]
  -[WFOtherNetworkContext userSuppliedNetwork]
  -[WFOtherNetworkContext validateCredentials]
  -[WFOtherNetworkContext validatePassword]
  -[WFOtherNetworkContext WAPIRootCertificates]
  -[WFOtherNetworkContext setUserSuppliedNetwork:]
  -[WFOtherNetworkContext _updateActivityStringForError:networkName:]
  -[WFOtherNetworkContext isPasswordSharingSupported]
  -[WFOtherNetworkContext availableTLSIdentities]
  -[WFOtherNetworkContext availableAuthTraits]
  -[WFOtherNetworkContext WAPIIdentities]
  -[WFOtherNetworkContext otherNetworkViewControllerUserDidTapJoin:]
  -[WFOtherNetworkContext otherNetworkViewControllerUserDidTapCancel:]
  -[WFOtherNetworkContext otherNetworkViewController:isValidPassword:]
  -[WFOtherNetworkContext setAvailableTLSIdentities:]
  -[WFOtherNetworkContext setAvailableAuthTraits:]
  -[WFOtherNetworkContext setWAPIRootCertificates:]
  -[WFOtherNetworkContext setWAPIIdentities:]


WFGasQueryProxy : NSObject /usr/lib/libSystem.B.dylib <WFWiFiGasProxy>
 @property  @? handler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  ^{__WiFiDeviceClient=} device

  // instance methods
  -[WFGasQueryProxy handler]
  -[WFGasQueryProxy .cxx_destruct]
  -[WFGasQueryProxy setHandler:]
  -[WFGasQueryProxy device]
  -[WFGasQueryProxy setDevice:]
  -[WFGasQueryProxy gasQueryForRecords:request:handler:]
  -[WFGasQueryProxy _processGasResults:error:]


WFMetricsManager : NSObject /usr/lib/libSystem.B.dylib
 @property  AWDServerConnection *server
 @property  NSObject<OS_dispatch_queue> *serverQueue
 @property  NSString *processName
 @property  NSMutableDictionary *ssidHashes

  // class methods
  +[WFMetricsManager sharedManager]

  // instance methods
  -[WFMetricsManager init]
  -[WFMetricsManager .cxx_destruct]
  -[WFMetricsManager processName]
  -[WFMetricsManager setProcessName:]
  -[WFMetricsManager setServer:]
  -[WFMetricsManager server]
  -[WFMetricsManager serverQueue]
  -[WFMetricsManager processEvent:]
  -[WFMetricsManager ssidHashes]
  -[WFMetricsManager SHAForSSID:]
  -[WFMetricsManager setServerQueue:]
  -[WFMetricsManager setSsidHashes:]


WFCarPlayDisablePromptOperation : WFUserPromptOperation
  // class methods
  +[WFCarPlayDisablePromptOperation carPlayDisablePromptOperation]


WFGasQueryController : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMapTable *gasResponseCache
 @property  NSMutableSet *resolvedNetworks
 @property  WFInterface *interface
 @property  <WFGasQueryControllerDelegate> *delegate
 @property  NSSet *profiles

  // instance methods
  -[WFGasQueryController init]
  -[WFGasQueryController delegate]
  -[WFGasQueryController setDelegate:]
  -[WFGasQueryController .cxx_destruct]
  -[WFGasQueryController interface]
  -[WFGasQueryController setInterface:]
  -[WFGasQueryController initWithInterface:]
  -[WFGasQueryController profiles]
  -[WFGasQueryController removeAllProfiles]
  -[WFGasQueryController resolveProfilesForNetworks:]
  -[WFGasQueryController profileForNetwork:]
  -[WFGasQueryController resolveProfileForNetwork:handler:force:]
  -[WFGasQueryController removeProfileForNetwork:]
  -[WFGasQueryController gasResponseCache]
  -[WFGasQueryController resolvedNetworks]
  -[WFGasQueryController _processANQPResults:scanRecords:error:]
  -[WFGasQueryController _existingProfileForANQPResult:]
  -[WFGasQueryController setGasResponseCache:]
  -[WFGasQueryController setResolvedNetworks:]


WFOperation : NSOperation /usr/lib/libobjc.A.dylib
 @property  NSError *error

  // instance methods
  -[WFOperation name]
  -[WFOperation .cxx_destruct]
  -[WFOperation error]
  -[WFOperation start]
  -[WFOperation setError:]
  -[WFOperation isFinished]
  -[WFOperation isReady]
  -[WFOperation finish]


WFDetailsContext : NSObject /usr/lib/libSystem.B.dylib <WFDetailsProviderContext, WFContextPresenting>
 @property  WFNetworkProfile *profile
 @property  WFNetworkScanRecord *network
 @property  long long requestedFields
 @property  WFKnownNetworkStore *knownNetworkStore
 @property  BOOL knownNetwork
 @property  WFIPMonitor *ipMonitor
 @property  WFDiagnosticsContext *diagnosticsContext
 @property  @? actionHandler
 @property  NSArray *recommendations
 @property  BOOL diagnosable
 @property  BOOL current
 @property  BOOL supportsAirportManagement
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL autoJoinEnabled
 @property  BOOL autoLoginEnabled
 @property  BOOL isInSaveDataMode
 @property  UIViewController<WFNetworkView> *provider
 @property  BOOL needsDismissal

  // instance methods
  -[WFDetailsContext dealloc]
  -[WFDetailsContext .cxx_destruct]
  -[WFDetailsContext cancel]
  -[WFDetailsContext setProvider:]
  -[WFDetailsContext network]
  -[WFDetailsContext setNetwork:]
  -[WFDetailsContext profile]
  -[WFDetailsContext setProfile:]
  -[WFDetailsContext provider]
  -[WFDetailsContext setActionHandler:]
  -[WFDetailsContext actionHandler]
  -[WFDetailsContext setCurrent:]
  -[WFDetailsContext isCurrent]
  -[WFDetailsContext requestedFields]
  -[WFDetailsContext setRequestedFields:]
  -[WFDetailsContext join]
  -[WFDetailsContext manage]
  -[WFDetailsContext setAutoJoinEnabled:]
  -[WFDetailsContext setAutoLoginEnabled:]
  -[WFDetailsContext isInSaveDataMode]
  -[WFDetailsContext setIsInSaveDataMode:]
  -[WFDetailsContext knownNetworkStore]
  -[WFDetailsContext ipMonitor]
  -[WFDetailsContext initWithNetwork:profile:knownNetworkStore:ipMonitor:]
  -[WFDetailsContext setDiagnosable:]
  -[WFDetailsContext setRecommendations:]
  -[WFDetailsContext setSupportsAirportManagement:]
  -[WFDetailsContext renewLease]
  -[WFDetailsContext recommendations]
  -[WFDetailsContext needsDismissal]
  -[WFDetailsContext setKnownNetworkStore:]
  -[WFDetailsContext setIpMonitor:]
  -[WFDetailsContext isKnownNetwork]
  -[WFDetailsContext forget]
  -[WFDetailsContext openRecommendationLink]
  -[WFDetailsContext diagnosticsContext]
  -[WFDetailsContext diagnosable]
  -[WFDetailsContext autoJoinEnabled]
  -[WFDetailsContext autoLoginEnabled]
  -[WFDetailsContext supportsAirportManagement]
  -[WFDetailsContext setKnownNetwork:]
  -[WFDetailsContext setDiagnosticsContext:]


WFControlCenterStateMonitor : WFWiFiStateMonitor
  // instance methods
  -[WFControlCenterStateMonitor performAction:]
  -[WFControlCenterStateMonitor performAction]
  -[WFControlCenterStateMonitor _airplaneModeEnabled]
  -[WFControlCenterStateMonitor _performAction:]
  -[WFControlCenterStateMonitor _promptMISDisable]
  -[WFControlCenterStateMonitor _promptCarPlayDisable]


WFNetworkScanRecord : NSObject /usr/lib/libSystem.B.dylib <WFNetworkListRecord, NSCopying>
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  BOOL unconfiguredAccessory
 @property  BOOL unconfiguredAccessorySTAOnly
 @property  long long unconfiguredAccessoryType
 @property  NSString *unconfiguredDeviceName
 @property  BOOL adhoc
 @property  BOOL requiresUsername
 @property  BOOL requiresPassword
 @property  BOOL secure
 @property  BOOL iOSHotspot
 @property  BOOL instantHotspot
 @property  BOOL hotspot20
 @property  BOOL carPlay
 @property  BOOL hotspot20Provisioned
 @property  BOOL enterprise
 @property  BOOL ambiguousSSID
 @property  NSDictionary *attributes
 @property  NSString *ssid
 @property  long long securityMode
 @property  NSDictionary *eapProfile
 @property  unsigned int phyMode
 @property  NSNumber *channel
 @property  NSString *hotspot20Name
 @property  NSString *hotspotPluginLabel
 @property  long long carPlayType
 @property  NSString *unconfiguredDeviceID
 @property  BOOL hidden
 @property  BOOL airPortBaseStation
 @property  NSString *bssid
 @property  long long rssi
 @property  float scaledRSSI
 @property  BOOL prominentDisplay
 @property  BOOL known
 @property  NSString *crowdsourceDescription
 @property  long long securityModeExt
 @property  BOOL popular
 @property  long long type
 @property  NSNumber *channelWidth
 @property  NSNumber *apVal

  // instance methods
  -[WFNetworkScanRecord init]
  -[WFNetworkScanRecord isEqual:]
  -[WFNetworkScanRecord copyWithZone:]
  -[WFNetworkScanRecord type]
  -[WFNetworkScanRecord compare:]
  -[WFNetworkScanRecord .cxx_destruct]
  -[WFNetworkScanRecord attributes]
  -[WFNetworkScanRecord setAttributes:]
  -[WFNetworkScanRecord title]
  -[WFNetworkScanRecord uniqueIdentifier]
  -[WFNetworkScanRecord isHidden]
  -[WFNetworkScanRecord subtitle]
  -[WFNetworkScanRecord channel]
  -[WFNetworkScanRecord ssid]
  -[WFNetworkScanRecord setSsid:]
  -[WFNetworkScanRecord rssi]
  -[WFNetworkScanRecord isSecure]
  -[WFNetworkScanRecord setHidden:]
  -[WFNetworkScanRecord setSecurityMode:]
  -[WFNetworkScanRecord setSecure:]
  -[WFNetworkScanRecord setRssi:]
  -[WFNetworkScanRecord setChannel:]
  -[WFNetworkScanRecord setCarPlay:]
  -[WFNetworkScanRecord setHotspot20:]
  -[WFNetworkScanRecord channelWidth]
  -[WFNetworkScanRecord phyMode]
  -[WFNetworkScanRecord setPhyMode:]
  -[WFNetworkScanRecord setBssid:]
  -[WFNetworkScanRecord bssid]
  -[WFNetworkScanRecord isKnown]
  -[WFNetworkScanRecord securityMode]
  -[WFNetworkScanRecord requiresPassword]
  -[WFNetworkScanRecord isCarPlay]
  -[WFNetworkScanRecord requiresUsername]
  -[WFNetworkScanRecord isAdhoc]
  -[WFNetworkScanRecord carPlayType]
  -[WFNetworkScanRecord _isEqualToHotspotDevice:]
  -[WFNetworkScanRecord _isEqualToNetwork:]
  -[WFNetworkScanRecord iOSHotspot]
  -[WFNetworkScanRecord initWithNetworkRef:]
  -[WFNetworkScanRecord isHotspot20]
  -[WFNetworkScanRecord setHotspot20Name:]
  -[WFNetworkScanRecord scaledRSSI]
  -[WFNetworkScanRecord isUnconfiguredAccessory]
  -[WFNetworkScanRecord isEnterprise]
  -[WFNetworkScanRecord unconfiguredAccessoryType]
  -[WFNetworkScanRecord unconfiguredDeviceName]
  -[WFNetworkScanRecord isUnconfiguredAccessorySTAOnly]
  -[WFNetworkScanRecord unconfiguredDeviceID]
  -[WFNetworkScanRecord isNetworkSecurityModeMatch:]
  -[WFNetworkScanRecord supportsWiFiHealth]
  -[WFNetworkScanRecord signalBars]
  -[WFNetworkScanRecord setKnown:]
  -[WFNetworkScanRecord setHotspotPluginLabel:]
  -[WFNetworkScanRecord setIOSHotspot:]
  -[WFNetworkScanRecord setRequiresPassword:]
  -[WFNetworkScanRecord setRequiresUsername:]
  -[WFNetworkScanRecord setAdhoc:]
  -[WFNetworkScanRecord setEnterprise:]
  -[WFNetworkScanRecord setUnconfiguredAccessory:]
  -[WFNetworkScanRecord isAmbiguousSSID]
  -[WFNetworkScanRecord setAmbiguousSSID:]
  -[WFNetworkScanRecord isAirPortBaseStation]
  -[WFNetworkScanRecord setAirPortBaseStation:]
  -[WFNetworkScanRecord setCarPlayType:]
  -[WFNetworkScanRecord setUnconfiguredAccessoryType:]
  -[WFNetworkScanRecord setUnconfiguredAccessorySTAOnly:]
  -[WFNetworkScanRecord setScaledRSSI:]
  -[WFNetworkScanRecord eapProfile]
  -[WFNetworkScanRecord setEapProfile:]
  -[WFNetworkScanRecord setUnconfiguredDeviceName:]
  -[WFNetworkScanRecord setUnconfiguredDeviceID:]
  -[WFNetworkScanRecord hotspotPluginLabel]
  -[WFNetworkScanRecord hotspot20Name]
  -[WFNetworkScanRecord securityModeExt]
  -[WFNetworkScanRecord setSecurityModeExt:]
  -[WFNetworkScanRecord isPopular]
  -[WFNetworkScanRecord apVal]
  -[WFNetworkScanRecord prominentDisplay]
  -[WFNetworkScanRecord setProminentDisplay:]
  -[WFNetworkScanRecord instantHotspot]
  -[WFNetworkScanRecord setInstantHotspot:]
  -[WFNetworkScanRecord isHotspot20Provisioned]
  -[WFNetworkScanRecord setHotspot20Provisioned:]
  -[WFNetworkScanRecord crowdsourceDescription]
  -[WFNetworkScanRecord setCrowdsourceDescription:]
  -[WFNetworkScanRecord setPopular:]
  -[WFNetworkScanRecord configurationIssues]
  -[WFNetworkScanRecord isCloudSyncable]
  -[WFNetworkScanRecord isInstantHotspot]
  -[WFNetworkScanRecord hotspotBatteryLife]
  -[WFNetworkScanRecord hotspotSignalStrength]
  -[WFNetworkScanRecord hotspotCellularProtocol]
  -[WFNetworkScanRecord canBeDisplayedAsCurrent]


WFStubInterface : WFInterface
 @property  BOOL currentNetworkIsDirected
 @property  BOOL ipv4SelfAssigned
 @property  BOOL hasNoGatewayIP

  // instance methods
  -[WFStubInterface .cxx_destruct]
  -[WFStubInterface setCurrentNetwork:]
  -[WFStubInterface currentNetwork]
  -[WFStubInterface interfaceName]
  -[WFStubInterface ipv4SelfAssigned]
  -[WFStubInterface setIpv4SelfAssigned:]
  -[WFStubInterface hasNoGatewayIP]
  -[WFStubInterface setHasNoGatewayIP:]
  -[WFStubInterface currentNetworkIsDirected]
  -[WFStubInterface setCurrentNetworkIsDirected:]


WFHealthManager : NSObject /usr/lib/libSystem.B.dylib
 @property  WFInterface *interface
 @property  NSSet *currentNetworkIssues
 @property  NWPathEvaluator *evaluator
 @property  WFNetworkScanRecord *network
 @property  WFNetworkProfile *profile
 @property  BOOL currentNetworkHasNoInternetConnection
 @property  <WFHealthManagerDelegate> *delegate

  // instance methods
  -[WFHealthManager dealloc]
  -[WFHealthManager delegate]
  -[WFHealthManager setDelegate:]
  -[WFHealthManager .cxx_destruct]
  -[WFHealthManager observeValueForKeyPath:ofObject:change:context:]
  -[WFHealthManager interface]
  -[WFHealthManager setInterface:]
  -[WFHealthManager initWithInterface:]
  -[WFHealthManager network]
  -[WFHealthManager setNetwork:]
  -[WFHealthManager profile]
  -[WFHealthManager setProfile:]
  -[WFHealthManager evaluator]
  -[WFHealthManager setEvaluator:]
  -[WFHealthManager currentNetworkIssues]
  -[WFHealthManager setCurrentNetworkIssues:]
  -[WFHealthManager currentNetworkDidChange:]
  -[WFHealthManager linkQualityDidChange:]
  -[WFHealthManager _updateCurrentNetworkIssues]
  -[WFHealthManager currentNetworkHasNoInternetConnection]


WFClient : NSObject /usr/lib/libSystem.B.dylib
 @property  WFInterface *interface
 @property  ^{__WiFiManagerClient=} manager
 @property  NSRunLoop *callbackRunLoop
 @property  BOOL showAllHS20Networks
 @property  BOOL wiFiHealthUIDisabled
 @property  BOOL extraLoggingEnabled
 @property  BOOL diagnosticsModeEnabled
 @property  BOOL networkRestrictionActive
 @property  NSNumber *rssiThresholdNumber
 @property  BOOL isKnownNetworkUIEnabled
 @property  unsigned long airplaneModeBehavior
 @property  BOOL userAutoJoinState
 @property  NSObject<OS_dispatch_queue> *serialClientQueue
 @property  NSString *whitelistingUUID
 @property  BOOL WPA3PersonalEnabled
 @property  BOOL WPA3EnterpriseEnabled
 @property  BOOL mfpCapable
 @property  BOOL managedAppleID
 @property  BOOL powered
 @property  BOOL WAPIEnabled
 @property  BOOL diagnosticsEnabled
 @property  long long askToJoinMode
 @property  BOOL powerModificationDisabled
 @property  long long autoInstantHotspotJoinOption

  // class methods
  +[WFClient sharedInstance]

  // instance methods
  -[WFClient init]
  -[WFClient dealloc]
  -[WFClient .cxx_destruct]
  -[WFClient manager]
  -[WFClient interface]
  -[WFClient setInterface:]
  -[WFClient setManager:]
  -[WFClient rssiThreshold]
  -[WFClient isManagedAppleID]
  -[WFClient setDiagnosticsEnabled:]
  -[WFClient setManagedAppleID:]
  -[WFClient powered]
  -[WFClient setPowered:]
  -[WFClient setUserAutoJoinState:]
  -[WFClient setAutoJoinEnabled:]
  -[WFClient _preferredNetworksDidChange:]
  -[WFClient _copyCurrentNetworks]
  -[WFClient _updateNetwork:]
  -[WFClient _addNetwork:]
  -[WFClient _removeNetwork:]
  -[WFClient _setAutoJoinEnabled:forNetwork:]
  -[WFClient _getGeoTagsForNetwork:]
  -[WFClient _getScoreForNetwork:]
  -[WFClient isNetworkRestrictionActive]
  -[WFClient _managedAppleIDStateDidChange:]
  -[WFClient _updatePowerState]
  -[WFClient reloadConfiguration]
  -[WFClient isPowerModificationDisabled]
  -[WFClient asyncPowered:]
  -[WFClient showAllHS20Networks]
  -[WFClient whitelistingUUID]
  -[WFClient dispatchCertificateTrustAction:profile:]
  -[WFClient setMISState:]
  -[WFClient isWiFiHealthUIDisabled]
  -[WFClient isDiagnosticsEnabled]
  -[WFClient isWAPIEnabled]
  -[WFClient setWAPIEnabled:]
  -[WFClient autoInstantHotspotJoinOption]
  -[WFClient setAutoInstantHotspotJoinOption:]
  -[WFClient askToJoinMode]
  -[WFClient setAskToJoinMode:]
  -[WFClient isDiagnosticsModeEnabled]
  -[WFClient isKnownNetworkUIEnabled]
  -[WFClient isWPA3PersonalEnabled]
  -[WFClient isWPA3EnterpriseEnabled]
  -[WFClient isMfpCapable]
  -[WFClient callbackRunLoop]
  -[WFClient setCallbackRunLoop:]
  -[WFClient _unscheduleCallbacksWithManager:]
  -[WFClient _scheduleCallbacksWithManager:runLoop:]
  -[WFClient _setupDefaultInterfaceWithManager:]
  -[WFClient _managedConfigurationDidChange:]
  -[WFClient _askToJoinModeFromWiFiAskToJoinPreference:]
  -[WFClient _hotspotJoinOptionFromWiFiAutoHotspotMode:]
  -[WFClient initWithCallbackRunLoop:]
  -[WFClient setWPA3PersonalEnabled:]
  -[WFClient setWPA3EnterpriseEnabled:]
  -[WFClient setMfpCapable:]
  -[WFClient _updateDebugProperties]
  -[WFClient _updateWAPIEnabled]
  -[WFClient _updateDiagnosticsEnabled]
  -[WFClient _updateAskToJoinMode]
  -[WFClient _updateAutoInstantHotspotJoinOption]
  -[WFClient _updateNetworkRestrictionActive]
  -[WFClient _updateAirplaneModeStickiness]
  -[WFClient _updateWPA3Properties:]
  -[WFClient _updatePowerModificationDisableState]
  -[WFClient _updateManagedAppleIDState]
  -[WFClient _logWiFiManagerPropertyChange:value:]
  -[WFClient _notifyWiFiPropertyChanged:value:]
  -[WFClient setNetworkRestrictionActive:]
  -[WFClient setPowerModificationDisableState:]
  -[WFClient setShowAllHS20Networks:]
  -[WFClient extraLoggingEnabled]
  -[WFClient setExtraLoggingEnabled:]
  -[WFClient setWiFiHealthUIDisabled:]
  -[WFClient setDiagnosticsModeEnabled:]
  -[WFClient userAutoJoinState]
  -[WFClient serialClientQueue]
  -[WFClient _updateWithDeviceAttachment:]
  -[WFClient hasShownSBPickerDontAsk]
  -[WFClient setHasShownSBPickerDontAsk:]
  -[WFClient setAirplaneModeBehavior:]
  -[WFClient isInfraAssociationAllowed]
  -[WFClient asyncUserAutoJoinState:]
  -[WFClient _userAutoJoinStateDidChange:info:]
  -[WFClient _askToJoinNotification:]
  -[WFClient _trustNotificationWithID:network:data:]
  -[WFClient asyncMISState:]
  -[WFClient asyncMISDiscoveryState:]
  -[WFClient setMISDiscoveryState:immediateDisable:]
  -[WFClient _joinRecommendationWithID:network:]
  -[WFClient dispatchJoinRecommendationAction:profile:]
  -[WFClient dispatchAskToJoinAction:notificationId:network:]
  -[WFClient setClientTypeAsForeground]
  -[WFClient airplaneModeBehavior]
  -[WFClient rssiThresholdNumber]
  -[WFClient setRssiThresholdNumber:]
  -[WFClient setSerialClientQueue:]


WFScanChannel : NSObject /usr/lib/libSystem.B.dylib
 @property  long long channel
 @property  long long flags

  // instance methods
  -[WFScanChannel init]
  -[WFScanChannel flags]
  -[WFScanChannel channel]
  -[WFScanChannel setFlags:]
  -[WFScanChannel setChannel:]
  -[WFScanChannel initWithChannel:flags:]


WFNetworkProfile : NSObject /usr/lib/libSystem.B.dylib <NSMutableCopying>
 @property  NSDictionary *enterpriseProfile
 @property  BOOL hidden
 @property  NSString *bssid
 @property  NSString *ssid
 @property  long long securityMode
 @property  NSDictionary *scanAttributes
 @property  BOOL adhoc
 @property  BOOL captive
 @property  BOOL HS20Network
 @property  BOOL autoJoinEnabled
 @property  BOOL carPlay
 @property  long long carPlayType
 @property  NSString *carPlayUUID
 @property  NSString *policyUUID
 @property  NSString *originatorBundleIdentifier
 @property  BOOL HS20NetworkProvisioned
 @property  BOOL carrierBased
 @property  BOOL personalHotspot
 @property  NSString *HS20AccountName
 @property  NSString *HS20Badge
 @property  BOOL canExposeIMSI
 @property  ^{__SecIdentity=} TLSIdentity
 @property  BOOL fetchedPassword
 @property  BOOL requiresPassword
 @property  BOOL instantHotspotJoin
 @property  NSArray *certificateChain
 @property  NSString *username
 @property  NSString *password
 @property  BOOL managed
 @property  BOOL autoLoginEnabled
 @property  BOOL isInSaveDataMode
 @property  BOOL requiresUsernameAndPassword
 @property  NSDate *addedDate
 @property  NSDate *lastAutoJoinDate
 @property  BOOL userProvidedPassword
 @property  NSString *previousPassword
 @property  NSString *hotspotDeviceIdentifier

  // class methods
  +[WFNetworkProfile networkProfileRepresentSameNetwork:toNetworkProfile:]

  // instance methods
  -[WFNetworkProfile dealloc]
  -[WFNetworkProfile isEqual:]
  -[WFNetworkProfile mutableCopyWithZone:]
  -[WFNetworkProfile password]
  -[WFNetworkProfile .cxx_destruct]
  -[WFNetworkProfile isHidden]
  -[WFNetworkProfile username]
  -[WFNetworkProfile ssid]
  -[WFNetworkProfile setSsid:]
  -[WFNetworkProfile setHidden:]
  -[WFNetworkProfile setSecurityMode:]
  -[WFNetworkProfile initWithNetwork:]
  -[WFNetworkProfile setCarPlay:]
  -[WFNetworkProfile setBssid:]
  -[WFNetworkProfile bssid]
  -[WFNetworkProfile securityMode]
  -[WFNetworkProfile certificateChain]
  -[WFNetworkProfile addedDate]
  -[WFNetworkProfile requiresPassword]
  -[WFNetworkProfile isManaged]
  -[WFNetworkProfile setFetchedPassword:]
  -[WFNetworkProfile fetchedPassword]
  -[WFNetworkProfile isCarPlay]
  -[WFNetworkProfile enterpriseProfile]
  -[WFNetworkProfile scanAttributes]
  -[WFNetworkProfile setTLSIdentity:]
  -[WFNetworkProfile setEnterpriseProfile:]
  -[WFNetworkProfile setScanAttributes:]
  -[WFNetworkProfile isAdhoc]
  -[WFNetworkProfile isCaptive]
  -[WFNetworkProfile setCaptive:]
  -[WFNetworkProfile isHS20Network]
  -[WFNetworkProfile setHS20Network:]
  -[WFNetworkProfile isHS20NetworkProvisioned]
  -[WFNetworkProfile setHS20NetworkProvisioned:]
  -[WFNetworkProfile isAutoJoinEnabled]
  -[WFNetworkProfile setAutoJoinEnabled:]
  -[WFNetworkProfile isAutoLoginEnabled]
  -[WFNetworkProfile isInSaveDataMode]
  -[WFNetworkProfile TLSIdentity]
  -[WFNetworkProfile originatorBundleIdentifier]
  -[WFNetworkProfile setOriginatorBundleIdentifier:]
  -[WFNetworkProfile isCarrierBased]
  -[WFNetworkProfile HS20AccountName]
  -[WFNetworkProfile HS20Badge]
  -[WFNetworkProfile userProvidedPassword]
  -[WFNetworkProfile previousPassword]
  -[WFNetworkProfile isPersonalHotspot]
  -[WFNetworkProfile isInstantHotspotJoin]
  -[WFNetworkProfile setInstantHotspotJoin:]
  -[WFNetworkProfile hotspotDeviceIdentifier]
  -[WFNetworkProfile setHotspotDeviceIdentifier:]
  -[WFNetworkProfile carPlayType]
  -[WFNetworkProfile forgetable]
  -[WFNetworkProfile autoLoginConfigurable]
  -[WFNetworkProfile autoJoinConfigurable]
  -[WFNetworkProfile saveDataModeConfigurable]
  -[WFNetworkProfile policyUUID]
  -[WFNetworkProfile initWithNetworkRef:]
  -[WFNetworkProfile networkAttributes]
  -[WFNetworkProfile isEnterprise]
  -[WFNetworkProfile canAttemptJoin]
  -[WFNetworkProfile carPlayUUID]
  -[WFNetworkProfile canExposeIMSI]
  -[WFNetworkProfile setRequiresPassword:]
  -[WFNetworkProfile setAdhoc:]
  -[WFNetworkProfile setCarPlayType:]
  -[WFNetworkProfile setPolicyUUID:]
  -[WFNetworkProfile setCarPlayUUID:]
  -[WFNetworkProfile setCarrierBased:]
  -[WFNetworkProfile setHS20AccountName:]
  -[WFNetworkProfile setHS20Badge:]
  -[WFNetworkProfile setCanExposeIMSI:]
  -[WFNetworkProfile setPersonalHotspot:]
  -[WFNetworkProfile requiresTLSIdentityOnly]
  -[WFNetworkProfile profileContainsCarrierEAPType:]
  -[WFNetworkProfile profileContainsEAPSIM:]
  -[WFNetworkProfile profileContainsEAPAKA:]
  -[WFNetworkProfile requiresUsernameAndPassword]
  -[WFNetworkProfile TLSProfileCanJoin]
  -[WFNetworkProfile isEqualToNetwork:]
  -[WFNetworkProfile lastAutoJoinDate]


WFUnconfiguredJoinOperation : WFOperation <AirPortAssistantControllerDelegate>
 @property  AirPortAssistantController *airportController
 @property  UINavigationController *navigationController
 @property  UIViewController *rootViewController
 @property  NSDictionary *parameters

  // instance methods
  -[WFUnconfiguredJoinOperation .cxx_destruct]
  -[WFUnconfiguredJoinOperation start]
  -[WFUnconfiguredJoinOperation finish]
  -[WFUnconfiguredJoinOperation parameters]
  -[WFUnconfiguredJoinOperation setParameters:]
  -[WFUnconfiguredJoinOperation setRootViewController:]
  -[WFUnconfiguredJoinOperation rootViewController]
  -[WFUnconfiguredJoinOperation navigationController]
  -[WFUnconfiguredJoinOperation setNavigationController:]
  -[WFUnconfiguredJoinOperation initWithParameters:rootViewController:]
  -[WFUnconfiguredJoinOperation airportController]
  -[WFUnconfiguredJoinOperation airPortAssistantComplete:result:context:animated:]
  -[WFUnconfiguredJoinOperation setAirportController:]


WFAssociationContext : NSObject /usr/lib/libSystem.B.dylib
 @property  unsigned long state
 @property  unsigned long originator
 @property  NSString *stateDescription
 @property  NSString *originatorDescription
 @property  BOOL secondaryScanCompleted
 @property  NSString *sectionNameJoined
 @property  NSDictionary *sectionCounts

  // instance methods
  -[WFAssociationContext init]
  -[WFAssociationContext .cxx_destruct]
  -[WFAssociationContext state]
  -[WFAssociationContext setState:]
  -[WFAssociationContext stateDescription]
  -[WFAssociationContext setOriginator:]
  -[WFAssociationContext originator]
  -[WFAssociationContext secondaryScanCompleted]
  -[WFAssociationContext sectionCounts]
  -[WFAssociationContext sectionNameJoined]
  -[WFAssociationContext setSectionNameJoined:]
  -[WFAssociationContext setSectionCounts:]
  -[WFAssociationContext setSecondaryScanCompleted:]
  -[WFAssociationContext originatorDescription]


WFUserSuppliedNetwork : NSObject /usr/lib/libSystem.B.dylib <WFNetworkListRecord>
 @property  NSString *ssid
 @property  long long security
 @property  NSString *username
 @property  NSString *password
 @property  ^{__SecIdentity=} TLSIdentity
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFUserSuppliedNetwork password]
  -[WFUserSuppliedNetwork .cxx_destruct]
  -[WFUserSuppliedNetwork setPassword:]
  -[WFUserSuppliedNetwork title]
  -[WFUserSuppliedNetwork subtitle]
  -[WFUserSuppliedNetwork username]
  -[WFUserSuppliedNetwork setUsername:]
  -[WFUserSuppliedNetwork ssid]
  -[WFUserSuppliedNetwork setSsid:]
  -[WFUserSuppliedNetwork rssi]
  -[WFUserSuppliedNetwork isSecure]
  -[WFUserSuppliedNetwork security]
  -[WFUserSuppliedNetwork setSecurity:]
  -[WFUserSuppliedNetwork setTLSIdentity:]
  -[WFUserSuppliedNetwork isAdhoc]
  -[WFUserSuppliedNetwork TLSIdentity]
  -[WFUserSuppliedNetwork iOSHotspot]
  -[WFUserSuppliedNetwork scaledRSSI]
  -[WFUserSuppliedNetwork isUnconfiguredAccessory]
  -[WFUserSuppliedNetwork isEnterprise]
  -[WFUserSuppliedNetwork signalBars]
  -[WFUserSuppliedNetwork isInstantHotspot]
  -[WFUserSuppliedNetwork hotspotBatteryLife]
  -[WFUserSuppliedNetwork hotspotSignalStrength]
  -[WFUserSuppliedNetwork hotspotCellularProtocol]
  -[WFUserSuppliedNetwork canBeDisplayedAsCurrent]


WFCaptiveObserver : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL observing
 @property  NSObject<OS_dispatch_queue> *captiveNotificationQueue
 @property  int startCaptiveNotificationToken
 @property  int endCaptiveNotificationToken
 @property  @? eventHandler

  // instance methods
  -[WFCaptiveObserver init]
  -[WFCaptiveObserver dealloc]
  -[WFCaptiveObserver .cxx_destruct]
  -[WFCaptiveObserver eventHandler]
  -[WFCaptiveObserver setEventHandler:]
  -[WFCaptiveObserver isObserving]
  -[WFCaptiveObserver setObserving:]
  -[WFCaptiveObserver stopObservingEvents]
  -[WFCaptiveObserver startObservingEvents]
  -[WFCaptiveObserver captiveNotificationQueue]
  -[WFCaptiveObserver setCaptiveNotificationQueue:]
  -[WFCaptiveObserver startCaptiveNotificationToken]
  -[WFCaptiveObserver setStartCaptiveNotificationToken:]
  -[WFCaptiveObserver endCaptiveNotificationToken]
  -[WFCaptiveObserver setEndCaptiveNotificationToken:]


WFWiFiStateMonitor : NSObject /usr/lib/libSystem.B.dylib
 @property  long long state
 @property  NSObject<OS_dispatch_queue> *internalQueue
 @property  WFLinkQuality *linkQuality
 @property  WFNetworkScanRecord *currentNetwork
 @property  BOOL monitoring
 @property  BOOL associatedToCarPlayOnly
 @property  WFClient *client
 @property  NSRunLoop *callbackRunLoop
 @property  NSThread *callbackThread
 @property  @? handler

  // instance methods
  -[WFWiFiStateMonitor init]
  -[WFWiFiStateMonitor dealloc]
  -[WFWiFiStateMonitor handler]
  -[WFWiFiStateMonitor .cxx_destruct]
  -[WFWiFiStateMonitor setHandler:]
  -[WFWiFiStateMonitor state]
  -[WFWiFiStateMonitor client]
  -[WFWiFiStateMonitor setClient:]
  -[WFWiFiStateMonitor setState:]
  -[WFWiFiStateMonitor setCurrentNetwork:]
  -[WFWiFiStateMonitor currentNetwork]
  -[WFWiFiStateMonitor startMonitoring]
  -[WFWiFiStateMonitor stopMonitoring]
  -[WFWiFiStateMonitor _updateState]
  -[WFWiFiStateMonitor linkQuality]
  -[WFWiFiStateMonitor setLinkQuality:]
  -[WFWiFiStateMonitor internalQueue]
  -[WFWiFiStateMonitor setInternalQueue:]
  -[WFWiFiStateMonitor setMonitoring:]
  -[WFWiFiStateMonitor _updateState:]
  -[WFWiFiStateMonitor _powerStateDidChange:]
  -[WFWiFiStateMonitor initWithClient:handler:]
  -[WFWiFiStateMonitor callbackThread]
  -[WFWiFiStateMonitor setCallbackThread:]
  -[WFWiFiStateMonitor callbackRunLoop]
  -[WFWiFiStateMonitor setCallbackRunLoop:]
  -[WFWiFiStateMonitor associatedToCarPlayOnly]
  -[WFWiFiStateMonitor monitoring]
  -[WFWiFiStateMonitor _clientConnectionRestarted:]
  -[WFWiFiStateMonitor _interfaceBecameAvailable:]
  -[WFWiFiStateMonitor _autoJoinStateChanged:]
  -[WFWiFiStateMonitor _registerInterfaceObserversForInterface:]
  -[WFWiFiStateMonitor _spawnManagerCallbackThread]
  -[WFWiFiStateMonitor _runManagerCallbackThread]
  -[WFWiFiStateMonitor _hostAPStateChanged:]
  -[WFWiFiStateMonitor _linkDidChange:]
  -[WFWiFiStateMonitor _linkQualityDidChange:]
  -[WFWiFiStateMonitor setAssociatedToCarPlayOnly:]
  -[WFWiFiStateMonitor _notifyStateChanged:newState:]


WFCertificateContext : NSObject /usr/lib/libSystem.B.dylib <WFCertificateProviderContext, WFContextPresenting>
 @property  NSArray *certificateChain
 @property  ^{__SecTrust=} certificateTrust
 @property  WFNetworkProfile *profile
 @property  WFNetworkScanRecord *network
 @property  long long requestedFields
 @property  @? completionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  UIViewController<WFNetworkView> *provider
 @property  BOOL needsDismissal

  // instance methods
  -[WFCertificateContext dealloc]
  -[WFCertificateContext .cxx_destruct]
  -[WFCertificateContext cancel]
  -[WFCertificateContext setProvider:]
  -[WFCertificateContext network]
  -[WFCertificateContext setNetwork:]
  -[WFCertificateContext profile]
  -[WFCertificateContext setProfile:]
  -[WFCertificateContext completionHandler]
  -[WFCertificateContext setCompletionHandler:]
  -[WFCertificateContext provider]
  -[WFCertificateContext certificateChain]
  -[WFCertificateContext accept]
  -[WFCertificateContext requestedFields]
  -[WFCertificateContext setRequestedFields:]
  -[WFCertificateContext certificateTrust]
  -[WFCertificateContext setCertificateTrust:]
  -[WFCertificateContext setCertificateChain:]
  -[WFCertificateContext initWithNetwork:profile:certificateChain:]
  -[WFCertificateContext needsDismissal]
  -[WFCertificateContext launchSettings]


WFCredentialsContext : NSObject /usr/lib/libSystem.B.dylib <SFPasswordSharingServiceDelegate, WFCredentialsProviderContext, WFContextPresenting>
 @property  WFNetworkProfile *profile
 @property  WFNetworkScanRecord *network
 @property  long long requestedFields
 @property  @? providerCallback
 @property  NSArray *availableTLSIdentities
 @property  BOOL enterprise
 @property  SFPasswordSharingService *passwordSharingService
 @property  BOOL shouldReactivatePasswordSharing
 @property  BOOL weakSecurity
 @property  long long availableAuthTraits
 @property  BOOL passwordSharingSupported
 @property  @? completionHandler
 @property  @? cancellationHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  NSString *username
 @property  UIViewController<WFNetworkView> *provider
 @property  BOOL needsDismissal

  // instance methods
  -[WFCredentialsContext dealloc]
  -[WFCredentialsContext .cxx_destruct]
  -[WFCredentialsContext cancel]
  -[WFCredentialsContext setProvider:]
  -[WFCredentialsContext setCancellationHandler:]
  -[WFCredentialsContext cancellationHandler]
  -[WFCredentialsContext finishWithError:]
  -[WFCredentialsContext network]
  -[WFCredentialsContext setNetwork:]
  -[WFCredentialsContext profile]
  -[WFCredentialsContext setProfile:]
  -[WFCredentialsContext username]
  -[WFCredentialsContext completionHandler]
  -[WFCredentialsContext setCompletionHandler:]
  -[WFCredentialsContext provider]
  -[WFCredentialsContext securityMode]
  -[WFCredentialsContext service:receivedNetworkInfo:]
  -[WFCredentialsContext service:shouldPromptForNetwork:]
  -[WFCredentialsContext appWillEnterForeground:]
  -[WFCredentialsContext requestedFields]
  -[WFCredentialsContext setRequestedFields:]
  -[WFCredentialsContext appDidEnterBackground:]
  -[WFCredentialsContext appWillResignActive:]
  -[WFCredentialsContext appDidBecomeActive:]
  -[WFCredentialsContext initWithNetwork:profile:]
  -[WFCredentialsContext gatherCredentials:]
  -[WFCredentialsContext isEnterprise]
  -[WFCredentialsContext finishWithError:forNetwork:profile:]
  -[WFCredentialsContext initWithNetwork:profile:authTraits:]
  -[WFCredentialsContext setPasswordSharingSupported:]
  -[WFCredentialsContext needsDismissal]
  -[WFCredentialsContext validateCredentials]
  -[WFCredentialsContext validatePassword]
  -[WFCredentialsContext activatePasswordSharing]
  -[WFCredentialsContext deactivatePasswordSharingWithReactivation:]
  -[WFCredentialsContext launchSettings]
  -[WFCredentialsContext isPasswordSharingSupported]
  -[WFCredentialsContext availableTLSIdentities]
  -[WFCredentialsContext isWeakSecurity]
  -[WFCredentialsContext availableAuthTraits]
  -[WFCredentialsContext setAvailableTLSIdentities:]
  -[WFCredentialsContext setAvailableAuthTraits:]
  -[WFCredentialsContext setEnterprise:]
  -[WFCredentialsContext providerCallback]
  -[WFCredentialsContext setProviderCallback:]
  -[WFCredentialsContext passwordSharingService]
  -[WFCredentialsContext shouldReactivatePasswordSharing]
  -[WFCredentialsContext setPasswordSharingService:]
  -[WFCredentialsContext setShouldReactivatePasswordSharing:]
  -[WFCredentialsContext setWeakSecurity:]


WFSetupViewProvider : WFSettingsViewProvider
  // instance methods
  -[WFSetupViewProvider credentialsViewControllerWithContext:]
  -[WFSetupViewProvider otherNetworkViewControllerWithContext:]
  -[WFSetupViewProvider networkDetailsViewControllerWithContext:]


WFErrorContext : NSObject /usr/lib/libSystem.B.dylib <WFErrorProviderContext, WFContextPresenting>
 @property  NSError *error
 @property  <WFNetworkListRecord> *network
 @property  @? completionHandler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  long long requestedFields
 @property  UIViewController<WFNetworkView> *provider
 @property  BOOL needsDismissal

  // instance methods
  -[WFErrorContext .cxx_destruct]
  -[WFErrorContext error]
  -[WFErrorContext cancel]
  -[WFErrorContext setError:]
  -[WFErrorContext setProvider:]
  -[WFErrorContext network]
  -[WFErrorContext setNetwork:]
  -[WFErrorContext completionHandler]
  -[WFErrorContext setCompletionHandler:]
  -[WFErrorContext provider]
  -[WFErrorContext requestedFields]
  -[WFErrorContext initWithAssociationError:network:]
  -[WFErrorContext needsDismissal]
  -[WFErrorContext _userInfoForAssociationError:networkName:]


WFSettingsProxy : NSObject /usr/lib/libSystem.B.dylib <WFSettingsPersistable>
 @property  NSString *server
 @property  NSString *port
 @property  NSString *username
 @property  NSString *autoConfigureURL
 @property  NSDictionary *items
 @property  BOOL customProxy
 @property  BOOL authenticated
 @property  BOOL autoConfigured
 @property  BOOL autoDiscoveryEnabled
 @property  NSString *password
 @property  BOOL automatic
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[WFSettingsProxy defaultProxyConfiguration]
  +[WFSettingsProxy offConfig]

  // instance methods
  -[WFSettingsProxy port]
  -[WFSettingsProxy password]
  -[WFSettingsProxy .cxx_destruct]
  -[WFSettingsProxy initWithDictionary:]
  -[WFSettingsProxy protocol]
  -[WFSettingsProxy setPort:]
  -[WFSettingsProxy setPassword:]
  -[WFSettingsProxy setServer:]
  -[WFSettingsProxy server]
  -[WFSettingsProxy items]
  -[WFSettingsProxy setItems:]
  -[WFSettingsProxy username]
  -[WFSettingsProxy setUsername:]
  -[WFSettingsProxy setAuthenticated:]
  -[WFSettingsProxy authenticated]
  -[WFSettingsProxy isAutomatic]
  -[WFSettingsProxy autoConfigureURL]
  -[WFSettingsProxy customProxy]
  -[WFSettingsProxy initDefaultConfig]
  -[WFSettingsProxy autoConfigured]
  -[WFSettingsProxy autoDiscoveryEnabled]
  -[WFSettingsProxy initWithManualServer:port:username:password:]
  -[WFSettingsProxy initWithAutoConfigureURL:]
  -[WFSettingsProxy setAutoConfigureURL:]
  -[WFSettingsProxy setCustomProxy:]
  -[WFSettingsProxy setAutoConfigured:]
  -[WFSettingsProxy setAutoDiscoveryEnabled:]


WFJoinProxy : NSObject /usr/lib/libSystem.B.dylib <WFWiFiJoinProxy>
 @property  @? handler
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription
 @property  ^{__WiFiDeviceClient=} device

  // instance methods
  -[WFJoinProxy handler]
  -[WFJoinProxy .cxx_destruct]
  -[WFJoinProxy setHandler:]
  -[WFJoinProxy device]
  -[WFJoinProxy setDevice:]
  -[WFJoinProxy joinNetwork:handler:]
  -[WFJoinProxy _joinComplete:userInfo:network:]


WFScanManager : NSObject /usr/lib/libSystem.B.dylib
 @property  long long state
 @property  <WFScanManagerDelegate> *delegate
 @property  double scanInterval
 @property  WFClient *wifiClient
 @property  NSMutableSet *networks
 @property  NSMutableArray *scanQueue
 @property  NSObject<OS_dispatch_queue> *internalQueue
 @property  NSObject<OS_dispatch_queue> *scanDispatchQueue
 @property  @? singleScanBlock
 @property  NSMutableSet *hotspotPluginNetworks
 @property  BOOL supportsHotspotHelper
 @property  BOOL supportsUnfilteredScanning
 @property  BOOL hotspotHelperScanning
 @property  unsigned long consecutiveZeroFilteredScanResults
 @property  unsigned long consecutiveZeroUnFilteredScanResults
 @property  BOOL doUnFilteredScanning

  // instance methods
  -[WFScanManager init]
  -[WFScanManager delegate]
  -[WFScanManager setDelegate:]
  -[WFScanManager .cxx_destruct]
  -[WFScanManager pause]
  -[WFScanManager resume]
  -[WFScanManager stop]
  -[WFScanManager start]
  -[WFScanManager state]
  -[WFScanManager setState:]
  -[WFScanManager networks]
  -[WFScanManager setNetworks:]
  -[WFScanManager internalQueue]
  -[WFScanManager setInternalQueue:]
  -[WFScanManager scanInterval]
  -[WFScanManager setScanInterval:]
  -[WFScanManager _knownNetworks]
  -[WFScanManager _isScanning]
  -[WFScanManager scanQueue]
  -[WFScanManager setScanQueue:]
  -[WFScanManager _scan]
  -[WFScanManager wifiClient]
  -[WFScanManager setWifiClient:]
  -[WFScanManager initWithClient:scanInterval:delegate:]
  -[WFScanManager hotspotHelperForScanRecord:]
  -[WFScanManager _startHotspotPluginScan]
  -[WFScanManager _cancelQueuedScan]
  -[WFScanManager _stopNetworkPluginScan]
  -[WFScanManager _queueScan]
  -[WFScanManager setSingleScanBlock:]
  -[WFScanManager singleScanBlock]
  -[WFScanManager _scanningWillStart]
  -[WFScanManager _processNextScan]
  -[WFScanManager _scanningDidFinishWithError:]
  -[WFScanManager supportsUnfilteredScanning]
  -[WFScanManager scanDispatchQueue]
  -[WFScanManager _updatePartialScanResults:]
  -[WFScanManager _checkForNoNetworksFound]
  -[WFScanManager hotspotPluginNetworks]
  -[WFScanManager supportsHotspotHelper]
  -[WFScanManager hotspotHelperScanning]
  -[WFScanManager setHotspotPluginNetworks:]
  -[WFScanManager setHotspotHelperScanning:]
  -[WFScanManager consecutiveZeroFilteredScanResults]
  -[WFScanManager setConsecutiveZeroFilteredScanResults:]
  -[WFScanManager consecutiveZeroUnFilteredScanResults]
  -[WFScanManager setConsecutiveZeroUnFilteredScanResults:]
  -[WFScanManager doUnFilteredScanning]
  -[WFScanManager setDoUnFilteredScanning:]
  -[WFScanManager setScanDispatchQueue:]
  -[WFScanManager setSupportsHotspotHelper:]
  -[WFScanManager setSupportsUnfilteredScanning:]


WFGasOperation : WFOperation
 @property  <WFWiFiGasProxy> *gasProxy
 @property  NSSet *networks
 @property  NSSet *results
 @property  unsigned long elements

  // instance methods
  -[WFGasOperation .cxx_destruct]
  -[WFGasOperation results]
  -[WFGasOperation start]
  -[WFGasOperation elements]
  -[WFGasOperation setElements:]
  -[WFGasOperation setResults:]
  -[WFGasOperation networks]
  -[WFGasOperation setNetworks:]
  -[WFGasOperation initWithGasProxy:networks:elements:]
  -[WFGasOperation _processGasResults:error:]
  -[WFGasOperation gasProxy]
  -[WFGasOperation setGasProxy:]


WFSettingsIPV4 : NSObject /usr/lib/libSystem.B.dylib <WFSettingsPersistable>
 @property  long long method
 @property  NSArray *addresses
 @property  NSArray *subnetMasks
 @property  NSString *router
 @property  NSString *dhcpClientID
 @property  NSDictionary *items
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[WFSettingsIPV4 automaticConfig]
  +[WFSettingsIPV4 bootPConfig]

  // instance methods
  -[WFSettingsIPV4 .cxx_destruct]
  -[WFSettingsIPV4 initWithDictionary:]
  -[WFSettingsIPV4 protocol]
  -[WFSettingsIPV4 method]
  -[WFSettingsIPV4 setMethod:]
  -[WFSettingsIPV4 items]
  -[WFSettingsIPV4 setItems:]
  -[WFSettingsIPV4 addresses]
  -[WFSettingsIPV4 setAddresses:]
  -[WFSettingsIPV4 subnetMasks]
  -[WFSettingsIPV4 router]
  -[WFSettingsIPV4 setRouter:]
  -[WFSettingsIPV4 dhcpClientID]
  -[WFSettingsIPV4 setDhcpClientID:]
  -[WFSettingsIPV4 initWithMethod:addresses:subnetMasks:router:dhcpClientID:]
  -[WFSettingsIPV4 setSubnetMasks:]


WFErrorPromptOperation : WFUserPromptOperation <WFNetworkView>
 @property  <WFErrorProviderContext> *context
 @property  BOOL wantsModalPresentation

  // class methods
  +[WFErrorPromptOperation errorPromptOperationWithContext:]

  // instance methods
  -[WFErrorPromptOperation .cxx_destruct]
  -[WFErrorPromptOperation context]
  -[WFErrorPromptOperation setContext:]


WFPersonalHotspotStateMonitor : NSObject /usr/lib/libSystem.B.dylib
 @property  WFClient *client
 @property  NSObject<OS_dispatch_queue> *internalQueue
 @property  NSRunLoop *callbackRunLoop
 @property  NSThread *callbackThread

  // instance methods
  -[WFPersonalHotspotStateMonitor init]
  -[WFPersonalHotspotStateMonitor dealloc]
  -[WFPersonalHotspotStateMonitor .cxx_destruct]
  -[WFPersonalHotspotStateMonitor client]
  -[WFPersonalHotspotStateMonitor setClient:]
  -[WFPersonalHotspotStateMonitor internalQueue]
  -[WFPersonalHotspotStateMonitor setInternalQueue:]
  -[WFPersonalHotspotStateMonitor callbackThread]
  -[WFPersonalHotspotStateMonitor setCallbackThread:]
  -[WFPersonalHotspotStateMonitor callbackRunLoop]
  -[WFPersonalHotspotStateMonitor setCallbackRunLoop:]
  -[WFPersonalHotspotStateMonitor asyncMISDiscoveryState:]
  -[WFPersonalHotspotStateMonitor setMISDiscoveryState:immediateDisable:]
  -[WFPersonalHotspotStateMonitor _spawnManagerCallbackThread]
  -[WFPersonalHotspotStateMonitor _runManagerCallbackThread]


WFJoinOperation : WFOperation
 @property  WFNetworkScanRecord *network
 @property  <WFWiFiJoinProxy> *joinProxy
 @property  WFNetworkProfile *profile

  // instance methods
  -[WFJoinOperation .cxx_destruct]
  -[WFJoinOperation start]
  -[WFJoinOperation network]
  -[WFJoinOperation setNetwork:]
  -[WFJoinOperation profile]
  -[WFJoinOperation setProfile:]
  -[WFJoinOperation joinNetworkRef:]
  -[WFJoinOperation joinProxy]
  -[WFJoinOperation initWithJoinProxy:network:profile:]
  -[WFJoinOperation setJoinProxy:]


WFHotspotInterface : NSObject /usr/lib/libSystem.B.dylib <SFRemoteHotspotSessionDelegate>
 @property  NSObject<OS_dispatch_queue> *internalQueue
 @property  BOOL scanning
 @property  NSSet *networks
 @property  SFRemoteHotspotSession *hotspotSession
 @property  <WFHotspotInterfaceDelegate> *delegate
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFHotspotInterface init]
  -[WFHotspotInterface delegate]
  -[WFHotspotInterface setDelegate:]
  -[WFHotspotInterface .cxx_destruct]
  -[WFHotspotInterface networks]
  -[WFHotspotInterface setNetworks:]
  -[WFHotspotInterface internalQueue]
  -[WFHotspotInterface setInternalQueue:]
  -[WFHotspotInterface stopBrowsing]
  -[WFHotspotInterface startBrowsing]
  -[WFHotspotInterface session:updatedFoundDevices:]
  -[WFHotspotInterface isScanning]
  -[WFHotspotInterface setScanning:]
  -[WFHotspotInterface enableHotspot:error:]
  -[WFHotspotInterface hotspotSession]
  -[WFHotspotInterface _stopBrowsingRemoveCache:]
  -[WFHotspotInterface updateNetworksWithHotspots:]
  -[WFHotspotInterface setHotspotSession:]


WFGetSettingsOperation : WFOperation
 @property  NSString *ssid
 @property  ^{__SCPreferences=} prefs
 @property  NSArray *settings
 @property  NSOperationQueue *keychainQueue

  // instance methods
  -[WFGetSettingsOperation dealloc]
  -[WFGetSettingsOperation .cxx_destruct]
  -[WFGetSettingsOperation prefs]
  -[WFGetSettingsOperation start]
  -[WFGetSettingsOperation settings]
  -[WFGetSettingsOperation setSettings:]
  -[WFGetSettingsOperation ssid]
  -[WFGetSettingsOperation setSsid:]
  -[WFGetSettingsOperation initWithSSID:]
  -[WFGetSettingsOperation setPrefs:]
  -[WFGetSettingsOperation keychainQueue]
  -[WFGetSettingsOperation setKeychainQueue:]
  -[WFGetSettingsOperation initWithNetworkProfile:]


WFHotspotProfile : WFNetworkProfile
  // instance methods
  -[WFHotspotProfile initWithProfile:anqpResponse:]


WFSettingsViewProvider : NSObject /usr/lib/libSystem.B.dylib <WFNetworkViewProvider>
 @property  NSMapTable *credentialsViewControllerMap
 @property  WFSettingsController *settingsController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFSettingsViewProvider init]
  -[WFSettingsViewProvider .cxx_destruct]
  -[WFSettingsViewProvider settingsController]
  -[WFSettingsViewProvider credentialsViewControllerWithContext:]
  -[WFSettingsViewProvider certificateViewControllerWithContext:]
  -[WFSettingsViewProvider networkErrorViewControllerWithContext:]
  -[WFSettingsViewProvider otherNetworkViewControllerWithContext:]
  -[WFSettingsViewProvider networkDetailsViewControllerWithContext:]
  -[WFSettingsViewProvider didDismissNetworkViewController:forContext:]
  -[WFSettingsViewProvider setSettingsController:]
  -[WFSettingsViewProvider credentialsViewControllerMap]
  -[WFSettingsViewProvider setCredentialsViewControllerMap:]


WFSettingsDNS : NSObject /usr/lib/libSystem.B.dylib <WFSettingsPersistable>
 @property  NSArray *serverAddresses
 @property  NSArray *searchDomains
 @property  NSDictionary *items
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[WFSettingsDNS automaticConfig]

  // instance methods
  -[WFSettingsDNS .cxx_destruct]
  -[WFSettingsDNS initWithDictionary:]
  -[WFSettingsDNS protocol]
  -[WFSettingsDNS items]
  -[WFSettingsDNS setItems:]
  -[WFSettingsDNS searchDomains]
  -[WFSettingsDNS setSearchDomains:]
  -[WFSettingsDNS setServerAddresses:]
  -[WFSettingsDNS serverAddresses]
  -[WFSettingsDNS initWithServerAddresses:searchDomains:]


WFIPMonitor : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *serviceID
 @property  NSString *interfaceName
 @property  ^{__SCDynamicStore=} storeRef
 @property  ^{__SCPreferences=} prefsRef
 @property  ^{__SCDynamicStore=} networkServiceStore
 @property  NSObject<OS_dispatch_queue> *queue
 @property  NSString *bundleIdentifier

  // instance methods
  -[WFIPMonitor init]
  -[WFIPMonitor dealloc]
  -[WFIPMonitor setQueue:]
  -[WFIPMonitor queue]
  -[WFIPMonitor .cxx_destruct]
  -[WFIPMonitor bundleIdentifier]
  -[WFIPMonitor setBundleIdentifier:]
  -[WFIPMonitor interfaceName]
  -[WFIPMonitor setInterfaceName:]
  -[WFIPMonitor dnsSearchDomains]
  -[WFIPMonitor initWithInterfaceName:]
  -[WFIPMonitor serviceID]
  -[WFIPMonitor dnsServerAddresses]
  -[WFIPMonitor setServiceID:]
  -[WFIPMonitor ipv4Addresses]
  -[WFIPMonitor ipv6Addresses]
  -[WFIPMonitor personalHotspotHasClients]
  -[WFIPMonitor hasValidIPAddress]
  -[WFIPMonitor renewLease]
  -[WFIPMonitor __wifiServiceID]
  -[WFIPMonitor monitorNetworkServiceID:]
  -[WFIPMonitor ipv4ConfigMethod]
  -[WFIPMonitor ipv4Router]
  -[WFIPMonitor hasValidIPv4Address]
  -[WFIPMonitor hasValidIPv6Address]
  -[WFIPMonitor ipv4SubnetMasks]
  -[WFIPMonitor prefsRef]
  -[WFIPMonitor __ipv6SetupConfig]
  -[WFIPMonitor __ipv4SetupConfig]
  -[WFIPMonitor __ipv4StateConfig]
  -[WFIPMonitor __dhcpInfo]
  -[WFIPMonitor __ipv6StateConfig]
  -[WFIPMonitor isUsingCustomDNSSettings]
  -[WFIPMonitor __dnsSetupConfig]
  -[WFIPMonitor __dnsStateConfig]
  -[WFIPMonitor __proxiesSetupConfig]
  -[WFIPMonitor storeRef]
  -[WFIPMonitor _postChangesNotification:]
  -[WFIPMonitor ipv6ConfigMethod]
  -[WFIPMonitor __ipv4InterfaceStateConfig]
  -[WFIPMonitor ipv4DHCPClientID]
  -[WFIPMonitor DHCPLeaseExpirationDate]
  -[WFIPMonitor ipv6Router]
  -[WFIPMonitor ipv6PrefixLengths]
  -[WFIPMonitor dnsDomainName]
  -[WFIPMonitor httpProxyServer]
  -[WFIPMonitor httpProxyPort]
  -[WFIPMonitor httpProxyIsAuthenticated]
  -[WFIPMonitor httpProxyUsername]
  -[WFIPMonitor httpProxyAutoConfigured]
  -[WFIPMonitor httpProxyAutoConfigURL]
  -[WFIPMonitor isUsingCustomProxySetting]
  -[WFIPMonitor globalProxyIsEnabled]
  -[WFIPMonitor setStoreRef:]
  -[WFIPMonitor setPrefsRef:]
  -[WFIPMonitor networkServiceStore]
  -[WFIPMonitor setNetworkServiceStore:]


_AWDWiFiUIScanSession : PBCodable /System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasDuration
 @property  unsigned int duration
 @property  NSMutableArray *counts
 @property  BOOL hasProcess
 @property  NSString *process

  // class methods
  +[_AWDWiFiUIScanSession countsType]

  // instance methods
  -[_AWDWiFiUIScanSession isEqual:]
  -[_AWDWiFiUIScanSession copyWithZone:]
  -[_AWDWiFiUIScanSession .cxx_destruct]
  -[_AWDWiFiUIScanSession dictionaryRepresentation]
  -[_AWDWiFiUIScanSession timestamp]
  -[_AWDWiFiUIScanSession duration]
  -[_AWDWiFiUIScanSession hasTimestamp]
  -[_AWDWiFiUIScanSession setTimestamp:]
  -[_AWDWiFiUIScanSession writeTo:]
  -[_AWDWiFiUIScanSession mergeFrom:]
  -[_AWDWiFiUIScanSession readFrom:]
  -[_AWDWiFiUIScanSession copyTo:]
  -[_AWDWiFiUIScanSession process]
  -[_AWDWiFiUIScanSession setDuration:]
  -[_AWDWiFiUIScanSession setProcess:]
  -[_AWDWiFiUIScanSession setHasTimestamp:]
  -[_AWDWiFiUIScanSession hasDuration]
  -[_AWDWiFiUIScanSession setHasDuration:]
  -[_AWDWiFiUIScanSession hasProcess]
  -[_AWDWiFiUIScanSession counts]
  -[_AWDWiFiUIScanSession setCounts:]
  -[_AWDWiFiUIScanSession addCounts:]
  -[_AWDWiFiUIScanSession countsCount]
  -[_AWDWiFiUIScanSession clearCounts]
  -[_AWDWiFiUIScanSession countsAtIndex:]


WFKnownNetworksListController : NSObject /usr/lib/libSystem.B.dylib <WFKnownNetworksViewControllerDelegate>
 @property  WFKnownNetworkStore *knownNetworkStore
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFKnownNetworksListController .cxx_destruct]
  -[WFKnownNetworksListController knownNetworkStore]
  -[WFKnownNetworksListController initWithKnownNetworkStore:]
  -[WFKnownNetworksListController pushKnownNetworksOnParentViewController:]
  -[WFKnownNetworksListController setKnownNetworkStore:]
  -[WFKnownNetworksListController getKnownNetworksList]
  -[WFKnownNetworksListController removeKnownNetworkWithSsid:]
  -[WFKnownNetworksListController getSecurityTypeStringForNetwork:]
  -[WFKnownNetworksListController getPasswordForNetwork:]
  -[WFKnownNetworksListController isNetworkHidden:]
  -[WFKnownNetworksListController getDateAddedForNetwork:]
  -[WFKnownNetworksListController getDateLastJoinedForNetwork:]
  -[WFKnownNetworksListController isNetworkBlacklisted:]
  -[WFKnownNetworksListController getScoreForNetwork:]
  -[WFKnownNetworksListController getGeoTagsForNetwork:]


WFWAPICertificatePromptOperation : WFOperation <WFOtherNetworkViewControllerDelegate>
 @property  BOOL userCancelled
 @property  ^{__SecIdentity=} WAPIRootCertificate
 @property  NSData *WAPIIdentityPEMBlob
 @property  UIViewController *rootViewController
 @property  WFNetworkScanRecord *network
 @property  WFOtherNetworkViewController *promptViewController
 @property  UINavigationController *navigationController
 @property  NSArray *wapiIdentityMapping
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFWAPICertificatePromptOperation .cxx_destruct]
  -[WFWAPICertificatePromptOperation start]
  -[WFWAPICertificatePromptOperation finish]
  -[WFWAPICertificatePromptOperation network]
  -[WFWAPICertificatePromptOperation setNetwork:]
  -[WFWAPICertificatePromptOperation setRootViewController:]
  -[WFWAPICertificatePromptOperation rootViewController]
  -[WFWAPICertificatePromptOperation navigationController]
  -[WFWAPICertificatePromptOperation setNavigationController:]
  -[WFWAPICertificatePromptOperation initWithRootViewController:network:]
  -[WFWAPICertificatePromptOperation userCancelled]
  -[WFWAPICertificatePromptOperation WAPIRootCertificate]
  -[WFWAPICertificatePromptOperation WAPIIdentityPEMBlob]
  -[WFWAPICertificatePromptOperation otherNetworkViewControllerUserDidTapJoin:]
  -[WFWAPICertificatePromptOperation otherNetworkViewControllerUserDidTapCancel:]
  -[WFWAPICertificatePromptOperation otherNetworkViewController:isValidPassword:]
  -[WFWAPICertificatePromptOperation setPromptViewController:]
  -[WFWAPICertificatePromptOperation promptViewController]
  -[WFWAPICertificatePromptOperation setUserCancelled:]
  -[WFWAPICertificatePromptOperation setWAPIIdentityPEMBlob:]
  -[WFWAPICertificatePromptOperation setWAPIRootCertificate:]
  -[WFWAPICertificatePromptOperation wapiIdentityMapping]
  -[WFWAPICertificatePromptOperation setWapiIdentityMapping:]


WFScanOperation : WFOperation
 @property  NSMutableSet *scanResults
 @property  WFScanRequest *request
 @property  NSDictionary *scanParameters
 @property  NSSet *results
 @property  NSString *targetSSID

  // instance methods
  -[WFScanOperation .cxx_destruct]
  -[WFScanOperation cancel]
  -[WFScanOperation results]
  -[WFScanOperation start]
  -[WFScanOperation finish]
  -[WFScanOperation setRequest:]
  -[WFScanOperation request]
  -[WFScanOperation initWithRequest:]
  -[WFScanOperation setScanResults:]
  -[WFScanOperation scanResults]
  -[WFScanOperation scanParameters]
  -[WFScanOperation scanDidFinishWithResults:error:]
  -[WFScanOperation targetSSID]
  -[WFScanOperation setTargetSSID:]
  -[WFScanOperation setScanParameters:]


WFScanMetricsManager : NSObject /usr/lib/libSystem.B.dylib
 @property  NSMutableDictionary *sectionCounts
 @property  NSDate *timestamp
 @property  BOOL submited

  // instance methods
  -[WFScanMetricsManager init]
  -[WFScanMetricsManager .cxx_destruct]
  -[WFScanMetricsManager reset]
  -[WFScanMetricsManager timestamp]
  -[WFScanMetricsManager setTimestamp:]
  -[WFScanMetricsManager submit]
  -[WFScanMetricsManager ingestScanResults:]
  -[WFScanMetricsManager sectionCounts]
  -[WFScanMetricsManager sectionNameForRecord:]
  -[WFScanMetricsManager setSectionCounts:]
  -[WFScanMetricsManager setSubmited:]
  -[WFScanMetricsManager submited]


WFPickerViewProvider : NSObject /usr/lib/libSystem.B.dylib <WFNetworkView, WFNetworkViewProvider>
 @property  UIViewController *rootViewController
 @property  <WFPickerViewProviderDelegate> *delegate
 @property  BOOL wantsModalPresentation
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFPickerViewProvider delegate]
  -[WFPickerViewProvider setDelegate:]
  -[WFPickerViewProvider .cxx_destruct]
  -[WFPickerViewProvider setRootViewController:]
  -[WFPickerViewProvider rootViewController]
  -[WFPickerViewProvider initWithRootViewController:]
  -[WFPickerViewProvider wantsModalPresentation]
  -[WFPickerViewProvider presentNetworkViewController:forContext:]
  -[WFPickerViewProvider credentialsViewControllerWithContext:]
  -[WFPickerViewProvider certificateViewControllerWithContext:]
  -[WFPickerViewProvider networkErrorViewControllerWithContext:]
  -[WFPickerViewProvider otherNetworkViewControllerWithContext:]
  -[WFPickerViewProvider networkDetailsViewControllerWithContext:]
  -[WFPickerViewProvider didDismissNetworkViewController:forContext:]
  -[WFPickerViewProvider _canHandleCredentialsContext:]
  -[WFPickerViewProvider _promptForEnterpriseJoin:]


_AWDWiFiUIScanCount : PBCodable /System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices <NSCopying>
 @property  BOOL hasSection
 @property  NSString *section
 @property  BOOL hasMax
 @property  unsigned int max

  // instance methods
  -[_AWDWiFiUIScanCount isEqual:]
  -[_AWDWiFiUIScanCount copyWithZone:]
  -[_AWDWiFiUIScanCount .cxx_destruct]
  -[_AWDWiFiUIScanCount dictionaryRepresentation]
  -[_AWDWiFiUIScanCount setMax:]
  -[_AWDWiFiUIScanCount max]
  -[_AWDWiFiUIScanCount writeTo:]
  -[_AWDWiFiUIScanCount mergeFrom:]
  -[_AWDWiFiUIScanCount readFrom:]
  -[_AWDWiFiUIScanCount copyTo:]
  -[_AWDWiFiUIScanCount section]
  -[_AWDWiFiUIScanCount setSection:]
  -[_AWDWiFiUIScanCount setHasMax:]
  -[_AWDWiFiUIScanCount hasMax]
  -[_AWDWiFiUIScanCount hasSection]


WFHealthUIEvent : NSObject /usr/lib/libSystem.B.dylib <WFAWDEvent>
 @property  unsigned int metricIdentifier
 @property  PBCodable *metric
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[WFHealthUIEvent subtitleEventWithIssues:ssid:]
  +[WFHealthUIEvent tapLinkEventWithIssues:ssid:]
  +[WFHealthUIEvent detailEventWithIssues:ssid:]

  // instance methods
  -[WFHealthUIEvent .cxx_destruct]
  -[WFHealthUIEvent metric]
  -[WFHealthUIEvent setMetric:]
  -[WFHealthUIEvent metricIdentifier]
  -[WFHealthUIEvent setMetricIdentifier:]
  -[WFHealthUIEvent initWithEventType:issues:ssid:]


WFUserEvent : NSObject /usr/lib/libSystem.B.dylib <WFAWDEvent>
 @property  unsigned int metricIdentifier
 @property  PBCodable *metric
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[WFUserEvent eventWithType:state:]
  +[WFUserEvent eventWithType:]
  +[WFUserEvent eventWithType:stateEnum:]

  // instance methods
  -[WFUserEvent .cxx_destruct]
  -[WFUserEvent metric]
  -[WFUserEvent setMetric:]
  -[WFUserEvent _metricIdForType:]
  -[WFUserEvent metricIdentifier]
  -[WFUserEvent setMetricIdentifier:]
  -[WFUserEvent initWithType:state:stateEnum:]


WFHealthIssueOverrides : NSObject /usr/lib/libSystem.B.dylib
 @property  BOOL noInternetConnection
 @property  BOOL hiddenNetwork
 @property  BOOL commonSSID
 @property  BOOL legacyPHY
 @property  BOOL carrierNetwork
 @property  long long securityOverride

  // instance methods
  -[WFHealthIssueOverrides hiddenNetwork]
  -[WFHealthIssueOverrides securityOverride]
  -[WFHealthIssueOverrides noInternetConnection]
  -[WFHealthIssueOverrides legacyPHY]
  -[WFHealthIssueOverrides commonSSID]
  -[WFHealthIssueOverrides carrierNetwork]
  -[WFHealthIssueOverrides setNoInternetConnection:]
  -[WFHealthIssueOverrides setHiddenNetwork:]
  -[WFHealthIssueOverrides setCommonSSID:]
  -[WFHealthIssueOverrides setLegacyPHY:]
  -[WFHealthIssueOverrides setCarrierNetwork:]
  -[WFHealthIssueOverrides setSecurityOverride:]


WFSettingsController : NSObject /usr/lib/libSystem.B.dylib <WFNetworkSettingsViewControllerDataCoordinator>
 @property  WFMutableNetworkProfile *profile
 @property  WFNetworkSettingsConfig *config
 @property  WFNetworkSettingsViewController *settingsViewController
 @property  BOOL monitorIPChanges
 @property  WFIPMonitor *ipMonitor
 @property  NSOperationQueue *queue
 @property  BOOL cloudSyncRunning
 @property  WFDetailsContext *detailsContext
 @property  WFNetworkScanRecord *network
 @property  BOOL currentNetwork
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFSettingsController dealloc]
  -[WFSettingsController setQueue:]
  -[WFSettingsController queue]
  -[WFSettingsController .cxx_destruct]
  -[WFSettingsController config]
  -[WFSettingsController setConfig:]
  -[WFSettingsController network]
  -[WFSettingsController setNetwork:]
  -[WFSettingsController profile]
  -[WFSettingsController setProfile:]
  -[WFSettingsController setCurrentNetwork:]
  -[WFSettingsController settingsViewController]
  -[WFSettingsController isCurrentNetwork]
  -[WFSettingsController _ipStateDidChange:]
  -[WFSettingsController ipMonitor]
  -[WFSettingsController setDetailsContext:]
  -[WFSettingsController detailsContext]
  -[WFSettingsController setIpMonitor:]
  -[WFSettingsController initWithDetailsContext:]
  -[WFSettingsController _baseConfigForNetwork:current:]
  -[WFSettingsController _refreshSettingsConfig:]
  -[WFSettingsController _currentNetworkDidChange:]
  -[WFSettingsController _startMontoringIPChanges]
  -[WFSettingsController _stopMonitoringIPChanges]
  -[WFSettingsController _profileForNetwork:]
  -[WFSettingsController cloudSyncRunning]
  -[WFSettingsController networkSettingsViewController:saveConfig:errorHandler:]
  -[WFSettingsController setSettingsViewController:]
  -[WFSettingsController monitorIPChanges]
  -[WFSettingsController setMonitorIPChanges:]
  -[WFSettingsController setCloudSyncRunning:]


WFEnterpriseJoinPromptOperation : WFUserPromptOperation <WFCredentialsProvider>
 @property  BOOL wantsModalPresentation
 @property  ^{__SecIdentity=} TLSIdentity
 @property  NSString *username
 @property  NSString *password

  // class methods
  +[WFEnterpriseJoinPromptOperation enterpriseJoinPromptOperationWithDeviceCapability:]

  // instance methods
  -[WFEnterpriseJoinPromptOperation password]
  -[WFEnterpriseJoinPromptOperation .cxx_destruct]
  -[WFEnterpriseJoinPromptOperation username]
  -[WFEnterpriseJoinPromptOperation TLSIdentity]


WFANQPQueryResponse : NSObject /usr/lib/libSystem.B.dylib
 @property  NSArray *cellNetworkInfo
 @property  NSArray *roamingConsortium
 @property  NSArray *domains
 @property  WFNetworkProfile *profile
 @property  NSString *ssid
 @property  NSString *bssid
 @property  NSString *operatorName
 @property  long long channel

  // instance methods
  -[WFANQPQueryResponse isEqual:]
  -[WFANQPQueryResponse .cxx_destruct]
  -[WFANQPQueryResponse profile]
  -[WFANQPQueryResponse setProfile:]
  -[WFANQPQueryResponse channel]
  -[WFANQPQueryResponse domains]
  -[WFANQPQueryResponse ssid]
  -[WFANQPQueryResponse setSsid:]
  -[WFANQPQueryResponse setChannel:]
  -[WFANQPQueryResponse setBssid:]
  -[WFANQPQueryResponse bssid]
  -[WFANQPQueryResponse setDomains:]
  -[WFANQPQueryResponse operatorName]
  -[WFANQPQueryResponse setOperatorName:]
  -[WFANQPQueryResponse initWithProfile:ANQPResponse:]
  -[WFANQPQueryResponse isEqualToWFANQPResponse:]
  -[WFANQPQueryResponse cellNetworkInfo]
  -[WFANQPQueryResponse setCellNetworkInfo:]
  -[WFANQPQueryResponse roamingConsortium]
  -[WFANQPQueryResponse setRoamingConsortium:]


WFUserJoinEvent : NSObject /usr/lib/libSystem.B.dylib <WFAWDEvent>
 @property  unsigned int metricIdentifier
 @property  PBCodable *metric
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[WFUserJoinEvent joinEventWithSecurity:error:sectionCounts:sectionName:]
  +[WFUserJoinEvent joinEventWithType:security:error:]

  // instance methods
  -[WFUserJoinEvent .cxx_destruct]
  -[WFUserJoinEvent metric]
  -[WFUserJoinEvent setMetric:]
  -[WFUserJoinEvent _metricIdForType:]
  -[WFUserJoinEvent metricIdentifier]
  -[WFUserJoinEvent setMetricIdentifier:]
  -[WFUserJoinEvent _countMetricsFromSectionCounts:]
  -[WFUserJoinEvent initWithType:security:error:sectionCounts:sectionName:]


WFScanRequest : NSObject /usr/lib/libSystem.B.dylib
 @property  NSString *ssid
 @property  NSArray *channels
 @property  long long rssiThreshold
 @property  BOOL applyRssiThresholdFilter
 @property  unsigned long dwellTime
 @property  BOOL includeBSSList

  // class methods
  +[WFScanRequest scanRequestForSSID:channels:]
  +[WFScanRequest scanRequestForChannels:]

  // instance methods
  -[WFScanRequest init]
  -[WFScanRequest .cxx_destruct]
  -[WFScanRequest channels]
  -[WFScanRequest ssid]
  -[WFScanRequest setSsid:]
  -[WFScanRequest setChannels:]
  -[WFScanRequest rssiThreshold]
  -[WFScanRequest setRssiThreshold:]
  -[WFScanRequest setDwellTime:]
  -[WFScanRequest scanParameters]
  -[WFScanRequest setIncludeBSSList:]
  -[WFScanRequest setApplyRssiThresholdFilter:]
  -[WFScanRequest initWithSSID:channels:]
  -[WFScanRequest _defaultScanDictionary]
  -[WFScanRequest applyRssiThresholdFilter]
  -[WFScanRequest dwellTime]
  -[WFScanRequest includeBSSList]
  -[WFScanRequest _channelListFromArrayOfChannels:]


WFDiagnosticsTableViewController : UITableViewController /usr/lib/libMobileGestalt.dylib
 @property  <WFDiagnosticsProviderContext> *context
 @property  NSOrderedSet *sections
 @property  WFNetworkSettingsCellFactory *cellFactory
 @property  WFHyperlinkFooterView *linkFooterView

  // instance methods
  -[WFDiagnosticsTableViewController .cxx_destruct]
  -[WFDiagnosticsTableViewController context]
  -[WFDiagnosticsTableViewController setContext:]
  -[WFDiagnosticsTableViewController viewDidLoad]
  -[WFDiagnosticsTableViewController viewDidDisappear:]
  -[WFDiagnosticsTableViewController sections]
  -[WFDiagnosticsTableViewController tableView:numberOfRowsInSection:]
  -[WFDiagnosticsTableViewController tableView:cellForRowAtIndexPath:]
  -[WFDiagnosticsTableViewController numberOfSectionsInTableView:]
  -[WFDiagnosticsTableViewController tableView:titleForHeaderInSection:]
  -[WFDiagnosticsTableViewController tableView:titleForFooterInSection:]
  -[WFDiagnosticsTableViewController setSections:]
  -[WFDiagnosticsTableViewController tableView:viewForFooterInSection:]
  -[WFDiagnosticsTableViewController _refresh]
  -[WFDiagnosticsTableViewController _defaultSections]
  -[WFDiagnosticsTableViewController setCellFactory:]
  -[WFDiagnosticsTableViewController linkFooterView]
  -[WFDiagnosticsTableViewController cellFactory]
  -[WFDiagnosticsTableViewController initWithDiagnosticsContext:]
  -[WFDiagnosticsTableViewController setLinkFooterView:]


WFUserPromptOperation : WFOperation
 @property  long long result
 @property  NSDictionary *options
 @property  double timeout
 @property  unsigned long flags
 @property  NSDictionary *userResponse

  // class methods
  +[WFUserPromptOperation sharedMapTable]

  // instance methods
  -[WFUserPromptOperation options]
  -[WFUserPromptOperation .cxx_destruct]
  -[WFUserPromptOperation flags]
  -[WFUserPromptOperation start]
  -[WFUserPromptOperation result]
  -[WFUserPromptOperation setOptions:]
  -[WFUserPromptOperation setResult:]
  -[WFUserPromptOperation timeout]
  -[WFUserPromptOperation setTimeout:]
  -[WFUserPromptOperation setFlags:]
  -[WFUserPromptOperation userResponse]
  -[WFUserPromptOperation initWithOptions:timeout:flags:]
  -[WFUserPromptOperation initWithOptions:timeout:]
  -[WFUserPromptOperation _showPrompt]
  -[WFUserPromptOperation _notification:didFinishWithResponse:]


WFMISDisablePromptOperation : WFUserPromptOperation
  // class methods
  +[WFMISDisablePromptOperation misDisablePromptOperation]


WFSettingsIPV6 : NSObject /usr/lib/libSystem.B.dylib <WFSettingsPersistable>
 @property  long long method
 @property  NSArray *prefixLengths
 @property  NSArray *addresses
 @property  NSString *router
 @property  NSDictionary *items
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[WFSettingsIPV6 automaticConfig]
  +[WFSettingsIPV6 linkLocalConfig]

  // instance methods
  -[WFSettingsIPV6 .cxx_destruct]
  -[WFSettingsIPV6 initWithDictionary:]
  -[WFSettingsIPV6 protocol]
  -[WFSettingsIPV6 method]
  -[WFSettingsIPV6 setMethod:]
  -[WFSettingsIPV6 items]
  -[WFSettingsIPV6 setItems:]
  -[WFSettingsIPV6 addresses]
  -[WFSettingsIPV6 setAddresses:]
  -[WFSettingsIPV6 router]
  -[WFSettingsIPV6 setRouter:]
  -[WFSettingsIPV6 prefixLengths]
  -[WFSettingsIPV6 initWithMethod:addresses:prefixLengths:router:]
  -[WFSettingsIPV6 setPrefixLengths:]


_AWDWiFiUIJoinEvent : PBCodable /System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices <NSCopying>
 @property  BOOL hasTimestamp
 @property  unsigned long timestamp
 @property  BOOL hasProcess
 @property  NSString *process
 @property  BOOL hasSecurityType
 @property  unsigned int securityType
 @property  BOOL hasError
 @property  unsigned int error
 @property  BOOL hasSection
 @property  NSString *section
 @property  NSMutableArray *sectionCounts

  // class methods
  +[_AWDWiFiUIJoinEvent sectionCountsType]

  // instance methods
  -[_AWDWiFiUIJoinEvent isEqual:]
  -[_AWDWiFiUIJoinEvent copyWithZone:]
  -[_AWDWiFiUIJoinEvent .cxx_destruct]
  -[_AWDWiFiUIJoinEvent error]
  -[_AWDWiFiUIJoinEvent setError:]
  -[_AWDWiFiUIJoinEvent dictionaryRepresentation]
  -[_AWDWiFiUIJoinEvent timestamp]
  -[_AWDWiFiUIJoinEvent hasTimestamp]
  -[_AWDWiFiUIJoinEvent setTimestamp:]
  -[_AWDWiFiUIJoinEvent writeTo:]
  -[_AWDWiFiUIJoinEvent mergeFrom:]
  -[_AWDWiFiUIJoinEvent readFrom:]
  -[_AWDWiFiUIJoinEvent copyTo:]
  -[_AWDWiFiUIJoinEvent process]
  -[_AWDWiFiUIJoinEvent setSecurityType:]
  -[_AWDWiFiUIJoinEvent securityType]
  -[_AWDWiFiUIJoinEvent hasError]
  -[_AWDWiFiUIJoinEvent section]
  -[_AWDWiFiUIJoinEvent setSection:]
  -[_AWDWiFiUIJoinEvent setProcess:]
  -[_AWDWiFiUIJoinEvent setHasTimestamp:]
  -[_AWDWiFiUIJoinEvent setHasSecurityType:]
  -[_AWDWiFiUIJoinEvent hasSecurityType]
  -[_AWDWiFiUIJoinEvent hasProcess]
  -[_AWDWiFiUIJoinEvent setHasError:]
  -[_AWDWiFiUIJoinEvent hasSection]
  -[_AWDWiFiUIJoinEvent sectionCounts]
  -[_AWDWiFiUIJoinEvent setSectionCounts:]
  -[_AWDWiFiUIJoinEvent addSectionCounts:]
  -[_AWDWiFiUIJoinEvent sectionCountsCount]
  -[_AWDWiFiUIJoinEvent clearSectionCounts]
  -[_AWDWiFiUIJoinEvent sectionCountsAtIndex:]


WFTrustCertificateOperation : WFOperation <TrustCertificateViewControllerDelegate>
 @property  TrustCertificateViewController *trustVc
 @property  NSArray *certificateChain
 @property  BOOL accepted
 @property  UIViewController *rootViewController
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // instance methods
  -[WFTrustCertificateOperation .cxx_destruct]
  -[WFTrustCertificateOperation start]
  -[WFTrustCertificateOperation setRootViewController:]
  -[WFTrustCertificateOperation rootViewController]
  -[WFTrustCertificateOperation certificateChain]
  -[WFTrustCertificateOperation trustCertificateViewController:finishedWithReturnCode:]
  -[WFTrustCertificateOperation accepted]
  -[WFTrustCertificateOperation setAccepted:]
  -[WFTrustCertificateOperation setCertificateChain:]
  -[WFTrustCertificateOperation initWithCertificateChain:rootViewController:]
  -[WFTrustCertificateOperation setTrustVc:]
  -[WFTrustCertificateOperation trustVc]


WFNetworkSettingsConfig(WiFiKit)
	// instance methods
	-[WFNetworkSettingsConfig(WiFiKit) populateIPV4:]
	-[WFNetworkSettingsConfig(WiFiKit) populateIPV6:]
	-[WFNetworkSettingsConfig(WiFiKit) populateDNS:]
	-[WFNetworkSettingsConfig(WiFiKit) populateProxy:]

NSError(WiFiKit)
	// class methods
	+[NSError(WiFiKit) associationErrorWithReason:]
	+[NSError(WiFiKit) associationErrorWithCode:requiresPassword:signalStrength:]
	+[NSError(WiFiKit) associationErrorWithReason:userInfo:]
	+[NSError(WiFiKit) associationErrorWithCode:]
	+[NSError(WiFiKit) scanErrorWithReason:]
	+[NSError(WiFiKit) scanErrorWithCode:]

NSDictionary(WiFiKit)
	// instance methods
	-[NSDictionary(WiFiKit) plistString]

SFRemoteHotspotDevice(WiFiKit)
	// instance methods
	-[SFRemoteHotspotDevice(WiFiKit) cellularProtocolString]

AVExternalDevice(WiFiKit)
	// class methods
	+[AVExternalDevice(WiFiKit) isCarPlaySessionActive]

NSMutableSet(WFNetworkProfile)
	// instance methods
	-[NSMutableSet(WFNetworkProfile) removeNetworkProfile:]
	-[NSMutableSet(WFNetworkProfile) replaceNetworkProfile:]
	-[NSMutableSet(WFNetworkProfile) compareAndUpdateDuplicateScanRecords:]
	-[NSMutableSet(WFNetworkProfile) _equivalentExistingNetworkProfile:]

NSSet(WiFiKit)
	// instance methods
	-[NSSet(WiFiKit) hs20Networks]
	-[NSSet(WiFiKit) scanRecordWithSSID:]
	-[NSSet(WiFiKit) hiddenNetworkProfiles]
	-[NSSet(WiFiKit) logStringWithScanRecords]

NSArray(WiFiKit)
	// instance methods
	-[NSArray(WiFiKit) proxySettings]
	-[NSArray(WiFiKit) ipv4Settings]
	-[NSArray(WiFiKit) ipv6Settings]
	-[NSArray(WiFiKit) dnsSettings]
	-[NSArray(WiFiKit) _matchingItem:]

01 00 0900 /System/Library/Frameworks/AVFoundation.framework/AVFoundation: AVExternalDevice 
01 00 0800 /System/Library/PrivateFrameworks/WirelessDiagnostics.framework/WirelessDiagnostics: AWDServerConnection 
01 00 0100 /System/Library/PrivateFrameworks/AirPortAssistant.framework/AirPortAssistant: AirPortAssistantController 
01 00 0200 /System/Library/PrivateFrameworks/CarKit.framework/CarKit: CRPairedVehicleManager 
01 00 0340 /System/Library/PrivateFrameworks/SettingsCellularUI.framework/SettingsCellularUI: CTUIWirelessUsageAndAppPolicyController 
01 00 1d00 /System/Library/Frameworks/CoreServices.framework/CoreServices: LSApplicationWorkspace 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSBlockOperation 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSCountedSet 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMachPort 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMapTable 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableSet 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotification 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 1a00 /usr/lib/libobjc.A.dylib: NSObject 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperation 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSOperationQueue 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSPredicate 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSPropertyListSerialization 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSSet 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSSortDescriptor 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSTimer 
01 00 1c00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0b00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLCredential 
01 00 0b00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLCredentialStorage 
01 00 0b00 /System/Library/Frameworks/CFNetwork.framework/CFNetwork: NSURLProtectionSpace 
01 00 1900 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0700 /System/Library/Frameworks/Network.framework/Network: NWInterface 
01 00 0700 /System/Library/Frameworks/Network.framework/Network: NWParameters 
01 00 0700 /System/Library/Frameworks/Network.framework/Network: NWPathEvaluator 
01 00 0400 /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer: PBCodable 
01 00 1600 /System/Library/PrivateFrameworks/Sharing.framework/Sharing: SFPasswordSharingService 
01 00 1600 /System/Library/PrivateFrameworks/Sharing.framework/Sharing: SFRemoteHotspotDevice 
01 00 1600 /System/Library/PrivateFrameworks/Sharing.framework/Sharing: SFRemoteHotspotSession 
01 00 1500 /System/Library/PrivateFrameworks/CertInfo.framework/CertInfo: TrustCertificateViewController 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertAction 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIAlertController 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIApplication 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIDevice 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIFont 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UINavigationController 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UINib 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIPasteboard 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewCell 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UITableViewController 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UITextView 
01 00 0e00 /System/Library/Frameworks/UIKit.framework/UIKit: UIView 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFAirportViewController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFBuddyViewController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFCarPlayAlertController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFDiagnosticsViewController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFErrorAlertController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFHealthIssue 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFHotspotAlertController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFKnownNetworksViewController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFNetworkSettingsConfig 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFNetworkSettingsViewController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFOtherNetworkViewController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFTrustCertificateViewController 
01 00 0c00 /System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI: WFWebSheetViewController 
