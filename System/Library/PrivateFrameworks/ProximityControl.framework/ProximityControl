|| __DATA.__data _PCXPCLaunchingServiceName
|| __DATA.__data _PCXPCServiceName
|| __DATA.__data _kPCAssetManagerNotificationNameQueryDidComplete
|| __DATA.__objc_data _OBJC_CLASS_$_PCAssetManager
|| __DATA.__objc_data _OBJC_CLASS_$_PCCLIClient
|| __DATA.__objc_data _OBJC_CLASS_$_PCMediaTransferContext
|| __DATA.__objc_data _OBJC_CLASS_$_PCMediaTransferObserver
|| __DATA.__objc_data _OBJC_CLASS_$_PCProximityEvent
|| __DATA.__objc_data _OBJC_METACLASS_$_PCAssetManager
|| __DATA.__objc_data _OBJC_METACLASS_$_PCCLIClient
|| __DATA.__objc_data _OBJC_METACLASS_$_PCMediaTransferContext
|| __DATA.__objc_data _OBJC_METACLASS_$_PCMediaTransferObserver
|| __DATA.__objc_data _OBJC_METACLASS_$_PCProximityEvent
|| __DATA_CONST.__const _PCFrameworkBundleIdentifier
|| __DATA_CONST.__const _kProximityControlAlarmActivityType
|| __DATA_CONST.__const _kProximityControlAnnouncementActivityType
|| __DATA_CONST.__const _kProximityControlCallActivityType
|| __DATA_CONST.__const _kProximityControlMediaActivityType
|| __DATA_CONST.__const _kProximityControlTimerActivityType
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCActivityUtility
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCAlarmActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCAnnouncementActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCDeviceIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCDisambiguationContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCDisplayContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCHomeKitIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCLocalizedString
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCLockscreenControlsDevice
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCLockscreenControlsObserver
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCMediaActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCMediaRemoteDisplayContext
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCMediaRemoteIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCProgressEvent
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCRemoteActivityClient
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCTelephonyActivity
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_PCTimerActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCActivityUtility
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCAlarmActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCAnnouncementActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCDeviceIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCDisambiguationContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCDisplayContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCHomeKitIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCLocalizedString
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCLockscreenControlsDevice
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCLockscreenControlsObserver
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCMediaActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCMediaRemoteDisplayContext
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCMediaRemoteIdentifier
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCProgressEvent
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCRemoteActivityClient
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCTelephonyActivity
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_PCTimerActivity
|| __TEXT.__const _PCActivityDeviceBadgeImageSize
|| __TEXT.__const _PCActivityDeviceBadgeInset
|| __TEXT.__const _PCActivityDeviceImageSize
|| __TEXT.__const _ProximityControlVersionNumber
|| __TEXT.__const _ProximityControlVersionString
__ Contacts: _CNContactImageDataKey
__ Contacts: _OBJC_CLASS_$_CNContact
__ ContactsUI: _OBJC_CLASS_$_CNAvatarImageRenderer
__ ContactsUI: _OBJC_CLASS_$_CNAvatarImageRendererSettings
__ ContactsUI: _OBJC_CLASS_$_CNAvatarImageRenderingScope
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSData
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSException
__ CoreFoundation: _OBJC_CLASS_$_NSMutableDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMutableOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSOrderedSet
__ CoreFoundation: _OBJC_CLASS_$_NSURL
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___NSArray0__struct
__ CoreFoundation: ___kCFBooleanTrue
__ CoreGraphics: _CGContextAddEllipseInRect
__ CoreGraphics: _CGContextClosePath
__ CoreGraphics: _CGContextFillPath
__ CoreGraphics: _CGContextFillRect
__ CoreGraphics: _CGContextSetFillColorWithColor
__ CoreGraphics: _CGContextSetShadowWithColor
__ CoreUtils: _CUMainQueue
__ CoreUtils: _LogCategoryCreateEx
__ CoreUtils: _LogCategory_Remove
__ CoreUtils: _LogPrintF
__ CoreUtils: _NSDecodeObjectIfPresent
__ CoreUtils: _NSDecodeSInt64RangedIfPresent
__ CoreUtils: _NSDecodeStandardContainerIfPresent
__ CoreUtils: _NSErrorWithOSStatusF
__ CoreUtils: __LogCategory_Initialize
__ Foundation: _NSLog
__ Foundation: _OBJC_CLASS_$_NSAttributedString
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSDateComponentsFormatter
__ Foundation: _OBJC_CLASS_$_NSDateFormatter
__ Foundation: _OBJC_CLASS_$_NSError
__ Foundation: _OBJC_CLASS_$_NSMutableAttributedString
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSUUID
__ Foundation: _OBJC_CLASS_$_NSUserActivity
__ Foundation: _OBJC_CLASS_$_NSXPCConnection
__ Foundation: _OBJC_CLASS_$_NSXPCInterface
__ Foundation: _OBJC_METACLASS_$_NSUserActivity
__ IconServices: _OBJC_CLASS_$_ISIcon
__ IconServices: _OBJC_CLASS_$_ISImageDescriptor
__ Sharing: _OBJC_CLASS_$_SFDeviceAssetManager
__ Sharing: _OBJC_CLASS_$_SFDeviceAssetQuery
__ Sharing: _OBJC_CLASS_$_SFDeviceAssetRequestConfiguration
__ Sharing: _SFDeviceAssetNameImageHandoffDark
__ Sharing: _SFDeviceAssetNameImageHandoffLight
__ Sharing: _SFDeviceColorCodeUnknown
__ TelephonyUtilities: _OBJC_CLASS_$_TUCallCenter
__ UIKit: _OBJC_CLASS_$_NSTextAttachment
__ UIKit: _OBJC_CLASS_$_UIBezierPath
__ UIKit: _OBJC_CLASS_$_UIColor
__ UIKit: _OBJC_CLASS_$_UIImage
__ UIKit: _OBJC_CLASS_$_UIImageSymbolConfiguration
__ UIKit: _OBJC_CLASS_$_UIScreen
__ UIKit: _OBJC_CLASS_$_UITraitCollection
__ UIKit: _UIGraphicsBeginImageContext
__ UIKit: _UIGraphicsBeginImageContextWithOptions
__ UIKit: _UIGraphicsEndImageContext
__ UIKit: _UIGraphicsGetCurrentContext
__ UIKit: _UIGraphicsGetImageFromCurrentImageContext
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: _dispatch_assert_queue$V2
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _xpc_connection_set_non_launching
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_claimAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_opt_respondsToSelector
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_release_x1
__ libobjc.A.dylib: _objc_release_x19
__ libobjc.A.dylib: _objc_release_x20
__ libobjc.A.dylib: _objc_release_x21
__ libobjc.A.dylib: _objc_release_x22
__ libobjc.A.dylib: _objc_release_x23
__ libobjc.A.dylib: _objc_release_x24
__ libobjc.A.dylib: _objc_release_x25
__ libobjc.A.dylib: _objc_release_x26
__ libobjc.A.dylib: _objc_release_x27
__ libobjc.A.dylib: _objc_release_x8
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_retain_x1
__ libobjc.A.dylib: _objc_retain_x19
__ libobjc.A.dylib: _objc_retain_x2
__ libobjc.A.dylib: _objc_retain_x20
__ libobjc.A.dylib: _objc_retain_x21
__ libobjc.A.dylib: _objc_retain_x22
__ libobjc.A.dylib: _objc_retain_x23
__ libobjc.A.dylib: _objc_retain_x24
__ libobjc.A.dylib: _objc_retain_x3
__ libobjc.A.dylib: _objc_retain_x8
__ libobjc.A.dylib: _objc_retain_x9
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
__ libobjc.A.dylib: _objc_storeWeak
__ libobjc.A.dylib: _objc_unsafeClaimAutoreleasedReturnValue
PCLockscreenControlsObserver : NSObject <NSSecureCoding>
 @property  NSString *processName
 @property  @? deviceLost
 @property  @? deviceUpdated
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler

  // class methods
  +[PCLockscreenControlsObserver supportsSecureCoding]

  // instance methods
  -[PCLockscreenControlsObserver setInvalidationHandler:]
  -[PCLockscreenControlsObserver deviceUpdated]
  -[PCLockscreenControlsObserver knownDevices]
  -[PCLockscreenControlsObserver activateWithCompletion:]
  -[PCLockscreenControlsObserver processName]
  -[PCLockscreenControlsObserver encodeWithCoder:]
  -[PCLockscreenControlsObserver dealloc]
  -[PCLockscreenControlsObserver setDeviceLost:]
  -[PCLockscreenControlsObserver setProcessName:]
  -[PCLockscreenControlsObserver .cxx_destruct]
  -[PCLockscreenControlsObserver didSwitchRouteToDevice:]
  -[PCLockscreenControlsObserver deviceLost]
  -[PCLockscreenControlsObserver setDispatchQueue:]
  -[PCLockscreenControlsObserver deviceUpdated:]
  -[PCLockscreenControlsObserver _xpcEnsureStopped]
  -[PCLockscreenControlsObserver dispatchQueue]
  -[PCLockscreenControlsObserver _interrupted]
  -[PCLockscreenControlsObserver invalidate]
  -[PCLockscreenControlsObserver invalidationHandler]
  -[PCLockscreenControlsObserver _xpcEnsureStarted]
  -[PCLockscreenControlsObserver setDeviceUpdated:]
  -[PCLockscreenControlsObserver init]
  -[PCLockscreenControlsObserver _invalidateWithError:]
  -[PCLockscreenControlsObserver initWithCoder:]
  -[PCLockscreenControlsObserver deviceLost:]


PCLockscreenControlsDevice : NSObject <NSSecureCoding>
 @property  NSNumber *distance
 @property  NSString *mediaRouteID

  // class methods
  +[PCLockscreenControlsDevice supportsSecureCoding]

  // instance methods
  -[PCLockscreenControlsDevice distance]
  -[PCLockscreenControlsDevice mediaRouteID]
  -[PCLockscreenControlsDevice encodeWithCoder:]
  -[PCLockscreenControlsDevice .cxx_destruct]
  -[PCLockscreenControlsDevice setMediaRouteID:]
  -[PCLockscreenControlsDevice setDistance:]
  -[PCLockscreenControlsDevice initWithCoder:]
  -[PCLockscreenControlsDevice initWithMediaRouteID:distance:]


PCDisambiguationContext : NSObject <NSSecureCoding>
 @property  PCHomeKitIdentifier *identifier
 @property  PCDeviceIdentifier *deviceIdentifier
 @property  long long interactionDirection
 @property  <PCActivity> *activity

  // class methods
  +[PCDisambiguationContext supportsSecureCoding]

  // instance methods
  -[PCDisambiguationContext subtitleText]
  -[PCDisambiguationContext identifier]
  -[PCDisambiguationContext deviceIdentifier]
  -[PCDisambiguationContext titleText]
  -[PCDisambiguationContext encodeWithCoder:]
  -[PCDisambiguationContext .cxx_destruct]
  -[PCDisambiguationContext interactionDirection]
  -[PCDisambiguationContext activity]
  -[PCDisambiguationContext copyWithZone:]
  -[PCDisambiguationContext leadingImage]
  -[PCDisambiguationContext initWithCoder:]
  -[PCDisambiguationContext initWithIdentifier:direction:activityData:]
  -[PCDisambiguationContext cacheActivityData:]


PCTelephonyActivity : NSUserActivity <PCActivity>
  // instance methods
  -[PCTelephonyActivity activityString]
  -[PCTelephonyActivity contactIdentifier]
  -[PCTelephonyActivity isValid]
  -[PCTelephonyActivity .cxx_destruct]
  -[PCTelephonyActivity title]
  -[PCTelephonyActivity image]
  -[PCTelephonyActivity bundleIdentifier]
  -[PCTelephonyActivity displayName]
  -[PCTelephonyActivity callUUID]
  -[PCTelephonyActivity isEqual:]
  -[PCTelephonyActivity initWithActivity:]
  -[PCTelephonyActivity hostedOnCurrentDevice]
  -[PCTelephonyActivity dateConnected]
  -[PCTelephonyActivity pcactivityType]
  -[PCTelephonyActivity initFromSensitiveCall:]
  -[PCTelephonyActivity initFromKnownCall:]
  -[PCTelephonyActivity callImage]
  -[PCTelephonyActivity hostedOnCurrentDeviceIsValid]


PCMediaActivity : NSUserActivity <PCActivity>
  // class methods
  +[PCMediaActivity userActivityInfoFor:inContext:]
  +[PCMediaActivity titleForContentItem:]

  // instance methods
  -[PCMediaActivity behavior]
  -[PCMediaActivity activityString]
  -[PCMediaActivity playbackState]
  -[PCMediaActivity mediaType]
  -[PCMediaActivity isValid]
  -[PCMediaActivity image]
  -[PCMediaActivity direction]
  -[PCMediaActivity bundleIdentifier]
  -[PCMediaActivity shortDescription]
  -[PCMediaActivity isEqual:]
  -[PCMediaActivity initWithActivity:]
  -[PCMediaActivity pcactivityType]
  -[PCMediaActivity initWithDisplayContext:response:]
  -[PCMediaActivity artWork]


PCTimerActivity : NSUserActivity <PCActivity>
  // instance methods
  -[PCTimerActivity activityString]
  -[PCTimerActivity fireDate]
  -[PCTimerActivity isValid]
  -[PCTimerActivity image]
  -[PCTimerActivity bundleIdentifier]
  -[PCTimerActivity displayTitle]
  -[PCTimerActivity isEqual:]
  -[PCTimerActivity initWithActivity:]
  -[PCTimerActivity pcactivityType]
  -[PCTimerActivity initFromTimer:]
  -[PCTimerActivity timeLeft]


PCAlarmActivity : NSUserActivity <PCActivity>
  // instance methods
  -[PCAlarmActivity activityString]
  -[PCAlarmActivity fireDate]
  -[PCAlarmActivity isValid]
  -[PCAlarmActivity title]
  -[PCAlarmActivity image]
  -[PCAlarmActivity bundleIdentifier]
  -[PCAlarmActivity isEqual:]
  -[PCAlarmActivity initWithActivity:]
  -[PCAlarmActivity pcactivityType]
  -[PCAlarmActivity initFromAlarm:]


PCAnnouncementActivity : NSUserActivity <PCActivity>
  // instance methods
  -[PCAnnouncementActivity activityString]
  -[PCAnnouncementActivity isValid]
  -[PCAnnouncementActivity image]
  -[PCAnnouncementActivity bundleIdentifier]
  -[PCAnnouncementActivity isEqual:]
  -[PCAnnouncementActivity init]
  -[PCAnnouncementActivity initWithActivity:]
  -[PCAnnouncementActivity pcactivityType]


PCProgressEvent : NSObject <NSSecureCoding>
 @property  NSError *error
 @property  long long eventType
 @property  NSString *mediaRemoteID

  // class methods
  +[PCProgressEvent supportsSecureCoding]

  // instance methods
  -[PCProgressEvent initWithEventType:]
  -[PCProgressEvent encodeWithCoder:]
  -[PCProgressEvent error]
  -[PCProgressEvent .cxx_destruct]
  -[PCProgressEvent eventType]
  -[PCProgressEvent initWithError:]
  -[PCProgressEvent mediaRemoteID]
  -[PCProgressEvent isEqual:]
  -[PCProgressEvent setMediaRemoteID:]
  -[PCProgressEvent initWithCoder:]


PCMediaRemoteIdentifier : PCDeviceIdentifier <NSSecureCoding>
 @property  NSString *mediaRemoteID

  // class methods
  +[PCMediaRemoteIdentifier supportsSecureCoding]

  // instance methods
  -[PCMediaRemoteIdentifier encodeWithCoder:]
  -[PCMediaRemoteIdentifier .cxx_destruct]
  -[PCMediaRemoteIdentifier initWithIdentifier:]
  -[PCMediaRemoteIdentifier mediaRemoteID]
  -[PCMediaRemoteIdentifier isEqual:]
  -[PCMediaRemoteIdentifier initWithCoder:]


PCCLIClient : NSObject <PCActivatable, PCBannerServerXPCInterface, PCDiagnosticServerXPCInterface>
 @property  <PCCLIClientDelegate> *delegate
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  @? interruptionHandler

  // instance methods
  -[PCCLIClient setInvalidationHandler:]
  -[PCCLIClient _activateWithCompletion:]
  -[PCCLIClient _invalidate]
  -[PCCLIClient activateWithCompletion:]
  -[PCCLIClient setDelegate:]
  -[PCCLIClient interruptionHandler]
  -[PCCLIClient requestState]
  -[PCCLIClient delegate]
  -[PCCLIClient .cxx_destruct]
  -[PCCLIClient setInterruptionHandler:]
  -[PCCLIClient setDispatchQueue:]
  -[PCCLIClient dispatchQueue]
  -[PCCLIClient _invalidated]
  -[PCCLIClient _interrupted]
  -[PCCLIClient invalidate]
  -[PCCLIClient invalidationHandler]
  -[PCCLIClient _xpcEnsureStarted]
  -[PCCLIClient handleState:]
  -[PCCLIClient dismissBannerWithCompletion:]
  -[PCCLIClient presentBannerWithCompletion:]
  -[PCCLIClient setBannerScaleProgress:completion:]
  -[PCCLIClient tapBannerWithCompletion:]
  -[PCCLIClient stateWithCompletion:]
  -[PCCLIClient triggerHandoffFeedbackAlertWithCompletion:]
  -[PCCLIClient updateLockscreenMediaThresholdWithCompletion:]
  -[PCCLIClient _wakingXPCEnsureStarted]
  -[PCCLIClient didProvideState:]


PCMediaRemoteDisplayContext : PCDisplayContext
 @property  NSString *mediaRemoteID
 @property  MRNowPlayingPlayerResponse *proxDeviceState
 @property  MRNowPlayingPlayerResponse *selectedDeviceState
 @property  MRNowPlayingPlayerResponse *localDeviceState

  // class methods
  +[PCMediaRemoteDisplayContext supportsSecureCoding]

  // instance methods
  -[PCMediaRemoteDisplayContext encodeWithCoder:]
  -[PCMediaRemoteDisplayContext .cxx_destruct]
  -[PCMediaRemoteDisplayContext mediaRemoteID]
  -[PCMediaRemoteDisplayContext isEqual:]
  -[PCMediaRemoteDisplayContext setMediaRemoteID:]
  -[PCMediaRemoteDisplayContext initWithCoder:]
  -[PCMediaRemoteDisplayContext setProxDeviceState:]
  -[PCMediaRemoteDisplayContext setSelectedDeviceState:]
  -[PCMediaRemoteDisplayContext userActivityInfo]
  -[PCMediaRemoteDisplayContext proxDeviceState]
  -[PCMediaRemoteDisplayContext selectedDeviceState]
  -[PCMediaRemoteDisplayContext localDeviceState]
  -[PCMediaRemoteDisplayContext setLocalDeviceState:]


PCLocalizedString : NSObject
  // class methods
  +[PCLocalizedString localizedStringForKey:]
  +[PCLocalizedString keyValueForKey:]


PCActivityUtility : NSObject
  // class methods
  +[PCActivityUtility composedImageFor:assetType:]
  +[PCActivityUtility activityFrom:]
  +[PCActivityUtility order:]
  +[PCActivityUtility activity:isLessThan:]
  +[PCActivityUtility deviceNameFor:]
  +[PCActivityUtility composedImageFor:]
  +[PCActivityUtility composedImageWithArtworkFor:assetType:]
  +[PCActivityUtility composedImageWithDeviceImage:badgeImage:]
  +[PCActivityUtility disambiguationButtonImageForActivity:]
  +[PCActivityUtility iconForBundleIdentifier:]
  +[PCActivityUtility imageForAssetType:]
  +[PCActivityUtility formattedDurationFor:]
  +[PCActivityUtility scaleImageIfNeeded:toFitSize:withCornerRadius:]


PCMediaTransferContext : NSObject <NSSecureCoding>
  // class methods
  +[PCMediaTransferContext supportsSecureCoding]

  // instance methods
  -[PCMediaTransferContext encodeWithCoder:]
  -[PCMediaTransferContext initWithCoder:]


PCMediaTransferObserver : NSObject <NSSecureCoding>
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  @? transferBeganHandler
 @property  @? transferEndedHandler

  // class methods
  +[PCMediaTransferObserver supportsSecureCoding]

  // instance methods
  -[PCMediaTransferObserver setInvalidationHandler:]
  -[PCMediaTransferObserver activateWithCompletion:]
  -[PCMediaTransferObserver encodeWithCoder:]
  -[PCMediaTransferObserver dealloc]
  -[PCMediaTransferObserver .cxx_destruct]
  -[PCMediaTransferObserver setDispatchQueue:]
  -[PCMediaTransferObserver _xpcEnsureStopped]
  -[PCMediaTransferObserver dispatchQueue]
  -[PCMediaTransferObserver _interrupted]
  -[PCMediaTransferObserver invalidate]
  -[PCMediaTransferObserver invalidationHandler]
  -[PCMediaTransferObserver _xpcEnsureStarted]
  -[PCMediaTransferObserver init]
  -[PCMediaTransferObserver _invalidateWithError:]
  -[PCMediaTransferObserver initWithCoder:]
  -[PCMediaTransferObserver transferBeganWithContext:]
  -[PCMediaTransferObserver transferEnded]
  -[PCMediaTransferObserver transferBeganHandler]
  -[PCMediaTransferObserver setTransferBeganHandler:]
  -[PCMediaTransferObserver transferEndedHandler]
  -[PCMediaTransferObserver setTransferEndedHandler:]


PCAssetManager : NSObject
  // class methods
  +[PCAssetManager sharedInstance]

  // instance methods
  -[PCAssetManager dealloc]
  -[PCAssetManager .cxx_destruct]
  -[PCAssetManager init]
  -[PCAssetManager imageForAssetType:]
  -[PCAssetManager bundleForAssetType:]
  -[PCAssetManager alternateBundleForAssetType:]
  -[PCAssetManager prewarmBundleForAssetType:]
  -[PCAssetManager prewarmAlternateBundleForAssetType:]
  -[PCAssetManager prewarmBundleForAssetType:alternate:]
  -[PCAssetManager assetQueryForAssetType:]
  -[PCAssetManager alternateAssetQueryForAssetType:]
  -[PCAssetManager assetQueryForAssetType:alternate:]
  -[PCAssetManager assetRequestConfiguration:alternate:]
  -[PCAssetManager colorCodeForAssetType:]
  -[PCAssetManager handleDownloadCompletion:assetType:error:]
  -[PCAssetManager initiateQuery:config:]
  -[PCAssetManager handleQueryResult:assetType:productType:isFallback:error:isAlternateBundle:]
  -[PCAssetManager imageNameForAssetType:]
  -[PCAssetManager productVersionForAssetType:]
  -[PCAssetManager sfAssetManagerEnsureStarted]


PCDeviceIdentifier : NSObject <NSSecureCoding>
 @property  NSString *deviceName
 @property  long long assetType

  // class methods
  +[PCDeviceIdentifier supportsSecureCoding]

  // instance methods
  -[PCDeviceIdentifier assetType]
  -[PCDeviceIdentifier setDeviceName:]
  -[PCDeviceIdentifier encodeWithCoder:]
  -[PCDeviceIdentifier .cxx_destruct]
  -[PCDeviceIdentifier deviceName]
  -[PCDeviceIdentifier setAssetType:]
  -[PCDeviceIdentifier initWithCoder:]
  -[PCDeviceIdentifier initWithDeviceName:]


PCDisplayContext : NSObject <NSSecureCoding>
 @property  NSURL *legacyAttachmentURL
 @property  NSString *legacyBodyText
 @property  NSString *localizedPrimaryAltText
 @property  NSString *localizedSecondaryAltText
 @property  long long interactionBehavior
 @property  long long interactionDirection

  // class methods
  +[PCDisplayContext supportsSecureCoding]

  // instance methods
  -[PCDisplayContext encodeWithCoder:]
  -[PCDisplayContext .cxx_destruct]
  -[PCDisplayContext interactionBehavior]
  -[PCDisplayContext setInteractionDirection:]
  -[PCDisplayContext interactionDirection]
  -[PCDisplayContext copyWithZone:]
  -[PCDisplayContext isEqual:]
  -[PCDisplayContext initWithCoder:]
  -[PCDisplayContext legacyBodyText]
  -[PCDisplayContext setLocalizedSecondaryAltText:]
  -[PCDisplayContext setLegacyBodyText:]
  -[PCDisplayContext setLegacyAttachmentURL:]
  -[PCDisplayContext localizedSecondaryAltText]
  -[PCDisplayContext setInteractionBehavior:]
  -[PCDisplayContext legacyAttachmentURL]
  -[PCDisplayContext localizedPrimaryAltText]
  -[PCDisplayContext setLocalizedPrimaryAltText:]


PCHomeKitIdentifier : PCDeviceIdentifier <NSSecureCoding>
 @property  NSUUID *accessoryID
 @property  NSUUID *homeID

  // class methods
  +[PCHomeKitIdentifier supportsSecureCoding]

  // instance methods
  -[PCHomeKitIdentifier accessoryID]
  -[PCHomeKitIdentifier encodeWithCoder:]
  -[PCHomeKitIdentifier .cxx_destruct]
  -[PCHomeKitIdentifier isEqual:]
  -[PCHomeKitIdentifier initWithCoder:]
  -[PCHomeKitIdentifier homeID]
  -[PCHomeKitIdentifier initWithAccessoryID:homeID:]


PCRemoteActivityClient : NSObject <NSSecureCoding, PCActivatable>
 @property  @? activityDataUpdateHandler
 @property  <NSXPCProxyCreating> *xpcCnx
 @property  @? homeKitUpdateHandler
 @property  @? mediaRemoteUpdateHandler
 @property  @? uiWillDismissHandler
 @property  @? updateHandler
 @property  NSObject<OS_dispatch_queue> *dispatchQueue
 @property  @? invalidationHandler
 @property  @? interruptionHandler

  // class methods
  +[PCRemoteActivityClient supportsSecureCoding]

  // instance methods
  -[PCRemoteActivityClient setInvalidationHandler:]
  -[PCRemoteActivityClient _activateWithCompletion:]
  -[PCRemoteActivityClient _invalidate]
  -[PCRemoteActivityClient activateWithCompletion:]
  -[PCRemoteActivityClient interruptionHandler]
  -[PCRemoteActivityClient encodeWithCoder:]
  -[PCRemoteActivityClient dealloc]
  -[PCRemoteActivityClient interrupted]
  -[PCRemoteActivityClient .cxx_destruct]
  -[PCRemoteActivityClient setInterruptionHandler:]
  -[PCRemoteActivityClient setDispatchQueue:]
  -[PCRemoteActivityClient _xpcEnsureStopped]
  -[PCRemoteActivityClient updateHandler]
  -[PCRemoteActivityClient dispatchQueue]
  -[PCRemoteActivityClient xpcCnx]
  -[PCRemoteActivityClient _invalidated]
  -[PCRemoteActivityClient _interrupted]
  -[PCRemoteActivityClient setUpdateHandler:]
  -[PCRemoteActivityClient setXpcCnx:]
  -[PCRemoteActivityClient invalidate]
  -[PCRemoteActivityClient invalidationHandler]
  -[PCRemoteActivityClient _xpcEnsureStarted]
  -[PCRemoteActivityClient init]
  -[PCRemoteActivityClient initWithCoder:]
  -[PCRemoteActivityClient userTappedCloseButton]
  -[PCRemoteActivityClient startObservingDeviceWithIdentifier:]
  -[PCRemoteActivityClient startObservingMediaRemoteIdentifier:]
  -[PCRemoteActivityClient setMediaRemoteUpdateHandler:]
  -[PCRemoteActivityClient userTappedDisambiguationButton:]
  -[PCRemoteActivityClient updateHomeKitID:mediaRemoteID:withActivities:disambiguationContext:]
  -[PCRemoteActivityClient startObservingHomeKitIdentifier:]
  -[PCRemoteActivityClient stopObservingHomeKitIdentifier:]
  -[PCRemoteActivityClient stopObservingMediaRemoteIdentifier:]
  -[PCRemoteActivityClient stopObservingAllDevices]
  -[PCRemoteActivityClient updateHomeKitID:withActivities:disambiguationContext:]
  -[PCRemoteActivityClient updateMediaRemoteID:withActivities:disambiguationContext:]
  -[PCRemoteActivityClient userActivitySetFromData:]
  -[PCRemoteActivityClient stopObservingDeviceWithIdentifier:]
  -[PCRemoteActivityClient homeKitUpdateHandler]
  -[PCRemoteActivityClient setHomeKitUpdateHandler:]
  -[PCRemoteActivityClient mediaRemoteUpdateHandler]
  -[PCRemoteActivityClient uiWillDismissHandler]
  -[PCRemoteActivityClient setUiWillDismissHandler:]
  -[PCRemoteActivityClient activityDataUpdateHandler]
  -[PCRemoteActivityClient setActivityDataUpdateHandler:]


PCProximityEvent : NSObject <NSSecureCoding>
 @property  BOOL expectsDisplayContext
 @property  NSDictionary *info
 @property  NSError *error
 @property  long long eventType
 @property  NSString *mediaRemoteID

  // class methods
  +[PCProximityEvent supportsSecureCoding]

  // instance methods
  -[PCProximityEvent encodeWithCoder:]
  -[PCProximityEvent error]
  -[PCProximityEvent .cxx_destruct]
  -[PCProximityEvent eventType]
  -[PCProximityEvent info]
  -[PCProximityEvent mediaRemoteID]
  -[PCProximityEvent isEqual:]
  -[PCProximityEvent initWithCoder:]
  -[PCProximityEvent expectsDisplayContext]
  -[PCProximityEvent initWithType:mediaRemoteID:info:]
  -[PCProximityEvent initWithError:mediaRemoteID:]
  -[PCProximityEvent setExpectsDisplayContext:]


01 00 0200 /System/Library/Frameworks/ContactsUI.framework/ContactsUI: CNAvatarImageRenderer 
01 00 0200 /System/Library/Frameworks/ContactsUI.framework/ContactsUI: CNAvatarImageRendererSettings 
01 00 0200 /System/Library/Frameworks/ContactsUI.framework/ContactsUI: CNAvatarImageRenderingScope 
01 00 0100 /System/Library/Frameworks/Contacts.framework/Contacts: CNContact 
01 00 0500 /System/Library/PrivateFrameworks/IconServices.framework/IconServices: ISIcon 
01 00 0500 /System/Library/PrivateFrameworks/IconServices.framework/IconServices: ISImageDescriptor 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSAttributedString 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSData 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateComponentsFormatter 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSDateFormatter 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSError 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSException 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableAttributedString 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableDictionary 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableOrderedSet 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0900 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSOrderedSet 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0700 /System/Library/Frameworks/UIKit.framework/UIKit: NSTextAttachment 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSURL 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSUUID 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSUserActivity 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCConnection 
01 00 0800 /System/Library/Frameworks/Foundation.framework/Foundation: NSXPCInterface 
01 00 0c00 /System/Library/PrivateFrameworks/Sharing.framework/Sharing: SFDeviceAssetManager 
01 00 0c00 /System/Library/PrivateFrameworks/Sharing.framework/Sharing: SFDeviceAssetQuery 
01 00 0c00 /System/Library/PrivateFrameworks/Sharing.framework/Sharing: SFDeviceAssetRequestConfiguration 
01 00 0600 /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities: TUCallCenter 
01 00 0700 /System/Library/Frameworks/UIKit.framework/UIKit: UIBezierPath 
01 00 0700 /System/Library/Frameworks/UIKit.framework/UIKit: UIColor 
01 00 0700 /System/Library/Frameworks/UIKit.framework/UIKit: UIImage 
01 00 0700 /System/Library/Frameworks/UIKit.framework/UIKit: UIImageSymbolConfiguration 
01 00 0700 /System/Library/Frameworks/UIKit.framework/UIKit: UIScreen 
01 00 0700 /System/Library/Frameworks/UIKit.framework/UIKit: UITraitCollection 
