|| __DATA.__objc_data _OBJC_CLASS_$_AXSpeechThread
|| __DATA.__objc_data _OBJC_METACLASS_$_AXSpeechThread
|| __DATA_CONST.__const _AXAlexVoiceIdentifier
|| __DATA_CONST.__const _AXNeuralSiriFemaleVoiceIdentifier
|| __DATA_CONST.__const _AXNeuralSiriMaleVoiceIdentifier
|| __DATA_CONST.__const _AXSiriFemaleVoiceIdentifier
|| __DATA_CONST.__const _AXSiriMaleVoiceIdentifier
|| __DATA_CONST.__const _AXUIServerAngelProcessName
|| __DATA_CONST.__const _AXUIServerProcessName
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXEmojiUtilities
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXSpeechAction
|| __DATA_DIRTY.__objc_data _OBJC_CLASS_$_AXSpeechManager
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXEmojiUtilities
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXSpeechAction
|| __DATA_DIRTY.__objc_data _OBJC_METACLASS_$_AXSpeechManager
|| __TEXT.__text _AXAVSpeechSynthesisVoiceFromTTSSpeechVoice
|| __TEXT.__text _AXLanguageCanonicalFormToGeneralLanguage
|| __TEXT.__text _AXSpeechLanguageCanonicalFormToGeneralLanguage
|| __TEXT.__text _AXSpeechTransformText
|| __TEXT.__text _AXSpeechTransformTextWithLanguage
|| __TEXT.__text _AXSpeechTransformTextWithLanguageAndVoiceIdentifier
|| __TEXT.__text _VOTBundle
|| __TEXT.__text __AXSpeechReplaceEmoticons
|| __TEXT.__text _isSpeakableEmojiString
__ AVFAudio: _AVAudioSessionCategoryVoiceOver
__ AVFAudio: _AVAudioSessionInterruptionNotification
__ AVFAudio: _AVAudioSessionInterruptionTypeKey
__ AVFAudio: _AVAudioSessionMediaServicesWereLostNotification
__ AVFAudio: _AVAudioSessionMediaServicesWereResetNotification
__ AVFAudio: _AVSpeechSynthesisIPANotationAttribute
__ AVFAudio: _OBJC_CLASS_$_AVAudioSession
__ AVFAudio: _OBJC_CLASS_$_AVSpeechSynthesisVoice
__ AXCoreUtilities: _AXCFormattedString
__ AXCoreUtilities: _AXCLanguageCanonicalFormToGeneralLanguage
__ AXCoreUtilities: _AXCRemapLanguageCodeToFallbackIfNeccessary
__ AXCoreUtilities: _AXLogSpeechSynthesis
__ AXCoreUtilities: _AXSetThreadPriority
__ AXCoreUtilities: _OBJC_CLASS_$_AXDispatchTimer
__ AXCoreUtilities: _VOTLogSpeech
__ CoreEmoji: _CEMCreateEmojiLocaleData
__ CoreEmoji: _CEMEmojiTokenCopyName
__ CoreEmoji: _CEMEnumerateEmojiTokensInStringWithBlock
__ CoreEmoji: _CEMEnumerateEmojiTokensInStringWithLocaleAndBlock
__ CoreFoundation: _CFAbsoluteTimeGetCurrent
__ CoreFoundation: _CFRelease
__ CoreFoundation: _CFRetain
__ CoreFoundation: _CFRunLoopStop
__ CoreFoundation: _CFStringTokenizerCopyBestStringLanguage
__ CoreFoundation: _NSDefaultRunLoopMode
__ CoreFoundation: _NSStringTransformStripDiacritics
__ CoreFoundation: _OBJC_CLASS_$_NSArray
__ CoreFoundation: _OBJC_CLASS_$_NSConstantArray
__ CoreFoundation: _OBJC_CLASS_$_NSDate
__ CoreFoundation: _OBJC_CLASS_$_NSDictionary
__ CoreFoundation: _OBJC_CLASS_$_NSMachPort
__ CoreFoundation: _OBJC_CLASS_$_NSMutableArray
__ CoreFoundation: _OBJC_CLASS_$_NSRunLoop
__ CoreFoundation: _OBJC_EHTYPE_$_NSException
__ CoreFoundation: ___CFConstantStringClassReference
__ CoreFoundation: ___kCFBooleanTrue
__ Foundation: _NSClassFromString
__ Foundation: _NSLog
__ Foundation: _OBJC_CLASS_$_NSAssertionHandler
__ Foundation: _OBJC_CLASS_$_NSBundle
__ Foundation: _OBJC_CLASS_$_NSCharacterSet
__ Foundation: _OBJC_CLASS_$_NSLock
__ Foundation: _OBJC_CLASS_$_NSMutableString
__ Foundation: _OBJC_CLASS_$_NSNotificationCenter
__ Foundation: _OBJC_CLASS_$_NSNumber
__ Foundation: _OBJC_CLASS_$_NSProcessInfo
__ Foundation: _OBJC_CLASS_$_NSRegularExpression
__ Foundation: _OBJC_CLASS_$_NSString
__ Foundation: _OBJC_CLASS_$_NSThread
__ Foundation: _OBJC_CLASS_$_NSValue
__ Foundation: _OBJC_METACLASS_$_NSThread
__ SoftLinking: __sl_dlopen
__ TextToSpeech: _AXAVVoiceQualityFromTTSFootprint
__ TextToSpeech: _OBJC_CLASS_$_TTSAXResourceManager
__ TextToSpeech: _OBJC_CLASS_$_TTSAudioSessionChannel
__ TextToSpeech: _OBJC_CLASS_$_TTSSpeechRequest
__ TextToSpeech: _OBJC_CLASS_$_TTSSpeechSynthesizer
__ TextToSpeech: _OBJC_CLASS_$_TTSSpeechVoice
__ TextToSpeech: _OBJC_CLASS_$_TTSSubstitution
__ TextToSpeech: _TTSAssetValueCustomVoiceFootprintCompact
__ TextToSpeech: _TTSAssetValueCustomVoiceFootprintSuperCompact
__ TextToSpeech: _TTSPreferencesCopyDefaultOutputLanguageIdentifierForUserPreferences
__ libAccessibility.dylib: _AXNSLocalizedStringForLocale
__ libAccessibility.dylib: _AXSAccessibilityUtilitiesPath
__ libAccessibility.dylib: __AXSInUnitTestMode
__ libSystem.B.dylib: __Block_object_dispose
__ libSystem.B.dylib: __NSConcreteGlobalBlock
__ libSystem.B.dylib: __NSConcreteStackBlock
__ libSystem.B.dylib: __Unwind_Resume
__ libSystem.B.dylib: ___assert_rtn
__ libSystem.B.dylib: ___stack_chk_fail
__ libSystem.B.dylib: ___stack_chk_guard
__ libSystem.B.dylib: __dispatch_main_q
__ libSystem.B.dylib: __os_log_debug_impl
__ libSystem.B.dylib: __os_log_error_impl
__ libSystem.B.dylib: __os_log_fault_impl
__ libSystem.B.dylib: __os_log_impl
__ libSystem.B.dylib: _dispatch_async
__ libSystem.B.dylib: _dispatch_once
__ libSystem.B.dylib: _dispatch_queue_create
__ libSystem.B.dylib: _dispatch_sync
__ libSystem.B.dylib: _dlerror
__ libSystem.B.dylib: _dlsym
__ libSystem.B.dylib: _free
__ libSystem.B.dylib: _malloc
__ libSystem.B.dylib: _memset
__ libSystem.B.dylib: _os_log_create
__ libSystem.B.dylib: _os_log_type_enabled
__ libicucore.A.dylib: _uregex_end
__ libicucore.A.dylib: _uregex_find
__ libicucore.A.dylib: _uregex_open
__ libicucore.A.dylib: _uregex_setText
__ libicucore.A.dylib: _uregex_start
__ libicucore.A.dylib: _uregex_useAnchoringBounds
__ libobjc.A.dylib: _OBJC_CLASS_$_NSObject
__ libobjc.A.dylib: _OBJC_METACLASS_$_NSObject
__ libobjc.A.dylib: ___objc_personality_v0
__ libobjc.A.dylib: __objc_empty_cache
__ libobjc.A.dylib: _objc_alloc
__ libobjc.A.dylib: _objc_allocWithZone
__ libobjc.A.dylib: _objc_alloc_init
__ libobjc.A.dylib: _objc_autoreleasePoolPop
__ libobjc.A.dylib: _objc_autoreleasePoolPush
__ libobjc.A.dylib: _objc_autoreleaseReturnValue
__ libobjc.A.dylib: _objc_begin_catch
__ libobjc.A.dylib: _objc_copyWeak
__ libobjc.A.dylib: _objc_destroyWeak
__ libobjc.A.dylib: _objc_end_catch
__ libobjc.A.dylib: _objc_enumerationMutation
__ libobjc.A.dylib: _objc_getAssociatedObject
__ libobjc.A.dylib: _objc_initWeak
__ libobjc.A.dylib: _objc_loadWeakRetained
__ libobjc.A.dylib: _objc_msgSend
__ libobjc.A.dylib: _objc_msgSendSuper2
__ libobjc.A.dylib: _objc_opt_class
__ libobjc.A.dylib: _objc_opt_isKindOfClass
__ libobjc.A.dylib: _objc_opt_new
__ libobjc.A.dylib: _objc_release
__ libobjc.A.dylib: _objc_retain
__ libobjc.A.dylib: _objc_retainAutorelease
__ libobjc.A.dylib: _objc_retainAutoreleaseReturnValue
__ libobjc.A.dylib: _objc_retainAutoreleasedReturnValue
__ libobjc.A.dylib: _objc_retainBlock
__ libobjc.A.dylib: _objc_setAssociatedObject
__ libobjc.A.dylib: _objc_setProperty_nonatomic_copy
__ libobjc.A.dylib: _objc_storeStrong
AXSpeechAction : NSObject
 @property  NSString *processedString
 @property  NSMutableArray *emojiRangeReplacements
 @property  BOOL shouldQueue
 @property  BOOL cannotInterrupt
 @property  BOOL shouldDetectLanguage
 @property  BOOL shouldProcessEmoji
 @property  BOOL shouldProcessEmoticons
 @property  BOOL shouldPrecomposeString
 @property  BOOL ignoreCustomSubstitutions
 @property  BOOL synthesizeSilently
 @property  NSString *language
 @property  NSString *voiceIdentifier
 @property  long long state
 @property  @? audioBufferCallback
 @property  @? markerCallback
 @property  NSString *string
 @property  NSAttributedString *attributedString
 @property  NSString *ssmlRepresentation
 @property  @? completionCallback
 @property  @? onPauseCallback
 @property  @? onResumeCallback
 @property  @? onWillSpeakRangeCallback
 @property  @? onSpeechStartCallback
 @property  double speakingRate
 @property  BOOL useMonarchStyleSpeechRate
 @property  double pitch
 @property  double volume
 @property  long long wordCallbackPostProcessedOffset
 @property  NSString *finalSpokenString

  // class methods
  +[AXSpeechAction actionWithString:shouldQueue:]
  +[AXSpeechAction actionWithAttributedString:shouldQueue:]
  +[AXSpeechAction actionWithSSMLRepresentation:shouldQueue:]
  +[AXSpeechAction test_setUseMaxSpeechRate:]

  // instance methods
  -[AXSpeechAction setLanguage:]
  -[AXSpeechAction setAttributedString:]
  -[AXSpeechAction string]
  -[AXSpeechAction state]
  -[AXSpeechAction .cxx_destruct]
  -[AXSpeechAction pitch]
  -[AXSpeechAction setVolume:]
  -[AXSpeechAction setPitch:]
  -[AXSpeechAction attributedString]
  -[AXSpeechAction volume]
  -[AXSpeechAction setCompletionCallback:]
  -[AXSpeechAction shouldQueue]
  -[AXSpeechAction copyWithZone:]
  -[AXSpeechAction language]
  -[AXSpeechAction setString:]
  -[AXSpeechAction setShouldQueue:]
  -[AXSpeechAction init]
  -[AXSpeechAction setState:]
  -[AXSpeechAction setUseMonarchStyleSpeechRate:]
  -[AXSpeechAction voiceIdentifier]
  -[AXSpeechAction setVoiceIdentifier:]
  -[AXSpeechAction setSpeakingRate:]
  -[AXSpeechAction ssmlRepresentation]
  -[AXSpeechAction setSsmlRepresentation:]
  -[AXSpeechAction completionCallback]
  -[AXSpeechAction audioBufferCallback]
  -[AXSpeechAction setAudioBufferCallback:]
  -[AXSpeechAction synthesizeSilently]
  -[AXSpeechAction setSynthesizeSilently:]
  -[AXSpeechAction speakingRate]
  -[AXSpeechAction preprocessAction]
  -[AXSpeechAction _detectLanguageFromContent]
  -[AXSpeechAction cannotInterrupt]
  -[AXSpeechAction setCannotInterrupt:]
  -[AXSpeechAction shouldDetectLanguage]
  -[AXSpeechAction setShouldDetectLanguage:]
  -[AXSpeechAction shouldProcessEmoji]
  -[AXSpeechAction setShouldProcessEmoji:]
  -[AXSpeechAction shouldProcessEmoticons]
  -[AXSpeechAction setShouldProcessEmoticons:]
  -[AXSpeechAction shouldPrecomposeString]
  -[AXSpeechAction setShouldPrecomposeString:]
  -[AXSpeechAction ignoreCustomSubstitutions]
  -[AXSpeechAction setIgnoreCustomSubstitutions:]
  -[AXSpeechAction markerCallback]
  -[AXSpeechAction setMarkerCallback:]
  -[AXSpeechAction onPauseCallback]
  -[AXSpeechAction setOnPauseCallback:]
  -[AXSpeechAction onResumeCallback]
  -[AXSpeechAction setOnResumeCallback:]
  -[AXSpeechAction onWillSpeakRangeCallback]
  -[AXSpeechAction setOnWillSpeakRangeCallback:]
  -[AXSpeechAction onSpeechStartCallback]
  -[AXSpeechAction setOnSpeechStartCallback:]
  -[AXSpeechAction useMonarchStyleSpeechRate]
  -[AXSpeechAction wordCallbackPostProcessedOffset]
  -[AXSpeechAction setWordCallbackPostProcessedOffset:]
  -[AXSpeechAction finalSpokenString]
  -[AXSpeechAction setFinalSpokenString:]
  -[AXSpeechAction processedString]
  -[AXSpeechAction setProcessedString:]
  -[AXSpeechAction emojiRangeReplacements]
  -[AXSpeechAction setEmojiRangeReplacements:]


AXSpeechManager : NSObject <TTSSpeechSynthesizerDelegate>
 @property  NSNumber *originalSpeechRateForJobOverride
 @property  BOOL isPaused
 @property  AXDispatchTimer *audioDeactivatorTimer
 @property  BOOL wasSpeakingBeforeAudioInterruption
 @property  BOOL didRequestStartSpeakingDuringAudioInterruption
 @property  BOOL didRequestPauseSpeakingDuringAudioInterruption
 @property  BOOL didRequestResumeSpeakingDuringAudioInterruption
 @property  double audioInterruptionStartedTime
 @property  AVAudioSession *audioSession
 @property  BOOL isInAudioInterruption
 @property  AXSpeechAction *requestedActionDuringAudioInterruption
 @property  BOOL shouldHandleAudioInterruptions
 @property  BOOL speechEnabled
 @property  BOOL showControlCenterControls
 @property  BOOL isSpeaking
 @property  unsigned int audioQueueFlags
 @property  BOOL usesAuxiliarySession
 @property  unsigned long setActiveOptions
 @property  NSString *audioSessionCategory
 @property  unsigned long audioSessionCategoryOptions
 @property  NSArray *outputChannels
 @property  double audioSessionInactiveTimeout
 @property  @? requestWillStart
 @property  BOOL supportsAccurateWordCallbacks
 @property  BOOL skipLuthorRules
 @property  unsigned long hash
 @property  Class superclass
 @property  NSString *description
 @property  NSString *debugDescription

  // class methods
  +[AXSpeechManager audioFileSettingsForVoice:]
  +[AXSpeechManager availableVoices]
  +[AXSpeechManager availableLanguageCodes]
  +[AXSpeechManager currentLanguageCode]
  +[AXSpeechManager spellOutMarkupString:string:]
  +[AXSpeechManager spellOutLetterCaseMarkupString:string:]
  +[AXSpeechManager languageCodeForVoiceIdentifier:]
  +[AXSpeechManager literalStringMarkup:string:speakCap:]
  +[AXSpeechManager pauseMarkupString:]
  +[AXSpeechManager availableSuperCompactVoices]
  +[AXSpeechManager availableVoices:]
  +[AXSpeechManager avSpeechVoicesForTTSSpeechVoices:]
  +[AXSpeechManager _resetAvailableVoices]
  +[AXSpeechManager currentProcessAllowedToSaveVoiceInfo]
  +[AXSpeechManager _resetAvailableVoices:]
  +[AXSpeechManager createRegularExpressionFromString:]
  +[AXSpeechManager matchedRangesForString:withRegularExpression:]
  +[AXSpeechManager remapLanguageCode:]
  +[AXSpeechManager test_actionStartTap:]
  +[AXSpeechManager test_setUnitTestMode:]
  +[AXSpeechManager test_setAvailableVoices:]

  // instance methods
  -[AXSpeechManager speechEnabled]
  -[AXSpeechManager tearDown]
  -[AXSpeechManager pauseSpeaking:]
  -[AXSpeechManager setSpeechEnabled:]
  -[AXSpeechManager setIsPaused:]
  -[AXSpeechManager _initialize]
  -[AXSpeechManager setAudioSessionCategory:]
  -[AXSpeechManager isPaused]
  -[AXSpeechManager dealloc]
  -[AXSpeechManager .cxx_destruct]
  -[AXSpeechManager audioSessionCategory]
  -[AXSpeechManager _tearDown]
  -[AXSpeechManager observeValueForKeyPath:ofObject:change:context:]
  -[AXSpeechManager isSpeaking]
  -[AXSpeechManager init]
  -[AXSpeechManager setAudioSession:]
  -[AXSpeechManager audioSession]
  -[AXSpeechManager continueSpeaking]
  -[AXSpeechManager setAudioSessionCategoryOptions:]
  -[AXSpeechManager setSetActiveOptions:]
  -[AXSpeechManager setSupportsAccurateWordCallbacks:]
  -[AXSpeechManager setSkipLuthorRules:]
  -[AXSpeechManager stopSpeaking:]
  -[AXSpeechManager setAudioSessionInactiveTimeout:]
  -[AXSpeechManager supportsAccurateWordCallbacks]
  -[AXSpeechManager skipLuthorRules]
  -[AXSpeechManager audioSessionInactiveTimeout]
  -[AXSpeechManager speechSynthesizer:didStartSpeakingRequest:]
  -[AXSpeechManager speechSynthesizer:didPauseSpeakingRequest:]
  -[AXSpeechManager speechSynthesizer:didContinueSpeakingRequest:]
  -[AXSpeechManager speechSynthesizer:willSpeakRangeOfSpeechString:forRequest:]
  -[AXSpeechManager stopSpeaking]
  -[AXSpeechManager outputChannels]
  -[AXSpeechManager setOutputChannels:]
  -[AXSpeechManager _didBeginInterruption]
  -[AXSpeechManager speechSynthesizer:didFinishSpeakingRequest:successfully:withError:]
  -[AXSpeechManager audioQueueFlags]
  -[AXSpeechManager setAudioQueueFlags:]
  -[AXSpeechManager audioSessionCategoryOptions]
  -[AXSpeechManager _updateAuxiliarySession]
  -[AXSpeechManager _handleAudioInterruption:]
  -[AXSpeechManager _handleMediaServicesWereLost:]
  -[AXSpeechManager _handleMediaServicesWereReset:]
  -[AXSpeechManager _updateAudioSessionProperties]
  -[AXSpeechManager _processAudioBufferCallback:]
  -[AXSpeechManager _clearSpeechQueue]
  -[AXSpeechManager _dispatchSpeechAction:]
  -[AXSpeechManager _pauseSpeaking:]
  -[AXSpeechManager _continueSpeaking]
  -[AXSpeechManager _stopSpeaking:]
  -[AXSpeechManager _isSpeaking:]
  -[AXSpeechManager _processDidStartCallback:]
  -[AXSpeechManager __speechJobFinished:]
  -[AXSpeechManager _processDidPauseCallback:]
  -[AXSpeechManager _processDidContinueCallback:]
  -[AXSpeechManager _processWillSpeechRange:]
  -[AXSpeechManager setUsesAuxiliarySession:]
  -[AXSpeechManager handleAudioSessionObservers:]
  -[AXSpeechManager _enqueueSelectorOnSpeechThread:object:waitUntilDone:]
  -[AXSpeechManager _resetInterruptionTracking]
  -[AXSpeechManager _didEndInterruption]
  -[AXSpeechManager setActiveOptions]
  -[AXSpeechManager isInAudioInterruption]
  -[AXSpeechManager setIsInAudioInterruption:]
  -[AXSpeechManager _updateUserSubstitutions]
  -[AXSpeechManager _speechJobFinished:action:]
  -[AXSpeechManager externalVoiceIdentifierUsedForLanguage:]
  -[AXSpeechManager voiceIdentifierUsedForLanguage:]
  -[AXSpeechManager _phonemeSubstitutionsForAction:]
  -[AXSpeechManager _startNextSpeechJob]
  -[AXSpeechManager clearSpeechQueue]
  -[AXSpeechManager dispatchSpeechAction:]
  -[AXSpeechManager requestedActionDuringAudioInterruption]
  -[AXSpeechManager setRequestedActionDuringAudioInterruption:]
  -[AXSpeechManager showControlCenterControls]
  -[AXSpeechManager usesAuxiliarySession]
  -[AXSpeechManager requestWillStart]
  -[AXSpeechManager setRequestWillStart:]
  -[AXSpeechManager originalSpeechRateForJobOverride]
  -[AXSpeechManager setOriginalSpeechRateForJobOverride:]
  -[AXSpeechManager audioDeactivatorTimer]
  -[AXSpeechManager setAudioDeactivatorTimer:]
  -[AXSpeechManager wasSpeakingBeforeAudioInterruption]
  -[AXSpeechManager setWasSpeakingBeforeAudioInterruption:]
  -[AXSpeechManager didRequestStartSpeakingDuringAudioInterruption]
  -[AXSpeechManager setDidRequestStartSpeakingDuringAudioInterruption:]
  -[AXSpeechManager didRequestPauseSpeakingDuringAudioInterruption]
  -[AXSpeechManager setDidRequestPauseSpeakingDuringAudioInterruption:]
  -[AXSpeechManager didRequestResumeSpeakingDuringAudioInterruption]
  -[AXSpeechManager setDidRequestResumeSpeakingDuringAudioInterruption:]
  -[AXSpeechManager audioInterruptionStartedTime]
  -[AXSpeechManager setAudioInterruptionStartedTime:]
  -[AXSpeechManager shouldHandleAudioInterruptions]
  -[AXSpeechManager setShouldHandleAudioInterruptions:]


AXEmojiUtilities : NSObject
  // class methods
  +[AXEmojiUtilities stringByReplacingEmojiCharactersWithEmojiDescriptions:stringForPauses:language:rangeReplacements:appendEmojiSuffix:]
  +[AXEmojiUtilities emojiRangeFromString:withSearchRange:]
  +[AXEmojiUtilities _initializeEmojiStructures:]
  +[AXEmojiUtilities stringByRemovingEmojiCharacters:]
  +[AXEmojiUtilities enumerateEmojiCharactersInString:languageCode:withBlock:]


AXSpeechThread : NSThread
  // instance methods
  -[AXSpeechThread .cxx_destruct]
  -[AXSpeechThread stop]
  -[AXSpeechThread main]
  -[AXSpeechThread cancel]
  -[AXSpeechThread init]


01 00 0a00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVAudioSession 
01 00 0a00 /System/Library/Frameworks/AVFAudio.framework/AVFAudio: AVSpeechSynthesisVoice 
01 00 0100 /System/Library/PrivateFrameworks/AXCoreUtilities.framework/AXCoreUtilities: AXDispatchTimer 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSArray 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSAssertionHandler 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSBundle 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSCharacterSet 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSConstantArray 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDate 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSDictionary 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSLock 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMachPort 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSMutableArray 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSMutableString 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNotificationCenter 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSNumber 
01 00 0800 /usr/lib/libobjc.A.dylib: NSObject 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSProcessInfo 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSRegularExpression 
01 00 0b00 /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation: NSRunLoop 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSString 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSThread 
01 00 0600 /System/Library/Frameworks/Foundation.framework/Foundation: NSValue 
01 00 0400 /System/Library/PrivateFrameworks/TextToSpeech.framework/TextToSpeech: TTSAXResourceManager 
01 00 0400 /System/Library/PrivateFrameworks/TextToSpeech.framework/TextToSpeech: TTSAudioSessionChannel 
01 00 0400 /System/Library/PrivateFrameworks/TextToSpeech.framework/TextToSpeech: TTSSpeechRequest 
01 00 0400 /System/Library/PrivateFrameworks/TextToSpeech.framework/TextToSpeech: TTSSpeechSynthesizer 
01 00 0400 /System/Library/PrivateFrameworks/TextToSpeech.framework/TextToSpeech: TTSSpeechVoice 
01 00 0400 /System/Library/PrivateFrameworks/TextToSpeech.framework/TextToSpeech: TTSSubstitution 
